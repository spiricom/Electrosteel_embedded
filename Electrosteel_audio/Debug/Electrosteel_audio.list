
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00018b18  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c2c8  08018db0  08018db0  00028db0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025078  08025078  00059660  2**0
                  CONTENTS
  4 .ARM          00000000  08025078  08025078  00059660  2**0
                  CONTENTS
  5 .preinit_array 00000000  08025078  08025078  00059660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025078  08025078  00035078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802507c  0802507c  0003507c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ba0  20000000  08025080  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d588  20000ba0  08025c20  00060ba0  2**2
                  ALLOC
 10 .sram1_bss    00040000  24040000  24040000  00060000  2**5
                  ALLOC
 11 .sram2_dma_bss 00000880  30000000  30000000  00060000  2**5
                  ALLOC
 12 .sram2_bss    00044580  30002000  30002000  00062000  2**5
                  ALLOC
 13 .sram3_bss    00000080  38000000  38000000  00060000  2**5
                  ALLOC
 14 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 15 .itcmram      00009260  00000400  08025c20  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .sdram_bss    02000000  60000000  60000000  00060000  2**5
                  ALLOC
 17 .heap         00000000  2001e128  2001e128  00059660  2**0
                  CONTENTS
 18 .reserved_for_stack 00000000  2001e128  2001e128  00059660  2**0
                  CONTENTS
 19 .ARM.attributes 0000002e  00000000  00000000  00059660  2**0
                  CONTENTS, READONLY
 20 .comment      00000043  00000000  00000000  0005968e  2**0
                  CONTENTS, READONLY
 21 .debug_info   0009063c  00000000  00000000  000596d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 0000b8b0  00000000  00000000  000e9d0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 00047e43  00000000  00000000  000f55bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_aranges 00004488  00000000  00000000  0013d400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_rnglists 00007508  00000000  00000000  00141888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   0005a04c  00000000  00000000  00148d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    00015937  00000000  00000000  001a2ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_frame  0000ee0c  00000000  00000000  001b8714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000ba0 	.word	0x20000ba0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08018d20 	.word	0x08018d20

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000ba4 	.word	0x20000ba4
 80002d4:	08018d20 	.word	0x08018d20

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <arm_atan2_f32>:
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
    if (x > 0.0f)
 80002e8:	eef5 0ac0 	vcmpe.f32	s1, #0.0
{
 80002ec:	4601      	mov	r1, r0
    if (x > 0.0f)
 80002ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002f2:	dc11      	bgt.n	8000318 <arm_atan2_f32+0x30>
    {
        *result=arm_atan_f32(y/x);
        return(ARM_MATH_SUCCESS);
    }
    if (x < 0.0f)
 80002f4:	d43c      	bmi.n	8000370 <arm_atan2_f32+0x88>
               *result= PI;
            }
        }
        return(ARM_MATH_SUCCESS);
    }
    if (x == 0.0f)
 80002f6:	eef5 0a40 	vcmp.f32	s1, #0.0
 80002fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002fe:	f040 80de 	bne.w	80004be <arm_atan2_f32+0x1d6>
    {
        if (y > 0.0f)
 8000302:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800030a:	dc66      	bgt.n	80003da <arm_atan2_f32+0xf2>
        {
            *result=PIHALFF32;
            return(ARM_MATH_SUCCESS);
        }
        if (y < 0.0f)
 800030c:	f140 80d7 	bpl.w	80004be <arm_atan2_f32+0x1d6>
        {
            *result=-PIHALFF32;
 8000310:	4b7b      	ldr	r3, [pc, #492]	; (8000500 <arm_atan2_f32+0x218>)
            return(ARM_MATH_SUCCESS);
 8000312:	2000      	movs	r0, #0
            *result=-PIHALFF32;
 8000314:	600b      	str	r3, [r1, #0]
            return(ARM_MATH_SUCCESS);
 8000316:	4770      	bx	lr
        *result=arm_atan_f32(y/x);
 8000318:	ee80 7a20 	vdiv.f32	s14, s0, s1
   if (x < 0.0f)
 800031c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000324:	d472      	bmi.n	800040c <arm_atan2_f32+0x124>
   int sign=0;
 8000326:	2000      	movs	r0, #0
   if (x > 1.0f)
 8000328:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800032c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000334:	dd55      	ble.n	80003e2 <arm_atan2_f32+0xfa>
      x = 1.0f / x;
 8000336:	4a73      	ldr	r2, [pc, #460]	; (8000504 <arm_atan2_f32+0x21c>)
 8000338:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800033c:	eddf 7a72 	vldr	s15, [pc, #456]	; 8000508 <arm_atan2_f32+0x220>
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8000340:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800050c <arm_atan2_f32+0x224>
 8000344:	f102 0320 	add.w	r3, r2, #32
 8000348:	e001      	b.n	800034e <arm_atan2_f32+0x66>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 800034a:	ed73 7a01 	vldmdb	r3!, {s15}
 800034e:	eee6 7a87 	vfma.f32	s15, s13, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8000352:	429a      	cmp	r2, r3
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000354:	eeb0 7a67 	vmov.f32	s14, s15
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8000358:	d1f7      	bne.n	800034a <arm_atan2_f32+0x62>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 800035a:	eddf 7a6d 	vldr	s15, [pc, #436]	; 8000510 <arm_atan2_f32+0x228>
 800035e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   if (sign)
 8000362:	b108      	cbz	r0, 8000368 <arm_atan2_f32+0x80>
     res = -res;
 8000364:	eef1 7a67 	vneg.f32	s15, s15
        return(ARM_MATH_SUCCESS);
 8000368:	2000      	movs	r0, #0
        *result=arm_atan_f32(y/x);
 800036a:	edc1 7a00 	vstr	s15, [r1]
        return(ARM_MATH_SUCCESS);
 800036e:	4770      	bx	lr
        if (y > 0.0f)
 8000370:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000378:	dd4c      	ble.n	8000414 <arm_atan2_f32+0x12c>
           *result=arm_atan_f32(y/x) + PI;
 800037a:	ee80 7a20 	vdiv.f32	s14, s0, s1
   if (x < 0.0f)
 800037e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000386:	d47f      	bmi.n	8000488 <arm_atan2_f32+0x1a0>
   int sign=0;
 8000388:	2000      	movs	r0, #0
   if (x > 1.0f)
 800038a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800038e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000396:	dd7b      	ble.n	8000490 <arm_atan2_f32+0x1a8>
      x = 1.0f / x;
 8000398:	4a5a      	ldr	r2, [pc, #360]	; (8000504 <arm_atan2_f32+0x21c>)
 800039a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800039e:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8000508 <arm_atan2_f32+0x220>
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80003a2:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800050c <arm_atan2_f32+0x224>
 80003a6:	f102 0320 	add.w	r3, r2, #32
 80003aa:	e001      	b.n	80003b0 <arm_atan2_f32+0xc8>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80003ac:	ed73 7a01 	vldmdb	r3!, {s15}
 80003b0:	eee6 7a87 	vfma.f32	s15, s13, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80003b4:	429a      	cmp	r2, r3
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80003b6:	eeb0 7a67 	vmov.f32	s14, s15
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80003ba:	d1f7      	bne.n	80003ac <arm_atan2_f32+0xc4>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80003bc:	eddf 7a54 	vldr	s15, [pc, #336]	; 8000510 <arm_atan2_f32+0x228>
 80003c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
   if (sign)
 80003c4:	b108      	cbz	r0, 80003ca <arm_atan2_f32+0xe2>
     res = -res;
 80003c6:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) + PI;
 80003ca:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8000514 <arm_atan2_f32+0x22c>
        return(ARM_MATH_SUCCESS);
 80003ce:	2000      	movs	r0, #0
           *result=arm_atan_f32(y/x) + PI;
 80003d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003d4:	edc1 7a00 	vstr	s15, [r1]
 80003d8:	4770      	bx	lr
            *result=PIHALFF32;
 80003da:	4b4f      	ldr	r3, [pc, #316]	; (8000518 <arm_atan2_f32+0x230>)
            return(ARM_MATH_SUCCESS);
 80003dc:	2000      	movs	r0, #0
            *result=PIHALFF32;
 80003de:	600b      	str	r3, [r1, #0]
            return(ARM_MATH_SUCCESS);
 80003e0:	4770      	bx	lr
 80003e2:	4a48      	ldr	r2, [pc, #288]	; (8000504 <arm_atan2_f32+0x21c>)
   if (x > 1.0f)
 80003e4:	eddf 6a48 	vldr	s13, [pc, #288]	; 8000508 <arm_atan2_f32+0x220>
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80003e8:	eddf 7a48 	vldr	s15, [pc, #288]	; 800050c <arm_atan2_f32+0x224>
 80003ec:	f102 0320 	add.w	r3, r2, #32
 80003f0:	e001      	b.n	80003f6 <arm_atan2_f32+0x10e>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80003f2:	ed73 6a01 	vldmdb	r3!, {s13}
 80003f6:	eee7 6a27 	vfma.f32	s13, s14, s15
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80003fa:	429a      	cmp	r2, r3
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80003fc:	eef0 7a66 	vmov.f32	s15, s13
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8000400:	d1f7      	bne.n	80003f2 <arm_atan2_f32+0x10a>
     res += arm_atan_limited_f32(x);
 8000402:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800051c <arm_atan2_f32+0x234>
 8000406:	ee76 7a87 	vadd.f32	s15, s13, s14
 800040a:	e7aa      	b.n	8000362 <arm_atan2_f32+0x7a>
      x=-x;
 800040c:	eeb1 7a47 	vneg.f32	s14, s14
      sign=1;
 8000410:	2001      	movs	r0, #1
 8000412:	e789      	b.n	8000328 <arm_atan2_f32+0x40>
        else if (y < 0.0f)
 8000414:	d408      	bmi.n	8000428 <arm_atan2_f32+0x140>
            if (signbit(y))
 8000416:	ee10 3a10 	vmov	r3, s0
 800041a:	f013 4300 	ands.w	r3, r3, #2147483648	; 0x80000000
 800041e:	d051      	beq.n	80004c4 <arm_atan2_f32+0x1dc>
               *result= -PI;
 8000420:	4b3f      	ldr	r3, [pc, #252]	; (8000520 <arm_atan2_f32+0x238>)
        return(ARM_MATH_SUCCESS);
 8000422:	2000      	movs	r0, #0
               *result= -PI;
 8000424:	600b      	str	r3, [r1, #0]
 8000426:	4770      	bx	lr
           *result=arm_atan_f32(y/x) - PI;
 8000428:	ee80 7a20 	vdiv.f32	s14, s0, s1
   if (x < 0.0f)
 800042c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000434:	d45f      	bmi.n	80004f6 <arm_atan2_f32+0x20e>
   int sign=0;
 8000436:	2000      	movs	r0, #0
   if (x > 1.0f)
 8000438:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800043c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000444:	dd42      	ble.n	80004cc <arm_atan2_f32+0x1e4>
      x = 1.0f / x;
 8000446:	4a2f      	ldr	r2, [pc, #188]	; (8000504 <arm_atan2_f32+0x21c>)
 8000448:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800044c:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8000508 <arm_atan2_f32+0x220>
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8000450:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800050c <arm_atan2_f32+0x224>
 8000454:	f102 0320 	add.w	r3, r2, #32
 8000458:	e001      	b.n	800045e <arm_atan2_f32+0x176>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 800045a:	ed73 7a01 	vldmdb	r3!, {s15}
 800045e:	eee6 7a87 	vfma.f32	s15, s13, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8000462:	429a      	cmp	r2, r3
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000464:	eeb0 7a67 	vmov.f32	s14, s15
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8000468:	d1f7      	bne.n	800045a <arm_atan2_f32+0x172>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 800046a:	eddf 7a29 	vldr	s15, [pc, #164]	; 8000510 <arm_atan2_f32+0x228>
 800046e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   if (sign)
 8000472:	b108      	cbz	r0, 8000478 <arm_atan2_f32+0x190>
     res = -res;
 8000474:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) - PI;
 8000478:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8000514 <arm_atan2_f32+0x22c>
        return(ARM_MATH_SUCCESS);
 800047c:	2000      	movs	r0, #0
           *result=arm_atan_f32(y/x) - PI;
 800047e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000482:	edc1 7a00 	vstr	s15, [r1]
 8000486:	4770      	bx	lr
      x=-x;
 8000488:	eeb1 7a47 	vneg.f32	s14, s14
      sign=1;
 800048c:	2001      	movs	r0, #1
 800048e:	e77c      	b.n	800038a <arm_atan2_f32+0xa2>
 8000490:	4a1c      	ldr	r2, [pc, #112]	; (8000504 <arm_atan2_f32+0x21c>)
   if (x > 1.0f)
 8000492:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000508 <arm_atan2_f32+0x220>
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 8000496:	eddf 7a1d 	vldr	s15, [pc, #116]	; 800050c <arm_atan2_f32+0x224>
 800049a:	f102 0320 	add.w	r3, r2, #32
 800049e:	e001      	b.n	80004a4 <arm_atan2_f32+0x1bc>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80004a0:	ed73 6a01 	vldmdb	r3!, {s13}
 80004a4:	eee7 6a27 	vfma.f32	s13, s14, s15
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80004a8:	429a      	cmp	r2, r3
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80004aa:	eef0 7a66 	vmov.f32	s15, s13
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80004ae:	d1f7      	bne.n	80004a0 <arm_atan2_f32+0x1b8>
     res += arm_atan_limited_f32(x);
 80004b0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800051c <arm_atan2_f32+0x234>
 80004b4:	ee76 7a87 	vadd.f32	s15, s13, s14
   if (sign)
 80004b8:	2800      	cmp	r0, #0
 80004ba:	d086      	beq.n	80003ca <arm_atan2_f32+0xe2>
 80004bc:	e783      	b.n	80003c6 <arm_atan2_f32+0xde>
        }
    }
    

    return(ARM_MATH_NANINF);
 80004be:	f06f 0003 	mvn.w	r0, #3

}
 80004c2:	4770      	bx	lr
               *result= PI;
 80004c4:	4a17      	ldr	r2, [pc, #92]	; (8000524 <arm_atan2_f32+0x23c>)
        return(ARM_MATH_SUCCESS);
 80004c6:	4618      	mov	r0, r3
               *result= PI;
 80004c8:	600a      	str	r2, [r1, #0]
 80004ca:	4770      	bx	lr
 80004cc:	4a0d      	ldr	r2, [pc, #52]	; (8000504 <arm_atan2_f32+0x21c>)
   if (x > 1.0f)
 80004ce:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8000508 <arm_atan2_f32+0x220>
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80004d2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800050c <arm_atan2_f32+0x224>
 80004d6:	f102 0320 	add.w	r3, r2, #32
 80004da:	e001      	b.n	80004e0 <arm_atan2_f32+0x1f8>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80004dc:	ed73 6a01 	vldmdb	r3!, {s13}
 80004e0:	eee7 6a27 	vfma.f32	s13, s14, s15
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80004e4:	4293      	cmp	r3, r2
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80004e6:	eef0 7a66 	vmov.f32	s15, s13
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80004ea:	d1f7      	bne.n	80004dc <arm_atan2_f32+0x1f4>
     res += arm_atan_limited_f32(x);
 80004ec:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800051c <arm_atan2_f32+0x234>
 80004f0:	ee76 7a87 	vadd.f32	s15, s13, s14
 80004f4:	e7bd      	b.n	8000472 <arm_atan2_f32+0x18a>
      x=-x;
 80004f6:	eeb1 7a47 	vneg.f32	s14, s14
      sign=1;
 80004fa:	2001      	movs	r0, #1
 80004fc:	e79c      	b.n	8000438 <arm_atan2_f32+0x150>
 80004fe:	bf00      	nop
 8000500:	bfc90fdb 	.word	0xbfc90fdb
 8000504:	08018db0 	.word	0x08018db0
 8000508:	3e0945e7 	.word	0x3e0945e7
 800050c:	bd0492a5 	.word	0xbd0492a5
 8000510:	3fc90fdb 	.word	0x3fc90fdb
 8000514:	40490fdb 	.word	0x40490fdb
 8000518:	3fc90fdb 	.word	0x3fc90fdb
 800051c:	00000000 	.word	0x00000000
 8000520:	c0490fdb 	.word	0xc0490fdb
 8000524:	40490fdb 	.word	0x40490fdb

08000528 <arm_cos_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8000528:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800052c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80005a8 <arm_cos_f32+0x80>
 8000530:	eee0 7a07 	vfma.f32	s15, s0, s14

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
  n = (int32_t) in;
 8000538:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  if (in < 0.0f)
 800053c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000540:	d504      	bpl.n	800054c <arm_cos_f32+0x24>
  {
    n--;
 8000542:	ee17 3a10 	vmov	r3, s14
 8000546:	3b01      	subs	r3, #1
 8000548:	ee07 3a10 	vmov	s14, r3
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800054c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8000550:	eddf 6a16 	vldr	s13, [pc, #88]	; 80005ac <arm_cos_f32+0x84>
  in = in - (float32_t) n;
 8000554:	ee37 0ac7 	vsub.f32	s0, s15, s14
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8000558:	ee20 0a26 	vmul.f32	s0, s0, s13
  index = (uint16_t)findex;
 800055c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8000560:	ee17 3a90 	vmov	r3, s15
 8000564:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8000566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800056a:	d218      	bcs.n	800059e <arm_cos_f32+0x76>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800056c:	ee07 3a90 	vmov	s15, r3

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];
 8000570:	1c59      	adds	r1, r3, #1
  fract = findex - (float32_t) index;
 8000572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000576:	ee30 0a67 	vsub.f32	s0, s0, s15
  a = sinTable_f32[index];
 800057a:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <arm_cos_f32+0x88>)

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 800057c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  b = sinTable_f32[index+1];
 8000580:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  a = sinTable_f32[index];
 8000584:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  cosVal = (1.0f - fract) * a + fract * b;
 8000588:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800058c:	edd1 6a00 	vldr	s13, [r1]
 8000590:	ed92 7a00 	vldr	s14, [r2]
 8000594:	ee20 0a26 	vmul.f32	s0, s0, s13

  /* Return output value */
  return (cosVal);
}
 8000598:	eea7 0a87 	vfma.f32	s0, s15, s14
 800059c:	4770      	bx	lr
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 800059e:	ee30 0a66 	vsub.f32	s0, s0, s13
 80005a2:	2101      	movs	r1, #1
 80005a4:	2300      	movs	r3, #0
 80005a6:	e7e8      	b.n	800057a <arm_cos_f32+0x52>
 80005a8:	3e22f983 	.word	0x3e22f983
 80005ac:	44000000 	.word	0x44000000
 80005b0:	08018dd8 	.word	0x08018dd8

080005b4 <arm_fir_decimate_f32>:
void arm_fir_decimate_f32(
  const arm_fir_decimate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 80005b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        float32_t *px0;                                /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t x0, c0;                              /* Temporary variables to hold state and coefficient values */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 80005b8:	f890 9000 	ldrb.w	r9, [r0]
        float32_t acc1, acc2, acc3;
#endif

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (numTaps - 1U);
 80005bc:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80005c0:	8844      	ldrh	r4, [r0, #2]
        float32_t *pState = S->pState;                 /* State pointer */
 80005c2:	6885      	ldr	r5, [r0, #8]
  /* Initialize blkCnt with number of samples */
  blkCnt = outBlockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80005c4:	4599      	cmp	r9, r3
  pStateCur = S->pState + (numTaps - 1U);
 80005c6:	4426      	add	r6, r4
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80005c8:	f8d0 8004 	ldr.w	r8, [r0, #4]
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 80005cc:	fbb3 f7f9 	udiv	r7, r3, r9
  pStateCur = S->pState + (numTaps - 1U);
 80005d0:	eb05 0686 	add.w	r6, r5, r6, lsl #2
  while (blkCnt > 0U)
 80005d4:	d837      	bhi.n	8000646 <arm_fir_decimate_f32+0x92>
  {
    /* Copy decimation factor number of new input samples into the state buffer */
    i = S->M;
 80005d6:	464b      	mov	r3, r9
 80005d8:	46b6      	mov	lr, r6
 80005da:	468c      	mov	ip, r1

    do
    {
      *pStateCur++ = *pSrc++;
 80005dc:	ecfc 7a01 	vldmia	ip!, {s15}

    } while (--i);
 80005e0:	3b01      	subs	r3, #1
      *pStateCur++ = *pSrc++;
 80005e2:	ecee 7a01 	vstmia	lr!, {s15}
    } while (--i);
 80005e6:	d1f9      	bne.n	80005dc <arm_fir_decimate_f32+0x28>
      *pStateCur++ = *pSrc++;
 80005e8:	eb01 0189 	add.w	r1, r1, r9, lsl #2
 80005ec:	eb06 0689 	add.w	r6, r6, r9, lsl #2
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (tapCnt > 0U)
 80005f0:	b1b4      	cbz	r4, 8000620 <arm_fir_decimate_f32+0x6c>
 80005f2:	4623      	mov	r3, r4
    pb = pCoeffs;
 80005f4:	46c6      	mov	lr, r8
    while (tapCnt > 0U)
 80005f6:	46ac      	mov	ip, r5
    acc0 = 0.0f;
 80005f8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800064c <arm_fir_decimate_f32+0x98>

      /* Fetch 1 state variable */
      x0 = *px0++;

      /* Perform the multiply-accumulate */
      acc0 += x0 * c0;
 80005fc:	ecfe 6a01 	vldmia	lr!, {s13}
    while (tapCnt > 0U)
 8000600:	3b01      	subs	r3, #1
      acc0 += x0 * c0;
 8000602:	ecbc 7a01 	vldmia	ip!, {s14}
 8000606:	eee6 7a87 	vfma.f32	s15, s13, s14
    while (tapCnt > 0U)
 800060a:	d1f7      	bne.n	80005fc <arm_fir_decimate_f32+0x48>
      tapCnt--;
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 800060c:	7803      	ldrb	r3, [r0, #0]
  while (blkCnt > 0U)
 800060e:	3f01      	subs	r7, #1

    /* The result is in the accumulator, store in the destination buffer. */
    *pDst++ = acc0;
 8000610:	ece2 7a01 	vstmia	r2!, {s15}
    pState = pState + S->M;
 8000614:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  while (blkCnt > 0U)
 8000618:	d00b      	beq.n	8000632 <arm_fir_decimate_f32+0x7e>
    i = S->M;
 800061a:	f890 9000 	ldrb.w	r9, [r0]
 800061e:	e7da      	b.n	80005d6 <arm_fir_decimate_f32+0x22>
    pState = pState + S->M;
 8000620:	7803      	ldrb	r3, [r0, #0]
  while (blkCnt > 0U)
 8000622:	3f01      	subs	r7, #1
    acc0 = 0.0f;
 8000624:	eddf 7a09 	vldr	s15, [pc, #36]	; 800064c <arm_fir_decimate_f32+0x98>
    pState = pState + S->M;
 8000628:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    *pDst++ = acc0;
 800062c:	ece2 7a01 	vstmia	r2!, {s15}
  while (blkCnt > 0U)
 8000630:	d1f3      	bne.n	800061a <arm_fir_decimate_f32+0x66>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the satrt of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCur = S->pState;
 8000632:	6883      	ldr	r3, [r0, #8]
 8000634:	e003      	b.n	800063e <arm_fir_decimate_f32+0x8a>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
  {
    *pStateCur++ = *pState++;
 8000636:	f855 2b04 	ldr.w	r2, [r5], #4
 800063a:	f843 2b04 	str.w	r2, [r3], #4
  while (tapCnt > 0U)
 800063e:	3c01      	subs	r4, #1
 8000640:	d1f9      	bne.n	8000636 <arm_fir_decimate_f32+0x82>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 8000642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while (blkCnt > 0U)
 8000646:	462b      	mov	r3, r5
 8000648:	e7f9      	b.n	800063e <arm_fir_decimate_f32+0x8a>
 800064a:	bf00      	nop
 800064c:	00000000 	.word	0x00000000

08000650 <arm_fir_decimate_init_f32>:
        uint16_t numTaps,
        uint8_t M,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8000650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000652:	4616      	mov	r6, r2
 8000654:	e9dd 7206 	ldrd	r7, r2, [sp, #24]
  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 8000658:	fbb2 f4f6 	udiv	r4, r2, r6
 800065c:	fb06 2414 	mls	r4, r6, r4, r2
 8000660:	b96c      	cbnz	r4, 800067e <arm_fir_decimate_init_f32+0x2e>
  {
    /* Assign filter taps */
    S->numTaps = numTaps;

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 8000662:	6043      	str	r3, [r0, #4]

    /* Clear the state buffer. The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8000664:	1e4b      	subs	r3, r1, #1
 8000666:	4605      	mov	r5, r0
    S->numTaps = numTaps;
 8000668:	8041      	strh	r1, [r0, #2]
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 800066a:	441a      	add	r2, r3
 800066c:	4621      	mov	r1, r4
 800066e:	4638      	mov	r0, r7
 8000670:	0092      	lsls	r2, r2, #2
 8000672:	f016 f91d 	bl	80168b0 <memset>
    S->pState = pState;

    /* Assign Decimation Factor */
    S->M = M;

    status = ARM_MATH_SUCCESS;
 8000676:	4620      	mov	r0, r4
    S->pState = pState;
 8000678:	60af      	str	r7, [r5, #8]
    S->M = M;
 800067a:	702e      	strb	r6, [r5, #0]
  }

  return (status);

}
 800067c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ARM_MATH_LENGTH_ERROR;
 800067e:	f06f 0001 	mvn.w	r0, #1
}
 8000682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000684 <arm_fir_interpolate_f32>:
void arm_fir_interpolate_f32(
  const arm_fir_interpolate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8000684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000688:	4607      	mov	r7, r0
#if (1)
//#if !defined(ARM_MATH_CM0_FAMILY)

        float32_t *pState = S->pState;                 /* State pointer */
 800068a:	f8d0 a008 	ldr.w	sl, [r0, #8]
{
 800068e:	4691      	mov	r9, r2
        float32_t *pStateCur;                          /* Points to the current sample of the state */
        float32_t *ptr1;                               /* Temporary pointer for state buffer */
  const float32_t *ptr2;                               /* Temporary pointer for coefficient buffer */
        float32_t sum0;                                /* Accumulators */
        uint32_t i, blkCnt, tapCnt;                    /* Loop counters */
        uint32_t phaseLen = S->phaseLength;            /* Length of each polyphase filter component */
 8000690:	8840      	ldrh	r0, [r0, #2]
        float32_t c0, c1, c2, c3;
#endif

  /* S->pState buffer contains previous frame (phaseLen - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (phaseLen - 1U);
 8000692:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
{
 8000696:	b085      	sub	sp, #20
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000698:	f8d7 8004 	ldr.w	r8, [r7, #4]
  pStateCur = S->pState + (phaseLen - 1U);
 800069c:	4402      	add	r2, r0
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800069e:	9302      	str	r3, [sp, #8]
  pStateCur = S->pState + (phaseLen - 1U);
 80006a0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
  while (blkCnt > 0U)
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d04d      	beq.n	8000744 <arm_fir_interpolate_f32+0xc0>
        float32_t *pState = S->pState;                 /* State pointer */
 80006a8:	46d6      	mov	lr, sl
 80006aa:	f8cd a00c 	str.w	sl, [sp, #12]
 80006ae:	468b      	mov	fp, r1
 80006b0:	469a      	mov	sl, r3
 80006b2:	9201      	str	r2, [sp, #4]
  {
    /* Copy new input sample into the state buffer */
    *pStateCur++ = *pSrc++;
 80006b4:	9a01      	ldr	r2, [sp, #4]
 80006b6:	f85b 3b04 	ldr.w	r3, [fp], #4
 80006ba:	f842 3b04 	str.w	r3, [r2], #4

    /* Address modifier index of coefficient buffer */
    j = 1U;

    /* Loop over the Interpolation factor. */
    i = S->L;
 80006be:	783e      	ldrb	r6, [r7, #0]
    *pStateCur++ = *pSrc++;
 80006c0:	9201      	str	r2, [sp, #4]

    while (i > 0U)
 80006c2:	b35e      	cbz	r6, 800071c <arm_fir_interpolate_f32+0x98>
 80006c4:	4634      	mov	r4, r6
    j = 1U;
 80006c6:	2501      	movs	r5, #1
    while (i > 0U)
 80006c8:	46cc      	mov	ip, r9

      /* Initialize state pointer */
      ptr1 = pState;

      /* Initialize coefficient pointer */
      ptr2 = pCoeffs + (S->L - j);
 80006ca:	1b63      	subs	r3, r4, r5
 80006cc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
      /* Initialize tapCnt with number of samples */
      tapCnt = phaseLen;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (tapCnt > 0U)
 80006d0:	b1d0      	cbz	r0, 8000708 <arm_fir_interpolate_f32+0x84>
        sum0 += *ptr1++ * *ptr2;

        /* Upsampling is done by stuffing L-1 zeros between each sample.
         * So instead of multiplying zeros with coefficients,
         * Increment the coefficient pointer by interpolation factor times. */
        ptr2 += S->L;
 80006d2:	00a4      	lsls	r4, r4, #2
      sum0 = 0.0f;
 80006d4:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8000748 <arm_fir_interpolate_f32+0xc4>
        ptr2 += S->L;
 80006d8:	4602      	mov	r2, r0
 80006da:	4671      	mov	r1, lr
        sum0 += *ptr1++ * *ptr2;
 80006dc:	ed93 7a00 	vldr	s14, [r3]
      while (tapCnt > 0U)
 80006e0:	3a01      	subs	r2, #1
        sum0 += *ptr1++ * *ptr2;
 80006e2:	ecf1 6a01 	vldmia	r1!, {s13}
        ptr2 += S->L;
 80006e6:	4423      	add	r3, r4
        sum0 += *ptr1++ * *ptr2;
 80006e8:	eee6 7a87 	vfma.f32	s15, s13, s14
      while (tapCnt > 0U)
 80006ec:	d1f6      	bne.n	80006dc <arm_fir_interpolate_f32+0x58>
    while (i > 0U)
 80006ee:	42ae      	cmp	r6, r5

      /* The result is in the accumulator, store in the destination buffer. */
      *pDst++ = sum0;

      /* Increment the address modifier index of coefficient buffer */
      j++;
 80006f0:	f105 0301 	add.w	r3, r5, #1
      *pDst++ = sum0;
 80006f4:	ecec 7a01 	vstmia	ip!, {s15}
    while (i > 0U)
 80006f8:	d00e      	beq.n	8000718 <arm_fir_interpolate_f32+0x94>
      ptr2 = pCoeffs + (S->L - j);
 80006fa:	461d      	mov	r5, r3
 80006fc:	783c      	ldrb	r4, [r7, #0]
 80006fe:	1b63      	subs	r3, r4, r5
 8000700:	eb08 0383 	add.w	r3, r8, r3, lsl #2
      while (tapCnt > 0U)
 8000704:	2800      	cmp	r0, #0
 8000706:	d1e4      	bne.n	80006d2 <arm_fir_interpolate_f32+0x4e>
      sum0 = 0.0f;
 8000708:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8000748 <arm_fir_interpolate_f32+0xc4>
    while (i > 0U)
 800070c:	42ae      	cmp	r6, r5
      j++;
 800070e:	f105 0301 	add.w	r3, r5, #1
      *pDst++ = sum0;
 8000712:	ecec 7a01 	vstmia	ip!, {s15}
    while (i > 0U)
 8000716:	d1f0      	bne.n	80006fa <arm_fir_interpolate_f32+0x76>
      *pDst++ = sum0;
 8000718:	eb09 0986 	add.w	r9, r9, r6, lsl #2
  while (blkCnt > 0U)
 800071c:	f1ba 0a01 	subs.w	sl, sl, #1
      i--;
    }

    /* Advance the state pointer by 1
     * to process the next group of interpolation factor number samples */
    pState = pState + 1;
 8000720:	f10e 0e04 	add.w	lr, lr, #4
  while (blkCnt > 0U)
 8000724:	d1c6      	bne.n	80006b4 <arm_fir_interpolate_f32+0x30>
    pState = pState + 1;
 8000726:	e9dd 3a02 	ldrd	r3, sl, [sp, #8]
 800072a:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
  /* Processing is complete.
     Now copy the last phaseLen - 1 samples to the satrt of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCur = S->pState;
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	e003      	b.n	800073a <arm_fir_interpolate_f32+0xb6>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
  {
    *pStateCur++ = *pState++;
 8000732:	f85a 2b04 	ldr.w	r2, [sl], #4
 8000736:	f843 2b04 	str.w	r2, [r3], #4
  while (tapCnt > 0U)
 800073a:	3801      	subs	r0, #1
 800073c:	d1f9      	bne.n	8000732 <arm_fir_interpolate_f32+0xae>
    tapCnt--;
  }

#endif /* #if !defined(ARM_MATH_CM0_FAMILY) */

}
 800073e:	b005      	add	sp, #20
 8000740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (blkCnt > 0U)
 8000744:	4653      	mov	r3, sl
 8000746:	e7f8      	b.n	800073a <arm_fir_interpolate_f32+0xb6>
 8000748:	00000000 	.word	0x00000000

0800074c <arm_fir_interpolate_init_f32>:
        uint8_t L,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	4605      	mov	r5, r0
 8000750:	9e04      	ldr	r6, [sp, #16]
  arm_status status;

  /* The filter length must be a multiple of the interpolation factor */
  if ((numTaps % L) != 0U)
 8000752:	fbb2 f0f1 	udiv	r0, r2, r1
 8000756:	fb01 2410 	mls	r4, r1, r0, r2
 800075a:	b96c      	cbnz	r4, 8000778 <arm_fir_interpolate_init_f32+0x2c>
    status = ARM_MATH_LENGTH_ERROR;
  }
  else
  {
    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 800075c:	606b      	str	r3, [r5, #4]

    /* Assign polyPhaseLength */
    S->phaseLength = numTaps / L;

    /* Clear state buffer and size of buffer is always phaseLength + blockSize - 1 */
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(float32_t));
 800075e:	9b05      	ldr	r3, [sp, #20]
    S->L = L;
 8000760:	7029      	strb	r1, [r5, #0]
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(float32_t));
 8000762:	4621      	mov	r1, r4
 8000764:	1e5a      	subs	r2, r3, #1
    S->phaseLength = numTaps / L;
 8000766:	8068      	strh	r0, [r5, #2]
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(float32_t));
 8000768:	4402      	add	r2, r0
 800076a:	4630      	mov	r0, r6
 800076c:	0092      	lsls	r2, r2, #2
 800076e:	f016 f89f 	bl	80168b0 <memset>

    /* Assign state pointer */
    S->pState = pState;

    status = ARM_MATH_SUCCESS;
 8000772:	4620      	mov	r0, r4
    S->pState = pState;
 8000774:	60ae      	str	r6, [r5, #8]
  }

  return (status);
}
 8000776:	bd70      	pop	{r4, r5, r6, pc}
    status = ARM_MATH_LENGTH_ERROR;
 8000778:	f06f 0001 	mvn.w	r0, #1
}
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	bf00      	nop

08000780 <arm_sin_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8000780:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80007fc <arm_sin_f32+0x7c>
 8000784:	ee20 0a27 	vmul.f32	s0, s0, s15

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000788:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
  n = (int32_t) in;
 800078c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  if (in < 0.0f)
 8000790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000794:	d504      	bpl.n	80007a0 <arm_sin_f32+0x20>
  {
    n--;
 8000796:	ee17 3a90 	vmov	r3, s15
 800079a:	3b01      	subs	r3, #1
 800079c:	ee07 3a90 	vmov	s15, r3
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80007a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80007a4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000800 <arm_sin_f32+0x80>
  in = in - (float32_t) n;
 80007a8:	ee30 0a67 	vsub.f32	s0, s0, s15
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80007ac:	ee20 0a07 	vmul.f32	s0, s0, s14
  index = (uint16_t)findex;
 80007b0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80007b4:	ee17 3a90 	vmov	r3, s15
 80007b8:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 80007ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007be:	d218      	bcs.n	80007f2 <arm_sin_f32+0x72>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80007c0:	ee07 3a90 	vmov	s15, r3

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];
 80007c4:	1c59      	adds	r1, r3, #1
  fract = findex - (float32_t) index;
 80007c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007ca:	ee30 0a67 	vsub.f32	s0, s0, s15
  a = sinTable_f32[index];
 80007ce:	4a0d      	ldr	r2, [pc, #52]	; (8000804 <arm_sin_f32+0x84>)

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 80007d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
  b = sinTable_f32[index+1];
 80007d4:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  a = sinTable_f32[index];
 80007d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  sinVal = (1.0f - fract) * a + fract * b;
 80007dc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80007e0:	edd1 6a00 	vldr	s13, [r1]
 80007e4:	ed92 7a00 	vldr	s14, [r2]
 80007e8:	ee20 0a26 	vmul.f32	s0, s0, s13

  /* Return output value */
  return (sinVal);
}
 80007ec:	eea7 0a87 	vfma.f32	s0, s15, s14
 80007f0:	4770      	bx	lr
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 80007f2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80007f6:	2101      	movs	r1, #1
 80007f8:	2300      	movs	r3, #0
 80007fa:	e7e8      	b.n	80007ce <arm_sin_f32+0x4e>
 80007fc:	3e22f983 	.word	0x3e22f983
 8000800:	44000000 	.word	0x44000000
 8000804:	08018dd8 	.word	0x08018dd8

08000808 <dbToATableLookup>:
    uint32_t inAmpIndex = LEAF_clip (0, (in * atodbTableScalar) - atodbTableOffset, ATODB_TABLE_SIZE_MINUS_ONE);
    return atoDbTable[inAmpIndex];
}

float FORCE_INLINE dbToATableLookup(float in)
{
 8000808:	b508      	push	{r3, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
 800080a:	4a18      	ldr	r2, [pc, #96]	; (800086c <dbToATableLookup+0x64>)
{
 800080c:	eef0 7a40 	vmov.f32	s15, s0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <dbToATableLookup+0x68>)
 8000812:	edd2 0a00 	vldr	s1, [r2]
 8000816:	ed93 7a00 	vldr	s14, [r3]
 800081a:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8000874 <dbToATableLookup+0x6c>
 800081e:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8000822:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8000878 <dbToATableLookup+0x70>
 8000826:	f011 f8ad 	bl	8011984 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
 800082a:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    if (inDBIndexPlusOne > DBTOA_TABLE_SIZE_MINUS_ONE)
    {
    	inDBIndexPlusOne = DBTOA_TABLE_SIZE_MINUS_ONE;
    }
    float alpha = floatIndex - (float)inDBIndex;
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 800082e:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8000832:	4a12      	ldr	r2, [pc, #72]	; (800087c <dbToATableLookup+0x74>)
 8000834:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    uint32_t inDBIndex = (uint32_t) floatIndex;
 8000838:	ee17 3a10 	vmov	r3, s14
    float alpha = floatIndex - (float)inDBIndex;
 800083c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
 8000840:	1c59      	adds	r1, r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 8000842:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    float alpha = floatIndex - (float)inDBIndex;
 8000846:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 800084a:	4281      	cmp	r1, r0
 800084c:	ed93 7a00 	vldr	s14, [r3]
 8000850:	bf28      	it	cs
 8000852:	4601      	movcs	r1, r0
 8000854:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8000858:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800085c:	edd2 6a00 	vldr	s13, [r2]
 8000860:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 8000864:	eea7 0a27 	vfma.f32	s0, s14, s15
 8000868:	bd08      	pop	{r3, pc}
 800086a:	bf00      	nop
 800086c:	200013a0 	.word	0x200013a0
 8000870:	200013a4 	.word	0x200013a4
 8000874:	467ffc00 	.word	0x467ffc00
 8000878:	00000000 	.word	0x00000000
 800087c:	30002000 	.word	0x30002000

08000880 <mtofTableLookup>:
}



float FORCE_INLINE mtofTableLookup(float tempMIDI)
{
 8000880:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 8000884:	ed9f 1a15 	vldr	s2, [pc, #84]	; 80008dc <mtofTableLookup+0x5c>
 8000888:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80008e0 <mtofTableLookup+0x60>
{
 800088c:	b508      	push	{r3, lr}
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 800088e:	f011 f879 	bl	8011984 <LEAF_clip>
 8000892:	eddf 6a14 	vldr	s13, [pc, #80]	; 80008e4 <mtofTableLookup+0x64>
 8000896:	eddf 7a14 	vldr	s15, [pc, #80]	; 80008e8 <mtofTableLookup+0x68>
	int tempIndexI = (int)tempIndexF;
	tempIndexF = tempIndexF -tempIndexI;
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 800089a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 800089e:	4a13      	ldr	r2, [pc, #76]	; (80008ec <mtofTableLookup+0x6c>)
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 80008a0:	eee0 7a26 	vfma.f32	s15, s0, s13
	int tempIndexI = (int)tempIndexF;
 80008a4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80008a8:	ee16 3a90 	vmov	r3, s13
	tempIndexF = tempIndexF -tempIndexI;
 80008ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 80008b0:	1c59      	adds	r1, r3, #1
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 80008b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
	tempIndexF = tempIndexF -tempIndexI;
 80008b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 80008ba:	f3c1 010e 	ubfx	r1, r1, #0, #15
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 80008be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 80008c2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 80008c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80008ca:	edd3 6a00 	vldr	s13, [r3]
 80008ce:	ed92 6a00 	vldr	s12, [r2]
 80008d2:	ee27 0a86 	vmul.f32	s0, s15, s12
}
 80008d6:	eea7 0a26 	vfma.f32	s0, s14, s13
 80008da:	bd08      	pop	{r3, pc}
 80008dc:	43230000 	.word	0x43230000
 80008e0:	c3230000 	.word	0xc3230000
 80008e4:	42c80000 	.word	0x42c80000
 80008e8:	46800000 	.word	0x46800000
 80008ec:	30022000 	.word	0x30022000

080008f0 <audioInit>:


void audioInit()
{
 80008f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 80008f4:	4c8f      	ldr	r4, [pc, #572]	; (8000b34 <audioInit+0x244>)
 80008f6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80008fa:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8000b38 <audioInit+0x248>
 80008fe:	4620      	mov	r0, r4
 8000900:	498e      	ldr	r1, [pc, #568]	; (8000b3c <audioInit+0x24c>)
 8000902:	4b8f      	ldr	r3, [pc, #572]	; (8000b40 <audioInit+0x250>)
{
 8000904:	ed2d 8b04 	vpush	{d8-d9}
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000908:	f015 ff42 	bl	8016790 <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 800090c:	4623      	mov	r3, r4
 800090e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000912:	498c      	ldr	r1, [pc, #560]	; (8000b44 <audioInit+0x254>)
 8000914:	488c      	ldr	r0, [pc, #560]	; (8000b48 <audioInit+0x258>)
 8000916:	f011 fc97 	bl	8012248 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 800091a:	4623      	mov	r3, r4
 800091c:	f04f 72f0 	mov.w	r2, #31457280	; 0x1e00000
 8000920:	498a      	ldr	r1, [pc, #552]	; (8000b4c <audioInit+0x25c>)
 8000922:	488b      	ldr	r0, [pc, #556]	; (8000b50 <audioInit+0x260>)
 8000924:	f011 fc90 	bl	8012248 <tMempool_init>

	leaf.clearOnAllocation = 1;
 8000928:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 800092a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800092e:	4889      	ldr	r0, [pc, #548]	; (8000b54 <audioInit+0x264>)
 8000930:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000934:	eddf 1a88 	vldr	s3, [pc, #544]	; 8000b58 <audioInit+0x268>
 8000938:	eddf 0a88 	vldr	s1, [pc, #544]	; 8000b5c <audioInit+0x26c>
 800093c:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8000b60 <audioInit+0x270>
	leaf.clearOnAllocation = 1;
 8000940:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8000942:	f011 f8d1 	bl	8011ae8 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;

	for (int i = 0; i < 12; i++)
 8000946:	2300      	movs	r3, #0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 8000948:	4886      	ldr	r0, [pc, #536]	; (8000b64 <audioInit+0x274>)
 800094a:	4c87      	ldr	r4, [pc, #540]	; (8000b68 <audioInit+0x278>)
 800094c:	4987      	ldr	r1, [pc, #540]	; (8000b6c <audioInit+0x27c>)
	{
		previousStringInputs[i]	= 0;
 800094e:	461a      	mov	r2, r3
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 8000950:	6004      	str	r4, [r0, #0]
		previousStringInputs[i]	= 0;
 8000952:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < 12; i++)
 8000956:	3301      	adds	r3, #1
 8000958:	2b0c      	cmp	r3, #12
 800095a:	d1fa      	bne.n	8000952 <audioInit+0x62>
 800095c:	4c84      	ldr	r4, [pc, #528]	; (8000b70 <audioInit+0x280>)



	for (int i = 0; i < 256; i++)
	{
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 800095e:	eddf 8a85 	vldr	s17, [pc, #532]	; 8000b74 <audioInit+0x284>
 8000962:	ed9f 8a85 	vldr	s16, [pc, #532]	; 8000b78 <audioInit+0x288>
 8000966:	f504 6580 	add.w	r5, r4, #1024	; 0x400
 800096a:	f018 fa09 	bl	8018d80 <__randomNumber_veneer>
 800096e:	eef0 7a48 	vmov.f32	s15, s16
 8000972:	eee0 7a28 	vfma.f32	s15, s0, s17
 8000976:	ece4 7a01 	vstmia	r4!, {s15}
	for (int i = 0; i < 256; i++)
 800097a:	42ac      	cmp	r4, r5
 800097c:	d1f5      	bne.n	800096a <audioInit+0x7a>
	}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
 800097e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000982:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8000b7c <audioInit+0x28c>
 8000986:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098a:	487d      	ldr	r0, [pc, #500]	; (8000b80 <audioInit+0x290>)
 800098c:	f011 f910 	bl	8011bb0 <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 50.0f);
 8000990:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8000b84 <audioInit+0x294>
 8000994:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8000b88 <audioInit+0x298>
 8000998:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800099c:	487b      	ldr	r0, [pc, #492]	; (8000b8c <audioInit+0x29c>)
 800099e:	f011 f92b 	bl	8011bf8 <LEAF_generate_dbtoa>

	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
 80009a2:	4b7b      	ldr	r3, [pc, #492]	; (8000b90 <audioInit+0x2a0>)
 80009a4:	4a7b      	ldr	r2, [pc, #492]	; (8000b94 <audioInit+0x2a4>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
 80009a6:	497c      	ldr	r1, [pc, #496]	; (8000b98 <audioInit+0x2a8>)
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
 80009a8:	601a      	str	r2, [r3, #0]
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 80009aa:	4b7c      	ldr	r3, [pc, #496]	; (8000b9c <audioInit+0x2ac>)
 80009ac:	4a7c      	ldr	r2, [pc, #496]	; (8000ba0 <audioInit+0x2b0>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
 80009ae:	487d      	ldr	r0, [pc, #500]	; (8000ba4 <audioInit+0x2b4>)
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 80009b0:	601a      	str	r2, [r3, #0]
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 80009b2:	4b7d      	ldr	r3, [pc, #500]	; (8000ba8 <audioInit+0x2b8>)
 80009b4:	4a7d      	ldr	r2, [pc, #500]	; (8000bac <audioInit+0x2bc>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
 80009b6:	6008      	str	r0, [r1, #0]

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 80009b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009bc:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8000bb0 <audioInit+0x2c0>
 80009c0:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8000bb4 <audioInit+0x2c4>
 80009c4:	487c      	ldr	r0, [pc, #496]	; (8000bb8 <audioInit+0x2c8>)
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 80009c6:	601a      	str	r2, [r3, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 80009c8:	f011 f93c 	bl	8011c44 <LEAF_generate_mtof>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 80009cc:	4b7b      	ldr	r3, [pc, #492]	; (8000bbc <audioInit+0x2cc>)
		numStringsThisBoard = 2;
 80009ce:	2002      	movs	r0, #2
 80009d0:	4c7b      	ldr	r4, [pc, #492]	; (8000bc0 <audioInit+0x2d0>)
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 80009d2:	781b      	ldrb	r3, [r3, #0]
		numStringsThisBoard = 2;
 80009d4:	497b      	ldr	r1, [pc, #492]	; (8000bc4 <audioInit+0x2d4>)
 80009d6:	f104 0650 	add.w	r6, r4, #80	; 0x50
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 80009da:	4a7b      	ldr	r2, [pc, #492]	; (8000bc8 <audioInit+0x2d8>)
 80009dc:	005b      	lsls	r3, r3, #1


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 20; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 80009de:	4d55      	ldr	r5, [pc, #340]	; (8000b34 <audioInit+0x244>)
 80009e0:	eddf 8a7a 	vldr	s17, [pc, #488]	; 8000bcc <audioInit+0x2dc>
 80009e4:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8000b5c <audioInit+0x26c>
		numStringsThisBoard = 2;
 80009e8:	7008      	strb	r0, [r1, #0]
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 80009ea:	eddf 0a78 	vldr	s1, [pc, #480]	; 8000bcc <audioInit+0x2dc>
 80009ee:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8000b5c <audioInit+0x26c>
 80009f2:	4950      	ldr	r1, [pc, #320]	; (8000b34 <audioInit+0x244>)
 80009f4:	4876      	ldr	r0, [pc, #472]	; (8000bd0 <audioInit+0x2e0>)
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 80009f6:	6013      	str	r3, [r2, #0]
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 80009f8:	f00d ff3a 	bl	800e870 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 80009fc:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
 80009fe:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000a00:	eef0 0a68 	vmov.f32	s1, s17
 8000a04:	4629      	mov	r1, r5
 8000a06:	eeb0 0a48 	vmov.f32	s0, s16
 8000a0a:	f00d ff31 	bl	800e870 <tExpSmooth_init>
	for (int i = 0; i < 20; i++)
 8000a0e:	42a6      	cmp	r6, r4
 8000a10:	d1f4      	bne.n	80009fc <audioInit+0x10c>
 8000a12:	4c70      	ldr	r4, [pc, #448]	; (8000bd4 <audioInit+0x2e4>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 8000a14:	4e47      	ldr	r6, [pc, #284]	; (8000b34 <audioInit+0x244>)
 8000a16:	eddf 8a6d 	vldr	s17, [pc, #436]	; 8000bcc <audioInit+0x2dc>
 8000a1a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000a1e:	ed9f 8a4f 	vldr	s16, [pc, #316]	; 8000b5c <audioInit+0x26c>
 8000a22:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
 8000a24:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 8000a26:	eef0 0a68 	vmov.f32	s1, s17
 8000a2a:	4631      	mov	r1, r6
 8000a2c:	eeb0 0a48 	vmov.f32	s0, s16
 8000a30:	f00d ff1e 	bl	800e870 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
 8000a34:	42a5      	cmp	r5, r4
 8000a36:	d1f4      	bne.n	8000a22 <audioInit+0x132>
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 8000a38:	493e      	ldr	r1, [pc, #248]	; (8000b34 <audioInit+0x244>)
 8000a3a:	eddf 0a67 	vldr	s1, [pc, #412]	; 8000bd8 <audioInit+0x2e8>
 8000a3e:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8000b5c <audioInit+0x26c>
 8000a42:	4866      	ldr	r0, [pc, #408]	; (8000bdc <audioInit+0x2ec>)
 8000a44:	f00d ff14 	bl	800e870 <tExpSmooth_init>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 8000a48:	493a      	ldr	r1, [pc, #232]	; (8000b34 <audioInit+0x244>)
 8000a4a:	eddf 0a65 	vldr	s1, [pc, #404]	; 8000be0 <audioInit+0x2f0>
 8000a4e:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8000be4 <audioInit+0x2f4>
 8000a52:	4865      	ldr	r0, [pc, #404]	; (8000be8 <audioInit+0x2f8>)
 8000a54:	f00c fd72 	bl	800d53c <tEnvelopeFollower_init>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 8000a58:	4936      	ldr	r1, [pc, #216]	; (8000b34 <audioInit+0x244>)
 8000a5a:	4c64      	ldr	r4, [pc, #400]	; (8000bec <audioInit+0x2fc>)

	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{


		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000a5c:	460d      	mov	r5, r1
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 8000a5e:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8000bd8 <audioInit+0x2e8>
 8000a62:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8000b5c <audioInit+0x26c>
 8000a66:	f104 0808 	add.w	r8, r4, #8
 8000a6a:	4861      	ldr	r0, [pc, #388]	; (8000bf0 <audioInit+0x300>)
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000a6c:	ed9f 9a61 	vldr	s18, [pc, #388]	; 8000bf4 <audioInit+0x304>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 8000a70:	f00d fefe 	bl	800e870 <tExpSmooth_init>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000a74:	eddf 8a39 	vldr	s17, [pc, #228]	; 8000b5c <audioInit+0x26c>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 8000a78:	4629      	mov	r1, r5
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000a7a:	ed9f 8a42 	vldr	s16, [pc, #264]	; 8000b84 <audioInit+0x294>


		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 8000a7e:	4f5e      	ldr	r7, [pc, #376]	; (8000bf8 <audioInit+0x308>)
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 8000a80:	4e5e      	ldr	r6, [pc, #376]	; (8000bfc <audioInit+0x30c>)
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 8000a82:	eddf 0a57 	vldr	s1, [pc, #348]	; 8000be0 <audioInit+0x2f0>
 8000a86:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8000be4 <audioInit+0x2f4>
 8000a8a:	485d      	ldr	r0, [pc, #372]	; (8000c00 <audioInit+0x310>)
 8000a8c:	f00c fd56 	bl	800d53c <tEnvelopeFollower_init>
	audioInitAdditive();
 8000a90:	f018 f982 	bl	8018d98 <__audioInitAdditive_veneer>
	audioInitString1();
 8000a94:	f018 f968 	bl	8018d68 <__audioInitString1_veneer>
	audioInitVocal();
 8000a98:	f018 f986 	bl	8018da8 <__audioInitVocal_veneer>
	audioInitSynth();
 8000a9c:	f002 fa1c 	bl	8002ed8 <audioInitSynth>
	audioInitString3();
 8000aa0:	f018 f94a 	bl	8018d38 <__audioInitString3_veneer>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000aa4:	eef0 1a49 	vmov.f32	s3, s18
 8000aa8:	462b      	mov	r3, r5
 8000aaa:	eeb0 1a68 	vmov.f32	s2, s17
 8000aae:	4620      	mov	r0, r4
 8000ab0:	eef0 0a48 	vmov.f32	s1, s16
 8000ab4:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8000b5c <audioInit+0x26c>
 8000ab8:	4926      	ldr	r1, [pc, #152]	; (8000b54 <audioInit+0x264>)
 8000aba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000abe:	f00d fc13 	bl	800e2e8 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 8000ac2:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000ac6:	462a      	mov	r2, r5
 8000ac8:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8000c04 <audioInit+0x314>
 8000acc:	2103      	movs	r1, #3
 8000ace:	4638      	mov	r0, r7
 8000ad0:	f00f f8ae 	bl	800fc30 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 8000ad4:	462a      	mov	r2, r5
 8000ad6:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8000c08 <audioInit+0x318>
 8000ada:	2101      	movs	r1, #1
 8000adc:	4630      	mov	r0, r6
 8000ade:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8000c0c <audioInit+0x31c>
 8000ae2:	f00f f8a5 	bl	800fc30 <tVZFilter_init>
		//tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values


		tVZFilter_setFreq(&noiseFilt, faster_mtof(0.9f * 128.0f));
 8000ae6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8000c10 <audioInit+0x320>
 8000aea:	f011 f9cb 	bl	8011e84 <faster_mtof>
 8000aee:	4638      	mov	r0, r7
 8000af0:	f00e fde0 	bl	800f6b4 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
 8000af4:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8000c14 <audioInit+0x324>
 8000af8:	f011 f9c4 	bl	8011e84 <faster_mtof>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000afc:	3404      	adds	r4, #4
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
 8000afe:	4630      	mov	r0, r6
 8000b00:	f00e fdd8 	bl	800f6b4 <tVZFilter_setFreq>

		tNoise_init(&myNoise, WhiteNoise, &leaf);
 8000b04:	462a      	mov	r2, r5
 8000b06:	2100      	movs	r1, #0
 8000b08:	4843      	ldr	r0, [pc, #268]	; (8000c18 <audioInit+0x328>)
 8000b0a:	f011 ff8d 	bl	8012a28 <tNoise_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000b0e:	45a0      	cmp	r8, r4
 8000b10:	d1c8      	bne.n	8000aa4 <audioInit+0x1b4>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
 8000b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b16:	2100      	movs	r1, #0
 8000b18:	4840      	ldr	r0, [pc, #256]	; (8000c1c <audioInit+0x32c>)
 8000b1a:	f015 fec9 	bl	80168b0 <memset>
	}

	audioFrameFunction = audioFrameSynth;
 8000b1e:	4b40      	ldr	r3, [pc, #256]	; (8000c20 <audioInit+0x330>)
 8000b20:	4a40      	ldr	r2, [pc, #256]	; (8000c24 <audioInit+0x334>)
	HAL_Delay(1);
 8000b22:	2001      	movs	r0, #1
	audioFrameFunction = audioFrameSynth;
 8000b24:	601a      	str	r2, [r3, #0]

}
 8000b26:	ecbd 8b04 	vpop	{d8-d9}
 8000b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_Delay(1);
 8000b2e:	f002 bfe7 	b.w	8003b00 <HAL_Delay>
 8000b32:	bf00      	nop
 8000b34:	20005484 	.word	0x20005484
 8000b38:	473b8000 	.word	0x473b8000
 8000b3c:	2000596c 	.word	0x2000596c
 8000b40:	00001aa1 	.word	0x00001aa1
 8000b44:	24040000 	.word	0x24040000
 8000b48:	200054d8 	.word	0x200054d8
 8000b4c:	60000000 	.word	0x60000000
 8000b50:	20005480 	.word	0x20005480
 8000b54:	200013a8 	.word	0x200013a8
 8000b58:	ba51b717 	.word	0xba51b717
 8000b5c:	00000000 	.word	0x00000000
 8000b60:	3a83126f 	.word	0x3a83126f
 8000b64:	200053a8 	.word	0x200053a8
 8000b68:	457ff000 	.word	0x457ff000
 8000b6c:	20005550 	.word	0x20005550
 8000b70:	20005568 	.word	0x20005568
 8000b74:	3ecccccd 	.word	0x3ecccccd
 8000b78:	3f4ccccd 	.word	0x3f4ccccd
 8000b7c:	3727c5ac 	.word	0x3727c5ac
 8000b80:	30012000 	.word	0x30012000
 8000b84:	42480000 	.word	0x42480000
 8000b88:	c2b40000 	.word	0xc2b40000
 8000b8c:	30002000 	.word	0x30002000
 8000b90:	2000137c 	.word	0x2000137c
 8000b94:	467ffca8 	.word	0x467ffca8
 8000b98:	20001378 	.word	0x20001378
 8000b9c:	200013a4 	.word	0x200013a4
 8000ba0:	42ea0af9 	.word	0x42ea0af9
 8000ba4:	3e27c37b 	.word	0x3e27c37b
 8000ba8:	200013a0 	.word	0x200013a0
 8000bac:	c6248fb7 	.word	0xc6248fb7
 8000bb0:	4323d666 	.word	0x4323d666
 8000bb4:	c323d666 	.word	0xc323d666
 8000bb8:	30022000 	.word	0x30022000
 8000bbc:	200144e5 	.word	0x200144e5
 8000bc0:	20005430 	.word	0x20005430
 8000bc4:	20000694 	.word	0x20000694
 8000bc8:	200053bc 	.word	0x200053bc
 8000bcc:	3a03126f 	.word	0x3a03126f
 8000bd0:	2001444c 	.word	0x2001444c
 8000bd4:	2000551c 	.word	0x2000551c
 8000bd8:	3c23d70a 	.word	0x3c23d70a
 8000bdc:	20001394 	.word	0x20001394
 8000be0:	3f7fd220 	.word	0x3f7fd220
 8000be4:	38d1b717 	.word	0x38d1b717
 8000be8:	2000138c 	.word	0x2000138c
 8000bec:	200053b4 	.word	0x200053b4
 8000bf0:	20001398 	.word	0x20001398
 8000bf4:	43480000 	.word	0x43480000
 8000bf8:	200054e4 	.word	0x200054e4
 8000bfc:	200054e8 	.word	0x200054e8
 8000c00:	20001390 	.word	0x20001390
 8000c04:	44bb8000 	.word	0x44bb8000
 8000c08:	3f666666 	.word	0x3f666666
 8000c0c:	44480000 	.word	0x44480000
 8000c10:	42e66666 	.word	0x42e66666
 8000c14:	42cccccd 	.word	0x42cccccd
 8000c18:	200054dc 	.word	0x200054dc
 8000c1c:	30000000 	.word	0x30000000
 8000c20:	20001380 	.word	0x20001380
 8000c24:	00008781 	.word	0x00008781

08000c28 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8000c28:	b510      	push	{r4, lr}
 8000c2a:	4604      	mov	r4, r0
	HAL_Delay(1);
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f002 ff67 	bl	8003b00 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8000c32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c36:	4903      	ldr	r1, [pc, #12]	; (8000c44 <audioStart+0x1c>)
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f008 f85d 	bl	8008cf8 <HAL_SAI_Transmit_DMA>
 8000c3e:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <audioStart+0x20>)
 8000c40:	7018      	strb	r0, [r3, #0]
	//receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
}
 8000c42:	bd10      	pop	{r4, pc}
 8000c44:	30000000 	.word	0x30000000
 8000c48:	2001443c 	.word	0x2001443c

08000c4c <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8000c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8000c52:	b082      	sub	sp, #8
 8000c54:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000c56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c5a:	483b      	ldr	r0, [pc, #236]	; (8000d48 <AudioCodec_init+0xfc>)
 8000c5c:	f004 ff1e 	bl	8005a9c <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8000c60:	2002      	movs	r0, #2
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8000c62:	4c3a      	ldr	r4, [pc, #232]	; (8000d4c <AudioCodec_init+0x100>)
	HAL_Delay(2);
 8000c64:	f002 ff4c 	bl	8003b00 <HAL_Delay>
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c68:	4f39      	ldr	r7, [pc, #228]	; (8000d50 <AudioCodec_init+0x104>)
	myI2cData[0] = 0x07;
 8000c6a:	f240 3307 	movw	r3, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c6e:	4e39      	ldr	r6, [pc, #228]	; (8000d54 <AudioCodec_init+0x108>)
 8000c70:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8000c72:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c74:	2120      	movs	r1, #32
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	4628      	mov	r0, r5
 8000c7a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8000d5c <AudioCodec_init+0x110>
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	8833      	ldrh	r3, [r6, #0]
 8000c82:	f005 f89d 	bl	8005dc0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c8a:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c8e:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x01;
 8000c90:	f244 1301 	movw	r3, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c94:	2120      	movs	r1, #32
 8000c96:	4628      	mov	r0, r5
	myI2cData[0] = 0x01;
 8000c98:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c9a:	8833      	ldrh	r3, [r6, #0]
 8000c9c:	f005 f890 	bl	8005dc0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000ca4:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000ca8:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x02;
 8000caa:	2302      	movs	r3, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cac:	2120      	movs	r1, #32
 8000cae:	4628      	mov	r0, r5
	myI2cData[0] = 0x02;
 8000cb0:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cb2:	8833      	ldrh	r3, [r6, #0]
 8000cb4:	f005 f884 	bl	8005dc0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cbc:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cc0:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x03;
 8000cc2:	f647 1303 	movw	r3, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	4628      	mov	r0, r5
	myI2cData[0] = 0x03;
 8000cca:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000ccc:	8833      	ldrh	r3, [r6, #0]
 8000cce:	f005 f877 	bl	8005dc0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cd6:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cda:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x04;
 8000cdc:	f44f 7382 	mov.w	r3, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	4628      	mov	r0, r5
	myI2cData[0] = 0x04;
 8000ce4:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000ce6:	8833      	ldrh	r3, [r6, #0]
 8000ce8:	f005 f86a 	bl	8005dc0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cf0:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cf4:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x05;
 8000cf6:	f240 1305 	movw	r3, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	4628      	mov	r0, r5
	myI2cData[0] = 0x05;
 8000cfe:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d00:	8833      	ldrh	r3, [r6, #0]
 8000d02:	f005 f85d 	bl	8005dc0 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d0a:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d0e:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x06;
 8000d10:	f241 0306 	movw	r3, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d14:	2120      	movs	r1, #32
 8000d16:	4628      	mov	r0, r5
	myI2cData[0] = 0x06;
 8000d18:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d1a:	8833      	ldrh	r3, [r6, #0]
 8000d1c:	f005 f850 	bl	8005dc0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d20:	683a      	ldr	r2, [r7, #0]
	myI2cData[0] = 0x07;
 8000d22:	f240 2107 	movw	r1, #519	; 0x207
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d26:	8833      	ldrh	r3, [r6, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d28:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	9200      	str	r2, [sp, #0]
 8000d30:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8000d32:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d34:	2120      	movs	r1, #32
 8000d36:	f005 f843 	bl	8005dc0 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <AudioCodec_init+0x10c>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]

}
 8000d40:	b002      	add	sp, #8
 8000d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d46:	bf00      	nop
 8000d48:	58020800 	.word	0x58020800
 8000d4c:	20014454 	.word	0x20014454
 8000d50:	200008a0 	.word	0x200008a0
 8000d54:	200008a4 	.word	0x200008a4
 8000d58:	2000139c 	.word	0x2000139c
 8000d5c:	20014456 	.word	0x20014456

08000d60 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d60:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_DMA_Init+0x74>)

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	210a      	movs	r1, #10
 8000d66:	200c      	movs	r0, #12
{
 8000d68:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6a:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8000d6e:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d70:	f044 0401 	orr.w	r4, r4, #1
 8000d74:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8000d78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8000d84:	f002 fef0 	bl	8003b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d88:	200c      	movs	r0, #12
 8000d8a:	f002 ff2b 	bl	8003be4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 9, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2109      	movs	r1, #9
 8000d92:	200d      	movs	r0, #13
 8000d94:	f002 fee8 	bl	8003b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d98:	200d      	movs	r0, #13
 8000d9a:	f002 ff23 	bl	8003be4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 8, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2108      	movs	r1, #8
 8000da2:	200e      	movs	r0, #14
 8000da4:	f002 fee0 	bl	8003b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000da8:	200e      	movs	r0, #14
 8000daa:	f002 ff1b 	bl	8003be4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2107      	movs	r1, #7
 8000db2:	200f      	movs	r0, #15
 8000db4:	f002 fed8 	bl	8003b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000db8:	200f      	movs	r0, #15
 8000dba:	f002 ff13 	bl	8003be4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2010      	movs	r0, #16
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	f002 fed0 	bl	8003b68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000dc8:	2010      	movs	r0, #16

}
 8000dca:	b002      	add	sp, #8
 8000dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000dd0:	f002 bf08 	b.w	8003be4 <HAL_NVIC_EnableIRQ>
 8000dd4:	58024400 	.word	0x58024400

08000dd8 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000dd8:	481a      	ldr	r0, [pc, #104]	; (8000e44 <MX_FMC_Init+0x6c>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000dda:	2200      	movs	r2, #0
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ddc:	491a      	ldr	r1, [pc, #104]	; (8000e48 <MX_FMC_Init+0x70>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000dde:	2302      	movs	r3, #2
{
 8000de0:	b530      	push	{r4, r5, lr}
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000de2:	6042      	str	r2, [r0, #4]
{
 8000de4:	b089      	sub	sp, #36	; 0x24
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000de6:	61c2      	str	r2, [r0, #28]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000de8:	2406      	movs	r4, #6
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000dea:	6282      	str	r2, [r0, #40]	; 0x28
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000dec:	2208      	movs	r2, #8
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000dee:	6001      	str	r1, [r0, #0]
  SdramTiming.SelfRefreshTime = 4;
 8000df0:	2104      	movs	r1, #4
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000df2:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000df4:	2210      	movs	r2, #16
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000df6:	2501      	movs	r5, #1
  SdramTiming.LoadToActiveDelay = 2;
 8000df8:	9301      	str	r3, [sp, #4]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000dfa:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000dfc:	2240      	movs	r2, #64	; 0x40
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
 8000dfe:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8000e00:	9307      	str	r3, [sp, #28]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000e02:	6142      	str	r2, [r0, #20]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000e04:	f44f 6240 	mov.w	r2, #3072	; 0xc00
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e08:	6085      	str	r5, [r0, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000e0a:	e9cd 4102 	strd	r4, r1, [sp, #8]
  SdramTiming.WriteRecoveryTime = 2;
 8000e0e:	e9cd 4304 	strd	r4, r3, [sp, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000e12:	f44f 7480 	mov.w	r4, #256	; 0x100
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e16:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e1a:	4469      	add	r1, sp
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000e1c:	6184      	str	r4, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e1e:	e9c0 2308 	strd	r2, r3, [r0, #32]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000e22:	f009 f853 	bl	8009ecc <HAL_SDRAM_Init>
 8000e26:	b928      	cbnz	r0, 8000e34 <MX_FMC_Init+0x5c>
  {
    Error_Handler( );
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8000e28:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000e2c:	f002 fe80 	bl	8003b30 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e30:	b009      	add	sp, #36	; 0x24
 8000e32:	bd30      	pop	{r4, r5, pc}
    Error_Handler( );
 8000e34:	f001 fcc6 	bl	80027c4 <Error_Handler>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8000e38:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000e3c:	f002 fe78 	bl	8003b30 <HAL_SetFMCMemorySwappingConfig>
}
 8000e40:	b009      	add	sp, #36	; 0x24
 8000e42:	bd30      	pop	{r4, r5, pc}
 8000e44:	2001445c 	.word	0x2001445c
 8000e48:	52004140 	.word	0x52004140

08000e4c <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8000e4c:	4834      	ldr	r0, [pc, #208]	; (8000f20 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e52:	b0b7      	sub	sp, #220	; 0xdc
  if (FMC_Initialized) {
 8000e54:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000e5a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000e5e:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8000e60:	b109      	cbz	r1, 8000e66 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000e62:	b037      	add	sp, #220	; 0xdc
 8000e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8000e66:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e68:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
 8000e6a:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e6c:	a808      	add	r0, sp, #32
 8000e6e:	f015 fd1f 	bl	80168b0 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000e72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e76:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e78:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000e7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7e:	f006 fa49 	bl	8007314 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	2800      	cmp	r0, #0
 8000e84:	d148      	bne.n	8000f18 <HAL_SDRAM_MspInit+0xcc>
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e86:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2702      	movs	r7, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2600      	movs	r6, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e8e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e92:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e94:	a901      	add	r1, sp, #4
 8000e96:	4824      	ldr	r0, [pc, #144]	; (8000f28 <HAL_SDRAM_MspInit+0xdc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e9c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000ea0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea4:	9504      	str	r5, [sp, #16]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000ea6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eaa:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8000eac:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000eae:	f64f 033f 	movw	r3, #63551	; 0xf83f
  __HAL_RCC_FMC_CLK_ENABLE();
 8000eb2:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000eb4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	e9cd 7602 	strd	r7, r6, [sp, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000eba:	f004 fc9f 	bl	80057fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8000ebe:	2319      	movs	r3, #25
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec0:	a901      	add	r1, sp, #4
 8000ec2:	481a      	ldr	r0, [pc, #104]	; (8000f2c <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8000ec4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	e9cd 7602 	strd	r7, r6, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000eca:	e9cd 5404 	strd	r5, r4, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ece:	f004 fc95 	bl	80057fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000ed2:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ed6:	a901      	add	r1, sp, #4
 8000ed8:	4815      	ldr	r0, [pc, #84]	; (8000f30 <HAL_SDRAM_MspInit+0xe4>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000eda:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	e9cd 7602 	strd	r7, r6, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ee0:	e9cd 5404 	strd	r5, r4, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee4:	f004 fc8a 	bl	80057fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000ee8:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eec:	a901      	add	r1, sp, #4
 8000eee:	4811      	ldr	r0, [pc, #68]	; (8000f34 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000ef0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	e9cd 7602 	strd	r7, r6, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ef6:	e9cd 5404 	strd	r5, r4, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000efa:	f004 fc7f 	bl	80057fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000efe:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f02:	a901      	add	r1, sp, #4
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f08:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000f0a:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f004 fc74 	bl	80057fc <HAL_GPIO_Init>
}
 8000f14:	b037      	add	sp, #220	; 0xdc
 8000f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8000f18:	f001 fc54 	bl	80027c4 <Error_Handler>
 8000f1c:	e7b3      	b.n	8000e86 <HAL_SDRAM_MspInit+0x3a>
 8000f1e:	bf00      	nop
 8000f20:	20014458 	.word	0x20014458
 8000f24:	58024400 	.word	0x58024400
 8000f28:	58021400 	.word	0x58021400
 8000f2c:	58020800 	.word	0x58020800
 8000f30:	58021800 	.word	0x58021800
 8000f34:	58021000 	.word	0x58021000
 8000f38:	58020c00 	.word	0x58020c00

08000f3c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000f3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f40:	4b75      	ldr	r3, [pc, #468]	; (8001118 <MX_GPIO_Init+0x1dc>)
{
 8000f42:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f46:	4e75      	ldr	r6, [pc, #468]	; (800111c <MX_GPIO_Init+0x1e0>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f48:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8001130 <MX_GPIO_Init+0x1f4>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f50:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f52:	4630      	mov	r0, r6

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f54:	4f72      	ldr	r7, [pc, #456]	; (8001120 <MX_GPIO_Init+0x1e4>)

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f56:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f58:	f04f 0902 	mov.w	r9, #2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8000f60:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f68:	f042 0210 	orr.w	r2, r2, #16
 8000f6c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f74:	f002 0210 	and.w	r2, r2, #16
 8000f78:	9201      	str	r2, [sp, #4]
 8000f7a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f80:	f042 0204 	orr.w	r2, r2, #4
 8000f84:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f8c:	f002 0204 	and.w	r2, r2, #4
 8000f90:	9202      	str	r2, [sp, #8]
 8000f92:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f94:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f98:	f042 0220 	orr.w	r2, r2, #32
 8000f9c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fa0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fa4:	f002 0220 	and.w	r2, r2, #32
 8000fa8:	9203      	str	r2, [sp, #12]
 8000faa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fb0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fb4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fb8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fbc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000fc0:	9204      	str	r2, [sp, #16]
 8000fc2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fc8:	f042 0201 	orr.w	r2, r2, #1
 8000fcc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fd4:	f002 0201 	and.w	r2, r2, #1
 8000fd8:	9205      	str	r2, [sp, #20]
 8000fda:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fe0:	f042 0202 	orr.w	r2, r2, #2
 8000fe4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fe8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fec:	f002 0202 	and.w	r2, r2, #2
 8000ff0:	9206      	str	r2, [sp, #24]
 8000ff2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ffc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001000:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001004:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001008:	9207      	str	r2, [sp, #28]
 800100a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800100c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001010:	f042 0208 	orr.w	r2, r2, #8
 8001014:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001018:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	9308      	str	r3, [sp, #32]
 8001024:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001026:	f004 fd39 	bl	8005a9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800102a:	4622      	mov	r2, r4
 800102c:	4640      	mov	r0, r8
 800102e:	2102      	movs	r1, #2
 8001030:	f004 fd34 	bl	8005a9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001034:	4622      	mov	r2, r4
 8001036:	4638      	mov	r0, r7
 8001038:	2110      	movs	r1, #16
 800103a:	f004 fd2f 	bl	8005a9c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 800103e:	f242 0320 	movw	r3, #8224	; 0x2020
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001042:	a909      	add	r1, sp, #36	; 0x24
 8001044:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8001046:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001048:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104a:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104c:	f004 fbd6 	bl	80057fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001050:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001054:	a909      	add	r1, sp, #36	; 0x24
 8001056:	4630      	mov	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800105a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001060:	f004 fbcc 	bl	80057fc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001064:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8001066:	f248 03c6 	movw	r3, #32966	; 0x80c6
 800106a:	2603      	movs	r6, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106c:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8001070:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001074:	f004 fbc2 	bl	80057fc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001078:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800107c:	a909      	add	r1, sp, #36	; 0x24
 800107e:	4829      	ldr	r0, [pc, #164]	; (8001124 <MX_GPIO_Init+0x1e8>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001080:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001086:	f004 fbb9 	bl	80057fc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	a909      	add	r1, sp, #36	; 0x24
 800108c:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108e:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f004 fbb2 	bl	80057fc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	a909      	add	r1, sp, #36	; 0x24
 800109a:	4640      	mov	r0, r8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800109e:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f004 fba9 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 80010aa:	f649 730c 	movw	r3, #40716	; 0x9f0c
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	4640      	mov	r0, r8
 80010b0:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 80010b2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f004 fba0 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB12 PB13
                           PB14 PB15 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80010bc:	f24f 33e5 	movw	r3, #62437	; 0xf3e5
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	a909      	add	r1, sp, #36	; 0x24
 80010c2:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80010c4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	f004 fb97 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	a909      	add	r1, sp, #36	; 0x24
 80010d0:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d2:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	e9cd 9409 	strd	r9, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f004 fb90 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 80010dc:	f643 03f8 	movw	r3, #14584	; 0x38f8
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e0:	a909      	add	r1, sp, #36	; 0x24
 80010e2:	4811      	ldr	r0, [pc, #68]	; (8001128 <MX_GPIO_Init+0x1ec>)
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 80010e4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ea:	f004 fb87 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 80010ee:	f647 63c8 	movw	r3, #32456	; 0x7ec8
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010f2:	a909      	add	r1, sp, #36	; 0x24
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <MX_GPIO_Init+0x1f0>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 80010f6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f8:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010fc:	f004 fb7e 	bl	80057fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001100:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001102:	a909      	add	r1, sp, #36	; 0x24
 8001104:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001106:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110e:	f004 fb75 	bl	80057fc <HAL_GPIO_Init>

}
 8001112:	b00f      	add	sp, #60	; 0x3c
 8001114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001118:	58024400 	.word	0x58024400
 800111c:	58020800 	.word	0x58020800
 8001120:	58020400 	.word	0x58020400
 8001124:	58021400 	.word	0x58021400
 8001128:	58020c00 	.word	0x58020c00
 800112c:	58021800 	.word	0x58021800
 8001130:	58020000 	.word	0x58020000

08001134 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001134:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001136:	4817      	ldr	r0, [pc, #92]	; (8001194 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001138:	2300      	movs	r3, #0
 800113a:	4917      	ldr	r1, [pc, #92]	; (8001198 <MX_I2C2_Init+0x64>)
 800113c:	2401      	movs	r4, #1
 800113e:	4a17      	ldr	r2, [pc, #92]	; (800119c <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001140:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001142:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
 8001146:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800114e:	f004 fdd9 	bl	8005d04 <HAL_I2C_Init>
 8001152:	b950      	cbnz	r0, 800116a <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001154:	2100      	movs	r1, #0
 8001156:	480f      	ldr	r0, [pc, #60]	; (8001194 <MX_I2C2_Init+0x60>)
 8001158:	f005 fa46 	bl	80065e8 <HAL_I2CEx_ConfigAnalogFilter>
 800115c:	b968      	cbnz	r0, 800117a <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800115e:	2100      	movs	r1, #0
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <MX_I2C2_Init+0x60>)
 8001162:	f005 fa75 	bl	8006650 <HAL_I2CEx_ConfigDigitalFilter>
 8001166:	b980      	cbnz	r0, 800118a <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001168:	bd10      	pop	{r4, pc}
    Error_Handler();
 800116a:	f001 fb2b 	bl	80027c4 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800116e:	2100      	movs	r1, #0
 8001170:	4808      	ldr	r0, [pc, #32]	; (8001194 <MX_I2C2_Init+0x60>)
 8001172:	f005 fa39 	bl	80065e8 <HAL_I2CEx_ConfigAnalogFilter>
 8001176:	2800      	cmp	r0, #0
 8001178:	d0f1      	beq.n	800115e <MX_I2C2_Init+0x2a>
    Error_Handler();
 800117a:	f001 fb23 	bl	80027c4 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800117e:	2100      	movs	r1, #0
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_I2C2_Init+0x60>)
 8001182:	f005 fa65 	bl	8006650 <HAL_I2CEx_ConfigDigitalFilter>
 8001186:	2800      	cmp	r0, #0
 8001188:	d0ee      	beq.n	8001168 <MX_I2C2_Init+0x34>
}
 800118a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800118e:	f001 bb19 	b.w	80027c4 <Error_Handler>
 8001192:	bf00      	nop
 8001194:	20014490 	.word	0x20014490
 8001198:	40005800 	.word	0x40005800
 800119c:	00b03fdb 	.word	0x00b03fdb

080011a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011a0:	b530      	push	{r4, r5, lr}
 80011a2:	b0b9      	sub	sp, #228	; 0xe4

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	2100      	movs	r1, #0
{
 80011a6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a8:	22c0      	movs	r2, #192	; 0xc0
 80011aa:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	9107      	str	r1, [sp, #28]
 80011ae:	e9cd 1103 	strd	r1, r1, [sp, #12]
 80011b2:	e9cd 1105 	strd	r1, r1, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b6:	f015 fb7b 	bl	80168b0 <memset>
  if(i2cHandle->Instance==I2C2)
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <HAL_I2C_MspInit+0xb4>)
 80011bc:	6822      	ldr	r2, [r4, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d001      	beq.n	80011c6 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80011c2:	b039      	add	sp, #228	; 0xe4
 80011c4:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011c6:	2208      	movs	r2, #8
 80011c8:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ca:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011cc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d0:	f006 f8a0 	bl	8007314 <HAL_RCCEx_PeriphCLKConfig>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d139      	bne.n	800124c <HAL_I2C_MspInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d8:	4c1f      	ldr	r4, [pc, #124]	; (8001258 <HAL_I2C_MspInit+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011da:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011de:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e0:	2501      	movs	r5, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80011f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80011f4:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f8:	e9cd 0203 	strd	r0, r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001200:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	4815      	ldr	r0, [pc, #84]	; (800125c <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001206:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	e9cd 5205 	strd	r5, r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	f004 faf6 	bl	80057fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001210:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8001214:	4629      	mov	r1, r5
 8001216:	2200      	movs	r2, #0
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001218:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800121c:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 800121e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8001222:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800122e:	f002 fc9b 	bl	8003b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001232:	2021      	movs	r0, #33	; 0x21
 8001234:	f002 fcd6 	bl	8003be4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	4629      	mov	r1, r5
 800123c:	2022      	movs	r0, #34	; 0x22
 800123e:	f002 fc93 	bl	8003b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001242:	2022      	movs	r0, #34	; 0x22
 8001244:	f002 fcce 	bl	8003be4 <HAL_NVIC_EnableIRQ>
}
 8001248:	b039      	add	sp, #228	; 0xe4
 800124a:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 800124c:	f001 faba 	bl	80027c4 <Error_Handler>
 8001250:	e7c2      	b.n	80011d8 <HAL_I2C_MspInit+0x38>
 8001252:	bf00      	nop
 8001254:	40005800 	.word	0x40005800
 8001258:	58024400 	.word	0x58024400
 800125c:	58020400 	.word	0x58020400

08001260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001260:	b530      	push	{r4, r5, lr}
 8001262:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001264:	224c      	movs	r2, #76	; 0x4c
 8001266:	2100      	movs	r1, #0
 8001268:	a80b      	add	r0, sp, #44	; 0x2c
 800126a:	f015 fb21 	bl	80168b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126e:	2220      	movs	r2, #32
 8001270:	2100      	movs	r1, #0
 8001272:	a803      	add	r0, sp, #12
 8001274:	f015 fb1c 	bl	80168b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001278:	2002      	movs	r0, #2
 800127a:	f005 fa15 	bl	80066a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <SystemClock_Config+0xf4>)
 8001280:	2100      	movs	r1, #0
 8001282:	4a35      	ldr	r2, [pc, #212]	; (8001358 <SystemClock_Config+0xf8>)
 8001284:	9100      	str	r1, [sp, #0]
 8001286:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001288:	f021 0101 	bic.w	r1, r1, #1
 800128c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	6993      	ldr	r3, [r2, #24]
 8001298:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800129c:	6193      	str	r3, [r2, #24]
 800129e:	6993      	ldr	r3, [r2, #24]
 80012a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	9b00      	ldr	r3, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012a8:	6993      	ldr	r3, [r2, #24]
 80012aa:	0499      	lsls	r1, r3, #18
 80012ac:	d5fc      	bpl.n	80012a8 <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <SystemClock_Config+0xfc>)
 80012b0:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 80012b4:	f041 0102 	orr.w	r1, r1, #2
 80012b8:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012bc:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012ca:	9102      	str	r1, [sp, #8]
 80012cc:	6991      	ldr	r1, [r2, #24]
 80012ce:	4b21      	ldr	r3, [pc, #132]	; (8001354 <SystemClock_Config+0xf4>)
 80012d0:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80012d4:	6191      	str	r1, [r2, #24]
 80012d6:	6992      	ldr	r2, [r2, #24]
 80012d8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80012dc:	9202      	str	r2, [sp, #8]
 80012de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <SystemClock_Config+0xf8>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80012e2:	f041 0101 	orr.w	r1, r1, #1
 80012e6:	62d9      	str	r1, [r3, #44]	; 0x2c
 80012e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	9302      	str	r3, [sp, #8]
 80012f0:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012f2:	6993      	ldr	r3, [r2, #24]
 80012f4:	049b      	lsls	r3, r3, #18
 80012f6:	d5fc      	bpl.n	80012f2 <SystemClock_Config+0x92>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012f8:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80012fa:	2508      	movs	r5, #8
  RCC_OscInitStruct.PLL.PLLN = 192;
 80012fc:	f04f 0c05 	mov.w	ip, #5
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001300:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001302:	2221      	movs	r2, #33	; 0x21
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001304:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001306:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800130a:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800130e:	e9cd 351a 	strd	r3, r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001312:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001316:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001318:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800131a:	2301      	movs	r3, #1
 800131c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 192;
 800131e:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001320:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001324:	e9cd c316 	strd	ip, r3, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001328:	f005 fa66 	bl	80067f8 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132c:	213f      	movs	r1, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800132e:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001330:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001334:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001336:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001338:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800133a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	9104      	str	r1, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800133e:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001340:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001342:	e9cd 5306 	strd	r5, r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001346:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800134a:	f005 fd69 	bl	8006e20 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800134e:	b01f      	add	sp, #124	; 0x7c
 8001350:	bd30      	pop	{r4, r5, pc}
 8001352:	bf00      	nop
 8001354:	58000400 	.word	0x58000400
 8001358:	58024800 	.word	0x58024800
 800135c:	58024400 	.word	0x58024400

08001360 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001360:	b510      	push	{r4, lr}
 8001362:	b0b0      	sub	sp, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001364:	22a4      	movs	r2, #164	; 0xa4
 8001366:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
  PeriphClkInitStruct.PLL2.PLL2R = 2;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001368:	f44f 3480 	mov.w	r4, #65536	; 0x10000
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800136c:	a807      	add	r0, sp, #28
 800136e:	f015 fa9f 	bl	80168b0 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8001372:	2219      	movs	r2, #25
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 8001374:	f44f 70ac 	mov.w	r0, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001378:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800137a:	9202      	str	r2, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800137c:	2207      	movs	r2, #7
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800137e:	2101      	movs	r1, #1
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001380:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001382:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001384:	9414      	str	r4, [sp, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001386:	9116      	str	r1, [sp, #88]	; 0x58
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8001388:	ed9f 7b07 	vldr	d7, [pc, #28]	; 80013a8 <PeriphCommonClock_Config+0x48>
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 800138c:	e9cd 0203 	strd	r0, r2, [sp, #12]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001390:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001394:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8001396:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800139a:	9218      	str	r2, [sp, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800139c:	f005 ffba 	bl	8007314 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80013a0:	b030      	add	sp, #192	; 0xc0
 80013a2:	bd10      	pop	{r4, pc}
 80013a4:	f3af 8000 	nop.w
 80013a8:	00011100 	.word	0x00011100
 80013ac:	00000000 	.word	0x00000000

080013b0 <BSP_SD_IsDetected>:
}



uint8_t BSP_SD_IsDetected(void)
{
 80013b0:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 80013b2:	2301      	movs	r3, #1
 80013b4:	f88d 3007 	strb.w	r3, [sp, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  //{
  //  status = SD_NOT_PRESENT;
  //}

  return status;
 80013b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80013bc:	b002      	add	sp, #8
 80013be:	4770      	bx	lr

080013c0 <getPresetNamesFromSDCard>:

void getPresetNamesFromSDCard(void)
{
 80013c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
 80013c4:	2301      	movs	r3, #1
{
 80013c6:	b08b      	sub	sp, #44	; 0x2c
  __IO uint8_t status = SD_PRESENT;
 80013c8:	f88d 300b 	strb.w	r3, [sp, #11]
  return status;
 80013cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
	if(BSP_SD_IsDetected())
 80013d0:	b93b      	cbnz	r3, 80013e2 <getPresetNamesFromSDCard+0x22>
 80013d2:	4b6b      	ldr	r3, [pc, #428]	; (8001580 <getPresetNamesFromSDCard+0x1c0>)
 80013d4:	9301      	str	r3, [sp, #4]
			}

		}

	}
	diskBusy = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	9a01      	ldr	r2, [sp, #4]
 80013da:	7013      	strb	r3, [r2, #0]
	return;
}
 80013dc:	b00b      	add	sp, #44	; 0x2c
 80013de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013e2:	4b68      	ldr	r3, [pc, #416]	; (8001584 <getPresetNamesFromSDCard+0x1c4>)
			audioOutBuffer[i] = 0;
 80013e4:	2100      	movs	r1, #0
 80013e6:	f503 6280 	add.w	r2, r3, #1024	; 0x400
			audioOutBuffer[i + 1] = 0;
 80013ea:	e9c3 1100 	strd	r1, r1, [r3]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80013ee:	3308      	adds	r3, #8
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d1fa      	bne.n	80013ea <getPresetNamesFromSDCard+0x2a>
		diskBusy = 1;
 80013f4:	4b62      	ldr	r3, [pc, #392]	; (8001580 <getPresetNamesFromSDCard+0x1c0>)
 80013f6:	2401      	movs	r4, #1
		disk_initialize(0);
 80013f8:	2000      	movs	r0, #0
		diskBusy = 1;
 80013fa:	461a      	mov	r2, r3
 80013fc:	9301      	str	r3, [sp, #4]
		loadFailed = 0;
 80013fe:	4b62      	ldr	r3, [pc, #392]	; (8001588 <getPresetNamesFromSDCard+0x1c8>)
		diskBusy = 1;
 8001400:	7014      	strb	r4, [r2, #0]
		loadFailed = 0;
 8001402:	7019      	strb	r1, [r3, #0]
		disk_initialize(0);
 8001404:	f00a f822 	bl	800b44c <disk_initialize>
	    disk_status(0);
 8001408:	2000      	movs	r0, #0
 800140a:	f00a f815 	bl	800b438 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 800140e:	4622      	mov	r2, r4
 8001410:	495e      	ldr	r1, [pc, #376]	; (800158c <getPresetNamesFromSDCard+0x1cc>)
 8001412:	485f      	ldr	r0, [pc, #380]	; (8001590 <getPresetNamesFromSDCard+0x1d0>)
 8001414:	f00b fb6a 	bl	800caec <f_mount>
 8001418:	2800      	cmp	r0, #0
 800141a:	d1dc      	bne.n	80013d6 <getPresetNamesFromSDCard+0x16>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 800141c:	4605      	mov	r5, r0
 800141e:	4e5d      	ldr	r6, [pc, #372]	; (8001594 <getPresetNamesFromSDCard+0x1d4>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8001420:	f8df 9168 	ldr.w	r9, [pc, #360]	; 800158c <getPresetNamesFromSDCard+0x1cc>
 8001424:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80015a8 <getPresetNamesFromSDCard+0x1e8>
 8001428:	4f5b      	ldr	r7, [pc, #364]	; (8001598 <getPresetNamesFromSDCard+0x1d8>)
 800142a:	e017      	b.n	800145c <getPresetNamesFromSDCard+0x9c>
					strcat(charBuf, "*.ebp");
 800142c:	aa04      	add	r2, sp, #16
 800142e:	6830      	ldr	r0, [r6, #0]
 8001430:	88b1      	ldrh	r1, [r6, #4]
 8001432:	f10d 0c10 	add.w	ip, sp, #16
 8001436:	18d4      	adds	r4, r2, r3
					strcpy(finalString, charBuf);
 8001438:	1d9a      	adds	r2, r3, #6
					strcat(charBuf, "*.ebp");
 800143a:	f84c 0003 	str.w	r0, [ip, r3]
					strcpy(finalString, charBuf);
 800143e:	a807      	add	r0, sp, #28
					strcat(charBuf, "*.ebp");
 8001440:	80a1      	strh	r1, [r4, #4]
					strcpy(finalString, charBuf);
 8001442:	4661      	mov	r1, ip
 8001444:	f015 fa60 	bl	8016908 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8001448:	ab07      	add	r3, sp, #28
 800144a:	464a      	mov	r2, r9
 800144c:	4641      	mov	r1, r8
 800144e:	4638      	mov	r0, r7
 8001450:	f00b ffcc 	bl	800d3ec <f_findfirst>
				if(res == FR_OK)
 8001454:	b358      	cbz	r0, 80014ae <getPresetNamesFromSDCard+0xee>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8001456:	3501      	adds	r5, #1
 8001458:	2d40      	cmp	r5, #64	; 0x40
 800145a:	d0bc      	beq.n	80013d6 <getPresetNamesFromSDCard+0x16>
				itoa(i, charBuf, 10);
 800145c:	220a      	movs	r2, #10
 800145e:	a904      	add	r1, sp, #16
 8001460:	4628      	mov	r0, r5
 8001462:	f015 f9e1 	bl	8016828 <itoa>
				int len = ((strlen(charBuf)));
 8001466:	a804      	add	r0, sp, #16
 8001468:	f7fe ff36 	bl	80002d8 <strlen>
				if (len == 1)
 800146c:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 800146e:	4603      	mov	r3, r0
				if (len == 1)
 8001470:	d1dc      	bne.n	800142c <getPresetNamesFromSDCard+0x6c>
					finalString[2] = charBuf[1];
 8001472:	f89d 1011 	ldrb.w	r1, [sp, #17]
					finalString[0] = '0';
 8001476:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
 8001478:	f89d 2010 	ldrb.w	r2, [sp, #16]
					strcat(finalString, "*.ebp");
 800147c:	a807      	add	r0, sp, #28
					finalString[2] = charBuf[1];
 800147e:	f88d 101e 	strb.w	r1, [sp, #30]
					strcat(finalString, "*.ebp");
 8001482:	ac07      	add	r4, sp, #28
					finalString[1] = charBuf[0];
 8001484:	f88d 201d 	strb.w	r2, [sp, #29]
					finalString[0] = '0';
 8001488:	f88d 301c 	strb.w	r3, [sp, #28]
					strcat(finalString, "*.ebp");
 800148c:	f7fe ff24 	bl	80002d8 <strlen>
 8001490:	a907      	add	r1, sp, #28
 8001492:	4603      	mov	r3, r0
 8001494:	88b2      	ldrh	r2, [r6, #4]
 8001496:	4419      	add	r1, r3
 8001498:	6830      	ldr	r0, [r6, #0]
 800149a:	50e0      	str	r0, [r4, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 800149c:	ab07      	add	r3, sp, #28
					strcat(finalString, "*.ebp");
 800149e:	808a      	strh	r2, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80014a0:	4638      	mov	r0, r7
 80014a2:	464a      	mov	r2, r9
 80014a4:	4641      	mov	r1, r8
 80014a6:	f00b ffa1 	bl	800d3ec <f_findfirst>
				if(res == FR_OK)
 80014aa:	2800      	cmp	r0, #0
 80014ac:	d1d3      	bne.n	8001456 <getPresetNamesFromSDCard+0x96>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 80014ae:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 80015ac <getPresetNamesFromSDCard+0x1ec>
 80014b2:	2211      	movs	r2, #17
 80014b4:	4939      	ldr	r1, [pc, #228]	; (800159c <getPresetNamesFromSDCard+0x1dc>)
 80014b6:	4658      	mov	r0, fp
 80014b8:	f00b fb54 	bl	800cb64 <f_open>
 80014bc:	4682      	mov	sl, r0
 80014be:	2800      	cmp	r0, #0
 80014c0:	d1c9      	bne.n	8001456 <getPresetNamesFromSDCard+0x96>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 80014c2:	4c37      	ldr	r4, [pc, #220]	; (80015a0 <getPresetNamesFromSDCard+0x1e0>)
 80014c4:	ab03      	add	r3, sp, #12
 80014c6:	f8db 200c 	ldr.w	r2, [fp, #12]
 80014ca:	4658      	mov	r0, fp
 80014cc:	4621      	mov	r1, r4
 80014ce:	f00b fc89 	bl	800cde4 <f_read>
						f_close(&SDFile);
 80014d2:	4658      	mov	r0, fp
 80014d4:	f00b feca 	bl	800d26c <f_close>
						if (buffer[bufferIndex] == 17)
 80014d8:	f894 c000 	ldrb.w	ip, [r4]
 80014dc:	4931      	ldr	r1, [pc, #196]	; (80015a4 <getPresetNamesFromSDCard+0x1e4>)
							presetNamesArray[i][j] = buffer[bufferIndex];
 80014de:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
						if (buffer[bufferIndex] == 17)
 80014e2:	f1ac 0c11 	sub.w	ip, ip, #17
 80014e6:	4653      	mov	r3, sl
							presetNamesArray[i][j] = buffer[bufferIndex];
 80014e8:	eb01 0142 	add.w	r1, r1, r2, lsl #1
						if (buffer[bufferIndex] == 17)
 80014ec:	fabc fc8c 	clz	ip, ip
 80014f0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80014f4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
							presetNamesArray[i][j] = buffer[bufferIndex];
 80014f8:	eb0c 0203 	add.w	r2, ip, r3
 80014fc:	b292      	uxth	r2, r2
 80014fe:	5ca2      	ldrb	r2, [r4, r2]
 8001500:	54ca      	strb	r2, [r1, r3]
						for (int j = 0; j < 14; j++)
 8001502:	3301      	adds	r3, #1
 8001504:	2b0e      	cmp	r3, #14
 8001506:	d1f7      	bne.n	80014f8 <getPresetNamesFromSDCard+0x138>
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001508:	f04f 0bc8 	mov.w	fp, #200	; 0xc8
							bufferIndex++;
 800150c:	f10c 000e 	add.w	r0, ip, #14
						for (int j = 0; j < 8; j++)
 8001510:	f04f 0e00 	mov.w	lr, #0
 8001514:	f8df a098 	ldr.w	sl, [pc, #152]	; 80015b0 <getPresetNamesFromSDCard+0x1f0>
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001518:	fb0b fb05 	mul.w	fp, fp, r5
 800151c:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
							for (int k = 0; k < 9; k++)
 8001520:	2300      	movs	r3, #0
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001522:	eb0b 0141 	add.w	r1, fp, r1, lsl #1
 8001526:	4451      	add	r1, sl
 8001528:	18c2      	adds	r2, r0, r3
 800152a:	b292      	uxth	r2, r2
 800152c:	5ca2      	ldrb	r2, [r4, r2]
 800152e:	54ca      	strb	r2, [r1, r3]
							for (int k = 0; k < 9; k++)
 8001530:	3301      	adds	r3, #1
 8001532:	2b09      	cmp	r3, #9
 8001534:	d1f8      	bne.n	8001528 <getPresetNamesFromSDCard+0x168>
						for (int j = 0; j < 8; j++)
 8001536:	f10e 0e01 	add.w	lr, lr, #1
								bufferIndex++;
 800153a:	3009      	adds	r0, #9
						for (int j = 0; j < 8; j++)
 800153c:	f1be 0f08 	cmp.w	lr, #8
								bufferIndex++;
 8001540:	b280      	uxth	r0, r0
						for (int j = 0; j < 8; j++)
 8001542:	d1eb      	bne.n	800151c <getPresetNamesFromSDCard+0x15c>
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
 8001544:	20c8      	movs	r0, #200	; 0xc8
								bufferIndex++;
 8001546:	f10c 0c56 	add.w	ip, ip, #86	; 0x56
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
 800154a:	fb05 f000 	mul.w	r0, r5, r0
 800154e:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
							for (int k = 0; k < 10; k++)
 8001552:	2300      	movs	r3, #0
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
 8001554:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8001558:	4451      	add	r1, sl
 800155a:	eb0c 0203 	add.w	r2, ip, r3
 800155e:	b292      	uxth	r2, r2
 8001560:	5ca2      	ldrb	r2, [r4, r2]
 8001562:	54ca      	strb	r2, [r1, r3]
							for (int k = 0; k < 10; k++)
 8001564:	3301      	adds	r3, #1
 8001566:	2b0a      	cmp	r3, #10
 8001568:	d1f7      	bne.n	800155a <getPresetNamesFromSDCard+0x19a>
						for (int j = 0; j < 4; j++)
 800156a:	f10e 0e01 	add.w	lr, lr, #1
								bufferIndex++;
 800156e:	f10c 0c0a 	add.w	ip, ip, #10
						for (int j = 0; j < 4; j++)
 8001572:	f1be 0f0c 	cmp.w	lr, #12
								bufferIndex++;
 8001576:	fa1f fc8c 	uxth.w	ip, ip
						for (int j = 0; j < 4; j++)
 800157a:	d1e8      	bne.n	800154e <getPresetNamesFromSDCard+0x18e>
 800157c:	e76b      	b.n	8001456 <getPresetNamesFromSDCard+0x96>
 800157e:	bf00      	nop
 8001580:	20014540 	.word	0x20014540
 8001584:	30000000 	.word	0x30000000
 8001588:	200186f4 	.word	0x200186f4
 800158c:	2001ddb4 	.word	0x2001ddb4
 8001590:	2001d950 	.word	0x2001d950
 8001594:	080195dc 	.word	0x080195dc
 8001598:	20014508 	.word	0x20014508
 800159c:	200165be 	.word	0x200165be
 80015a0:	30042380 	.word	0x30042380
 80015a4:	30042000 	.word	0x30042000
 80015a8:	200165a8 	.word	0x200165a8
 80015ac:	2001db84 	.word	0x2001db84
 80015b0:	30043380 	.word	0x30043380

080015b4 <SDRAM_init>:
#define SDRAM_MODEREG_WRITEBURST_MODE_PROG_BURST ((0 << 9))

#define SDRAM_MODEREG_OPERATING_MODE_STANDARD ((0 << 13)|(0 << 14))

void SDRAM_init()
{
 80015b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80015b8:	4c20      	ldr	r4, [pc, #128]	; (800163c <SDRAM_init+0x88>)
{
 80015ba:	b086      	sub	sp, #24
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80015bc:	2501      	movs	r5, #1
	        __IO uint32_t tmpmrd = 0;
 80015be:	2700      	movs	r7, #0
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80015c0:	2610      	movs	r6, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80015c2:	a902      	add	r1, sp, #8
 80015c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c8:	4620      	mov	r0, r4
	        /* Step 4: Insert 100 us delay */
	        HAL_Delay(1);


	        /* Step 5: Configure a PALL (precharge all) command */
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80015ca:	f04f 0802 	mov.w	r8, #2
	        __IO uint32_t tmpmrd = 0;
 80015ce:	9701      	str	r7, [sp, #4]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80015d0:	e9cd 5602 	strd	r5, r6, [sp, #8]
	        Command.ModeRegisterDefinition = 0;
 80015d4:	e9cd 5704 	strd	r5, r7, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80015d8:	f008 fca2 	bl	8009f20 <HAL_SDRAM_SendCommand>
	        HAL_Delay(1);
 80015dc:	4628      	mov	r0, r5
 80015de:	f002 fa8f 	bl	8003b00 <HAL_Delay>
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80015e2:	a902      	add	r1, sp, #8
 80015e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015e8:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
 80015ea:	9705      	str	r7, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80015ec:	f8cd 8008 	str.w	r8, [sp, #8]
	        Command.AutoRefreshNumber      = 1;
 80015f0:	e9cd 6503 	strd	r6, r5, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80015f4:	f008 fc94 	bl	8009f20 <HAL_SDRAM_SendCommand>

	        /* Step 6 : Configure a Auto-Refresh command */
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80015f8:	2303      	movs	r3, #3
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 2;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80015fa:	a902      	add	r1, sp, #8
 80015fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001600:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001602:	9302      	str	r3, [sp, #8]
	        Command.ModeRegisterDefinition = 0;
 8001604:	9705      	str	r7, [sp, #20]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001606:	e9cd 6803 	strd	r6, r8, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800160a:	f008 fc89 	bl	8009f20 <HAL_SDRAM_SendCommand>

	        /* Step 7: Program the external memory mode register */
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 800160e:	f240 2322 	movw	r3, #546	; 0x222
	                 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
	                 | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE | SDRAM_MODEREG_OPERATING_MODE_STANDARD;
	        // // Used in example, but can't find reference except for "Test Mode"

	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001612:	2204      	movs	r2, #4
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = tmpmrd;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001614:	a902      	add	r1, sp, #8
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8001616:	9301      	str	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001618:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = tmpmrd;
 800161a:	9b01      	ldr	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800161c:	9202      	str	r2, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800161e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
 8001622:	9305      	str	r3, [sp, #20]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001624:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 1;
 8001626:	9504      	str	r5, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001628:	f008 fc7a 	bl	8009f20 <HAL_SDRAM_SendCommand>

	        //HAL_SDRAM_ProgramRefreshRate(hsdram, 0x56A - 20);
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
 800162c:	f240 21fa 	movw	r1, #762	; 0x2fa
 8001630:	4620      	mov	r0, r4
 8001632:	f008 fc95 	bl	8009f60 <HAL_SDRAM_ProgramRefreshRate>
	        //8192 is 2^numberofrows (which is 13 in the case of the sdram)

}
 8001636:	b006      	add	sp, #24
 8001638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800163c:	2001445c 	.word	0x2001445c

08001640 <setEffectsFunctions>:
	;
}

void setEffectsFunctions(FXType effectType, int i)
{
	effectsActive[i] = 1;
 8001640:	4ba1      	ldr	r3, [pc, #644]	; (80018c8 <setEffectsFunctions+0x288>)
 8001642:	2201      	movs	r2, #1
{
 8001644:	b410      	push	{r4}
	effectsActive[i] = 1;
 8001646:	545a      	strb	r2, [r3, r1]
	switch (effectType)
 8001648:	2815      	cmp	r0, #21
 800164a:	d82b      	bhi.n	80016a4 <setEffectsFunctions+0x64>
 800164c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001650:	0217022b 	.word	0x0217022b
 8001654:	01ef0203 	.word	0x01ef0203
 8001658:	01d601e9 	.word	0x01d601e9
 800165c:	012601c2 	.word	0x012601c2
 8001660:	01010111 	.word	0x01010111
 8001664:	001600f1 	.word	0x001600f1
 8001668:	00c900dc 	.word	0x00c900dc
 800166c:	00a300b6 	.word	0x00a300b6
 8001670:	007c0090 	.word	0x007c0090
 8001674:	00540068 	.word	0x00540068
 8001678:	002d0040 	.word	0x002d0040
			  effectSetters[i].setParam3 = &tiltParam3;
			  effectSetters[i].setParam4 = &tiltParam4;
			  effectSetters[i].setParam5 = &param5Linear;
			  break;
		  case Wavefolder:
			  effectTick[i] = &wavefolderTick;
 800167c:	4b93      	ldr	r3, [pc, #588]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 800167e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &wavefolderTick;
 8001682:	4c93      	ldr	r4, [pc, #588]	; (80018d0 <setEffectsFunctions+0x290>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001684:	4a93      	ldr	r2, [pc, #588]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = &wavefolderTick;
 8001686:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
 800168a:	4993      	ldr	r1, [pc, #588]	; (80018d8 <setEffectsFunctions+0x298>)
 800168c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
 8001690:	4c92      	ldr	r4, [pc, #584]	; (80018dc <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001692:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &wavefolderParam3;
 8001696:	4892      	ldr	r0, [pc, #584]	; (80018e0 <setEffectsFunctions+0x2a0>)
			  effectSetters[i].setParam4 = &param4Linear;
 8001698:	4992      	ldr	r1, [pc, #584]	; (80018e4 <setEffectsFunctions+0x2a4>)
			  effectSetters[i].setParam5 = &param5Linear;
 800169a:	4a93      	ldr	r2, [pc, #588]	; (80018e8 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam3 = &tiltParam3;
 800169c:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5Linear;
 80016a0:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
			  break;
		  default:
			  break;
	}
}
 80016a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016a8:	4770      	bx	lr
			  effectTick[i] = &FXLadderLowpassTick;
 80016aa:	4b88      	ldr	r3, [pc, #544]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 80016ac:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXLadderLowpassTick;
 80016b0:	4a8e      	ldr	r2, [pc, #568]	; (80018ec <setEffectsFunctions+0x2ac>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 80016b2:	4888      	ldr	r0, [pc, #544]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXLadderLowpassTick;
 80016b4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 80016b8:	498d      	ldr	r1, [pc, #564]	; (80018f0 <setEffectsFunctions+0x2b0>)
 80016ba:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;;
 80016be:	4a8d      	ldr	r2, [pc, #564]	; (80018f4 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 80016c0:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
 80016c4:	498c      	ldr	r1, [pc, #560]	; (80018f8 <setEffectsFunctions+0x2b8>)
			  effectSetters[i].setParam2 = &blankFunction;;
 80016c6:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
 80016c8:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
 80016ca:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
 80016ce:	e7e9      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectTick[i] = FXVZbandrejectTick;
 80016d0:	4b7e      	ldr	r3, [pc, #504]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 80016d2:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZbandrejectTick;
 80016d6:	4a89      	ldr	r2, [pc, #548]	; (80018fc <setEffectsFunctions+0x2bc>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 80016d8:	487e      	ldr	r0, [pc, #504]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = FXVZbandrejectTick;
 80016da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 80016de:	4988      	ldr	r1, [pc, #544]	; (8001900 <setEffectsFunctions+0x2c0>)
 80016e0:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
 80016e4:	4a83      	ldr	r2, [pc, #524]	; (80018f4 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 80016e6:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
 80016ea:	4886      	ldr	r0, [pc, #536]	; (8001904 <setEffectsFunctions+0x2c4>)
			  effectSetters[i].setParam3 = &FXNotchParam3;;
 80016ec:	4986      	ldr	r1, [pc, #536]	; (8001908 <setEffectsFunctions+0x2c8>)
			  effectSetters[i].setParam4 = &blankFunction;;
 80016ee:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 80016f0:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
 80016f2:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 80016f6:	e7d5      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectTick[i] = FXVZhighshelfTick;
 80016f8:	4b74      	ldr	r3, [pc, #464]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 80016fa:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZhighshelfTick;
 80016fe:	4a83      	ldr	r2, [pc, #524]	; (800190c <setEffectsFunctions+0x2cc>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001700:	4874      	ldr	r0, [pc, #464]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = FXVZhighshelfTick;
 8001702:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001706:	4982      	ldr	r1, [pc, #520]	; (8001910 <setEffectsFunctions+0x2d0>)
 8001708:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
 800170c:	4a79      	ldr	r2, [pc, #484]	; (80018f4 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 800170e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 8001712:	4880      	ldr	r0, [pc, #512]	; (8001914 <setEffectsFunctions+0x2d4>)
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8001714:	4980      	ldr	r1, [pc, #512]	; (8001918 <setEffectsFunctions+0x2d8>)
			  effectSetters[i].setParam4 = &blankFunction;;
 8001716:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001718:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 800171a:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 800171e:	e7c1      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXVZlowshelfTick;
 8001720:	4b6a      	ldr	r3, [pc, #424]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001722:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZlowshelfTick;
 8001726:	4a7d      	ldr	r2, [pc, #500]	; (800191c <setEffectsFunctions+0x2dc>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001728:	486a      	ldr	r0, [pc, #424]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXVZlowshelfTick;
 800172a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 800172e:	497c      	ldr	r1, [pc, #496]	; (8001920 <setEffectsFunctions+0x2e0>)
 8001730:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001734:	4a6f      	ldr	r2, [pc, #444]	; (80018f4 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001736:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
 800173a:	487a      	ldr	r0, [pc, #488]	; (8001924 <setEffectsFunctions+0x2e4>)
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
 800173c:	497a      	ldr	r1, [pc, #488]	; (8001928 <setEffectsFunctions+0x2e8>)
			  effectSetters[i].setParam4 = &blankFunction;
 800173e:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001740:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8001742:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001746:	e7ad      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXVZpeakTick;
 8001748:	4b60      	ldr	r3, [pc, #384]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 800174a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZpeakTick;
 800174e:	4a77      	ldr	r2, [pc, #476]	; (800192c <setEffectsFunctions+0x2ec>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001750:	4860      	ldr	r0, [pc, #384]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXVZpeakTick;
 8001752:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001756:	4976      	ldr	r1, [pc, #472]	; (8001930 <setEffectsFunctions+0x2f0>)
 8001758:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 800175c:	4a65      	ldr	r2, [pc, #404]	; (80018f4 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 800175e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
 8001762:	4874      	ldr	r0, [pc, #464]	; (8001934 <setEffectsFunctions+0x2f4>)
			  effectSetters[i].setParam3 = &FXPeakParam3;
 8001764:	4974      	ldr	r1, [pc, #464]	; (8001938 <setEffectsFunctions+0x2f8>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001766:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001768:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXPeakParam3;
 800176a:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 800176e:	e799      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXdiodeLowpassTick;
 8001770:	4b56      	ldr	r3, [pc, #344]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001772:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXdiodeLowpassTick;
 8001776:	4a71      	ldr	r2, [pc, #452]	; (800193c <setEffectsFunctions+0x2fc>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001778:	4856      	ldr	r0, [pc, #344]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXdiodeLowpassTick;
 800177a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 800177e:	4970      	ldr	r1, [pc, #448]	; (8001940 <setEffectsFunctions+0x300>)
 8001780:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8001784:	4a5b      	ldr	r2, [pc, #364]	; (80018f4 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001786:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
 800178a:	496e      	ldr	r1, [pc, #440]	; (8001944 <setEffectsFunctions+0x304>)
			  effectSetters[i].setParam2 = &blankFunction;
 800178c:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
 800178e:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 8001790:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8001794:	e786      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXbandpassTick;
 8001796:	4b4d      	ldr	r3, [pc, #308]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001798:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXbandpassTick;
 800179c:	4a6a      	ldr	r2, [pc, #424]	; (8001948 <setEffectsFunctions+0x308>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 800179e:	484d      	ldr	r0, [pc, #308]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXbandpassTick;
 80017a0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 80017a4:	4969      	ldr	r1, [pc, #420]	; (800194c <setEffectsFunctions+0x30c>)
 80017a6:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 80017aa:	4a52      	ldr	r2, [pc, #328]	; (80018f4 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 80017ac:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
 80017b0:	4967      	ldr	r1, [pc, #412]	; (8001950 <setEffectsFunctions+0x310>)
			  effectSetters[i].setParam2 = &blankFunction;
 80017b2:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
 80017b4:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 80017b6:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 80017ba:	e773      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXhighpassTick;
 80017bc:	4b43      	ldr	r3, [pc, #268]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 80017be:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXhighpassTick;
 80017c2:	4a64      	ldr	r2, [pc, #400]	; (8001954 <setEffectsFunctions+0x314>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 80017c4:	4843      	ldr	r0, [pc, #268]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXhighpassTick;
 80017c6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 80017ca:	4963      	ldr	r1, [pc, #396]	; (8001958 <setEffectsFunctions+0x318>)
 80017cc:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 80017d0:	4a48      	ldr	r2, [pc, #288]	; (80018f4 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 80017d2:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
 80017d6:	4961      	ldr	r1, [pc, #388]	; (800195c <setEffectsFunctions+0x31c>)
			  effectSetters[i].setParam2 = &blankFunction;
 80017d8:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
 80017da:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 80017dc:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 80017e0:	e760      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXlowpassTick;
 80017e2:	4b3a      	ldr	r3, [pc, #232]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 80017e4:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXlowpassTick;
 80017e8:	4a5d      	ldr	r2, [pc, #372]	; (8001960 <setEffectsFunctions+0x320>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 80017ea:	483a      	ldr	r0, [pc, #232]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXlowpassTick;
 80017ec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 80017f0:	495c      	ldr	r1, [pc, #368]	; (8001964 <setEffectsFunctions+0x324>)
 80017f2:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 80017f6:	4a3f      	ldr	r2, [pc, #252]	; (80018f4 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 80017f8:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
 80017fc:	495a      	ldr	r1, [pc, #360]	; (8001968 <setEffectsFunctions+0x328>)
			  effectSetters[i].setParam2 = &blankFunction;
 80017fe:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
 8001800:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001802:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8001806:	e74d      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectTick[i] = &delayTick;
 8001808:	4b30      	ldr	r3, [pc, #192]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &delayParam1;
 800180a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &delayTick;
 800180e:	4c57      	ldr	r4, [pc, #348]	; (800196c <setEffectsFunctions+0x32c>)
			  effectSetters[i].setParam1 = &delayParam1;
 8001810:	4a30      	ldr	r2, [pc, #192]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = &delayTick;
 8001812:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &delayParam1;
 8001816:	4956      	ldr	r1, [pc, #344]	; (8001970 <setEffectsFunctions+0x330>)
 8001818:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &delayParam2;
 800181c:	4c55      	ldr	r4, [pc, #340]	; (8001974 <setEffectsFunctions+0x334>)
			  effectSetters[i].setParam1 = &delayParam1;
 800181e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &delayParam3;
 8001822:	4855      	ldr	r0, [pc, #340]	; (8001978 <setEffectsFunctions+0x338>)
			  effectSetters[i].setParam4 = &delayParam4;
 8001824:	4955      	ldr	r1, [pc, #340]	; (800197c <setEffectsFunctions+0x33c>)
			  effectSetters[i].setParam5 = &delayParam5;
 8001826:	4a56      	ldr	r2, [pc, #344]	; (8001980 <setEffectsFunctions+0x340>)
			  effectSetters[i].setParam3 = &delayParam3;
 8001828:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &delayParam5;
 800182c:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
 8001830:	e738      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectTick[i] = &tiltFilterTick;
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &tiltParam1;
 8001834:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &tiltFilterTick;
 8001838:	4c52      	ldr	r4, [pc, #328]	; (8001984 <setEffectsFunctions+0x344>)
			  effectSetters[i].setParam1 = &tiltParam1;
 800183a:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = &tiltFilterTick;
 800183c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
 8001840:	4951      	ldr	r1, [pc, #324]	; (8001988 <setEffectsFunctions+0x348>)
 8001842:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &tiltParam2;
 8001846:	4c51      	ldr	r4, [pc, #324]	; (800198c <setEffectsFunctions+0x34c>)
			  effectSetters[i].setParam1 = &tiltParam1;
 8001848:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &tiltParam3;
 800184c:	4850      	ldr	r0, [pc, #320]	; (8001990 <setEffectsFunctions+0x350>)
			  effectSetters[i].setParam4 = &tiltParam4;
 800184e:	4951      	ldr	r1, [pc, #324]	; (8001994 <setEffectsFunctions+0x354>)
 8001850:	e723      	b.n	800169a <setEffectsFunctions+0x5a>
			  effectTick[i] = &bcTick;
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001854:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &bcTick;
 8001858:	4c4f      	ldr	r4, [pc, #316]	; (8001998 <setEffectsFunctions+0x358>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 800185a:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = &bcTick;
 800185c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001860:	494e      	ldr	r1, [pc, #312]	; (800199c <setEffectsFunctions+0x35c>)
 8001862:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &param2Linear;
 8001866:	4c4e      	ldr	r4, [pc, #312]	; (80019a0 <setEffectsFunctions+0x360>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001868:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3BC;
 800186c:	484d      	ldr	r0, [pc, #308]	; (80019a4 <setEffectsFunctions+0x364>)
			  effectSetters[i].setParam4 = &param4Linear;
 800186e:	491d      	ldr	r1, [pc, #116]	; (80018e4 <setEffectsFunctions+0x2a4>)
 8001870:	e713      	b.n	800169a <setEffectsFunctions+0x5a>
			  effectTick[i] = &chorusTick;
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &chorusParam1;
 8001874:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &chorusTick;
 8001878:	4c4b      	ldr	r4, [pc, #300]	; (80019a8 <setEffectsFunctions+0x368>)
			  effectSetters[i].setParam1 = &chorusParam1;
 800187a:	4a16      	ldr	r2, [pc, #88]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = &chorusTick;
 800187c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
 8001880:	494a      	ldr	r1, [pc, #296]	; (80019ac <setEffectsFunctions+0x36c>)
 8001882:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &chorusParam2;
 8001886:	4c4a      	ldr	r4, [pc, #296]	; (80019b0 <setEffectsFunctions+0x370>)
			  effectSetters[i].setParam1 = &chorusParam1;
 8001888:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &chorusParam3;
 800188c:	4849      	ldr	r0, [pc, #292]	; (80019b4 <setEffectsFunctions+0x374>)
			  effectSetters[i].setParam4 = &chorusParam4;
 800188e:	494a      	ldr	r1, [pc, #296]	; (80019b8 <setEffectsFunctions+0x378>)
			  effectSetters[i].setParam5 = &blankFunction;
 8001890:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam3 = &chorusParam3;
 8001892:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
 8001896:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
 800189a:	e703      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectTick[i] = &compressorTick;
 800189c:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &compressorParam1;
 800189e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &compressorTick;
 80018a2:	4c46      	ldr	r4, [pc, #280]	; (80019bc <setEffectsFunctions+0x37c>)
			  effectSetters[i].setParam1 = &compressorParam1;
 80018a4:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <setEffectsFunctions+0x294>)
			  effectTick[i] = &compressorTick;
 80018a6:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
 80018aa:	4945      	ldr	r1, [pc, #276]	; (80019c0 <setEffectsFunctions+0x380>)
 80018ac:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &compressorParam2;
 80018b0:	4c44      	ldr	r4, [pc, #272]	; (80019c4 <setEffectsFunctions+0x384>)
			  effectSetters[i].setParam1 = &compressorParam1;
 80018b2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &compressorParam3;
 80018b6:	4844      	ldr	r0, [pc, #272]	; (80019c8 <setEffectsFunctions+0x388>)
			  effectSetters[i].setParam4 = &compressorParam4;
 80018b8:	4944      	ldr	r1, [pc, #272]	; (80019cc <setEffectsFunctions+0x38c>)
			  effectSetters[i].setParam5 = &compressorParam5;
 80018ba:	4a45      	ldr	r2, [pc, #276]	; (80019d0 <setEffectsFunctions+0x390>)
			  effectSetters[i].setParam3 = &compressorParam3;
 80018bc:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &compressorParam5;
 80018c0:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
 80018c4:	e6ee      	b.n	80016a4 <setEffectsFunctions+0x64>
 80018c6:	bf00      	nop
 80018c8:	20014594 	.word	0x20014594
 80018cc:	2001d138 	.word	0x2001d138
 80018d0:	00007141 	.word	0x00007141
 80018d4:	20014544 	.word	0x20014544
 80018d8:	00006b81 	.word	0x00006b81
 80018dc:	00006e41 	.word	0x00006e41
 80018e0:	00006bc1 	.word	0x00006bc1
 80018e4:	00007001 	.word	0x00007001
 80018e8:	00007021 	.word	0x00007021
 80018ec:	00007a21 	.word	0x00007a21
 80018f0:	00007c41 	.word	0x00007c41
 80018f4:	00001861 	.word	0x00001861
 80018f8:	00007e81 	.word	0x00007e81
 80018fc:	00007a01 	.word	0x00007a01
 8001900:	00007c01 	.word	0x00007c01
 8001904:	00007d41 	.word	0x00007d41
 8001908:	00007e61 	.word	0x00007e61
 800190c:	000079e1 	.word	0x000079e1
 8001910:	00007bc1 	.word	0x00007bc1
 8001914:	00007d01 	.word	0x00007d01
 8001918:	00007e41 	.word	0x00007e41
 800191c:	000079c1 	.word	0x000079c1
 8001920:	00007b81 	.word	0x00007b81
 8001924:	00007cc1 	.word	0x00007cc1
 8001928:	00007e21 	.word	0x00007e21
 800192c:	000079a1 	.word	0x000079a1
 8001930:	00007b41 	.word	0x00007b41
 8001934:	00007c81 	.word	0x00007c81
 8001938:	00007e01 	.word	0x00007e01
 800193c:	00007981 	.word	0x00007981
 8001940:	00007b01 	.word	0x00007b01
 8001944:	00007de1 	.word	0x00007de1
 8001948:	00007961 	.word	0x00007961
 800194c:	00007ac1 	.word	0x00007ac1
 8001950:	00007dc1 	.word	0x00007dc1
 8001954:	00007941 	.word	0x00007941
 8001958:	00007a81 	.word	0x00007a81
 800195c:	00007da1 	.word	0x00007da1
 8001960:	00007921 	.word	0x00007921
 8001964:	00007a41 	.word	0x00007a41
 8001968:	00007d81 	.word	0x00007d81
 800196c:	080038e1 	.word	0x080038e1
 8001970:	00007381 	.word	0x00007381
 8001974:	000073c1 	.word	0x000073c1
 8001978:	00007401 	.word	0x00007401
 800197c:	00007421 	.word	0x00007421
 8001980:	00007441 	.word	0x00007441
 8001984:	000075c1 	.word	0x000075c1
 8001988:	00006c01 	.word	0x00006c01
 800198c:	00006c61 	.word	0x00006c61
 8001990:	00006cc1 	.word	0x00006cc1
 8001994:	00006d01 	.word	0x00006d01
 8001998:	000078c1 	.word	0x000078c1
 800199c:	00006b41 	.word	0x00006b41
 80019a0:	00006e61 	.word	0x00006e61
 80019a4:	00007061 	.word	0x00007061
 80019a8:	00007461 	.word	0x00007461
 80019ac:	000072a1 	.word	0x000072a1
 80019b0:	000072e1 	.word	0x000072e1
 80019b4:	00007301 	.word	0x00007301
 80019b8:	00007341 	.word	0x00007341
 80019bc:	00007901 	.word	0x00007901
 80019c0:	00006d41 	.word	0x00006d41
 80019c4:	00006d61 	.word	0x00006d61
 80019c8:	00006da1 	.word	0x00006da1
 80019cc:	00006dc1 	.word	0x00006dc1
 80019d0:	00006e01 	.word	0x00006e01
			  effectTick[i] = &shaperTick;
 80019d4:	4b3d      	ldr	r3, [pc, #244]	; (8001acc <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 80019d6:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &shaperTick;
 80019da:	4a3d      	ldr	r2, [pc, #244]	; (8001ad0 <setEffectsFunctions+0x490>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 80019dc:	483d      	ldr	r0, [pc, #244]	; (8001ad4 <setEffectsFunctions+0x494>)
			  effectTick[i] = &shaperTick;
 80019de:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 80019e2:	493d      	ldr	r1, [pc, #244]	; (8001ad8 <setEffectsFunctions+0x498>)
 80019e4:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 80019e8:	4a3c      	ldr	r2, [pc, #240]	; (8001adc <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 80019ea:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 80019ee:	483c      	ldr	r0, [pc, #240]	; (8001ae0 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Linear;
 80019f0:	493c      	ldr	r1, [pc, #240]	; (8001ae4 <setEffectsFunctions+0x4a4>)
			  effectSetters[i].setParam4 = &blankFunction;
 80019f2:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 80019f4:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Linear;
 80019f6:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 80019fa:	e653      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &clipperGainSet;
 80019fc:	4835      	ldr	r0, [pc, #212]	; (8001ad4 <setEffectsFunctions+0x494>)
 80019fe:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &tanhTick;
 8001a02:	4b32      	ldr	r3, [pc, #200]	; (8001acc <setEffectsFunctions+0x48c>)
 8001a04:	4a38      	ldr	r2, [pc, #224]	; (8001ae8 <setEffectsFunctions+0x4a8>)
 8001a06:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a0a:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 8001a0e:	4932      	ldr	r1, [pc, #200]	; (8001ad8 <setEffectsFunctions+0x498>)
			  effectSetters[i].setParam3 = &blankFunction;
 8001a10:	4a32      	ldr	r2, [pc, #200]	; (8001adc <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a12:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001a16:	4932      	ldr	r1, [pc, #200]	; (8001ae0 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &blankFunction;
 8001a18:	609a      	str	r2, [r3, #8]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001a1a:	6059      	str	r1, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
 8001a1c:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8001a20:	e640      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a22:	482c      	ldr	r0, [pc, #176]	; (8001ad4 <setEffectsFunctions+0x494>)
 8001a24:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &satTick;
 8001a28:	4b28      	ldr	r3, [pc, #160]	; (8001acc <setEffectsFunctions+0x48c>)
 8001a2a:	4a30      	ldr	r2, [pc, #192]	; (8001aec <setEffectsFunctions+0x4ac>)
 8001a2c:	e7eb      	b.n	8001a06 <setEffectsFunctions+0x3c6>
			  effectTick[i] = &polynomialShaperTick;
 8001a2e:	4b27      	ldr	r3, [pc, #156]	; (8001acc <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a30:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &polynomialShaperTick;
 8001a34:	4a2e      	ldr	r2, [pc, #184]	; (8001af0 <setEffectsFunctions+0x4b0>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a36:	4827      	ldr	r0, [pc, #156]	; (8001ad4 <setEffectsFunctions+0x494>)
			  effectTick[i] = &polynomialShaperTick;
 8001a38:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a3c:	4926      	ldr	r1, [pc, #152]	; (8001ad8 <setEffectsFunctions+0x498>)
 8001a3e:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001a42:	4a26      	ldr	r2, [pc, #152]	; (8001adc <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a44:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001a48:	4825      	ldr	r0, [pc, #148]	; (8001ae0 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Poly;
 8001a4a:	492a      	ldr	r1, [pc, #168]	; (8001af4 <setEffectsFunctions+0x4b4>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001a4c:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001a4e:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Poly;
 8001a50:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001a54:	e626      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectTick[i] = &hardClipTick;
 8001a56:	4b1d      	ldr	r3, [pc, #116]	; (8001acc <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a58:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &hardClipTick;
 8001a5c:	4a26      	ldr	r2, [pc, #152]	; (8001af8 <setEffectsFunctions+0x4b8>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a5e:	481d      	ldr	r0, [pc, #116]	; (8001ad4 <setEffectsFunctions+0x494>)
			  effectTick[i] = &hardClipTick;
 8001a60:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a64:	491c      	ldr	r1, [pc, #112]	; (8001ad8 <setEffectsFunctions+0x498>)
 8001a66:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001a6a:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a6c:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001a70:	481b      	ldr	r0, [pc, #108]	; (8001ae0 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Hard;
 8001a72:	4922      	ldr	r1, [pc, #136]	; (8001afc <setEffectsFunctions+0x4bc>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001a74:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001a76:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Hard;
 8001a78:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001a7c:	e612      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectTick[i] = &softClipTick;
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a80:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &softClipTick;
 8001a84:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <setEffectsFunctions+0x4c0>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a86:	4813      	ldr	r0, [pc, #76]	; (8001ad4 <setEffectsFunctions+0x494>)
			  effectTick[i] = &softClipTick;
 8001a88:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a8c:	4912      	ldr	r1, [pc, #72]	; (8001ad8 <setEffectsFunctions+0x498>)
 8001a8e:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8001a92:	4a12      	ldr	r2, [pc, #72]	; (8001adc <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a94:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001a98:	4811      	ldr	r0, [pc, #68]	; (8001ae0 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Soft;
 8001a9a:	491a      	ldr	r1, [pc, #104]	; (8001b04 <setEffectsFunctions+0x4c4>)
			  effectSetters[i].setParam4 = &blankFunction;
 8001a9c:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001a9e:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Soft;
 8001aa0:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8001aa4:	e5fe      	b.n	80016a4 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &blankFunction;
 8001aa6:	480d      	ldr	r0, [pc, #52]	; (8001adc <setEffectsFunctions+0x49c>)
 8001aa8:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8001aac:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <setEffectsFunctions+0x494>)
			  effectTick[i] = &blankTick;
 8001aae:	4c07      	ldr	r4, [pc, #28]	; (8001acc <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &blankFunction;
 8001ab0:	f842 002c 	str.w	r0, [r2, ip, lsl #2]
 8001ab4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
			  effectSetters[i].setParam3 = &blankFunction;
 8001ab8:	e9c2 0001 	strd	r0, r0, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
 8001abc:	e9c2 0003 	strd	r0, r0, [r2, #12]
			  effectsActive[i] = 0;
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	545a      	strb	r2, [r3, r1]
			  effectTick[i] = &blankTick;
 8001ac4:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <setEffectsFunctions+0x4c8>)
 8001ac6:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
			  break;
 8001aca:	e5eb      	b.n	80016a4 <setEffectsFunctions+0x64>
 8001acc:	2001d138 	.word	0x2001d138
 8001ad0:	00007541 	.word	0x00007541
 8001ad4:	20014544 	.word	0x20014544
 8001ad8:	00006b41 	.word	0x00006b41
 8001adc:	00001861 	.word	0x00001861
 8001ae0:	00006e41 	.word	0x00006e41
 8001ae4:	00006e81 	.word	0x00006e81
 8001ae8:	00007601 	.word	0x00007601
 8001aec:	00007841 	.word	0x00007841
 8001af0:	000077a1 	.word	0x000077a1
 8001af4:	00006f81 	.word	0x00006f81
 8001af8:	00007701 	.word	0x00007701
 8001afc:	00006f01 	.word	0x00006f01
 8001b00:	00007661 	.word	0x00007661
 8001b04:	00006ea1 	.word	0x00006ea1
 8001b08:	000075a1 	.word	0x000075a1

08001b0c <setOscilllatorShapes>:

void setOscilllatorShapes(int oscshape, int i)
{
	switch (oscshape)
 8001b0c:	2805      	cmp	r0, #5
 8001b0e:	d808      	bhi.n	8001b22 <setOscilllatorShapes+0x16>
 8001b10:	e8df f000 	tbb	[pc, r0]
 8001b14:	17120d08 	.word	0x17120d08
 8001b18:	031c      	.short	0x031c
			  break;
		  case 4:
			  shapeTick[i] = &sineTick;
			  break;
		  case 5:
			  shapeTick[i] = &triTick;
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <setOscilllatorShapes+0x4c>)
 8001b1c:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <setOscilllatorShapes+0x50>)
 8001b1e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  //shapeTick[i] = &userTick;
			  //break;
		  default:
			  break;
	}
}
 8001b22:	4770      	bx	lr
			  shapeTick[i] = &sawSquareTick;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <setOscilllatorShapes+0x4c>)
 8001b26:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <setOscilllatorShapes+0x54>)
 8001b28:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001b2c:	4770      	bx	lr
			  shapeTick[i] = &sineTriTick;
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <setOscilllatorShapes+0x4c>)
 8001b30:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <setOscilllatorShapes+0x58>)
 8001b32:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001b36:	4770      	bx	lr
			  shapeTick[i] = &sawTick;
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <setOscilllatorShapes+0x4c>)
 8001b3a:	4a0b      	ldr	r2, [pc, #44]	; (8001b68 <setOscilllatorShapes+0x5c>)
 8001b3c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001b40:	4770      	bx	lr
			  shapeTick[i] = &pulseTick;
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <setOscilllatorShapes+0x4c>)
 8001b44:	4a09      	ldr	r2, [pc, #36]	; (8001b6c <setOscilllatorShapes+0x60>)
 8001b46:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001b4a:	4770      	bx	lr
			  shapeTick[i] = &sineTick;
 8001b4c:	4b02      	ldr	r3, [pc, #8]	; (8001b58 <setOscilllatorShapes+0x4c>)
 8001b4e:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <setOscilllatorShapes+0x64>)
 8001b50:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	2001d70c 	.word	0x2001d70c
 8001b5c:	00005aa1 	.word	0x00005aa1
 8001b60:	00005901 	.word	0x00005901
 8001b64:	00005961 	.word	0x00005961
 8001b68:	000059c1 	.word	0x000059c1
 8001b6c:	00005a01 	.word	0x00005a01
 8001b70:	00005a61 	.word	0x00005a61

08001b74 <setFilterTypes>:
void setFilterTypes(int filterType, int i)
{
 8001b74:	b410      	push	{r4}
	switch (filterType)
 8001b76:	2808      	cmp	r0, #8
 8001b78:	d812      	bhi.n	8001ba0 <setFilterTypes+0x2c>
 8001b7a:	e8df f000 	tbb	[pc, r0]
 8001b7e:	3223      	.short	0x3223
 8001b80:	6e5f5041 	.word	0x6e5f5041
 8001b84:	057d      	.short	0x057d
 8001b86:	14          	.byte	0x14
 8001b87:	00          	.byte	0x00
				  filterSetters[i].setQ = &VZhighshelfSetQ;
				  filterSetters[i].setGain = &VZhighshelfSetGain;
				  break;
			  case 7:
				  filterTick[i] = &VZbandrejectTick;
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8001b88:	4b43      	ldr	r3, [pc, #268]	; (8001c98 <setFilterTypes+0x124>)
				  filterTick[i] = &VZbandrejectTick;
 8001b8a:	4a44      	ldr	r2, [pc, #272]	; (8001c9c <setFilterTypes+0x128>)
 8001b8c:	4844      	ldr	r0, [pc, #272]	; (8001ca0 <setFilterTypes+0x12c>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8001b8e:	4c45      	ldr	r4, [pc, #276]	; (8001ca4 <setFilterTypes+0x130>)
				  filterTick[i] = &VZbandrejectTick;
 8001b90:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8001b94:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001b98:	4843      	ldr	r0, [pc, #268]	; (8001ca8 <setFilterTypes+0x134>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8001b9a:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8001b9e:	6050      	str	r0, [r2, #4]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
				  break;
			  default:
				  break;
		}
}
 8001ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ba4:	4770      	bx	lr
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8001ba6:	4b3c      	ldr	r3, [pc, #240]	; (8001c98 <setFilterTypes+0x124>)
				  filterTick[i] = &LadderLowpassTick;
 8001ba8:	4a3c      	ldr	r2, [pc, #240]	; (8001c9c <setFilterTypes+0x128>)
 8001baa:	4840      	ldr	r0, [pc, #256]	; (8001cac <setFilterTypes+0x138>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8001bac:	4c40      	ldr	r4, [pc, #256]	; (8001cb0 <setFilterTypes+0x13c>)
				  filterTick[i] = &LadderLowpassTick;
 8001bae:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8001bb2:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001bb6:	483f      	ldr	r0, [pc, #252]	; (8001cb4 <setFilterTypes+0x140>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8001bb8:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8001bbc:	6050      	str	r0, [r2, #4]
}
 8001bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bc2:	4770      	bx	lr
				  filterSetters[i].setQ = &lowpassSetQ;
 8001bc4:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <setFilterTypes+0x124>)
				  filterTick[i] = &lowpassTick;
 8001bc6:	4a35      	ldr	r2, [pc, #212]	; (8001c9c <setFilterTypes+0x128>)
 8001bc8:	483b      	ldr	r0, [pc, #236]	; (8001cb8 <setFilterTypes+0x144>)
				  filterSetters[i].setQ = &lowpassSetQ;
 8001bca:	4c3c      	ldr	r4, [pc, #240]	; (8001cbc <setFilterTypes+0x148>)
				  filterTick[i] = &lowpassTick;
 8001bcc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &lowpassSetGain;
 8001bd0:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001bd4:	483a      	ldr	r0, [pc, #232]	; (8001cc0 <setFilterTypes+0x14c>)
				  filterSetters[i].setQ = &lowpassSetQ;
 8001bd6:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
 8001bda:	6050      	str	r0, [r2, #4]
}
 8001bdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001be0:	4770      	bx	lr
				  filterSetters[i].setQ = &highpassSetQ;
 8001be2:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <setFilterTypes+0x124>)
				  filterTick[i] = &highpassTick;
 8001be4:	4a2d      	ldr	r2, [pc, #180]	; (8001c9c <setFilterTypes+0x128>)
 8001be6:	4837      	ldr	r0, [pc, #220]	; (8001cc4 <setFilterTypes+0x150>)
				  filterSetters[i].setQ = &highpassSetQ;
 8001be8:	4c37      	ldr	r4, [pc, #220]	; (8001cc8 <setFilterTypes+0x154>)
				  filterTick[i] = &highpassTick;
 8001bea:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &highpassSetGain;
 8001bee:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001bf2:	4836      	ldr	r0, [pc, #216]	; (8001ccc <setFilterTypes+0x158>)
				  filterSetters[i].setQ = &highpassSetQ;
 8001bf4:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
 8001bf8:	6050      	str	r0, [r2, #4]
}
 8001bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bfe:	4770      	bx	lr
				  filterSetters[i].setQ = &bandpassSetQ;
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <setFilterTypes+0x124>)
				  filterTick[i] = &bandpassTick;
 8001c02:	4a26      	ldr	r2, [pc, #152]	; (8001c9c <setFilterTypes+0x128>)
 8001c04:	4832      	ldr	r0, [pc, #200]	; (8001cd0 <setFilterTypes+0x15c>)
				  filterSetters[i].setQ = &bandpassSetQ;
 8001c06:	4c33      	ldr	r4, [pc, #204]	; (8001cd4 <setFilterTypes+0x160>)
				  filterTick[i] = &bandpassTick;
 8001c08:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &bandpassSetGain;
 8001c0c:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001c10:	4831      	ldr	r0, [pc, #196]	; (8001cd8 <setFilterTypes+0x164>)
				  filterSetters[i].setQ = &bandpassSetQ;
 8001c12:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
 8001c16:	6050      	str	r0, [r2, #4]
}
 8001c18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c1c:	4770      	bx	lr
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <setFilterTypes+0x124>)
				  filterTick[i] = &diodeLowpassTick;
 8001c20:	4a1e      	ldr	r2, [pc, #120]	; (8001c9c <setFilterTypes+0x128>)
 8001c22:	482e      	ldr	r0, [pc, #184]	; (8001cdc <setFilterTypes+0x168>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8001c24:	4c2e      	ldr	r4, [pc, #184]	; (8001ce0 <setFilterTypes+0x16c>)
				  filterTick[i] = &diodeLowpassTick;
 8001c26:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8001c2a:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001c2e:	482d      	ldr	r0, [pc, #180]	; (8001ce4 <setFilterTypes+0x170>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8001c30:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8001c34:	6050      	str	r0, [r2, #4]
}
 8001c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c3a:	4770      	bx	lr
				  filterSetters[i].setQ = &VZpeakSetQ;
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <setFilterTypes+0x124>)
				  filterTick[i] = &VZpeakTick;
 8001c3e:	4a17      	ldr	r2, [pc, #92]	; (8001c9c <setFilterTypes+0x128>)
 8001c40:	4829      	ldr	r0, [pc, #164]	; (8001ce8 <setFilterTypes+0x174>)
				  filterSetters[i].setQ = &VZpeakSetQ;
 8001c42:	4c2a      	ldr	r4, [pc, #168]	; (8001cec <setFilterTypes+0x178>)
				  filterTick[i] = &VZpeakTick;
 8001c44:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8001c48:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001c4c:	4828      	ldr	r0, [pc, #160]	; (8001cf0 <setFilterTypes+0x17c>)
				  filterSetters[i].setQ = &VZpeakSetQ;
 8001c4e:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8001c52:	6050      	str	r0, [r2, #4]
}
 8001c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c58:	4770      	bx	lr
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <setFilterTypes+0x124>)
				  filterTick[i] = &VZlowshelfTick;
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <setFilterTypes+0x128>)
 8001c5e:	4825      	ldr	r0, [pc, #148]	; (8001cf4 <setFilterTypes+0x180>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8001c60:	4c25      	ldr	r4, [pc, #148]	; (8001cf8 <setFilterTypes+0x184>)
				  filterTick[i] = &VZlowshelfTick;
 8001c62:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8001c66:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001c6a:	4824      	ldr	r0, [pc, #144]	; (8001cfc <setFilterTypes+0x188>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8001c6c:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8001c70:	6050      	str	r0, [r2, #4]
}
 8001c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c76:	4770      	bx	lr
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <setFilterTypes+0x124>)
				  filterTick[i] = &VZhighshelfTick;
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <setFilterTypes+0x128>)
 8001c7c:	4820      	ldr	r0, [pc, #128]	; (8001d00 <setFilterTypes+0x18c>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8001c7e:	4c21      	ldr	r4, [pc, #132]	; (8001d04 <setFilterTypes+0x190>)
				  filterTick[i] = &VZhighshelfTick;
 8001c80:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8001c84:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8001c88:	481f      	ldr	r0, [pc, #124]	; (8001d08 <setFilterTypes+0x194>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8001c8a:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8001c8e:	6050      	str	r0, [r2, #4]
}
 8001c90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20016598 	.word	0x20016598
 8001c9c:	2001d1ac 	.word	0x2001d1ac
 8001ca0:	00005fc1 	.word	0x00005fc1
 8001ca4:	00006241 	.word	0x00006241
 8001ca8:	00006441 	.word	0x00006441
 8001cac:	00006021 	.word	0x00006021
 8001cb0:	00006261 	.word	0x00006261
 8001cb4:	00006481 	.word	0x00006481
 8001cb8:	00005d81 	.word	0x00005d81
 8001cbc:	00006161 	.word	0x00006161
 8001cc0:	00006281 	.word	0x00006281
 8001cc4:	00005de1 	.word	0x00005de1
 8001cc8:	00006181 	.word	0x00006181
 8001ccc:	000062c1 	.word	0x000062c1
 8001cd0:	00005e41 	.word	0x00005e41
 8001cd4:	000061a1 	.word	0x000061a1
 8001cd8:	00006301 	.word	0x00006301
 8001cdc:	00005ea1 	.word	0x00005ea1
 8001ce0:	000061c1 	.word	0x000061c1
 8001ce4:	00006341 	.word	0x00006341
 8001ce8:	00005f01 	.word	0x00005f01
 8001cec:	000061e1 	.word	0x000061e1
 8001cf0:	00006381 	.word	0x00006381
 8001cf4:	00005f41 	.word	0x00005f41
 8001cf8:	00006201 	.word	0x00006201
 8001cfc:	000063c1 	.word	0x000063c1
 8001d00:	00005f81 	.word	0x00005f81
 8001d04:	00006221 	.word	0x00006221
 8001d08:	00006401 	.word	0x00006401

08001d0c <setLFOShapes>:

void setLFOShapes(int LFOShape, int i)
{
 8001d0c:	b410      	push	{r4}
	switch(LFOShape)
 8001d0e:	2805      	cmp	r0, #5
 8001d10:	d814      	bhi.n	8001d3c <setLFOShapes+0x30>
 8001d12:	e8df f000 	tbb	[pc, r0]
 8001d16:	3c29      	.short	0x3c29
 8001d18:	1603624f 	.word	0x1603624f
			lfoSetters[i].setRate = &lfoTriSetRate;
			lfoSetters[i].setShape = &lfoTriSetShape;
			lfoSetters[i].setPhase = &lfoTriSetPhase;
			break;
		case SawLFOShapeSet:
			lfoShapeTick[i] = &lfoSawTick;
 8001d1c:	4b38      	ldr	r3, [pc, #224]	; (8001e00 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 8001d1e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawTick;
 8001d22:	4c38      	ldr	r4, [pc, #224]	; (8001e04 <setLFOShapes+0xf8>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 8001d24:	4a38      	ldr	r2, [pc, #224]	; (8001e08 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawTick;
 8001d26:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
 8001d2a:	4c38      	ldr	r4, [pc, #224]	; (8001e0c <setLFOShapes+0x100>)
 8001d2c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSetShape;
 8001d30:	4937      	ldr	r1, [pc, #220]	; (8001e10 <setLFOShapes+0x104>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 8001d32:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
 8001d36:	4a37      	ldr	r2, [pc, #220]	; (8001e14 <setLFOShapes+0x108>)
 8001d38:	e9c3 1201 	strd	r1, r2, [r3, #4]
			lfoSetters[i].setRate = &lfoPulseSetRate;
			lfoSetters[i].setShape = &lfoPulseSetShape;
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
			break;
	}
}
 8001d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d40:	4770      	bx	lr
			lfoShapeTick[i] = &lfoPulseTick;
 8001d42:	4b2f      	ldr	r3, [pc, #188]	; (8001e00 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8001d44:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoPulseTick;
 8001d48:	4c33      	ldr	r4, [pc, #204]	; (8001e18 <setLFOShapes+0x10c>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8001d4a:	4a2f      	ldr	r2, [pc, #188]	; (8001e08 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoPulseTick;
 8001d4c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8001d50:	4c32      	ldr	r4, [pc, #200]	; (8001e1c <setLFOShapes+0x110>)
 8001d52:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoPulseSetShape;
 8001d56:	4932      	ldr	r1, [pc, #200]	; (8001e20 <setLFOShapes+0x114>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8001d58:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8001d5c:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <setLFOShapes+0x118>)
 8001d5e:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 8001d62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d66:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTriTick;
 8001d68:	4b25      	ldr	r3, [pc, #148]	; (8001e00 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 8001d6a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTriTick;
 8001d6e:	4c2e      	ldr	r4, [pc, #184]	; (8001e28 <setLFOShapes+0x11c>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 8001d70:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTriTick;
 8001d72:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 8001d76:	4c2d      	ldr	r4, [pc, #180]	; (8001e2c <setLFOShapes+0x120>)
 8001d78:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineTriSetShape;
 8001d7c:	492c      	ldr	r1, [pc, #176]	; (8001e30 <setLFOShapes+0x124>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 8001d7e:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8001d82:	4a2c      	ldr	r2, [pc, #176]	; (8001e34 <setLFOShapes+0x128>)
 8001d84:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 8001d88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d8c:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8001d90:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawSquareTick;
 8001d94:	4c28      	ldr	r4, [pc, #160]	; (8001e38 <setLFOShapes+0x12c>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8001d96:	4a1c      	ldr	r2, [pc, #112]	; (8001e08 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawSquareTick;
 8001d98:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8001d9c:	4c27      	ldr	r4, [pc, #156]	; (8001e3c <setLFOShapes+0x130>)
 8001d9e:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8001da2:	4927      	ldr	r1, [pc, #156]	; (8001e40 <setLFOShapes+0x134>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8001da4:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8001da8:	4a26      	ldr	r2, [pc, #152]	; (8001e44 <setLFOShapes+0x138>)
 8001daa:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 8001dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001db2:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTick;
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 8001db6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTick;
 8001dba:	4c23      	ldr	r4, [pc, #140]	; (8001e48 <setLFOShapes+0x13c>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTick;
 8001dbe:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
 8001dc2:	4c22      	ldr	r4, [pc, #136]	; (8001e4c <setLFOShapes+0x140>)
 8001dc4:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineSetShape;
 8001dc8:	4921      	ldr	r1, [pc, #132]	; (8001e50 <setLFOShapes+0x144>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 8001dca:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
 8001dce:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <setLFOShapes+0x148>)
 8001dd0:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 8001dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dd8:	4770      	bx	lr
			lfoShapeTick[i] = &lfoTriTick;
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 8001ddc:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoTriTick;
 8001de0:	4c1d      	ldr	r4, [pc, #116]	; (8001e58 <setLFOShapes+0x14c>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 8001de2:	4a09      	ldr	r2, [pc, #36]	; (8001e08 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoTriTick;
 8001de4:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
 8001de8:	4c1c      	ldr	r4, [pc, #112]	; (8001e5c <setLFOShapes+0x150>)
 8001dea:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoTriSetShape;
 8001dee:	491c      	ldr	r1, [pc, #112]	; (8001e60 <setLFOShapes+0x154>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 8001df0:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
 8001df4:	4a1b      	ldr	r2, [pc, #108]	; (8001e64 <setLFOShapes+0x158>)
 8001df6:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 8001dfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	2001d330 	.word	0x2001d330
 8001e04:	000068a1 	.word	0x000068a1
 8001e08:	200186c4 	.word	0x200186c4
 8001e0c:	00006981 	.word	0x00006981
 8001e10:	00006b01 	.word	0x00006b01
 8001e14:	00006a41 	.word	0x00006a41
 8001e18:	000068e1 	.word	0x000068e1
 8001e1c:	000069a1 	.word	0x000069a1
 8001e20:	00006b21 	.word	0x00006b21
 8001e24:	00006a61 	.word	0x00006a61
 8001e28:	00006841 	.word	0x00006841
 8001e2c:	00006921 	.word	0x00006921
 8001e30:	00006aa1 	.word	0x00006aa1
 8001e34:	000069e1 	.word	0x000069e1
 8001e38:	00006821 	.word	0x00006821
 8001e3c:	00006901 	.word	0x00006901
 8001e40:	00006a81 	.word	0x00006a81
 8001e44:	000069c1 	.word	0x000069c1
 8001e48:	00006861 	.word	0x00006861
 8001e4c:	00006941 	.word	0x00006941
 8001e50:	00006ac1 	.word	0x00006ac1
 8001e54:	00006a01 	.word	0x00006a01
 8001e58:	00006881 	.word	0x00006881
 8001e5c:	00006961 	.word	0x00006961
 8001e60:	00006ae1 	.word	0x00006ae1
 8001e64:	00006a21 	.word	0x00006a21

08001e68 <fromAscii>:
uint8_t arrayNumber = 0;
uint16_t positionInRowLine = 0;

uint8_t fromHex(char value)
{
	if (('0' <= value) && (value <= '9'))
 8001e68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b09      	cmp	r3, #9
 8001e70:	d924      	bls.n	8001ebc <fromAscii+0x54>
		return (uint8_t) (value - '0');
	if (('a' <= value) && (value <= 'f'))
 8001e72:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	d915      	bls.n	8001ea6 <fromAscii+0x3e>
		return (uint8_t) (10 + value - 'a');
	if (('A' <= value) && (value <= 'F'))
 8001e7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8001e7e:	2b05      	cmp	r3, #5
 8001e80:	d923      	bls.n	8001eca <fromAscii+0x62>
 8001e82:	2000      	movs	r0, #0
	if (('0' <= value) && (value <= '9'))
 8001e84:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b09      	cmp	r3, #9
 8001e8c:	d914      	bls.n	8001eb8 <fromAscii+0x50>
	if (('a' <= value) && (value <= 'f'))
 8001e8e:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d915      	bls.n	8001ec2 <fromAscii+0x5a>
	if (('A' <= value) && (value <= 'F'))
 8001e96:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	d802      	bhi.n	8001ea4 <fromAscii+0x3c>
		return (uint8_t) (10 + value - 'A');
 8001e9e:	3937      	subs	r1, #55	; 0x37
	return 0;
}
uint8_t fromAscii(uint8_t input1, uint8_t input2)
{
	return ((fromHex(input1)<<4) | (fromHex(input2)));
 8001ea0:	4301      	orrs	r1, r0
 8001ea2:	b2c8      	uxtb	r0, r1
}
 8001ea4:	4770      	bx	lr
	if (('0' <= value) && (value <= '9'))
 8001ea6:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
		return (uint8_t) (10 + value - 'a');
 8001eaa:	3857      	subs	r0, #87	; 0x57
	if (('0' <= value) && (value <= '9'))
 8001eac:	b2db      	uxtb	r3, r3
	return ((fromHex(input1)<<4) | (fromHex(input2)));
 8001eae:	0100      	lsls	r0, r0, #4
	if (('0' <= value) && (value <= '9'))
 8001eb0:	2b09      	cmp	r3, #9
 8001eb2:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8001eb6:	d8ea      	bhi.n	8001e8e <fromAscii+0x26>
	return ((fromHex(input1)<<4) | (fromHex(input2)));
 8001eb8:	4318      	orrs	r0, r3
 8001eba:	4770      	bx	lr
 8001ebc:	0118      	lsls	r0, r3, #4
 8001ebe:	b2c0      	uxtb	r0, r0
 8001ec0:	e7e0      	b.n	8001e84 <fromAscii+0x1c>
		return (uint8_t) (10 + value - 'a');
 8001ec2:	3957      	subs	r1, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
 8001ec4:	4301      	orrs	r1, r0
 8001ec6:	b2c8      	uxtb	r0, r1
		return (uint8_t) (10 + value - 'a');
 8001ec8:	4770      	bx	lr
		return (uint8_t) (10 + value - 'A');
 8001eca:	3837      	subs	r0, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
 8001ecc:	0100      	lsls	r0, r0, #4
 8001ece:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
		return (uint8_t) (10 + value - 'A');
 8001ed2:	e7d7      	b.n	8001e84 <fromAscii+0x1c>

08001ed4 <CycleCounterInit>:

// helper function to initialize measuring unit (cycle counter) */
void CycleCounterInit( void )
{
  /* Enable TRC */
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <CycleCounterInit+0x2c>)

  /* Unlock DWT registers */
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8001ed6:	490b      	ldr	r1, [pc, #44]	; (8001f04 <CycleCounterInit+0x30>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001ed8:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8001edc:	f8d1 0fb4 	ldr.w	r0, [r1, #4020]	; 0xfb4
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001ee0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8001ee8:	07c3      	lsls	r3, r0, #31
 8001eea:	d502      	bpl.n	8001ef2 <CycleCounterInit+0x1e>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <CycleCounterInit+0x34>)
 8001eee:	f8c1 3fb0 	str.w	r3, [r1, #4016]	; 0xfb0

  /* clear the cycle counter */
  DWT->CYCCNT = 0;
 8001ef2:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <CycleCounterInit+0x30>)
 8001ef4:	2100      	movs	r1, #0

  /* start the cycle counter */
  DWT->CTRL = 0x40000001;
 8001ef6:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <CycleCounterInit+0x38>)
  DWT->CYCCNT = 0;
 8001ef8:	6059      	str	r1, [r3, #4]
  DWT->CTRL = 0x40000001;
 8001efa:	601a      	str	r2, [r3, #0]

}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000ed00 	.word	0xe000ed00
 8001f04:	e0001000 	.word	0xe0001000
 8001f08:	c5acce55 	.word	0xc5acce55
 8001f0c:	40000001 	.word	0x40000001

08001f10 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001f10:	4bd8      	ldr	r3, [pc, #864]	; (8002274 <main+0x364>)
{
 8001f12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f16:	ed2d 8b02 	vpush	{d8}
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	b08d      	sub	sp, #52	; 0x34
 8001f1e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8001f22:	d111      	bne.n	8001f48 <main+0x38>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f28:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001f2c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001f30:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f34:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f3e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001f40:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f44:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001f48:	49ca      	ldr	r1, [pc, #808]	; (8002274 <main+0x364>)
 8001f4a:	694b      	ldr	r3, [r1, #20]
 8001f4c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8001f50:	d124      	bne.n	8001f9c <main+0x8c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001f52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001f56:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001f5a:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f5e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001f62:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001f66:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8001f6a:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f6c:	ea04 0006 	and.w	r0, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001f70:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f72:	ea40 7283 	orr.w	r2, r0, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001f76:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001f78:	f8c1 2260 	str.w	r2, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	d1f8      	bne.n	8001f72 <main+0x62>
    } while(sets-- != 0U);
 8001f80:	3c20      	subs	r4, #32
 8001f82:	f114 0f20 	cmn.w	r4, #32
 8001f86:	d1f1      	bne.n	8001f6c <main+0x5c>
 8001f88:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001f8c:	694b      	ldr	r3, [r1, #20]
 8001f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f92:	614b      	str	r3, [r1, #20]
 8001f94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f98:	f3bf 8f6f 	isb	sy

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001f9c:	2400      	movs	r4, #0
  HAL_Init();
 8001f9e:	f001 fd6d 	bl	8003a7c <HAL_Init>
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001fa2:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001fa4:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001fa8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_MPU_Disable();
 8001fac:	f001 fe3e 	bl	8003c2c <HAL_MPU_Disable>
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001fb0:	f248 721f 	movw	r2, #34591	; 0x871f
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001fb4:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fb8:	a808      	add	r0, sp, #32
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001fba:	f8ad 5020 	strh.w	r5, [sp, #32]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001fbe:	930b      	str	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001fc0:	e9cd 4209 	strd	r4, r2, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fc4:	f001 fe50 	bl	8003c68 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001fc8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001fcc:	4baa      	ldr	r3, [pc, #680]	; (8002278 <main+0x368>)
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fce:	a808      	add	r0, sp, #32
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001fd0:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8001fd4:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fd8:	f001 fe46 	bl	8003c68 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8001fdc:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001fe0:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001fe2:	a808      	add	r0, sp, #32
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8001fe4:	9309      	str	r3, [sp, #36]	; 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001fe6:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8001fe8:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8001fec:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001ff0:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8001ff4:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001ff8:	f001 fe36 	bl	8003c68 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8001ffc:	2103      	movs	r1, #3
  MPU_InitStruct.BaseAddress = 0x60000000;
 8001ffe:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8002002:	2318      	movs	r3, #24
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002004:	a808      	add	r0, sp, #32
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8002006:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
  MPU_InitStruct.BaseAddress = 0x60000000;
 800200a:	9209      	str	r2, [sp, #36]	; 0x24
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800200c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002010:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002014:	f001 fe28 	bl	8003c68 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002018:	2004      	movs	r0, #4
 800201a:	f001 fe15 	bl	8003c48 <HAL_MPU_Enable>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800201e:	b662      	cpsie	i
  SystemClock_Config();
 8002020:	f7ff f91e 	bl	8001260 <SystemClock_Config>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8002024:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 80022fc <main+0x3ec>
  PeriphCommonClock_Config();
 8002028:	f7ff f99a 	bl	8001360 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 800202c:	f7fe ff86 	bl	8000f3c <MX_GPIO_Init>
  MX_DMA_Init();
 8002030:	f7fe fe96 	bl	8000d60 <MX_DMA_Init>
  MX_FMC_Init();
 8002034:	f7fe fed0 	bl	8000dd8 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8002038:	f000 fcf6 	bl	8002a28 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800203c:	f009 f910 	bl	800b260 <MX_FATFS_Init>
  MX_SAI1_Init();
 8002040:	f000 fc02 	bl	8002848 <MX_SAI1_Init>
  MX_RNG_Init();
 8002044:	f000 fbc0 	bl	80027c8 <MX_RNG_Init>
  MX_I2C2_Init();
 8002048:	f7ff f874 	bl	8001134 <MX_I2C2_Init>
  MX_SPI1_Init();
 800204c:	f000 fd60 	bl	8002b10 <MX_SPI1_Init>
  MX_SPI5_Init();
 8002050:	f000 fd84 	bl	8002b5c <MX_SPI5_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8002054:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002058:	4888      	ldr	r0, [pc, #544]	; (800227c <main+0x36c>)
 800205a:	f003 fd19 	bl	8005a90 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800205e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8002062:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8002064:	4885      	ldr	r0, [pc, #532]	; (800227c <main+0x36c>)
 8002066:	f003 fd13 	bl	8005a90 <HAL_GPIO_ReadPin>
 800206a:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800206c:	2104      	movs	r1, #4
 800206e:	4884      	ldr	r0, [pc, #528]	; (8002280 <main+0x370>)
 8002070:	f003 fd0e 	bl	8005a90 <HAL_GPIO_ReadPin>
 8002074:	4602      	mov	r2, r0
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8002076:	00a3      	lsls	r3, r4, #2
	HAL_Delay(500);
 8002078:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 800207c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8002080:	4413      	add	r3, r2
 8002082:	f88a 3000 	strb.w	r3, [sl]
	HAL_Delay(500);
 8002086:	f001 fd3b 	bl	8003b00 <HAL_Delay>
   PWR->CR1 |= PWR_CR1_DBP;
 800208a:	4a7e      	ldr	r2, [pc, #504]	; (8002284 <main+0x374>)
 800208c:	6813      	ldr	r3, [r2, #0]
 800208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002092:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002094:	6813      	ldr	r3, [r2, #0]
 8002096:	05db      	lsls	r3, r3, #23
 8002098:	d5fc      	bpl.n	8002094 <main+0x184>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
 800209a:	4b7b      	ldr	r3, [pc, #492]	; (8002288 <main+0x378>)
 800209c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80020a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	9303      	str	r3, [sp, #12]
 80020b2:	9b03      	ldr	r3, [sp, #12]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 80020b4:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 80020b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 80020bc:	eee1 3a10 	vmsr	fpscr, r3
  CycleCounterInit();
 80020c0:	f7ff ff08 	bl	8001ed4 <CycleCounterInit>
	  SPI_PLUCK_TX[i] = 0;
 80020c4:	2240      	movs	r2, #64	; 0x40
 80020c6:	2100      	movs	r1, #0
 80020c8:	4870      	ldr	r0, [pc, #448]	; (800228c <main+0x37c>)
 80020ca:	f014 fbf1 	bl	80168b0 <memset>
	  buffer[i] = 0;
 80020ce:	4b70      	ldr	r3, [pc, #448]	; (8002290 <main+0x380>)
 80020d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f014 fbea 	bl	80168b0 <memset>
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
 80020dc:	22fe      	movs	r2, #254	; 0xfe
	  buffer[i] = 0;
 80020de:	4603      	mov	r3, r0
  buffer[15+112] = NUM_PARAMS;
 80020e0:	219c      	movs	r1, #156	; 0x9c
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80020e2:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80020e6:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8002294 <main+0x384>
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
 80020ea:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80020ee:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+26+112] = 0xfe;
 80020f2:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
  buffer[NUM_PARAMS*2+19+112] = 1;
 80020f6:	2201      	movs	r2, #1
  buffer[15+112] = NUM_PARAMS;
 80020f8:	f880 107f 	strb.w	r1, [r0, #127]	; 0x7f
  buffer[NUM_PARAMS*2+16+112] = 0xef;
 80020fc:	f64e 70ef 	movw	r0, #61423	; 0xefef
  buffer[NUM_PARAMS*2+19+112] = 1;
 8002100:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8002104:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+16+112] = 0xef;
 8002108:	f8a3 01b8 	strh.w	r0, [r3, #440]	; 0x1b8
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 800210c:	4862      	ldr	r0, [pc, #392]	; (8002298 <main+0x388>)
 800210e:	f00f fd13 	bl	8011b38 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 8002112:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002116:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800229c <main+0x38c>
 800211a:	eddf 0a61 	vldr	s1, [pc, #388]	; 80022a0 <main+0x390>
 800211e:	ed9f 0a61 	vldr	s0, [pc, #388]	; 80022a4 <main+0x394>
 8002122:	4861      	ldr	r0, [pc, #388]	; (80022a8 <main+0x398>)
 8002124:	f00f fd08 	bl	8011b38 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 8002128:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800212c:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8002130:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002134:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 80022a4 <main+0x394>
 8002138:	485c      	ldr	r0, [pc, #368]	; (80022ac <main+0x39c>)
 800213a:	f00f fcfd 	bl	8011b38 <LEAF_generate_table_skew_non_sym>
  if (boardNumber == 0)
 800213e:	f89a 3000 	ldrb.w	r3, [sl]
 8002142:	2b00      	cmp	r3, #0
 8002144:	f000 832b 	beq.w	800279e <main+0x88e>
	  diskBusy = 1;
 8002148:	2301      	movs	r3, #1
 800214a:	4a59      	ldr	r2, [pc, #356]	; (80022b0 <main+0x3a0>)
  specialModeMacroNames[0][2] = "PluckWidt ";
 800214c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8002300 <main+0x3f0>
  specialModeMacroNames[4][11] = "PU Pos   ";
 8002150:	f04f 093f 	mov.w	r9, #63	; 0x3f
	  diskBusy = 1;
 8002154:	7013      	strb	r3, [r2, #0]
  SDRAM_init();
 8002156:	f7ff fa2d 	bl	80015b4 <SDRAM_init>
  audioInit();
 800215a:	f7fe fbc9 	bl	80008f0 <audioInit>
  specialModeMacroNames[0][0] = "Feedback  ";
 800215e:	4b55      	ldr	r3, [pc, #340]	; (80022b4 <main+0x3a4>)
  specialModeNames[0] = "PHYS STR1     ";
 8002160:	4c55      	ldr	r4, [pc, #340]	; (80022b8 <main+0x3a8>)
  specialModeMacroNames[0][2] = "PluckWidt ";
 8002162:	f8c3 8008 	str.w	r8, [r3, #8]
  specialModeMacroNames[0][3] = "PickNoise ";
 8002166:	f8df 819c 	ldr.w	r8, [pc, #412]	; 8002304 <main+0x3f4>
 800216a:	46a3      	mov	fp, r4
  specialModeMacroNames[0][5] = "          ";
 800216c:	4953      	ldr	r1, [pc, #332]	; (80022bc <main+0x3ac>)
  specialModeMacroNames[0][3] = "PickNoise ";
 800216e:	f8c3 800c 	str.w	r8, [r3, #12]
  specialModeMacroNames[0][4] = "PickupSim ";
 8002172:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8002308 <main+0x3f8>
  specialModeMacroNames[0][1] = "SlideNois ";
 8002176:	4d52      	ldr	r5, [pc, #328]	; (80022c0 <main+0x3b0>)
  specialModeMacroNames[0][4] = "PickupSim ";
 8002178:	f8c3 8010 	str.w	r8, [r3, #16]
  specialModeNames[1] = "PHYS STR2     ";
 800217c:	f8df 818c 	ldr.w	r8, [pc, #396]	; 800230c <main+0x3fc>
  specialModeMacroNames[1][5] = "Stiffness ";
 8002180:	4f50      	ldr	r7, [pc, #320]	; (80022c4 <main+0x3b4>)
  specialModeNames[1] = "PHYS STR2     ";
 8002182:	f8c4 8004 	str.w	r8, [r4, #4]
  specialModeMacroNames[1][0] = "DecayTime ";
 8002186:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8002310 <main+0x400>
  specialModeMacroNames[1][8] = "PU Filter ";
 800218a:	4e4f      	ldr	r6, [pc, #316]	; (80022c8 <main+0x3b8>)
  specialModeMacroNames[1][0] = "DecayTime ";
 800218c:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
  specialModeMacroNames[1][2] = "PluckPos  ";
 8002190:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8002314 <main+0x404>
  specialModeMacroNames[1][1] = "Tone      ";
 8002194:	f8df c180 	ldr.w	ip, [pc, #384]	; 8002318 <main+0x408>
  specialModeMacroNames[1][2] = "PluckPos  ";
 8002198:	f8c3 8058 	str.w	r8, [r3, #88]	; 0x58
  specialModeMacroNames[1][6] = "FB Amp    ";
 800219c:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800231c <main+0x40c>
  specialModeMacroNames[1][3] = "PickupPos ";
 80021a0:	f8df e17c 	ldr.w	lr, [pc, #380]	; 8002320 <main+0x410>
  specialModeMacroNames[1][6] = "FB Amp    ";
 80021a4:	f8c3 8068 	str.w	r8, [r3, #104]	; 0x68
  specialModeMacroNames[1][7] = "FB Speed  ";
 80021a8:	f8df 8178 	ldr.w	r8, [pc, #376]	; 8002324 <main+0x414>
  specialModeNames[0] = "PHYS STR1     ";
 80021ac:	4a47      	ldr	r2, [pc, #284]	; (80022cc <main+0x3bc>)
  specialModeMacroNames[1][7] = "FB Speed  ";
 80021ae:	f8c3 806c 	str.w	r8, [r3, #108]	; 0x6c
  specialModeMacroNames[1][9] = "Harmonic  ";
 80021b2:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8002328 <main+0x418>
  specialModeMacroNames[0][0] = "Feedback  ";
 80021b6:	4846      	ldr	r0, [pc, #280]	; (80022d0 <main+0x3c0>)
  specialModeMacroNames[1][9] = "Harmonic  ";
 80021b8:	f8c3 8074 	str.w	r8, [r3, #116]	; 0x74
  specialModeMacroNames[1][10] = "HarmPosX  ";
 80021bc:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800232c <main+0x41c>
  specialModeNames[0] = "PHYS STR1     ";
 80021c0:	6022      	str	r2, [r4, #0]
  specialModeMacroNames[1][10] = "HarmPosX  ";
 80021c2:	f8c3 8078 	str.w	r8, [r3, #120]	; 0x78
  specialModeMacroNames[1][11] = "HarmPosY  ";
 80021c6:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8002330 <main+0x420>
  specialModeMacroNames[0][11] = "          ";
 80021ca:	62d9      	str	r1, [r3, #44]	; 0x2c
  specialModeMacroNames[1][11] = "HarmPosY  ";
 80021cc:	f8c3 807c 	str.w	r8, [r3, #124]	; 0x7c
  specialModeMacroNames[1][12] = "PUModRate ";
 80021d0:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8002334 <main+0x424>
  specialModeMacroNames[0][1] = "SlideNois ";
 80021d4:	605d      	str	r5, [r3, #4]
  specialModeMacroNames[1][12] = "PUModRate ";
 80021d6:	f8c3 8080 	str.w	r8, [r3, #128]	; 0x80
  specialModeMacroNames[1][13] = "PUModAmp  ";
 80021da:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8002338 <main+0x428>
  specialModeMacroNames[1][4] = "SlideNois ";
 80021de:	661d      	str	r5, [r3, #96]	; 0x60
  specialModeMacroNames[1][13] = "PUModAmp  ";
 80021e0:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
  specialModeMacroNames[1][14] = "Ph Harm G ";
 80021e4:	f8df 8154 	ldr.w	r8, [pc, #340]	; 800233c <main+0x42c>
  specialModeMacroNames[1][5] = "Stiffness ";
 80021e8:	665f      	str	r7, [r3, #100]	; 0x64
  specialModeMacroNames[1][14] = "Ph Harm G ";
 80021ea:	f8c3 8088 	str.w	r8, [r3, #136]	; 0x88
  specialModeMacroNames[1][15] = "PUFilterQ ";
 80021ee:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8002340 <main+0x430>
  specialModeMacroNames[1][8] = "PU Filter ";
 80021f2:	671e      	str	r6, [r3, #112]	; 0x70
  specialModeMacroNames[1][15] = "PUFilterQ ";
 80021f4:	f8c3 808c 	str.w	r8, [r3, #140]	; 0x8c
  specialModeMacroNames[1][16] = "PeakF Q   ";
 80021f8:	f8df 8148 	ldr.w	r8, [pc, #328]	; 8002344 <main+0x434>
  specialModeMacroNames[0][0] = "Feedback  ";
 80021fc:	6018      	str	r0, [r3, #0]
  specialModeMacroNames[1][16] = "PeakF Q   ";
 80021fe:	f8c3 8090 	str.w	r8, [r3, #144]	; 0x90
  specialModeMacroNames[1][17] = "PeakF Frq ";
 8002202:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8002348 <main+0x438>
  specialModeMacroNames[1][1] = "Tone      ";
 8002206:	f8c3 c054 	str.w	ip, [r3, #84]	; 0x54
  specialModeMacroNames[1][17] = "PeakF Frq ";
 800220a:	f8c3 8094 	str.w	r8, [r3, #148]	; 0x94
  specialModeMacroNames[1][18] = "Tension G ";
 800220e:	f8df 813c 	ldr.w	r8, [pc, #316]	; 800234c <main+0x43c>
  specialModeMacroNames[1][3] = "PickupPos ";
 8002212:	f8c3 e05c 	str.w	lr, [r3, #92]	; 0x5c
  specialModeMacroNames[2][11] = "Decay     ";
 8002216:	4d2f      	ldr	r5, [pc, #188]	; (80022d4 <main+0x3c4>)
  specialModeMacroNames[0][6] = "          ";
 8002218:	e9c3 1105 	strd	r1, r1, [r3, #20]
  specialModeMacroNames[0][8] = "          ";
 800221c:	e9c3 1107 	strd	r1, r1, [r3, #28]
  specialModeMacroNames[0][10] = "          ";
 8002220:	e9c3 1109 	strd	r1, r1, [r3, #36]	; 0x24
  specialModeMacroNames[1][18] = "Tension G ";
 8002224:	f8c3 8098 	str.w	r8, [r3, #152]	; 0x98
  specialModeMacroNames[1][19] = "Acoustic  ";
 8002228:	4698      	mov	r8, r3
  specialModeMacroNames[4][3] = "PU Filter ";
 800222a:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
  specialModeMacroNames[1][19] = "Acoustic  ";
 800222e:	4e2a      	ldr	r6, [pc, #168]	; (80022d8 <main+0x3c8>)
  specialModeMacroNames[4][0] = "Stiffness ";
 8002230:	f8c3 7140 	str.w	r7, [r3, #320]	; 0x140
  specialModeMacroNames[1][19] = "Acoustic  ";
 8002234:	f8c3 609c 	str.w	r6, [r3, #156]	; 0x9c
  specialModeNames[2] = "ADDITIVE      ";
 8002238:	4e28      	ldr	r6, [pc, #160]	; (80022dc <main+0x3cc>)
  specialModeMacroNames[2][9] = "          ";
 800223a:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
  specialModeNames[2] = "ADDITIVE      ";
 800223e:	60a6      	str	r6, [r4, #8]
  specialModeMacroNames[2][0] = "Stretch   ";
 8002240:	4e27      	ldr	r6, [pc, #156]	; (80022e0 <main+0x3d0>)
  specialModeMacroNames[2][3] = "PickupPos ";
 8002242:	f8c3 e0ac 	str.w	lr, [r3, #172]	; 0xac
  specialModeMacroNames[2][0] = "Stretch   ";
 8002246:	f8c3 60a0 	str.w	r6, [r3, #160]	; 0xa0
  specialModeMacroNames[2][1] = "Tilt      ";
 800224a:	4e26      	ldr	r6, [pc, #152]	; (80022e4 <main+0x3d4>)
  specialModeMacroNames[2][10] = "Tone      ";
 800224c:	f8c3 c0c8 	str.w	ip, [r3, #200]	; 0xc8
  specialModeMacroNames[2][1] = "Tilt      ";
 8002250:	f8c3 60a4 	str.w	r6, [r3, #164]	; 0xa4
  specialModeMacroNames[2][2] = "NoiseAmp  ";
 8002254:	4e24      	ldr	r6, [pc, #144]	; (80022e8 <main+0x3d8>)
  specialModeMacroNames[2][11] = "Decay     ";
 8002256:	f8c3 50cc 	str.w	r5, [r3, #204]	; 0xcc
  specialModeMacroNames[2][2] = "NoiseAmp  ";
 800225a:	f8c3 60a8 	str.w	r6, [r3, #168]	; 0xa8
  specialModeMacroNames[2][4] = "PickupAmp ";
 800225e:	4e23      	ldr	r6, [pc, #140]	; (80022ec <main+0x3dc>)
 8002260:	4f23      	ldr	r7, [pc, #140]	; (80022f0 <main+0x3e0>)
 8002262:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
  specialModeMacroNames[2][5] = "DiveAmp   ";
 8002266:	4e23      	ldr	r6, [pc, #140]	; (80022f4 <main+0x3e4>)
 8002268:	f8c3 60b4 	str.w	r6, [r3, #180]	; 0xb4
  specialModeMacroNames[2][6] = "DiveRate  ";
 800226c:	4e22      	ldr	r6, [pc, #136]	; (80022f8 <main+0x3e8>)
 800226e:	f8c3 60b8 	str.w	r6, [r3, #184]	; 0xb8
 8002272:	e06d      	b.n	8002350 <main+0x440>
 8002274:	e000ed00 	.word	0xe000ed00
 8002278:	03010011 	.word	0x03010011
 800227c:	58020400 	.word	0x58020400
 8002280:	58020000 	.word	0x58020000
 8002284:	58024800 	.word	0x58024800
 8002288:	58024400 	.word	0x58024400
 800228c:	38000000 	.word	0x38000000
 8002290:	30042380 	.word	0x30042380
 8002294:	3c23d70a 	.word	0x3c23d70a
 8002298:	2001a670 	.word	0x2001a670
 800229c:	457a0000 	.word	0x457a0000
 80022a0:	469c4000 	.word	0x469c4000
 80022a4:	00000000 	.word	0x00000000
 80022a8:	20014598 	.word	0x20014598
 80022ac:	200166c4 	.word	0x200166c4
 80022b0:	20014540 	.word	0x20014540
 80022b4:	2001c670 	.word	0x2001c670
 80022b8:	2001c800 	.word	0x2001c800
 80022bc:	08019630 	.word	0x08019630
 80022c0:	08019600 	.word	0x08019600
 80022c4:	0801967c 	.word	0x0801967c
 80022c8:	080196a0 	.word	0x080196a0
 80022cc:	080195f0 	.word	0x080195f0
 80022d0:	080195e4 	.word	0x080195e4
 80022d4:	08019788 	.word	0x08019788
 80022d8:	08019724 	.word	0x08019724
 80022dc:	08019730 	.word	0x08019730
 80022e0:	08019740 	.word	0x08019740
 80022e4:	0801974c 	.word	0x0801974c
 80022e8:	08019758 	.word	0x08019758
 80022ec:	08019764 	.word	0x08019764
 80022f0:	30043380 	.word	0x30043380
 80022f4:	08019770 	.word	0x08019770
 80022f8:	0801977c 	.word	0x0801977c
 80022fc:	200144e5 	.word	0x200144e5
 8002300:	0801960c 	.word	0x0801960c
 8002304:	08019618 	.word	0x08019618
 8002308:	08019624 	.word	0x08019624
 800230c:	0801963c 	.word	0x0801963c
 8002310:	0801964c 	.word	0x0801964c
 8002314:	08019664 	.word	0x08019664
 8002318:	08019658 	.word	0x08019658
 800231c:	08019688 	.word	0x08019688
 8002320:	08019670 	.word	0x08019670
 8002324:	08019694 	.word	0x08019694
 8002328:	080196ac 	.word	0x080196ac
 800232c:	080196b8 	.word	0x080196b8
 8002330:	080196c4 	.word	0x080196c4
 8002334:	080196d0 	.word	0x080196d0
 8002338:	080196dc 	.word	0x080196dc
 800233c:	080196e8 	.word	0x080196e8
 8002340:	080196f4 	.word	0x080196f4
 8002344:	08019700 	.word	0x08019700
 8002348:	0801970c 	.word	0x0801970c
 800234c:	08019718 	.word	0x08019718
  specialModeNames[3] = "VOCAL        ";
 8002350:	4eb1      	ldr	r6, [pc, #708]	; (8002618 <main+0x708>)
 8002352:	60e6      	str	r6, [r4, #12]
  specialModeMacroNames[3][0] = "Size      ";
 8002354:	4eb1      	ldr	r6, [pc, #708]	; (800261c <main+0x70c>)
 8002356:	f8c3 60f0 	str.w	r6, [r3, #240]	; 0xf0
  specialModeMacroNames[3][1] = "Chipmunk  ";
 800235a:	4eb1      	ldr	r6, [pc, #708]	; (8002620 <main+0x710>)
 800235c:	f8c3 60f4 	str.w	r6, [r3, #244]	; 0xf4
  specialModeMacroNames[3][2] = "Diameter  ";
 8002360:	4eb0      	ldr	r6, [pc, #704]	; (8002624 <main+0x714>)
 8002362:	f8c3 60f8 	str.w	r6, [r3, #248]	; 0xf8
  specialModeMacroNames[3][3] = "Nasal     ";
 8002366:	4eb0      	ldr	r6, [pc, #704]	; (8002628 <main+0x718>)
 8002368:	f8c3 60fc 	str.w	r6, [r3, #252]	; 0xfc
  specialModeMacroNames[3][4] = "Turb Nois ";
 800236c:	4eaf      	ldr	r6, [pc, #700]	; (800262c <main+0x71c>)
 800236e:	f8c3 6100 	str.w	r6, [r3, #256]	; 0x100
  specialModeMacroNames[3][5] = "Unvoiced  ";
 8002372:	4eaf      	ldr	r6, [pc, #700]	; (8002630 <main+0x720>)
 8002374:	f8c3 6104 	str.w	r6, [r3, #260]	; 0x104
  specialModeMacroNames[3][8] = "BackPos   ";
 8002378:	4eae      	ldr	r6, [pc, #696]	; (8002634 <main+0x724>)
 800237a:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
  specialModeMacroNames[3][9] = "BackDiam  ";
 800237e:	4eae      	ldr	r6, [pc, #696]	; (8002638 <main+0x728>)
 8002380:	f8c3 6114 	str.w	r6, [r3, #276]	; 0x114
  specialModeMacroNames[3][10] = "ToungePos  ";
 8002384:	4ead      	ldr	r6, [pc, #692]	; (800263c <main+0x72c>)
 8002386:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
  specialModeMacroNames[3][11] = "ToungeDia  ";
 800238a:	4ead      	ldr	r6, [pc, #692]	; (8002640 <main+0x730>)
 800238c:	f8c3 611c 	str.w	r6, [r3, #284]	; 0x11c
  specialModeNames[4] = "STRING3      ";
 8002390:	4eac      	ldr	r6, [pc, #688]	; (8002644 <main+0x734>)
 8002392:	6126      	str	r6, [r4, #16]
  specialModeMacroNames[4][1] = "PU Prop   ";
 8002394:	4cac      	ldr	r4, [pc, #688]	; (8002648 <main+0x738>)
 8002396:	f8c3 4144 	str.w	r4, [r3, #324]	; 0x144
  specialModeMacroNames[4][2] = "Plck Prop ";
 800239a:	4cac      	ldr	r4, [pc, #688]	; (800264c <main+0x73c>)
 800239c:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
  specialModeMacroNames[4][4] = "NoiseFilt ";
 80023a0:	4cab      	ldr	r4, [pc, #684]	; (8002650 <main+0x740>)
  specialModeMacroNames[2][8] = "          ";
 80023a2:	e9c3 112f 	strd	r1, r1, [r3, #188]	; 0xbc
  specialModeMacroNames[3][7] = "          ";
 80023a6:	e9c3 1142 	strd	r1, r1, [r3, #264]	; 0x108
  specialModeMacroNames[4][4] = "NoiseFilt ";
 80023aa:	f8c3 4150 	str.w	r4, [r3, #336]	; 0x150
  specialModeMacroNames[4][8] = "Decay     ";
 80023ae:	f8c3 5160 	str.w	r5, [r3, #352]	; 0x160
  specialModeMacroNames[4][7] = "          ";
 80023b2:	e9c3 1156 	strd	r1, r1, [r3, #344]	; 0x158
  specialModeMacroNames[4][5] = "NoiseGain ";
 80023b6:	49a7      	ldr	r1, [pc, #668]	; (8002654 <main+0x744>)
 80023b8:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
  specialModeMacroNames[4][9] = "Damping   ";
 80023bc:	49a6      	ldr	r1, [pc, #664]	; (8002658 <main+0x748>)
 80023be:	f8c3 1164 	str.w	r1, [r3, #356]	; 0x164
  specialModeMacroNames[4][10] = "PluckPos ";
 80023c2:	49a6      	ldr	r1, [pc, #664]	; (800265c <main+0x74c>)
 80023c4:	f8c3 1168 	str.w	r1, [r3, #360]	; 0x168
  specialModeMacroNames[4][11] = "PU Pos   ";
 80023c8:	49a5      	ldr	r1, [pc, #660]	; (8002660 <main+0x750>)
 80023ca:	f8c3 116c 	str.w	r1, [r3, #364]	; 0x16c
 80023ce:	2150      	movs	r1, #80	; 0x50
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 80023d0:	4ba4      	ldr	r3, [pc, #656]	; (8002664 <main+0x754>)
 80023d2:	ebc9 04c9 	rsb	r4, r9, r9, lsl #3
 80023d6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
	  for (int j = 0; j < 14; j++)
 80023da:	2300      	movs	r3, #0
 80023dc:	e001      	b.n	80023e2 <main+0x4d2>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 80023de:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80023e2:	54e1      	strb	r1, [r4, r3]
	  for (int j = 0; j < 14; j++)
 80023e4:	3301      	adds	r3, #1
 80023e6:	2b0e      	cmp	r3, #14
 80023e8:	d1f9      	bne.n	80023de <main+0x4ce>
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 80023ea:	23c8      	movs	r3, #200	; 0xc8
 80023ec:	46c4      	mov	ip, r8
	  for (int k = 0; k < 20; k++)
 80023ee:	2600      	movs	r6, #0
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 80023f0:	fb03 fe09 	mul.w	lr, r3, r9
 80023f4:	eb06 0486 	add.w	r4, r6, r6, lsl #2
 80023f8:	1e43      	subs	r3, r0, #1
 80023fa:	f100 0509 	add.w	r5, r0, #9
 80023fe:	f1c0 0001 	rsb	r0, r0, #1
 8002402:	eb0e 0444 	add.w	r4, lr, r4, lsl #1
 8002406:	443c      	add	r4, r7
 8002408:	18c2      	adds	r2, r0, r3
 800240a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		  for (int j = 0; j < 10; j++)
 800240e:	429d      	cmp	r5, r3
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 8002410:	54a1      	strb	r1, [r4, r2]
		  for (int j = 0; j < 10; j++)
 8002412:	d1f9      	bne.n	8002408 <main+0x4f8>
	  for (int k = 0; k < 20; k++)
 8002414:	3601      	adds	r6, #1
 8002416:	2e14      	cmp	r6, #20
 8002418:	d002      	beq.n	8002420 <main+0x510>
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 800241a:	f85c 0f04 	ldr.w	r0, [ip, #4]!
 800241e:	e7e9      	b.n	80023f4 <main+0x4e4>
  for (int i = 0; i < 5; i++)
 8002420:	f1b9 0f3b 	cmp.w	r9, #59	; 0x3b
 8002424:	d007      	beq.n	8002436 <main+0x526>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 8002426:	f85b 2f04 	ldr.w	r2, [fp, #4]!
 800242a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 800242e:	f858 0f50 	ldr.w	r0, [r8, #80]!
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 8002432:	7811      	ldrb	r1, [r2, #0]
 8002434:	e7cc      	b.n	80023d0 <main+0x4c0>
  HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	498b      	ldr	r1, [pc, #556]	; (8002668 <main+0x758>)
 800243a:	488c      	ldr	r0, [pc, #560]	; (800266c <main+0x75c>)
 800243c:	f007 ff12 	bl	800a264 <HAL_SPI_Receive_DMA>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 8002440:	4a8b      	ldr	r2, [pc, #556]	; (8002670 <main+0x760>)
 8002442:	2340      	movs	r3, #64	; 0x40
 8002444:	488b      	ldr	r0, [pc, #556]	; (8002674 <main+0x764>)
 8002446:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
	  if (rand > TWO_TO_31)
 800244a:	eddf 8a8b 	vldr	s17, [pc, #556]	; 8002678 <main+0x768>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 800244e:	f007 ffe9 	bl	800a424 <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockA1, &hsai_BlockB1);
 8002452:	498a      	ldr	r1, [pc, #552]	; (800267c <main+0x76c>)
 8002454:	488a      	ldr	r0, [pc, #552]	; (8002680 <main+0x770>)
 8002456:	f7fe fbe7 	bl	8000c28 <audioStart>
	AudioCodec_init(&hi2c2);
 800245a:	488a      	ldr	r0, [pc, #552]	; (8002684 <main+0x774>)
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
 800245c:	ed9f 8a8a 	vldr	s16, [pc, #552]	; 8002688 <main+0x778>
	AudioCodec_init(&hi2c2);
 8002460:	f7fe fbf4 	bl	8000c4c <AudioCodec_init>
 8002464:	4c89      	ldr	r4, [pc, #548]	; (800268c <main+0x77c>)
 8002466:	f8df b26c 	ldr.w	fp, [pc, #620]	; 80026d4 <main+0x7c4>
 800246a:	4f89      	ldr	r7, [pc, #548]	; (8002690 <main+0x780>)
 800246c:	4e89      	ldr	r6, [pc, #548]	; (8002694 <main+0x784>)
 800246e:	f8df 9268 	ldr.w	r9, [pc, #616]	; 80026d8 <main+0x7c8>
 8002472:	4d89      	ldr	r5, [pc, #548]	; (8002698 <main+0x788>)
 8002474:	f8df 8264 	ldr.w	r8, [pc, #612]	; 80026dc <main+0x7cc>
 8002478:	e024      	b.n	80024c4 <main+0x5b4>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
 800247a:	8833      	ldrh	r3, [r6, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	b903      	cbnz	r3, 8002482 <main+0x572>
 8002480:	8873      	ldrh	r3, [r6, #2]
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8002482:	a908      	add	r1, sp, #32
 8002484:	4885      	ldr	r0, [pc, #532]	; (800269c <main+0x78c>)
 8002486:	f006 f973 	bl	8008770 <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
 800248a:	eddd 7a08 	vldr	s15, [sp, #32]
 800248e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002492:	eef4 7ae8 	vcmpe.f32	s15, s17
 8002496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249a:	dd04      	ble.n	80024a6 <main+0x596>
		  myTestInt++;
 800249c:	f8d9 3000 	ldr.w	r3, [r9]
 80024a0:	3301      	adds	r3, #1
 80024a2:	f8c9 3000 	str.w	r3, [r9]
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
 80024a6:	ee67 7a88 	vmul.f32	s15, s15, s16
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 80024aa:	782b      	ldrb	r3, [r5, #0]
 80024ac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80024b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80024ba:	702a      	strb	r2, [r5, #0]
 80024bc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80024c0:	ed83 7a00 	vstr	s14, [r3]
	  if (boardNumber == 0)
 80024c4:	f89a 3000 	ldrb.w	r3, [sl]
 80024c8:	b943      	cbnz	r3, 80024dc <main+0x5cc>
		  if (presetWaitingToLoad > 0)
 80024ca:	f8db 1000 	ldr.w	r1, [fp]
 80024ce:	b171      	cbz	r1, 80024ee <main+0x5de>
			  if (!i2cSending)
 80024d0:	4b73      	ldr	r3, [pc, #460]	; (80026a0 <main+0x790>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d054      	beq.n	8002586 <main+0x676>
	  if (presetWaitingToParse > 0)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0cb      	beq.n	800247a <main+0x56a>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 80024e2:	4b70      	ldr	r3, [pc, #448]	; (80026a4 <main+0x794>)
 80024e4:	6838      	ldr	r0, [r7, #0]
 80024e6:	7819      	ldrb	r1, [r3, #0]
 80024e8:	f016 fc3a 	bl	8018d60 <__parsePreset_veneer>
 80024ec:	e7c5      	b.n	800247a <main+0x56a>
		  else if (presetWaitingToWrite > 0)
 80024ee:	4b6e      	ldr	r3, [pc, #440]	; (80026a8 <main+0x798>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f2      	beq.n	80024dc <main+0x5cc>
				  writePresetToSDCard(presetWaitingToWrite);
 80024f6:	4b6c      	ldr	r3, [pc, #432]	; (80026a8 <main+0x798>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80024fc:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
 80024fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002502:	486a      	ldr	r0, [pc, #424]	; (80026ac <main+0x79c>)
 8002504:	9100      	str	r1, [sp, #0]
 8002506:	f014 f9d3 	bl	80168b0 <memset>
  __IO uint8_t status = SD_PRESENT;
 800250a:	2301      	movs	r3, #1
 800250c:	f88d 300b 	strb.w	r3, [sp, #11]
  return status;
 8002510:	f89d 300b 	ldrb.w	r3, [sp, #11]
	if(BSP_SD_IsDetected())
 8002514:	2b00      	cmp	r3, #0
 8002516:	d02f      	beq.n	8002578 <main+0x668>
 8002518:	4b64      	ldr	r3, [pc, #400]	; (80026ac <main+0x79c>)
 800251a:	9900      	ldr	r1, [sp, #0]
					audioOutBuffer[i + 1] = 0;
 800251c:	e9c3 1100 	strd	r1, r1, [r3]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002520:	3308      	adds	r3, #8
 8002522:	429c      	cmp	r4, r3
 8002524:	d1fa      	bne.n	800251c <main+0x60c>
				diskBusy = 1;
 8002526:	2301      	movs	r3, #1
 8002528:	4a61      	ldr	r2, [pc, #388]	; (80026b0 <main+0x7a0>)
 800252a:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
 800252c:	4a61      	ldr	r2, [pc, #388]	; (80026b4 <main+0x7a4>)
 800252e:	7813      	ldrb	r3, [r2, #0]
 8002530:	2b63      	cmp	r3, #99	; 0x63
 8002532:	d901      	bls.n	8002538 <main+0x628>
			        presetNumberToSave = 99;
 8002534:	2363      	movs	r3, #99	; 0x63
 8002536:	7013      	strb	r3, [r2, #0]
				itoa(presetNumberToSave, charBuf, 10);
 8002538:	4b5e      	ldr	r3, [pc, #376]	; (80026b4 <main+0x7a4>)
 800253a:	220a      	movs	r2, #10
 800253c:	a905      	add	r1, sp, #20
 800253e:	7818      	ldrb	r0, [r3, #0]
 8002540:	f014 f972 	bl	8016828 <itoa>
				int len = ((strlen(charBuf)));
 8002544:	a805      	add	r0, sp, #20
 8002546:	f7fd fec7 	bl	80002d8 <strlen>
				if (len == 1)
 800254a:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 800254c:	4602      	mov	r2, r0
				if (len == 1)
 800254e:	d04b      	beq.n	80025e8 <main+0x6d8>
					strcat(charBuf, ".ebp");
 8002550:	4959      	ldr	r1, [pc, #356]	; (80026b8 <main+0x7a8>)
 8002552:	ab05      	add	r3, sp, #20
 8002554:	6808      	ldr	r0, [r1, #0]
 8002556:	7909      	ldrb	r1, [r1, #4]
 8002558:	5098      	str	r0, [r3, r2]
 800255a:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
 800255c:	a808      	add	r0, sp, #32
 800255e:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 8002560:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
 8002562:	a905      	add	r1, sp, #20
 8002564:	f014 f9d0 	bl	8016908 <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8002568:	220a      	movs	r2, #10
 800256a:	a908      	add	r1, sp, #32
 800256c:	4853      	ldr	r0, [pc, #332]	; (80026bc <main+0x7ac>)
 800256e:	f00a faf9 	bl	800cb64 <f_open>
 8002572:	2800      	cmp	r0, #0
 8002574:	f000 80f2 	beq.w	800275c <main+0x84c>
	presetWaitingToWrite = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	4a4b      	ldr	r2, [pc, #300]	; (80026a8 <main+0x798>)
 800257c:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 800257e:	4a4c      	ldr	r2, [pc, #304]	; (80026b0 <main+0x7a0>)
 8002580:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002582:	b662      	cpsie	i
}
 8002584:	e7aa      	b.n	80024dc <main+0x5cc>
				  checkForSDCardPreset(presetNumberToLoad);
 8002586:	4b47      	ldr	r3, [pc, #284]	; (80026a4 <main+0x794>)
	prevVoice = numberToLoad;
 8002588:	4a4d      	ldr	r2, [pc, #308]	; (80026c0 <main+0x7b0>)
				  checkForSDCardPreset(presetNumberToLoad);
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	b2db      	uxtb	r3, r3
	prevVoice = numberToLoad;
 800258e:	6013      	str	r3, [r2, #0]
	voice = numberToLoad;
 8002590:	4a4c      	ldr	r2, [pc, #304]	; (80026c4 <main+0x7b4>)
 8002592:	6013      	str	r3, [r2, #0]
  __IO uint8_t status = SD_PRESENT;
 8002594:	2201      	movs	r2, #1
 8002596:	f88d 200a 	strb.w	r2, [sp, #10]
  return status;
 800259a:	f89d 200a 	ldrb.w	r2, [sp, #10]
	if(BSP_SD_IsDetected())
 800259e:	b1e2      	cbz	r2, 80025da <main+0x6ca>
 80025a0:	4a42      	ldr	r2, [pc, #264]	; (80026ac <main+0x79c>)
			audioOutBuffer[i + 1] = 0;
 80025a2:	e9c2 1100 	strd	r1, r1, [r2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80025a6:	3208      	adds	r2, #8
 80025a8:	4294      	cmp	r4, r2
 80025aa:	d1fa      	bne.n	80025a2 <main+0x692>
		loadFailed = 0;
 80025ac:	9300      	str	r3, [sp, #0]
		diskBusy = 1;
 80025ae:	2201      	movs	r2, #1
		loadFailed = 0;
 80025b0:	4b45      	ldr	r3, [pc, #276]	; (80026c8 <main+0x7b8>)
		disk_initialize(0);
 80025b2:	2000      	movs	r0, #0
		presetWaitingToLoad = 0;
 80025b4:	f8cb 1000 	str.w	r1, [fp]
		loadFailed = 0;
 80025b8:	7019      	strb	r1, [r3, #0]
		diskBusy = 1;
 80025ba:	4b3d      	ldr	r3, [pc, #244]	; (80026b0 <main+0x7a0>)
 80025bc:	701a      	strb	r2, [r3, #0]
		disk_initialize(0);
 80025be:	f008 ff45 	bl	800b44c <disk_initialize>
	    disk_status(0);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f008 ff38 	bl	800b438 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 80025c8:	2201      	movs	r2, #1
 80025ca:	4940      	ldr	r1, [pc, #256]	; (80026cc <main+0x7bc>)
 80025cc:	4840      	ldr	r0, [pc, #256]	; (80026d0 <main+0x7c0>)
 80025ce:	f00a fa8d 	bl	800caec <f_mount>
 80025d2:	9b00      	ldr	r3, [sp, #0]
 80025d4:	2800      	cmp	r0, #0
 80025d6:	f000 8083 	beq.w	80026e0 <main+0x7d0>
		loadFailed = 1;
 80025da:	2301      	movs	r3, #1
 80025dc:	4a3a      	ldr	r2, [pc, #232]	; (80026c8 <main+0x7b8>)
 80025de:	7013      	strb	r3, [r2, #0]
	diskBusy = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	4a33      	ldr	r2, [pc, #204]	; (80026b0 <main+0x7a0>)
 80025e4:	7013      	strb	r3, [r2, #0]
	return found;
 80025e6:	e779      	b.n	80024dc <main+0x5cc>
					finalString[2] = charBuf[1];
 80025e8:	f89d 3015 	ldrb.w	r3, [sp, #21]
					strcat(finalString, ".ebp");
 80025ec:	a808      	add	r0, sp, #32
					finalString[2] = charBuf[1];
 80025ee:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
					finalString[1] = charBuf[0];
 80025f2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80025f6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
					finalString[0] = '0';
 80025fa:	2330      	movs	r3, #48	; 0x30
 80025fc:	f88d 3020 	strb.w	r3, [sp, #32]
					strcat(finalString, ".ebp");
 8002600:	f7fd fe6a 	bl	80002d8 <strlen>
 8002604:	4a2c      	ldr	r2, [pc, #176]	; (80026b8 <main+0x7a8>)
 8002606:	4603      	mov	r3, r0
 8002608:	a908      	add	r1, sp, #32
 800260a:	6810      	ldr	r0, [r2, #0]
 800260c:	7912      	ldrb	r2, [r2, #4]
 800260e:	50c8      	str	r0, [r1, r3]
 8002610:	440b      	add	r3, r1
 8002612:	711a      	strb	r2, [r3, #4]
 8002614:	e7a8      	b.n	8002568 <main+0x658>
 8002616:	bf00      	nop
 8002618:	08019794 	.word	0x08019794
 800261c:	080197a4 	.word	0x080197a4
 8002620:	080197b0 	.word	0x080197b0
 8002624:	080197bc 	.word	0x080197bc
 8002628:	080197c8 	.word	0x080197c8
 800262c:	080197d4 	.word	0x080197d4
 8002630:	080197e0 	.word	0x080197e0
 8002634:	080197ec 	.word	0x080197ec
 8002638:	080197f8 	.word	0x080197f8
 800263c:	08019804 	.word	0x08019804
 8002640:	08019810 	.word	0x08019810
 8002644:	0801981c 	.word	0x0801981c
 8002648:	0801982c 	.word	0x0801982c
 800264c:	08019838 	.word	0x08019838
 8002650:	08019844 	.word	0x08019844
 8002654:	08019850 	.word	0x08019850
 8002658:	0801985c 	.word	0x0801985c
 800265c:	08019868 	.word	0x08019868
 8002660:	08019874 	.word	0x08019874
 8002664:	30042000 	.word	0x30042000
 8002668:	38000040 	.word	0x38000040
 800266c:	2001ccbc 	.word	0x2001ccbc
 8002670:	30000840 	.word	0x30000840
 8002674:	2001cc34 	.word	0x2001cc34
 8002678:	4f000000 	.word	0x4f000000
 800267c:	2001c9b8 	.word	0x2001c9b8
 8002680:	2001c920 	.word	0x2001c920
 8002684:	20014490 	.word	0x20014490
 8002688:	2f80000d 	.word	0x2f80000d
 800268c:	30000400 	.word	0x30000400
 8002690:	2001a214 	.word	0x2001a214
 8002694:	200143fc 	.word	0x200143fc
 8002698:	20014504 	.word	0x20014504
 800269c:	2001c818 	.word	0x2001c818
 80026a0:	200166c2 	.word	0x200166c2
 80026a4:	2001a20e 	.word	0x2001a20e
 80026a8:	2001a218 	.word	0x2001a218
 80026ac:	30000000 	.word	0x30000000
 80026b0:	20014540 	.word	0x20014540
 80026b4:	2001a20f 	.word	0x2001a20f
 80026b8:	08019880 	.word	0x08019880
 80026bc:	2001db84 	.word	0x2001db84
 80026c0:	2000069c 	.word	0x2000069c
 80026c4:	20014440 	.word	0x20014440
 80026c8:	200186f4 	.word	0x200186f4
 80026cc:	2001ddb4 	.word	0x2001ddb4
 80026d0:	2001d950 	.word	0x2001d950
 80026d4:	2001a210 	.word	0x2001a210
 80026d8:	200190d0 	.word	0x200190d0
 80026dc:	2001a26c 	.word	0x2001a26c
			itoa(numberToLoad, charBuf, 10);
 80026e0:	220a      	movs	r2, #10
 80026e2:	4618      	mov	r0, r3
 80026e4:	a905      	add	r1, sp, #20
 80026e6:	f014 f89f 	bl	8016828 <itoa>
			int len = ((strlen(charBuf)));
 80026ea:	a805      	add	r0, sp, #20
 80026ec:	f7fd fdf4 	bl	80002d8 <strlen>
			if (len == 1)
 80026f0:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
 80026f2:	4602      	mov	r2, r0
			if (len == 1)
 80026f4:	d03c      	beq.n	8002770 <main+0x860>
				strcat(charBuf, "*.ebp");
 80026f6:	492b      	ldr	r1, [pc, #172]	; (80027a4 <main+0x894>)
 80026f8:	ab05      	add	r3, sp, #20
 80026fa:	6808      	ldr	r0, [r1, #0]
 80026fc:	8889      	ldrh	r1, [r1, #4]
 80026fe:	5098      	str	r0, [r3, r2]
 8002700:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
 8002702:	a808      	add	r0, sp, #32
 8002704:	3206      	adds	r2, #6
				strcat(charBuf, "*.ebp");
 8002706:	8099      	strh	r1, [r3, #4]
				strcpy(finalString, charBuf);
 8002708:	a905      	add	r1, sp, #20
 800270a:	f014 f8fd 	bl	8016908 <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 800270e:	ab08      	add	r3, sp, #32
 8002710:	4a25      	ldr	r2, [pc, #148]	; (80027a8 <main+0x898>)
 8002712:	4926      	ldr	r1, [pc, #152]	; (80027ac <main+0x89c>)
 8002714:	4826      	ldr	r0, [pc, #152]	; (80027b0 <main+0x8a0>)
 8002716:	f00a fe69 	bl	800d3ec <f_findfirst>
			if(res == FR_OK)
 800271a:	2800      	cmp	r0, #0
 800271c:	f47f af5d 	bne.w	80025da <main+0x6ca>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8002720:	2211      	movs	r2, #17
 8002722:	4924      	ldr	r1, [pc, #144]	; (80027b4 <main+0x8a4>)
 8002724:	4824      	ldr	r0, [pc, #144]	; (80027b8 <main+0x8a8>)
 8002726:	f00a fa1d 	bl	800cb64 <f_open>
 800272a:	9000      	str	r0, [sp, #0]
 800272c:	2800      	cmp	r0, #0
 800272e:	f47f af54 	bne.w	80025da <main+0x6ca>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8002732:	4a21      	ldr	r2, [pc, #132]	; (80027b8 <main+0x8a8>)
 8002734:	ab04      	add	r3, sp, #16
 8002736:	4921      	ldr	r1, [pc, #132]	; (80027bc <main+0x8ac>)
 8002738:	68d2      	ldr	r2, [r2, #12]
 800273a:	481f      	ldr	r0, [pc, #124]	; (80027b8 <main+0x8a8>)
 800273c:	f00a fb52 	bl	800cde4 <f_read>
					presetWaitingToParse = bytesRead;
 8002740:	9b04      	ldr	r3, [sp, #16]
					f_close(&SDFile);
 8002742:	481d      	ldr	r0, [pc, #116]	; (80027b8 <main+0x8a8>)
					presetWaitingToParse = bytesRead;
 8002744:	603b      	str	r3, [r7, #0]
					f_close(&SDFile);
 8002746:	f00a fd91 	bl	800d26c <f_close>
	  	  i2cSending = 1;
 800274a:	2301      	movs	r3, #1
 800274c:	4a1c      	ldr	r2, [pc, #112]	; (80027c0 <main+0x8b0>)
 800274e:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002750:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 8002752:	b662      	cpsie	i
	  	i2cSending = 0;
 8002754:	4613      	mov	r3, r2
 8002756:	9a00      	ldr	r2, [sp, #0]
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	e741      	b.n	80025e0 <main+0x6d0>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 800275c:	9a01      	ldr	r2, [sp, #4]
 800275e:	ab04      	add	r3, sp, #16
 8002760:	4916      	ldr	r1, [pc, #88]	; (80027bc <main+0x8ac>)
 8002762:	4815      	ldr	r0, [pc, #84]	; (80027b8 <main+0x8a8>)
 8002764:	f00a fc1c 	bl	800cfa0 <f_write>
					f_close(&SDFile);
 8002768:	4813      	ldr	r0, [pc, #76]	; (80027b8 <main+0x8a8>)
 800276a:	f00a fd7f 	bl	800d26c <f_close>
 800276e:	e703      	b.n	8002578 <main+0x668>
				finalString[2] = charBuf[1];
 8002770:	f89d 3015 	ldrb.w	r3, [sp, #21]
				strcat(finalString, "*.ebp");
 8002774:	a808      	add	r0, sp, #32
				finalString[2] = charBuf[1];
 8002776:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				finalString[1] = charBuf[0];
 800277a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800277e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
				finalString[0] = '0';
 8002782:	2330      	movs	r3, #48	; 0x30
 8002784:	f88d 3020 	strb.w	r3, [sp, #32]
				strcat(finalString, "*.ebp");
 8002788:	f7fd fda6 	bl	80002d8 <strlen>
 800278c:	4a05      	ldr	r2, [pc, #20]	; (80027a4 <main+0x894>)
 800278e:	4603      	mov	r3, r0
 8002790:	a908      	add	r1, sp, #32
 8002792:	6810      	ldr	r0, [r2, #0]
 8002794:	8892      	ldrh	r2, [r2, #4]
 8002796:	50c8      	str	r0, [r1, r3]
 8002798:	440b      	add	r3, r1
 800279a:	809a      	strh	r2, [r3, #4]
 800279c:	e7b7      	b.n	800270e <main+0x7fe>
	  getPresetNamesFromSDCard();
 800279e:	f7fe fe0f 	bl	80013c0 <getPresetNamesFromSDCard>
	  diskBusy = 1;
 80027a2:	e4d1      	b.n	8002148 <main+0x238>
 80027a4:	080195dc 	.word	0x080195dc
 80027a8:	2001ddb4 	.word	0x2001ddb4
 80027ac:	200165a8 	.word	0x200165a8
 80027b0:	20014508 	.word	0x20014508
 80027b4:	200165be 	.word	0x200165be
 80027b8:	2001db84 	.word	0x2001db84
 80027bc:	30042380 	.word	0x30042380
 80027c0:	200166c2 	.word	0x200166c2

080027c4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop

080027c8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80027c8:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80027ca:	4806      	ldr	r0, [pc, #24]	; (80027e4 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	4a06      	ldr	r2, [pc, #24]	; (80027e8 <MX_RNG_Init+0x20>)
 80027d0:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80027d4:	f005 ff8a 	bl	80086ec <HAL_RNG_Init>
 80027d8:	b900      	cbnz	r0, 80027dc <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80027da:	bd08      	pop	{r3, pc}
 80027dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80027e0:	f7ff bff0 	b.w	80027c4 <Error_Handler>
 80027e4:	2001c818 	.word	0x2001c818
 80027e8:	48021800 	.word	0x48021800

080027ec <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80027ec:	b510      	push	{r4, lr}
 80027ee:	b0b2      	sub	sp, #200	; 0xc8
 80027f0:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027f2:	22c0      	movs	r2, #192	; 0xc0
 80027f4:	2100      	movs	r1, #0
 80027f6:	a802      	add	r0, sp, #8
 80027f8:	f014 f85a 	bl	80168b0 <memset>
  if(rngHandle->Instance==RNG)
 80027fc:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_RNG_MspInit+0x54>)
 80027fe:	6822      	ldr	r2, [r4, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002804:	b032      	add	sp, #200	; 0xc8
 8002806:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002808:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800280c:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800280e:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002810:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002814:	f004 fd7e 	bl	8007314 <HAL_RCCEx_PeriphCLKConfig>
 8002818:	b970      	cbnz	r0, 8002838 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_RNG_MspInit+0x58>)
 800281c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8002820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002824:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8002828:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800282c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002830:	9301      	str	r3, [sp, #4]
 8002832:	9b01      	ldr	r3, [sp, #4]
}
 8002834:	b032      	add	sp, #200	; 0xc8
 8002836:	bd10      	pop	{r4, pc}
      Error_Handler();
 8002838:	f7ff ffc4 	bl	80027c4 <Error_Handler>
 800283c:	e7ed      	b.n	800281a <HAL_RNG_MspInit+0x2e>
 800283e:	bf00      	nop
 8002840:	48021800 	.word	0x48021800
 8002844:	58024400 	.word	0x58024400

08002848 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002848:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800284a:	4818      	ldr	r0, [pc, #96]	; (80028ac <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800284c:	2100      	movs	r1, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 800284e:	4c18      	ldr	r4, [pc, #96]	; (80028b0 <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002850:	2201      	movs	r2, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002852:	2302      	movs	r3, #2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002854:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002856:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002858:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800285a:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800285c:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Instance = SAI1_Block_A;
 800285e:	e9c0 4100 	strd	r4, r1, [r0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8002862:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002866:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800286a:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800286c:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002870:	f006 f99e 	bl	8008bb0 <HAL_SAI_InitProtocol>
 8002874:	b998      	cbnz	r0, 800289e <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002876:	480f      	ldr	r0, [pc, #60]	; (80028b4 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002878:	2201      	movs	r2, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 800287a:	4c0f      	ldr	r4, [pc, #60]	; (80028b8 <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800287c:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800287e:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002880:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002882:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002884:	2403      	movs	r4, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002886:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002888:	461a      	mov	r2, r3
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800288a:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800288c:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800288e:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002890:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002892:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002896:	f006 f98b 	bl	8008bb0 <HAL_SAI_InitProtocol>
 800289a:	b918      	cbnz	r0, 80028a4 <MX_SAI1_Init+0x5c>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800289c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800289e:	f7ff ff91 	bl	80027c4 <Error_Handler>
 80028a2:	e7e8      	b.n	8002876 <MX_SAI1_Init+0x2e>
}
 80028a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80028a8:	f7ff bf8c 	b.w	80027c4 <Error_Handler>
 80028ac:	2001c920 	.word	0x2001c920
 80028b0:	40015804 	.word	0x40015804
 80028b4:	2001c9b8 	.word	0x2001c9b8
 80028b8:	40015824 	.word	0x40015824

080028bc <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80028bc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80028be:	4a51      	ldr	r2, [pc, #324]	; (8002a04 <HAL_SAI_MspInit+0x148>)
{
 80028c0:	b088      	sub	sp, #32
    if(saiHandle->Instance==SAI1_Block_A)
 80028c2:	6803      	ldr	r3, [r0, #0]
{
 80028c4:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d004      	beq.n	80028d4 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80028ca:	4a4f      	ldr	r2, [pc, #316]	; (8002a08 <HAL_SAI_MspInit+0x14c>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d03d      	beq.n	800294c <HAL_SAI_MspInit+0x90>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 80028d0:	b008      	add	sp, #32
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
    if (SAI1_client == 0)
 80028d4:	4b4d      	ldr	r3, [pc, #308]	; (8002a0c <HAL_SAI_MspInit+0x150>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	2a00      	cmp	r2, #0
 80028da:	d07f      	beq.n	80029dc <HAL_SAI_MspInit+0x120>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80028dc:	2174      	movs	r1, #116	; 0x74
    SAI1_client ++;
 80028de:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028e2:	484b      	ldr	r0, [pc, #300]	; (8002a10 <HAL_SAI_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80028e4:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2102      	movs	r1, #2
    SAI1_client ++;
 80028e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ea:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80028ec:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ee:	9104      	str	r1, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028f0:	a903      	add	r1, sp, #12
    hdma_sai1_a.Instance = DMA1_Stream1;
 80028f2:	4d48      	ldr	r5, [pc, #288]	; (8002a14 <HAL_SAI_MspInit+0x158>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f4:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80028f6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028fa:	f002 ff7f 	bl	80057fc <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 80028fe:	4a46      	ldr	r2, [pc, #280]	; (8002a18 <HAL_SAI_MspInit+0x15c>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8002900:	2357      	movs	r3, #87	; 0x57
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002902:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002904:	60ee      	str	r6, [r5, #12]
    hdma_sai1_a.Instance = DMA1_Stream1;
 8002906:	602a      	str	r2, [r5, #0]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002908:	2240      	movs	r2, #64	; 0x40
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800290a:	606b      	str	r3, [r5, #4]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800290c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002910:	60aa      	str	r2, [r5, #8]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002912:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002916:	612b      	str	r3, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800291c:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800291e:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002920:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002922:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002926:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800292a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800292e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002932:	2304      	movs	r3, #4
 8002934:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002936:	f001 fc1d 	bl	8004174 <HAL_DMA_Init>
 800293a:	2800      	cmp	r0, #0
 800293c:	d15c      	bne.n	80029f8 <HAL_SAI_MspInit+0x13c>
    if(saiHandle->Instance==SAI1_Block_B)
 800293e:	4a32      	ldr	r2, [pc, #200]	; (8002a08 <HAL_SAI_MspInit+0x14c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8002940:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8002946:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
 800294a:	d1c1      	bne.n	80028d0 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 800294c:	4b2f      	ldr	r3, [pc, #188]	; (8002a0c <HAL_SAI_MspInit+0x150>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	2a00      	cmp	r2, #0
 8002952:	d035      	beq.n	80029c0 <HAL_SAI_MspInit+0x104>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002954:	2108      	movs	r1, #8
    SAI1_client ++;
 8002956:	3201      	adds	r2, #1
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002958:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800295a:	482d      	ldr	r0, [pc, #180]	; (8002a10 <HAL_SAI_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800295c:	9103      	str	r1, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2102      	movs	r1, #2
    SAI1_client ++;
 8002960:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002962:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002964:	2306      	movs	r3, #6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	9104      	str	r1, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002968:	a903      	add	r1, sp, #12
    hdma_sai1_b.Instance = DMA1_Stream2;
 800296a:	4d2c      	ldr	r5, [pc, #176]	; (8002a1c <HAL_SAI_MspInit+0x160>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800296e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002972:	f002 ff43 	bl	80057fc <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8002976:	4a2a      	ldr	r2, [pc, #168]	; (8002a20 <HAL_SAI_MspInit+0x164>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002978:	2358      	movs	r3, #88	; 0x58
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800297a:	4628      	mov	r0, r5
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800297c:	60ae      	str	r6, [r5, #8]
    hdma_sai1_b.Instance = DMA1_Stream2;
 800297e:	602a      	str	r2, [r5, #0]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8002980:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8002984:	606b      	str	r3, [r5, #4]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800298a:	612a      	str	r2, [r5, #16]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800298c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002990:	616b      	str	r3, [r5, #20]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8002992:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8002996:	60ee      	str	r6, [r5, #12]
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002998:	62ae      	str	r6, [r5, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800299a:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800299c:	632e      	str	r6, [r5, #48]	; 0x30
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800299e:	e9c5 2306 	strd	r2, r3, [r5, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80029a2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80029a6:	2304      	movs	r3, #4
 80029a8:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80029ac:	f001 fbe2 	bl	8004174 <HAL_DMA_Init>
 80029b0:	bb28      	cbnz	r0, 80029fe <HAL_SAI_MspInit+0x142>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 80029b2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 80029b6:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 80029b8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 80029bc:	b008      	add	sp, #32
 80029be:	bd70      	pop	{r4, r5, r6, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 80029c0:	4918      	ldr	r1, [pc, #96]	; (8002a24 <HAL_SAI_MspInit+0x168>)
 80029c2:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 80029c6:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80029ca:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 80029ce:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 80029d2:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80029d6:	9102      	str	r1, [sp, #8]
 80029d8:	9902      	ldr	r1, [sp, #8]
 80029da:	e7bb      	b.n	8002954 <HAL_SAI_MspInit+0x98>
       __HAL_RCC_SAI1_CLK_ENABLE();
 80029dc:	4911      	ldr	r1, [pc, #68]	; (8002a24 <HAL_SAI_MspInit+0x168>)
 80029de:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 80029e2:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80029e6:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 80029ea:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 80029ee:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80029f2:	9101      	str	r1, [sp, #4]
 80029f4:	9901      	ldr	r1, [sp, #4]
 80029f6:	e771      	b.n	80028dc <HAL_SAI_MspInit+0x20>
      Error_Handler();
 80029f8:	f7ff fee4 	bl	80027c4 <Error_Handler>
 80029fc:	e79f      	b.n	800293e <HAL_SAI_MspInit+0x82>
      Error_Handler();
 80029fe:	f7ff fee1 	bl	80027c4 <Error_Handler>
 8002a02:	e7d6      	b.n	80029b2 <HAL_SAI_MspInit+0xf6>
 8002a04:	40015804 	.word	0x40015804
 8002a08:	40015824 	.word	0x40015824
 8002a0c:	2001c82c 	.word	0x2001c82c
 8002a10:	58021000 	.word	0x58021000
 8002a14:	2001c830 	.word	0x2001c830
 8002a18:	40020028 	.word	0x40020028
 8002a1c:	2001c8a8 	.word	0x2001c8a8
 8002a20:	40020040 	.word	0x40020040
 8002a24:	58024400 	.word	0x58024400

08002a28 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002a28:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	; (8002a48 <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002a2c:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 8002a2e:	4c07      	ldr	r4, [pc, #28]	; (8002a4c <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002a30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
 8002a34:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
 8002a36:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002a3a:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
 8002a3e:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	2001ca50 	.word	0x2001ca50
 8002a4c:	52007000 	.word	0x52007000

08002a50 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002a50:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8002a52:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <HAL_SD_MspInit+0xb0>)
{
 8002a54:	b089      	sub	sp, #36	; 0x24
  if(sdHandle->Instance==SDMMC1)
 8002a56:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 8002a5a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	9407      	str	r4, [sp, #28]
 8002a5e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002a62:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(sdHandle->Instance==SDMMC1)
 8002a66:	d001      	beq.n	8002a6c <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002a68:	b009      	add	sp, #36	; 0x24
 8002a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002a6c:	4b25      	ldr	r3, [pc, #148]	; (8002b04 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002a70:	270c      	movs	r7, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002a72:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002a76:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a7a:	2601      	movs	r6, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7c:	4822      	ldr	r0, [pc, #136]	; (8002b08 <HAL_SD_MspInit+0xb8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002a7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a82:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002a86:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002a8a:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002a8e:	9200      	str	r2, [sp, #0]
 8002a90:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a96:	f042 0204 	orr.w	r2, r2, #4
 8002a9a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002a9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002aa2:	f002 0204 	and.w	r2, r2, #4
 8002aa6:	9201      	str	r2, [sp, #4]
 8002aa8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aaa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002aae:	f042 0208 	orr.w	r2, r2, #8
 8002ab2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aba:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002abc:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002ac2:	9707      	str	r7, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ac4:	9302      	str	r3, [sp, #8]
 8002ac6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac8:	e9cd 1503 	strd	r1, r5, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002acc:	eb0d 0107 	add.w	r1, sp, r7
 8002ad0:	f002 fe94 	bl	80057fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ad4:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad6:	eb0d 0107 	add.w	r1, sp, r7
 8002ada:	480c      	ldr	r0, [pc, #48]	; (8002b0c <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002adc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ade:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002ae2:	e9cd 5706 	strd	r5, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae6:	f002 fe89 	bl	80057fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002aea:	4622      	mov	r2, r4
 8002aec:	4621      	mov	r1, r4
 8002aee:	2031      	movs	r0, #49	; 0x31
 8002af0:	f001 f83a 	bl	8003b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002af4:	2031      	movs	r0, #49	; 0x31
 8002af6:	f001 f875 	bl	8003be4 <HAL_NVIC_EnableIRQ>
}
 8002afa:	b009      	add	sp, #36	; 0x24
 8002afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002afe:	bf00      	nop
 8002b00:	52007000 	.word	0x52007000
 8002b04:	58024400 	.word	0x58024400
 8002b08:	58020800 	.word	0x58020800
 8002b0c:	58020c00 	.word	0x58020c00

08002b10 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi5_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b10:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b12:	4810      	ldr	r0, [pc, #64]	; (8002b54 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002b14:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 8002b16:	4910      	ldr	r1, [pc, #64]	; (8002b58 <MX_SPI1_Init+0x48>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b18:	2207      	movs	r2, #7
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002b1a:	6183      	str	r3, [r0, #24]
  hspi1.Instance = SPI1;
 8002b1c:	e9c0 1300 	strd	r1, r3, [r0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b20:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b24:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b28:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
 8002b2c:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b30:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b34:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b38:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b3c:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b40:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b44:	f007 fac2 	bl	800a0cc <HAL_SPI_Init>
 8002b48:	b900      	cbnz	r0, 8002b4c <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b4a:	bd08      	pop	{r3, pc}
 8002b4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002b50:	f7ff be38 	b.w	80027c4 <Error_Handler>
 8002b54:	2001cc34 	.word	0x2001cc34
 8002b58:	40013000 	.word	0x40013000

08002b5c <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002b5c:	b508      	push	{r3, lr}
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002b5e:	4810      	ldr	r0, [pc, #64]	; (8002ba0 <MX_SPI5_Init+0x44>)
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8002b60:	2300      	movs	r3, #0
  hspi5.Instance = SPI5;
 8002b62:	4910      	ldr	r1, [pc, #64]	; (8002ba4 <MX_SPI5_Init+0x48>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b64:	2207      	movs	r2, #7
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8002b66:	6183      	str	r3, [r0, #24]
  hspi5.Instance = SPI5;
 8002b68:	e9c0 1300 	strd	r1, r3, [r0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b6c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b70:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b74:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 0x0;
 8002b78:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b7c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b80:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b84:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b88:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b8c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002b90:	f007 fa9c 	bl	800a0cc <HAL_SPI_Init>
 8002b94:	b900      	cbnz	r0, 8002b98 <MX_SPI5_Init+0x3c>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002b96:	bd08      	pop	{r3, pc}
 8002b98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002b9c:	f7ff be12 	b.w	80027c4 <Error_Handler>
 8002ba0:	2001ccbc 	.word	0x2001ccbc
 8002ba4:	40015000 	.word	0x40015000

08002ba8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ba8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002baa:	2400      	movs	r4, #0
{
 8002bac:	b0bb      	sub	sp, #236	; 0xec
 8002bae:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bb0:	22c0      	movs	r2, #192	; 0xc0
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb6:	9409      	str	r4, [sp, #36]	; 0x24
 8002bb8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002bbc:	e9cd 4407 	strd	r4, r4, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bc0:	f013 fe76 	bl	80168b0 <memset>
  if(spiHandle->Instance==SPI1)
 8002bc4:	682b      	ldr	r3, [r5, #0]
 8002bc6:	4a70      	ldr	r2, [pc, #448]	; (8002d88 <HAL_SPI_MspInit+0x1e0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d004      	beq.n	8002bd6 <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 8002bcc:	4a6f      	ldr	r2, [pc, #444]	; (8002d8c <HAL_SPI_MspInit+0x1e4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d071      	beq.n	8002cb6 <HAL_SPI_MspInit+0x10e>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002bd2:	b03b      	add	sp, #236	; 0xec
 8002bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bd6:	4b6e      	ldr	r3, [pc, #440]	; (8002d90 <HAL_SPI_MspInit+0x1e8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd8:	a905      	add	r1, sp, #20
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8002bda:	4e6e      	ldr	r6, [pc, #440]	; (8002d94 <HAL_SPI_MspInit+0x1ec>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bdc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002be0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002be4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002be8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002bec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002bf0:	9201      	str	r2, [sp, #4]
 8002bf2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002c00:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c0e:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c10:	4861      	ldr	r0, [pc, #388]	; (8002d98 <HAL_SPI_MspInit+0x1f0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c12:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c16:	2203      	movs	r2, #3
 8002c18:	2305      	movs	r3, #5
 8002c1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1e:	f002 fded 	bl	80057fc <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002c22:	2325      	movs	r3, #37	; 0x25
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8002c24:	4a5d      	ldr	r2, [pc, #372]	; (8002d9c <HAL_SPI_MspInit+0x1f4>)
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002c26:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002c28:	6073      	str	r3, [r6, #4]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8002c2e:	6032      	str	r2, [r6, #0]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c30:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c34:	60b4      	str	r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c36:	60f4      	str	r4, [r6, #12]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002c38:	62f4      	str	r4, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002c3a:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002c3c:	e9c6 4306 	strd	r4, r3, [r6, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002c40:	2304      	movs	r3, #4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c42:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002c46:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002c4c:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c4e:	6232      	str	r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002c50:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002c52:	f001 fa8f 	bl	8004174 <HAL_DMA_Init>
 8002c56:	2800      	cmp	r0, #0
 8002c58:	f040 808d 	bne.w	8002d76 <HAL_SPI_MspInit+0x1ce>
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8002c5c:	4c50      	ldr	r4, [pc, #320]	; (8002da0 <HAL_SPI_MspInit+0x1f8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002c5e:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8002c60:	4950      	ldr	r1, [pc, #320]	; (8002da4 <HAL_SPI_MspInit+0x1fc>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c62:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002c64:	6062      	str	r2, [r4, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c66:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8002c6a:	6021      	str	r1, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c6c:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c6e:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c70:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c74:	60e3      	str	r3, [r4, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002c76:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c78:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c7a:	60a1      	str	r1, [r4, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002c7c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c80:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002c82:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002c84:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002c86:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c88:	6222      	str	r2, [r4, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002c8a:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002c8c:	67ee      	str	r6, [r5, #124]	; 0x7c
 8002c8e:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002c90:	61e1      	str	r1, [r4, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002c92:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002c96:	f001 fa6d 	bl	8004174 <HAL_DMA_Init>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d168      	bne.n	8002d70 <HAL_SPI_MspInit+0x1c8>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002ca4:	67ac      	str	r4, [r5, #120]	; 0x78
 8002ca6:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8002ca8:	f000 ff5e 	bl	8003b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002cac:	2023      	movs	r0, #35	; 0x23
 8002cae:	f000 ff99 	bl	8003be4 <HAL_NVIC_EnableIRQ>
}
 8002cb2:	b03b      	add	sp, #236	; 0xec
 8002cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8002cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cba:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cbc:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8002cbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cc2:	f004 fb27 	bl	8007314 <HAL_RCCEx_PeriphCLKConfig>
 8002cc6:	2800      	cmp	r0, #0
 8002cc8:	d158      	bne.n	8002d7c <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002cca:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <HAL_SPI_MspInit+0x1e8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8002cce:	f44f 7130 	mov.w	r1, #704	; 0x2c0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2600      	movs	r6, #0
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002cd4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002cd8:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cda:	4833      	ldr	r0, [pc, #204]	; (8002da8 <HAL_SPI_MspInit+0x200>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002cdc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ce0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002ce4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002ce8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cec:	9203      	str	r2, [sp, #12]
 8002cee:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cf0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002cf4:	f042 0220 	orr.w	r2, r2, #32
 8002cf8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d00:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d02:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d06:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d08:	9709      	str	r7, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d0a:	9304      	str	r3, [sp, #16]
 8002d0c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0e:	e9cd 1405 	strd	r1, r4, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d12:	a905      	add	r1, sp, #20
 8002d14:	f002 fd72 	bl	80057fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d18:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d1c:	4822      	ldr	r0, [pc, #136]	; (8002da8 <HAL_SPI_MspInit+0x200>)
 8002d1e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d20:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d22:	9305      	str	r3, [sp, #20]
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8002d24:	4c21      	ldr	r4, [pc, #132]	; (8002dac <HAL_SPI_MspInit+0x204>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d26:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d28:	e9cd 6607 	strd	r6, r6, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d2c:	f002 fd66 	bl	80057fc <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8002d30:	4a1f      	ldr	r2, [pc, #124]	; (8002db0 <HAL_SPI_MspInit+0x208>)
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8002d32:	2355      	movs	r3, #85	; 0x55
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8002d34:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d36:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8002d38:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d40:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d44:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d48:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d4c:	6122      	str	r2, [r4, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d4e:	e9c4 6307 	strd	r6, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8002d52:	f001 fa0f 	bl	8004174 <HAL_DMA_Init>
 8002d56:	b9a0      	cbnz	r0, 8002d82 <HAL_SPI_MspInit+0x1da>
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2104      	movs	r1, #4
 8002d5c:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8002d5e:	67ec      	str	r4, [r5, #124]	; 0x7c
 8002d60:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 8002d62:	f000 ff01 	bl	8003b68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8002d66:	2055      	movs	r0, #85	; 0x55
 8002d68:	f000 ff3c 	bl	8003be4 <HAL_NVIC_EnableIRQ>
}
 8002d6c:	b03b      	add	sp, #236	; 0xec
 8002d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8002d70:	f7ff fd28 	bl	80027c4 <Error_Handler>
 8002d74:	e793      	b.n	8002c9e <HAL_SPI_MspInit+0xf6>
      Error_Handler();
 8002d76:	f7ff fd25 	bl	80027c4 <Error_Handler>
 8002d7a:	e76f      	b.n	8002c5c <HAL_SPI_MspInit+0xb4>
      Error_Handler();
 8002d7c:	f7ff fd22 	bl	80027c4 <Error_Handler>
 8002d80:	e7a3      	b.n	8002cca <HAL_SPI_MspInit+0x122>
      Error_Handler();
 8002d82:	f7ff fd1f 	bl	80027c4 <Error_Handler>
 8002d86:	e7e7      	b.n	8002d58 <HAL_SPI_MspInit+0x1b0>
 8002d88:	40013000 	.word	0x40013000
 8002d8c:	40015000 	.word	0x40015000
 8002d90:	58024400 	.word	0x58024400
 8002d94:	2001cacc 	.word	0x2001cacc
 8002d98:	58020000 	.word	0x58020000
 8002d9c:	40020070 	.word	0x40020070
 8002da0:	2001cb44 	.word	0x2001cb44
 8002da4:	40020088 	.word	0x40020088
 8002da8:	58021400 	.word	0x58021400
 8002dac:	2001cbbc 	.word	0x2001cbbc
 8002db0:	40020058 	.word	0x40020058

08002db4 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 8002db4:	e7fe      	b.n	8002db4 <Default_Handler>
 8002db6:	bf00      	nop

08002db8 <Reset_Handler>:
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8002db8:	480f      	ldr	r0, [pc, #60]	; (8002df8 <Reset_Handler+0x40>)
 8002dba:	4a10      	ldr	r2, [pc, #64]	; (8002dfc <Reset_Handler+0x44>)
 8002dbc:	4290      	cmp	r0, r2
 8002dbe:	d003      	beq.n	8002dc8 <Reset_Handler+0x10>
		*pDest = *pSource;
 8002dc0:	1a12      	subs	r2, r2, r0
 8002dc2:	490f      	ldr	r1, [pc, #60]	; (8002e00 <Reset_Handler+0x48>)
 8002dc4:	f013 fda0 	bl	8016908 <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8002dc8:	480e      	ldr	r0, [pc, #56]	; (8002e04 <Reset_Handler+0x4c>)
 8002dca:	4a0f      	ldr	r2, [pc, #60]	; (8002e08 <Reset_Handler+0x50>)
 8002dcc:	4290      	cmp	r0, r2
 8002dce:	d003      	beq.n	8002dd8 <Reset_Handler+0x20>
		*pDest = 0;
 8002dd0:	1a12      	subs	r2, r2, r0
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	f013 fd6c 	bl	80168b0 <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
 8002dd8:	480c      	ldr	r0, [pc, #48]	; (8002e0c <Reset_Handler+0x54>)
 8002dda:	4a0d      	ldr	r2, [pc, #52]	; (8002e10 <Reset_Handler+0x58>)
 8002ddc:	4290      	cmp	r0, r2
 8002dde:	d003      	beq.n	8002de8 <Reset_Handler+0x30>
		*pDest = *pSource;
 8002de0:	1a12      	subs	r2, r2, r0
 8002de2:	490c      	ldr	r1, [pc, #48]	; (8002e14 <Reset_Handler+0x5c>)
 8002de4:	f013 fd90 	bl	8016908 <memcpy>
	SystemInit();
 8002de8:	f000 fdbc 	bl	8003964 <SystemInit>
	__libc_init_array();
 8002dec:	f013 fd68 	bl	80168c0 <__libc_init_array>
	(void)main();
 8002df0:	f7ff f88e 	bl	8001f10 <main>
	for (;;) ;
 8002df4:	e7fe      	b.n	8002df4 <Reset_Handler+0x3c>
 8002df6:	bf00      	nop
 8002df8:	20000000 	.word	0x20000000
 8002dfc:	20000ba0 	.word	0x20000ba0
 8002e00:	08025080 	.word	0x08025080
 8002e04:	20000ba0 	.word	0x20000ba0
 8002e08:	2001e128 	.word	0x2001e128
 8002e0c:	00000400 	.word	0x00000400
 8002e10:	00009660 	.word	0x00009660
 8002e14:	08025c20 	.word	0x08025c20

08002e18 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <HAL_MspInit+0x20>)
{
 8002e1a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002e20:	f042 0202 	orr.w	r2, r2, #2
 8002e24:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e34:	b002      	add	sp, #8
 8002e36:	4770      	bx	lr
 8002e38:	58024400 	.word	0x58024400

08002e3c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e3c:	e7fe      	b.n	8002e3c <NMI_Handler>
 8002e3e:	bf00      	nop

08002e40 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <HardFault_Handler>
 8002e42:	bf00      	nop

08002e44 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <MemManage_Handler>
 8002e46:	bf00      	nop

08002e48 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e48:	e7fe      	b.n	8002e48 <BusFault_Handler>
 8002e4a:	bf00      	nop

08002e4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <UsageFault_Handler>
 8002e4e:	bf00      	nop

08002e50 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop

08002e54 <DebugMon_Handler>:
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop

08002e58 <PendSV_Handler>:
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop

08002e5c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e5c:	f000 be3e 	b.w	8003adc <HAL_IncTick>

08002e60 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002e60:	4801      	ldr	r0, [pc, #4]	; (8002e68 <DMA1_Stream1_IRQHandler+0x8>)
 8002e62:	f002 b881 	b.w	8004f68 <HAL_DMA_IRQHandler>
 8002e66:	bf00      	nop
 8002e68:	2001c830 	.word	0x2001c830

08002e6c <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8002e6c:	4801      	ldr	r0, [pc, #4]	; (8002e74 <DMA1_Stream2_IRQHandler+0x8>)
 8002e6e:	f002 b87b 	b.w	8004f68 <HAL_DMA_IRQHandler>
 8002e72:	bf00      	nop
 8002e74:	2001c8a8 	.word	0x2001c8a8

08002e78 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8002e78:	4801      	ldr	r0, [pc, #4]	; (8002e80 <DMA1_Stream3_IRQHandler+0x8>)
 8002e7a:	f002 b875 	b.w	8004f68 <HAL_DMA_IRQHandler>
 8002e7e:	bf00      	nop
 8002e80:	2001cbbc 	.word	0x2001cbbc

08002e84 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002e84:	4801      	ldr	r0, [pc, #4]	; (8002e8c <DMA1_Stream4_IRQHandler+0x8>)
 8002e86:	f002 b86f 	b.w	8004f68 <HAL_DMA_IRQHandler>
 8002e8a:	bf00      	nop
 8002e8c:	2001cacc 	.word	0x2001cacc

08002e90 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002e90:	4801      	ldr	r0, [pc, #4]	; (8002e98 <DMA1_Stream5_IRQHandler+0x8>)
 8002e92:	f002 b869 	b.w	8004f68 <HAL_DMA_IRQHandler>
 8002e96:	bf00      	nop
 8002e98:	2001cb44 	.word	0x2001cb44

08002e9c <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002e9c:	4801      	ldr	r0, [pc, #4]	; (8002ea4 <I2C2_EV_IRQHandler+0x8>)
 8002e9e:	f003 b869 	b.w	8005f74 <HAL_I2C_EV_IRQHandler>
 8002ea2:	bf00      	nop
 8002ea4:	20014490 	.word	0x20014490

08002ea8 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002ea8:	4801      	ldr	r0, [pc, #4]	; (8002eb0 <I2C2_ER_IRQHandler+0x8>)
 8002eaa:	f003 ba17 	b.w	80062dc <HAL_I2C_ER_IRQHandler>
 8002eae:	bf00      	nop
 8002eb0:	20014490 	.word	0x20014490

08002eb4 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002eb4:	4801      	ldr	r0, [pc, #4]	; (8002ebc <SPI1_IRQHandler+0x8>)
 8002eb6:	f007 bcd1 	b.w	800a85c <HAL_SPI_IRQHandler>
 8002eba:	bf00      	nop
 8002ebc:	2001cc34 	.word	0x2001cc34

08002ec0 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002ec0:	4801      	ldr	r0, [pc, #4]	; (8002ec8 <SDMMC1_IRQHandler+0x8>)
 8002ec2:	f006 bebb 	b.w	8009c3c <HAL_SD_IRQHandler>
 8002ec6:	bf00      	nop
 8002ec8:	2001ca50 	.word	0x2001ca50

08002ecc <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8002ecc:	4801      	ldr	r0, [pc, #4]	; (8002ed4 <SPI5_IRQHandler+0x8>)
 8002ece:	f007 bcc5 	b.w	800a85c <HAL_SPI_IRQHandler>
 8002ed2:	bf00      	nop
 8002ed4:	2001ccbc 	.word	0x2001ccbc

08002ed8 <audioInitSynth>:
 float polyDivider[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void audioInitSynth()
{
 8002ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002edc:	ed2d 8b08 	vpush	{d8-d11}

			tPBSineTriangle_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);

			freqMult[i][v] = 1.0f;
 8002ee0:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
{
 8002ee4:	b089      	sub	sp, #36	; 0x24
 8002ee6:	2600      	movs	r6, #0
 8002ee8:	4be1      	ldr	r3, [pc, #900]	; (8003270 <audioInitSynth+0x398>)
 8002eea:	f8df b478 	ldr.w	fp, [pc, #1144]	; 8003364 <audioInitSynth+0x48c>
			tPBSaw_init(&saw[i][v], &leaf);
 8002eee:	4ce1      	ldr	r4, [pc, #900]	; (8003274 <audioInitSynth+0x39c>)
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);
 8002ef0:	ed9f bae1 	vldr	s22, [pc, #900]	; 8003278 <audioInitSynth+0x3a0>
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
 8002ef4:	eddf aae1 	vldr	s21, [pc, #900]	; 800327c <audioInitSynth+0x3a4>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8002ef8:	eddf 9ae1 	vldr	s19, [pc, #900]	; 8003280 <audioInitSynth+0x3a8>
		}


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8002efc:	ed9f aae1 	vldr	s20, [pc, #900]	; 8003284 <audioInitSynth+0x3ac>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8002f00:	e9cd 3602 	strd	r3, r6, [sp, #8]
		for(int i = 0; i < NUM_OSC; i++)
 8002f04:	4be0      	ldr	r3, [pc, #896]	; (8003288 <audioInitSynth+0x3b0>)
{
 8002f06:	4635      	mov	r5, r6
 8002f08:	f106 0818 	add.w	r8, r6, #24
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);
 8002f0c:	ed9f 8adf 	vldr	s16, [pc, #892]	; 800328c <audioInitSynth+0x3b4>
 8002f10:	eb03 0906 	add.w	r9, r3, r6
 8002f14:	4bde      	ldr	r3, [pc, #888]	; (8003290 <audioInitSynth+0x3b8>)
			midiAdd[i][v] = 0.0f;
 8002f16:	f04f 0a00 	mov.w	sl, #0
 8002f1a:	199f      	adds	r7, r3, r6
			tPBSaw_init(&saw[i][v], &leaf);
 8002f1c:	4648      	mov	r0, r9
 8002f1e:	4621      	mov	r1, r4
 8002f20:	f00f fcb0 	bl	8012884 <tPBSaw_init>
			tPBPulse_init(&pulse[i][v], &leaf);
 8002f24:	4638      	mov	r0, r7
 8002f26:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
 8002f28:	f109 0908 	add.w	r9, r9, #8
			tPBPulse_init(&pulse[i][v], &leaf);
 8002f2c:	f00f fc06 	bl	801273c <tPBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
 8002f30:	4bd8      	ldr	r3, [pc, #864]	; (8003294 <audioInitSynth+0x3bc>)
 8002f32:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
 8002f34:	3708      	adds	r7, #8
			tCycle_init(&sine[i][v],  &leaf);
 8002f36:	1958      	adds	r0, r3, r5
 8002f38:	f00f f9a6 	bl	8012288 <tCycle_init>
			tPBTriangle_init(&tri[i][v],  &leaf);
 8002f3c:	4bd6      	ldr	r3, [pc, #856]	; (8003298 <audioInitSynth+0x3c0>)
 8002f3e:	4621      	mov	r1, r4
 8002f40:	1958      	adds	r0, r3, r5
 8002f42:	f00f fa3d 	bl	80123c0 <tPBTriangle_init>
			tPBSawSquare_init(&sawPaired[i][v], &leaf);
 8002f46:	4bd5      	ldr	r3, [pc, #852]	; (800329c <audioInitSynth+0x3c4>)
 8002f48:	4621      	mov	r1, r4
 8002f4a:	1958      	adds	r0, r3, r5
 8002f4c:	f00f fcec 	bl	8012928 <tPBSawSquare_init>
			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
 8002f50:	4bd3      	ldr	r3, [pc, #844]	; (80032a0 <audioInitSynth+0x3c8>)
 8002f52:	4621      	mov	r1, r4
 8002f54:	1958      	adds	r0, r3, r5
 8002f56:	f00f fb41 	bl	80125dc <tPBSineTriangle_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.05f, &leaf);
 8002f5a:	4bd2      	ldr	r3, [pc, #840]	; (80032a4 <audioInitSynth+0x3cc>)
 8002f5c:	eef0 0a48 	vmov.f32	s1, s16
 8002f60:	4621      	mov	r1, r4
 8002f62:	1958      	adds	r0, r3, r5
 8002f64:	eeb0 0a4b 	vmov.f32	s0, s22
 8002f68:	f00b fc82 	bl	800e870 <tExpSmooth_init>
			freqMult[i][v] = 1.0f;
 8002f6c:	4bce      	ldr	r3, [pc, #824]	; (80032a8 <audioInitSynth+0x3d0>)
 8002f6e:	442b      	add	r3, r5
 8002f70:	edc3 ba00 	vstr	s23, [r3]
			midiAdd[i][v] = 0.0f;
 8002f74:	4bcd      	ldr	r3, [pc, #820]	; (80032ac <audioInitSynth+0x3d4>)
 8002f76:	442b      	add	r3, r5
		for(int i = 0; i < NUM_OSC; i++)
 8002f78:	3508      	adds	r5, #8
 8002f7a:	4545      	cmp	r5, r8
			midiAdd[i][v] = 0.0f;
 8002f7c:	f8c3 a000 	str.w	sl, [r3]
		for(int i = 0; i < NUM_OSC; i++)
 8002f80:	d1cc      	bne.n	8002f1c <audioInitSynth+0x44>
 8002f82:	4635      	mov	r5, r6
 8002f84:	f106 0710 	add.w	r7, r6, #16
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8002f88:	eddf 8ac9 	vldr	s17, [pc, #804]	; 80032b0 <audioInitSynth+0x3d8>
 8002f8c:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 80032b4 <audioInitSynth+0x3dc>
 8002f90:	4bc9      	ldr	r3, [pc, #804]	; (80032b8 <audioInitSynth+0x3e0>)
 8002f92:	eef0 0a68 	vmov.f32	s1, s17
 8002f96:	eeb0 0a48 	vmov.f32	s0, s16
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	1958      	adds	r0, r3, r5
 8002f9e:	4622      	mov	r2, r4
 8002fa0:	f00c f890 	bl	800f0c4 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8002fa4:	4bc5      	ldr	r3, [pc, #788]	; (80032bc <audioInitSynth+0x3e4>)
 8002fa6:	eef0 0a68 	vmov.f32	s1, s17
 8002faa:	4622      	mov	r2, r4
 8002fac:	1958      	adds	r0, r3, r5
 8002fae:	eeb0 0a48 	vmov.f32	s0, s16
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	f00c f886 	bl	800f0c4 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8002fb8:	4bc1      	ldr	r3, [pc, #772]	; (80032c0 <audioInitSynth+0x3e8>)
 8002fba:	4622      	mov	r2, r4
 8002fbc:	eef0 0a68 	vmov.f32	s1, s17
 8002fc0:	1958      	adds	r0, r3, r5
 8002fc2:	eeb0 0a48 	vmov.f32	s0, s16
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	f00c f87c 	bl	800f0c4 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
 8002fcc:	4bbd      	ldr	r3, [pc, #756]	; (80032c4 <audioInitSynth+0x3ec>)
 8002fce:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	1958      	adds	r0, r3, r5
 8002fd6:	eeb0 0a48 	vmov.f32	s0, s16
 8002fda:	f00d fc3f 	bl	801085c <tDiodeFilter_init>
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
 8002fde:	4bba      	ldr	r3, [pc, #744]	; (80032c8 <audioInitSynth+0x3f0>)
 8002fe0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	1958      	adds	r0, r3, r5
 8002fe8:	eef0 0a6a 	vmov.f32	s1, s21
 8002fec:	eeb0 0a48 	vmov.f32	s0, s16
 8002ff0:	f00d f9fa 	bl	80103e8 <tVZFilterBell_init>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8002ff4:	4bb5      	ldr	r3, [pc, #724]	; (80032cc <audioInitSynth+0x3f4>)
 8002ff6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002ffa:	4621      	mov	r1, r4
 8002ffc:	1958      	adds	r0, r3, r5
 8002ffe:	eef0 0a69 	vmov.f32	s1, s19
 8003002:	eeb0 0a48 	vmov.f32	s0, s16
 8003006:	f00c fecd 	bl	800fda4 <tVZFilterLS_init>
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 800300a:	4bb1      	ldr	r3, [pc, #708]	; (80032d0 <audioInitSynth+0x3f8>)
 800300c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003010:	4621      	mov	r1, r4
 8003012:	1958      	adds	r0, r3, r5
 8003014:	eef0 0a69 	vmov.f32	s1, s19
 8003018:	eeb0 0a48 	vmov.f32	s0, s16
 800301c:	f00d f844 	bl	80100a8 <tVZFilterHS_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8003020:	4bac      	ldr	r3, [pc, #688]	; (80032d4 <audioInitSynth+0x3fc>)
 8003022:	4622      	mov	r2, r4
 8003024:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003028:	1958      	adds	r0, r3, r5
 800302a:	eeb0 0a48 	vmov.f32	s0, s16
 800302e:	2104      	movs	r1, #4
 8003030:	f00c fdfe 	bl	800fc30 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
 8003034:	4ba8      	ldr	r3, [pc, #672]	; (80032d8 <audioInitSynth+0x400>)
 8003036:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800303a:	4621      	mov	r1, r4
 800303c:	1958      	adds	r0, r3, r5
 800303e:	eeb0 0a48 	vmov.f32	s0, s16
 8003042:	f00e f8a5 	bl	8011190 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 8003046:	4ba5      	ldr	r3, [pc, #660]	; (80032dc <audioInitSynth+0x404>)
 8003048:	eeb0 0a4b 	vmov.f32	s0, s22
 800304c:	4621      	mov	r1, r4
 800304e:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
 8003050:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 8003052:	eddf 0aa3 	vldr	s1, [pc, #652]	; 80032e0 <audioInitSynth+0x408>
 8003056:	f00b fc0b 	bl	800e870 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
 800305a:	42bd      	cmp	r5, r7
 800305c:	d198      	bne.n	8002f90 <audioInitSynth+0xb8>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 800305e:	4ba1      	ldr	r3, [pc, #644]	; (80032e4 <audioInitSynth+0x40c>)
 8003060:	2500      	movs	r5, #0
 8003062:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 8003066:	4ba0      	ldr	r3, [pc, #640]	; (80032e8 <audioInitSynth+0x410>)
 8003068:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 800306a:	eb08 0005 	add.w	r0, r8, r5
 800306e:	4621      	mov	r1, r4
 8003070:	f00f fd50 	bl	8012b14 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 8003074:	1978      	adds	r0, r7, r5
 8003076:	4621      	mov	r1, r4
 8003078:	f00f fde4 	bl	8012c44 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
 800307c:	4b9b      	ldr	r3, [pc, #620]	; (80032ec <audioInitSynth+0x414>)
 800307e:	4621      	mov	r1, r4
 8003080:	1998      	adds	r0, r3, r6
 8003082:	4428      	add	r0, r5
 8003084:	f00f f900 	bl	8012288 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
 8003088:	4b99      	ldr	r3, [pc, #612]	; (80032f0 <audioInitSynth+0x418>)
 800308a:	4621      	mov	r1, r4
 800308c:	1998      	adds	r0, r3, r6
 800308e:	4428      	add	r0, r5
 8003090:	f00f ff0e 	bl	8012eb0 <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
 8003094:	4b97      	ldr	r3, [pc, #604]	; (80032f4 <audioInitSynth+0x41c>)
 8003096:	4621      	mov	r1, r4
 8003098:	1998      	adds	r0, r3, r6
 800309a:	4428      	add	r0, r5
 800309c:	f00f ff8e 	bl	8012fbc <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 80030a0:	4b95      	ldr	r3, [pc, #596]	; (80032f8 <audioInitSynth+0x420>)
 80030a2:	4621      	mov	r1, r4
 80030a4:	1998      	adds	r0, r3, r6
 80030a6:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
 80030a8:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 80030aa:	f00f fe5b 	bl	8012d64 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
 80030ae:	2d20      	cmp	r5, #32
 80030b0:	d1db      	bne.n	800306a <audioInitSynth+0x192>
 80030b2:	9f02      	ldr	r7, [sp, #8]
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80030b4:	eddf 8a91 	vldr	s17, [pc, #580]	; 80032fc <audioInitSynth+0x424>
 80030b8:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80030bc:	ed9f 8a90 	vldr	s16, [pc, #576]	; 8003300 <audioInitSynth+0x428>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80030c0:	4628      	mov	r0, r5
 80030c2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80030c6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80030ca:	4623      	mov	r3, r4
 80030cc:	eef0 0a4a 	vmov.f32	s1, s20
 80030d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030d4:	eeb0 0a68 	vmov.f32	s0, s17
 80030d8:	498a      	ldr	r1, [pc, #552]	; (8003304 <audioInitSynth+0x42c>)
 80030da:	f00b f905 	bl	800e2e8 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80030de:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
 80030e0:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80030e2:	eeb0 0a48 	vmov.f32	s0, s16
 80030e6:	f00b f959 	bl	800e39c <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
 80030ea:	42bd      	cmp	r5, r7
 80030ec:	d1e8      	bne.n	80030c0 <audioInitSynth+0x1e8>
		}

		//noise
		tVZFilterLS_init(&noiseShelf1[v], 80.0f, 0.5f, 1.0f, &leaf);
 80030ee:	4b86      	ldr	r3, [pc, #536]	; (8003308 <audioInitSynth+0x430>)
 80030f0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80030f4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80030f8:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800330c <audioInitSynth+0x434>
 80030fc:	1998      	adds	r0, r3, r6
 80030fe:	4621      	mov	r1, r4
 8003100:	f00c fe50 	bl	800fda4 <tVZFilterLS_init>
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
 8003104:	4b82      	ldr	r3, [pc, #520]	; (8003310 <audioInitSynth+0x438>)
 8003106:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800310a:	4621      	mov	r1, r4
 800310c:	1998      	adds	r0, r3, r6
 800310e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8003112:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8003314 <audioInitSynth+0x43c>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 8003116:	4635      	mov	r5, r6
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
 8003118:	f00c ffc6 	bl	80100a8 <tVZFilterHS_init>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 800311c:	4a7e      	ldr	r2, [pc, #504]	; (8003318 <audioInitSynth+0x440>)
 800311e:	4b7f      	ldr	r3, [pc, #508]	; (800331c <audioInitSynth+0x444>)
 8003120:	eef0 0a6a 	vmov.f32	s1, s21
 8003124:	487e      	ldr	r0, [pc, #504]	; (8003320 <audioInitSynth+0x448>)
 8003126:	1997      	adds	r7, r2, r6
 8003128:	4433      	add	r3, r6
 800312a:	f106 0220 	add.w	r2, r6, #32
 800312e:	4430      	add	r0, r6
 8003130:	eeb0 0a4a 	vmov.f32	s0, s20
 8003134:	4621      	mov	r1, r4
 8003136:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 8003324 <audioInitSynth+0x44c>
 800313a:	9304      	str	r3, [sp, #16]
 800313c:	9205      	str	r2, [sp, #20]
 800313e:	f00d f953 	bl	80103e8 <tVZFilterBell_init>

		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003142:	ed9f 8a79 	vldr	s16, [pc, #484]	; 8003328 <audioInitSynth+0x450>
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
			tCompressor_init(&comp[i][v], &leaf);
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
			tCompressor_setSampleRate(&comp[i][v], SAMPLE_RATE * OVERSAMPLE);
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
 8003146:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8003368 <audioInitSynth+0x490>

	        tTapeDelay_initToPool(&tapeDelay[i][v], 15000.0f, 30000, &largePool);
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 800314a:	ed9f 9a59 	vldr	s18, [pc, #356]	; 80032b0 <audioInitSynth+0x3d8>
 800314e:	eddf 8a59 	vldr	s17, [pc, #356]	; 80032b4 <audioInitSynth+0x3dc>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 8003152:	e9cd b606 	strd	fp, r6, [sp, #24]
 8003156:	e9dd a604 	ldrd	sl, r6, [sp, #16]
			tCrusher_init(&bc[i][v],&leaf);
 800315a:	4650      	mov	r0, sl
 800315c:	4621      	mov	r1, r4
 800315e:	f00a fe37 	bl	800ddd0 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
 8003162:	4b72      	ldr	r3, [pc, #456]	; (800332c <audioInitSynth+0x454>)
 8003164:	4621      	mov	r1, r4
 8003166:	4638      	mov	r0, r7
 8003168:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800316c:	eb03 0805 	add.w	r8, r3, r5
 8003170:	f00c f88a 	bl	800f288 <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003174:	4638      	mov	r0, r7
 8003176:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
 800317a:	f10a 0a08 	add.w	sl, sl, #8
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 800317e:	f00c f8e3 	bl	800f348 <tHighpass_setSampleRate>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 8003182:	4b6b      	ldr	r3, [pc, #428]	; (8003330 <audioInitSynth+0x458>)
 8003184:	4621      	mov	r1, r4
 8003186:	4640      	mov	r0, r8
 8003188:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800318c:	eb03 0b05 	add.w	fp, r3, r5
 8003190:	f00c f87a 	bl	800f288 <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003194:	4640      	mov	r0, r8
 8003196:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
 800319a:	3708      	adds	r7, #8
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
 800319c:	f00c f8d4 	bl	800f348 <tHighpass_setSampleRate>
			tVZFilterLS_init(&shelf1[i][v], 80.0f, 0.5f, 1.0f,&leaf);
 80031a0:	4b64      	ldr	r3, [pc, #400]	; (8003334 <audioInitSynth+0x45c>)
 80031a2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80031a6:	4621      	mov	r1, r4
 80031a8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80031ac:	4658      	mov	r0, fp
 80031ae:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800330c <audioInitSynth+0x434>
 80031b2:	eb03 0805 	add.w	r8, r3, r5
 80031b6:	f00c fdf5 	bl	800fda4 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 80031ba:	4658      	mov	r0, fp
 80031bc:	eeb0 0a48 	vmov.f32	s0, s16
 80031c0:	f00c fdf4 	bl	800fdac <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&shelf2[i][v], 12000.0f, 0.5f, 1.0f, &leaf);
 80031c4:	4b5c      	ldr	r3, [pc, #368]	; (8003338 <audioInitSynth+0x460>)
 80031c6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80031ca:	4621      	mov	r1, r4
 80031cc:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80031d0:	4640      	mov	r0, r8
 80031d2:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8003314 <audioInitSynth+0x43c>
 80031d6:	eb03 0b05 	add.w	fp, r3, r5
 80031da:	f00c ff65 	bl	80100a8 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
 80031de:	4640      	mov	r0, r8
 80031e0:	eeb0 0a48 	vmov.f32	s0, s16
 80031e4:	f00c ff64 	bl	80100b0 <tVZFilterHS_setSampleRate>
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
 80031e8:	4b54      	ldr	r3, [pc, #336]	; (800333c <audioInitSynth+0x464>)
 80031ea:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80031ee:	4621      	mov	r1, r4
 80031f0:	eb03 0805 	add.w	r8, r3, r5
 80031f4:	eef0 0a6a 	vmov.f32	s1, s21
 80031f8:	4658      	mov	r0, fp
 80031fa:	eeb0 0a4a 	vmov.f32	s0, s20
 80031fe:	f00d f8f3 	bl	80103e8 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003202:	eeb0 0a48 	vmov.f32	s0, s16
 8003206:	4658      	mov	r0, fp
 8003208:	f00d f8f2 	bl	80103f0 <tVZFilterBell_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
 800320c:	4640      	mov	r0, r8
 800320e:	4621      	mov	r1, r4
 8003210:	f00a fec0 	bl	800df94 <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
 8003214:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003218:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 800321c:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8003340 <audioInitSynth+0x468>
 8003220:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8003224:	4947      	ldr	r1, [pc, #284]	; (8003344 <audioInitSynth+0x46c>)
 8003226:	4a48      	ldr	r2, [pc, #288]	; (8003348 <audioInitSynth+0x470>)
 8003228:	4640      	mov	r0, r8
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800334c <audioInitSynth+0x474>
 8003230:	f00a ff22 	bl	800e078 <tCompressor_setTables>
			tCompressor_setSampleRate(&comp[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003234:	4640      	mov	r0, r8
 8003236:	eeb0 0a48 	vmov.f32	s0, s16
 800323a:	f00a ff43 	bl	800e0c4 <tCompressor_setSampleRate>
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
 800323e:	4b44      	ldr	r3, [pc, #272]	; (8003350 <audioInitSynth+0x478>)
 8003240:	464a      	mov	r2, r9
 8003242:	ed9f 0a44 	vldr	s0, [pc, #272]	; 8003354 <audioInitSynth+0x47c>
 8003246:	eb03 0805 	add.w	r8, r3, r5
 800324a:	4b43      	ldr	r3, [pc, #268]	; (8003358 <audioInitSynth+0x480>)
 800324c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003250:	1958      	adds	r0, r3, r5
 8003252:	f00a fadb 	bl	800d80c <tLinearDelay_initToPool>
			tLinearDelay_initToPool(&delay2[i][v], 4000.0f, 4096, &largePool);
 8003256:	4b41      	ldr	r3, [pc, #260]	; (800335c <audioInitSynth+0x484>)
 8003258:	464a      	mov	r2, r9
 800325a:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8003354 <audioInitSynth+0x47c>
 800325e:	1958      	adds	r0, r3, r5
 8003260:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003264:	f00a fad2 	bl	800d80c <tLinearDelay_initToPool>
			tCycle_init(&mod1[i][v], &leaf);
 8003268:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <audioInitSynth+0x488>)
 800326a:	4621      	mov	r1, r4
 800326c:	4640      	mov	r0, r8
 800326e:	e081      	b.n	8003374 <audioInitSynth+0x49c>
 8003270:	2001d16c 	.word	0x2001d16c
 8003274:	20005484 	.word	0x20005484
 8003278:	42800000 	.word	0x42800000
 800327c:	3ff33333 	.word	0x3ff33333
 8003280:	3f19999a 	.word	0x3f19999a
 8003284:	447a0000 	.word	0x447a0000
 8003288:	2001d69c 	.word	0x2001d69c
 800328c:	3d4ccccd 	.word	0x3d4ccccd
 8003290:	2001d680 	.word	0x2001d680
 8003294:	2001d758 	.word	0x2001d758
 8003298:	2001d908 	.word	0x2001d908
 800329c:	2001d6b4 	.word	0x2001d6b4
 80032a0:	2001d770 	.word	0x2001d770
 80032a4:	2001d644 	.word	0x2001d644
 80032a8:	2001d1c4 	.word	0x2001d1c4
 80032ac:	2001d4b0 	.word	0x2001d4b0
 80032b0:	3f333333 	.word	0x3f333333
 80032b4:	44fa0000 	.word	0x44fa0000
 80032b8:	2001d3a0 	.word	0x2001d3a0
 80032bc:	2001d21c 	.word	0x2001d21c
 80032c0:	2001cf10 	.word	0x2001cf10
 80032c4:	2001d128 	.word	0x2001d128
 80032c8:	2001cef8 	.word	0x2001cef8
 80032cc:	2001cee8 	.word	0x2001cee8
 80032d0:	2001ced8 	.word	0x2001ced8
 80032d4:	2001cec8 	.word	0x2001cec8
 80032d8:	2001ceb8 	.word	0x2001ceb8
 80032dc:	2001d18c 	.word	0x2001d18c
 80032e0:	3c23d70a 	.word	0x3c23d70a
 80032e4:	2001d2f0 	.word	0x2001d2f0
 80032e8:	2001d2d0 	.word	0x2001d2d0
 80032ec:	2001d340 	.word	0x2001d340
 80032f0:	2001d380 	.word	0x2001d380
 80032f4:	2001d360 	.word	0x2001d360
 80032f8:	2001d310 	.word	0x2001d310
 80032fc:	3dcccccd 	.word	0x3dcccccd
 8003300:	3f7fffac 	.word	0x3f7fffac
 8003304:	200013a8 	.word	0x200013a8
 8003308:	2001d528 	.word	0x2001d528
 800330c:	42a00000 	.word	0x42a00000
 8003310:	2001d530 	.word	0x2001d530
 8003314:	463b8000 	.word	0x463b8000
 8003318:	2001cf80 	.word	0x2001cf80
 800331c:	2001cf20 	.word	0x2001cf20
 8003320:	2001d50c 	.word	0x2001d50c
 8003324:	3f8b851f 	.word	0x3f8b851f
 8003328:	47bb8000 	.word	0x47bb8000
 800332c:	2001cfa0 	.word	0x2001cfa0
 8003330:	2001d718 	.word	0x2001d718
 8003334:	2001d738 	.word	0x2001d738
 8003338:	2001cf40 	.word	0x2001cf40
 800333c:	2001cf60 	.word	0x2001cf60
 8003340:	c2b40000 	.word	0xc2b40000
 8003344:	30012000 	.word	0x30012000
 8003348:	30002000 	.word	0x30002000
 800334c:	3727c5ac 	.word	0x3727c5ac
 8003350:	2001d4c8 	.word	0x2001d4c8
 8003354:	457a0000 	.word	0x457a0000
 8003358:	2001d0c8 	.word	0x2001d0c8
 800335c:	2001d0e8 	.word	0x2001d0e8
 8003360:	2001d4e8 	.word	0x2001d4e8
 8003364:	2001d4b0 	.word	0x2001d4b0
 8003368:	20005480 	.word	0x20005480
 800336c:	3e4ccccd 	.word	0x3e4ccccd
 8003370:	3e638e39 	.word	0x3e638e39
 8003374:	eb03 0b05 	add.w	fp, r3, r5
 8003378:	f00e ff86 	bl	8012288 <tCycle_init>
			tCycle_setSampleRate(&mod1[i][v], SAMPLE_RATE * OVERSAMPLE);
 800337c:	eeb0 0a48 	vmov.f32	s0, s16
 8003380:	4640      	mov	r0, r8
 8003382:	f00f f801 	bl	8012388 <tCycle_setSampleRate>
			tCycle_init(&mod2[i][v], &leaf);
 8003386:	4621      	mov	r1, r4
 8003388:	4658      	mov	r0, fp
 800338a:	f00e ff7d 	bl	8012288 <tCycle_init>
			tCycle_setSampleRate(&mod2[i][v], SAMPLE_RATE * OVERSAMPLE);
 800338e:	4658      	mov	r0, fp
 8003390:	eeb0 0a48 	vmov.f32	s0, s16
 8003394:	f00e fff8 	bl	8012388 <tCycle_setSampleRate>
			tCycle_setFreq(&mod1[i][v], 0.2f);
 8003398:	4640      	mov	r0, r8
 800339a:	ed1f 0a0c 	vldr	s0, [pc, #-48]	; 800336c <audioInitSynth+0x494>
 800339e:	f00e ffd5 	bl	801234c <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
 80033a2:	4658      	mov	r0, fp
 80033a4:	ed1f 0a0e 	vldr	s0, [pc, #-56]	; 8003370 <audioInitSynth+0x498>
 80033a8:	f00e ffd0 	bl	801234c <tCycle_setFreq>
	        tTapeDelay_initToPool(&tapeDelay[i][v], 15000.0f, 30000, &largePool);
 80033ac:	4b7d      	ldr	r3, [pc, #500]	; (80035a4 <audioInitSynth+0x6cc>)
 80033ae:	464a      	mov	r2, r9
 80033b0:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80035a8 <audioInitSynth+0x6d0>
 80033b4:	1958      	adds	r0, r3, r5
 80033b6:	4b7d      	ldr	r3, [pc, #500]	; (80035ac <audioInitSynth+0x6d4>)
 80033b8:	f247 5130 	movw	r1, #30000	; 0x7530
 80033bc:	eb03 0805 	add.w	r8, r3, r5
 80033c0:	f00a fc0c 	bl	800dbdc <tTapeDelay_initToPool>
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);
 80033c4:	4b7a      	ldr	r3, [pc, #488]	; (80035b0 <audioInitSynth+0x6d8>)
 80033c6:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 80033ca:	4622      	mov	r2, r4
 80033cc:	eddf 0a79 	vldr	s1, [pc, #484]	; 80035b4 <audioInitSynth+0x6dc>
 80033d0:	1958      	adds	r0, r3, r5
 80033d2:	ed9f 0a79 	vldr	s0, [pc, #484]	; 80035b8 <audioInitSynth+0x6e0>
 80033d6:	2100      	movs	r1, #0
 80033d8:	f00a fe78 	bl	800e0cc <tFeedbackLeveler_init>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 80033dc:	4b77      	ldr	r3, [pc, #476]	; (80035bc <audioInitSynth+0x6e4>)
 80033de:	eef0 0a49 	vmov.f32	s1, s18
 80033e2:	4622      	mov	r2, r4
 80033e4:	2101      	movs	r1, #1
 80033e6:	4640      	mov	r0, r8
 80033e8:	eeb0 0a68 	vmov.f32	s0, s17
 80033ec:	eb03 0b05 	add.w	fp, r3, r5
 80033f0:	f00b fe68 	bl	800f0c4 <tSVF_init>
			tSVF_setSampleRate(&FXlowpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 80033f4:	4640      	mov	r0, r8
 80033f6:	eeb0 0a48 	vmov.f32	s0, s16
 80033fa:	f00b ff3b 	bl	800f274 <tSVF_setSampleRate>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 80033fe:	4b70      	ldr	r3, [pc, #448]	; (80035c0 <audioInitSynth+0x6e8>)
 8003400:	eef0 0a49 	vmov.f32	s1, s18
 8003404:	4622      	mov	r2, r4
 8003406:	2100      	movs	r1, #0
 8003408:	4658      	mov	r0, fp
 800340a:	eeb0 0a68 	vmov.f32	s0, s17
 800340e:	eb03 0805 	add.w	r8, r3, r5
 8003412:	f00b fe57 	bl	800f0c4 <tSVF_init>
			tSVF_setSampleRate(&FXhighpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 8003416:	4658      	mov	r0, fp
 8003418:	eeb0 0a48 	vmov.f32	s0, s16
 800341c:	f00b ff2a 	bl	800f274 <tSVF_setSampleRate>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8003420:	4b68      	ldr	r3, [pc, #416]	; (80035c4 <audioInitSynth+0x6ec>)
 8003422:	4622      	mov	r2, r4
 8003424:	eef0 0a49 	vmov.f32	s1, s18
 8003428:	2102      	movs	r1, #2
 800342a:	4640      	mov	r0, r8
 800342c:	eeb0 0a68 	vmov.f32	s0, s17
 8003430:	eb03 0b05 	add.w	fp, r3, r5
 8003434:	f00b fe46 	bl	800f0c4 <tSVF_init>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 8003438:	4640      	mov	r0, r8
 800343a:	eeb0 0a48 	vmov.f32	s0, s16
 800343e:	f00b ff19 	bl	800f274 <tSVF_setSampleRate>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
 8003442:	4b61      	ldr	r3, [pc, #388]	; (80035c8 <audioInitSynth+0x6f0>)
 8003444:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003448:	4621      	mov	r1, r4
 800344a:	4658      	mov	r0, fp
 800344c:	eeb0 0a68 	vmov.f32	s0, s17
 8003450:	eb03 0805 	add.w	r8, r3, r5
 8003454:	f00d fa02 	bl	801085c <tDiodeFilter_init>
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003458:	4658      	mov	r0, fp
 800345a:	eeb0 0a48 	vmov.f32	s0, s16
 800345e:	f00d fe1f 	bl	80110a0 <tDiodeFilter_setSampleRate>
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
 8003462:	4b5a      	ldr	r3, [pc, #360]	; (80035cc <audioInitSynth+0x6f4>)
 8003464:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003468:	eddf 0a59 	vldr	s1, [pc, #356]	; 80035d0 <audioInitSynth+0x6f8>
 800346c:	4621      	mov	r1, r4
 800346e:	4640      	mov	r0, r8
 8003470:	eeb0 0a68 	vmov.f32	s0, s17
 8003474:	eb03 0b05 	add.w	fp, r3, r5
 8003478:	f00c ffb6 	bl	80103e8 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
 800347c:	4640      	mov	r0, r8
 800347e:	eeb0 0a48 	vmov.f32	s0, s16
 8003482:	f00c ffb5 	bl	80103f0 <tVZFilterBell_setSampleRate>
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003486:	4b53      	ldr	r3, [pc, #332]	; (80035d4 <audioInitSynth+0x6fc>)
 8003488:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800348c:	4621      	mov	r1, r4
 800348e:	eef0 0a69 	vmov.f32	s1, s19
 8003492:	4658      	mov	r0, fp
 8003494:	eeb0 0a68 	vmov.f32	s0, s17
 8003498:	eb03 0805 	add.w	r8, r3, r5
 800349c:	f00c fc82 	bl	800fda4 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], SAMPLE_RATE * OVERSAMPLE);
 80034a0:	4658      	mov	r0, fp
 80034a2:	eeb0 0a48 	vmov.f32	s0, s16
 80034a6:	f00c fc81 	bl	800fdac <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&FXVZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 80034aa:	4b4b      	ldr	r3, [pc, #300]	; (80035d8 <audioInitSynth+0x700>)
 80034ac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80034b0:	4621      	mov	r1, r4
 80034b2:	eef0 0a69 	vmov.f32	s1, s19
 80034b6:	4640      	mov	r0, r8
 80034b8:	eeb0 0a68 	vmov.f32	s0, s17
 80034bc:	eb03 0b05 	add.w	fp, r3, r5
 80034c0:	f00c fdf2 	bl	80100a8 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], SAMPLE_RATE * OVERSAMPLE);
 80034c4:	4640      	mov	r0, r8
 80034c6:	eeb0 0a48 	vmov.f32	s0, s16
 80034ca:	f00c fdf1 	bl	80100b0 <tVZFilterHS_setSampleRate>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 80034ce:	4b43      	ldr	r3, [pc, #268]	; (80035dc <audioInitSynth+0x704>)
 80034d0:	4622      	mov	r2, r4
 80034d2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80034d6:	eb03 0805 	add.w	r8, r3, r5
 80034da:	2104      	movs	r1, #4
 80034dc:	eeb0 0a68 	vmov.f32	s0, s17
 80034e0:	4658      	mov	r0, fp
 80034e2:	f00c fba5 	bl	800fc30 <tVZFilter_init>
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
 80034e6:	eeb0 0a48 	vmov.f32	s0, s16
 80034ea:	4658      	mov	r0, fp
		for (int i = 0; i < NUM_EFFECT; i++)
 80034ec:	3508      	adds	r5, #8
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
 80034ee:	f00c fba3 	bl	800fc38 <tVZFilter_setSampleRate>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 80034f2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80034f6:	eeb0 0a68 	vmov.f32	s0, s17
 80034fa:	4621      	mov	r1, r4
 80034fc:	4640      	mov	r0, r8
 80034fe:	f00d fe47 	bl	8011190 <tLadderFilter_init>
			tLadderFilter_setSampleRate(&FXLadderfilter[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003502:	eeb0 0a48 	vmov.f32	s0, s16
 8003506:	4640      	mov	r0, r8
 8003508:	f00e f824 	bl	8011554 <tLadderFilter_setSampleRate>
		for (int i = 0; i < NUM_EFFECT; i++)
 800350c:	42b5      	cmp	r5, r6
 800350e:	f47f ae24 	bne.w	800315a <audioInitSynth+0x282>
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.005f, &leaf);
 8003512:	eddf 8a33 	vldr	s17, [pc, #204]	; 80035e0 <audioInitSynth+0x708>
 8003516:	ed9f 8a33 	vldr	s16, [pc, #204]	; 80035e4 <audioInitSynth+0x70c>
 800351a:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 800351e:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
 8003522:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8003524:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.005f, &leaf);
 8003526:	eef0 0a68 	vmov.f32	s1, s17
 800352a:	4621      	mov	r1, r4
 800352c:	eeb0 0a48 	vmov.f32	s0, s16
 8003530:	f00b f99e 	bl	800e870 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8003534:	45ab      	cmp	fp, r5
 8003536:	d1f4      	bne.n	8003522 <audioInitSynth+0x64a>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003538:	9b02      	ldr	r3, [sp, #8]
 800353a:	eb06 0746 	add.w	r7, r6, r6, lsl #1
		}

		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 800353e:	4a2a      	ldr	r2, [pc, #168]	; (80035e8 <audioInitSynth+0x710>)
 8003540:	2501      	movs	r5, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003542:	3304      	adds	r3, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 8003544:	4829      	ldr	r0, [pc, #164]	; (80035ec <audioInitSynth+0x714>)
 8003546:	2102      	movs	r1, #2
 8003548:	9501      	str	r5, [sp, #4]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 800354a:	9302      	str	r3, [sp, #8]
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 800354c:	4438      	add	r0, r7
 800354e:	9b03      	ldr	r3, [sp, #12]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003550:	f10b 0b04 	add.w	fp, fp, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 8003554:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 8003558:	2220      	movs	r2, #32
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <audioInitSynth+0x718>)
 800355e:	f7fd f8f5 	bl	800074c <arm_fir_interpolate_init_f32>
		arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);
 8003562:	4a24      	ldr	r2, [pc, #144]	; (80035f4 <audioInitSynth+0x71c>)
 8003564:	eb06 1346 	add.w	r3, r6, r6, lsl #5
 8003568:	2120      	movs	r1, #32
 800356a:	19d0      	adds	r0, r2, r7
 800356c:	4a22      	ldr	r2, [pc, #136]	; (80035f8 <audioInitSynth+0x720>)
 800356e:	4413      	add	r3, r2
 8003570:	2202      	movs	r2, #2
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	9201      	str	r2, [sp, #4]
 8003576:	4b1e      	ldr	r3, [pc, #120]	; (80035f0 <audioInitSynth+0x718>)
 8003578:	f7fd f86a 	bl	8000650 <arm_fir_decimate_init_f32>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 800357c:	491f      	ldr	r1, [pc, #124]	; (80035fc <audioInitSynth+0x724>)
 800357e:	4622      	mov	r2, r4
 8003580:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8003600 <audioInitSynth+0x728>
 8003584:	1988      	adds	r0, r1, r6
 8003586:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8003604 <audioInitSynth+0x72c>
 800358a:	4629      	mov	r1, r5
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 800358c:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 800358e:	f00b fd99 	bl	800f0c4 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003592:	9b03      	ldr	r3, [sp, #12]
 8003594:	b90b      	cbnz	r3, 800359a <audioInitSynth+0x6c2>
 8003596:	9503      	str	r5, [sp, #12]
 8003598:	e4b4      	b.n	8002f04 <audioInitSynth+0x2c>
	}

}
 800359a:	b009      	add	sp, #36	; 0x24
 800359c:	ecbd 8b08 	vpop	{d8-d11}
 80035a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035a4:	2001d8b8 	.word	0x2001d8b8
 80035a8:	466a6000 	.word	0x466a6000
 80035ac:	2001ce98 	.word	0x2001ce98
 80035b0:	2001d16c 	.word	0x2001d16c
 80035b4:	3c23d70a 	.word	0x3c23d70a
 80035b8:	3f7d70a4 	.word	0x3f7d70a4
 80035bc:	2001ce78 	.word	0x2001ce78
 80035c0:	2001ce38 	.word	0x2001ce38
 80035c4:	2001ce58 	.word	0x2001ce58
 80035c8:	2001ce18 	.word	0x2001ce18
 80035cc:	2001cdf8 	.word	0x2001cdf8
 80035d0:	3fcccccd 	.word	0x3fcccccd
 80035d4:	2001cdd8 	.word	0x2001cdd8
 80035d8:	2001cdb8 	.word	0x2001cdb8
 80035dc:	2001cd98 	.word	0x2001cd98
 80035e0:	3ba3d70a 	.word	0x3ba3d70a
 80035e4:	00000000 	.word	0x00000000
 80035e8:	2001d22c 	.word	0x2001d22c
 80035ec:	2001d550 	.word	0x2001d550
 80035f0:	08021d08 	.word	0x08021d08
 80035f4:	2001d538 	.word	0x2001d538
 80035f8:	2001cfc0 	.word	0x2001cfc0
 80035fc:	2001d1b4 	.word	0x2001d1b4
 8003600:	3e99999a 	.word	0x3e99999a
 8003604:	46947000 	.word	0x46947000

08003608 <audioSwitchToSynth>:
{

}

void  audioSwitchToSynth()
{
 8003608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800360c:	4c0d      	ldr	r4, [pc, #52]	; (8003644 <audioSwitchToSynth+0x3c>)
	for (int i = 0; i < 20; i++)
 800360e:	2500      	movs	r5, #0
 8003610:	f8df 8038 	ldr.w	r8, [pc, #56]	; 800364c <audioSwitchToSynth+0x44>
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
		//tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
		knobFrozen[i] = 1;
 8003614:	2601      	movs	r6, #1
 8003616:	f104 0750 	add.w	r7, r4, #80	; 0x50
{
 800361a:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
 800361e:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8003648 <audioSwitchToSynth+0x40>
 8003622:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
 8003624:	3404      	adds	r4, #4
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
 8003626:	eeb0 0a48 	vmov.f32	s0, s16
 800362a:	f00b f999 	bl	800e960 <tExpSmooth_setFactor>
	for (int i = 0; i < 20; i++)
 800362e:	42bc      	cmp	r4, r7
		knobFrozen[i] = 1;
 8003630:	f808 6005 	strb.w	r6, [r8, r5]
	for (int i = 0; i < 20; i++)
 8003634:	f105 0501 	add.w	r5, r5, #1
 8003638:	d1f3      	bne.n	8003622 <audioSwitchToSynth+0x1a>
	}
}
 800363a:	ecbd 8b02 	vpop	{d8}
 800363e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003642:	bf00      	nop
 8003644:	20005430 	.word	0x20005430
 8003648:	3a83126f 	.word	0x3a83126f
 800364c:	200053cc 	.word	0x200053cc

08003650 <changeOversampling>:



void changeOversampling(uint32_t newOS)
{
	if (newOS != prevOversample)
 8003650:	4b8f      	ldr	r3, [pc, #572]	; (8003890 <changeOversampling+0x240>)
{
 8003652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003656:	ed2d 8b02 	vpush	{d8}
	if (newOS != prevOversample)
 800365a:	681b      	ldr	r3, [r3, #0]
{
 800365c:	b089      	sub	sp, #36	; 0x24
	if (newOS != prevOversample)
 800365e:	4283      	cmp	r3, r0
{
 8003660:	9007      	str	r0, [sp, #28]
	if (newOS != prevOversample)
 8003662:	f000 810c 	beq.w	800387e <changeOversampling+0x22e>
	{
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
		for (int v = 0; v < numStringsThisBoard; v++)
 8003666:	4b8b      	ldr	r3, [pc, #556]	; (8003894 <changeOversampling+0x244>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f000 8107 	beq.w	800387e <changeOversampling+0x22e>
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003670:	9b07      	ldr	r3, [sp, #28]
		{
			for (int i = 0; i < NUM_EFFECT; i++)
			{
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003672:	2200      	movs	r2, #0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003674:	eddf 7a88 	vldr	s15, [pc, #544]	; 8003898 <changeOversampling+0x248>
 8003678:	3301      	adds	r3, #1
		for (int v = 0; v < numStringsThisBoard; v++)
 800367a:	9205      	str	r2, [sp, #20]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 800367c:	ee07 3a10 	vmov	s14, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003680:	2320      	movs	r3, #32
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003682:	eeb8 8a47 	vcvt.f32.u32	s16, s14
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003686:	9304      	str	r3, [sp, #16]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003688:	ee28 8a27 	vmul.f32	s16, s16, s15
 800368c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003690:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 8003694:	4b81      	ldr	r3, [pc, #516]	; (800389c <changeOversampling+0x24c>)
		for (int v = 0; v < numStringsThisBoard; v++)
 8003696:	4614      	mov	r4, r2
 8003698:	9904      	ldr	r1, [sp, #16]
 800369a:	9206      	str	r2, [sp, #24]
 800369c:	eb03 0a01 	add.w	sl, r3, r1
 80036a0:	4b7f      	ldr	r3, [pc, #508]	; (80038a0 <changeOversampling+0x250>)
 80036a2:	eb03 0902 	add.w	r9, r3, r2
 80036a6:	4b7f      	ldr	r3, [pc, #508]	; (80038a4 <changeOversampling+0x254>)
 80036a8:	eb03 0802 	add.w	r8, r3, r2
 80036ac:	4b7e      	ldr	r3, [pc, #504]	; (80038a8 <changeOversampling+0x258>)
 80036ae:	189f      	adds	r7, r3, r2
 80036b0:	4b7e      	ldr	r3, [pc, #504]	; (80038ac <changeOversampling+0x25c>)
 80036b2:	189e      	adds	r6, r3, r2
 80036b4:	4b7e      	ldr	r3, [pc, #504]	; (80038b0 <changeOversampling+0x260>)
 80036b6:	189d      	adds	r5, r3, r2
 80036b8:	4b7e      	ldr	r3, [pc, #504]	; (80038b4 <changeOversampling+0x264>)
 80036ba:	4413      	add	r3, r2
 80036bc:	469b      	mov	fp, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 80036be:	4b7e      	ldr	r3, [pc, #504]	; (80038b8 <changeOversampling+0x268>)
 80036c0:	eeb0 0a48 	vmov.f32	s0, s16
 80036c4:	1918      	adds	r0, r3, r4
 80036c6:	f00b fe3f 	bl	800f348 <tHighpass_setSampleRate>
				tHighpass_setSampleRate(&dcBlock2[i][v], osMult);
 80036ca:	4b7c      	ldr	r3, [pc, #496]	; (80038bc <changeOversampling+0x26c>)
 80036cc:	eeb0 0a48 	vmov.f32	s0, s16
 80036d0:	1918      	adds	r0, r3, r4
 80036d2:	f00b fe39 	bl	800f348 <tHighpass_setSampleRate>
				tVZFilterLS_setSampleRate(&shelf1[i][v], osMult);
 80036d6:	4650      	mov	r0, sl
 80036d8:	eeb0 0a48 	vmov.f32	s0, s16
 80036dc:	f00c fb66 	bl	800fdac <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
 80036e0:	f8da 3000 	ldr.w	r3, [sl]
 80036e4:	4650      	mov	r0, sl
			for (int i = 0; i < NUM_EFFECT; i++)
 80036e6:	f10a 0a08 	add.w	sl, sl, #8
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
 80036ea:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 80036ee:	f00c fbaf 	bl	800fe50 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&shelf2[i][v], osMult);
 80036f2:	4648      	mov	r0, r9
 80036f4:	eeb0 0a48 	vmov.f32	s0, s16
 80036f8:	f00c fcda 	bl	80100b0 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
 80036fc:	f8d9 3000 	ldr.w	r3, [r9]
 8003700:	4648      	mov	r0, r9
			for (int i = 0; i < NUM_EFFECT; i++)
 8003702:	f109 0908 	add.w	r9, r9, #8
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
 8003706:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 800370a:	f00c fd23 	bl	8010154 <tVZFilterHS_setFreqFast>
				tVZFilterBell_setSampleRate(&bell1[i][v], osMult);
 800370e:	4640      	mov	r0, r8
 8003710:	eeb0 0a48 	vmov.f32	s0, s16
 8003714:	f00c fe6c 	bl	80103f0 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
 8003718:	f8d8 3000 	ldr.w	r3, [r8]
 800371c:	4640      	mov	r0, r8
			for (int i = 0; i < NUM_EFFECT; i++)
 800371e:	f108 0808 	add.w	r8, r8, #8
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
 8003722:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003726:	f00c ff59 	bl	80105dc <tVZFilterBell_setFreqFast>
				tCompressor_setSampleRate(&comp[i][v], osMult);
 800372a:	4b65      	ldr	r3, [pc, #404]	; (80038c0 <changeOversampling+0x270>)
 800372c:	eeb0 0a48 	vmov.f32	s0, s16
 8003730:	1918      	adds	r0, r3, r4
 8003732:	f00a fcc7 	bl	800e0c4 <tCompressor_setSampleRate>
				tCycle_setSampleRate(&mod1[i][v], osMult);
 8003736:	4b63      	ldr	r3, [pc, #396]	; (80038c4 <changeOversampling+0x274>)
 8003738:	eeb0 0a48 	vmov.f32	s0, s16
 800373c:	1918      	adds	r0, r3, r4
 800373e:	f00e fe23 	bl	8012388 <tCycle_setSampleRate>
				tCycle_setSampleRate(&mod2[i][v], osMult);
 8003742:	4b61      	ldr	r3, [pc, #388]	; (80038c8 <changeOversampling+0x278>)
 8003744:	eeb0 0a48 	vmov.f32	s0, s16
 8003748:	1918      	adds	r0, r3, r4
 800374a:	f00e fe1d 	bl	8012388 <tCycle_setSampleRate>
				tSVF_setSampleRate(&FXlowpass[i][v],osMult);
 800374e:	4638      	mov	r0, r7
 8003750:	eeb0 0a48 	vmov.f32	s0, s16
 8003754:	f00b fd8e 	bl	800f274 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	4638      	mov	r0, r7
			for (int i = 0; i < NUM_EFFECT; i++)
 800375c:	3708      	adds	r7, #8
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
 800375e:	ed93 0a04 	vldr	s0, [r3, #16]
 8003762:	f00b fd29 	bl	800f1b8 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXhighpass[i][v],osMult);
 8003766:	4630      	mov	r0, r6
 8003768:	eeb0 0a48 	vmov.f32	s0, s16
 800376c:	f00b fd82 	bl	800f274 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
 8003770:	6833      	ldr	r3, [r6, #0]
 8003772:	4630      	mov	r0, r6
			for (int i = 0; i < NUM_EFFECT; i++)
 8003774:	3608      	adds	r6, #8
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
 8003776:	ed93 0a04 	vldr	s0, [r3, #16]
 800377a:	f00b fd1d 	bl	800f1b8 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXbandpass[i][v],osMult);
 800377e:	4628      	mov	r0, r5
 8003780:	eeb0 0a48 	vmov.f32	s0, s16
 8003784:	f00b fd76 	bl	800f274 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
 8003788:	682b      	ldr	r3, [r5, #0]
 800378a:	4628      	mov	r0, r5
			for (int i = 0; i < NUM_EFFECT; i++)
 800378c:	3508      	adds	r5, #8
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
 800378e:	ed93 0a04 	vldr	s0, [r3, #16]
 8003792:	f00b fd11 	bl	800f1b8 <tSVF_setFreqFast>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], osMult);
 8003796:	4658      	mov	r0, fp
 8003798:	eeb0 0a48 	vmov.f32	s0, s16
 800379c:	f00d fc80 	bl	80110a0 <tDiodeFilter_setSampleRate>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
 80037a0:	f8db 3000 	ldr.w	r3, [fp]
 80037a4:	4658      	mov	r0, fp
			for (int i = 0; i < NUM_EFFECT; i++)
 80037a6:	f10b 0b08 	add.w	fp, fp, #8
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
 80037aa:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 80037ae:	4b47      	ldr	r3, [pc, #284]	; (80038cc <changeOversampling+0x27c>)
 80037b0:	4423      	add	r3, r4
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	f00d fc74 	bl	80110a0 <tDiodeFilter_setSampleRate>
				tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], osMult);
 80037b8:	9b00      	ldr	r3, [sp, #0]
 80037ba:	eeb0 0a48 	vmov.f32	s0, s16
 80037be:	4618      	mov	r0, r3
 80037c0:	f00c fe16 	bl	80103f0 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&FXVZfilterPeak[i][v], FXVZfilterPeak[i][v]->cutoffMIDI);
 80037c4:	9b00      	ldr	r3, [sp, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	4b40      	ldr	r3, [pc, #256]	; (80038cc <changeOversampling+0x27c>)
 80037ca:	591b      	ldr	r3, [r3, r4]
 80037cc:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 80037d0:	f00c ff04 	bl	80105dc <tVZFilterBell_setFreqFast>
				tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], osMult);
 80037d4:	4a3e      	ldr	r2, [pc, #248]	; (80038d0 <changeOversampling+0x280>)
 80037d6:	4b3f      	ldr	r3, [pc, #252]	; (80038d4 <changeOversampling+0x284>)
 80037d8:	eeb0 0a48 	vmov.f32	s0, s16
 80037dc:	1911      	adds	r1, r2, r4
 80037de:	1918      	adds	r0, r3, r4
 80037e0:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <changeOversampling+0x288>)
 80037e2:	9103      	str	r1, [sp, #12]
 80037e4:	493d      	ldr	r1, [pc, #244]	; (80038dc <changeOversampling+0x28c>)
 80037e6:	4423      	add	r3, r4
 80037e8:	190a      	adds	r2, r1, r4
 80037ea:	e9cd 0300 	strd	r0, r3, [sp]
 80037ee:	9202      	str	r2, [sp, #8]
 80037f0:	f00c fadc 	bl	800fdac <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&FXVZfilterLS[i][v], FXVZfilterLS[i][v]->cutoffMIDI);
 80037f4:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <changeOversampling+0x284>)
 80037f6:	9800      	ldr	r0, [sp, #0]
 80037f8:	591b      	ldr	r3, [r3, r4]
 80037fa:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 80037fe:	f00c fb27 	bl	800fe50 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], osMult);
 8003802:	9903      	ldr	r1, [sp, #12]
 8003804:	eeb0 0a48 	vmov.f32	s0, s16
 8003808:	4608      	mov	r0, r1
 800380a:	9100      	str	r1, [sp, #0]
 800380c:	f00c fc50 	bl	80100b0 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&FXVZfilterHS[i][v], FXVZfilterHS[i][v]->cutoffMIDI);
 8003810:	9900      	ldr	r1, [sp, #0]
 8003812:	4a2f      	ldr	r2, [pc, #188]	; (80038d0 <changeOversampling+0x280>)
 8003814:	4608      	mov	r0, r1
 8003816:	5911      	ldr	r1, [r2, r4]
 8003818:	ed91 0a11 	vldr	s0, [r1, #68]	; 0x44
 800381c:	f00c fc9a 	bl	8010154 <tVZFilterHS_setFreqFast>
				tVZFilter_setSampleRate(&FXVZfilterBR[i][v], osMult);
 8003820:	9a02      	ldr	r2, [sp, #8]
 8003822:	eeb0 0a48 	vmov.f32	s0, s16
 8003826:	4610      	mov	r0, r2
 8003828:	9200      	str	r2, [sp, #0]
 800382a:	f00c fa05 	bl	800fc38 <tVZFilter_setSampleRate>
				tVZFilter_setFreq(&FXVZfilterBR[i][v], FXVZfilterBR[i][v]->fc);
 800382e:	492b      	ldr	r1, [pc, #172]	; (80038dc <changeOversampling+0x28c>)
 8003830:	9a00      	ldr	r2, [sp, #0]
 8003832:	4610      	mov	r0, r2
 8003834:	590a      	ldr	r2, [r1, r4]
 8003836:	ed92 0a0a 	vldr	s0, [r2, #40]	; 0x28
 800383a:	f00b ff3b 	bl	800f6b4 <tVZFilter_setFreq>
				tLadderFilter_setSampleRate(&FXLadderfilter[i][v], osMult);
 800383e:	9b01      	ldr	r3, [sp, #4]
 8003840:	eeb0 0a48 	vmov.f32	s0, s16
 8003844:	4618      	mov	r0, r3
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	f00d fe84 	bl	8011554 <tLadderFilter_setSampleRate>
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
 800384c:	9b00      	ldr	r3, [sp, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	4b21      	ldr	r3, [pc, #132]	; (80038d8 <changeOversampling+0x288>)
 8003852:	591b      	ldr	r3, [r3, r4]
			for (int i = 0; i < NUM_EFFECT; i++)
 8003854:	3408      	adds	r4, #8
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
 8003856:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 800385a:	f00d fe3b 	bl	80114d4 <tLadderFilter_setFreqFast>
			for (int i = 0; i < NUM_EFFECT; i++)
 800385e:	9b04      	ldr	r3, [sp, #16]
 8003860:	429c      	cmp	r4, r3
 8003862:	f47f af2c 	bne.w	80036be <changeOversampling+0x6e>
		for (int v = 0; v < numStringsThisBoard; v++)
 8003866:	3304      	adds	r3, #4
 8003868:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800386c:	9304      	str	r3, [sp, #16]
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <changeOversampling+0x244>)
 8003870:	3101      	adds	r1, #1
 8003872:	3204      	adds	r2, #4
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	9105      	str	r1, [sp, #20]
 8003878:	428b      	cmp	r3, r1
 800387a:	f73f af0b 	bgt.w	8003694 <changeOversampling+0x44>
			}
		}
	}
	prevOversample = newOS;
 800387e:	4b04      	ldr	r3, [pc, #16]	; (8003890 <changeOversampling+0x240>)
 8003880:	9a07      	ldr	r2, [sp, #28]
 8003882:	601a      	str	r2, [r3, #0]
}
 8003884:	b009      	add	sp, #36	; 0x24
 8003886:	ecbd 8b02 	vpop	{d8}
 800388a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800388e:	bf00      	nop
 8003890:	2001d67c 	.word	0x2001d67c
 8003894:	20000694 	.word	0x20000694
 8003898:	473b8000 	.word	0x473b8000
 800389c:	2001d6f8 	.word	0x2001d6f8
 80038a0:	2001d738 	.word	0x2001d738
 80038a4:	2001cf40 	.word	0x2001cf40
 80038a8:	2001ce98 	.word	0x2001ce98
 80038ac:	2001ce78 	.word	0x2001ce78
 80038b0:	2001ce38 	.word	0x2001ce38
 80038b4:	2001ce58 	.word	0x2001ce58
 80038b8:	2001cf80 	.word	0x2001cf80
 80038bc:	2001cfa0 	.word	0x2001cfa0
 80038c0:	2001cf60 	.word	0x2001cf60
 80038c4:	2001d4c8 	.word	0x2001d4c8
 80038c8:	2001d4e8 	.word	0x2001d4e8
 80038cc:	2001ce18 	.word	0x2001ce18
 80038d0:	2001cdd8 	.word	0x2001cdd8
 80038d4:	2001cdf8 	.word	0x2001cdf8
 80038d8:	2001cd98 	.word	0x2001cd98
 80038dc:	2001cdb8 	.word	0x2001cdb8

080038e0 <delayTick>:
{
	param5[v][string] = (value * 1.5f) + 1.0f;
}

float delayTick(float sample, int v, int string)
{
 80038e0:	b538      	push	{r3, r4, r5, lr}
    sample *= param5[v][string];
 80038e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1

    sample = sample + (delayFB[v][string] * param2[v][string]);
 80038e6:	4d18      	ldr	r5, [pc, #96]	; (8003948 <delayTick+0x68>)
 80038e8:	4a18      	ldr	r2, [pc, #96]	; (800394c <delayTick+0x6c>)
 80038ea:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    sample *= param5[v][string];
 80038ee:	4b18      	ldr	r3, [pc, #96]	; (8003950 <delayTick+0x70>)
    sample = sample + (delayFB[v][string] * param2[v][string]);
 80038f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80038f4:	edd5 7a00 	vldr	s15, [r5]
    sample *= param5[v][string];
 80038f8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
 80038fc:	ed92 7a00 	vldr	s14, [r2]
    sample *= param5[v][string];
 8003900:	008c      	lsls	r4, r1, #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
 8003902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003906:	ed93 7a00 	vldr	s14, [r3]

    sample = fast_tanh5(sample);
 800390a:	eee7 7a00 	vfma.f32	s15, s14, s0
 800390e:	eeb0 0a67 	vmov.f32	s0, s15
 8003912:	f00e f899 	bl	8011a48 <fast_tanh5>

    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
 8003916:	480f      	ldr	r0, [pc, #60]	; (8003954 <delayTick+0x74>)
 8003918:	4420      	add	r0, r4
 800391a:	f00a fc3f 	bl	800e19c <tFeedbackLeveler_tick>

    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[v][string], sample);
 800391e:	480e      	ldr	r0, [pc, #56]	; (8003958 <delayTick+0x78>)
 8003920:	4420      	add	r0, r4
 8003922:	f00a f989 	bl	800dc38 <tTapeDelay_tick>
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 8003926:	480d      	ldr	r0, [pc, #52]	; (800395c <delayTick+0x7c>)
    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[v][string], sample);
 8003928:	ed85 0a00 	vstr	s0, [r5]
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 800392c:	4420      	add	r0, r4
 800392e:	f00b fbd1 	bl	800f0d4 <tSVF_tick>
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
 8003932:	480b      	ldr	r0, [pc, #44]	; (8003960 <delayTick+0x80>)
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 8003934:	ed85 0a00 	vstr	s0, [r5]
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
 8003938:	4420      	add	r0, r4
 800393a:	f00b fbcb 	bl	800f0d4 <tSVF_tick>
    sample = fast_tanh5(sample);
 800393e:	f00e f883 	bl	8011a48 <fast_tanh5>
    delayFB[v][string] = sample;
 8003942:	ed85 0a00 	vstr	s0, [r5]
    return sample;
}
 8003946:	bd38      	pop	{r3, r4, r5, pc}
 8003948:	2001d108 	.word	0x2001d108
 800394c:	2001d5c4 	.word	0x2001d5c4
 8003950:	2001d624 	.word	0x2001d624
 8003954:	2001d16c 	.word	0x2001d16c
 8003958:	2001d8b8 	.word	0x2001d8b8
 800395c:	2001ce98 	.word	0x2001ce98
 8003960:	2001ce78 	.word	0x2001ce78

08003964 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003964:	4927      	ldr	r1, [pc, #156]	; (8003a04 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003966:	4a28      	ldr	r2, [pc, #160]	; (8003a08 <SystemInit+0xa4>)
{
 8003968:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800396a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800396e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003976:	6813      	ldr	r3, [r2, #0]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	2b06      	cmp	r3, #6
 800397e:	d805      	bhi.n	800398c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003980:	6813      	ldr	r3, [r2, #0]
 8003982:	f023 030f 	bic.w	r3, r3, #15
 8003986:	f043 0307 	orr.w	r3, r3, #7
 800398a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800398c:	4b1f      	ldr	r3, [pc, #124]	; (8003a0c <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800398e:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003990:	4a1f      	ldr	r2, [pc, #124]	; (8003a10 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8003992:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003994:	481c      	ldr	r0, [pc, #112]	; (8003a08 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8003996:	f041 0101 	orr.w	r1, r1, #1
 800399a:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800399c:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800399e:	6819      	ldr	r1, [r3, #0]
 80039a0:	400a      	ands	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80039a4:	6803      	ldr	r3, [r0, #0]
 80039a6:	071b      	lsls	r3, r3, #28
 80039a8:	d505      	bpl.n	80039b6 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80039aa:	6803      	ldr	r3, [r0, #0]
 80039ac:	f023 030f 	bic.w	r3, r3, #15
 80039b0:	f043 0307 	orr.w	r3, r3, #7
 80039b4:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80039b6:	4b15      	ldr	r3, [pc, #84]	; (8003a0c <SystemInit+0xa8>)
 80039b8:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80039ba:	4916      	ldr	r1, [pc, #88]	; (8003a14 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 80039bc:	4c16      	ldr	r4, [pc, #88]	; (8003a18 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 80039be:	4817      	ldr	r0, [pc, #92]	; (8003a1c <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 80039c0:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80039c2:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80039c4:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80039c6:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 80039c8:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 80039ca:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80039cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80039ce:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80039d0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80039d2:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80039d4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039d6:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80039d8:	4c11      	ldr	r4, [pc, #68]	; (8003a20 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 80039da:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80039de:	4911      	ldr	r1, [pc, #68]	; (8003a24 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 80039e0:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 80039e2:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	4019      	ands	r1, r3
 80039e8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80039ec:	d203      	bcs.n	80039f6 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <SystemInit+0xc4>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80039f6:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <SystemInit+0xc8>)
 80039f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80039fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80039fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	e000ed00 	.word	0xe000ed00
 8003a08:	52002000 	.word	0x52002000
 8003a0c:	58024400 	.word	0x58024400
 8003a10:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a14:	01010280 	.word	0x01010280
 8003a18:	02020200 	.word	0x02020200
 8003a1c:	01ff0000 	.word	0x01ff0000
 8003a20:	5c001000 	.word	0x5c001000
 8003a24:	ffff0000 	.word	0xffff0000
 8003a28:	51008000 	.word	0x51008000
 8003a2c:	52004000 	.word	0x52004000

08003a30 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003a30:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <HAL_InitTick+0x40>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	b90b      	cbnz	r3, 8003a3a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8003a36:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003a38:	4770      	bx	lr
{
 8003a3a:	b510      	push	{r4, lr}
 8003a3c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a42:	4a0c      	ldr	r2, [pc, #48]	; (8003a74 <HAL_InitTick+0x44>)
 8003a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a48:	6810      	ldr	r0, [r2, #0]
 8003a4a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a4e:	f000 f8d7 	bl	8003c00 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a52:	2c0f      	cmp	r4, #15
 8003a54:	d800      	bhi.n	8003a58 <HAL_InitTick+0x28>
 8003a56:	b108      	cbz	r0, 8003a5c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8003a58:	2001      	movs	r0, #1
}
 8003a5a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	4621      	mov	r1, r4
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a64:	f000 f880 	bl	8003b68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a68:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <HAL_InitTick+0x48>)
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	601c      	str	r4, [r3, #0]
}
 8003a6e:	bd10      	pop	{r4, pc}
 8003a70:	20000b38 	.word	0x20000b38
 8003a74:	20000af0 	.word	0x20000af0
 8003a78:	20000b3c 	.word	0x20000b3c

08003a7c <HAL_Init>:
{
 8003a7c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a7e:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a80:	4c12      	ldr	r4, [pc, #72]	; (8003acc <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a82:	f000 f85f 	bl	8003b44 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a86:	f003 f9a9 	bl	8006ddc <HAL_RCC_GetSysClockFreq>
 8003a8a:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <HAL_Init+0x54>)
 8003a8c:	4911      	ldr	r1, [pc, #68]	; (8003ad4 <HAL_Init+0x58>)
 8003a8e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a90:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a92:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a96:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a9a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a9c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a9e:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8003aa2:	490d      	ldr	r1, [pc, #52]	; (8003ad8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003aa4:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003aa8:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003aaa:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8003aae:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ab0:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ab2:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ab4:	f7ff ffbc 	bl	8003a30 <HAL_InitTick>
 8003ab8:	b110      	cbz	r0, 8003ac0 <HAL_Init+0x44>
    return HAL_ERROR;
 8003aba:	2401      	movs	r4, #1
}
 8003abc:	4620      	mov	r0, r4
 8003abe:	bd10      	pop	{r4, pc}
 8003ac0:	4604      	mov	r4, r0
  HAL_MspInit();
 8003ac2:	f7ff f9a9 	bl	8002e18 <HAL_MspInit>
}
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	bd10      	pop	{r4, pc}
 8003aca:	bf00      	nop
 8003acc:	20000af4 	.word	0x20000af4
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	08019888 	.word	0x08019888
 8003ad8:	20000af0 	.word	0x20000af0

08003adc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003adc:	4a03      	ldr	r2, [pc, #12]	; (8003aec <HAL_IncTick+0x10>)
 8003ade:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <HAL_IncTick+0x14>)
 8003ae0:	6811      	ldr	r1, [r2, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	440b      	add	r3, r1
 8003ae6:	6013      	str	r3, [r2, #0]
}
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	2001d94c 	.word	0x2001d94c
 8003af0:	20000b38 	.word	0x20000b38

08003af4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003af4:	4b01      	ldr	r3, [pc, #4]	; (8003afc <HAL_GetTick+0x8>)
 8003af6:	6818      	ldr	r0, [r3, #0]
}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	2001d94c 	.word	0x2001d94c

08003b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003b04:	f7ff fff6 	bl	8003af4 <HAL_GetTick>
 8003b08:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b0a:	1c63      	adds	r3, r4, #1
 8003b0c:	d002      	beq.n	8003b14 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b0e:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <HAL_Delay+0x20>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b14:	f7ff ffee 	bl	8003af4 <HAL_GetTick>
 8003b18:	1b43      	subs	r3, r0, r5
 8003b1a:	42a3      	cmp	r3, r4
 8003b1c:	d3fa      	bcc.n	8003b14 <HAL_Delay+0x14>
  {
  }
}
 8003b1e:	bd38      	pop	{r3, r4, r5, pc}
 8003b20:	20000b38 	.word	0x20000b38

08003b24 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003b24:	4b01      	ldr	r3, [pc, #4]	; (8003b2c <HAL_GetREVID+0x8>)
 8003b26:	6818      	ldr	r0, [r3, #0]
}
 8003b28:	0c00      	lsrs	r0, r0, #16
 8003b2a:	4770      	bx	lr
 8003b2c:	5c001000 	.word	0x5c001000

08003b30 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8003b30:	4a03      	ldr	r2, [pc, #12]	; (8003b40 <HAL_SetFMCMemorySwappingConfig+0x10>)
 8003b32:	6813      	ldr	r3, [r2, #0]
 8003b34:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003b38:	4318      	orrs	r0, r3
 8003b3a:	6010      	str	r0, [r2, #0]
}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	52004000 	.word	0x52004000

08003b44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b44:	4906      	ldr	r1, [pc, #24]	; (8003b60 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b46:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b4a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b4e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b50:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b54:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b58:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8003b5a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003b5c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003b5e:	4770      	bx	lr
 8003b60:	e000ed00 	.word	0xe000ed00
 8003b64:	05fa0000 	.word	0x05fa0000

08003b68 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b68:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b6a:	b500      	push	{lr}
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b72:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b76:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b7a:	f1be 0f04 	cmp.w	lr, #4
 8003b7e:	bf28      	it	cs
 8003b80:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b84:	f1bc 0f06 	cmp.w	ip, #6
 8003b88:	d91a      	bls.n	8003bc0 <HAL_NVIC_SetPriority+0x58>
 8003b8a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003b90:	fa0c fc03 	lsl.w	ip, ip, r3
 8003b94:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b98:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8003b9c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b9e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003ba2:	ea21 010c 	bic.w	r1, r1, ip
 8003ba6:	fa01 f103 	lsl.w	r1, r1, r3
 8003baa:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003bae:	db0a      	blt.n	8003bc6 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bb0:	0109      	lsls	r1, r1, #4
 8003bb2:	4b0a      	ldr	r3, [pc, #40]	; (8003bdc <HAL_NVIC_SetPriority+0x74>)
 8003bb4:	b2c9      	uxtb	r1, r1
 8003bb6:	4403      	add	r3, r0
 8003bb8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003bbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bc0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	e7e8      	b.n	8003b98 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc6:	f000 000f 	and.w	r0, r0, #15
 8003bca:	0109      	lsls	r1, r1, #4
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <HAL_NVIC_SetPriority+0x78>)
 8003bce:	b2c9      	uxtb	r1, r1
 8003bd0:	4403      	add	r3, r0
 8003bd2:	7619      	strb	r1, [r3, #24]
 8003bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8003bd8:	e000ed00 	.word	0xe000ed00
 8003bdc:	e000e100 	.word	0xe000e100
 8003be0:	e000ecfc 	.word	0xe000ecfc

08003be4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003be4:	2800      	cmp	r0, #0
 8003be6:	db07      	blt.n	8003bf8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003be8:	2301      	movs	r3, #1
 8003bea:	f000 011f 	and.w	r1, r0, #31
 8003bee:	4a03      	ldr	r2, [pc, #12]	; (8003bfc <HAL_NVIC_EnableIRQ+0x18>)
 8003bf0:	0940      	lsrs	r0, r0, #5
 8003bf2:	408b      	lsls	r3, r1
 8003bf4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	e000e100 	.word	0xe000e100

08003c00 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c00:	1e43      	subs	r3, r0, #1
 8003c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c06:	d20c      	bcs.n	8003c22 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c08:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c0c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c0e:	4906      	ldr	r1, [pc, #24]	; (8003c28 <HAL_SYSTICK_Config+0x28>)
 8003c10:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c14:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c16:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c18:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c1c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c1e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c20:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003c22:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	e000ed00 	.word	0xe000ed00

08003c2c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8003c2c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003c30:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003c32:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003c34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c36:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8003c3c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	e000ed00 	.word	0xe000ed00

08003c48 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003c48:	4b06      	ldr	r3, [pc, #24]	; (8003c64 <HAL_MPU_Enable+0x1c>)
 8003c4a:	f040 0001 	orr.w	r0, r0, #1
 8003c4e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003c5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c5e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003c62:	4770      	bx	lr
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003c68:	7843      	ldrb	r3, [r0, #1]
 8003c6a:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <HAL_MPU_ConfigRegion+0x5c>)
 8003c6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8003c70:	7803      	ldrb	r3, [r0, #0]
 8003c72:	b313      	cbz	r3, 8003cba <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003c74:	6843      	ldr	r3, [r0, #4]
 8003c76:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c7a:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c7c:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c80:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003c82:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c84:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c88:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c8c:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c8e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c90:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c94:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c98:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c9c:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c9e:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003ca2:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003ca6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003caa:	7a01      	ldrb	r1, [r0, #8]
 8003cac:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8003cb0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003cb4:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8003cb8:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8003cba:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8003cbe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 8003cc2:	4770      	bx	lr
 8003cc4:	e000ed00 	.word	0xe000ed00

08003cc8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc8:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cca:	6805      	ldr	r5, [r0, #0]
 8003ccc:	4c8b      	ldr	r4, [pc, #556]	; (8003efc <DMA_SetConfig+0x234>)
 8003cce:	4f8c      	ldr	r7, [pc, #560]	; (8003f00 <DMA_SetConfig+0x238>)
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cd0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003cd2:	42bd      	cmp	r5, r7
 8003cd4:	bf18      	it	ne
 8003cd6:	42a5      	cmpne	r5, r4
 8003cd8:	f107 0718 	add.w	r7, r7, #24
 8003cdc:	bf0c      	ite	eq
 8003cde:	2401      	moveq	r4, #1
 8003ce0:	2400      	movne	r4, #0
 8003ce2:	42bd      	cmp	r5, r7
 8003ce4:	bf08      	it	eq
 8003ce6:	f044 0401 	orreq.w	r4, r4, #1
 8003cea:	3718      	adds	r7, #24
 8003cec:	42bd      	cmp	r5, r7
 8003cee:	bf08      	it	eq
 8003cf0:	f044 0401 	orreq.w	r4, r4, #1
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	42bd      	cmp	r5, r7
 8003cf8:	bf08      	it	eq
 8003cfa:	f044 0401 	orreq.w	r4, r4, #1
 8003cfe:	3718      	adds	r7, #24
 8003d00:	42bd      	cmp	r5, r7
 8003d02:	bf08      	it	eq
 8003d04:	f044 0401 	orreq.w	r4, r4, #1
 8003d08:	3718      	adds	r7, #24
 8003d0a:	42bd      	cmp	r5, r7
 8003d0c:	bf08      	it	eq
 8003d0e:	f044 0401 	orreq.w	r4, r4, #1
 8003d12:	3718      	adds	r7, #24
 8003d14:	42bd      	cmp	r5, r7
 8003d16:	bf08      	it	eq
 8003d18:	f044 0401 	orreq.w	r4, r4, #1
 8003d1c:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8003d20:	42bd      	cmp	r5, r7
 8003d22:	bf08      	it	eq
 8003d24:	f044 0401 	orreq.w	r4, r4, #1
 8003d28:	3718      	adds	r7, #24
 8003d2a:	42bd      	cmp	r5, r7
 8003d2c:	bf08      	it	eq
 8003d2e:	f044 0401 	orreq.w	r4, r4, #1
 8003d32:	3718      	adds	r7, #24
 8003d34:	42bd      	cmp	r5, r7
 8003d36:	bf08      	it	eq
 8003d38:	f044 0401 	orreq.w	r4, r4, #1
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	42bd      	cmp	r5, r7
 8003d40:	bf08      	it	eq
 8003d42:	f044 0401 	orreq.w	r4, r4, #1
 8003d46:	3718      	adds	r7, #24
 8003d48:	42bd      	cmp	r5, r7
 8003d4a:	bf08      	it	eq
 8003d4c:	f044 0401 	orreq.w	r4, r4, #1
 8003d50:	3718      	adds	r7, #24
 8003d52:	42bd      	cmp	r5, r7
 8003d54:	bf08      	it	eq
 8003d56:	f044 0401 	orreq.w	r4, r4, #1
 8003d5a:	3718      	adds	r7, #24
 8003d5c:	42bd      	cmp	r5, r7
 8003d5e:	bf08      	it	eq
 8003d60:	f044 0401 	orreq.w	r4, r4, #1
 8003d64:	3718      	adds	r7, #24
 8003d66:	42bd      	cmp	r5, r7
 8003d68:	bf08      	it	eq
 8003d6a:	f044 0401 	orreq.w	r4, r4, #1
 8003d6e:	4f65      	ldr	r7, [pc, #404]	; (8003f04 <DMA_SetConfig+0x23c>)
 8003d70:	42bd      	cmp	r5, r7
 8003d72:	bf08      	it	eq
 8003d74:	f044 0401 	orreq.w	r4, r4, #1
 8003d78:	3714      	adds	r7, #20
 8003d7a:	42bd      	cmp	r5, r7
 8003d7c:	bf08      	it	eq
 8003d7e:	f044 0401 	orreq.w	r4, r4, #1
 8003d82:	3714      	adds	r7, #20
 8003d84:	42bd      	cmp	r5, r7
 8003d86:	bf08      	it	eq
 8003d88:	f044 0401 	orreq.w	r4, r4, #1
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	42bd      	cmp	r5, r7
 8003d90:	bf08      	it	eq
 8003d92:	f044 0401 	orreq.w	r4, r4, #1
 8003d96:	3714      	adds	r7, #20
 8003d98:	42bd      	cmp	r5, r7
 8003d9a:	bf08      	it	eq
 8003d9c:	f044 0401 	orreq.w	r4, r4, #1
 8003da0:	3714      	adds	r7, #20
 8003da2:	42bd      	cmp	r5, r7
 8003da4:	bf08      	it	eq
 8003da6:	f044 0401 	orreq.w	r4, r4, #1
 8003daa:	3714      	adds	r7, #20
 8003dac:	42bd      	cmp	r5, r7
 8003dae:	bf08      	it	eq
 8003db0:	f044 0401 	orreq.w	r4, r4, #1
 8003db4:	b914      	cbnz	r4, 8003dbc <DMA_SetConfig+0xf4>
 8003db6:	4c54      	ldr	r4, [pc, #336]	; (8003f08 <DMA_SetConfig+0x240>)
 8003db8:	42a5      	cmp	r5, r4
 8003dba:	d108      	bne.n	8003dce <DMA_SetConfig+0x106>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dbc:	e9d0 4519 	ldrd	r4, r5, [r0, #100]	; 0x64
 8003dc0:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003dc2:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8003dc4:	b114      	cbz	r4, 8003dcc <DMA_SetConfig+0x104>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dc6:	e9d0 451c 	ldrd	r4, r5, [r0, #112]	; 0x70
 8003dca:	6065      	str	r5, [r4, #4]
 8003dcc:	6805      	ldr	r5, [r0, #0]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dce:	4c4b      	ldr	r4, [pc, #300]	; (8003efc <DMA_SetConfig+0x234>)
 8003dd0:	4f4b      	ldr	r7, [pc, #300]	; (8003f00 <DMA_SetConfig+0x238>)
 8003dd2:	42bd      	cmp	r5, r7
 8003dd4:	bf18      	it	ne
 8003dd6:	42a5      	cmpne	r5, r4
 8003dd8:	f107 0718 	add.w	r7, r7, #24
 8003ddc:	bf0c      	ite	eq
 8003dde:	2401      	moveq	r4, #1
 8003de0:	2400      	movne	r4, #0
 8003de2:	42bd      	cmp	r5, r7
 8003de4:	bf08      	it	eq
 8003de6:	f044 0401 	orreq.w	r4, r4, #1
 8003dea:	3718      	adds	r7, #24
 8003dec:	42bd      	cmp	r5, r7
 8003dee:	bf08      	it	eq
 8003df0:	f044 0401 	orreq.w	r4, r4, #1
 8003df4:	3718      	adds	r7, #24
 8003df6:	42bd      	cmp	r5, r7
 8003df8:	bf08      	it	eq
 8003dfa:	f044 0401 	orreq.w	r4, r4, #1
 8003dfe:	3718      	adds	r7, #24
 8003e00:	42bd      	cmp	r5, r7
 8003e02:	bf08      	it	eq
 8003e04:	f044 0401 	orreq.w	r4, r4, #1
 8003e08:	3718      	adds	r7, #24
 8003e0a:	42bd      	cmp	r5, r7
 8003e0c:	bf08      	it	eq
 8003e0e:	f044 0401 	orreq.w	r4, r4, #1
 8003e12:	3718      	adds	r7, #24
 8003e14:	42bd      	cmp	r5, r7
 8003e16:	bf08      	it	eq
 8003e18:	f044 0401 	orreq.w	r4, r4, #1
 8003e1c:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8003e20:	42bd      	cmp	r5, r7
 8003e22:	bf08      	it	eq
 8003e24:	f044 0401 	orreq.w	r4, r4, #1
 8003e28:	3718      	adds	r7, #24
 8003e2a:	42bd      	cmp	r5, r7
 8003e2c:	bf08      	it	eq
 8003e2e:	f044 0401 	orreq.w	r4, r4, #1
 8003e32:	3718      	adds	r7, #24
 8003e34:	42bd      	cmp	r5, r7
 8003e36:	bf08      	it	eq
 8003e38:	f044 0401 	orreq.w	r4, r4, #1
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	42bd      	cmp	r5, r7
 8003e40:	bf08      	it	eq
 8003e42:	f044 0401 	orreq.w	r4, r4, #1
 8003e46:	3718      	adds	r7, #24
 8003e48:	42bd      	cmp	r5, r7
 8003e4a:	bf08      	it	eq
 8003e4c:	f044 0401 	orreq.w	r4, r4, #1
 8003e50:	3718      	adds	r7, #24
 8003e52:	42bd      	cmp	r5, r7
 8003e54:	bf08      	it	eq
 8003e56:	f044 0401 	orreq.w	r4, r4, #1
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	42bd      	cmp	r5, r7
 8003e5e:	bf08      	it	eq
 8003e60:	f044 0401 	orreq.w	r4, r4, #1
 8003e64:	b914      	cbnz	r4, 8003e6c <DMA_SetConfig+0x1a4>
 8003e66:	4c29      	ldr	r4, [pc, #164]	; (8003f0c <DMA_SetConfig+0x244>)
 8003e68:	42a5      	cmp	r5, r4
 8003e6a:	d11a      	bne.n	8003ea2 <DMA_SetConfig+0x1da>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e6c:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8003e6e:	f004 051f 	and.w	r5, r4, #31
 8003e72:	243f      	movs	r4, #63	; 0x3f
 8003e74:	40ac      	lsls	r4, r5
 8003e76:	60b4      	str	r4, [r6, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e78:	6805      	ldr	r5, [r0, #0]
 8003e7a:	682c      	ldr	r4, [r5, #0]
 8003e7c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8003e80:	602c      	str	r4, [r5, #0]
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e82:	6804      	ldr	r4, [r0, #0]
 8003e84:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e86:	6883      	ldr	r3, [r0, #8]
 8003e88:	2b40      	cmp	r3, #64	; 0x40
    {
      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003e8a:	6803      	ldr	r3, [r0, #0]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e8c:	d004      	beq.n	8003e98 <DMA_SetConfig+0x1d0>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e8e:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e90:	6803      	ldr	r3, [r0, #0]
 8003e92:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e94:	bcf0      	pop	{r4, r5, r6, r7}
 8003e96:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003e98:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003e9a:	6803      	ldr	r3, [r0, #0]
 8003e9c:	60d9      	str	r1, [r3, #12]
}
 8003e9e:	bcf0      	pop	{r4, r5, r6, r7}
 8003ea0:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003ea2:	4c18      	ldr	r4, [pc, #96]	; (8003f04 <DMA_SetConfig+0x23c>)
 8003ea4:	4f1a      	ldr	r7, [pc, #104]	; (8003f10 <DMA_SetConfig+0x248>)
 8003ea6:	42bd      	cmp	r5, r7
 8003ea8:	bf18      	it	ne
 8003eaa:	42a5      	cmpne	r5, r4
 8003eac:	f107 0714 	add.w	r7, r7, #20
 8003eb0:	bf0c      	ite	eq
 8003eb2:	2401      	moveq	r4, #1
 8003eb4:	2400      	movne	r4, #0
 8003eb6:	42bd      	cmp	r5, r7
 8003eb8:	bf08      	it	eq
 8003eba:	f044 0401 	orreq.w	r4, r4, #1
 8003ebe:	3714      	adds	r7, #20
 8003ec0:	42bd      	cmp	r5, r7
 8003ec2:	bf08      	it	eq
 8003ec4:	f044 0401 	orreq.w	r4, r4, #1
 8003ec8:	3714      	adds	r7, #20
 8003eca:	42bd      	cmp	r5, r7
 8003ecc:	bf08      	it	eq
 8003ece:	f044 0401 	orreq.w	r4, r4, #1
 8003ed2:	3714      	adds	r7, #20
 8003ed4:	42bd      	cmp	r5, r7
 8003ed6:	bf08      	it	eq
 8003ed8:	f044 0401 	orreq.w	r4, r4, #1
 8003edc:	3714      	adds	r7, #20
 8003ede:	42bd      	cmp	r5, r7
 8003ee0:	bf08      	it	eq
 8003ee2:	f044 0401 	orreq.w	r4, r4, #1
 8003ee6:	b914      	cbnz	r4, 8003eee <DMA_SetConfig+0x226>
 8003ee8:	4c07      	ldr	r4, [pc, #28]	; (8003f08 <DMA_SetConfig+0x240>)
 8003eea:	42a5      	cmp	r5, r4
 8003eec:	d1d2      	bne.n	8003e94 <DMA_SetConfig+0x1cc>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003eee:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8003ef0:	f004 051f 	and.w	r5, r4, #31
 8003ef4:	2401      	movs	r4, #1
 8003ef6:	40ac      	lsls	r4, r5
 8003ef8:	6074      	str	r4, [r6, #4]
 8003efa:	e7c2      	b.n	8003e82 <DMA_SetConfig+0x1ba>
 8003efc:	40020010 	.word	0x40020010
 8003f00:	40020028 	.word	0x40020028
 8003f04:	58025408 	.word	0x58025408
 8003f08:	58025494 	.word	0x58025494
 8003f0c:	400204b8 	.word	0x400204b8
 8003f10:	5802541c 	.word	0x5802541c

08003f14 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f14:	4b33      	ldr	r3, [pc, #204]	; (8003fe4 <DMA_CalcBaseAndBitshift+0xd0>)
{
 8003f16:	4601      	mov	r1, r0
 8003f18:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f1a:	4e33      	ldr	r6, [pc, #204]	; (8003fe8 <DMA_CalcBaseAndBitshift+0xd4>)
 8003f1c:	6802      	ldr	r2, [r0, #0]
 8003f1e:	4d33      	ldr	r5, [pc, #204]	; (8003fec <DMA_CalcBaseAndBitshift+0xd8>)
 8003f20:	42b2      	cmp	r2, r6
 8003f22:	bf18      	it	ne
 8003f24:	429a      	cmpne	r2, r3
 8003f26:	4c32      	ldr	r4, [pc, #200]	; (8003ff0 <DMA_CalcBaseAndBitshift+0xdc>)
 8003f28:	4832      	ldr	r0, [pc, #200]	; (8003ff4 <DMA_CalcBaseAndBitshift+0xe0>)
 8003f2a:	bf0c      	ite	eq
 8003f2c:	2301      	moveq	r3, #1
 8003f2e:	2300      	movne	r3, #0
 8003f30:	42aa      	cmp	r2, r5
 8003f32:	bf08      	it	eq
 8003f34:	f043 0301 	orreq.w	r3, r3, #1
 8003f38:	42a2      	cmp	r2, r4
 8003f3a:	bf08      	it	eq
 8003f3c:	f043 0301 	orreq.w	r3, r3, #1
 8003f40:	3430      	adds	r4, #48	; 0x30
 8003f42:	4282      	cmp	r2, r0
 8003f44:	bf08      	it	eq
 8003f46:	f043 0301 	orreq.w	r3, r3, #1
 8003f4a:	3030      	adds	r0, #48	; 0x30
 8003f4c:	42a2      	cmp	r2, r4
 8003f4e:	bf08      	it	eq
 8003f50:	f043 0301 	orreq.w	r3, r3, #1
 8003f54:	3430      	adds	r4, #48	; 0x30
 8003f56:	4282      	cmp	r2, r0
 8003f58:	bf08      	it	eq
 8003f5a:	f043 0301 	orreq.w	r3, r3, #1
 8003f5e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8003f62:	42a2      	cmp	r2, r4
 8003f64:	bf08      	it	eq
 8003f66:	f043 0301 	orreq.w	r3, r3, #1
 8003f6a:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8003f6e:	4282      	cmp	r2, r0
 8003f70:	bf08      	it	eq
 8003f72:	f043 0301 	orreq.w	r3, r3, #1
 8003f76:	3030      	adds	r0, #48	; 0x30
 8003f78:	42a2      	cmp	r2, r4
 8003f7a:	bf08      	it	eq
 8003f7c:	f043 0301 	orreq.w	r3, r3, #1
 8003f80:	3430      	adds	r4, #48	; 0x30
 8003f82:	4282      	cmp	r2, r0
 8003f84:	bf08      	it	eq
 8003f86:	f043 0301 	orreq.w	r3, r3, #1
 8003f8a:	3030      	adds	r0, #48	; 0x30
 8003f8c:	42a2      	cmp	r2, r4
 8003f8e:	bf08      	it	eq
 8003f90:	f043 0301 	orreq.w	r3, r3, #1
 8003f94:	3430      	adds	r4, #48	; 0x30
 8003f96:	4282      	cmp	r2, r0
 8003f98:	bf08      	it	eq
 8003f9a:	f043 0301 	orreq.w	r3, r3, #1
 8003f9e:	3030      	adds	r0, #48	; 0x30
 8003fa0:	42a2      	cmp	r2, r4
 8003fa2:	bf08      	it	eq
 8003fa4:	f043 0301 	orreq.w	r3, r3, #1
 8003fa8:	4282      	cmp	r2, r0
 8003faa:	bf08      	it	eq
 8003fac:	f043 0301 	orreq.w	r3, r3, #1
 8003fb0:	b913      	cbnz	r3, 8003fb8 <DMA_CalcBaseAndBitshift+0xa4>
 8003fb2:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <DMA_CalcBaseAndBitshift+0xe4>)
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d112      	bne.n	8003fde <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fb8:	b2d3      	uxtb	r3, r2
 8003fba:	4810      	ldr	r0, [pc, #64]	; (8003ffc <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fbc:	4c10      	ldr	r4, [pc, #64]	; (8004000 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fbe:	3b10      	subs	r3, #16
 8003fc0:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 8003fc4:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fc6:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fca:	5c20      	ldrb	r0, [r4, r0]
 8003fcc:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003fce:	480d      	ldr	r0, [pc, #52]	; (8004004 <DMA_CalcBaseAndBitshift+0xf0>)
 8003fd0:	ea00 0002 	and.w	r0, r0, r2
 8003fd4:	bf88      	it	hi
 8003fd6:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003fd8:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8003fda:	bc70      	pop	{r4, r5, r6}
 8003fdc:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003fde:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 8003fe2:	e7f9      	b.n	8003fd8 <DMA_CalcBaseAndBitshift+0xc4>
 8003fe4:	40020010 	.word	0x40020010
 8003fe8:	40020028 	.word	0x40020028
 8003fec:	40020040 	.word	0x40020040
 8003ff0:	40020058 	.word	0x40020058
 8003ff4:	40020070 	.word	0x40020070
 8003ff8:	400204b8 	.word	0x400204b8
 8003ffc:	aaaaaaab 	.word	0xaaaaaaab
 8004000:	08019898 	.word	0x08019898
 8004004:	fffffc00 	.word	0xfffffc00

08004008 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004008:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800400a:	4a27      	ldr	r2, [pc, #156]	; (80040a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 800400c:	4927      	ldr	r1, [pc, #156]	; (80040ac <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 800400e:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004010:	4d27      	ldr	r5, [pc, #156]	; (80040b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8004012:	4c28      	ldr	r4, [pc, #160]	; (80040b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8004014:	42ab      	cmp	r3, r5
 8004016:	bf18      	it	ne
 8004018:	4293      	cmpne	r3, r2
 800401a:	bf0c      	ite	eq
 800401c:	2201      	moveq	r2, #1
 800401e:	2200      	movne	r2, #0
 8004020:	428b      	cmp	r3, r1
 8004022:	bf08      	it	eq
 8004024:	f042 0201 	orreq.w	r2, r2, #1
 8004028:	3128      	adds	r1, #40	; 0x28
 800402a:	42a3      	cmp	r3, r4
 800402c:	bf08      	it	eq
 800402e:	f042 0201 	orreq.w	r2, r2, #1
 8004032:	3428      	adds	r4, #40	; 0x28
 8004034:	428b      	cmp	r3, r1
 8004036:	bf08      	it	eq
 8004038:	f042 0201 	orreq.w	r2, r2, #1
 800403c:	3128      	adds	r1, #40	; 0x28
 800403e:	42a3      	cmp	r3, r4
 8004040:	bf08      	it	eq
 8004042:	f042 0201 	orreq.w	r2, r2, #1
 8004046:	428b      	cmp	r3, r1
 8004048:	bf08      	it	eq
 800404a:	f042 0201 	orreq.w	r2, r2, #1
 800404e:	b912      	cbnz	r2, 8004056 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8004050:	4a19      	ldr	r2, [pc, #100]	; (80040b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d113      	bne.n	800407e <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004056:	b2db      	uxtb	r3, r3
 8004058:	4918      	ldr	r1, [pc, #96]	; (80040bc <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800405a:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800405c:	3b08      	subs	r3, #8
 800405e:	4c19      	ldr	r4, [pc, #100]	; (80040c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 8004060:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004064:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004066:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800406a:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800406e:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004070:	fa01 f303 	lsl.w	r3, r1, r3
 8004074:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004076:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800407a:	bc30      	pop	{r4, r5}
 800407c:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800407e:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004080:	4a11      	ldr	r2, [pc, #68]	; (80040c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004082:	4c12      	ldr	r4, [pc, #72]	; (80040cc <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 8004084:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004086:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004088:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800408c:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800408e:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004092:	d800      	bhi.n	8004096 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8004094:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004096:	4a0e      	ldr	r2, [pc, #56]	; (80040d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004098:	f001 041f 	and.w	r4, r1, #31
 800409c:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800409e:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040a0:	40a3      	lsls	r3, r4
 80040a2:	4c0c      	ldr	r4, [pc, #48]	; (80040d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80040a4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80040a6:	e7e5      	b.n	8004074 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 80040a8:	58025408 	.word	0x58025408
 80040ac:	58025430 	.word	0x58025430
 80040b0:	5802541c 	.word	0x5802541c
 80040b4:	58025444 	.word	0x58025444
 80040b8:	58025494 	.word	0x58025494
 80040bc:	cccccccd 	.word	0xcccccccd
 80040c0:	16009600 	.word	0x16009600
 80040c4:	58025880 	.word	0x58025880
 80040c8:	bffdfbf0 	.word	0xbffdfbf0
 80040cc:	aaaaaaab 	.word	0xaaaaaaab
 80040d0:	10008200 	.word	0x10008200
 80040d4:	40020880 	.word	0x40020880

080040d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040d8:	f890 c004 	ldrb.w	ip, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80040dc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 80040e0:	2907      	cmp	r1, #7
 80040e2:	d833      	bhi.n	800414c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040e4:	6802      	ldr	r2, [r0, #0]
 80040e6:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x80>)
{
 80040e8:	b410      	push	{r4}
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040ea:	4c1c      	ldr	r4, [pc, #112]	; (800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x84>)
 80040ec:	42a2      	cmp	r2, r4
 80040ee:	bf18      	it	ne
 80040f0:	429a      	cmpne	r2, r3
 80040f2:	f104 0414 	add.w	r4, r4, #20
 80040f6:	bf0c      	ite	eq
 80040f8:	2301      	moveq	r3, #1
 80040fa:	2300      	movne	r3, #0
 80040fc:	42a2      	cmp	r2, r4
 80040fe:	bf08      	it	eq
 8004100:	f043 0301 	orreq.w	r3, r3, #1
 8004104:	3414      	adds	r4, #20
 8004106:	42a2      	cmp	r2, r4
 8004108:	bf08      	it	eq
 800410a:	f043 0301 	orreq.w	r3, r3, #1
 800410e:	3414      	adds	r4, #20
 8004110:	42a2      	cmp	r2, r4
 8004112:	bf08      	it	eq
 8004114:	f043 0301 	orreq.w	r3, r3, #1
 8004118:	3414      	adds	r4, #20
 800411a:	42a2      	cmp	r2, r4
 800411c:	bf08      	it	eq
 800411e:	f043 0301 	orreq.w	r3, r3, #1
 8004122:	3414      	adds	r4, #20
 8004124:	42a2      	cmp	r2, r4
 8004126:	bf08      	it	eq
 8004128:	f043 0301 	orreq.w	r3, r3, #1
 800412c:	b913      	cbnz	r3, 8004134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x5c>
 800412e:	4b0c      	ldr	r3, [pc, #48]	; (8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x88>)
 8004130:	429a      	cmp	r2, r3
 8004132:	d10c      	bne.n	800414e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x76>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>)
 8004136:	4c0c      	ldr	r4, [pc, #48]	; (8004168 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x90>)
 8004138:	4463      	add	r3, ip
 800413a:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800413c:	2201      	movs	r2, #1
 800413e:	408a      	lsls	r2, r1
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004140:	e9c0 341b 	strd	r3, r4, [r0, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004144:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 8004146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	4770      	bx	lr
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x94>)
 8004150:	4c07      	ldr	r4, [pc, #28]	; (8004170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x98>)
 8004152:	4463      	add	r3, ip
 8004154:	009b      	lsls	r3, r3, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004156:	e7f1      	b.n	800413c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>
 8004158:	58025408 	.word	0x58025408
 800415c:	5802541c 	.word	0x5802541c
 8004160:	58025494 	.word	0x58025494
 8004164:	1600963f 	.word	0x1600963f
 8004168:	58025940 	.word	0x58025940
 800416c:	1000823f 	.word	0x1000823f
 8004170:	40020940 	.word	0x40020940

08004174 <HAL_DMA_Init>:
{
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004178:	f7ff fcbc 	bl	8003af4 <HAL_GetTick>
  if(hdma == NULL)
 800417c:	2c00      	cmp	r4, #0
 800417e:	f000 816c 	beq.w	800445a <HAL_DMA_Init+0x2e6>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004182:	6822      	ldr	r2, [r4, #0]
 8004184:	4605      	mov	r5, r0
 8004186:	4ba3      	ldr	r3, [pc, #652]	; (8004414 <HAL_DMA_Init+0x2a0>)
 8004188:	429a      	cmp	r2, r3
 800418a:	d048      	beq.n	800421e <HAL_DMA_Init+0xaa>
 800418c:	3318      	adds	r3, #24
 800418e:	429a      	cmp	r2, r3
 8004190:	d045      	beq.n	800421e <HAL_DMA_Init+0xaa>
 8004192:	3318      	adds	r3, #24
 8004194:	49a0      	ldr	r1, [pc, #640]	; (8004418 <HAL_DMA_Init+0x2a4>)
 8004196:	428a      	cmp	r2, r1
 8004198:	bf18      	it	ne
 800419a:	429a      	cmpne	r2, r3
 800419c:	f101 0118 	add.w	r1, r1, #24
 80041a0:	bf0c      	ite	eq
 80041a2:	2301      	moveq	r3, #1
 80041a4:	2300      	movne	r3, #0
 80041a6:	428a      	cmp	r2, r1
 80041a8:	bf08      	it	eq
 80041aa:	f043 0301 	orreq.w	r3, r3, #1
 80041ae:	3118      	adds	r1, #24
 80041b0:	428a      	cmp	r2, r1
 80041b2:	bf08      	it	eq
 80041b4:	f043 0301 	orreq.w	r3, r3, #1
 80041b8:	3118      	adds	r1, #24
 80041ba:	428a      	cmp	r2, r1
 80041bc:	bf08      	it	eq
 80041be:	f043 0301 	orreq.w	r3, r3, #1
 80041c2:	3118      	adds	r1, #24
 80041c4:	428a      	cmp	r2, r1
 80041c6:	bf08      	it	eq
 80041c8:	f043 0301 	orreq.w	r3, r3, #1
 80041cc:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80041d0:	428a      	cmp	r2, r1
 80041d2:	bf08      	it	eq
 80041d4:	f043 0301 	orreq.w	r3, r3, #1
 80041d8:	3118      	adds	r1, #24
 80041da:	428a      	cmp	r2, r1
 80041dc:	bf08      	it	eq
 80041de:	f043 0301 	orreq.w	r3, r3, #1
 80041e2:	3118      	adds	r1, #24
 80041e4:	428a      	cmp	r2, r1
 80041e6:	bf08      	it	eq
 80041e8:	f043 0301 	orreq.w	r3, r3, #1
 80041ec:	3118      	adds	r1, #24
 80041ee:	428a      	cmp	r2, r1
 80041f0:	bf08      	it	eq
 80041f2:	f043 0301 	orreq.w	r3, r3, #1
 80041f6:	3118      	adds	r1, #24
 80041f8:	428a      	cmp	r2, r1
 80041fa:	bf08      	it	eq
 80041fc:	f043 0301 	orreq.w	r3, r3, #1
 8004200:	3118      	adds	r1, #24
 8004202:	428a      	cmp	r2, r1
 8004204:	bf08      	it	eq
 8004206:	f043 0301 	orreq.w	r3, r3, #1
 800420a:	3118      	adds	r1, #24
 800420c:	428a      	cmp	r2, r1
 800420e:	bf08      	it	eq
 8004210:	f043 0301 	orreq.w	r3, r3, #1
 8004214:	b91b      	cbnz	r3, 800421e <HAL_DMA_Init+0xaa>
 8004216:	4b81      	ldr	r3, [pc, #516]	; (800441c <HAL_DMA_Init+0x2a8>)
 8004218:	429a      	cmp	r2, r3
 800421a:	f040 8154 	bne.w	80044c6 <HAL_DMA_Init+0x352>
    hdma->State = HAL_DMA_STATE_BUSY;
 800421e:	2302      	movs	r3, #2
 8004220:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004224:	2300      	movs	r3, #0
 8004226:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e005      	b.n	8004240 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004234:	f7ff fc5e 	bl	8003af4 <HAL_GetTick>
 8004238:	1b43      	subs	r3, r0, r5
 800423a:	2b05      	cmp	r3, #5
 800423c:	f200 8100 	bhi.w	8004440 <HAL_DMA_Init+0x2cc>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	07d0      	lsls	r0, r2, #31
 8004246:	d4f5      	bmi.n	8004234 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8004248:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800424c:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800424e:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004250:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004252:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004254:	430a      	orrs	r2, r1
 8004256:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004258:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800425a:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800425e:	69a1      	ldr	r1, [r4, #24]
 8004260:	ea42 0201 	orr.w	r2, r2, r1
 8004264:	69e1      	ldr	r1, [r4, #28]
 8004266:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 800426a:	6a21      	ldr	r1, [r4, #32]
 800426c:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004270:	496b      	ldr	r1, [pc, #428]	; (8004420 <HAL_DMA_Init+0x2ac>)
 8004272:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 8004276:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800427a:	d103      	bne.n	8004284 <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800427c:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8004280:	4301      	orrs	r1, r0
 8004282:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004284:	4867      	ldr	r0, [pc, #412]	; (8004424 <HAL_DMA_Init+0x2b0>)
 8004286:	4968      	ldr	r1, [pc, #416]	; (8004428 <HAL_DMA_Init+0x2b4>)
 8004288:	6800      	ldr	r0, [r0, #0]
 800428a:	4001      	ands	r1, r0
 800428c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004290:	d30a      	bcc.n	80042a8 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004292:	6861      	ldr	r1, [r4, #4]
 8004294:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8004298:	281f      	cmp	r0, #31
 800429a:	f240 80d8 	bls.w	800444e <HAL_DMA_Init+0x2da>
 800429e:	394f      	subs	r1, #79	; 0x4f
 80042a0:	2903      	cmp	r1, #3
 80042a2:	d801      	bhi.n	80042a8 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
 80042a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80042a8:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80042aa:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 80042ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80042ae:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042b0:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80042b2:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80042b6:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042ba:	d10e      	bne.n	80042da <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042bc:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 80042c0:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042c2:	b150      	cbz	r0, 80042da <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042c4:	69a5      	ldr	r5, [r4, #24]
 80042c6:	2d00      	cmp	r5, #0
 80042c8:	f040 80d7 	bne.w	800447a <HAL_DMA_Init+0x306>
    switch (hdma->Init.FIFOThreshold)
 80042cc:	2a01      	cmp	r2, #1
 80042ce:	f000 80f5 	beq.w	80044bc <HAL_DMA_Init+0x348>
 80042d2:	f032 0202 	bics.w	r2, r2, #2
 80042d6:	f000 80d8 	beq.w	800448a <HAL_DMA_Init+0x316>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80042da:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042dc:	4620      	mov	r0, r4
 80042de:	f7ff fe19 	bl	8003f14 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80042e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80042e4:	233f      	movs	r3, #63	; 0x3f
 80042e6:	f002 021f 	and.w	r2, r2, #31
 80042ea:	4093      	lsls	r3, r2
 80042ec:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042ee:	6822      	ldr	r2, [r4, #0]
 80042f0:	4b48      	ldr	r3, [pc, #288]	; (8004414 <HAL_DMA_Init+0x2a0>)
 80042f2:	484e      	ldr	r0, [pc, #312]	; (800442c <HAL_DMA_Init+0x2b8>)
 80042f4:	494e      	ldr	r1, [pc, #312]	; (8004430 <HAL_DMA_Init+0x2bc>)
 80042f6:	4282      	cmp	r2, r0
 80042f8:	bf18      	it	ne
 80042fa:	429a      	cmpne	r2, r3
 80042fc:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	428a      	cmp	r2, r1
 8004308:	bf08      	it	eq
 800430a:	f043 0301 	orreq.w	r3, r3, #1
 800430e:	3130      	adds	r1, #48	; 0x30
 8004310:	4282      	cmp	r2, r0
 8004312:	bf08      	it	eq
 8004314:	f043 0301 	orreq.w	r3, r3, #1
 8004318:	3030      	adds	r0, #48	; 0x30
 800431a:	428a      	cmp	r2, r1
 800431c:	bf08      	it	eq
 800431e:	f043 0301 	orreq.w	r3, r3, #1
 8004322:	3130      	adds	r1, #48	; 0x30
 8004324:	4282      	cmp	r2, r0
 8004326:	bf08      	it	eq
 8004328:	f043 0301 	orreq.w	r3, r3, #1
 800432c:	3030      	adds	r0, #48	; 0x30
 800432e:	428a      	cmp	r2, r1
 8004330:	bf08      	it	eq
 8004332:	f043 0301 	orreq.w	r3, r3, #1
 8004336:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800433a:	4282      	cmp	r2, r0
 800433c:	bf08      	it	eq
 800433e:	f043 0301 	orreq.w	r3, r3, #1
 8004342:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004346:	428a      	cmp	r2, r1
 8004348:	bf08      	it	eq
 800434a:	f043 0301 	orreq.w	r3, r3, #1
 800434e:	3130      	adds	r1, #48	; 0x30
 8004350:	4282      	cmp	r2, r0
 8004352:	bf08      	it	eq
 8004354:	f043 0301 	orreq.w	r3, r3, #1
 8004358:	3030      	adds	r0, #48	; 0x30
 800435a:	428a      	cmp	r2, r1
 800435c:	bf08      	it	eq
 800435e:	f043 0301 	orreq.w	r3, r3, #1
 8004362:	3130      	adds	r1, #48	; 0x30
 8004364:	4282      	cmp	r2, r0
 8004366:	bf08      	it	eq
 8004368:	f043 0301 	orreq.w	r3, r3, #1
 800436c:	3030      	adds	r0, #48	; 0x30
 800436e:	428a      	cmp	r2, r1
 8004370:	bf08      	it	eq
 8004372:	f043 0301 	orreq.w	r3, r3, #1
 8004376:	3130      	adds	r1, #48	; 0x30
 8004378:	4282      	cmp	r2, r0
 800437a:	bf08      	it	eq
 800437c:	f043 0301 	orreq.w	r3, r3, #1
 8004380:	3030      	adds	r0, #48	; 0x30
 8004382:	428a      	cmp	r2, r1
 8004384:	bf08      	it	eq
 8004386:	f043 0301 	orreq.w	r3, r3, #1
 800438a:	492a      	ldr	r1, [pc, #168]	; (8004434 <HAL_DMA_Init+0x2c0>)
 800438c:	4282      	cmp	r2, r0
 800438e:	bf08      	it	eq
 8004390:	f043 0301 	orreq.w	r3, r3, #1
 8004394:	4828      	ldr	r0, [pc, #160]	; (8004438 <HAL_DMA_Init+0x2c4>)
 8004396:	428a      	cmp	r2, r1
 8004398:	bf08      	it	eq
 800439a:	f043 0301 	orreq.w	r3, r3, #1
 800439e:	3128      	adds	r1, #40	; 0x28
 80043a0:	4282      	cmp	r2, r0
 80043a2:	bf08      	it	eq
 80043a4:	f043 0301 	orreq.w	r3, r3, #1
 80043a8:	3028      	adds	r0, #40	; 0x28
 80043aa:	428a      	cmp	r2, r1
 80043ac:	bf08      	it	eq
 80043ae:	f043 0301 	orreq.w	r3, r3, #1
 80043b2:	3128      	adds	r1, #40	; 0x28
 80043b4:	4282      	cmp	r2, r0
 80043b6:	bf08      	it	eq
 80043b8:	f043 0301 	orreq.w	r3, r3, #1
 80043bc:	3028      	adds	r0, #40	; 0x28
 80043be:	428a      	cmp	r2, r1
 80043c0:	bf08      	it	eq
 80043c2:	f043 0301 	orreq.w	r3, r3, #1
 80043c6:	3128      	adds	r1, #40	; 0x28
 80043c8:	4282      	cmp	r2, r0
 80043ca:	bf08      	it	eq
 80043cc:	f043 0301 	orreq.w	r3, r3, #1
 80043d0:	428a      	cmp	r2, r1
 80043d2:	bf08      	it	eq
 80043d4:	f043 0301 	orreq.w	r3, r3, #1
 80043d8:	b913      	cbnz	r3, 80043e0 <HAL_DMA_Init+0x26c>
 80043da:	4b18      	ldr	r3, [pc, #96]	; (800443c <HAL_DMA_Init+0x2c8>)
 80043dc:	429a      	cmp	r2, r3
 80043de:	d113      	bne.n	8004408 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043e0:	4620      	mov	r0, r4
 80043e2:	f7ff fe11 	bl	8004008 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043e6:	68a3      	ldr	r3, [r4, #8]
 80043e8:	2b80      	cmp	r3, #128	; 0x80
 80043ea:	d038      	beq.n	800445e <HAL_DMA_Init+0x2ea>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043ec:	7922      	ldrb	r2, [r4, #4]
 80043ee:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043f0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043f2:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 80043f6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80043f8:	6863      	ldr	r3, [r4, #4]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	2b07      	cmp	r3, #7
 80043fe:	d932      	bls.n	8004466 <HAL_DMA_Init+0x2f2>
      hdma->DMAmuxRequestGen = 0U;
 8004400:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8004402:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004406:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004408:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800440a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800440c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800440e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004412:	bd38      	pop	{r3, r4, r5, pc}
 8004414:	40020010 	.word	0x40020010
 8004418:	40020058 	.word	0x40020058
 800441c:	400204b8 	.word	0x400204b8
 8004420:	fe10803f 	.word	0xfe10803f
 8004424:	5c001000 	.word	0x5c001000
 8004428:	ffff0000 	.word	0xffff0000
 800442c:	40020028 	.word	0x40020028
 8004430:	40020040 	.word	0x40020040
 8004434:	58025408 	.word	0x58025408
 8004438:	5802541c 	.word	0x5802541c
 800443c:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004440:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8004442:	2303      	movs	r3, #3
        return HAL_ERROR;
 8004444:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004446:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004448:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800444c:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800444e:	4952      	ldr	r1, [pc, #328]	; (8004598 <HAL_DMA_Init+0x424>)
 8004450:	40c1      	lsrs	r1, r0
 8004452:	07c9      	lsls	r1, r1, #31
 8004454:	f57f af28 	bpl.w	80042a8 <HAL_DMA_Init+0x134>
 8004458:	e724      	b.n	80042a4 <HAL_DMA_Init+0x130>
    return HAL_ERROR;
 800445a:	2001      	movs	r0, #1
}
 800445c:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800445e:	2300      	movs	r3, #0
 8004460:	461a      	mov	r2, r3
 8004462:	6063      	str	r3, [r4, #4]
 8004464:	e7c3      	b.n	80043ee <HAL_DMA_Init+0x27a>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004466:	4620      	mov	r0, r4
 8004468:	f7ff fe36 	bl	80040d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800446c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004472:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	e7c6      	b.n	8004408 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800447a:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 800447e:	d00e      	beq.n	800449e <HAL_DMA_Init+0x32a>
    switch (hdma->Init.FIFOThreshold)
 8004480:	2a02      	cmp	r2, #2
 8004482:	d905      	bls.n	8004490 <HAL_DMA_Init+0x31c>
 8004484:	2a03      	cmp	r2, #3
 8004486:	f47f af28 	bne.w	80042da <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800448a:	01c2      	lsls	r2, r0, #7
 800448c:	f57f af25 	bpl.w	80042da <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
 8004490:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004492:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8004494:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004496:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004498:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800449c:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 800449e:	2a03      	cmp	r2, #3
 80044a0:	f63f af1b 	bhi.w	80042da <HAL_DMA_Init+0x166>
 80044a4:	a501      	add	r5, pc, #4	; (adr r5, 80044ac <HAL_DMA_Init+0x338>)
 80044a6:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 80044aa:	bf00      	nop
 80044ac:	08004491 	.word	0x08004491
 80044b0:	0800448b 	.word	0x0800448b
 80044b4:	08004491 	.word	0x08004491
 80044b8:	080044bd 	.word	0x080044bd
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044bc:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80044c0:	f47f af0b 	bne.w	80042da <HAL_DMA_Init+0x166>
 80044c4:	e7e4      	b.n	8004490 <HAL_DMA_Init+0x31c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80044c6:	4b35      	ldr	r3, [pc, #212]	; (800459c <HAL_DMA_Init+0x428>)
 80044c8:	4835      	ldr	r0, [pc, #212]	; (80045a0 <HAL_DMA_Init+0x42c>)
 80044ca:	4936      	ldr	r1, [pc, #216]	; (80045a4 <HAL_DMA_Init+0x430>)
 80044cc:	4282      	cmp	r2, r0
 80044ce:	bf18      	it	ne
 80044d0:	429a      	cmpne	r2, r3
 80044d2:	f100 0028 	add.w	r0, r0, #40	; 0x28
 80044d6:	bf0c      	ite	eq
 80044d8:	2301      	moveq	r3, #1
 80044da:	2300      	movne	r3, #0
 80044dc:	428a      	cmp	r2, r1
 80044de:	bf08      	it	eq
 80044e0:	f043 0301 	orreq.w	r3, r3, #1
 80044e4:	3128      	adds	r1, #40	; 0x28
 80044e6:	4282      	cmp	r2, r0
 80044e8:	bf08      	it	eq
 80044ea:	f043 0301 	orreq.w	r3, r3, #1
 80044ee:	3028      	adds	r0, #40	; 0x28
 80044f0:	428a      	cmp	r2, r1
 80044f2:	bf08      	it	eq
 80044f4:	f043 0301 	orreq.w	r3, r3, #1
 80044f8:	3128      	adds	r1, #40	; 0x28
 80044fa:	4282      	cmp	r2, r0
 80044fc:	bf08      	it	eq
 80044fe:	f043 0301 	orreq.w	r3, r3, #1
 8004502:	428a      	cmp	r2, r1
 8004504:	bf08      	it	eq
 8004506:	f043 0301 	orreq.w	r3, r3, #1
 800450a:	b913      	cbnz	r3, 8004512 <HAL_DMA_Init+0x39e>
 800450c:	4b26      	ldr	r3, [pc, #152]	; (80045a8 <HAL_DMA_Init+0x434>)
 800450e:	429a      	cmp	r2, r3
 8004510:	d13a      	bne.n	8004588 <HAL_DMA_Init+0x414>
    __HAL_UNLOCK(hdma);
 8004512:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004514:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004516:	4925      	ldr	r1, [pc, #148]	; (80045ac <HAL_DMA_Init+0x438>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8004518:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800451c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004520:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004522:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004524:	68a3      	ldr	r3, [r4, #8]
 8004526:	2b40      	cmp	r3, #64	; 0x40
 8004528:	d02c      	beq.n	8004584 <HAL_DMA_Init+0x410>
 800452a:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	0398      	lsls	r0, r3, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004536:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 800453a:	08db      	lsrs	r3, r3, #3
 800453c:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004540:	6965      	ldr	r5, [r4, #20]
 8004542:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004546:	69a5      	ldr	r5, [r4, #24]
 8004548:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800454c:	69e5      	ldr	r5, [r4, #28]
 800454e:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004552:	6a25      	ldr	r5, [r4, #32]
 8004554:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8004558:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800455a:	4915      	ldr	r1, [pc, #84]	; (80045b0 <HAL_DMA_Init+0x43c>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800455c:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800455e:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <HAL_DMA_Init+0x440>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004560:	6010      	str	r0, [r2, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004562:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004564:	6822      	ldr	r2, [r4, #0]
 8004566:	4411      	add	r1, r2
 8004568:	fba3 2301 	umull	r2, r3, r3, r1
 800456c:	091b      	lsrs	r3, r3, #4
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004572:	f7ff fccf 	bl	8003f14 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004576:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004578:	2301      	movs	r3, #1
 800457a:	f002 021f 	and.w	r2, r2, #31
 800457e:	4093      	lsls	r3, r2
 8004580:	6043      	str	r3, [r0, #4]
 8004582:	e6b4      	b.n	80042ee <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004584:	2010      	movs	r0, #16
 8004586:	e7d6      	b.n	8004536 <HAL_DMA_Init+0x3c2>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004588:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 800458a:	2303      	movs	r3, #3
    return HAL_ERROR;
 800458c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800458e:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004590:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004594:	bd38      	pop	{r3, r4, r5, pc}
 8004596:	bf00      	nop
 8004598:	c3c0003f 	.word	0xc3c0003f
 800459c:	58025408 	.word	0x58025408
 80045a0:	5802541c 	.word	0x5802541c
 80045a4:	58025430 	.word	0x58025430
 80045a8:	58025494 	.word	0x58025494
 80045ac:	fffe000f 	.word	0xfffe000f
 80045b0:	a7fdabf8 	.word	0xa7fdabf8
 80045b4:	cccccccd 	.word	0xcccccccd

080045b8 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 80045b8:	2800      	cmp	r0, #0
 80045ba:	f000 8175 	beq.w	80048a8 <HAL_DMA_Start_IT+0x2f0>
{
 80045be:	b570      	push	{r4, r5, r6, lr}
 80045c0:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80045c2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 80045c6:	2801      	cmp	r0, #1
 80045c8:	f000 8170 	beq.w	80048ac <HAL_DMA_Start_IT+0x2f4>
 80045cc:	2001      	movs	r0, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80045ce:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
 80045d2:	4285      	cmp	r5, r0
  __HAL_LOCK(hdma);
 80045d4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80045d8:	d006      	beq.n	80045e8 <HAL_DMA_Start_IT+0x30>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80045da:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 80045de:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80045e0:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80045e2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80045e6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80045e8:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 80045ea:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80045ec:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045f0:	2000      	movs	r0, #0
 80045f2:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 80045f4:	6828      	ldr	r0, [r5, #0]
 80045f6:	f020 0001 	bic.w	r0, r0, #1
 80045fa:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045fc:	4620      	mov	r0, r4
 80045fe:	f7ff fb63 	bl	8003cc8 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	4b9a      	ldr	r3, [pc, #616]	; (8004870 <HAL_DMA_Start_IT+0x2b8>)
 8004606:	489b      	ldr	r0, [pc, #620]	; (8004874 <HAL_DMA_Start_IT+0x2bc>)
 8004608:	499b      	ldr	r1, [pc, #620]	; (8004878 <HAL_DMA_Start_IT+0x2c0>)
 800460a:	4282      	cmp	r2, r0
 800460c:	bf18      	it	ne
 800460e:	429a      	cmpne	r2, r3
 8004610:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	428a      	cmp	r2, r1
 800461c:	bf08      	it	eq
 800461e:	f043 0301 	orreq.w	r3, r3, #1
 8004622:	3130      	adds	r1, #48	; 0x30
 8004624:	4282      	cmp	r2, r0
 8004626:	bf08      	it	eq
 8004628:	f043 0301 	orreq.w	r3, r3, #1
 800462c:	3030      	adds	r0, #48	; 0x30
 800462e:	428a      	cmp	r2, r1
 8004630:	bf08      	it	eq
 8004632:	f043 0301 	orreq.w	r3, r3, #1
 8004636:	3130      	adds	r1, #48	; 0x30
 8004638:	4282      	cmp	r2, r0
 800463a:	bf08      	it	eq
 800463c:	f043 0301 	orreq.w	r3, r3, #1
 8004640:	3030      	adds	r0, #48	; 0x30
 8004642:	428a      	cmp	r2, r1
 8004644:	bf08      	it	eq
 8004646:	f043 0301 	orreq.w	r3, r3, #1
 800464a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800464e:	4282      	cmp	r2, r0
 8004650:	bf08      	it	eq
 8004652:	f043 0301 	orreq.w	r3, r3, #1
 8004656:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800465a:	428a      	cmp	r2, r1
 800465c:	bf08      	it	eq
 800465e:	f043 0301 	orreq.w	r3, r3, #1
 8004662:	3130      	adds	r1, #48	; 0x30
 8004664:	4282      	cmp	r2, r0
 8004666:	bf08      	it	eq
 8004668:	f043 0301 	orreq.w	r3, r3, #1
 800466c:	3030      	adds	r0, #48	; 0x30
 800466e:	428a      	cmp	r2, r1
 8004670:	bf08      	it	eq
 8004672:	f043 0301 	orreq.w	r3, r3, #1
 8004676:	3130      	adds	r1, #48	; 0x30
 8004678:	4282      	cmp	r2, r0
 800467a:	bf08      	it	eq
 800467c:	f043 0301 	orreq.w	r3, r3, #1
 8004680:	3030      	adds	r0, #48	; 0x30
 8004682:	428a      	cmp	r2, r1
 8004684:	bf08      	it	eq
 8004686:	f043 0301 	orreq.w	r3, r3, #1
 800468a:	3130      	adds	r1, #48	; 0x30
 800468c:	4282      	cmp	r2, r0
 800468e:	bf08      	it	eq
 8004690:	f043 0301 	orreq.w	r3, r3, #1
 8004694:	428a      	cmp	r2, r1
 8004696:	bf08      	it	eq
 8004698:	f043 0301 	orreq.w	r3, r3, #1
 800469c:	b91b      	cbnz	r3, 80046a6 <HAL_DMA_Start_IT+0xee>
 800469e:	4b77      	ldr	r3, [pc, #476]	; (800487c <HAL_DMA_Start_IT+0x2c4>)
 80046a0:	429a      	cmp	r2, r3
 80046a2:	f040 810a 	bne.w	80048ba <HAL_DMA_Start_IT+0x302>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80046a6:	6813      	ldr	r3, [r2, #0]
 80046a8:	f023 031e 	bic.w	r3, r3, #30
 80046ac:	f043 0316 	orr.w	r3, r3, #22
 80046b0:	6013      	str	r3, [r2, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80046b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046b4:	b123      	cbz	r3, 80046c0 <HAL_DMA_Start_IT+0x108>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80046b6:	6822      	ldr	r2, [r4, #0]
 80046b8:	6813      	ldr	r3, [r2, #0]
 80046ba:	f043 0308 	orr.w	r3, r3, #8
 80046be:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046c0:	6822      	ldr	r2, [r4, #0]
 80046c2:	4b6b      	ldr	r3, [pc, #428]	; (8004870 <HAL_DMA_Start_IT+0x2b8>)
 80046c4:	486b      	ldr	r0, [pc, #428]	; (8004874 <HAL_DMA_Start_IT+0x2bc>)
 80046c6:	496c      	ldr	r1, [pc, #432]	; (8004878 <HAL_DMA_Start_IT+0x2c0>)
 80046c8:	4282      	cmp	r2, r0
 80046ca:	bf18      	it	ne
 80046cc:	429a      	cmpne	r2, r3
 80046ce:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80046d2:	bf0c      	ite	eq
 80046d4:	2301      	moveq	r3, #1
 80046d6:	2300      	movne	r3, #0
 80046d8:	428a      	cmp	r2, r1
 80046da:	bf08      	it	eq
 80046dc:	f043 0301 	orreq.w	r3, r3, #1
 80046e0:	3130      	adds	r1, #48	; 0x30
 80046e2:	4282      	cmp	r2, r0
 80046e4:	bf08      	it	eq
 80046e6:	f043 0301 	orreq.w	r3, r3, #1
 80046ea:	3030      	adds	r0, #48	; 0x30
 80046ec:	428a      	cmp	r2, r1
 80046ee:	bf08      	it	eq
 80046f0:	f043 0301 	orreq.w	r3, r3, #1
 80046f4:	3130      	adds	r1, #48	; 0x30
 80046f6:	4282      	cmp	r2, r0
 80046f8:	bf08      	it	eq
 80046fa:	f043 0301 	orreq.w	r3, r3, #1
 80046fe:	3030      	adds	r0, #48	; 0x30
 8004700:	428a      	cmp	r2, r1
 8004702:	bf08      	it	eq
 8004704:	f043 0301 	orreq.w	r3, r3, #1
 8004708:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800470c:	4282      	cmp	r2, r0
 800470e:	bf08      	it	eq
 8004710:	f043 0301 	orreq.w	r3, r3, #1
 8004714:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004718:	428a      	cmp	r2, r1
 800471a:	bf08      	it	eq
 800471c:	f043 0301 	orreq.w	r3, r3, #1
 8004720:	3130      	adds	r1, #48	; 0x30
 8004722:	4282      	cmp	r2, r0
 8004724:	bf08      	it	eq
 8004726:	f043 0301 	orreq.w	r3, r3, #1
 800472a:	3030      	adds	r0, #48	; 0x30
 800472c:	428a      	cmp	r2, r1
 800472e:	bf08      	it	eq
 8004730:	f043 0301 	orreq.w	r3, r3, #1
 8004734:	3130      	adds	r1, #48	; 0x30
 8004736:	4282      	cmp	r2, r0
 8004738:	bf08      	it	eq
 800473a:	f043 0301 	orreq.w	r3, r3, #1
 800473e:	3030      	adds	r0, #48	; 0x30
 8004740:	428a      	cmp	r2, r1
 8004742:	bf08      	it	eq
 8004744:	f043 0301 	orreq.w	r3, r3, #1
 8004748:	3130      	adds	r1, #48	; 0x30
 800474a:	4282      	cmp	r2, r0
 800474c:	bf08      	it	eq
 800474e:	f043 0301 	orreq.w	r3, r3, #1
 8004752:	3030      	adds	r0, #48	; 0x30
 8004754:	428a      	cmp	r2, r1
 8004756:	bf08      	it	eq
 8004758:	f043 0301 	orreq.w	r3, r3, #1
 800475c:	4948      	ldr	r1, [pc, #288]	; (8004880 <HAL_DMA_Start_IT+0x2c8>)
 800475e:	4282      	cmp	r2, r0
 8004760:	bf08      	it	eq
 8004762:	f043 0301 	orreq.w	r3, r3, #1
 8004766:	4847      	ldr	r0, [pc, #284]	; (8004884 <HAL_DMA_Start_IT+0x2cc>)
 8004768:	428a      	cmp	r2, r1
 800476a:	bf08      	it	eq
 800476c:	f043 0301 	orreq.w	r3, r3, #1
 8004770:	3128      	adds	r1, #40	; 0x28
 8004772:	4282      	cmp	r2, r0
 8004774:	bf08      	it	eq
 8004776:	f043 0301 	orreq.w	r3, r3, #1
 800477a:	3028      	adds	r0, #40	; 0x28
 800477c:	428a      	cmp	r2, r1
 800477e:	bf08      	it	eq
 8004780:	f043 0301 	orreq.w	r3, r3, #1
 8004784:	3128      	adds	r1, #40	; 0x28
 8004786:	4282      	cmp	r2, r0
 8004788:	bf08      	it	eq
 800478a:	f043 0301 	orreq.w	r3, r3, #1
 800478e:	3028      	adds	r0, #40	; 0x28
 8004790:	428a      	cmp	r2, r1
 8004792:	bf08      	it	eq
 8004794:	f043 0301 	orreq.w	r3, r3, #1
 8004798:	3128      	adds	r1, #40	; 0x28
 800479a:	4282      	cmp	r2, r0
 800479c:	bf08      	it	eq
 800479e:	f043 0301 	orreq.w	r3, r3, #1
 80047a2:	428a      	cmp	r2, r1
 80047a4:	bf08      	it	eq
 80047a6:	f043 0301 	orreq.w	r3, r3, #1
 80047aa:	b913      	cbnz	r3, 80047b2 <HAL_DMA_Start_IT+0x1fa>
 80047ac:	4b36      	ldr	r3, [pc, #216]	; (8004888 <HAL_DMA_Start_IT+0x2d0>)
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d10e      	bne.n	80047d0 <HAL_DMA_Start_IT+0x218>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	03d2      	lsls	r2, r2, #15
 80047b8:	d503      	bpl.n	80047c2 <HAL_DMA_Start_IT+0x20a>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c0:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80047c2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80047c4:	b11b      	cbz	r3, 80047ce <HAL_DMA_Start_IT+0x216>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	6822      	ldr	r2, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80047d0:	4b27      	ldr	r3, [pc, #156]	; (8004870 <HAL_DMA_Start_IT+0x2b8>)
 80047d2:	4828      	ldr	r0, [pc, #160]	; (8004874 <HAL_DMA_Start_IT+0x2bc>)
 80047d4:	4928      	ldr	r1, [pc, #160]	; (8004878 <HAL_DMA_Start_IT+0x2c0>)
 80047d6:	4282      	cmp	r2, r0
 80047d8:	bf18      	it	ne
 80047da:	429a      	cmpne	r2, r3
 80047dc:	4c2b      	ldr	r4, [pc, #172]	; (800488c <HAL_DMA_Start_IT+0x2d4>)
 80047de:	f100 0060 	add.w	r0, r0, #96	; 0x60
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	428a      	cmp	r2, r1
 80047ea:	bf08      	it	eq
 80047ec:	f043 0301 	orreq.w	r3, r3, #1
 80047f0:	3130      	adds	r1, #48	; 0x30
 80047f2:	42a2      	cmp	r2, r4
 80047f4:	bf08      	it	eq
 80047f6:	f043 0301 	orreq.w	r3, r3, #1
 80047fa:	3460      	adds	r4, #96	; 0x60
 80047fc:	428a      	cmp	r2, r1
 80047fe:	bf08      	it	eq
 8004800:	f043 0301 	orreq.w	r3, r3, #1
 8004804:	3130      	adds	r1, #48	; 0x30
 8004806:	4282      	cmp	r2, r0
 8004808:	bf08      	it	eq
 800480a:	f043 0301 	orreq.w	r3, r3, #1
 800480e:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8004812:	428a      	cmp	r2, r1
 8004814:	bf08      	it	eq
 8004816:	f043 0301 	orreq.w	r3, r3, #1
 800481a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800481e:	42a2      	cmp	r2, r4
 8004820:	bf08      	it	eq
 8004822:	f043 0301 	orreq.w	r3, r3, #1
 8004826:	f504 7468 	add.w	r4, r4, #928	; 0x3a0
 800482a:	428a      	cmp	r2, r1
 800482c:	bf08      	it	eq
 800482e:	f043 0301 	orreq.w	r3, r3, #1
 8004832:	3130      	adds	r1, #48	; 0x30
 8004834:	4282      	cmp	r2, r0
 8004836:	bf08      	it	eq
 8004838:	f043 0301 	orreq.w	r3, r3, #1
 800483c:	3060      	adds	r0, #96	; 0x60
 800483e:	428a      	cmp	r2, r1
 8004840:	bf08      	it	eq
 8004842:	f043 0301 	orreq.w	r3, r3, #1
 8004846:	3130      	adds	r1, #48	; 0x30
 8004848:	42a2      	cmp	r2, r4
 800484a:	bf08      	it	eq
 800484c:	f043 0301 	orreq.w	r3, r3, #1
 8004850:	428a      	cmp	r2, r1
 8004852:	bf08      	it	eq
 8004854:	f043 0301 	orreq.w	r3, r3, #1
 8004858:	3130      	adds	r1, #48	; 0x30
 800485a:	4282      	cmp	r2, r0
 800485c:	bf08      	it	eq
 800485e:	f043 0301 	orreq.w	r3, r3, #1
 8004862:	428a      	cmp	r2, r1
 8004864:	bf08      	it	eq
 8004866:	f043 0301 	orreq.w	r3, r3, #1
 800486a:	b9bb      	cbnz	r3, 800489c <HAL_DMA_Start_IT+0x2e4>
 800486c:	e010      	b.n	8004890 <HAL_DMA_Start_IT+0x2d8>
 800486e:	bf00      	nop
 8004870:	40020010 	.word	0x40020010
 8004874:	40020028 	.word	0x40020028
 8004878:	40020040 	.word	0x40020040
 800487c:	400204b8 	.word	0x400204b8
 8004880:	58025408 	.word	0x58025408
 8004884:	5802541c 	.word	0x5802541c
 8004888:	58025494 	.word	0x58025494
 800488c:	40020058 	.word	0x40020058
 8004890:	3030      	adds	r0, #48	; 0x30
 8004892:	1a10      	subs	r0, r2, r0
 8004894:	fab0 f080 	clz	r0, r0
 8004898:	0940      	lsrs	r0, r0, #5
 800489a:	b148      	cbz	r0, 80048b0 <HAL_DMA_Start_IT+0x2f8>
 800489c:	6813      	ldr	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800489e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80048a0:	f043 0301 	orr.w	r3, r3, #1
 80048a4:	6013      	str	r3, [r2, #0]
}
 80048a6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80048a8:	2001      	movs	r0, #1
}
 80048aa:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80048ac:	2002      	movs	r0, #2
}
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_ENABLE(hdma);
 80048b0:	6813      	ldr	r3, [r2, #0]
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	6013      	str	r3, [r2, #0]
}
 80048b8:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	f023 030e 	bic.w	r3, r3, #14
 80048c0:	f043 030a 	orr.w	r3, r3, #10
 80048c4:	6013      	str	r3, [r2, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80048c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f43f aef9 	beq.w	80046c0 <HAL_DMA_Start_IT+0x108>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80048ce:	6822      	ldr	r2, [r4, #0]
 80048d0:	6813      	ldr	r3, [r2, #0]
 80048d2:	f043 0304 	orr.w	r3, r3, #4
 80048d6:	6013      	str	r3, [r2, #0]
 80048d8:	e6f2      	b.n	80046c0 <HAL_DMA_Start_IT+0x108>
 80048da:	bf00      	nop

080048dc <HAL_DMA_Abort>:
{
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 80048e0:	f7ff f908 	bl	8003af4 <HAL_GetTick>
  if(hdma == NULL)
 80048e4:	2e00      	cmp	r6, #0
 80048e6:	f000 81ef 	beq.w	8004cc8 <HAL_DMA_Abort+0x3ec>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048ea:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	f040 81d9 	bne.w	8004ca6 <HAL_DMA_Abort+0x3ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048f4:	6832      	ldr	r2, [r6, #0]
 80048f6:	4604      	mov	r4, r0
 80048f8:	4b6e      	ldr	r3, [pc, #440]	; (8004ab4 <HAL_DMA_Abort+0x1d8>)
 80048fa:	496f      	ldr	r1, [pc, #444]	; (8004ab8 <HAL_DMA_Abort+0x1dc>)
 80048fc:	428a      	cmp	r2, r1
 80048fe:	bf18      	it	ne
 8004900:	429a      	cmpne	r2, r3
 8004902:	f101 0118 	add.w	r1, r1, #24
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	428a      	cmp	r2, r1
 800490e:	bf08      	it	eq
 8004910:	f043 0301 	orreq.w	r3, r3, #1
 8004914:	3118      	adds	r1, #24
 8004916:	428a      	cmp	r2, r1
 8004918:	bf08      	it	eq
 800491a:	f043 0301 	orreq.w	r3, r3, #1
 800491e:	3118      	adds	r1, #24
 8004920:	428a      	cmp	r2, r1
 8004922:	bf08      	it	eq
 8004924:	f043 0301 	orreq.w	r3, r3, #1
 8004928:	3118      	adds	r1, #24
 800492a:	428a      	cmp	r2, r1
 800492c:	bf08      	it	eq
 800492e:	f043 0301 	orreq.w	r3, r3, #1
 8004932:	3118      	adds	r1, #24
 8004934:	428a      	cmp	r2, r1
 8004936:	bf08      	it	eq
 8004938:	f043 0301 	orreq.w	r3, r3, #1
 800493c:	3118      	adds	r1, #24
 800493e:	428a      	cmp	r2, r1
 8004940:	bf08      	it	eq
 8004942:	f043 0301 	orreq.w	r3, r3, #1
 8004946:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800494a:	428a      	cmp	r2, r1
 800494c:	bf08      	it	eq
 800494e:	f043 0301 	orreq.w	r3, r3, #1
 8004952:	3118      	adds	r1, #24
 8004954:	428a      	cmp	r2, r1
 8004956:	bf08      	it	eq
 8004958:	f043 0301 	orreq.w	r3, r3, #1
 800495c:	3118      	adds	r1, #24
 800495e:	428a      	cmp	r2, r1
 8004960:	bf08      	it	eq
 8004962:	f043 0301 	orreq.w	r3, r3, #1
 8004966:	3118      	adds	r1, #24
 8004968:	428a      	cmp	r2, r1
 800496a:	bf08      	it	eq
 800496c:	f043 0301 	orreq.w	r3, r3, #1
 8004970:	3118      	adds	r1, #24
 8004972:	428a      	cmp	r2, r1
 8004974:	bf08      	it	eq
 8004976:	f043 0301 	orreq.w	r3, r3, #1
 800497a:	3118      	adds	r1, #24
 800497c:	428a      	cmp	r2, r1
 800497e:	bf08      	it	eq
 8004980:	f043 0301 	orreq.w	r3, r3, #1
 8004984:	3118      	adds	r1, #24
 8004986:	428a      	cmp	r2, r1
 8004988:	bf08      	it	eq
 800498a:	f043 0301 	orreq.w	r3, r3, #1
 800498e:	b91b      	cbnz	r3, 8004998 <HAL_DMA_Abort+0xbc>
 8004990:	4b4a      	ldr	r3, [pc, #296]	; (8004abc <HAL_DMA_Abort+0x1e0>)
 8004992:	429a      	cmp	r2, r3
 8004994:	f040 81a2 	bne.w	8004cdc <HAL_DMA_Abort+0x400>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004998:	6813      	ldr	r3, [r2, #0]
 800499a:	f023 031e 	bic.w	r3, r3, #30
 800499e:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80049a0:	6832      	ldr	r2, [r6, #0]
 80049a2:	6953      	ldr	r3, [r2, #20]
 80049a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049a8:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80049aa:	6832      	ldr	r2, [r6, #0]
 80049ac:	4615      	mov	r5, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049ae:	4b41      	ldr	r3, [pc, #260]	; (8004ab4 <HAL_DMA_Abort+0x1d8>)
 80049b0:	4941      	ldr	r1, [pc, #260]	; (8004ab8 <HAL_DMA_Abort+0x1dc>)
 80049b2:	428a      	cmp	r2, r1
 80049b4:	bf18      	it	ne
 80049b6:	429a      	cmpne	r2, r3
 80049b8:	f101 0118 	add.w	r1, r1, #24
 80049bc:	bf0c      	ite	eq
 80049be:	2301      	moveq	r3, #1
 80049c0:	2300      	movne	r3, #0
 80049c2:	428a      	cmp	r2, r1
 80049c4:	bf08      	it	eq
 80049c6:	f043 0301 	orreq.w	r3, r3, #1
 80049ca:	3118      	adds	r1, #24
 80049cc:	428a      	cmp	r2, r1
 80049ce:	bf08      	it	eq
 80049d0:	f043 0301 	orreq.w	r3, r3, #1
 80049d4:	3118      	adds	r1, #24
 80049d6:	428a      	cmp	r2, r1
 80049d8:	bf08      	it	eq
 80049da:	f043 0301 	orreq.w	r3, r3, #1
 80049de:	3118      	adds	r1, #24
 80049e0:	428a      	cmp	r2, r1
 80049e2:	bf08      	it	eq
 80049e4:	f043 0301 	orreq.w	r3, r3, #1
 80049e8:	3118      	adds	r1, #24
 80049ea:	428a      	cmp	r2, r1
 80049ec:	bf08      	it	eq
 80049ee:	f043 0301 	orreq.w	r3, r3, #1
 80049f2:	3118      	adds	r1, #24
 80049f4:	428a      	cmp	r2, r1
 80049f6:	bf08      	it	eq
 80049f8:	f043 0301 	orreq.w	r3, r3, #1
 80049fc:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004a00:	428a      	cmp	r2, r1
 8004a02:	bf08      	it	eq
 8004a04:	f043 0301 	orreq.w	r3, r3, #1
 8004a08:	3118      	adds	r1, #24
 8004a0a:	428a      	cmp	r2, r1
 8004a0c:	bf08      	it	eq
 8004a0e:	f043 0301 	orreq.w	r3, r3, #1
 8004a12:	3118      	adds	r1, #24
 8004a14:	428a      	cmp	r2, r1
 8004a16:	bf08      	it	eq
 8004a18:	f043 0301 	orreq.w	r3, r3, #1
 8004a1c:	3118      	adds	r1, #24
 8004a1e:	428a      	cmp	r2, r1
 8004a20:	bf08      	it	eq
 8004a22:	f043 0301 	orreq.w	r3, r3, #1
 8004a26:	3118      	adds	r1, #24
 8004a28:	428a      	cmp	r2, r1
 8004a2a:	bf08      	it	eq
 8004a2c:	f043 0301 	orreq.w	r3, r3, #1
 8004a30:	3118      	adds	r1, #24
 8004a32:	428a      	cmp	r2, r1
 8004a34:	bf08      	it	eq
 8004a36:	f043 0301 	orreq.w	r3, r3, #1
 8004a3a:	3118      	adds	r1, #24
 8004a3c:	428a      	cmp	r2, r1
 8004a3e:	bf08      	it	eq
 8004a40:	f043 0301 	orreq.w	r3, r3, #1
 8004a44:	3118      	adds	r1, #24
 8004a46:	428a      	cmp	r2, r1
 8004a48:	bf08      	it	eq
 8004a4a:	f043 0301 	orreq.w	r3, r3, #1
 8004a4e:	491c      	ldr	r1, [pc, #112]	; (8004ac0 <HAL_DMA_Abort+0x1e4>)
 8004a50:	428a      	cmp	r2, r1
 8004a52:	bf08      	it	eq
 8004a54:	f043 0301 	orreq.w	r3, r3, #1
 8004a58:	3114      	adds	r1, #20
 8004a5a:	428a      	cmp	r2, r1
 8004a5c:	bf08      	it	eq
 8004a5e:	f043 0301 	orreq.w	r3, r3, #1
 8004a62:	3114      	adds	r1, #20
 8004a64:	428a      	cmp	r2, r1
 8004a66:	bf08      	it	eq
 8004a68:	f043 0301 	orreq.w	r3, r3, #1
 8004a6c:	3114      	adds	r1, #20
 8004a6e:	428a      	cmp	r2, r1
 8004a70:	bf08      	it	eq
 8004a72:	f043 0301 	orreq.w	r3, r3, #1
 8004a76:	3114      	adds	r1, #20
 8004a78:	428a      	cmp	r2, r1
 8004a7a:	bf08      	it	eq
 8004a7c:	f043 0301 	orreq.w	r3, r3, #1
 8004a80:	3114      	adds	r1, #20
 8004a82:	428a      	cmp	r2, r1
 8004a84:	bf08      	it	eq
 8004a86:	f043 0301 	orreq.w	r3, r3, #1
 8004a8a:	3114      	adds	r1, #20
 8004a8c:	428a      	cmp	r2, r1
 8004a8e:	bf08      	it	eq
 8004a90:	f043 0301 	orreq.w	r3, r3, #1
 8004a94:	b913      	cbnz	r3, 8004a9c <HAL_DMA_Abort+0x1c0>
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <HAL_DMA_Abort+0x1e8>)
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d105      	bne.n	8004aa8 <HAL_DMA_Abort+0x1cc>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a9c:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8004a9e:	6813      	ldr	r3, [r2, #0]
 8004aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	6832      	ldr	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8004aa8:	6813      	ldr	r3, [r2, #0]
 8004aaa:	f023 0301 	bic.w	r3, r3, #1
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	e010      	b.n	8004ad4 <HAL_DMA_Abort+0x1f8>
 8004ab2:	bf00      	nop
 8004ab4:	40020010 	.word	0x40020010
 8004ab8:	40020028 	.word	0x40020028
 8004abc:	400204b8 	.word	0x400204b8
 8004ac0:	58025408 	.word	0x58025408
 8004ac4:	58025494 	.word	0x58025494
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004ac8:	f7ff f814 	bl	8003af4 <HAL_GetTick>
 8004acc:	1b00      	subs	r0, r0, r4
 8004ace:	2805      	cmp	r0, #5
 8004ad0:	f200 80f0 	bhi.w	8004cb4 <HAL_DMA_Abort+0x3d8>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	07db      	lsls	r3, r3, #31
 8004ad8:	d4f6      	bmi.n	8004ac8 <HAL_DMA_Abort+0x1ec>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ada:	6832      	ldr	r2, [r6, #0]
 8004adc:	4b83      	ldr	r3, [pc, #524]	; (8004cec <HAL_DMA_Abort+0x410>)
 8004ade:	4884      	ldr	r0, [pc, #528]	; (8004cf0 <HAL_DMA_Abort+0x414>)
 8004ae0:	4984      	ldr	r1, [pc, #528]	; (8004cf4 <HAL_DMA_Abort+0x418>)
 8004ae2:	4282      	cmp	r2, r0
 8004ae4:	bf18      	it	ne
 8004ae6:	429a      	cmpne	r2, r3
 8004ae8:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8004aec:	bf0c      	ite	eq
 8004aee:	2301      	moveq	r3, #1
 8004af0:	2300      	movne	r3, #0
 8004af2:	428a      	cmp	r2, r1
 8004af4:	bf08      	it	eq
 8004af6:	f043 0301 	orreq.w	r3, r3, #1
 8004afa:	3130      	adds	r1, #48	; 0x30
 8004afc:	4282      	cmp	r2, r0
 8004afe:	bf08      	it	eq
 8004b00:	f043 0301 	orreq.w	r3, r3, #1
 8004b04:	3030      	adds	r0, #48	; 0x30
 8004b06:	428a      	cmp	r2, r1
 8004b08:	bf08      	it	eq
 8004b0a:	f043 0301 	orreq.w	r3, r3, #1
 8004b0e:	3130      	adds	r1, #48	; 0x30
 8004b10:	4282      	cmp	r2, r0
 8004b12:	bf08      	it	eq
 8004b14:	f043 0301 	orreq.w	r3, r3, #1
 8004b18:	3030      	adds	r0, #48	; 0x30
 8004b1a:	428a      	cmp	r2, r1
 8004b1c:	bf08      	it	eq
 8004b1e:	f043 0301 	orreq.w	r3, r3, #1
 8004b22:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004b26:	4282      	cmp	r2, r0
 8004b28:	bf08      	it	eq
 8004b2a:	f043 0301 	orreq.w	r3, r3, #1
 8004b2e:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004b32:	428a      	cmp	r2, r1
 8004b34:	bf08      	it	eq
 8004b36:	f043 0301 	orreq.w	r3, r3, #1
 8004b3a:	3130      	adds	r1, #48	; 0x30
 8004b3c:	4282      	cmp	r2, r0
 8004b3e:	bf08      	it	eq
 8004b40:	f043 0301 	orreq.w	r3, r3, #1
 8004b44:	3030      	adds	r0, #48	; 0x30
 8004b46:	428a      	cmp	r2, r1
 8004b48:	bf08      	it	eq
 8004b4a:	f043 0301 	orreq.w	r3, r3, #1
 8004b4e:	3130      	adds	r1, #48	; 0x30
 8004b50:	4282      	cmp	r2, r0
 8004b52:	bf08      	it	eq
 8004b54:	f043 0301 	orreq.w	r3, r3, #1
 8004b58:	3030      	adds	r0, #48	; 0x30
 8004b5a:	428a      	cmp	r2, r1
 8004b5c:	bf08      	it	eq
 8004b5e:	f043 0301 	orreq.w	r3, r3, #1
 8004b62:	3130      	adds	r1, #48	; 0x30
 8004b64:	4282      	cmp	r2, r0
 8004b66:	bf08      	it	eq
 8004b68:	f043 0301 	orreq.w	r3, r3, #1
 8004b6c:	428a      	cmp	r2, r1
 8004b6e:	bf08      	it	eq
 8004b70:	f043 0301 	orreq.w	r3, r3, #1
 8004b74:	b91b      	cbnz	r3, 8004b7e <HAL_DMA_Abort+0x2a2>
 8004b76:	4b60      	ldr	r3, [pc, #384]	; (8004cf8 <HAL_DMA_Abort+0x41c>)
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	f040 80a7 	bne.w	8004ccc <HAL_DMA_Abort+0x3f0>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b7e:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8004b80:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b82:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b84:	f002 021f 	and.w	r2, r2, #31
 8004b88:	4093      	lsls	r3, r2
 8004b8a:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b8c:	6832      	ldr	r2, [r6, #0]
 8004b8e:	4b57      	ldr	r3, [pc, #348]	; (8004cec <HAL_DMA_Abort+0x410>)
 8004b90:	4857      	ldr	r0, [pc, #348]	; (8004cf0 <HAL_DMA_Abort+0x414>)
 8004b92:	4958      	ldr	r1, [pc, #352]	; (8004cf4 <HAL_DMA_Abort+0x418>)
 8004b94:	4282      	cmp	r2, r0
 8004b96:	bf18      	it	ne
 8004b98:	429a      	cmpne	r2, r3
 8004b9a:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8004b9e:	bf0c      	ite	eq
 8004ba0:	2301      	moveq	r3, #1
 8004ba2:	2300      	movne	r3, #0
 8004ba4:	428a      	cmp	r2, r1
 8004ba6:	bf08      	it	eq
 8004ba8:	f043 0301 	orreq.w	r3, r3, #1
 8004bac:	3130      	adds	r1, #48	; 0x30
 8004bae:	4282      	cmp	r2, r0
 8004bb0:	bf08      	it	eq
 8004bb2:	f043 0301 	orreq.w	r3, r3, #1
 8004bb6:	3030      	adds	r0, #48	; 0x30
 8004bb8:	428a      	cmp	r2, r1
 8004bba:	bf08      	it	eq
 8004bbc:	f043 0301 	orreq.w	r3, r3, #1
 8004bc0:	3130      	adds	r1, #48	; 0x30
 8004bc2:	4282      	cmp	r2, r0
 8004bc4:	bf08      	it	eq
 8004bc6:	f043 0301 	orreq.w	r3, r3, #1
 8004bca:	3030      	adds	r0, #48	; 0x30
 8004bcc:	428a      	cmp	r2, r1
 8004bce:	bf08      	it	eq
 8004bd0:	f043 0301 	orreq.w	r3, r3, #1
 8004bd4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004bd8:	4282      	cmp	r2, r0
 8004bda:	bf08      	it	eq
 8004bdc:	f043 0301 	orreq.w	r3, r3, #1
 8004be0:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004be4:	428a      	cmp	r2, r1
 8004be6:	bf08      	it	eq
 8004be8:	f043 0301 	orreq.w	r3, r3, #1
 8004bec:	3130      	adds	r1, #48	; 0x30
 8004bee:	4282      	cmp	r2, r0
 8004bf0:	bf08      	it	eq
 8004bf2:	f043 0301 	orreq.w	r3, r3, #1
 8004bf6:	3030      	adds	r0, #48	; 0x30
 8004bf8:	428a      	cmp	r2, r1
 8004bfa:	bf08      	it	eq
 8004bfc:	f043 0301 	orreq.w	r3, r3, #1
 8004c00:	3130      	adds	r1, #48	; 0x30
 8004c02:	4282      	cmp	r2, r0
 8004c04:	bf08      	it	eq
 8004c06:	f043 0301 	orreq.w	r3, r3, #1
 8004c0a:	3030      	adds	r0, #48	; 0x30
 8004c0c:	428a      	cmp	r2, r1
 8004c0e:	bf08      	it	eq
 8004c10:	f043 0301 	orreq.w	r3, r3, #1
 8004c14:	3130      	adds	r1, #48	; 0x30
 8004c16:	4282      	cmp	r2, r0
 8004c18:	bf08      	it	eq
 8004c1a:	f043 0301 	orreq.w	r3, r3, #1
 8004c1e:	3030      	adds	r0, #48	; 0x30
 8004c20:	428a      	cmp	r2, r1
 8004c22:	bf08      	it	eq
 8004c24:	f043 0301 	orreq.w	r3, r3, #1
 8004c28:	4934      	ldr	r1, [pc, #208]	; (8004cfc <HAL_DMA_Abort+0x420>)
 8004c2a:	4282      	cmp	r2, r0
 8004c2c:	bf08      	it	eq
 8004c2e:	f043 0301 	orreq.w	r3, r3, #1
 8004c32:	4833      	ldr	r0, [pc, #204]	; (8004d00 <HAL_DMA_Abort+0x424>)
 8004c34:	428a      	cmp	r2, r1
 8004c36:	bf08      	it	eq
 8004c38:	f043 0301 	orreq.w	r3, r3, #1
 8004c3c:	3128      	adds	r1, #40	; 0x28
 8004c3e:	4282      	cmp	r2, r0
 8004c40:	bf08      	it	eq
 8004c42:	f043 0301 	orreq.w	r3, r3, #1
 8004c46:	3028      	adds	r0, #40	; 0x28
 8004c48:	428a      	cmp	r2, r1
 8004c4a:	bf08      	it	eq
 8004c4c:	f043 0301 	orreq.w	r3, r3, #1
 8004c50:	3128      	adds	r1, #40	; 0x28
 8004c52:	4282      	cmp	r2, r0
 8004c54:	bf08      	it	eq
 8004c56:	f043 0301 	orreq.w	r3, r3, #1
 8004c5a:	3028      	adds	r0, #40	; 0x28
 8004c5c:	428a      	cmp	r2, r1
 8004c5e:	bf08      	it	eq
 8004c60:	f043 0301 	orreq.w	r3, r3, #1
 8004c64:	3128      	adds	r1, #40	; 0x28
 8004c66:	4282      	cmp	r2, r0
 8004c68:	bf08      	it	eq
 8004c6a:	f043 0301 	orreq.w	r3, r3, #1
 8004c6e:	428a      	cmp	r2, r1
 8004c70:	bf08      	it	eq
 8004c72:	f043 0301 	orreq.w	r3, r3, #1
 8004c76:	b913      	cbnz	r3, 8004c7e <HAL_DMA_Abort+0x3a2>
 8004c78:	4b22      	ldr	r3, [pc, #136]	; (8004d04 <HAL_DMA_Abort+0x428>)
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d10b      	bne.n	8004c96 <HAL_DMA_Abort+0x3ba>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c7e:	e9d6 3219 	ldrd	r3, r2, [r6, #100]	; 0x64
 8004c82:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8004c84:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8004c86:	b133      	cbz	r3, 8004c96 <HAL_DMA_Abort+0x3ba>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c8e:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c90:	e9d6 321c 	ldrd	r3, r2, [r6, #112]	; 0x70
 8004c94:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 8004c96:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004c98:	2201      	movs	r2, #1
  return HAL_OK;
 8004c9a:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8004c9c:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004ca0:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 8004ca4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ca6:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8004ca8:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004caa:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cac:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004cae:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cb4:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8004cb6:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 8004cb8:	2300      	movs	r3, #0
        return HAL_ERROR;
 8004cba:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cbc:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8004cbe:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8004cc2:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
}
 8004cc6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004cc8:	2001      	movs	r0, #1
}
 8004cca:	bd70      	pop	{r4, r5, r6, pc}
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ccc:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8004cce:	2301      	movs	r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cd0:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004cd2:	f002 021f 	and.w	r2, r2, #31
 8004cd6:	4093      	lsls	r3, r2
 8004cd8:	604b      	str	r3, [r1, #4]
 8004cda:	e757      	b.n	8004b8c <HAL_DMA_Abort+0x2b0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004cdc:	6813      	ldr	r3, [r2, #0]
 8004cde:	f023 030e 	bic.w	r3, r3, #14
 8004ce2:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004ce4:	6832      	ldr	r2, [r6, #0]
 8004ce6:	4615      	mov	r5, r2
 8004ce8:	e661      	b.n	80049ae <HAL_DMA_Abort+0xd2>
 8004cea:	bf00      	nop
 8004cec:	40020010 	.word	0x40020010
 8004cf0:	40020028 	.word	0x40020028
 8004cf4:	40020040 	.word	0x40020040
 8004cf8:	400204b8 	.word	0x400204b8
 8004cfc:	58025408 	.word	0x58025408
 8004d00:	5802541c 	.word	0x5802541c
 8004d04:	58025494 	.word	0x58025494

08004d08 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004d08:	2800      	cmp	r0, #0
 8004d0a:	d065      	beq.n	8004dd8 <HAL_DMA_Abort_IT+0xd0>
{
 8004d0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d10:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8004d14:	4603      	mov	r3, r0
 8004d16:	2a02      	cmp	r2, #2
 8004d18:	d159      	bne.n	8004dce <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d1a:	6801      	ldr	r1, [r0, #0]
 8004d1c:	4883      	ldr	r0, [pc, #524]	; (8004f2c <HAL_DMA_Abort_IT+0x224>)
 8004d1e:	4281      	cmp	r1, r0
 8004d20:	d04b      	beq.n	8004dba <HAL_DMA_Abort_IT+0xb2>
 8004d22:	4c83      	ldr	r4, [pc, #524]	; (8004f30 <HAL_DMA_Abort_IT+0x228>)
 8004d24:	42a1      	cmp	r1, r4
 8004d26:	d048      	beq.n	8004dba <HAL_DMA_Abort_IT+0xb2>
 8004d28:	f8df a228 	ldr.w	sl, [pc, #552]	; 8004f54 <HAL_DMA_Abort_IT+0x24c>
 8004d2c:	f8df b214 	ldr.w	fp, [pc, #532]	; 8004f44 <HAL_DMA_Abort_IT+0x23c>
 8004d30:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8004f58 <HAL_DMA_Abort_IT+0x250>
 8004d34:	4559      	cmp	r1, fp
 8004d36:	bf18      	it	ne
 8004d38:	4551      	cmpne	r1, sl
 8004d3a:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8004f5c <HAL_DMA_Abort_IT+0x254>
 8004d3e:	f8df e220 	ldr.w	lr, [pc, #544]	; 8004f60 <HAL_DMA_Abort_IT+0x258>
 8004d42:	bf0c      	ite	eq
 8004d44:	2201      	moveq	r2, #1
 8004d46:	2200      	movne	r2, #0
 8004d48:	f8df c218 	ldr.w	ip, [pc, #536]	; 8004f64 <HAL_DMA_Abort_IT+0x25c>
 8004d4c:	4549      	cmp	r1, r9
 8004d4e:	bf08      	it	eq
 8004d50:	f042 0201 	orreq.w	r2, r2, #1
 8004d54:	4d77      	ldr	r5, [pc, #476]	; (8004f34 <HAL_DMA_Abort_IT+0x22c>)
 8004d56:	4f78      	ldr	r7, [pc, #480]	; (8004f38 <HAL_DMA_Abort_IT+0x230>)
 8004d58:	4541      	cmp	r1, r8
 8004d5a:	bf08      	it	eq
 8004d5c:	f042 0201 	orreq.w	r2, r2, #1
 8004d60:	4e76      	ldr	r6, [pc, #472]	; (8004f3c <HAL_DMA_Abort_IT+0x234>)
 8004d62:	4571      	cmp	r1, lr
 8004d64:	bf08      	it	eq
 8004d66:	f042 0201 	orreq.w	r2, r2, #1
 8004d6a:	4561      	cmp	r1, ip
 8004d6c:	bf08      	it	eq
 8004d6e:	f042 0201 	orreq.w	r2, r2, #1
 8004d72:	42a9      	cmp	r1, r5
 8004d74:	bf08      	it	eq
 8004d76:	f042 0201 	orreq.w	r2, r2, #1
 8004d7a:	3518      	adds	r5, #24
 8004d7c:	42a9      	cmp	r1, r5
 8004d7e:	bf08      	it	eq
 8004d80:	f042 0201 	orreq.w	r2, r2, #1
 8004d84:	3518      	adds	r5, #24
 8004d86:	42a9      	cmp	r1, r5
 8004d88:	bf08      	it	eq
 8004d8a:	f042 0201 	orreq.w	r2, r2, #1
 8004d8e:	3518      	adds	r5, #24
 8004d90:	42a9      	cmp	r1, r5
 8004d92:	bf08      	it	eq
 8004d94:	f042 0201 	orreq.w	r2, r2, #1
 8004d98:	3548      	adds	r5, #72	; 0x48
 8004d9a:	42b9      	cmp	r1, r7
 8004d9c:	bf08      	it	eq
 8004d9e:	f042 0201 	orreq.w	r2, r2, #1
 8004da2:	42b1      	cmp	r1, r6
 8004da4:	bf08      	it	eq
 8004da6:	f042 0201 	orreq.w	r2, r2, #1
 8004daa:	42a9      	cmp	r1, r5
 8004dac:	bf08      	it	eq
 8004dae:	f042 0201 	orreq.w	r2, r2, #1
 8004db2:	b912      	cbnz	r2, 8004dba <HAL_DMA_Abort_IT+0xb2>
 8004db4:	4a62      	ldr	r2, [pc, #392]	; (8004f40 <HAL_DMA_Abort_IT+0x238>)
 8004db6:	4291      	cmp	r1, r2
 8004db8:	d110      	bne.n	8004ddc <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004dba:	2204      	movs	r2, #4
  return HAL_OK;
 8004dbc:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8004dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004dc2:	680b      	ldr	r3, [r1, #0]
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	600b      	str	r3, [r1, #0]
}
 8004dca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dce:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8004dd0:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dd2:	655a      	str	r2, [r3, #84]	; 0x54
}
 8004dd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8004dd8:	2001      	movs	r0, #1
}
 8004dda:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004ddc:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dde:	4c54      	ldr	r4, [pc, #336]	; (8004f30 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004de0:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004de4:	4857      	ldr	r0, [pc, #348]	; (8004f44 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004de6:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 8004de8:	6819      	ldr	r1, [r3, #0]
 8004dea:	680a      	ldr	r2, [r1, #0]
 8004dec:	f022 0201 	bic.w	r2, r2, #1
 8004df0:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004df2:	4a4e      	ldr	r2, [pc, #312]	; (8004f2c <HAL_DMA_Abort_IT+0x224>)
 8004df4:	6819      	ldr	r1, [r3, #0]
 8004df6:	42a1      	cmp	r1, r4
 8004df8:	bf18      	it	ne
 8004dfa:	4291      	cmpne	r1, r2
 8004dfc:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8004e00:	bf0c      	ite	eq
 8004e02:	2201      	moveq	r2, #1
 8004e04:	2200      	movne	r2, #0
 8004e06:	4281      	cmp	r1, r0
 8004e08:	bf08      	it	eq
 8004e0a:	f042 0201 	orreq.w	r2, r2, #1
 8004e0e:	3030      	adds	r0, #48	; 0x30
 8004e10:	42a1      	cmp	r1, r4
 8004e12:	bf08      	it	eq
 8004e14:	f042 0201 	orreq.w	r2, r2, #1
 8004e18:	3430      	adds	r4, #48	; 0x30
 8004e1a:	4281      	cmp	r1, r0
 8004e1c:	bf08      	it	eq
 8004e1e:	f042 0201 	orreq.w	r2, r2, #1
 8004e22:	3030      	adds	r0, #48	; 0x30
 8004e24:	42a1      	cmp	r1, r4
 8004e26:	bf08      	it	eq
 8004e28:	f042 0201 	orreq.w	r2, r2, #1
 8004e2c:	3430      	adds	r4, #48	; 0x30
 8004e2e:	4281      	cmp	r1, r0
 8004e30:	bf08      	it	eq
 8004e32:	f042 0201 	orreq.w	r2, r2, #1
 8004e36:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8004e3a:	42a1      	cmp	r1, r4
 8004e3c:	bf08      	it	eq
 8004e3e:	f042 0201 	orreq.w	r2, r2, #1
 8004e42:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8004e46:	4281      	cmp	r1, r0
 8004e48:	bf08      	it	eq
 8004e4a:	f042 0201 	orreq.w	r2, r2, #1
 8004e4e:	3030      	adds	r0, #48	; 0x30
 8004e50:	42a1      	cmp	r1, r4
 8004e52:	bf08      	it	eq
 8004e54:	f042 0201 	orreq.w	r2, r2, #1
 8004e58:	3430      	adds	r4, #48	; 0x30
 8004e5a:	4281      	cmp	r1, r0
 8004e5c:	bf08      	it	eq
 8004e5e:	f042 0201 	orreq.w	r2, r2, #1
 8004e62:	3030      	adds	r0, #48	; 0x30
 8004e64:	42a1      	cmp	r1, r4
 8004e66:	bf08      	it	eq
 8004e68:	f042 0201 	orreq.w	r2, r2, #1
 8004e6c:	3430      	adds	r4, #48	; 0x30
 8004e6e:	4281      	cmp	r1, r0
 8004e70:	bf08      	it	eq
 8004e72:	f042 0201 	orreq.w	r2, r2, #1
 8004e76:	3030      	adds	r0, #48	; 0x30
 8004e78:	42a1      	cmp	r1, r4
 8004e7a:	bf08      	it	eq
 8004e7c:	f042 0201 	orreq.w	r2, r2, #1
 8004e80:	3430      	adds	r4, #48	; 0x30
 8004e82:	4281      	cmp	r1, r0
 8004e84:	bf08      	it	eq
 8004e86:	f042 0201 	orreq.w	r2, r2, #1
 8004e8a:	482f      	ldr	r0, [pc, #188]	; (8004f48 <HAL_DMA_Abort_IT+0x240>)
 8004e8c:	42a1      	cmp	r1, r4
 8004e8e:	bf08      	it	eq
 8004e90:	f042 0201 	orreq.w	r2, r2, #1
 8004e94:	4c2d      	ldr	r4, [pc, #180]	; (8004f4c <HAL_DMA_Abort_IT+0x244>)
 8004e96:	4281      	cmp	r1, r0
 8004e98:	bf08      	it	eq
 8004e9a:	f042 0201 	orreq.w	r2, r2, #1
 8004e9e:	3028      	adds	r0, #40	; 0x28
 8004ea0:	42a1      	cmp	r1, r4
 8004ea2:	bf08      	it	eq
 8004ea4:	f042 0201 	orreq.w	r2, r2, #1
 8004ea8:	3428      	adds	r4, #40	; 0x28
 8004eaa:	4281      	cmp	r1, r0
 8004eac:	bf08      	it	eq
 8004eae:	f042 0201 	orreq.w	r2, r2, #1
 8004eb2:	3028      	adds	r0, #40	; 0x28
 8004eb4:	42a1      	cmp	r1, r4
 8004eb6:	bf08      	it	eq
 8004eb8:	f042 0201 	orreq.w	r2, r2, #1
 8004ebc:	3428      	adds	r4, #40	; 0x28
 8004ebe:	4281      	cmp	r1, r0
 8004ec0:	bf08      	it	eq
 8004ec2:	f042 0201 	orreq.w	r2, r2, #1
 8004ec6:	3028      	adds	r0, #40	; 0x28
 8004ec8:	42a1      	cmp	r1, r4
 8004eca:	bf08      	it	eq
 8004ecc:	f042 0201 	orreq.w	r2, r2, #1
 8004ed0:	4281      	cmp	r1, r0
 8004ed2:	bf08      	it	eq
 8004ed4:	f042 0201 	orreq.w	r2, r2, #1
 8004ed8:	b912      	cbnz	r2, 8004ee0 <HAL_DMA_Abort_IT+0x1d8>
 8004eda:	4a1d      	ldr	r2, [pc, #116]	; (8004f50 <HAL_DMA_Abort_IT+0x248>)
 8004edc:	4291      	cmp	r1, r2
 8004ede:	d117      	bne.n	8004f10 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ee0:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ee2:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004ee4:	6801      	ldr	r1, [r0, #0]
 8004ee6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004eea:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004eec:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ef0:	f001 011f 	and.w	r1, r1, #31
 8004ef4:	408a      	lsls	r2, r1
 8004ef6:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ef8:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8004efc:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8004efe:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f00:	b132      	cbz	r2, 8004f10 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f02:	6811      	ldr	r1, [r2, #0]
 8004f04:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004f08:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f0a:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 8004f0e:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8004f10:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8004f12:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8004f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8004f16:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8004f1a:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8004f1e:	b11a      	cbz	r2, 8004f28 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 8004f20:	4618      	mov	r0, r3
 8004f22:	4790      	blx	r2
  return HAL_OK;
 8004f24:	4620      	mov	r0, r4
 8004f26:	e755      	b.n	8004dd4 <HAL_DMA_Abort_IT+0xcc>
 8004f28:	4610      	mov	r0, r2
 8004f2a:	e753      	b.n	8004dd4 <HAL_DMA_Abort_IT+0xcc>
 8004f2c:	40020010 	.word	0x40020010
 8004f30:	40020028 	.word	0x40020028
 8004f34:	40020410 	.word	0x40020410
 8004f38:	40020470 	.word	0x40020470
 8004f3c:	40020488 	.word	0x40020488
 8004f40:	400204b8 	.word	0x400204b8
 8004f44:	40020040 	.word	0x40020040
 8004f48:	58025408 	.word	0x58025408
 8004f4c:	5802541c 	.word	0x5802541c
 8004f50:	58025494 	.word	0x58025494
 8004f54:	40020058 	.word	0x40020058
 8004f58:	40020070 	.word	0x40020070
 8004f5c:	40020088 	.word	0x40020088
 8004f60:	400200a0 	.word	0x400200a0
 8004f64:	400200b8 	.word	0x400200b8

08004f68 <HAL_DMA_IRQHandler>:
{
 8004f68:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8004f6a:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f6c:	4ba0      	ldr	r3, [pc, #640]	; (80051f0 <HAL_DMA_IRQHandler+0x288>)
{
 8004f6e:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f70:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8004f72:	681f      	ldr	r7, [r3, #0]
{
 8004f74:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004f76:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004f78:	6803      	ldr	r3, [r0, #0]
 8004f7a:	4a9e      	ldr	r2, [pc, #632]	; (80051f4 <HAL_DMA_IRQHandler+0x28c>)
  tmpisr_dma  = regs_dma->ISR;
 8004f7c:	6835      	ldr	r5, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004f7e:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 8004f80:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004f82:	d048      	beq.n	8005016 <HAL_DMA_IRQHandler+0xae>
 8004f84:	3218      	adds	r2, #24
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d045      	beq.n	8005016 <HAL_DMA_IRQHandler+0xae>
 8004f8a:	3218      	adds	r2, #24
 8004f8c:	489a      	ldr	r0, [pc, #616]	; (80051f8 <HAL_DMA_IRQHandler+0x290>)
 8004f8e:	4283      	cmp	r3, r0
 8004f90:	bf18      	it	ne
 8004f92:	4293      	cmpne	r3, r2
 8004f94:	f100 0018 	add.w	r0, r0, #24
 8004f98:	bf0c      	ite	eq
 8004f9a:	2201      	moveq	r2, #1
 8004f9c:	2200      	movne	r2, #0
 8004f9e:	4283      	cmp	r3, r0
 8004fa0:	bf08      	it	eq
 8004fa2:	f042 0201 	orreq.w	r2, r2, #1
 8004fa6:	3018      	adds	r0, #24
 8004fa8:	4283      	cmp	r3, r0
 8004faa:	bf08      	it	eq
 8004fac:	f042 0201 	orreq.w	r2, r2, #1
 8004fb0:	3018      	adds	r0, #24
 8004fb2:	4283      	cmp	r3, r0
 8004fb4:	bf08      	it	eq
 8004fb6:	f042 0201 	orreq.w	r2, r2, #1
 8004fba:	3018      	adds	r0, #24
 8004fbc:	4283      	cmp	r3, r0
 8004fbe:	bf08      	it	eq
 8004fc0:	f042 0201 	orreq.w	r2, r2, #1
 8004fc4:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8004fc8:	4283      	cmp	r3, r0
 8004fca:	bf08      	it	eq
 8004fcc:	f042 0201 	orreq.w	r2, r2, #1
 8004fd0:	3018      	adds	r0, #24
 8004fd2:	4283      	cmp	r3, r0
 8004fd4:	bf08      	it	eq
 8004fd6:	f042 0201 	orreq.w	r2, r2, #1
 8004fda:	3018      	adds	r0, #24
 8004fdc:	4283      	cmp	r3, r0
 8004fde:	bf08      	it	eq
 8004fe0:	f042 0201 	orreq.w	r2, r2, #1
 8004fe4:	3018      	adds	r0, #24
 8004fe6:	4283      	cmp	r3, r0
 8004fe8:	bf08      	it	eq
 8004fea:	f042 0201 	orreq.w	r2, r2, #1
 8004fee:	3018      	adds	r0, #24
 8004ff0:	4283      	cmp	r3, r0
 8004ff2:	bf08      	it	eq
 8004ff4:	f042 0201 	orreq.w	r2, r2, #1
 8004ff8:	3018      	adds	r0, #24
 8004ffa:	4283      	cmp	r3, r0
 8004ffc:	bf08      	it	eq
 8004ffe:	f042 0201 	orreq.w	r2, r2, #1
 8005002:	3018      	adds	r0, #24
 8005004:	4283      	cmp	r3, r0
 8005006:	bf08      	it	eq
 8005008:	f042 0201 	orreq.w	r2, r2, #1
 800500c:	b91a      	cbnz	r2, 8005016 <HAL_DMA_IRQHandler+0xae>
 800500e:	4a7b      	ldr	r2, [pc, #492]	; (80051fc <HAL_DMA_IRQHandler+0x294>)
 8005010:	4293      	cmp	r3, r2
 8005012:	f040 82a1 	bne.w	8005558 <HAL_DMA_IRQHandler+0x5f0>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005016:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005018:	2008      	movs	r0, #8
 800501a:	f001 021f 	and.w	r2, r1, #31
 800501e:	4090      	lsls	r0, r2
 8005020:	4228      	tst	r0, r5
 8005022:	f040 819e 	bne.w	8005362 <HAL_DMA_IRQHandler+0x3fa>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005026:	fa25 f002 	lsr.w	r0, r5, r2
 800502a:	07c0      	lsls	r0, r0, #31
 800502c:	d50d      	bpl.n	800504a <HAL_DMA_IRQHandler+0xe2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800502e:	6958      	ldr	r0, [r3, #20]
 8005030:	0600      	lsls	r0, r0, #24
 8005032:	f140 825d 	bpl.w	80054f0 <HAL_DMA_IRQHandler+0x588>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005036:	2301      	movs	r3, #1
 8005038:	4093      	lsls	r3, r2
 800503a:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800503c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800503e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005040:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005044:	f001 021f 	and.w	r2, r1, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005048:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800504a:	2004      	movs	r0, #4
 800504c:	4090      	lsls	r0, r2
 800504e:	4228      	tst	r0, r5
 8005050:	d068      	beq.n	8005124 <HAL_DMA_IRQHandler+0x1bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	4a67      	ldr	r2, [pc, #412]	; (80051f4 <HAL_DMA_IRQHandler+0x28c>)
 8005056:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8005200 <HAL_DMA_IRQHandler+0x298>
 800505a:	4563      	cmp	r3, ip
 800505c:	bf18      	it	ne
 800505e:	4293      	cmpne	r3, r2
 8005060:	f10c 0c18 	add.w	ip, ip, #24
 8005064:	bf0c      	ite	eq
 8005066:	2201      	moveq	r2, #1
 8005068:	2200      	movne	r2, #0
 800506a:	4563      	cmp	r3, ip
 800506c:	bf08      	it	eq
 800506e:	f042 0201 	orreq.w	r2, r2, #1
 8005072:	f10c 0c18 	add.w	ip, ip, #24
 8005076:	4563      	cmp	r3, ip
 8005078:	bf08      	it	eq
 800507a:	f042 0201 	orreq.w	r2, r2, #1
 800507e:	f10c 0c18 	add.w	ip, ip, #24
 8005082:	4563      	cmp	r3, ip
 8005084:	bf08      	it	eq
 8005086:	f042 0201 	orreq.w	r2, r2, #1
 800508a:	f10c 0c18 	add.w	ip, ip, #24
 800508e:	4563      	cmp	r3, ip
 8005090:	bf08      	it	eq
 8005092:	f042 0201 	orreq.w	r2, r2, #1
 8005096:	f10c 0c18 	add.w	ip, ip, #24
 800509a:	4563      	cmp	r3, ip
 800509c:	bf08      	it	eq
 800509e:	f042 0201 	orreq.w	r2, r2, #1
 80050a2:	f10c 0c18 	add.w	ip, ip, #24
 80050a6:	4563      	cmp	r3, ip
 80050a8:	bf08      	it	eq
 80050aa:	f042 0201 	orreq.w	r2, r2, #1
 80050ae:	f50c 7c56 	add.w	ip, ip, #856	; 0x358
 80050b2:	4563      	cmp	r3, ip
 80050b4:	bf08      	it	eq
 80050b6:	f042 0201 	orreq.w	r2, r2, #1
 80050ba:	f10c 0c18 	add.w	ip, ip, #24
 80050be:	4563      	cmp	r3, ip
 80050c0:	bf08      	it	eq
 80050c2:	f042 0201 	orreq.w	r2, r2, #1
 80050c6:	f10c 0c18 	add.w	ip, ip, #24
 80050ca:	4563      	cmp	r3, ip
 80050cc:	bf08      	it	eq
 80050ce:	f042 0201 	orreq.w	r2, r2, #1
 80050d2:	f10c 0c18 	add.w	ip, ip, #24
 80050d6:	4563      	cmp	r3, ip
 80050d8:	bf08      	it	eq
 80050da:	f042 0201 	orreq.w	r2, r2, #1
 80050de:	f10c 0c18 	add.w	ip, ip, #24
 80050e2:	4563      	cmp	r3, ip
 80050e4:	bf08      	it	eq
 80050e6:	f042 0201 	orreq.w	r2, r2, #1
 80050ea:	f10c 0c18 	add.w	ip, ip, #24
 80050ee:	4563      	cmp	r3, ip
 80050f0:	bf08      	it	eq
 80050f2:	f042 0201 	orreq.w	r2, r2, #1
 80050f6:	f10c 0c18 	add.w	ip, ip, #24
 80050fa:	4563      	cmp	r3, ip
 80050fc:	bf08      	it	eq
 80050fe:	f042 0201 	orreq.w	r2, r2, #1
 8005102:	b91a      	cbnz	r2, 800510c <HAL_DMA_IRQHandler+0x1a4>
 8005104:	4a3d      	ldr	r2, [pc, #244]	; (80051fc <HAL_DMA_IRQHandler+0x294>)
 8005106:	4293      	cmp	r3, r2
 8005108:	f040 8261 	bne.w	80055ce <HAL_DMA_IRQHandler+0x666>
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	0792      	lsls	r2, r2, #30
 8005110:	f140 81f9 	bpl.w	8005506 <HAL_DMA_IRQHandler+0x59e>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005114:	60b0      	str	r0, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005116:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005118:	6de1      	ldr	r1, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800511a:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800511e:	f001 021f 	and.w	r2, r1, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005122:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005124:	2010      	movs	r0, #16
 8005126:	4090      	lsls	r0, r2
 8005128:	4228      	tst	r0, r5
 800512a:	d07f      	beq.n	800522c <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	4a31      	ldr	r2, [pc, #196]	; (80051f4 <HAL_DMA_IRQHandler+0x28c>)
 8005130:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8005200 <HAL_DMA_IRQHandler+0x298>
 8005134:	4563      	cmp	r3, ip
 8005136:	bf18      	it	ne
 8005138:	4293      	cmpne	r3, r2
 800513a:	f10c 0c18 	add.w	ip, ip, #24
 800513e:	bf0c      	ite	eq
 8005140:	2201      	moveq	r2, #1
 8005142:	2200      	movne	r2, #0
 8005144:	4563      	cmp	r3, ip
 8005146:	bf08      	it	eq
 8005148:	f042 0201 	orreq.w	r2, r2, #1
 800514c:	f10c 0c18 	add.w	ip, ip, #24
 8005150:	4563      	cmp	r3, ip
 8005152:	bf08      	it	eq
 8005154:	f042 0201 	orreq.w	r2, r2, #1
 8005158:	f10c 0c18 	add.w	ip, ip, #24
 800515c:	4563      	cmp	r3, ip
 800515e:	bf08      	it	eq
 8005160:	f042 0201 	orreq.w	r2, r2, #1
 8005164:	f10c 0c18 	add.w	ip, ip, #24
 8005168:	4563      	cmp	r3, ip
 800516a:	bf08      	it	eq
 800516c:	f042 0201 	orreq.w	r2, r2, #1
 8005170:	f10c 0c18 	add.w	ip, ip, #24
 8005174:	4563      	cmp	r3, ip
 8005176:	bf08      	it	eq
 8005178:	f042 0201 	orreq.w	r2, r2, #1
 800517c:	f10c 0c18 	add.w	ip, ip, #24
 8005180:	4563      	cmp	r3, ip
 8005182:	bf08      	it	eq
 8005184:	f042 0201 	orreq.w	r2, r2, #1
 8005188:	f50c 7c56 	add.w	ip, ip, #856	; 0x358
 800518c:	4563      	cmp	r3, ip
 800518e:	bf08      	it	eq
 8005190:	f042 0201 	orreq.w	r2, r2, #1
 8005194:	f10c 0c18 	add.w	ip, ip, #24
 8005198:	4563      	cmp	r3, ip
 800519a:	bf08      	it	eq
 800519c:	f042 0201 	orreq.w	r2, r2, #1
 80051a0:	f10c 0c18 	add.w	ip, ip, #24
 80051a4:	4563      	cmp	r3, ip
 80051a6:	bf08      	it	eq
 80051a8:	f042 0201 	orreq.w	r2, r2, #1
 80051ac:	f10c 0c18 	add.w	ip, ip, #24
 80051b0:	4563      	cmp	r3, ip
 80051b2:	bf08      	it	eq
 80051b4:	f042 0201 	orreq.w	r2, r2, #1
 80051b8:	f10c 0c18 	add.w	ip, ip, #24
 80051bc:	4563      	cmp	r3, ip
 80051be:	bf08      	it	eq
 80051c0:	f042 0201 	orreq.w	r2, r2, #1
 80051c4:	f10c 0c18 	add.w	ip, ip, #24
 80051c8:	4563      	cmp	r3, ip
 80051ca:	bf08      	it	eq
 80051cc:	f042 0201 	orreq.w	r2, r2, #1
 80051d0:	f10c 0c18 	add.w	ip, ip, #24
 80051d4:	4563      	cmp	r3, ip
 80051d6:	bf08      	it	eq
 80051d8:	f042 0201 	orreq.w	r2, r2, #1
 80051dc:	b91a      	cbnz	r2, 80051e6 <HAL_DMA_IRQHandler+0x27e>
 80051de:	4a07      	ldr	r2, [pc, #28]	; (80051fc <HAL_DMA_IRQHandler+0x294>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	f040 8141 	bne.w	8005468 <HAL_DMA_IRQHandler+0x500>
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	0712      	lsls	r2, r2, #28
 80051ea:	f140 8179 	bpl.w	80054e0 <HAL_DMA_IRQHandler+0x578>
 80051ee:	e009      	b.n	8005204 <HAL_DMA_IRQHandler+0x29c>
 80051f0:	20000af0 	.word	0x20000af0
 80051f4:	40020010 	.word	0x40020010
 80051f8:	40020058 	.word	0x40020058
 80051fc:	400204b8 	.word	0x400204b8
 8005200:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005204:	60b0      	str	r0, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	0350      	lsls	r0, r2, #13
 800520c:	f100 8183 	bmi.w	8005516 <HAL_DMA_IRQHandler+0x5ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	05d2      	lsls	r2, r2, #23
 8005214:	d403      	bmi.n	800521e <HAL_DMA_IRQHandler+0x2b6>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	f022 0208 	bic.w	r2, r2, #8
 800521c:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800521e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005220:	b10b      	cbz	r3, 8005226 <HAL_DMA_IRQHandler+0x2be>
            hdma->XferHalfCpltCallback(hdma);
 8005222:	4620      	mov	r0, r4
 8005224:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005226:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005228:	f002 021f 	and.w	r2, r2, #31
 800522c:	2120      	movs	r1, #32
 800522e:	4091      	lsls	r1, r2
 8005230:	4229      	tst	r1, r5
 8005232:	d066      	beq.n	8005302 <HAL_DMA_IRQHandler+0x39a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	4a94      	ldr	r2, [pc, #592]	; (8005488 <HAL_DMA_IRQHandler+0x520>)
 8005238:	4894      	ldr	r0, [pc, #592]	; (800548c <HAL_DMA_IRQHandler+0x524>)
 800523a:	4283      	cmp	r3, r0
 800523c:	bf18      	it	ne
 800523e:	4293      	cmpne	r3, r2
 8005240:	f100 0018 	add.w	r0, r0, #24
 8005244:	bf0c      	ite	eq
 8005246:	2201      	moveq	r2, #1
 8005248:	2200      	movne	r2, #0
 800524a:	4283      	cmp	r3, r0
 800524c:	bf08      	it	eq
 800524e:	f042 0201 	orreq.w	r2, r2, #1
 8005252:	3018      	adds	r0, #24
 8005254:	4283      	cmp	r3, r0
 8005256:	bf08      	it	eq
 8005258:	f042 0201 	orreq.w	r2, r2, #1
 800525c:	3018      	adds	r0, #24
 800525e:	4283      	cmp	r3, r0
 8005260:	bf08      	it	eq
 8005262:	f042 0201 	orreq.w	r2, r2, #1
 8005266:	3018      	adds	r0, #24
 8005268:	4283      	cmp	r3, r0
 800526a:	bf08      	it	eq
 800526c:	f042 0201 	orreq.w	r2, r2, #1
 8005270:	3018      	adds	r0, #24
 8005272:	4283      	cmp	r3, r0
 8005274:	bf08      	it	eq
 8005276:	f042 0201 	orreq.w	r2, r2, #1
 800527a:	3018      	adds	r0, #24
 800527c:	4283      	cmp	r3, r0
 800527e:	bf08      	it	eq
 8005280:	f042 0201 	orreq.w	r2, r2, #1
 8005284:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8005288:	4283      	cmp	r3, r0
 800528a:	bf08      	it	eq
 800528c:	f042 0201 	orreq.w	r2, r2, #1
 8005290:	3018      	adds	r0, #24
 8005292:	4283      	cmp	r3, r0
 8005294:	bf08      	it	eq
 8005296:	f042 0201 	orreq.w	r2, r2, #1
 800529a:	3018      	adds	r0, #24
 800529c:	4283      	cmp	r3, r0
 800529e:	bf08      	it	eq
 80052a0:	f042 0201 	orreq.w	r2, r2, #1
 80052a4:	3018      	adds	r0, #24
 80052a6:	4283      	cmp	r3, r0
 80052a8:	bf08      	it	eq
 80052aa:	f042 0201 	orreq.w	r2, r2, #1
 80052ae:	3018      	adds	r0, #24
 80052b0:	4283      	cmp	r3, r0
 80052b2:	bf08      	it	eq
 80052b4:	f042 0201 	orreq.w	r2, r2, #1
 80052b8:	3018      	adds	r0, #24
 80052ba:	4283      	cmp	r3, r0
 80052bc:	bf08      	it	eq
 80052be:	f042 0201 	orreq.w	r2, r2, #1
 80052c2:	3018      	adds	r0, #24
 80052c4:	4283      	cmp	r3, r0
 80052c6:	bf08      	it	eq
 80052c8:	f042 0201 	orreq.w	r2, r2, #1
 80052cc:	b91a      	cbnz	r2, 80052d6 <HAL_DMA_IRQHandler+0x36e>
 80052ce:	4a70      	ldr	r2, [pc, #448]	; (8005490 <HAL_DMA_IRQHandler+0x528>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	f040 80d4 	bne.w	800547e <HAL_DMA_IRQHandler+0x516>
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	06dd      	lsls	r5, r3, #27
 80052da:	d512      	bpl.n	8005302 <HAL_DMA_IRQHandler+0x39a>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80052dc:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 80052de:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	f000 80d8 	beq.w	8005498 <HAL_DMA_IRQHandler+0x530>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	0352      	lsls	r2, r2, #13
 80052ee:	f140 811b 	bpl.w	8005528 <HAL_DMA_IRQHandler+0x5c0>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	031e      	lsls	r6, r3, #12
 80052f6:	f140 8126 	bpl.w	8005546 <HAL_DMA_IRQHandler+0x5de>
          if(hdma->XferCpltCallback != NULL)
 80052fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052fc:	b10b      	cbz	r3, 8005302 <HAL_DMA_IRQHandler+0x39a>
            hdma->XferCpltCallback(hdma);
 80052fe:	4620      	mov	r0, r4
 8005300:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005302:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 80e9 	beq.w	80054dc <HAL_DMA_IRQHandler+0x574>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800530a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800530c:	07dd      	lsls	r5, r3, #31
 800530e:	d51f      	bpl.n	8005350 <HAL_DMA_IRQHandler+0x3e8>
        __HAL_DMA_DISABLE(hdma);
 8005310:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8005312:	2104      	movs	r1, #4
 8005314:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8005318:	6813      	ldr	r3, [r2, #0]
 800531a:	f023 0301 	bic.w	r3, r3, #1
 800531e:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005320:	4a5c      	ldr	r2, [pc, #368]	; (8005494 <HAL_DMA_IRQHandler+0x52c>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005322:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005324:	fba2 7207 	umull	r7, r2, r2, r7
 8005328:	0a92      	lsrs	r2, r2, #10
 800532a:	e002      	b.n	8005332 <HAL_DMA_IRQHandler+0x3ca>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800532c:	680b      	ldr	r3, [r1, #0]
 800532e:	07d8      	lsls	r0, r3, #31
 8005330:	d504      	bpl.n	800533c <HAL_DMA_IRQHandler+0x3d4>
          if (++count > timeout)
 8005332:	9b01      	ldr	r3, [sp, #4]
 8005334:	3301      	adds	r3, #1
 8005336:	4293      	cmp	r3, r2
 8005338:	9301      	str	r3, [sp, #4]
 800533a:	d9f7      	bls.n	800532c <HAL_DMA_IRQHandler+0x3c4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800533c:	680b      	ldr	r3, [r1, #0]
 800533e:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8005340:	bf4c      	ite	mi
 8005342:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8005344:	2301      	movpl	r3, #1
 8005346:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800534a:	2300      	movs	r3, #0
 800534c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8005350:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 80c2 	beq.w	80054dc <HAL_DMA_IRQHandler+0x574>
        hdma->XferErrorCallback(hdma);
 8005358:	4620      	mov	r0, r4
}
 800535a:	b003      	add	sp, #12
 800535c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8005360:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	0752      	lsls	r2, r2, #29
 8005366:	d50e      	bpl.n	8005386 <HAL_DMA_IRQHandler+0x41e>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	f022 0204 	bic.w	r2, r2, #4
 800536e:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005370:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005372:	f003 021f 	and.w	r2, r3, #31
 8005376:	2308      	movs	r3, #8
 8005378:	4093      	lsls	r3, r2
 800537a:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800537c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800537e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005380:	f043 0301 	orr.w	r3, r3, #1
 8005384:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005386:	f001 021f 	and.w	r2, r1, #31
 800538a:	fa25 f302 	lsr.w	r3, r5, r2
 800538e:	07db      	lsls	r3, r3, #31
 8005390:	f57f ae5b 	bpl.w	800504a <HAL_DMA_IRQHandler+0xe2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	483c      	ldr	r0, [pc, #240]	; (8005488 <HAL_DMA_IRQHandler+0x520>)
 8005398:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 800548c <HAL_DMA_IRQHandler+0x524>
 800539c:	4563      	cmp	r3, ip
 800539e:	bf18      	it	ne
 80053a0:	4283      	cmpne	r3, r0
 80053a2:	f10c 0c18 	add.w	ip, ip, #24
 80053a6:	bf0c      	ite	eq
 80053a8:	2001      	moveq	r0, #1
 80053aa:	2000      	movne	r0, #0
 80053ac:	4563      	cmp	r3, ip
 80053ae:	bf08      	it	eq
 80053b0:	f040 0001 	orreq.w	r0, r0, #1
 80053b4:	f10c 0c18 	add.w	ip, ip, #24
 80053b8:	4563      	cmp	r3, ip
 80053ba:	bf08      	it	eq
 80053bc:	f040 0001 	orreq.w	r0, r0, #1
 80053c0:	f10c 0c18 	add.w	ip, ip, #24
 80053c4:	4563      	cmp	r3, ip
 80053c6:	bf08      	it	eq
 80053c8:	f040 0001 	orreq.w	r0, r0, #1
 80053cc:	f10c 0c18 	add.w	ip, ip, #24
 80053d0:	4563      	cmp	r3, ip
 80053d2:	bf08      	it	eq
 80053d4:	f040 0001 	orreq.w	r0, r0, #1
 80053d8:	f10c 0c18 	add.w	ip, ip, #24
 80053dc:	4563      	cmp	r3, ip
 80053de:	bf08      	it	eq
 80053e0:	f040 0001 	orreq.w	r0, r0, #1
 80053e4:	f10c 0c18 	add.w	ip, ip, #24
 80053e8:	4563      	cmp	r3, ip
 80053ea:	bf08      	it	eq
 80053ec:	f040 0001 	orreq.w	r0, r0, #1
 80053f0:	f50c 7c56 	add.w	ip, ip, #856	; 0x358
 80053f4:	4563      	cmp	r3, ip
 80053f6:	bf08      	it	eq
 80053f8:	f040 0001 	orreq.w	r0, r0, #1
 80053fc:	f10c 0c18 	add.w	ip, ip, #24
 8005400:	4563      	cmp	r3, ip
 8005402:	bf08      	it	eq
 8005404:	f040 0001 	orreq.w	r0, r0, #1
 8005408:	f10c 0c18 	add.w	ip, ip, #24
 800540c:	4563      	cmp	r3, ip
 800540e:	bf08      	it	eq
 8005410:	f040 0001 	orreq.w	r0, r0, #1
 8005414:	f10c 0c18 	add.w	ip, ip, #24
 8005418:	4563      	cmp	r3, ip
 800541a:	bf08      	it	eq
 800541c:	f040 0001 	orreq.w	r0, r0, #1
 8005420:	f10c 0c18 	add.w	ip, ip, #24
 8005424:	4563      	cmp	r3, ip
 8005426:	bf08      	it	eq
 8005428:	f040 0001 	orreq.w	r0, r0, #1
 800542c:	f10c 0c18 	add.w	ip, ip, #24
 8005430:	4563      	cmp	r3, ip
 8005432:	bf08      	it	eq
 8005434:	f040 0001 	orreq.w	r0, r0, #1
 8005438:	f10c 0c18 	add.w	ip, ip, #24
 800543c:	4563      	cmp	r3, ip
 800543e:	bf08      	it	eq
 8005440:	f040 0001 	orreq.w	r0, r0, #1
 8005444:	2800      	cmp	r0, #0
 8005446:	f47f adf2 	bne.w	800502e <HAL_DMA_IRQHandler+0xc6>
 800544a:	4811      	ldr	r0, [pc, #68]	; (8005490 <HAL_DMA_IRQHandler+0x528>)
 800544c:	4283      	cmp	r3, r0
 800544e:	f43f adee 	beq.w	800502e <HAL_DMA_IRQHandler+0xc6>
 8005452:	6818      	ldr	r0, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005454:	2004      	movs	r0, #4
 8005456:	4090      	lsls	r0, r2
 8005458:	4228      	tst	r0, r5
 800545a:	f040 80b8 	bne.w	80055ce <HAL_DMA_IRQHandler+0x666>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800545e:	2010      	movs	r0, #16
 8005460:	4090      	lsls	r0, r2
 8005462:	4205      	tst	r5, r0
 8005464:	f43f aee2 	beq.w	800522c <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	0752      	lsls	r2, r2, #29
 800546c:	f53f aeca 	bmi.w	8005204 <HAL_DMA_IRQHandler+0x29c>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005470:	f001 021f 	and.w	r2, r1, #31
 8005474:	2120      	movs	r1, #32
 8005476:	4091      	lsls	r1, r2
 8005478:	420d      	tst	r5, r1
 800547a:	f43f af42 	beq.w	8005302 <HAL_DMA_IRQHandler+0x39a>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	0798      	lsls	r0, r3, #30
 8005482:	f57f af3e 	bpl.w	8005302 <HAL_DMA_IRQHandler+0x39a>
 8005486:	e729      	b.n	80052dc <HAL_DMA_IRQHandler+0x374>
 8005488:	40020010 	.word	0x40020010
 800548c:	40020028 	.word	0x40020028
 8005490:	400204b8 	.word	0x400204b8
 8005494:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005498:	6822      	ldr	r2, [r4, #0]
 800549a:	6813      	ldr	r3, [r2, #0]
 800549c:	f023 0316 	bic.w	r3, r3, #22
 80054a0:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80054a2:	6822      	ldr	r2, [r4, #0]
 80054a4:	6953      	ldr	r3, [r2, #20]
 80054a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054aa:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d04e      	beq.n	8005550 <HAL_DMA_IRQHandler+0x5e8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80054b2:	6822      	ldr	r2, [r4, #0]
 80054b4:	6813      	ldr	r3, [r2, #0]
 80054b6:	f023 0308 	bic.w	r3, r3, #8
 80054ba:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054bc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80054be:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 80054c0:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054c2:	f002 021f 	and.w	r2, r2, #31
 80054c6:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 80054c8:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054ca:	60b3      	str	r3, [r6, #8]
          if(hdma->XferAbortCallback != NULL)
 80054cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 80054ce:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80054d2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f47f af3e 	bne.w	8005358 <HAL_DMA_IRQHandler+0x3f0>
}
 80054dc:	b003      	add	sp, #12
 80054de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054e0:	f001 021f 	and.w	r2, r1, #31
 80054e4:	2120      	movs	r1, #32
 80054e6:	4091      	lsls	r1, r2
 80054e8:	420d      	tst	r5, r1
 80054ea:	f47f aef4 	bne.w	80052d6 <HAL_DMA_IRQHandler+0x36e>
 80054ee:	e708      	b.n	8005302 <HAL_DMA_IRQHandler+0x39a>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054f0:	f001 021f 	and.w	r2, r1, #31
 80054f4:	2004      	movs	r0, #4
 80054f6:	4090      	lsls	r0, r2
 80054f8:	4205      	tst	r5, r0
 80054fa:	f43f ae13 	beq.w	8005124 <HAL_DMA_IRQHandler+0x1bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	0792      	lsls	r2, r2, #30
 8005502:	f53f ae07 	bmi.w	8005114 <HAL_DMA_IRQHandler+0x1ac>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005506:	f001 021f 	and.w	r2, r1, #31
 800550a:	2010      	movs	r0, #16
 800550c:	4090      	lsls	r0, r2
 800550e:	4205      	tst	r5, r0
 8005510:	f47f ae69 	bne.w	80051e6 <HAL_DMA_IRQHandler+0x27e>
 8005514:	e68a      	b.n	800522c <HAL_DMA_IRQHandler+0x2c4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	0319      	lsls	r1, r3, #12
 800551a:	f57f ae80 	bpl.w	800521e <HAL_DMA_IRQHandler+0x2b6>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800551e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005520:	2b00      	cmp	r3, #0
 8005522:	f47f ae7e 	bne.w	8005222 <HAL_DMA_IRQHandler+0x2ba>
 8005526:	e67e      	b.n	8005226 <HAL_DMA_IRQHandler+0x2be>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800552e:	f47f aee4 	bne.w	80052fa <HAL_DMA_IRQHandler+0x392>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005532:	6819      	ldr	r1, [r3, #0]
 8005534:	f021 0110 	bic.w	r1, r1, #16
 8005538:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800553a:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 800553c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8005540:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8005544:	e6d9      	b.n	80052fa <HAL_DMA_IRQHandler+0x392>
            if(hdma->XferM1CpltCallback != NULL)
 8005546:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005548:	2b00      	cmp	r3, #0
 800554a:	f47f aed8 	bne.w	80052fe <HAL_DMA_IRQHandler+0x396>
 800554e:	e6d8      	b.n	8005302 <HAL_DMA_IRQHandler+0x39a>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005550:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1ad      	bne.n	80054b2 <HAL_DMA_IRQHandler+0x54a>
 8005556:	e7b1      	b.n	80054bc <HAL_DMA_IRQHandler+0x554>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005558:	4a9b      	ldr	r2, [pc, #620]	; (80057c8 <HAL_DMA_IRQHandler+0x860>)
 800555a:	489c      	ldr	r0, [pc, #624]	; (80057cc <HAL_DMA_IRQHandler+0x864>)
 800555c:	4283      	cmp	r3, r0
 800555e:	bf18      	it	ne
 8005560:	4293      	cmpne	r3, r2
 8005562:	f100 0014 	add.w	r0, r0, #20
 8005566:	bf0c      	ite	eq
 8005568:	2201      	moveq	r2, #1
 800556a:	2200      	movne	r2, #0
 800556c:	4283      	cmp	r3, r0
 800556e:	bf08      	it	eq
 8005570:	f042 0201 	orreq.w	r2, r2, #1
 8005574:	3014      	adds	r0, #20
 8005576:	4283      	cmp	r3, r0
 8005578:	bf08      	it	eq
 800557a:	f042 0201 	orreq.w	r2, r2, #1
 800557e:	3014      	adds	r0, #20
 8005580:	4283      	cmp	r3, r0
 8005582:	bf08      	it	eq
 8005584:	f042 0201 	orreq.w	r2, r2, #1
 8005588:	3014      	adds	r0, #20
 800558a:	4283      	cmp	r3, r0
 800558c:	bf08      	it	eq
 800558e:	f042 0201 	orreq.w	r2, r2, #1
 8005592:	3014      	adds	r0, #20
 8005594:	4283      	cmp	r3, r0
 8005596:	bf08      	it	eq
 8005598:	f042 0201 	orreq.w	r2, r2, #1
 800559c:	b912      	cbnz	r2, 80055a4 <HAL_DMA_IRQHandler+0x63c>
 800559e:	4a8c      	ldr	r2, [pc, #560]	; (80057d0 <HAL_DMA_IRQHandler+0x868>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d19b      	bne.n	80054dc <HAL_DMA_IRQHandler+0x574>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80055a4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80055a6:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80055a8:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80055aa:	f000 001f 	and.w	r0, r0, #31
 80055ae:	4085      	lsls	r5, r0
 80055b0:	420d      	tst	r5, r1
 80055b2:	d015      	beq.n	80055e0 <HAL_DMA_IRQHandler+0x678>
 80055b4:	0757      	lsls	r7, r2, #29
 80055b6:	d513      	bpl.n	80055e0 <HAL_DMA_IRQHandler+0x678>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055b8:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80055ba:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055bc:	d541      	bpl.n	8005642 <HAL_DMA_IRQHandler+0x6da>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055be:	03d2      	lsls	r2, r2, #15
 80055c0:	f100 8096 	bmi.w	80056f0 <HAL_DMA_IRQHandler+0x788>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80055c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f47f aec6 	bne.w	8005358 <HAL_DMA_IRQHandler+0x3f0>
 80055cc:	e786      	b.n	80054dc <HAL_DMA_IRQHandler+0x574>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80055ce:	681a      	ldr	r2, [r3, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055d0:	2010      	movs	r0, #16
 80055d2:	f001 021f 	and.w	r2, r1, #31
 80055d6:	4090      	lsls	r0, r2
 80055d8:	4205      	tst	r5, r0
 80055da:	f47f af45 	bne.w	8005468 <HAL_DMA_IRQHandler+0x500>
 80055de:	e625      	b.n	800522c <HAL_DMA_IRQHandler+0x2c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80055e0:	2502      	movs	r5, #2
 80055e2:	4085      	lsls	r5, r0
 80055e4:	420d      	tst	r5, r1
 80055e6:	d00d      	beq.n	8005604 <HAL_DMA_IRQHandler+0x69c>
 80055e8:	0797      	lsls	r7, r2, #30
 80055ea:	d50b      	bpl.n	8005604 <HAL_DMA_IRQHandler+0x69c>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055ec:	0413      	lsls	r3, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80055ee:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055f0:	f140 8083 	bpl.w	80056fa <HAL_DMA_IRQHandler+0x792>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80055f4:	03d7      	lsls	r7, r2, #15
 80055f6:	f100 80dd 	bmi.w	80057b4 <HAL_DMA_IRQHandler+0x84c>
          if(hdma->XferM1CpltCallback != NULL)
 80055fa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f47f aeab 	bne.w	8005358 <HAL_DMA_IRQHandler+0x3f0>
 8005602:	e76b      	b.n	80054dc <HAL_DMA_IRQHandler+0x574>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005604:	2508      	movs	r5, #8
 8005606:	fa05 f000 	lsl.w	r0, r5, r0
 800560a:	4208      	tst	r0, r1
 800560c:	f43f af66 	beq.w	80054dc <HAL_DMA_IRQHandler+0x574>
 8005610:	0715      	lsls	r5, r2, #28
 8005612:	f57f af63 	bpl.w	80054dc <HAL_DMA_IRQHandler+0x574>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005616:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005618:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800561a:	f021 010e 	bic.w	r1, r1, #14
 800561e:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 8005620:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005622:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005624:	f003 031f 	and.w	r3, r3, #31
 8005628:	fa02 f303 	lsl.w	r3, r2, r3
 800562c:	6073      	str	r3, [r6, #4]
      if (hdma->XferErrorCallback != NULL)
 800562e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005630:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8005632:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005636:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800563a:	2b00      	cmp	r3, #0
 800563c:	f47f ae8c 	bne.w	8005358 <HAL_DMA_IRQHandler+0x3f0>
 8005640:	e74c      	b.n	80054dc <HAL_DMA_IRQHandler+0x574>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005642:	0693      	lsls	r3, r2, #26
 8005644:	d454      	bmi.n	80056f0 <HAL_DMA_IRQHandler+0x788>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005646:	6822      	ldr	r2, [r4, #0]
 8005648:	4b62      	ldr	r3, [pc, #392]	; (80057d4 <HAL_DMA_IRQHandler+0x86c>)
 800564a:	4863      	ldr	r0, [pc, #396]	; (80057d8 <HAL_DMA_IRQHandler+0x870>)
 800564c:	4963      	ldr	r1, [pc, #396]	; (80057dc <HAL_DMA_IRQHandler+0x874>)
 800564e:	4282      	cmp	r2, r0
 8005650:	bf18      	it	ne
 8005652:	429a      	cmpne	r2, r3
 8005654:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005658:	bf0c      	ite	eq
 800565a:	2301      	moveq	r3, #1
 800565c:	2300      	movne	r3, #0
 800565e:	428a      	cmp	r2, r1
 8005660:	bf08      	it	eq
 8005662:	f043 0301 	orreq.w	r3, r3, #1
 8005666:	3130      	adds	r1, #48	; 0x30
 8005668:	4282      	cmp	r2, r0
 800566a:	bf08      	it	eq
 800566c:	f043 0301 	orreq.w	r3, r3, #1
 8005670:	3030      	adds	r0, #48	; 0x30
 8005672:	428a      	cmp	r2, r1
 8005674:	bf08      	it	eq
 8005676:	f043 0301 	orreq.w	r3, r3, #1
 800567a:	3130      	adds	r1, #48	; 0x30
 800567c:	4282      	cmp	r2, r0
 800567e:	bf08      	it	eq
 8005680:	f043 0301 	orreq.w	r3, r3, #1
 8005684:	3030      	adds	r0, #48	; 0x30
 8005686:	428a      	cmp	r2, r1
 8005688:	bf08      	it	eq
 800568a:	f043 0301 	orreq.w	r3, r3, #1
 800568e:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005692:	4282      	cmp	r2, r0
 8005694:	bf08      	it	eq
 8005696:	f043 0301 	orreq.w	r3, r3, #1
 800569a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800569e:	428a      	cmp	r2, r1
 80056a0:	bf08      	it	eq
 80056a2:	f043 0301 	orreq.w	r3, r3, #1
 80056a6:	3130      	adds	r1, #48	; 0x30
 80056a8:	4282      	cmp	r2, r0
 80056aa:	bf08      	it	eq
 80056ac:	f043 0301 	orreq.w	r3, r3, #1
 80056b0:	3030      	adds	r0, #48	; 0x30
 80056b2:	428a      	cmp	r2, r1
 80056b4:	bf08      	it	eq
 80056b6:	f043 0301 	orreq.w	r3, r3, #1
 80056ba:	3130      	adds	r1, #48	; 0x30
 80056bc:	4282      	cmp	r2, r0
 80056be:	bf08      	it	eq
 80056c0:	f043 0301 	orreq.w	r3, r3, #1
 80056c4:	3030      	adds	r0, #48	; 0x30
 80056c6:	428a      	cmp	r2, r1
 80056c8:	bf08      	it	eq
 80056ca:	f043 0301 	orreq.w	r3, r3, #1
 80056ce:	3130      	adds	r1, #48	; 0x30
 80056d0:	4282      	cmp	r2, r0
 80056d2:	bf08      	it	eq
 80056d4:	f043 0301 	orreq.w	r3, r3, #1
 80056d8:	428a      	cmp	r2, r1
 80056da:	bf08      	it	eq
 80056dc:	f043 0301 	orreq.w	r3, r3, #1
 80056e0:	b913      	cbnz	r3, 80056e8 <HAL_DMA_IRQHandler+0x780>
 80056e2:	4b3f      	ldr	r3, [pc, #252]	; (80057e0 <HAL_DMA_IRQHandler+0x878>)
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d16a      	bne.n	80057be <HAL_DMA_IRQHandler+0x856>
 80056e8:	6813      	ldr	r3, [r2, #0]
 80056ea:	f023 0308 	bic.w	r3, r3, #8
 80056ee:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 80056f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f47f ae30 	bne.w	8005358 <HAL_DMA_IRQHandler+0x3f0>
 80056f8:	e6f0      	b.n	80054dc <HAL_DMA_IRQHandler+0x574>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056fa:	0696      	lsls	r6, r2, #26
 80056fc:	d45a      	bmi.n	80057b4 <HAL_DMA_IRQHandler+0x84c>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80056fe:	6822      	ldr	r2, [r4, #0]
 8005700:	4b34      	ldr	r3, [pc, #208]	; (80057d4 <HAL_DMA_IRQHandler+0x86c>)
 8005702:	4835      	ldr	r0, [pc, #212]	; (80057d8 <HAL_DMA_IRQHandler+0x870>)
 8005704:	4935      	ldr	r1, [pc, #212]	; (80057dc <HAL_DMA_IRQHandler+0x874>)
 8005706:	4282      	cmp	r2, r0
 8005708:	bf18      	it	ne
 800570a:	429a      	cmpne	r2, r3
 800570c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005710:	bf0c      	ite	eq
 8005712:	2301      	moveq	r3, #1
 8005714:	2300      	movne	r3, #0
 8005716:	428a      	cmp	r2, r1
 8005718:	bf08      	it	eq
 800571a:	f043 0301 	orreq.w	r3, r3, #1
 800571e:	3130      	adds	r1, #48	; 0x30
 8005720:	4282      	cmp	r2, r0
 8005722:	bf08      	it	eq
 8005724:	f043 0301 	orreq.w	r3, r3, #1
 8005728:	3030      	adds	r0, #48	; 0x30
 800572a:	428a      	cmp	r2, r1
 800572c:	bf08      	it	eq
 800572e:	f043 0301 	orreq.w	r3, r3, #1
 8005732:	3130      	adds	r1, #48	; 0x30
 8005734:	4282      	cmp	r2, r0
 8005736:	bf08      	it	eq
 8005738:	f043 0301 	orreq.w	r3, r3, #1
 800573c:	3030      	adds	r0, #48	; 0x30
 800573e:	428a      	cmp	r2, r1
 8005740:	bf08      	it	eq
 8005742:	f043 0301 	orreq.w	r3, r3, #1
 8005746:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800574a:	4282      	cmp	r2, r0
 800574c:	bf08      	it	eq
 800574e:	f043 0301 	orreq.w	r3, r3, #1
 8005752:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005756:	428a      	cmp	r2, r1
 8005758:	bf08      	it	eq
 800575a:	f043 0301 	orreq.w	r3, r3, #1
 800575e:	3130      	adds	r1, #48	; 0x30
 8005760:	4282      	cmp	r2, r0
 8005762:	bf08      	it	eq
 8005764:	f043 0301 	orreq.w	r3, r3, #1
 8005768:	3030      	adds	r0, #48	; 0x30
 800576a:	428a      	cmp	r2, r1
 800576c:	bf08      	it	eq
 800576e:	f043 0301 	orreq.w	r3, r3, #1
 8005772:	3130      	adds	r1, #48	; 0x30
 8005774:	4282      	cmp	r2, r0
 8005776:	bf08      	it	eq
 8005778:	f043 0301 	orreq.w	r3, r3, #1
 800577c:	3030      	adds	r0, #48	; 0x30
 800577e:	428a      	cmp	r2, r1
 8005780:	bf08      	it	eq
 8005782:	f043 0301 	orreq.w	r3, r3, #1
 8005786:	3130      	adds	r1, #48	; 0x30
 8005788:	4282      	cmp	r2, r0
 800578a:	bf08      	it	eq
 800578c:	f043 0301 	orreq.w	r3, r3, #1
 8005790:	428a      	cmp	r2, r1
 8005792:	bf08      	it	eq
 8005794:	f043 0301 	orreq.w	r3, r3, #1
 8005798:	b913      	cbnz	r3, 80057a0 <HAL_DMA_IRQHandler+0x838>
 800579a:	4b11      	ldr	r3, [pc, #68]	; (80057e0 <HAL_DMA_IRQHandler+0x878>)
 800579c:	429a      	cmp	r2, r3
 800579e:	d121      	bne.n	80057e4 <HAL_DMA_IRQHandler+0x87c>
 80057a0:	6813      	ldr	r3, [r2, #0]
 80057a2:	f023 0314 	bic.w	r3, r3, #20
 80057a6:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80057a8:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 80057aa:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 80057ac:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80057b0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80057b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f47f adce 	bne.w	8005358 <HAL_DMA_IRQHandler+0x3f0>
 80057bc:	e68e      	b.n	80054dc <HAL_DMA_IRQHandler+0x574>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80057be:	6813      	ldr	r3, [r2, #0]
 80057c0:	f023 0304 	bic.w	r3, r3, #4
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	e793      	b.n	80056f0 <HAL_DMA_IRQHandler+0x788>
 80057c8:	58025408 	.word	0x58025408
 80057cc:	5802541c 	.word	0x5802541c
 80057d0:	58025494 	.word	0x58025494
 80057d4:	40020010 	.word	0x40020010
 80057d8:	40020028 	.word	0x40020028
 80057dc:	40020040 	.word	0x40020040
 80057e0:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80057e4:	6813      	ldr	r3, [r2, #0]
 80057e6:	f023 030a 	bic.w	r3, r3, #10
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	e7dc      	b.n	80057a8 <HAL_DMA_IRQHandler+0x840>
 80057ee:	bf00      	nop

080057f0 <HAL_DMA_GetState>:
  return hdma->State;
 80057f0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop

080057f8 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80057f8:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80057fa:	4770      	bx	lr

080057fc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057fc:	680b      	ldr	r3, [r1, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	f000 8119 	beq.w	8005a36 <HAL_GPIO_Init+0x23a>
 8005804:	f04f 0c00 	mov.w	ip, #0
{
 8005808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800580c:	4662      	mov	r2, ip
{
 800580e:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005810:	4d94      	ldr	r5, [pc, #592]	; (8005a64 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005812:	4f95      	ldr	r7, [pc, #596]	; (8005a68 <HAL_GPIO_Init+0x26c>)
 8005814:	f8df 8268 	ldr.w	r8, [pc, #616]	; 8005a80 <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005818:	f04f 0901 	mov.w	r9, #1
 800581c:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 8005820:	ea19 0e03 	ands.w	lr, r9, r3
 8005824:	f000 80c1 	beq.w	80059aa <HAL_GPIO_Init+0x1ae>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005828:	684b      	ldr	r3, [r1, #4]
 800582a:	f003 0303 	and.w	r3, r3, #3
 800582e:	1e5c      	subs	r4, r3, #1
 8005830:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005832:	f04f 0403 	mov.w	r4, #3
 8005836:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800583a:	f240 80c0 	bls.w	80059be <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800583e:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005840:	2b03      	cmp	r3, #3
 8005842:	d026      	beq.n	8005892 <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 8005844:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005846:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800584a:	688b      	ldr	r3, [r1, #8]
 800584c:	fa03 f30c 	lsl.w	r3, r3, ip
 8005850:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8005854:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005856:	684b      	ldr	r3, [r1, #4]
 8005858:	f003 0303 	and.w	r3, r3, #3
 800585c:	2b02      	cmp	r3, #2
 800585e:	d118      	bne.n	8005892 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3U];
 8005860:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005864:	f002 0b07 	and.w	fp, r2, #7
 8005868:	230f      	movs	r3, #15
 800586a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800586e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8005872:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005876:	fa03 f30b 	lsl.w	r3, r3, fp
 800587a:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800587e:	690b      	ldr	r3, [r1, #16]
 8005880:	fa03 f30b 	lsl.w	r3, r3, fp
 8005884:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 8005888:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800588c:	684b      	ldr	r3, [r1, #4]
 800588e:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 8005892:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005896:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800589a:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800589e:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 80058a0:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058a2:	684b      	ldr	r3, [r1, #4]
 80058a4:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80058a8:	d07e      	beq.n	80059a8 <HAL_GPIO_Init+0x1ac>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058aa:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80058ae:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058b2:	f002 0903 	and.w	r9, r2, #3
 80058b6:	f04f 0a0f 	mov.w	sl, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ba:	f043 0302 	orr.w	r3, r3, #2
 80058be:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058c2:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058c6:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058c8:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 80058cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80058d0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058d4:	fa0a fa09 	lsl.w	sl, sl, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	9301      	str	r3, [sp, #4]
 80058de:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80058e0:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80058e2:	ea23 030a 	bic.w	r3, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80058e6:	d02b      	beq.n	8005940 <HAL_GPIO_Init+0x144>
 80058e8:	4540      	cmp	r0, r8
 80058ea:	f000 8088 	beq.w	80059fe <HAL_GPIO_Init+0x202>
 80058ee:	4e5f      	ldr	r6, [pc, #380]	; (8005a6c <HAL_GPIO_Init+0x270>)
 80058f0:	42b0      	cmp	r0, r6
 80058f2:	f000 808b 	beq.w	8005a0c <HAL_GPIO_Init+0x210>
 80058f6:	4e5e      	ldr	r6, [pc, #376]	; (8005a70 <HAL_GPIO_Init+0x274>)
 80058f8:	42b0      	cmp	r0, r6
 80058fa:	d079      	beq.n	80059f0 <HAL_GPIO_Init+0x1f4>
 80058fc:	4e5d      	ldr	r6, [pc, #372]	; (8005a74 <HAL_GPIO_Init+0x278>)
 80058fe:	42b0      	cmp	r0, r6
 8005900:	f000 8092 	beq.w	8005a28 <HAL_GPIO_Init+0x22c>
 8005904:	4e5c      	ldr	r6, [pc, #368]	; (8005a78 <HAL_GPIO_Init+0x27c>)
 8005906:	42b0      	cmp	r0, r6
 8005908:	f000 8096 	beq.w	8005a38 <HAL_GPIO_Init+0x23c>
 800590c:	4e5b      	ldr	r6, [pc, #364]	; (8005a7c <HAL_GPIO_Init+0x280>)
 800590e:	42b0      	cmp	r0, r6
 8005910:	f000 8083 	beq.w	8005a1a <HAL_GPIO_Init+0x21e>
 8005914:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8005a84 <HAL_GPIO_Init+0x288>
 8005918:	4550      	cmp	r0, sl
 800591a:	f000 8094 	beq.w	8005a46 <HAL_GPIO_Init+0x24a>
 800591e:	f8df a168 	ldr.w	sl, [pc, #360]	; 8005a88 <HAL_GPIO_Init+0x28c>
 8005922:	4550      	cmp	r0, sl
 8005924:	f000 8096 	beq.w	8005a54 <HAL_GPIO_Init+0x258>
 8005928:	f8df a160 	ldr.w	sl, [pc, #352]	; 8005a8c <HAL_GPIO_Init+0x290>
 800592c:	4550      	cmp	r0, sl
 800592e:	bf0c      	ite	eq
 8005930:	f04f 0a09 	moveq.w	sl, #9
 8005934:	f04f 0a0a 	movne.w	sl, #10
 8005938:	fa0a f909 	lsl.w	r9, sl, r9
 800593c:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005940:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005946:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 8005948:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 800594c:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800594e:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005952:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 8005954:	bf54      	ite	pl
 8005956:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8005958:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 800595c:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005960:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 8005962:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8005966:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800596a:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 800596c:	bf54      	ite	pl
 800596e:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8005970:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 8005974:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005978:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800597a:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800597e:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005982:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 8005984:	bf54      	ite	pl
 8005986:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8005988:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 800598c:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005990:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 8005992:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005996:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8005998:	bf54      	ite	pl
 800599a:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 800599c:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80059a0:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80059a4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80059a8:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 80059aa:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059ac:	f10c 0c02 	add.w	ip, ip, #2
 80059b0:	fa33 f402 	lsrs.w	r4, r3, r2
 80059b4:	f47f af30 	bne.w	8005818 <HAL_GPIO_Init+0x1c>
  }
}
 80059b8:	b003      	add	sp, #12
 80059ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80059be:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059c0:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059c4:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059c6:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059c8:	fa03 f30c 	lsl.w	r3, r3, ip
 80059cc:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80059d0:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059d2:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 80059d4:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059dc:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059e0:	4093      	lsls	r3, r2
 80059e2:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 80059e6:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059e8:	684b      	ldr	r3, [r1, #4]
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	e727      	b.n	8005840 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80059f0:	f04f 0a03 	mov.w	sl, #3
 80059f4:	fa0a f909 	lsl.w	r9, sl, r9
 80059f8:	ea43 0309 	orr.w	r3, r3, r9
 80059fc:	e7a0      	b.n	8005940 <HAL_GPIO_Init+0x144>
 80059fe:	f04f 0a01 	mov.w	sl, #1
 8005a02:	fa0a f909 	lsl.w	r9, sl, r9
 8005a06:	ea43 0309 	orr.w	r3, r3, r9
 8005a0a:	e799      	b.n	8005940 <HAL_GPIO_Init+0x144>
 8005a0c:	f04f 0a02 	mov.w	sl, #2
 8005a10:	fa0a f909 	lsl.w	r9, sl, r9
 8005a14:	ea43 0309 	orr.w	r3, r3, r9
 8005a18:	e792      	b.n	8005940 <HAL_GPIO_Init+0x144>
 8005a1a:	f04f 0a06 	mov.w	sl, #6
 8005a1e:	fa0a f909 	lsl.w	r9, sl, r9
 8005a22:	ea43 0309 	orr.w	r3, r3, r9
 8005a26:	e78b      	b.n	8005940 <HAL_GPIO_Init+0x144>
 8005a28:	f04f 0a04 	mov.w	sl, #4
 8005a2c:	fa0a f909 	lsl.w	r9, sl, r9
 8005a30:	ea43 0309 	orr.w	r3, r3, r9
 8005a34:	e784      	b.n	8005940 <HAL_GPIO_Init+0x144>
 8005a36:	4770      	bx	lr
 8005a38:	f04f 0a05 	mov.w	sl, #5
 8005a3c:	fa0a f909 	lsl.w	r9, sl, r9
 8005a40:	ea43 0309 	orr.w	r3, r3, r9
 8005a44:	e77c      	b.n	8005940 <HAL_GPIO_Init+0x144>
 8005a46:	f04f 0a07 	mov.w	sl, #7
 8005a4a:	fa0a f909 	lsl.w	r9, sl, r9
 8005a4e:	ea43 0309 	orr.w	r3, r3, r9
 8005a52:	e775      	b.n	8005940 <HAL_GPIO_Init+0x144>
 8005a54:	f04f 0a08 	mov.w	sl, #8
 8005a58:	fa0a f909 	lsl.w	r9, sl, r9
 8005a5c:	ea43 0309 	orr.w	r3, r3, r9
 8005a60:	e76e      	b.n	8005940 <HAL_GPIO_Init+0x144>
 8005a62:	bf00      	nop
 8005a64:	58024400 	.word	0x58024400
 8005a68:	58020000 	.word	0x58020000
 8005a6c:	58020800 	.word	0x58020800
 8005a70:	58020c00 	.word	0x58020c00
 8005a74:	58021000 	.word	0x58021000
 8005a78:	58021400 	.word	0x58021400
 8005a7c:	58021800 	.word	0x58021800
 8005a80:	58020400 	.word	0x58020400
 8005a84:	58021c00 	.word	0x58021c00
 8005a88:	58022000 	.word	0x58022000
 8005a8c:	58022400 	.word	0x58022400

08005a90 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005a90:	6903      	ldr	r3, [r0, #16]
 8005a92:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8005a94:	bf14      	ite	ne
 8005a96:	2001      	movne	r0, #1
 8005a98:	2000      	moveq	r0, #0
 8005a9a:	4770      	bx	lr

08005a9c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a9c:	b902      	cbnz	r2, 8005aa0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005a9e:	0409      	lsls	r1, r1, #16
 8005aa0:	6181      	str	r1, [r0, #24]
  }
}
 8005aa2:	4770      	bx	lr

08005aa4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aa8:	461f      	mov	r7, r3
 8005aaa:	4680      	mov	r8, r0
 8005aac:	460e      	mov	r6, r1
 8005aae:	4615      	mov	r5, r2
 8005ab0:	6803      	ldr	r3, [r0, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ab2:	e001      	b.n	8005ab8 <I2C_WaitOnFlagUntilTimeout+0x14>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ab4:	1c7a      	adds	r2, r7, #1
 8005ab6:	d10a      	bne.n	8005ace <I2C_WaitOnFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ab8:	699c      	ldr	r4, [r3, #24]
 8005aba:	ea36 0404 	bics.w	r4, r6, r4
 8005abe:	bf0c      	ite	eq
 8005ac0:	2401      	moveq	r4, #1
 8005ac2:	2400      	movne	r4, #0
 8005ac4:	42ac      	cmp	r4, r5
 8005ac6:	d0f5      	beq.n	8005ab4 <I2C_WaitOnFlagUntilTimeout+0x10>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8005ac8:	2000      	movs	r0, #0
}
 8005aca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ace:	f7fe f811 	bl	8003af4 <HAL_GetTick>
 8005ad2:	9b06      	ldr	r3, [sp, #24]
 8005ad4:	1ac0      	subs	r0, r0, r3
 8005ad6:	f8d8 3000 	ldr.w	r3, [r8]
 8005ada:	42b8      	cmp	r0, r7
 8005adc:	d801      	bhi.n	8005ae2 <I2C_WaitOnFlagUntilTimeout+0x3e>
 8005ade:	2f00      	cmp	r7, #0
 8005ae0:	d1ea      	bne.n	8005ab8 <I2C_WaitOnFlagUntilTimeout+0x14>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ae2:	699a      	ldr	r2, [r3, #24]
 8005ae4:	ea36 0202 	bics.w	r2, r6, r2
 8005ae8:	bf0c      	ite	eq
 8005aea:	2201      	moveq	r2, #1
 8005aec:	2200      	movne	r2, #0
 8005aee:	42aa      	cmp	r2, r5
 8005af0:	d1e2      	bne.n	8005ab8 <I2C_WaitOnFlagUntilTimeout+0x14>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005af2:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005af6:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af8:	2200      	movs	r2, #0
          return HAL_ERROR;
 8005afa:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005afc:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 8005afe:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b02:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005b06:	f888 1041 	strb.w	r1, [r8, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b0a:	f888 2042 	strb.w	r2, [r8, #66]	; 0x42
          return HAL_ERROR;
 8005b0e:	e7dc      	b.n	8005aca <I2C_WaitOnFlagUntilTimeout+0x26>

08005b10 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b14:	6803      	ldr	r3, [r0, #0]
{
 8005b16:	460d      	mov	r5, r1
 8005b18:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8005b1a:	6999      	ldr	r1, [r3, #24]
  uint32_t error_code = 0;
  uint32_t tickstart = Tickstart;
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005b1c:	f011 0110 	ands.w	r1, r1, #16
 8005b20:	d045      	beq.n	8005bae <I2C_IsErrorOccurred+0x9e>
 8005b22:	4616      	mov	r6, r2
  uint32_t error_code = 0;
 8005b24:	2700      	movs	r7, #0
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b26:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8005b28:	46b8      	mov	r8, r7
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b2c:	6803      	ldr	r3, [r0, #0]
 8005b2e:	699a      	ldr	r2, [r3, #24]
 8005b30:	0692      	lsls	r2, r2, #26
 8005b32:	f100 8083 	bmi.w	8005c3c <I2C_IsErrorOccurred+0x12c>
 8005b36:	f1b8 0f00 	cmp.w	r8, #0
 8005b3a:	d107      	bne.n	8005b4c <I2C_IsErrorOccurred+0x3c>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b3c:	1c6a      	adds	r2, r5, #1
 8005b3e:	d155      	bne.n	8005bec <I2C_IsErrorOccurred+0xdc>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	0690      	lsls	r0, r2, #26
 8005b44:	d5fc      	bpl.n	8005b40 <I2C_IsErrorOccurred+0x30>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b46:	2220      	movs	r2, #32
 8005b48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005b4a:	6823      	ldr	r3, [r4, #0]
 8005b4c:	699a      	ldr	r2, [r3, #24]
    error_code |= HAL_I2C_ERROR_AF;
 8005b4e:	f047 0104 	orr.w	r1, r7, #4
    status = HAL_ERROR;
 8005b52:	2001      	movs	r0, #1

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005b54:	05d5      	lsls	r5, r2, #23
 8005b56:	d42e      	bmi.n	8005bb6 <I2C_IsErrorOccurred+0xa6>

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005b58:	0557      	lsls	r7, r2, #21
 8005b5a:	d541      	bpl.n	8005be0 <I2C_IsErrorOccurred+0xd0>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b5c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8005b60:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005b64:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b66:	6823      	ldr	r3, [r4, #0]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005b68:	0596      	lsls	r6, r2, #22
 8005b6a:	d505      	bpl.n	8005b78 <I2C_IsErrorOccurred+0x68>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b6c:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8005b70:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b74:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	0790      	lsls	r0, r2, #30
 8005b7c:	d502      	bpl.n	8005b84 <I2C_IsErrorOccurred+0x74>
    hi2c->Instance->TXDR = 0x00U;
 8005b7e:	2200      	movs	r2, #0
 8005b80:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	07d2      	lsls	r2, r2, #31
 8005b88:	d524      	bpl.n	8005bd4 <I2C_IsErrorOccurred+0xc4>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b8a:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b8c:	2500      	movs	r5, #0
    I2C_RESET_CR2(hi2c);
 8005b8e:	482d      	ldr	r0, [pc, #180]	; (8005c44 <I2C_IsErrorOccurred+0x134>)
    hi2c->State = HAL_I2C_STATE_READY;
 8005b90:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
 8005b92:	4002      	ands	r2, r0

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b94:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8005b96:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8005b98:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8005b9a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005ba2:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba6:	f884 5042 	strb.w	r5, [r4, #66]	; 0x42
  }

  return status;
}
 8005baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  itflag = hi2c->Instance->ISR;
 8005bae:	699a      	ldr	r2, [r3, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8005bb0:	4608      	mov	r0, r1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005bb2:	05d5      	lsls	r5, r2, #23
 8005bb4:	d5d0      	bpl.n	8005b58 <I2C_IsErrorOccurred+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bb6:	f44f 7080 	mov.w	r0, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8005bba:	f041 0101 	orr.w	r1, r1, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005bbe:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005bc0:	0550      	lsls	r0, r2, #21
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005bc2:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005bc4:	d5d0      	bpl.n	8005b68 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bc6:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8005bca:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bce:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	e7c9      	b.n	8005b68 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005bd4:	699a      	ldr	r2, [r3, #24]
 8005bd6:	f042 0201 	orr.w	r2, r2, #1
 8005bda:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	e7d4      	b.n	8005b8a <I2C_IsErrorOccurred+0x7a>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005be0:	0595      	lsls	r5, r2, #22
 8005be2:	d4c3      	bmi.n	8005b6c <I2C_IsErrorOccurred+0x5c>
  if (status != HAL_OK)
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d1c7      	bne.n	8005b78 <I2C_IsErrorOccurred+0x68>
}
 8005be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bec:	f7fd ff82 	bl	8003af4 <HAL_GetTick>
 8005bf0:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005bf2:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bf4:	42a8      	cmp	r0, r5
 8005bf6:	d801      	bhi.n	8005bfc <I2C_IsErrorOccurred+0xec>
 8005bf8:	2d00      	cmp	r5, #0
 8005bfa:	d198      	bne.n	8005b2e <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005bfc:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8005bfe:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c02:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8005c04:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c06:	0409      	lsls	r1, r1, #16
 8005c08:	d50b      	bpl.n	8005c22 <I2C_IsErrorOccurred+0x112>
              (tmp1 != I2C_CR2_STOP) && \
 8005c0a:	0440      	lsls	r0, r0, #17
 8005c0c:	d409      	bmi.n	8005c22 <I2C_IsErrorOccurred+0x112>
 8005c0e:	2a20      	cmp	r2, #32
 8005c10:	d007      	beq.n	8005c22 <I2C_IsErrorOccurred+0x112>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c18:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8005c1a:	f7fd ff6b 	bl	8003af4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c1e:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8005c20:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	0691      	lsls	r1, r2, #26
 8005c26:	d482      	bmi.n	8005b2e <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c28:	f7fd ff64 	bl	8003af4 <HAL_GetTick>
 8005c2c:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c2e:	6823      	ldr	r3, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005c30:	2819      	cmp	r0, #25
 8005c32:	d9f6      	bls.n	8005c22 <I2C_IsErrorOccurred+0x112>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005c34:	2720      	movs	r7, #32
              status = HAL_ERROR;
 8005c36:	f04f 0801 	mov.w	r8, #1
 8005c3a:	e778      	b.n	8005b2e <I2C_IsErrorOccurred+0x1e>
    if (status == HAL_OK)
 8005c3c:	f1b8 0f00 	cmp.w	r8, #0
 8005c40:	d081      	beq.n	8005b46 <I2C_IsErrorOccurred+0x36>
 8005c42:	e783      	b.n	8005b4c <I2C_IsErrorOccurred+0x3c>
 8005c44:	fe00e800 	.word	0xfe00e800

08005c48 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	460d      	mov	r5, r1
 8005c4e:	4616      	mov	r6, r2
 8005c50:	6803      	ldr	r3, [r0, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c52:	e005      	b.n	8005c60 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c54:	f7ff ff5c 	bl	8005b10 <I2C_IsErrorOccurred>
 8005c58:	b950      	cbnz	r0, 8005c70 <I2C_WaitOnTXISFlagUntilTimeout+0x28>
    if (Timeout != HAL_MAX_DELAY)
 8005c5a:	1c6a      	adds	r2, r5, #1
 8005c5c:	d10a      	bne.n	8005c74 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
 8005c5e:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c60:	699b      	ldr	r3, [r3, #24]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c62:	4632      	mov	r2, r6
 8005c64:	4629      	mov	r1, r5
 8005c66:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c68:	079b      	lsls	r3, r3, #30
 8005c6a:	d5f3      	bpl.n	8005c54 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
  return HAL_OK;
 8005c6c:	2000      	movs	r0, #0
}
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005c70:	2001      	movs	r0, #1
}
 8005c72:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c74:	f7fd ff3e 	bl	8003af4 <HAL_GetTick>
 8005c78:	1b80      	subs	r0, r0, r6
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	42a8      	cmp	r0, r5
 8005c7e:	d801      	bhi.n	8005c84 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>
 8005c80:	2d00      	cmp	r5, #0
 8005c82:	d1ed      	bne.n	8005c60 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	f012 0202 	ands.w	r2, r2, #2
 8005c8a:	d1e9      	bne.n	8005c60 <I2C_WaitOnTXISFlagUntilTimeout+0x18>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c8e:	2120      	movs	r1, #32
          return HAL_ERROR;
 8005c90:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8005c92:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c96:	430b      	orrs	r3, r1
 8005c98:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005c9a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c9e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}

08005ca4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ca4:	6803      	ldr	r3, [r0, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	069b      	lsls	r3, r3, #26
 8005caa:	d429      	bmi.n	8005d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
{
 8005cac:	b570      	push	{r4, r5, r6, lr}
 8005cae:	4605      	mov	r5, r0
 8005cb0:	460c      	mov	r4, r1
 8005cb2:	4616      	mov	r6, r2
 8005cb4:	e00d      	b.n	8005cd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb6:	f7fd ff1d 	bl	8003af4 <HAL_GetTick>
 8005cba:	1b80      	subs	r0, r0, r6
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005cbc:	6829      	ldr	r1, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cbe:	42a0      	cmp	r0, r4
 8005cc0:	d800      	bhi.n	8005cc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
 8005cc2:	b91c      	cbnz	r4, 8005ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005cc4:	698b      	ldr	r3, [r1, #24]
 8005cc6:	f013 0320 	ands.w	r3, r3, #32
 8005cca:	d00d      	beq.n	8005ce8 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ccc:	698b      	ldr	r3, [r1, #24]
 8005cce:	069b      	lsls	r3, r3, #26
 8005cd0:	d408      	bmi.n	8005ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cd2:	4632      	mov	r2, r6
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	4628      	mov	r0, r5
 8005cd8:	f7ff ff1a 	bl	8005b10 <I2C_IsErrorOccurred>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d0ea      	beq.n	8005cb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x12>
      return HAL_ERROR;
 8005ce0:	2001      	movs	r0, #1
}
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005ce4:	2000      	movs	r0, #0
}
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ce8:	6c6a      	ldr	r2, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cea:	2120      	movs	r1, #32
        return HAL_ERROR;
 8005cec:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 8005cee:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	646a      	str	r2, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005cf6:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cfa:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
}
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8005d00:	2000      	movs	r0, #0
}
 8005d02:	4770      	bx	lr

08005d04 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d056      	beq.n	8005db6 <HAL_I2C_Init+0xb2>
{
 8005d08:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d0a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005d0e:	4604      	mov	r4, r0
 8005d10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d049      	beq.n	8005dac <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 8005d18:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d1a:	2324      	movs	r3, #36	; 0x24
 8005d1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8005d20:	6813      	ldr	r3, [r2, #0]
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d28:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005d2c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8005d30:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d32:	6822      	ldr	r2, [r4, #0]
 8005d34:	6893      	ldr	r3, [r2, #8]
 8005d36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d3a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d3c:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d3e:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d40:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d42:	68a3      	ldr	r3, [r4, #8]
 8005d44:	bf0c      	ite	eq
 8005d46:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d4a:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8005d4e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005d50:	68e3      	ldr	r3, [r4, #12]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d103      	bne.n	8005d5e <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d5c:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d5e:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005d60:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005d64:	4b15      	ldr	r3, [pc, #84]	; (8005dbc <HAL_I2C_Init+0xb8>)
 8005d66:	6851      	ldr	r1, [r2, #4]
 8005d68:	430b      	orrs	r3, r1
 8005d6a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d6c:	6822      	ldr	r2, [r4, #0]
 8005d6e:	68d3      	ldr	r3, [r2, #12]
 8005d70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d74:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d76:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d78:	6821      	ldr	r1, [r4, #0]
 8005d7a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8005d7e:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d80:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d82:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005d86:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d88:	6821      	ldr	r1, [r4, #0]
 8005d8a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8005d8e:	4303      	orrs	r3, r0
  return HAL_OK;
 8005d90:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d92:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005d94:	6821      	ldr	r1, [r4, #0]
 8005d96:	680b      	ldr	r3, [r1, #0]
 8005d98:	f043 0301 	orr.w	r3, r3, #1
 8005d9c:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d9e:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005da0:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005da4:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005da6:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8005daa:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8005dac:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8005db0:	f7fb f9f6 	bl	80011a0 <HAL_I2C_MspInit>
 8005db4:	e7b0      	b.n	8005d18 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8005db6:	2001      	movs	r0, #1
}
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	02008000 	.word	0x02008000

08005dc0 <HAL_I2C_Master_Transmit>:
{
 8005dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005dc4:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dc6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8005dca:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dcc:	2b20      	cmp	r3, #32
{
 8005dce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dd0:	d128      	bne.n	8005e24 <HAL_I2C_Master_Transmit+0x64>
    __HAL_LOCK(hi2c);
 8005dd2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005dd6:	4604      	mov	r4, r0
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d023      	beq.n	8005e24 <HAL_I2C_Master_Transmit+0x64>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	460f      	mov	r7, r1
 8005de0:	4691      	mov	r9, r2
 8005de2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8005de6:	f7fd fe85 	bl	8003af4 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dea:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8005dec:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dee:	699a      	ldr	r2, [r3, #24]
 8005df0:	0411      	lsls	r1, r2, #16
 8005df2:	d51b      	bpl.n	8005e2c <HAL_I2C_Master_Transmit+0x6c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005df4:	f7fd fe7e 	bl	8003af4 <HAL_GetTick>
 8005df8:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005dfa:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfc:	2819      	cmp	r0, #25
 8005dfe:	d9f6      	bls.n	8005dee <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	0412      	lsls	r2, r2, #16
 8005e04:	d5f3      	bpl.n	8005dee <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e06:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e08:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0a:	2200      	movs	r2, #0
      return HAL_ERROR;
 8005e0c:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e0e:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 8005e10:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e14:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e16:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8005e1e:	b003      	add	sp, #12
 8005e20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8005e24:	2002      	movs	r0, #2
}
 8005e26:	b003      	add	sp, #12
 8005e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e2c:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e2e:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 8005e30:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e34:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e38:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
 8005e3a:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e40:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8005e42:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e46:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005e48:	b292      	uxth	r2, r2
 8005e4a:	2aff      	cmp	r2, #255	; 0xff
 8005e4c:	d864      	bhi.n	8005f18 <HAL_I2C_Master_Transmit+0x158>
      hi2c->XferSize = hi2c->XferCount;
 8005e4e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e50:	4942      	ldr	r1, [pc, #264]	; (8005f5c <HAL_I2C_Master_Transmit+0x19c>)
      hi2c->XferSize = hi2c->XferCount;
 8005e52:	b292      	uxth	r2, r2
 8005e54:	8522      	strh	r2, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e56:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e58:	6858      	ldr	r0, [r3, #4]
 8005e5a:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e5c:	f3c7 0109 	ubfx	r1, r7, #0, #10
 8005e60:	f3c7 0709 	ubfx	r7, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e64:	4301      	orrs	r1, r0
 8005e66:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8005e6a:	493d      	ldr	r1, [pc, #244]	; (8005f60 <HAL_I2C_Master_Transmit+0x1a0>)
 8005e6c:	4311      	orrs	r1, r2
 8005e6e:	6059      	str	r1, [r3, #4]
 8005e70:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 8005f6c <HAL_I2C_Master_Transmit+0x1ac>
 8005e74:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8005f70 <HAL_I2C_Master_Transmit+0x1b0>
    while (hi2c->XferCount > 0U)
 8005e78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e7a:	462a      	mov	r2, r5
 8005e7c:	4631      	mov	r1, r6
 8005e7e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d036      	beq.n	8005ef4 <HAL_I2C_Master_Transmit+0x134>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e86:	f7ff fedf 	bl	8005c48 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	d161      	bne.n	8005f52 <HAL_I2C_Master_Transmit+0x192>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	7812      	ldrb	r2, [r2, #0]
 8005e94:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005e96:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005e98:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005e9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005e9c:	3901      	subs	r1, #1
      hi2c->XferSize--;
 8005e9e:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8005ea0:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8005ea2:	b289      	uxth	r1, r1
      hi2c->XferSize--;
 8005ea4:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8005ea6:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005ea8:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005eaa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005eac:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005eae:	b292      	uxth	r2, r2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e1      	bne.n	8005e78 <HAL_I2C_Master_Transmit+0xb8>
 8005eb4:	2a00      	cmp	r2, #0
 8005eb6:	d0df      	beq.n	8005e78 <HAL_I2C_Master_Transmit+0xb8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005eb8:	4602      	mov	r2, r0
 8005eba:	4633      	mov	r3, r6
 8005ebc:	2180      	movs	r1, #128	; 0x80
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	9500      	str	r5, [sp, #0]
 8005ec2:	f7ff fdef 	bl	8005aa4 <I2C_WaitOnFlagUntilTimeout>
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	d143      	bne.n	8005f52 <HAL_I2C_Master_Transmit+0x192>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2bff      	cmp	r3, #255	; 0xff
 8005ed0:	d930      	bls.n	8005f34 <HAL_I2C_Master_Transmit+0x174>
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ed2:	6822      	ldr	r2, [r4, #0]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ed4:	23ff      	movs	r3, #255	; 0xff
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ed6:	4631      	mov	r1, r6
 8005ed8:	4620      	mov	r0, r4
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eda:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8005edc:	6853      	ldr	r3, [r2, #4]
 8005ede:	ea03 0308 	and.w	r3, r3, r8
 8005ee2:	433b      	orrs	r3, r7
 8005ee4:	ea43 0309 	orr.w	r3, r3, r9
 8005ee8:	6053      	str	r3, [r2, #4]
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eea:	462a      	mov	r2, r5
    while (hi2c->XferCount > 0U)
 8005eec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1c8      	bne.n	8005e86 <HAL_I2C_Master_Transmit+0xc6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ef4:	f7ff fed6 	bl	8005ca4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ef8:	bb58      	cbnz	r0, 8005f52 <HAL_I2C_Master_Transmit+0x192>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005efa:	6823      	ldr	r3, [r4, #0]
 8005efc:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 8005efe:	4d19      	ldr	r5, [pc, #100]	; (8005f64 <HAL_I2C_Master_Transmit+0x1a4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f00:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005f02:	6821      	ldr	r1, [r4, #0]
 8005f04:	684b      	ldr	r3, [r1, #4]
 8005f06:	402b      	ands	r3, r5
 8005f08:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005f0a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8005f0e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f12:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8005f16:	e786      	b.n	8005e26 <HAL_I2C_Master_Transmit+0x66>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f18:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f1a:	4910      	ldr	r1, [pc, #64]	; (8005f5c <HAL_I2C_Master_Transmit+0x19c>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f1c:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f22:	f3c7 0109 	ubfx	r1, r7, #0, #10
 8005f26:	f3c7 0709 	ubfx	r7, r7, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f2a:	4311      	orrs	r1, r2
 8005f2c:	4a0e      	ldr	r2, [pc, #56]	; (8005f68 <HAL_I2C_Master_Transmit+0x1a8>)
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005f32:	e79d      	b.n	8005e70 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 8005f34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f36:	6821      	ldr	r1, [r4, #0]
          hi2c->XferSize = hi2c->XferCount;
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005f3c:	b2db      	uxtb	r3, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f3e:	684a      	ldr	r2, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005f40:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8005f44:	ea02 0208 	and.w	r2, r2, r8
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f4e:	604b      	str	r3, [r1, #4]
}
 8005f50:	e792      	b.n	8005e78 <HAL_I2C_Master_Transmit+0xb8>
        return HAL_ERROR;
 8005f52:	2001      	movs	r0, #1
}
 8005f54:	b003      	add	sp, #12
 8005f56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f5a:	bf00      	nop
 8005f5c:	fc009800 	.word	0xfc009800
 8005f60:	02002000 	.word	0x02002000
 8005f64:	fe00e800 	.word	0xfe00e800
 8005f68:	01ff2000 	.word	0x01ff2000
 8005f6c:	fc009c00 	.word	0xfc009c00
 8005f70:	01ff0000 	.word	0x01ff0000

08005f74 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005f74:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8005f76:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005f78:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005f7a:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8005f7c:	b103      	cbz	r3, 8005f80 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8005f7e:	4718      	bx	r3
}
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop

08005f84 <HAL_I2C_SlaveTxCpltCallback>:
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop

08005f88 <I2C_ITSlaveSeqCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005f88:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f8a:	2100      	movs	r1, #0
{
 8005f8c:	b510      	push	{r4, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005f8e:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f90:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005f94:	0451      	lsls	r1, r2, #17
 8005f96:	d50c      	bpl.n	8005fb2 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f9e:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005fa0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005fa4:	2b29      	cmp	r3, #41	; 0x29
 8005fa6:	d00e      	beq.n	8005fc6 <I2C_ITSlaveSeqCplt+0x3e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005fa8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005fac:	2b2a      	cmp	r3, #42	; 0x2a
 8005fae:	d024      	beq.n	8005ffa <I2C_ITSlaveSeqCplt+0x72>
}
 8005fb0:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005fb2:	0412      	lsls	r2, r2, #16
 8005fb4:	d5f4      	bpl.n	8005fa0 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fbc:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005fbe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005fc2:	2b29      	cmp	r3, #41	; 0x29
 8005fc4:	d1f0      	bne.n	8005fa8 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005fc6:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fc8:	2321      	movs	r3, #33	; 0x21
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005fca:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8005fcc:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005fd0:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005fd4:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fd6:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005fda:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fdc:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8005fe0:	2a28      	cmp	r2, #40	; 0x28
 8005fe2:	bf0c      	ite	eq
 8005fe4:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 8005fe8:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005fec:	4013      	ands	r3, r2
 8005fee:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8005ff0:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ff4:	f7ff ffc6 	bl	8005f84 <HAL_I2C_SlaveTxCpltCallback>
}
 8005ff8:	bd10      	pop	{r4, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ffa:	2128      	movs	r1, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005ffc:	2322      	movs	r3, #34	; 0x22
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005ffe:	6802      	ldr	r2, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006000:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006004:	2100      	movs	r1, #0
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006006:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006008:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800600c:	6814      	ldr	r4, [r2, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800600e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006012:	2b28      	cmp	r3, #40	; 0x28
 8006014:	bf0c      	ite	eq
 8006016:	f06f 0344 	mvneq.w	r3, #68	; 0x44
 800601a:	f06f 03f4 	mvnne.w	r3, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800601e:	4023      	ands	r3, r4
 8006020:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8006022:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006026:	f012 fe8b 	bl	8018d40 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
 800602a:	bd10      	pop	{r4, pc}

0800602c <HAL_I2C_AddrCallback>:
}
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop

08006030 <I2C_ITAddrCplt.constprop.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006032:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006036:	4603      	mov	r3, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006038:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800603c:	2a28      	cmp	r2, #40	; 0x28
 800603e:	d006      	beq.n	800604e <I2C_ITAddrCplt.constprop.0+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006040:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8006042:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006044:	2008      	movs	r0, #8
 8006046:	61c8      	str	r0, [r1, #28]
    __HAL_UNLOCK(hi2c);
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800604c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 800604e:	6804      	ldr	r4, [r0, #0]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006050:	68c7      	ldr	r7, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8006052:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006054:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006056:	2f02      	cmp	r7, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006058:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 800605a:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800605e:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006062:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006064:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006068:	d116      	bne.n	8006098 <I2C_ITAddrCplt.constprop.0+0x68>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800606a:	ea82 1cd5 	eor.w	ip, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800606e:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006072:	f01c 0706 	ands.w	r7, ip, #6
 8006076:	d10d      	bne.n	8006094 <I2C_ITAddrCplt.constprop.0+0x64>
        hi2c->AddrEventCount++;
 8006078:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800607a:	3501      	adds	r5, #1
 800607c:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800607e:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8006080:	2d02      	cmp	r5, #2
 8006082:	d1e3      	bne.n	800604c <I2C_ITAddrCplt.constprop.0+0x1c>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006084:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 8006086:	6487      	str	r7, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006088:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 800608a:	f880 7040 	strb.w	r7, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800608e:	f7ff ffcd 	bl	800602c <HAL_I2C_AddrCallback>
}
 8006092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006094:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006098:	6825      	ldr	r5, [r4, #0]
 800609a:	f025 05b8 	bic.w	r5, r5, #184	; 0xb8
 800609e:	6025      	str	r5, [r4, #0]
      __HAL_UNLOCK(hi2c);
 80060a0:	2400      	movs	r4, #0
 80060a2:	f883 4040 	strb.w	r4, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80060a6:	f7ff ffc1 	bl	800602c <HAL_I2C_AddrCallback>
}
 80060aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080060ac <HAL_I2C_ListenCpltCallback>:
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop

080060b0 <I2C_ITListenCplt>:
  hi2c->PreviousState = I2C_STATE_NONE;
 80060b0:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80060b2:	2220      	movs	r2, #32
{
 80060b4:	b510      	push	{r4, lr}
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060b6:	4c17      	ldr	r4, [pc, #92]	; (8006114 <I2C_ITListenCplt+0x64>)
  hi2c->XferISR = NULL;
 80060b8:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060ba:	62c4      	str	r4, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80060bc:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80060be:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c2:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80060c6:	074b      	lsls	r3, r1, #29
 80060c8:	d512      	bpl.n	80060f0 <I2C_ITListenCplt+0x40>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060ca:	6802      	ldr	r2, [r0, #0]
 80060cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80060ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80060d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80060d2:	6a43      	ldr	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80060d4:	8d02      	ldrh	r2, [r0, #40]	; 0x28
    hi2c->pBuffPtr++;
 80060d6:	3301      	adds	r3, #1
 80060d8:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80060da:	b14a      	cbz	r2, 80060f0 <I2C_ITListenCplt+0x40>
      hi2c->XferCount--;
 80060dc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
      hi2c->XferSize--;
 80060de:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80060e0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80060e2:	8502      	strh	r2, [r0, #40]	; 0x28
      hi2c->XferCount--;
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80060ea:	f043 0304 	orr.w	r3, r3, #4
 80060ee:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80060f0:	6802      	ldr	r2, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060f2:	2410      	movs	r4, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80060f4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 80060f8:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80060fa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80060fe:	6813      	ldr	r3, [r2, #0]
 8006100:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006104:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006106:	6803      	ldr	r3, [r0, #0]
 8006108:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800610a:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800610e:	f7ff ffcd 	bl	80060ac <HAL_I2C_ListenCpltCallback>
}
 8006112:	bd10      	pop	{r4, pc}
 8006114:	ffff0000 	.word	0xffff0000

08006118 <HAL_I2C_AbortCpltCallback>:
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop

0800611c <I2C_DMAAbort>:
{
 800611c:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800611e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8006120:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006122:	b10b      	cbz	r3, 8006128 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006124:	2200      	movs	r2, #0
 8006126:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8006128:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800612a:	b10b      	cbz	r3, 8006130 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800612c:	2200      	movs	r2, #0
 800612e:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006130:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006134:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 8006136:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800613a:	d005      	beq.n	8006148 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 800613c:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800613e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006142:	f012 fe01 	bl	8018d48 <__HAL_I2C_ErrorCallback_veneer>
}
 8006146:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8006148:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800614a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800614e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006152:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8006154:	f7ff ffe0 	bl	8006118 <HAL_I2C_AbortCpltCallback>
}
 8006158:	bd08      	pop	{r3, pc}
 800615a:	bf00      	nop

0800615c <I2C_ITError>:
{
 800615c:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800615e:	4a5c      	ldr	r2, [pc, #368]	; (80062d0 <I2C_ITError+0x174>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006160:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006162:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8006166:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006168:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800616c:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800616e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006170:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8006172:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006174:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8006176:	ea41 0102 	orr.w	r1, r1, r2
 800617a:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800617c:	d872      	bhi.n	8006264 <I2C_ITError+0x108>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800617e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006182:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006186:	f003 0328 	and.w	r3, r3, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800618a:	6801      	ldr	r1, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800618c:	f002 0228 	and.w	r2, r2, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006190:	2028      	movs	r0, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006192:	2b28      	cmp	r3, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006194:	680d      	ldr	r5, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006196:	bf0c      	ite	eq
 8006198:	2346      	moveq	r3, #70	; 0x46
 800619a:	23f6      	movne	r3, #246	; 0xf6
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800619c:	2a28      	cmp	r2, #40	; 0x28
 800619e:	4a4d      	ldr	r2, [pc, #308]	; (80062d4 <I2C_ITError+0x178>)
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80061a0:	bf0c      	ite	eq
 80061a2:	43db      	mvneq	r3, r3
 80061a4:	f06f 03f6 	mvnne.w	r3, #246	; 0xf6
 80061a8:	402b      	ands	r3, r5
 80061aa:	600b      	str	r3, [r1, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061ac:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80061b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 80061b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80061b4:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80061b6:	b118      	cbz	r0, 80061c0 <I2C_ITError+0x64>
 80061b8:	2b11      	cmp	r3, #17
 80061ba:	d01e      	beq.n	80061fa <I2C_ITError+0x9e>
 80061bc:	2b21      	cmp	r3, #33	; 0x21
 80061be:	d01c      	beq.n	80061fa <I2C_ITError+0x9e>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80061c0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80061c2:	b118      	cbz	r0, 80061cc <I2C_ITError+0x70>
 80061c4:	2b12      	cmp	r3, #18
 80061c6:	d030      	beq.n	800622a <I2C_ITError+0xce>
 80061c8:	2b22      	cmp	r3, #34	; 0x22
 80061ca:	d02e      	beq.n	800622a <I2C_ITError+0xce>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80061cc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80061d0:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 80061d2:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80061d6:	d006      	beq.n	80061e6 <I2C_ITError+0x8a>
    HAL_I2C_ErrorCallback(hi2c);
 80061d8:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 80061da:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80061dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80061e0:	f012 fdb2 	bl	8018d48 <__HAL_I2C_ErrorCallback_veneer>
}
 80061e4:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80061e6:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 80061e8:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 80061ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80061ee:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061f2:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 80061f4:	f7ff ff90 	bl	8006118 <HAL_I2C_AbortCpltCallback>
}
 80061f8:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80061fa:	6823      	ldr	r3, [r4, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	0451      	lsls	r1, r2, #17
 8006200:	d45f      	bmi.n	80062c2 <I2C_ITError+0x166>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006202:	f7ff faf5 	bl	80057f0 <HAL_DMA_GetState>
 8006206:	2801      	cmp	r0, #1
 8006208:	d0e0      	beq.n	80061cc <I2C_ITError+0x70>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800620a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800620c:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800620e:	4932      	ldr	r1, [pc, #200]	; (80062d8 <I2C_ITError+0x17c>)
 8006210:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8006212:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006216:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006218:	f7fe fd76 	bl	8004d08 <HAL_DMA_Abort_IT>
 800621c:	2800      	cmp	r0, #0
 800621e:	d0e1      	beq.n	80061e4 <I2C_ITError+0x88>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006220:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8006222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006226:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006228:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800622a:	6823      	ldr	r3, [r4, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	0412      	lsls	r2, r2, #16
 8006230:	d504      	bpl.n	800623c <I2C_ITError+0xe0>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006238:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800623a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800623c:	f7ff fad8 	bl	80057f0 <HAL_DMA_GetState>
 8006240:	2801      	cmp	r0, #1
 8006242:	d0c3      	beq.n	80061cc <I2C_ITError+0x70>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006244:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 8006246:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006248:	4923      	ldr	r1, [pc, #140]	; (80062d8 <I2C_ITError+0x17c>)
 800624a:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800624c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006250:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006252:	f7fe fd59 	bl	8004d08 <HAL_DMA_Abort_IT>
 8006256:	2800      	cmp	r0, #0
 8006258:	d0c4      	beq.n	80061e4 <I2C_ITError+0x88>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800625a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 800625c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006260:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006262:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006264:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006266:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800626a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800626e:	6813      	ldr	r3, [r2, #0]
 8006270:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006274:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006276:	6803      	ldr	r3, [r0, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	0792      	lsls	r2, r2, #30
 800627c:	d501      	bpl.n	8006282 <I2C_ITError+0x126>
    hi2c->Instance->TXDR = 0x00U;
 800627e:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006280:	6803      	ldr	r3, [r0, #0]
 8006282:	699a      	ldr	r2, [r3, #24]
 8006284:	07d6      	lsls	r6, r2, #31
 8006286:	d403      	bmi.n	8006290 <I2C_ITError+0x134>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	f042 0201 	orr.w	r2, r2, #1
 800628e:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006290:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006294:	2b60      	cmp	r3, #96	; 0x60
 8006296:	d012      	beq.n	80062be <I2C_ITError+0x162>
      hi2c->State         = HAL_I2C_STATE_READY;
 8006298:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800629a:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
 800629c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	0695      	lsls	r5, r2, #26
 80062a4:	d50b      	bpl.n	80062be <I2C_ITError+0x162>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	06d0      	lsls	r0, r2, #27
 80062aa:	d506      	bpl.n	80062ba <I2C_ITError+0x15e>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ac:	2210      	movs	r2, #16
 80062ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062b0:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062b2:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062b4:	f042 0204 	orr.w	r2, r2, #4
 80062b8:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ba:	2220      	movs	r2, #32
 80062bc:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 80062be:	2200      	movs	r2, #0
 80062c0:	e776      	b.n	80061b0 <I2C_ITError+0x54>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062c8:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80062cc:	e799      	b.n	8006202 <I2C_ITError+0xa6>
 80062ce:	bf00      	nop
 80062d0:	ffff0000 	.word	0xffff0000
 80062d4:	080064b1 	.word	0x080064b1
 80062d8:	0800611d 	.word	0x0800611d

080062dc <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80062dc:	6803      	ldr	r3, [r0, #0]
{
 80062de:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80062e0:	699a      	ldr	r2, [r3, #24]
 80062e2:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80062e4:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80062e6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80062ea:	d032      	beq.n	8006352 <HAL_I2C_ER_IRQHandler+0x76>
 80062ec:	f011 0f80 	tst.w	r1, #128	; 0x80
 80062f0:	d021      	beq.n	8006336 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80062f2:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062f4:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80062f8:	f041 0101 	orr.w	r1, r1, #1
 80062fc:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062fe:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006300:	0553      	lsls	r3, r2, #21
 8006302:	d507      	bpl.n	8006314 <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006304:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006306:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006308:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800630c:	f041 0108 	orr.w	r1, r1, #8
 8006310:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006312:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006314:	0592      	lsls	r2, r2, #22
 8006316:	d507      	bpl.n	8006328 <HAL_I2C_ER_IRQHandler+0x4c>
 8006318:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800631a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800631c:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006320:	f043 0302 	orr.w	r3, r3, #2
 8006324:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006326:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
 8006328:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800632a:	f011 0f0b 	tst.w	r1, #11
 800632e:	d10c      	bne.n	800634a <HAL_I2C_ER_IRQHandler+0x6e>
}
 8006330:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006334:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006336:	0553      	lsls	r3, r2, #21
 8006338:	d4f6      	bmi.n	8006328 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800633a:	0593      	lsls	r3, r2, #22
 800633c:	d5f4      	bpl.n	8006328 <HAL_I2C_ER_IRQHandler+0x4c>
 800633e:	060a      	lsls	r2, r1, #24
 8006340:	d4eb      	bmi.n	800631a <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
 8006342:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006344:	f011 0f0b 	tst.w	r1, #11
 8006348:	d0f2      	beq.n	8006330 <HAL_I2C_ER_IRQHandler+0x54>
}
 800634a:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 800634e:	f7ff bf05 	b.w	800615c <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006352:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006356:	d0f0      	beq.n	800633a <HAL_I2C_ER_IRQHandler+0x5e>
 8006358:	0609      	lsls	r1, r1, #24
 800635a:	d5e5      	bpl.n	8006328 <HAL_I2C_ER_IRQHandler+0x4c>
 800635c:	e7d3      	b.n	8006306 <HAL_I2C_ER_IRQHandler+0x2a>
 800635e:	bf00      	nop

08006360 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006360:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006362:	6802      	ldr	r2, [r0, #0]
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006364:	460d      	mov	r5, r1
 8006366:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006368:	6811      	ldr	r1, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800636a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800636e:	2020      	movs	r0, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006370:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006374:	61d0      	str	r0, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006376:	2b21      	cmp	r3, #33	; 0x21
 8006378:	d16f      	bne.n	800645a <I2C_ITSlaveCplt.constprop.0+0xfa>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800637a:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800637c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006380:	6802      	ldr	r2, [r0, #0]
 8006382:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
 8006386:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006388:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800638a:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
 800638c:	4846      	ldr	r0, [pc, #280]	; (80064a8 <I2C_ITSlaveCplt.constprop.0+0x148>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800638e:	6853      	ldr	r3, [r2, #4]
 8006390:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006394:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8006396:	6822      	ldr	r2, [r4, #0]
 8006398:	6853      	ldr	r3, [r2, #4]
 800639a:	4003      	ands	r3, r0
 800639c:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	699a      	ldr	r2, [r3, #24]
 80063a2:	0792      	lsls	r2, r2, #30
 80063a4:	d502      	bpl.n	80063ac <I2C_ITSlaveCplt.constprop.0+0x4c>
    hi2c->Instance->TXDR = 0x00U;
 80063a6:	2200      	movs	r2, #0
 80063a8:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	699a      	ldr	r2, [r3, #24]
 80063ae:	07d6      	lsls	r6, r2, #31
 80063b0:	d403      	bmi.n	80063ba <I2C_ITSlaveCplt.constprop.0+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80063b2:	699a      	ldr	r2, [r3, #24]
 80063b4:	f042 0201 	orr.w	r2, r2, #1
 80063b8:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80063ba:	0448      	lsls	r0, r1, #17
 80063bc:	d558      	bpl.n	8006470 <I2C_ITSlaveCplt.constprop.0+0x110>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80063be:	6822      	ldr	r2, [r4, #0]
 80063c0:	6813      	ldr	r3, [r2, #0]
 80063c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063c6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 80063c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80063ca:	b11b      	cbz	r3, 80063d4 <I2C_ITSlaveCplt.constprop.0+0x74>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	6853      	ldr	r3, [r2, #4]
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80063d4:	076b      	lsls	r3, r5, #29
 80063d6:	d50a      	bpl.n	80063ee <I2C_ITSlaveCplt.constprop.0+0x8e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063d8:	6822      	ldr	r2, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80063da:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80063de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80063e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80063e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 80063e8:	3301      	adds	r3, #1
 80063ea:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80063ec:	bb72      	cbnz	r2, 800644c <I2C_ITSlaveCplt.constprop.0+0xec>
  if (hi2c->XferCount != 0U)
 80063ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	b11b      	cbz	r3, 80063fc <I2C_ITSlaveCplt.constprop.0+0x9c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80063f6:	f043 0304 	orr.w	r3, r3, #4
 80063fa:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063fc:	2300      	movs	r3, #0
 80063fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006402:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8006404:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006406:	2e00      	cmp	r6, #0
 8006408:	d13d      	bne.n	8006486 <I2C_ITSlaveCplt.constprop.0+0x126>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800640a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800640c:	4d27      	ldr	r5, [pc, #156]	; (80064ac <I2C_ITSlaveCplt.constprop.0+0x14c>)
 800640e:	42ab      	cmp	r3, r5
 8006410:	d10e      	bne.n	8006430 <I2C_ITSlaveCplt.constprop.0+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006412:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006416:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8006418:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800641c:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 800641e:	f04f 0320 	mov.w	r3, #32
 8006422:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006426:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006428:	d03b      	beq.n	80064a2 <I2C_ITSlaveCplt.constprop.0+0x142>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800642a:	f7ff fdab 	bl	8005f84 <HAL_I2C_SlaveTxCpltCallback>
}
 800642e:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITSlaveSeqCplt(hi2c);
 8006430:	4620      	mov	r0, r4
 8006432:	f7ff fda9 	bl	8005f88 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8006436:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006438:	62e5      	str	r5, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 800643a:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800643c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006440:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8006444:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8006446:	f7ff fe31 	bl	80060ac <HAL_I2C_ListenCpltCallback>
}
 800644a:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 800644c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800644e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006450:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006452:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006454:	b29b      	uxth	r3, r3
 8006456:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006458:	e7c9      	b.n	80063ee <I2C_ITSlaveCplt.constprop.0+0x8e>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800645a:	2b22      	cmp	r3, #34	; 0x22
 800645c:	d195      	bne.n	800638a <I2C_ITSlaveCplt.constprop.0+0x2a>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800645e:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006460:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006464:	6802      	ldr	r2, [r0, #0]
 8006466:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
 800646a:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800646c:	6323      	str	r3, [r4, #48]	; 0x30
 800646e:	e78c      	b.n	800638a <I2C_ITSlaveCplt.constprop.0+0x2a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006470:	040a      	lsls	r2, r1, #16
 8006472:	d5af      	bpl.n	80063d4 <I2C_ITSlaveCplt.constprop.0+0x74>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006474:	6822      	ldr	r2, [r4, #0]
 8006476:	6813      	ldr	r3, [r2, #0]
 8006478:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800647c:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 800647e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1a3      	bne.n	80063cc <I2C_ITSlaveCplt.constprop.0+0x6c>
 8006484:	e7a6      	b.n	80063d4 <I2C_ITSlaveCplt.constprop.0+0x74>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006486:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006488:	4620      	mov	r0, r4
 800648a:	f7ff fe67 	bl	800615c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800648e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006492:	2b28      	cmp	r3, #40	; 0x28
 8006494:	d1cb      	bne.n	800642e <I2C_ITSlaveCplt.constprop.0+0xce>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006496:	4629      	mov	r1, r5
 8006498:	4620      	mov	r0, r4
}
 800649a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800649e:	f7ff be07 	b.w	80060b0 <I2C_ITListenCplt>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064a2:	f012 fc4d 	bl	8018d40 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	fe00e800 	.word	0xfe00e800
 80064ac:	ffff0000 	.word	0xffff0000

080064b0 <I2C_Slave_ISR_IT>:
{
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 80064b2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 80064b6:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d07b      	beq.n	80065b4 <I2C_Slave_ISR_IT+0x104>
 80064bc:	4617      	mov	r7, r2
 80064be:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80064c0:	068a      	lsls	r2, r1, #26
 80064c2:	4604      	mov	r4, r0
 80064c4:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 80064c6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80064ca:	d501      	bpl.n	80064d0 <I2C_Slave_ISR_IT+0x20>
 80064cc:	06bb      	lsls	r3, r7, #26
 80064ce:	d459      	bmi.n	8006584 <I2C_Slave_ISR_IT+0xd4>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064d0:	06ea      	lsls	r2, r5, #27
 80064d2:	d51c      	bpl.n	800650e <I2C_Slave_ISR_IT+0x5e>
 80064d4:	06fb      	lsls	r3, r7, #27
 80064d6:	d51a      	bpl.n	800650e <I2C_Slave_ISR_IT+0x5e>
    if (hi2c->XferCount == 0U)
 80064d8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80064da:	b29b      	uxth	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d156      	bne.n	800658e <I2C_Slave_ISR_IT+0xde>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80064e0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80064e4:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	d101      	bne.n	80064f0 <I2C_Slave_ISR_IT+0x40>
 80064ec:	2b28      	cmp	r3, #40	; 0x28
 80064ee:	d076      	beq.n	80065de <I2C_Slave_ISR_IT+0x12e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80064f0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064f4:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80064f6:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064f8:	6823      	ldr	r3, [r4, #0]
 80064fa:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80064fc:	d102      	bne.n	8006504 <I2C_Slave_ISR_IT+0x54>
 80064fe:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8006502:	d15d      	bne.n	80065c0 <I2C_Slave_ISR_IT+0x110>
  __HAL_UNLOCK(hi2c);
 8006504:	2300      	movs	r3, #0
  return HAL_OK;
 8006506:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 8006508:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800650c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800650e:	076a      	lsls	r2, r5, #29
 8006510:	d41a      	bmi.n	8006548 <I2C_Slave_ISR_IT+0x98>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006512:	0728      	lsls	r0, r5, #28
 8006514:	d501      	bpl.n	800651a <I2C_Slave_ISR_IT+0x6a>
 8006516:	0739      	lsls	r1, r7, #28
 8006518:	d448      	bmi.n	80065ac <I2C_Slave_ISR_IT+0xfc>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800651a:	07aa      	lsls	r2, r5, #30
 800651c:	d5f2      	bpl.n	8006504 <I2C_Slave_ISR_IT+0x54>
 800651e:	07bb      	lsls	r3, r7, #30
 8006520:	d5f0      	bpl.n	8006504 <I2C_Slave_ISR_IT+0x54>
    if (hi2c->XferCount > 0U)
 8006522:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d046      	beq.n	80065b8 <I2C_Slave_ISR_IT+0x108>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800652a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	7812      	ldrb	r2, [r2, #0]
 8006530:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006532:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006534:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006536:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006538:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800653a:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800653c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800653e:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8006540:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006542:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006544:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006546:	e7dd      	b.n	8006504 <I2C_Slave_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006548:	077b      	lsls	r3, r7, #29
 800654a:	d5e2      	bpl.n	8006512 <I2C_Slave_ISR_IT+0x62>
    if (hi2c->XferCount > 0U)
 800654c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800654e:	b29b      	uxth	r3, r3
 8006550:	b16b      	cbz	r3, 800656e <I2C_Slave_ISR_IT+0xbe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006552:	6822      	ldr	r2, [r4, #0]
 8006554:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006556:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006558:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800655a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800655c:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800655e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006560:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8006562:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8006564:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006566:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8006568:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800656a:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800656c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800656e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1c6      	bne.n	8006504 <I2C_Slave_ISR_IT+0x54>
 8006576:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 800657a:	d0c3      	beq.n	8006504 <I2C_Slave_ISR_IT+0x54>
        I2C_ITSlaveSeqCplt(hi2c);
 800657c:	4620      	mov	r0, r4
 800657e:	f7ff fd03 	bl	8005f88 <I2C_ITSlaveSeqCplt>
 8006582:	e7bf      	b.n	8006504 <I2C_Slave_ISR_IT+0x54>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006584:	f7ff feec 	bl	8006360 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006588:	06ea      	lsls	r2, r5, #27
 800658a:	d5c0      	bpl.n	800650e <I2C_Slave_ISR_IT+0x5e>
 800658c:	e7a2      	b.n	80064d4 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	2210      	movs	r2, #16
 8006592:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006594:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006596:	f043 0304 	orr.w	r3, r3, #4
 800659a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800659c:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 80065a0:	d1b0      	bne.n	8006504 <I2C_Slave_ISR_IT+0x54>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80065a2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80065a4:	4620      	mov	r0, r4
 80065a6:	f7ff fdd9 	bl	800615c <I2C_ITError>
 80065aa:	e7ab      	b.n	8006504 <I2C_Slave_ISR_IT+0x54>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80065ac:	4620      	mov	r0, r4
 80065ae:	f7ff fd3f 	bl	8006030 <I2C_ITAddrCplt.constprop.0>
 80065b2:	e7a7      	b.n	8006504 <I2C_Slave_ISR_IT+0x54>
  __HAL_LOCK(hi2c);
 80065b4:	2002      	movs	r0, #2
}
 80065b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80065b8:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 80065bc:	d1a2      	bne.n	8006504 <I2C_Slave_ISR_IT+0x54>
 80065be:	e7dd      	b.n	800657c <I2C_Slave_ISR_IT+0xcc>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	699a      	ldr	r2, [r3, #24]
 80065c4:	0790      	lsls	r0, r2, #30
 80065c6:	d502      	bpl.n	80065ce <I2C_Slave_ISR_IT+0x11e>
    hi2c->Instance->TXDR = 0x00U;
 80065c8:	2200      	movs	r2, #0
 80065ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	699a      	ldr	r2, [r3, #24]
 80065d0:	07d1      	lsls	r1, r2, #31
 80065d2:	d4d3      	bmi.n	800657c <I2C_Slave_ISR_IT+0xcc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	f042 0201 	orr.w	r2, r2, #1
 80065da:	619a      	str	r2, [r3, #24]
 80065dc:	e7ce      	b.n	800657c <I2C_Slave_ISR_IT+0xcc>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80065de:	4629      	mov	r1, r5
 80065e0:	4620      	mov	r0, r4
 80065e2:	f7ff fd65 	bl	80060b0 <I2C_ITListenCplt>
 80065e6:	e78d      	b.n	8006504 <I2C_Slave_ISR_IT+0x54>

080065e8 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065e8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80065ec:	2a20      	cmp	r2, #32
 80065ee:	d129      	bne.n	8006644 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
 80065f0:	4603      	mov	r3, r0
{
 80065f2:	b500      	push	{lr}
 80065f4:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065f8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80065fc:	2a01      	cmp	r2, #1
 80065fe:	d023      	beq.n	8006648 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8006600:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006602:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006604:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800660c:	2224      	movs	r2, #36	; 0x24
 800660e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8006612:	6802      	ldr	r2, [r0, #0]
 8006614:	f022 0201 	bic.w	r2, r2, #1
 8006618:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	6802      	ldr	r2, [r0, #0]
 800661e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006622:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	6802      	ldr	r2, [r0, #0]
 8006628:	4311      	orrs	r1, r2
 800662a:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800662c:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 800662e:	6819      	ldr	r1, [r3, #0]
 8006630:	680a      	ldr	r2, [r1, #0]
 8006632:	f042 0201 	orr.w	r2, r2, #1
 8006636:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8006638:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800663c:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8006640:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8006644:	2002      	movs	r0, #2
}
 8006646:	4770      	bx	lr
    return HAL_BUSY;
 8006648:	2002      	movs	r0, #2
}
 800664a:	f85d fb04 	ldr.w	pc, [sp], #4
 800664e:	bf00      	nop

08006650 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006650:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
 8006654:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006656:	2a20      	cmp	r2, #32
 8006658:	fa5f fc82 	uxtb.w	ip, r2
 800665c:	d121      	bne.n	80066a2 <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800665e:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006662:	2a01      	cmp	r2, #1
 8006664:	d01d      	beq.n	80066a2 <HAL_I2CEx_ConfigDigitalFilter+0x52>
 8006666:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006668:	6800      	ldr	r0, [r0, #0]
    __HAL_LOCK(hi2c);
 800666a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800666e:	2224      	movs	r2, #36	; 0x24
 8006670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8006674:	6802      	ldr	r2, [r0, #0]
 8006676:	f022 0201 	bic.w	r2, r2, #1
 800667a:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006680:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006684:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006688:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 800668a:	6002      	str	r2, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	6802      	ldr	r2, [r0, #0]
 8006690:	f042 0201 	orr.w	r2, r2, #1
 8006694:	6002      	str	r2, [r0, #0]

    return HAL_OK;
 8006696:	4608      	mov	r0, r1
    hi2c->State = HAL_I2C_STATE_READY;
 8006698:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800669c:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    return HAL_OK;
 80066a0:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80066a2:	2002      	movs	r0, #2
  }
}
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop

080066a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80066a8:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80066aa:	4c10      	ldr	r4, [pc, #64]	; (80066ec <HAL_PWREx_ConfigSupply+0x44>)
 80066ac:	68e3      	ldr	r3, [r4, #12]
 80066ae:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066b2:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80066b4:	d105      	bne.n	80066c2 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066b6:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80066ba:	1a18      	subs	r0, r3, r0
 80066bc:	bf18      	it	ne
 80066be:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 80066c0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80066c2:	f023 0307 	bic.w	r3, r3, #7
 80066c6:	4303      	orrs	r3, r0
 80066c8:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 80066ca:	f7fd fa13 	bl	8003af4 <HAL_GetTick>
 80066ce:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066d0:	e005      	b.n	80066de <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80066d2:	f7fd fa0f 	bl	8003af4 <HAL_GetTick>
 80066d6:	1b40      	subs	r0, r0, r5
 80066d8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80066dc:	d804      	bhi.n	80066e8 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80066de:	6863      	ldr	r3, [r4, #4]
 80066e0:	049b      	lsls	r3, r3, #18
 80066e2:	d5f6      	bpl.n	80066d2 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 80066e4:	2000      	movs	r0, #0
}
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80066e8:	2001      	movs	r0, #1
}
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
 80066ec:	58024800 	.word	0x58024800

080066f0 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066f0:	4b3b      	ldr	r3, [pc, #236]	; (80067e0 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 80066f2:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80066f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80066f6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80066f8:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 80066fa:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80066fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006700:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8006704:	d038      	beq.n	8006778 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006706:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800670a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800670e:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006712:	fb05 f101 	mul.w	r1, r5, r1
 8006716:	2a01      	cmp	r2, #1
 8006718:	ee07 1a90 	vmov	s15, r1
 800671c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 8006720:	d002      	beq.n	8006728 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 8006722:	2a02      	cmp	r2, #2
 8006724:	d04e      	beq.n	80067c4 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 8006726:	b34a      	cbz	r2, 800677c <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006728:	ee07 0a90 	vmov	s15, r0
 800672c:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 80067e4 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 8006730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	eec5 6a27 	vdiv.f32	s13, s10, s15
 800673a:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80067e8 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800673e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006742:	ee07 3a90 	vmov	s15, r3
 8006746:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800674a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800674e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006752:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006756:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800675a:	4b21      	ldr	r3, [pc, #132]	; (80067e0 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800675c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006762:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006764:	ee07 3a90 	vmov	s15, r3
 8006768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800676c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006774:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8006778:	bc30      	pop	{r4, r5}
 800677a:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	0692      	lsls	r2, r2, #26
 8006780:	d527      	bpl.n	80067d2 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006782:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006784:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006788:	4a18      	ldr	r2, [pc, #96]	; (80067ec <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800678a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800678e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006790:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006798:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80067e8 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800679c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80067a0:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067a2:	ee06 3a90 	vmov	s13, r3
 80067a6:	ee06 2a10 	vmov	s12, r2
 80067aa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80067ae:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80067b2:	eee7 6a05 	vfma.f32	s13, s14, s10
 80067b6:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80067ba:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80067be:	ee66 6a87 	vmul.f32	s13, s13, s14
 80067c2:	e7ca      	b.n	800675a <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067c4:	ee07 0a90 	vmov	s15, r0
 80067c8:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80067f0 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 80067cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067d0:	e7b0      	b.n	8006734 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067d2:	ee07 0a90 	vmov	s15, r0
 80067d6:	ed9f 5a07 	vldr	s10, [pc, #28]	; 80067f4 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 80067da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067de:	e7a9      	b.n	8006734 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 80067e0:	58024400 	.word	0x58024400
 80067e4:	4a742400 	.word	0x4a742400
 80067e8:	39000000 	.word	0x39000000
 80067ec:	03d09000 	.word	0x03d09000
 80067f0:	4bbebc20 	.word	0x4bbebc20
 80067f4:	4c742400 	.word	0x4c742400

080067f8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80067f8:	2800      	cmp	r0, #0
 80067fa:	f000 81ef 	beq.w	8006bdc <HAL_RCC_OscConfig+0x3e4>
{
 80067fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006800:	6803      	ldr	r3, [r0, #0]
 8006802:	4604      	mov	r4, r0
 8006804:	07d9      	lsls	r1, r3, #31
 8006806:	d52e      	bpl.n	8006866 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006808:	49a4      	ldr	r1, [pc, #656]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
 800680a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800680c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800680e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006812:	2a10      	cmp	r2, #16
 8006814:	f000 8107 	beq.w	8006a26 <HAL_RCC_OscConfig+0x22e>
 8006818:	2a18      	cmp	r2, #24
 800681a:	f000 80ff 	beq.w	8006a1c <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800681e:	6863      	ldr	r3, [r4, #4]
 8006820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006824:	f000 812a 	beq.w	8006a7c <HAL_RCC_OscConfig+0x284>
 8006828:	2b00      	cmp	r3, #0
 800682a:	f040 8188 	bne.w	8006b3e <HAL_RCC_OscConfig+0x346>
 800682e:	4b9b      	ldr	r3, [pc, #620]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800683e:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006840:	6863      	ldr	r3, [r4, #4]
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 815c 	beq.w	8006b00 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 8006848:	f7fd f954 	bl	8003af4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800684c:	4e93      	ldr	r6, [pc, #588]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800684e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006850:	e005      	b.n	800685e <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006852:	f7fd f94f 	bl	8003af4 <HAL_GetTick>
 8006856:	1b40      	subs	r0, r0, r5
 8006858:	2864      	cmp	r0, #100	; 0x64
 800685a:	f200 814f 	bhi.w	8006afc <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800685e:	6833      	ldr	r3, [r6, #0]
 8006860:	039b      	lsls	r3, r3, #14
 8006862:	d5f6      	bpl.n	8006852 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	079d      	lsls	r5, r3, #30
 8006868:	f100 808a 	bmi.w	8006980 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800686c:	06d9      	lsls	r1, r3, #27
 800686e:	d533      	bpl.n	80068d8 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006870:	4a8a      	ldr	r2, [pc, #552]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
 8006872:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006874:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006876:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800687a:	2b08      	cmp	r3, #8
 800687c:	f000 80e3 	beq.w	8006a46 <HAL_RCC_OscConfig+0x24e>
 8006880:	2b18      	cmp	r3, #24
 8006882:	f000 80db 	beq.w	8006a3c <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006886:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8006888:	4d84      	ldr	r5, [pc, #528]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 8176 	beq.w	8006b7c <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
 8006890:	682b      	ldr	r3, [r5, #0]
 8006892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006896:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006898:	f7fd f92c 	bl	8003af4 <HAL_GetTick>
 800689c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800689e:	e005      	b.n	80068ac <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80068a0:	f7fd f928 	bl	8003af4 <HAL_GetTick>
 80068a4:	1b80      	subs	r0, r0, r6
 80068a6:	2802      	cmp	r0, #2
 80068a8:	f200 8128 	bhi.w	8006afc <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	05db      	lsls	r3, r3, #23
 80068b0:	d5f6      	bpl.n	80068a0 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068b2:	f7fd f937 	bl	8003b24 <HAL_GetREVID>
 80068b6:	f241 0303 	movw	r3, #4099	; 0x1003
 80068ba:	4298      	cmp	r0, r3
 80068bc:	f200 8266 	bhi.w	8006d8c <HAL_RCC_OscConfig+0x594>
 80068c0:	6a22      	ldr	r2, [r4, #32]
 80068c2:	686b      	ldr	r3, [r5, #4]
 80068c4:	2a20      	cmp	r2, #32
 80068c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80068ca:	bf0c      	ite	eq
 80068cc:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80068d0:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80068d4:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	071d      	lsls	r5, r3, #28
 80068da:	d516      	bpl.n	800690a <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068dc:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80068de:	4d6f      	ldr	r5, [pc, #444]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 811b 	beq.w	8006b1c <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
 80068e6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80068e8:	f043 0301 	orr.w	r3, r3, #1
 80068ec:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80068ee:	f7fd f901 	bl	8003af4 <HAL_GetTick>
 80068f2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80068f4:	e005      	b.n	8006902 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068f6:	f7fd f8fd 	bl	8003af4 <HAL_GetTick>
 80068fa:	1b80      	subs	r0, r0, r6
 80068fc:	2802      	cmp	r0, #2
 80068fe:	f200 80fd 	bhi.w	8006afc <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006902:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006904:	0798      	lsls	r0, r3, #30
 8006906:	d5f6      	bpl.n	80068f6 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006908:	6823      	ldr	r3, [r4, #0]
 800690a:	069a      	lsls	r2, r3, #26
 800690c:	d516      	bpl.n	800693c <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800690e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8006910:	4d62      	ldr	r5, [pc, #392]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006912:	2b00      	cmp	r3, #0
 8006914:	f000 8121 	beq.w	8006b5a <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800691e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006920:	f7fd f8e8 	bl	8003af4 <HAL_GetTick>
 8006924:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006926:	e005      	b.n	8006934 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006928:	f7fd f8e4 	bl	8003af4 <HAL_GetTick>
 800692c:	1b80      	subs	r0, r0, r6
 800692e:	2802      	cmp	r0, #2
 8006930:	f200 80e4 	bhi.w	8006afc <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	049f      	lsls	r7, r3, #18
 8006938:	d5f6      	bpl.n	8006928 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800693a:	6823      	ldr	r3, [r4, #0]
 800693c:	0759      	lsls	r1, r3, #29
 800693e:	f100 80a3 	bmi.w	8006a88 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006942:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006944:	b1d0      	cbz	r0, 800697c <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006946:	4d55      	ldr	r5, [pc, #340]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
 8006948:	692b      	ldr	r3, [r5, #16]
 800694a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800694e:	2b18      	cmp	r3, #24
 8006950:	f000 81b6 	beq.w	8006cc0 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 8006954:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006956:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8006958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800695c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800695e:	f000 8149 	beq.w	8006bf4 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
 8006962:	f7fd f8c7 	bl	8003af4 <HAL_GetTick>
 8006966:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006968:	e005      	b.n	8006976 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800696a:	f7fd f8c3 	bl	8003af4 <HAL_GetTick>
 800696e:	1b00      	subs	r0, r0, r4
 8006970:	2802      	cmp	r0, #2
 8006972:	f200 80c3 	bhi.w	8006afc <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006976:	682b      	ldr	r3, [r5, #0]
 8006978:	019b      	lsls	r3, r3, #6
 800697a:	d4f6      	bmi.n	800696a <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 800697c:	2000      	movs	r0, #0
}
 800697e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006980:	4a46      	ldr	r2, [pc, #280]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
 8006982:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006984:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006986:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800698a:	d12d      	bne.n	80069e8 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800698c:	4b43      	ldr	r3, [pc, #268]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
 800698e:	68e2      	ldr	r2, [r4, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	0759      	lsls	r1, r3, #29
 8006994:	d501      	bpl.n	800699a <HAL_RCC_OscConfig+0x1a2>
 8006996:	2a00      	cmp	r2, #0
 8006998:	d04e      	beq.n	8006a38 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800699a:	4d40      	ldr	r5, [pc, #256]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
 800699c:	682b      	ldr	r3, [r5, #0]
 800699e:	f023 0319 	bic.w	r3, r3, #25
 80069a2:	4313      	orrs	r3, r2
 80069a4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80069a6:	f7fd f8a5 	bl	8003af4 <HAL_GetTick>
 80069aa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069ac:	e005      	b.n	80069ba <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069ae:	f7fd f8a1 	bl	8003af4 <HAL_GetTick>
 80069b2:	1b80      	subs	r0, r0, r6
 80069b4:	2802      	cmp	r0, #2
 80069b6:	f200 80a1 	bhi.w	8006afc <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069ba:	682b      	ldr	r3, [r5, #0]
 80069bc:	075b      	lsls	r3, r3, #29
 80069be:	d5f6      	bpl.n	80069ae <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069c0:	f7fd f8b0 	bl	8003b24 <HAL_GetREVID>
 80069c4:	f241 0303 	movw	r3, #4099	; 0x1003
 80069c8:	4298      	cmp	r0, r3
 80069ca:	f200 80fe 	bhi.w	8006bca <HAL_RCC_OscConfig+0x3d2>
 80069ce:	6922      	ldr	r2, [r4, #16]
 80069d0:	686b      	ldr	r3, [r5, #4]
 80069d2:	2a40      	cmp	r2, #64	; 0x40
 80069d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80069d8:	bf0c      	ite	eq
 80069da:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 80069de:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 80069e2:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	e741      	b.n	800686c <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80069e8:	2b18      	cmp	r3, #24
 80069ea:	f000 80ea 	beq.w	8006bc2 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069ee:	4d2b      	ldr	r5, [pc, #172]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069f0:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069f2:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80069f4:	2a00      	cmp	r2, #0
 80069f6:	f000 80d3 	beq.w	8006ba0 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069fa:	f023 0319 	bic.w	r3, r3, #25
 80069fe:	4313      	orrs	r3, r2
 8006a00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006a02:	f7fd f877 	bl	8003af4 <HAL_GetTick>
 8006a06:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a08:	e004      	b.n	8006a14 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a0a:	f7fd f873 	bl	8003af4 <HAL_GetTick>
 8006a0e:	1b80      	subs	r0, r0, r6
 8006a10:	2802      	cmp	r0, #2
 8006a12:	d873      	bhi.n	8006afc <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	075f      	lsls	r7, r3, #29
 8006a18:	d5f7      	bpl.n	8006a0a <HAL_RCC_OscConfig+0x212>
 8006a1a:	e7d1      	b.n	80069c0 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006a1c:	f001 0103 	and.w	r1, r1, #3
 8006a20:	2902      	cmp	r1, #2
 8006a22:	f47f aefc 	bne.w	800681e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a26:	4a1d      	ldr	r2, [pc, #116]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
 8006a28:	6812      	ldr	r2, [r2, #0]
 8006a2a:	0392      	lsls	r2, r2, #14
 8006a2c:	f57f af1b 	bpl.w	8006866 <HAL_RCC_OscConfig+0x6e>
 8006a30:	6862      	ldr	r2, [r4, #4]
 8006a32:	2a00      	cmp	r2, #0
 8006a34:	f47f af17 	bne.w	8006866 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 8006a38:	2001      	movs	r0, #1
}
 8006a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a3c:	f002 0203 	and.w	r2, r2, #3
 8006a40:	2a01      	cmp	r2, #1
 8006a42:	f47f af20 	bne.w	8006886 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a46:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	05da      	lsls	r2, r3, #23
 8006a4c:	d502      	bpl.n	8006a54 <HAL_RCC_OscConfig+0x25c>
 8006a4e:	69e3      	ldr	r3, [r4, #28]
 8006a50:	2b80      	cmp	r3, #128	; 0x80
 8006a52:	d1f1      	bne.n	8006a38 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a54:	f7fd f866 	bl	8003b24 <HAL_GetREVID>
 8006a58:	f241 0303 	movw	r3, #4099	; 0x1003
 8006a5c:	4298      	cmp	r0, r3
 8006a5e:	f200 80bf 	bhi.w	8006be0 <HAL_RCC_OscConfig+0x3e8>
 8006a62:	6a22      	ldr	r2, [r4, #32]
 8006a64:	2a20      	cmp	r2, #32
 8006a66:	f000 81ad 	beq.w	8006dc4 <HAL_RCC_OscConfig+0x5cc>
 8006a6a:	490c      	ldr	r1, [pc, #48]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
 8006a6c:	684b      	ldr	r3, [r1, #4]
 8006a6e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a72:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006a76:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	e72d      	b.n	80068d8 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a7c:	4a07      	ldr	r2, [pc, #28]	; (8006a9c <HAL_RCC_OscConfig+0x2a4>)
 8006a7e:	6813      	ldr	r3, [r2, #0]
 8006a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	e6db      	b.n	8006840 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 8006a88:	4d05      	ldr	r5, [pc, #20]	; (8006aa0 <HAL_RCC_OscConfig+0x2a8>)
 8006a8a:	682b      	ldr	r3, [r5, #0]
 8006a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a90:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006a92:	f7fd f82f 	bl	8003af4 <HAL_GetTick>
 8006a96:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a98:	e009      	b.n	8006aae <HAL_RCC_OscConfig+0x2b6>
 8006a9a:	bf00      	nop
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aa4:	f7fd f826 	bl	8003af4 <HAL_GetTick>
 8006aa8:	1b80      	subs	r0, r0, r6
 8006aaa:	2864      	cmp	r0, #100	; 0x64
 8006aac:	d826      	bhi.n	8006afc <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006aae:	682b      	ldr	r3, [r5, #0]
 8006ab0:	05da      	lsls	r2, r3, #23
 8006ab2:	d5f7      	bpl.n	8006aa4 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab4:	68a3      	ldr	r3, [r4, #8]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	f000 8171 	beq.w	8006d9e <HAL_RCC_OscConfig+0x5a6>
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f040 8174 	bne.w	8006daa <HAL_RCC_OscConfig+0x5b2>
 8006ac2:	4baa      	ldr	r3, [pc, #680]	; (8006d6c <HAL_RCC_OscConfig+0x574>)
 8006ac4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ac6:	f022 0201 	bic.w	r2, r2, #1
 8006aca:	671a      	str	r2, [r3, #112]	; 0x70
 8006acc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ace:	f022 0204 	bic.w	r2, r2, #4
 8006ad2:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ad4:	68a3      	ldr	r3, [r4, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 8140 	beq.w	8006d5c <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
 8006adc:	f7fd f80a 	bl	8003af4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ae0:	4ea2      	ldr	r6, [pc, #648]	; (8006d6c <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ae2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006ae6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ae8:	e004      	b.n	8006af4 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aea:	f7fd f803 	bl	8003af4 <HAL_GetTick>
 8006aee:	1b40      	subs	r0, r0, r5
 8006af0:	42b8      	cmp	r0, r7
 8006af2:	d803      	bhi.n	8006afc <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006af4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006af6:	079b      	lsls	r3, r3, #30
 8006af8:	d5f7      	bpl.n	8006aea <HAL_RCC_OscConfig+0x2f2>
 8006afa:	e722      	b.n	8006942 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 8006afc:	2003      	movs	r0, #3
}
 8006afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8006b00:	f7fc fff8 	bl	8003af4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b04:	4e99      	ldr	r6, [pc, #612]	; (8006d6c <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
 8006b06:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b08:	e004      	b.n	8006b14 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b0a:	f7fc fff3 	bl	8003af4 <HAL_GetTick>
 8006b0e:	1b40      	subs	r0, r0, r5
 8006b10:	2864      	cmp	r0, #100	; 0x64
 8006b12:	d8f3      	bhi.n	8006afc <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006b14:	6833      	ldr	r3, [r6, #0]
 8006b16:	039f      	lsls	r7, r3, #14
 8006b18:	d4f7      	bmi.n	8006b0a <HAL_RCC_OscConfig+0x312>
 8006b1a:	e6a3      	b.n	8006864 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 8006b1c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006b1e:	f023 0301 	bic.w	r3, r3, #1
 8006b22:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8006b24:	f7fc ffe6 	bl	8003af4 <HAL_GetTick>
 8006b28:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b2a:	e004      	b.n	8006b36 <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b2c:	f7fc ffe2 	bl	8003af4 <HAL_GetTick>
 8006b30:	1b80      	subs	r0, r0, r6
 8006b32:	2802      	cmp	r0, #2
 8006b34:	d8e2      	bhi.n	8006afc <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b36:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006b38:	0799      	lsls	r1, r3, #30
 8006b3a:	d4f7      	bmi.n	8006b2c <HAL_RCC_OscConfig+0x334>
 8006b3c:	e6e4      	b.n	8006908 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b42:	4b8a      	ldr	r3, [pc, #552]	; (8006d6c <HAL_RCC_OscConfig+0x574>)
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	f47f ae74 	bne.w	8006832 <HAL_RCC_OscConfig+0x3a>
 8006b4a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	e672      	b.n	8006840 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 8006b5a:	682b      	ldr	r3, [r5, #0]
 8006b5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b60:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8006b62:	f7fc ffc7 	bl	8003af4 <HAL_GetTick>
 8006b66:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006b68:	e004      	b.n	8006b74 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b6a:	f7fc ffc3 	bl	8003af4 <HAL_GetTick>
 8006b6e:	1b80      	subs	r0, r0, r6
 8006b70:	2802      	cmp	r0, #2
 8006b72:	d8c3      	bhi.n	8006afc <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	0498      	lsls	r0, r3, #18
 8006b78:	d4f7      	bmi.n	8006b6a <HAL_RCC_OscConfig+0x372>
 8006b7a:	e6de      	b.n	800693a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 8006b7c:	682b      	ldr	r3, [r5, #0]
 8006b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b82:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006b84:	f7fc ffb6 	bl	8003af4 <HAL_GetTick>
 8006b88:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b8a:	e004      	b.n	8006b96 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006b8c:	f7fc ffb2 	bl	8003af4 <HAL_GetTick>
 8006b90:	1b80      	subs	r0, r0, r6
 8006b92:	2802      	cmp	r0, #2
 8006b94:	d8b2      	bhi.n	8006afc <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b96:	682b      	ldr	r3, [r5, #0]
 8006b98:	05df      	lsls	r7, r3, #23
 8006b9a:	d4f7      	bmi.n	8006b8c <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	e69b      	b.n	80068d8 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8006ba0:	f023 0301 	bic.w	r3, r3, #1
 8006ba4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006ba6:	f7fc ffa5 	bl	8003af4 <HAL_GetTick>
 8006baa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bac:	e004      	b.n	8006bb8 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bae:	f7fc ffa1 	bl	8003af4 <HAL_GetTick>
 8006bb2:	1b80      	subs	r0, r0, r6
 8006bb4:	2802      	cmp	r0, #2
 8006bb6:	d8a1      	bhi.n	8006afc <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006bb8:	682b      	ldr	r3, [r5, #0]
 8006bba:	0758      	lsls	r0, r3, #29
 8006bbc:	d4f7      	bmi.n	8006bae <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	e654      	b.n	800686c <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006bc2:	0790      	lsls	r0, r2, #30
 8006bc4:	f47f af13 	bne.w	80069ee <HAL_RCC_OscConfig+0x1f6>
 8006bc8:	e6e0      	b.n	800698c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bca:	686b      	ldr	r3, [r5, #4]
 8006bcc:	6922      	ldr	r2, [r4, #16]
 8006bce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006bd2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006bd6:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	e647      	b.n	800686c <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 8006bdc:	2001      	movs	r0, #1
}
 8006bde:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006be0:	4a62      	ldr	r2, [pc, #392]	; (8006d6c <HAL_RCC_OscConfig+0x574>)
 8006be2:	6a21      	ldr	r1, [r4, #32]
 8006be4:	68d3      	ldr	r3, [r2, #12]
 8006be6:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006bea:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006bee:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	e671      	b.n	80068d8 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8006bf4:	f7fc ff7e 	bl	8003af4 <HAL_GetTick>
 8006bf8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bfa:	e005      	b.n	8006c08 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bfc:	f7fc ff7a 	bl	8003af4 <HAL_GetTick>
 8006c00:	1b80      	subs	r0, r0, r6
 8006c02:	2802      	cmp	r0, #2
 8006c04:	f63f af7a 	bhi.w	8006afc <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	0199      	lsls	r1, r3, #6
 8006c0c:	d4f6      	bmi.n	8006bfc <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c0e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8006c10:	4b57      	ldr	r3, [pc, #348]	; (8006d70 <HAL_RCC_OscConfig+0x578>)
 8006c12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006c14:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c16:	4957      	ldr	r1, [pc, #348]	; (8006d74 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c18:	4e54      	ldr	r6, [pc, #336]	; (8006d6c <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8006c1e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8006c22:	62ab      	str	r3, [r5, #40]	; 0x28
 8006c24:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	3a01      	subs	r2, #1
 8006c2c:	025b      	lsls	r3, r3, #9
 8006c2e:	0412      	lsls	r2, r2, #16
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006c36:	4313      	orrs	r3, r2
 8006c38:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c3a:	3a01      	subs	r2, #1
 8006c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c40:	4313      	orrs	r3, r2
 8006c42:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006c44:	3a01      	subs	r2, #1
 8006c46:	0612      	lsls	r2, r2, #24
 8006c48:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8006c50:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006c52:	f023 0301 	bic.w	r3, r3, #1
 8006c56:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c58:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006c5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006c5c:	4011      	ands	r1, r2
 8006c5e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 8006c62:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c64:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006c66:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006c68:	f023 030c 	bic.w	r3, r3, #12
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c70:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006c72:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006c74:	f023 0302 	bic.w	r3, r3, #2
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c7c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c82:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c84:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c8c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c92:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8006c94:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006c96:	f043 0301 	orr.w	r3, r3, #1
 8006c9a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ca2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006ca4:	f7fc ff26 	bl	8003af4 <HAL_GetTick>
 8006ca8:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006caa:	e005      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cac:	f7fc ff22 	bl	8003af4 <HAL_GetTick>
 8006cb0:	1b00      	subs	r0, r0, r4
 8006cb2:	2802      	cmp	r0, #2
 8006cb4:	f63f af22 	bhi.w	8006afc <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cb8:	6833      	ldr	r3, [r6, #0]
 8006cba:	019a      	lsls	r2, r3, #6
 8006cbc:	d5f6      	bpl.n	8006cac <HAL_RCC_OscConfig+0x4b4>
 8006cbe:	e65d      	b.n	800697c <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cc0:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006cc2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006cc4:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cc6:	f43f ae5a 	beq.w	800697e <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cca:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8006cd0:	428b      	cmp	r3, r1
 8006cd2:	f47f aeb1 	bne.w	8006a38 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cd6:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	f47f aeab 	bne.w	8006a38 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ce2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006ce4:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8006ce8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cea:	429a      	cmp	r2, r3
 8006cec:	f47f aea4 	bne.w	8006a38 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006cf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cf2:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8006cf6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	f47f ae9d 	bne.w	8006a38 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006cfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d00:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8006d04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d06:	429a      	cmp	r2, r3
 8006d08:	f47f ae96 	bne.w	8006a38 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d0e:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8006d12:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d14:	429e      	cmp	r6, r3
 8006d16:	f47f ae8f 	bne.w	8006a38 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006d1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006d1c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006d1e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006d22:	429a      	cmp	r2, r3
 8006d24:	f43f ae2a 	beq.w	800697c <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 8006d28:	4a10      	ldr	r2, [pc, #64]	; (8006d6c <HAL_RCC_OscConfig+0x574>)
 8006d2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006d2c:	f023 0301 	bic.w	r3, r3, #1
 8006d30:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 8006d32:	f7fc fedf 	bl	8003af4 <HAL_GetTick>
 8006d36:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006d38:	f7fc fedc 	bl	8003af4 <HAL_GetTick>
 8006d3c:	42a8      	cmp	r0, r5
 8006d3e:	d0fb      	beq.n	8006d38 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006d40:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
 8006d42:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006d44:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006d46:	4b0b      	ldr	r3, [pc, #44]	; (8006d74 <HAL_RCC_OscConfig+0x57c>)
 8006d48:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8006d4a:	4023      	ands	r3, r4
 8006d4c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006d50:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8006d52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006d54:	f043 0301 	orr.w	r3, r3, #1
 8006d58:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8006d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 8006d5c:	f7fc feca 	bl	8003af4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d60:	4e02      	ldr	r6, [pc, #8]	; (8006d6c <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d62:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006d66:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d68:	e00c      	b.n	8006d84 <HAL_RCC_OscConfig+0x58c>
 8006d6a:	bf00      	nop
 8006d6c:	58024400 	.word	0x58024400
 8006d70:	fffffc0c 	.word	0xfffffc0c
 8006d74:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d78:	f7fc febc 	bl	8003af4 <HAL_GetTick>
 8006d7c:	1b40      	subs	r0, r0, r5
 8006d7e:	42b8      	cmp	r0, r7
 8006d80:	f63f aebc 	bhi.w	8006afc <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d84:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8006d86:	0798      	lsls	r0, r3, #30
 8006d88:	d4f6      	bmi.n	8006d78 <HAL_RCC_OscConfig+0x580>
 8006d8a:	e5da      	b.n	8006942 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006d8c:	68eb      	ldr	r3, [r5, #12]
 8006d8e:	6a22      	ldr	r2, [r4, #32]
 8006d90:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006d94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8006d98:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	e59c      	b.n	80068d8 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d9e:	4a0e      	ldr	r2, [pc, #56]	; (8006dd8 <HAL_RCC_OscConfig+0x5e0>)
 8006da0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	6713      	str	r3, [r2, #112]	; 0x70
 8006da8:	e694      	b.n	8006ad4 <HAL_RCC_OscConfig+0x2dc>
 8006daa:	2b05      	cmp	r3, #5
 8006dac:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <HAL_RCC_OscConfig+0x5e0>)
 8006dae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006db0:	f47f ae89 	bne.w	8006ac6 <HAL_RCC_OscConfig+0x2ce>
 8006db4:	f042 0204 	orr.w	r2, r2, #4
 8006db8:	671a      	str	r2, [r3, #112]	; 0x70
 8006dba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006dbc:	f042 0201 	orr.w	r2, r2, #1
 8006dc0:	671a      	str	r2, [r3, #112]	; 0x70
 8006dc2:	e687      	b.n	8006ad4 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006dc4:	4a04      	ldr	r2, [pc, #16]	; (8006dd8 <HAL_RCC_OscConfig+0x5e0>)
 8006dc6:	6853      	ldr	r3, [r2, #4]
 8006dc8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006dcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dd0:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	e580      	b.n	80068d8 <HAL_RCC_OscConfig+0xe0>
 8006dd6:	bf00      	nop
 8006dd8:	58024400 	.word	0x58024400

08006ddc <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ddc:	4a0c      	ldr	r2, [pc, #48]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x34>)
 8006dde:	6913      	ldr	r3, [r2, #16]
 8006de0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006de4:	2b10      	cmp	r3, #16
 8006de6:	d004      	beq.n	8006df2 <HAL_RCC_GetSysClockFreq+0x16>
 8006de8:	2b18      	cmp	r3, #24
 8006dea:	d00d      	beq.n	8006e08 <HAL_RCC_GetSysClockFreq+0x2c>
 8006dec:	b11b      	cbz	r3, 8006df6 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 8006dee:	4809      	ldr	r0, [pc, #36]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x38>)
 8006df0:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006df2:	4809      	ldr	r0, [pc, #36]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x3c>)
 8006df4:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006df6:	6813      	ldr	r3, [r2, #0]
 8006df8:	069b      	lsls	r3, r3, #26
 8006dfa:	d507      	bpl.n	8006e0c <HAL_RCC_GetSysClockFreq+0x30>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dfc:	6813      	ldr	r3, [r2, #0]
 8006dfe:	4807      	ldr	r0, [pc, #28]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x40>)
 8006e00:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006e04:	40d8      	lsrs	r0, r3
 8006e06:	4770      	bx	lr
 8006e08:	f7ff bc72 	b.w	80066f0 <HAL_RCC_GetSysClockFreq.part.0>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006e0c:	4803      	ldr	r0, [pc, #12]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8006e0e:	4770      	bx	lr
 8006e10:	58024400 	.word	0x58024400
 8006e14:	003d0900 	.word	0x003d0900
 8006e18:	017d7840 	.word	0x017d7840
 8006e1c:	03d09000 	.word	0x03d09000

08006e20 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006e20:	2800      	cmp	r0, #0
 8006e22:	f000 811a 	beq.w	800705a <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e26:	4a92      	ldr	r2, [pc, #584]	; (8007070 <HAL_RCC_ClockConfig+0x250>)
{
 8006e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e2c:	6813      	ldr	r3, [r2, #0]
 8006e2e:	4604      	mov	r4, r0
 8006e30:	460d      	mov	r5, r1
 8006e32:	f003 030f 	and.w	r3, r3, #15
 8006e36:	428b      	cmp	r3, r1
 8006e38:	d20c      	bcs.n	8006e54 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e3a:	6813      	ldr	r3, [r2, #0]
 8006e3c:	f023 030f 	bic.w	r3, r3, #15
 8006e40:	430b      	orrs	r3, r1
 8006e42:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e44:	6813      	ldr	r3, [r2, #0]
 8006e46:	f003 030f 	and.w	r3, r3, #15
 8006e4a:	428b      	cmp	r3, r1
 8006e4c:	d002      	beq.n	8006e54 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8006e4e:	2001      	movs	r0, #1
}
 8006e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	075f      	lsls	r7, r3, #29
 8006e58:	d50c      	bpl.n	8006e74 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e5a:	4986      	ldr	r1, [pc, #536]	; (8007074 <HAL_RCC_ClockConfig+0x254>)
 8006e5c:	6920      	ldr	r0, [r4, #16]
 8006e5e:	698a      	ldr	r2, [r1, #24]
 8006e60:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006e64:	4290      	cmp	r0, r2
 8006e66:	d905      	bls.n	8006e74 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e68:	698b      	ldr	r3, [r1, #24]
 8006e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6e:	4303      	orrs	r3, r0
 8006e70:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	071e      	lsls	r6, r3, #28
 8006e76:	d50c      	bpl.n	8006e92 <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e78:	497e      	ldr	r1, [pc, #504]	; (8007074 <HAL_RCC_ClockConfig+0x254>)
 8006e7a:	6960      	ldr	r0, [r4, #20]
 8006e7c:	69ca      	ldr	r2, [r1, #28]
 8006e7e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006e82:	4290      	cmp	r0, r2
 8006e84:	d905      	bls.n	8006e92 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e86:	69cb      	ldr	r3, [r1, #28]
 8006e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8c:	4303      	orrs	r3, r0
 8006e8e:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e90:	6823      	ldr	r3, [r4, #0]
 8006e92:	06d8      	lsls	r0, r3, #27
 8006e94:	d50c      	bpl.n	8006eb0 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e96:	4977      	ldr	r1, [pc, #476]	; (8007074 <HAL_RCC_ClockConfig+0x254>)
 8006e98:	69a0      	ldr	r0, [r4, #24]
 8006e9a:	69ca      	ldr	r2, [r1, #28]
 8006e9c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006ea0:	4290      	cmp	r0, r2
 8006ea2:	d905      	bls.n	8006eb0 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ea4:	69cb      	ldr	r3, [r1, #28]
 8006ea6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006eaa:	4303      	orrs	r3, r0
 8006eac:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006eae:	6823      	ldr	r3, [r4, #0]
 8006eb0:	0699      	lsls	r1, r3, #26
 8006eb2:	d50c      	bpl.n	8006ece <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006eb4:	496f      	ldr	r1, [pc, #444]	; (8007074 <HAL_RCC_ClockConfig+0x254>)
 8006eb6:	69e0      	ldr	r0, [r4, #28]
 8006eb8:	6a0a      	ldr	r2, [r1, #32]
 8006eba:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006ebe:	4290      	cmp	r0, r2
 8006ec0:	d905      	bls.n	8006ece <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006ec2:	6a0b      	ldr	r3, [r1, #32]
 8006ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec8:	4303      	orrs	r3, r0
 8006eca:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	079a      	lsls	r2, r3, #30
 8006ed0:	f140 8083 	bpl.w	8006fda <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ed4:	4867      	ldr	r0, [pc, #412]	; (8007074 <HAL_RCC_ClockConfig+0x254>)
 8006ed6:	68e1      	ldr	r1, [r4, #12]
 8006ed8:	6982      	ldr	r2, [r0, #24]
 8006eda:	f002 020f 	and.w	r2, r2, #15
 8006ede:	4291      	cmp	r1, r2
 8006ee0:	f240 80a9 	bls.w	8007036 <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ee4:	6983      	ldr	r3, [r0, #24]
 8006ee6:	f023 030f 	bic.w	r3, r3, #15
 8006eea:	430b      	orrs	r3, r1
 8006eec:	6183      	str	r3, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	07df      	lsls	r7, r3, #31
 8006ef2:	d474      	bmi.n	8006fde <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ef4:	079f      	lsls	r7, r3, #30
 8006ef6:	d507      	bpl.n	8006f08 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006ef8:	4a5e      	ldr	r2, [pc, #376]	; (8007074 <HAL_RCC_ClockConfig+0x254>)
 8006efa:	68e1      	ldr	r1, [r4, #12]
 8006efc:	6993      	ldr	r3, [r2, #24]
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	428b      	cmp	r3, r1
 8006f04:	f200 80a0 	bhi.w	8007048 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f08:	4a59      	ldr	r2, [pc, #356]	; (8007070 <HAL_RCC_ClockConfig+0x250>)
 8006f0a:	6813      	ldr	r3, [r2, #0]
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	42ab      	cmp	r3, r5
 8006f12:	d909      	bls.n	8006f28 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f14:	6813      	ldr	r3, [r2, #0]
 8006f16:	f023 030f 	bic.w	r3, r3, #15
 8006f1a:	432b      	orrs	r3, r5
 8006f1c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f1e:	6813      	ldr	r3, [r2, #0]
 8006f20:	f003 030f 	and.w	r3, r3, #15
 8006f24:	42ab      	cmp	r3, r5
 8006f26:	d192      	bne.n	8006e4e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	075e      	lsls	r6, r3, #29
 8006f2c:	d50c      	bpl.n	8006f48 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f2e:	4951      	ldr	r1, [pc, #324]	; (8007074 <HAL_RCC_ClockConfig+0x254>)
 8006f30:	6920      	ldr	r0, [r4, #16]
 8006f32:	698a      	ldr	r2, [r1, #24]
 8006f34:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006f38:	4290      	cmp	r0, r2
 8006f3a:	d205      	bcs.n	8006f48 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f3c:	698b      	ldr	r3, [r1, #24]
 8006f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f42:	4303      	orrs	r3, r0
 8006f44:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	071d      	lsls	r5, r3, #28
 8006f4a:	d50c      	bpl.n	8006f66 <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f4c:	4949      	ldr	r1, [pc, #292]	; (8007074 <HAL_RCC_ClockConfig+0x254>)
 8006f4e:	6960      	ldr	r0, [r4, #20]
 8006f50:	69ca      	ldr	r2, [r1, #28]
 8006f52:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006f56:	4290      	cmp	r0, r2
 8006f58:	d205      	bcs.n	8006f66 <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f5a:	69cb      	ldr	r3, [r1, #28]
 8006f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f60:	4303      	orrs	r3, r0
 8006f62:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	06d8      	lsls	r0, r3, #27
 8006f68:	d50c      	bpl.n	8006f84 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006f6a:	4942      	ldr	r1, [pc, #264]	; (8007074 <HAL_RCC_ClockConfig+0x254>)
 8006f6c:	69a0      	ldr	r0, [r4, #24]
 8006f6e:	69ca      	ldr	r2, [r1, #28]
 8006f70:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8006f74:	4290      	cmp	r0, r2
 8006f76:	d205      	bcs.n	8006f84 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006f78:	69cb      	ldr	r3, [r1, #28]
 8006f7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006f7e:	4303      	orrs	r3, r0
 8006f80:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	0699      	lsls	r1, r3, #26
 8006f86:	d50b      	bpl.n	8006fa0 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006f88:	4a3a      	ldr	r2, [pc, #232]	; (8007074 <HAL_RCC_ClockConfig+0x254>)
 8006f8a:	69e1      	ldr	r1, [r4, #28]
 8006f8c:	6a13      	ldr	r3, [r2, #32]
 8006f8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f92:	4299      	cmp	r1, r3
 8006f94:	d204      	bcs.n	8006fa0 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f96:	6a13      	ldr	r3, [r2, #32]
 8006f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9c:	430b      	orrs	r3, r1
 8006f9e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fa0:	f7ff ff1c 	bl	8006ddc <HAL_RCC_GetSysClockFreq>
 8006fa4:	4a33      	ldr	r2, [pc, #204]	; (8007074 <HAL_RCC_ClockConfig+0x254>)
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	4833      	ldr	r0, [pc, #204]	; (8007078 <HAL_RCC_ClockConfig+0x258>)
 8006faa:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fac:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fae:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8006fb2:	4d32      	ldr	r5, [pc, #200]	; (800707c <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fb4:	f002 020f 	and.w	r2, r2, #15
 8006fb8:	4c31      	ldr	r4, [pc, #196]	; (8007080 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fba:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fbc:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fbe:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8006fc2:	4830      	ldr	r0, [pc, #192]	; (8007084 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fc4:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fc8:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8006fca:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8006fcc:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006fce:	40d3      	lsrs	r3, r2
 8006fd0:	6023      	str	r3, [r4, #0]
}
 8006fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8006fd6:	f7fc bd2b 	b.w	8003a30 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fda:	07db      	lsls	r3, r3, #31
 8006fdc:	d594      	bpl.n	8006f08 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006fde:	4a25      	ldr	r2, [pc, #148]	; (8007074 <HAL_RCC_ClockConfig+0x254>)
 8006fe0:	68a1      	ldr	r1, [r4, #8]
 8006fe2:	6993      	ldr	r3, [r2, #24]
 8006fe4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006fe8:	430b      	orrs	r3, r1
 8006fea:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fec:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fee:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ff0:	2902      	cmp	r1, #2
 8006ff2:	d034      	beq.n	800705e <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ff4:	2903      	cmp	r1, #3
 8006ff6:	d02d      	beq.n	8007054 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006ff8:	2901      	cmp	r1, #1
 8006ffa:	d035      	beq.n	8007068 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ffc:	075b      	lsls	r3, r3, #29
 8006ffe:	f57f af26 	bpl.w	8006e4e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007002:	4e1c      	ldr	r6, [pc, #112]	; (8007074 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007004:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007008:	6933      	ldr	r3, [r6, #16]
 800700a:	f023 0307 	bic.w	r3, r3, #7
 800700e:	430b      	orrs	r3, r1
 8007010:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8007012:	f7fc fd6f 	bl	8003af4 <HAL_GetTick>
 8007016:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007018:	e004      	b.n	8007024 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800701a:	f7fc fd6b 	bl	8003af4 <HAL_GetTick>
 800701e:	1bc0      	subs	r0, r0, r7
 8007020:	4540      	cmp	r0, r8
 8007022:	d81f      	bhi.n	8007064 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007024:	6933      	ldr	r3, [r6, #16]
 8007026:	6862      	ldr	r2, [r4, #4]
 8007028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800702c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007030:	d1f3      	bne.n	800701a <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	e75e      	b.n	8006ef4 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007036:	07da      	lsls	r2, r3, #31
 8007038:	d4d1      	bmi.n	8006fde <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800703a:	4a0e      	ldr	r2, [pc, #56]	; (8007074 <HAL_RCC_ClockConfig+0x254>)
 800703c:	6993      	ldr	r3, [r2, #24]
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	428b      	cmp	r3, r1
 8007044:	f67f af60 	bls.w	8006f08 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007048:	6993      	ldr	r3, [r2, #24]
 800704a:	f023 030f 	bic.w	r3, r3, #15
 800704e:	430b      	orrs	r3, r1
 8007050:	6193      	str	r3, [r2, #24]
 8007052:	e759      	b.n	8006f08 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007054:	0198      	lsls	r0, r3, #6
 8007056:	d4d4      	bmi.n	8007002 <HAL_RCC_ClockConfig+0x1e2>
 8007058:	e6f9      	b.n	8006e4e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800705a:	2001      	movs	r0, #1
}
 800705c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800705e:	039e      	lsls	r6, r3, #14
 8007060:	d4cf      	bmi.n	8007002 <HAL_RCC_ClockConfig+0x1e2>
 8007062:	e6f4      	b.n	8006e4e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8007064:	2003      	movs	r0, #3
 8007066:	e6f3      	b.n	8006e50 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007068:	05da      	lsls	r2, r3, #23
 800706a:	d4ca      	bmi.n	8007002 <HAL_RCC_ClockConfig+0x1e2>
 800706c:	e6ef      	b.n	8006e4e <HAL_RCC_ClockConfig+0x2e>
 800706e:	bf00      	nop
 8007070:	52002000 	.word	0x52002000
 8007074:	58024400 	.word	0x58024400
 8007078:	08019888 	.word	0x08019888
 800707c:	20000af0 	.word	0x20000af0
 8007080:	20000af4 	.word	0x20000af4
 8007084:	20000b3c 	.word	0x20000b3c

08007088 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007088:	4a18      	ldr	r2, [pc, #96]	; (80070ec <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800708a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800708c:	6913      	ldr	r3, [r2, #16]
 800708e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007092:	2b10      	cmp	r3, #16
 8007094:	d01a      	beq.n	80070cc <HAL_RCC_GetHCLKFreq+0x44>
 8007096:	2b18      	cmp	r3, #24
 8007098:	d023      	beq.n	80070e2 <HAL_RCC_GetHCLKFreq+0x5a>
 800709a:	b1cb      	cbz	r3, 80070d0 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 800709c:	4814      	ldr	r0, [pc, #80]	; (80070f0 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800709e:	4b13      	ldr	r3, [pc, #76]	; (80070ec <HAL_RCC_GetHCLKFreq+0x64>)
 80070a0:	4914      	ldr	r1, [pc, #80]	; (80070f4 <HAL_RCC_GetHCLKFreq+0x6c>)
 80070a2:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070a4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80070a6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070aa:	4c13      	ldr	r4, [pc, #76]	; (80070f8 <HAL_RCC_GetHCLKFreq+0x70>)
 80070ac:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070b0:	4d12      	ldr	r5, [pc, #72]	; (80070fc <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80070b2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070b4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80070b6:	f002 021f 	and.w	r2, r2, #31
 80070ba:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070be:	f003 001f 	and.w	r0, r3, #31
 80070c2:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 80070c6:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070c8:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070cc:	480c      	ldr	r0, [pc, #48]	; (8007100 <HAL_RCC_GetHCLKFreq+0x78>)
 80070ce:	e7e6      	b.n	800709e <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070d0:	6813      	ldr	r3, [r2, #0]
 80070d2:	069b      	lsls	r3, r3, #26
 80070d4:	d508      	bpl.n	80070e8 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070d6:	6813      	ldr	r3, [r2, #0]
 80070d8:	480a      	ldr	r0, [pc, #40]	; (8007104 <HAL_RCC_GetHCLKFreq+0x7c>)
 80070da:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80070de:	40d8      	lsrs	r0, r3
 80070e0:	e7dd      	b.n	800709e <HAL_RCC_GetHCLKFreq+0x16>
 80070e2:	f7ff fb05 	bl	80066f0 <HAL_RCC_GetSysClockFreq.part.0>
 80070e6:	e7da      	b.n	800709e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80070e8:	4806      	ldr	r0, [pc, #24]	; (8007104 <HAL_RCC_GetHCLKFreq+0x7c>)
 80070ea:	e7d8      	b.n	800709e <HAL_RCC_GetHCLKFreq+0x16>
 80070ec:	58024400 	.word	0x58024400
 80070f0:	003d0900 	.word	0x003d0900
 80070f4:	08019888 	.word	0x08019888
 80070f8:	20000af4 	.word	0x20000af4
 80070fc:	20000af0 	.word	0x20000af0
 8007100:	017d7840 	.word	0x017d7840
 8007104:	03d09000 	.word	0x03d09000

08007108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007108:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800710a:	f7ff ffbd 	bl	8007088 <HAL_RCC_GetHCLKFreq>
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007110:	4a05      	ldr	r2, [pc, #20]	; (8007128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007118:	5cd3      	ldrb	r3, [r2, r3]
 800711a:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800711e:	40d8      	lsrs	r0, r3
 8007120:	bd08      	pop	{r3, pc}
 8007122:	bf00      	nop
 8007124:	58024400 	.word	0x58024400
 8007128:	08019888 	.word	0x08019888

0800712c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800712e:	4c3a      	ldr	r4, [pc, #232]	; (8007218 <RCCEx_PLL2_Config+0xec>)
 8007130:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	2b03      	cmp	r3, #3
 8007138:	d067      	beq.n	800720a <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	4606      	mov	r6, r0
 800713e:	460f      	mov	r7, r1
 8007140:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007144:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007146:	f7fc fcd5 	bl	8003af4 <HAL_GetTick>
 800714a:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800714c:	e004      	b.n	8007158 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800714e:	f7fc fcd1 	bl	8003af4 <HAL_GetTick>
 8007152:	1b43      	subs	r3, r0, r5
 8007154:	2b02      	cmp	r3, #2
 8007156:	d856      	bhi.n	8007206 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007158:	6823      	ldr	r3, [r4, #0]
 800715a:	011a      	lsls	r2, r3, #4
 800715c:	d4f7      	bmi.n	800714e <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800715e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007160:	6832      	ldr	r2, [r6, #0]
 8007162:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007166:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800716a:	62a3      	str	r3, [r4, #40]	; 0x28
 800716c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8007170:	3b01      	subs	r3, #1
 8007172:	3a01      	subs	r2, #1
 8007174:	025b      	lsls	r3, r3, #9
 8007176:	0412      	lsls	r2, r2, #16
 8007178:	b29b      	uxth	r3, r3
 800717a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800717e:	4313      	orrs	r3, r2
 8007180:	6872      	ldr	r2, [r6, #4]
 8007182:	3a01      	subs	r2, #1
 8007184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007188:	4313      	orrs	r3, r2
 800718a:	6932      	ldr	r2, [r6, #16]
 800718c:	3a01      	subs	r2, #1
 800718e:	0612      	lsls	r2, r2, #24
 8007190:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007194:	4313      	orrs	r3, r2
 8007196:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007198:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800719a:	6972      	ldr	r2, [r6, #20]
 800719c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071a0:	4313      	orrs	r3, r2
 80071a2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80071a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80071a6:	69b3      	ldr	r3, [r6, #24]
 80071a8:	f022 0220 	bic.w	r2, r2, #32
 80071ac:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80071ae:	4b1b      	ldr	r3, [pc, #108]	; (800721c <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80071b0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 80071b2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80071b4:	f022 0210 	bic.w	r2, r2, #16
 80071b8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80071ba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80071bc:	69f2      	ldr	r2, [r6, #28]
 80071be:	400b      	ands	r3, r1
 80071c0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80071c4:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80071c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80071c8:	f043 0310 	orr.w	r3, r3, #16
 80071cc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80071ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80071d0:	b1ef      	cbz	r7, 800720e <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071d2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80071d4:	bf0c      	ite	eq
 80071d6:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80071da:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 80071de:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80071e0:	4c0d      	ldr	r4, [pc, #52]	; (8007218 <RCCEx_PLL2_Config+0xec>)
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071e8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ea:	f7fc fc83 	bl	8003af4 <HAL_GetTick>
 80071ee:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071f0:	e004      	b.n	80071fc <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071f2:	f7fc fc7f 	bl	8003af4 <HAL_GetTick>
 80071f6:	1b40      	subs	r0, r0, r5
 80071f8:	2802      	cmp	r0, #2
 80071fa:	d804      	bhi.n	8007206 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	d5f7      	bpl.n	80071f2 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8007202:	2000      	movs	r0, #0
}
 8007204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8007206:	2003      	movs	r0, #3
}
 8007208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800720a:	2001      	movs	r0, #1
}
 800720c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800720e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007212:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007214:	e7e4      	b.n	80071e0 <RCCEx_PLL2_Config+0xb4>
 8007216:	bf00      	nop
 8007218:	58024400 	.word	0x58024400
 800721c:	ffff0007 	.word	0xffff0007

08007220 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007222:	4c3a      	ldr	r4, [pc, #232]	; (800730c <RCCEx_PLL3_Config+0xec>)
 8007224:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	2b03      	cmp	r3, #3
 800722c:	d067      	beq.n	80072fe <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	4606      	mov	r6, r0
 8007232:	460f      	mov	r7, r1
 8007234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007238:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800723a:	f7fc fc5b 	bl	8003af4 <HAL_GetTick>
 800723e:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007240:	e004      	b.n	800724c <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007242:	f7fc fc57 	bl	8003af4 <HAL_GetTick>
 8007246:	1b43      	subs	r3, r0, r5
 8007248:	2b02      	cmp	r3, #2
 800724a:	d856      	bhi.n	80072fa <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	009a      	lsls	r2, r3, #2
 8007250:	d4f7      	bmi.n	8007242 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007252:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007254:	6832      	ldr	r2, [r6, #0]
 8007256:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800725a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800725e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007260:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8007264:	3b01      	subs	r3, #1
 8007266:	3a01      	subs	r2, #1
 8007268:	025b      	lsls	r3, r3, #9
 800726a:	0412      	lsls	r2, r2, #16
 800726c:	b29b      	uxth	r3, r3
 800726e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007272:	4313      	orrs	r3, r2
 8007274:	6872      	ldr	r2, [r6, #4]
 8007276:	3a01      	subs	r2, #1
 8007278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800727c:	4313      	orrs	r3, r2
 800727e:	6932      	ldr	r2, [r6, #16]
 8007280:	3a01      	subs	r2, #1
 8007282:	0612      	lsls	r2, r2, #24
 8007284:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007288:	4313      	orrs	r3, r2
 800728a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800728c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800728e:	6972      	ldr	r2, [r6, #20]
 8007290:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007294:	4313      	orrs	r3, r2
 8007296:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007298:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800729a:	69b3      	ldr	r3, [r6, #24]
 800729c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80072a0:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80072a2:	4b1b      	ldr	r3, [pc, #108]	; (8007310 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80072a4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80072a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80072a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072ac:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80072ae:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80072b0:	69f2      	ldr	r2, [r6, #28]
 80072b2:	400b      	ands	r3, r1
 80072b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80072b8:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80072ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80072bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072c0:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80072c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80072c4:	b1ef      	cbz	r7, 8007302 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072c6:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072c8:	bf0c      	ite	eq
 80072ca:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80072ce:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80072d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80072d4:	4c0d      	ldr	r4, [pc, #52]	; (800730c <RCCEx_PLL3_Config+0xec>)
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072dc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072de:	f7fc fc09 	bl	8003af4 <HAL_GetTick>
 80072e2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072e4:	e004      	b.n	80072f0 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072e6:	f7fc fc05 	bl	8003af4 <HAL_GetTick>
 80072ea:	1b40      	subs	r0, r0, r5
 80072ec:	2802      	cmp	r0, #2
 80072ee:	d804      	bhi.n	80072fa <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072f0:	6823      	ldr	r3, [r4, #0]
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	d5f7      	bpl.n	80072e6 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 80072f6:	2000      	movs	r0, #0
}
 80072f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 80072fa:	2003      	movs	r0, #3
}
 80072fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80072fe:	2001      	movs	r0, #1
}
 8007300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007302:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007306:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007308:	e7e4      	b.n	80072d4 <RCCEx_PLL3_Config+0xb4>
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
 8007310:	ffff0007 	.word	0xffff0007

08007314 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007318:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800731c:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800731e:	011d      	lsls	r5, r3, #4
 8007320:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8007324:	d521      	bpl.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007326:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8007328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800732c:	f000 8577 	beq.w	8007e1e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007330:	d80e      	bhi.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007332:	2900      	cmp	r1, #0
 8007334:	f000 85d2 	beq.w	8007edc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
 8007338:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800733c:	f040 85cb 	bne.w	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007340:	2102      	movs	r1, #2
 8007342:	3008      	adds	r0, #8
 8007344:	f7ff fef2 	bl	800712c <RCCEx_PLL2_Config>
 8007348:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800734a:	b966      	cbnz	r6, 8007366 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800734c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800734e:	e003      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007350:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8007354:	f040 85bf 	bne.w	8007ed6 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007358:	4aa3      	ldr	r2, [pc, #652]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800735a:	2600      	movs	r6, #0
 800735c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800735e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007362:	430b      	orrs	r3, r1
 8007364:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007366:	e9d4 3200 	ldrd	r3, r2, [r4]
 800736a:	05d8      	lsls	r0, r3, #23
 800736c:	d50a      	bpl.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 800736e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007370:	2904      	cmp	r1, #4
 8007372:	d806      	bhi.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007374:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007378:	0564055d 	.word	0x0564055d
 800737c:	0310057b 	.word	0x0310057b
 8007380:	0310      	.short	0x0310
 8007382:	2601      	movs	r6, #1
 8007384:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007386:	0599      	lsls	r1, r3, #22
 8007388:	d517      	bpl.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800738a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800738c:	2980      	cmp	r1, #128	; 0x80
 800738e:	f000 8575 	beq.w	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8007392:	f200 80e1 	bhi.w	8007558 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007396:	2900      	cmp	r1, #0
 8007398:	f000 8446 	beq.w	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x914>
 800739c:	2940      	cmp	r1, #64	; 0x40
 800739e:	f040 80e2 	bne.w	8007566 <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073a2:	2100      	movs	r1, #0
 80073a4:	f104 0008 	add.w	r0, r4, #8
 80073a8:	f7ff fec0 	bl	800712c <RCCEx_PLL2_Config>
 80073ac:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80073ae:	2d00      	cmp	r5, #0
 80073b0:	f000 83f6 	beq.w	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80073b4:	462e      	mov	r6, r5
 80073b6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80073ba:	055f      	lsls	r7, r3, #21
 80073bc:	d51a      	bpl.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
 80073be:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80073c2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80073c6:	f000 8522 	beq.w	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xafa>
 80073ca:	f200 80cf 	bhi.w	800756c <HAL_RCCEx_PeriphCLKConfig+0x258>
 80073ce:	2900      	cmp	r1, #0
 80073d0:	f000 8431 	beq.w	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x922>
 80073d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80073d8:	f040 80d0 	bne.w	800757c <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073dc:	2100      	movs	r1, #0
 80073de:	f104 0008 	add.w	r0, r4, #8
 80073e2:	f7ff fea3 	bl	800712c <RCCEx_PLL2_Config>
 80073e6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80073e8:	2d00      	cmp	r5, #0
 80073ea:	f000 83f8 	beq.w	8007bde <HAL_RCCEx_PeriphCLKConfig+0x8ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80073ee:	462e      	mov	r6, r5
 80073f0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80073f4:	0518      	lsls	r0, r3, #20
 80073f6:	d51a      	bpl.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
 80073f8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80073fc:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8007400:	f000 852d 	beq.w	8007e5e <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 8007404:	f200 80bd 	bhi.w	8007582 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007408:	2900      	cmp	r1, #0
 800740a:	f000 8406 	beq.w	8007c1a <HAL_RCCEx_PeriphCLKConfig+0x906>
 800740e:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8007412:	f040 80be 	bne.w	8007592 <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007416:	2100      	movs	r1, #0
 8007418:	f104 0008 	add.w	r0, r4, #8
 800741c:	f7ff fe86 	bl	800712c <RCCEx_PLL2_Config>
 8007420:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007422:	2d00      	cmp	r5, #0
 8007424:	f000 83b1 	beq.w	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007428:	462e      	mov	r6, r5
 800742a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800742e:	0199      	lsls	r1, r3, #6
 8007430:	d51a      	bpl.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
 8007432:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007434:	2920      	cmp	r1, #32
 8007436:	f000 84b4 	beq.w	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 800743a:	f200 80ad 	bhi.w	8007598 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800743e:	b139      	cbz	r1, 8007450 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007440:	2910      	cmp	r1, #16
 8007442:	f040 80ac 	bne.w	800759e <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007446:	4a68      	ldr	r2, [pc, #416]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007448:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800744a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800744e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007450:	2d00      	cmp	r5, #0
 8007452:	f040 8418 	bne.w	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007456:	4a64      	ldr	r2, [pc, #400]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007458:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800745a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800745c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007460:	430b      	orrs	r3, r1
 8007462:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007464:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007468:	04df      	lsls	r7, r3, #19
 800746a:	d519      	bpl.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
 800746c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800746e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8007472:	f000 84ec 	beq.w	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xb3a>
 8007476:	f200 8095 	bhi.w	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x290>
 800747a:	2900      	cmp	r1, #0
 800747c:	f000 83c7 	beq.w	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 8007480:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007484:	f040 8096 	bne.w	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007488:	2100      	movs	r1, #0
 800748a:	f104 0008 	add.w	r0, r4, #8
 800748e:	f7ff fe4d 	bl	800712c <RCCEx_PLL2_Config>
 8007492:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007494:	2d00      	cmp	r5, #0
 8007496:	f000 838d 	beq.w	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800749a:	462e      	mov	r6, r5
 800749c:	e9d4 3200 	ldrd	r3, r2, [r4]
 80074a0:	0498      	lsls	r0, r3, #18
 80074a2:	d51d      	bpl.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
 80074a4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80074a6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80074aa:	f000 8466 	beq.w	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xa66>
 80074ae:	f200 8084 	bhi.w	80075ba <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80074b2:	b149      	cbz	r1, 80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80074b4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80074b8:	f040 8088 	bne.w	80075cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074bc:	2101      	movs	r1, #1
 80074be:	f104 0008 	add.w	r0, r4, #8
 80074c2:	f7ff fe33 	bl	800712c <RCCEx_PLL2_Config>
 80074c6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80074c8:	2d00      	cmp	r5, #0
 80074ca:	f040 83eb 	bne.w	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80074ce:	4a46      	ldr	r2, [pc, #280]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074d0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80074d2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80074d4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80074d8:	430b      	orrs	r3, r1
 80074da:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80074dc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80074e0:	0459      	lsls	r1, r3, #17
 80074e2:	d51d      	bpl.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
 80074e4:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80074e8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80074ec:	f000 844f 	beq.w	8007d8e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80074f0:	d86f      	bhi.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80074f2:	b141      	cbz	r1, 8007506 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80074f4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80074f8:	d173      	bne.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80074fa:	2101      	movs	r1, #1
 80074fc:	f104 0008 	add.w	r0, r4, #8
 8007500:	f7ff fe14 	bl	800712c <RCCEx_PLL2_Config>
 8007504:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007506:	2d00      	cmp	r5, #0
 8007508:	f040 83d4 	bne.w	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800750c:	4a36      	ldr	r2, [pc, #216]	; (80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800750e:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8007512:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007514:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007518:	430b      	orrs	r3, r1
 800751a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800751c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007520:	041f      	lsls	r7, r3, #16
 8007522:	d50d      	bpl.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
 8007524:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007526:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800752a:	f000 841d 	beq.w	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800752e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007532:	f000 8239 	beq.w	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8007536:	2900      	cmp	r1, #0
 8007538:	f000 823c 	beq.w	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 800753c:	2601      	movs	r6, #1
 800753e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007540:	01d8      	lsls	r0, r3, #7
 8007542:	d55e      	bpl.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->FmcClockSelection)
 8007544:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007546:	2903      	cmp	r1, #3
 8007548:	f200 84f3 	bhi.w	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800754c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007550:	004e0053 	.word	0x004e0053
 8007554:	0053043d 	.word	0x0053043d
    switch (PeriphClkInit->Sai23ClockSelection)
 8007558:	29c0      	cmp	r1, #192	; 0xc0
 800755a:	f43f af28 	beq.w	80073ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800755e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007562:	f43f af24 	beq.w	80073ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8007566:	2601      	movs	r6, #1
 8007568:	4635      	mov	r5, r6
 800756a:	e726      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800756c:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8007570:	f43f af3a 	beq.w	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007574:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007578:	f43f af36 	beq.w	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800757c:	2601      	movs	r6, #1
 800757e:	4635      	mov	r5, r6
 8007580:	e738      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
 8007582:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8007586:	f43f af4c 	beq.w	8007422 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800758a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800758e:	f43f af48 	beq.w	8007422 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8007592:	2601      	movs	r6, #1
 8007594:	4635      	mov	r5, r6
 8007596:	e74a      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
 8007598:	2930      	cmp	r1, #48	; 0x30
 800759a:	f43f af59 	beq.w	8007450 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800759e:	2601      	movs	r6, #1
 80075a0:	4635      	mov	r5, r6
 80075a2:	e761      	b.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
 80075a4:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 80075a8:	f43f af74 	beq.w	8007494 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80075ac:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80075b0:	f43f af70 	beq.w	8007494 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80075b4:	2601      	movs	r6, #1
 80075b6:	4635      	mov	r5, r6
 80075b8:	e772      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
 80075ba:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 80075be:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80075c2:	d081      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80075c4:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80075c8:	f43f af7e 	beq.w	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80075cc:	2601      	movs	r6, #1
 80075ce:	4635      	mov	r5, r6
 80075d0:	e786      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
 80075d2:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 80075d6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80075da:	d094      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80075dc:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 80075e0:	d091      	beq.n	8007506 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80075e2:	2601      	movs	r6, #1
 80075e4:	4635      	mov	r5, r6
 80075e6:	e79b      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80075e8:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ec:	4a34      	ldr	r2, [pc, #208]	; (80076c0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80075ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80075f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80075f6:	2d00      	cmp	r5, #0
 80075f8:	f000 834a 	beq.w	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x97c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075fc:	462e      	mov	r6, r5
 80075fe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007602:	0259      	lsls	r1, r3, #9
 8007604:	f100 826f 	bmi.w	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007608:	07d8      	lsls	r0, r3, #31
 800760a:	d52f      	bpl.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (PeriphClkInit->Usart16ClockSelection)
 800760c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800760e:	2928      	cmp	r1, #40	; 0x28
 8007610:	d82a      	bhi.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007612:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007616:	020d      	.short	0x020d
 8007618:	00290029 	.word	0x00290029
 800761c:	00290029 	.word	0x00290029
 8007620:	00290029 	.word	0x00290029
 8007624:	02070029 	.word	0x02070029
 8007628:	00290029 	.word	0x00290029
 800762c:	00290029 	.word	0x00290029
 8007630:	00290029 	.word	0x00290029
 8007634:	04500029 	.word	0x04500029
 8007638:	00290029 	.word	0x00290029
 800763c:	00290029 	.word	0x00290029
 8007640:	00290029 	.word	0x00290029
 8007644:	020d0029 	.word	0x020d0029
 8007648:	00290029 	.word	0x00290029
 800764c:	00290029 	.word	0x00290029
 8007650:	00290029 	.word	0x00290029
 8007654:	020d0029 	.word	0x020d0029
 8007658:	00290029 	.word	0x00290029
 800765c:	00290029 	.word	0x00290029
 8007660:	00290029 	.word	0x00290029
 8007664:	020d0029 	.word	0x020d0029
 8007668:	2601      	movs	r6, #1
 800766a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800766c:	0799      	lsls	r1, r3, #30
 800766e:	d517      	bpl.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007670:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8007672:	2905      	cmp	r1, #5
 8007674:	f200 8465 	bhi.w	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 8007678:	e8df f011 	tbh	[pc, r1, lsl #1]
 800767c:	0006000c 	.word	0x0006000c
 8007680:	000c0412 	.word	0x000c0412
 8007684:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007688:	2101      	movs	r1, #1
 800768a:	f104 0008 	add.w	r0, r4, #8
 800768e:	f7ff fd4d 	bl	800712c <RCCEx_PLL2_Config>
 8007692:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007694:	2d00      	cmp	r5, #0
 8007696:	f000 82dd 	beq.w	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x940>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800769a:	462e      	mov	r6, r5
 800769c:	e9d4 3200 	ldrd	r3, r2, [r4]
 80076a0:	075f      	lsls	r7, r3, #29
 80076a2:	d51b      	bpl.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80076a4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80076a8:	2905      	cmp	r1, #5
 80076aa:	f200 8446 	bhi.w	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80076ae:	e8df f011 	tbh	[pc, r1, lsl #1]
 80076b2:	000f      	.short	0x000f
 80076b4:	03ed0009 	.word	0x03ed0009
 80076b8:	000f000f 	.word	0x000f000f
 80076bc:	000f      	.short	0x000f
 80076be:	bf00      	nop
 80076c0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076c4:	2101      	movs	r1, #1
 80076c6:	f104 0008 	add.w	r0, r4, #8
 80076ca:	f7ff fd2f 	bl	800712c <RCCEx_PLL2_Config>
 80076ce:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80076d0:	2d00      	cmp	r5, #0
 80076d2:	f000 82c9 	beq.w	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x954>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076d6:	462e      	mov	r6, r5
 80076d8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80076dc:	0698      	lsls	r0, r3, #26
 80076de:	d51f      	bpl.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80076e0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80076e4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80076e8:	f000 8365 	beq.w	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80076ec:	f200 811c 	bhi.w	8007928 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80076f0:	b149      	cbz	r1, 8007706 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80076f2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80076f6:	f040 8121 	bne.w	800793c <HAL_RCCEx_PeriphCLKConfig+0x628>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076fa:	2100      	movs	r1, #0
 80076fc:	f104 0008 	add.w	r0, r4, #8
 8007700:	f7ff fd14 	bl	800712c <RCCEx_PLL2_Config>
 8007704:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007706:	2d00      	cmp	r5, #0
 8007708:	f040 82b9 	bne.w	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800770c:	4ab0      	ldr	r2, [pc, #704]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800770e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007712:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007714:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007718:	430b      	orrs	r3, r1
 800771a:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800771c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007720:	0659      	lsls	r1, r3, #25
 8007722:	d51f      	bpl.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007724:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8007728:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800772c:	f000 8308 	beq.w	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8007730:	f200 8107 	bhi.w	8007942 <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8007734:	b149      	cbz	r1, 800774a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007736:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800773a:	f040 810c 	bne.w	8007956 <HAL_RCCEx_PeriphCLKConfig+0x642>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800773e:	2100      	movs	r1, #0
 8007740:	f104 0008 	add.w	r0, r4, #8
 8007744:	f7ff fcf2 	bl	800712c <RCCEx_PLL2_Config>
 8007748:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800774a:	2d00      	cmp	r5, #0
 800774c:	f040 82b6 	bne.w	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007750:	4a9f      	ldr	r2, [pc, #636]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007752:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8007756:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007758:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800775c:	430b      	orrs	r3, r1
 800775e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007760:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007764:	061f      	lsls	r7, r3, #24
 8007766:	d51f      	bpl.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007768:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800776c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8007770:	f000 82f0 	beq.w	8007d54 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007774:	f200 80f2 	bhi.w	800795c <HAL_RCCEx_PeriphCLKConfig+0x648>
 8007778:	b149      	cbz	r1, 800778e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800777a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800777e:	f040 80f7 	bne.w	8007970 <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007782:	2100      	movs	r1, #0
 8007784:	f104 0008 	add.w	r0, r4, #8
 8007788:	f7ff fcd0 	bl	800712c <RCCEx_PLL2_Config>
 800778c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800778e:	2d00      	cmp	r5, #0
 8007790:	f040 828c 	bne.w	8007cac <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007794:	4a8e      	ldr	r2, [pc, #568]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007796:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800779a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800779c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80077a0:	430b      	orrs	r3, r1
 80077a2:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80077a4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077a8:	0718      	lsls	r0, r3, #28
 80077aa:	d50d      	bpl.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80077ac:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80077b0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80077b4:	f000 8313 	beq.w	8007dde <HAL_RCCEx_PeriphCLKConfig+0xaca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80077b8:	4985      	ldr	r1, [pc, #532]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80077ba:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80077bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80077c0:	4313      	orrs	r3, r2
 80077c2:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077c4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077c8:	06d9      	lsls	r1, r3, #27
 80077ca:	d50d      	bpl.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80077cc:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80077d0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80077d4:	f000 830f 	beq.w	8007df6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077d8:	497d      	ldr	r1, [pc, #500]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80077da:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80077dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077e0:	4313      	orrs	r3, r2
 80077e2:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077e4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077e8:	031f      	lsls	r7, r3, #12
 80077ea:	d50e      	bpl.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    switch (PeriphClkInit->AdcClockSelection)
 80077ec:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80077f0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80077f4:	f000 8102 	beq.w	80079fc <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 80077f8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80077fc:	f000 8104 	beq.w	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 8007800:	2900      	cmp	r1, #0
 8007802:	f000 8292 	beq.w	8007d2a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007806:	2601      	movs	r6, #1
 8007808:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800780a:	0358      	lsls	r0, r3, #13
 800780c:	d50f      	bpl.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch (PeriphClkInit->UsbClockSelection)
 800780e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007812:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007816:	f000 80dd 	beq.w	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 800781a:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800781e:	f000 80df 	beq.w	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8007822:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007826:	f000 8277 	beq.w	8007d18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800782a:	2601      	movs	r6, #1
 800782c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800782e:	03d9      	lsls	r1, r3, #15
 8007830:	d509      	bpl.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x532>
    switch (PeriphClkInit->SdmmcClockSelection)
 8007832:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007834:	2900      	cmp	r1, #0
 8007836:	f000 825a 	beq.w	8007cee <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800783a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800783e:	f000 81da 	beq.w	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007842:	2601      	movs	r6, #1
 8007844:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007846:	009f      	lsls	r7, r3, #2
 8007848:	f100 80ff 	bmi.w	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x736>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800784c:	0398      	lsls	r0, r3, #14
 800784e:	d50e      	bpl.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->RngClockSelection)
 8007850:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007854:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8007858:	f000 8240 	beq.w	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 800785c:	f240 808b 	bls.w	8007976 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007860:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007864:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007868:	f000 8088 	beq.w	800797c <HAL_RCCEx_PeriphCLKConfig+0x668>
 800786c:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800786e:	02d9      	lsls	r1, r3, #11
 8007870:	d508      	bpl.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x570>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007872:	4a57      	ldr	r2, [pc, #348]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007874:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007876:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800787c:	430b      	orrs	r3, r1
 800787e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007880:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007884:	00df      	lsls	r7, r3, #3
 8007886:	d509      	bpl.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x588>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007888:	4a51      	ldr	r2, [pc, #324]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800788a:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800788e:	6913      	ldr	r3, [r2, #16]
 8007890:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007894:	430b      	orrs	r3, r1
 8007896:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007898:	e9d4 3200 	ldrd	r3, r2, [r4]
 800789c:	029d      	lsls	r5, r3, #10
 800789e:	d508      	bpl.n	80078b2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80078a0:	4a4b      	ldr	r2, [pc, #300]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80078a2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80078a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80078a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078aa:	430b      	orrs	r3, r1
 80078ac:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80078ae:	e9d4 3200 	ldrd	r3, r2, [r4]
 80078b2:	0058      	lsls	r0, r3, #1
 80078b4:	d50b      	bpl.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078b6:	4b46      	ldr	r3, [pc, #280]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80078b8:	691a      	ldr	r2, [r3, #16]
 80078ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078be:	611a      	str	r2, [r3, #16]
 80078c0:	691a      	ldr	r2, [r3, #16]
 80078c2:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 80078c6:	430a      	orrs	r2, r1
 80078c8:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80078ca:	e9d4 3200 	ldrd	r3, r2, [r4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	da08      	bge.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80078d2:	4a3f      	ldr	r2, [pc, #252]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80078d4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80078d6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80078d8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80078dc:	430b      	orrs	r3, r1
 80078de:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80078e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80078e4:	0219      	lsls	r1, r3, #8
 80078e6:	d508      	bpl.n	80078fa <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078e8:	4a39      	ldr	r2, [pc, #228]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80078ea:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80078ee:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80078f0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80078f4:	430b      	orrs	r3, r1
 80078f6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80078f8:	6862      	ldr	r2, [r4, #4]
 80078fa:	07d3      	lsls	r3, r2, #31
 80078fc:	f100 80b1 	bmi.w	8007a62 <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007900:	0797      	lsls	r7, r2, #30
 8007902:	f100 80bb 	bmi.w	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007906:	0755      	lsls	r5, r2, #29
 8007908:	f100 80c5 	bmi.w	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x782>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800790c:	0710      	lsls	r0, r2, #28
 800790e:	f100 80cf 	bmi.w	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007912:	06d1      	lsls	r1, r2, #27
 8007914:	f100 80d9 	bmi.w	8007aca <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007918:	0692      	lsls	r2, r2, #26
 800791a:	f100 812a 	bmi.w	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    return HAL_OK;
 800791e:	1e30      	subs	r0, r6, #0
 8007920:	bf18      	it	ne
 8007922:	2001      	movne	r0, #1
}
 8007924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007928:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800792c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007930:	f43f aee9 	beq.w	8007706 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8007934:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8007938:	f43f aee5 	beq.w	8007706 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800793c:	2601      	movs	r6, #1
 800793e:	4635      	mov	r5, r6
 8007940:	e6ee      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007942:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8007946:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800794a:	f43f aefe 	beq.w	800774a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800794e:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 8007952:	f43f aefa 	beq.w	800774a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8007956:	2601      	movs	r6, #1
 8007958:	4635      	mov	r5, r6
 800795a:	e703      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800795c:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 8007960:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007964:	f43f af13 	beq.w	800778e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007968:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800796c:	f43f af0f 	beq.w	800778e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007970:	2601      	movs	r6, #1
 8007972:	4635      	mov	r5, r6
 8007974:	e718      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->RngClockSelection)
 8007976:	2900      	cmp	r1, #0
 8007978:	f47f af78 	bne.w	800786c <HAL_RCCEx_PeriphCLKConfig+0x558>
    if (ret == HAL_OK)
 800797c:	2d00      	cmp	r5, #0
 800797e:	f040 81c7 	bne.w	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007982:	4a13      	ldr	r2, [pc, #76]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8007984:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8007988:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800798a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800798e:	430b      	orrs	r3, r1
 8007990:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007992:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007996:	e76a      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8007998:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800799a:	2d00      	cmp	r5, #0
 800799c:	f000 8114 	beq.w	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80079a0:	462e      	mov	r6, r5
 80079a2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80079a6:	e4ee      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079a8:	2101      	movs	r1, #1
 80079aa:	f104 0008 	add.w	r0, r4, #8
 80079ae:	f7ff fbbd 	bl	800712c <RCCEx_PLL2_Config>
 80079b2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80079b4:	2d00      	cmp	r5, #0
 80079b6:	f040 8149 	bne.w	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80079ba:	4a05      	ldr	r2, [pc, #20]	; (80079d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80079bc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80079be:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80079c0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80079c4:	430b      	orrs	r3, r1
 80079c6:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80079c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80079cc:	e5b8      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 80079ce:	bf00      	nop
 80079d0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079d4:	2101      	movs	r1, #1
 80079d6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80079da:	f7ff fc21 	bl	8007220 <RCCEx_PLL3_Config>
 80079de:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80079e0:	2d00      	cmp	r5, #0
 80079e2:	f040 8173 	bne.w	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079e6:	4abb      	ldr	r2, [pc, #748]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80079e8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80079ec:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80079ee:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80079f2:	430b      	orrs	r3, r1
 80079f4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80079f6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80079fa:	e718      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x51a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079fc:	2102      	movs	r1, #2
 80079fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007a02:	f7ff fc0d 	bl	8007220 <RCCEx_PLL3_Config>
 8007a06:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007a08:	2d00      	cmp	r5, #0
 8007a0a:	f040 815b 	bne.w	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a0e:	4ab1      	ldr	r2, [pc, #708]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007a10:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8007a14:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007a16:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007a1a:	430b      	orrs	r3, r1
 8007a1c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007a1e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007a22:	e6f2      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a24:	2101      	movs	r1, #1
 8007a26:	f104 0008 	add.w	r0, r4, #8
 8007a2a:	f7ff fb7f 	bl	800712c <RCCEx_PLL2_Config>
 8007a2e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007a30:	2d00      	cmp	r5, #0
 8007a32:	f040 8107 	bne.w	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007a36:	4aa7      	ldr	r2, [pc, #668]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007a38:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8007a3a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007a3c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8007a40:	430b      	orrs	r3, r1
 8007a42:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007a44:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007a48:	e610      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x358>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007a50:	f7ff fbe6 	bl	8007220 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007a54:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	f43f aef7 	beq.w	800784c <HAL_RCCEx_PeriphCLKConfig+0x538>
      status = HAL_ERROR;
 8007a5e:	2601      	movs	r6, #1
 8007a60:	e6f4      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x538>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a62:	2100      	movs	r1, #0
 8007a64:	f104 0008 	add.w	r0, r4, #8
 8007a68:	f7ff fb60 	bl	800712c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007a6c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	f43f af46 	beq.w	8007900 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007a74:	0797      	lsls	r7, r2, #30
 8007a76:	4606      	mov	r6, r0
 8007a78:	f57f af45 	bpl.w	8007906 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	f104 0008 	add.w	r0, r4, #8
 8007a82:	f7ff fb53 	bl	800712c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007a86:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	f43f af3c 	beq.w	8007906 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007a8e:	0755      	lsls	r5, r2, #29
 8007a90:	4606      	mov	r6, r0
 8007a92:	f57f af3b 	bpl.w	800790c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a96:	2102      	movs	r1, #2
 8007a98:	f104 0008 	add.w	r0, r4, #8
 8007a9c:	f7ff fb46 	bl	800712c <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007aa0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	f43f af32 	beq.w	800790c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007aa8:	4606      	mov	r6, r0
 8007aaa:	0710      	lsls	r0, r2, #28
 8007aac:	f57f af31 	bpl.w	8007912 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007ab6:	f7ff fbb3 	bl	8007220 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007aba:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007abc:	2800      	cmp	r0, #0
 8007abe:	f43f af28 	beq.w	8007912 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007ac2:	06d1      	lsls	r1, r2, #27
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	f57f af27 	bpl.w	8007918 <HAL_RCCEx_PeriphCLKConfig+0x604>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007aca:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8007ace:	2101      	movs	r1, #1
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	f7ff fba5 	bl	8007220 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	f000 8130 	beq.w	8007d3c <HAL_RCCEx_PeriphCLKConfig+0xa28>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007adc:	6863      	ldr	r3, [r4, #4]
 8007ade:	069b      	lsls	r3, r3, #26
 8007ae0:	d550      	bpl.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x870>
 8007ae2:	4606      	mov	r6, r0
 8007ae4:	e047      	b.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x862>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ae6:	4f7c      	ldr	r7, [pc, #496]	; (8007cd8 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aee:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8007af0:	f7fc f800 	bl	8003af4 <HAL_GetTick>
 8007af4:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007af6:	e006      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007af8:	f7fb fffc 	bl	8003af4 <HAL_GetTick>
 8007afc:	eba0 0008 	sub.w	r0, r0, r8
 8007b00:	2864      	cmp	r0, #100	; 0x64
 8007b02:	f200 81e2 	bhi.w	8007eca <HAL_RCCEx_PeriphCLKConfig+0xbb6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	05da      	lsls	r2, r3, #23
 8007b0a:	d5f5      	bpl.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    if (ret == HAL_OK)
 8007b0c:	2d00      	cmp	r5, #0
 8007b0e:	f040 820b 	bne.w	8007f28 <HAL_RCCEx_PeriphCLKConfig+0xc14>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b12:	4b70      	ldr	r3, [pc, #448]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007b14:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8007b18:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007b1a:	4051      	eors	r1, r2
 8007b1c:	f411 7f40 	tst.w	r1, #768	; 0x300
 8007b20:	d00d      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x82a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b24:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b26:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b2a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007b2e:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b30:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007b32:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007b36:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8007b38:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b3a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8007b3e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007b42:	f000 81d3 	beq.w	8007eec <HAL_RCCEx_PeriphCLKConfig+0xbd8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b46:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8007b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b4e:	f000 81e1 	beq.w	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xc00>
 8007b52:	4a60      	ldr	r2, [pc, #384]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007b54:	6913      	ldr	r3, [r2, #16]
 8007b56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007b5a:	6113      	str	r3, [r2, #16]
 8007b5c:	4a5d      	ldr	r2, [pc, #372]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007b5e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8007b62:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8007b64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b68:	430b      	orrs	r3, r1
 8007b6a:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007b6c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007b70:	e54a      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b72:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b76:	2102      	movs	r1, #2
 8007b78:	4628      	mov	r0, r5
 8007b7a:	f7ff fb51 	bl	8007220 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	f43f aecd 	beq.w	800791e <HAL_RCCEx_PeriphCLKConfig+0x60a>
  return HAL_ERROR;
 8007b84:	2001      	movs	r0, #1
}
 8007b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007b8a:	4a52      	ldr	r2, [pc, #328]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007b8c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8007b90:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007b92:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007b96:	430b      	orrs	r3, r1
 8007b98:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b9a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007b9e:	e446      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007ba0:	4a4c      	ldr	r2, [pc, #304]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007ba2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007ba4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007ba6:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8007baa:	430b      	orrs	r3, r1
 8007bac:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007bae:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007bb2:	e402      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007bb4:	4a47      	ldr	r2, [pc, #284]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007bb6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8007bb8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007bc2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007bc6:	e46b      	b.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007bc8:	4a42      	ldr	r2, [pc, #264]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007bca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007bcc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007bce:	f023 0307 	bic.w	r3, r3, #7
 8007bd2:	430b      	orrs	r3, r1
 8007bd4:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007bd6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007bda:	f7ff bbd4 	b.w	8007386 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007bde:	4a3d      	ldr	r2, [pc, #244]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007be0:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8007be4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007be6:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8007bea:	430b      	orrs	r3, r1
 8007bec:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007bee:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007bf2:	f7ff bbff 	b.w	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bf6:	2102      	movs	r1, #2
 8007bf8:	f104 0008 	add.w	r0, r4, #8
 8007bfc:	f7ff fa96 	bl	800712c <RCCEx_PLL2_Config>
 8007c00:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007c02:	2d00      	cmp	r5, #0
 8007c04:	d07a      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007c06:	462e      	mov	r6, r5
 8007c08:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c0c:	e61b      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x532>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c0e:	4a31      	ldr	r2, [pc, #196]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007c10:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c16:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007c18:	e43c      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c1a:	4a2e      	ldr	r2, [pc, #184]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007c1c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c22:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007c24:	f7ff bbfd 	b.w	8007422 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c28:	4a2a      	ldr	r2, [pc, #168]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007c2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c30:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007c32:	f7ff bbbc 	b.w	80073ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c36:	4a27      	ldr	r2, [pc, #156]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007c38:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c3e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007c40:	f7ff bbd2 	b.w	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007c44:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c48:	462e      	mov	r6, r5
 8007c4a:	e50f      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x358>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007c4c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c50:	462e      	mov	r6, r5
 8007c52:	e475      	b.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007c54:	4a1f      	ldr	r2, [pc, #124]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007c56:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8007c58:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007c5a:	f023 0307 	bic.w	r3, r3, #7
 8007c5e:	430b      	orrs	r3, r1
 8007c60:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c62:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c66:	e51b      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c68:	4a1a      	ldr	r2, [pc, #104]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007c6a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007c6e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007c70:	f023 0307 	bic.w	r3, r3, #7
 8007c74:	430b      	orrs	r3, r1
 8007c76:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c78:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c7c:	e52e      	b.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007c7e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c82:	462e      	mov	r6, r5
 8007c84:	e54c      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007c86:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c8a:	462e      	mov	r6, r5
 8007c8c:	f7ff bbec 	b.w	8007468 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c90:	4a10      	ldr	r2, [pc, #64]	; (8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8007c92:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007c94:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007c96:	f023 0303 	bic.w	r3, r3, #3
 8007c9a:	430b      	orrs	r3, r1
 8007c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c9e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ca2:	e4ae      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ca4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ca8:	462e      	mov	r6, r5
 8007caa:	e419      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007cac:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007cb0:	462e      	mov	r6, r5
 8007cb2:	e579      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007cb4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007cb8:	462e      	mov	r6, r5
 8007cba:	e431      	b.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007cbc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007cc0:	462e      	mov	r6, r5
 8007cc2:	e54f      	b.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007cc4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007cc8:	462e      	mov	r6, r5
 8007cca:	e59e      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ccc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007cd0:	462e      	mov	r6, r5
 8007cd2:	e5ac      	b.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007cd4:	58024400 	.word	0x58024400
 8007cd8:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cdc:	4a9b      	ldr	r2, [pc, #620]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8007cde:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ce4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007ce6:	2d00      	cmp	r5, #0
 8007ce8:	f43f ae4b 	beq.w	8007982 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007cec:	e010      	b.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cee:	4a97      	ldr	r2, [pc, #604]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8007cf0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007cf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007cf8:	2d00      	cmp	r5, #0
 8007cfa:	d184      	bne.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007cfc:	4a93      	ldr	r2, [pc, #588]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8007cfe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007d00:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d06:	430b      	orrs	r3, r1
 8007d08:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d0a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007d0e:	e59a      	b.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x532>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d10:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007d14:	462e      	mov	r6, r5
 8007d16:	e5aa      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d18:	4a8c      	ldr	r2, [pc, #560]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8007d1a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007d1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d20:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007d22:	2d00      	cmp	r5, #0
 8007d24:	f43f ae5f 	beq.w	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 8007d28:	e7d0      	b.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x9b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d2a:	f104 0008 	add.w	r0, r4, #8
 8007d2e:	f7ff f9fd 	bl	800712c <RCCEx_PLL2_Config>
 8007d32:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007d34:	2d00      	cmp	r5, #0
 8007d36:	f43f ae6a 	beq.w	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8007d3a:	e7c3      	b.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007d3c:	6862      	ldr	r2, [r4, #4]
 8007d3e:	e5eb      	b.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0x604>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d40:	2102      	movs	r1, #2
 8007d42:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007d46:	f7ff fa6b 	bl	8007220 <RCCEx_PLL3_Config>
 8007d4a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007d4c:	2d00      	cmp	r5, #0
 8007d4e:	f43f acff 	beq.w	8007750 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8007d52:	e7b3      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x9a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d54:	2102      	movs	r1, #2
 8007d56:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007d5a:	f7ff fa61 	bl	8007220 <RCCEx_PLL3_Config>
 8007d5e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007d60:	2d00      	cmp	r5, #0
 8007d62:	f43f ad17 	beq.w	8007794 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007d66:	e7a1      	b.n	8007cac <HAL_RCCEx_PeriphCLKConfig+0x998>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d68:	4a78      	ldr	r2, [pc, #480]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8007d6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d70:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007d72:	2d00      	cmp	r5, #0
 8007d74:	f43f ae21 	beq.w	80079ba <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8007d78:	e768      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x938>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007d80:	f7ff fa4e 	bl	8007220 <RCCEx_PLL3_Config>
 8007d84:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007d86:	2d00      	cmp	r5, #0
 8007d88:	f43f aba1 	beq.w	80074ce <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8007d8c:	e78a      	b.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d8e:	2101      	movs	r1, #1
 8007d90:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007d94:	f7ff fa44 	bl	8007220 <RCCEx_PLL3_Config>
 8007d98:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007d9a:	2d00      	cmp	r5, #0
 8007d9c:	f43f abb6 	beq.w	800750c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007da0:	e788      	b.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007da2:	2102      	movs	r1, #2
 8007da4:	f104 0008 	add.w	r0, r4, #8
 8007da8:	f7ff f9c0 	bl	800712c <RCCEx_PLL2_Config>
 8007dac:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007dae:	2d00      	cmp	r5, #0
 8007db0:	f43f ab51 	beq.w	8007456 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8007db4:	e767      	b.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x972>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007db6:	2102      	movs	r1, #2
 8007db8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007dbc:	f7ff fa30 	bl	8007220 <RCCEx_PLL3_Config>
 8007dc0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007dc2:	2d00      	cmp	r5, #0
 8007dc4:	f43f aca2 	beq.w	800770c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007dc8:	e759      	b.n	8007c7e <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007dca:	2102      	movs	r1, #2
 8007dcc:	f104 0008 	add.w	r0, r4, #8
 8007dd0:	f7ff f9ac 	bl	800712c <RCCEx_PLL2_Config>
 8007dd4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007dd6:	2d00      	cmp	r5, #0
 8007dd8:	f43f af5a 	beq.w	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8007ddc:	e40e      	b.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007dde:	2102      	movs	r1, #2
 8007de0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007de4:	f7ff fa1c 	bl	8007220 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007de8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007dec:	2800      	cmp	r0, #0
 8007dee:	f43f ace3 	beq.w	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        status = HAL_ERROR;
 8007df2:	2601      	movs	r6, #1
 8007df4:	e4e0      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007df6:	2102      	movs	r1, #2
 8007df8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007dfc:	f7ff fa10 	bl	8007220 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007e00:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007e04:	2800      	cmp	r0, #0
 8007e06:	f43f ace7 	beq.w	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        status = HAL_ERROR;
 8007e0a:	2601      	movs	r6, #1
 8007e0c:	e4e4      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e0e:	2100      	movs	r1, #0
 8007e10:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007e14:	f7ff fa04 	bl	8007220 <RCCEx_PLL3_Config>
 8007e18:	4605      	mov	r5, r0
        break;
 8007e1a:	f7ff bae5 	b.w	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007e1e:	2102      	movs	r1, #2
 8007e20:	3028      	adds	r0, #40	; 0x28
 8007e22:	f7ff f9fd 	bl	8007220 <RCCEx_PLL3_Config>
 8007e26:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8007e28:	2e00      	cmp	r6, #0
 8007e2a:	f43f aa8f 	beq.w	800734c <HAL_RCCEx_PeriphCLKConfig+0x38>
 8007e2e:	f7ff ba9a 	b.w	8007366 <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e32:	4a46      	ldr	r2, [pc, #280]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc38>)
        break;
 8007e34:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e36:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e3c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007e3e:	e5ac      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e40:	2100      	movs	r1, #0
 8007e42:	f104 0008 	add.w	r0, r4, #8
 8007e46:	f7ff f971 	bl	800712c <RCCEx_PLL2_Config>
 8007e4a:	4605      	mov	r5, r0
        break;
 8007e4c:	e5a5      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e4e:	2100      	movs	r1, #0
 8007e50:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007e54:	f7ff f9e4 	bl	8007220 <RCCEx_PLL3_Config>
 8007e58:	4605      	mov	r5, r0
        break;
 8007e5a:	f7ff bb1b 	b.w	8007494 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e5e:	2100      	movs	r1, #0
 8007e60:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007e64:	f7ff f9dc 	bl	8007220 <RCCEx_PLL3_Config>
 8007e68:	4605      	mov	r5, r0
        break;
 8007e6a:	f7ff bada 	b.w	8007422 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e6e:	2100      	movs	r1, #0
 8007e70:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007e74:	f7ff f9d4 	bl	8007220 <RCCEx_PLL3_Config>
 8007e78:	4605      	mov	r5, r0
        break;
 8007e7a:	e58e      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007e82:	f7ff f9cd 	bl	8007220 <RCCEx_PLL3_Config>
 8007e86:	4605      	mov	r5, r0
        break;
 8007e88:	f7ff ba91 	b.w	80073ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007e92:	f7ff f9c5 	bl	8007220 <RCCEx_PLL3_Config>
 8007e96:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007e98:	2d00      	cmp	r5, #0
 8007e9a:	f43f aee5 	beq.w	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x954>
 8007e9e:	e41a      	b.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007ea6:	f7ff f9bb 	bl	8007220 <RCCEx_PLL3_Config>
 8007eaa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007eac:	2d00      	cmp	r5, #0
 8007eae:	f43f aed1 	beq.w	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8007eb2:	f7ff bbf2 	b.w	800769a <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007eb6:	2101      	movs	r1, #1
 8007eb8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007ebc:	f7ff f9b0 	bl	8007220 <RCCEx_PLL3_Config>
 8007ec0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007ec2:	2d00      	cmp	r5, #0
 8007ec4:	f43f adb7 	beq.w	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x722>
 8007ec8:	e6bc      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x930>
        status = ret;
 8007eca:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007ecc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ed0:	4635      	mov	r5, r6
 8007ed2:	f7ff bb99 	b.w	8007608 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007ed6:	2601      	movs	r6, #1
 8007ed8:	f7ff ba47 	b.w	800736a <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007edc:	4a1b      	ldr	r2, [pc, #108]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8007ede:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ee4:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007ee6:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8007ee8:	f7ff ba36 	b.w	8007358 <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
 8007eec:	f7fb fe02 	bl	8003af4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ef0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc38>
        tickstart = HAL_GetTick();
 8007ef4:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ef6:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007efa:	e004      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007efc:	f7fb fdfa 	bl	8003af4 <HAL_GetTick>
 8007f00:	1bc0      	subs	r0, r0, r7
 8007f02:	4548      	cmp	r0, r9
 8007f04:	d8e1      	bhi.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0xbb6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f06:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8007f0a:	079b      	lsls	r3, r3, #30
 8007f0c:	d5f6      	bpl.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f0e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8007f12:	e618      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8007f14:	490d      	ldr	r1, [pc, #52]	; (8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8007f16:	4b0e      	ldr	r3, [pc, #56]	; (8007f50 <HAL_RCCEx_PeriphCLKConfig+0xc3c>)
 8007f18:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 8007f1c:	690a      	ldr	r2, [r1, #16]
 8007f1e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8007f22:	4313      	orrs	r3, r2
 8007f24:	610b      	str	r3, [r1, #16]
 8007f26:	e619      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x848>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007f28:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f2c:	462e      	mov	r6, r5
 8007f2e:	f7ff bb6b 	b.w	8007608 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->FmcClockSelection)
 8007f32:	2601      	movs	r6, #1
 8007f34:	4635      	mov	r5, r6
 8007f36:	f7ff bb64 	b.w	8007602 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007f3a:	2601      	movs	r6, #1
 8007f3c:	4635      	mov	r5, r6
 8007f3e:	f7ff bbcd 	b.w	80076dc <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007f42:	2601      	movs	r6, #1
 8007f44:	4635      	mov	r5, r6
 8007f46:	f7ff bbab 	b.w	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8007f4a:	bf00      	nop
 8007f4c:	58024400 	.word	0x58024400
 8007f50:	00ffffcf 	.word	0x00ffffcf

08007f54 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f54:	4a4f      	ldr	r2, [pc, #316]	; (8008094 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8007f56:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f58:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f5a:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f5c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8007f5e:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007f62:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f66:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8007f68:	d05d      	beq.n	8008026 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f6a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007f6e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007f72:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f76:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8007f7a:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007f7c:	ee07 4a90 	vmov	s15, r4
 8007f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8007f84:	d003      	beq.n	8007f8e <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8007f86:	2902      	cmp	r1, #2
 8007f88:	d076      	beq.n	8008078 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8007f8a:	2900      	cmp	r1, #0
 8007f8c:	d050      	beq.n	8008030 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007f8e:	ee07 3a90 	vmov	s15, r3
 8007f92:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8008098 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f9a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007f9c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8007fa0:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800809c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8007fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fa8:	ee07 3a90 	vmov	s15, r3
 8007fac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fb4:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007fb8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007fbc:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007fc0:	4a34      	ldr	r2, [pc, #208]	; (8008094 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8007fc2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007fc6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007fc8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007fcc:	ee07 3a90 	vmov	s15, r3
 8007fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8007fd4:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007fd6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007fde:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8007fe2:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007fe6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007fe8:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007fec:	ee07 3a90 	vmov	s15, r3
 8007ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ff4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007ff8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ffc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008000:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008004:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008006:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800800a:	ee07 3a10 	vmov	s14, r3
 800800e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008012:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800801a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800801e:	ee17 3a90 	vmov	r3, s15
 8008022:	6083      	str	r3, [r0, #8]
}
 8008024:	4770      	bx	lr
 8008026:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008028:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800802c:	6083      	str	r3, [r0, #8]
}
 800802e:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008030:	6811      	ldr	r1, [r2, #0]
 8008032:	0689      	lsls	r1, r1, #26
 8008034:	d527      	bpl.n	8008086 <HAL_RCCEx_GetPLL2ClockFreq+0x132>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008036:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008038:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800803c:	4918      	ldr	r1, [pc, #96]	; (80080a0 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800803e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008042:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008044:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800804c:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800809c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8008050:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008054:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008056:	ee06 3a90 	vmov	s13, r3
 800805a:	ee06 1a10 	vmov	s12, r1
 800805e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008062:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008066:	eee7 6a05 	vfma.f32	s13, s14, s10
 800806a:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800806e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8008072:	ee66 6a87 	vmul.f32	s13, s13, s14
 8008076:	e7a3      	b.n	8007fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008078:	ee07 3a90 	vmov	s15, r3
 800807c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80080a4 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8008080:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008084:	e789      	b.n	8007f9a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008086:	ee07 3a90 	vmov	s15, r3
 800808a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 80080a8 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800808e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008092:	e782      	b.n	8007f9a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8008094:	58024400 	.word	0x58024400
 8008098:	4a742400 	.word	0x4a742400
 800809c:	39000000 	.word	0x39000000
 80080a0:	03d09000 	.word	0x03d09000
 80080a4:	4bbebc20 	.word	0x4bbebc20
 80080a8:	4c742400 	.word	0x4c742400

080080ac <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080ac:	4a4f      	ldr	r2, [pc, #316]	; (80081ec <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 80080ae:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080b0:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80080b2:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80080b4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 80080b6:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80080ba:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80080be:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 80080c0:	d05d      	beq.n	800817e <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80080c2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80080c6:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80080ca:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80080ce:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 80080d2:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80080d4:	ee07 4a90 	vmov	s15, r4
 80080d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 80080dc:	d003      	beq.n	80080e6 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 80080de:	2902      	cmp	r1, #2
 80080e0:	d076      	beq.n	80081d0 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80080e2:	2900      	cmp	r1, #0
 80080e4:	d050      	beq.n	8008188 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	ed9f 5a41 	vldr	s10, [pc, #260]	; 80081f0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 80080ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80080f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80080f4:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80080f8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80081f4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80080fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008100:	ee07 3a90 	vmov	s15, r3
 8008104:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008108:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800810c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008110:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008114:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008118:	4a34      	ldr	r2, [pc, #208]	; (80081ec <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800811a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800811e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008120:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008124:	ee07 3a90 	vmov	s15, r3
 8008128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800812c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800812e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008132:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008136:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800813a:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800813e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008140:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008144:	ee07 3a90 	vmov	s15, r3
 8008148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800814c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008150:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008154:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008158:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800815c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800815e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008162:	ee07 3a10 	vmov	s14, r3
 8008166:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800816a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800816e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008176:	ee17 3a90 	vmov	r3, s15
 800817a:	6083      	str	r3, [r0, #8]
}
 800817c:	4770      	bx	lr
 800817e:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008180:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008184:	6083      	str	r3, [r0, #8]
}
 8008186:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008188:	6811      	ldr	r1, [r2, #0]
 800818a:	0689      	lsls	r1, r1, #26
 800818c:	d527      	bpl.n	80081de <HAL_RCCEx_GetPLL3ClockFreq+0x132>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800818e:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008190:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008194:	4918      	ldr	r1, [pc, #96]	; (80081f8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008196:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800819a:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800819c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081a4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80081f4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 80081a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80081ac:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081ae:	ee06 3a90 	vmov	s13, r3
 80081b2:	ee06 1a10 	vmov	s12, r1
 80081b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80081ba:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80081be:	eee7 6a05 	vfma.f32	s13, s14, s10
 80081c2:	ee86 7a27 	vdiv.f32	s14, s12, s15
 80081c6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80081ca:	ee66 6a87 	vmul.f32	s13, s13, s14
 80081ce:	e7a3      	b.n	8008118 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081d0:	ee07 3a90 	vmov	s15, r3
 80081d4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 80081fc <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 80081d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081dc:	e789      	b.n	80080f2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80081de:	ee07 3a90 	vmov	s15, r3
 80081e2:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8008200 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 80081e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081ea:	e782      	b.n	80080f2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 80081ec:	58024400 	.word	0x58024400
 80081f0:	4a742400 	.word	0x4a742400
 80081f4:	39000000 	.word	0x39000000
 80081f8:	03d09000 	.word	0x03d09000
 80081fc:	4bbebc20 	.word	0x4bbebc20
 8008200:	4c742400 	.word	0x4c742400

08008204 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008204:	4a4f      	ldr	r2, [pc, #316]	; (8008344 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8008206:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008208:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800820a:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800820c:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 800820e:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008212:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008216:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8008218:	d05d      	beq.n	80082d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800821a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800821e:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008222:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008226:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800822a:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800822c:	ee07 4a90 	vmov	s15, r4
 8008230:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008234:	d07f      	beq.n	8008336 <HAL_RCCEx_GetPLL1ClockFreq+0x132>
 8008236:	2902      	cmp	r1, #2
 8008238:	d076      	beq.n	8008328 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800823a:	2900      	cmp	r1, #0
 800823c:	d050      	beq.n	80082e0 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800823e:	ee07 3a90 	vmov	s15, r3
 8008242:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8008348 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8008246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800824a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800824c:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008250:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800834c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8008254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008258:	ee07 3a90 	vmov	s15, r3
 800825c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008260:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008264:	eee7 7a25 	vfma.f32	s15, s14, s11
 8008268:	ee77 7a86 	vadd.f32	s15, s15, s12
 800826c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008270:	4a34      	ldr	r2, [pc, #208]	; (8008344 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8008272:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008276:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008278:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800827c:	ee07 3a90 	vmov	s15, r3
 8008280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8008284:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008286:	ee77 7a86 	vadd.f32	s15, s15, s12
 800828a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800828e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008292:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008296:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008298:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800829c:	ee07 3a90 	vmov	s15, r3
 80082a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082a4:	ee77 7a86 	vadd.f32	s15, s15, s12
 80082a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ac:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 80082b0:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80082b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80082b6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80082ba:	ee07 3a10 	vmov	s14, r3
 80082be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80082c2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80082c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082ce:	ee17 3a90 	vmov	r3, s15
 80082d2:	6083      	str	r3, [r0, #8]
}
 80082d4:	4770      	bx	lr
 80082d6:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80082d8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80082dc:	6083      	str	r3, [r0, #8]
}
 80082de:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082e0:	6811      	ldr	r1, [r2, #0]
 80082e2:	0689      	lsls	r1, r1, #26
 80082e4:	d5ab      	bpl.n	800823e <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082e6:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082e8:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082ec:	4918      	ldr	r1, [pc, #96]	; (8008350 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082ee:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80082f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082f4:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80082f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082fc:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800834c <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8008300:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008304:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008306:	ee06 3a90 	vmov	s13, r3
 800830a:	ee06 1a10 	vmov	s12, r1
 800830e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008312:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008316:	eee7 6a05 	vfma.f32	s13, s14, s10
 800831a:	ee86 7a27 	vdiv.f32	s14, s12, s15
 800831e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8008322:	ee66 6a87 	vmul.f32	s13, s13, s14
 8008326:	e7a3      	b.n	8008270 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008328:	ee07 3a90 	vmov	s15, r3
 800832c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8008354 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8008330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008334:	e789      	b.n	800824a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008336:	ee07 3a90 	vmov	s15, r3
 800833a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8008358 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800833e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008342:	e782      	b.n	800824a <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8008344:	58024400 	.word	0x58024400
 8008348:	4c742400 	.word	0x4c742400
 800834c:	39000000 	.word	0x39000000
 8008350:	03d09000 	.word	0x03d09000
 8008354:	4bbebc20 	.word	0x4bbebc20
 8008358:	4a742400 	.word	0x4a742400

0800835c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800835c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8008360:	430b      	orrs	r3, r1
{
 8008362:	b500      	push	{lr}
 8008364:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008366:	f000 8083 	beq.w	8008470 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800836a:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800836e:	430b      	orrs	r3, r1
 8008370:	d038      	beq.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008372:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8008376:	430b      	orrs	r3, r1
 8008378:	f000 80e6 	beq.w	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800837c:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8008380:	430b      	orrs	r3, r1
 8008382:	f000 8089 	beq.w	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008386:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800838a:	430b      	orrs	r3, r1
 800838c:	d060      	beq.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800838e:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8008392:	430b      	orrs	r3, r1
 8008394:	f000 8112 	beq.w	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008398:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800839c:	430b      	orrs	r3, r1
 800839e:	f000 80a3 	beq.w	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80083a2:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 80083a6:	430b      	orrs	r3, r1
 80083a8:	f000 80fa 	beq.w	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80083ac:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 80083b0:	430b      	orrs	r3, r1
 80083b2:	f000 8143 	beq.w	800863c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80083b6:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 80083ba:	4308      	orrs	r0, r1
 80083bc:	d137      	bne.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80083be:	4a9a      	ldr	r2, [pc, #616]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80083c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 80083c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083ca:	f000 8084 	beq.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80083ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083d2:	f000 8157 	beq.w	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80083d6:	bb53      	cbnz	r3, 800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80083d8:	6810      	ldr	r0, [r2, #0]
 80083da:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80083de:	d044      	beq.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 80083e0:	4892      	ldr	r0, [pc, #584]	; (800862c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80083e2:	e042      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80083e4:	4a90      	ldr	r2, [pc, #576]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80083e6:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80083e8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 80083ec:	2b80      	cmp	r3, #128	; 0x80
 80083ee:	f000 80a6 	beq.w	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80083f2:	d920      	bls.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80083f4:	2bc0      	cmp	r3, #192	; 0xc0
 80083f6:	d037      	beq.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80083f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083fc:	d117      	bne.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083fe:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008400:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008402:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008406:	0749      	lsls	r1, r1, #29
 8008408:	d502      	bpl.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 80c2 	beq.w	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008410:	4a85      	ldr	r2, [pc, #532]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008412:	6812      	ldr	r2, [r2, #0]
 8008414:	05d0      	lsls	r0, r2, #23
 8008416:	d503      	bpl.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8008418:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800841c:	f000 8102 	beq.w	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008420:	4a81      	ldr	r2, [pc, #516]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008422:	6812      	ldr	r2, [r2, #0]
 8008424:	0391      	lsls	r1, r2, #14
 8008426:	d502      	bpl.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800842c:	d0d8      	beq.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 800842e:	2000      	movs	r0, #0
}
 8008430:	b005      	add	sp, #20
 8008432:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8008436:	2b00      	cmp	r3, #0
 8008438:	d04d      	beq.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800843a:	2b40      	cmp	r3, #64	; 0x40
 800843c:	d1f7      	bne.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800843e:	6810      	ldr	r0, [r2, #0]
 8008440:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008444:	d011      	beq.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008446:	a801      	add	r0, sp, #4
 8008448:	f7ff fd84 	bl	8007f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800844c:	9801      	ldr	r0, [sp, #4]
 800844e:	e00c      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008450:	4a75      	ldr	r2, [pc, #468]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008452:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008454:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8008458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800845c:	d06f      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800845e:	d938      	bls.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 8008460:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008464:	f040 8088 	bne.w	8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8008468:	4871      	ldr	r0, [pc, #452]	; (8008630 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 800846a:	b005      	add	sp, #20
 800846c:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008470:	4b6d      	ldr	r3, [pc, #436]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008474:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8008478:	2b04      	cmp	r3, #4
 800847a:	d8d8      	bhi.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800847c:	a201      	add	r2, pc, #4	; (adr r2, 8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800847e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008482:	bf00      	nop
 8008484:	08008527 	.word	0x08008527
 8008488:	08008503 	.word	0x08008503
 800848c:	08008513 	.word	0x08008513
 8008490:	08008469 	.word	0x08008469
 8008494:	0800850f 	.word	0x0800850f
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008498:	4a63      	ldr	r2, [pc, #396]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800849a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800849c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 80084a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084a4:	d04b      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80084a6:	d944      	bls.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 80084a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80084ac:	d0dc      	beq.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80084ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80084b2:	d1bc      	bne.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084b6:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084bc:	0752      	lsls	r2, r2, #29
 80084be:	d5a7      	bpl.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1a5      	bne.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084c4:	4b58      	ldr	r3, [pc, #352]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80084c6:	485b      	ldr	r0, [pc, #364]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80084ce:	40d8      	lsrs	r0, r3
 80084d0:	e7cb      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d154      	bne.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084d6:	6810      	ldr	r0, [r2, #0]
 80084d8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80084dc:	d0c5      	beq.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084de:	a801      	add	r0, sp, #4
 80084e0:	f7ff fe90 	bl	8008204 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084e4:	9802      	ldr	r0, [sp, #8]
 80084e6:	e7c0      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80084e8:	4a4f      	ldr	r2, [pc, #316]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80084ea:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80084ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 80084f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084f4:	f000 80d0 	beq.w	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 80084f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084fc:	d0da      	beq.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d195      	bne.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008502:	4b49      	ldr	r3, [pc, #292]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800850a:	d0ae      	beq.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800850c:	e79b      	b.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800850e:	4a46      	ldr	r2, [pc, #280]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008510:	e775      	b.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008512:	4b45      	ldr	r3, [pc, #276]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008514:	6818      	ldr	r0, [r3, #0]
 8008516:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800851a:	d0a6      	beq.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800851c:	a801      	add	r0, sp, #4
 800851e:	f7ff fdc5 	bl	80080ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008522:	9801      	ldr	r0, [sp, #4]
 8008524:	e7a1      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008526:	4b40      	ldr	r3, [pc, #256]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008528:	6818      	ldr	r0, [r3, #0]
 800852a:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800852e:	d09c      	beq.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008530:	e7d5      	b.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0cf      	beq.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008536:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800853a:	d080      	beq.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 800853c:	e777      	b.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800853e:	6810      	ldr	r0, [r2, #0]
 8008540:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008544:	d091      	beq.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008546:	e7e9      	b.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008548:	4a37      	ldr	r2, [pc, #220]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800854a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800854c:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8008550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008554:	d0f3      	beq.n	800853e <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008556:	d806      	bhi.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8008558:	2b00      	cmp	r3, #0
 800855a:	d0bc      	beq.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800855c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008560:	f43f af6d 	beq.w	800843e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8008564:	e763      	b.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008566:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800856a:	f43f af7d 	beq.w	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800856e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008572:	f43f af44 	beq.w	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8008576:	e75a      	b.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 8008578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800857c:	d09a      	beq.n	80084b4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800857e:	e756      	b.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008584:	f43f af5b 	beq.w	800843e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8008588:	e751      	b.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800858a:	6810      	ldr	r0, [r2, #0]
 800858c:	f010 0004 	ands.w	r0, r0, #4
 8008590:	f43f af6b 	beq.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008594:	6813      	ldr	r3, [r2, #0]
 8008596:	4827      	ldr	r0, [pc, #156]	; (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8008598:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800859c:	40d8      	lsrs	r0, r3
 800859e:	e764      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80085a0:	4b21      	ldr	r3, [pc, #132]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80085a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 80085a4:	03d2      	lsls	r2, r2, #15
 80085a6:	d5bf      	bpl.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80085ae:	f43f af5c 	beq.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b2:	a801      	add	r0, sp, #4
 80085b4:	f7ff fcce 	bl	8007f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80085b8:	9803      	ldr	r0, [sp, #12]
 80085ba:	e756      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80085bc:	4a1a      	ldr	r2, [pc, #104]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80085be:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80085c0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 80085c4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80085c8:	d0df      	beq.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80085ca:	d810      	bhi.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80085cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d0:	d058      	beq.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80085d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085d6:	d118      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085d8:	4b13      	ldr	r3, [pc, #76]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80085da:	6818      	ldr	r0, [r3, #0]
 80085dc:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80085e0:	f43f af43 	beq.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085e4:	a801      	add	r0, sp, #4
 80085e6:	f7ff fd61 	bl	80080ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085ea:	9802      	ldr	r0, [sp, #8]
 80085ec:	e73d      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80085ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80085f2:	d012      	beq.n	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 80085f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085f8:	f47f af19 	bne.w	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80085fc:	4b0a      	ldr	r3, [pc, #40]	; (8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80085fe:	6818      	ldr	r0, [r3, #0]
 8008600:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008604:	f43f af31 	beq.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008608:	e6ea      	b.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 800860a:	2b00      	cmp	r3, #0
 800860c:	f47f af0f 	bne.w	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 8008610:	b005      	add	sp, #20
 8008612:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8008616:	f7fe bd77 	b.w	8007108 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800861a:	6810      	ldr	r0, [r2, #0]
 800861c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008620:	f43f af23 	beq.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8008624:	4804      	ldr	r0, [pc, #16]	; (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008626:	e720      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8008628:	58024400 	.word	0x58024400
 800862c:	017d7840 	.word	0x017d7840
 8008630:	00bb8000 	.word	0x00bb8000
 8008634:	03d09000 	.word	0x03d09000
 8008638:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800863c:	4b28      	ldr	r3, [pc, #160]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800863e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008640:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8008644:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008648:	d037      	beq.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800864a:	d814      	bhi.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800864c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008650:	d03f      	beq.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 8008652:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008656:	d0bf      	beq.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8008658:	2b00      	cmp	r3, #0
 800865a:	f47f aee8 	bne.w	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800865e:	f7fe fd13 	bl	8007088 <HAL_RCC_GetHCLKFreq>
 8008662:	4b1f      	ldr	r3, [pc, #124]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8008664:	4a1f      	ldr	r2, [pc, #124]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 8008666:	6a1b      	ldr	r3, [r3, #32]
 8008668:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800866c:	5cd3      	ldrb	r3, [r2, r3]
 800866e:	f003 031f 	and.w	r3, r3, #31
 8008672:	40d8      	lsrs	r0, r3
        break;
 8008674:	e6f9      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8008676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800867a:	d017      	beq.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 800867c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008680:	d0bc      	beq.n	80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8008682:	e6d4      	b.n	800842e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008684:	6810      	ldr	r0, [r2, #0]
 8008686:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800868a:	f43f aeee 	beq.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800868e:	a801      	add	r0, sp, #4
 8008690:	f7ff fc60 	bl	8007f54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008694:	9802      	ldr	r0, [sp, #8]
 8008696:	e6e8      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008698:	6810      	ldr	r0, [r2, #0]
 800869a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800869e:	f43f aee4 	beq.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086a2:	a801      	add	r0, sp, #4
 80086a4:	f7ff fd02 	bl	80080ac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80086a8:	9803      	ldr	r0, [sp, #12]
 80086aa:	e6de      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80086ac:	4b0c      	ldr	r3, [pc, #48]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80086ae:	6818      	ldr	r0, [r3, #0]
 80086b0:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80086b4:	f43f aed9 	beq.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80086b8:	e7b4      	b.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086ba:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80086bc:	6818      	ldr	r0, [r3, #0]
 80086be:	f010 0004 	ands.w	r0, r0, #4
 80086c2:	f43f aed2 	beq.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4807      	ldr	r0, [pc, #28]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 80086ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80086ce:	40d8      	lsrs	r0, r3
 80086d0:	e6cb      	b.n	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80086d2:	4b03      	ldr	r3, [pc, #12]	; (80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80086da:	f43f aec6 	beq.w	800846a <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80086de:	e7d6      	b.n	800868e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80086e0:	58024400 	.word	0x58024400
 80086e4:	08019888 	.word	0x08019888
 80086e8:	03d09000 	.word	0x03d09000

080086ec <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d03c      	beq.n	800876a <HAL_RNG_Init+0x7e>
{
 80086f0:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80086f2:	7a43      	ldrb	r3, [r0, #9]
 80086f4:	4604      	mov	r4, r0
 80086f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d031      	beq.n	8008762 <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80086fe:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 8008700:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008702:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8008704:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8008706:	6813      	ldr	r3, [r2, #0]
 8008708:	f023 0320 	bic.w	r3, r3, #32
 800870c:	430b      	orrs	r3, r1
 800870e:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008710:	6822      	ldr	r2, [r4, #0]
 8008712:	6813      	ldr	r3, [r2, #0]
 8008714:	f043 0304 	orr.w	r3, r3, #4
 8008718:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	0658      	lsls	r0, r3, #25
 8008720:	d503      	bpl.n	800872a <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8008722:	2304      	movs	r3, #4
    return HAL_ERROR;
 8008724:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8008726:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8008728:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 800872a:	f7fb f9e3 	bl	8003af4 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800872e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008730:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	0759      	lsls	r1, r3, #29
 8008736:	d50e      	bpl.n	8008756 <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008738:	f7fb f9dc 	bl	8003af4 <HAL_GetTick>
 800873c:	1b43      	subs	r3, r0, r5
 800873e:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008740:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008742:	d9f6      	bls.n	8008732 <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008744:	685a      	ldr	r2, [r3, #4]
 8008746:	0752      	lsls	r2, r2, #29
 8008748:	d5f3      	bpl.n	8008732 <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
 800874a:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800874c:	2302      	movs	r3, #2
        return HAL_ERROR;
 800874e:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 8008750:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008752:	60e3      	str	r3, [r4, #12]
}
 8008754:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008756:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 8008758:	2201      	movs	r2, #1
  return HAL_OK;
 800875a:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800875c:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800875e:	60e3      	str	r3, [r4, #12]
}
 8008760:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 8008762:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8008764:	f7fa f842 	bl	80027ec <HAL_RNG_MspInit>
 8008768:	e7c9      	b.n	80086fe <HAL_RNG_Init+0x12>
    return HAL_ERROR;
 800876a:	2001      	movs	r0, #1
}
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop

08008770 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008772:	7a03      	ldrb	r3, [r0, #8]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d027      	beq.n	80087c8 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008778:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 800877a:	2201      	movs	r2, #1
 800877c:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 800877e:	4293      	cmp	r3, r2
 8008780:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
 8008782:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8008784:	d006      	beq.n	8008794 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008786:	2304      	movs	r3, #4
    status = HAL_ERROR;
 8008788:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800878a:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800878c:	2300      	movs	r3, #0
 800878e:	7223      	strb	r3, [r4, #8]

  return status;
}
 8008790:	4630      	mov	r0, r6
 8008792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8008794:	2302      	movs	r3, #2
 8008796:	460d      	mov	r5, r1
 8008798:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 800879a:	f7fb f9ab 	bl	8003af4 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800879e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80087a0:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80087a2:	685a      	ldr	r2, [r3, #4]
 80087a4:	07d2      	lsls	r2, r2, #31
 80087a6:	d412      	bmi.n	80087ce <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80087a8:	f7fb f9a4 	bl	8003af4 <HAL_GetTick>
 80087ac:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80087ae:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80087b0:	2802      	cmp	r0, #2
 80087b2:	d9f6      	bls.n	80087a2 <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	f012 0201 	ands.w	r2, r2, #1
 80087ba:	d1f2      	bne.n	80087a2 <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 80087bc:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80087be:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 80087c0:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 80087c2:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80087c4:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 80087c6:	e7e3      	b.n	8008790 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 80087c8:	2602      	movs	r6, #2
}
 80087ca:	4630      	mov	r0, r6
 80087cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 80087ce:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
 80087d0:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 80087d2:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
 80087d4:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 80087d6:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 80087d8:	7262      	strb	r2, [r4, #9]
 80087da:	e7d7      	b.n	800878c <HAL_RNG_GenerateRandomNumber+0x1c>

080087dc <HAL_SAI_Init>:
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80087dc:	2800      	cmp	r0, #0
 80087de:	f000 81a5 	beq.w	8008b2c <HAL_SAI_Init+0x350>
{
 80087e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e4:	4604      	mov	r4, r0
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80087e6:	f7fb f99d 	bl	8003b24 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80087ea:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80087ee:	6822      	ldr	r2, [r4, #0]
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d01f      	beq.n	8008834 <HAL_SAI_Init+0x58>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80087f4:	4ba8      	ldr	r3, [pc, #672]	; (8008a98 <HAL_SAI_Init+0x2bc>)
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d02d      	beq.n	8008856 <HAL_SAI_Init+0x7a>
 80087fa:	3320      	adds	r3, #32
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d02a      	beq.n	8008856 <HAL_SAI_Init+0x7a>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008800:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8008804:	429a      	cmp	r2, r3
 8008806:	f000 812a 	beq.w	8008a5e <HAL_SAI_Init+0x282>
 800880a:	3320      	adds	r3, #32
 800880c:	429a      	cmp	r2, r3
 800880e:	f000 8126 	beq.w	8008a5e <HAL_SAI_Init+0x282>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008812:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8008816:	429a      	cmp	r2, r3
 8008818:	f000 818c 	beq.w	8008b34 <HAL_SAI_Init+0x358>
 800881c:	3320      	adds	r3, #32
 800881e:	429a      	cmp	r2, r3
 8008820:	f000 8188 	beq.w	8008b34 <HAL_SAI_Init+0x358>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008824:	4b9d      	ldr	r3, [pc, #628]	; (8008a9c <HAL_SAI_Init+0x2c0>)
 8008826:	429a      	cmp	r2, r3
 8008828:	d002      	beq.n	8008830 <HAL_SAI_Init+0x54>
 800882a:	3320      	adds	r3, #32
 800882c:	429a      	cmp	r2, r3
 800882e:	d110      	bne.n	8008852 <HAL_SAI_Init+0x76>
  {
    SaiBaseAddress = SAI4;
 8008830:	4d9b      	ldr	r5, [pc, #620]	; (8008aa0 <HAL_SAI_Init+0x2c4>)
 8008832:	e011      	b.n	8008858 <HAL_SAI_Init+0x7c>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008834:	4b98      	ldr	r3, [pc, #608]	; (8008a98 <HAL_SAI_Init+0x2bc>)
 8008836:	429a      	cmp	r2, r3
 8008838:	d005      	beq.n	8008846 <HAL_SAI_Init+0x6a>
 800883a:	f103 53c0 	add.w	r3, r3, #402653184	; 0x18000000
 800883e:	f5a3 3382 	sub.w	r3, r3, #66560	; 0x10400
 8008842:	429a      	cmp	r2, r3
 8008844:	d105      	bne.n	8008852 <HAL_SAI_Init+0x76>
 8008846:	6863      	ldr	r3, [r4, #4]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d102      	bne.n	8008852 <HAL_SAI_Init+0x76>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800884c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0d0      	beq.n	80087f4 <HAL_SAI_Init+0x18>
    return HAL_ERROR;
 8008852:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 8008854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 8008856:	4d93      	ldr	r5, [pc, #588]	; (8008aa4 <HAL_SAI_Init+0x2c8>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8008858:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800885c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 8104 	beq.w	8008a6e <HAL_SAI_Init+0x292>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008866:	4b90      	ldr	r3, [pc, #576]	; (8008aa8 <HAL_SAI_Init+0x2cc>)
 8008868:	4990      	ldr	r1, [pc, #576]	; (8008aac <HAL_SAI_Init+0x2d0>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008870:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008872:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8008874:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008878:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800887a:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800887c:	b1eb      	cbz	r3, 80088ba <HAL_SAI_Init+0xde>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800887e:	6822      	ldr	r2, [r4, #0]
    count--;
 8008880:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008882:	6810      	ldr	r0, [r2, #0]
 8008884:	f410 3080 	ands.w	r0, r0, #65536	; 0x10000
 8008888:	d1f8      	bne.n	800887c <HAL_SAI_Init+0xa0>
  switch (hsai->Init.SynchroExt)
 800888a:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 800888c:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 800888e:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 8008890:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8008894:	f000 814c 	beq.w	8008b30 <HAL_SAI_Init+0x354>
 8008898:	1a9b      	subs	r3, r3, r2
 800889a:	fab3 f383 	clz	r3, r3
 800889e:	095b      	lsrs	r3, r3, #5
 80088a0:	015b      	lsls	r3, r3, #5
  switch (hsai->Init.Synchro)
 80088a2:	68a2      	ldr	r2, [r4, #8]
 80088a4:	3a01      	subs	r2, #1
 80088a6:	2a04      	cmp	r2, #4
 80088a8:	f200 817c 	bhi.w	8008ba4 <HAL_SAI_Init+0x3c8>
 80088ac:	e8df f012 	tbh	[pc, r2, lsl #1]
 80088b0:	000f00e6 	.word	0x000f00e6
 80088b4:	000d00ee 	.word	0x000d00ee
 80088b8:	00e9      	.short	0x00e9
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80088ba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 80088be:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80088c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088c4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 80088c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80088ca:	f043 0302 	orr.w	r3, r3, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80088ce:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 80088d2:	602b      	str	r3, [r5, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80088d4:	6a23      	ldr	r3, [r4, #32]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d047      	beq.n	800896a <HAL_SAI_Init+0x18e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	4a6e      	ldr	r2, [pc, #440]	; (8008a98 <HAL_SAI_Init+0x2bc>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	f000 8147 	beq.w	8008b72 <HAL_SAI_Init+0x396>
 80088e4:	3220      	adds	r2, #32
 80088e6:	4293      	cmp	r3, r2
 80088e8:	f000 8143 	beq.w	8008b72 <HAL_SAI_Init+0x396>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80088ec:	4a70      	ldr	r2, [pc, #448]	; (8008ab0 <HAL_SAI_Init+0x2d4>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	f000 8138 	beq.w	8008b64 <HAL_SAI_Init+0x388>
 80088f4:	3220      	adds	r2, #32
 80088f6:	4293      	cmp	r3, r2
 80088f8:	f000 8134 	beq.w	8008b64 <HAL_SAI_Init+0x388>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80088fc:	4a6d      	ldr	r2, [pc, #436]	; (8008ab4 <HAL_SAI_Init+0x2d8>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	f000 8129 	beq.w	8008b56 <HAL_SAI_Init+0x37a>
 8008904:	3220      	adds	r2, #32
 8008906:	4293      	cmp	r3, r2
 8008908:	f000 8125 	beq.w	8008b56 <HAL_SAI_Init+0x37a>
    if (hsai->Instance == SAI4_Block_A)
 800890c:	4a63      	ldr	r2, [pc, #396]	; (8008a9c <HAL_SAI_Init+0x2c0>)
 800890e:	4293      	cmp	r3, r2
 8008910:	f000 813e 	beq.w	8008b90 <HAL_SAI_Init+0x3b4>
    if (hsai->Instance == SAI4_Block_B)
 8008914:	4a68      	ldr	r2, [pc, #416]	; (8008ab8 <HAL_SAI_Init+0x2dc>)
 8008916:	4293      	cmp	r3, r2
 8008918:	f000 8134 	beq.w	8008b84 <HAL_SAI_Init+0x3a8>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800891c:	69a3      	ldr	r3, [r4, #24]
 800891e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008922:	f000 8109 	beq.w	8008b38 <HAL_SAI_Init+0x35c>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008926:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008928:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800892c:	6a21      	ldr	r1, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800892e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008932:	ea4f 0340 	mov.w	r3, r0, lsl #1
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008936:	bf0c      	ite	eq
 8008938:	2202      	moveq	r2, #2
 800893a:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800893c:	fb01 f202 	mul.w	r2, r1, r2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008940:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008942:	0212      	lsls	r2, r2, #8
 8008944:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 8008948:	4a5c      	ldr	r2, [pc, #368]	; (8008abc <HAL_SAI_Init+0x2e0>)
 800894a:	fba2 0203 	umull	r0, r2, r2, r3
 800894e:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 8008950:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8008954:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8008958:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 800895a:	bf08      	it	eq
 800895c:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800895e:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 8008960:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008962:	d102      	bne.n	800896a <HAL_SAI_Init+0x18e>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008964:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008966:	085b      	lsrs	r3, r3, #1
 8008968:	6263      	str	r3, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800896a:	6863      	ldr	r3, [r4, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800896c:	6d27      	ldr	r7, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800896e:	f033 0302 	bics.w	r3, r3, #2
 8008972:	f040 80d4 	bne.w	8008b1e <HAL_SAI_Init+0x342>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008976:	3f01      	subs	r7, #1
 8008978:	bf18      	it	ne
 800897a:	2701      	movne	r7, #1
 800897c:	027f      	lsls	r7, r7, #9
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800897e:	f7fb f8d1 	bl	8003b24 <HAL_GetREVID>
 8008982:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008986:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008988:	f0c0 80b5 	bcc.w	8008af6 <HAL_SAI_Init+0x31a>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800898c:	6811      	ldr	r1, [r2, #0]
 800898e:	4b4c      	ldr	r3, [pc, #304]	; (8008ac0 <HAL_SAI_Init+0x2e4>)
 8008990:	400b      	ands	r3, r1
 8008992:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008994:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008996:	e9d4 2300 	ldrd	r2, r3, [r4]
 800899a:	430b      	orrs	r3, r1
 800899c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800899e:	430b      	orrs	r3, r1
 80089a0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80089a2:	430b      	orrs	r3, r1
 80089a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80089a6:	430b      	orrs	r3, r1
 80089a8:	6961      	ldr	r1, [r4, #20]
 80089aa:	430b      	orrs	r3, r1
 80089ac:	69a1      	ldr	r1, [r4, #24]
 80089ae:	430b      	orrs	r3, r1
 80089b0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80089b2:	430b      	orrs	r3, r1
 80089b4:	6921      	ldr	r1, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80089b6:	430b      	orrs	r3, r1
 80089b8:	6811      	ldr	r1, [r2, #0]
 80089ba:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80089bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80089be:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80089c2:	4333      	orrs	r3, r6
 80089c4:	433b      	orrs	r3, r7
 80089c6:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80089c8:	6822      	ldr	r2, [r4, #0]
 80089ca:	4b3e      	ldr	r3, [pc, #248]	; (8008ac4 <HAL_SAI_Init+0x2e8>)
 80089cc:	6851      	ldr	r1, [r2, #4]
 80089ce:	400b      	ands	r3, r1
 80089d0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80089d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80089d4:	69e3      	ldr	r3, [r4, #28]
 80089d6:	6822      	ldr	r2, [r4, #0]
 80089d8:	430b      	orrs	r3, r1
 80089da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089dc:	430b      	orrs	r3, r1
 80089de:	6851      	ldr	r1, [r2, #4]
 80089e0:	430b      	orrs	r3, r1
 80089e2:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80089e4:	6822      	ldr	r2, [r4, #0]
 80089e6:	4b38      	ldr	r3, [pc, #224]	; (8008ac8 <HAL_SAI_Init+0x2ec>)
 80089e8:	6891      	ldr	r1, [r2, #8]
 80089ea:	400b      	ands	r3, r1
 80089ec:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80089ee:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80089f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089f2:	6821      	ldr	r1, [r4, #0]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80089f8:	6888      	ldr	r0, [r1, #8]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80089fe:	4303      	orrs	r3, r0
 8008a00:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008a02:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008a06:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008a08:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008a0a:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008a0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008a10:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008a12:	6822      	ldr	r2, [r4, #0]
 8008a14:	68d3      	ldr	r3, [r2, #12]
 8008a16:	4003      	ands	r3, r0
 8008a18:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008a1a:	6821      	ldr	r1, [r4, #0]
 8008a1c:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
 8008a20:	68ca      	ldr	r2, [r1, #12]
 8008a22:	4303      	orrs	r3, r0
 8008a24:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008a26:	6f62      	ldr	r2, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008a28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008a2c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8008a2e:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008a30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008a34:	4a18      	ldr	r2, [pc, #96]	; (8008a98 <HAL_SAI_Init+0x2bc>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008a36:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008a38:	6823      	ldr	r3, [r4, #0]
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d048      	beq.n	8008ad0 <HAL_SAI_Init+0x2f4>
 8008a3e:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8008a42:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d042      	beq.n	8008ad0 <HAL_SAI_Init+0x2f4>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008a4a:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8008a4c:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008a4e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 8008a52:	4618      	mov	r0, r3
  __HAL_UNLOCK(hsai);
 8008a54:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  hsai->State = HAL_SAI_STATE_READY;
 8008a58:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
}
 8008a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (hsai->State == HAL_SAI_STATE_RESET)
 8008a5e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    SaiBaseAddress = SAI2;
 8008a62:	4d1a      	ldr	r5, [pc, #104]	; (8008acc <HAL_SAI_Init+0x2f0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8008a64:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f47f aefc 	bne.w	8008866 <HAL_SAI_Init+0x8a>
    HAL_SAI_MspInit(hsai);
 8008a6e:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
 8008a70:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8008a74:	f7f9 ff22 	bl	80028bc <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 8008a78:	6822      	ldr	r2, [r4, #0]
 8008a7a:	e6f4      	b.n	8008866 <HAL_SAI_Init+0x8a>
  switch (hsai->Init.Synchro)
 8008a7c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8008a80:	e727      	b.n	80088d2 <HAL_SAI_Init+0xf6>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008a82:	f043 0303 	orr.w	r3, r3, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008a86:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 8008a8a:	e722      	b.n	80088d2 <HAL_SAI_Init+0xf6>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008a8c:	f043 0301 	orr.w	r3, r3, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008a90:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 8008a94:	e71d      	b.n	80088d2 <HAL_SAI_Init+0xf6>
 8008a96:	bf00      	nop
 8008a98:	40015804 	.word	0x40015804
 8008a9c:	58005404 	.word	0x58005404
 8008aa0:	58005400 	.word	0x58005400
 8008aa4:	40015800 	.word	0x40015800
 8008aa8:	20000af0 	.word	0x20000af0
 8008aac:	95cbec1b 	.word	0x95cbec1b
 8008ab0:	40015c04 	.word	0x40015c04
 8008ab4:	40016004 	.word	0x40016004
 8008ab8:	58005424 	.word	0x58005424
 8008abc:	cccccccd 	.word	0xcccccccd
 8008ac0:	f005c010 	.word	0xf005c010
 8008ac4:	ffff1ff0 	.word	0xffff1ff0
 8008ac8:	fff88000 	.word	0xfff88000
 8008acc:	40015c00 	.word	0x40015c00
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008ad0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008ad2:	f023 0301 	bic.w	r3, r3, #1
 8008ad6:	646b      	str	r3, [r5, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008ad8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d1b4      	bne.n	8008a4a <HAL_SAI_Init+0x26e>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008ae0:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008ae4:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008ae6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008aea:	646b      	str	r3, [r5, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8008aec:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008aee:	f043 0301 	orr.w	r3, r3, #1
 8008af2:	646b      	str	r3, [r5, #68]	; 0x44
 8008af4:	e7a9      	b.n	8008a4a <HAL_SAI_Init+0x26e>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008af6:	6811      	ldr	r1, [r2, #0]
 8008af8:	4b2b      	ldr	r3, [pc, #172]	; (8008ba8 <HAL_SAI_Init+0x3cc>)
 8008afa:	400b      	ands	r3, r1
 8008afc:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008afe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008b00:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008b04:	430b      	orrs	r3, r1
 8008b06:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b08:	430b      	orrs	r3, r1
 8008b0a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008b0c:	430b      	orrs	r3, r1
 8008b0e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008b10:	430b      	orrs	r3, r1
 8008b12:	6961      	ldr	r1, [r4, #20]
 8008b14:	430b      	orrs	r3, r1
 8008b16:	69a1      	ldr	r1, [r4, #24]
 8008b18:	430b      	orrs	r3, r1
 8008b1a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008b1c:	e74b      	b.n	80089b6 <HAL_SAI_Init+0x1da>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008b1e:	f1a7 0701 	sub.w	r7, r7, #1
 8008b22:	fab7 f787 	clz	r7, r7
 8008b26:	097f      	lsrs	r7, r7, #5
 8008b28:	027f      	lsls	r7, r7, #9
 8008b2a:	e728      	b.n	800897e <HAL_SAI_Init+0x1a2>
    return HAL_ERROR;
 8008b2c:	2001      	movs	r0, #1
}
 8008b2e:	4770      	bx	lr
  switch (hsai->Init.SynchroExt)
 8008b30:	2310      	movs	r3, #16
 8008b32:	e6b6      	b.n	80088a2 <HAL_SAI_Init+0xc6>
    SaiBaseAddress = SAI3;
 8008b34:	4d1d      	ldr	r5, [pc, #116]	; (8008bac <HAL_SAI_Init+0x3d0>)
 8008b36:	e68f      	b.n	8008858 <HAL_SAI_Init+0x7c>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008b38:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008b3a:	2904      	cmp	r1, #4
 8008b3c:	d020      	beq.n	8008b80 <HAL_SAI_Init+0x3a4>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008b3e:	2908      	cmp	r1, #8
 8008b40:	d02d      	beq.n	8008b9e <HAL_SAI_Init+0x3c2>
        tmpframelength = hsai->FrameInit.FrameLength;
 8008b42:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008b44:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008b48:	0043      	lsls	r3, r0, #1
 8008b4a:	6a20      	ldr	r0, [r4, #32]
 8008b4c:	fb00 f202 	mul.w	r2, r0, r2
 8008b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b54:	e6f8      	b.n	8008948 <HAL_SAI_Init+0x16c>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8008b56:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008b5a:	2100      	movs	r1, #0
 8008b5c:	f7ff fbfe 	bl	800835c <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	e6d3      	b.n	800890c <HAL_SAI_Init+0x130>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008b64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008b68:	2100      	movs	r1, #0
 8008b6a:	f7ff fbf7 	bl	800835c <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	e6c4      	b.n	80088fc <HAL_SAI_Init+0x120>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008b72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008b76:	2100      	movs	r1, #0
 8008b78:	f7ff fbf0 	bl	800835c <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	e6b5      	b.n	80088ec <HAL_SAI_Init+0x110>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8008b80:	2240      	movs	r2, #64	; 0x40
 8008b82:	e7df      	b.n	8008b44 <HAL_SAI_Init+0x368>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008b84:	2100      	movs	r1, #0
 8008b86:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008b8a:	f7ff fbe7 	bl	800835c <HAL_RCCEx_GetPeriphCLKFreq>
 8008b8e:	e6c5      	b.n	800891c <HAL_SAI_Init+0x140>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8008b90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008b94:	2100      	movs	r1, #0
 8008b96:	f7ff fbe1 	bl	800835c <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 8008b9a:	6823      	ldr	r3, [r4, #0]
 8008b9c:	e6ba      	b.n	8008914 <HAL_SAI_Init+0x138>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8008b9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ba2:	e7cf      	b.n	8008b44 <HAL_SAI_Init+0x368>
      syncen_bits = 0;
 8008ba4:	2600      	movs	r6, #0
 8008ba6:	e694      	b.n	80088d2 <HAL_SAI_Init+0xf6>
 8008ba8:	f805c010 	.word	0xf805c010
 8008bac:	40016000 	.word	0x40016000

08008bb0 <HAL_SAI_InitProtocol>:
  switch (protocol)
 8008bb0:	2902      	cmp	r1, #2
{
 8008bb2:	b430      	push	{r4, r5}
  switch (protocol)
 8008bb4:	d928      	bls.n	8008c08 <HAL_SAI_InitProtocol+0x58>
 8008bb6:	f1a1 0c03 	sub.w	ip, r1, #3
 8008bba:	f1bc 0f01 	cmp.w	ip, #1
 8008bbe:	d820      	bhi.n	8008c02 <HAL_SAI_InitProtocol+0x52>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008bc0:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8008bc2:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008bc4:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008bc6:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008bc8:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 8008bca:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008bcc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8008bd0:	6744      	str	r4, [r0, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008bd2:	6844      	ldr	r4, [r0, #4]
 8008bd4:	f034 0402 	bics.w	r4, r4, #2
 8008bd8:	bf0c      	ite	eq
 8008bda:	2501      	moveq	r5, #1
 8008bdc:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
 8008bde:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008be0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8008be4:	6505      	str	r5, [r0, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 8008be6:	bf0c      	ite	eq
 8008be8:	2401      	moveq	r4, #1
 8008bea:	240d      	movne	r4, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008bec:	6601      	str	r1, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008bee:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8008bf2:	6584      	str	r4, [r0, #88]	; 0x58
 8008bf4:	6641      	str	r1, [r0, #100]	; 0x64
  switch (datasize)
 8008bf6:	2a03      	cmp	r2, #3
 8008bf8:	d803      	bhi.n	8008c02 <HAL_SAI_InitProtocol+0x52>
 8008bfa:	e8df f002 	tbb	[pc, r2]
 8008bfe:	382f      	.short	0x382f
 8008c00:	473e      	.short	0x473e
}
 8008c02:	2001      	movs	r0, #1
 8008c04:	bc30      	pop	{r4, r5}
 8008c06:	4770      	bx	lr
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008c08:	2400      	movs	r4, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8008c0a:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008c0c:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008c0e:	64c4      	str	r4, [r0, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 8008c10:	6684      	str	r4, [r0, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008c12:	6844      	ldr	r4, [r0, #4]
 8008c14:	f034 0402 	bics.w	r4, r4, #2
 8008c18:	bf14      	ite	ne
 8008c1a:	2401      	movne	r4, #1
 8008c1c:	2400      	moveq	r4, #0
 8008c1e:	6504      	str	r4, [r0, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8008c20:	f44f 3480 	mov.w	r4, #65536	; 0x10000
 8008c24:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008c26:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8008c2a:	6744      	str	r4, [r0, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 8008c2c:	f013 0401 	ands.w	r4, r3, #1
 8008c30:	d1e7      	bne.n	8008c02 <HAL_SAI_InitProtocol+0x52>
  if (protocol == SAI_I2S_STANDARD)
 8008c32:	b949      	cbnz	r1, 8008c48 <HAL_SAI_InitProtocol+0x98>
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8008c34:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8008c38:	e9c0 1418 	strd	r1, r4, [r0, #96]	; 0x60
  switch (datasize)
 8008c3c:	2a03      	cmp	r2, #3
 8008c3e:	d8e0      	bhi.n	8008c02 <HAL_SAI_InitProtocol+0x52>
 8008c40:	e8df f002 	tbb	[pc, r2]
 8008c44:	2630404f 	.word	0x2630404f
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8008c48:	6644      	str	r4, [r0, #100]	; 0x64
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8008c4a:	f44f 3400 	mov.w	r4, #131072	; 0x20000
 8008c4e:	6604      	str	r4, [r0, #96]	; 0x60
  switch (datasize)
 8008c50:	2a03      	cmp	r2, #3
 8008c52:	d8d6      	bhi.n	8008c02 <HAL_SAI_InitProtocol+0x52>
 8008c54:	e8df f002 	tbb	[pc, r2]
 8008c58:	1c263645 	.word	0x1c263645
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008c5c:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008c5e:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008c60:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008c62:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008c64:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008c66:	66c2      	str	r2, [r0, #108]	; 0x6c
}
 8008c68:	bc30      	pop	{r4, r5}
    status = HAL_SAI_Init(hsai);
 8008c6a:	f7ff bdb7 	b.w	80087dc <HAL_SAI_Init>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008c6e:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008c70:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008c72:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008c74:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008c76:	66c2      	str	r2, [r0, #108]	; 0x6c
  if (status == HAL_OK)
 8008c78:	e7f6      	b.n	8008c68 <HAL_SAI_InitProtocol+0xb8>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008c7a:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008c7c:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008c7e:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008c80:	6481      	str	r1, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008c82:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008c84:	66c2      	str	r2, [r0, #108]	; 0x6c
}
 8008c86:	bc30      	pop	{r4, r5}
    status = HAL_SAI_Init(hsai);
 8008c88:	f7ff bda8 	b.w	80087dc <HAL_SAI_Init>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008c8c:	21e0      	movs	r1, #224	; 0xe0
 8008c8e:	e7f5      	b.n	8008c7c <HAL_SAI_InitProtocol+0xcc>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008c90:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008c92:	24e0      	movs	r4, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008c94:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008c96:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008c98:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008c9a:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008c9c:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008c9e:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008ca2:	e7e1      	b.n	8008c68 <HAL_SAI_InitProtocol+0xb8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008ca4:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008ca6:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008ca8:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008caa:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008cac:	ea4f 1483 	mov.w	r4, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008cb0:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008cb2:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008cb6:	66c5      	str	r5, [r0, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008cb8:	6544      	str	r4, [r0, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008cba:	6583      	str	r3, [r0, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008cbc:	d1d4      	bne.n	8008c68 <HAL_SAI_InitProtocol+0xb8>
      hsai->SlotInit.FirstBitOffset = 8;
 8008cbe:	2308      	movs	r3, #8
 8008cc0:	6683      	str	r3, [r0, #104]	; 0x68
  if (status == HAL_OK)
 8008cc2:	e7d1      	b.n	8008c68 <HAL_SAI_InitProtocol+0xb8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008cc4:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008cc6:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008cc8:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008cca:	ea4f 1483 	mov.w	r4, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008cce:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008cd0:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008cd4:	66c2      	str	r2, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008cd6:	e9c0 4315 	strd	r4, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008cda:	d1c5      	bne.n	8008c68 <HAL_SAI_InitProtocol+0xb8>
      hsai->SlotInit.FirstBitOffset = 16;
 8008cdc:	2310      	movs	r3, #16
 8008cde:	6683      	str	r3, [r0, #104]	; 0x68
  if (status == HAL_OK)
 8008ce0:	e7c2      	b.n	8008c68 <HAL_SAI_InitProtocol+0xb8>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8008ce2:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008ce4:	2480      	movs	r4, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008ce6:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8008ce8:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008cea:	6484      	str	r4, [r0, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008cec:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008cee:	66c1      	str	r1, [r0, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008cf0:	e9c0 2315 	strd	r2, r3, [r0, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008cf4:	e7b8      	b.n	8008c68 <HAL_SAI_InitProtocol+0xb8>
 8008cf6:	bf00      	nop

08008cf8 <HAL_SAI_Transmit_DMA>:
{
 8008cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cfc:	460f      	mov	r7, r1
 8008cfe:	4604      	mov	r4, r0
 8008d00:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8008d02:	f7fa fef7 	bl	8003af4 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8008d06:	2f00      	cmp	r7, #0
 8008d08:	d06b      	beq.n	8008de2 <HAL_SAI_Transmit_DMA+0xea>
 8008d0a:	fab5 f985 	clz	r9, r5
 8008d0e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8008d12:	2d00      	cmp	r5, #0
 8008d14:	d065      	beq.n	8008de2 <HAL_SAI_Transmit_DMA+0xea>
  if (hsai->State == HAL_SAI_STATE_READY)
 8008d16:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	fa5f f883 	uxtb.w	r8, r3
 8008d20:	d15a      	bne.n	8008dd8 <HAL_SAI_Transmit_DMA+0xe0>
    __HAL_LOCK(hsai);
 8008d22:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d056      	beq.n	8008dd8 <HAL_SAI_Transmit_DMA+0xe0>
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8008d2a:	2312      	movs	r3, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008d2c:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8008d30:	4a3c      	ldr	r2, [pc, #240]	; (8008e24 <HAL_SAI_Transmit_DMA+0x12c>)
 8008d32:	4606      	mov	r6, r0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8008d34:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8008d38:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    hsai->pBuffPtr = pData;
 8008d3c:	67a7      	str	r7, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8008d3e:	f8a4 507c 	strh.w	r5, [r4, #124]	; 0x7c
    __HAL_LOCK(hsai);
 8008d42:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
    hsai->XferCount = Size;
 8008d46:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8008d4a:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8008d4c:	4a36      	ldr	r2, [pc, #216]	; (8008e28 <HAL_SAI_Transmit_DMA+0x130>)
 8008d4e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008d52:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8008d54:	4a35      	ldr	r2, [pc, #212]	; (8008e2c <HAL_SAI_Transmit_DMA+0x134>)
 8008d56:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008d5a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8008d5c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8008d60:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8008d64:	6822      	ldr	r2, [r4, #0]
 8008d66:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8008d6a:	321c      	adds	r2, #28
 8008d6c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008d6e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8008d72:	f7fb fc21 	bl	80045b8 <HAL_DMA_Start_IT>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d141      	bne.n	8008dfe <HAL_SAI_Transmit_DMA+0x106>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008d7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008d7c:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008d7e:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008d80:	d034      	beq.n	8008dec <HAL_SAI_Transmit_DMA+0xf4>
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008d82:	3b02      	subs	r3, #2
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008d84:	6822      	ldr	r2, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008d86:	2b01      	cmp	r3, #1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008d88:	6913      	ldr	r3, [r2, #16]
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008d8a:	bf94      	ite	ls
 8008d8c:	f048 0860 	orrls.w	r8, r8, #96	; 0x60
    tmpIT |= SAI_IT_WCKCFG;
 8008d90:	f048 0804 	orrhi.w	r8, r8, #4
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008d94:	ea43 0308 	orr.w	r3, r3, r8
 8008d98:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	6813      	ldr	r3, [r2, #0]
 8008d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008da2:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8008da4:	e005      	b.n	8008db2 <HAL_SAI_Transmit_DMA+0xba>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8008da6:	f7fa fea5 	bl	8003af4 <HAL_GetTick>
 8008daa:	1b83      	subs	r3, r0, r6
 8008dac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008db0:	d82a      	bhi.n	8008e08 <HAL_SAI_Transmit_DMA+0x110>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8008db2:	6822      	ldr	r2, [r4, #0]
 8008db4:	6955      	ldr	r5, [r2, #20]
 8008db6:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 8008dba:	d0f4      	beq.n	8008da6 <HAL_SAI_Transmit_DMA+0xae>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8008dbc:	6813      	ldr	r3, [r2, #0]
 8008dbe:	03db      	lsls	r3, r3, #15
 8008dc0:	d403      	bmi.n	8008dca <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
 8008dc2:	6813      	ldr	r3, [r2, #0]
 8008dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dc8:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 8008dca:	2300      	movs	r3, #0
    return HAL_OK;
 8008dcc:	4698      	mov	r8, r3
    __HAL_UNLOCK(hsai);
 8008dce:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8008dd8:	f04f 0802 	mov.w	r8, #2
}
 8008ddc:	4640      	mov	r0, r8
 8008dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 8008de2:	f04f 0801 	mov.w	r8, #1
}
 8008de6:	4640      	mov	r0, r8
 8008de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008dec:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008df0:	2a01      	cmp	r2, #1
 8008df2:	bf0c      	ite	eq
 8008df4:	f04f 0811 	moveq.w	r8, #17
 8008df8:	f04f 0801 	movne.w	r8, #1
 8008dfc:	e7c1      	b.n	8008d82 <HAL_SAI_Transmit_DMA+0x8a>
}
 8008dfe:	4640      	mov	r0, r8
      __HAL_UNLOCK(hsai);
 8008e00:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
}
 8008e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008e08:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8008e0c:	f04f 0803 	mov.w	r8, #3
        __HAL_UNLOCK(hsai);
 8008e10:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8008e18:	4640      	mov	r0, r8
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008e1a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8008e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e22:	bf00      	nop
 8008e24:	08008e8d 	.word	0x08008e8d
 8008e28:	08008e31 	.word	0x08008e31
 8008e2c:	08008e99 	.word	0x08008e99

08008e30 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8008e30:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008e32:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e34:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e3a:	d01c      	beq.n	8008e76 <SAI_DMATxCplt+0x46>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008e3c:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8008e44:	6813      	ldr	r3, [r2, #0]
 8008e46:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008e4a:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008e4c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008e4e:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008e50:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008e52:	d013      	beq.n	8008e7c <SAI_DMATxCplt+0x4c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008e54:	2201      	movs	r2, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008e56:	3b02      	subs	r3, #2

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008e58:	6801      	ldr	r1, [r0, #0]

    hsai->State = HAL_SAI_STATE_READY;
 8008e5a:	f04f 0c01 	mov.w	ip, #1
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008e5e:	2b01      	cmp	r3, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008e60:	690b      	ldr	r3, [r1, #16]
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008e62:	bf94      	ite	ls
 8008e64:	f042 0260 	orrls.w	r2, r2, #96	; 0x60
    tmpIT |= SAI_IT_WCKCFG;
 8008e68:	f042 0204 	orrhi.w	r2, r2, #4
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8008e6c:	ea23 0302 	bic.w	r3, r3, r2
 8008e70:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8008e72:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8008e76:	f00f ff8b 	bl	8018d90 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
 8008e7a:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008e7c:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008e80:	2a01      	cmp	r2, #1
 8008e82:	bf0c      	ite	eq
 8008e84:	2211      	moveq	r2, #17
 8008e86:	2201      	movne	r2, #1
 8008e88:	e7e5      	b.n	8008e56 <SAI_DMATxCplt+0x26>
 8008e8a:	bf00      	nop

08008e8c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e8c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8008e8e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8008e90:	f00f ff72 	bl	8018d78 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
 8008e94:	bd08      	pop	{r3, pc}
 8008e96:	bf00      	nop

08008e98 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e98:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e9a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008e9c:	f7fc fcac 	bl	80057f8 <HAL_DMA_GetError>
 8008ea0:	2802      	cmp	r0, #2
 8008ea2:	d100      	bne.n	8008ea6 <SAI_DMAError+0xe>
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
#endif
  }
}
 8008ea4:	bd10      	pop	{r4, pc}
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008ea6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008eaa:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008eb0:	4814      	ldr	r0, [pc, #80]	; (8008f04 <SAI_DMAError+0x6c>)
 8008eb2:	4a15      	ldr	r2, [pc, #84]	; (8008f08 <SAI_DMAError+0x70>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8008eb4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8008eb8:	680b      	ldr	r3, [r1, #0]
 8008eba:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ebe:	600b      	str	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008ec0:	6803      	ldr	r3, [r0, #0]
  __HAL_SAI_DISABLE(hsai);
 8008ec2:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008ec4:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8008ec8:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008eca:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8008ecc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008ed0:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8008ed2:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 8008ed4:	b173      	cbz	r3, 8008ef4 <SAI_DMAError+0x5c>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008ed6:	6822      	ldr	r2, [r4, #0]
    count--;
 8008ed8:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008eda:	6812      	ldr	r2, [r2, #0]
 8008edc:	03d2      	lsls	r2, r2, #15
 8008ede:	d4f9      	bmi.n	8008ed4 <SAI_DMAError+0x3c>
    hsai->State = HAL_SAI_STATE_READY;
 8008ee0:	2201      	movs	r2, #1
    hsai->XferCount = 0U;
 8008ee2:	2300      	movs	r3, #0
    HAL_SAI_ErrorCallback(hsai);
 8008ee4:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 8008ee6:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 8008eea:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 8008eee:	f00f ff4b 	bl	8018d88 <__HAL_SAI_ErrorCallback_veneer>
}
 8008ef2:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008ef4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8008ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008efc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 8008f00:	e7ee      	b.n	8008ee0 <SAI_DMAError+0x48>
 8008f02:	bf00      	nop
 8008f04:	20000af0 	.word	0x20000af0
 8008f08:	95cbec1b 	.word	0x95cbec1b

08008f0c <HAL_SD_GetCardStatus.part.0>:
  * @param  hsd: Pointer to SD handle
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
 8008f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f10:	4604      	mov	r4, r0
 8008f12:	b096      	sub	sp, #88	; 0x58
 8008f14:	460d      	mov	r5, r1
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008f16:	f7fa fded 	bl	8003af4 <HAL_GetTick>
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f1a:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8008f1c:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008f1e:	6820      	ldr	r0, [r4, #0]
 8008f20:	f001 fe94 	bl	800ac4c <SDMMC_GetResponse>
 8008f24:	0186      	lsls	r6, r0, #6
 8008f26:	d459      	bmi.n	8008fdc <HAL_SD_GetCardStatus.part.0+0xd0>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008f28:	2140      	movs	r1, #64	; 0x40
 8008f2a:	6820      	ldr	r0, [r4, #0]
 8008f2c:	f001 ffb2 	bl	800ae94 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f30:	b1e8      	cbz	r0, 8008f6e <HAL_SD_GetCardStatus.part.0+0x62>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
  if (errorstate != HAL_SD_ERROR_NONE)
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8008f32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f34:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f36:	6823      	ldr	r3, [r4, #0]
 8008f38:	4955      	ldr	r1, [pc, #340]	; (8009090 <HAL_SD_GetCardStatus.part.0+0x184>)
    hsd->State = HAL_SD_STATE_READY;
 8008f3a:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f3c:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008f3e:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 8008f40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f42:	4303      	orrs	r3, r0
 8008f44:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008f46:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f4e:	6820      	ldr	r0, [r4, #0]
 8008f50:	f001 ffa0 	bl	800ae94 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f54:	b138      	cbz	r0, 8008f66 <HAL_SD_GetCardStatus.part.0+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 8008f56:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f58:	6822      	ldr	r2, [r4, #0]
 8008f5a:	494d      	ldr	r1, [pc, #308]	; (8009090 <HAL_SD_GetCardStatus.part.0+0x184>)
    status = HAL_ERROR;
 8008f5c:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f5e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008f60:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008f62:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8008f66:	4630      	mov	r0, r6
 8008f68:	b016      	add	sp, #88	; 0x58
 8008f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008f6e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008f70:	6820      	ldr	r0, [r4, #0]
 8008f72:	0409      	lsls	r1, r1, #16
 8008f74:	f002 f81e 	bl	800afb4 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	d1da      	bne.n	8008f32 <HAL_SD_GetCardStatus.part.0+0x26>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f80:	9004      	str	r0, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f82:	2060      	movs	r0, #96	; 0x60
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f84:	2201      	movs	r2, #1
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f86:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 8008f88:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f8a:	4669      	mov	r1, sp
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f8c:	9205      	str	r2, [sp, #20]
  config.DataLength    = 64U;
 8008f8e:	9301      	str	r3, [sp, #4]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008f90:	2302      	movs	r3, #2
 8008f92:	e9cd 0302 	strd	r0, r3, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f96:	6820      	ldr	r0, [r4, #0]
 8008f98:	f001 fe5c 	bl	800ac54 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8008f9c:	6820      	ldr	r0, [r4, #0]
 8008f9e:	f002 f853 	bl	800b048 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fa2:	2800      	cmp	r0, #0
 8008fa4:	d1c5      	bne.n	8008f32 <HAL_SD_GetCardStatus.part.0+0x26>
  uint32_t *pData = pSDstatus;
 8008fa6:	ae06      	add	r6, sp, #24
 8008fa8:	e004      	b.n	8008fb4 <HAL_SD_GetCardStatus.part.0+0xa8>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
        pData++;
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008faa:	f7fa fda3 	bl	8003af4 <HAL_GetTick>
 8008fae:	1bc0      	subs	r0, r0, r7
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d017      	beq.n	8008fe4 <HAL_SD_GetCardStatus.part.0+0xd8>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fb8:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008fbe:	d114      	bne.n	8008fea <HAL_SD_GetCardStatus.part.0+0xde>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8008fc0:	0412      	lsls	r2, r2, #16
 8008fc2:	d5f2      	bpl.n	8008faa <HAL_SD_GetCardStatus.part.0+0x9e>
 8008fc4:	f106 0820 	add.w	r8, r6, #32
 8008fc8:	e000      	b.n	8008fcc <HAL_SD_GetCardStatus.part.0+0xc0>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f001 fe27 	bl	800ac20 <SDMMC_ReadFIFO>
 8008fd2:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 8008fd6:	45b0      	cmp	r8, r6
 8008fd8:	d1f7      	bne.n	8008fca <HAL_SD_GetCardStatus.part.0+0xbe>
 8008fda:	e7e6      	b.n	8008faa <HAL_SD_GetCardStatus.part.0+0x9e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8008fdc:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008fde:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008fe2:	e7a9      	b.n	8008f38 <HAL_SD_GetCardStatus.part.0+0x2c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008fe4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008fe8:	e7a5      	b.n	8008f36 <HAL_SD_GetCardStatus.part.0+0x2a>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008fea:	0710      	lsls	r0, r2, #28
 8008fec:	d449      	bmi.n	8009082 <HAL_SD_GetCardStatus.part.0+0x176>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ff0:	0791      	lsls	r1, r2, #30
 8008ff2:	d448      	bmi.n	8009086 <HAL_SD_GetCardStatus.part.0+0x17a>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008ff4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ff6:	0692      	lsls	r2, r2, #26
 8008ff8:	d50a      	bpl.n	8009010 <HAL_SD_GetCardStatus.part.0+0x104>
 8008ffa:	e046      	b.n	800908a <HAL_SD_GetCardStatus.part.0+0x17e>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8008ffc:	f001 fe10 	bl	800ac20 <SDMMC_ReadFIFO>
 8009000:	f846 0b04 	str.w	r0, [r6], #4
    pData++;

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009004:	f7fa fd76 	bl	8003af4 <HAL_GetTick>
 8009008:	1bc0      	subs	r0, r0, r7
 800900a:	3001      	adds	r0, #1
 800900c:	d0ea      	beq.n	8008fe4 <HAL_SD_GetCardStatus.part.0+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800900e:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009012:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009014:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009018:	d1f0      	bne.n	8008ffc <HAL_SD_GetCardStatus.part.0+0xf0>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800901a:	491e      	ldr	r1, [pc, #120]	; (8009094 <HAL_SD_GetCardStatus.part.0+0x188>)
  HAL_StatusTypeDef status = HAL_OK;
 800901c:	4616      	mov	r6, r2
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800901e:	6399      	str	r1, [r3, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009020:	9b06      	ldr	r3, [sp, #24]
 8009022:	f3c3 1281 	ubfx	r2, r3, #6, #2
 8009026:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009028:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800902c:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800902e:	0a1a      	lsrs	r2, r3, #8
 8009030:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009034:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8009038:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
 800903c:	b292      	uxth	r2, r2
 800903e:	ba09      	rev	r1, r1
 8009040:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009042:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009044:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009046:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009048:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800904c:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009050:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009052:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009056:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009058:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800905a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800905c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009060:	b2d0      	uxtb	r0, r2
 8009062:	4303      	orrs	r3, r0
 8009064:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009066:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800906a:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800906c:	f3c2 2301 	ubfx	r3, r2, #8, #2
 8009070:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009072:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009076:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800907a:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800907c:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800907e:	74a9      	strb	r1, [r5, #18]
 8009080:	e763      	b.n	8008f4a <HAL_SD_GetCardStatus.part.0+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009082:	2008      	movs	r0, #8
 8009084:	e758      	b.n	8008f38 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009086:	2002      	movs	r0, #2
 8009088:	e756      	b.n	8008f38 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 800908a:	2020      	movs	r0, #32
 800908c:	e754      	b.n	8008f38 <HAL_SD_GetCardStatus.part.0+0x2c>
 800908e:	bf00      	nop
 8009090:	1fe00fff 	.word	0x1fe00fff
 8009094:	18000f3a 	.word	0x18000f3a

08009098 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8009098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800909c:	4605      	mov	r5, r0
 800909e:	b086      	sub	sp, #24
 80090a0:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80090a2:	f7fa fd27 	bl	8003af4 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80090a6:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 80090a8:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80090aa:	6828      	ldr	r0, [r5, #0]
 80090ac:	f001 fef2 	bl	800ae94 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80090b0:	4604      	mov	r4, r0
 80090b2:	b118      	cbz	r0, 80090bc <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 80090b4:	4620      	mov	r0, r4
 80090b6:	b006      	add	sp, #24
 80090b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80090bc:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80090be:	6828      	ldr	r0, [r5, #0]
 80090c0:	0409      	lsls	r1, r1, #16
 80090c2:	f001 ff77 	bl	800afb4 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 80090c6:	4604      	mov	r4, r0
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d1f3      	bne.n	80090b4 <SD_FindSCR.constprop.0+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090d0:	9004      	str	r0, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80090d2:	2030      	movs	r0, #48	; 0x30
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80090d4:	2201      	movs	r2, #1
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090d6:	9300      	str	r3, [sp, #0]
  config.DataLength    = 8U;
 80090d8:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090da:	4669      	mov	r1, sp
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80090dc:	9205      	str	r2, [sp, #20]
  config.DataLength    = 8U;
 80090de:	9301      	str	r3, [sp, #4]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80090e0:	2302      	movs	r3, #2
 80090e2:	e9cd 0302 	strd	r0, r3, [sp, #8]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090e6:	6828      	ldr	r0, [r5, #0]
 80090e8:	f001 fdb4 	bl	800ac54 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80090ec:	6828      	ldr	r0, [r5, #0]
 80090ee:	f001 ff85 	bl	800affc <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80090f2:	4604      	mov	r4, r0
 80090f4:	2800      	cmp	r0, #0
 80090f6:	d1dd      	bne.n	80090b4 <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 80090f8:	4682      	mov	sl, r0
 80090fa:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80090fc:	f240 582a 	movw	r8, #1322	; 0x52a
 8009100:	e004      	b.n	800910c <SD_FindSCR.constprop.0+0x74>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009102:	f7fa fcf7 	bl	8003af4 <HAL_GetTick>
 8009106:	1b83      	subs	r3, r0, r6
 8009108:	3301      	adds	r3, #1
 800910a:	d024      	beq.n	8009156 <SD_FindSCR.constprop.0+0xbe>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800910c:	6828      	ldr	r0, [r5, #0]
 800910e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009110:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009114:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009116:	d10c      	bne.n	8009132 <SD_FindSCR.constprop.0+0x9a>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009118:	0319      	lsls	r1, r3, #12
 800911a:	d4f2      	bmi.n	8009102 <SD_FindSCR.constprop.0+0x6a>
 800911c:	2c00      	cmp	r4, #0
 800911e:	d1f0      	bne.n	8009102 <SD_FindSCR.constprop.0+0x6a>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009120:	f001 fd7e 	bl	800ac20 <SDMMC_ReadFIFO>
 8009124:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009126:	6828      	ldr	r0, [r5, #0]
      index++;
 8009128:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800912a:	f001 fd79 	bl	800ac20 <SDMMC_ReadFIFO>
 800912e:	4682      	mov	sl, r0
      index++;
 8009130:	e7e7      	b.n	8009102 <SD_FindSCR.constprop.0+0x6a>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009132:	071a      	lsls	r2, r3, #28
 8009134:	d416      	bmi.n	8009164 <SD_FindSCR.constprop.0+0xcc>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009136:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009138:	079b      	lsls	r3, r3, #30
 800913a:	d40f      	bmi.n	800915c <SD_FindSCR.constprop.0+0xc4>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800913c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800913e:	f014 0420 	ands.w	r4, r4, #32
 8009142:	d113      	bne.n	800916c <SD_FindSCR.constprop.0+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009144:	fa9a f28a 	rev.w	r2, sl
 8009148:	fa99 f389 	rev.w	r3, r9
 800914c:	4909      	ldr	r1, [pc, #36]	; (8009174 <SD_FindSCR.constprop.0+0xdc>)
 800914e:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009150:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8009154:	e7ae      	b.n	80090b4 <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8009156:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800915a:	e7ab      	b.n	80090b4 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800915c:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800915e:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009160:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009162:	e7a7      	b.n	80090b4 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009164:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009166:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009168:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800916a:	e7a3      	b.n	80090b4 <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800916c:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 800916e:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009170:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8009172:	e79f      	b.n	80090b4 <SD_FindSCR.constprop.0+0x1c>
 8009174:	18000f3a 	.word	0x18000f3a

08009178 <HAL_SD_ReadBlocks>:
{
 8009178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800917c:	460d      	mov	r5, r1
 800917e:	b087      	sub	sp, #28
 8009180:	4604      	mov	r4, r0
 8009182:	4692      	mov	sl, r2
 8009184:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8009186:	f7fa fcb5 	bl	8003af4 <HAL_GetTick>
  if (NULL == pData)
 800918a:	2d00      	cmp	r5, #0
 800918c:	d07a      	beq.n	8009284 <HAL_SD_ReadBlocks+0x10c>
  if (hsd->State == HAL_SD_STATE_READY)
 800918e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009192:	2b01      	cmp	r3, #1
 8009194:	fa5f f983 	uxtb.w	r9, r3
 8009198:	d163      	bne.n	8009262 <HAL_SD_ReadBlocks+0xea>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800919a:	eb0a 0307 	add.w	r3, sl, r7
 800919e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091a0:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80091a2:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091a4:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80091a6:	d877      	bhi.n	8009298 <HAL_SD_ReadBlocks+0x120>
    hsd->State = HAL_SD_STATE_BUSY;
 80091a8:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80091aa:	f04f 0b02 	mov.w	fp, #2
 80091ae:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
 80091b0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 80091b4:	6823      	ldr	r3, [r4, #0]
 80091b6:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80091b8:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80091ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80091bc:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80091be:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80091c0:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80091c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 80091cc:	bf18      	it	ne
 80091ce:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091d2:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80091d4:	027b      	lsls	r3, r7, #9
 80091d6:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80091d8:	2390      	movs	r3, #144	; 0x90
 80091da:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80091de:	f001 fd39 	bl	800ac54 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80091e2:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 80091e4:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80091e6:	68d3      	ldr	r3, [r2, #12]
 80091e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091ec:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 80091ee:	d942      	bls.n	8009276 <HAL_SD_ReadBlocks+0xfe>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80091f0:	4651      	mov	r1, sl
 80091f2:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80091f4:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80091f8:	f001 fe70 	bl	800aedc <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d153      	bne.n	80092a8 <HAL_SD_ReadBlocks+0x130>
    dataremaining = config.DataLength;
 8009200:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009204:	e005      	b.n	8009212 <HAL_SD_ReadBlocks+0x9a>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009206:	f7fa fc75 	bl	8003af4 <HAL_GetTick>
 800920a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800920c:	1b80      	subs	r0, r0, r6
 800920e:	4298      	cmp	r0, r3
 8009210:	d277      	bcs.n	8009302 <HAL_SD_ReadBlocks+0x18a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009212:	6820      	ldr	r0, [r4, #0]
 8009214:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009216:	f413 7f95 	tst.w	r3, #298	; 0x12a
 800921a:	d151      	bne.n	80092c0 <HAL_SD_ReadBlocks+0x148>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800921c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800921e:	041a      	lsls	r2, r3, #16
 8009220:	d5f1      	bpl.n	8009206 <HAL_SD_ReadBlocks+0x8e>
 8009222:	f1bb 0f1f 	cmp.w	fp, #31
 8009226:	d9ee      	bls.n	8009206 <HAL_SD_ReadBlocks+0x8e>
 8009228:	f105 0804 	add.w	r8, r5, #4
 800922c:	f105 0a24 	add.w	sl, r5, #36	; 0x24
 8009230:	e000      	b.n	8009234 <HAL_SD_ReadBlocks+0xbc>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009232:	6820      	ldr	r0, [r4, #0]
        for (count = 0U; count < 8U; count++)
 8009234:	f108 0804 	add.w	r8, r8, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009238:	f001 fcf2 	bl	800ac20 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800923c:	ea4f 2c10 	mov.w	ip, r0, lsr #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009240:	0c01      	lsrs	r1, r0, #16
        for (count = 0U; count < 8U; count++)
 8009242:	45c2      	cmp	sl, r8
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009244:	ea4f 6210 	mov.w	r2, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009248:	f808 0c08 	strb.w	r0, [r8, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800924c:	f808 cc07 	strb.w	ip, [r8, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8009250:	f808 1c06 	strb.w	r1, [r8, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009254:	f808 2c05 	strb.w	r2, [r8, #-5]
        for (count = 0U; count < 8U; count++)
 8009258:	d1eb      	bne.n	8009232 <HAL_SD_ReadBlocks+0xba>
          tempbuff++;
 800925a:	3520      	adds	r5, #32
        dataremaining -= 32U;
 800925c:	f1ab 0b20 	sub.w	fp, fp, #32
 8009260:	e7d1      	b.n	8009206 <HAL_SD_ReadBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009262:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009264:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009268:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800926c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800926e:	4648      	mov	r0, r9
 8009270:	b007      	add	sp, #28
 8009272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009276:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009278:	4651      	mov	r1, sl
 800927a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800927c:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800927e:	f001 fe1b 	bl	800aeb8 <SDMMC_CmdReadSingleBlock>
 8009282:	e7bb      	b.n	80091fc <HAL_SD_ReadBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009284:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009286:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800928a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800928e:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009290:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009292:	b007      	add	sp, #28
 8009294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009298:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800929a:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800929c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80092a0:	6363      	str	r3, [r4, #52]	; 0x34
}
 80092a2:	b007      	add	sp, #28
 80092a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092a8:	6823      	ldr	r3, [r4, #0]
 80092aa:	4a31      	ldr	r2, [pc, #196]	; (8009370 <HAL_SD_ReadBlocks+0x1f8>)
 80092ac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80092ae:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 80092b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092b2:	4303      	orrs	r3, r0
 80092b4:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80092b6:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 80092b8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80092bc:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 80092be:	e7d6      	b.n	800926e <HAL_SD_ReadBlocks+0xf6>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80092c0:	68c3      	ldr	r3, [r0, #12]
 80092c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092c6:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80092c8:	6820      	ldr	r0, [r4, #0]
 80092ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80092cc:	05db      	lsls	r3, r3, #23
 80092ce:	d501      	bpl.n	80092d4 <HAL_SD_ReadBlocks+0x15c>
 80092d0:	2f01      	cmp	r7, #1
 80092d2:	d825      	bhi.n	8009320 <HAL_SD_ReadBlocks+0x1a8>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80092d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80092d6:	f013 0308 	ands.w	r3, r3, #8
 80092da:	d135      	bne.n	8009348 <HAL_SD_ReadBlocks+0x1d0>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80092dc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80092de:	f012 0202 	ands.w	r2, r2, #2
 80092e2:	d126      	bne.n	8009332 <HAL_SD_ReadBlocks+0x1ba>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80092e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80092e6:	f013 0320 	ands.w	r3, r3, #32
 80092ea:	d039      	beq.n	8009360 <HAL_SD_ReadBlocks+0x1e8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092ec:	4b20      	ldr	r3, [pc, #128]	; (8009370 <HAL_SD_ReadBlocks+0x1f8>)
      hsd->State = HAL_SD_STATE_READY;
 80092ee:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092f0:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80092f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092f4:	f043 0320 	orr.w	r3, r3, #32
 80092f8:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80092fa:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80092fe:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009300:	e7b5      	b.n	800926e <HAL_SD_ReadBlocks+0xf6>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009302:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8009304:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009306:	481a      	ldr	r0, [pc, #104]	; (8009370 <HAL_SD_ReadBlocks+0x1f8>)
        hsd->Context = SD_CONTEXT_NONE;
 8009308:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800930a:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800930e:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009310:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009312:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009316:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009318:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800931c:	62e2      	str	r2, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
 800931e:	e7a6      	b.n	800926e <HAL_SD_ReadBlocks+0xf6>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009320:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009322:	2b03      	cmp	r3, #3
 8009324:	d0d6      	beq.n	80092d4 <HAL_SD_ReadBlocks+0x15c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009326:	f001 fe0f 	bl	800af48 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800932a:	2800      	cmp	r0, #0
 800932c:	d1bc      	bne.n	80092a8 <HAL_SD_ReadBlocks+0x130>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800932e:	6820      	ldr	r0, [r4, #0]
 8009330:	e7d0      	b.n	80092d4 <HAL_SD_ReadBlocks+0x15c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009332:	4a0f      	ldr	r2, [pc, #60]	; (8009370 <HAL_SD_ReadBlocks+0x1f8>)
      hsd->State = HAL_SD_STATE_READY;
 8009334:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009336:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009338:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800933a:	f042 0202 	orr.w	r2, r2, #2
 800933e:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009340:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009344:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009346:	e792      	b.n	800926e <HAL_SD_ReadBlocks+0xf6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009348:	4b09      	ldr	r3, [pc, #36]	; (8009370 <HAL_SD_ReadBlocks+0x1f8>)
      hsd->State = HAL_SD_STATE_READY;
 800934a:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800934c:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800934e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009350:	f043 0308 	orr.w	r3, r3, #8
 8009354:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009356:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8009358:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800935c:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800935e:	e786      	b.n	800926e <HAL_SD_ReadBlocks+0xf6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009360:	4904      	ldr	r1, [pc, #16]	; (8009374 <HAL_SD_ReadBlocks+0x1fc>)
    hsd->State = HAL_SD_STATE_READY;
 8009362:	2201      	movs	r2, #1
    return HAL_OK;
 8009364:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009366:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009368:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800936c:	e77f      	b.n	800926e <HAL_SD_ReadBlocks+0xf6>
 800936e:	bf00      	nop
 8009370:	1fe00fff 	.word	0x1fe00fff
 8009374:	18000f3a 	.word	0x18000f3a

08009378 <HAL_SD_WriteBlocks>:
{
 8009378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937c:	460d      	mov	r5, r1
 800937e:	b089      	sub	sp, #36	; 0x24
 8009380:	4604      	mov	r4, r0
 8009382:	4692      	mov	sl, r2
 8009384:	461f      	mov	r7, r3
 8009386:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800938a:	f7fa fbb3 	bl	8003af4 <HAL_GetTick>
  if (NULL == pData)
 800938e:	2d00      	cmp	r5, #0
 8009390:	d068      	beq.n	8009464 <HAL_SD_WriteBlocks+0xec>
  if (hsd->State == HAL_SD_STATE_READY)
 8009392:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009396:	2b01      	cmp	r3, #1
 8009398:	fa5f f983 	uxtb.w	r9, r3
 800939c:	d152      	bne.n	8009444 <HAL_SD_WriteBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800939e:	eb0a 0307 	add.w	r3, sl, r7
 80093a2:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80093a4:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80093a6:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80093a8:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80093aa:	d865      	bhi.n	8009478 <HAL_SD_WriteBlocks+0x100>
    hsd->State = HAL_SD_STATE_BUSY;
 80093ac:	2303      	movs	r3, #3
 80093ae:	4606      	mov	r6, r0
 80093b0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 80093b4:	6823      	ldr	r3, [r4, #0]
 80093b6:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80093b8:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80093ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80093bc:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80093be:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80093c0:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80093c4:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80093c8:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 80093ce:	bf18      	it	ne
 80093d0:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093d4:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80093d6:	027b      	lsls	r3, r7, #9
 80093d8:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80093da:	2390      	movs	r3, #144	; 0x90
 80093dc:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80093de:	f001 fc39 	bl	800ac54 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80093e2:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 80093e4:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80093e6:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80093e8:	68d3      	ldr	r3, [r2, #12]
 80093ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ee:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 80093f0:	d932      	bls.n	8009458 <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80093f2:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80093f4:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80093f6:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80093f8:	f001 fd94 	bl	800af24 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d143      	bne.n	8009488 <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
 8009400:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009404:	e004      	b.n	8009410 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009406:	f7fa fb75 	bl	8003af4 <HAL_GetTick>
 800940a:	1b80      	subs	r0, r0, r6
 800940c:	4540      	cmp	r0, r8
 800940e:	d268      	bcs.n	80094e2 <HAL_SD_WriteBlocks+0x16a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009410:	6820      	ldr	r0, [r4, #0]
 8009412:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009414:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 8009418:	d142      	bne.n	80094a0 <HAL_SD_WriteBlocks+0x128>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800941a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800941c:	045a      	lsls	r2, r3, #17
 800941e:	d5f2      	bpl.n	8009406 <HAL_SD_WriteBlocks+0x8e>
 8009420:	f1bb 0f1f 	cmp.w	fp, #31
 8009424:	d9ef      	bls.n	8009406 <HAL_SD_WriteBlocks+0x8e>
 8009426:	f105 0a20 	add.w	sl, r5, #32
 800942a:	e000      	b.n	800942e <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800942c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800942e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009432:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009434:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009436:	f001 fbf7 	bl	800ac28 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800943a:	45aa      	cmp	sl, r5
 800943c:	d1f6      	bne.n	800942c <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
 800943e:	f1ab 0b20 	sub.w	fp, fp, #32
 8009442:	e7e0      	b.n	8009406 <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009444:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009446:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800944a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800944e:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009450:	4648      	mov	r0, r9
 8009452:	b009      	add	sp, #36	; 0x24
 8009454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009458:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800945a:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800945c:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800945e:	f001 fd4f 	bl	800af00 <SDMMC_CmdWriteSingleBlock>
 8009462:	e7cb      	b.n	80093fc <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009464:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009466:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800946a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800946e:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009470:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009472:	b009      	add	sp, #36	; 0x24
 8009474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009478:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800947a:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800947c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009480:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009482:	b009      	add	sp, #36	; 0x24
 8009484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009488:	6823      	ldr	r3, [r4, #0]
 800948a:	4a30      	ldr	r2, [pc, #192]	; (800954c <HAL_SD_WriteBlocks+0x1d4>)
 800948c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800948e:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8009490:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009492:	4303      	orrs	r3, r0
 8009494:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009496:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 8009498:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800949c:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800949e:	e7d7      	b.n	8009450 <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80094a0:	68c3      	ldr	r3, [r0, #12]
 80094a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094a6:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80094a8:	6820      	ldr	r0, [r4, #0]
 80094aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80094ac:	05db      	lsls	r3, r3, #23
 80094ae:	d501      	bpl.n	80094b4 <HAL_SD_WriteBlocks+0x13c>
 80094b0:	2f01      	cmp	r7, #1
 80094b2:	d823      	bhi.n	80094fc <HAL_SD_WriteBlocks+0x184>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80094b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80094b6:	f013 0308 	ands.w	r3, r3, #8
 80094ba:	d133      	bne.n	8009524 <HAL_SD_WriteBlocks+0x1ac>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80094bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80094be:	f012 0202 	ands.w	r2, r2, #2
 80094c2:	d124      	bne.n	800950e <HAL_SD_WriteBlocks+0x196>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80094c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80094c6:	f013 0310 	ands.w	r3, r3, #16
 80094ca:	d037      	beq.n	800953c <HAL_SD_WriteBlocks+0x1c4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094cc:	4b1f      	ldr	r3, [pc, #124]	; (800954c <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 80094ce:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094d0:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80094d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094d4:	f043 0310 	orr.w	r3, r3, #16
 80094d8:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80094da:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80094de:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 80094e0:	e7b6      	b.n	8009450 <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094e2:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 80094e4:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094e6:	4819      	ldr	r0, [pc, #100]	; (800954c <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
 80094e8:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80094ea:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094ee:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80094f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094f2:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80094f4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80094f8:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
 80094fa:	e7a9      	b.n	8009450 <HAL_SD_WriteBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
 80094fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80094fe:	2b03      	cmp	r3, #3
 8009500:	d0d8      	beq.n	80094b4 <HAL_SD_WriteBlocks+0x13c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009502:	f001 fd21 	bl	800af48 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009506:	2800      	cmp	r0, #0
 8009508:	d1be      	bne.n	8009488 <HAL_SD_WriteBlocks+0x110>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800950a:	6820      	ldr	r0, [r4, #0]
 800950c:	e7d2      	b.n	80094b4 <HAL_SD_WriteBlocks+0x13c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800950e:	4a0f      	ldr	r2, [pc, #60]	; (800954c <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8009510:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009512:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009514:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009516:	f042 0202 	orr.w	r2, r2, #2
 800951a:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800951c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009520:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009522:	e795      	b.n	8009450 <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009524:	4b09      	ldr	r3, [pc, #36]	; (800954c <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 8009526:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009528:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800952a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800952c:	f043 0308 	orr.w	r3, r3, #8
 8009530:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009532:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8009534:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009538:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800953a:	e789      	b.n	8009450 <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800953c:	4904      	ldr	r1, [pc, #16]	; (8009550 <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
 800953e:	2201      	movs	r2, #1
    return HAL_OK;
 8009540:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009542:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009544:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 8009548:	e782      	b.n	8009450 <HAL_SD_WriteBlocks+0xd8>
 800954a:	bf00      	nop
 800954c:	1fe00fff 	.word	0x1fe00fff
 8009550:	18000f3a 	.word	0x18000f3a

08009554 <HAL_SD_ErrorCallback>:
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop

08009558 <HAL_SD_GetCardCSD>:
{
 8009558:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800955a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800955c:	f04f 0c00 	mov.w	ip, #0
{
 8009560:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009562:	0f92      	lsrs	r2, r2, #30
 8009564:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009566:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009568:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800956c:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800956e:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
 8009572:	f002 0203 	and.w	r2, r2, #3
 8009576:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009578:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
 800957c:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800957e:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 8009582:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009584:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 8009588:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800958a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800958c:	0d12      	lsrs	r2, r2, #20
 800958e:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009590:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 8009594:	f002 020f 	and.w	r2, r2, #15
 8009598:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800959a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800959c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80095a0:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80095a2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80095a4:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80095a8:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80095aa:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80095ac:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80095b0:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80095b2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80095b4:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80095b8:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80095ba:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 80095be:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80095c0:	2a00      	cmp	r2, #0
 80095c2:	f040 808a 	bne.w	80096da <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80095c6:	6e04      	ldr	r4, [r0, #96]	; 0x60
 80095c8:	f640 72fc 	movw	r2, #4092	; 0xffc
 80095cc:	6e40      	ldr	r0, [r0, #100]	; 0x64
 80095ce:	ea02 0284 	and.w	r2, r2, r4, lsl #2
 80095d2:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 80095d6:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80095d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80095da:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 80095de:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80095e0:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 80095e4:	f002 0207 	and.w	r2, r2, #7
 80095e8:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80095ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80095ec:	f3c2 5242 	ubfx	r2, r2, #21, #3
 80095f0:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80095f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80095f4:	f3c2 4282 	ubfx	r2, r2, #18, #3
 80095f8:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80095fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80095fc:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8009600:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009602:	690a      	ldr	r2, [r1, #16]
 8009604:	3201      	adds	r2, #1
 8009606:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009608:	7e08      	ldrb	r0, [r1, #24]
 800960a:	f000 0007 	and.w	r0, r0, #7
 800960e:	3002      	adds	r0, #2
 8009610:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009612:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009614:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009616:	f891 c008 	ldrb.w	ip, [r1, #8]
 800961a:	f00c 0c0f 	and.w	ip, ip, #15
 800961e:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009622:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009626:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009628:	fb02 f20c 	mul.w	r2, r2, ip
 800962c:	651a      	str	r2, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800962e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.LogBlockSize = 512U;
 8009630:	f44f 7400 	mov.w	r4, #512	; 0x200
  pCSD->Reserved3 = 0;
 8009634:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
 8009636:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800963a:	f3c2 3280 	ubfx	r2, r2, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 800963e:	655c      	str	r4, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009640:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009642:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009644:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8009648:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800964a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800964c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009650:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009652:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009654:	0fd2      	lsrs	r2, r2, #31
 8009656:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009658:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800965a:	f3c2 7241 	ubfx	r2, r2, #29, #2
 800965e:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009660:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009662:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8009666:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009668:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800966a:	f3c2 5283 	ubfx	r2, r2, #22, #4
 800966e:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009670:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009672:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8009676:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 800967a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800967e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009682:	ea02 020c 	and.w	r2, r2, ip
 8009686:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800968a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800968c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009690:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009694:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009696:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800969a:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800969e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80096a0:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80096a4:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80096a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80096aa:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80096ae:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80096b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80096b4:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80096b8:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80096bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80096be:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80096c2:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80096c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80096c8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80096cc:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80096d0:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
 80096d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096d8:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80096da:	2a01      	cmp	r2, #1
 80096dc:	d110      	bne.n	8009700 <HAL_SD_GetCardCSD+0x1a8>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80096de:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80096e0:	f8b0 4066 	ldrh.w	r4, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
 80096e4:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80096e8:	0412      	lsls	r2, r2, #16
 80096ea:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80096ee:	4322      	orrs	r2, r4
 80096f0:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80096f2:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 80096f4:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80096f6:	3201      	adds	r2, #1
 80096f8:	0292      	lsls	r2, r2, #10
 80096fa:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80096fc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80096fe:	e796      	b.n	800962e <HAL_SD_GetCardCSD+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009700:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
 8009702:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009704:	4805      	ldr	r0, [pc, #20]	; (800971c <HAL_SD_GetCardCSD+0x1c4>)
 8009706:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 8009708:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800970a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800970c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009710:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009712:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
 8009716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	1fe00fff 	.word	0x1fe00fff

08009720 <HAL_SD_InitCard>:
{
 8009720:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009722:	2300      	movs	r3, #0
{
 8009724:	b095      	sub	sp, #84	; 0x54
 8009726:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009728:	2100      	movs	r1, #0
 800972a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800972e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009732:	e9cd 3306 	strd	r3, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009736:	f7fe fe11 	bl	800835c <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800973a:	b940      	cbnz	r0, 800974e <HAL_SD_InitCard+0x2e>
    hsd->State = HAL_SD_STATE_READY;
 800973c:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800973e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 8009742:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009746:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009748:	4630      	mov	r0, r6
 800974a:	b015      	add	sp, #84	; 0x54
 800974c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800974e:	0a06      	lsrs	r6, r0, #8
 8009750:	4b8e      	ldr	r3, [pc, #568]	; (800998c <HAL_SD_InitCard+0x26c>)
  (void)SDMMC_Init(hsd->Instance, Init);
 8009752:	aa07      	add	r2, sp, #28
 8009754:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009756:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 800975a:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800975c:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 800975e:	9608      	str	r6, [sp, #32]
 8009760:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009764:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009768:	cb0e      	ldmia	r3, {r1, r2, r3}
 800976a:	6820      	ldr	r0, [r4, #0]
 800976c:	f001 fa3c 	bl	800abe8 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009770:	6820      	ldr	r0, [r4, #0]
 8009772:	f001 fa5f 	bl	800ac34 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 8009776:	4b86      	ldr	r3, [pc, #536]	; (8009990 <HAL_SD_InitCard+0x270>)
 8009778:	429d      	cmp	r5, r3
 800977a:	d902      	bls.n	8009782 <HAL_SD_InitCard+0x62>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800977c:	0076      	lsls	r6, r6, #1
 800977e:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009782:	4884      	ldr	r0, [pc, #528]	; (8009994 <HAL_SD_InitCard+0x274>)
 8009784:	fbb0 f0f5 	udiv	r0, r0, r5
 8009788:	3001      	adds	r0, #1
 800978a:	f7fa f9b9 	bl	8003b00 <HAL_Delay>
  __IO uint32_t count = 0U;
 800978e:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009790:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 8009792:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009794:	f001 fa74 	bl	800ac80 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009798:	4605      	mov	r5, r0
 800979a:	b140      	cbz	r0, 80097ae <HAL_SD_InitCard+0x8e>
    hsd->State = HAL_SD_STATE_READY;
 800979c:	2601      	movs	r6, #1
 800979e:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
 80097a2:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 80097a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097a6:	432b      	orrs	r3, r5
 80097a8:	6363      	str	r3, [r4, #52]	; 0x34
}
 80097aa:	b015      	add	sp, #84	; 0x54
 80097ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80097ae:	6820      	ldr	r0, [r4, #0]
 80097b0:	f001 fd44 	bl	800b23c <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80097b4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 80097b8:	f000 80ce 	beq.w	8009958 <HAL_SD_InitCard+0x238>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80097bc:	2301      	movs	r3, #1
 80097be:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097c0:	2100      	movs	r1, #0
 80097c2:	6820      	ldr	r0, [r4, #0]
 80097c4:	f001 fbf6 	bl	800afb4 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80097c8:	bb08      	cbnz	r0, 800980e <HAL_SD_InitCard+0xee>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80097ca:	9b03      	ldr	r3, [sp, #12]
 80097cc:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 80097d0:	42b3      	cmp	r3, r6
 80097d2:	f200 80d3 	bhi.w	800997c <HAL_SD_InitCard+0x25c>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80097d6:	4f70      	ldr	r7, [pc, #448]	; (8009998 <HAL_SD_InitCard+0x278>)
 80097d8:	e010      	b.n	80097fc <HAL_SD_InitCard+0xdc>
 80097da:	6820      	ldr	r0, [r4, #0]
 80097dc:	f001 fa7c 	bl	800acd8 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80097e0:	4601      	mov	r1, r0
 80097e2:	b9a0      	cbnz	r0, 800980e <HAL_SD_InitCard+0xee>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097e4:	6820      	ldr	r0, [r4, #0]
 80097e6:	f001 fa31 	bl	800ac4c <SDMMC_GetResponse>
    count++;
 80097ea:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80097ec:	2800      	cmp	r0, #0
    count++;
 80097ee:	f103 0301 	add.w	r3, r3, #1
 80097f2:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	db0d      	blt.n	8009814 <HAL_SD_InitCard+0xf4>
 80097f8:	42b3      	cmp	r3, r6
 80097fa:	d80b      	bhi.n	8009814 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097fc:	2100      	movs	r1, #0
 80097fe:	6820      	ldr	r0, [r4, #0]
 8009800:	f001 fbd8 	bl	800afb4 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8009804:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 8009806:	2800      	cmp	r0, #0
 8009808:	d0e7      	beq.n	80097da <HAL_SD_InitCard+0xba>
 800980a:	4605      	mov	r5, r0
 800980c:	e7c6      	b.n	800979c <HAL_SD_InitCard+0x7c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800980e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8009812:	e7c3      	b.n	800979c <HAL_SD_InitCard+0x7c>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009814:	9a03      	ldr	r2, [sp, #12]
 8009816:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800981a:	429a      	cmp	r2, r3
 800981c:	f200 80b2 	bhi.w	8009984 <HAL_SD_InitCard+0x264>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009820:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  hsd->SdCard.CardType = CARD_SDSC;
 8009824:	f04f 0300 	mov.w	r3, #0
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009828:	bf18      	it	ne
 800982a:	2501      	movne	r5, #1
  hsd->SdCard.CardType = CARD_SDSC;
 800982c:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
 800982e:	2300      	movs	r3, #0
 8009830:	63a5      	str	r5, [r4, #56]	; 0x38
 8009832:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 8009836:	f7fa f95d 	bl	8003af4 <HAL_GetTick>
 800983a:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800983c:	6820      	ldr	r0, [r4, #0]
 800983e:	f001 fa01 	bl	800ac44 <SDMMC_GetPowerState>
 8009842:	b350      	cbz	r0, 800989a <HAL_SD_InitCard+0x17a>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009844:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009846:	2b03      	cmp	r3, #3
 8009848:	d132      	bne.n	80098b0 <HAL_SD_InitCard+0x190>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800984a:	2104      	movs	r1, #4
 800984c:	6820      	ldr	r0, [r4, #0]
 800984e:	f001 f9fd 	bl	800ac4c <SDMMC_GetResponse>
 8009852:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009854:	a909      	add	r1, sp, #36	; 0x24
 8009856:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009858:	0d1b      	lsrs	r3, r3, #20
 800985a:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800985c:	f7ff fe7c 	bl	8009558 <HAL_SD_GetCardCSD>
 8009860:	4606      	mov	r6, r0
 8009862:	2800      	cmp	r0, #0
 8009864:	f040 8084 	bne.w	8009970 <HAL_SD_InitCard+0x250>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009868:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800986a:	6820      	ldr	r0, [r4, #0]
 800986c:	0409      	lsls	r1, r1, #16
 800986e:	f001 fb8f 	bl	800af90 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009872:	b9a0      	cbnz	r0, 800989e <HAL_SD_InitCard+0x17e>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009878:	6820      	ldr	r0, [r4, #0]
 800987a:	f001 fb0b 	bl	800ae94 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800987e:	2800      	cmp	r0, #0
 8009880:	f43f af62 	beq.w	8009748 <HAL_SD_InitCard+0x28>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009884:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 8009886:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009888:	4944      	ldr	r1, [pc, #272]	; (800999c <HAL_SD_InitCard+0x27c>)
    return HAL_ERROR;
 800988a:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800988c:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800988e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009890:	4303      	orrs	r3, r0
 8009892:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009894:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_ERROR;
 8009898:	e756      	b.n	8009748 <HAL_SD_InitCard+0x28>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800989a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800989e:	2601      	movs	r6, #1
 80098a0:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80098a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098a6:	4303      	orrs	r3, r0
}
 80098a8:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 80098aa:	6363      	str	r3, [r4, #52]	; 0x34
}
 80098ac:	b015      	add	sp, #84	; 0x54
 80098ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80098b0:	6820      	ldr	r0, [r4, #0]
 80098b2:	f001 fc0b 	bl	800b0cc <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d1f1      	bne.n	800989e <HAL_SD_InitCard+0x17e>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098ba:	4601      	mov	r1, r0
 80098bc:	6820      	ldr	r0, [r4, #0]
 80098be:	f001 f9c5 	bl	800ac4c <SDMMC_GetResponse>
 80098c2:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80098c4:	2104      	movs	r1, #4
 80098c6:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098c8:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80098ca:	f001 f9bf 	bl	800ac4c <SDMMC_GetResponse>
 80098ce:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80098d0:	2108      	movs	r1, #8
 80098d2:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80098d4:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80098d6:	f001 f9b9 	bl	800ac4c <SDMMC_GetResponse>
 80098da:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80098dc:	210c      	movs	r1, #12
 80098de:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80098e0:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80098e2:	f001 f9b3 	bl	800ac4c <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 80098e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80098e8:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 80098ea:	2b03      	cmp	r3, #3
 80098ec:	d0ad      	beq.n	800984a <HAL_SD_InitCard+0x12a>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80098ee:	f241 3687 	movw	r6, #4999	; 0x1387
 80098f2:	e009      	b.n	8009908 <HAL_SD_InitCard+0x1e8>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80098f4:	6820      	ldr	r0, [r4, #0]
 80098f6:	f001 fc5d 	bl	800b1b4 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 80098fa:	2800      	cmp	r0, #0
 80098fc:	d1cf      	bne.n	800989e <HAL_SD_InitCard+0x17e>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80098fe:	f7fa f8f9 	bl	8003af4 <HAL_GetTick>
 8009902:	1b43      	subs	r3, r0, r5
 8009904:	42b3      	cmp	r3, r6
 8009906:	d836      	bhi.n	8009976 <HAL_SD_InitCard+0x256>
    while (sd_rca == 0U)
 8009908:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800990c:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
 8009910:	2b00      	cmp	r3, #0
 8009912:	d0ef      	beq.n	80098f4 <HAL_SD_InitCard+0x1d4>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009914:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009916:	2a03      	cmp	r2, #3
 8009918:	d097      	beq.n	800984a <HAL_SD_InitCard+0x12a>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800991a:	0419      	lsls	r1, r3, #16
 800991c:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800991e:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009920:	f001 fbe4 	bl	800b0ec <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009924:	2800      	cmp	r0, #0
 8009926:	d1ba      	bne.n	800989e <HAL_SD_InitCard+0x17e>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009928:	4601      	mov	r1, r0
 800992a:	6820      	ldr	r0, [r4, #0]
 800992c:	f001 f98e 	bl	800ac4c <SDMMC_GetResponse>
 8009930:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009932:	2104      	movs	r1, #4
 8009934:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009936:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009938:	f001 f988 	bl	800ac4c <SDMMC_GetResponse>
 800993c:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800993e:	2108      	movs	r1, #8
 8009940:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009942:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009944:	f001 f982 	bl	800ac4c <SDMMC_GetResponse>
 8009948:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800994a:	210c      	movs	r1, #12
 800994c:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800994e:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009950:	f001 f97c 	bl	800ac4c <SDMMC_GetResponse>
 8009954:	66a0      	str	r0, [r4, #104]	; 0x68
 8009956:	e778      	b.n	800984a <HAL_SD_InitCard+0x12a>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009958:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800995a:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800995c:	f001 f990 	bl	800ac80 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009960:	2800      	cmp	r0, #0
 8009962:	f47f af52 	bne.w	800980a <HAL_SD_InitCard+0xea>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009966:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009968:	2b01      	cmp	r3, #1
 800996a:	f47f af2e 	bne.w	80097ca <HAL_SD_InitCard+0xaa>
 800996e:	e727      	b.n	80097c0 <HAL_SD_InitCard+0xa0>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009970:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8009974:	e793      	b.n	800989e <HAL_SD_InitCard+0x17e>
        return HAL_SD_ERROR_TIMEOUT;
 8009976:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 800997a:	e790      	b.n	800989e <HAL_SD_InitCard+0x17e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	42b3      	cmp	r3, r6
 8009980:	f67f af55 	bls.w	800982e <HAL_SD_InitCard+0x10e>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009984:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8009988:	e708      	b.n	800979c <HAL_SD_InitCard+0x7c>
 800998a:	bf00      	nop
 800998c:	014f8b59 	.word	0x014f8b59
 8009990:	000c34ff 	.word	0x000c34ff
 8009994:	00012110 	.word	0x00012110
 8009998:	c1100000 	.word	0xc1100000
 800999c:	1fe00fff 	.word	0x1fe00fff

080099a0 <HAL_SD_GetCardInfo>:
{
 80099a0:	4603      	mov	r3, r0
}
 80099a2:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80099a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099a6:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80099a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099aa:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80099ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099ae:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80099b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099b2:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80099b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80099b6:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80099b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099ba:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80099bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099be:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80099c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c2:	61cb      	str	r3, [r1, #28]
}
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop

080099c8 <HAL_SD_ConfigWideBusOperation>:
{
 80099c8:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 80099ca:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 80099cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 80099ce:	b089      	sub	sp, #36	; 0x24
 80099d0:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
 80099d2:	4293      	cmp	r3, r2
{
 80099d4:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80099d6:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 80099da:	d041      	beq.n	8009a60 <HAL_SD_ConfigWideBusOperation+0x98>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80099dc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80099e0:	d03e      	beq.n	8009a60 <HAL_SD_ConfigWideBusOperation+0x98>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80099e2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80099e6:	d07c      	beq.n	8009ae2 <HAL_SD_ConfigWideBusOperation+0x11a>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80099e8:	2900      	cmp	r1, #0
 80099ea:	d05d      	beq.n	8009aa8 <HAL_SD_ConfigWideBusOperation+0xe0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80099ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80099ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099f2:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80099f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d139      	bne.n	8009a6e <HAL_SD_ConfigWideBusOperation+0xa6>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80099fa:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80099fe:	2100      	movs	r1, #0
 8009a00:	f7fe fcac 	bl	800835c <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8009a04:	2800      	cmp	r0, #0
 8009a06:	d049      	beq.n	8009a9c <HAL_SD_ConfigWideBusOperation+0xd4>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009a08:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009a0a:	4b4e      	ldr	r3, [pc, #312]	; (8009b44 <HAL_SD_ConfigWideBusOperation+0x17c>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009a0c:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 8009a0e:	9505      	str	r5, [sp, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009a10:	9206      	str	r2, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009a12:	fba3 5300 	umull	r5, r3, r3, r0
 8009a16:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009a18:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009a1a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009a1e:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009a20:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009a24:	9104      	str	r1, [sp, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009a26:	d20e      	bcs.n	8009a46 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009a28:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009a2a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009a2e:	d00a      	beq.n	8009a46 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009a30:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009a34:	d075      	beq.n	8009b22 <HAL_SD_ConfigWideBusOperation+0x15a>
        if (hsd->Init.ClockDiv == 0U)
 8009a36:	b112      	cbz	r2, 8009a3e <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009a38:	0053      	lsls	r3, r2, #1
 8009a3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8009a3e:	4b42      	ldr	r3, [pc, #264]	; (8009b48 <HAL_SD_ConfigWideBusOperation+0x180>)
 8009a40:	4298      	cmp	r0, r3
 8009a42:	bf88      	it	hi
 8009a44:	462a      	movhi	r2, r5
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009a46:	9207      	str	r2, [sp, #28]
      (void)SDMMC_Init(hsd->Instance, Init);
 8009a48:	aa08      	add	r2, sp, #32
 8009a4a:	ab03      	add	r3, sp, #12
  HAL_StatusTypeDef status = HAL_OK;
 8009a4c:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 8009a4e:	e912 0003 	ldmdb	r2, {r0, r1}
 8009a52:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009a56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a58:	6820      	ldr	r0, [r4, #0]
 8009a5a:	f001 f8c5 	bl	800abe8 <SDMMC_Init>
 8009a5e:	e00a      	b.n	8009a76 <HAL_SD_ConfigWideBusOperation+0xae>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a66:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009a68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d0c5      	beq.n	80099fa <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a6e:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8009a70:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a72:	4a36      	ldr	r2, [pc, #216]	; (8009b4c <HAL_SD_ConfigWideBusOperation+0x184>)
 8009a74:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a7a:	6820      	ldr	r0, [r4, #0]
 8009a7c:	f001 fa0a 	bl	800ae94 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009a80:	b130      	cbz	r0, 8009a90 <HAL_SD_ConfigWideBusOperation+0xc8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a82:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8009a84:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a86:	4a31      	ldr	r2, [pc, #196]	; (8009b4c <HAL_SD_ConfigWideBusOperation+0x184>)
 8009a88:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009a8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009a8c:	4303      	orrs	r3, r0
 8009a8e:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
 8009a90:	2301      	movs	r3, #1
}
 8009a92:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 8009a94:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8009a98:	b009      	add	sp, #36	; 0x24
 8009a9a:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009a9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 8009a9e:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009aa0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009aa4:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 8009aa6:	e7e6      	b.n	8009a76 <HAL_SD_ConfigWideBusOperation+0xae>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009aa8:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8009aaa:	e9cd 1103 	strd	r1, r1, [sp, #12]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009aae:	f001 f8cd 	bl	800ac4c <SDMMC_GetResponse>
 8009ab2:	0182      	lsls	r2, r0, #6
 8009ab4:	d432      	bmi.n	8009b1c <HAL_SD_ConfigWideBusOperation+0x154>
  errorstate = SD_FindSCR(hsd, scr);
 8009ab6:	a903      	add	r1, sp, #12
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f7ff faed 	bl	8009098 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009abe:	b960      	cbnz	r0, 8009ada <HAL_SD_ConfigWideBusOperation+0x112>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009ac0:	9b04      	ldr	r3, [sp, #16]
 8009ac2:	03db      	lsls	r3, r3, #15
 8009ac4:	d533      	bpl.n	8009b2e <HAL_SD_ConfigWideBusOperation+0x166>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009ac6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009ac8:	6820      	ldr	r0, [r4, #0]
 8009aca:	0409      	lsls	r1, r1, #16
 8009acc:	f001 fa72 	bl	800afb4 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ad0:	b918      	cbnz	r0, 8009ada <HAL_SD_ConfigWideBusOperation+0x112>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009ad2:	4601      	mov	r1, r0
 8009ad4:	6820      	ldr	r0, [r4, #0]
 8009ad6:	f001 fa7f 	bl	800afd8 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8009ada:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009adc:	4303      	orrs	r3, r0
 8009ade:	6363      	str	r3, [r4, #52]	; 0x34
 8009ae0:	e7c2      	b.n	8009a68 <HAL_SD_ConfigWideBusOperation+0xa0>
  uint32_t scr[2U] = {0UL, 0UL};
 8009ae2:	2100      	movs	r1, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009ae4:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8009ae6:	e9cd 1103 	strd	r1, r1, [sp, #12]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009aea:	f001 f8af 	bl	800ac4c <SDMMC_GetResponse>
 8009aee:	0180      	lsls	r0, r0, #6
 8009af0:	d414      	bmi.n	8009b1c <HAL_SD_ConfigWideBusOperation+0x154>
  errorstate = SD_FindSCR(hsd, scr);
 8009af2:	a903      	add	r1, sp, #12
 8009af4:	4620      	mov	r0, r4
 8009af6:	f7ff facf 	bl	8009098 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d1ed      	bne.n	8009ada <HAL_SD_ConfigWideBusOperation+0x112>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009afe:	9b04      	ldr	r3, [sp, #16]
 8009b00:	0359      	lsls	r1, r3, #13
 8009b02:	d514      	bpl.n	8009b2e <HAL_SD_ConfigWideBusOperation+0x166>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b04:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009b06:	6820      	ldr	r0, [r4, #0]
 8009b08:	0409      	lsls	r1, r1, #16
 8009b0a:	f001 fa53 	bl	800afb4 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d1e3      	bne.n	8009ada <HAL_SD_ConfigWideBusOperation+0x112>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009b12:	2102      	movs	r1, #2
 8009b14:	6820      	ldr	r0, [r4, #0]
 8009b16:	f001 fa5f 	bl	800afd8 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b1a:	e7de      	b.n	8009ada <HAL_SD_ConfigWideBusOperation+0x112>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b1c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009b20:	e7db      	b.n	8009ada <HAL_SD_ConfigWideBusOperation+0x112>
        if (hsd->Init.ClockDiv == 0U)
 8009b22:	b93a      	cbnz	r2, 8009b34 <HAL_SD_ConfigWideBusOperation+0x16c>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009b24:	490a      	ldr	r1, [pc, #40]	; (8009b50 <HAL_SD_ConfigWideBusOperation+0x188>)
 8009b26:	4288      	cmp	r0, r1
 8009b28:	d98d      	bls.n	8009a46 <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009b2a:	0e5a      	lsrs	r2, r3, #25
 8009b2c:	e78b      	b.n	8009a46 <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009b2e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009b32:	e7d2      	b.n	8009ada <HAL_SD_ConfigWideBusOperation+0x112>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009b34:	0051      	lsls	r1, r2, #1
 8009b36:	fbb0 f1f1 	udiv	r1, r0, r1
 8009b3a:	4805      	ldr	r0, [pc, #20]	; (8009b50 <HAL_SD_ConfigWideBusOperation+0x188>)
 8009b3c:	4281      	cmp	r1, r0
 8009b3e:	d982      	bls.n	8009a46 <HAL_SD_ConfigWideBusOperation+0x7e>
 8009b40:	e7f3      	b.n	8009b2a <HAL_SD_ConfigWideBusOperation+0x162>
 8009b42:	bf00      	nop
 8009b44:	55e63b89 	.word	0x55e63b89
 8009b48:	017d7840 	.word	0x017d7840
 8009b4c:	1fe00fff 	.word	0x1fe00fff
 8009b50:	02faf080 	.word	0x02faf080

08009b54 <HAL_SD_GetCardState>:
{
 8009b54:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b56:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 8009b58:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b5a:	6800      	ldr	r0, [r0, #0]
 8009b5c:	0409      	lsls	r1, r1, #16
 8009b5e:	f001 fa61 	bl	800b024 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b62:	4601      	mov	r1, r0
 8009b64:	b120      	cbz	r0, 8009b70 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8009b66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b68:	2000      	movs	r0, #0
 8009b6a:	430b      	orrs	r3, r1
 8009b6c:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009b6e:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b70:	6820      	ldr	r0, [r4, #0]
 8009b72:	f001 f86b 	bl	800ac4c <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009b76:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8009b7a:	bd10      	pop	{r4, pc}

08009b7c <HAL_SD_Init>:
{
 8009b7c:	b570      	push	{r4, r5, r6, lr}
 8009b7e:	b086      	sub	sp, #24
  if (hsd == NULL)
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d03c      	beq.n	8009bfe <HAL_SD_Init+0x82>
  if (hsd->State == HAL_SD_STATE_RESET)
 8009b84:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8009b88:	4604      	mov	r4, r0
 8009b8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d039      	beq.n	8009c06 <HAL_SD_Init+0x8a>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009b92:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009b94:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009b96:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009b9a:	f7ff fdc1 	bl	8009720 <HAL_SD_InitCard>
 8009b9e:	bb70      	cbnz	r0, 8009bfe <HAL_SD_Init+0x82>
  if (hsd->State == HAL_SD_STATE_BUSY)
 8009ba0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009ba4:	2b03      	cmp	r3, #3
 8009ba6:	d02a      	beq.n	8009bfe <HAL_SD_Init+0x82>
 8009ba8:	a901      	add	r1, sp, #4
 8009baa:	4620      	mov	r0, r4
 8009bac:	f7ff f9ae 	bl	8008f0c <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009bb0:	bb28      	cbnz	r0, 8009bfe <HAL_SD_Init+0x82>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009bb2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 8009bb4:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009bb8:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009bba:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 8009bbe:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009bc0:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009bc2:	d024      	beq.n	8009c0e <HAL_SD_Init+0x92>
 8009bc4:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009bc6:	68e1      	ldr	r1, [r4, #12]
 8009bc8:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009bca:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009bcc:	f7ff fefc 	bl	80099c8 <HAL_SD_ConfigWideBusOperation>
 8009bd0:	4605      	mov	r5, r0
 8009bd2:	b9a0      	cbnz	r0, 8009bfe <HAL_SD_Init+0x82>
  tickstart = HAL_GetTick();
 8009bd4:	f7f9 ff8e 	bl	8003af4 <HAL_GetTick>
 8009bd8:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009bda:	e004      	b.n	8009be6 <HAL_SD_Init+0x6a>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009bdc:	f7f9 ff8a 	bl	8003af4 <HAL_GetTick>
 8009be0:	1b83      	subs	r3, r0, r6
 8009be2:	3301      	adds	r3, #1
 8009be4:	d01a      	beq.n	8009c1c <HAL_SD_Init+0xa0>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009be6:	4620      	mov	r0, r4
 8009be8:	f7ff ffb4 	bl	8009b54 <HAL_SD_GetCardState>
 8009bec:	2804      	cmp	r0, #4
 8009bee:	d1f5      	bne.n	8009bdc <HAL_SD_Init+0x60>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009bf0:	2300      	movs	r3, #0
  hsd->State = HAL_SD_STATE_READY;
 8009bf2:	2201      	movs	r2, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009bf4:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009bf6:	62e3      	str	r3, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 8009bf8:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  return HAL_OK;
 8009bfc:	e000      	b.n	8009c00 <HAL_SD_Init+0x84>
    return HAL_ERROR;
 8009bfe:	2501      	movs	r5, #1
}
 8009c00:	4628      	mov	r0, r5
 8009c02:	b006      	add	sp, #24
 8009c04:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Lock = HAL_UNLOCKED;
 8009c06:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 8009c08:	f7f8 ff22 	bl	8002a50 <HAL_SD_MspInit>
 8009c0c:	e7c1      	b.n	8009b92 <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	bf0c      	ite	eq
 8009c12:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8009c16:	f44f 7300 	movne.w	r3, #512	; 0x200
 8009c1a:	e7d4      	b.n	8009bc6 <HAL_SD_Init+0x4a>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009c1c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 8009c20:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8009c22:	2503      	movs	r5, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009c24:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009c26:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 8009c2a:	e7e9      	b.n	8009c00 <HAL_SD_Init+0x84>

08009c2c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop

08009c30 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop

08009c34 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop

08009c38 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop

08009c3c <HAL_SD_IRQHandler>:
{
 8009c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c3e:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009c40:	6800      	ldr	r0, [r0, #0]
{
 8009c42:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 8009c44:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009c46:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009c48:	041b      	lsls	r3, r3, #16
 8009c4a:	d502      	bpl.n	8009c52 <HAL_SD_IRQHandler+0x16>
 8009c4c:	072f      	lsls	r7, r5, #28
 8009c4e:	f100 80b7 	bmi.w	8009dc0 <HAL_SD_IRQHandler+0x184>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8009c52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009c54:	05de      	lsls	r6, r3, #23
 8009c56:	d529      	bpl.n	8009cac <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009c58:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009c5c:	4b99      	ldr	r3, [pc, #612]	; (8009ec4 <HAL_SD_IRQHandler+0x288>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8009c5e:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009c60:	6822      	ldr	r2, [r4, #0]
 8009c62:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8009c64:	400b      	ands	r3, r1
 8009c66:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009c68:	6822      	ldr	r2, [r4, #0]
 8009c6a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c70:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009c72:	6822      	ldr	r2, [r4, #0]
 8009c74:	68d3      	ldr	r3, [r2, #12]
 8009c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c7a:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 8009c7c:	f015 0308 	ands.w	r3, r5, #8
 8009c80:	d076      	beq.n	8009d70 <HAL_SD_IRQHandler+0x134>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009c82:	f015 0f22 	tst.w	r5, #34	; 0x22
 8009c86:	f040 80e9 	bne.w	8009e5c <HAL_SD_IRQHandler+0x220>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c8a:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 8009c8c:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c8e:	498e      	ldr	r1, [pc, #568]	; (8009ec8 <HAL_SD_IRQHandler+0x28c>)
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009c90:	07a8      	lsls	r0, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c92:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 8009c94:	f04f 0300 	mov.w	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8009c98:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009c9c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009c9e:	f000 80b0 	beq.w	8009e02 <HAL_SD_IRQHandler+0x1c6>
        HAL_SD_RxCpltCallback(hsd);
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f001 fb28 	bl	800b2f8 <HAL_SD_RxCpltCallback>
}
 8009ca8:	b003      	add	sp, #12
 8009caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009cac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009cae:	045b      	lsls	r3, r3, #17
 8009cb0:	d502      	bpl.n	8009cb8 <HAL_SD_IRQHandler+0x7c>
 8009cb2:	072f      	lsls	r7, r5, #28
 8009cb4:	f100 80aa 	bmi.w	8009e0c <HAL_SD_IRQHandler+0x1d0>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009cb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009cba:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009cbe:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8009cc0:	d06e      	beq.n	8009da0 <HAL_SD_IRQHandler+0x164>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8009cc2:	079e      	lsls	r6, r3, #30
 8009cc4:	d503      	bpl.n	8009cce <HAL_SD_IRQHandler+0x92>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009cc6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cc8:	f043 0302 	orr.w	r3, r3, #2
 8009ccc:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8009cce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009cd0:	0719      	lsls	r1, r3, #28
 8009cd2:	d503      	bpl.n	8009cdc <HAL_SD_IRQHandler+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009cd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cd6:	f043 0308 	orr.w	r3, r3, #8
 8009cda:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8009cdc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009cde:	069a      	lsls	r2, r3, #26
 8009ce0:	d503      	bpl.n	8009cea <HAL_SD_IRQHandler+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009ce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ce4:	f043 0320 	orr.w	r3, r3, #32
 8009ce8:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8009cea:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009cec:	06db      	lsls	r3, r3, #27
 8009cee:	d503      	bpl.n	8009cf8 <HAL_SD_IRQHandler+0xbc>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009cf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cf2:	f043 0310 	orr.w	r3, r3, #16
 8009cf6:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009cf8:	4b73      	ldr	r3, [pc, #460]	; (8009ec8 <HAL_SD_IRQHandler+0x28c>)
 8009cfa:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8009cfc:	6822      	ldr	r2, [r4, #0]
 8009cfe:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8009d00:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8009d04:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009d06:	6822      	ldr	r2, [r4, #0]
 8009d08:	68d3      	ldr	r3, [r2, #12]
 8009d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d0e:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8009d10:	6822      	ldr	r2, [r4, #0]
 8009d12:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8009d14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009d18:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8009d1a:	6822      	ldr	r2, [r4, #0]
 8009d1c:	68d3      	ldr	r3, [r2, #12]
 8009d1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d22:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d24:	6820      	ldr	r0, [r4, #0]
 8009d26:	f001 f90f 	bl	800af48 <SDMMC_CmdStopTransfer>
 8009d2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009d2c:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009d2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d32:	4318      	orrs	r0, r3
 8009d34:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8009d36:	68d3      	ldr	r3, [r2, #12]
 8009d38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d3c:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8009d3e:	6823      	ldr	r3, [r4, #0]
 8009d40:	6399      	str	r1, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8009d42:	f015 0308 	ands.w	r3, r5, #8
 8009d46:	f040 8097 	bne.w	8009e78 <HAL_SD_IRQHandler+0x23c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009d4a:	062f      	lsls	r7, r5, #24
 8009d4c:	d5ac      	bpl.n	8009ca8 <HAL_SD_IRQHandler+0x6c>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009d4e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009d50:	2a00      	cmp	r2, #0
 8009d52:	d0a9      	beq.n	8009ca8 <HAL_SD_IRQHandler+0x6c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009d54:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8009d56:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 8009d58:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8009d5a:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8009d5c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8009d60:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009d62:	6822      	ldr	r2, [r4, #0]
 8009d64:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8009d66:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8009d6a:	f7ff fbf3 	bl	8009554 <HAL_SD_ErrorCallback>
 8009d6e:	e79b      	b.n	8009ca8 <HAL_SD_IRQHandler+0x6c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8009d70:	0629      	lsls	r1, r5, #24
 8009d72:	d599      	bpl.n	8009ca8 <HAL_SD_IRQHandler+0x6c>
      hsd->Instance->DLEN = 0;
 8009d74:	6822      	ldr	r2, [r4, #0]
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009d76:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 8009d7a:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8009d7c:	6822      	ldr	r2, [r4, #0]
 8009d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8009d80:	6822      	ldr	r2, [r4, #0]
 8009d82:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009d84:	f040 8086 	bne.w	8009e94 <HAL_SD_IRQHandler+0x258>
      hsd->State = HAL_SD_STATE_READY;
 8009d88:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8009d8a:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009d8c:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 8009d90:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d94:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009d96:	f040 808b 	bne.w	8009eb0 <HAL_SD_IRQHandler+0x274>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009d9a:	07aa      	lsls	r2, r5, #30
 8009d9c:	d084      	beq.n	8009ca8 <HAL_SD_IRQHandler+0x6c>
 8009d9e:	e780      	b.n	8009ca2 <HAL_SD_IRQHandler+0x66>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8009da0:	00de      	lsls	r6, r3, #3
 8009da2:	d581      	bpl.n	8009ca8 <HAL_SD_IRQHandler+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8009da4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009da8:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009daa:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db0:	0759      	lsls	r1, r3, #29
 8009db2:	d46a      	bmi.n	8009e8a <HAL_SD_IRQHandler+0x24e>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009db4:	06aa      	lsls	r2, r5, #26
 8009db6:	f140 8082 	bpl.w	8009ebe <HAL_SD_IRQHandler+0x282>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8009dba:	f7ff ff3d 	bl	8009c38 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 8009dbe:	e773      	b.n	8009ca8 <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pRxBuffPtr;
 8009dc0:	e9d4 7309 	ldrd	r7, r3, [r4, #36]	; 0x24
  if (hsd->RxXferSize >= 32U)
 8009dc4:	2b1f      	cmp	r3, #31
 8009dc6:	f67f af6f 	bls.w	8009ca8 <HAL_SD_IRQHandler+0x6c>
 8009dca:	1d3d      	adds	r5, r7, #4
 8009dcc:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8009dd0:	e000      	b.n	8009dd4 <HAL_SD_IRQHandler+0x198>
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009dd2:	6820      	ldr	r0, [r4, #0]
    for (count = 0U; count < 8U; count++)
 8009dd4:	3504      	adds	r5, #4
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009dd6:	f000 ff23 	bl	800ac20 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009dda:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009ddc:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)(data & 0xFFU);
 8009dde:	f805 0c08 	strb.w	r0, [r5, #-8]
    for (count = 0U; count < 8U; count++)
 8009de2:	42b5      	cmp	r5, r6
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009de4:	ea4f 6010 	mov.w	r0, r0, lsr #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009de8:	f805 2c07 	strb.w	r2, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009dec:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009df0:	f805 0c05 	strb.w	r0, [r5, #-5]
    for (count = 0U; count < 8U; count++)
 8009df4:	d1ed      	bne.n	8009dd2 <HAL_SD_IRQHandler+0x196>
    hsd->RxXferSize -= 32U;
 8009df6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp++;
 8009df8:	3720      	adds	r7, #32
    hsd->RxXferSize -= 32U;
 8009dfa:	3b20      	subs	r3, #32
 8009dfc:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
 8009e00:	e752      	b.n	8009ca8 <HAL_SD_IRQHandler+0x6c>
        HAL_SD_TxCpltCallback(hsd);
 8009e02:	4620      	mov	r0, r4
 8009e04:	f001 fa72 	bl	800b2ec <HAL_SD_TxCpltCallback>
}
 8009e08:	b003      	add	sp, #12
 8009e0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hsd->TxXferSize >= 32U)
 8009e0c:	6a23      	ldr	r3, [r4, #32]
 8009e0e:	2b1f      	cmp	r3, #31
 8009e10:	f67f af4a 	bls.w	8009ca8 <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pTxBuffPtr;
 8009e14:	69e6      	ldr	r6, [r4, #28]
 8009e16:	1d37      	adds	r7, r6, #4
 8009e18:	f106 0524 	add.w	r5, r6, #36	; 0x24
 8009e1c:	e000      	b.n	8009e20 <HAL_SD_IRQHandler+0x1e4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009e1e:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 8009e20:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
 8009e24:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009e26:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 8009e28:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8009e2a:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 8009e2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009e32:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 8009e34:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 8009e38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e3c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8009e3e:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 8009e42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009e46:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009e48:	f000 feee 	bl	800ac28 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009e4c:	42af      	cmp	r7, r5
 8009e4e:	d1e6      	bne.n	8009e1e <HAL_SD_IRQHandler+0x1e2>
    hsd->TxXferSize -= 32U;
 8009e50:	6a23      	ldr	r3, [r4, #32]
      tmp++;
 8009e52:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 8009e54:	3b20      	subs	r3, #32
 8009e56:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
 8009e5a:	e725      	b.n	8009ca8 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e5c:	6820      	ldr	r0, [r4, #0]
 8009e5e:	f001 f873 	bl	800af48 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009e62:	4603      	mov	r3, r0
 8009e64:	2800      	cmp	r0, #0
 8009e66:	f43f af10 	beq.w	8009c8a <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 8009e6a:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009e6c:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009e72:	f7ff fb6f 	bl	8009554 <HAL_SD_ErrorCallback>
 8009e76:	e708      	b.n	8009c8a <HAL_SD_IRQHandler+0x4e>
      hsd->State = HAL_SD_STATE_READY;
 8009e78:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 8009e7a:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 8009e7c:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 8009e7e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009e82:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8009e84:	f7ff fb66 	bl	8009554 <HAL_SD_ErrorCallback>
 8009e88:	e70e      	b.n	8009ca8 <HAL_SD_IRQHandler+0x6c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009e8a:	06ab      	lsls	r3, r5, #26
 8009e8c:	d514      	bpl.n	8009eb8 <HAL_SD_IRQHandler+0x27c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8009e8e:	f7ff fed1 	bl	8009c34 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 8009e92:	e709      	b.n	8009ca8 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009e94:	6820      	ldr	r0, [r4, #0]
 8009e96:	f001 f857 	bl	800af48 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2800      	cmp	r0, #0
 8009e9e:	f43f af73 	beq.w	8009d88 <HAL_SD_IRQHandler+0x14c>
          hsd->ErrorCode |= errorstate;
 8009ea2:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009ea4:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8009eaa:	f7ff fb53 	bl	8009554 <HAL_SD_ErrorCallback>
 8009eae:	e76b      	b.n	8009d88 <HAL_SD_IRQHandler+0x14c>
        HAL_SD_TxCpltCallback(hsd);
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f001 fa1b 	bl	800b2ec <HAL_SD_TxCpltCallback>
 8009eb6:	e770      	b.n	8009d9a <HAL_SD_IRQHandler+0x15e>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8009eb8:	f7ff feb8 	bl	8009c2c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8009ebc:	e6f4      	b.n	8009ca8 <HAL_SD_IRQHandler+0x6c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8009ebe:	f7ff feb7 	bl	8009c30 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 8009ec2:	e6f1      	b.n	8009ca8 <HAL_SD_IRQHandler+0x6c>
 8009ec4:	ffff3ec5 	.word	0xffff3ec5
 8009ec8:	18000f3a 	.word	0x18000f3a

08009ecc <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009ecc:	b318      	cbz	r0, 8009f16 <HAL_SDRAM_Init+0x4a>
{
 8009ece:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009ed0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	460d      	mov	r5, r1
 8009ed8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009edc:	b1b3      	cbz	r3, 8009f0c <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009ede:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009ee6:	f851 0b04 	ldr.w	r0, [r1], #4
 8009eea:	f000 fdcb 	bl	800aa84 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009eee:	6862      	ldr	r2, [r4, #4]
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	6820      	ldr	r0, [r4, #0]
 8009ef4:	f000 fe04 	bl	800ab00 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8009ef8:	4a08      	ldr	r2, [pc, #32]	; (8009f1c <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009efa:	2101      	movs	r1, #1

  return HAL_OK;
 8009efc:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8009efe:	6813      	ldr	r3, [r2, #0]
 8009f00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f04:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009f06:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8009f0c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8009f10:	f7f6 ff9c 	bl	8000e4c <HAL_SDRAM_MspInit>
 8009f14:	e7e3      	b.n	8009ede <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8009f16:	2001      	movs	r0, #1
}
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	52004000 	.word	0x52004000

08009f20 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009f20:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009f22:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8009f26:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009f28:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009f2a:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8009f2c:	d004      	beq.n	8009f38 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009f2e:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 8009f32:	2e01      	cmp	r6, #1
 8009f34:	d001      	beq.n	8009f3a <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8009f36:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8009f38:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f3a:	2302      	movs	r3, #2
 8009f3c:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009f3e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f40:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009f44:	f000 fe2a 	bl	800ab9c <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009f48:	682b      	ldr	r3, [r5, #0]
 8009f4a:	2b02      	cmp	r3, #2
 8009f4c:	d003      	beq.n	8009f56 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 8009f4e:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009f50:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 8009f54:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009f56:	2305      	movs	r3, #5
  return HAL_OK;
 8009f58:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009f5a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}

08009f60 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009f60:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009f62:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8009f66:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009f68:	2b02      	cmp	r3, #2
 8009f6a:	b2d8      	uxtb	r0, r3
 8009f6c:	d005      	beq.n	8009f7a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009f6e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	b2dd      	uxtb	r5, r3
 8009f76:	d001      	beq.n	8009f7c <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8009f78:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f7c:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009f7e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009f80:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009f84:	f000 fe22 	bl	800abcc <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8009f88:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009f8a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8009f8e:	bd38      	pop	{r3, r4, r5, pc}

08009f90 <SPI_AbortTransfer>:
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f90:	6801      	ldr	r1, [r0, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009f92:	4b1b      	ldr	r3, [pc, #108]	; (800a000 <SPI_AbortTransfer+0x70>)
  __HAL_SPI_DISABLE(hspi);
 8009f94:	680a      	ldr	r2, [r1, #0]
 8009f96:	f022 0201 	bic.w	r2, r2, #1
 8009f9a:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009f9c:	6802      	ldr	r2, [r0, #0]
 8009f9e:	6911      	ldr	r1, [r2, #16]
 8009fa0:	400b      	ands	r3, r1
 8009fa2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009fa4:	6802      	ldr	r2, [r0, #0]
 8009fa6:	6993      	ldr	r3, [r2, #24]
 8009fa8:	f043 0308 	orr.w	r3, r3, #8
 8009fac:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009fae:	6802      	ldr	r2, [r0, #0]
 8009fb0:	6993      	ldr	r3, [r2, #24]
 8009fb2:	f043 0310 	orr.w	r3, r3, #16
 8009fb6:	6193      	str	r3, [r2, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009fb8:	6802      	ldr	r2, [r0, #0]
 8009fba:	6893      	ldr	r3, [r2, #8]
 8009fbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8009fc0:	6093      	str	r3, [r2, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009fc2:	6802      	ldr	r2, [r0, #0]
 8009fc4:	6993      	ldr	r3, [r2, #24]
 8009fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fca:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009fcc:	6802      	ldr	r2, [r0, #0]
 8009fce:	6993      	ldr	r3, [r2, #24]
 8009fd0:	f043 0320 	orr.w	r3, r3, #32
 8009fd4:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009fd6:	6802      	ldr	r2, [r0, #0]
 8009fd8:	6993      	ldr	r3, [r2, #24]
 8009fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fde:	6193      	str	r3, [r2, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 8009fe0:	2200      	movs	r2, #0
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009fe2:	6801      	ldr	r1, [r0, #0]
 8009fe4:	698b      	ldr	r3, [r1, #24]
 8009fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009fea:	618b      	str	r3, [r1, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8009fec:	6801      	ldr	r1, [r0, #0]
 8009fee:	698b      	ldr	r3, [r1, #24]
 8009ff0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009ff4:	618b      	str	r3, [r1, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 8009ff6:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009ffa:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
}
 8009ffe:	4770      	bx	lr
 800a000:	fffffc90 	.word	0xfffffc90

0800a004 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800a004:	6802      	ldr	r2, [r0, #0]
{
 800a006:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800a008:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a00a:	6991      	ldr	r1, [r2, #24]
 800a00c:	f041 0108 	orr.w	r1, r1, #8
 800a010:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a012:	6801      	ldr	r1, [r0, #0]
 800a014:	698a      	ldr	r2, [r1, #24]
 800a016:	f042 0210 	orr.w	r2, r2, #16
 800a01a:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a01c:	6801      	ldr	r1, [r0, #0]
 800a01e:	680a      	ldr	r2, [r1, #0]
 800a020:	f022 0201 	bic.w	r2, r2, #1
 800a024:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a026:	6801      	ldr	r1, [r0, #0]
 800a028:	4a27      	ldr	r2, [pc, #156]	; (800a0c8 <SPI_CloseTransfer+0xc4>)
 800a02a:	690c      	ldr	r4, [r1, #16]
 800a02c:	4022      	ands	r2, r4
 800a02e:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a030:	6801      	ldr	r1, [r0, #0]
 800a032:	688a      	ldr	r2, [r1, #8]
 800a034:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a038:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a03a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a03e:	2a04      	cmp	r2, #4
 800a040:	d001      	beq.n	800a046 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a042:	069c      	lsls	r4, r3, #26
 800a044:	d433      	bmi.n	800a0ae <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a046:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a04a:	2a03      	cmp	r2, #3
 800a04c:	d001      	beq.n	800a052 <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a04e:	0659      	lsls	r1, r3, #25
 800a050:	d421      	bmi.n	800a096 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a052:	059a      	lsls	r2, r3, #22
 800a054:	d50a      	bpl.n	800a06c <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a056:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a05a:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a05c:	f042 0201 	orr.w	r2, r2, #1
 800a060:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a064:	698a      	ldr	r2, [r1, #24]
 800a066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a06a:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a06c:	05db      	lsls	r3, r3, #23
 800a06e:	d50a      	bpl.n	800a086 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a070:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a074:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a076:	f043 0308 	orr.w	r3, r3, #8
 800a07a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a07e:	6993      	ldr	r3, [r2, #24]
 800a080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a084:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a086:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800a088:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800a08c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a090:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800a094:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a096:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a09a:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a09c:	f042 0204 	orr.w	r2, r2, #4
 800a0a0:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a0a4:	698a      	ldr	r2, [r1, #24]
 800a0a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0aa:	618a      	str	r2, [r1, #24]
 800a0ac:	e7d1      	b.n	800a052 <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a0ae:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a0b2:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a0b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a0b8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a0bc:	698a      	ldr	r2, [r1, #24]
 800a0be:	f042 0220 	orr.w	r2, r2, #32
 800a0c2:	618a      	str	r2, [r1, #24]
 800a0c4:	e7bf      	b.n	800a046 <SPI_CloseTransfer+0x42>
 800a0c6:	bf00      	nop
 800a0c8:	fffffc90 	.word	0xfffffc90

0800a0cc <HAL_SPI_Init>:
  if (hspi == NULL)
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	f000 80be 	beq.w	800a24e <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a0d2:	4a62      	ldr	r2, [pc, #392]	; (800a25c <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0d4:	2100      	movs	r1, #0
{
 800a0d6:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a0d8:	6803      	ldr	r3, [r0, #0]
 800a0da:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a0dc:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d015      	beq.n	800a10e <HAL_SPI_Init+0x42>
 800a0e2:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d011      	beq.n	800a10e <HAL_SPI_Init+0x42>
 800a0ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	68c2      	ldr	r2, [r0, #12]
 800a0f2:	f000 80a5 	beq.w	800a240 <HAL_SPI_Init+0x174>
 800a0f6:	2a0f      	cmp	r2, #15
 800a0f8:	d807      	bhi.n	800a10a <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a0fa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a0fc:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a0fe:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800a100:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 800a102:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a106:	2a08      	cmp	r2, #8
 800a108:	d914      	bls.n	800a134 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 800a10a:	2001      	movs	r0, #1
}
 800a10c:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 800a10e:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a110:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800a112:	3208      	adds	r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a114:	4851      	ldr	r0, [pc, #324]	; (800a25c <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a116:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800a118:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800a11a:	fb01 2202 	mla	r2, r1, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a11e:	4950      	ldr	r1, [pc, #320]	; (800a260 <HAL_SPI_Init+0x194>)
 800a120:	428b      	cmp	r3, r1
 800a122:	bf18      	it	ne
 800a124:	4283      	cmpne	r3, r0
 800a126:	d003      	beq.n	800a130 <HAL_SPI_Init+0x64>
 800a128:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a12c:	428b      	cmp	r3, r1
 800a12e:	d101      	bne.n	800a134 <HAL_SPI_Init+0x68>
 800a130:	2a10      	cmp	r2, #16
 800a132:	d8ea      	bhi.n	800a10a <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a134:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800a138:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800a13c:	2a00      	cmp	r2, #0
 800a13e:	d078      	beq.n	800a232 <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a140:	2202      	movs	r2, #2
 800a142:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	f022 0201 	bic.w	r2, r2, #1
 800a14c:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a14e:	69a1      	ldr	r1, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a150:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a152:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a156:	6861      	ldr	r1, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a158:	689a      	ldr	r2, [r3, #8]
 800a15a:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a15e:	d058      	beq.n	800a212 <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a160:	0249      	lsls	r1, r1, #9
 800a162:	d502      	bpl.n	800a16a <HAL_SPI_Init+0x9e>
 800a164:	68e1      	ldr	r1, [r4, #12]
 800a166:	2906      	cmp	r1, #6
 800a168:	d84c      	bhi.n	800a204 <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a16a:	6819      	ldr	r1, [r3, #0]
 800a16c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a170:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a172:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800a174:	69e3      	ldr	r3, [r4, #28]
 800a176:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a178:	432b      	orrs	r3, r5
 800a17a:	6821      	ldr	r1, [r4, #0]
 800a17c:	4303      	orrs	r3, r0
 800a17e:	68e0      	ldr	r0, [r4, #12]
 800a180:	4303      	orrs	r3, r0
 800a182:	4313      	orrs	r3, r2
 800a184:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a186:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a188:	69a0      	ldr	r0, [r4, #24]
 800a18a:	6822      	ldr	r2, [r4, #0]
 800a18c:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 800a190:	432b      	orrs	r3, r5
 800a192:	430b      	orrs	r3, r1
 800a194:	6921      	ldr	r1, [r4, #16]
 800a196:	4303      	orrs	r3, r0
 800a198:	6960      	ldr	r0, [r4, #20]
 800a19a:	430b      	orrs	r3, r1
 800a19c:	6a21      	ldr	r1, [r4, #32]
 800a19e:	4303      	orrs	r3, r0
 800a1a0:	6860      	ldr	r0, [r4, #4]
 800a1a2:	430b      	orrs	r3, r1
 800a1a4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a1a6:	4303      	orrs	r3, r0
 800a1a8:	68a0      	ldr	r0, [r4, #8]
 800a1aa:	430b      	orrs	r3, r1
 800a1ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a1ae:	4303      	orrs	r3, r0
 800a1b0:	430b      	orrs	r3, r1
 800a1b2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a1b4:	430b      	orrs	r3, r1
 800a1b6:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a1b8:	6863      	ldr	r3, [r4, #4]
 800a1ba:	b96b      	cbnz	r3, 800a1d8 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a1bc:	6822      	ldr	r2, [r4, #0]
 800a1be:	6893      	ldr	r3, [r2, #8]
 800a1c0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800a1c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a1c8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a1ca:	6822      	ldr	r2, [r4, #0]
 800a1cc:	6893      	ldr	r3, [r2, #8]
 800a1ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a1d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a1d6:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a1d8:	6822      	ldr	r2, [r4, #0]
 800a1da:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a1dc:	f023 0301 	bic.w	r3, r3, #1
 800a1e0:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a1e2:	6863      	ldr	r3, [r4, #4]
 800a1e4:	025b      	lsls	r3, r3, #9
 800a1e6:	d506      	bpl.n	800a1f6 <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a1e8:	6822      	ldr	r2, [r4, #0]
 800a1ea:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a1ec:	68d3      	ldr	r3, [r2, #12]
 800a1ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a1f2:	430b      	orrs	r3, r1
 800a1f4:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a1f6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800a1f8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a1fa:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a1fe:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800a202:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a204:	6819      	ldr	r1, [r3, #0]
 800a206:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a208:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a20c:	4301      	orrs	r1, r0
 800a20e:	6019      	str	r1, [r3, #0]
 800a210:	e7af      	b.n	800a172 <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a212:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a216:	d01c      	beq.n	800a252 <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a218:	2900      	cmp	r1, #0
 800a21a:	d1a1      	bne.n	800a160 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a21c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a21e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800a222:	d1a2      	bne.n	800a16a <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a224:	6819      	ldr	r1, [r3, #0]
 800a226:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800a22a:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a22c:	e9d4 3100 	ldrd	r3, r1, [r4]
 800a230:	e796      	b.n	800a160 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 800a232:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800a234:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800a238:	f7f8 fcb6 	bl	8002ba8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800a23c:	6823      	ldr	r3, [r4, #0]
 800a23e:	e77f      	b.n	800a140 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a240:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800a242:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a244:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800a246:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800a248:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a24c:	e770      	b.n	800a130 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 800a24e:	2001      	movs	r0, #1
}
 800a250:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a252:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a254:	2900      	cmp	r1, #0
 800a256:	d0e5      	beq.n	800a224 <HAL_SPI_Init+0x158>
 800a258:	e784      	b.n	800a164 <HAL_SPI_Init+0x98>
 800a25a:	bf00      	nop
 800a25c:	40013000 	.word	0x40013000
 800a260:	40003800 	.word	0x40003800

0800a264 <HAL_SPI_Receive_DMA>:
{
 800a264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800a266:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	f000 80a9 	beq.w	800a3c2 <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800a270:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800a274:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800a276:	2201      	movs	r2, #1
 800a278:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800a27a:	b2de      	uxtb	r6, r3
 800a27c:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 800a27e:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800a282:	f040 8093 	bne.w	800a3ac <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 800a286:	2900      	cmp	r1, #0
 800a288:	f000 808b 	beq.w	800a3a2 <HAL_SPI_Receive_DMA+0x13e>
 800a28c:	fab5 f385 	clz	r3, r5
 800a290:	095b      	lsrs	r3, r3, #5
 800a292:	2d00      	cmp	r5, #0
 800a294:	f000 8085 	beq.w	800a3a2 <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a298:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a29a:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a29c:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a29e:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 800a2a2:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a2a6:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 800a2aa:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2ac:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a2b0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 800a2b4:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a2b8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 800a2bc:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2c0:	d07a      	beq.n	800a3b8 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 800a2c2:	68d3      	ldr	r3, [r2, #12]
 800a2c4:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a2c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2cc:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a2ce:	68e3      	ldr	r3, [r4, #12]
 800a2d0:	2b0f      	cmp	r3, #15
 800a2d2:	d861      	bhi.n	800a398 <HAL_SPI_Receive_DMA+0x134>
 800a2d4:	2b07      	cmp	r3, #7
 800a2d6:	f200 8092 	bhi.w	800a3fe <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a2da:	6822      	ldr	r2, [r4, #0]
 800a2dc:	6893      	ldr	r3, [r2, #8]
 800a2de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2e2:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a2e4:	68e3      	ldr	r3, [r4, #12]
 800a2e6:	2b07      	cmp	r3, #7
 800a2e8:	d86e      	bhi.n	800a3c8 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a2ea:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a2ec:	699a      	ldr	r2, [r3, #24]
 800a2ee:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a2f2:	d107      	bne.n	800a304 <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a2f4:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a2f8:	b292      	uxth	r2, r2
 800a2fa:	3201      	adds	r2, #1
 800a2fc:	0852      	lsrs	r2, r2, #1
 800a2fe:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a302:	699a      	ldr	r2, [r3, #24]
 800a304:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a308:	d106      	bne.n	800a318 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a30a:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a30e:	b292      	uxth	r2, r2
 800a310:	3203      	adds	r2, #3
 800a312:	0892      	lsrs	r2, r2, #2
 800a314:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a318:	4a3e      	ldr	r2, [pc, #248]	; (800a414 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800a31a:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a31c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a31e:	4a3e      	ldr	r2, [pc, #248]	; (800a418 <HAL_SPI_Receive_DMA+0x1b4>)
 800a320:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a322:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a324:	4a3d      	ldr	r2, [pc, #244]	; (800a41c <HAL_SPI_Receive_DMA+0x1b8>)
 800a326:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a328:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800a32a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a32c:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800a32e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a332:	6821      	ldr	r1, [r4, #0]
 800a334:	b29b      	uxth	r3, r3
 800a336:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a338:	3130      	adds	r1, #48	; 0x30
 800a33a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a33c:	f7fa f93c 	bl	80045b8 <HAL_DMA_Start_IT>
 800a340:	2800      	cmp	r0, #0
 800a342:	d150      	bne.n	800a3e6 <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a344:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a346:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a348:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a34a:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a34c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a350:	4b33      	ldr	r3, [pc, #204]	; (800a420 <HAL_SPI_Receive_DMA+0x1bc>)
 800a352:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a356:	bf18      	it	ne
 800a358:	432b      	orrne	r3, r5
 800a35a:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a35c:	6822      	ldr	r2, [r4, #0]
 800a35e:	6893      	ldr	r3, [r2, #8]
 800a360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a364:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a366:	6822      	ldr	r2, [r4, #0]
 800a368:	6913      	ldr	r3, [r2, #16]
 800a36a:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800a36e:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800a370:	6822      	ldr	r2, [r4, #0]
 800a372:	6813      	ldr	r3, [r2, #0]
 800a374:	f043 0301 	orr.w	r3, r3, #1
 800a378:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a37a:	6863      	ldr	r3, [r4, #4]
 800a37c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a380:	d104      	bne.n	800a38c <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a382:	6822      	ldr	r2, [r4, #0]
 800a384:	6813      	ldr	r3, [r2, #0]
 800a386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a38a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800a38c:	2300      	movs	r3, #0
  return errorcode;
 800a38e:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800a390:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800a394:	4630      	mov	r0, r6
 800a396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a398:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3a0:	d09b      	beq.n	800a2da <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800a3ac:	2300      	movs	r3, #0
    return errorcode;
 800a3ae:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800a3b0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 800a3b8:	6813      	ldr	r3, [r2, #0]
 800a3ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3be:	6013      	str	r3, [r2, #0]
 800a3c0:	e785      	b.n	800a2ce <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 800a3c2:	2602      	movs	r6, #2
}
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a3c8:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a3ca:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a3cc:	d8a4      	bhi.n	800a318 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a3ce:	699a      	ldr	r2, [r3, #24]
 800a3d0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a3d4:	d1a0      	bne.n	800a318 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a3d6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a3da:	b292      	uxth	r2, r2
 800a3dc:	3201      	adds	r2, #1
 800a3de:	0852      	lsrs	r2, r2, #1
 800a3e0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800a3e4:	e798      	b.n	800a318 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a3e6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a3ea:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800a3ec:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a3f0:	f043 0310 	orr.w	r3, r3, #16
 800a3f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a3f8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800a3fc:	e7d4      	b.n	800a3a8 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a3fe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a406:	f43f af68 	beq.w	800a2da <HAL_SPI_Receive_DMA+0x76>
 800a40a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a40e:	d1c8      	bne.n	800a3a2 <HAL_SPI_Receive_DMA+0x13e>
 800a410:	e763      	b.n	800a2da <HAL_SPI_Receive_DMA+0x76>
 800a412:	bf00      	nop
 800a414:	0800a7f5 	.word	0x0800a7f5
 800a418:	0800a7a5 	.word	0x0800a7a5
 800a41c:	0800a811 	.word	0x0800a811
 800a420:	ffff0000 	.word	0xffff0000

0800a424 <HAL_SPI_TransmitReceive_DMA>:
{
 800a424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a428:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800a42a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a42e:	2b01      	cmp	r3, #1
 800a430:	f000 809a 	beq.w	800a568 <HAL_SPI_TransmitReceive_DMA+0x144>
 800a434:	2301      	movs	r3, #1
 800a436:	4604      	mov	r4, r0
 800a438:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800a43c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800a440:	2b01      	cmp	r3, #1
 800a442:	b2de      	uxtb	r6, r3
 800a444:	d158      	bne.n	800a4f8 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a446:	2d00      	cmp	r5, #0
 800a448:	bf18      	it	ne
 800a44a:	2a00      	cmpne	r2, #0
 800a44c:	d04e      	beq.n	800a4ec <HAL_SPI_TransmitReceive_DMA+0xc8>
 800a44e:	fab1 f381 	clz	r3, r1
 800a452:	095b      	lsrs	r3, r3, #5
 800a454:	2900      	cmp	r1, #0
 800a456:	d049      	beq.n	800a4ec <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a458:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a45a:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a45c:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
 800a45e:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a460:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
 800a464:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a468:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
 800a46c:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
 800a470:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
 800a474:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a478:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
 800a47c:	68d3      	ldr	r3, [r2, #12]
 800a47e:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a482:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a484:	6802      	ldr	r2, [r0, #0]
 800a486:	6893      	ldr	r3, [r2, #8]
 800a488:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a48c:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a48e:	68c3      	ldr	r3, [r0, #12]
 800a490:	2b0f      	cmp	r3, #15
 800a492:	d938      	bls.n	800a506 <HAL_SPI_TransmitReceive_DMA+0xe2>
 800a494:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800a496:	699a      	ldr	r2, [r3, #24]
 800a498:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a49c:	d126      	bne.n	800a4ec <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a49e:	4a6c      	ldr	r2, [pc, #432]	; (800a650 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800a4a0:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a4a4:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800a65c <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a4a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a4aa:	4a6a      	ldr	r2, [pc, #424]	; (800a654 <HAL_SPI_TransmitReceive_DMA+0x230>)
 800a4ac:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a4ae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a4b0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a4b2:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800a4b6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a4b8:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800a4bc:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a4c0:	6821      	ldr	r1, [r4, #0]
 800a4c2:	b29b      	uxth	r3, r3
 800a4c4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4c6:	3130      	adds	r1, #48	; 0x30
 800a4c8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a4ca:	f7fa f875 	bl	80045b8 <HAL_DMA_Start_IT>
 800a4ce:	4607      	mov	r7, r0
 800a4d0:	2800      	cmp	r0, #0
 800a4d2:	d04d      	beq.n	800a570 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a4d4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a4d8:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800a4da:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a4de:	f043 0310 	orr.w	r3, r3, #16
 800a4e2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a4e6:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800a4ea:	e002      	b.n	800a4f2 <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 800a4f8:	2300      	movs	r3, #0
    return errorcode;
 800a4fa:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800a4fc:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800a500:	4630      	mov	r0, r6
 800a502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a506:	2b07      	cmp	r3, #7
 800a508:	d87f      	bhi.n	800a60a <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a50a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800a50c:	6993      	ldr	r3, [r2, #24]
 800a50e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a512:	d107      	bne.n	800a524 <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a514:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800a518:	b29b      	uxth	r3, r3
 800a51a:	3301      	adds	r3, #1
 800a51c:	085b      	lsrs	r3, r3, #1
 800a51e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a522:	6993      	ldr	r3, [r2, #24]
 800a524:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a528:	d106      	bne.n	800a538 <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a52a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a52e:	b29b      	uxth	r3, r3
 800a530:	3303      	adds	r3, #3
 800a532:	089b      	lsrs	r3, r3, #2
 800a534:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a538:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a53a:	699a      	ldr	r2, [r3, #24]
 800a53c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a540:	d107      	bne.n	800a552 <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a542:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a546:	b292      	uxth	r2, r2
 800a548:	3201      	adds	r2, #1
 800a54a:	0852      	lsrs	r2, r2, #1
 800a54c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a550:	699a      	ldr	r2, [r3, #24]
 800a552:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a556:	d1a2      	bne.n	800a49e <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a558:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a55c:	b292      	uxth	r2, r2
 800a55e:	3203      	adds	r2, #3
 800a560:	0892      	lsrs	r2, r2, #2
 800a562:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800a566:	e79a      	b.n	800a49e <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
 800a568:	2602      	movs	r6, #2
}
 800a56a:	4630      	mov	r0, r6
 800a56c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a570:	6822      	ldr	r2, [r4, #0]
 800a572:	6893      	ldr	r3, [r2, #8]
 800a574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a578:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a57a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a57c:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a57e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a580:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a582:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a584:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800a586:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a588:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
 800a58c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a590:	6822      	ldr	r2, [r4, #0]
 800a592:	b29b      	uxth	r3, r3
 800a594:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a596:	3220      	adds	r2, #32
 800a598:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800a59a:	f7fa f80d 	bl	80045b8 <HAL_DMA_Start_IT>
 800a59e:	bb40      	cbnz	r0, 800a5f2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a5a0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a5a2:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a5a4:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a5a6:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a5a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a5ac:	4b2a      	ldr	r3, [pc, #168]	; (800a658 <HAL_SPI_TransmitReceive_DMA+0x234>)
 800a5ae:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a5b2:	bf18      	it	ne
 800a5b4:	432b      	orrne	r3, r5
 800a5b6:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a5b8:	6822      	ldr	r2, [r4, #0]
 800a5ba:	6893      	ldr	r3, [r2, #8]
 800a5bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5c0:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a5c2:	6822      	ldr	r2, [r4, #0]
 800a5c4:	6913      	ldr	r3, [r2, #16]
 800a5c6:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800a5ca:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800a5cc:	6822      	ldr	r2, [r4, #0]
 800a5ce:	6813      	ldr	r3, [r2, #0]
 800a5d0:	f043 0301 	orr.w	r3, r3, #1
 800a5d4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5d6:	6863      	ldr	r3, [r4, #4]
 800a5d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a5dc:	d104      	bne.n	800a5e8 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a5de:	6822      	ldr	r2, [r4, #0]
 800a5e0:	6813      	ldr	r3, [r2, #0]
 800a5e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a5e6:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800a5e8:	2300      	movs	r3, #0
  return errorcode;
 800a5ea:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800a5ec:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800a5f0:	e77f      	b.n	800a4f2 <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a5f2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a5f6:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800a5f8:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a5fc:	f043 0310 	orr.w	r3, r3, #16
 800a600:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a604:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800a608:	e773      	b.n	800a4f2 <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a60a:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800a60c:	699a      	ldr	r2, [r3, #24]
 800a60e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a612:	d003      	beq.n	800a61c <HAL_SPI_TransmitReceive_DMA+0x1f8>
 800a614:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a618:	f47f af68 	bne.w	800a4ec <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a61c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800a61e:	6989      	ldr	r1, [r1, #24]
 800a620:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800a624:	d107      	bne.n	800a636 <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a626:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800a62a:	b292      	uxth	r2, r2
 800a62c:	3201      	adds	r2, #1
 800a62e:	0852      	lsrs	r2, r2, #1
 800a630:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a634:	699a      	ldr	r2, [r3, #24]
 800a636:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a63a:	f47f af30 	bne.w	800a49e <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a63e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a642:	b292      	uxth	r2, r2
 800a644:	3201      	adds	r2, #1
 800a646:	0852      	lsrs	r2, r2, #1
 800a648:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800a64c:	e727      	b.n	800a49e <HAL_SPI_TransmitReceive_DMA+0x7a>
 800a64e:	bf00      	nop
 800a650:	0800a801 	.word	0x0800a801
 800a654:	0800a7cd 	.word	0x0800a7cd
 800a658:	ffff0000 	.word	0xffff0000
 800a65c:	0800a811 	.word	0x0800a811

0800a660 <HAL_SPI_Abort>:
  __HAL_LOCK(hspi);
 800a660:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a664:	2b01      	cmp	r3, #1
 800a666:	f000 8095 	beq.w	800a794 <HAL_SPI_Abort+0x134>
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800a66a:	4b4b      	ldr	r3, [pc, #300]	; (800a798 <HAL_SPI_Abort+0x138>)
 800a66c:	2164      	movs	r1, #100	; 0x64
 800a66e:	4a4b      	ldr	r2, [pc, #300]	; (800a79c <HAL_SPI_Abort+0x13c>)
{
 800a670:	b510      	push	{r4, lr}
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800a676:	2001      	movs	r0, #1
{
 800a678:	b082      	sub	sp, #8
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800a67a:	fba2 2303 	umull	r2, r3, r2, r3
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800a67e:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hspi);
 800a680:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_ABORT;
 800a684:	2007      	movs	r0, #7
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800a686:	0a5b      	lsrs	r3, r3, #9
  hspi->State = HAL_SPI_STATE_ABORT;
 800a688:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800a68c:	fb01 f303 	mul.w	r3, r1, r3
 800a690:	9301      	str	r3, [sp, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800a692:	6813      	ldr	r3, [r2, #0]
 800a694:	0598      	lsls	r0, r3, #22
 800a696:	d53e      	bpl.n	800a716 <HAL_SPI_Abort+0xb6>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a698:	6913      	ldr	r3, [r2, #16]
 800a69a:	f023 0308 	bic.w	r3, r3, #8
 800a69e:	6113      	str	r3, [r2, #16]
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800a6a0:	6822      	ldr	r2, [r4, #0]
 800a6a2:	e002      	b.n	800a6aa <HAL_SPI_Abort+0x4a>
 800a6a4:	6913      	ldr	r3, [r2, #16]
 800a6a6:	0719      	lsls	r1, r3, #28
 800a6a8:	d50b      	bpl.n	800a6c2 <HAL_SPI_Abort+0x62>
      count--;
 800a6aa:	9b01      	ldr	r3, [sp, #4]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800a6b0:	9b01      	ldr	r3, [sp, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1f6      	bne.n	800a6a4 <HAL_SPI_Abort+0x44>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a6b6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6be:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800a6c2:	6813      	ldr	r3, [r2, #0]
 800a6c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a6c8:	6013      	str	r3, [r2, #0]
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800a6ca:	6822      	ldr	r2, [r4, #0]
 800a6cc:	e002      	b.n	800a6d4 <HAL_SPI_Abort+0x74>
 800a6ce:	6813      	ldr	r3, [r2, #0]
 800a6d0:	059b      	lsls	r3, r3, #22
 800a6d2:	d50b      	bpl.n	800a6ec <HAL_SPI_Abort+0x8c>
      count--;
 800a6d4:	9b01      	ldr	r3, [sp, #4]
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800a6da:	9b01      	ldr	r3, [sp, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1f6      	bne.n	800a6ce <HAL_SPI_Abort+0x6e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a6e0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6e8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a6ec:	6993      	ldr	r3, [r2, #24]
 800a6ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a6f2:	6193      	str	r3, [r2, #24]
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800a6f4:	6822      	ldr	r2, [r4, #0]
 800a6f6:	e002      	b.n	800a6fe <HAL_SPI_Abort+0x9e>
 800a6f8:	6953      	ldr	r3, [r2, #20]
 800a6fa:	0518      	lsls	r0, r3, #20
 800a6fc:	d50b      	bpl.n	800a716 <HAL_SPI_Abort+0xb6>
      count--;
 800a6fe:	9b01      	ldr	r3, [sp, #4]
 800a700:	3b01      	subs	r3, #1
 800a702:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800a704:	9b01      	ldr	r3, [sp, #4]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1f6      	bne.n	800a6f8 <HAL_SPI_Abort+0x98>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a70a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a70e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a712:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800a716:	6893      	ldr	r3, [r2, #8]
 800a718:	0419      	lsls	r1, r3, #16
 800a71a:	d508      	bpl.n	800a72e <HAL_SPI_Abort+0xce>
    if (hspi->hdmatx != NULL)
 800a71c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a71e:	b133      	cbz	r3, 800a72e <HAL_SPI_Abort+0xce>
      hspi->hdmatx->XferAbortCallback = NULL;
 800a720:	2200      	movs	r2, #0
 800a722:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800a724:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800a726:	f7fa f8d9 	bl	80048dc <HAL_DMA_Abort>
 800a72a:	bb00      	cbnz	r0, 800a76e <HAL_SPI_Abort+0x10e>
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800a72c:	6822      	ldr	r2, [r4, #0]
 800a72e:	6893      	ldr	r3, [r2, #8]
 800a730:	045b      	lsls	r3, r3, #17
 800a732:	d507      	bpl.n	800a744 <HAL_SPI_Abort+0xe4>
    if (hspi->hdmarx != NULL)
 800a734:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a736:	b12b      	cbz	r3, 800a744 <HAL_SPI_Abort+0xe4>
      hspi->hdmarx->XferAbortCallback = NULL;
 800a738:	2200      	movs	r2, #0
 800a73a:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800a73c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a73e:	f7fa f8cd 	bl	80048dc <HAL_DMA_Abort>
 800a742:	b9f0      	cbnz	r0, 800a782 <HAL_SPI_Abort+0x122>
  SPI_AbortTransfer(hspi);
 800a744:	4620      	mov	r0, r4
 800a746:	f7ff fc23 	bl	8009f90 <SPI_AbortTransfer>
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800a74a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a74e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800a752:	d10a      	bne.n	800a76a <HAL_SPI_Abort+0x10a>
  errorcode = HAL_OK;
 800a754:	4618      	mov	r0, r3
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a756:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 800a75a:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 800a75c:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 800a75e:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800a762:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800a766:	b002      	add	sp, #8
 800a768:	bd10      	pop	{r4, pc}
    errorcode = HAL_ERROR;
 800a76a:	2001      	movs	r0, #1
 800a76c:	e7f5      	b.n	800a75a <HAL_SPI_Abort+0xfa>
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800a76e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800a770:	f7fb f842 	bl	80057f8 <HAL_DMA_GetError>
 800a774:	2820      	cmp	r0, #32
 800a776:	d1d9      	bne.n	800a72c <HAL_SPI_Abort+0xcc>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a778:	2340      	movs	r3, #64	; 0x40
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800a77a:	6822      	ldr	r2, [r4, #0]
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a77c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800a780:	e7d5      	b.n	800a72e <HAL_SPI_Abort+0xce>
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800a782:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a784:	f7fb f838 	bl	80057f8 <HAL_DMA_GetError>
 800a788:	2820      	cmp	r0, #32
 800a78a:	d1db      	bne.n	800a744 <HAL_SPI_Abort+0xe4>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a78c:	2340      	movs	r3, #64	; 0x40
 800a78e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800a792:	e7d7      	b.n	800a744 <HAL_SPI_Abort+0xe4>
  __HAL_LOCK(hspi);
 800a794:	2002      	movs	r0, #2
}
 800a796:	4770      	bx	lr
 800a798:	20000af0 	.word	0x20000af0
 800a79c:	057619f1 	.word	0x057619f1

0800a7a0 <HAL_SPI_TxCpltCallback>:
 800a7a0:	4770      	bx	lr
 800a7a2:	bf00      	nop

0800a7a4 <SPI_DMAReceiveCplt>:
{
 800a7a4:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a7a8:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800a7ac:	2b07      	cmp	r3, #7
 800a7ae:	d009      	beq.n	800a7c4 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a7b0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800a7b2:	69db      	ldr	r3, [r3, #28]
 800a7b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7b8:	d005      	beq.n	800a7c6 <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a7ba:	6802      	ldr	r2, [r0, #0]
 800a7bc:	6913      	ldr	r3, [r2, #16]
 800a7be:	f043 0308 	orr.w	r3, r3, #8
 800a7c2:	6113      	str	r3, [r2, #16]
}
 800a7c4:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800a7c6:	f00e fac7 	bl	8018d58 <__HAL_SPI_RxCpltCallback_veneer>
}
 800a7ca:	bd08      	pop	{r3, pc}

0800a7cc <SPI_DMATransmitReceiveCplt>:
{
 800a7cc:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a7ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800a7d0:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800a7d4:	2b07      	cmp	r3, #7
 800a7d6:	d009      	beq.n	800a7ec <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a7d8:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800a7da:	69db      	ldr	r3, [r3, #28]
 800a7dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7e0:	d005      	beq.n	800a7ee <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800a7e2:	6802      	ldr	r2, [r0, #0]
 800a7e4:	6913      	ldr	r3, [r2, #16]
 800a7e6:	f043 0308 	orr.w	r3, r3, #8
 800a7ea:	6113      	str	r3, [r2, #16]
}
 800a7ec:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 800a7ee:	f00e fabf 	bl	8018d70 <__HAL_SPI_TxRxCpltCallback_veneer>
}
 800a7f2:	bd08      	pop	{r3, pc}

0800a7f4 <SPI_DMAHalfReceiveCplt>:
{
 800a7f4:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a7f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a7f8:	f00e faaa 	bl	8018d50 <__HAL_SPI_RxHalfCpltCallback_veneer>
}
 800a7fc:	bd08      	pop	{r3, pc}
 800a7fe:	bf00      	nop

0800a800 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800a800:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a802:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800a804:	f00e facc 	bl	8018da0 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
 800a808:	bd08      	pop	{r3, pc}
 800a80a:	bf00      	nop

0800a80c <HAL_SPI_ErrorCallback>:
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop

0800a810 <SPI_DMAError>:
{
 800a810:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a812:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a814:	f7fa fff0 	bl	80057f8 <HAL_DMA_GetError>
 800a818:	2802      	cmp	r0, #2
 800a81a:	d100      	bne.n	800a81e <SPI_DMAError+0xe>
}
 800a81c:	bd10      	pop	{r4, pc}
    SPI_CloseTransfer(hspi);
 800a81e:	4620      	mov	r0, r4
 800a820:	f7ff fbf0 	bl	800a004 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a824:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a828:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a82a:	f043 0310 	orr.w	r3, r3, #16
 800a82e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800a832:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800a836:	f7ff ffe9 	bl	800a80c <HAL_SPI_ErrorCallback>
}
 800a83a:	bd10      	pop	{r4, pc}

0800a83c <SPI_DMAAbortOnError>:
{
 800a83c:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 800a83e:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a840:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800a842:	2300      	movs	r3, #0
 800a844:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800a848:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800a84c:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800a850:	f7ff ffdc 	bl	800a80c <HAL_SPI_ErrorCallback>
}
 800a854:	bd08      	pop	{r3, pc}
 800a856:	bf00      	nop

0800a858 <HAL_SPI_SuspendCallback>:
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop

0800a85c <HAL_SPI_IRQHandler>:
{
 800a85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800a860:	6802      	ldr	r2, [r0, #0]
{
 800a862:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800a864:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800a866:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a868:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 800a86a:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 800a86e:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a872:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 800a874:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a876:	d502      	bpl.n	800a87e <HAL_SPI_IRQHandler+0x22>
 800a878:	0709      	lsls	r1, r1, #28
 800a87a:	f100 80e4 	bmi.w	800aa46 <HAL_SPI_IRQHandler+0x1ea>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a87e:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800a882:	2b04      	cmp	r3, #4
 800a884:	d055      	beq.n	800a932 <HAL_SPI_IRQHandler+0xd6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a886:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d05b      	beq.n	800a946 <HAL_SPI_IRQHandler+0xea>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a88e:	f005 0326 	and.w	r3, r5, #38	; 0x26
 800a892:	2b02      	cmp	r3, #2
 800a894:	f000 80e6 	beq.w	800aa64 <HAL_SPI_IRQHandler+0x208>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a898:	072b      	lsls	r3, r5, #28
 800a89a:	d566      	bpl.n	800a96a <HAL_SPI_IRQHandler+0x10e>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a89c:	6993      	ldr	r3, [r2, #24]
 800a89e:	f043 0308 	orr.w	r3, r3, #8
 800a8a2:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a8a4:	6821      	ldr	r1, [r4, #0]
 800a8a6:	698b      	ldr	r3, [r1, #24]
 800a8a8:	f043 0310 	orr.w	r3, r3, #16
 800a8ac:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a8ae:	6821      	ldr	r1, [r4, #0]
 800a8b0:	698b      	ldr	r3, [r1, #24]
 800a8b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a8b6:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a8b8:	6821      	ldr	r1, [r4, #0]
 800a8ba:	690b      	ldr	r3, [r1, #16]
 800a8bc:	f023 0308 	bic.w	r3, r3, #8
 800a8c0:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a8c2:	6823      	ldr	r3, [r4, #0]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800a8ca:	d022      	beq.n	800a912 <HAL_SPI_IRQHandler+0xb6>
    SPI_CloseTransfer(hspi);
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f7ff fb99 	bl	800a004 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a8d8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f040 80be 	bne.w	800aa5e <HAL_SPI_IRQHandler+0x202>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a8e2:	2e05      	cmp	r6, #5
 800a8e4:	f000 80c3 	beq.w	800aa6e <HAL_SPI_IRQHandler+0x212>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a8e8:	2e04      	cmp	r6, #4
 800a8ea:	f000 80c3 	beq.w	800aa74 <HAL_SPI_IRQHandler+0x218>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a8ee:	2e03      	cmp	r6, #3
 800a8f0:	d131      	bne.n	800a956 <HAL_SPI_IRQHandler+0xfa>
      HAL_SPI_TxCpltCallback(hspi);
 800a8f2:	f7ff ff55 	bl	800a7a0 <HAL_SPI_TxCpltCallback>
 800a8f6:	e02e      	b.n	800a956 <HAL_SPI_IRQHandler+0xfa>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a8f8:	6821      	ldr	r1, [r4, #0]
 800a8fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8fc:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800a8fe:	6019      	str	r1, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a900:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a902:	3104      	adds	r1, #4
        hspi->RxXferCount--;
 800a904:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a908:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800a90a:	3b01      	subs	r3, #1
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800a912:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a916:	b29b      	uxth	r3, r3
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d0d7      	beq.n	800a8cc <HAL_SPI_IRQHandler+0x70>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a91c:	68e3      	ldr	r3, [r4, #12]
 800a91e:	2b0f      	cmp	r3, #15
 800a920:	d8ea      	bhi.n	800a8f8 <HAL_SPI_IRQHandler+0x9c>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a922:	2b07      	cmp	r3, #7
 800a924:	d919      	bls.n	800a95a <HAL_SPI_IRQHandler+0xfe>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a926:	8e11      	ldrh	r1, [r2, #48]	; 0x30
 800a928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a92a:	8019      	strh	r1, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a92c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a92e:	3102      	adds	r1, #2
 800a930:	e7e8      	b.n	800a904 <HAL_SPI_IRQHandler+0xa8>
    hspi->TxISR(hspi);
 800a932:	4620      	mov	r0, r4
 800a934:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a936:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a938:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a93a:	4620      	mov	r0, r4
 800a93c:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a93e:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800a942:	2b01      	cmp	r3, #1
 800a944:	d102      	bne.n	800a94c <HAL_SPI_IRQHandler+0xf0>
    hspi->RxISR(hspi);
 800a946:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a948:	4620      	mov	r0, r4
 800a94a:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a94c:	f005 0526 	and.w	r5, r5, #38	; 0x26
 800a950:	2d02      	cmp	r5, #2
 800a952:	f000 8087 	beq.w	800aa64 <HAL_SPI_IRQHandler+0x208>
}
 800a956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a95a:	6821      	ldr	r1, [r4, #0]
 800a95c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a95e:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 800a962:	7019      	strb	r1, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a964:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a966:	3101      	adds	r1, #1
 800a968:	e7cc      	b.n	800a904 <HAL_SPI_IRQHandler+0xa8>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a96a:	f415 7f58 	tst.w	r5, #864	; 0x360
 800a96e:	d0f2      	beq.n	800a956 <HAL_SPI_IRQHandler+0xfa>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a970:	0668      	lsls	r0, r5, #25
 800a972:	d509      	bpl.n	800a988 <HAL_SPI_IRQHandler+0x12c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a974:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a978:	f043 0304 	orr.w	r3, r3, #4
 800a97c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a980:	6993      	ldr	r3, [r2, #24]
 800a982:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a986:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a988:	05a9      	lsls	r1, r5, #22
 800a98a:	d50a      	bpl.n	800a9a2 <HAL_SPI_IRQHandler+0x146>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a98c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a990:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a992:	f043 0301 	orr.w	r3, r3, #1
 800a996:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a99a:	6993      	ldr	r3, [r2, #24]
 800a99c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a9a0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a9a2:	05ea      	lsls	r2, r5, #23
 800a9a4:	d50a      	bpl.n	800a9bc <HAL_SPI_IRQHandler+0x160>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a9a6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a9aa:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a9ac:	f043 0308 	orr.w	r3, r3, #8
 800a9b0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a9b4:	6993      	ldr	r3, [r2, #24]
 800a9b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9ba:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a9bc:	06ab      	lsls	r3, r5, #26
 800a9be:	d50a      	bpl.n	800a9d6 <HAL_SPI_IRQHandler+0x17a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a9c0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a9c4:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a9c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a9ce:	6993      	ldr	r3, [r2, #24]
 800a9d0:	f043 0320 	orr.w	r3, r3, #32
 800a9d4:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a9d6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0bb      	beq.n	800a956 <HAL_SPI_IRQHandler+0xfa>
      __HAL_SPI_DISABLE(hspi);
 800a9de:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a9e0:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800a9e4:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a9e6:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800a9ea:	f023 0301 	bic.w	r3, r3, #1
 800a9ee:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a9f0:	6822      	ldr	r2, [r4, #0]
 800a9f2:	4b22      	ldr	r3, [pc, #136]	; (800aa7c <HAL_SPI_IRQHandler+0x220>)
 800a9f4:	6911      	ldr	r1, [r2, #16]
 800a9f6:	ea03 0301 	and.w	r3, r3, r1
 800a9fa:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a9fc:	d12b      	bne.n	800aa56 <HAL_SPI_IRQHandler+0x1fa>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a9fe:	6822      	ldr	r2, [r4, #0]
 800aa00:	6893      	ldr	r3, [r2, #8]
 800aa02:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800aa06:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800aa08:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aa0a:	b15b      	cbz	r3, 800aa24 <HAL_SPI_IRQHandler+0x1c8>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800aa0c:	4a1c      	ldr	r2, [pc, #112]	; (800aa80 <HAL_SPI_IRQHandler+0x224>)
 800aa0e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800aa10:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800aa12:	f7fa f979 	bl	8004d08 <HAL_DMA_Abort_IT>
 800aa16:	b128      	cbz	r0, 800aa24 <HAL_SPI_IRQHandler+0x1c8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aa18:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aa1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa20:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800aa24:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d095      	beq.n	800a956 <HAL_SPI_IRQHandler+0xfa>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aa2a:	4a15      	ldr	r2, [pc, #84]	; (800aa80 <HAL_SPI_IRQHandler+0x224>)
 800aa2c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800aa2e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800aa30:	f7fa f96a 	bl	8004d08 <HAL_DMA_Abort_IT>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d08e      	beq.n	800a956 <HAL_SPI_IRQHandler+0xfa>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aa38:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aa3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa40:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800aa44:	e787      	b.n	800a956 <HAL_SPI_IRQHandler+0xfa>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aa46:	6993      	ldr	r3, [r2, #24]
 800aa48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aa4c:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 800aa4e:	f7ff ff03 	bl	800a858 <HAL_SPI_SuspendCallback>
}
 800aa52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800aa56:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800aa58:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800aa5a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800aa5e:	f7ff fed5 	bl	800a80c <HAL_SPI_ErrorCallback>
 800aa62:	e778      	b.n	800a956 <HAL_SPI_IRQHandler+0xfa>
    hspi->TxISR(hspi);
 800aa64:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800aa66:	4620      	mov	r0, r4
}
 800aa68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800aa6c:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800aa6e:	f00e f97f 	bl	8018d70 <__HAL_SPI_TxRxCpltCallback_veneer>
 800aa72:	e770      	b.n	800a956 <HAL_SPI_IRQHandler+0xfa>
      HAL_SPI_RxCpltCallback(hspi);
 800aa74:	f00e f970 	bl	8018d58 <__HAL_SPI_RxCpltCallback_veneer>
 800aa78:	e76d      	b.n	800a956 <HAL_SPI_IRQHandler+0xfa>
 800aa7a:	bf00      	nop
 800aa7c:	fffffc94 	.word	0xfffffc94
 800aa80:	0800a83d 	.word	0x0800a83d

0800aa84 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800aa84:	680b      	ldr	r3, [r1, #0]
{
 800aa86:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800aa88:	b9d3      	cbnz	r3, 800aac0 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800aa8a:	6804      	ldr	r4, [r0, #0]
 800aa8c:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800aa90:	684a      	ldr	r2, [r1, #4]
 800aa92:	4023      	ands	r3, r4
 800aa94:	4313      	orrs	r3, r2
 800aa96:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800aa9a:	4323      	orrs	r3, r4
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800aaa2:	4323      	orrs	r3, r4
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800aaaa:	4323      	orrs	r3, r4
 800aaac:	4313      	orrs	r3, r2
 800aaae:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800aab2:	4323      	orrs	r3, r4
 800aab4:	4313      	orrs	r3, r2
 800aab6:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800aab8:	2000      	movs	r0, #0
 800aaba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aabe:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800aac0:	6802      	ldr	r2, [r0, #0]
 800aac2:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800aac6:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800aaca:	4322      	orrs	r2, r4
 800aacc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800aace:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800aad0:	4b0a      	ldr	r3, [pc, #40]	; (800aafc <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800aad2:	4322      	orrs	r2, r4
 800aad4:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800aad6:	6842      	ldr	r2, [r0, #4]
 800aad8:	4013      	ands	r3, r2
 800aada:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800aade:	4323      	orrs	r3, r4
 800aae0:	4313      	orrs	r3, r2
 800aae2:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 800aae6:	4323      	orrs	r3, r4
 800aae8:	4313      	orrs	r3, r2
 800aaea:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800aaee:	4323      	orrs	r3, r4
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	6043      	str	r3, [r0, #4]
}
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	ffff8000 	.word	0xffff8000

0800ab00 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ab00:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ab02:	bb0a      	cbnz	r2, 800ab48 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ab04:	6883      	ldr	r3, [r0, #8]
 800ab06:	e9d1 2400 	ldrd	r2, r4, [r1]
 800ab0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ab0e:	3c01      	subs	r4, #1
 800ab10:	3a01      	subs	r2, #1
 800ab12:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800ab16:	4313      	orrs	r3, r2
 800ab18:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800ab1c:	3c01      	subs	r4, #1
 800ab1e:	3a01      	subs	r2, #1
 800ab20:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800ab24:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 800ab28:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800ab2c:	698a      	ldr	r2, [r1, #24]
 800ab2e:	3d01      	subs	r5, #1
 800ab30:	1e61      	subs	r1, r4, #1
 800ab32:	3a01      	subs	r2, #1
 800ab34:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800ab38:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800ab3c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ab40:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800ab42:	2000      	movs	r0, #0
 800ab44:	bc30      	pop	{r4, r5}
 800ab46:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ab48:	6885      	ldr	r5, [r0, #8]
 800ab4a:	68ca      	ldr	r2, [r1, #12]
 800ab4c:	4b12      	ldr	r3, [pc, #72]	; (800ab98 <FMC_SDRAM_Timing_Init+0x98>)
 800ab4e:	1e54      	subs	r4, r2, #1
 800ab50:	694a      	ldr	r2, [r1, #20]
 800ab52:	402b      	ands	r3, r5
 800ab54:	3a01      	subs	r2, #1
 800ab56:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 800ab5a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800ab5e:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ab60:	68c3      	ldr	r3, [r0, #12]
 800ab62:	688d      	ldr	r5, [r1, #8]
 800ab64:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ab68:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800ab6c:	e9d1 2400 	ldrd	r2, r4, [r1]
 800ab70:	3c01      	subs	r4, #1
 800ab72:	3a01      	subs	r2, #1
 800ab74:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800ab78:	690c      	ldr	r4, [r1, #16]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	698a      	ldr	r2, [r1, #24]
 800ab7e:	1e61      	subs	r1, r4, #1
 800ab80:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800ab84:	3a01      	subs	r2, #1
 800ab86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ab8a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ab8e:	60c3      	str	r3, [r0, #12]
}
 800ab90:	2000      	movs	r0, #0
 800ab92:	bc30      	pop	{r4, r5}
 800ab94:	4770      	bx	lr
 800ab96:	bf00      	nop
 800ab98:	ff0f0fff 	.word	0xff0f0fff

0800ab9c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ab9c:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ab9e:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 800aba2:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800aba4:	6900      	ldr	r0, [r0, #16]
 800aba6:	4323      	orrs	r3, r4
 800aba8:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 800abac:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800abb0:	4c05      	ldr	r4, [pc, #20]	; (800abc8 <FMC_SDRAM_SendCommand+0x2c>)
 800abb2:	3901      	subs	r1, #1
 800abb4:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800abb6:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800abb8:	4323      	orrs	r3, r4
 800abba:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800abbe:	6113      	str	r3, [r2, #16]
}
 800abc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	ffc00000 	.word	0xffc00000

0800abcc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800abcc:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800abce:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800abd0:	2000      	movs	r0, #0
{
 800abd2:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800abd4:	6954      	ldr	r4, [r2, #20]
 800abd6:	4023      	ands	r3, r4
 800abd8:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800abdc:	6151      	str	r1, [r2, #20]
}
 800abde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	ffffc001 	.word	0xffffc001

0800abe8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800abe8:	b084      	sub	sp, #16
 800abea:	b410      	push	{r4}
 800abec:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800abf0:	4614      	mov	r4, r2
{
 800abf2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800abf6:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800abf8:	9904      	ldr	r1, [sp, #16]
{
 800abfa:	4602      	mov	r2, r0
             Init.BusWide             | \
 800abfc:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800abfe:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ac00:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800ac02:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800ac04:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800ac06:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800ac08:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800ac0a:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ac0c:	4903      	ldr	r1, [pc, #12]	; (800ac1c <SDMMC_Init+0x34>)
 800ac0e:	4021      	ands	r1, r4
 800ac10:	430b      	orrs	r3, r1
 800ac12:	6053      	str	r3, [r2, #4]
}
 800ac14:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac18:	b004      	add	sp, #16
 800ac1a:	4770      	bx	lr
 800ac1c:	ffc02c00 	.word	0xffc02c00

0800ac20 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ac20:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop

0800ac28 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ac28:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ac2a:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800ac2c:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800ac2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800ac32:	4770      	bx	lr

0800ac34 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ac34:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800ac36:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ac38:	681a      	ldr	r2, [r3, #0]
 800ac3a:	f042 0203 	orr.w	r2, r2, #3
 800ac3e:	601a      	str	r2, [r3, #0]
}
 800ac40:	4770      	bx	lr
 800ac42:	bf00      	nop

0800ac44 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ac44:	6800      	ldr	r0, [r0, #0]
}
 800ac46:	f000 0003 	and.w	r0, r0, #3
 800ac4a:	4770      	bx	lr

0800ac4c <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ac4c:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800ac4e:	5840      	ldr	r0, [r0, r1]
}
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop

0800ac54 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ac54:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ac56:	680b      	ldr	r3, [r1, #0]
{
 800ac58:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ac5a:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ac5c:	684b      	ldr	r3, [r1, #4]
 800ac5e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
 800ac60:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac62:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ac64:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800ac68:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 800ac6a:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac6c:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
 800ac70:	2000      	movs	r0, #0
                       Data->TransferDir   | \
 800ac72:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800ac74:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac76:	430b      	orrs	r3, r1
 800ac78:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800ac7a:	bc30      	pop	{r4, r5}
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop

0800ac80 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ac80:	4b11      	ldr	r3, [pc, #68]	; (800acc8 <SDMMC_CmdGoIdleState+0x48>)
{
 800ac82:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ac84:	4a11      	ldr	r2, [pc, #68]	; (800accc <SDMMC_CmdGoIdleState+0x4c>)
{
 800ac86:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ac88:	4c11      	ldr	r4, [pc, #68]	; (800acd0 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800ac8a:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ac8c:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 800ac8e:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ac90:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ac94:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ac96:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ac9a:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ac9c:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ac9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800aca2:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aca6:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800aca8:	e002      	b.n	800acb0 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800acaa:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800acac:	0612      	lsls	r2, r2, #24
 800acae:	d405      	bmi.n	800acbc <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800acb0:	3b01      	subs	r3, #1
 800acb2:	d2fa      	bcs.n	800acaa <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800acb4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800acb8:	bc30      	pop	{r4, r5}
 800acba:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800acbc:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800acbe:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800acc0:	638b      	str	r3, [r1, #56]	; 0x38
}
 800acc2:	bc30      	pop	{r4, r5}
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	20000af0 	.word	0x20000af0
 800accc:	fffee0c0 	.word	0xfffee0c0
 800acd0:	10624dd3 	.word	0x10624dd3
 800acd4:	002000c5 	.word	0x002000c5

0800acd8 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800acd8:	4a19      	ldr	r2, [pc, #100]	; (800ad40 <SDMMC_CmdAppOperCommand+0x68>)
{
 800acda:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800acdc:	4b19      	ldr	r3, [pc, #100]	; (800ad44 <SDMMC_CmdAppOperCommand+0x6c>)
 800acde:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ace0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ace4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ace8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800acec:	4816      	ldr	r0, [pc, #88]	; (800ad48 <SDMMC_CmdAppOperCommand+0x70>)
 800acee:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800acf2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800acf4:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800acf6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800acfa:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800acfc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ad00:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800ad04:	1e53      	subs	r3, r2, #1
 800ad06:	b14a      	cbz	r2, 800ad1c <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800ad08:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800ad0c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ad0e:	f012 0f45 	tst.w	r2, #69	; 0x45
 800ad12:	d001      	beq.n	800ad18 <SDMMC_CmdAppOperCommand+0x40>
 800ad14:	0492      	lsls	r2, r2, #18
 800ad16:	d504      	bpl.n	800ad22 <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800ad18:	1c59      	adds	r1, r3, #1
 800ad1a:	d1f5      	bne.n	800ad08 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800ad1c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800ad20:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad22:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800ad26:	f010 0004 	ands.w	r0, r0, #4
 800ad2a:	d103      	bne.n	800ad34 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad2c:	4b07      	ldr	r3, [pc, #28]	; (800ad4c <SDMMC_CmdAppOperCommand+0x74>)
 800ad2e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800ad32:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad34:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad36:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ad38:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop
 800ad40:	20000af0 	.word	0x20000af0
 800ad44:	10624dd3 	.word	0x10624dd3
 800ad48:	fffee0c0 	.word	0xfffee0c0
 800ad4c:	002000c5 	.word	0x002000c5

0800ad50 <SDMMC_GetCmdResp1>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ad50:	4b4b      	ldr	r3, [pc, #300]	; (800ae80 <SDMMC_GetCmdResp1+0x130>)
{
 800ad52:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ad54:	4c4b      	ldr	r4, [pc, #300]	; (800ae84 <SDMMC_GetCmdResp1+0x134>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	fba4 4303 	umull	r4, r3, r4, r3
 800ad5c:	0a5b      	lsrs	r3, r3, #9
 800ad5e:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800ad62:	b15a      	cbz	r2, 800ad7c <SDMMC_GetCmdResp1+0x2c>
 800ad64:	4684      	mov	ip, r0
 800ad66:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ad68:	4847      	ldr	r0, [pc, #284]	; (800ae88 <SDMMC_GetCmdResp1+0x138>)
    sta_reg = SDMMCx->STA;
 800ad6a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800ad6e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ad70:	4202      	tst	r2, r0
 800ad72:	d001      	beq.n	800ad78 <SDMMC_GetCmdResp1+0x28>
 800ad74:	0494      	lsls	r4, r2, #18
 800ad76:	d506      	bpl.n	800ad86 <SDMMC_GetCmdResp1+0x36>
    if (count-- == 0U)
 800ad78:	1c5a      	adds	r2, r3, #1
 800ad7a:	d1f6      	bne.n	800ad6a <SDMMC_GetCmdResp1+0x1a>
      return SDMMC_ERROR_TIMEOUT;
 800ad7c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800ad80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad84:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ad86:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800ad8a:	0758      	lsls	r0, r3, #29
 800ad8c:	d442      	bmi.n	800ae14 <SDMMC_GetCmdResp1+0xc4>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ad8e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800ad92:	f010 0001 	ands.w	r0, r0, #1
 800ad96:	d137      	bne.n	800ae08 <SDMMC_GetCmdResp1+0xb8>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ad98:	4b3c      	ldr	r3, [pc, #240]	; (800ae8c <SDMMC_GetCmdResp1+0x13c>)
 800ad9a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ad9e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	4299      	cmp	r1, r3
 800ada6:	d133      	bne.n	800ae10 <SDMMC_GetCmdResp1+0xc0>
  return (*(__IO uint32_t *) tmp);
 800ada8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800adac:	4838      	ldr	r0, [pc, #224]	; (800ae90 <SDMMC_GetCmdResp1+0x140>)
 800adae:	4018      	ands	r0, r3
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d0e5      	beq.n	800ad80 <SDMMC_GetCmdResp1+0x30>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	db32      	blt.n	800ae1e <SDMMC_GetCmdResp1+0xce>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800adb8:	005a      	lsls	r2, r3, #1
 800adba:	d433      	bmi.n	800ae24 <SDMMC_GetCmdResp1+0xd4>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800adbc:	009c      	lsls	r4, r3, #2
 800adbe:	d433      	bmi.n	800ae28 <SDMMC_GetCmdResp1+0xd8>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800adc0:	00d9      	lsls	r1, r3, #3
 800adc2:	d433      	bmi.n	800ae2c <SDMMC_GetCmdResp1+0xdc>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800adc4:	011a      	lsls	r2, r3, #4
 800adc6:	d434      	bmi.n	800ae32 <SDMMC_GetCmdResp1+0xe2>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800adc8:	015c      	lsls	r4, r3, #5
 800adca:	d435      	bmi.n	800ae38 <SDMMC_GetCmdResp1+0xe8>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800adcc:	01d9      	lsls	r1, r3, #7
 800adce:	d436      	bmi.n	800ae3e <SDMMC_GetCmdResp1+0xee>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800add0:	021a      	lsls	r2, r3, #8
 800add2:	d437      	bmi.n	800ae44 <SDMMC_GetCmdResp1+0xf4>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800add4:	025c      	lsls	r4, r3, #9
 800add6:	d438      	bmi.n	800ae4a <SDMMC_GetCmdResp1+0xfa>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800add8:	0299      	lsls	r1, r3, #10
 800adda:	d442      	bmi.n	800ae62 <SDMMC_GetCmdResp1+0x112>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800addc:	02da      	lsls	r2, r3, #11
 800adde:	d43d      	bmi.n	800ae5c <SDMMC_GetCmdResp1+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ade0:	035c      	lsls	r4, r3, #13
 800ade2:	d438      	bmi.n	800ae56 <SDMMC_GetCmdResp1+0x106>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ade4:	0399      	lsls	r1, r3, #14
 800ade6:	d433      	bmi.n	800ae50 <SDMMC_GetCmdResp1+0x100>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ade8:	03da      	lsls	r2, r3, #15
 800adea:	d446      	bmi.n	800ae7a <SDMMC_GetCmdResp1+0x12a>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800adec:	041c      	lsls	r4, r3, #16
 800adee:	d441      	bmi.n	800ae74 <SDMMC_GetCmdResp1+0x124>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800adf0:	0459      	lsls	r1, r3, #17
 800adf2:	d43c      	bmi.n	800ae6e <SDMMC_GetCmdResp1+0x11e>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800adf4:	049a      	lsls	r2, r3, #18
 800adf6:	d437      	bmi.n	800ae68 <SDMMC_GetCmdResp1+0x118>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800adf8:	f013 0f08 	tst.w	r3, #8
 800adfc:	bf14      	ite	ne
 800adfe:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800ae02:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800ae06:	e7bb      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ae08:	2301      	movs	r3, #1
 800ae0a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae0e:	e7b7      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ae10:	2001      	movs	r0, #1
 800ae12:	e7b5      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae14:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae16:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ae18:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ae1c:	e7b0      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ae1e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800ae22:	e7ad      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ae24:	2040      	movs	r0, #64	; 0x40
 800ae26:	e7ab      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ae28:	2080      	movs	r0, #128	; 0x80
 800ae2a:	e7a9      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ae2c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ae30:	e7a6      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ae32:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ae36:	e7a3      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ae38:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ae3c:	e7a0      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ae3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ae42:	e79d      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ae44:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ae48:	e79a      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ae4a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ae4e:	e797      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ae50:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ae54:	e794      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ae56:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ae5a:	e791      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_CC_ERR;
 800ae5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ae60:	e78e      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ae62:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ae66:	e78b      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_ERASE_RESET;
 800ae68:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800ae6c:	e788      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ae6e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ae72:	e785      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ae74:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ae78:	e782      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ae7a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ae7e:	e77f      	b.n	800ad80 <SDMMC_GetCmdResp1+0x30>
 800ae80:	20000af0 	.word	0x20000af0
 800ae84:	10624dd3 	.word	0x10624dd3
 800ae88:	00200045 	.word	0x00200045
 800ae8c:	002000c5 	.word	0x002000c5
 800ae90:	fdffe008 	.word	0xfdffe008

0800ae94 <SDMMC_CmdBlockLength>:
{
 800ae94:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800ae96:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ae98:	f241 1410 	movw	r4, #4368	; 0x1110
 800ae9c:	68c2      	ldr	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ae9e:	2110      	movs	r1, #16
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aea0:	4d04      	ldr	r5, [pc, #16]	; (800aeb4 <SDMMC_CmdBlockLength+0x20>)
 800aea2:	4015      	ands	r5, r2
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aea4:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aea8:	432c      	orrs	r4, r5
 800aeaa:	60c4      	str	r4, [r0, #12]
}
 800aeac:	bc30      	pop	{r4, r5}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aeae:	f7ff bf4f 	b.w	800ad50 <SDMMC_GetCmdResp1>
 800aeb2:	bf00      	nop
 800aeb4:	fffee0c0 	.word	0xfffee0c0

0800aeb8 <SDMMC_CmdReadSingleBlock>:
{
 800aeb8:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800aeba:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aebc:	f241 1411 	movw	r4, #4369	; 0x1111
 800aec0:	68c2      	ldr	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aec2:	2111      	movs	r1, #17
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aec4:	4d04      	ldr	r5, [pc, #16]	; (800aed8 <SDMMC_CmdReadSingleBlock+0x20>)
 800aec6:	4015      	ands	r5, r2
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aec8:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aecc:	432c      	orrs	r4, r5
 800aece:	60c4      	str	r4, [r0, #12]
}
 800aed0:	bc30      	pop	{r4, r5}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aed2:	f7ff bf3d 	b.w	800ad50 <SDMMC_GetCmdResp1>
 800aed6:	bf00      	nop
 800aed8:	fffee0c0 	.word	0xfffee0c0

0800aedc <SDMMC_CmdReadMultiBlock>:
{
 800aedc:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800aede:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aee0:	f241 1412 	movw	r4, #4370	; 0x1112
 800aee4:	68c2      	ldr	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aee6:	2112      	movs	r1, #18
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aee8:	4d04      	ldr	r5, [pc, #16]	; (800aefc <SDMMC_CmdReadMultiBlock+0x20>)
 800aeea:	4015      	ands	r5, r2
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aeec:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800aef0:	432c      	orrs	r4, r5
 800aef2:	60c4      	str	r4, [r0, #12]
}
 800aef4:	bc30      	pop	{r4, r5}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aef6:	f7ff bf2b 	b.w	800ad50 <SDMMC_GetCmdResp1>
 800aefa:	bf00      	nop
 800aefc:	fffee0c0 	.word	0xfffee0c0

0800af00 <SDMMC_CmdWriteSingleBlock>:
{
 800af00:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800af02:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800af04:	f241 1418 	movw	r4, #4376	; 0x1118
 800af08:	68c2      	ldr	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800af0a:	2118      	movs	r1, #24
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800af0c:	4d04      	ldr	r5, [pc, #16]	; (800af20 <SDMMC_CmdWriteSingleBlock+0x20>)
 800af0e:	4015      	ands	r5, r2
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800af10:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800af14:	432c      	orrs	r4, r5
 800af16:	60c4      	str	r4, [r0, #12]
}
 800af18:	bc30      	pop	{r4, r5}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800af1a:	f7ff bf19 	b.w	800ad50 <SDMMC_GetCmdResp1>
 800af1e:	bf00      	nop
 800af20:	fffee0c0 	.word	0xfffee0c0

0800af24 <SDMMC_CmdWriteMultiBlock>:
{
 800af24:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800af26:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800af28:	f241 1419 	movw	r4, #4377	; 0x1119
 800af2c:	68c2      	ldr	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800af2e:	2119      	movs	r1, #25
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800af30:	4d04      	ldr	r5, [pc, #16]	; (800af44 <SDMMC_CmdWriteMultiBlock+0x20>)
 800af32:	4015      	ands	r5, r2
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800af34:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800af38:	432c      	orrs	r4, r5
 800af3a:	60c4      	str	r4, [r0, #12]
}
 800af3c:	bc30      	pop	{r4, r5}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800af3e:	f7ff bf07 	b.w	800ad50 <SDMMC_GetCmdResp1>
 800af42:	bf00      	nop
 800af44:	fffee0c0 	.word	0xfffee0c0

0800af48 <SDMMC_CmdStopTransfer>:
{
 800af48:	b538      	push	{r3, r4, r5, lr}
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800af4a:	68c2      	ldr	r2, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800af4c:	2500      	movs	r5, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800af4e:	490e      	ldr	r1, [pc, #56]	; (800af88 <SDMMC_CmdStopTransfer+0x40>)
 800af50:	f241 130c 	movw	r3, #4364	; 0x110c
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800af54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
 800af58:	4604      	mov	r4, r0
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800af5a:	60c2      	str	r2, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800af5c:	68c2      	ldr	r2, [r0, #12]
 800af5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af62:	60c2      	str	r2, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800af64:	6085      	str	r5, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800af66:	68c2      	ldr	r2, [r0, #12]
 800af68:	4011      	ands	r1, r2
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800af6a:	4a08      	ldr	r2, [pc, #32]	; (800af8c <SDMMC_CmdStopTransfer+0x44>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800af6c:	430b      	orrs	r3, r1
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800af6e:	210c      	movs	r1, #12
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800af70:	60c3      	str	r3, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800af72:	f7ff feed 	bl	800ad50 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800af76:	68e3      	ldr	r3, [r4, #12]
    errorstate = SDMMC_ERROR_NONE;
 800af78:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800af7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
}
 800af80:	bf08      	it	eq
 800af82:	4628      	moveq	r0, r5
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800af84:	60e3      	str	r3, [r4, #12]
}
 800af86:	bd38      	pop	{r3, r4, r5, pc}
 800af88:	fffee0c0 	.word	0xfffee0c0
 800af8c:	05f5e100 	.word	0x05f5e100

0800af90 <SDMMC_CmdSelDesel>:
{
 800af90:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800af92:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800af94:	f241 1407 	movw	r4, #4359	; 0x1107
 800af98:	68c2      	ldr	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800af9a:	2107      	movs	r1, #7
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800af9c:	4d04      	ldr	r5, [pc, #16]	; (800afb0 <SDMMC_CmdSelDesel+0x20>)
 800af9e:	4015      	ands	r5, r2
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800afa0:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800afa4:	432c      	orrs	r4, r5
 800afa6:	60c4      	str	r4, [r0, #12]
}
 800afa8:	bc30      	pop	{r4, r5}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800afaa:	f7ff bed1 	b.w	800ad50 <SDMMC_GetCmdResp1>
 800afae:	bf00      	nop
 800afb0:	fffee0c0 	.word	0xfffee0c0

0800afb4 <SDMMC_CmdAppCommand>:
{
 800afb4:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800afb6:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800afb8:	f241 1437 	movw	r4, #4407	; 0x1137
 800afbc:	68c2      	ldr	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800afbe:	2137      	movs	r1, #55	; 0x37
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800afc0:	4d04      	ldr	r5, [pc, #16]	; (800afd4 <SDMMC_CmdAppCommand+0x20>)
 800afc2:	4015      	ands	r5, r2
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800afc4:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800afc8:	432c      	orrs	r4, r5
 800afca:	60c4      	str	r4, [r0, #12]
}
 800afcc:	bc30      	pop	{r4, r5}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800afce:	f7ff bebf 	b.w	800ad50 <SDMMC_GetCmdResp1>
 800afd2:	bf00      	nop
 800afd4:	fffee0c0 	.word	0xfffee0c0

0800afd8 <SDMMC_CmdBusWidth>:
{
 800afd8:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800afda:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800afdc:	f241 1406 	movw	r4, #4358	; 0x1106
 800afe0:	68c2      	ldr	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800afe2:	2106      	movs	r1, #6
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800afe4:	4d04      	ldr	r5, [pc, #16]	; (800aff8 <SDMMC_CmdBusWidth+0x20>)
 800afe6:	4015      	ands	r5, r2
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800afe8:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800afec:	432c      	orrs	r4, r5
 800afee:	60c4      	str	r4, [r0, #12]
}
 800aff0:	bc30      	pop	{r4, r5}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800aff2:	f7ff bead 	b.w	800ad50 <SDMMC_GetCmdResp1>
 800aff6:	bf00      	nop
 800aff8:	fffee0c0 	.word	0xfffee0c0

0800affc <SDMMC_CmdSendSCR>:
  SDMMCx->ARG = Command->Argument;
 800affc:	2200      	movs	r2, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800affe:	f241 1133 	movw	r1, #4403	; 0x1133
{
 800b002:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800b004:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b006:	4c06      	ldr	r4, [pc, #24]	; (800b020 <SDMMC_CmdSendSCR+0x24>)
 800b008:	68c2      	ldr	r2, [r0, #12]
 800b00a:	4014      	ands	r4, r2
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b00c:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b010:	4321      	orrs	r1, r4
 800b012:	60c1      	str	r1, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b014:	2133      	movs	r1, #51	; 0x33
}
 800b016:	f85d 4b04 	ldr.w	r4, [sp], #4
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b01a:	f7ff be99 	b.w	800ad50 <SDMMC_GetCmdResp1>
 800b01e:	bf00      	nop
 800b020:	fffee0c0 	.word	0xfffee0c0

0800b024 <SDMMC_CmdSendStatus>:
{
 800b024:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800b026:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b028:	f241 140d 	movw	r4, #4365	; 0x110d
 800b02c:	68c2      	ldr	r2, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b02e:	210d      	movs	r1, #13
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b030:	4d04      	ldr	r5, [pc, #16]	; (800b044 <SDMMC_CmdSendStatus+0x20>)
 800b032:	4015      	ands	r5, r2
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b034:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b038:	432c      	orrs	r4, r5
 800b03a:	60c4      	str	r4, [r0, #12]
}
 800b03c:	bc30      	pop	{r4, r5}
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b03e:	f7ff be87 	b.w	800ad50 <SDMMC_GetCmdResp1>
 800b042:	bf00      	nop
 800b044:	fffee0c0 	.word	0xfffee0c0

0800b048 <SDMMC_CmdStatusRegister>:
  SDMMCx->ARG = Command->Argument;
 800b048:	2200      	movs	r2, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b04a:	f241 110d 	movw	r1, #4365	; 0x110d
{
 800b04e:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800b050:	6082      	str	r2, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b052:	4c06      	ldr	r4, [pc, #24]	; (800b06c <SDMMC_CmdStatusRegister+0x24>)
 800b054:	68c2      	ldr	r2, [r0, #12]
 800b056:	4014      	ands	r4, r2
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b058:	f241 3288 	movw	r2, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b05c:	4321      	orrs	r1, r4
 800b05e:	60c1      	str	r1, [r0, #12]
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b060:	210d      	movs	r1, #13
}
 800b062:	f85d 4b04 	ldr.w	r4, [sp], #4
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b066:	f7ff be73 	b.w	800ad50 <SDMMC_GetCmdResp1>
 800b06a:	bf00      	nop
 800b06c:	fffee0c0 	.word	0xfffee0c0

0800b070 <SDMMC_GetCmdResp2>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b070:	4a13      	ldr	r2, [pc, #76]	; (800b0c0 <SDMMC_GetCmdResp2+0x50>)
 800b072:	f241 3c88 	movw	ip, #5000	; 0x1388
 800b076:	4b13      	ldr	r3, [pc, #76]	; (800b0c4 <SDMMC_GetCmdResp2+0x54>)
{
 800b078:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b07a:	6812      	ldr	r2, [r2, #0]
 800b07c:	fba3 3202 	umull	r3, r2, r3, r2
 800b080:	0a52      	lsrs	r2, r2, #9
 800b082:	fb0c f202 	mul.w	r2, ip, r2
    if (count-- == 0U)
 800b086:	1e53      	subs	r3, r2, #1
 800b088:	b142      	cbz	r2, 800b09c <SDMMC_GetCmdResp2+0x2c>
    sta_reg = SDMMCx->STA;
 800b08a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800b08c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b08e:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b092:	d001      	beq.n	800b098 <SDMMC_GetCmdResp2+0x28>
 800b094:	0492      	lsls	r2, r2, #18
 800b096:	d504      	bpl.n	800b0a2 <SDMMC_GetCmdResp2+0x32>
    if (count-- == 0U)
 800b098:	1c58      	adds	r0, r3, #1
 800b09a:	d1f6      	bne.n	800b08a <SDMMC_GetCmdResp2+0x1a>
      return SDMMC_ERROR_TIMEOUT;
 800b09c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b0a0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b0a2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b0a4:	075b      	lsls	r3, r3, #29
 800b0a6:	d407      	bmi.n	800b0b8 <SDMMC_GetCmdResp2+0x48>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b0a8:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800b0aa:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b0ae:	bf14      	ite	ne
 800b0b0:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b0b2:	4b05      	ldreq	r3, [pc, #20]	; (800b0c8 <SDMMC_GetCmdResp2+0x58>)
 800b0b4:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800b0b6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b0b8:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0ba:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b0bc:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0be:	4770      	bx	lr
 800b0c0:	20000af0 	.word	0x20000af0
 800b0c4:	10624dd3 	.word	0x10624dd3
 800b0c8:	002000c5 	.word	0x002000c5

0800b0cc <SDMMC_CmdSendCID>:
{
 800b0cc:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800b0ce:	2400      	movs	r4, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b0d0:	4905      	ldr	r1, [pc, #20]	; (800b0e8 <SDMMC_CmdSendCID+0x1c>)
 800b0d2:	f241 3202 	movw	r2, #4866	; 0x1302
  SDMMCx->ARG = Command->Argument;
 800b0d6:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b0d8:	68c4      	ldr	r4, [r0, #12]
 800b0da:	4021      	ands	r1, r4
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	60c2      	str	r2, [r0, #12]
}
 800b0e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b0e4:	f7ff bfc4 	b.w	800b070 <SDMMC_GetCmdResp2>
 800b0e8:	fffee0c0 	.word	0xfffee0c0

0800b0ec <SDMMC_CmdSendCSD>:
{
 800b0ec:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800b0ee:	6081      	str	r1, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b0f0:	f241 3209 	movw	r2, #4873	; 0x1309
 800b0f4:	68c1      	ldr	r1, [r0, #12]
 800b0f6:	4c04      	ldr	r4, [pc, #16]	; (800b108 <SDMMC_CmdSendCSD+0x1c>)
 800b0f8:	400c      	ands	r4, r1
 800b0fa:	4322      	orrs	r2, r4
 800b0fc:	60c2      	str	r2, [r0, #12]
}
 800b0fe:	f85d 4b04 	ldr.w	r4, [sp], #4
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b102:	f7ff bfb5 	b.w	800b070 <SDMMC_GetCmdResp2>
 800b106:	bf00      	nop
 800b108:	fffee0c0 	.word	0xfffee0c0

0800b10c <SDMMC_GetCmdResp6>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b10c:	4b26      	ldr	r3, [pc, #152]	; (800b1a8 <SDMMC_GetCmdResp6+0x9c>)
{
 800b10e:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b110:	f241 3088 	movw	r0, #5000	; 0x1388
{
 800b114:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b116:	4c25      	ldr	r4, [pc, #148]	; (800b1ac <SDMMC_GetCmdResp6+0xa0>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	fba4 4303 	umull	r4, r3, r4, r3
 800b11e:	0a5b      	lsrs	r3, r3, #9
 800b120:	fb03 f000 	mul.w	r0, r3, r0
    if (count-- == 0U)
 800b124:	b150      	cbz	r0, 800b13c <SDMMC_GetCmdResp6+0x30>
 800b126:	1e43      	subs	r3, r0, #1
    sta_reg = SDMMCx->STA;
 800b128:	f8dc 4034 	ldr.w	r4, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b12c:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b12e:	f014 0f45 	tst.w	r4, #69	; 0x45
 800b132:	d001      	beq.n	800b138 <SDMMC_GetCmdResp6+0x2c>
 800b134:	04a4      	lsls	r4, r4, #18
 800b136:	d506      	bpl.n	800b146 <SDMMC_GetCmdResp6+0x3a>
    if (count-- == 0U)
 800b138:	1c58      	adds	r0, r3, #1
 800b13a:	d1f5      	bne.n	800b128 <SDMMC_GetCmdResp6+0x1c>
      return SDMMC_ERROR_TIMEOUT;
 800b13c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b140:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b144:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b146:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b14a:	0758      	lsls	r0, r3, #29
 800b14c:	d421      	bmi.n	800b192 <SDMMC_GetCmdResp6+0x86>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b14e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b152:	f010 0001 	ands.w	r0, r0, #1
 800b156:	d116      	bne.n	800b186 <SDMMC_GetCmdResp6+0x7a>
  return (uint8_t)(SDMMCx->RESPCMD);
 800b158:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	4299      	cmp	r1, r3
 800b160:	d115      	bne.n	800b18e <SDMMC_GetCmdResp6+0x82>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b162:	4b13      	ldr	r3, [pc, #76]	; (800b1b0 <SDMMC_GetCmdResp6+0xa4>)
 800b164:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800b168:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b16c:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800b170:	d017      	beq.n	800b1a2 <SDMMC_GetCmdResp6+0x96>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b172:	045a      	lsls	r2, r3, #17
 800b174:	d412      	bmi.n	800b19c <SDMMC_GetCmdResp6+0x90>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b176:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800b17a:	bf14      	ite	ne
 800b17c:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800b180:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800b184:	e7dc      	b.n	800b140 <SDMMC_GetCmdResp6+0x34>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b186:	2301      	movs	r3, #1
 800b188:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b18c:	e7d8      	b.n	800b140 <SDMMC_GetCmdResp6+0x34>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b18e:	2001      	movs	r0, #1
 800b190:	e7d6      	b.n	800b140 <SDMMC_GetCmdResp6+0x34>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b192:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b194:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b196:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b19a:	e7d1      	b.n	800b140 <SDMMC_GetCmdResp6+0x34>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b19c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b1a0:	e7ce      	b.n	800b140 <SDMMC_GetCmdResp6+0x34>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b1a2:	0c1b      	lsrs	r3, r3, #16
 800b1a4:	8013      	strh	r3, [r2, #0]
    return SDMMC_ERROR_NONE;
 800b1a6:	e7cb      	b.n	800b140 <SDMMC_GetCmdResp6+0x34>
 800b1a8:	20000af0 	.word	0x20000af0
 800b1ac:	10624dd3 	.word	0x10624dd3
 800b1b0:	002000c5 	.word	0x002000c5

0800b1b4 <SDMMC_CmdSetRelAdd>:
{
 800b1b4:	b430      	push	{r4, r5}
  SDMMCx->ARG = Command->Argument;
 800b1b6:	2400      	movs	r4, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b1b8:	4d06      	ldr	r5, [pc, #24]	; (800b1d4 <SDMMC_CmdSetRelAdd+0x20>)
{
 800b1ba:	460a      	mov	r2, r1
  SDMMCx->ARG = Command->Argument;
 800b1bc:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b1be:	f241 1403 	movw	r4, #4355	; 0x1103
 800b1c2:	68c1      	ldr	r1, [r0, #12]
 800b1c4:	400d      	ands	r5, r1
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b1c6:	2103      	movs	r1, #3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b1c8:	432c      	orrs	r4, r5
 800b1ca:	60c4      	str	r4, [r0, #12]
}
 800b1cc:	bc30      	pop	{r4, r5}
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b1ce:	f7ff bf9d 	b.w	800b10c <SDMMC_GetCmdResp6>
 800b1d2:	bf00      	nop
 800b1d4:	fffee0c0 	.word	0xfffee0c0

0800b1d8 <SDMMC_GetCmdResp7>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b1d8:	4a16      	ldr	r2, [pc, #88]	; (800b234 <SDMMC_GetCmdResp7+0x5c>)
 800b1da:	f241 3c88 	movw	ip, #5000	; 0x1388
 800b1de:	4b16      	ldr	r3, [pc, #88]	; (800b238 <SDMMC_GetCmdResp7+0x60>)
{
 800b1e0:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b1e2:	6812      	ldr	r2, [r2, #0]
 800b1e4:	fba3 3202 	umull	r3, r2, r3, r2
 800b1e8:	0a52      	lsrs	r2, r2, #9
 800b1ea:	fb0c f202 	mul.w	r2, ip, r2
    if (count-- == 0U)
 800b1ee:	1e53      	subs	r3, r2, #1
 800b1f0:	b142      	cbz	r2, 800b204 <SDMMC_GetCmdResp7+0x2c>
    sta_reg = SDMMCx->STA;
 800b1f2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800b1f4:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1f6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b1fa:	d001      	beq.n	800b200 <SDMMC_GetCmdResp7+0x28>
 800b1fc:	0490      	lsls	r0, r2, #18
 800b1fe:	d504      	bpl.n	800b20a <SDMMC_GetCmdResp7+0x32>
    if (count-- == 0U)
 800b200:	1c5a      	adds	r2, r3, #1
 800b202:	d1f6      	bne.n	800b1f2 <SDMMC_GetCmdResp7+0x1a>
      return SDMMC_ERROR_TIMEOUT;
 800b204:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b208:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b20a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b20c:	075a      	lsls	r2, r3, #29
 800b20e:	d40c      	bmi.n	800b22a <SDMMC_GetCmdResp7+0x52>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b210:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800b212:	f010 0001 	ands.w	r0, r0, #1
 800b216:	d105      	bne.n	800b224 <SDMMC_GetCmdResp7+0x4c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b218:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b21a:	065b      	lsls	r3, r3, #25
 800b21c:	d5f4      	bpl.n	800b208 <SDMMC_GetCmdResp7+0x30>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b21e:	2340      	movs	r3, #64	; 0x40
 800b220:	638b      	str	r3, [r1, #56]	; 0x38
 800b222:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b224:	2301      	movs	r3, #1
 800b226:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b228:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b22a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b22c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b22e:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop
 800b234:	20000af0 	.word	0x20000af0
 800b238:	10624dd3 	.word	0x10624dd3

0800b23c <SDMMC_CmdOperCond>:
{
 800b23c:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800b23e:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b242:	4906      	ldr	r1, [pc, #24]	; (800b25c <SDMMC_CmdOperCond+0x20>)
 800b244:	f241 1208 	movw	r2, #4360	; 0x1108
  SDMMCx->ARG = Command->Argument;
 800b248:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b24a:	68c4      	ldr	r4, [r0, #12]
 800b24c:	4021      	ands	r1, r4
 800b24e:	430a      	orrs	r2, r1
 800b250:	60c2      	str	r2, [r0, #12]
}
 800b252:	f85d 4b04 	ldr.w	r4, [sp], #4
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b256:	f7ff bfbf 	b.w	800b1d8 <SDMMC_GetCmdResp7>
 800b25a:	bf00      	nop
 800b25c:	fffee0c0 	.word	0xfffee0c0

0800b260 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b260:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b262:	4903      	ldr	r1, [pc, #12]	; (800b270 <MX_FATFS_Init+0x10>)
 800b264:	4803      	ldr	r0, [pc, #12]	; (800b274 <MX_FATFS_Init+0x14>)
 800b266:	f002 f8d1 	bl	800d40c <FATFS_LinkDriver>
 800b26a:	4b03      	ldr	r3, [pc, #12]	; (800b278 <MX_FATFS_Init+0x18>)
 800b26c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b26e:	bd08      	pop	{r3, pc}
 800b270:	2001ddb4 	.word	0x2001ddb4
 800b274:	080198a0 	.word	0x080198a0
 800b278:	2001ddb8 	.word	0x2001ddb8

0800b27c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800b27c:	2000      	movs	r0, #0
 800b27e:	4770      	bx	lr

0800b280 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b280:	b510      	push	{r4, lr}
 800b282:	4694      	mov	ip, r2
 800b284:	b082      	sub	sp, #8
 800b286:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b288:	460a      	mov	r2, r1
 800b28a:	4663      	mov	r3, ip
 800b28c:	4601      	mov	r1, r0
 800b28e:	9400      	str	r4, [sp, #0]
 800b290:	4803      	ldr	r0, [pc, #12]	; (800b2a0 <BSP_SD_ReadBlocks+0x20>)
 800b292:	f7fd ff71 	bl	8009178 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800b296:	3800      	subs	r0, #0
 800b298:	bf18      	it	ne
 800b29a:	2001      	movne	r0, #1
 800b29c:	b002      	add	sp, #8
 800b29e:	bd10      	pop	{r4, pc}
 800b2a0:	2001ca50 	.word	0x2001ca50

0800b2a4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b2a4:	b510      	push	{r4, lr}
 800b2a6:	4694      	mov	ip, r2
 800b2a8:	b082      	sub	sp, #8
 800b2aa:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b2ac:	460a      	mov	r2, r1
 800b2ae:	4663      	mov	r3, ip
 800b2b0:	4601      	mov	r1, r0
 800b2b2:	9400      	str	r4, [sp, #0]
 800b2b4:	4803      	ldr	r0, [pc, #12]	; (800b2c4 <BSP_SD_WriteBlocks+0x20>)
 800b2b6:	f7fe f85f 	bl	8009378 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800b2ba:	3800      	subs	r0, #0
 800b2bc:	bf18      	it	ne
 800b2be:	2001      	movne	r0, #1
 800b2c0:	b002      	add	sp, #8
 800b2c2:	bd10      	pop	{r4, pc}
 800b2c4:	2001ca50 	.word	0x2001ca50

0800b2c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b2c8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b2ca:	4803      	ldr	r0, [pc, #12]	; (800b2d8 <BSP_SD_GetCardState+0x10>)
 800b2cc:	f7fe fc42 	bl	8009b54 <HAL_SD_GetCardState>
}
 800b2d0:	3804      	subs	r0, #4
 800b2d2:	bf18      	it	ne
 800b2d4:	2001      	movne	r0, #1
 800b2d6:	bd08      	pop	{r3, pc}
 800b2d8:	2001ca50 	.word	0x2001ca50

0800b2dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b2dc:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b2de:	4801      	ldr	r0, [pc, #4]	; (800b2e4 <BSP_SD_GetCardInfo+0x8>)
 800b2e0:	f7fe bb5e 	b.w	80099a0 <HAL_SD_GetCardInfo>
 800b2e4:	2001ca50 	.word	0x2001ca50

0800b2e8 <BSP_SD_WriteCpltCallback>:
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop

0800b2ec <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b2ec:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800b2ee:	f7ff fffb 	bl	800b2e8 <BSP_SD_WriteCpltCallback>
}
 800b2f2:	bd08      	pop	{r3, pc}

0800b2f4 <BSP_SD_ReadCpltCallback>:
 800b2f4:	4770      	bx	lr
 800b2f6:	bf00      	nop

0800b2f8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b2f8:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800b2fa:	f7ff fffb 	bl	800b2f4 <BSP_SD_ReadCpltCallback>
}
 800b2fe:	bd08      	pop	{r3, pc}

0800b300 <BSP_SD_Init>:
{
 800b300:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b302:	f7f6 f855 	bl	80013b0 <BSP_SD_IsDetected>
 800b306:	2801      	cmp	r0, #1
 800b308:	d001      	beq.n	800b30e <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800b30a:	2002      	movs	r0, #2
}
 800b30c:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800b30e:	4807      	ldr	r0, [pc, #28]	; (800b32c <BSP_SD_Init+0x2c>)
 800b310:	f7fe fc34 	bl	8009b7c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800b314:	2800      	cmp	r0, #0
 800b316:	d1f9      	bne.n	800b30c <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b318:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b31c:	4803      	ldr	r0, [pc, #12]	; (800b32c <BSP_SD_Init+0x2c>)
 800b31e:	f7fe fb53 	bl	80099c8 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800b322:	3800      	subs	r0, #0
 800b324:	bf18      	it	ne
 800b326:	2001      	movne	r0, #1
}
 800b328:	bd08      	pop	{r3, pc}
 800b32a:	bf00      	nop
 800b32c:	2001ca50 	.word	0x2001ca50

0800b330 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b330:	4b18      	ldr	r3, [pc, #96]	; (800b394 <SD_ioctl+0x64>)
{
 800b332:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b334:	7818      	ldrb	r0, [r3, #0]
{
 800b336:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b338:	f010 0401 	ands.w	r4, r0, #1
 800b33c:	d106      	bne.n	800b34c <SD_ioctl+0x1c>
 800b33e:	4615      	mov	r5, r2

  switch (cmd)
 800b340:	2903      	cmp	r1, #3
 800b342:	d824      	bhi.n	800b38e <SD_ioctl+0x5e>
 800b344:	e8df f001 	tbb	[pc, r1]
 800b348:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b34c:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800b34e:	4620      	mov	r0, r4
 800b350:	b00b      	add	sp, #44	; 0x2c
 800b352:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 800b354:	460c      	mov	r4, r1
}
 800b356:	4620      	mov	r0, r4
 800b358:	b00b      	add	sp, #44	; 0x2c
 800b35a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800b35c:	a801      	add	r0, sp, #4
 800b35e:	f7ff ffbd 	bl	800b2dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b362:	9b07      	ldr	r3, [sp, #28]
}
 800b364:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b366:	602b      	str	r3, [r5, #0]
}
 800b368:	b00b      	add	sp, #44	; 0x2c
 800b36a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800b36c:	a801      	add	r0, sp, #4
 800b36e:	f7ff ffb5 	bl	800b2dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b372:	9b08      	ldr	r3, [sp, #32]
}
 800b374:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b376:	802b      	strh	r3, [r5, #0]
}
 800b378:	b00b      	add	sp, #44	; 0x2c
 800b37a:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800b37c:	a801      	add	r0, sp, #4
 800b37e:	f7ff ffad 	bl	800b2dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b382:	9b08      	ldr	r3, [sp, #32]
}
 800b384:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b386:	0a5b      	lsrs	r3, r3, #9
 800b388:	602b      	str	r3, [r5, #0]
}
 800b38a:	b00b      	add	sp, #44	; 0x2c
 800b38c:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 800b38e:	2404      	movs	r4, #4
 800b390:	e7dd      	b.n	800b34e <SD_ioctl+0x1e>
 800b392:	bf00      	nop
 800b394:	20000b40 	.word	0x20000b40

0800b398 <SD_read>:
{
 800b398:	b508      	push	{r3, lr}
 800b39a:	4608      	mov	r0, r1
 800b39c:	4611      	mov	r1, r2
 800b39e:	461a      	mov	r2, r3
  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b3a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3a4:	f7ff ff6c 	bl	800b280 <BSP_SD_ReadBlocks>
 800b3a8:	b108      	cbz	r0, 800b3ae <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800b3aa:	2001      	movs	r0, #1
}
 800b3ac:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b3ae:	f7ff ff8b 	bl	800b2c8 <BSP_SD_GetCardState>
 800b3b2:	2800      	cmp	r0, #0
 800b3b4:	d0fa      	beq.n	800b3ac <SD_read+0x14>
 800b3b6:	f7ff ff87 	bl	800b2c8 <BSP_SD_GetCardState>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d1f7      	bne.n	800b3ae <SD_read+0x16>
 800b3be:	e7f5      	b.n	800b3ac <SD_read+0x14>

0800b3c0 <SD_initialize>:
{
 800b3c0:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800b3c2:	4c0a      	ldr	r4, [pc, #40]	; (800b3ec <SD_initialize+0x2c>)
 800b3c4:	2501      	movs	r5, #1
 800b3c6:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_Init() == MSD_OK)
 800b3c8:	f7ff ff9a 	bl	800b300 <BSP_SD_Init>
 800b3cc:	b108      	cbz	r0, 800b3d2 <SD_initialize+0x12>
  return Stat;
 800b3ce:	7820      	ldrb	r0, [r4, #0]
}
 800b3d0:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800b3d2:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800b3d4:	f7ff ff78 	bl	800b2c8 <BSP_SD_GetCardState>
 800b3d8:	b918      	cbnz	r0, 800b3e2 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800b3da:	7823      	ldrb	r3, [r4, #0]
 800b3dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b3e0:	7023      	strb	r3, [r4, #0]
  return Stat;
 800b3e2:	7823      	ldrb	r3, [r4, #0]
 800b3e4:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800b3e6:	7023      	strb	r3, [r4, #0]
  return Stat;
 800b3e8:	7820      	ldrb	r0, [r4, #0]
}
 800b3ea:	bd38      	pop	{r3, r4, r5, pc}
 800b3ec:	20000b40 	.word	0x20000b40

0800b3f0 <SD_write>:
{
 800b3f0:	b508      	push	{r3, lr}
 800b3f2:	4608      	mov	r0, r1
 800b3f4:	4611      	mov	r1, r2
 800b3f6:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b3f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3fc:	f7ff ff52 	bl	800b2a4 <BSP_SD_WriteBlocks>
 800b400:	b108      	cbz	r0, 800b406 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800b402:	2001      	movs	r0, #1
}
 800b404:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b406:	f7ff ff5f 	bl	800b2c8 <BSP_SD_GetCardState>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	d0fa      	beq.n	800b404 <SD_write+0x14>
 800b40e:	f7ff ff5b 	bl	800b2c8 <BSP_SD_GetCardState>
 800b412:	2800      	cmp	r0, #0
 800b414:	d1f7      	bne.n	800b406 <SD_write+0x16>
 800b416:	e7f5      	b.n	800b404 <SD_write+0x14>

0800b418 <SD_status>:
{
 800b418:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800b41a:	2301      	movs	r3, #1
 800b41c:	4c05      	ldr	r4, [pc, #20]	; (800b434 <SD_status+0x1c>)
 800b41e:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800b420:	f7ff ff52 	bl	800b2c8 <BSP_SD_GetCardState>
 800b424:	b918      	cbnz	r0, 800b42e <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800b426:	7823      	ldrb	r3, [r4, #0]
 800b428:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b42c:	7023      	strb	r3, [r4, #0]
  return Stat;
 800b42e:	7820      	ldrb	r0, [r4, #0]
}
 800b430:	bd10      	pop	{r4, pc}
 800b432:	bf00      	nop
 800b434:	20000b40 	.word	0x20000b40

0800b438 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b438:	4b03      	ldr	r3, [pc, #12]	; (800b448 <disk_status+0x10>)
 800b43a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800b43e:	4418      	add	r0, r3
 800b440:	6853      	ldr	r3, [r2, #4]
 800b442:	7a00      	ldrb	r0, [r0, #8]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	4718      	bx	r3
 800b448:	2001dfe4 	.word	0x2001dfe4

0800b44c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800b44c:	4b07      	ldr	r3, [pc, #28]	; (800b46c <disk_initialize+0x20>)
 800b44e:	5c1a      	ldrb	r2, [r3, r0]
 800b450:	b952      	cbnz	r2, 800b468 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b452:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800b456:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 800b458:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b45c:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 800b45e:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b462:	7a08      	ldrb	r0, [r1, #8]
 800b464:	6813      	ldr	r3, [r2, #0]
 800b466:	4718      	bx	r3
  }
  return stat;
}
 800b468:	2000      	movs	r0, #0
 800b46a:	4770      	bx	lr
 800b46c:	2001dfe4 	.word	0x2001dfe4

0800b470 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b470:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b472:	4c06      	ldr	r4, [pc, #24]	; (800b48c <disk_read+0x1c>)
 800b474:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800b478:	4420      	add	r0, r4
 800b47a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800b47e:	7a00      	ldrb	r0, [r0, #8]
 800b480:	68a4      	ldr	r4, [r4, #8]
 800b482:	46a4      	mov	ip, r4
  return res;
}
 800b484:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b488:	4760      	bx	ip
 800b48a:	bf00      	nop
 800b48c:	2001dfe4 	.word	0x2001dfe4

0800b490 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b490:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b492:	4c06      	ldr	r4, [pc, #24]	; (800b4ac <disk_write+0x1c>)
 800b494:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800b498:	4420      	add	r0, r4
 800b49a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800b49e:	7a00      	ldrb	r0, [r0, #8]
 800b4a0:	68e4      	ldr	r4, [r4, #12]
 800b4a2:	46a4      	mov	ip, r4
  return res;
}
 800b4a4:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b4a8:	4760      	bx	ip
 800b4aa:	bf00      	nop
 800b4ac:	2001dfe4 	.word	0x2001dfe4

0800b4b0 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b4b0:	4b04      	ldr	r3, [pc, #16]	; (800b4c4 <disk_ioctl+0x14>)
 800b4b2:	eb03 0c00 	add.w	ip, r3, r0
 800b4b6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b4ba:	6843      	ldr	r3, [r0, #4]
 800b4bc:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	4718      	bx	r3
 800b4c4:	2001dfe4 	.word	0x2001dfe4

0800b4c8 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800b4c8:	4a1d      	ldr	r2, [pc, #116]	; (800b540 <chk_lock+0x78>)
{
 800b4ca:	b430      	push	{r4, r5}
		if (Files[i].fs) {	/* Existing entry */
 800b4cc:	6813      	ldr	r3, [r2, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d033      	beq.n	800b53a <chk_lock+0x72>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b4d2:	6804      	ldr	r4, [r0, #0]
 800b4d4:	42a3      	cmp	r3, r4
 800b4d6:	d00e      	beq.n	800b4f6 <chk_lock+0x2e>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b4d8:	2400      	movs	r4, #0
		if (Files[i].fs) {	/* Existing entry */
 800b4da:	6913      	ldr	r3, [r2, #16]
 800b4dc:	b143      	cbz	r3, 800b4f0 <chk_lock+0x28>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b4de:	6805      	ldr	r5, [r0, #0]
 800b4e0:	42ab      	cmp	r3, r5
 800b4e2:	d01d      	beq.n	800b520 <chk_lock+0x58>
		} else {			/* Blank entry */
			be = 1;
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b4e4:	2902      	cmp	r1, #2
 800b4e6:	d003      	beq.n	800b4f0 <chk_lock+0x28>
 800b4e8:	b914      	cbnz	r4, 800b4f0 <chk_lock+0x28>
 800b4ea:	2012      	movs	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 800b4ec:	bc30      	pop	{r4, r5}
 800b4ee:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b4f0:	2000      	movs	r0, #0
}
 800b4f2:	bc30      	pop	{r4, r5}
 800b4f4:	4770      	bx	lr
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b4f6:	6884      	ldr	r4, [r0, #8]
 800b4f8:	6853      	ldr	r3, [r2, #4]
 800b4fa:	429c      	cmp	r4, r3
 800b4fc:	d1ec      	bne.n	800b4d8 <chk_lock+0x10>
				Files[i].clu == dp->obj.sclust &&
 800b4fe:	6894      	ldr	r4, [r2, #8]
 800b500:	6943      	ldr	r3, [r0, #20]
 800b502:	429c      	cmp	r4, r3
 800b504:	d1e8      	bne.n	800b4d8 <chk_lock+0x10>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b506:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b508:	b9a9      	cbnz	r1, 800b536 <chk_lock+0x6e>
 800b50a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800b50e:	8998      	ldrh	r0, [r3, #12]
 800b510:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800b514:	fab0 f080 	clz	r0, r0
 800b518:	0940      	lsrs	r0, r0, #5
}
 800b51a:	bc30      	pop	{r4, r5}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b51c:	0100      	lsls	r0, r0, #4
}
 800b51e:	4770      	bx	lr
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b520:	6883      	ldr	r3, [r0, #8]
 800b522:	6955      	ldr	r5, [r2, #20]
 800b524:	429d      	cmp	r5, r3
 800b526:	d1dd      	bne.n	800b4e4 <chk_lock+0x1c>
				Files[i].clu == dp->obj.sclust &&
 800b528:	6943      	ldr	r3, [r0, #20]
 800b52a:	6990      	ldr	r0, [r2, #24]
 800b52c:	4298      	cmp	r0, r3
 800b52e:	d1d9      	bne.n	800b4e4 <chk_lock+0x1c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b530:	2301      	movs	r3, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b532:	2900      	cmp	r1, #0
 800b534:	d0e9      	beq.n	800b50a <chk_lock+0x42>
 800b536:	2010      	movs	r0, #16
 800b538:	e7db      	b.n	800b4f2 <chk_lock+0x2a>
			be = 1;
 800b53a:	2401      	movs	r4, #1
 800b53c:	e7cd      	b.n	800b4da <chk_lock+0x12>
 800b53e:	bf00      	nop
 800b540:	2001ddc0 	.word	0x2001ddc0

0800b544 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800b544:	4b2a      	ldr	r3, [pc, #168]	; (800b5f0 <inc_lock+0xac>)
{
 800b546:	4684      	mov	ip, r0
 800b548:	b570      	push	{r4, r5, r6, lr}
		if (Files[i].fs == dp->obj.fs &&
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	6804      	ldr	r4, [r0, #0]
 800b54e:	4294      	cmp	r4, r2
 800b550:	d01b      	beq.n	800b58a <inc_lock+0x46>
 800b552:	6918      	ldr	r0, [r3, #16]
 800b554:	42a0      	cmp	r0, r4
 800b556:	d004      	beq.n	800b562 <inc_lock+0x1e>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b558:	b36a      	cbz	r2, 800b5b6 <inc_lock+0x72>
 800b55a:	2800      	cmp	r0, #0
 800b55c:	d045      	beq.n	800b5ea <inc_lock+0xa6>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b55e:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800b560:	bd70      	pop	{r4, r5, r6, pc}
		if (Files[i].fs == dp->obj.fs &&
 800b562:	695d      	ldr	r5, [r3, #20]
 800b564:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800b568:	42b5      	cmp	r5, r6
 800b56a:	d1f5      	bne.n	800b558 <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 800b56c:	699d      	ldr	r5, [r3, #24]
 800b56e:	f8dc 6014 	ldr.w	r6, [ip, #20]
 800b572:	42b5      	cmp	r5, r6
 800b574:	d1f0      	bne.n	800b558 <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b576:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b578:	b999      	cbnz	r1, 800b5a2 <inc_lock+0x5e>
 800b57a:	eb03 1402 	add.w	r4, r3, r2, lsl #4
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b57e:	1c50      	adds	r0, r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b580:	0111      	lsls	r1, r2, #4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b582:	89a2      	ldrh	r2, [r4, #12]
 800b584:	3201      	adds	r2, #1
 800b586:	b292      	uxth	r2, r2
 800b588:	e02c      	b.n	800b5e4 <inc_lock+0xa0>
		if (Files[i].fs == dp->obj.fs &&
 800b58a:	6880      	ldr	r0, [r0, #8]
 800b58c:	685d      	ldr	r5, [r3, #4]
 800b58e:	4285      	cmp	r5, r0
 800b590:	d1df      	bne.n	800b552 <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 800b592:	6898      	ldr	r0, [r3, #8]
 800b594:	f8dc 5014 	ldr.w	r5, [ip, #20]
 800b598:	4285      	cmp	r5, r0
 800b59a:	d1da      	bne.n	800b552 <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b59c:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b59e:	2900      	cmp	r1, #0
 800b5a0:	d0eb      	beq.n	800b57a <inc_lock+0x36>
 800b5a2:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800b5a6:	0111      	lsls	r1, r2, #4
 800b5a8:	8980      	ldrh	r0, [r0, #12]
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d1d7      	bne.n	800b55e <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b5ae:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b5b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5b4:	e016      	b.n	800b5e4 <inc_lock+0xa0>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b5b6:	2001      	movs	r0, #1
		Files[i].fs = dp->obj.fs;
 800b5b8:	eb03 1e02 	add.w	lr, r3, r2, lsl #4
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b5bc:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800b5be:	ea4f 1102 	mov.w	r1, r2, lsl #4
		Files[i].clu = dp->obj.sclust;
 800b5c2:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800b5c6:	f8ce 2004 	str.w	r2, [lr, #4]
		Files[i].ofs = dp->dptr;
 800b5ca:	f8dc 2014 	ldr.w	r2, [ip, #20]
		Files[i].fs = dp->obj.fs;
 800b5ce:	505c      	str	r4, [r3, r1]
		Files[i].ofs = dp->dptr;
 800b5d0:	f8ce 2008 	str.w	r2, [lr, #8]
		Files[i].ctr = 0;
 800b5d4:	f04f 0200 	mov.w	r2, #0
 800b5d8:	f8ae 200c 	strh.w	r2, [lr, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b5dc:	bf14      	ite	ne
 800b5de:	f44f 7280 	movne.w	r2, #256	; 0x100
 800b5e2:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b5e4:	440b      	add	r3, r1
 800b5e6:	819a      	strh	r2, [r3, #12]
}
 800b5e8:	bd70      	pop	{r4, r5, r6, pc}
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b5ea:	2002      	movs	r0, #2
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	e7e3      	b.n	800b5b8 <inc_lock+0x74>
 800b5f0:	2001ddc0 	.word	0x2001ddc0

0800b5f4 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b5f4:	6801      	ldr	r1, [r0, #0]
{
 800b5f6:	4684      	mov	ip, r0
	if (*path) {	/* If the pointer is not a null */
 800b5f8:	b181      	cbz	r1, 800b61c <get_ldnumber+0x28>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b5fa:	7808      	ldrb	r0, [r1, #0]
 800b5fc:	460a      	mov	r2, r1
 800b5fe:	281f      	cmp	r0, #31
 800b600:	d90f      	bls.n	800b622 <get_ldnumber+0x2e>
 800b602:	283a      	cmp	r0, #58	; 0x3a
 800b604:	d00d      	beq.n	800b622 <get_ldnumber+0x2e>
 800b606:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800b60a:	2b1f      	cmp	r3, #31
 800b60c:	d90a      	bls.n	800b624 <get_ldnumber+0x30>
 800b60e:	2b3a      	cmp	r3, #58	; 0x3a
 800b610:	d1f9      	bne.n	800b606 <get_ldnumber+0x12>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 800b612:	3101      	adds	r1, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b614:	428a      	cmp	r2, r1
 800b616:	d101      	bne.n	800b61c <get_ldnumber+0x28>
 800b618:	2830      	cmp	r0, #48	; 0x30
 800b61a:	d007      	beq.n	800b62c <get_ldnumber+0x38>
	int vol = -1;
 800b61c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 800b620:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b622:	4603      	mov	r3, r0
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b624:	2b3a      	cmp	r3, #58	; 0x3a
 800b626:	d0f4      	beq.n	800b612 <get_ldnumber+0x1e>
		vol = 0;		/* Drive 0 */
 800b628:	2000      	movs	r0, #0
 800b62a:	4770      	bx	lr
					*path = ++tt;
 800b62c:	3201      	adds	r2, #1
 800b62e:	2000      	movs	r0, #0
 800b630:	f8cc 2000 	str.w	r2, [ip]
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop

0800b638 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b638:	b538      	push	{r3, r4, r5, lr}
 800b63a:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b63c:	b140      	cbz	r0, 800b650 <validate+0x18>
 800b63e:	6803      	ldr	r3, [r0, #0]
 800b640:	4604      	mov	r4, r0
 800b642:	b12b      	cbz	r3, 800b650 <validate+0x18>
 800b644:	781a      	ldrb	r2, [r3, #0]
 800b646:	b11a      	cbz	r2, 800b650 <validate+0x18>
 800b648:	8880      	ldrh	r0, [r0, #4]
 800b64a:	88da      	ldrh	r2, [r3, #6]
 800b64c:	4290      	cmp	r0, r2
 800b64e:	d003      	beq.n	800b658 <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800b650:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b652:	2300      	movs	r3, #0
 800b654:	602b      	str	r3, [r5, #0]
	return res;
}
 800b656:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b658:	7858      	ldrb	r0, [r3, #1]
 800b65a:	f7ff feed 	bl	800b438 <disk_status>
 800b65e:	f010 0001 	ands.w	r0, r0, #1
 800b662:	d1f5      	bne.n	800b650 <validate+0x18>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b664:	6823      	ldr	r3, [r4, #0]
 800b666:	e7f5      	b.n	800b654 <validate+0x1c>

0800b668 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
 800b668:	2300      	movs	r3, #0
{
 800b66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800b66e:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800b672:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b674:	69c2      	ldr	r2, [r0, #28]
 800b676:	2a00      	cmp	r2, #0
 800b678:	d063      	beq.n	800b742 <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b67a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800b67c:	4604      	mov	r4, r0
 800b67e:	460d      	mov	r5, r1
 800b680:	3201      	adds	r2, #1
 800b682:	d01f      	beq.n	800b6c4 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b684:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b688:	8818      	ldrh	r0, [r3, #0]
 800b68a:	2800      	cmp	r0, #0
 800b68c:	d063      	beq.n	800b756 <get_fileinfo+0xee>
 800b68e:	f101 0715 	add.w	r7, r1, #21
 800b692:	2601      	movs	r6, #1
 800b694:	e000      	b.n	800b698 <get_fileinfo+0x30>
 800b696:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b698:	2100      	movs	r1, #0
 800b69a:	f001 fedd 	bl	800d458 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b69e:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d058      	beq.n	800b756 <get_fileinfo+0xee>
 800b6a4:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800b6a8:	d055      	beq.n	800b756 <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
 800b6aa:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b6ae:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800b6b2:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
 800b6b6:	2800      	cmp	r0, #0
 800b6b8:	d1ed      	bne.n	800b696 <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b6ba:	442e      	add	r6, r5
 800b6bc:	2300      	movs	r3, #0
 800b6be:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b6c0:	7da8      	ldrb	r0, [r5, #22]
 800b6c2:	e000      	b.n	800b6c6 <get_fileinfo+0x5e>
 800b6c4:	4618      	mov	r0, r3
	i = j = 0;
 800b6c6:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
 800b6ca:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
 800b6cc:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
 800b6ce:	6a21      	ldr	r1, [r4, #32]
 800b6d0:	5c8b      	ldrb	r3, [r1, r2]
 800b6d2:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800b6d4:	2b20      	cmp	r3, #32
 800b6d6:	d01b      	beq.n	800b710 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b6d8:	2b05      	cmp	r3, #5
 800b6da:	bf08      	it	eq
 800b6dc:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800b6de:	2a09      	cmp	r2, #9
 800b6e0:	d031      	beq.n	800b746 <get_fileinfo+0xde>
		fno->altname[j] = c;
 800b6e2:	eb05 010c 	add.w	r1, r5, ip
 800b6e6:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 800b6e8:	b980      	cbnz	r0, 800b70c <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b6ea:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
 800b6ee:	2e19      	cmp	r6, #25
 800b6f0:	d80b      	bhi.n	800b70a <get_fileinfo+0xa2>
 800b6f2:	6a26      	ldr	r6, [r4, #32]
 800b6f4:	2a08      	cmp	r2, #8
 800b6f6:	f896 e00c 	ldrb.w	lr, [r6, #12]
 800b6fa:	bf8c      	ite	hi
 800b6fc:	2610      	movhi	r6, #16
 800b6fe:	2608      	movls	r6, #8
 800b700:	ea1e 0f06 	tst.w	lr, r6
 800b704:	d001      	beq.n	800b70a <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 800b706:	3320      	adds	r3, #32
 800b708:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
 800b70a:	758b      	strb	r3, [r1, #22]
		j++;
 800b70c:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 800b710:	2a0b      	cmp	r2, #11
 800b712:	d1dc      	bne.n	800b6ce <get_fileinfo+0x66>
		fno->fname[j] = 0;
 800b714:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
 800b718:	b928      	cbnz	r0, 800b726 <get_fileinfo+0xbe>
		fno->fname[j] = 0;
 800b71a:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b71c:	6a23      	ldr	r3, [r4, #32]
 800b71e:	7b1b      	ldrb	r3, [r3, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	bf08      	it	eq
 800b724:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b726:	2300      	movs	r3, #0
 800b728:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b72a:	6a23      	ldr	r3, [r4, #32]
 800b72c:	7adb      	ldrb	r3, [r3, #11]
 800b72e:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 800b730:	6a23      	ldr	r3, [r4, #32]
 800b732:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b734:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 800b736:	6a23      	ldr	r3, [r4, #32]
 800b738:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b73c:	0c1a      	lsrs	r2, r3, #16
 800b73e:	80eb      	strh	r3, [r5, #6]
 800b740:	80aa      	strh	r2, [r5, #4]
}
 800b742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 800b746:	eb05 010c 	add.w	r1, r5, ip
 800b74a:	b900      	cbnz	r0, 800b74e <get_fileinfo+0xe6>
 800b74c:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 800b74e:	f10c 0c01 	add.w	ip, ip, #1
 800b752:	724f      	strb	r7, [r1, #9]
 800b754:	e7c5      	b.n	800b6e2 <get_fileinfo+0x7a>
			i = j = 0;
 800b756:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b758:	2300      	movs	r3, #0
 800b75a:	442e      	add	r6, r5
 800b75c:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b75e:	7da8      	ldrb	r0, [r5, #22]
 800b760:	e7b1      	b.n	800b6c6 <get_fileinfo+0x5e>
 800b762:	bf00      	nop

0800b764 <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800b764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b768:	f100 0834 	add.w	r8, r0, #52	; 0x34
		wsect = fs->winsect;	/* Current sector number */
 800b76c:	6b05      	ldr	r5, [r0, #48]	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800b76e:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b770:	2301      	movs	r3, #1
 800b772:	462a      	mov	r2, r5
 800b774:	4641      	mov	r1, r8
 800b776:	7840      	ldrb	r0, [r0, #1]
 800b778:	f7ff fe8a 	bl	800b490 <disk_write>
 800b77c:	b9c0      	cbnz	r0, 800b7b0 <sync_window.part.0+0x4c>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b77e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b780:	4607      	mov	r7, r0
 800b782:	69e3      	ldr	r3, [r4, #28]
 800b784:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 800b786:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b788:	429a      	cmp	r2, r3
 800b78a:	d20e      	bcs.n	800b7aa <sync_window.part.0+0x46>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b78c:	78a6      	ldrb	r6, [r4, #2]
 800b78e:	2e01      	cmp	r6, #1
 800b790:	d801      	bhi.n	800b796 <sync_window.part.0+0x32>
 800b792:	e00a      	b.n	800b7aa <sync_window.part.0+0x46>
					wsect += fs->fsize;
 800b794:	69e3      	ldr	r3, [r4, #28]
 800b796:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b798:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800b79a:	2301      	movs	r3, #1
 800b79c:	4641      	mov	r1, r8
 800b79e:	462a      	mov	r2, r5
 800b7a0:	7860      	ldrb	r0, [r4, #1]
 800b7a2:	f7ff fe75 	bl	800b490 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b7a6:	2e01      	cmp	r6, #1
 800b7a8:	d1f4      	bne.n	800b794 <sync_window.part.0+0x30>
}
 800b7aa:	4638      	mov	r0, r7
 800b7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			res = FR_DISK_ERR;
 800b7b0:	2701      	movs	r7, #1
}
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b7b8 <sync_fs>:
{
 800b7b8:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b7ba:	78c3      	ldrb	r3, [r0, #3]
{
 800b7bc:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b7be:	b95b      	cbnz	r3, 800b7d8 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b7c0:	7823      	ldrb	r3, [r4, #0]
 800b7c2:	2b03      	cmp	r3, #3
 800b7c4:	d00f      	beq.n	800b7e6 <sync_fs+0x2e>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	7860      	ldrb	r0, [r4, #1]
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	f7ff fe70 	bl	800b4b0 <disk_ioctl>
 800b7d0:	3800      	subs	r0, #0
 800b7d2:	bf18      	it	ne
 800b7d4:	2001      	movne	r0, #1
}
 800b7d6:	bd70      	pop	{r4, r5, r6, pc}
 800b7d8:	f7ff ffc4 	bl	800b764 <sync_window.part.0>
	if (res == FR_OK) {
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	d1fa      	bne.n	800b7d6 <sync_fs+0x1e>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b7e0:	7823      	ldrb	r3, [r4, #0]
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	d1ef      	bne.n	800b7c6 <sync_fs+0xe>
 800b7e6:	7925      	ldrb	r5, [r4, #4]
 800b7e8:	2d01      	cmp	r5, #1
 800b7ea:	d1ec      	bne.n	800b7c6 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800b7ec:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 800b7f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f00b f85a 	bl	80168b0 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800b7fc:	2355      	movs	r3, #85	; 0x55
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b7fe:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800b800:	2672      	movs	r6, #114	; 0x72
	*ptr++ = (BYTE)val; val >>= 8;
 800b802:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b806:	462b      	mov	r3, r5
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b808:	6965      	ldr	r5, [r4, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 800b80a:	2061      	movs	r0, #97	; 0x61
	*ptr++ = (BYTE)val; val >>= 8;
 800b80c:	f884 6218 	strb.w	r6, [r4, #536]	; 0x218
 800b810:	2252      	movs	r2, #82	; 0x52
	*ptr++ = (BYTE)val; val >>= 8;
 800b812:	f884 6219 	strb.w	r6, [r4, #537]	; 0x219
	*ptr++ = (BYTE)val; val >>= 8;
 800b816:	0a2e      	lsrs	r6, r5, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800b818:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 800b81c:	f884 021b 	strb.w	r0, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 800b820:	f884 521c 	strb.w	r5, [r4, #540]	; 0x21c
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b824:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 800b826:	f884 621d 	strb.w	r6, [r4, #541]	; 0x21d
 800b82a:	0c2e      	lsrs	r6, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800b82c:	0e2d      	lsrs	r5, r5, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800b82e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800b832:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val;
 800b836:	2241      	movs	r2, #65	; 0x41
 800b838:	f884 521f 	strb.w	r5, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 800b83c:	0a05      	lsrs	r5, r0, #8
	*ptr++ = (BYTE)val;
 800b83e:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 800b842:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val; val >>= 8;
 800b846:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
 800b84a:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 800b84c:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
 800b850:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800b852:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
 800b854:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800b856:	f884 621e 	strb.w	r6, [r4, #542]	; 0x21e
	*ptr++ = (BYTE)val;
 800b85a:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
	*ptr++ = (BYTE)val;
 800b85e:	20aa      	movs	r0, #170	; 0xaa
			fs->winsect = fs->volbase + 1;
 800b860:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val;
 800b862:	f884 0233 	strb.w	r0, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 800b866:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b86a:	7860      	ldrb	r0, [r4, #1]
 800b86c:	f7ff fe10 	bl	800b490 <disk_write>
			fs->fsi_flag = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	7123      	strb	r3, [r4, #4]
 800b874:	e7a7      	b.n	800b7c6 <sync_fs+0xe>
 800b876:	bf00      	nop

0800b878 <move_window>:
{
 800b878:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800b87a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800b87c:	428b      	cmp	r3, r1
 800b87e:	d015      	beq.n	800b8ac <move_window+0x34>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b880:	78c3      	ldrb	r3, [r0, #3]
 800b882:	4604      	mov	r4, r0
 800b884:	460d      	mov	r5, r1
 800b886:	b963      	cbnz	r3, 800b8a2 <move_window+0x2a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b888:	2301      	movs	r3, #1
 800b88a:	462a      	mov	r2, r5
 800b88c:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800b890:	7860      	ldrb	r0, [r4, #1]
 800b892:	f7ff fded 	bl	800b470 <disk_read>
 800b896:	b110      	cbz	r0, 800b89e <move_window+0x26>
				res = FR_DISK_ERR;
 800b898:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b89a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
 800b89e:	6325      	str	r5, [r4, #48]	; 0x30
}
 800b8a0:	bd38      	pop	{r3, r4, r5, pc}
 800b8a2:	f7ff ff5f 	bl	800b764 <sync_window.part.0>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b8a6:	2800      	cmp	r0, #0
 800b8a8:	d0ee      	beq.n	800b888 <move_window+0x10>
 800b8aa:	e7f9      	b.n	800b8a0 <move_window+0x28>
	FRESULT res = FR_OK;
 800b8ac:	2000      	movs	r0, #0
}
 800b8ae:	bd38      	pop	{r3, r4, r5, pc}

0800b8b0 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b8b0:	2901      	cmp	r1, #1
 800b8b2:	d90e      	bls.n	800b8d2 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b8b6:	6983      	ldr	r3, [r0, #24]
 800b8b8:	460c      	mov	r4, r1
 800b8ba:	4605      	mov	r5, r0
 800b8bc:	4299      	cmp	r1, r3
 800b8be:	d206      	bcs.n	800b8ce <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800b8c0:	7803      	ldrb	r3, [r0, #0]
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d021      	beq.n	800b90a <get_fat.isra.0+0x5a>
 800b8c6:	2b03      	cmp	r3, #3
 800b8c8:	d010      	beq.n	800b8ec <get_fat.isra.0+0x3c>
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d003      	beq.n	800b8d6 <get_fat.isra.0+0x26>
 800b8ce:	2001      	movs	r0, #1
}
 800b8d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800b8d2:	2001      	movs	r0, #1
}
 800b8d4:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8d6:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800b8d8:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8dc:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800b8e0:	f7ff ffca 	bl	800b878 <move_window>
 800b8e4:	b1f0      	cbz	r0, 800b924 <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b8e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800b8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b8ec:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800b8ee:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800b8f2:	f7ff ffc1 	bl	800b878 <move_window>
 800b8f6:	2800      	cmp	r0, #0
 800b8f8:	d1f5      	bne.n	800b8e6 <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b8fa:	00a4      	lsls	r4, r4, #2
 800b8fc:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800b900:	4425      	add	r5, r4
 800b902:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b904:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800b908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b90a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800b90c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800b910:	f7ff ffb2 	bl	800b878 <move_window>
 800b914:	2800      	cmp	r0, #0
 800b916:	d1e6      	bne.n	800b8e6 <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b918:	0063      	lsls	r3, r4, #1
 800b91a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b91e:	442b      	add	r3, r5
 800b920:	8e98      	ldrh	r0, [r3, #52]	; 0x34
}
 800b922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800b924:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b928:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800b92a:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b92c:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800b92e:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b930:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800b934:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b938:	f7ff ff9e 	bl	800b878 <move_window>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d1d2      	bne.n	800b8e6 <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b940:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800b944:	442f      	add	r7, r5
 800b946:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800b94a:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b94e:	07e3      	lsls	r3, r4, #31
 800b950:	bf4c      	ite	mi
 800b952:	0900      	lsrmi	r0, r0, #4
 800b954:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800b958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b95a:	bf00      	nop

0800b95c <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b95c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 800b960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = dp->obj.fs;
 800b962:	6807      	ldr	r7, [r0, #0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b964:	d222      	bcs.n	800b9ac <dir_sdi+0x50>
 800b966:	06ca      	lsls	r2, r1, #27
 800b968:	460d      	mov	r5, r1
 800b96a:	d11f      	bne.n	800b9ac <dir_sdi+0x50>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b96c:	6881      	ldr	r1, [r0, #8]
 800b96e:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 800b970:	6145      	str	r5, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b972:	b1e9      	cbz	r1, 800b9b0 <dir_sdi+0x54>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b974:	897b      	ldrh	r3, [r7, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b976:	ebb5 2f43 	cmp.w	r5, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b97a:	ea4f 2443 	mov.w	r4, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800b97e:	d333      	bcc.n	800b9e8 <dir_sdi+0x8c>
 800b980:	4638      	mov	r0, r7
 800b982:	e007      	b.n	800b994 <dir_sdi+0x38>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b984:	2801      	cmp	r0, #1
 800b986:	d911      	bls.n	800b9ac <dir_sdi+0x50>
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	4283      	cmp	r3, r0
 800b98c:	d90e      	bls.n	800b9ac <dir_sdi+0x50>
		while (ofs >= csz) {				/* Follow cluster chain */
 800b98e:	42ac      	cmp	r4, r5
 800b990:	d82b      	bhi.n	800b9ea <dir_sdi+0x8e>
 800b992:	6830      	ldr	r0, [r6, #0]
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b994:	f7ff ff8c 	bl	800b8b0 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b998:	1c43      	adds	r3, r0, #1
			ofs -= csz;
 800b99a:	eba5 0504 	sub.w	r5, r5, r4
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b99e:	4601      	mov	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b9a0:	d1f0      	bne.n	800b984 <dir_sdi+0x28>
 800b9a2:	2001      	movs	r0, #1
}
 800b9a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dp->sect = fs->dirbase;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	e9c6 1306 	strd	r1, r3, [r6, #24]
		return FR_INT_ERR;
 800b9ac:	2002      	movs	r0, #2
}
 800b9ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b9b0:	783b      	ldrb	r3, [r7, #0]
 800b9b2:	2b02      	cmp	r3, #2
 800b9b4:	d813      	bhi.n	800b9de <dir_sdi+0x82>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b9b6:	893b      	ldrh	r3, [r7, #8]
 800b9b8:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800b9bc:	d9f6      	bls.n	800b9ac <dir_sdi+0x50>
		dp->sect = fs->dirbase;
 800b9be:	6aba      	ldr	r2, [r7, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
 800b9c0:	e9c6 1206 	strd	r1, r2, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b9c4:	2a00      	cmp	r2, #0
 800b9c6:	d0f1      	beq.n	800b9ac <dir_sdi+0x50>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b9c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800b9cc:	f3c5 0108 	ubfx	r1, r5, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b9d0:	eb02 2255 	add.w	r2, r2, r5, lsr #9
	return FR_OK;
 800b9d4:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b9d6:	440b      	add	r3, r1
 800b9d8:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 800b9dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		clst = fs->dirbase;
 800b9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d0e8      	beq.n	800b9b6 <dir_sdi+0x5a>
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	e7c5      	b.n	800b974 <dir_sdi+0x18>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	3b02      	subs	r3, #2
	clst -= 2;
 800b9ec:	1e88      	subs	r0, r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b9ee:	4298      	cmp	r0, r3
 800b9f0:	d2d9      	bcs.n	800b9a6 <dir_sdi+0x4a>
	return clst * fs->csize + fs->database;
 800b9f2:	897b      	ldrh	r3, [r7, #10]
 800b9f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9f6:	fb00 2203 	mla	r2, r0, r3, r2
 800b9fa:	e7e1      	b.n	800b9c0 <dir_sdi+0x64>

0800b9fc <pattern_matching>:
{
 800b9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba00:	440a      	add	r2, r1
 800ba02:	460d      	mov	r5, r1
 800ba04:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ba06:	4f38      	ldr	r7, [pc, #224]	; (800bae8 <pattern_matching+0xec>)
	while (skip--) {				/* Pre-skip name chars */
 800ba08:	4295      	cmp	r5, r2
 800ba0a:	d012      	beq.n	800ba32 <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ba0c:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ba10:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ba14:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ba18:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ba1c:	2919      	cmp	r1, #25
 800ba1e:	d9f3      	bls.n	800ba08 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ba20:	2c7f      	cmp	r4, #127	; 0x7f
 800ba22:	bf88      	it	hi
 800ba24:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800ba28:	2c00      	cmp	r4, #0
 800ba2a:	d1ed      	bne.n	800ba08 <pattern_matching+0xc>
 800ba2c:	2000      	movs	r0, #0
}
 800ba2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800ba32:	1e1f      	subs	r7, r3, #0
 800ba34:	f896 8000 	ldrb.w	r8, [r6]
 800ba38:	bf18      	it	ne
 800ba3a:	2701      	movne	r7, #1
 800ba3c:	f1b8 0f00 	cmp.w	r8, #0
 800ba40:	d100      	bne.n	800ba44 <pattern_matching+0x48>
 800ba42:	bba7      	cbnz	r7, 800baae <pattern_matching+0xb2>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ba44:	4c28      	ldr	r4, [pc, #160]	; (800bae8 <pattern_matching+0xec>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800ba46:	4630      	mov	r0, r6
{
 800ba48:	46c4      	mov	ip, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800ba4a:	46a9      	mov	r9, r5
 800ba4c:	e010      	b.n	800ba70 <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ba4e:	3a20      	subs	r2, #32
 800ba50:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ba52:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ba56:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ba5a:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ba5c:	f1bc 0f19 	cmp.w	ip, #25
 800ba60:	d818      	bhi.n	800ba94 <pattern_matching+0x98>
 800ba62:	3b20      	subs	r3, #32
 800ba64:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 800ba66:	4293      	cmp	r3, r2
 800ba68:	d11b      	bne.n	800baa2 <pattern_matching+0xa6>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800ba6a:	b303      	cbz	r3, 800baae <pattern_matching+0xb2>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800ba6c:	f810 cf01 	ldrb.w	ip, [r0, #1]!
 800ba70:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800ba74:	d01e      	beq.n	800bab4 <pattern_matching+0xb8>
 800ba76:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 800ba7a:	d01b      	beq.n	800bab4 <pattern_matching+0xb8>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ba7c:	f1ac 0361 	sub.w	r3, ip, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800ba80:	fa1f f28c 	uxth.w	r2, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800ba84:	2b19      	cmp	r3, #25
 800ba86:	d9e2      	bls.n	800ba4e <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800ba88:	2a7f      	cmp	r2, #127	; 0x7f
 800ba8a:	d9e2      	bls.n	800ba52 <pattern_matching+0x56>
 800ba8c:	44a4      	add	ip, r4
 800ba8e:	f81c 2c80 	ldrb.w	r2, [ip, #-128]
 800ba92:	e7de      	b.n	800ba52 <pattern_matching+0x56>
 800ba94:	2b7f      	cmp	r3, #127	; 0x7f
 800ba96:	d9e6      	bls.n	800ba66 <pattern_matching+0x6a>
 800ba98:	4421      	add	r1, r4
 800ba9a:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d0e3      	beq.n	800ba6a <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800baa2:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d0c1      	beq.n	800ba2c <pattern_matching+0x30>
 800baa8:	2f00      	cmp	r7, #0
 800baaa:	d1cc      	bne.n	800ba46 <pattern_matching+0x4a>
 800baac:	e7be      	b.n	800ba2c <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
 800baae:	2001      	movs	r0, #1
}
 800bab0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				nm = nx = 0;
 800bab4:	2300      	movs	r3, #0
 800bab6:	1c41      	adds	r1, r0, #1
 800bab8:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800baba:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800babe:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
 800bac0:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800bac4:	bf0c      	ite	eq
 800bac6:	3201      	addeq	r2, #1
 800bac8:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800baca:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800bace:	d0f4      	beq.n	800baba <pattern_matching+0xbe>
 800bad0:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 800bad4:	d0f1      	beq.n	800baba <pattern_matching+0xbe>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800bad6:	4649      	mov	r1, r9
 800bad8:	f7ff ff90 	bl	800b9fc <pattern_matching>
 800badc:	2800      	cmp	r0, #0
 800bade:	d1e6      	bne.n	800baae <pattern_matching+0xb2>
				nc = *np; break;	/* Branch mismatched */
 800bae0:	f899 3000 	ldrb.w	r3, [r9]
 800bae4:	e7dd      	b.n	800baa2 <pattern_matching+0xa6>
 800bae6:	bf00      	nop
 800bae8:	080198c8 	.word	0x080198c8

0800baec <check_fs>:
{
 800baec:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800baee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800baf2:	2300      	movs	r3, #0
{
 800baf4:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800baf6:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800baf8:	70c3      	strb	r3, [r0, #3]
 800bafa:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bafc:	d00c      	beq.n	800bb18 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bafe:	460d      	mov	r5, r1
 800bb00:	460a      	mov	r2, r1
 800bb02:	2301      	movs	r3, #1
 800bb04:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800bb08:	7840      	ldrb	r0, [r0, #1]
 800bb0a:	f7ff fcb1 	bl	800b470 <disk_read>
 800bb0e:	b110      	cbz	r0, 800bb16 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bb10:	2004      	movs	r0, #4
			fs->winsect = sector;
 800bb12:	6326      	str	r6, [r4, #48]	; 0x30
}
 800bb14:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800bb16:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bb18:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bb1c:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d11a      	bne.n	800bb5a <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bb24:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800bb28:	2be9      	cmp	r3, #233	; 0xe9
 800bb2a:	d007      	beq.n	800bb3c <check_fs+0x50>
 800bb2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb2e:	4a0d      	ldr	r2, [pc, #52]	; (800bb64 <check_fs+0x78>)
 800bb30:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d001      	beq.n	800bb3c <check_fs+0x50>
	return 2;
 800bb38:	2002      	movs	r0, #2
}
 800bb3a:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800bb3c:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bb40:	4a09      	ldr	r2, [pc, #36]	; (800bb68 <check_fs+0x7c>)
 800bb42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d009      	beq.n	800bb5e <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 800bb4a:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bb4e:	4b07      	ldr	r3, [pc, #28]	; (800bb6c <check_fs+0x80>)
 800bb50:	1ac0      	subs	r0, r0, r3
 800bb52:	bf18      	it	ne
 800bb54:	2001      	movne	r0, #1
 800bb56:	0040      	lsls	r0, r0, #1
}
 800bb58:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bb5a:	2003      	movs	r0, #3
}
 800bb5c:	bd70      	pop	{r4, r5, r6, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bb5e:	2000      	movs	r0, #0
}
 800bb60:	bd70      	pop	{r4, r5, r6, pc}
 800bb62:	bf00      	nop
 800bb64:	009000eb 	.word	0x009000eb
 800bb68:	00544146 	.word	0x00544146
 800bb6c:	33544146 	.word	0x33544146

0800bb70 <find_volume>:
	*rfs = 0;
 800bb70:	2300      	movs	r3, #0
{
 800bb72:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 800bb74:	600b      	str	r3, [r1, #0]
{
 800bb76:	b085      	sub	sp, #20
 800bb78:	460e      	mov	r6, r1
 800bb7a:	4614      	mov	r4, r2
	vol = get_ldnumber(path);
 800bb7c:	f7ff fd3a 	bl	800b5f4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800bb80:	1e05      	subs	r5, r0, #0
 800bb82:	f2c0 80c1 	blt.w	800bd08 <find_volume+0x198>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bb86:	4b90      	ldr	r3, [pc, #576]	; (800bdc8 <find_volume+0x258>)
 800bb88:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bb8c:	2f00      	cmp	r7, #0
 800bb8e:	f000 80c8 	beq.w	800bd22 <find_volume+0x1b2>
	*rfs = fs;							/* Return pointer to the file system object */
 800bb92:	6037      	str	r7, [r6, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bb94:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bb98:	783b      	ldrb	r3, [r7, #0]
 800bb9a:	b17b      	cbz	r3, 800bbbc <find_volume+0x4c>
		stat = disk_status(fs->drv);
 800bb9c:	7878      	ldrb	r0, [r7, #1]
 800bb9e:	f7ff fc4b 	bl	800b438 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bba2:	07c6      	lsls	r6, r0, #31
 800bba4:	d40a      	bmi.n	800bbbc <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bba6:	2c00      	cmp	r4, #0
 800bba8:	f000 80a7 	beq.w	800bcfa <find_volume+0x18a>
 800bbac:	f010 0404 	ands.w	r4, r0, #4
 800bbb0:	f000 80a3 	beq.w	800bcfa <find_volume+0x18a>
				return FR_WRITE_PROTECTED;
 800bbb4:	240a      	movs	r4, #10
}
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	b005      	add	sp, #20
 800bbba:	bdf0      	pop	{r4, r5, r6, r7, pc}
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bbbc:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 800bbbe:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bbc0:	7078      	strb	r0, [r7, #1]
	fs->fs_type = 0;					/* Clear the file system object */
 800bbc2:	703b      	strb	r3, [r7, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bbc4:	f7ff fc42 	bl	800b44c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bbc8:	07c5      	lsls	r5, r0, #31
 800bbca:	f100 8099 	bmi.w	800bd00 <find_volume+0x190>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bbce:	b10c      	cbz	r4, 800bbd4 <find_volume+0x64>
 800bbd0:	0744      	lsls	r4, r0, #29
 800bbd2:	d4ef      	bmi.n	800bbb4 <find_volume+0x44>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	4638      	mov	r0, r7
 800bbd8:	f7ff ff88 	bl	800baec <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bbdc:	2802      	cmp	r0, #2
 800bbde:	d072      	beq.n	800bcc6 <find_volume+0x156>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bbe0:	2804      	cmp	r0, #4
 800bbe2:	f000 8095 	beq.w	800bd10 <find_volume+0x1a0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bbe6:	2801      	cmp	r0, #1
 800bbe8:	f200 8086 	bhi.w	800bcf8 <find_volume+0x188>
	bsect = 0;
 800bbec:	2500      	movs	r5, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bbee:	f8b7 303f 	ldrh.w	r3, [r7, #63]	; 0x3f
 800bbf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbf6:	d17f      	bne.n	800bcf8 <find_volume+0x188>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bbf8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bbfc:	b902      	cbnz	r2, 800bc00 <find_volume+0x90>
	rv = rv << 8 | ptr[0];
 800bbfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bc00:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
		fs->fsize = fasize;
 800bc04:	61fa      	str	r2, [r7, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bc06:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bc08:	70bb      	strb	r3, [r7, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bc0a:	2901      	cmp	r1, #1
 800bc0c:	d874      	bhi.n	800bcf8 <find_volume+0x188>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bc0e:	f897 1041 	ldrb.w	r1, [r7, #65]	; 0x41
 800bc12:	b288      	uxth	r0, r1
 800bc14:	8178      	strh	r0, [r7, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bc16:	2800      	cmp	r0, #0
 800bc18:	d06e      	beq.n	800bcf8 <find_volume+0x188>
 800bc1a:	1e48      	subs	r0, r1, #1
 800bc1c:	4208      	tst	r0, r1
 800bc1e:	d16b      	bne.n	800bcf8 <find_volume+0x188>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bc20:	f8b7 6045 	ldrh.w	r6, [r7, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bc24:	0730      	lsls	r0, r6, #28
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800bc26:	813e      	strh	r6, [r7, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800bc28:	d166      	bne.n	800bcf8 <find_volume+0x188>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800bc2a:	f8b7 0047 	ldrh.w	r0, [r7, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800bc2e:	b900      	cbnz	r0, 800bc32 <find_volume+0xc2>
	rv = rv << 8 | ptr[0];
 800bc30:	6d78      	ldr	r0, [r7, #84]	; 0x54
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800bc32:	f8b7 e042 	ldrh.w	lr, [r7, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800bc36:	f1be 0f00 	cmp.w	lr, #0
 800bc3a:	d05d      	beq.n	800bcf8 <find_volume+0x188>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bc3c:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800bc40:	eb0e 1416 	add.w	r4, lr, r6, lsr #4
 800bc44:	441c      	add	r4, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800bc46:	42a0      	cmp	r0, r4
 800bc48:	d356      	bcc.n	800bcf8 <find_volume+0x188>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bc4a:	1b00      	subs	r0, r0, r4
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bc4c:	4288      	cmp	r0, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800bc4e:	fbb0 fcf1 	udiv	ip, r0, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800bc52:	d351      	bcc.n	800bcf8 <find_volume+0x188>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bc54:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 800bc58:	458c      	cmp	ip, r1
 800bc5a:	d864      	bhi.n	800bd26 <find_volume+0x1b6>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bc5c:	f640 71f5 	movw	r1, #4085	; 0xff5
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bc60:	eb0e 0005 	add.w	r0, lr, r5
		fs->database = bsect + sysect;					/* Data start sector */
 800bc64:	442c      	add	r4, r5
		fs->volbase = bsect;							/* Volume start sector */
 800bc66:	623d      	str	r5, [r7, #32]
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bc68:	458c      	cmp	ip, r1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bc6a:	f10c 0102 	add.w	r1, ip, #2
		fs->database = bsect + sysect;					/* Data start sector */
 800bc6e:	62fc      	str	r4, [r7, #44]	; 0x2c
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bc70:	61b9      	str	r1, [r7, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bc72:	6278      	str	r0, [r7, #36]	; 0x24
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bc74:	d87f      	bhi.n	800bd76 <find_volume+0x206>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bc76:	2e00      	cmp	r6, #0
 800bc78:	d03e      	beq.n	800bcf8 <find_volume+0x188>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bc7a:	4403      	add	r3, r0
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bc7c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800bc80:	f001 0101 	and.w	r1, r1, #1
 800bc84:	eb01 0150 	add.w	r1, r1, r0, lsr #1
 800bc88:	2001      	movs	r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bc8a:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bc8e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bc90:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
 800bc94:	d330      	bcc.n	800bcf8 <find_volume+0x188>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bc96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800bc9a:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bc9c:	e9c7 3304 	strd	r3, r3, [r7, #16]
		fs->fsi_flag = 0x80;
 800bca0:	713a      	strb	r2, [r7, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 800bca2:	494a      	ldr	r1, [pc, #296]	; (800bdcc <find_volume+0x25c>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bca4:	4a4a      	ldr	r2, [pc, #296]	; (800bdd0 <find_volume+0x260>)
	fs->id = ++Fsid;		/* File system mount ID */
 800bca6:	880b      	ldrh	r3, [r1, #0]
	fs->fs_type = fmt;		/* FAT sub-type */
 800bca8:	7038      	strb	r0, [r7, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bcaa:	3301      	adds	r3, #1
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bcac:	6810      	ldr	r0, [r2, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bcae:	4c49      	ldr	r4, [pc, #292]	; (800bdd4 <find_volume+0x264>)
	fs->id = ++Fsid;		/* File system mount ID */
 800bcb0:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bcb2:	4287      	cmp	r7, r0
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bcb4:	60fc      	str	r4, [r7, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 800bcb6:	800b      	strh	r3, [r1, #0]
 800bcb8:	80fb      	strh	r3, [r7, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bcba:	d059      	beq.n	800bd70 <find_volume+0x200>
 800bcbc:	6913      	ldr	r3, [r2, #16]
 800bcbe:	429f      	cmp	r7, r3
 800bcc0:	d052      	beq.n	800bd68 <find_volume+0x1f8>
	return FR_OK;
 800bcc2:	2400      	movs	r4, #0
 800bcc4:	e019      	b.n	800bcfa <find_volume+0x18a>
 800bcc6:	466c      	mov	r4, sp
 800bcc8:	f507 73f9 	add.w	r3, r7, #498	; 0x1f2
 800bccc:	f207 2532 	addw	r5, r7, #562	; 0x232
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bcd0:	4620      	mov	r0, r4
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bcd2:	791a      	ldrb	r2, [r3, #4]
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	b102      	cbz	r2, 800bcda <find_volume+0x16a>
	rv = rv << 8 | ptr[0];
 800bcd8:	6899      	ldr	r1, [r3, #8]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bcda:	3310      	adds	r3, #16
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bcdc:	f840 1b04 	str.w	r1, [r0], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bce0:	429d      	cmp	r5, r3
 800bce2:	d1f6      	bne.n	800bcd2 <find_volume+0x162>
 800bce4:	f104 0610 	add.w	r6, r4, #16
			bsect = br[i];
 800bce8:	f854 5b04 	ldr.w	r5, [r4], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bcec:	2003      	movs	r0, #3
 800bcee:	b98d      	cbnz	r5, 800bd14 <find_volume+0x1a4>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bcf0:	42b4      	cmp	r4, r6
 800bcf2:	d1f9      	bne.n	800bce8 <find_volume+0x178>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bcf4:	2804      	cmp	r0, #4
 800bcf6:	d00b      	beq.n	800bd10 <find_volume+0x1a0>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bcf8:	240d      	movs	r4, #13
}
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	b005      	add	sp, #20
 800bcfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bd00:	2403      	movs	r4, #3
}
 800bd02:	4620      	mov	r0, r4
 800bd04:	b005      	add	sp, #20
 800bd06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800bd08:	240b      	movs	r4, #11
}
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	b005      	add	sp, #20
 800bd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bd10:	2401      	movs	r4, #1
 800bd12:	e7f2      	b.n	800bcfa <find_volume+0x18a>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bd14:	4629      	mov	r1, r5
 800bd16:	4638      	mov	r0, r7
 800bd18:	f7ff fee8 	bl	800baec <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bd1c:	2801      	cmp	r0, #1
 800bd1e:	d8e7      	bhi.n	800bcf0 <find_volume+0x180>
 800bd20:	e765      	b.n	800bbee <find_volume+0x7e>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bd22:	240c      	movs	r4, #12
 800bd24:	e7e9      	b.n	800bcfa <find_volume+0x18a>
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bd26:	eb0e 0105 	add.w	r1, lr, r5
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bd2a:	f10c 0302 	add.w	r3, ip, #2
		fs->database = bsect + sysect;					/* Data start sector */
 800bd2e:	442c      	add	r4, r5
		fs->volbase = bsect;							/* Volume start sector */
 800bd30:	623d      	str	r5, [r7, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800bd32:	6279      	str	r1, [r7, #36]	; 0x24
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bd34:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
		fs->database = bsect + sysect;					/* Data start sector */
 800bd38:	62fc      	str	r4, [r7, #44]	; 0x2c
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bd3a:	4331      	orrs	r1, r6
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bd3c:	61bb      	str	r3, [r7, #24]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bd3e:	d1db      	bne.n	800bcf8 <find_volume+0x188>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bd40:	009b      	lsls	r3, r3, #2
	rv = rv << 8 | ptr[0];
 800bd42:	6e39      	ldr	r1, [r7, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bd44:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bd48:	62b9      	str	r1, [r7, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bd4a:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 800bd4e:	d3d3      	bcc.n	800bcf8 <find_volume+0x188>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bd50:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bd54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800bd58:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bd5a:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800bd5c:	7139      	strb	r1, [r7, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bd5e:	e9c7 3304 	strd	r3, r3, [r7, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bd62:	d00e      	beq.n	800bd82 <find_volume+0x212>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bd64:	2003      	movs	r0, #3
 800bd66:	e79c      	b.n	800bca2 <find_volume+0x132>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bd68:	2300      	movs	r3, #0
	return FR_OK;
 800bd6a:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bd6c:	6113      	str	r3, [r2, #16]
 800bd6e:	e7c4      	b.n	800bcfa <find_volume+0x18a>
 800bd70:	2300      	movs	r3, #0
 800bd72:	6013      	str	r3, [r2, #0]
 800bd74:	e7a2      	b.n	800bcbc <find_volume+0x14c>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bd76:	2e00      	cmp	r6, #0
 800bd78:	d0be      	beq.n	800bcf8 <find_volume+0x188>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bd7a:	4403      	add	r3, r0
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bd7c:	0049      	lsls	r1, r1, #1
 800bd7e:	2002      	movs	r0, #2
 800bd80:	e783      	b.n	800bc8a <find_volume+0x11a>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bd82:	1c69      	adds	r1, r5, #1
 800bd84:	4638      	mov	r0, r7
 800bd86:	f7ff fd77 	bl	800b878 <move_window>
 800bd8a:	2800      	cmp	r0, #0
 800bd8c:	d1ea      	bne.n	800bd64 <find_volume+0x1f4>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bd8e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bd92:	f8b7 2232 	ldrh.w	r2, [r7, #562]	; 0x232
			fs->fsi_flag = 0;
 800bd96:	7138      	strb	r0, [r7, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d1e3      	bne.n	800bd64 <find_volume+0x1f4>
	rv = rv << 8 | ptr[0];
 800bd9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bd9e:	4b0e      	ldr	r3, [pc, #56]	; (800bdd8 <find_volume+0x268>)
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d1df      	bne.n	800bd64 <find_volume+0x1f4>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bda4:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 800bda8:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bdac:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bdb0:	3320      	adds	r3, #32
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d1d6      	bne.n	800bd64 <find_volume+0x1f4>
	rv = rv << 8 | ptr[0];
 800bdb6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bdba:	2003      	movs	r0, #3
	rv = rv << 8 | ptr[0];
 800bdbc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bdc0:	e9c7 3204 	strd	r3, r2, [r7, #16]
 800bdc4:	e76d      	b.n	800bca2 <find_volume+0x132>
 800bdc6:	bf00      	nop
 800bdc8:	2001ddbc 	.word	0x2001ddbc
 800bdcc:	2001dde0 	.word	0x2001dde0
 800bdd0:	2001ddc0 	.word	0x2001ddc0
 800bdd4:	2001dde4 	.word	0x2001dde4
 800bdd8:	41615252 	.word	0x41615252

0800bddc <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800bddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
 800bde0:	7805      	ldrb	r5, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800bde2:	4606      	mov	r6, r0
 800bde4:	460c      	mov	r4, r1
 800bde6:	4690      	mov	r8, r2
		switch (fs->fs_type) {
 800bde8:	2d02      	cmp	r5, #2
 800bdea:	d007      	beq.n	800bdfc <put_fat.part.0+0x20>
 800bdec:	2d03      	cmp	r5, #3
 800bdee:	d046      	beq.n	800be7e <put_fat.part.0+0xa2>
 800bdf0:	2d01      	cmp	r5, #1
 800bdf2:	d01b      	beq.n	800be2c <put_fat.part.0+0x50>
 800bdf4:	2702      	movs	r7, #2
}
 800bdf6:	4638      	mov	r0, r7
 800bdf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bdfc:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800bdfe:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800be02:	f7ff fd39 	bl	800b878 <move_window>
			if (res != FR_OK) break;
 800be06:	4607      	mov	r7, r0
 800be08:	2800      	cmp	r0, #0
 800be0a:	d1f4      	bne.n	800bdf6 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800be0c:	0064      	lsls	r4, r4, #1
 800be0e:	f106 0334 	add.w	r3, r6, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800be12:	f3c8 2207 	ubfx	r2, r8, #8, #8
			fs->wflag = 1;
 800be16:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800be18:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
}
 800be1c:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val; val >>= 8;
 800be1e:	f803 8004 	strb.w	r8, [r3, r4]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800be22:	4423      	add	r3, r4
	*ptr++ = (BYTE)val;
 800be24:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
 800be26:	70f1      	strb	r1, [r6, #3]
}
 800be28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be2c:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800be2e:	eb04 0954 	add.w	r9, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be32:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800be36:	f7ff fd1f 	bl	800b878 <move_window>
			if (res != FR_OK) break;
 800be3a:	4607      	mov	r7, r0
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d1da      	bne.n	800bdf6 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800be40:	f014 0401 	ands.w	r4, r4, #1
			p = fs->win + bc++ % SS(fs);
 800be44:	f109 0a01 	add.w	sl, r9, #1
 800be48:	f106 0b34 	add.w	fp, r6, #52	; 0x34
 800be4c:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800be50:	d035      	beq.n	800bebe <put_fat.part.0+0xe2>
 800be52:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800be56:	f003 030f 	and.w	r3, r3, #15
 800be5a:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
 800be5e:	f80b 3009 	strb.w	r3, [fp, r9]
			fs->wflag = 1;
 800be62:	70f5      	strb	r5, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be64:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800be66:	6b33      	ldr	r3, [r6, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800be68:	eb05 255a 	add.w	r5, r5, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800be6c:	42ab      	cmp	r3, r5
 800be6e:	d03e      	beq.n	800beee <put_fat.part.0+0x112>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800be70:	4630      	mov	r0, r6
 800be72:	f7ff fc77 	bl	800b764 <sync_window.part.0>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800be76:	2800      	cmp	r0, #0
 800be78:	d03f      	beq.n	800befa <put_fat.part.0+0x11e>
 800be7a:	4607      	mov	r7, r0
	return res;
 800be7c:	e7bb      	b.n	800bdf6 <put_fat.part.0+0x1a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800be7e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800be80:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800be84:	f7ff fcf8 	bl	800b878 <move_window>
			if (res != FR_OK) break;
 800be88:	4607      	mov	r7, r0
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d1b3      	bne.n	800bdf6 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800be8e:	00a4      	lsls	r4, r4, #2
 800be90:	f106 0134 	add.w	r1, r6, #52	; 0x34
 800be94:	f028 4270 	bic.w	r2, r8, #4026531840	; 0xf0000000
			fs->wflag = 1;
 800be98:	2001      	movs	r0, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800be9a:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800be9e:	590b      	ldr	r3, [r1, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bea0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bea4:	4313      	orrs	r3, r2
 800bea6:	190a      	adds	r2, r1, r4
	*ptr++ = (BYTE)val; val >>= 8;
 800bea8:	550b      	strb	r3, [r1, r4]
 800beaa:	0a19      	lsrs	r1, r3, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800beac:	7051      	strb	r1, [r2, #1]
 800beae:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800beb0:	0e1b      	lsrs	r3, r3, #24
 800beb2:	7091      	strb	r1, [r2, #2]
	*ptr++ = (BYTE)val;
 800beb4:	70d3      	strb	r3, [r2, #3]
			fs->wflag = 1;
 800beb6:	70f0      	strb	r0, [r6, #3]
}
 800beb8:	4638      	mov	r0, r7
 800beba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bebe:	f80b 8009 	strb.w	r8, [fp, r9]
			fs->wflag = 1;
 800bec2:	70f5      	strb	r5, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bec4:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bec6:	6b33      	ldr	r3, [r6, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bec8:	eb05 255a 	add.w	r5, r5, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 800becc:	429d      	cmp	r5, r3
 800bece:	d1cf      	bne.n	800be70 <put_fat.part.0+0x94>
			p = fs->win + bc % SS(fs);
 800bed0:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 800bed4:	44d3      	add	fp, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bed6:	f89b 3000 	ldrb.w	r3, [fp]
 800beda:	f3c8 2203 	ubfx	r2, r8, #8, #4
 800bede:	f023 030f 	bic.w	r3, r3, #15
 800bee2:	4313      	orrs	r3, r2
			fs->wflag = 1;
 800bee4:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bee6:	f88b 3000 	strb.w	r3, [fp]
			fs->wflag = 1;
 800beea:	70f2      	strb	r2, [r6, #3]
			break;
 800beec:	e783      	b.n	800bdf6 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800beee:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 800bef2:	44d3      	add	fp, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bef4:	f3c8 1307 	ubfx	r3, r8, #4, #8
 800bef8:	e7f4      	b.n	800bee4 <put_fat.part.0+0x108>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800befa:	2301      	movs	r3, #1
 800befc:	462a      	mov	r2, r5
 800befe:	4659      	mov	r1, fp
 800bf00:	7870      	ldrb	r0, [r6, #1]
 800bf02:	f7ff fab5 	bl	800b470 <disk_read>
 800bf06:	b120      	cbz	r0, 800bf12 <put_fat.part.0+0x136>
			fs->winsect = sector;
 800bf08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800bf0c:	2701      	movs	r7, #1
			fs->winsect = sector;
 800bf0e:	6333      	str	r3, [r6, #48]	; 0x30
			if (res != FR_OK) break;
 800bf10:	e771      	b.n	800bdf6 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800bf12:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			fs->winsect = sector;
 800bf16:	6335      	str	r5, [r6, #48]	; 0x30
			p = fs->win + bc % SS(fs);
 800bf18:	44d3      	add	fp, sl
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bf1a:	2c00      	cmp	r4, #0
 800bf1c:	d0db      	beq.n	800bed6 <put_fat.part.0+0xfa>
 800bf1e:	e7e9      	b.n	800bef4 <put_fat.part.0+0x118>

0800bf20 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bf20:	2901      	cmp	r1, #1
{
 800bf22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf24:	460e      	mov	r6, r1
	FATFS *fs = obj->fs;
 800bf26:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bf28:	d92a      	bls.n	800bf80 <remove_chain+0x60>
 800bf2a:	69ab      	ldr	r3, [r5, #24]
 800bf2c:	428b      	cmp	r3, r1
 800bf2e:	d927      	bls.n	800bf80 <remove_chain+0x60>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bf30:	4607      	mov	r7, r0
 800bf32:	4611      	mov	r1, r2
 800bf34:	bb32      	cbnz	r2, 800bf84 <remove_chain+0x64>
 800bf36:	4628      	mov	r0, r5
 800bf38:	e014      	b.n	800bf64 <remove_chain+0x44>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bf3a:	69ab      	ldr	r3, [r5, #24]
 800bf3c:	429e      	cmp	r6, r3
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bf3e:	4626      	mov	r6, r4
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bf40:	d21e      	bcs.n	800bf80 <remove_chain+0x60>
 800bf42:	f7ff ff4b 	bl	800bddc <put_fat.part.0>
			if (res != FR_OK) return res;
 800bf46:	b9e0      	cbnz	r0, 800bf82 <remove_chain+0x62>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bf48:	e9d5 2305 	ldrd	r2, r3, [r5, #20]
 800bf4c:	1e99      	subs	r1, r3, #2
			fs->free_clst++;
 800bf4e:	1c50      	adds	r0, r2, #1
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bf50:	428a      	cmp	r2, r1
 800bf52:	d204      	bcs.n	800bf5e <remove_chain+0x3e>
			fs->fsi_flag |= 1;
 800bf54:	792a      	ldrb	r2, [r5, #4]
			fs->free_clst++;
 800bf56:	6168      	str	r0, [r5, #20]
			fs->fsi_flag |= 1;
 800bf58:	f042 0201 	orr.w	r2, r2, #1
 800bf5c:	712a      	strb	r2, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bf5e:	42a3      	cmp	r3, r4
 800bf60:	d91c      	bls.n	800bf9c <remove_chain+0x7c>
 800bf62:	6838      	ldr	r0, [r7, #0]
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bf64:	4631      	mov	r1, r6
 800bf66:	f7ff fca3 	bl	800b8b0 <get_fat.isra.0>
 800bf6a:	4604      	mov	r4, r0
		if (nxt == 0) break;				/* Empty cluster? */
 800bf6c:	4631      	mov	r1, r6
 800bf6e:	2200      	movs	r2, #0
 800bf70:	4628      	mov	r0, r5
 800bf72:	b19c      	cbz	r4, 800bf9c <remove_chain+0x7c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bf74:	2c01      	cmp	r4, #1
 800bf76:	d003      	beq.n	800bf80 <remove_chain+0x60>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bf78:	1c63      	adds	r3, r4, #1
 800bf7a:	d011      	beq.n	800bfa0 <remove_chain+0x80>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bf7c:	2e01      	cmp	r6, #1
 800bf7e:	d8dc      	bhi.n	800bf3a <remove_chain+0x1a>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bf80:	2002      	movs	r0, #2
}
 800bf82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d9fb      	bls.n	800bf80 <remove_chain+0x60>
 800bf88:	2a01      	cmp	r2, #1
 800bf8a:	d0f9      	beq.n	800bf80 <remove_chain+0x60>
 800bf8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf90:	4628      	mov	r0, r5
 800bf92:	f7ff ff23 	bl	800bddc <put_fat.part.0>
		if (res != FR_OK) return res;
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d0e3      	beq.n	800bf62 <remove_chain+0x42>
}
 800bf9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 800bf9c:	2000      	movs	r0, #0
}
 800bf9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bfa0:	2001      	movs	r0, #1
}
 800bfa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bfa4 <create_chain>:
{
 800bfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa8:	4605      	mov	r5, r0
	if (clst == 0) {	/* Create a new chain */
 800bfaa:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
 800bfac:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800bfae:	2900      	cmp	r1, #0
 800bfb0:	d14b      	bne.n	800c04a <create_chain+0xa6>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bfb2:	f8d6 8010 	ldr.w	r8, [r6, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bfb6:	69b3      	ldr	r3, [r6, #24]
 800bfb8:	f1b8 0f00 	cmp.w	r8, #0
 800bfbc:	d135      	bne.n	800c02a <create_chain+0x86>
 800bfbe:	f04f 0801 	mov.w	r8, #1
 800bfc2:	4644      	mov	r4, r8
 800bfc4:	e006      	b.n	800bfd4 <create_chain+0x30>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bfc6:	2801      	cmp	r0, #1
 800bfc8:	d03a      	beq.n	800c040 <create_chain+0x9c>
 800bfca:	1c43      	adds	r3, r0, #1
 800bfcc:	d038      	beq.n	800c040 <create_chain+0x9c>
			if (ncl == scl) return 0;		/* No free cluster */
 800bfce:	4544      	cmp	r4, r8
 800bfd0:	d038      	beq.n	800c044 <create_chain+0xa0>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bfd2:	69b3      	ldr	r3, [r6, #24]
			ncl++;							/* Next cluster */
 800bfd4:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bfd6:	429c      	cmp	r4, r3
 800bfd8:	d304      	bcc.n	800bfe4 <create_chain+0x40>
				if (ncl > scl) return 0;	/* No free cluster */
 800bfda:	f1b8 0f01 	cmp.w	r8, #1
				ncl = 2;
 800bfde:	f04f 0402 	mov.w	r4, #2
				if (ncl > scl) return 0;	/* No free cluster */
 800bfe2:	d02f      	beq.n	800c044 <create_chain+0xa0>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bfe4:	4621      	mov	r1, r4
 800bfe6:	6828      	ldr	r0, [r5, #0]
 800bfe8:	f7ff fc62 	bl	800b8b0 <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 800bfec:	2800      	cmp	r0, #0
 800bfee:	d1ea      	bne.n	800bfc6 <create_chain+0x22>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bff0:	2c01      	cmp	r4, #1
 800bff2:	d924      	bls.n	800c03e <create_chain+0x9a>
 800bff4:	69b3      	ldr	r3, [r6, #24]
 800bff6:	429c      	cmp	r4, r3
 800bff8:	d221      	bcs.n	800c03e <create_chain+0x9a>
 800bffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bffe:	4621      	mov	r1, r4
 800c000:	4630      	mov	r0, r6
 800c002:	f7ff feeb 	bl	800bddc <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800c006:	b900      	cbnz	r0, 800c00a <create_chain+0x66>
 800c008:	b9a7      	cbnz	r7, 800c034 <create_chain+0x90>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c00a:	bb50      	cbnz	r0, 800c062 <create_chain+0xbe>
		fs->last_clst = ncl;
 800c00c:	6134      	str	r4, [r6, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c00e:	e9d6 2305 	ldrd	r2, r3, [r6, #20]
 800c012:	3b02      	subs	r3, #2
 800c014:	429a      	cmp	r2, r3
 800c016:	d801      	bhi.n	800c01c <create_chain+0x78>
 800c018:	3a01      	subs	r2, #1
 800c01a:	6172      	str	r2, [r6, #20]
		fs->fsi_flag |= 1;
 800c01c:	7933      	ldrb	r3, [r6, #4]
 800c01e:	4620      	mov	r0, r4
 800c020:	f043 0301 	orr.w	r3, r3, #1
 800c024:	7133      	strb	r3, [r6, #4]
}
 800c026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c02a:	4543      	cmp	r3, r8
 800c02c:	bf98      	it	ls
 800c02e:	f04f 0801 	movls.w	r8, #1
 800c032:	e7c6      	b.n	800bfc2 <create_chain+0x1e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c034:	2f01      	cmp	r7, #1
 800c036:	d002      	beq.n	800c03e <create_chain+0x9a>
 800c038:	69b3      	ldr	r3, [r6, #24]
 800c03a:	429f      	cmp	r7, r3
 800c03c:	d316      	bcc.n	800c06c <create_chain+0xc8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c03e:	2001      	movs	r0, #1
}
 800c040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (ncl > scl) return 0;	/* No free cluster */
 800c044:	2000      	movs	r0, #0
}
 800c046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c04a:	4630      	mov	r0, r6
 800c04c:	f7ff fc30 	bl	800b8b0 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c050:	2801      	cmp	r0, #1
 800c052:	d9f4      	bls.n	800c03e <create_chain+0x9a>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c054:	1c42      	adds	r2, r0, #1
 800c056:	d006      	beq.n	800c066 <create_chain+0xc2>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c058:	69b3      	ldr	r3, [r6, #24]
 800c05a:	4283      	cmp	r3, r0
 800c05c:	d8f0      	bhi.n	800c040 <create_chain+0x9c>
 800c05e:	46b8      	mov	r8, r7
 800c060:	e7af      	b.n	800bfc2 <create_chain+0x1e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c062:	2801      	cmp	r0, #1
 800c064:	d1eb      	bne.n	800c03e <create_chain+0x9a>
 800c066:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c06a:	e7e9      	b.n	800c040 <create_chain+0x9c>
 800c06c:	4622      	mov	r2, r4
 800c06e:	4639      	mov	r1, r7
 800c070:	4630      	mov	r0, r6
 800c072:	f7ff feb3 	bl	800bddc <put_fat.part.0>
 800c076:	e7c8      	b.n	800c00a <create_chain+0x66>

0800c078 <dir_next>:
{
 800c078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c07c:	6945      	ldr	r5, [r0, #20]
{
 800c07e:	b083      	sub	sp, #12
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c080:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c082:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c084:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800c088:	d23b      	bcs.n	800c102 <dir_next+0x8a>
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d039      	beq.n	800c102 <dir_next+0x8a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c08e:	f3c5 0808 	ubfx	r8, r5, #0, #9
 800c092:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800c094:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c096:	f1b8 0f00 	cmp.w	r8, #0
 800c09a:	d008      	beq.n	800c0ae <dir_next+0x36>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c09c:	f107 0634 	add.w	r6, r7, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c0a0:	4446      	add	r6, r8
	return FR_OK;
 800c0a2:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800c0a4:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c0a6:	6226      	str	r6, [r4, #32]
}
 800c0a8:	b003      	add	sp, #12
 800c0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;				/* Next sector */
 800c0ae:	460e      	mov	r6, r1
 800c0b0:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800c0b2:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800c0b4:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800c0b6:	b341      	cbz	r1, 800c10a <dir_next+0x92>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c0b8:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 800c0bc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c0c0:	ea19 2955 	ands.w	r9, r9, r5, lsr #9
 800c0c4:	d1ea      	bne.n	800c09c <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c0c6:	4638      	mov	r0, r7
 800c0c8:	f7ff fbf2 	bl	800b8b0 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c0cc:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c0ce:	4683      	mov	fp, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c0d0:	d923      	bls.n	800c11a <dir_next+0xa2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c0d2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c0d6:	d05c      	beq.n	800c192 <dir_next+0x11a>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c0d8:	69ba      	ldr	r2, [r7, #24]
 800c0da:	4282      	cmp	r2, r0
 800c0dc:	d91f      	bls.n	800c11e <dir_next+0xa6>
	clst -= 2;
 800c0de:	1e83      	subs	r3, r0, #2
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c0e0:	f107 0634 	add.w	r6, r7, #52	; 0x34
	clst -= 2;
 800c0e4:	9301      	str	r3, [sp, #4]
				dp->clust = clst;		/* Initialize data for new cluster */
 800c0e6:	f8c4 b018 	str.w	fp, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	9901      	ldr	r1, [sp, #4]
 800c0ee:	3b02      	subs	r3, #2
 800c0f0:	428b      	cmp	r3, r1
 800c0f2:	d903      	bls.n	800c0fc <dir_next+0x84>
	return clst * fs->csize + fs->database;
 800c0f4:	897a      	ldrh	r2, [r7, #10]
 800c0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f8:	fb01 3902 	mla	r9, r1, r2, r3
				dp->sect = clust2sect(fs, clst);
 800c0fc:	f8c4 901c 	str.w	r9, [r4, #28]
 800c100:	e7ce      	b.n	800c0a0 <dir_next+0x28>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c102:	2004      	movs	r0, #4
}
 800c104:	b003      	add	sp, #12
 800c106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c10a:	893b      	ldrh	r3, [r7, #8]
 800c10c:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800c110:	d8c4      	bhi.n	800c09c <dir_next+0x24>
				dp->sect = 0; return FR_NO_FILE;
 800c112:	2300      	movs	r3, #0
 800c114:	2004      	movs	r0, #4
 800c116:	61e3      	str	r3, [r4, #28]
 800c118:	e7c6      	b.n	800c0a8 <dir_next+0x30>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c11a:	2002      	movs	r0, #2
 800c11c:	e7c4      	b.n	800c0a8 <dir_next+0x30>
					if (!stretch) {								/* If no stretch, report EOT */
 800c11e:	2e00      	cmp	r6, #0
 800c120:	d0f7      	beq.n	800c112 <dir_next+0x9a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c122:	69a1      	ldr	r1, [r4, #24]
 800c124:	4620      	mov	r0, r4
 800c126:	f7ff ff3d 	bl	800bfa4 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c12a:	4683      	mov	fp, r0
 800c12c:	2800      	cmp	r0, #0
 800c12e:	d037      	beq.n	800c1a0 <dir_next+0x128>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c130:	2801      	cmp	r0, #1
 800c132:	d0f2      	beq.n	800c11a <dir_next+0xa2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c134:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c138:	d02b      	beq.n	800c192 <dir_next+0x11a>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c13a:	78fa      	ldrb	r2, [r7, #3]
 800c13c:	bb92      	cbnz	r2, 800c1a4 <dir_next+0x12c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c13e:	f107 0634 	add.w	r6, r7, #52	; 0x34
	clst -= 2;
 800c142:	f1ab 0302 	sub.w	r3, fp, #2
		*d++ = (BYTE)val;
 800c146:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c14a:	2100      	movs	r1, #0
 800c14c:	4630      	mov	r0, r6
	clst -= 2;
 800c14e:	9301      	str	r3, [sp, #4]
		*d++ = (BYTE)val;
 800c150:	f00a fbae 	bl	80168b0 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c154:	69ba      	ldr	r2, [r7, #24]
 800c156:	9b01      	ldr	r3, [sp, #4]
 800c158:	3a02      	subs	r2, #2
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d228      	bcs.n	800c1b0 <dir_next+0x138>
	return clst * fs->csize + fs->database;
 800c15e:	8979      	ldrh	r1, [r7, #10]
 800c160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c162:	9b01      	ldr	r3, [sp, #4]
 800c164:	fb03 2201 	mla	r2, r3, r1, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c168:	633a      	str	r2, [r7, #48]	; 0x30
 800c16a:	b1a1      	cbz	r1, 800c196 <dir_next+0x11e>
 800c16c:	f04f 0a00 	mov.w	sl, #0
 800c170:	e005      	b.n	800c17e <dir_next+0x106>
 800c172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c174:	8978      	ldrh	r0, [r7, #10]
 800c176:	3201      	adds	r2, #1
 800c178:	4550      	cmp	r0, sl
 800c17a:	633a      	str	r2, [r7, #48]	; 0x30
 800c17c:	d90c      	bls.n	800c198 <dir_next+0x120>
						fs->wflag = 1;
 800c17e:	f04f 0301 	mov.w	r3, #1
 800c182:	4638      	mov	r0, r7
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c184:	f10a 0a01 	add.w	sl, sl, #1
						fs->wflag = 1;
 800c188:	70fb      	strb	r3, [r7, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c18a:	f7ff faeb 	bl	800b764 <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c18e:	2800      	cmp	r0, #0
 800c190:	d0ef      	beq.n	800c172 <dir_next+0xfa>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c192:	2001      	movs	r0, #1
 800c194:	e788      	b.n	800c0a8 <dir_next+0x30>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c196:	468a      	mov	sl, r1
					fs->winsect -= n;							/* Restore window offset */
 800c198:	eba2 020a 	sub.w	r2, r2, sl
 800c19c:	633a      	str	r2, [r7, #48]	; 0x30
 800c19e:	e7a2      	b.n	800c0e6 <dir_next+0x6e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c1a0:	2007      	movs	r0, #7
 800c1a2:	e781      	b.n	800c0a8 <dir_next+0x30>
 800c1a4:	4638      	mov	r0, r7
 800c1a6:	f7ff fadd 	bl	800b764 <sync_window.part.0>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d0c7      	beq.n	800c13e <dir_next+0xc6>
 800c1ae:	e7f0      	b.n	800c192 <dir_next+0x11a>
	return clst * fs->csize + fs->database;
 800c1b0:	8979      	ldrh	r1, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	e7d8      	b.n	800c168 <dir_next+0xf0>
 800c1b6:	bf00      	nop

0800c1b8 <dir_alloc>:
{
 800c1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ba:	460d      	mov	r5, r1
	res = dir_sdi(dp, 0);
 800c1bc:	2100      	movs	r1, #0
{
 800c1be:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800c1c0:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800c1c2:	f7ff fbcb 	bl	800b95c <dir_sdi>
	if (res == FR_OK) {
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	b9e0      	cbnz	r0, 800c204 <dir_alloc+0x4c>
		n = 0;
 800c1ca:	4607      	mov	r7, r0
 800c1cc:	e007      	b.n	800c1de <dir_alloc+0x26>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c1ce:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800c1d2:	b19a      	cbz	r2, 800c1fc <dir_alloc+0x44>
				n = 0;					/* Not a blank entry. Restart to search */
 800c1d4:	4667      	mov	r7, ip
			res = dir_next(dp, 1);
 800c1d6:	f7ff ff4f 	bl	800c078 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c1da:	4603      	mov	r3, r0
 800c1dc:	b990      	cbnz	r0, 800c204 <dir_alloc+0x4c>
			res = move_window(fs, dp->sect);
 800c1de:	69e1      	ldr	r1, [r4, #28]
 800c1e0:	4630      	mov	r0, r6
 800c1e2:	f7ff fb49 	bl	800b878 <move_window>
 800c1e6:	4603      	mov	r3, r0
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c1e8:	3701      	adds	r7, #1
			res = dir_next(dp, 1);
 800c1ea:	2101      	movs	r1, #1
 800c1ec:	4620      	mov	r0, r4
			if (res != FR_OK) break;
 800c1ee:	b94b      	cbnz	r3, 800c204 <dir_alloc+0x4c>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c1f0:	6a22      	ldr	r2, [r4, #32]
 800c1f2:	7812      	ldrb	r2, [r2, #0]
 800c1f4:	2ae5      	cmp	r2, #229	; 0xe5
 800c1f6:	fab2 fc82 	clz	ip, r2
 800c1fa:	d1e8      	bne.n	800c1ce <dir_alloc+0x16>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c1fc:	42af      	cmp	r7, r5
 800c1fe:	d1ea      	bne.n	800c1d6 <dir_alloc+0x1e>
}
 800c200:	4618      	mov	r0, r3
 800c202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c204:	2b04      	cmp	r3, #4
 800c206:	bf08      	it	eq
 800c208:	2307      	moveq	r3, #7
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c20e:	bf00      	nop

0800c210 <dir_read>:
{
 800c210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c214:	4604      	mov	r4, r0
	BYTE ord = 0xFF, sum = 0xFF;
 800c216:	27ff      	movs	r7, #255	; 0xff
	FRESULT res = FR_NO_FILE;
 800c218:	2004      	movs	r0, #4
{
 800c21a:	460e      	mov	r6, r1
	BYTE ord = 0xFF, sum = 0xFF;
 800c21c:	46b8      	mov	r8, r7
	FATFS *fs = dp->obj.fs;
 800c21e:	6825      	ldr	r5, [r4, #0]
	while (dp->sect) {
 800c220:	e007      	b.n	800c232 <dir_read+0x22>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c222:	f04f 08ff 	mov.w	r8, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 800c226:	2100      	movs	r1, #0
 800c228:	4620      	mov	r0, r4
 800c22a:	f7ff ff25 	bl	800c078 <dir_next>
		if (res != FR_OK) break;
 800c22e:	2800      	cmp	r0, #0
 800c230:	d15a      	bne.n	800c2e8 <dir_read+0xd8>
	while (dp->sect) {
 800c232:	69e1      	ldr	r1, [r4, #28]
 800c234:	2900      	cmp	r1, #0
 800c236:	d05b      	beq.n	800c2f0 <dir_read+0xe0>
		res = move_window(fs, dp->sect);
 800c238:	4628      	mov	r0, r5
 800c23a:	f7ff fb1d 	bl	800b878 <move_window>
		if (res != FR_OK) break;
 800c23e:	2800      	cmp	r0, #0
 800c240:	d152      	bne.n	800c2e8 <dir_read+0xd8>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c242:	f8d4 c020 	ldr.w	ip, [r4, #32]
 800c246:	f89c 1000 	ldrb.w	r1, [ip]
		if (c == 0) {
 800c24a:	2900      	cmp	r1, #0
 800c24c:	d04b      	beq.n	800c2e6 <dir_read+0xd6>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c24e:	f89c 300b 	ldrb.w	r3, [ip, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c252:	29e5      	cmp	r1, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c258:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c25a:	d0e2      	beq.n	800c222 <dir_read+0x12>
 800c25c:	292e      	cmp	r1, #46	; 0x2e
 800c25e:	d0e0      	beq.n	800c222 <dir_read+0x12>
 800c260:	f023 0220 	bic.w	r2, r3, #32
 800c264:	f1a2 0208 	sub.w	r2, r2, #8
 800c268:	fab2 f282 	clz	r2, r2
 800c26c:	0952      	lsrs	r2, r2, #5
 800c26e:	42b2      	cmp	r2, r6
 800c270:	d1d7      	bne.n	800c222 <dir_read+0x12>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c272:	2b0f      	cmp	r3, #15
 800c274:	d14e      	bne.n	800c314 <dir_read+0x104>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c276:	0648      	lsls	r0, r1, #25
 800c278:	d532      	bpl.n	800c2e0 <dir_read+0xd0>
						dp->blk_ofs = dp->dptr;
 800c27a:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c27c:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800c280:	f89c 700d 	ldrb.w	r7, [ip, #13]
						dp->blk_ofs = dp->dptr;
 800c284:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c286:	f89c 300d 	ldrb.w	r3, [ip, #13]
 800c28a:	42bb      	cmp	r3, r7
 800c28c:	d1c9      	bne.n	800c222 <dir_read+0x12>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c28e:	f8bc 301a 	ldrh.w	r3, [ip, #26]
 800c292:	2b00      	cmp	r3, #0
 800c294:	d1c5      	bne.n	800c222 <dir_read+0x12>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c296:	f89c 3000 	ldrb.w	r3, [ip]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800c344 <dir_read+0x134>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c2a0:	f64f 7aff 	movw	sl, #65535	; 0xffff
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c2a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c2a8:	f8d5 900c 	ldr.w	r9, [r5, #12]
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c2ac:	f108 0e0c 	add.w	lr, r8, #12
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800c2b6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c2ba:	4610      	mov	r0, r2
 800c2bc:	e009      	b.n	800c2d2 <dir_read+0xc2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c2be:	2bfe      	cmp	r3, #254	; 0xfe
 800c2c0:	4610      	mov	r0, r2
 800c2c2:	d8ae      	bhi.n	800c222 <dir_read+0x12>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c2c4:	f829 2013 	strh.w	r2, [r9, r3, lsl #1]
 800c2c8:	3301      	adds	r3, #1
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c2ca:	45c6      	cmp	lr, r8
 800c2cc:	d015      	beq.n	800c2fa <dir_read+0xea>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c2ce:	f818 2f01 	ldrb.w	r2, [r8, #1]!
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c2d2:	f83c 2002 	ldrh.w	r2, [ip, r2]
		if (wc) {
 800c2d6:	2800      	cmp	r0, #0
 800c2d8:	d1f1      	bne.n	800c2be <dir_read+0xae>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c2da:	4552      	cmp	r2, sl
 800c2dc:	d0f5      	beq.n	800c2ca <dir_read+0xba>
 800c2de:	e7a0      	b.n	800c222 <dir_read+0x12>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c2e0:	4588      	cmp	r8, r1
 800c2e2:	d19e      	bne.n	800c222 <dir_read+0x12>
 800c2e4:	e7cf      	b.n	800c286 <dir_read+0x76>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c2e6:	2004      	movs	r0, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	61e3      	str	r3, [r4, #28]
}
 800c2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c2f0:	2800      	cmp	r0, #0
 800c2f2:	d1f9      	bne.n	800c2e8 <dir_read+0xd8>
		res = move_window(fs, dp->sect);
 800c2f4:	2000      	movs	r0, #0
}
 800c2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c2fa:	f89c 2000 	ldrb.w	r2, [ip]
 800c2fe:	0652      	lsls	r2, r2, #25
 800c300:	d504      	bpl.n	800c30c <dir_read+0xfc>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c302:	2bfe      	cmp	r3, #254	; 0xfe
 800c304:	d88d      	bhi.n	800c222 <dir_read+0x12>
		lfnbuf[i] = 0;
 800c306:	2200      	movs	r2, #0
 800c308:	f829 2013 	strh.w	r2, [r9, r3, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c30c:	1e4b      	subs	r3, r1, #1
 800c30e:	fa5f f883 	uxtb.w	r8, r3
 800c312:	e788      	b.n	800c226 <dir_read+0x16>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c314:	f1b8 0f00 	cmp.w	r8, #0
 800c318:	d10f      	bne.n	800c33a <dir_read+0x12a>
 800c31a:	f10c 010b 	add.w	r1, ip, #11
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c31e:	ea4f 13c8 	mov.w	r3, r8, lsl #7
 800c322:	f81c 2b01 	ldrb.w	r2, [ip], #1
 800c326:	ea43 0358 	orr.w	r3, r3, r8, lsr #1
	} while (--n);
 800c32a:	458c      	cmp	ip, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c32c:	fa52 f383 	uxtab	r3, r2, r3
 800c330:	fa5f f883 	uxtb.w	r8, r3
	} while (--n);
 800c334:	d1f3      	bne.n	800c31e <dir_read+0x10e>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c336:	4547      	cmp	r7, r8
 800c338:	d0dc      	beq.n	800c2f4 <dir_read+0xe4>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c33a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c33e:	6323      	str	r3, [r4, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c340:	e7d4      	b.n	800c2ec <dir_read+0xdc>
 800c342:	bf00      	nop
 800c344:	08019948 	.word	0x08019948

0800c348 <dir_find>:
{
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c34c:	2100      	movs	r1, #0
{
 800c34e:	4605      	mov	r5, r0
 800c350:	ed2d 8b02 	vpush	{d8}
 800c354:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 800c356:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c358:	f7ff fb00 	bl	800b95c <dir_sdi>
	if (res != FR_OK) return res;
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d143      	bne.n	800c3e8 <dir_find+0xa0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c360:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800c364:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800c368:	46ca      	mov	sl, r9
 800c36a:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
 800c36e:	e00a      	b.n	800c386 <dir_find+0x3e>
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c370:	2a0f      	cmp	r2, #15
 800c372:	d03e      	beq.n	800c3f2 <dir_find+0xaa>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c374:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800c378:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
		res = dir_next(dp, 0);	/* Next entry */
 800c37c:	2100      	movs	r1, #0
 800c37e:	4628      	mov	r0, r5
 800c380:	f7ff fe7a 	bl	800c078 <dir_next>
	} while (res == FR_OK);
 800c384:	bb80      	cbnz	r0, 800c3e8 <dir_find+0xa0>
		res = move_window(fs, dp->sect);
 800c386:	69e9      	ldr	r1, [r5, #28]
 800c388:	4638      	mov	r0, r7
 800c38a:	f7ff fa75 	bl	800b878 <move_window>
		if (res != FR_OK) break;
 800c38e:	bb58      	cbnz	r0, 800c3e8 <dir_find+0xa0>
		c = dp->dir[DIR_Name];
 800c390:	6a2c      	ldr	r4, [r5, #32]
 800c392:	7826      	ldrb	r6, [r4, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c394:	2e00      	cmp	r6, #0
 800c396:	f000 8096 	beq.w	800c4c6 <dir_find+0x17e>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c39a:	7ae3      	ldrb	r3, [r4, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c39c:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c39e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c3a2:	71aa      	strb	r2, [r5, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c3a4:	d0e6      	beq.n	800c374 <dir_find+0x2c>
 800c3a6:	0718      	lsls	r0, r3, #28
 800c3a8:	d4e2      	bmi.n	800c370 <dir_find+0x28>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c3aa:	2a0f      	cmp	r2, #15
 800c3ac:	d021      	beq.n	800c3f2 <dir_find+0xaa>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c3ae:	f1ba 0f00 	cmp.w	sl, #0
 800c3b2:	d06e      	beq.n	800c492 <dir_find+0x14a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c3b4:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
 800c3b8:	f010 0001 	ands.w	r0, r0, #1
 800c3bc:	d1da      	bne.n	800c374 <dir_find+0x2c>
		r = *d++ - *s++;
 800c3be:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
 800c3c2:	f105 0225 	add.w	r2, r5, #37	; 0x25
 800c3c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c3ca:	f105 062f 	add.w	r6, r5, #47	; 0x2f
 800c3ce:	1a5b      	subs	r3, r3, r1
	} while (--cnt && r == 0);
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1cf      	bne.n	800c374 <dir_find+0x2c>
		r = *d++ - *s++;
 800c3d4:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c3d8:	f814 3b01 	ldrb.w	r3, [r4], #1
	} while (--cnt && r == 0);
 800c3dc:	42b2      	cmp	r2, r6
		r = *d++ - *s++;
 800c3de:	eba3 0301 	sub.w	r3, r3, r1
	} while (--cnt && r == 0);
 800c3e2:	d1f5      	bne.n	800c3d0 <dir_find+0x88>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1c5      	bne.n	800c374 <dir_find+0x2c>
}
 800c3e8:	b005      	add	sp, #20
 800c3ea:	ecbd 8b02 	vpop	{d8}
 800c3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c3f2:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800c3f6:	0659      	lsls	r1, r3, #25
 800c3f8:	d4c0      	bmi.n	800c37c <dir_find+0x34>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c3fa:	0672      	lsls	r2, r6, #25
 800c3fc:	d55e      	bpl.n	800c4bc <dir_find+0x174>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c3fe:	696b      	ldr	r3, [r5, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c400:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800c404:	f894 900d 	ldrb.w	r9, [r4, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c408:	632b      	str	r3, [r5, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c40a:	7b63      	ldrb	r3, [r4, #13]
 800c40c:	454b      	cmp	r3, r9
 800c40e:	d157      	bne.n	800c4c0 <dir_find+0x178>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c410:	8b63      	ldrh	r3, [r4, #26]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d154      	bne.n	800c4c0 <dir_find+0x178>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c416:	f894 a000 	ldrb.w	sl, [r4]
 800c41a:	2301      	movs	r3, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c41c:	68f9      	ldr	r1, [r7, #12]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c41e:	ee08 7a10 	vmov	s16, r7
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c422:	f00a 0a3f 	and.w	sl, sl, #63	; 0x3f
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c426:	9602      	str	r6, [sp, #8]
 800c428:	9501      	str	r5, [sp, #4]
 800c42a:	460e      	mov	r6, r1
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c42c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c430:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 800c500 <dir_find+0x1b8>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c434:	4618      	mov	r0, r3
 800c436:	4625      	mov	r5, r4
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c438:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c43c:	9103      	str	r1, [sp, #12]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c43e:	f8cd 9000 	str.w	r9, [sp]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c442:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c446:	e013      	b.n	800c470 <dir_find+0x128>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c448:	f1ba 0ffe 	cmp.w	sl, #254	; 0xfe
 800c44c:	4620      	mov	r0, r4
 800c44e:	d818      	bhi.n	800c482 <dir_find+0x13a>
 800c450:	f001 f822 	bl	800d498 <ff_wtoupper>
 800c454:	4607      	mov	r7, r0
 800c456:	f836 001a 	ldrh.w	r0, [r6, sl, lsl #1]
 800c45a:	46ca      	mov	sl, r9
 800c45c:	f001 f81c 	bl	800d498 <ff_wtoupper>
 800c460:	4287      	cmp	r7, r0
 800c462:	4620      	mov	r0, r4
 800c464:	d10d      	bne.n	800c482 <dir_find+0x13a>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c466:	4b25      	ldr	r3, [pc, #148]	; (800c4fc <dir_find+0x1b4>)
 800c468:	459b      	cmp	fp, r3
 800c46a:	d032      	beq.n	800c4d2 <dir_find+0x18a>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c46c:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c470:	f10a 0901 	add.w	r9, sl, #1
 800c474:	5aec      	ldrh	r4, [r5, r3]
		if (wc) {
 800c476:	2800      	cmp	r0, #0
 800c478:	d1e6      	bne.n	800c448 <dir_find+0x100>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c47a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c47e:	429c      	cmp	r4, r3
 800c480:	d0f1      	beq.n	800c466 <dir_find+0x11e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c482:	f8dd 9000 	ldr.w	r9, [sp]
 800c486:	ee18 7a10 	vmov	r7, s16
 800c48a:	9d01      	ldr	r5, [sp, #4]
 800c48c:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800c490:	e774      	b.n	800c37c <dir_find+0x34>
 800c492:	f104 000b 	add.w	r0, r4, #11
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c496:	4622      	mov	r2, r4
 800c498:	4653      	mov	r3, sl
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c49a:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
 800c49e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800c4a2:	ea4a 0a53 	orr.w	sl, sl, r3, lsr #1
	} while (--n);
 800c4a6:	4282      	cmp	r2, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c4a8:	fa51 fa8a 	uxtab	sl, r1, sl
 800c4ac:	fa5f f38a 	uxtb.w	r3, sl
	} while (--n);
 800c4b0:	d1f3      	bne.n	800c49a <dir_find+0x152>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c4b2:	4599      	cmp	r9, r3
 800c4b4:	f47f af7e 	bne.w	800c3b4 <dir_find+0x6c>
		res = move_window(fs, dp->sect);
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	e795      	b.n	800c3e8 <dir_find+0xa0>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c4bc:	45b2      	cmp	sl, r6
 800c4be:	d0a4      	beq.n	800c40a <dir_find+0xc2>
 800c4c0:	f04f 0aff 	mov.w	sl, #255	; 0xff
 800c4c4:	e75a      	b.n	800c37c <dir_find+0x34>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c4c6:	2004      	movs	r0, #4
}
 800c4c8:	b005      	add	sp, #20
 800c4ca:	ecbd 8b02 	vpop	{d8}
 800c4ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c4d2:	462c      	mov	r4, r5
 800c4d4:	f8dd 9000 	ldr.w	r9, [sp]
 800c4d8:	ee18 7a10 	vmov	r7, s16
 800c4dc:	9e02      	ldr	r6, [sp, #8]
 800c4de:	7823      	ldrb	r3, [r4, #0]
 800c4e0:	9d01      	ldr	r5, [sp, #4]
 800c4e2:	065b      	lsls	r3, r3, #25
 800c4e4:	d500      	bpl.n	800c4e8 <dir_find+0x1a0>
 800c4e6:	b918      	cbnz	r0, 800c4f0 <dir_find+0x1a8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c4e8:	3e01      	subs	r6, #1
 800c4ea:	fa5f fa86 	uxtb.w	sl, r6
 800c4ee:	e745      	b.n	800c37c <dir_find+0x34>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c4f0:	9b03      	ldr	r3, [sp, #12]
 800c4f2:	f833 301a 	ldrh.w	r3, [r3, sl, lsl #1]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d0f6      	beq.n	800c4e8 <dir_find+0x1a0>
 800c4fa:	e7e1      	b.n	800c4c0 <dir_find+0x178>
 800c4fc:	08019954 	.word	0x08019954
 800c500:	08019948 	.word	0x08019948

0800c504 <follow_path>:
{
 800c504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c508:	780b      	ldrb	r3, [r1, #0]
{
 800c50a:	b083      	sub	sp, #12
 800c50c:	460f      	mov	r7, r1
 800c50e:	4606      	mov	r6, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c510:	2b5c      	cmp	r3, #92	; 0x5c
	FATFS *fs = obj->fs;
 800c512:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c516:	d001      	beq.n	800c51c <follow_path+0x18>
 800c518:	2b2f      	cmp	r3, #47	; 0x2f
 800c51a:	d105      	bne.n	800c528 <follow_path+0x24>
 800c51c:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 800c520:	2b2f      	cmp	r3, #47	; 0x2f
 800c522:	d0fb      	beq.n	800c51c <follow_path+0x18>
 800c524:	2b5c      	cmp	r3, #92	; 0x5c
 800c526:	d0f9      	beq.n	800c51c <follow_path+0x18>
		obj->sclust = 0;					/* Start from root directory */
 800c528:	2100      	movs	r1, #0
 800c52a:	60b1      	str	r1, [r6, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c52c:	783b      	ldrb	r3, [r7, #0]
 800c52e:	2b1f      	cmp	r3, #31
 800c530:	f240 813c 	bls.w	800c7ac <follow_path+0x2a8>
 800c534:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 800c536:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c538:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 800c53a:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 800c53c:	d929      	bls.n	800c592 <follow_path+0x8e>
 800c53e:	f1a5 0902 	sub.w	r9, r5, #2
 800c542:	46b8      	mov	r8, r7
		w = p[si++];					/* Get a character */
 800c544:	2401      	movs	r4, #1
 800c546:	e008      	b.n	800c55a <follow_path+0x56>
		lfn[di++] = w;					/* Store the Unicode character */
 800c548:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 800c54c:	1c63      	adds	r3, r4, #1
 800c54e:	f818 0f01 	ldrb.w	r0, [r8, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800c552:	281f      	cmp	r0, #31
 800c554:	f240 80ed 	bls.w	800c732 <follow_path+0x22e>
		w = p[si++];					/* Get a character */
 800c558:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c55a:	282f      	cmp	r0, #47	; 0x2f
 800c55c:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 800c560:	d01d      	beq.n	800c59e <follow_path+0x9a>
 800c562:	285c      	cmp	r0, #92	; 0x5c
 800c564:	d01b      	beq.n	800c59e <follow_path+0x9a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c566:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800c56a:	d00e      	beq.n	800c58a <follow_path+0x86>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c56c:	2101      	movs	r1, #1
 800c56e:	f000 ff73 	bl	800d458 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c572:	b150      	cbz	r0, 800c58a <follow_path+0x86>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c574:	287f      	cmp	r0, #127	; 0x7f
 800c576:	d8e7      	bhi.n	800c548 <follow_path+0x44>
	while (*str && *str != chr) str++;
 800c578:	2322      	movs	r3, #34	; 0x22
 800c57a:	4a9f      	ldr	r2, [pc, #636]	; (800c7f8 <follow_path+0x2f4>)
 800c57c:	e003      	b.n	800c586 <follow_path+0x82>
 800c57e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800c582:	2b00      	cmp	r3, #0
 800c584:	d0e0      	beq.n	800c548 <follow_path+0x44>
 800c586:	4298      	cmp	r0, r3
 800c588:	d1f9      	bne.n	800c57e <follow_path+0x7a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c58a:	2006      	movs	r0, #6
}
 800c58c:	b003      	add	sp, #12
 800c58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 800c592:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c594:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 800c596:	802b      	strh	r3, [r5, #0]
}
 800c598:	b003      	add	sp, #12
 800c59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c59e:	5d3b      	ldrb	r3, [r7, r4]
 800c5a0:	193a      	adds	r2, r7, r4
 800c5a2:	2b5c      	cmp	r3, #92	; 0x5c
 800c5a4:	d002      	beq.n	800c5ac <follow_path+0xa8>
 800c5a6:	2b2f      	cmp	r3, #47	; 0x2f
 800c5a8:	f040 8114 	bne.w	800c7d4 <follow_path+0x2d0>
 800c5ac:	1c63      	adds	r3, r4, #1
 800c5ae:	443b      	add	r3, r7
 800c5b0:	461f      	mov	r7, r3
 800c5b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5b6:	2a2f      	cmp	r2, #47	; 0x2f
 800c5b8:	d0fa      	beq.n	800c5b0 <follow_path+0xac>
 800c5ba:	2a5c      	cmp	r2, #92	; 0x5c
 800c5bc:	d0f8      	beq.n	800c5b0 <follow_path+0xac>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c5be:	f1ba 0f00 	cmp.w	sl, #0
 800c5c2:	d0e6      	beq.n	800c592 <follow_path+0x8e>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c5c4:	f04f 0800 	mov.w	r8, #0
 800c5c8:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 800c5cc:	e002      	b.n	800c5d4 <follow_path+0xd0>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c5ce:	f1ba 0a01 	subs.w	sl, sl, #1
 800c5d2:	d0de      	beq.n	800c592 <follow_path+0x8e>
		w = lfn[di - 1];
 800c5d4:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800c5d8:	2b20      	cmp	r3, #32
 800c5da:	d0f8      	beq.n	800c5ce <follow_path+0xca>
 800c5dc:	2b2e      	cmp	r3, #46	; 0x2e
 800c5de:	d0f6      	beq.n	800c5ce <follow_path+0xca>
		*d++ = (BYTE)val;
 800c5e0:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f825 201a 	strh.w	r2, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 800c5ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5ec:	6273      	str	r3, [r6, #36]	; 0x24
 800c5ee:	f8c6 302b 	str.w	r3, [r6, #43]	; 0x2b
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c5f2:	8828      	ldrh	r0, [r5, #0]
 800c5f4:	282e      	cmp	r0, #46	; 0x2e
 800c5f6:	d002      	beq.n	800c5fe <follow_path+0xfa>
 800c5f8:	2820      	cmp	r0, #32
 800c5fa:	f040 80e0 	bne.w	800c7be <follow_path+0x2ba>
 800c5fe:	462a      	mov	r2, r5
 800c600:	2300      	movs	r3, #0
 800c602:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800c606:	461c      	mov	r4, r3
 800c608:	3301      	adds	r3, #1
 800c60a:	2820      	cmp	r0, #32
 800c60c:	d0f9      	beq.n	800c602 <follow_path+0xfe>
 800c60e:	282e      	cmp	r0, #46	; 0x2e
 800c610:	d0f7      	beq.n	800c602 <follow_path+0xfe>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c612:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 800c616:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c618:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 800c61c:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800c620:	2a2e      	cmp	r2, #46	; 0x2e
 800c622:	d002      	beq.n	800c62a <follow_path+0x126>
 800c624:	f1ba 0a01 	subs.w	sl, sl, #1
 800c628:	d1f8      	bne.n	800c61c <follow_path+0x118>
		if (!w) break;					/* Break on end of the LFN */
 800c62a:	b3a0      	cbz	r0, 800c696 <follow_path+0x192>
 800c62c:	2208      	movs	r2, #8
 800c62e:	4639      	mov	r1, r7
 800c630:	2300      	movs	r3, #0
 800c632:	4637      	mov	r7, r6
 800c634:	462e      	mov	r6, r5
 800c636:	4615      	mov	r5, r2
 800c638:	4699      	mov	r9, r3
 800c63a:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c63c:	2820      	cmp	r0, #32
 800c63e:	d003      	beq.n	800c648 <follow_path+0x144>
 800c640:	282e      	cmp	r0, #46	; 0x2e
 800c642:	d14a      	bne.n	800c6da <follow_path+0x1d6>
 800c644:	45a2      	cmp	sl, r4
 800c646:	d048      	beq.n	800c6da <follow_path+0x1d6>
			cf |= NS_LOSS | NS_LFN; continue;
 800c648:	f048 0803 	orr.w	r8, r8, #3
		w = lfn[si++];					/* Get an LFN character */
 800c64c:	f836 0014 	ldrh.w	r0, [r6, r4, lsl #1]
 800c650:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 800c652:	2800      	cmp	r0, #0
 800c654:	d1f2      	bne.n	800c63c <follow_path+0x138>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c656:	463e      	mov	r6, r7
 800c658:	4617      	mov	r7, r2
 800c65a:	462a      	mov	r2, r5
 800c65c:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
 800c660:	29e5      	cmp	r1, #229	; 0xe5
 800c662:	d102      	bne.n	800c66a <follow_path+0x166>
 800c664:	2105      	movs	r1, #5
 800c666:	f886 1024 	strb.w	r1, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800c66a:	2a08      	cmp	r2, #8
 800c66c:	f000 808c 	beq.w	800c788 <follow_path+0x284>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c670:	f003 020c 	and.w	r2, r3, #12
 800c674:	2a0c      	cmp	r2, #12
 800c676:	d061      	beq.n	800c73c <follow_path+0x238>
 800c678:	f003 0303 	and.w	r3, r3, #3
 800c67c:	2b03      	cmp	r3, #3
 800c67e:	d05d      	beq.n	800c73c <follow_path+0x238>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c680:	f018 0f02 	tst.w	r8, #2
 800c684:	d107      	bne.n	800c696 <follow_path+0x192>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c686:	2b01      	cmp	r3, #1
 800c688:	bf08      	it	eq
 800c68a:	f048 0810 	orreq.w	r8, r8, #16
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c68e:	2a04      	cmp	r2, #4
 800c690:	bf08      	it	eq
 800c692:	f048 0808 	orreq.w	r8, r8, #8
			res = dir_find(dp);				/* Find an object with the segment name */
 800c696:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c698:	f886 802f 	strb.w	r8, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800c69c:	f7ff fe54 	bl	800c348 <dir_find>
			ns = dp->fn[NSFLAG];
 800c6a0:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	d154      	bne.n	800c752 <follow_path+0x24e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c6a8:	075a      	lsls	r2, r3, #29
 800c6aa:	f53f af6f 	bmi.w	800c58c <follow_path+0x88>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c6ae:	79b3      	ldrb	r3, [r6, #6]
 800c6b0:	06db      	lsls	r3, r3, #27
 800c6b2:	f140 8091 	bpl.w	800c7d8 <follow_path+0x2d4>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c6b6:	6972      	ldr	r2, [r6, #20]
 800c6b8:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 800c6bc:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c6c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 800c6c4:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c6c6:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800c6c8:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800c6ca:	d102      	bne.n	800c6d2 <follow_path+0x1ce>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c6cc:	8a9b      	ldrh	r3, [r3, #20]
 800c6ce:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c6d2:	60b2      	str	r2, [r6, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c6d4:	6832      	ldr	r2, [r6, #0]
		w = p[si++];					/* Get a character */
 800c6d6:	783b      	ldrb	r3, [r7, #0]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c6d8:	e72d      	b.n	800c536 <follow_path+0x32>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c6da:	45a9      	cmp	r9, r5
 800c6dc:	d21b      	bcs.n	800c716 <follow_path+0x212>
 800c6de:	ebaa 0104 	sub.w	r1, sl, r4
 800c6e2:	fab1 f181 	clz	r1, r1
 800c6e6:	0949      	lsrs	r1, r1, #5
 800c6e8:	b9a9      	cbnz	r1, 800c716 <follow_path+0x212>
		if (w >= 0x80) {				/* Non ASCII character */
 800c6ea:	287f      	cmp	r0, #127	; 0x7f
 800c6ec:	d839      	bhi.n	800c762 <follow_path+0x25e>
	while (*str && *str != chr) str++;
 800c6ee:	212b      	movs	r1, #43	; 0x2b
 800c6f0:	f8df c10c 	ldr.w	ip, [pc, #268]	; 800c800 <follow_path+0x2fc>
 800c6f4:	e003      	b.n	800c6fe <follow_path+0x1fa>
 800c6f6:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800c6fa:	2900      	cmp	r1, #0
 800c6fc:	d04e      	beq.n	800c79c <follow_path+0x298>
 800c6fe:	4281      	cmp	r1, r0
 800c700:	d1f9      	bne.n	800c6f6 <follow_path+0x1f2>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c702:	f048 0803 	orr.w	r8, r8, #3
 800c706:	205f      	movs	r0, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800c708:	eb07 0109 	add.w	r1, r7, r9
 800c70c:	f109 0901 	add.w	r9, r9, #1
 800c710:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 800c714:	e79a      	b.n	800c64c <follow_path+0x148>
			if (ni == 11) {				/* Long extension */
 800c716:	2d0b      	cmp	r5, #11
 800c718:	d060      	beq.n	800c7dc <follow_path+0x2d8>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c71a:	45a2      	cmp	sl, r4
 800c71c:	d002      	beq.n	800c724 <follow_path+0x220>
 800c71e:	f048 0803 	orr.w	r8, r8, #3
			if (si > di) break;			/* No extension */
 800c722:	d398      	bcc.n	800c656 <follow_path+0x152>
			b <<= 2; continue;
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c728:	250b      	movs	r5, #11
 800c72a:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	e78c      	b.n	800c64c <follow_path+0x148>
	*path = &p[si];						/* Return pointer to the next segment */
 800c732:	441f      	add	r7, r3
 800c734:	46a2      	mov	sl, r4
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c736:	f04f 0804 	mov.w	r8, #4
 800c73a:	e745      	b.n	800c5c8 <follow_path+0xc4>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c73c:	f048 0802 	orr.w	r8, r8, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 800c740:	4630      	mov	r0, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c742:	f886 802f 	strb.w	r8, [r6, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800c746:	f7ff fdff 	bl	800c348 <dir_find>
			ns = dp->fn[NSFLAG];
 800c74a:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800c74e:	2800      	cmp	r0, #0
 800c750:	d0aa      	beq.n	800c6a8 <follow_path+0x1a4>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c752:	2804      	cmp	r0, #4
 800c754:	f47f af1a 	bne.w	800c58c <follow_path+0x88>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c758:	f013 0f04 	tst.w	r3, #4
 800c75c:	bf08      	it	eq
 800c75e:	2005      	moveq	r0, #5
 800c760:	e714      	b.n	800c58c <follow_path+0x88>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c762:	e9cd 3200 	strd	r3, r2, [sp]
 800c766:	f000 fe77 	bl	800d458 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c76a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c76e:	b910      	cbnz	r0, 800c776 <follow_path+0x272>
			cf |= NS_LFN;				/* Force create LFN entry */
 800c770:	f048 0802 	orr.w	r8, r8, #2
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c774:	e7c5      	b.n	800c702 <follow_path+0x1fe>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c776:	4921      	ldr	r1, [pc, #132]	; (800c7fc <follow_path+0x2f8>)
			cf |= NS_LFN;				/* Force create LFN entry */
 800c778:	f048 0802 	orr.w	r8, r8, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c77c:	4408      	add	r0, r1
 800c77e:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c782:	2800      	cmp	r0, #0
 800c784:	d0bd      	beq.n	800c702 <follow_path+0x1fe>
 800c786:	e7b2      	b.n	800c6ee <follow_path+0x1ea>
	if (ni == 8) b <<= 2;
 800c788:	009a      	lsls	r2, r3, #2
 800c78a:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c78e:	2a0c      	cmp	r2, #12
 800c790:	d0d4      	beq.n	800c73c <follow_path+0x238>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c792:	f018 0f02 	tst.w	r8, #2
 800c796:	f43f af7a 	beq.w	800c68e <follow_path+0x18a>
 800c79a:	e77c      	b.n	800c696 <follow_path+0x192>
				if (IsUpper(w)) {		/* ASCII large capital */
 800c79c:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800c7a0:	2919      	cmp	r1, #25
 800c7a2:	d80e      	bhi.n	800c7c2 <follow_path+0x2be>
					b |= 2;
 800c7a4:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 800c7a8:	b2c0      	uxtb	r0, r0
 800c7aa:	e7ad      	b.n	800c708 <follow_path+0x204>
		dp->fn[NSFLAG] = NS_NONAME;
 800c7ac:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800c7ae:	4630      	mov	r0, r6
		dp->fn[NSFLAG] = NS_NONAME;
 800c7b0:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
}
 800c7b4:	b003      	add	sp, #12
 800c7b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800c7ba:	f7ff b8cf 	b.w	800b95c <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c7be:	2401      	movs	r4, #1
 800c7c0:	e72a      	b.n	800c618 <follow_path+0x114>
					if (IsLower(w)) {	/* ASCII small capital */
 800c7c2:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800c7c6:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800c7c8:	bf9c      	itt	ls
 800c7ca:	3820      	subls	r0, #32
 800c7cc:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 800c7d0:	b2c0      	uxtb	r0, r0
 800c7d2:	e799      	b.n	800c708 <follow_path+0x204>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c7d4:	4617      	mov	r7, r2
 800c7d6:	e6f2      	b.n	800c5be <follow_path+0xba>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c7d8:	2005      	movs	r0, #5
 800c7da:	e6d7      	b.n	800c58c <follow_path+0x88>
				cf |= NS_LOSS | NS_LFN; break;
 800c7dc:	463e      	mov	r6, r7
 800c7de:	4617      	mov	r7, r2
 800c7e0:	f048 0803 	orr.w	r8, r8, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c7e4:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
 800c7e8:	2ae5      	cmp	r2, #229	; 0xe5
 800c7ea:	f47f af41 	bne.w	800c670 <follow_path+0x16c>
 800c7ee:	2205      	movs	r2, #5
 800c7f0:	f886 2024 	strb.w	r2, [r6, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800c7f4:	e73c      	b.n	800c670 <follow_path+0x16c>
 800c7f6:	bf00      	nop
 800c7f8:	080198b4 	.word	0x080198b4
 800c7fc:	080198c8 	.word	0x080198c8
 800c800:	080198c0 	.word	0x080198c0

0800c804 <dir_register>:
{
 800c804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c808:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 800c80c:	b08b      	sub	sp, #44	; 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c80e:	f013 01a0 	ands.w	r1, r3, #160	; 0xa0
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	f040 815b 	bne.w	800cace <dir_register+0x2ca>
	FATFS *fs = dp->obj.fs;
 800c818:	6806      	ldr	r6, [r0, #0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c81a:	4604      	mov	r4, r0
 800c81c:	68f2      	ldr	r2, [r6, #12]
 800c81e:	8813      	ldrh	r3, [r2, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	f000 815a 	beq.w	800cada <dir_register+0x2d6>
 800c826:	468b      	mov	fp, r1
 800c828:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800c82c:	f10b 0b01 	add.w	fp, fp, #1
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1f9      	bne.n	800c828 <dir_register+0x24>
	mem_cpy(sn, dp->fn, 12);
 800c834:	f104 0524 	add.w	r5, r4, #36	; 0x24
			*d++ = *s++;
 800c838:	f10d 0a1c 	add.w	sl, sp, #28
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c83c:	9b00      	ldr	r3, [sp, #0]
			*d++ = *s++;
 800c83e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c842:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c846:	07d9      	lsls	r1, r3, #31
 800c848:	d578      	bpl.n	800c93c <dir_register+0x138>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c84a:	2240      	movs	r2, #64	; 0x40
		for (n = 1; n < 100; n++) {
 800c84c:	f04f 0801 	mov.w	r8, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c850:	4fa3      	ldr	r7, [pc, #652]	; (800cae0 <dir_register+0x2dc>)
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c852:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
			*d++ = *s++;
 800c856:	46ac      	mov	ip, r5
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c858:	68f3      	ldr	r3, [r6, #12]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c85a:	f1b8 0f05 	cmp.w	r8, #5
			*d++ = *s++;
 800c85e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 800c862:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800c866:	ea4f 4112 	mov.w	r1, r2, lsr #16
 800c86a:	f82c 2b02 	strh.w	r2, [ip], #2
 800c86e:	f88c 1000 	strb.w	r1, [ip]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c872:	f240 8128 	bls.w	800cac6 <dir_register+0x2c2>
		while (*lfn) {	/* Create a CRC */
 800c876:	8819      	ldrh	r1, [r3, #0]
 800c878:	2900      	cmp	r1, #0
 800c87a:	f000 8124 	beq.w	800cac6 <dir_register+0x2c2>
 800c87e:	469c      	mov	ip, r3
 800c880:	4643      	mov	r3, r8
 800c882:	2010      	movs	r0, #16
				sr = (sr << 1) + (wc & 1);
 800c884:	f001 0201 	and.w	r2, r1, #1
 800c888:	0849      	lsrs	r1, r1, #1
 800c88a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800c88e:	03da      	lsls	r2, r3, #15
 800c890:	bf48      	it	mi
 800c892:	407b      	eormi	r3, r7
			for (i = 0; i < 16; i++) {
 800c894:	3801      	subs	r0, #1
 800c896:	d1f5      	bne.n	800c884 <dir_register+0x80>
		while (*lfn) {	/* Create a CRC */
 800c898:	f83c 1f02 	ldrh.w	r1, [ip, #2]!
 800c89c:	2900      	cmp	r1, #0
 800c89e:	d1f0      	bne.n	800c882 <dir_register+0x7e>
 800c8a0:	46d4      	mov	ip, sl
 800c8a2:	2207      	movs	r2, #7
		c = (BYTE)((seq % 16) + '0');
 800c8a4:	f003 000f 	and.w	r0, r3, #15
		seq /= 16;
 800c8a8:	ea4f 1e13 	mov.w	lr, r3, lsr #4
		ns[i--] = c;
 800c8ac:	3a01      	subs	r2, #1
		c = (BYTE)((seq % 16) + '0');
 800c8ae:	f100 0130 	add.w	r1, r0, #48	; 0x30
		if (c > '9') c += 7;
 800c8b2:	2939      	cmp	r1, #57	; 0x39
 800c8b4:	bf88      	it	hi
 800c8b6:	f100 0137 	addhi.w	r1, r0, #55	; 0x37
	} while (seq);
 800c8ba:	2b0f      	cmp	r3, #15
		seq /= 16;
 800c8bc:	4673      	mov	r3, lr
		ns[i--] = c;
 800c8be:	f80c 1d01 	strb.w	r1, [ip, #-1]!
	} while (seq);
 800c8c2:	d8ef      	bhi.n	800c8a4 <dir_register+0xa0>
	ns[i] = '~';
 800c8c4:	f102 0328 	add.w	r3, r2, #40	; 0x28
 800c8c8:	217e      	movs	r1, #126	; 0x7e
 800c8ca:	446b      	add	r3, sp
 800c8cc:	f803 1c14 	strb.w	r1, [r3, #-20]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c8d0:	2a00      	cmp	r2, #0
 800c8d2:	f000 80fa 	beq.w	800caca <dir_register+0x2c6>
 800c8d6:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800c8da:	2300      	movs	r3, #0
 800c8dc:	e002      	b.n	800c8e4 <dir_register+0xe0>
 800c8de:	3301      	adds	r3, #1
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d003      	beq.n	800c8ec <dir_register+0xe8>
 800c8e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c8e8:	2820      	cmp	r0, #32
 800c8ea:	d1f8      	bne.n	800c8de <dir_register+0xda>
 800c8ec:	3323      	adds	r3, #35	; 0x23
 800c8ee:	4423      	add	r3, r4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c8f0:	f102 0128 	add.w	r1, r2, #40	; 0x28
 800c8f4:	2a07      	cmp	r2, #7
 800c8f6:	f04f 0020 	mov.w	r0, #32
 800c8fa:	4469      	add	r1, sp
 800c8fc:	d802      	bhi.n	800c904 <dir_register+0x100>
 800c8fe:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 800c902:	3201      	adds	r2, #1
	} while (j < 8);
 800c904:	f1a3 0122 	sub.w	r1, r3, #34	; 0x22
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c908:	7058      	strb	r0, [r3, #1]
 800c90a:	3301      	adds	r3, #1
	} while (j < 8);
 800c90c:	1b09      	subs	r1, r1, r4
 800c90e:	2907      	cmp	r1, #7
 800c910:	d9ee      	bls.n	800c8f0 <dir_register+0xec>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c912:	4620      	mov	r0, r4
 800c914:	f7ff fd18 	bl	800c348 <dir_find>
			if (res != FR_OK) break;
 800c918:	b950      	cbnz	r0, 800c930 <dir_register+0x12c>
		for (n = 1; n < 100; n++) {
 800c91a:	f108 0801 	add.w	r8, r8, #1
 800c91e:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
 800c922:	d198      	bne.n	800c856 <dir_register+0x52>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c924:	f04f 0907 	mov.w	r9, #7
}
 800c928:	4648      	mov	r0, r9
 800c92a:	b00b      	add	sp, #44	; 0x2c
 800c92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c930:	2804      	cmp	r0, #4
 800c932:	4681      	mov	r9, r0
 800c934:	d1f8      	bne.n	800c928 <dir_register+0x124>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c936:	9b00      	ldr	r3, [sp, #0]
 800c938:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c93c:	9b00      	ldr	r3, [sp, #0]
 800c93e:	079b      	lsls	r3, r3, #30
 800c940:	f140 80b1 	bpl.w	800caa6 <dir_register+0x2a2>
 800c944:	f10b 0b0c 	add.w	fp, fp, #12
 800c948:	4a66      	ldr	r2, [pc, #408]	; (800cae4 <dir_register+0x2e0>)
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c94a:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c94c:	fba2 320b 	umull	r3, r2, r2, fp
 800c950:	0893      	lsrs	r3, r2, #2
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c952:	1c59      	adds	r1, r3, #1
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c954:	9300      	str	r3, [sp, #0]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c956:	f7ff fc2f 	bl	800c1b8 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c95a:	4681      	mov	r9, r0
 800c95c:	2800      	cmp	r0, #0
 800c95e:	d1e3      	bne.n	800c928 <dir_register+0x124>
 800c960:	f1bb 0f0c 	cmp.w	fp, #12
 800c964:	d07f      	beq.n	800ca66 <dir_register+0x262>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c966:	6961      	ldr	r1, [r4, #20]
 800c968:	4620      	mov	r0, r4
 800c96a:	9b00      	ldr	r3, [sp, #0]
 800c96c:	eba1 1143 	sub.w	r1, r1, r3, lsl #5
 800c970:	f7fe fff4 	bl	800b95c <dir_sdi>
		if (res == FR_OK) {
 800c974:	4681      	mov	r9, r0
 800c976:	2800      	cmp	r0, #0
 800c978:	d1d6      	bne.n	800c928 <dir_register+0x124>
 800c97a:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 800c97e:	462a      	mov	r2, r5
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c980:	01c3      	lsls	r3, r0, #7
 800c982:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800c986:	f812 0b01 	ldrb.w	r0, [r2], #1
 800c98a:	fa50 f383 	uxtab	r3, r0, r3
	} while (--n);
 800c98e:	428a      	cmp	r2, r1
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c990:	b2d8      	uxtb	r0, r3
	} while (--n);
 800c992:	d1f5      	bne.n	800c980 <dir_register+0x17c>
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c994:	f8df b150 	ldr.w	fp, [pc, #336]	; 800cae8 <dir_register+0x2e4>
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c998:	9001      	str	r0, [sp, #4]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c99a:	9503      	str	r5, [sp, #12]
				res = move_window(fs, dp->sect);
 800c99c:	69e1      	ldr	r1, [r4, #28]
 800c99e:	4630      	mov	r0, r6
 800c9a0:	f7fe ff6a 	bl	800b878 <move_window>
 800c9a4:	4681      	mov	r9, r0
				if (res != FR_OK) break;
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	d1be      	bne.n	800c928 <dir_register+0x124>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c9aa:	f89d a000 	ldrb.w	sl, [sp]
	s = wc = 0;
 800c9ae:	4602      	mov	r2, r0
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c9b0:	6a21      	ldr	r1, [r4, #32]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c9b2:	2701      	movs	r7, #1
 800c9b4:	f10a 35ff 	add.w	r5, sl, #4294967295	; 0xffffffff
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c9b8:	9b01      	ldr	r3, [sp, #4]
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c9ba:	f8d6 800c 	ldr.w	r8, [r6, #12]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c9be:	f64f 79ff 	movw	r9, #65535	; 0xffff
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c9c2:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c9c6:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c9c8:	f04f 030f 	mov.w	r3, #15
	*ptr++ = (BYTE)val; val >>= 8;
 800c9cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c9d0:	eb05 058e 	add.w	r5, r5, lr, lsl #2
	s = wc = 0;
 800c9d4:	9002      	str	r0, [sp, #8]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c9d6:	72cb      	strb	r3, [r1, #11]
	*ptr++ = (BYTE)val;
 800c9d8:	4603      	mov	r3, r0
	dir[LDIR_Type] = 0;
 800c9da:	7308      	strb	r0, [r1, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9dc:	7688      	strb	r0, [r1, #26]
	*ptr++ = (BYTE)val;
 800c9de:	76c8      	strb	r0, [r1, #27]
	s = wc = 0;
 800c9e0:	e018      	b.n	800ca14 <dir_register+0x210>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c9e2:	f838 2015 	ldrh.w	r2, [r8, r5, lsl #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800c9e6:	0a15      	lsrs	r5, r2, #8
 800c9e8:	55ca      	strb	r2, [r1, r7]
	*ptr++ = (BYTE)val;
 800c9ea:	f88e 5001 	strb.w	r5, [lr, #1]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c9ee:	b95a      	cbnz	r2, 800ca08 <dir_register+0x204>
	} while (++s < 13);
 800c9f0:	3301      	adds	r3, #1
	*ptr++ = (BYTE)val;
 800c9f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
	} while (++s < 13);
 800c9f6:	2b0d      	cmp	r3, #13
 800c9f8:	d022      	beq.n	800ca40 <dir_register+0x23c>
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c9fa:	f81b 5003 	ldrb.w	r5, [fp, r3]
 800c9fe:	194f      	adds	r7, r1, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800ca00:	f801 c005 	strb.w	ip, [r1, r5]
	*ptr++ = (BYTE)val;
 800ca04:	f887 c001 	strb.w	ip, [r7, #1]
	} while (++s < 13);
 800ca08:	3301      	adds	r3, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ca0a:	4605      	mov	r5, r0
	} while (++s < 13);
 800ca0c:	2b0d      	cmp	r3, #13
 800ca0e:	d010      	beq.n	800ca32 <dir_register+0x22e>
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ca10:	f81b 7003 	ldrb.w	r7, [fp, r3]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ca14:	454a      	cmp	r2, r9
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ca16:	eb01 0e07 	add.w	lr, r1, r7
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ca1a:	f105 0001 	add.w	r0, r5, #1
 800ca1e:	d1e0      	bne.n	800c9e2 <dir_register+0x1de>
	} while (++s < 13);
 800ca20:	3301      	adds	r3, #1
	*ptr++ = (BYTE)val;
 800ca22:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800ca24:	f801 c007 	strb.w	ip, [r1, r7]
	} while (++s < 13);
 800ca28:	2b0d      	cmp	r3, #13
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ca2a:	4605      	mov	r5, r0
	*ptr++ = (BYTE)val;
 800ca2c:	f88e c001 	strb.w	ip, [lr, #1]
	} while (++s < 13);
 800ca30:	d1ee      	bne.n	800ca10 <dir_register+0x20c>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ca32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d002      	beq.n	800ca40 <dir_register+0x23c>
 800ca3a:	f838 3010 	ldrh.w	r3, [r8, r0, lsl #1]
 800ca3e:	b90b      	cbnz	r3, 800ca44 <dir_register+0x240>
 800ca40:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
				fs->wflag = 1;
 800ca44:	2301      	movs	r3, #1
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ca46:	f881 a000 	strb.w	sl, [r1]
				res = dir_next(dp, 0);	/* Next entry */
 800ca4a:	4620      	mov	r0, r4
 800ca4c:	2100      	movs	r1, #0
				fs->wflag = 1;
 800ca4e:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ca50:	f7ff fb12 	bl	800c078 <dir_next>
			} while (res == FR_OK && --nent);
 800ca54:	4681      	mov	r9, r0
 800ca56:	2800      	cmp	r0, #0
 800ca58:	f47f af66 	bne.w	800c928 <dir_register+0x124>
 800ca5c:	9b00      	ldr	r3, [sp, #0]
 800ca5e:	3b01      	subs	r3, #1
 800ca60:	9300      	str	r3, [sp, #0]
 800ca62:	d19b      	bne.n	800c99c <dir_register+0x198>
 800ca64:	9d03      	ldr	r5, [sp, #12]
		res = move_window(fs, dp->sect);
 800ca66:	69e1      	ldr	r1, [r4, #28]
 800ca68:	4630      	mov	r0, r6
 800ca6a:	f7fe ff05 	bl	800b878 <move_window>
		if (res == FR_OK) {
 800ca6e:	4681      	mov	r9, r0
 800ca70:	2800      	cmp	r0, #0
 800ca72:	f47f af59 	bne.w	800c928 <dir_register+0x124>
		*d++ = (BYTE)val;
 800ca76:	4601      	mov	r1, r0
 800ca78:	2220      	movs	r2, #32
 800ca7a:	6a20      	ldr	r0, [r4, #32]
 800ca7c:	f009 ff18 	bl	80168b0 <memset>
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ca80:	6a23      	ldr	r3, [r4, #32]
 800ca82:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 800ca86:	3b01      	subs	r3, #1
			*d++ = *s++;
 800ca88:	f815 2b01 	ldrb.w	r2, [r5], #1
		} while (--cnt);
 800ca8c:	42a9      	cmp	r1, r5
			*d++ = *s++;
 800ca8e:	f803 2f01 	strb.w	r2, [r3, #1]!
		} while (--cnt);
 800ca92:	d1f9      	bne.n	800ca88 <dir_register+0x284>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ca94:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			fs->wflag = 1;
 800ca98:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ca9a:	6a21      	ldr	r1, [r4, #32]
 800ca9c:	f003 0318 	and.w	r3, r3, #24
 800caa0:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 800caa2:	70f2      	strb	r2, [r6, #3]
 800caa4:	e740      	b.n	800c928 <dir_register+0x124>
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800caa6:	2101      	movs	r1, #1
 800caa8:	4620      	mov	r0, r4
 800caaa:	f7ff fb85 	bl	800c1b8 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800caae:	4681      	mov	r9, r0
 800cab0:	2800      	cmp	r0, #0
 800cab2:	f47f af39 	bne.w	800c928 <dir_register+0x124>
		res = move_window(fs, dp->sect);
 800cab6:	69e1      	ldr	r1, [r4, #28]
 800cab8:	4630      	mov	r0, r6
 800caba:	f7fe fedd 	bl	800b878 <move_window>
		if (res == FR_OK) {
 800cabe:	4681      	mov	r9, r0
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d0d8      	beq.n	800ca76 <dir_register+0x272>
 800cac4:	e730      	b.n	800c928 <dir_register+0x124>
		while (*lfn) {	/* Create a CRC */
 800cac6:	4643      	mov	r3, r8
 800cac8:	e6ea      	b.n	800c8a0 <dir_register+0x9c>
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800caca:	4613      	mov	r3, r2
 800cacc:	e70e      	b.n	800c8ec <dir_register+0xe8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cace:	f04f 0906 	mov.w	r9, #6
}
 800cad2:	4648      	mov	r0, r9
 800cad4:	b00b      	add	sp, #44	; 0x2c
 800cad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cada:	469b      	mov	fp, r3
 800cadc:	e6aa      	b.n	800c834 <dir_register+0x30>
 800cade:	bf00      	nop
 800cae0:	00011021 	.word	0x00011021
 800cae4:	4ec4ec4f 	.word	0x4ec4ec4f
 800cae8:	08019948 	.word	0x08019948

0800caec <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800caec:	b530      	push	{r4, r5, lr}
 800caee:	b085      	sub	sp, #20
 800caf0:	4615      	mov	r5, r2
 800caf2:	9001      	str	r0, [sp, #4]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800caf4:	a803      	add	r0, sp, #12
{
 800caf6:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 800caf8:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 800cafa:	f7fe fd7b 	bl	800b5f4 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800cafe:	1e03      	subs	r3, r0, #0
 800cb00:	db22      	blt.n	800cb48 <f_mount+0x5c>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cb02:	4c16      	ldr	r4, [pc, #88]	; (800cb5c <f_mount+0x70>)
 800cb04:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]

	if (cfs) {
 800cb08:	b141      	cbz	r1, 800cb1c <f_mount+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cb0a:	4a15      	ldr	r2, [pc, #84]	; (800cb60 <f_mount+0x74>)
 800cb0c:	6810      	ldr	r0, [r2, #0]
 800cb0e:	4281      	cmp	r1, r0
 800cb10:	d020      	beq.n	800cb54 <f_mount+0x68>
 800cb12:	6910      	ldr	r0, [r2, #16]
 800cb14:	4281      	cmp	r1, r0
 800cb16:	d01a      	beq.n	800cb4e <f_mount+0x62>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cb18:	2200      	movs	r2, #0
 800cb1a:	700a      	strb	r2, [r1, #0]
	}

	if (fs) {
 800cb1c:	9901      	ldr	r1, [sp, #4]
 800cb1e:	b159      	cbz	r1, 800cb38 <f_mount+0x4c>
		fs->fs_type = 0;				/* Clear new fs object */
 800cb20:	2200      	movs	r2, #0
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cb22:	2d01      	cmp	r5, #1
		fs->fs_type = 0;				/* Clear new fs object */
 800cb24:	700a      	strb	r2, [r1, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 800cb26:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cb2a:	d10a      	bne.n	800cb42 <f_mount+0x56>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cb2c:	a901      	add	r1, sp, #4
 800cb2e:	4668      	mov	r0, sp
 800cb30:	f7ff f81e 	bl	800bb70 <find_volume>
	LEAVE_FF(fs, res);
}
 800cb34:	b005      	add	sp, #20
 800cb36:	bd30      	pop	{r4, r5, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cb38:	4608      	mov	r0, r1
	FatFs[vol] = fs;					/* Register new fs object */
 800cb3a:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
}
 800cb3e:	b005      	add	sp, #20
 800cb40:	bd30      	pop	{r4, r5, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cb42:	4610      	mov	r0, r2
}
 800cb44:	b005      	add	sp, #20
 800cb46:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 800cb48:	200b      	movs	r0, #11
}
 800cb4a:	b005      	add	sp, #20
 800cb4c:	bd30      	pop	{r4, r5, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cb4e:	2000      	movs	r0, #0
 800cb50:	6110      	str	r0, [r2, #16]
 800cb52:	e7e1      	b.n	800cb18 <f_mount+0x2c>
 800cb54:	2000      	movs	r0, #0
 800cb56:	6010      	str	r0, [r2, #0]
 800cb58:	e7db      	b.n	800cb12 <f_mount+0x26>
 800cb5a:	bf00      	nop
 800cb5c:	2001ddbc 	.word	0x2001ddbc
 800cb60:	2001ddc0 	.word	0x2001ddc0

0800cb64 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb68:	b092      	sub	sp, #72	; 0x48
 800cb6a:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d03a      	beq.n	800cbe6 <f_open+0x82>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cb70:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800cb74:	4616      	mov	r6, r2
 800cb76:	4604      	mov	r4, r0
 800cb78:	a903      	add	r1, sp, #12
 800cb7a:	a801      	add	r0, sp, #4
 800cb7c:	463a      	mov	r2, r7
 800cb7e:	f7fe fff7 	bl	800bb70 <find_volume>
	if (res == FR_OK) {
 800cb82:	4605      	mov	r5, r0
 800cb84:	b128      	cbz	r0, 800cb92 <f_open+0x2e>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cb86:	2300      	movs	r3, #0
 800cb88:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	b012      	add	sp, #72	; 0x48
 800cb8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 800cb92:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800cb96:	a804      	add	r0, sp, #16
 800cb98:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800cb9a:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800cb9e:	f7ff fcb1 	bl	800c504 <follow_path>
 800cba2:	4603      	mov	r3, r0
		if (res == FR_OK) {
 800cba4:	b9d0      	cbnz	r0, 800cbdc <f_open+0x78>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cba6:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	db3c      	blt.n	800cc28 <f_open+0xc4>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cbae:	f017 0f3e 	tst.w	r7, #62	; 0x3e
 800cbb2:	a804      	add	r0, sp, #16
 800cbb4:	bf14      	ite	ne
 800cbb6:	2101      	movne	r1, #1
 800cbb8:	2100      	moveq	r1, #0
 800cbba:	f7fe fc85 	bl	800b4c8 <chk_lock>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cbbe:	f016 0f1c 	tst.w	r6, #28
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cbc2:	4603      	mov	r3, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cbc4:	d014      	beq.n	800cbf0 <f_open+0x8c>
			if (res != FR_OK) {					/* No file, create new */
 800cbc6:	bb88      	cbnz	r0, 800cc2c <f_open+0xc8>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cbc8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800cbcc:	f013 0f11 	tst.w	r3, #17
 800cbd0:	d138      	bne.n	800cc44 <f_open+0xe0>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cbd2:	0773      	lsls	r3, r6, #29
 800cbd4:	f140 80d4 	bpl.w	800cd80 <f_open+0x21c>
 800cbd8:	2508      	movs	r5, #8
 800cbda:	e7d4      	b.n	800cb86 <f_open+0x22>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cbdc:	f016 0f1c 	tst.w	r6, #28
 800cbe0:	d124      	bne.n	800cc2c <f_open+0xc8>
 800cbe2:	4605      	mov	r5, r0
 800cbe4:	e7cf      	b.n	800cb86 <f_open+0x22>
	if (!fp) return FR_INVALID_OBJECT;
 800cbe6:	2509      	movs	r5, #9
}
 800cbe8:	4628      	mov	r0, r5
 800cbea:	b012      	add	sp, #72	; 0x48
 800cbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (res == FR_OK) {					/* Following succeeded */
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	d1f6      	bne.n	800cbe2 <f_open+0x7e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cbf4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800cbf8:	06d8      	lsls	r0, r3, #27
 800cbfa:	d425      	bmi.n	800cc48 <f_open+0xe4>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cbfc:	07b2      	lsls	r2, r6, #30
 800cbfe:	d501      	bpl.n	800cc04 <f_open+0xa0>
 800cc00:	07db      	lsls	r3, r3, #31
 800cc02:	d41f      	bmi.n	800cc44 <f_open+0xe0>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cc04:	073e      	lsls	r6, r7, #28
 800cc06:	f140 80b5 	bpl.w	800cd74 <f_open+0x210>
				mode |= FA_MODIFIED;
 800cc0a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 800cc0e:	2101      	movs	r1, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cc10:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cc14:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cc16:	6263      	str	r3, [r4, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cc18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc1a:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cc1c:	f7fe fc92 	bl	800b544 <inc_lock>
 800cc20:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cc22:	b998      	cbnz	r0, 800cc4c <f_open+0xe8>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cc24:	2502      	movs	r5, #2
 800cc26:	e7ae      	b.n	800cb86 <f_open+0x22>
				res = FR_INVALID_NAME;
 800cc28:	2506      	movs	r5, #6
 800cc2a:	e7ac      	b.n	800cb86 <f_open+0x22>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cc2c:	2b04      	cmp	r3, #4
 800cc2e:	f040 80b1 	bne.w	800cd94 <f_open+0x230>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cc32:	4b6b      	ldr	r3, [pc, #428]	; (800cde0 <f_open+0x27c>)
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	2a00      	cmp	r2, #0
 800cc38:	d049      	beq.n	800ccce <f_open+0x16a>
 800cc3a:	691b      	ldr	r3, [r3, #16]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d046      	beq.n	800ccce <f_open+0x16a>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cc40:	2512      	movs	r5, #18
 800cc42:	e7a0      	b.n	800cb86 <f_open+0x22>
					res = FR_DENIED;
 800cc44:	2507      	movs	r5, #7
 800cc46:	e79e      	b.n	800cb86 <f_open+0x22>
					res = FR_NO_FILE;
 800cc48:	2504      	movs	r5, #4
 800cc4a:	e79c      	b.n	800cb86 <f_open+0x22>
	if (fs->fs_type == FS_FAT32) {
 800cc4c:	f898 2000 	ldrb.w	r2, [r8]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cc50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800cc52:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800cc54:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800cc56:	d102      	bne.n	800cc5e <f_open+0xfa>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cc58:	8a9a      	ldrh	r2, [r3, #20]
 800cc5a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cc5e:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cc60:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 800cc62:	f8d3 901c 	ldr.w	r9, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cc66:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cc6a:	f8c4 8000 	str.w	r8, [r4]
		*d++ = (BYTE)val;
 800cc6e:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cc72:	f8c4 900c 	str.w	r9, [r4, #12]
		*d++ = (BYTE)val;
 800cc76:	4650      	mov	r0, sl
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cc78:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.id = fs->id;
 800cc7a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
			fp->flag = mode;		/* Set file access mode */
 800cc7e:	7527      	strb	r7, [r4, #20]
			fp->obj.id = fs->id;
 800cc80:	80a3      	strh	r3, [r4, #4]
			fp->err = 0;			/* Clear error flag */
 800cc82:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cc84:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cc86:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 800cc88:	f009 fe12 	bl	80168b0 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cc8c:	06b8      	lsls	r0, r7, #26
 800cc8e:	f57f af7c 	bpl.w	800cb8a <f_open+0x26>
 800cc92:	f1b9 0f00 	cmp.w	r9, #0
 800cc96:	f43f af78 	beq.w	800cb8a <f_open+0x26>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cc9a:	f8c4 9018 	str.w	r9, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cc9e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cca2:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cca6:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ccaa:	d804      	bhi.n	800ccb6 <f_open+0x152>
 800ccac:	e074      	b.n	800cd98 <f_open+0x234>
 800ccae:	1c41      	adds	r1, r0, #1
 800ccb0:	d06a      	beq.n	800cd88 <f_open+0x224>
 800ccb2:	454f      	cmp	r7, r9
 800ccb4:	d268      	bcs.n	800cd88 <f_open+0x224>
					clst = get_fat(&fp->obj, clst);
 800ccb6:	4631      	mov	r1, r6
 800ccb8:	6820      	ldr	r0, [r4, #0]
 800ccba:	f7fe fdf9 	bl	800b8b0 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800ccbe:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ccc0:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
 800ccc4:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 800ccc6:	d8f2      	bhi.n	800ccae <f_open+0x14a>
 800ccc8:	2502      	movs	r5, #2
				fp->clust = clst;
 800ccca:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cccc:	e75b      	b.n	800cb86 <f_open+0x22>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ccce:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ccd0:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ccd4:	f7ff fd96 	bl	800c804 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ccd8:	2800      	cmp	r0, #0
 800ccda:	d182      	bne.n	800cbe2 <f_open+0x7e>
				dw = GET_FATTIME();
 800ccdc:	f7fe face 	bl	800b27c <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cce0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800cce2:	b2c6      	uxtb	r6, r0
	*ptr++ = (BYTE)val; val >>= 8;
 800cce4:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800cce8:	f3c0 2107 	ubfx	r1, r0, #8, #8
	*ptr++ = (BYTE)val;
 800ccec:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 800ccee:	739e      	strb	r6, [r3, #14]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ccf0:	f04f 0c20 	mov.w	ip, #32
	*ptr++ = (BYTE)val; val >>= 8;
 800ccf4:	73d9      	strb	r1, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 800ccf6:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 800ccf8:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ccfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800ccfc:	759e      	strb	r6, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800ccfe:	75d9      	strb	r1, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd00:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 800cd02:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cd04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd06:	f883 c00b 	strb.w	ip, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
 800cd0a:	f898 2000 	ldrb.w	r2, [r8]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cd0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800cd10:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800cd12:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800cd14:	d102      	bne.n	800cd1c <f_open+0x1b8>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cd16:	8a9a      	ldrh	r2, [r3, #20]
 800cd18:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800cd20:	76da      	strb	r2, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800cd22:	f898 1000 	ldrb.w	r1, [r8]
 800cd26:	2903      	cmp	r1, #3
 800cd28:	d101      	bne.n	800cd2e <f_open+0x1ca>
	*ptr++ = (BYTE)val; val >>= 8;
 800cd2a:	751a      	strb	r2, [r3, #20]
	*ptr++ = (BYTE)val;
 800cd2c:	755a      	strb	r2, [r3, #21]
					st_dword(dj.dir + DIR_FileSize, 0);
 800cd2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800cd30:	2200      	movs	r2, #0
 800cd32:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd34:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd36:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 800cd38:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800cd40:	2e00      	cmp	r6, #0
 800cd42:	f43f af5f 	beq.w	800cc04 <f_open+0xa0>
						dw = fs->winsect;
 800cd46:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800cd4a:	4631      	mov	r1, r6
 800cd4c:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800cd4e:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
 800cd50:	f7ff f8e6 	bl	800bf20 <remove_chain>
						if (res == FR_OK) {
 800cd54:	9b00      	ldr	r3, [sp, #0]
 800cd56:	2800      	cmp	r0, #0
 800cd58:	f47f af43 	bne.w	800cbe2 <f_open+0x7e>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cd5c:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
 800cd5e:	4619      	mov	r1, r3
 800cd60:	4640      	mov	r0, r8
 800cd62:	f7fe fd89 	bl	800b878 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cd66:	f8c8 6010 	str.w	r6, [r8, #16]
		if (res == FR_OK) {
 800cd6a:	2800      	cmp	r0, #0
 800cd6c:	f43f af4a 	beq.w	800cc04 <f_open+0xa0>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cd70:	4605      	mov	r5, r0
 800cd72:	e708      	b.n	800cb86 <f_open+0x22>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd74:	f017 0ffe 	tst.w	r7, #254	; 0xfe
 800cd78:	bf14      	ite	ne
 800cd7a:	2101      	movne	r1, #1
 800cd7c:	2100      	moveq	r1, #0
 800cd7e:	e747      	b.n	800cc10 <f_open+0xac>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cd80:	0736      	lsls	r6, r6, #28
 800cd82:	f57f af45 	bpl.w	800cc10 <f_open+0xac>
 800cd86:	e7a9      	b.n	800ccdc <f_open+0x178>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cd88:	1c72      	adds	r2, r6, #1
				fp->clust = clst;
 800cd8a:	61e6      	str	r6, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 800cd8c:	bf0c      	ite	eq
 800cd8e:	2301      	moveq	r3, #1
 800cd90:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cd92:	d102      	bne.n	800cd9a <f_open+0x236>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cd94:	461d      	mov	r5, r3
 800cd96:	e6f6      	b.n	800cb86 <f_open+0x22>
				fp->clust = clst;
 800cd98:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cd9a:	f3c9 0308 	ubfx	r3, r9, #0, #9
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f43f aef3 	beq.w	800cb8a <f_open+0x26>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cda4:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
 800cda8:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cdaa:	3b02      	subs	r3, #2
 800cdac:	429e      	cmp	r6, r3
 800cdae:	f4bf af39 	bcs.w	800cc24 <f_open+0xc0>
	return clst * fs->csize + fs->database;
 800cdb2:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800cdb6:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800cdba:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cdbe:	2a00      	cmp	r2, #0
 800cdc0:	f43f af30 	beq.w	800cc24 <f_open+0xc0>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cdc4:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cdc8:	4651      	mov	r1, sl
 800cdca:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cdcc:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cdce:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cdd2:	f7fe fb4d 	bl	800b470 <disk_read>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	f43f aed7 	beq.w	800cb8a <f_open+0x26>
 800cddc:	2501      	movs	r5, #1
 800cdde:	e6d2      	b.n	800cb86 <f_open+0x22>
 800cde0:	2001ddc0 	.word	0x2001ddc0

0800cde4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800cde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde8:	461e      	mov	r6, r3
 800cdea:	b087      	sub	sp, #28
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800cdec:	2300      	movs	r3, #0
{
 800cdee:	4688      	mov	r8, r1
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cdf0:	a905      	add	r1, sp, #20
{
 800cdf2:	4604      	mov	r4, r0
	*br = 0;	/* Clear read byte counter */
 800cdf4:	6033      	str	r3, [r6, #0]
{
 800cdf6:	4691      	mov	r9, r2
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cdf8:	f7fe fc1e 	bl	800b638 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cdfc:	4605      	mov	r5, r0
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	d168      	bne.n	800ced4 <f_read+0xf0>
 800ce02:	7d65      	ldrb	r5, [r4, #21]
 800ce04:	2d00      	cmp	r5, #0
 800ce06:	d165      	bne.n	800ced4 <f_read+0xf0>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ce08:	7d23      	ldrb	r3, [r4, #20]
 800ce0a:	f013 0301 	ands.w	r3, r3, #1
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	f000 809b 	beq.w	800cf4a <f_read+0x166>
	remain = fp->obj.objsize - fp->fptr;
 800ce14:	69a1      	ldr	r1, [r4, #24]
 800ce16:	68e7      	ldr	r7, [r4, #12]
 800ce18:	1a7f      	subs	r7, r7, r1
 800ce1a:	454f      	cmp	r7, r9
 800ce1c:	bf28      	it	cs
 800ce1e:	464f      	movcs	r7, r9
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
 800ce20:	2f00      	cmp	r7, #0
 800ce22:	d057      	beq.n	800ced4 <f_read+0xf0>
 800ce24:	f504 730c 	add.w	r3, r4, #560	; 0x230
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce28:	f104 0b30 	add.w	fp, r4, #48	; 0x30
 800ce2c:	e9cd 3501 	strd	r3, r5, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ce30:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800ce34:	bb83      	cbnz	r3, 800ce98 <f_read+0xb4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ce36:	f8dd a014 	ldr.w	sl, [sp, #20]
 800ce3a:	0a4b      	lsrs	r3, r1, #9
 800ce3c:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 800ce40:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800ce42:	ea12 2251 	ands.w	r2, r2, r1, lsr #9
 800ce46:	d049      	beq.n	800cedc <f_read+0xf8>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ce48:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ce4a:	f8da 3018 	ldr.w	r3, [sl, #24]
	clst -= 2;
 800ce4e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ce50:	3b02      	subs	r3, #2
 800ce52:	4298      	cmp	r0, r3
 800ce54:	d23b      	bcs.n	800cece <f_read+0xea>
	return clst * fs->csize + fs->database;
 800ce56:	f8ba 100a 	ldrh.w	r1, [sl, #10]
 800ce5a:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 800ce5e:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ce62:	b3a3      	cbz	r3, 800cece <f_read+0xea>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ce64:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 800ce68:	eb02 0903 	add.w	r9, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ce6c:	d23e      	bcs.n	800ceec <f_read+0x108>
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ce6e:	6a22      	ldr	r2, [r4, #32]
 800ce70:	454a      	cmp	r2, r9
 800ce72:	d00c      	beq.n	800ce8e <f_read+0xaa>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ce74:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	db68      	blt.n	800cf4e <f_read+0x16a>
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ce7c:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800ce80:	2301      	movs	r3, #1
 800ce82:	464a      	mov	r2, r9
 800ce84:	4659      	mov	r1, fp
 800ce86:	f7fe faf3 	bl	800b470 <disk_read>
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	d156      	bne.n	800cf3c <f_read+0x158>
			}
#endif
			fp->sect = sect;
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ce8e:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 800ce90:	f8c4 9020 	str.w	r9, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ce94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce98:	f5c3 7000 	rsb	r0, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ce9c:	445b      	add	r3, fp
 800ce9e:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800cea2:	42b8      	cmp	r0, r7
 800cea4:	bf28      	it	cs
 800cea6:	4638      	movcs	r0, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cea8:	eb03 0c00 	add.w	ip, r3, r0
			*d++ = *s++;
 800ceac:	f813 1b01 	ldrb.w	r1, [r3], #1
		} while (--cnt);
 800ceb0:	4563      	cmp	r3, ip
			*d++ = *s++;
 800ceb2:	f802 1f01 	strb.w	r1, [r2, #1]!
		} while (--cnt);
 800ceb6:	d1f9      	bne.n	800ceac <f_read+0xc8>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ceb8:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 800ceba:	1a3f      	subs	r7, r7, r0
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cebc:	4480      	add	r8, r0
 800cebe:	4403      	add	r3, r0
 800cec0:	61a3      	str	r3, [r4, #24]
 800cec2:	6833      	ldr	r3, [r6, #0]
 800cec4:	4403      	add	r3, r0
 800cec6:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800cec8:	d067      	beq.n	800cf9a <f_read+0x1b6>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ceca:	69a1      	ldr	r1, [r4, #24]
 800cecc:	e7b0      	b.n	800ce30 <f_read+0x4c>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cece:	2302      	movs	r3, #2
 800ced0:	461d      	mov	r5, r3
 800ced2:	7563      	strb	r3, [r4, #21]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800ced4:	4628      	mov	r0, r5
 800ced6:	b007      	add	sp, #28
 800ced8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cedc:	b9d1      	cbnz	r1, 800cf14 <f_read+0x130>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cede:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cee0:	2801      	cmp	r0, #1
 800cee2:	d9f4      	bls.n	800cece <f_read+0xea>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cee4:	1c43      	adds	r3, r0, #1
 800cee6:	d029      	beq.n	800cf3c <f_read+0x158>
				fp->clust = clst;				/* Update current cluster */
 800cee8:	61e0      	str	r0, [r4, #28]
 800ceea:	e7ae      	b.n	800ce4a <f_read+0x66>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ceec:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cef0:	0a7d      	lsrs	r5, r7, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cef2:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cef4:	f89a 0001 	ldrb.w	r0, [sl, #1]
					cc = fs->csize - csect;
 800cef8:	bf88      	it	hi
 800cefa:	1a8d      	subhi	r5, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cefc:	464a      	mov	r2, r9
 800cefe:	4641      	mov	r1, r8
 800cf00:	462b      	mov	r3, r5
 800cf02:	f7fe fab5 	bl	800b470 <disk_read>
 800cf06:	b9c8      	cbnz	r0, 800cf3c <f_read+0x158>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cf08:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800cf0c:	2a00      	cmp	r2, #0
 800cf0e:	db32      	blt.n	800cf76 <f_read+0x192>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cf10:	0268      	lsls	r0, r5, #9
				continue;
 800cf12:	e7d1      	b.n	800ceb8 <f_read+0xd4>
					if (fp->cltbl) {
 800cf14:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800cf16:	b338      	cbz	r0, 800cf68 <f_read+0x184>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cf18:	6821      	ldr	r1, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800cf1a:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800cf1c:	8949      	ldrh	r1, [r1, #10]
 800cf1e:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf22:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cf24:	b929      	cbnz	r1, 800cf32 <f_read+0x14e>
 800cf26:	e7d2      	b.n	800cece <f_read+0xea>
		cl -= ncl; tbl++;		/* Next fragment */
 800cf28:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800cf2a:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800cf2e:	2900      	cmp	r1, #0
 800cf30:	d0cd      	beq.n	800cece <f_read+0xea>
		if (cl < ncl) break;	/* In this fragment? */
 800cf32:	428b      	cmp	r3, r1
 800cf34:	d2f8      	bcs.n	800cf28 <f_read+0x144>
	return cl + *tbl;	/* Return the cluster number */
 800cf36:	6840      	ldr	r0, [r0, #4]
 800cf38:	4418      	add	r0, r3
 800cf3a:	e7d1      	b.n	800cee0 <f_read+0xfc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cf3c:	9d00      	ldr	r5, [sp, #0]
 800cf3e:	2301      	movs	r3, #1
}
 800cf40:	4628      	mov	r0, r5
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cf42:	7563      	strb	r3, [r4, #21]
}
 800cf44:	b007      	add	sp, #28
 800cf46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cf4a:	2507      	movs	r5, #7
 800cf4c:	e7c2      	b.n	800ced4 <f_read+0xf0>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf4e:	2301      	movs	r3, #1
 800cf50:	4659      	mov	r1, fp
 800cf52:	f89a 0001 	ldrb.w	r0, [sl, #1]
 800cf56:	f7fe fa9b 	bl	800b490 <disk_write>
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	d1ee      	bne.n	800cf3c <f_read+0x158>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cf5e:	7d23      	ldrb	r3, [r4, #20]
 800cf60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf64:	7523      	strb	r3, [r4, #20]
 800cf66:	e789      	b.n	800ce7c <f_read+0x98>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cf68:	69e1      	ldr	r1, [r4, #28]
 800cf6a:	6820      	ldr	r0, [r4, #0]
 800cf6c:	9203      	str	r2, [sp, #12]
 800cf6e:	f7fe fc9f 	bl	800b8b0 <get_fat.isra.0>
 800cf72:	9a03      	ldr	r2, [sp, #12]
 800cf74:	e7b4      	b.n	800cee0 <f_read+0xfc>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cf76:	6a22      	ldr	r2, [r4, #32]
 800cf78:	eba2 0209 	sub.w	r2, r2, r9
 800cf7c:	42aa      	cmp	r2, r5
 800cf7e:	d2c7      	bcs.n	800cf10 <f_read+0x12c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cf80:	eb08 2242 	add.w	r2, r8, r2, lsl #9
 800cf84:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800cf88:	9801      	ldr	r0, [sp, #4]
 800cf8a:	3a01      	subs	r2, #1
			*d++ = *s++;
 800cf8c:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800cf90:	4281      	cmp	r1, r0
			*d++ = *s++;
 800cf92:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 800cf96:	d1f9      	bne.n	800cf8c <f_read+0x1a8>
 800cf98:	e7ba      	b.n	800cf10 <f_read+0x12c>
 800cf9a:	9d02      	ldr	r5, [sp, #8]
 800cf9c:	e79a      	b.n	800ced4 <f_read+0xf0>
 800cf9e:	bf00      	nop

0800cfa0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa4:	4699      	mov	r9, r3
 800cfa6:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800cfa8:	2300      	movs	r3, #0
{
 800cfaa:	460e      	mov	r6, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cfac:	a903      	add	r1, sp, #12
{
 800cfae:	4605      	mov	r5, r0
	*bw = 0;	/* Clear write byte counter */
 800cfb0:	f8c9 3000 	str.w	r3, [r9]
{
 800cfb4:	4617      	mov	r7, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800cfb6:	f7fe fb3f 	bl	800b638 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cfba:	4680      	mov	r8, r0
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	d160      	bne.n	800d082 <f_write+0xe2>
 800cfc0:	f895 8015 	ldrb.w	r8, [r5, #21]
 800cfc4:	f1b8 0f00 	cmp.w	r8, #0
 800cfc8:	d15b      	bne.n	800d082 <f_write+0xe2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800cfca:	7d2b      	ldrb	r3, [r5, #20]
 800cfcc:	079a      	lsls	r2, r3, #30
 800cfce:	f140 80ba 	bpl.w	800d146 <f_write+0x1a6>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800cfd2:	69aa      	ldr	r2, [r5, #24]
 800cfd4:	42fa      	cmn	r2, r7
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800cfd6:	bf28      	it	cs
 800cfd8:	43d7      	mvncs	r7, r2
	}

	for ( ;  btw;							/* Repeat until all data written */
 800cfda:	2f00      	cmp	r7, #0
 800cfdc:	f000 809b 	beq.w	800d116 <f_write+0x176>
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cfe0:	f105 0a30 	add.w	sl, r5, #48	; 0x30
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800cfe4:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800cfe8:	2c00      	cmp	r4, #0
 800cfea:	d158      	bne.n	800d09e <f_write+0xfe>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800cfec:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cff0:	0a53      	lsrs	r3, r2, #9
 800cff2:	f8bb 400a 	ldrh.w	r4, [fp, #10]
 800cff6:	3c01      	subs	r4, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800cff8:	ea14 2452 	ands.w	r4, r4, r2, lsr #9
 800cffc:	d10e      	bne.n	800d01c <f_write+0x7c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800cffe:	2a00      	cmp	r2, #0
 800d000:	d172      	bne.n	800d0e8 <f_write+0x148>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d002:	68a8      	ldr	r0, [r5, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800d004:	2800      	cmp	r0, #0
 800d006:	f000 80a1 	beq.w	800d14c <f_write+0x1ac>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d00a:	2801      	cmp	r0, #1
 800d00c:	d036      	beq.n	800d07c <f_write+0xdc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d00e:	1c43      	adds	r3, r0, #1
 800d010:	f000 8092 	beq.w	800d138 <f_write+0x198>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d014:	68ab      	ldr	r3, [r5, #8]
				fp->clust = clst;			/* Update current cluster */
 800d016:	61e8      	str	r0, [r5, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d018:	b903      	cbnz	r3, 800d01c <f_write+0x7c>
 800d01a:	60a8      	str	r0, [r5, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d01c:	f995 3014 	ldrsb.w	r3, [r5, #20]
 800d020:	2b00      	cmp	r3, #0
 800d022:	db7c      	blt.n	800d11e <f_write+0x17e>
	clst -= 2;
 800d024:	69eb      	ldr	r3, [r5, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d026:	f8db 2018 	ldr.w	r2, [fp, #24]
	clst -= 2;
 800d02a:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d02c:	3a02      	subs	r2, #2
 800d02e:	4293      	cmp	r3, r2
 800d030:	d224      	bcs.n	800d07c <f_write+0xdc>
	return clst * fs->csize + fs->database;
 800d032:	f8bb 100a 	ldrh.w	r1, [fp, #10]
 800d036:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 800d03a:	fb01 2203 	mla	r2, r1, r3, r2
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d03e:	b1ea      	cbz	r2, 800d07c <f_write+0xdc>
			sect += csect;
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d040:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 800d044:	4422      	add	r2, r4
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d046:	d320      	bcc.n	800d08a <f_write+0xea>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d048:	eb04 2057 	add.w	r0, r4, r7, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d04c:	0a7b      	lsrs	r3, r7, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d04e:	4288      	cmp	r0, r1
					cc = fs->csize - csect;
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d050:	f89b 0001 	ldrb.w	r0, [fp, #1]
					cc = fs->csize - csect;
 800d054:	bf88      	it	hi
 800d056:	1b0b      	subhi	r3, r1, r4
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d058:	4631      	mov	r1, r6
 800d05a:	e9cd 2300 	strd	r2, r3, [sp]
 800d05e:	f7fe fa17 	bl	800b490 <disk_write>
 800d062:	2800      	cmp	r0, #0
 800d064:	d168      	bne.n	800d138 <f_write+0x198>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d066:	6a29      	ldr	r1, [r5, #32]
 800d068:	9a00      	ldr	r2, [sp, #0]
 800d06a:	9b01      	ldr	r3, [sp, #4]
 800d06c:	1a8a      	subs	r2, r1, r2
 800d06e:	429a      	cmp	r2, r3
 800d070:	f0c0 8088 	bcc.w	800d184 <f_write+0x1e4>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d074:	eb06 2643 	add.w	r6, r6, r3, lsl #9
 800d078:	025b      	lsls	r3, r3, #9
				continue;
 800d07a:	e024      	b.n	800d0c6 <f_write+0x126>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d07c:	2302      	movs	r3, #2
 800d07e:	4698      	mov	r8, r3
 800d080:	756b      	strb	r3, [r5, #21]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800d082:	4640      	mov	r0, r8
 800d084:	b005      	add	sp, #20
 800d086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d08a:	6a2b      	ldr	r3, [r5, #32]
				fp->fptr < fp->obj.objsize &&
 800d08c:	69ac      	ldr	r4, [r5, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d08e:	4293      	cmp	r3, r2
 800d090:	d002      	beq.n	800d098 <f_write+0xf8>
 800d092:	68eb      	ldr	r3, [r5, #12]
 800d094:	429c      	cmp	r4, r3
 800d096:	d369      	bcc.n	800d16c <f_write+0x1cc>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d098:	f3c4 0408 	ubfx	r4, r4, #0, #9
			fp->sect = sect;
 800d09c:	622a      	str	r2, [r5, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d09e:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
 800d0a2:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800d0a6:	4632      	mov	r2, r6
 800d0a8:	42bb      	cmp	r3, r7
 800d0aa:	44d4      	add	ip, sl
 800d0ac:	bf28      	it	cs
 800d0ae:	463b      	movcs	r3, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d0b0:	441e      	add	r6, r3
			*d++ = *s++;
 800d0b2:	f812 1b01 	ldrb.w	r1, [r2], #1
		} while (--cnt);
 800d0b6:	42b2      	cmp	r2, r6
			*d++ = *s++;
 800d0b8:	f80c 1f01 	strb.w	r1, [ip, #1]!
		} while (--cnt);
 800d0bc:	d1f9      	bne.n	800d0b2 <f_write+0x112>
		fp->flag |= FA_DIRTY;
 800d0be:	7d2a      	ldrb	r2, [r5, #20]
 800d0c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d0c4:	752a      	strb	r2, [r5, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d0c6:	69aa      	ldr	r2, [r5, #24]
 800d0c8:	68e9      	ldr	r1, [r5, #12]
 800d0ca:	441a      	add	r2, r3
 800d0cc:	4291      	cmp	r1, r2
 800d0ce:	61aa      	str	r2, [r5, #24]
 800d0d0:	bf38      	it	cc
 800d0d2:	4611      	movcc	r1, r2
	for ( ;  btw;							/* Repeat until all data written */
 800d0d4:	1aff      	subs	r7, r7, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d0d6:	60e9      	str	r1, [r5, #12]
 800d0d8:	f8d9 2000 	ldr.w	r2, [r9]
 800d0dc:	441a      	add	r2, r3
 800d0de:	f8c9 2000 	str.w	r2, [r9]
	for ( ;  btw;							/* Repeat until all data written */
 800d0e2:	d017      	beq.n	800d114 <f_write+0x174>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d0e4:	69aa      	ldr	r2, [r5, #24]
 800d0e6:	e77d      	b.n	800cfe4 <f_write+0x44>
					if (fp->cltbl) {
 800d0e8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 800d0ea:	2900      	cmp	r1, #0
 800d0ec:	d036      	beq.n	800d15c <f_write+0x1bc>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d0ee:	682a      	ldr	r2, [r5, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d0f0:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d0f2:	8952      	ldrh	r2, [r2, #10]
 800d0f4:	fbb3 f3f2 	udiv	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d0f8:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d0fa:	b922      	cbnz	r2, 800d106 <f_write+0x166>
 800d0fc:	e00a      	b.n	800d114 <f_write+0x174>
		cl -= ncl; tbl++;		/* Next fragment */
 800d0fe:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d100:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d104:	b132      	cbz	r2, 800d114 <f_write+0x174>
		if (cl < ncl) break;	/* In this fragment? */
 800d106:	4293      	cmp	r3, r2
 800d108:	d2f9      	bcs.n	800d0fe <f_write+0x15e>
	return cl + *tbl;	/* Return the cluster number */
 800d10a:	6848      	ldr	r0, [r1, #4]
 800d10c:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d10e:	2800      	cmp	r0, #0
 800d110:	f47f af7b 	bne.w	800d00a <f_write+0x6a>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d114:	7d2b      	ldrb	r3, [r5, #20]
 800d116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d11a:	752b      	strb	r3, [r5, #20]
	LEAVE_FF(fs, FR_OK);
 800d11c:	e7b1      	b.n	800d082 <f_write+0xe2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d11e:	2301      	movs	r3, #1
 800d120:	6a2a      	ldr	r2, [r5, #32]
 800d122:	4651      	mov	r1, sl
 800d124:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800d128:	f7fe f9b2 	bl	800b490 <disk_write>
 800d12c:	b920      	cbnz	r0, 800d138 <f_write+0x198>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d12e:	7d2b      	ldrb	r3, [r5, #20]
 800d130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d134:	752b      	strb	r3, [r5, #20]
 800d136:	e775      	b.n	800d024 <f_write+0x84>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d138:	2301      	movs	r3, #1
 800d13a:	4698      	mov	r8, r3
 800d13c:	756b      	strb	r3, [r5, #21]
}
 800d13e:	4640      	mov	r0, r8
 800d140:	b005      	add	sp, #20
 800d142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d146:	f04f 0807 	mov.w	r8, #7
 800d14a:	e79a      	b.n	800d082 <f_write+0xe2>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d14c:	4621      	mov	r1, r4
 800d14e:	4628      	mov	r0, r5
 800d150:	f7fe ff28 	bl	800bfa4 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d154:	2800      	cmp	r0, #0
 800d156:	f47f af58 	bne.w	800d00a <f_write+0x6a>
 800d15a:	e7db      	b.n	800d114 <f_write+0x174>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d15c:	69e9      	ldr	r1, [r5, #28]
 800d15e:	4628      	mov	r0, r5
 800d160:	f7fe ff20 	bl	800bfa4 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d164:	2800      	cmp	r0, #0
 800d166:	f47f af50 	bne.w	800d00a <f_write+0x6a>
 800d16a:	e7d3      	b.n	800d114 <f_write+0x174>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d16c:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800d170:	2301      	movs	r3, #1
 800d172:	4651      	mov	r1, sl
 800d174:	9200      	str	r2, [sp, #0]
 800d176:	f7fe f97b 	bl	800b470 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d1dc      	bne.n	800d138 <f_write+0x198>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d17e:	69ac      	ldr	r4, [r5, #24]
 800d180:	9a00      	ldr	r2, [sp, #0]
 800d182:	e789      	b.n	800d098 <f_write+0xf8>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d184:	eb06 2242 	add.w	r2, r6, r2, lsl #9
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d188:	f105 012f 	add.w	r1, r5, #47	; 0x2f
 800d18c:	f502 7400 	add.w	r4, r2, #512	; 0x200
			*d++ = *s++;
 800d190:	f812 0b01 	ldrb.w	r0, [r2], #1
		} while (--cnt);
 800d194:	42a2      	cmp	r2, r4
			*d++ = *s++;
 800d196:	f801 0f01 	strb.w	r0, [r1, #1]!
		} while (--cnt);
 800d19a:	d1f9      	bne.n	800d190 <f_write+0x1f0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d19c:	7d2a      	ldrb	r2, [r5, #20]
 800d19e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d1a2:	752a      	strb	r2, [r5, #20]
 800d1a4:	e766      	b.n	800d074 <f_write+0xd4>
 800d1a6:	bf00      	nop

0800d1a8 <f_sync>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d04e      	beq.n	800d24a <f_sync+0xa2>
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d1ac:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d1ae:	6803      	ldr	r3, [r0, #0]
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	b12b      	cbz	r3, 800d1c0 <f_sync+0x18>
 800d1b4:	781a      	ldrb	r2, [r3, #0]
 800d1b6:	b11a      	cbz	r2, 800d1c0 <f_sync+0x18>
 800d1b8:	8881      	ldrh	r1, [r0, #4]
 800d1ba:	88da      	ldrh	r2, [r3, #6]
 800d1bc:	4291      	cmp	r1, r2
 800d1be:	d001      	beq.n	800d1c4 <f_sync+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800d1c0:	2009      	movs	r0, #9
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800d1c2:	bd70      	pop	{r4, r5, r6, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d1c4:	7858      	ldrb	r0, [r3, #1]
 800d1c6:	f7fe f937 	bl	800b438 <disk_status>
 800d1ca:	07c2      	lsls	r2, r0, #31
 800d1cc:	d4f8      	bmi.n	800d1c0 <f_sync+0x18>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d1ce:	7d23      	ldrb	r3, [r4, #20]
 800d1d0:	f013 0040 	ands.w	r0, r3, #64	; 0x40
 800d1d4:	d0f5      	beq.n	800d1c2 <f_sync+0x1a>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d1d6:	061b      	lsls	r3, r3, #24
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d1d8:	6826      	ldr	r6, [r4, #0]
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d1da:	d438      	bmi.n	800d24e <f_sync+0xa6>
			tm = GET_FATTIME();				/* Modified time */
 800d1dc:	f7fe f84e 	bl	800b27c <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800d1e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800d1e2:	4605      	mov	r5, r0
				res = move_window(fs, fp->dir_sect);
 800d1e4:	4630      	mov	r0, r6
 800d1e6:	f7fe fb47 	bl	800b878 <move_window>
				if (res == FR_OK) {
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	d1e9      	bne.n	800d1c2 <f_sync+0x1a>
					dir = fp->dir_ptr;
 800d1ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d1f0:	7ada      	ldrb	r2, [r3, #11]
 800d1f2:	f042 0220 	orr.w	r2, r2, #32
 800d1f6:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d1f8:	68a2      	ldr	r2, [r4, #8]
 800d1fa:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1fc:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800d200:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800d202:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800d204:	7809      	ldrb	r1, [r1, #0]
 800d206:	2903      	cmp	r1, #3
 800d208:	d103      	bne.n	800d212 <f_sync+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d20a:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800d20c:	751a      	strb	r2, [r3, #20]
 800d20e:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800d210:	755a      	strb	r2, [r3, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d212:	68e2      	ldr	r2, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d214:	4630      	mov	r0, r6
	*ptr++ = (BYTE)val; val >>= 8;
 800d216:	759d      	strb	r5, [r3, #22]
 800d218:	0a11      	lsrs	r1, r2, #8
 800d21a:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800d21c:	7759      	strb	r1, [r3, #29]
 800d21e:	0c11      	lsrs	r1, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800d220:	0e12      	lsrs	r2, r2, #24
 800d222:	7799      	strb	r1, [r3, #30]
	*ptr++ = (BYTE)val;
 800d224:	77da      	strb	r2, [r3, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 800d226:	0a2a      	lsrs	r2, r5, #8
	*ptr++ = (BYTE)val; val >>= 8;
 800d228:	75da      	strb	r2, [r3, #23]
 800d22a:	0c2a      	lsrs	r2, r5, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800d22c:	0e2d      	lsrs	r5, r5, #24
 800d22e:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 800d230:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val;
 800d232:	765d      	strb	r5, [r3, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 800d234:	749a      	strb	r2, [r3, #18]
	*ptr++ = (BYTE)val;
 800d236:	74da      	strb	r2, [r3, #19]
					fs->wflag = 1;
 800d238:	2301      	movs	r3, #1
 800d23a:	70f3      	strb	r3, [r6, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d23c:	f7fe fabc 	bl	800b7b8 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d240:	7d23      	ldrb	r3, [r4, #20]
 800d242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d246:	7523      	strb	r3, [r4, #20]
}
 800d248:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 800d24a:	2009      	movs	r0, #9
}
 800d24c:	4770      	bx	lr
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d24e:	2301      	movs	r3, #1
 800d250:	6a22      	ldr	r2, [r4, #32]
 800d252:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d256:	7870      	ldrb	r0, [r6, #1]
 800d258:	f7fe f91a 	bl	800b490 <disk_write>
 800d25c:	b920      	cbnz	r0, 800d268 <f_sync+0xc0>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d25e:	7d23      	ldrb	r3, [r4, #20]
 800d260:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d264:	7523      	strb	r3, [r4, #20]
 800d266:	e7b9      	b.n	800d1dc <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d268:	2001      	movs	r0, #1
}
 800d26a:	bd70      	pop	{r4, r5, r6, pc}

0800d26c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d26c:	b510      	push	{r4, lr}
 800d26e:	b082      	sub	sp, #8
 800d270:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d272:	f7ff ff99 	bl	800d1a8 <f_sync>
	if (res == FR_OK)
 800d276:	b108      	cbz	r0, 800d27c <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800d278:	b002      	add	sp, #8
 800d27a:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d27c:	a901      	add	r1, sp, #4
 800d27e:	4620      	mov	r0, r4
 800d280:	f7fe f9da 	bl	800b638 <validate>
		if (res == FR_OK) {
 800d284:	2800      	cmp	r0, #0
 800d286:	d1f7      	bne.n	800d278 <f_close+0xc>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d288:	6923      	ldr	r3, [r4, #16]
 800d28a:	3b01      	subs	r3, #1
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d815      	bhi.n	800d2bc <f_close+0x50>
		n = Files[i].ctr;
 800d290:	490b      	ldr	r1, [pc, #44]	; (800d2c0 <f_close+0x54>)
 800d292:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 800d296:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800d29a:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d29c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800d2a0:	d007      	beq.n	800d2b2 <f_close+0x46>
		if (n > 0) n--;				/* Decrement read mode open count */
 800d2a2:	b13a      	cbz	r2, 800d2b4 <f_close+0x48>
 800d2a4:	3a01      	subs	r2, #1
 800d2a6:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800d2a8:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d2aa:	b11a      	cbz	r2, 800d2b4 <f_close+0x48>
				fp->obj.fs = 0;			/* Invalidate file object */
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	6023      	str	r3, [r4, #0]
 800d2b0:	e7e2      	b.n	800d278 <f_close+0xc>
		Files[i].ctr = n;
 800d2b2:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	f841 300c 	str.w	r3, [r1, ip]
			if (res == FR_OK)
 800d2ba:	e7f7      	b.n	800d2ac <f_close+0x40>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d2bc:	2002      	movs	r0, #2
 800d2be:	e7db      	b.n	800d278 <f_close+0xc>
 800d2c0:	2001ddc0 	.word	0x2001ddc0

0800d2c4 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d2c4:	b570      	push	{r4, r5, r6, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	d034      	beq.n	800d338 <f_opendir+0x74>

	/* Get logical drive */
	obj = &dp->obj;
 800d2ce:	4604      	mov	r4, r0
	res = find_volume(&path, &fs, 0);
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	a903      	add	r1, sp, #12
 800d2d4:	a801      	add	r0, sp, #4
 800d2d6:	f7fe fc4b 	bl	800bb70 <find_volume>
	if (res == FR_OK) {
 800d2da:	4606      	mov	r6, r0
 800d2dc:	b120      	cbz	r0, 800d2e8 <f_opendir+0x24>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d2de:	2300      	movs	r3, #0
 800d2e0:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	b004      	add	sp, #16
 800d2e6:	bd70      	pop	{r4, r5, r6, pc}
		obj->fs = fs;
 800d2e8:	9d03      	ldr	r5, [sp, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d2ea:	4620      	mov	r0, r4
 800d2ec:	9901      	ldr	r1, [sp, #4]
		obj->fs = fs;
 800d2ee:	6025      	str	r5, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d2f0:	f7ff f908 	bl	800c504 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800d2f4:	4606      	mov	r6, r0
 800d2f6:	b9d8      	cbnz	r0, 800d330 <f_opendir+0x6c>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d2f8:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	db0b      	blt.n	800d318 <f_opendir+0x54>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d300:	79a3      	ldrb	r3, [r4, #6]
 800d302:	06db      	lsls	r3, r3, #27
 800d304:	d516      	bpl.n	800d334 <f_opendir+0x70>
	if (fs->fs_type == FS_FAT32) {
 800d306:	7829      	ldrb	r1, [r5, #0]
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d308:	6a22      	ldr	r2, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 800d30a:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800d30c:	8b53      	ldrh	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 800d30e:	d102      	bne.n	800d316 <f_opendir+0x52>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d310:	8a92      	ldrh	r2, [r2, #20]
 800d312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d316:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
 800d318:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d31a:	2100      	movs	r1, #0
 800d31c:	4620      	mov	r0, r4
				obj->id = fs->id;
 800d31e:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d320:	f7fe fb1c 	bl	800b95c <dir_sdi>
				if (res == FR_OK) {
 800d324:	4606      	mov	r6, r0
 800d326:	b918      	cbnz	r0, 800d330 <f_opendir+0x6c>
					if (obj->sclust) {
 800d328:	68a3      	ldr	r3, [r4, #8]
 800d32a:	b94b      	cbnz	r3, 800d340 <f_opendir+0x7c>
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d32c:	6120      	str	r0, [r4, #16]
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d32e:	e7d8      	b.n	800d2e2 <f_opendir+0x1e>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d330:	2e04      	cmp	r6, #4
 800d332:	d1d4      	bne.n	800d2de <f_opendir+0x1a>
 800d334:	2605      	movs	r6, #5
 800d336:	e7d2      	b.n	800d2de <f_opendir+0x1a>
	if (!dp) return FR_INVALID_OBJECT;
 800d338:	2609      	movs	r6, #9
}
 800d33a:	4630      	mov	r0, r6
 800d33c:	b004      	add	sp, #16
 800d33e:	bd70      	pop	{r4, r5, r6, pc}
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d340:	4601      	mov	r1, r0
 800d342:	4620      	mov	r0, r4
 800d344:	f7fe f8fe 	bl	800b544 <inc_lock>
 800d348:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d34a:	2800      	cmp	r0, #0
 800d34c:	d1c9      	bne.n	800d2e2 <f_opendir+0x1e>
 800d34e:	2612      	movs	r6, #18
 800d350:	e7c5      	b.n	800d2de <f_opendir+0x1a>
 800d352:	bf00      	nop

0800d354 <f_readdir>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d354:	b328      	cbz	r0, 800d3a2 <f_readdir+0x4e>

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d356:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d358:	6803      	ldr	r3, [r0, #0]
 800d35a:	4604      	mov	r4, r0
 800d35c:	b133      	cbz	r3, 800d36c <f_readdir+0x18>
 800d35e:	781a      	ldrb	r2, [r3, #0]
 800d360:	b122      	cbz	r2, 800d36c <f_readdir+0x18>
 800d362:	460d      	mov	r5, r1
 800d364:	88da      	ldrh	r2, [r3, #6]
 800d366:	8881      	ldrh	r1, [r0, #4]
 800d368:	4291      	cmp	r1, r2
 800d36a:	d001      	beq.n	800d370 <f_readdir+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800d36c:	2009      	movs	r0, #9
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 800d36e:	bd70      	pop	{r4, r5, r6, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d370:	7858      	ldrb	r0, [r3, #1]
 800d372:	f7fe f861 	bl	800b438 <disk_status>
 800d376:	f010 0101 	ands.w	r1, r0, #1
 800d37a:	d1f7      	bne.n	800d36c <f_readdir+0x18>
		if (!fno) {
 800d37c:	b19d      	cbz	r5, 800d3a6 <f_readdir+0x52>
			res = dir_read(dp, 0);			/* Read an item */
 800d37e:	4620      	mov	r0, r4
 800d380:	f7fe ff46 	bl	800c210 <dir_read>
			if (res == FR_OK) {				/* A valid entry is found */
 800d384:	f010 06fb 	ands.w	r6, r0, #251	; 0xfb
 800d388:	d1f1      	bne.n	800d36e <f_readdir+0x1a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d38a:	4629      	mov	r1, r5
 800d38c:	4620      	mov	r0, r4
 800d38e:	f7fe f96b 	bl	800b668 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d392:	4631      	mov	r1, r6
 800d394:	4620      	mov	r0, r4
 800d396:	f7fe fe6f 	bl	800c078 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d39a:	2804      	cmp	r0, #4
 800d39c:	bf08      	it	eq
 800d39e:	2000      	moveq	r0, #0
}
 800d3a0:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 800d3a2:	2009      	movs	r0, #9
}
 800d3a4:	4770      	bx	lr
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d3a6:	4629      	mov	r1, r5
 800d3a8:	4620      	mov	r0, r4
}
 800d3aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d3ae:	f7fe bad5 	b.w	800b95c <dir_sdi>
 800d3b2:	bf00      	nop

0800d3b4 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800d3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800d3b6:	fab1 f481 	clz	r4, r1
 800d3ba:	460d      	mov	r5, r1
{
 800d3bc:	4606      	mov	r6, r0
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800d3be:	f101 0716 	add.w	r7, r1, #22
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800d3c2:	0964      	lsrs	r4, r4, #5
 800d3c4:	e003      	b.n	800d3ce <f_findnext+0x1a>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800d3c6:	6b70      	ldr	r0, [r6, #52]	; 0x34
 800d3c8:	f7fe fb18 	bl	800b9fc <pattern_matching>
 800d3cc:	b960      	cbnz	r0, 800d3e8 <f_findnext+0x34>
		res = f_readdir(dp, fno);		/* Get a directory item */
 800d3ce:	4629      	mov	r1, r5
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f7ff ffbf 	bl	800d354 <f_readdir>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800d3d6:	4623      	mov	r3, r4
 800d3d8:	4622      	mov	r2, r4
 800d3da:	4639      	mov	r1, r7
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800d3dc:	b918      	cbnz	r0, 800d3e6 <f_findnext+0x32>
 800d3de:	b914      	cbnz	r4, 800d3e6 <f_findnext+0x32>
 800d3e0:	7da8      	ldrb	r0, [r5, #22]
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	d1ef      	bne.n	800d3c6 <f_findnext+0x12>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 800d3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		res = f_readdir(dp, fno);		/* Get a directory item */
 800d3e8:	4620      	mov	r0, r4
}
 800d3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d3ec <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800d3ec:	b538      	push	{r3, r4, r5, lr}
 800d3ee:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800d3f0:	6343      	str	r3, [r0, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800d3f2:	4611      	mov	r1, r2
{
 800d3f4:	4604      	mov	r4, r0
	res = f_opendir(dp, path);		/* Open the target directory */
 800d3f6:	f7ff ff65 	bl	800d2c4 <f_opendir>
	if (res == FR_OK) {
 800d3fa:	b100      	cbz	r0, 800d3fe <f_findfirst+0x12>
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 800d3fc:	bd38      	pop	{r3, r4, r5, pc}
		res = f_findnext(dp, fno);	/* Find the first item */
 800d3fe:	4629      	mov	r1, r5
 800d400:	4620      	mov	r0, r4
}
 800d402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 800d406:	f7ff bfd5 	b.w	800d3b4 <f_findnext>
 800d40a:	bf00      	nop

0800d40c <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800d40c:	4b11      	ldr	r3, [pc, #68]	; (800d454 <FATFS_LinkDriver+0x48>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d40e:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800d410:	7a5c      	ldrb	r4, [r3, #9]
 800d412:	b9cc      	cbnz	r4, 800d448 <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
 800d414:	f004 02ff 	and.w	r2, r4, #255	; 0xff
 800d418:	7a5c      	ldrb	r4, [r3, #9]
 800d41a:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800d41c:	7a5c      	ldrb	r4, [r3, #9]
 800d41e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d422:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800d424:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800d426:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800d428:	441c      	add	r4, r3
 800d42a:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800d42c:	1c44      	adds	r4, r0, #1
    path[0] = DiskNum + '0';
 800d42e:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
 800d430:	b2e4      	uxtb	r4, r4
 800d432:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800d434:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 800d436:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800d438:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 800d43a:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800d43c:	4610      	mov	r0, r2
 800d43e:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[3] = 0;
 800d442:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
 800d444:	708b      	strb	r3, [r1, #2]
}
 800d446:	4770      	bx	lr
  uint8_t ret = 1;
 800d448:	2201      	movs	r2, #1
}
 800d44a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d44e:	4610      	mov	r0, r2
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop
 800d454:	2001dfe4 	.word	0x2001dfe4

0800d458 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d458:	287f      	cmp	r0, #127	; 0x7f
 800d45a:	d915      	bls.n	800d488 <ff_convert+0x30>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d45c:	b989      	cbnz	r1, 800d482 <ff_convert+0x2a>
 800d45e:	4a0d      	ldr	r2, [pc, #52]	; (800d494 <ff_convert+0x3c>)
 800d460:	23c7      	movs	r3, #199	; 0xc7
 800d462:	e003      	b.n	800d46c <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d464:	2980      	cmp	r1, #128	; 0x80
 800d466:	d00e      	beq.n	800d486 <ff_convert+0x2e>
				if (chr == Tbl[c]) break;
 800d468:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800d46c:	4298      	cmp	r0, r3
 800d46e:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 800d472:	f101 0101 	add.w	r1, r1, #1
				if (chr == Tbl[c]) break;
 800d476:	d1f5      	bne.n	800d464 <ff_convert+0xc>
			}
			c = (c + 0x80) & 0xFF;
 800d478:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 800d47c:	fa1f f08c 	uxth.w	r0, ip
 800d480:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d482:	28ff      	cmp	r0, #255	; 0xff
 800d484:	d901      	bls.n	800d48a <ff_convert+0x32>
 800d486:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800d488:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d48a:	4b02      	ldr	r3, [pc, #8]	; (800d494 <ff_convert+0x3c>)
 800d48c:	3880      	subs	r0, #128	; 0x80
 800d48e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800d492:	4770      	bx	lr
 800d494:	08019958 	.word	0x08019958

0800d498 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d498:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800d49c:	4b25      	ldr	r3, [pc, #148]	; (800d534 <ff_wtoupper+0x9c>)
 800d49e:	f641 517d 	movw	r1, #7549	; 0x1d7d
 800d4a2:	4a25      	ldr	r2, [pc, #148]	; (800d538 <ff_wtoupper+0xa0>)
 800d4a4:	bf34      	ite	cc
 800d4a6:	2161      	movcc	r1, #97	; 0x61
 800d4a8:	461a      	movcs	r2, r3
{
 800d4aa:	b510      	push	{r4, lr}
 800d4ac:	3204      	adds	r2, #4
 800d4ae:	e00c      	b.n	800d4ca <ff_wtoupper+0x32>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d4b0:	f832 3c02 	ldrh.w	r3, [r2, #-2]
 800d4b4:	fa5f fc83 	uxtb.w	ip, r3
 800d4b8:	0a1b      	lsrs	r3, r3, #8
		if (chr < bc + nc) {	/* In the block? */
 800d4ba:	eb0c 0e01 	add.w	lr, ip, r1
 800d4be:	4570      	cmp	r0, lr
 800d4c0:	db09      	blt.n	800d4d6 <ff_wtoupper+0x3e>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800d4c2:	3204      	adds	r2, #4
 800d4c4:	b183      	cbz	r3, 800d4e8 <ff_wtoupper+0x50>
		bc = *p++;								/* Get block base */
 800d4c6:	f832 1c04 	ldrh.w	r1, [r2, #-4]
		if (!bc || chr < bc) break;
 800d4ca:	1e4b      	subs	r3, r1, #1
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d4cc:	4614      	mov	r4, r2
		if (!bc || chr < bc) break;
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	4298      	cmp	r0, r3
 800d4d2:	d8ed      	bhi.n	800d4b0 <ff_wtoupper+0x18>
	}

	return chr;
}
 800d4d4:	bd10      	pop	{r4, pc}
			switch (cmd) {
 800d4d6:	2b08      	cmp	r3, #8
 800d4d8:	d8fc      	bhi.n	800d4d4 <ff_wtoupper+0x3c>
 800d4da:	e8df f003 	tbb	[pc, r3]
 800d4de:	120e      	.short	0x120e
 800d4e0:	211e1b18 	.word	0x211e1b18
 800d4e4:	2724      	.short	0x2724
 800d4e6:	0a          	.byte	0x0a
 800d4e7:	00          	.byte	0x00
		if (!cmd) p += nc;
 800d4e8:	eb04 024c 	add.w	r2, r4, ip, lsl #1
		bc = *p++;								/* Get block base */
 800d4ec:	f834 101c 	ldrh.w	r1, [r4, ip, lsl #1]
 800d4f0:	e7dc      	b.n	800d4ac <ff_wtoupper+0x14>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d4f2:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800d4f6:	b280      	uxth	r0, r0
}
 800d4f8:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d4fa:	1a41      	subs	r1, r0, r1
 800d4fc:	f832 0011 	ldrh.w	r0, [r2, r1, lsl #1]
}
 800d500:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d502:	1a43      	subs	r3, r0, r1
 800d504:	f003 0301 	and.w	r3, r3, #1
 800d508:	1ac3      	subs	r3, r0, r3
 800d50a:	b298      	uxth	r0, r3
}
 800d50c:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 800d50e:	3810      	subs	r0, #16
 800d510:	b280      	uxth	r0, r0
}
 800d512:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d514:	3820      	subs	r0, #32
 800d516:	b280      	uxth	r0, r0
}
 800d518:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d51a:	3830      	subs	r0, #48	; 0x30
 800d51c:	b280      	uxth	r0, r0
}
 800d51e:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d520:	381a      	subs	r0, #26
 800d522:	b280      	uxth	r0, r0
}
 800d524:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 800d526:	3008      	adds	r0, #8
 800d528:	b280      	uxth	r0, r0
}
 800d52a:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 800d52c:	3850      	subs	r0, #80	; 0x50
 800d52e:	b280      	uxth	r0, r0
}
 800d530:	bd10      	pop	{r4, pc}
 800d532:	bf00      	nop
 800d534:	08019c4c 	.word	0x08019c4c
 800d538:	08019a58 	.word	0x08019a58

0800d53c <tEnvelopeFollower_init>:
//===========================================================================
/* Envelope Follower */
//===========================================================================

void    tEnvelopeFollower_init(tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, LEAF* const leaf)
{
 800d53c:	b538      	push	{r3, r4, r5, lr}
 800d53e:	ed2d 8b02 	vpush	{d8}
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
}

void    tEnvelopeFollower_initToPool    (tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, tMempool* const mp)
{
    _tMempool* m = *mp;
 800d542:	698d      	ldr	r5, [r1, #24]
{
 800d544:	eef0 8a40 	vmov.f32	s17, s0
 800d548:	eeb0 8a60 	vmov.f32	s16, s1
 800d54c:	4604      	mov	r4, r0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 800d54e:	4629      	mov	r1, r5
 800d550:	2010      	movs	r0, #16
 800d552:	f004 fd53 	bl	8011ffc <mpool_alloc>
    e->mempool = m;
    
    e->y = 0.0f;
 800d556:	2300      	movs	r3, #0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 800d558:	6020      	str	r0, [r4, #0]
    e->mempool = m;
 800d55a:	6005      	str	r5, [r0, #0]
    e->y = 0.0f;
 800d55c:	6043      	str	r3, [r0, #4]
    e->a_thresh = attackThreshold;
 800d55e:	edc0 8a02 	vstr	s17, [r0, #8]
    e->d_coeff = decayCoeff;
 800d562:	ed80 8a03 	vstr	s16, [r0, #12]
}
 800d566:	ecbd 8b02 	vpop	{d8}
 800d56a:	bd38      	pop	{r3, r4, r5, pc}

0800d56c <tEnvelopeFollower_tick>:

Lfloat   tEnvelopeFollower_tick(tEnvelopeFollower* const ef, Lfloat x)
{
    _tEnvelopeFollower* e = *ef;
    
    if (x < 0.0f ) x = -x;  /* Absolute value. */
 800d56c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tEnvelopeFollower* e = *ef;
 800d570:	6803      	ldr	r3, [r0, #0]
    if (x < 0.0f ) x = -x;  /* Absolute value. */
 800d572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d576:	bf48      	it	mi
 800d578:	eeb1 0a40 	vnegmi.f32	s0, s0
    
    if (isnan(x)) return 0.0f;
 800d57c:	eeb4 0a40 	vcmp.f32	s0, s0
 800d580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d584:	d617      	bvs.n	800d5b6 <tEnvelopeFollower_tick+0x4a>
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x; /* If we hit a peak, ride the peak to the top. */
 800d586:	edd3 7a01 	vldr	s15, [r3, #4]
 800d58a:	eef4 7ac0 	vcmpe.f32	s15, s0
 800d58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d592:	d906      	bls.n	800d5a2 <tEnvelopeFollower_tick+0x36>
    else e->y = e->y * e->d_coeff; /* Else, exponential decay of output. */
 800d594:	ed93 0a03 	vldr	s0, [r3, #12]
 800d598:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d59c:	ed83 0a01 	vstr	s0, [r3, #4]
    
#ifdef NO_DENORMAL_CHECK
#else
    if( e->y < VSF)   e->y = 0.0f;
#endif
    return e->y;
 800d5a0:	4770      	bx	lr
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x; /* If we hit a peak, ride the peak to the top. */
 800d5a2:	ed93 7a02 	vldr	s14, [r3, #8]
 800d5a6:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800d5aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ae:	d5f1      	bpl.n	800d594 <tEnvelopeFollower_tick+0x28>
 800d5b0:	ed83 0a01 	vstr	s0, [r3, #4]
    return e->y;
 800d5b4:	4770      	bx	lr
    if (isnan(x)) return 0.0f;
 800d5b6:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d5bc <tEnvelopeFollower_tick+0x50>
}
 800d5ba:	4770      	bx	lr
 800d5bc:	00000000 	.word	0x00000000

0800d5c0 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800d5c6:	680d      	ldr	r5, [r1, #0]
{
 800d5c8:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800d5ca:	2010      	movs	r0, #16
{
 800d5cc:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	f004 fd13 	bl	8011ffc <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 800d5d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
 800d5da:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800d5dc:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 800d5de:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
 800d5e0:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
 800d5e4:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
 800d5e6:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
 800d5ea:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800d5ee:	ecbd 8b02 	vpop	{d8}
 800d5f2:	bd38      	pop	{r3, r4, r5, pc}

0800d5f4 <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
    _tPowerFollower* p = *pf;
 800d5f4:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
 800d5f6:	6801      	ldr	r1, [r0, #0]
 800d5f8:	f004 bdc2 	b.w	8012180 <mpool_free>

0800d5fc <tPowerFollower_setFactor>:

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
    
    if (factor<0.0f) factor=0.0f;
 800d5fc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tPowerFollower* p = *pf;
 800d600:	6803      	ldr	r3, [r0, #0]
    if (factor<0.0f) factor=0.0f;
 800d602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d606:	d40f      	bmi.n	800d628 <tPowerFollower_setFactor+0x2c>
    if (factor>1.0f) factor=1.0f;
 800d608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d60c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d614:	dd11      	ble.n	800d63a <tPowerFollower_setFactor+0x3e>
 800d616:	eeb0 0a47 	vmov.f32	s0, s14
 800d61a:	eddf 7a09 	vldr	s15, [pc, #36]	; 800d640 <tPowerFollower_setFactor+0x44>
    p->factor=factor;
 800d61e:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
 800d622:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800d626:	4770      	bx	lr
 800d628:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (factor<0.0f) factor=0.0f;
 800d62c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800d640 <tPowerFollower_setFactor+0x44>
    p->factor=factor;
 800d630:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
 800d634:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800d638:	4770      	bx	lr
    p->oneminusfactor=1.0f-factor;
 800d63a:	ee77 7a40 	vsub.f32	s15, s14, s0
 800d63e:	e7ee      	b.n	800d61e <tPowerFollower_setFactor+0x22>
 800d640:	00000000 	.word	0x00000000

0800d644 <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
 800d644:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
 800d646:	ed93 6a03 	vldr	s12, [r3, #12]
 800d64a:	ed93 7a01 	vldr	s14, [r3, #4]
 800d64e:	edd3 7a02 	vldr	s15, [r3, #8]
 800d652:	ee20 7a07 	vmul.f32	s14, s0, s14
 800d656:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d65a:	eee7 7a00 	vfma.f32	s15, s14, s0
 800d65e:	eeb0 0a67 	vmov.f32	s0, s15
 800d662:	edc3 7a03 	vstr	s15, [r3, #12]
    return p->curr;
}
 800d666:	4770      	bx	lr

0800d668 <tLinearDelay_free>:
    
    tLinearDelay_setDelay(dl, d->delay);
}

void tLinearDelay_free (tLinearDelay* const dl)
{
 800d668:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 800d66a:	6804      	ldr	r4, [r0, #0]
    
    mpool_free((char*)d->buff, d->mempool);
 800d66c:	6821      	ldr	r1, [r4, #0]
 800d66e:	68a0      	ldr	r0, [r4, #8]
 800d670:	f004 fd86 	bl	8012180 <mpool_free>
    mpool_free((char*)d, d->mempool);
 800d674:	6821      	ldr	r1, [r4, #0]
 800d676:	4620      	mov	r0, r4
}
 800d678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 800d67c:	f004 bd80 	b.w	8012180 <mpool_free>

0800d680 <tLinearDelay_clear>:

void    tLinearDelay_clear(tLinearDelay* const dl)
{
    _tLinearDelay* d = *dl;
 800d680:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800d682:	69cb      	ldr	r3, [r1, #28]
 800d684:	b14b      	cbz	r3, 800d69a <tLinearDelay_clear+0x1a>
 800d686:	2300      	movs	r3, #0
    {
        d->buff[i] = 0;
 800d688:	2000      	movs	r0, #0
 800d68a:	688a      	ldr	r2, [r1, #8]
 800d68c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 800d690:	3301      	adds	r3, #1
        d->buff[i] = 0;
 800d692:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800d694:	69ca      	ldr	r2, [r1, #28]
 800d696:	429a      	cmp	r2, r3
 800d698:	d8f7      	bhi.n	800d68a <tLinearDelay_clear+0xa>
    }
}
 800d69a:	4770      	bx	lr

0800d69c <tLinearDelay_tick>:

Lfloat   tLinearDelay_tick (tLinearDelay* const dl, Lfloat input)
{
 800d69c:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 800d69e:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 800d6a0:	edd3 7a01 	vldr	s15, [r3, #4]
 800d6a4:	6959      	ldr	r1, [r3, #20]
 800d6a6:	689a      	ldr	r2, [r3, #8]
 800d6a8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d6ac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800d6b0:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800d6b4:	69dc      	ldr	r4, [r3, #28]

    uint32_t idx = (uint32_t) d->outPoint;
    // First 1/2 of interpolation
    d->lastOut = d->buff[idx] * d->omAlpha;
 800d6b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    uint32_t idx = (uint32_t) d->outPoint;
 800d6ba:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800d6be:	3201      	adds	r2, #1
        // Second 1/2 of interpolation
    if ((idx + 1) < d->maxDelay)
 800d6c0:	1c48      	adds	r0, r1, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800d6c2:	42a2      	cmp	r2, r4
 800d6c4:	bf08      	it	eq
 800d6c6:	2200      	moveq	r2, #0
    if ((idx + 1) < d->maxDelay)
 800d6c8:	4284      	cmp	r4, r0
 800d6ca:	615a      	str	r2, [r3, #20]
    d->lastOut = d->buff[idx] * d->omAlpha;
 800d6cc:	689a      	ldr	r2, [r3, #8]
 800d6ce:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800d6d2:	ed91 0a00 	vldr	s0, [r1]
 800d6d6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d6da:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 800d6de:	d90b      	bls.n	800d6f8 <tLinearDelay_tick+0x5c>
        d->lastOut += d->buff[idx+1] * d->alpha;
 800d6e0:	ed91 7a01 	vldr	s14, [r1, #4]
 800d6e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    else
        d->lastOut += d->buff[0] * d->alpha;

    // Increment output pointer modulo length
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800d6e8:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 800d6ea:	eea7 0a27 	vfma.f32	s0, s14, s15
 800d6ee:	ed83 0a03 	vstr	s0, [r3, #12]

    return d->lastOut;
}
 800d6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6f6:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 800d6f8:	ed92 7a00 	vldr	s14, [r2]
 800d6fc:	2000      	movs	r0, #0
 800d6fe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800d702:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 800d704:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
 800d708:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800d70c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d710:	4770      	bx	lr
 800d712:	bf00      	nop

0800d714 <tLinearDelay_tickIn>:

void   tLinearDelay_tickIn (tLinearDelay* const dl, Lfloat input)
{
    _tLinearDelay* d = *dl;
 800d714:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 800d716:	edd3 7a01 	vldr	s15, [r3, #4]
 800d71a:	6959      	ldr	r1, [r3, #20]
 800d71c:	689a      	ldr	r2, [r3, #8]
 800d71e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d722:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800d726:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800d72a:	695a      	ldr	r2, [r3, #20]
 800d72c:	69d9      	ldr	r1, [r3, #28]
 800d72e:	3201      	adds	r2, #1
 800d730:	428a      	cmp	r2, r1
 800d732:	bf08      	it	eq
 800d734:	2200      	moveq	r2, #0
 800d736:	615a      	str	r2, [r3, #20]
}
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop

0800d73c <tLinearDelay_tickOut>:

Lfloat   tLinearDelay_tickOut (tLinearDelay* const dl)
{
 800d73c:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 800d73e:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
 800d740:	699a      	ldr	r2, [r3, #24]
    // First 1/2 of interpolation
    d->lastOut = d->buff[idx] * d->omAlpha;
 800d742:	6899      	ldr	r1, [r3, #8]
 800d744:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800d748:	eb01 0082 	add.w	r0, r1, r2, lsl #2
        // Second 1/2 of interpolation
        
    if ((idx + 1) < d->maxDelay)
 800d74c:	69dc      	ldr	r4, [r3, #28]
 800d74e:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
 800d750:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
 800d754:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
 800d756:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d75a:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 800d75e:	d20b      	bcs.n	800d778 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
 800d760:	ed90 7a01 	vldr	s14, [r0, #4]
 800d764:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    else
        d->lastOut += d->buff[0] * d->alpha;

    // Increment output pointer modulo length
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800d768:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 800d76a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800d76e:	ed83 0a03 	vstr	s0, [r3, #12]

    return d->lastOut;
}
 800d772:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d776:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 800d778:	ed91 7a00 	vldr	s14, [r1]
 800d77c:	2200      	movs	r2, #0
 800d77e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800d782:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 800d784:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
 800d788:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800d78c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop

0800d794 <tLinearDelay_setDelay>:

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
 800d794:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 800d796:	6804      	ldr	r4, [r0, #0]
{
 800d798:	eef0 0a40 	vmov.f32	s1, s0

    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800d79c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800d7a0:	edd4 7a07 	vldr	s15, [r4, #28]
 800d7a4:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800d7a8:	f004 f8ec 	bl	8011984 <LEAF_clip>

    Lfloat outPointer = d->inPoint - d->delay;
 800d7ac:	edd4 7a05 	vldr	s15, [r4, #20]

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
 800d7b0:	69e2      	ldr	r2, [r4, #28]
    Lfloat outPointer = d->inPoint - d->delay;
 800d7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800d7b6:	ed84 0a08 	vstr	s0, [r4, #32]
    Lfloat outPointer = d->inPoint - d->delay;
 800d7ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
 800d7be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c6:	d50a      	bpl.n	800d7de <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
 800d7c8:	ee07 2a10 	vmov	s14, r2
 800d7cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d7d0:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800d7d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7dc:	d4f8      	bmi.n	800d7d0 <tLinearDelay_setDelay+0x3c>

    d->outPoint = (uint32_t) outPointer;   // integer part
 800d7de:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800d7e2:	ee17 3a10 	vmov	r3, s14

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
 800d7e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 800d7ea:	ee06 3a90 	vmov	s13, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	bf08      	it	eq
 800d7f2:	2300      	moveq	r3, #0
    d->alpha = outPointer - d->outPoint; // fractional part
 800d7f4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800d7f8:	61a3      	str	r3, [r4, #24]
 800d7fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 800d7fe:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
 800d802:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 800d806:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
}
 800d80a:	bd10      	pop	{r4, pc}

0800d80c <tLinearDelay_initToPool>:
{
 800d80c:	b570      	push	{r4, r5, r6, lr}
 800d80e:	460d      	mov	r5, r1
 800d810:	4606      	mov	r6, r0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800d812:	202c      	movs	r0, #44	; 0x2c
{
 800d814:	ed2d 8b02 	vpush	{d8}
 800d818:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 800d81a:	6811      	ldr	r1, [r2, #0]
{
 800d81c:	eeb0 8a40 	vmov.f32	s16, s0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800d820:	9101      	str	r1, [sp, #4]
 800d822:	f004 fbeb 	bl	8011ffc <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
 800d826:	ee07 5a90 	vmov	s15, r5
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800d82a:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 800d82c:	9901      	ldr	r1, [sp, #4]
 800d82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d832:	eef4 7ac8 	vcmpe.f32	s15, s16
 800d836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d83a:	d408      	bmi.n	800d84e <tLinearDelay_initToPool+0x42>
    else if (delay < 0.0f)  d->delay = 0.0f;
 800d83c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800d840:	eddf 7a11 	vldr	s15, [pc, #68]	; 800d888 <tLinearDelay_initToPool+0x7c>
 800d844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d848:	bf58      	it	pl
 800d84a:	eef0 7a48 	vmovpl.f32	s15, s16
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800d84e:	6034      	str	r4, [r6, #0]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800d850:	00a8      	lsls	r0, r5, #2
    d->mempool = m;
 800d852:	6021      	str	r1, [r4, #0]
    d->maxDelay = maxDelay;
 800d854:	61e5      	str	r5, [r4, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 800d856:	edc4 7a08 	vstr	s15, [r4, #32]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800d85a:	f004 fbcf 	bl	8011ffc <mpool_alloc>
 800d85e:	4603      	mov	r3, r0
    d->lastIn = 0.0f;
 800d860:	2200      	movs	r2, #0
    d->gain = 1.0f;
 800d862:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800d866:	60a3      	str	r3, [r4, #8]
    tLinearDelay_setDelay(dl, d->delay);
 800d868:	4630      	mov	r0, r6
    d->inPoint = 0;
 800d86a:	2300      	movs	r3, #0
    tLinearDelay_setDelay(dl, d->delay);
 800d86c:	ed94 0a08 	vldr	s0, [r4, #32]
    d->gain = 1.0f;
 800d870:	6061      	str	r1, [r4, #4]
    d->lastIn = 0.0f;
 800d872:	6122      	str	r2, [r4, #16]
    d->lastOut = 0.0f;
 800d874:	60e2      	str	r2, [r4, #12]
    d->outPoint = 0;
 800d876:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800d87a:	b002      	add	sp, #8
 800d87c:	ecbd 8b02 	vpop	{d8}
 800d880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tLinearDelay_setDelay(dl, d->delay);
 800d884:	f7ff bf86 	b.w	800d794 <tLinearDelay_setDelay>
 800d888:	00000000 	.word	0x00000000

0800d88c <tLinearDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tLinearDelay_addTo (tLinearDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tLinearDelay* d = *dl;
 800d88c:	6802      	ldr	r2, [r0, #0]

    int32_t tap = d->inPoint - tapDelay - 1;
 800d88e:	6953      	ldr	r3, [r2, #20]
 800d890:	1a59      	subs	r1, r3, r1

    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
 800d892:	3901      	subs	r1, #1
 800d894:	d502      	bpl.n	800d89c <tLinearDelay_addTo+0x10>
 800d896:	69d3      	ldr	r3, [r2, #28]
 800d898:	18c9      	adds	r1, r1, r3
 800d89a:	d4fd      	bmi.n	800d898 <tLinearDelay_addTo+0xc>
    
    return (d->buff[tap] += value);
 800d89c:	6893      	ldr	r3, [r2, #8]
 800d89e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800d8a2:	edd3 7a00 	vldr	s15, [r3]
 800d8a6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d8aa:	ed83 0a00 	vstr	s0, [r3]
}
 800d8ae:	4770      	bx	lr

0800d8b0 <tLagrangeDelay_free>:

    tLagrangeDelay_setDelay(dl, d->delay);
}

void tLagrangeDelay_free (tLagrangeDelay* const dl)
{
 800d8b0:	b510      	push	{r4, lr}
    _tLagrangeDelay* d = *dl;
 800d8b2:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)d->buff, d->mempool);
 800d8b4:	e9d4 1000 	ldrd	r1, r0, [r4]
 800d8b8:	f004 fc62 	bl	8012180 <mpool_free>
    mpool_free((char*)d, d->mempool);
 800d8bc:	6821      	ldr	r1, [r4, #0]
 800d8be:	4620      	mov	r0, r4
}
 800d8c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 800d8c4:	f004 bc5c 	b.w	8012180 <mpool_free>

0800d8c8 <tLagrangeDelay_clear>:


void    tLagrangeDelay_clear(tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
 800d8c8:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800d8ca:	69cb      	ldr	r3, [r1, #28]
 800d8cc:	b14b      	cbz	r3, 800d8e2 <tLagrangeDelay_clear+0x1a>
 800d8ce:	2300      	movs	r3, #0
    {
        d->buff[i] = 0.0f;
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	684a      	ldr	r2, [r1, #4]
 800d8d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 800d8d8:	3301      	adds	r3, #1
        d->buff[i] = 0.0f;
 800d8da:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800d8dc:	69ca      	ldr	r2, [r1, #28]
 800d8de:	429a      	cmp	r2, r3
 800d8e0:	d8f7      	bhi.n	800d8d2 <tLagrangeDelay_clear+0xa>
    }
}
 800d8e2:	4770      	bx	lr

0800d8e4 <tLagrangeDelay_tickIn>:
    return d->lastOut;
}

void   tLagrangeDelay_tickIn (tLagrangeDelay* const dl, Lfloat input)
{
	_tLagrangeDelay* d = *dl;
 800d8e4:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input;
 800d8e6:	6959      	ldr	r1, [r3, #20]
 800d8e8:	685a      	ldr	r2, [r3, #4]
 800d8ea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800d8ee:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
 800d8f2:	695a      	ldr	r2, [r3, #20]
 800d8f4:	6899      	ldr	r1, [r3, #8]
 800d8f6:	3201      	adds	r2, #1
 800d8f8:	400a      	ands	r2, r1
 800d8fa:	615a      	str	r2, [r3, #20]
}
 800d8fc:	4770      	bx	lr
 800d8fe:	bf00      	nop

0800d900 <tLagrangeDelay_tickOut>:

Lfloat   tLagrangeDelay_tickOut (tLagrangeDelay* const dl)
{
 800d900:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;
 800d902:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;

   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
 800d904:	e9d3 2106 	ldrd	r2, r1, [r3, #24]
 800d908:	e9d3 0401 	ldrd	r0, r4, [r3, #4]
 800d90c:	4411      	add	r1, r2

    d->lastOut =    (d->buff[previdx] * d->h0) +
    		(d->buff[idx] * d->h1) +
 800d90e:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 800d912:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800d916:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
 800d91a:	3901      	subs	r1, #1
    		(d->buff[idx] * d->h1) +
 800d91c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800d920:	ed9c 0a00 	vldr	s0, [ip]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
 800d924:	4021      	ands	r1, r4
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800d926:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
    		(d->buff[idx] * d->h1) +
 800d92a:	ee20 0a25 	vmul.f32	s0, s0, s11
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800d92e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d932:	ed91 6a00 	vldr	s12, [r1]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800d936:	1c51      	adds	r1, r2, #1
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 800d938:	3202      	adds	r2, #2
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800d93a:	eea6 0a07 	vfma.f32	s0, s12, s14
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800d93e:	4021      	ands	r1, r4
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 800d940:	4022      	ands	r2, r4
 800d942:	eb00 0282 	add.w	r2, r0, r2, lsl #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800d946:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800d94a:	ed92 7a00 	vldr	s14, [r2]
    		(d->buff[idx] * d->h1) +
 800d94e:	ed90 6a00 	vldr	s12, [r0]

    //d->buff[previdx] = 0.0f;
    // Increment output pointer modulo length
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 800d952:	6199      	str	r1, [r3, #24]
    		(d->buff[idx] * d->h1) +
 800d954:	eea6 0a26 	vfma.f32	s0, s12, s13
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800d958:	eea7 0a27 	vfma.f32	s0, s14, s15
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800d95c:	ed83 0a03 	vstr	s0, [r3, #12]

    return d->lastOut;
}
 800d960:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d964:	4770      	bx	lr
 800d966:	bf00      	nop

0800d968 <tLagrangeDelay_setDelay>:

void tLagrangeDelay_setDelay (tLagrangeDelay* const dl, Lfloat delay)
{
	_tLagrangeDelay* d = *dl;
 800d968:	6803      	ldr	r3, [r0, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
 800d96a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d96e:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
 800d972:	ed83 0a08 	vstr	s0, [r3, #32]
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
 800d976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d97a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800d97e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while ( outPointer < 0 )
 800d982:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d98a:	d50a      	bpl.n	800d9a2 <tLagrangeDelay_setDelay+0x3a>
        outPointer += d->maxDelay; // modulo maximum length
 800d98c:	ed93 7a07 	vldr	s14, [r3, #28]
 800d990:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800d994:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800d998:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a0:	d4f8      	bmi.n	800d994 <tLagrangeDelay_setDelay+0x2c>

    d->outPoint = (uint32_t) outPointer;   // integer part
 800d9a2:	eefc 6ae7 	vcvt.u32.f32	s13, s15

	Lfloat pdp1d = dp1*alpha;
	Lfloat pddm1 = alpha*dm1;
	Lfloat pdm1dm2 = dm1*dm2;

	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800d9a6:	ed9f 3a1d 	vldr	s6, [pc, #116]	; 800da1c <tLagrangeDelay_setDelay+0xb4>
	Lfloat dp1 = alpha+1.0f;
 800d9aa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
	d->h1 = 0.5f * (dp1 * pdm1dm2);
	d->h2 = -0.5f * (pdp1d * dm2);
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800d9ae:	eddf 4a1c 	vldr	s9, [pc, #112]	; 800da20 <tLagrangeDelay_setDelay+0xb8>
	Lfloat dm2 = alpha-2.0f;
 800d9b2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0

    d->outPoint &= d->bufferMask;
 800d9b6:	689a      	ldr	r2, [r3, #8]
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
 800d9b8:	eeb8 6a66 	vcvt.f32.u32	s12, s13
    d->outPoint &= d->bufferMask;
 800d9bc:	ee16 1a90 	vmov	r1, s13
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800d9c0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
	d->h2 = -0.5f * (pdp1d * dm2);
 800d9c4:	eebe 4a00 	vmov.f32	s8, #224	; 0xbf000000 -0.5
    d->outPoint &= d->bufferMask;
 800d9c8:	400a      	ands	r2, r1
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
 800d9ca:	ee77 7ac6 	vsub.f32	s15, s15, s12
    d->outPoint &= d->bufferMask;
 800d9ce:	619a      	str	r2, [r3, #24]
	Lfloat dm1 = alpha-1.0f;
 800d9d0:	ee77 6ac5 	vsub.f32	s13, s15, s10
	Lfloat dm2 = alpha-2.0f;
 800d9d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
	Lfloat dp1 = alpha+1.0f;
 800d9d8:	ee37 5a85 	vadd.f32	s10, s15, s10
	Lfloat pddm1 = alpha*dm1;
 800d9dc:	ee67 5aa6 	vmul.f32	s11, s15, s13
	Lfloat pdm1dm2 = dm1*dm2;
 800d9e0:	ee26 6a87 	vmul.f32	s12, s13, s14
	Lfloat pdp1d = dp1*alpha;
 800d9e4:	ee67 7a85 	vmul.f32	s15, s15, s10
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800d9e8:	ee65 5a87 	vmul.f32	s11, s11, s14
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800d9ec:	ee26 6a05 	vmul.f32	s12, s12, s10
	d->h2 = -0.5f * (pdp1d * dm2);
 800d9f0:	ee27 7a27 	vmul.f32	s14, s14, s15
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800d9f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800d9f8:	ee65 5a83 	vmul.f32	s11, s11, s6
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800d9fc:	ee66 7a23 	vmul.f32	s15, s12, s7
	d->h2 = -0.5f * (pdp1d * dm2);
 800da00:	ee27 7a04 	vmul.f32	s14, s14, s8
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800da04:	ee66 6aa4 	vmul.f32	s13, s13, s9
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800da08:	edc3 5a09 	vstr	s11, [r3, #36]	; 0x24
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800da0c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	d->h2 = -0.5f * (pdp1d * dm2);
 800da10:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800da14:	edc3 6a0c 	vstr	s13, [r3, #48]	; 0x30
}
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	be2aaaab 	.word	0xbe2aaaab
 800da20:	3e2aaaab 	.word	0x3e2aaaab

0800da24 <tLagrangeDelay_initToPool>:
{
 800da24:	b570      	push	{r4, r5, r6, lr}
 800da26:	460d      	mov	r5, r1
 800da28:	4606      	mov	r6, r0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800da2a:	2034      	movs	r0, #52	; 0x34
{
 800da2c:	ed2d 8b02 	vpush	{d8}
 800da30:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 800da32:	6811      	ldr	r1, [r2, #0]
{
 800da34:	eeb0 8a40 	vmov.f32	s16, s0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800da38:	9101      	str	r1, [sp, #4]
 800da3a:	f004 fadf 	bl	8011ffc <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
 800da3e:	ee07 5a90 	vmov	s15, r5
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800da42:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 800da44:	9901      	ldr	r1, [sp, #4]
 800da46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da4a:	eef4 7ac8 	vcmpe.f32	s15, s16
 800da4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da52:	d408      	bmi.n	800da66 <tLagrangeDelay_initToPool+0x42>
    else if (delay < 0.0f)  d->delay = 0.0f;
 800da54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800da58:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800dac4 <tLagrangeDelay_initToPool+0xa0>
 800da5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da60:	bf58      	it	pl
 800da62:	eef0 7a48 	vmovpl.f32	s15, s16
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800da66:	6034      	str	r4, [r6, #0]
    d->mempool = m;
 800da68:	6021      	str	r1, [r4, #0]
    d->maxDelay = maxDelay;
 800da6a:	61e5      	str	r5, [r4, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 800da6c:	edc4 7a08 	vstr	s15, [r4, #32]
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 800da70:	bb1d      	cbnz	r5, 800daba <tLagrangeDelay_initToPool+0x96>
 800da72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        maxDelay |= maxDelay >> 1;
 800da76:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
 800da7a:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
 800da7e:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
 800da82:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
 800da86:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
 800da8a:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
 800da8c:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
 800da8e:	60a2      	str	r2, [r4, #8]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800da90:	00a8      	lsls	r0, r5, #2
 800da92:	f004 fab3 	bl	8011ffc <mpool_alloc>
    d->lastIn = 0.0f;
 800da96:	2200      	movs	r2, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800da98:	4601      	mov	r1, r0
    d->inPoint = 0;
 800da9a:	2300      	movs	r3, #0
    tLagrangeDelay_setDelay(dl, d->delay);
 800da9c:	ed94 0a08 	vldr	s0, [r4, #32]
 800daa0:	4630      	mov	r0, r6
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800daa2:	6061      	str	r1, [r4, #4]
    d->lastIn = 0.0f;
 800daa4:	6122      	str	r2, [r4, #16]
    d->lastOut = 0.0f;
 800daa6:	60e2      	str	r2, [r4, #12]
    d->outPoint = 0;
 800daa8:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 800daac:	b002      	add	sp, #8
 800daae:	ecbd 8b02 	vpop	{d8}
 800dab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tLagrangeDelay_setDelay(dl, d->delay);
 800dab6:	f7ff bf57 	b.w	800d968 <tLagrangeDelay_setDelay>
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 800daba:	1e6b      	subs	r3, r5, #1
 800dabc:	422b      	tst	r3, r5
 800dabe:	461a      	mov	r2, r3
 800dac0:	d0e5      	beq.n	800da8e <tLagrangeDelay_initToPool+0x6a>
 800dac2:	e7d8      	b.n	800da76 <tLagrangeDelay_initToPool+0x52>
 800dac4:	00000000 	.word	0x00000000

0800dac8 <tLagrangeDelay_tapOut>:

Lfloat tLagrangeDelay_tapOut (tLagrangeDelay* const dl, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800dac8:	6802      	ldr	r2, [r0, #0]

    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 800daca:	6953      	ldr	r3, [r2, #20]
 800dacc:	1a5b      	subs	r3, r3, r1

    return d->buff[tap];
 800dace:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 800dad2:	3b01      	subs	r3, #1
 800dad4:	4003      	ands	r3, r0
    return d->buff[tap];
 800dad6:	eb02 0283 	add.w	r2, r2, r3, lsl #2

}
 800dada:	ed92 0a00 	vldr	s0, [r2]
 800dade:	4770      	bx	lr

0800dae0 <tLagrangeDelay_tapOutInterpolated>:
{
	_tLagrangeDelay* d = *dl;

    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;

    alpha = 1.0f - alpha;
 800dae0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 800dae4:	f06f 0301 	mvn.w	r3, #1
    Lfloat dp1 = alpha+1.0f;
    Lfloat dm1 = alpha-1.0f;
    Lfloat dm2 = alpha-2.0f;
 800dae8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0

    Lfloat pdp1d = dp1*alpha;
    Lfloat pddm1 = alpha*dm1;
    Lfloat pdm1dm2 = dm1*dm2;

    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 800daec:	ed9f 5a28 	vldr	s10, [pc, #160]	; 800db90 <tLagrangeDelay_tapOutInterpolated+0xb0>
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 800daf0:	1a59      	subs	r1, r3, r1
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 800daf2:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    alpha = 1.0f - alpha;
 800daf6:	ee76 7a40 	vsub.f32	s15, s12, s0
{
 800dafa:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;
 800dafc:	6802      	ldr	r2, [r0, #0]
    Lfloat dm1 = alpha-1.0f;
 800dafe:	ee77 6ac6 	vsub.f32	s13, s15, s12
    Lfloat dm2 = alpha-2.0f;
 800db02:	ee37 7ac7 	vsub.f32	s14, s15, s14
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 800db06:	6953      	ldr	r3, [r2, #20]
    Lfloat dp1 = alpha+1.0f;
 800db08:	ee37 6a86 	vadd.f32	s12, s15, s12
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 800db0c:	6894      	ldr	r4, [r2, #8]
    Lfloat pddm1 = alpha*dm1;
 800db0e:	ee67 5aa6 	vmul.f32	s11, s15, s13
    Lfloat pdm1dm2 = dm1*dm2;
 800db12:	ee26 0a87 	vmul.f32	s0, s13, s14
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 800db16:	4419      	add	r1, r3
    Lfloat h2 = -0.5f * (pdp1d * dm2);
    Lfloat h3 = 0.166666666666667f * (pdp1d * dm1);
    
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800db18:	69d3      	ldr	r3, [r2, #28]
    Lfloat pdp1d = dp1*alpha;
 800db1a:	ee67 7a86 	vmul.f32	s15, s15, s12
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 800db1e:	4021      	ands	r1, r4
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800db20:	6852      	ldr	r2, [r2, #4]
 800db22:	3b01      	subs	r3, #1
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 800db24:	ee20 0a06 	vmul.f32	s0, s0, s12
    		(d->buff[idx] * h1) +
 800db28:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 800db2c:	ee65 5a87 	vmul.f32	s11, s11, s14
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800db30:	440b      	add	r3, r1
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 800db32:	ee27 7a27 	vmul.f32	s14, s14, s15
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 800db36:	ee20 0a04 	vmul.f32	s0, s0, s8
    		(d->buff[idx] * h1) +
 800db3a:	edd0 4a00 	vldr	s9, [r0]
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800db3e:	4023      	ands	r3, r4
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 800db40:	ee25 6a85 	vmul.f32	s12, s11, s10
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 800db44:	1c48      	adds	r0, r1, #1
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 800db46:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800db4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    		(d->buff[idx] * h1) +
 800db4e:	ee20 0a24 	vmul.f32	s0, s0, s9
    Lfloat h3 = 0.166666666666667f * (pdp1d * dm1);
 800db52:	ee66 6aa7 	vmul.f32	s13, s13, s15
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 800db56:	3102      	adds	r1, #2
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800db58:	ed93 5a00 	vldr	s10, [r3]
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 800db5c:	ea00 0304 	and.w	r3, r0, r4
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 800db60:	ee27 7a25 	vmul.f32	s14, s14, s11
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 800db64:	4021      	ands	r1, r4
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800db66:	eea5 0a06 	vfma.f32	s0, s10, s12
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 800db6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    Lfloat h3 = 0.166666666666667f * (pdp1d * dm1);
 800db6e:	ed9f 6a09 	vldr	s12, [pc, #36]	; 800db94 <tLagrangeDelay_tapOutInterpolated+0xb4>
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 800db72:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    		(d->buff[idx] * h1) +
 800db76:	edd3 7a00 	vldr	s15, [r3]
    Lfloat h3 = 0.166666666666667f * (pdp1d * dm1);
 800db7a:	ee66 6a86 	vmul.f32	s13, s13, s12

}
 800db7e:	f85d 4b04 	ldr.w	r4, [sp], #4
    		(d->buff[idx] * h1) +
 800db82:	eea7 0a87 	vfma.f32	s0, s15, s14
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 800db86:	edd2 7a00 	vldr	s15, [r2]
}
 800db8a:	eea7 0aa6 	vfma.f32	s0, s15, s13
 800db8e:	4770      	bx	lr
 800db90:	be2aaaab 	.word	0xbe2aaaab
 800db94:	3e2aaaab 	.word	0x3e2aaaab

0800db98 <tLagrangeDelay_tapIn>:

void tLagrangeDelay_tapIn (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800db98:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800db9a:	6953      	ldr	r3, [r2, #20]
 800db9c:	1a5b      	subs	r3, r3, r1

    d->buff[tap] = value;
 800db9e:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800dba2:	3b01      	subs	r3, #1
 800dba4:	4003      	ands	r3, r0
    d->buff[tap] = value;
 800dba6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dbaa:	ed82 0a00 	vstr	s0, [r2]
}
 800dbae:	4770      	bx	lr

0800dbb0 <tLagrangeDelay_addTo>:

Lfloat tLagrangeDelay_addTo (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800dbb0:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800dbb2:	6953      	ldr	r3, [r2, #20]
 800dbb4:	1a5b      	subs	r3, r3, r1

    return (d->buff[tap] += value);
 800dbb6:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800dbba:	3b01      	subs	r3, #1
 800dbbc:	4003      	ands	r3, r0
    return (d->buff[tap] += value);
 800dbbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dbc2:	edd3 7a00 	vldr	s15, [r3]
 800dbc6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dbca:	ed83 0a00 	vstr	s0, [r3]
}
 800dbce:	4770      	bx	lr

0800dbd0 <tLagrangeDelay_getMaxDelay>:


Lfloat   tLagrangeDelay_getMaxDelay (tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
    return d->maxDelay;
 800dbd0:	6803      	ldr	r3, [r0, #0]
 800dbd2:	ed93 0a07 	vldr	s0, [r3, #28]
}
 800dbd6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800dbda:	4770      	bx	lr

0800dbdc <tTapeDelay_initToPool>:
{
    tTapeDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tTapeDelay_initToPool (tTapeDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
 800dbdc:	b570      	push	{r4, r5, r6, lr}
 800dbde:	460e      	mov	r6, r1
 800dbe0:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 800dbe2:	6811      	ldr	r1, [r2, #0]
{
 800dbe4:	4605      	mov	r5, r0
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 800dbe6:	202c      	movs	r0, #44	; 0x2c
{
 800dbe8:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 800dbec:	9100      	str	r1, [sp, #0]
 800dbee:	f004 fa05 	bl	8011ffc <mpool_alloc>
    d->mempool = m;
 800dbf2:	9900      	ldr	r1, [sp, #0]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	6028      	str	r0, [r5, #0]
    d->mempool = m;
 800dbf8:	6001      	str	r1, [r0, #0]

    d->maxDelay = maxDelay;
 800dbfa:	6186      	str	r6, [r0, #24]

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800dbfc:	00b0      	lsls	r0, r6, #2
 800dbfe:	f004 f9fd 	bl	8011ffc <mpool_alloc>

    d->gain = 1.0f;
 800dc02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0

    d->lastIn = 0.0f;
 800dc06:	2300      	movs	r3, #0
    d->lastOut = 0.0f;

    d->idx = 0.0f;
    d->inc = 1.0f;
    d->inPoint = 0;
 800dc08:	2200      	movs	r2, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800dc0a:	60a0      	str	r0, [r4, #8]
    d->lastIn = 0.0f;
 800dc0c:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 800dc0e:	60e3      	str	r3, [r4, #12]
    d->idx = 0.0f;
 800dc10:	6263      	str	r3, [r4, #36]	; 0x24
    d->inPoint = 0;
 800dc12:	6162      	str	r2, [r4, #20]
    d->gain = 1.0f;
 800dc14:	ed84 0a01 	vstr	s0, [r4, #4]
    d->inc = 1.0f;
 800dc18:	ed84 0a08 	vstr	s0, [r4, #32]
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
    _tTapeDelay* d = *dl;
 800dc1c:	682c      	ldr	r4, [r5, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 800dc1e:	eddd 0a01 	vldr	s1, [sp, #4]
 800dc22:	edd4 7a06 	vldr	s15, [r4, #24]
 800dc26:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800dc2a:	f003 feab 	bl	8011984 <LEAF_clip>
 800dc2e:	ed84 0a07 	vstr	s0, [r4, #28]
}
 800dc32:	b002      	add	sp, #8
 800dc34:	bd70      	pop	{r4, r5, r6, pc}
 800dc36:	bf00      	nop

0800dc38 <tTapeDelay_tick>:
{
 800dc38:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 800dc3a:	6804      	ldr	r4, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 800dc3c:	edd4 7a01 	vldr	s15, [r4, #4]
 800dc40:	6962      	ldr	r2, [r4, #20]
 800dc42:	68a3      	ldr	r3, [r4, #8]
 800dc44:	ee27 0a80 	vmul.f32	s0, s15, s0
 800dc48:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800dc4c:	ed83 0a00 	vstr	s0, [r3]
    int idx =  (int) d->idx;
 800dc50:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800dc54:	68a1      	ldr	r1, [r4, #8]
    int idx =  (int) d->idx;
 800dc56:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800dc5a:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
    int idx =  (int) d->idx;
 800dc5e:	ee17 2a10 	vmov	r2, s14
    Lfloat alpha = d->idx - idx;
 800dc62:	eeb8 2ac7 	vcvt.f32.s32	s4, s14
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800dc66:	3001      	adds	r0, #1
                                              d->buff[(idx + 2) % d->maxDelay],
 800dc68:	f102 0e02 	add.w	lr, r2, #2
                                              d->buff[(idx + 1) % d->maxDelay],
 800dc6c:	f102 0c01 	add.w	ip, r2, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800dc70:	4298      	cmp	r0, r3
 800dc72:	bf08      	it	eq
 800dc74:	2000      	moveq	r0, #0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800dc76:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800dc7a:	6160      	str	r0, [r4, #20]
 800dc7c:	1e58      	subs	r0, r3, #1
 800dc7e:	4410      	add	r0, r2
 800dc80:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800dc84:	edd2 0a00 	vldr	s1, [r2]
                                              d->buff[(idx + 2) % d->maxDelay],
 800dc88:	fbbe f2f3 	udiv	r2, lr, r3
 800dc8c:	fb03 ee12 	mls	lr, r3, r2, lr
                                              d->buff[(idx + 1) % d->maxDelay],
 800dc90:	fbbc f2f3 	udiv	r2, ip, r3
 800dc94:	fb03 cc12 	mls	ip, r3, r2, ip
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800dc98:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 800dc9c:	fbb0 f2f3 	udiv	r2, r0, r3
 800dca0:	fb03 0012 	mls	r0, r3, r2, r0
 800dca4:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 800dca8:	edde 1a00 	vldr	s3, [lr]
 800dcac:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800dcb0:	ed9c 1a00 	vldr	s2, [ip]
 800dcb4:	ed91 0a00 	vldr	s0, [r1]
 800dcb8:	f004 f878 	bl	8011dac <LEAF_interpolate_hermite_x>
    Lfloat diff = (d->inPoint - d->idx);
 800dcbc:	edd4 7a05 	vldr	s15, [r4, #20]
 800dcc0:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 800dcc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    while (diff < 0.f) diff += d->maxDelay;
 800dcc8:	edd4 6a06 	vldr	s13, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800dccc:	ed84 0a03 	vstr	s0, [r4, #12]
    while (diff < 0.f) diff += d->maxDelay;
 800dcd0:	eef8 6a66 	vcvt.f32.u32	s13, s13
    Lfloat diff = (d->inPoint - d->idx);
 800dcd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while (diff < 0.f) diff += d->maxDelay;
 800dcd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dcdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dce0:	d506      	bpl.n	800dcf0 <tTapeDelay_tick+0xb8>
 800dce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dce6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dcea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcee:	d4f8      	bmi.n	800dce2 <tTapeDelay_tick+0xaa>
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 800dcf0:	edd4 5a07 	vldr	s11, [r4, #28]
 800dcf4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800dcf8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800dcfc:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800dd00:	ee36 6a05 	vadd.f32	s12, s12, s10
    d->idx += d->inc;
 800dd04:	ee77 7a06 	vadd.f32	s15, s14, s12
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 800dd08:	ed84 6a08 	vstr	s12, [r4, #32]
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 800dd0c:	eef4 7ae6 	vcmpe.f32	s15, s13
    d->idx += d->inc;
 800dd10:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 800dd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd18:	db08      	blt.n	800dd2c <tTapeDelay_tick+0xf4>
 800dd1a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800dd1e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800dd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd26:	daf8      	bge.n	800dd1a <tTapeDelay_tick+0xe2>
 800dd28:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    if (d->lastOut)
 800dd2c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800dd30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return 0.0f;
 800dd34:	bf08      	it	eq
 800dd36:	ed9f 0a01 	vldreq	s0, [pc, #4]	; 800dd3c <tTapeDelay_tick+0x104>
}
 800dd3a:	bd10      	pop	{r4, pc}
 800dd3c:	00000000 	.word	0x00000000

0800dd40 <tTapeDelay_setDelay>:
{
 800dd40:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 800dd42:	6804      	ldr	r4, [r0, #0]
{
 800dd44:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 800dd48:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800dd4c:	edd4 7a06 	vldr	s15, [r4, #24]
 800dd50:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800dd54:	f003 fe16 	bl	8011984 <LEAF_clip>
 800dd58:	ed84 0a07 	vstr	s0, [r4, #28]
}
 800dd5c:	bd10      	pop	{r4, pc}
 800dd5e:	bf00      	nop

0800dd60 <tCrusher_initToPool>:
{
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
 800dd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 800dd62:	680f      	ldr	r7, [r1, #0]
{
 800dd64:	4606      	mov	r6, r0
 800dd66:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 800dd68:	2020      	movs	r0, #32
 800dd6a:	4639      	mov	r1, r7
 800dd6c:	f004 f946 	bl	8011ffc <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
 800dd70:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
 800dd74:	4a12      	ldr	r2, [pc, #72]	; (800ddc0 <tCrusher_initToPool+0x60>)
    c->op = 4;
 800dd76:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 800dd78:	6030      	str	r0, [r6, #0]
 800dd7a:	4604      	mov	r4, r0
    c->op = 4;
 800dd7c:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
 800dd7e:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
 800dd80:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
 800dd82:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
 800dd84:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 800dd86:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 800dd88:	682d      	ldr	r5, [r5, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 800dd8a:	4629      	mov	r1, r5
 800dd8c:	f004 f936 	bl	8011ffc <mpool_alloc>
    s->invRatio = 1.0f;
 800dd90:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
 800dd94:	2200      	movs	r2, #0
    s->count = 0;
 800dd96:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 800dd98:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 800dd9a:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 800ddc4 <tCrusher_initToPool+0x64>
    s->mempool = m;
 800dd9e:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
 800dda0:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
 800dda2:	6082      	str	r2, [r0, #8]
    s->count = 0;
 800dda4:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 800dda6:	edd4 5a03 	vldr	s11, [r4, #12]
 800ddaa:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800ddc8 <tCrusher_initToPool+0x68>
 800ddae:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800ddb2:	eddf 7a06 	vldr	s15, [pc, #24]	; 800ddcc <tCrusher_initToPool+0x6c>
 800ddb6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ddba:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800ddbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddc0:	3951b717 	.word	0x3951b717
 800ddc4:	459c4000 	.word	0x459c4000
 800ddc8:	3f333333 	.word	0x3f333333
 800ddcc:	3e99999a 	.word	0x3e99999a

0800ddd0 <tCrusher_init>:
    tCrusher_initToPool(cr, &leaf->mempool);
 800ddd0:	3118      	adds	r1, #24
 800ddd2:	f7ff bfc5 	b.w	800dd60 <tCrusher_initToPool>
 800ddd6:	bf00      	nop

0800ddd8 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 800ddd8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800de54 <tCrusher_tick+0x7c>
 800dddc:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 800dde0:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
 800dde2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
 800dde6:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
 800dde8:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
 800ddec:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 800ddf0:	6960      	ldr	r0, [r4, #20]
 800ddf2:	05c0      	lsls	r0, r0, #23
 800ddf4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ddf8:	f003 fdbe 	bl	8011978 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 800ddfc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 800de00:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
 800de04:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800de08:	f003 fdbc 	bl	8011984 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 800de0c:	edd4 0a04 	vldr	s1, [r4, #16]
 800de10:	f003 fd9c 	bl	801194c <LEAF_round>
    _tSampleReducer* s = *sr;
 800de14:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
 800de16:	68da      	ldr	r2, [r3, #12]
 800de18:	edd3 7a01 	vldr	s15, [r3, #4]
 800de1c:	ee07 2a10 	vmov	s14, r2
 800de20:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800de24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de2c:	dc08      	bgt.n	800de40 <tCrusher_tick+0x68>
    s->count++;
 800de2e:	3201      	adds	r2, #1
    return s->hold;
 800de30:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
 800de34:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
 800de36:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 800de3a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800de3e:	bd10      	pop	{r4, pc}
        s->hold = input;
 800de40:	2201      	movs	r2, #1
 800de42:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
 800de46:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
 800de48:	edd4 7a06 	vldr	s15, [r4, #24]
}
 800de4c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800de50:	bd10      	pop	{r4, pc}
 800de52:	bf00      	nop
 800de54:	459c4000 	.word	0x459c4000

0800de58 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
 800de58:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
 800de5c:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
 800de5e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800de62:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800de66:	ed83 0a05 	vstr	s0, [r3, #20]
}
 800de6a:	4770      	bx	lr

0800de6c <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
 800de6c:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
 800de70:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800deb0 <tCrusher_setQuality+0x44>
 800de74:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 800de78:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
 800de7a:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
 800de7c:	f003 fd82 	bl	8011984 <LEAF_clip>
    
    c->div = 0.01f + val * SCALAR;
 800de80:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800deb4 <tCrusher_setQuality+0x48>
 800de84:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800deb8 <tCrusher_setQuality+0x4c>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 800de88:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800debc <tCrusher_setQuality+0x50>
    c->div = 0.01f + val * SCALAR;
 800de8c:	eee0 7a07 	vfma.f32	s15, s0, s14
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 800de90:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800dec0 <tCrusher_setQuality+0x54>
 800de94:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 800dec4 <tCrusher_setQuality+0x58>
 800de98:	ee67 6aa6 	vmul.f32	s13, s15, s13
    c->div = 0.01f + val * SCALAR;
 800de9c:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 800dea0:	eef0 7a47 	vmov.f32	s15, s14
 800dea4:	eee6 7a86 	vfma.f32	s15, s13, s12
 800dea8:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800deac:	bd10      	pop	{r4, pc}
 800deae:	bf00      	nop
 800deb0:	00000000 	.word	0x00000000
 800deb4:	459c4000 	.word	0x459c4000
 800deb8:	3c23d70a 	.word	0x3c23d70a
 800debc:	3951b717 	.word	0x3951b717
 800dec0:	3e99999a 	.word	0x3e99999a
 800dec4:	3f333333 	.word	0x3f333333

0800dec8 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
 800dec8:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
 800deca:	ed83 0a04 	vstr	s0, [r3, #16]
}
 800dece:	4770      	bx	lr

0800ded0 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 800ded0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
    _tCrusher* c = *cr;
 800ded4:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
 800ded6:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 800deda:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800dede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee2:	d900      	bls.n	800dee6 <tCrusher_setSamplingRatio+0x16>
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
 800dee4:	4770      	bx	lr
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 800dee6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800deea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deee:	dbf9      	blt.n	800dee4 <tCrusher_setSamplingRatio+0x14>
        s->invRatio = 1.0f / ratio;
 800def0:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
 800def4:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
 800def6:	ed83 7a01 	vstr	s14, [r3, #4]
}
 800defa:	4770      	bx	lr

0800defc <tCompressor_initToPool>:
{
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
 800defc:	b570      	push	{r4, r5, r6, lr}
 800defe:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800df02:	680d      	ldr	r5, [r1, #0]
{
 800df04:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 800df06:	206c      	movs	r0, #108	; 0x6c
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 800df08:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 800df0c:	4629      	mov	r1, r5
 800df0e:	f004 f875 	bl	8011ffc <mpool_alloc>
 800df12:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 800df14:	6005      	str	r5, [r0, #0]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 800df16:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
 800df18:	686b      	ldr	r3, [r5, #4]
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 800df1a:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800df84 <tCompressor_initToPool+0x88>
    c->sampleRate = leaf->sampleRate;
 800df1e:	ed93 8a00 	vldr	s16, [r3]
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 800df22:	ee28 0a00 	vmul.f32	s0, s16, s0
    c->sampleRate = leaf->sampleRate;
 800df26:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 800df2a:	ee88 0a80 	vdiv.f32	s0, s17, s0
 800df2e:	f008 fd1f 	bl	8016970 <expf>
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 800df32:	eddf 7a15 	vldr	s15, [pc, #84]	; 800df88 <tCompressor_initToPool+0x8c>
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 800df36:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 800df3a:	ee28 0a27 	vmul.f32	s0, s16, s15
 800df3e:	ee88 0a80 	vdiv.f32	s0, s17, s0
 800df42:	f008 fd15 	bl	8016970 <expf>
    c->x_T[0] = 0.0f;
    c->x_T[1] = 0.0f;
    c->y_T[0] = 0.0f;
    c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
 800df46:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f;
 800df4a:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
 800df4c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
 800df50:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
 800df52:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f;
 800df54:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
 800df56:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
 800df58:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[1] = 0.0f;
 800df5c:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f;
 800df5e:	62e3      	str	r3, [r4, #44]	; 0x2c
    c->y_G[1] = 0.0f;
 800df60:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f;
 800df62:	6363      	str	r3, [r4, #52]	; 0x34
    c->x_T[1] = 0.0f;
 800df64:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f;
 800df66:	63e3      	str	r3, [r4, #60]	; 0x3c
    c->y_T[1] = 0.0f;
 800df68:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
 800df6a:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
 800df6c:	4907      	ldr	r1, [pc, #28]	; (800df8c <tCompressor_initToPool+0x90>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
 800df6e:	4b08      	ldr	r3, [pc, #32]	; (800df90 <tCompressor_initToPool+0x94>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 800df70:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
 800df74:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
 800df76:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
 800df78:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
 800df7a:	6223      	str	r3, [r4, #32]
    

}
 800df7c:	ecbd 8b02 	vpop	{d8}
 800df80:	bd70      	pop	{r4, r5, r6, pc}
 800df82:	bf00      	nop
 800df84:	3d4ccccd 	.word	0x3d4ccccd
 800df88:	3dcccccd 	.word	0x3dcccccd
 800df8c:	40400000 	.word	0x40400000
 800df90:	3e2aaaab 	.word	0x3e2aaaab

0800df94 <tCompressor_init>:
    tCompressor_initToPool(comp, &leaf->mempool);
 800df94:	3118      	adds	r1, #24
 800df96:	f7ff bfb1 	b.w	800defc <tCompressor_initToPool>
 800df9a:	bf00      	nop

0800df9c <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat tCompressor_tick(tCompressor* const comp, Lfloat in)
{
 800df9c:	b510      	push	{r4, lr}
 800df9e:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
 800dfa2:	6804      	ldr	r4, [r0, #0]
{
 800dfa4:	eeb0 8a40 	vmov.f32	s16, s0
    
    Lfloat slope, overshoot;
    
    Lfloat in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
 800dfa8:	f003 fb7c 	bl	80116a4 <fastabsf>
 800dfac:	f003 ffaa 	bl	8011f04 <fasteratodb>
 800dfb0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800e070 <tCompressor_tick+0xd4>
 800dfb4:	eef0 0a40 	vmov.f32	s1, s0
 800dfb8:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800e074 <tCompressor_tick+0xd8>
 800dfbc:	f003 fce2 	bl	8011984 <LEAF_clip>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
 800dfc0:	edd4 7a03 	vldr	s15, [r4, #12]
    

    if (overshoot <= -(c->W))
 800dfc4:	ed94 7a05 	vldr	s14, [r4, #20]
    overshoot = in_db - c->T;
 800dfc8:	ee70 7a67 	vsub.f32	s15, s0, s15
    c->y_T[1] = c->y_T[0];
 800dfcc:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
 800dfd0:	eeb1 6a47 	vneg.f32	s12, s14
    c->y_T[1] = c->y_T[0];
 800dfd4:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
 800dfd8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800dfdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfe0:	da19      	bge.n	800e016 <tCompressor_tick+0x7a>
    slope = 1.0f - c->invR; // feed-forward topology;
 800dfe2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800dfe6:	edd4 5a07 	vldr	s11, [r4, #28]
 800dfea:	ee36 6a65 	vsub.f32	s12, s12, s11
    {
        out_db = in_db;
        c->isActive = 0;
    }
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 800dfee:	d538      	bpl.n	800e062 <tCompressor_tick+0xc6>
 800dff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dff8:	dd33      	ble.n	800e062 <tCompressor_tick+0xc6>
    {
        Lfloat squareit = (overshoot + c->W);
 800dffa:	ee37 7a27 	vadd.f32	s14, s14, s15
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 800dffe:	edd4 7a08 	vldr	s15, [r4, #32]
    {
 800e002:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 800e004:	ee27 7a07 	vmul.f32	s14, s14, s14
 800e008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e00c:	eeb0 7a40 	vmov.f32	s14, s0
 800e010:	eea7 7a86 	vfma.f32	s14, s15, s12
    {
 800e014:	e002      	b.n	800e01c <tCompressor_tick+0x80>
        out_db = in_db;
 800e016:	eeb0 7a40 	vmov.f32	s14, s0
 800e01a:	2300      	movs	r3, #0
    {
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
 800e01c:	ee37 7a40 	vsub.f32	s14, s14, s0
    if (c->x_T[0] > c->y_T[1])
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
 800e020:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 800e024:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        c->isActive = 0;
 800e028:	6463      	str	r3, [r4, #68]	; 0x44
    if (c->x_T[0] > c->y_T[1])
 800e02a:	eef4 6ac7 	vcmpe.f32	s13, s14
    c->x_T[0] = out_db - in_db;
 800e02e:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
 800e032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 800e036:	bf4c      	ite	mi
 800e038:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 800e03c:	ed94 6a02 	vldrpl	s12, [r4, #8]
 800e040:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e044:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e048:	eee6 7a86 	vfma.f32	s15, s13, s12
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
 800e04c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e050:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 800e054:	f003 ff88 	bl	8011f68 <fasterdbtoa>
    return attenuation * in;
}
 800e058:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e05c:	ecbd 8b02 	vpop	{d8}
 800e060:	bd10      	pop	{r4, pc}
        out_db = in_db + slope * overshoot;
 800e062:	eeb0 7a40 	vmov.f32	s14, s0
 800e066:	2301      	movs	r3, #1
 800e068:	eea6 7a27 	vfma.f32	s14, s12, s15
        c->isActive = 1;
 800e06c:	e7d6      	b.n	800e01c <tCompressor_tick+0x80>
 800e06e:	bf00      	nop
 800e070:	00000000 	.word	0x00000000
 800e074:	c2b40000 	.word	0xc2b40000

0800e078 <tCompressor_setTables>:
{
    _tCompressor* c = *comp;
	c->atodbTable = atodb;
	c->dbtoaTable = dbtoa;

	c->atodbTableSizeMinus1 = atodbTableSize-1;
 800e078:	3b01      	subs	r3, #1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 800e07a:	ee70 0ac0 	vsub.f32	s1, s1, s0
    _tCompressor* c = *comp;
 800e07e:	6800      	ldr	r0, [r0, #0]
	c->atodbOffset = atodbMinIn * c->atodbScalar;


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 800e080:	ee71 1ac1 	vsub.f32	s3, s3, s2
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 800e084:	ee07 3a90 	vmov	s15, r3
	c->atodbTableSizeMinus1 = atodbTableSize-1;
 800e088:	6643      	str	r3, [r0, #100]	; 0x64
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 800e08a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
{
 800e08e:	9b00      	ldr	r3, [sp, #0]
	c->atodbTable = atodb;
 800e090:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
 800e092:	3b01      	subs	r3, #1
	c->dbtoaTable = dbtoa;
 800e094:	6502      	str	r2, [r0, #80]	; 0x50
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 800e096:	eec7 7a20 	vdiv.f32	s15, s14, s1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
 800e09a:	6683      	str	r3, [r0, #104]	; 0x68
	c->atodbOffset = atodbMinIn * c->atodbScalar;
 800e09c:	ee27 0a80 	vmul.f32	s0, s15, s0
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 800e0a0:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 800e0a4:	ee07 3a90 	vmov	s15, r3
 800e0a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	c->atodbOffset = atodbMinIn * c->atodbScalar;
 800e0ac:	ed80 0a17 	vstr	s0, [r0, #92]	; 0x5c
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 800e0b0:	eec7 7a21 	vdiv.f32	s15, s14, s3
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
 800e0b4:	ee27 1a81 	vmul.f32	s2, s15, s2
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 800e0b8:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
 800e0bc:	ed80 1a18 	vstr	s2, [r0, #96]	; 0x60

}
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop

0800e0c4 <tCompressor_setSampleRate>:
    c->tauRelease = fasterexpf(-1.0f/(0.001f * release * c->sampleRate));
}

void tCompressor_setSampleRate(tCompressor* const comp, Lfloat sampleRate)
{
    _tCompressor* c = *comp;
 800e0c4:	6803      	ldr	r3, [r0, #0]
    c->sampleRate = sampleRate;
 800e0c6:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
}
 800e0ca:	4770      	bx	lr

0800e0cc <tFeedbackLeveler_init>:
/* Feedback Leveler */

void tFeedbackLeveler_init (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, LEAF* const leaf)
{
 800e0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
    _tMempool* m = *mp;
 800e0ce:	4614      	mov	r4, r2
{
 800e0d0:	4606      	mov	r6, r0
 800e0d2:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800e0d4:	2018      	movs	r0, #24
{
 800e0d6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800e0da:	f854 7f18 	ldr.w	r7, [r4, #24]!
{
 800e0de:	b083      	sub	sp, #12
 800e0e0:	eef0 8a40 	vmov.f32	s17, s0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800e0e4:	4639      	mov	r1, r7
{
 800e0e6:	eeb0 8a41 	vmov.f32	s16, s2
 800e0ea:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800e0ee:	f003 ff85 	bl	8011ffc <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800e0f2:	4621      	mov	r1, r4
    p->curr=0.0f;
 800e0f4:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800e0f6:	4604      	mov	r4, r0
 800e0f8:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800e0fa:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e0fe:	3014      	adds	r0, #20
    p->mempool = m;
 800e100:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
 800e104:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
 800e108:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800e10a:	f7ff fa59 	bl	800d5c0 <tPowerFollower_initToPool>
    p->mode=mode;
 800e10e:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 800e110:	ed84 8a02 	vstr	s16, [r4, #8]
}
 800e114:	b003      	add	sp, #12
 800e116:	ecbd 8b02 	vpop	{d8}
 800e11a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e11c <tFeedbackLeveler_initToPool>:
{
 800e11c:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 800e11e:	6817      	ldr	r7, [r2, #0]
{
 800e120:	4614      	mov	r4, r2
 800e122:	4606      	mov	r6, r0
 800e124:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800e126:	2018      	movs	r0, #24
 800e128:	4639      	mov	r1, r7
{
 800e12a:	ed2d 8b02 	vpush	{d8}
 800e12e:	eef0 8a40 	vmov.f32	s17, s0
 800e132:	b083      	sub	sp, #12
 800e134:	eeb0 8a41 	vmov.f32	s16, s2
 800e138:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800e13c:	f003 ff5e 	bl	8011ffc <mpool_alloc>
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800e140:	4621      	mov	r1, r4
    p->curr=0.0f;
 800e142:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800e144:	4604      	mov	r4, r0
 800e146:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800e148:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e14c:	3014      	adds	r0, #20
    p->mempool = m;
 800e14e:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
 800e152:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
 800e156:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800e158:	f7ff fa32 	bl	800d5c0 <tPowerFollower_initToPool>
    p->mode=mode;
 800e15c:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 800e15e:	ed84 8a02 	vstr	s16, [r4, #8]
}
 800e162:	b003      	add	sp, #12
 800e164:	ecbd 8b02 	vpop	{d8}
 800e168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e16a:	bf00      	nop

0800e16c <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
 800e16c:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
 800e16e:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
 800e170:	f104 0014 	add.w	r0, r4, #20
 800e174:	f7ff fa3e 	bl	800d5f4 <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
 800e178:	6821      	ldr	r1, [r4, #0]
 800e17a:	4620      	mov	r0, r4
}
 800e17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 800e180:	f003 bffe 	b.w	8012180 <mpool_free>

0800e184 <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
 800e184:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
 800e186:	ed83 0a02 	vstr	s0, [r3, #8]
}
 800e18a:	4770      	bx	lr

0800e18c <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
 800e18c:	6800      	ldr	r0, [r0, #0]
 800e18e:	3014      	adds	r0, #20
 800e190:	f7ff ba34 	b.w	800d5fc <tPowerFollower_setFactor>

0800e194 <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
 800e194:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
 800e196:	60d9      	str	r1, [r3, #12]
}
 800e198:	4770      	bx	lr
 800e19a:	bf00      	nop

0800e19c <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
 800e19c:	b510      	push	{r4, lr}
 800e19e:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
 800e1a2:	6804      	ldr	r4, [r0, #0]
{
 800e1a4:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 800e1a8:	f104 0014 	add.w	r0, r4, #20
 800e1ac:	f7ff fa4a 	bl	800d644 <tPowerFollower_tick>
 800e1b0:	edd4 7a01 	vldr	s15, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 800e1b4:	68e3      	ldr	r3, [r4, #12]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 800e1b6:	ee30 7a67 	vsub.f32	s14, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 800e1ba:	b933      	cbnz	r3, 800e1ca <tFeedbackLeveler_tick+0x2e>
 800e1bc:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e1c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c4:	bf48      	it	mi
 800e1c6:	ed9f 7a07 	vldrmi	s14, [pc, #28]	; 800e1e4 <tFeedbackLeveler_tick+0x48>
    p->curr=input*(1.0f-p->strength*levdiff);
 800e1ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e1ce:	edd4 6a02 	vldr	s13, [r4, #8]
 800e1d2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800e1d6:	ee27 0a88 	vmul.f32	s0, s15, s16
 800e1da:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
 800e1de:	ecbd 8b02 	vpop	{d8}
 800e1e2:	bd10      	pop	{r4, pc}
 800e1e4:	00000000 	.word	0x00000000

0800e1e8 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
 800e1e8:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
 800e1ea:	ed83 0a01 	vstr	s0, [r3, #4]
}
 800e1ee:	4770      	bx	lr

0800e1f0 <tADSRT_initToPool>:
}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
 800e1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f2:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 800e1f6:	681e      	ldr	r6, [r3, #0]
{
 800e1f8:	4614      	mov	r4, r2
 800e1fa:	4607      	mov	r7, r0
 800e1fc:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800e1fe:	206c      	movs	r0, #108	; 0x6c
 800e200:	4631      	mov	r1, r6
{
 800e202:	eeb0 9a40 	vmov.f32	s18, s0
 800e206:	eef0 8a60 	vmov.f32	s17, s1
 800e20a:	eef0 9a41 	vmov.f32	s19, s2
 800e20e:	eeb0 8a61 	vmov.f32	s16, s3
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800e212:	f003 fef3 	bl	8011ffc <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800e216:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800e21a:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 800e21c:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
 800e21e:	6006      	str	r6, [r0, #0]
    LEAF* leaf = adsr->mempool->leaf;
 800e220:	6873      	ldr	r3, [r6, #4]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800e222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e226:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800e2e0 <tADSRT_initToPool+0xf0>

    if (attack < 0.0f)
 800e22a:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
    adsr->exp_buff = expBuffer;
 800e22e:	6045      	str	r5, [r0, #4]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 800e230:	e9c0 4202 	strd	r4, r2, [r0, #8]
    adsr->sampleRate = leaf->sampleRate;
 800e234:	edd3 7a00 	vldr	s15, [r3]
    if (attack < 0.0f)
 800e238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.0f;

    if (decay < 0.0f)
 800e23c:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800e240:	ee27 7a87 	vmul.f32	s14, s15, s14
    adsr->sampleRate = leaf->sampleRate;
 800e244:	edc0 7a04 	vstr	s15, [r0, #16]
        attack = 0.0f;
 800e248:	bf48      	it	mi
 800e24a:	ed9f 9a26 	vldrmi	s18, [pc, #152]	; 800e2e4 <tADSRT_initToPool+0xf4>
    if (decay < 0.0f)
 800e24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800e252:	eec6 7a87 	vdiv.f32	s15, s13, s14
        decay = 0.0f;
 800e256:	bf48      	it	mi
 800e258:	eddf 8a22 	vldrmi	s17, [pc, #136]	; 800e2e4 <tADSRT_initToPool+0xf4>

    if (sustain > 1.0f)
 800e25c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e260:	eef4 9ac7 	vcmpe.f32	s19, s14
 800e264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800e268:	edc0 7a05 	vstr	s15, [r0, #20]
    if (sustain > 1.0f)
 800e26c:	dd2f      	ble.n	800e2ce <tADSRT_initToPool+0xde>
        sustain = 1.0f;
 800e26e:	eef0 9a47 	vmov.f32	s19, s14
    if (sustain < 0.0f)
        sustain = 0.0f;

    if (release < 0.0f)
 800e272:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;

    adsr->baseLeakFactor = 1.0f;
 800e276:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800e27a:	ee87 6a89 	vdiv.f32	s12, s15, s18
    adsr->next = 0.0f;
 800e27e:	2400      	movs	r4, #0
    adsr->whichStage = env_idle;
 800e280:	2100      	movs	r1, #0
    adsr->sustain = sustain;
 800e282:	edc0 9a10 	vstr	s19, [r0, #64]	; 0x40
    adsr->next = 0.0f;
 800e286:	6184      	str	r4, [r0, #24]
    adsr->whichStage = env_idle;
 800e288:	63c1      	str	r1, [r0, #60]	; 0x3c
    adsr->attack = attack;
 800e28a:	ed80 9a08 	vstr	s18, [r0, #32]
    if (release < 0.0f)
 800e28e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    adsr->decay = decay;
 800e292:	edc0 8a09 	vstr	s17, [r0, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800e296:	eec7 6aa8 	vdiv.f32	s13, s15, s17
    adsr->baseLeakFactor = 1.0f;
 800e29a:	6602      	str	r2, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
 800e29c:	6642      	str	r2, [r0, #100]	; 0x64
        release = 0.0f;
 800e29e:	bf48      	it	mi
 800e2a0:	ed9f 8a10 	vldrmi	s16, [pc, #64]	; 800e2e4 <tADSRT_initToPool+0xf4>
    adsr->release = release;
 800e2a4:	ed80 8a0a 	vstr	s16, [r0, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800e2a8:	ee87 7a88 	vdiv.f32	s14, s15, s16
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800e2ac:	eef4 5a00 	vmov.f32	s11, #64	; 0x3e000000  0.125
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800e2b0:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800e2b4:	ee67 7aa5 	vmul.f32	s15, s15, s11
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800e2b8:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800e2bc:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800e2c0:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->invSampleRate = leaf->invSampleRate;
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	6683      	str	r3, [r0, #104]	; 0x68
}
 800e2c8:	ecbd 8b04 	vpop	{d8-d9}
 800e2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sustain < 0.0f)
 800e2ce:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800e2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2d6:	d5cc      	bpl.n	800e272 <tADSRT_initToPool+0x82>
        sustain = 0.0f;
 800e2d8:	eddf 9a02 	vldr	s19, [pc, #8]	; 800e2e4 <tADSRT_initToPool+0xf4>
 800e2dc:	e7c9      	b.n	800e272 <tADSRT_initToPool+0x82>
 800e2de:	bf00      	nop
 800e2e0:	3a83126f 	.word	0x3a83126f
 800e2e4:	00000000 	.word	0x00000000

0800e2e8 <tADSRT_init>:
    tADSRT_initToPool    (adsrenv, attack, decay, sustain, release, expBuffer, bufferSize, &leaf->mempool);
 800e2e8:	3318      	adds	r3, #24
 800e2ea:	f7ff bf81 	b.w	800e1f0 <tADSRT_initToPool>
 800e2ee:	bf00      	nop

0800e2f0 <tADSRT_setAttack>:
void     tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
 800e2f0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 800e2f4:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800e2f6:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
 800e2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
 800e2fe:	bf48      	it	mi
 800e300:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 800e314 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800e304:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
 800e308:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800e30c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	3c23d70a 	.word	0x3c23d70a

0800e318 <tADSRT_setDecay>:
void     tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
 800e318:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 800e31c:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800e31e:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
 800e322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
 800e326:	bf48      	it	mi
 800e328:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 800e33c <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800e32c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
 800e330:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800e334:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800e338:	4770      	bx	lr
 800e33a:	bf00      	nop
 800e33c:	3c23d70a 	.word	0x3c23d70a

0800e340 <tADSRT_setSustain>:
void     tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 800e340:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
 800e344:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 800e346:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e34e:	dd04      	ble.n	800e35a <tADSRT_setSustain+0x1a>
 800e350:	eeb0 0a67 	vmov.f32	s0, s15
 800e354:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
    else                     adsr->sustain = sustain;
}
 800e358:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 800e35a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e362:	d5f7      	bpl.n	800e354 <tADSRT_setSustain+0x14>
 800e364:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800e370 <tADSRT_setSustain+0x30>
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 800e368:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
}
 800e36c:	4770      	bx	lr
 800e36e:	bf00      	nop
 800e370:	00000000 	.word	0x00000000

0800e374 <tADSRT_setRelease>:
void     tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
 800e374:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 800e378:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800e37a:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
 800e37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
 800e382:	bf48      	it	mi
 800e384:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 800e398 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800e388:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
 800e38c:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800e390:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	3c23d70a 	.word	0x3c23d70a

0800e39c <tADSRT_setLeakFactor>:
#ifdef ITCMRAM
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#else
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#endif
{
 800e39c:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 800e39e:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 800e3a0:	eddf 7a06 	vldr	s15, [pc, #24]	; 800e3bc <tADSRT_setLeakFactor+0x20>
 800e3a4:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
    adsr->baseLeakFactor = leakFactor;
 800e3a8:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 800e3ac:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800e3b0:	f008 fd56 	bl	8016e60 <powf>
 800e3b4:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
 800e3b8:	bd10      	pop	{r4, pc}
 800e3ba:	bf00      	nop
 800e3bc:	472c4400 	.word	0x472c4400

0800e3c0 <tADSRT_on>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#else
void tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e3c0:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 800e3c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3c4:	b162      	cbz	r2, 800e3e0 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 800e3c6:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
 800e3c8:	2105      	movs	r1, #5
        adsr->rampPeak = adsr->next;
 800e3ca:	699a      	ldr	r2, [r3, #24]
        adsr->rampPhase = 0;
 800e3cc:	65d8      	str	r0, [r3, #92]	; 0x5c
        adsr->whichStage = env_ramp;
 800e3ce:	63d9      	str	r1, [r3, #60]	; 0x3c
        adsr->rampPeak = adsr->next;
 800e3d0:	649a      	str	r2, [r3, #72]	; 0x48
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 800e3d2:	2200      	movs	r2, #0
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 800e3d4:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    adsr->attackPhase = 0;
 800e3d8:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
 800e3da:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
 800e3dc:	659a      	str	r2, [r3, #88]	; 0x58
}
 800e3de:	4770      	bx	lr
        adsr->whichStage = env_attack;
 800e3e0:	2201      	movs	r2, #1
 800e3e2:	63da      	str	r2, [r3, #60]	; 0x3c
 800e3e4:	e7f5      	b.n	800e3d2 <tADSRT_on+0x12>
 800e3e6:	bf00      	nop

0800e3e8 <tADSRT_off>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_off(tADSRT* const adsrenv)
#else
    void tADSRT_off(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e3e8:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 800e3ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3ec:	b11a      	cbz	r2, 800e3f6 <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 800e3ee:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 800e3f0:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 800e3f2:	63d9      	str	r1, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
 800e3f4:	64da      	str	r2, [r3, #76]	; 0x4c
    }
}
 800e3f6:	4770      	bx	lr

0800e3f8 <tADSRT_clear>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_clear(tADSRT* const adsrenv)
#else
	void	tADSRT_clear(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e3f8:	6803      	ldr	r3, [r0, #0]

    adsr->whichStage = env_idle;
 800e3fa:	2100      	movs	r1, #0
    adsr->next = 0.0f;
 800e3fc:	2200      	movs	r2, #0
    adsr->whichStage = env_idle;
 800e3fe:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->next = 0.0f;
 800e400:	619a      	str	r2, [r3, #24]
}
 800e402:	4770      	bx	lr

0800e404 <tADSRT_tick>:
#ifdef ITCMRAM
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))   tADSRT_tick(tADSRT* const adsrenv)
#else
		Lfloat  tADSRT_tick(tADSRT* const adsrenv)
#endif
{
 800e404:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 800e406:	6804      	ldr	r4, [r0, #0]
{
 800e408:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
 800e40c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e40e:	3b01      	subs	r3, #1
 800e410:	2b04      	cmp	r3, #4
 800e412:	f200 8154 	bhi.w	800e6be <tADSRT_tick+0x2ba>
 800e416:	e8df f003 	tbb	[pc, r3]
 800e41a:	4d1f      	.short	0x4d1f
 800e41c:	6f3a      	.short	0x6f3a
 800e41e:	03          	.byte	0x03
 800e41f:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 800e420:	edd4 7a03 	vldr	s15, [r4, #12]
 800e424:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
 800e428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e42c:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800e430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e434:	dd7d      	ble.n	800e532 <tADSRT_tick+0x12e>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
 800e436:	eddf 7aa3 	vldr	s15, [pc, #652]	; 800e6c4 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_attack;
 800e43a:	2301      	movs	r3, #1
 800e43c:	eeb0 0a67 	vmov.f32	s0, s15
 800e440:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
 800e442:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 800e446:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800e44a:	ee77 7a81 	vadd.f32	s15, s15, s2
 800e44e:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 800e452:	ecbd 8b02 	vpop	{d8}
 800e456:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 800e458:	edd4 7a03 	vldr	s15, [r4, #12]
 800e45c:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 800e460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e464:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800e468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e46c:	f340 808b 	ble.w	800e586 <tADSRT_tick+0x182>
                adsr->whichStage = env_decay;
 800e470:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
 800e472:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->whichStage = env_decay;
 800e476:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain;
 800e478:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
 800e47c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800e480:	ee77 7a81 	vadd.f32	s15, s15, s2
 800e484:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
}
 800e488:	ecbd 8b02 	vpop	{d8}
 800e48c:	bd10      	pop	{r4, pc}
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
 800e48e:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 800e492:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
 800e496:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 800e49a:	ed94 7a07 	vldr	s14, [r4, #28]
 800e49e:	ee20 0a26 	vmul.f32	s0, s0, s13
 800e4a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e4a6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e4aa:	ed84 0a06 	vstr	s0, [r4, #24]
}
 800e4ae:	ecbd 8b02 	vpop	{d8}
 800e4b2:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 800e4b4:	edd4 7a03 	vldr	s15, [r4, #12]
 800e4b8:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 800e4bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4c0:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800e4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c8:	f340 808b 	ble.w	800e5e2 <tADSRT_tick+0x1de>
                adsr->next = adsr->gain * adsr->sustain;
 800e4cc:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
 800e4d0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
 800e4d4:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
 800e4d8:	2203      	movs	r2, #3
                adsr->sustainWithLeak = 1.0f;
 800e4da:	61e3      	str	r3, [r4, #28]
                adsr->next = adsr->gain * adsr->sustain;
 800e4dc:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
 800e4e0:	63e2      	str	r2, [r4, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
 800e4e2:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
 800e4e6:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800e4ea:	ee77 7a81 	vadd.f32	s15, s15, s2
 800e4ee:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
 800e4f2:	ecbd 8b02 	vpop	{d8}
 800e4f6:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 800e4f8:	edd4 7a03 	vldr	s15, [r4, #12]
 800e4fc:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
 800e500:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e504:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800e508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e50c:	f340 809e 	ble.w	800e64c <tADSRT_tick+0x248>
                adsr->next = 0.0f;
 800e510:	eddf 7a6c 	vldr	s15, [pc, #432]	; 800e6c4 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_idle;
 800e514:	2300      	movs	r3, #0
 800e516:	eeb0 0a67 	vmov.f32	s0, s15
 800e51a:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
 800e51c:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
 800e520:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800e524:	ee77 7a81 	vadd.f32	s15, s15, s2
 800e528:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
}
 800e52c:	ecbd 8b02 	vpop	{d8}
 800e530:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 800e536:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e53a:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
 800e53e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e542:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
 800e546:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e54e:	f100 80b2 	bmi.w	800e6b6 <tADSRT_tick+0x2b2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800e552:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800e556:	6862      	ldr	r2, [r4, #4]
 800e558:	ee17 3a90 	vmov	r3, s15
 800e55c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e560:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
 800e564:	ee16 3a90 	vmov	r3, s13
 800e568:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 800e56c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e570:	ed92 0a00 	vldr	s0, [r2]
 800e574:	f003 fc38 	bl	8011de8 <LEAF_interpolation_linear>
 800e578:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
 800e57c:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
 800e580:	ed84 0a06 	vstr	s0, [r4, #24]
 800e584:	e75f      	b.n	800e446 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e586:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 800e58a:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e58e:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
 800e592:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e596:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
 800e59a:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5a2:	f100 8084 	bmi.w	800e6ae <tADSRT_tick+0x2aa>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 800e5a6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800e5aa:	6862      	ldr	r2, [r4, #4]
 800e5ac:	ee17 3a90 	vmov	r3, s15
 800e5b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e5b4:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
 800e5b8:	ee16 3a90 	vmov	r3, s13
 800e5bc:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
 800e5c0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e5c4:	ed92 0a00 	vldr	s0, [r2]
 800e5c8:	f003 fc0e 	bl	8011de8 <LEAF_interpolation_linear>
 800e5cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
 800e5d0:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
 800e5d4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e5d8:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e5dc:	ed84 0a06 	vstr	s0, [r4, #24]
 800e5e0:	e74c      	b.n	800e47c <tADSRT_tick+0x78>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e5e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 800e5e6:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e5ea:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
 800e5ee:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e5f2:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
 800e5f6:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5fe:	d452      	bmi.n	800e6a6 <tADSRT_tick+0x2a2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 800e600:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800e604:	6862      	ldr	r2, [r4, #4]
 800e606:	ee17 3a90 	vmov	r3, s15
 800e60a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e60e:	edd3 0a00 	vldr	s1, [r3]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
 800e612:	ee16 3a90 	vmov	r3, s13
 800e616:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e61a:	ed92 0a00 	vldr	s0, [r2]
 800e61e:	f003 fbe3 	bl	8011de8 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 800e622:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e626:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 800e62a:	ed94 6a11 	vldr	s12, [r4, #68]	; 0x44
 800e62e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e632:	edd4 6a19 	vldr	s13, [r4, #100]	; 0x64
            adsr->decayPhase += adsr->decayInc;
 800e636:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 800e63a:	eee7 7a00 	vfma.f32	s15, s14, s0
 800e63e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e642:	ee27 0aa6 	vmul.f32	s0, s15, s13
 800e646:	ed84 0a06 	vstr	s0, [r4, #24]
 800e64a:	e74c      	b.n	800e4e6 <tADSRT_tick+0xe2>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800e64c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 800e650:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800e654:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
 800e658:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800e65c:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
 800e660:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800e664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e668:	d419      	bmi.n	800e69e <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 800e66a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800e66e:	6862      	ldr	r2, [r4, #4]
 800e670:	ee17 3a90 	vmov	r3, s15
 800e674:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e678:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
 800e67c:	ee16 3a90 	vmov	r3, s13
 800e680:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 800e684:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800e688:	ed92 0a00 	vldr	s0, [r2]
 800e68c:	f003 fbac 	bl	8011de8 <LEAF_interpolation_linear>
 800e690:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
 800e694:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
 800e698:	ed84 0a06 	vstr	s0, [r4, #24]
 800e69c:	e740      	b.n	800e520 <tADSRT_tick+0x11c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800e69e:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800e6a0:	eddf 0a08 	vldr	s1, [pc, #32]	; 800e6c4 <tADSRT_tick+0x2c0>
 800e6a4:	e7ea      	b.n	800e67c <tADSRT_tick+0x278>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800e6a6:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800e6a8:	eddf 0a06 	vldr	s1, [pc, #24]	; 800e6c4 <tADSRT_tick+0x2c0>
 800e6ac:	e7b1      	b.n	800e612 <tADSRT_tick+0x20e>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800e6ae:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800e6b0:	eddf 0a04 	vldr	s1, [pc, #16]	; 800e6c4 <tADSRT_tick+0x2c0>
 800e6b4:	e780      	b.n	800e5b8 <tADSRT_tick+0x1b4>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800e6b6:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800e6b8:	eddf 0a02 	vldr	s1, [pc, #8]	; 800e6c4 <tADSRT_tick+0x2c0>
 800e6bc:	e752      	b.n	800e564 <tADSRT_tick+0x160>
    return adsr->next;
 800e6be:	ed94 0a06 	vldr	s0, [r4, #24]
 800e6c2:	e6c6      	b.n	800e452 <tADSRT_tick+0x4e>
 800e6c4:	00000000 	.word	0x00000000

0800e6c8 <tADSRT_tickNoInterp>:
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_tickNoInterp(tADSRT* const adsrenv)
#else
Lfloat   tADSRT_tickNoInterp(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e6c8:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 800e6ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e6cc:	3a01      	subs	r2, #1
 800e6ce:	2a04      	cmp	r2, #4
 800e6d0:	f200 80c9 	bhi.w	800e866 <tADSRT_tickNoInterp+0x19e>
 800e6d4:	e8df f002 	tbb	[pc, r2]
 800e6d8:	6533461b 	.word	0x6533461b
 800e6dc:	03          	.byte	0x03
 800e6dd:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 800e6de:	edd3 7a03 	vldr	s15, [r3, #12]
 800e6e2:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800e6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6f2:	dd6e      	ble.n	800e7d2 <tADSRT_tickNoInterp+0x10a>
            {
                adsr->whichStage = env_attack;
 800e6f4:	2201      	movs	r2, #1
 800e6f6:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800e86c <tADSRT_tickNoInterp+0x1a4>
 800e6fa:	63da      	str	r2, [r3, #60]	; 0x3c
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 800e6fc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
                adsr->next = 0.0f;
 800e700:	ed83 0a06 	vstr	s0, [r3, #24]
            adsr->rampPhase += adsr->rampInc;
 800e704:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e708:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            break;
 800e70c:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 800e70e:	edd3 7a03 	vldr	s15, [r3, #12]
 800e712:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800e716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e71a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e722:	dd64      	ble.n	800e7ee <tADSRT_tickNoInterp+0x126>
            {
                adsr->whichStage = env_decay;
 800e724:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
 800e726:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->whichStage = env_decay;
 800e72a:	63da      	str	r2, [r3, #60]	; 0x3c
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 800e72c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
                adsr->next = adsr->gain;
 800e730:	ed83 0a06 	vstr	s0, [r3, #24]
            adsr->attackPhase += adsr->attackInc;
 800e734:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e738:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 800e73c:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->sustainWithLeak *= adsr->leakFactor;
 800e73e:	edd3 7a07 	vldr	s15, [r3, #28]
 800e742:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 800e746:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
 800e74a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
            adsr->sustainWithLeak *= adsr->leakFactor;
 800e74e:	ee67 7aa6 	vmul.f32	s15, s15, s13
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 800e752:	ee20 0a07 	vmul.f32	s0, s0, s14
            adsr->sustainWithLeak *= adsr->leakFactor;
 800e756:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 800e75a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e75e:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
 800e762:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 800e764:	edd3 7a03 	vldr	s15, [r3, #12]
 800e768:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800e76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e770:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e778:	dd4b      	ble.n	800e812 <tADSRT_tickNoInterp+0x14a>
                adsr->next = adsr->gain * adsr->sustain;
 800e77a:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
 800e77e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
 800e782:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
 800e786:	2103      	movs	r1, #3
                adsr->sustainWithLeak = 1.0f;
 800e788:	61da      	str	r2, [r3, #28]
                adsr->next = adsr->gain * adsr->sustain;
 800e78a:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
 800e78e:	63d9      	str	r1, [r3, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
 800e790:	ed83 0a06 	vstr	s0, [r3, #24]
            adsr->decayPhase += adsr->decayInc;
 800e794:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800e798:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e79c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
 800e7a0:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 800e7a2:	edd3 7a03 	vldr	s15, [r3, #12]
 800e7a6:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800e7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7b6:	dd48      	ble.n	800e84a <tADSRT_tickNoInterp+0x182>
            {
                adsr->whichStage = env_idle;
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e86c <tADSRT_tickNoInterp+0x1a4>
 800e7be:	63da      	str	r2, [r3, #60]	; 0x3c
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 800e7c0:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
                adsr->next = 0.0f;
 800e7c4:	ed83 0a06 	vstr	s0, [r3, #24]
            adsr->releasePhase += adsr->releaseInc;
 800e7c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7cc:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
    }
    return adsr->next;
}
 800e7d0:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 800e7d2:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 800e7d6:	685a      	ldr	r2, [r3, #4]
 800e7d8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800e7dc:	ee16 1a90 	vmov	r1, s13
 800e7e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e7e4:	ed92 0a00 	vldr	s0, [r2]
 800e7e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e7ec:	e786      	b.n	800e6fc <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 800e7ee:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 800e7f2:	685a      	ldr	r2, [r3, #4]
 800e7f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e7f8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800e7fc:	ee16 1a90 	vmov	r1, s13
 800e800:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e804:	edd2 6a00 	vldr	s13, [r2]
 800e808:	ee30 0a66 	vsub.f32	s0, s0, s13
 800e80c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e810:	e78c      	b.n	800e72c <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 800e812:	eefc 5ac7 	vcvt.u32.f32	s11, s14
 800e816:	685a      	ldr	r2, [r3, #4]
 800e818:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e81c:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
 800e820:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 800e824:	ee15 1a90 	vmov	r1, s11
 800e828:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800e82c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e830:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e834:	edd2 5a00 	vldr	s11, [r2]
 800e838:	eea5 0aa7 	vfma.f32	s0, s11, s15
 800e83c:	ee20 0a06 	vmul.f32	s0, s0, s12
 800e840:	ee20 0a26 	vmul.f32	s0, s0, s13
 800e844:	ed83 0a06 	vstr	s0, [r3, #24]
 800e848:	e7a4      	b.n	800e794 <tADSRT_tickNoInterp+0xcc>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 800e84a:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 800e84e:	685a      	ldr	r2, [r3, #4]
 800e850:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800e854:	ee16 1a90 	vmov	r1, s13
 800e858:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800e85c:	ed92 0a00 	vldr	s0, [r2]
 800e860:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e864:	e7ac      	b.n	800e7c0 <tADSRT_tickNoInterp+0xf8>
    return adsr->next;
 800e866:	ed93 0a06 	vldr	s0, [r3, #24]
 800e86a:	4770      	bx	lr
 800e86c:	00000000 	.word	0x00000000

0800e870 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800e870:	b538      	push	{r3, r4, r5, lr}
 800e872:	ed2d 8b02 	vpush	{d8}
 800e876:	eeb0 8a60 	vmov.f32	s16, s1
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 800e87a:	698d      	ldr	r5, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800e87c:	4604      	mov	r4, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800e87e:	2014      	movs	r0, #20
 800e880:	4629      	mov	r1, r5
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800e882:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800e886:	f003 fbb9 	bl	8011ffc <mpool_alloc>
    smooth->mempool = m;
    
    smooth->curr = val;
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
 800e88a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800e88e:	6020      	str	r0, [r4, #0]
    smooth->mempool = m;
 800e890:	6005      	str	r5, [r0, #0]
    if (factor < 0.0f) factor = 0.0f;
 800e892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    smooth->curr = val;
 800e896:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest = val;
 800e89a:	edc0 8a04 	vstr	s17, [r0, #16]
    if (factor < 0.0f) factor = 0.0f;
 800e89e:	d411      	bmi.n	800e8c4 <tExpSmooth_init+0x54>
    if (factor > 1.0f) factor = 1.0f;
 800e8a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e8a4:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ac:	dd15      	ble.n	800e8da <tExpSmooth_init+0x6a>
 800e8ae:	eeb0 8a47 	vmov.f32	s16, s14
 800e8b2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800e8e0 <tExpSmooth_init+0x70>
    //smooth->baseFactor = factor;
    smooth->factor = factor;
 800e8b6:	ed80 8a01 	vstr	s16, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
 800e8ba:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800e8be:	ecbd 8b02 	vpop	{d8}
 800e8c2:	bd38      	pop	{r3, r4, r5, pc}
 800e8c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (factor < 0.0f) factor = 0.0f;
 800e8c8:	ed9f 8a05 	vldr	s16, [pc, #20]	; 800e8e0 <tExpSmooth_init+0x70>
    smooth->factor = factor;
 800e8cc:	ed80 8a01 	vstr	s16, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
 800e8d0:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800e8d4:	ecbd 8b02 	vpop	{d8}
 800e8d8:	bd38      	pop	{r3, r4, r5, pc}
    smooth->oneminusfactor = 1.0f - factor;
 800e8da:	ee77 7a48 	vsub.f32	s15, s14, s16
 800e8de:	e7ea      	b.n	800e8b6 <tExpSmooth_init+0x46>
 800e8e0:	00000000 	.word	0x00000000

0800e8e4 <tExpSmooth_initToPool>:
{
 800e8e4:	b538      	push	{r3, r4, r5, lr}
 800e8e6:	ed2d 8b02 	vpush	{d8}
 800e8ea:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800e8ee:	680d      	ldr	r5, [r1, #0]
{
 800e8f0:	4604      	mov	r4, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800e8f2:	2014      	movs	r0, #20
 800e8f4:	4629      	mov	r1, r5
{
 800e8f6:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800e8fa:	f003 fb7f 	bl	8011ffc <mpool_alloc>
    if (factor < 0.0f) factor = 0.0f;
 800e8fe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800e902:	6020      	str	r0, [r4, #0]
    smooth->mempool = m;
 800e904:	6005      	str	r5, [r0, #0]
    if (factor < 0.0f) factor = 0.0f;
 800e906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    smooth->curr = val;
 800e90a:	edc0 8a03 	vstr	s17, [r0, #12]
    smooth->dest = val;
 800e90e:	edc0 8a04 	vstr	s17, [r0, #16]
    if (factor < 0.0f) factor = 0.0f;
 800e912:	d411      	bmi.n	800e938 <tExpSmooth_initToPool+0x54>
    if (factor > 1.0f) factor = 1.0f;
 800e914:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e918:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e91c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e920:	dd15      	ble.n	800e94e <tExpSmooth_initToPool+0x6a>
 800e922:	eeb0 8a47 	vmov.f32	s16, s14
 800e926:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800e954 <tExpSmooth_initToPool+0x70>
    smooth->factor = factor;
 800e92a:	ed80 8a01 	vstr	s16, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
 800e92e:	edc0 7a02 	vstr	s15, [r0, #8]
    //smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
}
 800e932:	ecbd 8b02 	vpop	{d8}
 800e936:	bd38      	pop	{r3, r4, r5, pc}
 800e938:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (factor < 0.0f) factor = 0.0f;
 800e93c:	ed9f 8a05 	vldr	s16, [pc, #20]	; 800e954 <tExpSmooth_initToPool+0x70>
    smooth->factor = factor;
 800e940:	ed80 8a01 	vstr	s16, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
 800e944:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800e948:	ecbd 8b02 	vpop	{d8}
 800e94c:	bd38      	pop	{r3, r4, r5, pc}
    smooth->oneminusfactor = 1.0f - factor;
 800e94e:	ee77 7a48 	vsub.f32	s15, s14, s16
 800e952:	e7ea      	b.n	800e92a <tExpSmooth_initToPool+0x46>
 800e954:	00000000 	.word	0x00000000

0800e958 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 800e958:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
 800e95a:	6801      	ldr	r1, [r0, #0]
 800e95c:	f003 bc10 	b.w	8012180 <mpool_free>

0800e960 <tExpSmooth_setFactor>:

void     tExpSmooth_setFactor(tExpSmooth* const expsmooth, Lfloat factor)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
    _tExpSmooth* smooth = *expsmooth;
    
    if (factor < 0.0f)
 800e960:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tExpSmooth* smooth = *expsmooth;
 800e964:	6803      	ldr	r3, [r0, #0]
    if (factor < 0.0f)
 800e966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e96a:	d416      	bmi.n	800e99a <tExpSmooth_setFactor+0x3a>
        factor = 0.0f;
    else if (factor > 1.0f) factor = 1.0f;
 800e96c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e970:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e978:	dd08      	ble.n	800e98c <tExpSmooth_setFactor+0x2c>
 800e97a:	eeb0 0a47 	vmov.f32	s0, s14
    //smooth->baseFactor = factor;
    //smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
    smooth->factor = factor;
 800e97e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800e9ac <tExpSmooth_setFactor+0x4c>
    smooth->oneminusfactor = 1.0f - smooth->factor;
 800e982:	edc3 7a02 	vstr	s15, [r3, #8]
    smooth->factor = factor;
 800e986:	ed83 0a01 	vstr	s0, [r3, #4]
}
 800e98a:	4770      	bx	lr
    smooth->oneminusfactor = 1.0f - smooth->factor;
 800e98c:	ee77 7a40 	vsub.f32	s15, s14, s0
    smooth->factor = factor;
 800e990:	ed83 0a01 	vstr	s0, [r3, #4]
    smooth->oneminusfactor = 1.0f - smooth->factor;
 800e994:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800e998:	4770      	bx	lr
 800e99a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        factor = 0.0f;
 800e99e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800e9ac <tExpSmooth_setFactor+0x4c>
    smooth->factor = factor;
 800e9a2:	ed83 0a01 	vstr	s0, [r3, #4]
    smooth->oneminusfactor = 1.0f - smooth->factor;
 800e9a6:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800e9aa:	4770      	bx	lr
 800e9ac:	00000000 	.word	0x00000000

0800e9b0 <tExpSmooth_setDest>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#else
void     tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 800e9b0:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 800e9b2:	ed83 0a04 	vstr	s0, [r3, #16]
}
 800e9b6:	4770      	bx	lr

0800e9b8 <tExpSmooth_setVal>:

void     tExpSmooth_setVal(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 800e9b8:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 800e9ba:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800e9be:	4770      	bx	lr

0800e9c0 <tExpSmooth_setValAndDest>:

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 800e9c0:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 800e9c2:	ed83 0a03 	vstr	s0, [r3, #12]
    smooth->dest=val;
 800e9c6:	ed83 0a04 	vstr	s0, [r3, #16]
}
 800e9ca:	4770      	bx	lr

0800e9cc <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 800e9cc:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 800e9ce:	edd3 6a03 	vldr	s13, [r3, #12]
 800e9d2:	ed93 0a02 	vldr	s0, [r3, #8]
 800e9d6:	ed93 7a01 	vldr	s14, [r3, #4]
 800e9da:	ee20 0a26 	vmul.f32	s0, s0, s13
 800e9de:	edd3 7a04 	vldr	s15, [r3, #16]
 800e9e2:	eea7 0a27 	vfma.f32	s0, s14, s15
 800e9e6:	ed83 0a03 	vstr	s0, [r3, #12]
    return smooth->curr;
}
 800e9ea:	4770      	bx	lr

0800e9ec <tSlide_initToPool>:
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

//upslide and downslide are in samples
void    tSlide_initToPool    (tSlide* const sl, Lfloat upSlide, Lfloat downSlide, tMempool* const mp)
{
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800e9f2:	680d      	ldr	r5, [r1, #0]
{
 800e9f4:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800e9f6:	201c      	movs	r0, #28
{
 800e9f8:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800e9fc:	4629      	mov	r1, r5
{
 800e9fe:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800ea02:	f003 fafb 	bl	8011ffc <mpool_alloc>
    
    s->prevIn = 0.0f;
    s->currentOut = 0.0f;
    s->prevOut = 0.0f;
    s->dest = 0.0f;
    if (upSlide < 1.0f)
 800ea06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 800ea0a:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800ea0c:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 800ea0e:	6005      	str	r5, [r0, #0]
    if (upSlide < 1.0f)
 800ea10:	eef4 8ae7 	vcmpe.f32	s17, s15
    s->prevIn = 0.0f;
 800ea14:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 800ea16:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 800ea18:	6043      	str	r3, [r0, #4]
    if (upSlide < 1.0f)
 800ea1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    s->dest = 0.0f;
 800ea1e:	6183      	str	r3, [r0, #24]

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 800ea20:	bf54      	ite	pl
 800ea22:	eec7 6aa8 	vdivpl.f32	s13, s15, s17
 800ea26:	eef0 6a67 	vmovmi.f32	s13, s15
    if (downSlide < 1.0f)
 800ea2a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ea2e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ea32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    s->invDownSlide = 1.0f / downSlide;
 800ea36:	bf58      	it	pl
 800ea38:	ee87 7a88 	vdivpl.f32	s14, s15, s16
    s->invUpSlide = 1.0f / upSlide;
 800ea3c:	edc0 6a04 	vstr	s13, [r0, #16]
 800ea40:	bf48      	it	mi
 800ea42:	eeb0 7a67 	vmovmi.f32	s14, s15
    s->invDownSlide = 1.0f / downSlide;
 800ea46:	ed80 7a05 	vstr	s14, [r0, #20]
}
 800ea4a:	ecbd 8b02 	vpop	{d8}
 800ea4e:	bd38      	pop	{r3, r4, r5, pc}

0800ea50 <tSlide_free>:

void    tSlide_free  (tSlide* const sl)
{
    _tSlide* s = *sl;
 800ea50:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)s, s->mempool);
 800ea52:	6801      	ldr	r1, [r0, #0]
 800ea54:	f003 bb94 	b.w	8012180 <mpool_free>

0800ea58 <tSlide_setDest>:
    s->invDownSlide = 1.0f / downSlide;
}

void tSlide_setDest(tSlide* const sl, Lfloat dest)
{
    _tSlide* s = *sl;
 800ea58:	6803      	ldr	r3, [r0, #0]
    s->dest = dest;
 800ea5a:	ed83 0a06 	vstr	s0, [r3, #24]
}
 800ea5e:	4770      	bx	lr

0800ea60 <tSlide_tickNoInput>:

Lfloat tSlide_tickNoInput(tSlide* const sl)
{
    _tSlide* s = *sl;
 800ea60:	6803      	ldr	r3, [r0, #0]
    Lfloat in = s->dest;

    if (in >= s->prevOut)
 800ea62:	ed93 0a01 	vldr	s0, [r3, #4]
    Lfloat in = s->dest;
 800ea66:	edd3 7a06 	vldr	s15, [r3, #24]
    if (in >= s->prevOut)
 800ea6a:	eeb4 0ae7 	vcmpe.f32	s0, s15
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 800ea6e:	edc3 7a03 	vstr	s15, [r3, #12]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800ea72:	ee77 6ac0 	vsub.f32	s13, s15, s0
    if (in >= s->prevOut)
 800ea76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800ea7a:	bf94      	ite	ls
 800ea7c:	ed93 7a04 	vldrls	s14, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 800ea80:	ed93 7a05 	vldrhi	s14, [r3, #20]
 800ea84:	eea6 0a87 	vfma.f32	s0, s13, s14
 800ea88:	ed83 0a02 	vstr	s0, [r3, #8]
    s->prevOut = s->currentOut;
 800ea8c:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 800ea90:	4770      	bx	lr
 800ea92:	bf00      	nop

0800ea94 <tSlide_tick>:

Lfloat tSlide_tick(tSlide* const sl, Lfloat in)
{
    _tSlide* s = *sl;
 800ea94:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 800ea96:	edd3 7a01 	vldr	s15, [r3, #4]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 800ea9a:	ed83 0a03 	vstr	s0, [r3, #12]
    if (in >= s->prevOut)
 800ea9e:	eef4 7ac0 	vcmpe.f32	s15, s0
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800eaa2:	ee70 6a67 	vsub.f32	s13, s0, s15
    if (in >= s->prevOut)
 800eaa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800eaaa:	bf94      	ite	ls
 800eaac:	ed93 7a04 	vldrls	s14, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 800eab0:	ed93 7a05 	vldrhi	s14, [r3, #20]
 800eab4:	eee6 7a87 	vfma.f32	s15, s13, s14
    s->prevOut = s->currentOut;
    return s->currentOut;
}
 800eab8:	eeb0 0a67 	vmov.f32	s0, s15
 800eabc:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 800eac0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800eac4:	4770      	bx	lr
 800eac6:	bf00      	nop

0800eac8 <tThiranAllpassSOCascade_initToPool>:
{
    tThiranAllpassSOCascade_initToPool(ft, numFilts, &leaf->mempool);
}

void    tThiranAllpassSOCascade_initToPool     (tThiranAllpassSOCascade* const ft, int numFilts, tMempool* const mp)
{
 800eac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eacc:	460f      	mov	r7, r1
 800eace:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 800ead0:	6811      	ldr	r1, [r2, #0]
{
 800ead2:	4604      	mov	r4, r0
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 800ead4:	2058      	movs	r0, #88	; 0x58
{
 800ead6:	4690      	mov	r8, r2
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 800ead8:	9101      	str	r1, [sp, #4]
 800eada:	f003 fa8f 	bl	8011ffc <mpool_alloc>
    f->mempool = m;
    f->numFilts = numFilts;
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 800eade:	9901      	ldr	r1, [sp, #4]
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 800eae0:	4606      	mov	r6, r0
 800eae2:	6020      	str	r0, [r4, #0]
    f->k3[1] = -2.9018f;
    f->C1[1] = 0.071089f;
    f->C2[1] = 2.1074f;
    f->isHigh = 0;
    f->numFiltsMap[0] = numFilts;
    f->numFiltsMap[1] = 1;
 800eae4:	2400      	movs	r4, #0
    f->numFilts = numFilts;
 800eae6:	e9c0 1700 	strd	r1, r7, [r0]
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 800eaea:	00b8      	lsls	r0, r7, #2
 800eaec:	f003 faea 	bl	80120c4 <mpool_calloc>
    f->k1[0] = -0.00050469f;
 800eaf0:	4b1a      	ldr	r3, [pc, #104]	; (800eb5c <tThiranAllpassSOCascade_initToPool+0x94>)
    f->numActiveFilters = numFilts;
    for (int i = 0; i < numFilts; i++)
 800eaf2:	42a7      	cmp	r7, r4
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 800eaf4:	60b0      	str	r0, [r6, #8]
    f->k1[0] = -0.00050469f;
 800eaf6:	61f3      	str	r3, [r6, #28]
    f->k2[0] = -0.0064264f;
 800eaf8:	4b19      	ldr	r3, [pc, #100]	; (800eb60 <tThiranAllpassSOCascade_initToPool+0x98>)
 800eafa:	6273      	str	r3, [r6, #36]	; 0x24
    f->k3[0] = -2.8743f;
 800eafc:	4b19      	ldr	r3, [pc, #100]	; (800eb64 <tThiranAllpassSOCascade_initToPool+0x9c>)
 800eafe:	62f3      	str	r3, [r6, #44]	; 0x2c
    f->C1[0] = 0.069618f;
 800eb00:	4b19      	ldr	r3, [pc, #100]	; (800eb68 <tThiranAllpassSOCascade_initToPool+0xa0>)
 800eb02:	6373      	str	r3, [r6, #52]	; 0x34
    f->C2[0] = 2.0427f;
 800eb04:	4b19      	ldr	r3, [pc, #100]	; (800eb6c <tThiranAllpassSOCascade_initToPool+0xa4>)
 800eb06:	63f3      	str	r3, [r6, #60]	; 0x3c
    f->k1[1] = -0.0026580f;
 800eb08:	4b19      	ldr	r3, [pc, #100]	; (800eb70 <tThiranAllpassSOCascade_initToPool+0xa8>)
 800eb0a:	6233      	str	r3, [r6, #32]
    f->k2[1] = -0.014811f;
 800eb0c:	4b19      	ldr	r3, [pc, #100]	; (800eb74 <tThiranAllpassSOCascade_initToPool+0xac>)
 800eb0e:	62b3      	str	r3, [r6, #40]	; 0x28
    f->k3[1] = -2.9018f;
 800eb10:	4b19      	ldr	r3, [pc, #100]	; (800eb78 <tThiranAllpassSOCascade_initToPool+0xb0>)
 800eb12:	6333      	str	r3, [r6, #48]	; 0x30
    f->C1[1] = 0.071089f;
 800eb14:	4b19      	ldr	r3, [pc, #100]	; (800eb7c <tThiranAllpassSOCascade_initToPool+0xb4>)
 800eb16:	63b3      	str	r3, [r6, #56]	; 0x38
    f->C2[1] = 2.1074f;
 800eb18:	4b19      	ldr	r3, [pc, #100]	; (800eb80 <tThiranAllpassSOCascade_initToPool+0xb8>)
 800eb1a:	6433      	str	r3, [r6, #64]	; 0x40
    f->numFiltsMap[1] = 1;
 800eb1c:	f04f 0301 	mov.w	r3, #1
    f->numActiveFilters = numFilts;
 800eb20:	e9c6 7711 	strd	r7, r7, [r6, #68]	; 0x44
    f->numFiltsMap[1] = 1;
 800eb24:	e9c6 3413 	strd	r3, r4, [r6, #76]	; 0x4c
    for (int i = 0; i < numFilts; i++)
 800eb28:	dd15      	ble.n	800eb56 <tThiranAllpassSOCascade_initToPool+0x8e>
 800eb2a:	4682      	mov	sl, r0
    f->prevSamp = 0.0f;
 800eb2c:	2500      	movs	r5, #0
 800eb2e:	e001      	b.n	800eb34 <tThiranAllpassSOCascade_initToPool+0x6c>
    {
        tAllpassSO_initToPool(&f->filters[i], mp);
 800eb30:	f8d6 a008 	ldr.w	sl, [r6, #8]
    _tMempool* m = *mp;
 800eb34:	f8d8 9000 	ldr.w	r9, [r8]
    _tAllpassSO* f = *ft = (_tAllpassSO*) mpool_alloc(sizeof(_tAllpassSO), m);
 800eb38:	201c      	movs	r0, #28
 800eb3a:	4649      	mov	r1, r9
 800eb3c:	f003 fa5e 	bl	8011ffc <mpool_alloc>
 800eb40:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
    for (int i = 0; i < numFilts; i++)
 800eb44:	3401      	adds	r4, #1
    f->mempool = m;
 800eb46:	f8c0 9000 	str.w	r9, [r0]
    f->prevSamp = 0.0f;
 800eb4a:	6045      	str	r5, [r0, #4]
    for (int i = 0; i < numFilts; i++)
 800eb4c:	42a7      	cmp	r7, r4
    f->prevPrevSamp = 0.0f;
 800eb4e:	6085      	str	r5, [r0, #8]
    f->a1 = 0.0f;
 800eb50:	6145      	str	r5, [r0, #20]
    f->a2 = 0.0f;
 800eb52:	6185      	str	r5, [r0, #24]
    for (int i = 0; i < numFilts; i++)
 800eb54:	d1ec      	bne.n	800eb30 <tThiranAllpassSOCascade_initToPool+0x68>
    }
}
 800eb56:	b002      	add	sp, #8
 800eb58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb5c:	ba044d2c 	.word	0xba044d2c
 800eb60:	bbd2948d 	.word	0xbbd2948d
 800eb64:	c037f488 	.word	0xc037f488
 800eb68:	3d8e93e2 	.word	0x3d8e93e2
 800eb6c:	4002bb99 	.word	0x4002bb99
 800eb70:	bb2e31d7 	.word	0xbb2e31d7
 800eb74:	bc72a9d6 	.word	0xbc72a9d6
 800eb78:	c039b717 	.word	0xc039b717
 800eb7c:	3d91971c 	.word	0x3d91971c
 800eb80:	4006dfa4 	.word	0x4006dfa4

0800eb84 <tThiranAllpassSOCascade_free>:

void    tThiranAllpassSOCascade_free  (tThiranAllpassSOCascade* const ft)
{
 800eb84:	b538      	push	{r3, r4, r5, lr}
    _tThiranAllpassSOCascade* f = *ft;
 800eb86:	6805      	ldr	r5, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 800eb88:	686b      	ldr	r3, [r5, #4]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	dd0a      	ble.n	800eba4 <tThiranAllpassSOCascade_free+0x20>
 800eb8e:	2400      	movs	r4, #0
    _tAllpassSO* f = *ft;
 800eb90:	68ab      	ldr	r3, [r5, #8]
 800eb92:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
 800eb96:	3401      	adds	r4, #1
    mpool_free((char*)f, f->mempool);
 800eb98:	6801      	ldr	r1, [r0, #0]
 800eb9a:	f003 faf1 	bl	8012180 <mpool_free>
    for (int i = 0; i < f->numFilts; i++)
 800eb9e:	686b      	ldr	r3, [r5, #4]
 800eba0:	42a3      	cmp	r3, r4
 800eba2:	dcf5      	bgt.n	800eb90 <tThiranAllpassSOCascade_free+0xc>
    {
        tAllpassSO_free(&f->filters[i]);
    }
    mpool_free((char*)f->filters, f->mempool); //do I need to free the pointers separately?
 800eba4:	6829      	ldr	r1, [r5, #0]
 800eba6:	68a8      	ldr	r0, [r5, #8]
 800eba8:	f003 faea 	bl	8012180 <mpool_free>
    mpool_free((char*)f, f->mempool);
 800ebac:	6829      	ldr	r1, [r5, #0]
 800ebae:	4628      	mov	r0, r5
}
 800ebb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char*)f, f->mempool);
 800ebb4:	f003 bae4 	b.w	8012180 <mpool_free>

0800ebb8 <tThiranAllpassSOCascade_setCoeff>:

volatile Lfloat binTest;
float    tThiranAllpassSOCascade_setCoeff(tThiranAllpassSOCascade* const ft, Lfloat dispersionCoeff, Lfloat freq, Lfloat oversampling)
{
 800ebb8:	eef0 7a40 	vmov.f32	s15, s0
 800ebbc:	b510      	push	{r4, lr}
 800ebbe:	ed2d 8b08 	vpush	{d8-d11}
    _tThiranAllpassSOCascade* f = *ft;

    f->B = dispersionCoeff;
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 800ebc2:	ed9f aa63 	vldr	s20, [pc, #396]	; 800ed50 <tThiranAllpassSOCascade_setCoeff+0x198>
{
 800ebc6:	eeb0 9a41 	vmov.f32	s18, s2
    _tThiranAllpassSOCascade* f = *ft;
 800ebca:	6804      	ldr	r4, [r0, #0]
{
 800ebcc:	eef0 8a60 	vmov.f32	s17, s1
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 800ebd0:	ed9f 8a60 	vldr	s16, [pc, #384]	; 800ed54 <tThiranAllpassSOCascade_setCoeff+0x19c>
 800ebd4:	ee20 0a8a 	vmul.f32	s0, s1, s20
    f->B = dispersionCoeff;
 800ebd8:	edc4 7a03 	vstr	s15, [r4, #12]
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 800ebdc:	eef2 9a08 	vmov.f32	s19, #40	; 0x41400000  12.0
 800ebe0:	f007 ffa0 	bl	8016b24 <log2f>
 800ebe4:	eef0 7a48 	vmov.f32	s15, s16
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
 800ebe8:	ee68 8a89 	vmul.f32	s17, s17, s18
    //f->iKey = logf((110.0f*twelfthRootOf2) / 27.5f)/ logf(twelfthRootOf2);
    //f->isHigh = freq > 400.0f;//switch to different coefficients for higher notes
    //Lfloat howHigh = LEAF_mapToZeroToOneOutput(iKey2, 16.0f, 76.0f);
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
 800ebec:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 800ebf0:	eee0 7a29 	vfma.f32	s15, s0, s19
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
 800ebf4:	ee28 0a8a 	vmul.f32	s0, s17, s20
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 800ebf8:	edc4 7a04 	vstr	s15, [r4, #16]
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
 800ebfc:	f007 ff92 	bl	8016b24 <log2f>
 800ec00:	eea0 8a29 	vfma.f32	s16, s0, s19
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
 800ec04:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
 800ec08:	eddf 0a53 	vldr	s1, [pc, #332]	; 800ed58 <tThiranAllpassSOCascade_setCoeff+0x1a0>
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
 800ec0c:	eeb0 1a4b 	vmov.f32	s2, s22
 800ec10:	ed9f 0a52 	vldr	s0, [pc, #328]	; 800ed5c <tThiranAllpassSOCascade_setCoeff+0x1a4>
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
 800ec14:	ee38 8a67 	vsub.f32	s16, s16, s15
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
 800ec18:	ee68 0a20 	vmul.f32	s1, s16, s1
 800ec1c:	f002 feb2 	bl	8011984 <LEAF_clip>

    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 800ec20:	ed94 9a08 	vldr	s18, [r4, #32]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 800ec24:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
 800ec28:	ee7b 7a40 	vsub.f32	s15, s22, s0
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 800ec2c:	ee20 9a09 	vmul.f32	s18, s0, s18
 800ec30:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 800ec34:	ee60 8a28 	vmul.f32	s17, s0, s17
 800ec38:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 800ec3c:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 800ec40:	eea6 9aa7 	vfma.f32	s18, s13, s15
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 800ec44:	edd4 aa0c 	vldr	s21, [r4, #48]	; 0x30
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 800ec48:	eee7 8a27 	vfma.f32	s17, s14, s15
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 800ec4c:	ed94 aa0e 	vldr	s20, [r4, #56]	; 0x38
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 800ec50:	ee20 8a06 	vmul.f32	s16, s0, s12
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 800ec54:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 800ec58:	ee60 aa2a 	vmul.f32	s21, s0, s21
 800ec5c:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 800ec60:	ee20 aa0a 	vmul.f32	s20, s0, s20
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 800ec64:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    Lfloat logB = logf(f->B);
 800ec68:	ed94 0a03 	vldr	s0, [r4, #12]
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 800ec6c:	eea7 8a27 	vfma.f32	s16, s14, s15
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 800ec70:	eee6 aa27 	vfma.f32	s21, s12, s15
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 800ec74:	eea6 aaa7 	vfma.f32	s20, s13, s15
    Lfloat logB = logf(f->B);
 800ec78:	f007 feee 	bl	8016a58 <logf>
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
 800ec7c:	ee29 9a00 	vmul.f32	s18, s18, s0
 800ec80:	ee68 8a80 	vmul.f32	s17, s17, s0
    Lfloat logB = logf(f->B);
 800ec84:	eef0 9a40 	vmov.f32	s19, s0
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
 800ec88:	eee9 8a00 	vfma.f32	s17, s18, s0
    Lfloat kd = fastExp3(temp);
 800ec8c:	ee38 0aaa 	vadd.f32	s0, s17, s21
 800ec90:	f002 fd2a 	bl	80116e8 <fastExp3>
 800ec94:	eef0 7a40 	vmov.f32	s15, s0
    Lfloat Cd = fastExp3((C1 * logB) + C2);
 800ec98:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat kd = fastExp3(temp);
 800ec9c:	eeb0 8a67 	vmov.f32	s16, s15
    Lfloat Cd = fastExp3((C1 * logB) + C2);
 800eca0:	eeaa 0a29 	vfma.f32	s0, s20, s19
 800eca4:	f002 fd20 	bl	80116e8 <fastExp3>
    Lfloat D = fastExp3(Cd-(f->iKey*kd));
 800eca8:	edd4 7a04 	vldr	s15, [r4, #16]
 800ecac:	eea7 0ac8 	vfms.f32	s0, s15, s16
 800ecb0:	f002 fd1a 	bl	80116e8 <fastExp3>
    f->D = D;

	Lfloat a_k = -2.0f;

	a_k *= (D - 2.0f);
 800ecb4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ecb8:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
	a_k *= D;
	a_k /= (D + 2.0f);

	f->a[1] = a_k;

	if (f->a[0] > 0.99f)
 800ecbc:	eddf 4a28 	vldr	s9, [pc, #160]	; 800ed60 <tThiranAllpassSOCascade_setCoeff+0x1a8>
	a_k /= (D - 1.0f);
 800ecc0:	ee70 7a4b 	vsub.f32	s15, s0, s22
    f->D = D;
 800ecc4:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
	a_k *= (D - 2.0f);
 800ecc8:	ee30 5a47 	vsub.f32	s10, s0, s14
	a_k /= (D + 1.0f);
 800eccc:	ee70 5a0b 	vadd.f32	s11, s0, s22
	a_k /= (D + 2.0f);
 800ecd0:	ee30 7a07 	vadd.f32	s14, s0, s14
	a_k *= (D - 2.0f);
 800ecd4:	ee25 6a26 	vmul.f32	s12, s10, s13
	a_k /= D;
 800ecd8:	eec5 6a00 	vdiv.f32	s13, s10, s0
	a_k /= (D - 1.0f);
 800ecdc:	ee86 5a27 	vdiv.f32	s10, s12, s15
	a_k *= (D - 1.0f);
 800ece0:	ee67 6aa6 	vmul.f32	s13, s15, s13
	a_k /= (D + 1.0f);
 800ece4:	ee86 6aa5 	vdiv.f32	s12, s13, s11
	a_k *= (D - 1.0f);
 800ece8:	ee67 7a85 	vmul.f32	s15, s15, s10
	a_k /= D;
 800ecec:	eec7 6a80 	vdiv.f32	s13, s15, s0
	a_k *= D;
 800ecf0:	ee20 6a06 	vmul.f32	s12, s0, s12
	a_k *= D;
 800ecf4:	ee60 7a26 	vmul.f32	s15, s0, s13
	a_k /= (D + 2.0f);
 800ecf8:	eec6 6a07 	vdiv.f32	s13, s12, s14
	a_k /= (D + 1.0f);
 800ecfc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
	f->a[1] = a_k;
 800ed00:	edc4 6a06 	vstr	s13, [r4, #24]
	if (f->a[0] > 0.99f)
 800ed04:	eeb4 7ae4 	vcmpe.f32	s14, s9
	f->a[0] = a_k;
 800ed08:	ed84 7a05 	vstr	s14, [r4, #20]
	if (f->a[0] > 0.99f)
 800ed0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed10:	dd05      	ble.n	800ed1e <tThiranAllpassSOCascade_setCoeff+0x166>
	{
		f->a[0] = 0.99f;
		f->a[1] = 0.01f;
		D = 1.0f;
 800ed12:	eeb0 0a4b 	vmov.f32	s0, s22
		f->a[1] = 0.01f;
 800ed16:	4b13      	ldr	r3, [pc, #76]	; (800ed64 <tThiranAllpassSOCascade_setCoeff+0x1ac>)
		f->a[0] = 0.99f;
 800ed18:	edc4 4a05 	vstr	s9, [r4, #20]
		f->a[1] = 0.01f;
 800ed1c:	61a3      	str	r3, [r4, #24]
	}
	//f->a[0] = LEAF_clip(0.0f, f->a[0], 1.0f);
	//f->a[1] = LEAF_clip(-1.999999f, f->a[1], 2.0f);

    for (int i = 0; i < f->numActiveFilters; i++)
 800ed1e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ed20:	2a00      	cmp	r2, #0
 800ed22:	dd0b      	ble.n	800ed3c <tThiranAllpassSOCascade_setCoeff+0x184>
 800ed24:	2300      	movs	r3, #0
    _tAllpassSO* f = *ft;
 800ed26:	68a2      	ldr	r2, [r4, #8]
    {
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
 800ed28:	6960      	ldr	r0, [r4, #20]
    _tAllpassSO* f = *ft;
 800ed2a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
 800ed2e:	3301      	adds	r3, #1
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
 800ed30:	69a1      	ldr	r1, [r4, #24]
    f->a1 = a1;
 800ed32:	6150      	str	r0, [r2, #20]
    f->a2 = a2;
 800ed34:	6191      	str	r1, [r2, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
 800ed36:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ed38:	429a      	cmp	r2, r3
 800ed3a:	dcf4      	bgt.n	800ed26 <tThiranAllpassSOCascade_setCoeff+0x16e>
        //f->filters[i]->prevSamp = 0.0f;
        //f->filters[i]->prevPrevSamp = 0.0f;
        //probably should adjust the gain of the internal state variables (prevSamp and prevPrevSamp) if the gain total of the two coefficients goes //up, since the internals of the allpass boosts gain and then attenuates it, so leaving super big values in there that won't be //attenuated enough can make it distort or nan.
    }
    return D*f->numActiveFilters;
 800ed3c:	ee07 2a90 	vmov	s15, r2
 800ed40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800ed44:	ecbd 8b08 	vpop	{d8-d11}
 800ed48:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ed4c:	bd10      	pop	{r4, pc}
 800ed4e:	bf00      	nop
 800ed50:	3b14f209 	.word	0x3b14f209
 800ed54:	42440000 	.word	0x42440000
 800ed58:	3cf5c28f 	.word	0x3cf5c28f
 800ed5c:	00000000 	.word	0x00000000
 800ed60:	3f7d70a4 	.word	0x3f7d70a4
 800ed64:	3c23d70a 	.word	0x3c23d70a

0800ed68 <tThiranAllpassSOCascade_tick>:

Lfloat   tThiranAllpassSOCascade_tick(tThiranAllpassSOCascade* const ft, Lfloat input)
{
    _tThiranAllpassSOCascade* f = *ft;
 800ed68:	6801      	ldr	r1, [r0, #0]
    Lfloat sample = input;
    for (int i = 0; i < f->numActiveFilters; i++)
 800ed6a:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	dd25      	ble.n	800edbc <tThiranAllpassSOCascade_tick+0x54>
 800ed70:	2200      	movs	r2, #0
    _tAllpassSO* f = *ft;
 800ed72:	688b      	ldr	r3, [r1, #8]
 800ed74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
 800ed78:	3201      	adds	r2, #1
    Lfloat vn = input * f->a2 + (f->prevSamp * f->a1 + f->prevPrevSamp);
 800ed7a:	edd3 5a01 	vldr	s11, [r3, #4]
 800ed7e:	ed93 6a05 	vldr	s12, [r3, #20]
 800ed82:	edd3 7a02 	vldr	s15, [r3, #8]
 800ed86:	ed93 7a06 	vldr	s14, [r3, #24]
 800ed8a:	eee5 7a86 	vfma.f32	s15, s11, s12
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
 800ed8e:	edd3 6a03 	vldr	s13, [r3, #12]
 800ed92:	ed93 5a04 	vldr	s10, [r3, #16]
    f->prevSamp = input;
 800ed96:	ed83 0a01 	vstr	s0, [r3, #4]
    f->prevPrevSamp = f->prevSamp;
 800ed9a:	edc3 5a02 	vstr	s11, [r3, #8]
    f->prevPrevSamp2 = f->prevSamp2;
 800ed9e:	edc3 6a04 	vstr	s13, [r3, #16]
    Lfloat vn = input * f->a2 + (f->prevSamp * f->a1 + f->prevPrevSamp);
 800eda2:	eee7 7a00 	vfma.f32	s15, s14, s0
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
 800eda6:	eee6 7a66 	vfms.f32	s15, s12, s13
 800edaa:	eee7 7a45 	vfms.f32	s15, s14, s10
    f->prevSamp2 = output;
 800edae:	edc3 7a03 	vstr	s15, [r3, #12]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
 800edb2:	eeb0 0a67 	vmov.f32	s0, s15
    for (int i = 0; i < f->numActiveFilters; i++)
 800edb6:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 800edb8:	4293      	cmp	r3, r2
 800edba:	dcda      	bgt.n	800ed72 <tThiranAllpassSOCascade_tick+0xa>
    {
        sample = tAllpassSO_tick(&f->filters[i], sample);
    }
    return sample;
}
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop

0800edc0 <tThiranAllpassSOCascade_clear>:

void   tThiranAllpassSOCascade_clear(tThiranAllpassSOCascade* const ft)
{
    _tThiranAllpassSOCascade* f = *ft;
 800edc0:	6802      	ldr	r2, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 800edc2:	6853      	ldr	r3, [r2, #4]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	dd0d      	ble.n	800ede4 <tThiranAllpassSOCascade_clear+0x24>
 800edc8:	2300      	movs	r3, #0
    {
        //tAllpassSO_setCoeff(&f->filters[i], f->a[1], f->a[2]);
        f->filters[i]->prevSamp = 0.0f;
 800edca:	2100      	movs	r1, #0
 800edcc:	6890      	ldr	r0, [r2, #8]
 800edce:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800edd2:	6041      	str	r1, [r0, #4]
        f->filters[i]->prevPrevSamp = 0.0f;
 800edd4:	6890      	ldr	r0, [r2, #8]
 800edd6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
 800edda:	3301      	adds	r3, #1
        f->filters[i]->prevPrevSamp = 0.0f;
 800eddc:	6081      	str	r1, [r0, #8]
    for (int i = 0; i < f->numFilts; i++)
 800edde:	6850      	ldr	r0, [r2, #4]
 800ede0:	4298      	cmp	r0, r3
 800ede2:	dcf3      	bgt.n	800edcc <tThiranAllpassSOCascade_clear+0xc>

    }
}
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop

0800ede8 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, Lfloat freq, tMempool* const mp)
{
 800ede8:	b538      	push	{r3, r4, r5, lr}
 800edea:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800edee:	680d      	ldr	r5, [r1, #0]
{
 800edf0:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
 800edf2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 800edf6:	2028      	movs	r0, #40	; 0x28
 800edf8:	4629      	mov	r1, r5
{
 800edfa:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 800edfe:	f003 f8fd 	bl	8011ffc <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
 800ee02:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800ee4c <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 800ee06:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 800ee08:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
 800ee0c:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 800ee0e:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
 800ee10:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
 800ee14:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
 800ee18:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
 800ee1c:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800ee20:	68db      	ldr	r3, [r3, #12]
 800ee22:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
 800ee24:	6824      	ldr	r4, [r4, #0]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 800ee26:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
 800ee2a:	ed84 8a01 	vstr	s16, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 800ee2e:	ee68 0a27 	vmul.f32	s1, s16, s15
 800ee32:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 800ee36:	f002 fda5 	bl	8011984 <LEAF_clip>
    f->b0 = 1.0f - f->a1;
 800ee3a:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 800ee3e:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
 800ee42:	edc4 8a05 	vstr	s17, [r4, #20]
}
 800ee46:	ecbd 8b02 	vpop	{d8}
 800ee4a:	bd38      	pop	{r3, r4, r5, pc}
 800ee4c:	00000000 	.word	0x00000000

0800ee50 <tOnePole_free>:
    _tOnePole* f = *ft;
 800ee50:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 800ee52:	6801      	ldr	r1, [r0, #0]
 800ee54:	f003 b994 	b.w	8012180 <mpool_free>

0800ee58 <tOnePole_setFreq>:
{
 800ee58:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 800ee5a:	6804      	ldr	r4, [r0, #0]
{
 800ee5c:	eef0 0a40 	vmov.f32	s1, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 800ee60:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800ee64:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800ee90 <tOnePole_setFreq+0x38>
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 800ee68:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
 800ee6c:	edc4 0a01 	vstr	s1, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 800ee70:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800ee74:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 800ee78:	f002 fd84 	bl	8011984 <LEAF_clip>
    f->b0 = 1.0f - f->a1;
 800ee7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 800ee80:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
 800ee84:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ee88:	edc4 7a05 	vstr	s15, [r4, #20]
}
 800ee8c:	bd10      	pop	{r4, pc}
 800ee8e:	bf00      	nop
 800ee90:	00000000 	.word	0x00000000

0800ee94 <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
 800ee94:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 800ee96:	ed93 6a08 	vldr	s12, [r3, #32]
    Lfloat in = input * f->gain;
 800ee9a:	ed93 7a02 	vldr	s14, [r3, #8]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 800ee9e:	edd3 7a04 	vldr	s15, [r3, #16]
    Lfloat in = input * f->gain;
 800eea2:	ee20 7a07 	vmul.f32	s14, s0, s14
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 800eea6:	edd3 6a05 	vldr	s13, [r3, #20]
 800eeaa:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
 800eeae:	ed83 7a07 	vstr	s14, [r3, #28]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 800eeb2:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
 800eeb6:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
 800eeba:	4770      	bx	lr

0800eebc <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
 800eebc:	b510      	push	{r4, lr}
 800eebe:	eef0 6a40 	vmov.f32	s13, s0
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 800eec2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800ef08 <tOnePole_setSampleRate+0x4c>
    _tOnePole* f = *ft;
 800eec6:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 800eec8:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800ef0c <tOnePole_setSampleRate+0x50>
{
 800eecc:	ed2d 8b02 	vpush	{d8}
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 800eed0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 800eed4:	edd4 0a01 	vldr	s1, [r4, #4]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 800eed8:	eec8 7a26 	vdiv.f32	s15, s16, s13
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 800eedc:	eeb0 1a48 	vmov.f32	s2, s16
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 800eee0:	ee67 7a87 	vmul.f32	s15, s15, s14
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 800eee4:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 800eee8:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 800eeec:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 800eef0:	f002 fd48 	bl	8011984 <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 800eef4:	ee38 8a40 	vsub.f32	s16, s16, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 800eef8:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 800eefc:	ed84 8a04 	vstr	s16, [r4, #16]
}
 800ef00:	ecbd 8b02 	vpop	{d8}
 800ef04:	bd10      	pop	{r4, pc}
 800ef06:	bf00      	nop
 800ef08:	40c90fdb 	.word	0x40c90fdb
 800ef0c:	00000000 	.word	0x00000000

0800ef10 <tCookOnePole_initToPool>:
{
    tCookOnePole_initToPool(ft, &leaf->mempool);
}

void    tCookOnePole_initToPool     (tCookOnePole* const ft, tMempool* const mp)
{
 800ef10:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 800ef12:	680c      	ldr	r4, [r1, #0]
{
 800ef14:	4605      	mov	r5, r0
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
 800ef16:	2018      	movs	r0, #24
 800ef18:	4621      	mov	r1, r4
 800ef1a:	f003 f86f 	bl	8011ffc <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->poleCoeff     = 0.9f;
 800ef1e:	4a06      	ldr	r2, [pc, #24]	; (800ef38 <tCookOnePole_initToPool+0x28>)
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
 800ef20:	6028      	str	r0, [r5, #0]
    f->sgain         = 0.1f;
 800ef22:	4906      	ldr	r1, [pc, #24]	; (800ef3c <tCookOnePole_initToPool+0x2c>)
    f->mempool = m;
 800ef24:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 800ef26:	6863      	ldr	r3, [r4, #4]
    f->poleCoeff     = 0.9f;
 800ef28:	6042      	str	r2, [r0, #4]
    f->output         = 0.0f;
 800ef2a:	2200      	movs	r2, #0
    f->sgain         = 0.1f;
 800ef2c:	6081      	str	r1, [r0, #8]
    f->output         = 0.0f;
 800ef2e:	60c2      	str	r2, [r0, #12]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800ef30:	68db      	ldr	r3, [r3, #12]
 800ef32:	6103      	str	r3, [r0, #16]
}
 800ef34:	bd38      	pop	{r3, r4, r5, pc}
 800ef36:	bf00      	nop
 800ef38:	3f666666 	.word	0x3f666666
 800ef3c:	3dcccccd 	.word	0x3dcccccd

0800ef40 <tCookOnePole_free>:

void    tCookOnePole_free   (tCookOnePole* const ft)
{
    _tCookOnePole* f = *ft;
 800ef40:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
 800ef42:	6801      	ldr	r1, [r0, #0]
 800ef44:	f003 b91c 	b.w	8012180 <mpool_free>

0800ef48 <tCookOnePole_setPole>:
void    tCookOnePole_setPole(tCookOnePole* const ft, Lfloat aValue)
{
    _tCookOnePole* onepole = *ft;
    
    onepole->poleCoeff = aValue;
      if (onepole->poleCoeff > 0.0f)                   // Normalize gain to 1.0 max
 800ef48:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tCookOnePole* onepole = *ft;
 800ef4c:	6803      	ldr	r3, [r0, #0]
        onepole->sgain = (1.0f - onepole->poleCoeff);
 800ef4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    onepole->poleCoeff = aValue;
 800ef52:	ed83 0a01 	vstr	s0, [r3, #4]
      if (onepole->poleCoeff > 0.0f)                   // Normalize gain to 1.0 max
 800ef56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        onepole->sgain = (1.0f - onepole->poleCoeff);
 800ef5a:	bfcc      	ite	gt
 800ef5c:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
      else
        onepole->sgain = (1.0f + onepole->poleCoeff);
 800ef60:	ee30 0a27 	vaddle.f32	s0, s0, s15
 800ef64:	ed83 0a02 	vstr	s0, [r3, #8]
}
 800ef68:	4770      	bx	lr
 800ef6a:	bf00      	nop

0800ef6c <tCookOnePole_setGainAndPole>:
        onepole->sgain = ((1.0f + onepole->poleCoeff) * gain);
}

void    tCookOnePole_setGainAndPole(tCookOnePole* const ft, Lfloat gain, Lfloat pole)
{
    _tCookOnePole* onepole = *ft;
 800ef6c:	6803      	ldr	r3, [r0, #0]
    
    onepole->poleCoeff = pole;
 800ef6e:	edc3 0a01 	vstr	s1, [r3, #4]

    onepole->sgain = gain;
 800ef72:	ed83 0a02 	vstr	s0, [r3, #8]
     
}
 800ef76:	4770      	bx	lr

0800ef78 <tCookOnePole_tick>:
    
Lfloat   tCookOnePole_tick(tCookOnePole* const ft, Lfloat sample)
{
    _tCookOnePole* onepole = *ft;
 800ef78:	6803      	ldr	r3, [r0, #0]
    
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
 800ef7a:	edd3 6a03 	vldr	s13, [r3, #12]
 800ef7e:	edd3 7a01 	vldr	s15, [r3, #4]
 800ef82:	ed93 7a02 	vldr	s14, [r3, #8]
 800ef86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ef8a:	eee7 7a00 	vfma.f32	s15, s14, s0
    return onepole->output;
}
 800ef8e:	eeb0 0a67 	vmov.f32	s0, s15
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
 800ef92:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800ef96:	4770      	bx	lr

0800ef98 <tCookOnePole_setSampleRate>:

void tCookOnePole_setSampleRate(tCookOnePole* const ft, Lfloat sr)
{
    _tCookOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 800ef98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ef9c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800efb0 <tCookOnePole_setSampleRate+0x18>
    _tCookOnePole* f = *ft;
 800efa0:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 800efa2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 800efa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800efaa:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800efae:	4770      	bx	lr
 800efb0:	40c90fdb 	.word	0x40c90fdb

0800efb4 <tSVF_initToPool>:
     * hp=1 bp=A/Q (where A is 10^(G/40) and G is gain in decibels) and lp = 1
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
 800efb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800efba:	6815      	ldr	r5, [r2, #0]
{
 800efbc:	4606      	mov	r6, r0
 800efbe:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 800efc0:	2050      	movs	r0, #80	; 0x50
 800efc2:	4629      	mov	r1, r5
{
 800efc4:	eef0 8a40 	vmov.f32	s17, s0
 800efc8:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 800efcc:	f003 f816 	bl	8011ffc <mpool_alloc>
 800efd0:	6030      	str	r0, [r6, #0]
 800efd2:	4604      	mov	r4, r0
    svf->mempool = m;
 800efd4:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 800efd6:	686e      	ldr	r6, [r5, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
 800efd8:	2500      	movs	r5, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
 800efda:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800f0b0 <tSVF_initToPool+0xfc>
    svf->sampleRate = leaf->sampleRate;
 800efde:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 800efe0:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 800efe4:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
 800efe6:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
 800efea:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 800efec:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 800eff0:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0;
 800eff4:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0;
 800eff6:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
 800eff8:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 800effc:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 800f000:	f008 f92e 	bl	8017260 <tanf>
    svf->k = 1.0f/Q;
 800f004:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 800f008:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
 800f00c:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
 800f00e:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
 800f010:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
 800f014:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
 800f018:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
 800f01a:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f01c:	eef0 6a67 	vmov.f32	s13, s15
 800f020:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
 800f024:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f028:	eee0 6a06 	vfma.f32	s13, s0, s12
 800f02c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
 800f030:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f034:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 800f038:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
 800f03c:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
 800f040:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
 800f044:	d00b      	beq.n	800f05e <tSVF_initToPool+0xaa>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 800f046:	2f04      	cmp	r7, #4
 800f048:	d809      	bhi.n	800f05e <tSVF_initToPool+0xaa>
 800f04a:	e8df f007 	tbb	[pc, r7]
 800f04e:	0821      	.short	0x0821
 800f050:	2803      	.short	0x2803
 800f052:	18          	.byte	0x18
 800f053:	00          	.byte	0x00
    {
        svf->cH = 0.0f;
        svf->cB = 1.0f;
 800f054:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
 800f058:	2200      	movs	r2, #0
        svf->cB = 1.0f;
 800f05a:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
 800f05c:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -2.0f;
    }
    if (leaf->sampleRate > 90000)
 800f05e:	ed96 7a00 	vldr	s14, [r6]
 800f062:	eddf 7a14 	vldr	s15, [pc, #80]	; 800f0b4 <tSVF_initToPool+0x100>
    {
    	svf->table = __filterTanhTable_96000;
    }
    else
    {
    	svf->table = __filterTanhTable_48000;
 800f066:	4a14      	ldr	r2, [pc, #80]	; (800f0b8 <tSVF_initToPool+0x104>)
 800f068:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f06c:	4b13      	ldr	r3, [pc, #76]	; (800f0bc <tSVF_initToPool+0x108>)
 800f06e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f072:	bfd8      	it	le
 800f074:	4613      	movle	r3, r2
 800f076:	64e3      	str	r3, [r4, #76]	; 0x4c
    }
}
 800f078:	ecbd 8b02 	vpop	{d8}
 800f07c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
 800f07e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 800f082:	4a0f      	ldr	r2, [pc, #60]	; (800f0c0 <tSVF_initToPool+0x10c>)
        svf->cL = -2.0f;
 800f084:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 800f088:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 800f08a:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
 800f08c:	63a3      	str	r3, [r4, #56]	; 0x38
 800f08e:	e7e6      	b.n	800f05e <tSVF_initToPool+0xaa>
        svf->cBK = -1.0f;
 800f090:	4b0b      	ldr	r3, [pc, #44]	; (800f0c0 <tSVF_initToPool+0x10c>)
        svf->cH = 1.0f;
 800f092:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 800f096:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
 800f098:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
 800f09a:	63a3      	str	r3, [r4, #56]	; 0x38
 800f09c:	e7df      	b.n	800f05e <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 800f09e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 800f0a2:	4a07      	ldr	r2, [pc, #28]	; (800f0c0 <tSVF_initToPool+0x10c>)
        svf->cL = 0.0f;
 800f0a4:	2300      	movs	r3, #0
        svf->cH = 1.0f;
 800f0a6:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 800f0a8:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
 800f0aa:	63a3      	str	r3, [r4, #56]	; 0x38
 800f0ac:	e7d7      	b.n	800f05e <tSVF_initToPool+0xaa>
 800f0ae:	bf00      	nop
 800f0b0:	40490fdb 	.word	0x40490fdb
 800f0b4:	47afc800 	.word	0x47afc800
 800f0b8:	08019d08 	.word	0x08019d08
 800f0bc:	0801dd08 	.word	0x0801dd08
 800f0c0:	bf800000 	.word	0xbf800000

0800f0c4 <tSVF_init>:
    tSVF_initToPool     (svff, type, freq, Q, &leaf->mempool);
 800f0c4:	3218      	adds	r2, #24
 800f0c6:	f7ff bf75 	b.w	800efb4 <tSVF_initToPool>
 800f0ca:	bf00      	nop

0800f0cc <tSVF_free>:

void    tSVF_free   (tSVF* const svff)
{
    _tSVF* svf = *svff;
 800f0cc:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)svf, svf->mempool);
 800f0ce:	6801      	ldr	r1, [r0, #0]
 800f0d0:	f003 b856 	b.w	8012180 <mpool_free>

0800f0d4 <tSVF_tick>:
}

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
 800f0d4:	6803      	ldr	r3, [r0, #0]
#endif
    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800f0d6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 800f0da:	edd3 6a06 	vldr	s13, [r3, #24]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800f0de:	ed93 6a05 	vldr	s12, [r3, #20]
    v3 = v0 - svf->ic2eq;
 800f0e2:	ee30 4a66 	vsub.f32	s8, s0, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800f0e6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800f0ea:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800f0ee:	edd3 1a09 	vldr	s3, [r3, #36]	; 0x24
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 800f0f2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800f0f6:	ed93 5a08 	vldr	s10, [r3, #32]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800f0fa:	eee6 5a27 	vfma.f32	s11, s12, s15
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 800f0fe:	edd3 2a0c 	vldr	s5, [r3, #48]	; 0x30
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800f102:	ee67 7a84 	vmul.f32	s15, s15, s8
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800f106:	ed93 2a0b 	vldr	s4, [r3, #44]	; 0x2c
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 800f10a:	ed93 3a0f 	vldr	s6, [r3, #60]	; 0x3c
 800f10e:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800f112:	eee1 7a86 	vfma.f32	s15, s3, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800f116:	eee2 5a04 	vfma.f32	s11, s4, s8
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 800f11a:	ee27 7a87 	vmul.f32	s14, s15, s14
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800f11e:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 800f122:	ee27 5a85 	vmul.f32	s10, s15, s10
 800f126:	eef0 7a47 	vmov.f32	s15, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 800f12a:	eed5 6aa4 	vfnms.f32	s13, s11, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 800f12e:	eee2 7a80 	vfma.f32	s15, s5, s0
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800f132:	ed83 6a05 	vstr	s12, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 800f136:	edc3 6a06 	vstr	s13, [r3, #24]
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 800f13a:	eee5 7a03 	vfma.f32	s15, s10, s6
 800f13e:	eeb0 0a67 	vmov.f32	s0, s15
}
 800f142:	eea3 0aa5 	vfma.f32	s0, s7, s11
 800f146:	4770      	bx	lr

0800f148 <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, Lfloat freq)
{
 800f148:	b510      	push	{r4, lr}
    _tSVF* svf = *svff;
 800f14a:	6804      	ldr	r4, [r0, #0]
    
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 800f14c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 800f150:	eef0 0a40 	vmov.f32	s1, s0
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 800f154:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800f1b0 <tSVF_setFreq+0x68>
 800f158:	ed94 1a10 	vldr	s2, [r4, #64]	; 0x40
 800f15c:	ee21 1a27 	vmul.f32	s2, s2, s15
 800f160:	f002 fc10 	bl	8011984 <LEAF_clip>
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 800f164:	eddf 7a13 	vldr	s15, [pc, #76]	; 800f1b4 <tSVF_setFreq+0x6c>
 800f168:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
 800f16c:	ee60 7a27 	vmul.f32	s15, s0, s15
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 800f170:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 800f174:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f178:	f008 f872 	bl	8017260 <tanf>
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f17c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f180:	edd4 7a08 	vldr	s15, [r4, #32]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 800f184:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f188:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f18c:	eeb0 6a66 	vmov.f32	s12, s13
 800f190:	eea0 6a27 	vfma.f32	s12, s0, s15
 800f194:	ee86 7a86 	vdiv.f32	s14, s13, s12
    svf->a2 = svf->g * svf->a1;
 800f198:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f19c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 800f1a0:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
 800f1a4:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 800f1a8:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
}
 800f1ac:	bd10      	pop	{r4, pc}
 800f1ae:	bf00      	nop
 800f1b0:	00000000 	.word	0x00000000
 800f1b4:	40490fdb 	.word	0x40490fdb

0800f1b8 <tSVF_setFreqFast>:

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
	_tSVF* svf = *vf;
	svf->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
 800f1b8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800f234 <tSVF_setFreqFast+0x7c>
 800f1bc:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tSVF* svf = *vf;
 800f1c0:	6803      	ldr	r3, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 800f1c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
 800f1c6:	ee60 7a27 	vmul.f32	s15, s0, s15
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 800f1ca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
	svf->cutoffMIDI = cutoff;
 800f1cc:	ed83 0a04 	vstr	s0, [r3, #16]
    int32_t intVer = (int32_t)cutoff;
 800f1d0:	eebd 6ae7 	vcvt.s32.f32	s12, s15
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f1d4:	edd3 6a08 	vldr	s13, [r3, #32]
    int32_t intVer = (int32_t)cutoff;
 800f1d8:	ee16 2a10 	vmov	r2, s12
 800f1dc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800f1e0:	4562      	cmp	r2, ip
 800f1e2:	bfa8      	it	ge
 800f1e4:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 800f1e6:	ee06 2a10 	vmov	s12, r2
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 800f1ea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 800f1ee:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 800f1f2:	ed92 5a01 	vldr	s10, [r2, #4]
 800f1f6:	edd2 5a00 	vldr	s11, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 800f1fa:	ee77 7ac6 	vsub.f32	s15, s15, s12
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 800f1fe:	ee37 6a67 	vsub.f32	s12, s14, s15
 800f202:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f206:	eee5 7a86 	vfma.f32	s15, s11, s12
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f20a:	eeb0 6a47 	vmov.f32	s12, s14
 800f20e:	ee77 6aa6 	vadd.f32	s13, s15, s13
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 800f212:	edc3 7a07 	vstr	s15, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f216:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800f21a:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 800f21e:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f222:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 800f226:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 800f22a:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 800f22e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800f232:	4770      	bx	lr
 800f234:	41f4898d 	.word	0x41f4898d

0800f238 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
 800f238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 800f23c:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f23e:	edd3 7a07 	vldr	s15, [r3, #28]
    svf->k = 1.0f/Q;
 800f242:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
 800f246:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f24a:	eeb0 6a47 	vmov.f32	s12, s14
 800f24e:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
 800f252:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f256:	eea7 6aa5 	vfma.f32	s12, s15, s11
 800f25a:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 800f25e:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f262:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 800f266:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 800f26a:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 800f26e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800f272:	4770      	bx	lr

0800f274 <tSVF_setSampleRate>:

void    tSVF_setSampleRate  (tSVF* const svff, Lfloat sr)
{
    _tSVF* svf = *svff;
    svf->sampleRate = sr;
    svf->invSampleRate = 1.0f/svf->sampleRate;
 800f274:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 800f278:	6803      	ldr	r3, [r0, #0]
    svf->sampleRate = sr;
 800f27a:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    svf->invSampleRate = 1.0f/svf->sampleRate;
 800f27e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f282:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 800f286:	4770      	bx	lr

0800f288 <tHighpass_init>:

#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, Lfloat freq, LEAF* const leaf)
{
 800f288:	b538      	push	{r3, r4, r5, lr}
 800f28a:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 800f28e:	698c      	ldr	r4, [r1, #24]
{
 800f290:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800f292:	2018      	movs	r0, #24
{
 800f294:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800f298:	4621      	mov	r1, r4
 800f29a:	f002 ff13 	bl	80120c4 <mpool_calloc>
 800f29e:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800f2a0:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800f2a2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800f2a6:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 800f2a8:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800f2aa:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 800f2ae:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800f2b0:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 800f2b4:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 800f2b6:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800f2ba:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800f2be:	edc0 7a03 	vstr	s15, [r0, #12]
}
 800f2c2:	ecbd 8b02 	vpop	{d8}
 800f2c6:	bd38      	pop	{r3, r4, r5, pc}

0800f2c8 <tHighpass_initToPool>:
{
 800f2c8:	b538      	push	{r3, r4, r5, lr}
 800f2ca:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800f2ce:	680c      	ldr	r4, [r1, #0]
{
 800f2d0:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800f2d2:	2018      	movs	r0, #24
{
 800f2d4:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800f2d8:	4621      	mov	r1, r4
 800f2da:	f002 fef3 	bl	80120c4 <mpool_calloc>
 800f2de:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800f2e0:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800f2e2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800f2e6:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 800f2e8:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800f2ea:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 800f2ee:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800f2f0:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
 800f2f4:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
 800f2f6:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800f2fa:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800f2fe:	edc0 7a03 	vstr	s15, [r0, #12]
}
 800f302:	ecbd 8b02 	vpop	{d8}
 800f306:	bd38      	pop	{r3, r4, r5, pc}

0800f308 <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
    _tHighpass* f = *ft;
 800f308:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 800f30a:	6801      	ldr	r1, [r0, #0]
 800f30c:	f002 bf38 	b.w	8012180 <mpool_free>

0800f310 <tHighpass_setFreq>:
}

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
 800f310:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800f312:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f316:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
 800f31a:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800f31e:	eee7 7a40 	vfms.f32	s15, s14, s0
 800f322:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800f326:	4770      	bx	lr

0800f328 <tHighpass_tick>:
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
    _tHighpass* f = *ft;
 800f328:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 800f32a:	edd3 6a01 	vldr	s13, [r3, #4]
    f->xs = x;
 800f32e:	ed83 0a01 	vstr	s0, [r3, #4]
    f->ys = x - f->xs + f->R * f->ys;
 800f332:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f336:	edd3 7a02 	vldr	s15, [r3, #8]
 800f33a:	ed93 7a03 	vldr	s14, [r3, #12]
 800f33e:	eea7 0a27 	vfma.f32	s0, s14, s15
 800f342:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 800f346:	4770      	bx	lr

0800f348 <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 800f348:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f34c:	ed9f 6a07 	vldr	s12, [pc, #28]	; 800f36c <tHighpass_setSampleRate+0x24>
    _tHighpass* f = *ft;
 800f350:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 800f352:	ee87 7a80 	vdiv.f32	s14, s15, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 800f356:	edd3 6a04 	vldr	s13, [r3, #16]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 800f35a:	ee27 7a06 	vmul.f32	s14, s14, s12
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 800f35e:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 800f362:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 800f366:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800f36a:	4770      	bx	lr
 800f36c:	40c90fdb 	.word	0x40c90fdb

0800f370 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
 800f370:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 800f372:	ed93 7a02 	vldr	s14, [r3, #8]
 800f376:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800f37a:	ed93 6a03 	vldr	s12, [r3, #12]
 800f37e:	eea6 0ac7 	vfms.f32	s0, s13, s14
 800f382:	edd3 7a06 	vldr	s15, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 800f386:	edd3 5a04 	vldr	s11, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800f38a:	edd3 6a08 	vldr	s13, [r3, #32]
 800f38e:	ed93 4a07 	vldr	s8, [r3, #28]
 800f392:	ed93 5a09 	vldr	s10, [r3, #36]	; 0x24
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 800f396:	ee30 0a46 	vsub.f32	s0, s0, s12
 800f39a:	ee60 7a27 	vmul.f32	s15, s0, s15
    yB = v1 + f->s1;
 800f39e:	eea5 7aa7 	vfma.f32	s14, s11, s15
    yL = v2 + f->s2;
 800f3a2:	eea5 6a87 	vfma.f32	s12, s11, s14
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800f3a6:	ee27 0a26 	vmul.f32	s0, s14, s13
    f->s1 = v1 + yB; // state update in 1st integrator
 800f3aa:	eef0 4a47 	vmov.f32	s9, s14
 800f3ae:	eee5 4aa7 	vfma.f32	s9, s11, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 800f3b2:	eef0 6a46 	vmov.f32	s13, s12
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800f3b6:	eea4 0a06 	vfma.f32	s0, s8, s12
    f->s2 = v2 + yL; // state update in 2nd integrator
 800f3ba:	eee5 6a87 	vfma.f32	s13, s11, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 800f3be:	edc3 4a02 	vstr	s9, [r3, #8]
}
 800f3c2:	eea5 0a27 	vfma.f32	s0, s10, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 800f3c6:	edc3 6a03 	vstr	s13, [r3, #12]
}
 800f3ca:	4770      	bx	lr

0800f3cc <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 800f3cc:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 800f3ce:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800f3d0:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 800f6ac <tVZFilter_calcCoeffs+0x2e0>
{
 800f3d4:	ed2d 8b04 	vpush	{d8-d9}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800f3d8:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 800f3dc:	ed94 9a12 	vldr	s18, [r4, #72]	; 0x48
 800f3e0:	ee28 0a80 	vmul.f32	s0, s17, s0
 800f3e4:	ee20 0a09 	vmul.f32	s0, s0, s18
 800f3e8:	f007 ff3a 	bl	8017260 <tanf>
    
    switch( f->type )
 800f3ec:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800f3ee:	eeb0 8a40 	vmov.f32	s16, s0
 800f3f2:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 800f3f6:	2b0a      	cmp	r3, #10
 800f3f8:	f200 8155 	bhi.w	800f6a6 <tVZFilter_calcCoeffs+0x2da>
 800f3fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 800f400:	00310028 	.word	0x00310028
 800f404:	0043003a 	.word	0x0043003a
 800f408:	0058004f 	.word	0x0058004f
 800f40c:	00bb0099 	.word	0x00bb0099
 800f410:	012f00dc 	.word	0x012f00dc
 800f414:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800f416:	ed94 7a05 	vldr	s14, [r4, #20]
 800f41a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f41e:	eef1 7a47 	vneg.f32	s15, s14
 800f422:	61e3      	str	r3, [r4, #28]
 800f424:	6263      	str	r3, [r4, #36]	; 0x24
 800f426:	edc4 7a08 	vstr	s15, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800f42a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 800f42e:	ee37 6a08 	vadd.f32	s12, s14, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800f432:	eef0 7a66 	vmov.f32	s15, s13
    f->R2Plusg = f->R2+f->g;
 800f436:	ed84 6a10 	vstr	s12, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800f43a:	eee7 7a08 	vfma.f32	s15, s14, s16
 800f43e:	eee8 7a08 	vfma.f32	s15, s16, s16
 800f442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f446:	ed84 7a06 	vstr	s14, [r4, #24]
}
 800f44a:	ecbd 8b04 	vpop	{d8-d9}
 800f44e:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f450:	2300      	movs	r3, #0
 800f452:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f456:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f45a:	61e3      	str	r3, [r4, #28]
 800f45c:	6223      	str	r3, [r4, #32]
 800f45e:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 800f460:	e7e3      	b.n	800f42a <tVZFilter_calcCoeffs+0x5e>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800f462:	2300      	movs	r3, #0
 800f464:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f468:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800f46c:	6223      	str	r3, [r4, #32]
 800f46e:	6263      	str	r3, [r4, #36]	; 0x24
 800f470:	61e2      	str	r2, [r4, #28]
            break;
 800f472:	e7da      	b.n	800f42a <tVZFilter_calcCoeffs+0x5e>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800f474:	2300      	movs	r3, #0
 800f476:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f47a:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800f47e:	61e3      	str	r3, [r4, #28]
 800f480:	6263      	str	r3, [r4, #36]	; 0x24
 800f482:	6222      	str	r2, [r4, #32]
            break;
 800f484:	e7d1      	b.n	800f42a <tVZFilter_calcCoeffs+0x5e>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f486:	ed94 7a05 	vldr	s14, [r4, #20]
 800f48a:	2300      	movs	r3, #0
 800f48c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f490:	61e3      	str	r3, [r4, #28]
 800f492:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f496:	6263      	str	r3, [r4, #36]	; 0x24
 800f498:	edc4 7a08 	vstr	s15, [r4, #32]
            break;
 800f49c:	e7c5      	b.n	800f42a <tVZFilter_calcCoeffs+0x5e>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f49e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f4a2:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f4a4:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f4a8:	6222      	str	r2, [r4, #32]
 800f4aa:	61e3      	str	r3, [r4, #28]
 800f4ac:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f4ae:	e7bc      	b.n	800f42a <tVZFilter_calcCoeffs+0x5e>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800f4b0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f4b4:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 800f4b8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800f4bc:	ee60 0ae7 	vnmul.f32	s1, s1, s15
 800f4c0:	f007 fcce 	bl	8016e60 <powf>
 800f4c4:	ee28 0a80 	vmul.f32	s0, s17, s0
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800f4c8:	eddf 7a78 	vldr	s15, [pc, #480]	; 800f6ac <tVZFilter_calcCoeffs+0x2e0>
 800f4cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f4d0:	ee20 0a09 	vmul.f32	s0, s0, s18
 800f4d4:	f007 fec4 	bl	8017260 <tanf>
            Lfloat r  = f->g/wl;
 800f4d8:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f4dc:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
 800f4e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f4e4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800f4e8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800f4ec:	ee28 7a87 	vmul.f32	s14, s17, s14
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800f4f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f4f4:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800f4f8:	eeb0 6a66 	vmov.f32	s12, s13
 800f4fc:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800f500:	ee76 7ae5 	vsub.f32	s15, s13, s11
 800f504:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800f508:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f510:	f100 80b0 	bmi.w	800f674 <tVZFilter_calcCoeffs+0x2a8>
 800f514:	eeb1 7ac0 	vsqrt.f32	s14, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f518:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f51c:	61e3      	str	r3, [r4, #28]
 800f51e:	6263      	str	r3, [r4, #36]	; 0x24
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f520:	ee37 7a07 	vadd.f32	s14, s14, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f524:	ee68 8a87 	vmul.f32	s17, s17, s14
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f528:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f52c:	edc4 8a08 	vstr	s17, [r4, #32]
            break;
 800f530:	e77b      	b.n	800f42a <tVZFilter_calcCoeffs+0x5e>
            Lfloat A = sqrtf(f->G);
 800f532:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
 800f536:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f53e:	f100 80ad 	bmi.w	800f69c <tVZFilter_calcCoeffs+0x2d0>
 800f542:	eeb1 0ae8 	vsqrt.f32	s0, s17
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f546:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f54e:	f100 80a0 	bmi.w	800f692 <tVZFilter_calcCoeffs+0x2c6>
 800f552:	eef1 7ac0 	vsqrt.f32	s15, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f556:	ed94 7a05 	vldr	s14, [r4, #20]
 800f55a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f55e:	edc4 8a07 	vstr	s17, [r4, #28]
 800f562:	6263      	str	r3, [r4, #36]	; 0x24
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f564:	ee88 8a27 	vdiv.f32	s16, s16, s15
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f568:	ee68 8a87 	vmul.f32	s17, s17, s14
 800f56c:	edc4 8a08 	vstr	s17, [r4, #32]
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f570:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 800f574:	e759      	b.n	800f42a <tVZFilter_calcCoeffs+0x5e>
            Lfloat A = sqrtf(f->G);
 800f576:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
 800f57a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f582:	f100 8081 	bmi.w	800f688 <tVZFilter_calcCoeffs+0x2bc>
 800f586:	eeb1 0ae8 	vsqrt.f32	s0, s17
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f58a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f592:	d474      	bmi.n	800f67e <tVZFilter_calcCoeffs+0x2b2>
 800f594:	eef1 7ac0 	vsqrt.f32	s15, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800f598:	ed94 7a05 	vldr	s14, [r4, #20]
 800f59c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f5a0:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
 800f5a4:	61e3      	str	r3, [r4, #28]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f5a6:	ee28 8a27 	vmul.f32	s16, s16, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800f5aa:	ee68 8a87 	vmul.f32	s17, s17, s14
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f5ae:	ed84 8a04 	vstr	s16, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800f5b2:	edc4 8a08 	vstr	s17, [r4, #32]
            break;
 800f5b6:	e738      	b.n	800f42a <tVZFilter_calcCoeffs+0x5e>
            Lfloat x  = (2.0f*f->m-1.0f);
 800f5b8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f5bc:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f5c0:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800f5c4:	eddf 0a3a 	vldr	s1, [pc, #232]	; 800f6b0 <tVZFilter_calcCoeffs+0x2e4>
            Lfloat x  = (2.0f*f->m-1.0f);
 800f5c8:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800f5cc:	eeb1 9a68 	vneg.f32	s18, s17
 800f5d0:	eeb0 0a49 	vmov.f32	s0, s18
 800f5d4:	f002 fce8 	bl	8011fa8 <maximum>
 800f5d8:	eef0 7a40 	vmov.f32	s15, s0
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800f5dc:	eddf 0a34 	vldr	s1, [pc, #208]	; 800f6b0 <tVZFilter_calcCoeffs+0x2e4>
 800f5e0:	eeb0 0a68 	vmov.f32	s0, s17
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800f5e4:	edc4 7a07 	vstr	s15, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800f5e8:	f002 fce6 	bl	8011fb8 <minimum>
            f->cB = 1.0f-x*x;
 800f5ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f5f0:	edd4 7a05 	vldr	s15, [r4, #20]
 800f5f4:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 800f5f8:	eea9 7a28 	vfma.f32	s14, s18, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f5fc:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 800f600:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800f604:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f608:	ee76 5a06 	vadd.f32	s11, s12, s12
 800f60c:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 800f610:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f614:	eee6 7a06 	vfma.f32	s15, s12, s12
 800f618:	eee0 7a00 	vfma.f32	s15, s0, s0
 800f61c:	eee0 7a65 	vfms.f32	s15, s0, s11
 800f620:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800f624:	f002 f81c 	bl	8011660 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 800f628:	ed94 6a07 	vldr	s12, [r4, #28]
 800f62c:	edd4 6a08 	vldr	s13, [r4, #32]
 800f630:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 800f634:	ed94 7a05 	vldr	s14, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f638:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
 800f63c:	ed94 8a04 	vldr	s16, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f640:	ee30 0a00 	vadd.f32	s0, s0, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 800f644:	ee26 6a00 	vmul.f32	s12, s12, s0
 800f648:	ee66 6a80 	vmul.f32	s13, s13, s0
 800f64c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f650:	ed84 6a07 	vstr	s12, [r4, #28]
 800f654:	edc4 6a08 	vstr	s13, [r4, #32]
 800f658:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
        break;
 800f65c:	e6e5      	b.n	800f42a <tVZFilter_calcCoeffs+0x5e>
            f->cL = 1.0f;
 800f65e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800f662:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
 800f666:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 800f668:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
 800f66c:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
 800f670:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f672:	e6da      	b.n	800f42a <tVZFilter_calcCoeffs+0x5e>
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f674:	f007 fdc8 	bl	8017208 <sqrtf>
 800f678:	eeb0 7a40 	vmov.f32	s14, s0
 800f67c:	e74c      	b.n	800f518 <tVZFilter_calcCoeffs+0x14c>
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f67e:	f007 fdc3 	bl	8017208 <sqrtf>
 800f682:	eef0 7a40 	vmov.f32	s15, s0
 800f686:	e787      	b.n	800f598 <tVZFilter_calcCoeffs+0x1cc>
            Lfloat A = sqrtf(f->G);
 800f688:	eeb0 0a68 	vmov.f32	s0, s17
 800f68c:	f007 fdbc 	bl	8017208 <sqrtf>
 800f690:	e77b      	b.n	800f58a <tVZFilter_calcCoeffs+0x1be>
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f692:	f007 fdb9 	bl	8017208 <sqrtf>
 800f696:	eef0 7a40 	vmov.f32	s15, s0
 800f69a:	e75c      	b.n	800f556 <tVZFilter_calcCoeffs+0x18a>
            Lfloat A = sqrtf(f->G);
 800f69c:	eeb0 0a68 	vmov.f32	s0, s17
 800f6a0:	f007 fdb2 	bl	8017208 <sqrtf>
 800f6a4:	e74f      	b.n	800f546 <tVZFilter_calcCoeffs+0x17a>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f6a6:	ed94 7a05 	vldr	s14, [r4, #20]
 800f6aa:	e6be      	b.n	800f42a <tVZFilter_calcCoeffs+0x5e>
 800f6ac:	40490fdb 	.word	0x40490fdb
 800f6b0:	00000000 	.word	0x00000000

0800f6b4 <tVZFilter_setFreq>:
    f->B = LEAF_clip(0.0f, B, 100.0f);
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
    tVZFilter_calcCoeffs(vf);
}
void   tVZFilter_setFreq           (tVZFilter* const vf, Lfloat freq)
{
 800f6b4:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
 800f6b6:	6805      	ldr	r5, [r0, #0]
    
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800f6b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 800f6bc:	4604      	mov	r4, r0
 800f6be:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800f6c2:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
 800f6c6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800f6e0 <tVZFilter_setFreq+0x2c>
 800f6ca:	ee21 1a27 	vmul.f32	s2, s2, s15
 800f6ce:	f002 f959 	bl	8011984 <LEAF_clip>
    tVZFilter_calcCoeffs(vf);
 800f6d2:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800f6d4:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
 800f6d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 800f6dc:	f7ff be76 	b.w	800f3cc <tVZFilter_calcCoeffs>
 800f6e0:	00000000 	.word	0x00000000

0800f6e4 <tVZFilter_setFreqFast>:

void    tVZFilter_setFreqFast     (tVZFilter* const vf, Lfloat cutoff)
{
	 _tVZFilter* f = *vf;
	 f->cutoffMIDI = cutoff;
	 cutoff *= 30.567164179104478f;
 800f6e4:	eddf 7ab1 	vldr	s15, [pc, #708]	; 800f9ac <tVZFilter_setFreqFast+0x2c8>
 800f6e8:	f640 7cfe 	movw	ip, #4094	; 0xffe
	    if (intVer < 0)
	    {
	    	intVer = 0;
	    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 800f6ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	 cutoff *= 30.567164179104478f;
 800f6f0:	ee60 7a27 	vmul.f32	s15, s0, s15
{
 800f6f4:	b510      	push	{r4, lr}
	    int32_t intVer = (int32_t)cutoff;
 800f6f6:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	 _tVZFilter* f = *vf;
 800f6fa:	6804      	ldr	r4, [r0, #0]
{
 800f6fc:	ed2d 8b04 	vpush	{d8-d9}
	    int32_t intVer = (int32_t)cutoff;
 800f700:	ee16 3a90 	vmov	r3, s13
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 800f704:	6d22      	ldr	r2, [r4, #80]	; 0x50
	 f->cutoffMIDI = cutoff;
 800f706:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
	    if (intVer > 4094)
 800f70a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    
    switch( f->type )
 800f70e:	7921      	ldrb	r1, [r4, #4]
 800f710:	4563      	cmp	r3, ip
 800f712:	bfa8      	it	ge
 800f714:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 800f716:	ee06 3a90 	vmov	s13, r3
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 800f71a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 800f71e:	eef8 5ae6 	vcvt.f32.s32	s11, s13
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 800f722:	ed93 6a01 	vldr	s12, [r3, #4]
 800f726:	edd3 6a00 	vldr	s13, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 800f72a:	ee77 7ae5 	vsub.f32	s15, s15, s11
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 800f72e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f732:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f736:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f73a:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
 800f73e:	290a      	cmp	r1, #10
 800f740:	f200 8131 	bhi.w	800f9a6 <tVZFilter_setFreqFast+0x2c2>
 800f744:	e8df f011 	tbh	[pc, r1, lsl #1]
 800f748:	00310028 	.word	0x00310028
 800f74c:	0043003a 	.word	0x0043003a
 800f750:	0058004f 	.word	0x0058004f
 800f754:	00b7009d 	.word	0x00b7009d
 800f758:	012400d1 	.word	0x012400d1
 800f75c:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800f75e:	edd4 6a05 	vldr	s13, [r4, #20]
 800f762:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f766:	eeb1 7a66 	vneg.f32	s14, s13
 800f76a:	61e3      	str	r3, [r4, #28]
 800f76c:	6263      	str	r3, [r4, #36]	; 0x24
 800f76e:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;

    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800f772:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 800f776:	ee76 5aa7 	vadd.f32	s11, s13, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800f77a:	eeb0 7a46 	vmov.f32	s14, s12
    f->R2Plusg = f->R2+f->g;
 800f77e:	edc4 5a10 	vstr	s11, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800f782:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f786:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800f78a:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800f78e:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800f792:	ecbd 8b04 	vpop	{d8-d9}
 800f796:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f798:	2300      	movs	r3, #0
 800f79a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f79e:	edd4 6a05 	vldr	s13, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f7a2:	61e3      	str	r3, [r4, #28]
 800f7a4:	6223      	str	r3, [r4, #32]
 800f7a6:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 800f7a8:	e7e3      	b.n	800f772 <tVZFilter_setFreqFast+0x8e>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f7b0:	edd4 6a05 	vldr	s13, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800f7b4:	6223      	str	r3, [r4, #32]
 800f7b6:	6263      	str	r3, [r4, #36]	; 0x24
 800f7b8:	61e2      	str	r2, [r4, #28]
            break;
 800f7ba:	e7da      	b.n	800f772 <tVZFilter_setFreqFast+0x8e>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f7c2:	edd4 6a05 	vldr	s13, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800f7c6:	61e3      	str	r3, [r4, #28]
 800f7c8:	6263      	str	r3, [r4, #36]	; 0x24
 800f7ca:	6222      	str	r2, [r4, #32]
            break;
 800f7cc:	e7d1      	b.n	800f772 <tVZFilter_setFreqFast+0x8e>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f7ce:	edd4 6a05 	vldr	s13, [r4, #20]
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800f7d8:	61e3      	str	r3, [r4, #28]
 800f7da:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f7de:	6263      	str	r3, [r4, #36]	; 0x24
 800f7e0:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 800f7e4:	e7c5      	b.n	800f772 <tVZFilter_setFreqFast+0x8e>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f7e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f7ea:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f7ec:	edd4 6a05 	vldr	s13, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f7f0:	6222      	str	r2, [r4, #32]
 800f7f2:	61e3      	str	r3, [r4, #28]
 800f7f4:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f7f6:	e7bc      	b.n	800f772 <tVZFilter_setFreqFast+0x8e>
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800f7f8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f7fc:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 800f800:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800f804:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f808:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800f80c:	ee60 0ae7 	vnmul.f32	s1, s1, s15
 800f810:	f001 fff8 	bl	8011804 <fastPowf>
 800f814:	ee28 8a00 	vmul.f32	s16, s16, s0
            Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800f818:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800f9b0 <tVZFilter_setFreqFast+0x2cc>
 800f81c:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
 800f820:	ee28 8a07 	vmul.f32	s16, s16, s14
 800f824:	ee28 0a27 	vmul.f32	s0, s16, s15
 800f828:	f001 fecc 	bl	80115c4 <fastertanf>
            Lfloat r  = f->g/wl;
 800f82c:	edd4 5a04 	vldr	s11, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f830:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800f834:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            Lfloat r  = f->g/wl;
 800f838:	eec5 7a80 	vdiv.f32	s15, s11, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f83c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f840:	eeb0 6a68 	vmov.f32	s12, s17
 800f844:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800f848:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f84c:	eea7 6aa7 	vfma.f32	s12, s15, s15
 800f850:	ee86 0a27 	vdiv.f32	s0, s12, s15
 800f854:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f858:	ee80 0a07 	vdiv.f32	s0, s0, s14
 800f85c:	f001 ff00 	bl	8011660 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f860:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
 800f864:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f868:	edc4 8a07 	vstr	s17, [r4, #28]
 800f86c:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f870:	ee70 6a00 	vadd.f32	s13, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f874:	ee27 7a26 	vmul.f32	s14, s14, s13
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f878:	edc4 6a05 	vstr	s13, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f87c:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 800f880:	e777      	b.n	800f772 <tVZFilter_setFreqFast+0x8e>
            Lfloat A = fastsqrtf(f->G);
 800f882:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800f886:	f001 feeb 	bl	8011660 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f88a:	f001 fee9 	bl	8011660 <fastsqrtf>
 800f88e:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f892:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800f896:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f89a:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f89e:	edd4 6a05 	vldr	s13, [r4, #20]
 800f8a2:	ed84 7a07 	vstr	s14, [r4, #28]
 800f8a6:	6263      	str	r3, [r4, #36]	; 0x24
 800f8a8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f8ac:	ed84 7a08 	vstr	s14, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f8b0:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
 800f8b4:	e75d      	b.n	800f772 <tVZFilter_setFreqFast+0x8e>
            Lfloat A = fastsqrtf(f->G);
 800f8b6:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800f8ba:	f001 fed1 	bl	8011660 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f8be:	f001 fecf 	bl	8011660 <fastsqrtf>
 800f8c2:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800f8c6:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800f8ca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f8ce:	edd4 6a05 	vldr	s13, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f8d2:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800f8d6:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 800f8da:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f8de:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f8e0:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800f8e4:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 800f8e8:	e743      	b.n	800f772 <tVZFilter_setFreqFast+0x8e>
            Lfloat x  = (2.0f*f->m-1.0f);
 800f8ea:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f8ee:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800f8f2:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800f8f6:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800f9b4 <tVZFilter_setFreqFast+0x2d0>
            Lfloat x  = (2.0f*f->m-1.0f);
 800f8fa:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800f8fe:	eeb1 9a68 	vneg.f32	s18, s17
 800f902:	eeb0 0a49 	vmov.f32	s0, s18
 800f906:	f002 fb4f 	bl	8011fa8 <maximum>
 800f90a:	eef0 7a40 	vmov.f32	s15, s0
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800f90e:	eddf 0a29 	vldr	s1, [pc, #164]	; 800f9b4 <tVZFilter_setFreqFast+0x2d0>
 800f912:	eeb0 0a68 	vmov.f32	s0, s17
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800f916:	edc4 7a07 	vstr	s15, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800f91a:	f002 fb4d 	bl	8011fb8 <minimum>
            f->cB = 1.0f-x*x;
 800f91e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f922:	edd4 7a05 	vldr	s15, [r4, #20]
 800f926:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 800f92a:	eea9 7a28 	vfma.f32	s14, s18, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f92e:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 800f932:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800f936:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f93a:	ee76 5a06 	vadd.f32	s11, s12, s12
 800f93e:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 800f942:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f946:	eee6 7a06 	vfma.f32	s15, s12, s12
 800f94a:	eee0 7a00 	vfma.f32	s15, s0, s0
 800f94e:	eee0 7a65 	vfms.f32	s15, s0, s11
 800f952:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 800f956:	f001 fe83 	bl	8011660 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 800f95a:	edd4 5a07 	vldr	s11, [r4, #28]
 800f95e:	ed94 6a08 	vldr	s12, [r4, #32]
 800f962:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 800f966:	edd4 6a05 	vldr	s13, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f96a:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
 800f96e:	edd4 7a04 	vldr	s15, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800f972:	ee30 0a00 	vadd.f32	s0, s0, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 800f976:	ee65 5a80 	vmul.f32	s11, s11, s0
 800f97a:	ee26 6a00 	vmul.f32	s12, s12, s0
 800f97e:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f982:	edc4 5a07 	vstr	s11, [r4, #28]
 800f986:	ed84 6a08 	vstr	s12, [r4, #32]
 800f98a:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
        break;
 800f98e:	e6f0      	b.n	800f772 <tVZFilter_setFreqFast+0x8e>
            f->cL = 1.0f;
 800f990:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800f994:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
            f->cL = 1.0f;
 800f998:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 800f99a:	edc4 6a05 	vstr	s13, [r4, #20]
            f->cB = f->R2;
 800f99e:	edc4 6a08 	vstr	s13, [r4, #32]
            f->cH = 1.0f;
 800f9a2:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f9a4:	e6e5      	b.n	800f772 <tVZFilter_setFreqFast+0x8e>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f9a6:	edd4 6a05 	vldr	s13, [r4, #20]
 800f9aa:	e6e2      	b.n	800f772 <tVZFilter_setFreqFast+0x8e>
 800f9ac:	41f4898d 	.word	0x41f4898d
 800f9b0:	40490fdb 	.word	0x40490fdb
 800f9b4:	00000000 	.word	0x00000000

0800f9b8 <tVZFilter_setGain>:
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
    tVZFilter_calcCoeffsEfficientBP(vf);
}

void   tVZFilter_setGain                (tVZFilter* const vf, Lfloat gain)
{
 800f9b8:	b538      	push	{r3, r4, r5, lr}
 800f9ba:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 800f9be:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 800f9e8 <tVZFilter_setGain+0x30>
 800f9c2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800f9ec <tVZFilter_setGain+0x34>
{
 800f9c6:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 800f9c8:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 800f9ca:	f001 ffdb 	bl	8011984 <LEAF_clip>
    f->invG = 1.0f/f->G;
 800f9ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 800f9d2:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 800f9d4:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
 800f9d8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f9dc:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
 800f9e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 800f9e4:	f7ff bcf2 	b.w	800f3cc <tVZFilter_calcCoeffs>
 800f9e8:	457a0000 	.word	0x457a0000
 800f9ec:	358637bd 	.word	0x358637bd

0800f9f0 <tVZFilter_setResonance>:


void   tVZFilter_setResonance                (tVZFilter* const vf, Lfloat res)
{
 800f9f0:	b538      	push	{r3, r4, r5, lr}
 800f9f2:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 800f9f6:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 800fa20 <tVZFilter_setResonance+0x30>
 800f9fa:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800fa24 <tVZFilter_setResonance+0x34>
{
 800f9fe:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 800fa00:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 800fa02:	f001 ffbf 	bl	8011984 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 800fa06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 800fa0a:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 800fa0c:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 800fa10:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fa14:	edc5 7a05 	vstr	s15, [r5, #20]
}
 800fa18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 800fa1c:	f7ff bcd6 	b.w	800f3cc <tVZFilter_calcCoeffs>
 800fa20:	42c80000 	.word	0x42c80000
 800fa24:	3c23d70a 	.word	0x3c23d70a

0800fa28 <tVZFilter_setFrequencyAndResonance>:


void tVZFilter_setFrequencyAndResonance (tVZFilter* const vf, Lfloat freq, Lfloat res)
{
 800fa28:	b538      	push	{r3, r4, r5, lr}
 800fa2a:	ed2d 8b02 	vpush	{d8}
    _tVZFilter* f = *vf;
 800fa2e:	6804      	ldr	r4, [r0, #0]
{
 800fa30:	eeb0 8a60 	vmov.f32	s16, s1
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
 800fa34:	eddf 7a13 	vldr	s15, [pc, #76]	; 800fa84 <tVZFilter_setFrequencyAndResonance+0x5c>
 800fa38:	eef0 0a40 	vmov.f32	s1, s0
 800fa3c:	ed94 1a11 	vldr	s2, [r4, #68]	; 0x44
{
 800fa40:	4605      	mov	r5, r0
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
 800fa42:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800fa88 <tVZFilter_setFrequencyAndResonance+0x60>
 800fa46:	ee21 1a27 	vmul.f32	s2, s2, s15
 800fa4a:	f001 ff9b 	bl	8011984 <LEAF_clip>
 800fa4e:	eef0 7a40 	vmov.f32	s15, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 800fa52:	eef0 0a48 	vmov.f32	s1, s16
 800fa56:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 800fa8c <tVZFilter_setFrequencyAndResonance+0x64>
 800fa5a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800fa90 <tVZFilter_setFrequencyAndResonance+0x68>
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
 800fa5e:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 800fa62:	f001 ff8f 	bl	8011984 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 800fa66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 800fa6a:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    tVZFilter_calcCoeffs(vf);
 800fa6e:	4628      	mov	r0, r5
    f->R2 = 1.0f / f->Q;
 800fa70:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fa74:	edc4 7a05 	vstr	s15, [r4, #20]
}
 800fa78:	ecbd 8b02 	vpop	{d8}
 800fa7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 800fa80:	f7ff bca4 	b.w	800f3cc <tVZFilter_calcCoeffs>
 800fa84:	3ecccccd 	.word	0x3ecccccd
 800fa88:	3dcccccd 	.word	0x3dcccccd
 800fa8c:	42c80000 	.word	0x42c80000
 800fa90:	3c23d70a 	.word	0x3c23d70a

0800fa94 <tVZFilter_BandwidthToR>:
    f->type = type;
    tVZFilter_calcCoeffs(vf);
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
 800fa94:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800fa96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    _tVZFilter* f = *vf;
 800fa9a:	6804      	ldr	r4, [r0, #0]
{
 800fa9c:	eef0 0a40 	vmov.f32	s1, s0
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800faa0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
{
 800faa4:	ed2d 8b02 	vpush	{d8}
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800faa8:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800faac:	ee60 0ae7 	vnmul.f32	s1, s1, s15
 800fab0:	f007 f9d6 	bl	8016e60 <powf>
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800fab4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800fb14 <tVZFilter_BandwidthToR+0x80>
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800fab8:	ee28 0a00 	vmul.f32	s0, s16, s0
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800fabc:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
 800fac0:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fac4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fac8:	f007 fbca 	bl	8017260 <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800facc:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800fad0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800fad4:	eec0 6a06 	vdiv.f32	s13, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800fad8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800fadc:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800fae0:	ee26 7a87 	vmul.f32	s14, s13, s14
 800fae4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fae8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800faec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800faf0:	eef5 6a40 	vcmp.f32	s13, #0.0
 800faf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf8:	d404      	bmi.n	800fb04 <tVZFilter_BandwidthToR+0x70>
 800fafa:	eeb1 0ae6 	vsqrt.f32	s0, s13
}
 800fafe:	ecbd 8b02 	vpop	{d8}
 800fb02:	bd10      	pop	{r4, pc}
 800fb04:	ecbd 8b02 	vpop	{d8}
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800fb08:	eeb0 0a66 	vmov.f32	s0, s13
}
 800fb0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800fb10:	f007 bb7a 	b.w	8017208 <sqrtf>
 800fb14:	40490fdb 	.word	0x40490fdb

0800fb18 <tVZFilter_initToPool>:
{
 800fb18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb1a:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 800fb1e:	6816      	ldr	r6, [r2, #0]
{
 800fb20:	b083      	sub	sp, #12
 800fb22:	4605      	mov	r5, r0
 800fb24:	460f      	mov	r7, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800fb26:	2054      	movs	r0, #84	; 0x54
 800fb28:	4631      	mov	r1, r6
{
 800fb2a:	eef0 8a60 	vmov.f32	s17, s1
 800fb2e:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800fb32:	f002 fa63 	bl	8011ffc <mpool_alloc>
 800fb36:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800fb38:	6006      	str	r6, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800fb3a:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 800fb3e:	6876      	ldr	r6, [r6, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800fb40:	4604      	mov	r4, r0
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800fb42:	ed9f 8a33 	vldr	s16, [pc, #204]	; 800fc10 <tVZFilter_initToPool+0xf8>
    f->sampleRate = leaf->sampleRate;
 800fb46:	ed96 1a00 	vldr	s2, [r6]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800fb4a:	eddd 0a01 	vldr	s1, [sp, #4]
 800fb4e:	eeb0 0a48 	vmov.f32	s0, s16
    f->sampleRate = leaf->sampleRate;
 800fb52:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800fb56:	ee21 1a09 	vmul.f32	s2, s2, s18
    f->invSampleRate = leaf->invSampleRate;
 800fb5a:	6873      	ldr	r3, [r6, #4]
 800fb5c:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800fb5e:	f001 ff11 	bl	8011984 <LEAF_clip>
 800fb62:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->cutoffMIDI = ftom(f->fc);
 800fb66:	f002 f9b3 	bl	8011ed0 <ftom>
    f->invG = 1.414213562373095f;
 800fb6a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800fc14 <tVZFilter_initToPool+0xfc>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800fb6e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800fc18 <tVZFilter_initToPool+0x100>
    f->R2Plusg = f->R2 + f->g;
 800fb72:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800fb76:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    f->R2Plusg = f->R2 + f->g;
 800fb7a:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800fb7e:	ed94 6a12 	vldr	s12, [r4, #72]	; 0x48
 800fb82:	ee66 6aa5 	vmul.f32	s13, s13, s11
    f->G    = INV_SQRT2;
 800fb86:	4b25      	ldr	r3, [pc, #148]	; (800fc1c <tVZFilter_initToPool+0x104>)
    f->invG = 1.414213562373095f;
 800fb88:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = INV_SQRT2;
 800fb8c:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
 800fb8e:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 800fb92:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->cutoffMIDI = ftom(f->fc);
 800fb96:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800fb9a:	ee26 0a86 	vmul.f32	s0, s13, s12
    f->type = type;
 800fb9e:	7127      	strb	r7, [r4, #4]
    f->B    = bandWidth;
 800fba0:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 800fba4:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 800fba8:	ed84 9a0d 	vstr	s18, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 800fbac:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 800fbb0:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800fbb4:	f007 fb54 	bl	8017260 <tanf>
 800fbb8:	ed84 0a04 	vstr	s0, [r4, #16]
    _tVZFilter* f = *vf;
 800fbbc:	682f      	ldr	r7, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 800fbbe:	eef0 0a68 	vmov.f32	s1, s17
 800fbc2:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800fc20 <tVZFilter_initToPool+0x108>
 800fbc6:	eeb0 0a48 	vmov.f32	s0, s16
 800fbca:	f001 fedb 	bl	8011984 <LEAF_clip>
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800fbce:	4628      	mov	r0, r5
    f->B = LEAF_clip(0.0f, B, 100.0f);
 800fbd0:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800fbd4:	f7ff ff5e 	bl	800fa94 <tVZFilter_BandwidthToR>
 800fbd8:	ee30 0a00 	vadd.f32	s0, s0, s0
    tVZFilter_calcCoeffs(vf);
 800fbdc:	4628      	mov	r0, r5
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800fbde:	ed87 0a05 	vstr	s0, [r7, #20]
    tVZFilter_calcCoeffs(vf);
 800fbe2:	f7ff fbf3 	bl	800f3cc <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	f7ff fbf0 	bl	800f3cc <tVZFilter_calcCoeffs>
    if (leaf->sampleRate > 90000)
 800fbec:	ed96 7a00 	vldr	s14, [r6]
 800fbf0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800fc24 <tVZFilter_initToPool+0x10c>
    	f->table = __filterTanhTable_48000;
 800fbf4:	4a0c      	ldr	r2, [pc, #48]	; (800fc28 <tVZFilter_initToPool+0x110>)
 800fbf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fbfa:	4b0c      	ldr	r3, [pc, #48]	; (800fc2c <tVZFilter_initToPool+0x114>)
 800fbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc00:	bfd8      	it	le
 800fc02:	4613      	movle	r3, r2
 800fc04:	6523      	str	r3, [r4, #80]	; 0x50
}
 800fc06:	b003      	add	sp, #12
 800fc08:	ecbd 8b04 	vpop	{d8-d9}
 800fc0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	00000000 	.word	0x00000000
 800fc14:	3fb504f3 	.word	0x3fb504f3
 800fc18:	40490fdb 	.word	0x40490fdb
 800fc1c:	3f3504f3 	.word	0x3f3504f3
 800fc20:	42c80000 	.word	0x42c80000
 800fc24:	47afc800 	.word	0x47afc800
 800fc28:	08019d08 	.word	0x08019d08
 800fc2c:	0801dd08 	.word	0x0801dd08

0800fc30 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 800fc30:	3218      	adds	r2, #24
 800fc32:	f7ff bf71 	b.w	800fb18 <tVZFilter_initToPool>
 800fc36:	bf00      	nop

0800fc38 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, Lfloat sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
 800fc38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 800fc3c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800fc64 <tVZFilter_setSampleRate+0x2c>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 800fc40:	4909      	ldr	r1, [pc, #36]	; (800fc68 <tVZFilter_setSampleRate+0x30>)
 800fc42:	eeb4 0ac7 	vcmpe.f32	s0, s14
    _tVZFilter* f = *vf;
 800fc46:	6803      	ldr	r3, [r0, #0]
    f->invSampleRate = 1.0f/f->sampleRate;
 800fc48:	eec6 7a80 	vdiv.f32	s15, s13, s0
    	f->table = __filterTanhTable_48000;
 800fc4c:	4a07      	ldr	r2, [pc, #28]	; (800fc6c <tVZFilter_setSampleRate+0x34>)
    f->sampleRate = sr;
 800fc4e:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    	f->table = __filterTanhTable_48000;
 800fc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc56:	bfd8      	it	le
 800fc58:	460a      	movle	r2, r1
 800fc5a:	651a      	str	r2, [r3, #80]	; 0x50
    f->invSampleRate = 1.0f/f->sampleRate;
 800fc5c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    }
}
 800fc60:	4770      	bx	lr
 800fc62:	bf00      	nop
 800fc64:	47afc800 	.word	0x47afc800
 800fc68:	08019d08 	.word	0x08019d08
 800fc6c:	0801dd08 	.word	0x0801dd08

0800fc70 <tVZFilterLS_initToPool>:
{
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterLS_initToPool     (tVZFilterLS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 800fc70:	b570      	push	{r4, r5, r6, lr}
 800fc72:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 800fc76:	680d      	ldr	r5, [r1, #0]
{
 800fc78:	b082      	sub	sp, #8
 800fc7a:	4606      	mov	r6, r0
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 800fc7c:	2048      	movs	r0, #72	; 0x48
 800fc7e:	4629      	mov	r1, r5
{
 800fc80:	eef0 8a60 	vmov.f32	s17, s1
 800fc84:	eeb0 9a41 	vmov.f32	s18, s2
 800fc88:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 800fc8c:	f002 f9b6 	bl	8011ffc <mpool_alloc>
 800fc90:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 800fc92:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800fc94:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 800fc98:	686d      	ldr	r5, [r5, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 800fc9a:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
 800fc9c:	eddf 6a39 	vldr	s13, [pc, #228]	; 800fd84 <tVZFilterLS_initToPool+0x114>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
 800fca0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 800fca4:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800fca8:	eddf 9a37 	vldr	s19, [pc, #220]	; 800fd88 <tVZFilterLS_initToPool+0x118>
    f->sampRatio = 48000.0f / f->sampleRate;
 800fcac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
 800fcb0:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800fcb4:	eddd 0a01 	vldr	s1, [sp, #4]
 800fcb8:	ee27 1a81 	vmul.f32	s2, s15, s2
 800fcbc:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
 800fcc0:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->invSampleRate = leaf->invSampleRate;
 800fcc4:	686b      	ldr	r3, [r5, #4]
 800fcc6:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800fcc8:	f001 fe5c 	bl	8011984 <LEAF_clip>
 800fccc:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 800fcd0:	f002 f8fe 	bl	8011ed0 <ftom>
    f->R2 =    1.0f/Q;
 800fcd4:	ee88 7a28 	vdiv.f32	s14, s16, s17
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 800fcd8:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800fd8c <tVZFilterLS_initToPool+0x11c>
 800fcdc:	edd4 7a06 	vldr	s15, [r4, #24]
 800fce0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
    f->cutoffMIDI = ftom(f->fc);
 800fce4:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 800fce8:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
 800fcec:	edc4 8a08 	vstr	s17, [r4, #32]
    f->s1    = 0.0f;
 800fcf0:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
 800fcf4:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 800fcf8:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
 800fcfc:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 800fd00:	f007 faae 	bl	8017260 <tanf>
 800fd04:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 800fd08:	eef0 0a49 	vmov.f32	s1, s18
 800fd0c:	ed9f 1a20 	vldr	s2, [pc, #128]	; 800fd90 <tVZFilterLS_initToPool+0x120>
 800fd10:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800fd94 <tVZFilterLS_initToPool+0x124>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 800fd14:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 800fd18:	f001 fe34 	bl	8011984 <LEAF_clip>
 800fd1c:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 800fd20:	f001 fc9e 	bl	8011660 <fastsqrtf>
 800fd24:	f001 fc9c 	bl	8011660 <fastsqrtf>
 800fd28:	eec8 6a00 	vdiv.f32	s13, s16, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 800fd2c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 800fd30:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
 800fd34:	ed9f 6a18 	vldr	s12, [pc, #96]	; 800fd98 <tVZFilterLS_initToPool+0x128>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 800fd38:	4a18      	ldr	r2, [pc, #96]	; (800fd9c <tVZFilterLS_initToPool+0x12c>)
 800fd3a:	4b19      	ldr	r3, [pc, #100]	; (800fda0 <tVZFilterLS_initToPool+0x130>)
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 800fd3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 800fd40:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800fd44:	eef0 6a48 	vmov.f32	s13, s16
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 800fd48:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800fd4c:	eee7 6a87 	vfma.f32	s13, s15, s14
    f->R2Plusg = f->R2+f->g;
 800fd50:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fd54:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800fd58:	eeb0 7a66 	vmov.f32	s14, s13
 800fd5c:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800fd60:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800fd64:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 800fd68:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 800fd6c:	eef4 7ac6 	vcmpe.f32	s15, s12
 800fd70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd74:	bfd8      	it	le
 800fd76:	4613      	movle	r3, r2
 800fd78:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
 800fd7a:	b002      	add	sp, #8
 800fd7c:	ecbd 8b04 	vpop	{d8-d9}
 800fd80:	bd70      	pop	{r4, r5, r6, pc}
 800fd82:	bf00      	nop
 800fd84:	473b8000 	.word	0x473b8000
 800fd88:	00000000 	.word	0x00000000
 800fd8c:	40490fdb 	.word	0x40490fdb
 800fd90:	457a0000 	.word	0x457a0000
 800fd94:	358637bd 	.word	0x358637bd
 800fd98:	47afc800 	.word	0x47afc800
 800fd9c:	08019d08 	.word	0x08019d08
 800fda0:	0801dd08 	.word	0x0801dd08

0800fda4 <tVZFilterLS_init>:
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 800fda4:	3118      	adds	r1, #24
 800fda6:	f7ff bf63 	b.w	800fc70 <tVZFilterLS_initToPool>
 800fdaa:	bf00      	nop

0800fdac <tVZFilterLS_setSampleRate>:

void    tVZFilterLS_setSampleRate  (tVZFilterLS* const vf, Lfloat sampleRate)
{
        _tVZFilterLS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 800fdac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 800fdb0:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 800fde4 <tVZFilterLS_setSampleRate+0x38>
    if (sampleRate > 90000)
 800fdb4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800fde8 <tVZFilterLS_setSampleRate+0x3c>
       {
       	f->table = __filterTanhTable_96000;
       }
       else
       {
       	f->table = __filterTanhTable_48000;
 800fdb8:	490c      	ldr	r1, [pc, #48]	; (800fdec <tVZFilterLS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 800fdba:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterLS* f = *vf;
 800fdbe:	6803      	ldr	r3, [r0, #0]
       	f->table = __filterTanhTable_48000;
 800fdc0:	4a0b      	ldr	r2, [pc, #44]	; (800fdf0 <tVZFilterLS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 800fdc2:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 800fdc6:	eec6 7a00 	vdiv.f32	s15, s12, s0
       	f->table = __filterTanhTable_48000;
 800fdca:	eeb4 0ae6 	vcmpe.f32	s0, s13
 800fdce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd2:	bfd8      	it	le
 800fdd4:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 800fdd6:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 800fdda:	641a      	str	r2, [r3, #64]	; 0x40
 800fddc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
       }
}
 800fde0:	4770      	bx	lr
 800fde2:	bf00      	nop
 800fde4:	473b8000 	.word	0x473b8000
 800fde8:	47afc800 	.word	0x47afc800
 800fdec:	08019d08 	.word	0x08019d08
 800fdf0:	0801dd08 	.word	0x0801dd08

0800fdf4 <tVZFilterLS_tick>:
Lfloat   tVZFilterLS_tick               (tVZFilterLS* const vf, Lfloat input)
{
        _tVZFilterLS* f = *vf;
 800fdf4:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 800fdf6:	edd3 6a01 	vldr	s13, [r3, #4]
 800fdfa:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800fdfe:	ed93 6a02 	vldr	s12, [r3, #8]
 800fe02:	eea7 0a66 	vfms.f32	s0, s14, s13
 800fe06:	edd3 7a05 	vldr	s15, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 800fe0a:	edd3 5a03 	vldr	s11, [r3, #12]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->G*yL + f->R2*f->G*yB + yH;
 800fe0e:	ed93 5a07 	vldr	s10, [r3, #28]
 800fe12:	ed93 7a04 	vldr	s14, [r3, #16]
 800fe16:	ee25 7a07 	vmul.f32	s14, s10, s14
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 800fe1a:	ee30 0a46 	vsub.f32	s0, s0, s12
 800fe1e:	ee60 7a27 	vmul.f32	s15, s0, s15
    yB = v1 + f->s1;
 800fe22:	eee5 6aa7 	vfma.f32	s13, s11, s15
    yL = v2 + f->s2;
 800fe26:	eea5 6aa6 	vfma.f32	s12, s11, s13
    return f->G*yL + f->R2*f->G*yB + yH;
 800fe2a:	ee27 0a26 	vmul.f32	s0, s14, s13
    f->s1 = v1 + yB; // state update in 1st integrator
 800fe2e:	eef0 4a66 	vmov.f32	s9, s13
 800fe32:	eee5 4aa7 	vfma.f32	s9, s11, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 800fe36:	eeb0 7a46 	vmov.f32	s14, s12
    return f->G*yL + f->R2*f->G*yB + yH;
 800fe3a:	eea5 0a06 	vfma.f32	s0, s10, s12
    f->s2 = v2 + yL; // state update in 2nd integrator
 800fe3e:	eea5 7aa6 	vfma.f32	s14, s11, s13
    f->s1 = v1 + yB; // state update in 1st integrator
 800fe42:	edc3 4a01 	vstr	s9, [r3, #4]
}
 800fe46:	ee30 0a27 	vadd.f32	s0, s0, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 800fe4a:	ed83 7a02 	vstr	s14, [r3, #8]
}
 800fe4e:	4770      	bx	lr

0800fe50 <tVZFilterLS_setFreqFast>:

void    tVZFilterLS_setFreqFast           (tVZFilterLS* const vf, Lfloat cutoff)
{
        _tVZFilterLS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
 800fe50:	eddf 7a21 	vldr	s15, [pc, #132]	; 800fed8 <tVZFilterLS_setFreqFast+0x88>
 800fe54:	f640 7cfe 	movw	ip, #4094	; 0xffe
        _tVZFilterLS* f = *vf;
 800fe58:	6803      	ldr	r3, [r0, #0]
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 800fe5a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
        cutoff *= 30.567164179104478f;
 800fe5e:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 800fe62:	6c19      	ldr	r1, [r3, #64]	; 0x40
        f->cutoffMIDI = cutoff;
 800fe64:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
        int32_t intVer = (int32_t)cutoff;
 800fe68:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 800fe6c:	edd3 4a0f 	vldr	s9, [r3, #60]	; 0x3c

    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 800fe70:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    f->R2Plusg = f->R2+f->g;
 800fe74:	ed93 6a04 	vldr	s12, [r3, #16]
        int32_t intVer = (int32_t)cutoff;
 800fe78:	ee17 2a10 	vmov	r2, s14
 800fe7c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800fe80:	4562      	cmp	r2, ip
 800fe82:	bfa8      	it	ge
 800fe84:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 800fe86:	ee07 2a10 	vmov	s14, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 800fe8a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 800fe8e:	eeb8 4ac7 	vcvt.f32.s32	s8, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 800fe92:	ed92 7a01 	vldr	s14, [r2, #4]
 800fe96:	ed92 5a00 	vldr	s10, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 800fe9a:	ee77 7ac4 	vsub.f32	s15, s15, s8
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 800fe9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fea2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800fea6:	ee27 7a24 	vmul.f32	s14, s14, s9
 800feaa:	eea5 7a27 	vfma.f32	s14, s10, s15
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 800feae:	ee67 7a26 	vmul.f32	s15, s14, s13
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 800feb2:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800feb6:	eeb0 7a65 	vmov.f32	s14, s11
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 800feba:	edc3 7a03 	vstr	s15, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800febe:	eea7 7a86 	vfma.f32	s14, s15, s12
    f->R2Plusg = f->R2+f->g;
 800fec2:	ee37 6a86 	vadd.f32	s12, s15, s12
 800fec6:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800feca:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800fece:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800fed2:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800fed6:	4770      	bx	lr
 800fed8:	41f4898d 	.word	0x41f4898d

0800fedc <tVZFilterLS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterLS_setGain                  (tVZFilterLS* const vf, Lfloat gain)
{
 800fedc:	b510      	push	{r4, lr}
        _tVZFilterLS* f = *vf;
 800fede:	6804      	ldr	r4, [r0, #0]
{
 800fee0:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 800fee4:	ed9f 1a15 	vldr	s2, [pc, #84]	; 800ff3c <tVZFilterLS_setGain+0x60>
 800fee8:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800ff40 <tVZFilterLS_setGain+0x64>
 800feec:	f001 fd4a 	bl	8011984 <LEAF_clip>
 800fef0:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 800fef4:	f001 fbb4 	bl	8011660 <fastsqrtf>
 800fef8:	f001 fbb2 	bl	8011660 <fastsqrtf>
 800fefc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 800ff00:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 800ff04:	ed94 7a04 	vldr	s14, [r4, #16]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 800ff08:	eec6 6a00 	vdiv.f32	s13, s12, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 800ff0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 800ff10:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800ff14:	eef0 6a46 	vmov.f32	s13, s12
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 800ff18:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800ff1c:	eee7 6a87 	vfma.f32	s13, s15, s14
    f->R2Plusg = f->R2+f->g;
 800ff20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff24:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800ff28:	eeb0 7a66 	vmov.f32	s14, s13
 800ff2c:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800ff30:	eec6 7a07 	vdiv.f32	s15, s12, s14
 800ff34:	edc4 7a05 	vstr	s15, [r4, #20]
}
 800ff38:	bd10      	pop	{r4, pc}
 800ff3a:	bf00      	nop
 800ff3c:	457a0000 	.word	0x457a0000
 800ff40:	358637bd 	.word	0x358637bd

0800ff44 <tVZFilterLS_setResonance>:

void    tVZFilterLS_setResonance                (tVZFilterLS* const vf, Lfloat res)
{
        _tVZFilterLS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
 800ff44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
 800ff48:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
 800ff4a:	edd3 7a03 	vldr	s15, [r3, #12]
        f->R2 = 1.0f/res;
 800ff4e:	ee86 6a80 	vdiv.f32	s12, s13, s0
        f->Q = res;
 800ff52:	ed83 0a08 	vstr	s0, [r3, #32]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800ff56:	eeb0 7a66 	vmov.f32	s14, s13
 800ff5a:	eea6 7a27 	vfma.f32	s14, s12, s15
        f->R2 = 1.0f/res;
 800ff5e:	ed83 6a04 	vstr	s12, [r3, #16]
        f->R2Plusg = f->R2+f->g;
 800ff62:	ee76 5a27 	vadd.f32	s11, s12, s15
 800ff66:	edc3 5a0a 	vstr	s11, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 800ff6a:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800ff6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff72:	edc3 7a05 	vstr	s15, [r3, #20]
}
 800ff76:	4770      	bx	lr

0800ff78 <tVZFilterHS_initToPool>:
{
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterHS_initToPool     (tVZFilterHS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 800ff78:	b570      	push	{r4, r5, r6, lr}
 800ff7a:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 800ff7e:	680d      	ldr	r5, [r1, #0]
{
 800ff80:	b082      	sub	sp, #8
 800ff82:	4606      	mov	r6, r0
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 800ff84:	2048      	movs	r0, #72	; 0x48
 800ff86:	4629      	mov	r1, r5
{
 800ff88:	eeb0 8a60 	vmov.f32	s16, s1
 800ff8c:	eeb0 9a41 	vmov.f32	s18, s2
 800ff90:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 800ff94:	f002 f832 	bl	8011ffc <mpool_alloc>
 800ff98:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 800ff9a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800ff9c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 800ffa0:	686d      	ldr	r5, [r5, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 800ffa2:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
 800ffa4:	eddf 6a38 	vldr	s13, [pc, #224]	; 8010088 <tVZFilterHS_initToPool+0x110>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
 800ffa8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 800ffac:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800ffb0:	eddf 9a36 	vldr	s19, [pc, #216]	; 801008c <tVZFilterHS_initToPool+0x114>
    f->sampRatio = 48000.0f / f->sampleRate;
 800ffb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
 800ffb8:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->invSampleRate = leaf->invSampleRate;
 800ffbc:	686b      	ldr	r3, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800ffbe:	eddd 0a01 	vldr	s1, [sp, #4]
    f->invSampleRate = leaf->invSampleRate;
 800ffc2:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800ffc4:	ee27 1a81 	vmul.f32	s2, s15, s2
 800ffc8:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
 800ffcc:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800ffd0:	f001 fcd8 	bl	8011984 <LEAF_clip>
 800ffd4:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 800ffd8:	f001 ff7a 	bl	8011ed0 <ftom>
    f->R2 =    1.0f/Q;
 800ffdc:	ee88 7a88 	vdiv.f32	s14, s17, s16
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 800ffe0:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8010090 <tVZFilterHS_initToPool+0x118>
 800ffe4:	edd4 7a06 	vldr	s15, [r4, #24]
 800ffe8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
    f->cutoffMIDI = ftom(f->fc);
 800ffec:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 800fff0:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
 800fff4:	ed84 8a08 	vstr	s16, [r4, #32]
    f->s1    = 0.0f;
 800fff8:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
 800fffc:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8010000:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
 8010004:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8010008:	f007 f92a 	bl	8017260 <tanf>
 801000c:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8010010:	eef0 0a49 	vmov.f32	s1, s18
 8010014:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 8010094 <tVZFilterHS_initToPool+0x11c>
 8010018:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8010098 <tVZFilterHS_initToPool+0x120>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 801001c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8010020:	f001 fcb0 	bl	8011984 <LEAF_clip>
 8010024:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
 8010028:	f001 fb1a 	bl	8011660 <fastsqrtf>
 801002c:	f001 fb18 	bl	8011660 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8010030:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010034:	eef0 6a68 	vmov.f32	s13, s17
    f->R2Plusg = f->R2+f->g;
 8010038:	ed94 7a04 	vldr	s14, [r4, #16]
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 801003c:	ee60 7a27 	vmul.f32	s15, s0, s15
    if (leaf->sampleRate > 90000)
 8010040:	ed9f 6a16 	vldr	s12, [pc, #88]	; 801009c <tVZFilterHS_initToPool+0x124>
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
 8010044:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8010048:	4a15      	ldr	r2, [pc, #84]	; (80100a0 <tVZFilterHS_initToPool+0x128>)
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801004a:	eee7 6a87 	vfma.f32	s13, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 801004e:	edc4 7a03 	vstr	s15, [r4, #12]
    f->R2Plusg = f->R2+f->g;
 8010052:	ee37 7a87 	vadd.f32	s14, s15, s14
    	f->table = __filterTanhTable_48000;
 8010056:	4b13      	ldr	r3, [pc, #76]	; (80100a4 <tVZFilterHS_initToPool+0x12c>)
    f->R2Plusg = f->R2+f->g;
 8010058:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801005c:	eeb0 7a66 	vmov.f32	s14, s13
 8010060:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8010064:	eec8 7a87 	vdiv.f32	s15, s17, s14
 8010068:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 801006c:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 8010070:	eef4 7ac6 	vcmpe.f32	s15, s12
 8010074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010078:	bfd8      	it	le
 801007a:	4613      	movle	r3, r2
 801007c:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
 801007e:	b002      	add	sp, #8
 8010080:	ecbd 8b04 	vpop	{d8-d9}
 8010084:	bd70      	pop	{r4, r5, r6, pc}
 8010086:	bf00      	nop
 8010088:	473b8000 	.word	0x473b8000
 801008c:	00000000 	.word	0x00000000
 8010090:	40490fdb 	.word	0x40490fdb
 8010094:	457a0000 	.word	0x457a0000
 8010098:	358637bd 	.word	0x358637bd
 801009c:	47afc800 	.word	0x47afc800
 80100a0:	08019d08 	.word	0x08019d08
 80100a4:	0801dd08 	.word	0x0801dd08

080100a8 <tVZFilterHS_init>:
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 80100a8:	3118      	adds	r1, #24
 80100aa:	f7ff bf65 	b.w	800ff78 <tVZFilterHS_initToPool>
 80100ae:	bf00      	nop

080100b0 <tVZFilterHS_setSampleRate>:

void    tVZFilterHS_setSampleRate  (tVZFilterHS* const vf, Lfloat sampleRate)
{
        _tVZFilterHS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 80100b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 80100b4:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80100e8 <tVZFilterHS_setSampleRate+0x38>
    if (sampleRate > 90000)
 80100b8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80100ec <tVZFilterHS_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 80100bc:	490c      	ldr	r1, [pc, #48]	; (80100f0 <tVZFilterHS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 80100be:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterHS* f = *vf;
 80100c2:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
 80100c4:	4a0b      	ldr	r2, [pc, #44]	; (80100f4 <tVZFilterHS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 80100c6:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 80100ca:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
 80100ce:	eeb4 0ae6 	vcmpe.f32	s0, s13
 80100d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d6:	bfd8      	it	le
 80100d8:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 80100da:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 80100de:	641a      	str	r2, [r3, #64]	; 0x40
 80100e0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
          }
}
 80100e4:	4770      	bx	lr
 80100e6:	bf00      	nop
 80100e8:	473b8000 	.word	0x473b8000
 80100ec:	47afc800 	.word	0x47afc800
 80100f0:	08019d08 	.word	0x08019d08
 80100f4:	0801dd08 	.word	0x0801dd08

080100f8 <tVZFilterHS_tick>:
Lfloat   tVZFilterHS_tick               (tVZFilterHS* const vf, Lfloat input)
{
        _tVZFilterHS* f = *vf;
 80100f8:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80100fa:	edd3 6a01 	vldr	s13, [r3, #4]
 80100fe:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
 8010102:	ed93 7a02 	vldr	s14, [r3, #8]
 8010106:	eea6 0a66 	vfms.f32	s0, s12, s13
 801010a:	edd3 7a05 	vldr	s15, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 801010e:	ed93 6a03 	vldr	s12, [r3, #12]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + f->G*yH;
 8010112:	ed93 5a07 	vldr	s10, [r3, #28]
 8010116:	edd3 5a04 	vldr	s11, [r3, #16]
 801011a:	ee65 5a25 	vmul.f32	s11, s10, s11
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 801011e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010122:	ee60 7a27 	vmul.f32	s15, s0, s15
    yB = v1 + f->s1;
 8010126:	eee6 6a27 	vfma.f32	s13, s12, s15
    yL = v2 + f->s2;
 801012a:	eea6 7a26 	vfma.f32	s14, s12, s13
    f->s1 = v1 + yB; // state update in 1st integrator
 801012e:	eeb0 4a66 	vmov.f32	s8, s13
 8010132:	eea6 4a27 	vfma.f32	s8, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8010136:	eef0 4a47 	vmov.f32	s9, s14
    return yL + f->R2*f->G*yB + f->G*yH;
 801013a:	eea5 7aa6 	vfma.f32	s14, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 801013e:	eee6 4a26 	vfma.f32	s9, s12, s13
    f->s1 = v1 + yB; // state update in 1st integrator
 8010142:	ed83 4a01 	vstr	s8, [r3, #4]
}
 8010146:	eea5 7a27 	vfma.f32	s14, s10, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 801014a:	edc3 4a02 	vstr	s9, [r3, #8]
}
 801014e:	eeb0 0a47 	vmov.f32	s0, s14
 8010152:	4770      	bx	lr

08010154 <tVZFilterHS_setFreqFast>:

void    tVZFilterHS_setFreqFast           (tVZFilterHS* const vf, Lfloat cutoff)
{
        _tVZFilterHS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
 8010154:	eddf 7a21 	vldr	s15, [pc, #132]	; 80101dc <tVZFilterHS_setFreqFast+0x88>
 8010158:	f640 7cfe 	movw	ip, #4094	; 0xffe
        _tVZFilterHS* f = *vf;
 801015c:	6803      	ldr	r3, [r0, #0]
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801015e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
        cutoff *= 30.567164179104478f;
 8010162:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8010166:	6c19      	ldr	r1, [r3, #64]	; 0x40
        f->cutoffMIDI = cutoff;
 8010168:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
        int32_t intVer = (int32_t)cutoff;
 801016c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8010170:	edd3 4a0f 	vldr	s9, [r3, #60]	; 0x3c

    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8010174:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    
    f->R2Plusg = f->R2+f->g;
 8010178:	ed93 6a04 	vldr	s12, [r3, #16]
        int32_t intVer = (int32_t)cutoff;
 801017c:	ee17 2a10 	vmov	r2, s14
 8010180:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8010184:	4562      	cmp	r2, ip
 8010186:	bfa8      	it	ge
 8010188:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801018a:	ee07 2a10 	vmov	s14, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801018e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8010192:	eeb8 4ac7 	vcvt.f32.s32	s8, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8010196:	ed92 7a01 	vldr	s14, [r2, #4]
 801019a:	ed92 5a00 	vldr	s10, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801019e:	ee77 7ac4 	vsub.f32	s15, s15, s8
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80101a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80101a6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80101aa:	ee27 7a24 	vmul.f32	s14, s14, s9
 80101ae:	eea5 7a27 	vfma.f32	s14, s10, s15
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80101b2:	ee67 7a26 	vmul.f32	s15, s14, s13
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 80101b6:	ed83 7a0d 	vstr	s14, [r3, #52]	; 0x34
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80101ba:	eeb0 7a65 	vmov.f32	s14, s11
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80101be:	edc3 7a03 	vstr	s15, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80101c2:	eea7 7a86 	vfma.f32	s14, s15, s12
    f->R2Plusg = f->R2+f->g;
 80101c6:	ee37 6a86 	vadd.f32	s12, s15, s12
 80101ca:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80101ce:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80101d2:	eec5 7a87 	vdiv.f32	s15, s11, s14
 80101d6:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80101da:	4770      	bx	lr
 80101dc:	41f4898d 	.word	0x41f4898d

080101e0 <tVZFilterHS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterHS_setGain                  (tVZFilterHS* const vf, Lfloat gain)
{
 80101e0:	b510      	push	{r4, lr}
        _tVZFilterHS* f = *vf;
 80101e2:	6804      	ldr	r4, [r0, #0]
{
 80101e4:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80101e8:	ed9f 1a14 	vldr	s2, [pc, #80]	; 801023c <tVZFilterHS_setGain+0x5c>
 80101ec:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8010240 <tVZFilterHS_setGain+0x60>
 80101f0:	f001 fbc8 	bl	8011984 <LEAF_clip>
 80101f4:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
 80101f8:	f001 fa32 	bl	8011660 <fastsqrtf>
 80101fc:	f001 fa30 	bl	8011660 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010200:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8010204:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 8010208:	ed94 7a04 	vldr	s14, [r4, #16]
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 801020c:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
 8010210:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010214:	eef0 6a46 	vmov.f32	s13, s12
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8010218:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801021c:	eee7 6a87 	vfma.f32	s13, s15, s14
    f->R2Plusg = f->R2+f->g;
 8010220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010224:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010228:	eeb0 7a66 	vmov.f32	s14, s13
 801022c:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8010230:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8010234:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8010238:	bd10      	pop	{r4, pc}
 801023a:	bf00      	nop
 801023c:	457a0000 	.word	0x457a0000
 8010240:	358637bd 	.word	0x358637bd

08010244 <tVZFilterHS_setResonance>:

void    tVZFilterHS_setResonance                (tVZFilterHS* const vf, Lfloat res)
{
        _tVZFilterHS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
 8010244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
 8010248:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
 801024a:	edd3 7a03 	vldr	s15, [r3, #12]
        f->R2 = 1.0f/res;
 801024e:	ee86 6a80 	vdiv.f32	s12, s13, s0
        f->Q = res;
 8010252:	ed83 0a08 	vstr	s0, [r3, #32]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010256:	eeb0 7a66 	vmov.f32	s14, s13
 801025a:	eea6 7a27 	vfma.f32	s14, s12, s15
        f->R2 = 1.0f/res;
 801025e:	ed83 6a04 	vstr	s12, [r3, #16]
        f->R2Plusg = f->R2+f->g;
 8010262:	ee76 5a27 	vadd.f32	s11, s12, s15
 8010266:	edc3 5a0a 	vstr	s11, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801026a:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801026e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010272:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8010276:	4770      	bx	lr

08010278 <tVZFilterBell_initToPool>:
{
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
}

void    tVZFilterBell_initToPool     (tVZFilterBell* const vf, Lfloat freq, Lfloat BW, Lfloat gain, tMempool* const mp)
{
 8010278:	b570      	push	{r4, r5, r6, lr}
 801027a:	ed2d 8b08 	vpush	{d8-d11}
    _tMempool* m = *mp;
 801027e:	680d      	ldr	r5, [r1, #0]
{
 8010280:	4606      	mov	r6, r0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8010282:	2040      	movs	r0, #64	; 0x40
{
 8010284:	eeb0 8a40 	vmov.f32	s16, s0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8010288:	4629      	mov	r1, r5
{
 801028a:	eef0 9a60 	vmov.f32	s19, s1
 801028e:	eeb0 aa41 	vmov.f32	s20, s2
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8010292:	f001 feb3 	bl	8011ffc <mpool_alloc>
 8010296:	6030      	str	r0, [r6, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8010298:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    f->mempool = m;
 801029c:	6005      	str	r5, [r0, #0]
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 801029e:	4604      	mov	r4, r0
    LEAF* leaf = f->mempool->leaf;
 80102a0:	686d      	ldr	r5, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80102a2:	eef0 0a48 	vmov.f32	s1, s16
    f->sampRatio = 48000.0f / f->sampleRate;
 80102a6:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80103c8 <tVZFilterBell_initToPool+0x150>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80102aa:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 80102ae:	ed95 1a00 	vldr	s2, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80102b2:	ed9f 9a46 	vldr	s18, [pc, #280]	; 80103cc <tVZFilterBell_initToPool+0x154>
    f->sampRatio = 48000.0f / f->sampleRate;
 80102b6:	eec7 7a01 	vdiv.f32	s15, s14, s2
    f->sampleRate = leaf->sampleRate;
 80102ba:	ed80 1a0a 	vstr	s2, [r0, #40]	; 0x28
    f->invSampleRate = leaf->invSampleRate;
 80102be:	686b      	ldr	r3, [r5, #4]
    f->g = tanf(PI * freq * f->invSampleRate);
 80102c0:	eddf aa43 	vldr	s21, [pc, #268]	; 80103d0 <tVZFilterBell_initToPool+0x158>
    f->invSampleRate = leaf->invSampleRate;
 80102c4:	62c3      	str	r3, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80102c6:	ee21 1a0b 	vmul.f32	s2, s2, s22
 80102ca:	eeb0 0a49 	vmov.f32	s0, s18
    f->sampRatio = 48000.0f / f->sampleRate;
 80102ce:	edc0 7a0d 	vstr	s15, [r0, #52]	; 0x34
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80102d2:	f001 fb57 	bl	8011984 <LEAF_clip>
 80102d6:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 80102da:	f001 fdf9 	bl	8011ed0 <ftom>
 80102de:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80102e2:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 80103d4 <tVZFilterBell_initToPool+0x15c>
 80102e6:	eef0 0a4a 	vmov.f32	s1, s20
    f->B = BW;
 80102ea:	edc4 9a08 	vstr	s19, [r4, #32]
    f->cutoffMIDI = ftom(f->fc);
 80102ee:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    f->s1    = 0.0f;
 80102f2:	ed84 9a01 	vstr	s18, [r4, #4]
    f->s2   = 0.0f;
 80102f6:	ed84 9a02 	vstr	s18, [r4, #8]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80102fa:	ed9f 0a37 	vldr	s0, [pc, #220]	; 80103d8 <tVZFilterBell_initToPool+0x160>
 80102fe:	f001 fb41 	bl	8011984 <LEAF_clip>
    f->g = tanf(PI * freq * f->invSampleRate);
 8010302:	ee28 8a2a 	vmul.f32	s16, s16, s21
 8010306:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 801030a:	ed84 0a07 	vstr	s0, [r4, #28]
    f->g = tanf(PI * freq * f->invSampleRate);
 801030e:	ee28 0a27 	vmul.f32	s0, s16, s15
 8010312:	f006 ffa5 	bl	8017260 <tanf>
 8010316:	eef0 7a40 	vmov.f32	s15, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 801031a:	edd4 0a08 	vldr	s1, [r4, #32]
 801031e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8010322:	ed94 8a06 	vldr	s16, [r4, #24]
 8010326:	ee60 0acb 	vnmul.f32	s1, s1, s22
    f->g = tanf(PI * freq * f->invSampleRate);
 801032a:	edc4 7a03 	vstr	s15, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 801032e:	f001 fa69 	bl	8011804 <fastPowf>
 8010332:	ee28 0a00 	vmul.f32	s0, s16, s0
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8010336:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801033a:	ee20 0a2a 	vmul.f32	s0, s0, s21
 801033e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010342:	f001 f93f 	bl	80115c4 <fastertanf>
    Lfloat r  = f->g/wl;
 8010346:	edd4 5a03 	vldr	s11, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801034a:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 801034e:	ed94 7a07 	vldr	s14, [r4, #28]
    Lfloat r  = f->g/wl;
 8010352:	eec5 7a80 	vdiv.f32	s15, s11, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010356:	ee27 7a06 	vmul.f32	s14, s14, s12
 801035a:	eeb0 6a68 	vmov.f32	s12, s17
 801035e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8010362:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010366:	eea7 6aa7 	vfma.f32	s12, s15, s15
    f->rToUse = r;
 801036a:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801036e:	ee86 0a27 	vdiv.f32	s0, s12, s15
 8010372:	ee30 0a66 	vsub.f32	s0, s0, s13
 8010376:	ee80 0a07 	vdiv.f32	s0, s0, s14
 801037a:	f001 f971 	bl	8011660 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 801037e:	edd4 7a03 	vldr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
 8010382:	eddf 6a16 	vldr	s13, [pc, #88]	; 80103dc <tVZFilterBell_initToPool+0x164>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8010386:	4a16      	ldr	r2, [pc, #88]	; (80103e0 <tVZFilterBell_initToPool+0x168>)
 8010388:	4b16      	ldr	r3, [pc, #88]	; (80103e4 <tVZFilterBell_initToPool+0x16c>)
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801038a:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801038e:	eeb0 7a68 	vmov.f32	s14, s17
    f->R2Plusg = f->R2+f->g;
 8010392:	ee30 6a27 	vadd.f32	s12, s0, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010396:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801039a:	eea0 7a27 	vfma.f32	s14, s0, s15
    f->R2Plusg = f->R2+f->g;
 801039e:	ed84 6a09 	vstr	s12, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80103a2:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80103a6:	eec8 7a87 	vdiv.f32	s15, s17, s14
 80103aa:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 80103ae:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 80103b2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80103b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ba:	bfd8      	it	le
 80103bc:	4613      	movle	r3, r2
 80103be:	63a3      	str	r3, [r4, #56]	; 0x38
    }
}
 80103c0:	ecbd 8b08 	vpop	{d8-d11}
 80103c4:	bd70      	pop	{r4, r5, r6, pc}
 80103c6:	bf00      	nop
 80103c8:	473b8000 	.word	0x473b8000
 80103cc:	00000000 	.word	0x00000000
 80103d0:	40490fdb 	.word	0x40490fdb
 80103d4:	457a0000 	.word	0x457a0000
 80103d8:	358637bd 	.word	0x358637bd
 80103dc:	47afc800 	.word	0x47afc800
 80103e0:	08019d08 	.word	0x08019d08
 80103e4:	0801dd08 	.word	0x0801dd08

080103e8 <tVZFilterBell_init>:
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
 80103e8:	3118      	adds	r1, #24
 80103ea:	f7ff bf45 	b.w	8010278 <tVZFilterBell_initToPool>
 80103ee:	bf00      	nop

080103f0 <tVZFilterBell_setSampleRate>:

void    tVZFilterBell_setSampleRate  (tVZFilterBell* const vf, Lfloat sampleRate)
{
        _tVZFilterBell* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 80103f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 80103f4:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8010428 <tVZFilterBell_setSampleRate+0x38>
    if (sampleRate > 90000)
 80103f8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 801042c <tVZFilterBell_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 80103fc:	490c      	ldr	r1, [pc, #48]	; (8010430 <tVZFilterBell_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 80103fe:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterBell* f = *vf;
 8010402:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
 8010404:	4a0b      	ldr	r2, [pc, #44]	; (8010434 <tVZFilterBell_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 8010406:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    f->sampRatio = 48000.0f / f->sampleRate;
 801040a:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
 801040e:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8010412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010416:	bfd8      	it	le
 8010418:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 801041a:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 801041e:	639a      	str	r2, [r3, #56]	; 0x38
 8010420:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
          }
}
 8010424:	4770      	bx	lr
 8010426:	bf00      	nop
 8010428:	473b8000 	.word	0x473b8000
 801042c:	47afc800 	.word	0x47afc800
 8010430:	08019d08 	.word	0x08019d08
 8010434:	0801dd08 	.word	0x0801dd08

08010438 <tVZFilterBell_tick>:
Lfloat   tVZFilterBell_tick               (tVZFilterBell* const vf, Lfloat input)
{
        _tVZFilterBell* f = *vf;
 8010438:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 801043a:	edd3 6a01 	vldr	s13, [r3, #4]
 801043e:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
 8010442:	ed93 7a02 	vldr	s14, [r3, #8]
 8010446:	eea6 0a66 	vfms.f32	s0, s12, s13
 801044a:	edd3 7a05 	vldr	s15, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 801044e:	ed93 6a03 	vldr	s12, [r3, #12]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + yH;
 8010452:	ed93 5a07 	vldr	s10, [r3, #28]
 8010456:	edd3 5a04 	vldr	s11, [r3, #16]
 801045a:	ee65 5a85 	vmul.f32	s11, s11, s10
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 801045e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010462:	ee20 0a27 	vmul.f32	s0, s0, s15
    yB = v1 + f->s1;
 8010466:	eee6 6a00 	vfma.f32	s13, s12, s0
    yL = v2 + f->s2;
 801046a:	eea6 7a26 	vfma.f32	s14, s12, s13
    f->s1 = v1 + yB; // state update in 1st integrator
 801046e:	eef0 4a66 	vmov.f32	s9, s13
 8010472:	eee6 4a00 	vfma.f32	s9, s12, s0
    f->s2 = v2 + yL; // state update in 2nd integrator
 8010476:	eeb0 5a47 	vmov.f32	s10, s14
    return yL + f->R2*f->G*yB + yH;
 801047a:	eea5 7aa6 	vfma.f32	s14, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 801047e:	eea6 5a26 	vfma.f32	s10, s12, s13
    f->s1 = v1 + yB; // state update in 1st integrator
 8010482:	edc3 4a01 	vstr	s9, [r3, #4]
}
 8010486:	ee37 0a00 	vadd.f32	s0, s14, s0
    f->s2 = v2 + yL; // state update in 2nd integrator
 801048a:	ed83 5a02 	vstr	s10, [r3, #8]
}
 801048e:	4770      	bx	lr

08010490 <tVZFilterBell_setBandwidth>:


               
void    tVZFilterBell_setBandwidth           (tVZFilterBell* const vf, Lfloat bandWidth)
{
 8010490:	b510      	push	{r4, lr}
 8010492:	eef0 7a40 	vmov.f32	s15, s0
        _tVZFilterBell* f = *vf;
 8010496:	6804      	ldr	r4, [r0, #0]
    f->B = bandWidth;
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8010498:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 801049c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
{
 80104a0:	ed2d 8b02 	vpush	{d8}
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80104a4:	ed94 8a06 	vldr	s16, [r4, #24]
 80104a8:	ee67 0ae0 	vnmul.f32	s1, s15, s1
    f->B = bandWidth;
 80104ac:	edc4 7a08 	vstr	s15, [r4, #32]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80104b0:	f001 f9a8 	bl	8011804 <fastPowf>
 80104b4:	ee28 0a00 	vmul.f32	s0, s16, s0
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80104b8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8010514 <tVZFilterBell_setBandwidth+0x84>
 80104bc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80104c0:	ee20 0a07 	vmul.f32	s0, s0, s14
 80104c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80104c8:	f001 f87c 	bl	80115c4 <fastertanf>
    Lfloat r  = f->g/wl;
 80104cc:	ed94 7a03 	vldr	s14, [r4, #12]
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80104d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    Lfloat r  = f->g/wl;
 80104d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80104d8:	ed94 7a07 	vldr	s14, [r4, #28]
 80104dc:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80104e0:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
 80104e4:	ee27 7a25 	vmul.f32	s14, s14, s11
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80104e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80104ec:	eee7 6aa7 	vfma.f32	s13, s15, s15
    f->rToUse = r;
 80104f0:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80104f4:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 80104f8:	ee30 0a46 	vsub.f32	s0, s0, s12
 80104fc:	ee80 0a07 	vdiv.f32	s0, s0, s14
 8010500:	f001 f8ae 	bl	8011660 <fastsqrtf>
 8010504:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010508:	ed84 0a04 	vstr	s0, [r4, #16]
}
 801050c:	ecbd 8b02 	vpop	{d8}
 8010510:	bd10      	pop	{r4, pc}
 8010512:	bf00      	nop
 8010514:	40490fdb 	.word	0x40490fdb

08010518 <tVZFilterBell_setFreq>:
void    tVZFilterBell_setFreq           (tVZFilterBell* const vf, Lfloat freq)
{
 8010518:	b510      	push	{r4, lr}
 801051a:	ed2d 8b04 	vpush	{d8-d9}
    _tVZFilterBell* f = *vf;
    f->fc = freq;
    //TODO: need to make fast version that uses tables
    f->g = tanf(PI * freq * f->invSampleRate);
 801051e:	ed9f 9a2e 	vldr	s18, [pc, #184]	; 80105d8 <tVZFilterBell_setFreq+0xc0>
{
 8010522:	eeb0 8a40 	vmov.f32	s16, s0
    _tVZFilterBell* f = *vf;
 8010526:	6804      	ldr	r4, [r0, #0]
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010528:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->g = tanf(PI * freq * f->invSampleRate);
 801052c:	ee20 0a09 	vmul.f32	s0, s0, s18
 8010530:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->fc = freq;
 8010534:	ed84 8a06 	vstr	s16, [r4, #24]
    f->g = tanf(PI * freq * f->invSampleRate);
 8010538:	ee20 0a27 	vmul.f32	s0, s0, s15
 801053c:	f006 fe90 	bl	8017260 <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8010540:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    f->g = tanf(PI * freq * f->invSampleRate);
 8010544:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8010548:	edd4 0a08 	vldr	s1, [r4, #32]
 801054c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8010550:	ee60 0ae7 	vnmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
 8010554:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8010558:	f001 f954 	bl	8011804 <fastPowf>
 801055c:	ee20 0a08 	vmul.f32	s0, s0, s16
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8010560:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010564:	ee20 0a09 	vmul.f32	s0, s0, s18
 8010568:	ee20 0a27 	vmul.f32	s0, s0, s15
 801056c:	f001 f82a 	bl	80115c4 <fastertanf>
    Lfloat r  = f->g/wl;
 8010570:	edd4 5a03 	vldr	s11, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010574:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8010578:	ed94 7a07 	vldr	s14, [r4, #28]
    Lfloat r  = f->g/wl;
 801057c:	eec5 7a80 	vdiv.f32	s15, s11, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010580:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010584:	eeb0 6a68 	vmov.f32	s12, s17
 8010588:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 801058c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010590:	eea7 6aa7 	vfma.f32	s12, s15, s15
    f->rToUse = r;
 8010594:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010598:	ee86 0a27 	vdiv.f32	s0, s12, s15
 801059c:	ee30 0a66 	vsub.f32	s0, s0, s13
 80105a0:	ee80 0a07 	vdiv.f32	s0, s0, s14
 80105a4:	f001 f85c 	bl	8011660 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 80105a8:	edd4 7a03 	vldr	s15, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80105ac:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80105b0:	eeb0 7a68 	vmov.f32	s14, s17
    f->R2Plusg = f->R2+f->g;
 80105b4:	ee70 6a27 	vadd.f32	s13, s0, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80105b8:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80105bc:	eea0 7a27 	vfma.f32	s14, s0, s15
    f->R2Plusg = f->R2+f->g;
 80105c0:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80105c4:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80105c8:	eec8 7a87 	vdiv.f32	s15, s17, s14
 80105cc:	edc4 7a05 	vstr	s15, [r4, #20]
}
 80105d0:	ecbd 8b04 	vpop	{d8-d9}
 80105d4:	bd10      	pop	{r4, pc}
 80105d6:	bf00      	nop
 80105d8:	40490fdb 	.word	0x40490fdb

080105dc <tVZFilterBell_setFreqFast>:

void    tVZFilterBell_setFreqFast           (tVZFilterBell* const vf, Lfloat cutoff)
{
    _tVZFilterBell* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
 80105dc:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80106f0 <tVZFilterBell_setFreqFast+0x114>
	{
		intVer = 0;
	}
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 80105e0:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 80105e4:	f640 7cfe 	movw	ip, #4094	; 0xffe
 80105e8:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    cutoff *= 30.567164179104478f;
 80105ec:	ee20 7a07 	vmul.f32	s14, s0, s14

    Lfloat r  = f->g/gLower;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80105f0:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 80105f4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
	int32_t intVer = (int32_t)cutoff;
 80105f8:	eebd 6ac7 	vcvt.s32.f32	s12, s14
{
 80105fc:	b510      	push	{r4, lr}
    _tVZFilterBell* f = *vf;
 80105fe:	6804      	ldr	r4, [r0, #0]
	int32_t intVer = (int32_t)cutoff;
 8010600:	ee16 3a10 	vmov	r3, s12
{
 8010604:	ed2d 8b02 	vpush	{d8}
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8010608:	edd4 6a08 	vldr	s13, [r4, #32]
 801060c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010610:	ed94 6a07 	vldr	s12, [r4, #28]
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8010614:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8010618:	ee66 6ae7 	vnmul.f32	s13, s13, s15
 801061c:	4563      	cmp	r3, ip
 801061e:	eef0 7a47 	vmov.f32	s15, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8010622:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010624:	bfa8      	it	ge
 8010626:	4663      	movge	r3, ip
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010628:	ee26 6a24 	vmul.f32	s12, s12, s9
    f->cutoffMIDI = cutoff;
 801062c:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8010630:	eee6 7a84 	vfma.f32	s15, s13, s8
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8010634:	ee06 3a90 	vmov	s13, r3
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8010638:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801063c:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8010640:	eef8 4ae6 	vcvt.f32.s32	s9, s13
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8010644:	edd3 6a01 	vldr	s13, [r3, #4]
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8010648:	ee37 7a64 	vsub.f32	s14, s14, s9
	intVer = (int32_t)fl;
 801064c:	eebd 4ae7 	vcvt.s32.f32	s8, s15
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8010650:	ee67 6a26 	vmul.f32	s13, s14, s13
	intVer = (int32_t)fl;
 8010654:	ee14 2a10 	vmov	r2, s8
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8010658:	ee38 7a47 	vsub.f32	s14, s16, s14
 801065c:	ed93 4a00 	vldr	s8, [r3]
 8010660:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8010664:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8010668:	4562      	cmp	r2, ip
 801066a:	eee4 6a07 	vfma.f32	s13, s8, s14
 801066e:	bfa8      	it	ge
 8010670:	4662      	movge	r2, ip
	LfloatVer = fl - (Lfloat)intVer;
 8010672:	ee04 2a90 	vmov	s9, r2
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8010676:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	LfloatVer = fl - (Lfloat)intVer;
 801067a:	eef8 4ae4 	vcvt.f32.s32	s9, s9
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801067e:	edc4 6a03 	vstr	s13, [r4, #12]
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8010682:	ed93 4a01 	vldr	s8, [r3, #4]
	LfloatVer = fl - (Lfloat)intVer;
 8010686:	ee77 7ae4 	vsub.f32	s15, s15, s9
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801068a:	edd3 4a00 	vldr	s9, [r3]
 801068e:	ee38 7a67 	vsub.f32	s14, s16, s15
 8010692:	ee67 7a84 	vmul.f32	s15, s15, s8
 8010696:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801069a:	eee4 7a87 	vfma.f32	s15, s9, s14
    Lfloat r  = f->g/gLower;
 801069e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80106a2:	ee67 7a07 	vmul.f32	s15, s14, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80106a6:	eeb0 7a48 	vmov.f32	s14, s16
    f->rToUse = r;
 80106aa:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80106ae:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80106b2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80106b6:	ee30 0a45 	vsub.f32	s0, s0, s10
 80106ba:	ee80 0a06 	vdiv.f32	s0, s0, s12
 80106be:	f000 ffcf 	bl	8011660 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 80106c2:	edd4 7a03 	vldr	s15, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80106c6:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80106ca:	eeb0 7a48 	vmov.f32	s14, s16
    f->R2Plusg = f->R2+f->g;
 80106ce:	ee70 6a27 	vadd.f32	s13, s0, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80106d2:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80106d6:	eea0 7a27 	vfma.f32	s14, s0, s15
    f->R2Plusg = f->R2+f->g;
 80106da:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80106de:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80106e2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80106e6:	edc4 7a05 	vstr	s15, [r4, #20]
}
 80106ea:	ecbd 8b02 	vpop	{d8}
 80106ee:	bd10      	pop	{r4, pc}
 80106f0:	41f4898d 	.word	0x41f4898d

080106f4 <tVZFilterBell_setGain>:

void    tVZFilterBell_setGain                  (tVZFilterBell* const vf, Lfloat gain)
{
 80106f4:	b510      	push	{r4, lr}
 80106f6:	ed2d 8b02 	vpush	{d8}
    _tVZFilterBell* f = *vf;
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 80106fa:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
 80106fe:	6804      	ldr	r4, [r0, #0]
{
 8010700:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8010704:	ed9f 1a19 	vldr	s2, [pc, #100]	; 801076c <tVZFilterBell_setGain+0x78>
 8010708:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8010770 <tVZFilterBell_setGain+0x7c>
 801070c:	f001 f93a 	bl	8011984 <LEAF_clip>
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8010710:	eeb0 6a48 	vmov.f32	s12, s16
 8010714:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8010718:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 801071c:	ed84 0a07 	vstr	s0, [r4, #28]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8010720:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8010724:	eea7 6a07 	vfma.f32	s12, s14, s14
 8010728:	ee20 0a27 	vmul.f32	s0, s0, s15
 801072c:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8010730:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010734:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8010738:	f000 ff92 	bl	8011660 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 801073c:	edd4 7a03 	vldr	s15, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8010740:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010744:	eeb0 7a48 	vmov.f32	s14, s16
    f->R2Plusg = f->R2+f->g;
 8010748:	ee70 6a27 	vadd.f32	s13, s0, s15
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 801074c:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010750:	eea0 7a27 	vfma.f32	s14, s0, s15
    f->R2Plusg = f->R2+f->g;
 8010754:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010758:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801075c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8010760:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8010764:	ecbd 8b02 	vpop	{d8}
 8010768:	bd10      	pop	{r4, pc}
 801076a:	bf00      	nop
 801076c:	457a0000 	.word	0x457a0000
 8010770:	358637bd 	.word	0x358637bd

08010774 <tDiodeFilter_initToPool>:
{
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
 8010774:	b570      	push	{r4, r5, r6, lr}
 8010776:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801077a:	680d      	ldr	r5, [r1, #0]
{
 801077c:	eeb0 8a40 	vmov.f32	s16, s0
 8010780:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8010782:	2048      	movs	r0, #72	; 0x48
 8010784:	4629      	mov	r1, r5
{
 8010786:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 801078a:	f001 fc37 	bl	8011ffc <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 801078e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 801082c <tDiodeFilter_initToPool+0xb8>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8010792:	6030      	str	r0, [r6, #0]
 8010794:	4604      	mov	r4, r0
    f->mempool = m;
 8010796:	6005      	str	r5, [r0, #0]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8010798:	ee28 0a00 	vmul.f32	s0, s16, s0
    LEAF* leaf = f->mempool->leaf;
 801079c:	686d      	ldr	r5, [r5, #4]
    f->invSampleRate = leaf->invSampleRate;
 801079e:	edd5 7a01 	vldr	s15, [r5, #4]
    f->cutoff = cutoff;
 80107a2:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 80107a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    f->invSampleRate = leaf->invSampleRate;
 80107aa:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 80107ae:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80107b2:	f006 fde9 	bl	8017388 <tan>
 80107b6:	eef7 7bc0 	vcvt.f32.f64	s15, d0
    f->cutoffMIDI = ftom(cutoff);
 80107ba:	eeb0 0a48 	vmov.f32	s0, s16
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 80107be:	edc4 7a02 	vstr	s15, [r4, #8]
    f->cutoffMIDI = ftom(cutoff);
 80107c2:	f001 fb85 	bl	8011ed0 <ftom>
    f->r = (7.f * resonance + 0.5f);
 80107c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80107ca:	eeb1 6a0c 	vmov.f32	s12, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
 80107ce:	4b18      	ldr	r3, [pc, #96]	; (8010830 <tDiodeFilter_initToPool+0xbc>)
    f->gamma = f->Vt*f->n;
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
 80107d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->zi = 0.0f; //previous input value
 80107d4:	2100      	movs	r1, #0
    f->r = (7.f * resonance + 0.5f);
 80107d6:	eef0 6a67 	vmov.f32	s13, s15
    f->n = 1.836f;
 80107da:	6163      	str	r3, [r4, #20]
    f->gamma = f->Vt*f->n;
 80107dc:	4b15      	ldr	r3, [pc, #84]	; (8010834 <tDiodeFilter_initToPool+0xc0>)
    f->zi = 0.0f; //previous input value
 80107de:	61e1      	str	r1, [r4, #28]
    f->r = (7.f * resonance + 0.5f);
 80107e0:	eee8 6a86 	vfma.f32	s13, s17, s12
    f->g0inv = 1.f/(2.f*f->Vt);
 80107e4:	6222      	str	r2, [r4, #32]
    f->gamma = f->Vt*f->n;
 80107e6:	61a3      	str	r3, [r4, #24]
    f->g1inv = 1.f/(2.f*f->gamma);
 80107e8:	4913      	ldr	r1, [pc, #76]	; (8010838 <tDiodeFilter_initToPool+0xc4>)
    f->g2inv = 1.f/(6.f*f->gamma);
 80107ea:	4a14      	ldr	r2, [pc, #80]	; (801083c <tDiodeFilter_initToPool+0xc8>)
    f->s0 = 0.01f;
 80107ec:	4b14      	ldr	r3, [pc, #80]	; (8010840 <tDiodeFilter_initToPool+0xcc>)
    f->g1inv = 1.f/(2.f*f->gamma);
 80107ee:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 80107f0:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s0 = 0.01f;
 80107f2:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->s2 = 0.03f;
 80107f4:	4a13      	ldr	r2, [pc, #76]	; (8010844 <tDiodeFilter_initToPool+0xd0>)
    f->s3 = 0.04f;
 80107f6:	4b14      	ldr	r3, [pc, #80]	; (8010848 <tDiodeFilter_initToPool+0xd4>)
    f->s1 = 0.02f;
 80107f8:	4914      	ldr	r1, [pc, #80]	; (801084c <tDiodeFilter_initToPool+0xd8>)
    f->s2 = 0.03f;
 80107fa:	6362      	str	r2, [r4, #52]	; 0x34
    f->s3 = 0.04f;
 80107fc:	63a3      	str	r3, [r4, #56]	; 0x38
    f->cutoffMIDI = ftom(cutoff);
 80107fe:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->Vt = 0.5f;
 8010802:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
 8010806:	edc4 6a03 	vstr	s13, [r4, #12]
    f->s1 = 0.02f;
 801080a:	6321      	str	r1, [r4, #48]	; 0x30
    if (leaf->sampleRate > 90000)
 801080c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8010850 <tDiodeFilter_initToPool+0xdc>
 8010810:	edd5 7a00 	vldr	s15, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8010814:	4a0f      	ldr	r2, [pc, #60]	; (8010854 <tDiodeFilter_initToPool+0xe0>)
 8010816:	eef4 7ac7 	vcmpe.f32	s15, s14
 801081a:	4b0f      	ldr	r3, [pc, #60]	; (8010858 <tDiodeFilter_initToPool+0xe4>)
 801081c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010820:	bfd8      	it	le
 8010822:	4613      	movle	r3, r2
 8010824:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
 8010826:	ecbd 8b02 	vpop	{d8}
 801082a:	bd70      	pop	{r4, r5, r6, pc}
 801082c:	40490fdb 	.word	0x40490fdb
 8010830:	3feb020c 	.word	0x3feb020c
 8010834:	3f6b020c 	.word	0x3f6b020c
 8010838:	3f0b6efd 	.word	0x3f0b6efd
 801083c:	3e39e952 	.word	0x3e39e952
 8010840:	3c23d70a 	.word	0x3c23d70a
 8010844:	3cf5c28f 	.word	0x3cf5c28f
 8010848:	3d23d70a 	.word	0x3d23d70a
 801084c:	3ca3d70a 	.word	0x3ca3d70a
 8010850:	47afc800 	.word	0x47afc800
 8010854:	08019d08 	.word	0x08019d08
 8010858:	0801dd08 	.word	0x0801dd08

0801085c <tDiodeFilter_init>:
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
 801085c:	3118      	adds	r1, #24
 801085e:	f7ff bf89 	b.w	8010774 <tDiodeFilter_initToPool>
 8010862:	bf00      	nop

08010864 <tDiodeFilter_tick>:
}

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
Lfloat   tDiodeFilter_tick               (tDiodeFilter* const vf, Lfloat in)
{
 8010864:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 8010866:	6804      	ldr	r4, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010868:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801086c:	eeb2 5a0e 	vmov.f32	s10, #46	; 0x41700000  15.0
 8010870:	ed9f 7aee 	vldr	s14, [pc, #952]	; 8010c2c <tDiodeFilter_tick+0x3c8>
 8010874:	eddf 5aee 	vldr	s11, [pc, #952]	; 8010c30 <tDiodeFilter_tick+0x3cc>
 8010878:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
 801087c:	ed9f 3aed 	vldr	s6, [pc, #948]	; 8010c34 <tDiodeFilter_tick+0x3d0>
{
 8010880:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010884:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
{
 8010888:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801088c:	edd4 3a03 	vldr	s7, [r4, #12]
    Lfloat ih = 0.5f * (in + f->zi);
 8010890:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010894:	ee66 7ae3 	vnmul.f32	s15, s13, s7
 8010898:	edd4 2a08 	vldr	s5, [r4, #32]
    Lfloat ih = 0.5f * (in + f->zi);
 801089c:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80108a0:	ed94 4a0b 	vldr	s8, [r4, #44]	; 0x2c
 80108a4:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80108a8:	ed94 1a02 	vldr	s2, [r4, #8]
 80108ac:	eee6 7a24 	vfma.f32	s15, s12, s9
    return ((a + 105.0f)*a + 945.0f) / output;
 80108b0:	ed9f 6adf 	vldr	s12, [pc, #892]	; 8010c30 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80108b4:	eddf 4add 	vldr	s9, [pc, #884]	; 8010c2c <tDiodeFilter_tick+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 80108b8:	eef0 1a46 	vmov.f32	s3, s12
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 80108bc:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
 80108c0:	ed9f 8adb 	vldr	s16, [pc, #876]	; 8010c30 <tDiodeFilter_tick+0x3cc>
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80108c4:	ee67 7aa2 	vmul.f32	s15, s15, s5
    Lfloat a = x*x;
 80108c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80108cc:	eea7 7a85 	vfma.f32	s14, s15, s10
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80108d0:	ed94 5a09 	vldr	s10, [r4, #36]	; 0x24
    return ((a + 105.0f)*a + 945.0f) / output;
 80108d4:	ee37 3a83 	vadd.f32	s6, s15, s6
 80108d8:	eee7 1a83 	vfma.f32	s3, s15, s6
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80108dc:	eee7 5a87 	vfma.f32	s11, s15, s14
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80108e0:	ee30 7a44 	vsub.f32	s14, s0, s8
 80108e4:	ee67 7a05 	vmul.f32	s15, s14, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80108e8:	eeb0 7a64 	vmov.f32	s14, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80108ec:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
    if (testVal!= 0.0f)
 80108f0:	eef5 5a40 	vcmp.f32	s11, #0.0
    Lfloat a = x*x;
 80108f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
    if (testVal!= 0.0f)
 80108f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80108fc:	eea7 7a82 	vfma.f32	s14, s15, s4
    return ((a + 105.0f)*a + 945.0f) / output;
 8010900:	ed9f 2acc 	vldr	s4, [pc, #816]	; 8010c34 <tDiodeFilter_tick+0x3d0>
    Lfloat output = 1.0f;
 8010904:	bf08      	it	eq
 8010906:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 801090a:	ee37 2a82 	vadd.f32	s4, s15, s4
 801090e:	ee81 3aa5 	vdiv.f32	s6, s3, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010912:	eddf 5ac6 	vldr	s11, [pc, #792]	; 8010c2c <tDiodeFilter_tick+0x3c8>
 8010916:	eea7 6a87 	vfma.f32	s12, s15, s14
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 801091a:	ee34 7ac0 	vsub.f32	s14, s9, s0
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801091e:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8010922:	ee27 7a05 	vmul.f32	s14, s14, s10
    if (testVal!= 0.0f)
 8010926:	eeb5 6a40 	vcmp.f32	s12, #0.0
    Lfloat a = x*x;
 801092a:	ee27 7a07 	vmul.f32	s14, s14, s14
    if (testVal!= 0.0f)
 801092e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010932:	ee23 3a01 	vmul.f32	s6, s6, s2
    Lfloat output = 1.0f;
 8010936:	bf08      	it	eq
 8010938:	eeb7 6a00 	vmoveq.f32	s12, #112	; 0x3f800000  1.0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801093c:	ee23 3a22 	vmul.f32	s6, s6, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8010940:	eddf 2abb 	vldr	s5, [pc, #748]	; 8010c30 <tDiodeFilter_tick+0x3cc>
 8010944:	eef0 0a62 	vmov.f32	s1, s5
 8010948:	eee7 0a82 	vfma.f32	s1, s15, s4
 801094c:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8010c34 <tDiodeFilter_tick+0x3d0>
 8010950:	ee37 2a02 	vadd.f32	s4, s14, s4
 8010954:	eec0 7a86 	vdiv.f32	s15, s1, s12
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010958:	eeb0 6a65 	vmov.f32	s12, s11
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 801095c:	ee76 5ae4 	vsub.f32	s11, s13, s9
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010960:	eea7 6a21 	vfma.f32	s12, s14, s3
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8010964:	ee65 5a85 	vmul.f32	s11, s11, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010968:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
    Lfloat a = x*x;
 801096c:	ee65 5aa5 	vmul.f32	s11, s11, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010970:	eee7 2a06 	vfma.f32	s5, s14, s12
    return ((a + 105.0f)*a + 945.0f) / output;
 8010974:	ed9f 6aae 	vldr	s12, [pc, #696]	; 8010c30 <tDiodeFilter_tick+0x3cc>
 8010978:	eef0 0a46 	vmov.f32	s1, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 801097c:	ee67 7a81 	vmul.f32	s15, s15, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8010980:	eee7 0a02 	vfma.f32	s1, s14, s4
    if (testVal!= 0.0f)
 8010984:	eef5 2a40 	vcmp.f32	s5, #0.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8010988:	ee67 7a85 	vmul.f32	s15, s15, s10
    if (testVal!= 0.0f)
 801098c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat output = 1.0f;
 8010990:	bf08      	it	eq
 8010992:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8010996:	ee80 7aa2 	vdiv.f32	s14, s1, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801099a:	eddf 2aa4 	vldr	s5, [pc, #656]	; 8010c2c <tDiodeFilter_tick+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 801099e:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8010c30 <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80109a2:	eee5 2aa1 	vfma.f32	s5, s11, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 80109a6:	eeb0 2a60 	vmov.f32	s4, s1
    
    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80109aa:	ee70 1a24 	vadd.f32	s3, s0, s9
 80109ae:	ee71 1aa6 	vadd.f32	s3, s3, s13
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80109b2:	eea5 6aa2 	vfma.f32	s12, s11, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 80109b6:	eddf 2a9f 	vldr	s5, [pc, #636]	; 8010c34 <tDiodeFilter_tick+0x3d0>
 80109ba:	ee75 2aa2 	vadd.f32	s5, s11, s5
 80109be:	eea5 2aa2 	vfma.f32	s4, s11, s5
    if (testVal!= 0.0f)
 80109c2:	eeb5 6a40 	vcmp.f32	s12, #0.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80109c6:	ee27 7a01 	vmul.f32	s14, s14, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80109ca:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    if (testVal!= 0.0f)
 80109ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80109d2:	ee27 7a05 	vmul.f32	s14, s14, s10
    Lfloat output = 1.0f;
 80109d6:	bf08      	it	eq
 80109d8:	eeb7 6a00 	vmoveq.f32	s12, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 80109dc:	eec2 5a06 	vdiv.f32	s11, s4, s12
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 80109e0:	ee26 6aa8 	vmul.f32	s12, s13, s17
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80109e4:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
    Lfloat a = x*x;
 80109e8:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80109ec:	ee65 5a81 	vmul.f32	s11, s11, s2
 80109f0:	ee65 5a85 	vmul.f32	s11, s11, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80109f4:	ed9f 5a8d 	vldr	s10, [pc, #564]	; 8010c2c <tDiodeFilter_tick+0x3c8>
 80109f8:	eea6 5a22 	vfma.f32	s10, s12, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80109fc:	ee76 2aa4 	vadd.f32	s5, s13, s9
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010a00:	eee6 0a05 	vfma.f32	s1, s12, s10
    return ((a + 105.0f)*a + 945.0f) / output;
 8010a04:	ed9f 5a8b 	vldr	s10, [pc, #556]	; 8010c34 <tDiodeFilter_tick+0x3d0>
 8010a08:	ee36 5a05 	vadd.f32	s10, s12, s10
 8010a0c:	eea6 8a05 	vfma.f32	s16, s12, s10
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010a10:	ee30 5a04 	vadd.f32	s10, s0, s8
    if (testVal!= 0.0f)
 8010a14:	eef5 0a40 	vcmp.f32	s1, #0.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010a18:	ee35 5a24 	vadd.f32	s10, s10, s9
    if (testVal!= 0.0f)
 8010a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010a20:	ee35 5a26 	vadd.f32	s10, s10, s13
    Lfloat output = 1.0f;
 8010a24:	bf08      	it	eq
 8010a26:	eef7 0a00 	vmoveq.f32	s1, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010a2a:	eea9 5a03 	vfma.f32	s10, s18, s6
    return ((a + 105.0f)*a + 945.0f) / output;
 8010a2e:	ee88 6a20 	vdiv.f32	s12, s16, s1
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010a32:	eee5 1a27 	vfma.f32	s3, s10, s15
 8010a36:	ee76 0aa6 	vadd.f32	s1, s13, s13
 8010a3a:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8010a3e:	eee1 2a87 	vfma.f32	s5, s3, s14
 8010a42:	eef0 1a60 	vmov.f32	s3, s1
 8010a46:	eee4 1a82 	vfma.f32	s3, s9, s4
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8010a4a:	ee26 6a01 	vmul.f32	s12, s12, s2
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010a4e:	ee26 1a85 	vmul.f32	s2, s13, s10
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8010a52:	ee26 6a28 	vmul.f32	s12, s12, s17
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010a56:	eee1 2aa7 	vfma.f32	s5, s3, s15
 8010a5a:	eef0 1a60 	vmov.f32	s3, s1
 8010a5e:	eee1 1a27 	vfma.f32	s3, s2, s15
 8010a62:	eeb0 1a66 	vmov.f32	s2, s13
 8010a66:	eea2 1aa5 	vfma.f32	s2, s5, s11
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8010a6a:	eef1 2a00 	vmov.f32	s5, #16	; 0x40800000  4.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010a6e:	eea0 1aa7 	vfma.f32	s2, s1, s15
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8010a72:	eef0 0a62 	vmov.f32	s1, s5
 8010a76:	eee6 0a02 	vfma.f32	s1, s12, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010a7a:	eea1 1a87 	vfma.f32	s2, s3, s14
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8010a7e:	eef0 1a46 	vmov.f32	s3, s12
 8010a82:	eee0 1aa7 	vfma.f32	s3, s1, s15
 8010a86:	eef0 0a46 	vmov.f32	s1, s12
 8010a8a:	eee3 0a83 	vfma.f32	s1, s7, s6
 8010a8e:	ee70 0aa2 	vadd.f32	s1, s1, s5
 8010a92:	eef0 2a46 	vmov.f32	s5, s12
 8010a96:	eee0 2aa7 	vfma.f32	s5, s1, s15
 8010a9a:	eef0 0a42 	vmov.f32	s1, s4
 8010a9e:	eee6 0a02 	vfma.f32	s1, s12, s4
 8010aa2:	ee72 2a85 	vadd.f32	s5, s5, s10
 8010aa6:	eea6 5a05 	vfma.f32	s10, s12, s10
 8010aaa:	eee2 1a87 	vfma.f32	s3, s5, s14
 8010aae:	eef0 2a46 	vmov.f32	s5, s12
 8010ab2:	ee25 5a27 	vmul.f32	s10, s10, s15
 8010ab6:	ee71 1a82 	vadd.f32	s3, s3, s4
 8010aba:	eea6 5a02 	vfma.f32	s10, s12, s4
 8010abe:	eee1 2aa5 	vfma.f32	s5, s3, s11
 8010ac2:	ee35 5a02 	vadd.f32	s10, s10, s4
 8010ac6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8010aca:	eee0 2aa7 	vfma.f32	s5, s1, s15
 8010ace:	eee5 2a07 	vfma.f32	s5, s10, s14
 8010ad2:	ee32 5a82 	vadd.f32	s10, s5, s4
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
 8010ad6:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8010ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8010ade:	eef5 7a40 	vcmp.f32	s15, #0.0
        tempy3denom = 0.000001f;
 8010ae2:	bf08      	it	eq
 8010ae4:	ed9f 5a54 	vldreq	s10, [pc, #336]	; 8010c38 <tDiodeFilter_tick+0x3d4>
    if (t1 == 0.0f)
 8010ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 8010aec:	eeb5 7a40 	vcmp.f32	s14, #0.0
    y3 = y3 / tempy3denom;
 8010af0:	eec1 1a05 	vdiv.f32	s3, s2, s10
        t1 = 0.000001f;
 8010af4:	bf08      	it	eq
 8010af6:	eddf 7a50 	vldreq	s15, [pc, #320]	; 8010c38 <tDiodeFilter_tick+0x3d4>
    if (t2 == 0.0f)
 8010afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010afe:	f000 8086 	beq.w	8010c0e <tDiodeFilter_tick+0x3aa>
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8010b02:	eef5 5a40 	vcmp.f32	s11, #0.0
        t3 = 0.000001f;
    }
    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8010b06:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    if (t3 == 0.0f)
 8010b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8010b0e:	ee77 0a20 	vadd.f32	s1, s14, s1
    if (t3 == 0.0f)
 8010b12:	f000 8086 	beq.w	8010c22 <tDiodeFilter_tick+0x3be>
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8010b16:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8010b1a:	ee35 2a82 	vadd.f32	s4, s11, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8010b1e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8010b22:	eef0 2a66 	vmov.f32	s5, s13
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8010b26:	ee37 2a02 	vadd.f32	s4, s14, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8010b2a:	ee36 5a05 	vadd.f32	s10, s12, s10
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8010b2e:	ee77 0aa0 	vadd.f32	s1, s15, s1
 8010b32:	eeb0 1a40 	vmov.f32	s2, s0
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8010b36:	ee35 5a25 	vadd.f32	s10, s10, s11
    Lfloat xx = (in - f->r*y3);
 8010b3a:	ee23 aaa1 	vmul.f32	s20, s7, s3
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8010b3e:	eee5 2a61 	vfms.f32	s5, s10, s3
    Lfloat xx = (in - f->r*y3);
 8010b42:	ee79 3a4a 	vsub.f32	s7, s18, s20
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8010b46:	eef1 2a62 	vneg.f32	s5, s5
 8010b4a:	ee82 5aa5 	vdiv.f32	s10, s5, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8010b4e:	eef0 2a64 	vmov.f32	s5, s9
 8010b52:	eee2 2a45 	vfms.f32	s5, s4, s10
 8010b56:	eee5 2aa1 	vfma.f32	s5, s11, s3
 8010b5a:	eef1 2a62 	vneg.f32	s5, s5
 8010b5e:	ee82 2a87 	vdiv.f32	s4, s5, s14
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8010b62:	eea0 1ac2 	vfms.f32	s2, s1, s4
 8010b66:	eea7 1a05 	vfma.f32	s2, s14, s10
 8010b6a:	eeb1 1a41 	vneg.f32	s2, s2
 8010b6e:	eec1 2a27 	vdiv.f32	s5, s2, s15
    
    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8010b72:	ee72 2a62 	vsub.f32	s5, s4, s5
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8010b76:	ee35 2a42 	vsub.f32	s4, s10, s4
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010b7a:	ee31 5ac5 	vsub.f32	s10, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8010b7e:	ee62 7aa7 	vmul.f32	s15, s5, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010b82:	ee25 5a25 	vmul.f32	s10, s10, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8010b86:	eef0 2a67 	vmov.f32	s5, s15
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8010b8a:	eee3 7a23 	vfma.f32	s15, s6, s7
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010b8e:	eef0 3a45 	vmov.f32	s7, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8010b92:	eed2 2a07 	vfnms.f32	s5, s4, s14
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8010b96:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010b9a:	eee2 3a47 	vfms.f32	s7, s4, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8010b9e:	ee96 5a61 	vfnma.f32	s10, s12, s3
    
    f->s0 = tanhf(f->s0);
 8010ba2:	eea7 4aa5 	vfma.f32	s8, s15, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8010ba6:	eea2 0aa5 	vfma.f32	s0, s5, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010baa:	eee3 4aa5 	vfma.f32	s9, s7, s11
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8010bae:	eee5 6a25 	vfma.f32	s13, s10, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8010bb2:	eef0 9a40 	vmov.f32	s19, s0
    f->s0 = tanhf(f->s0);
 8010bb6:	eeb0 0a44 	vmov.f32	s0, s8
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010bba:	eef0 8a64 	vmov.f32	s17, s9
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8010bbe:	eeb0 8a66 	vmov.f32	s16, s13
    f->s0 = tanhf(f->s0);
 8010bc2:	f006 fb79 	bl	80172b8 <tanhf>
 8010bc6:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s1 = tanhf(f->s1);
 8010bca:	eeb0 0a69 	vmov.f32	s0, s19
 8010bce:	f006 fb73 	bl	80172b8 <tanhf>
 8010bd2:	eef0 7a40 	vmov.f32	s15, s0
    f->s2 = tanhf(f->s2);
 8010bd6:	eeb0 0a68 	vmov.f32	s0, s17
    f->s1 = tanhf(f->s1);
 8010bda:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->s2 = tanhf(f->s2);
 8010bde:	f006 fb6b 	bl	80172b8 <tanhf>
 8010be2:	eef0 7a40 	vmov.f32	s15, s0
    f->s3 = tanhf(f->s3);
 8010be6:	eeb0 0a48 	vmov.f32	s0, s16
    f->s2 = tanhf(f->s2);
 8010bea:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->s3 = tanhf(f->s3);
 8010bee:	f006 fb63 	bl	80172b8 <tanhf>
 8010bf2:	eef0 7a40 	vmov.f32	s15, s0
    f->zi = in;
 8010bf6:	ed84 9a07 	vstr	s18, [r4, #28]
    return tanhf(y3*f->r);
 8010bfa:	eeb0 0a4a 	vmov.f32	s0, s20
    f->s3 = tanhf(f->s3);
 8010bfe:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
}
 8010c02:	ecbd 8b06 	vpop	{d8-d10}
 8010c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tanhf(y3*f->r);
 8010c0a:	f006 bb55 	b.w	80172b8 <tanhf>
    if (t3 == 0.0f)
 8010c0e:	eef5 5a40 	vcmp.f32	s11, #0.0
 8010c12:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8010c3c <tDiodeFilter_tick+0x3d8>
        t2 = 0.000001f;
 8010c16:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8010c38 <tDiodeFilter_tick+0x3d4>
    if (t3 == 0.0f)
 8010c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1e:	f47f af7a 	bne.w	8010b16 <tDiodeFilter_tick+0x2b2>
 8010c22:	ed9f 2a06 	vldr	s4, [pc, #24]	; 8010c3c <tDiodeFilter_tick+0x3d8>
        t3 = 0.000001f;
 8010c26:	eddf 5a04 	vldr	s11, [pc, #16]	; 8010c38 <tDiodeFilter_tick+0x3d4>
 8010c2a:	e778      	b.n	8010b1e <tDiodeFilter_tick+0x2ba>
 8010c2c:	43d20000 	.word	0x43d20000
 8010c30:	446c4000 	.word	0x446c4000
 8010c34:	42d20000 	.word	0x42d20000
 8010c38:	358637bd 	.word	0x358637bd
 8010c3c:	3f800008 	.word	0x3f800008

08010c40 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
 8010c40:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 8010c42:	6804      	ldr	r4, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010c44:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010c48:	eeb2 5a0e 	vmov.f32	s10, #46	; 0x41700000  15.0
 8010c4c:	ed9f 7aef 	vldr	s14, [pc, #956]	; 801100c <tDiodeFilter_tickEfficient+0x3cc>
 8010c50:	eddf 5aef 	vldr	s11, [pc, #956]	; 8011010 <tDiodeFilter_tickEfficient+0x3d0>
 8010c54:	eeb2 2a0e 	vmov.f32	s4, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8010c58:	ed9f 3aee 	vldr	s6, [pc, #952]	; 8011014 <tDiodeFilter_tickEfficient+0x3d4>
{
 8010c5c:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010c60:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
{
 8010c64:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010c68:	edd4 3a03 	vldr	s7, [r4, #12]
    Lfloat ih = 0.5f * (in + f->zi);
 8010c6c:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010c70:	ee66 7ae3 	vnmul.f32	s15, s13, s7
 8010c74:	edd4 2a08 	vldr	s5, [r4, #32]
    Lfloat ih = 0.5f * (in + f->zi);
 8010c78:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8010c7c:	ed94 4a0c 	vldr	s8, [r4, #48]	; 0x30
 8010c80:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010c84:	ed94 1a02 	vldr	s2, [r4, #8]
 8010c88:	eee6 7a24 	vfma.f32	s15, s12, s9
    return ((a + 105.0f)*a + 945.0f) / output;
 8010c8c:	ed9f 6ae0 	vldr	s12, [pc, #896]	; 8011010 <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010c90:	eddf 4ade 	vldr	s9, [pc, #888]	; 801100c <tDiodeFilter_tickEfficient+0x3cc>
    return ((a + 105.0f)*a + 945.0f) / output;
 8010c94:	eef0 1a46 	vmov.f32	s3, s12
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8010c98:	ed94 9a0a 	vldr	s18, [r4, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
 8010c9c:	eddf 8adc 	vldr	s17, [pc, #880]	; 8011010 <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010ca0:	ee67 7aa2 	vmul.f32	s15, s15, s5
    Lfloat a = x*x;
 8010ca4:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010ca8:	eea7 7a85 	vfma.f32	s14, s15, s10
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8010cac:	ed94 5a09 	vldr	s10, [r4, #36]	; 0x24
    return ((a + 105.0f)*a + 945.0f) / output;
 8010cb0:	ee37 3a83 	vadd.f32	s6, s15, s6
 8010cb4:	eee7 1a83 	vfma.f32	s3, s15, s6
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010cb8:	eee7 5a87 	vfma.f32	s11, s15, s14
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8010cbc:	ee34 7a40 	vsub.f32	s14, s8, s0
 8010cc0:	ee67 7a05 	vmul.f32	s15, s14, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010cc4:	eeb0 7a64 	vmov.f32	s14, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8010cc8:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
    if (testVal!= 0.0f)
 8010ccc:	eef5 5a40 	vcmp.f32	s11, #0.0
    Lfloat a = x*x;
 8010cd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
    if (testVal!= 0.0f)
 8010cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010cd8:	eea7 7a82 	vfma.f32	s14, s15, s4
    return ((a + 105.0f)*a + 945.0f) / output;
 8010cdc:	ed9f 2acd 	vldr	s4, [pc, #820]	; 8011014 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat output = 1.0f;
 8010ce0:	bf08      	it	eq
 8010ce2:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8010ce6:	ee37 2a82 	vadd.f32	s4, s15, s4
 8010cea:	ee81 3aa5 	vdiv.f32	s6, s3, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010cee:	eddf 5ac7 	vldr	s11, [pc, #796]	; 801100c <tDiodeFilter_tickEfficient+0x3cc>
 8010cf2:	eea7 6a87 	vfma.f32	s12, s15, s14
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8010cf6:	ee34 7ac4 	vsub.f32	s14, s9, s8
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010cfa:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8010cfe:	ee27 7a05 	vmul.f32	s14, s14, s10
    if (testVal!= 0.0f)
 8010d02:	eeb5 6a40 	vcmp.f32	s12, #0.0
    Lfloat a = x*x;
 8010d06:	ee27 7a07 	vmul.f32	s14, s14, s14
    if (testVal!= 0.0f)
 8010d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010d0e:	ee23 3a01 	vmul.f32	s6, s6, s2
    Lfloat output = 1.0f;
 8010d12:	bf08      	it	eq
 8010d14:	eeb7 6a00 	vmoveq.f32	s12, #112	; 0x3f800000  1.0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010d18:	ee23 3a22 	vmul.f32	s6, s6, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8010d1c:	eddf 2abc 	vldr	s5, [pc, #752]	; 8011010 <tDiodeFilter_tickEfficient+0x3d0>
 8010d20:	eef0 0a62 	vmov.f32	s1, s5
 8010d24:	eee7 0a82 	vfma.f32	s1, s15, s4
 8010d28:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8011014 <tDiodeFilter_tickEfficient+0x3d4>
 8010d2c:	ee37 2a02 	vadd.f32	s4, s14, s4
 8010d30:	eec0 7a86 	vdiv.f32	s15, s1, s12
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010d34:	eeb0 6a65 	vmov.f32	s12, s11
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8010d38:	ee76 5ae4 	vsub.f32	s11, s13, s9
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010d3c:	eea7 6a21 	vfma.f32	s12, s14, s3
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8010d40:	ee65 5a85 	vmul.f32	s11, s11, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010d44:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
    Lfloat a = x*x;
 8010d48:	ee65 5aa5 	vmul.f32	s11, s11, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010d4c:	eee7 2a06 	vfma.f32	s5, s14, s12
    return ((a + 105.0f)*a + 945.0f) / output;
 8010d50:	ed9f 6aaf 	vldr	s12, [pc, #700]	; 8011010 <tDiodeFilter_tickEfficient+0x3d0>
 8010d54:	eef0 0a46 	vmov.f32	s1, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8010d58:	ee67 7a81 	vmul.f32	s15, s15, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8010d5c:	eee7 0a02 	vfma.f32	s1, s14, s4
    if (testVal!= 0.0f)
 8010d60:	eef5 2a40 	vcmp.f32	s5, #0.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8010d64:	ee67 7a85 	vmul.f32	s15, s15, s10
    if (testVal!= 0.0f)
 8010d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat output = 1.0f;
 8010d6c:	bf08      	it	eq
 8010d6e:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8010d72:	ee80 7aa2 	vdiv.f32	s14, s1, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010d76:	eddf 2aa5 	vldr	s5, [pc, #660]	; 801100c <tDiodeFilter_tickEfficient+0x3cc>
    return ((a + 105.0f)*a + 945.0f) / output;
 8010d7a:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8011010 <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010d7e:	eee5 2aa1 	vfma.f32	s5, s11, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 8010d82:	eeb0 2a60 	vmov.f32	s4, s1

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010d86:	ee74 1a24 	vadd.f32	s3, s8, s9
 8010d8a:	ee71 1aa6 	vadd.f32	s3, s3, s13
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010d8e:	eea5 6aa2 	vfma.f32	s12, s11, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8010d92:	eddf 2aa0 	vldr	s5, [pc, #640]	; 8011014 <tDiodeFilter_tickEfficient+0x3d4>
 8010d96:	ee75 2aa2 	vadd.f32	s5, s11, s5
 8010d9a:	eea5 2aa2 	vfma.f32	s4, s11, s5
    if (testVal!= 0.0f)
 8010d9e:	eeb5 6a40 	vcmp.f32	s12, #0.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8010da2:	ee27 7a01 	vmul.f32	s14, s14, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010da6:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    if (testVal!= 0.0f)
 8010daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8010dae:	ee27 7a05 	vmul.f32	s14, s14, s10
    Lfloat output = 1.0f;
 8010db2:	bf08      	it	eq
 8010db4:	eeb7 6a00 	vmoveq.f32	s12, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8010db8:	eec2 5a06 	vdiv.f32	s11, s4, s12
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8010dbc:	ee26 6a89 	vmul.f32	s12, s13, s18
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010dc0:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
    Lfloat a = x*x;
 8010dc4:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8010dc8:	ee65 5a81 	vmul.f32	s11, s11, s2
 8010dcc:	ee65 5a85 	vmul.f32	s11, s11, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010dd0:	ed9f 5a8e 	vldr	s10, [pc, #568]	; 801100c <tDiodeFilter_tickEfficient+0x3cc>
 8010dd4:	eea6 5a22 	vfma.f32	s10, s12, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010dd8:	ee76 2aa4 	vadd.f32	s5, s13, s9
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010ddc:	eee6 0a05 	vfma.f32	s1, s12, s10
    return ((a + 105.0f)*a + 945.0f) / output;
 8010de0:	ed9f 5a8c 	vldr	s10, [pc, #560]	; 8011014 <tDiodeFilter_tickEfficient+0x3d4>
 8010de4:	ee36 5a05 	vadd.f32	s10, s12, s10
 8010de8:	eee6 8a05 	vfma.f32	s17, s12, s10
    if (testVal!= 0.0f)
 8010dec:	eef5 0a40 	vcmp.f32	s1, #0.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010df0:	ee34 5a00 	vadd.f32	s10, s8, s0
    if (testVal!= 0.0f)
 8010df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010df8:	ee35 5a24 	vadd.f32	s10, s10, s9
    Lfloat output = 1.0f;
 8010dfc:	bf08      	it	eq
 8010dfe:	eef7 0a00 	vmoveq.f32	s1, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010e02:	ee35 5a26 	vadd.f32	s10, s10, s13
    return ((a + 105.0f)*a + 945.0f) / output;
 8010e06:	ee88 6aa0 	vdiv.f32	s12, s17, s1
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010e0a:	eea8 5a03 	vfma.f32	s10, s16, s6
 8010e0e:	eee5 1a27 	vfma.f32	s3, s10, s15
 8010e12:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8010e16:	ee26 6a01 	vmul.f32	s12, s12, s2
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010e1a:	ee36 1aa6 	vadd.f32	s2, s13, s13
 8010e1e:	eee1 2a87 	vfma.f32	s5, s3, s14
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8010e22:	ee26 6a09 	vmul.f32	s12, s12, s18
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010e26:	eef0 1a41 	vmov.f32	s3, s2
 8010e2a:	eef0 0a41 	vmov.f32	s1, s2
 8010e2e:	eee4 1a82 	vfma.f32	s3, s9, s4
 8010e32:	eee1 2aa7 	vfma.f32	s5, s3, s15
 8010e36:	ee66 1a85 	vmul.f32	s3, s13, s10
 8010e3a:	eee1 0aa7 	vfma.f32	s1, s3, s15
 8010e3e:	eef0 1a66 	vmov.f32	s3, s13
 8010e42:	eee2 1aa5 	vfma.f32	s3, s5, s11
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8010e46:	eef1 2a00 	vmov.f32	s5, #16	; 0x40800000  4.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010e4a:	eee1 1a27 	vfma.f32	s3, s2, s15
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8010e4e:	eeb0 1a46 	vmov.f32	s2, s12
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010e52:	eee0 1a87 	vfma.f32	s3, s1, s14
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8010e56:	eef0 0a62 	vmov.f32	s1, s5
 8010e5a:	eee6 0a02 	vfma.f32	s1, s12, s4
 8010e5e:	eea0 1aa7 	vfma.f32	s2, s1, s15
 8010e62:	eef0 0a46 	vmov.f32	s1, s12
 8010e66:	eee3 0a83 	vfma.f32	s1, s7, s6
 8010e6a:	ee70 0aa2 	vadd.f32	s1, s1, s5
 8010e6e:	eef0 2a46 	vmov.f32	s5, s12
 8010e72:	eee0 2aa7 	vfma.f32	s5, s1, s15
 8010e76:	eef0 0a42 	vmov.f32	s1, s4
 8010e7a:	eee6 0a02 	vfma.f32	s1, s12, s4
 8010e7e:	ee72 2a85 	vadd.f32	s5, s5, s10
 8010e82:	eea6 5a05 	vfma.f32	s10, s12, s10
 8010e86:	eea2 1a87 	vfma.f32	s2, s5, s14
 8010e8a:	eef0 2a46 	vmov.f32	s5, s12
 8010e8e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8010e92:	ee31 1a02 	vadd.f32	s2, s2, s4
 8010e96:	eea6 5a02 	vfma.f32	s10, s12, s4
 8010e9a:	eee1 2a25 	vfma.f32	s5, s2, s11
 8010e9e:	ee35 5a02 	vadd.f32	s10, s10, s4
 8010ea2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8010ea6:	eee0 2aa7 	vfma.f32	s5, s1, s15
 8010eaa:	eee5 2a07 	vfma.f32	s5, s10, s14
 8010eae:	ee32 5a82 	vadd.f32	s10, s5, s4
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
 8010eb2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 8010eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8010eba:	eef5 7a40 	vcmp.f32	s15, #0.0
        tempy3denom = 0.000001f;
 8010ebe:	bf08      	it	eq
 8010ec0:	ed9f 5a55 	vldreq	s10, [pc, #340]	; 8011018 <tDiodeFilter_tickEfficient+0x3d8>
    if (t1 == 0.0f)
 8010ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 8010ec8:	eeb5 7a40 	vcmp.f32	s14, #0.0
    y3 = y3 / tempy3denom;
 8010ecc:	eec1 8a85 	vdiv.f32	s17, s3, s10
        t1 = 0.000001f;
 8010ed0:	bf08      	it	eq
 8010ed2:	eddf 7a51 	vldreq	s15, [pc, #324]	; 8011018 <tDiodeFilter_tickEfficient+0x3d8>
    if (t2 == 0.0f)
 8010ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eda:	f000 8088 	beq.w	8010fee <tDiodeFilter_tickEfficient+0x3ae>
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8010ede:	eef5 5a40 	vcmp.f32	s11, #0.0
    }

    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8010ee2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    if (t3 == 0.0f)
 8010ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8010eea:	ee37 1a01 	vadd.f32	s2, s14, s2
    if (t3 == 0.0f)
 8010eee:	f000 8088 	beq.w	8011002 <tDiodeFilter_tickEfficient+0x3c2>
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8010ef2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8010ef6:	ee75 2aa2 	vadd.f32	s5, s11, s5
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8010efa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    Lfloat xx = (in - f->r*y3);
 8010efe:	eef0 0a48 	vmov.f32	s1, s16
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8010f02:	ee77 2a22 	vadd.f32	s5, s14, s5
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8010f06:	ee36 5a05 	vadd.f32	s10, s12, s10
    Lfloat xx = (in - f->r*y3);
 8010f0a:	eee3 0ae8 	vfms.f32	s1, s7, s17
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8010f0e:	eef0 3a66 	vmov.f32	s7, s13
 8010f12:	ee35 5a25 	vadd.f32	s10, s10, s11
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8010f16:	ee37 1a81 	vadd.f32	s2, s15, s2
 8010f1a:	eeb0 2a44 	vmov.f32	s4, s8
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8010f1e:	eee5 3a68 	vfms.f32	s7, s10, s17

    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8010f22:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8010f26:	eef1 3a63 	vneg.f32	s7, s7
 8010f2a:	ee83 5aa5 	vdiv.f32	s10, s7, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8010f2e:	eef0 3a64 	vmov.f32	s7, s9
 8010f32:	eee2 3ac5 	vfms.f32	s7, s5, s10
 8010f36:	eee5 3aa8 	vfma.f32	s7, s11, s17
 8010f3a:	eef1 3a63 	vneg.f32	s7, s7
 8010f3e:	eec3 2a87 	vdiv.f32	s5, s7, s14
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8010f42:	eea1 2a62 	vfms.f32	s4, s2, s5
 8010f46:	eea7 2a05 	vfma.f32	s4, s14, s10
 8010f4a:	eeb1 2a42 	vneg.f32	s4, s4
 8010f4e:	eec2 3a27 	vdiv.f32	s7, s4, s15
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8010f52:	ee72 3ae3 	vsub.f32	s7, s5, s7
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8010f56:	ee75 2a62 	vsub.f32	s5, s10, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010f5a:	ee38 5ac5 	vsub.f32	s10, s17, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8010f5e:	ee63 7aa7 	vmul.f32	s15, s7, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010f62:	ee25 5a25 	vmul.f32	s10, s10, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8010f66:	eef0 3a67 	vmov.f32	s7, s15
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8010f6a:	eed2 7a87 	vfnms.f32	s15, s5, s14
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010f6e:	eef0 5a45 	vmov.f32	s11, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8010f72:	eee3 3a20 	vfma.f32	s7, s6, s1
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8010f76:	ee96 5a68 	vfnma.f32	s10, s12, s17
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010f7a:	eee2 5ac7 	vfms.f32	s11, s5, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8010f7e:	eea7 4aa1 	vfma.f32	s8, s15, s3
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8010f82:	eea3 0aa1 	vfma.f32	s0, s7, s3
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8010f86:	eee5 6a21 	vfma.f32	s13, s10, s3
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010f8a:	eee5 4aa1 	vfma.f32	s9, s11, s3
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8010f8e:	ed84 4a0c 	vstr	s8, [r4, #48]	; 0x30
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8010f92:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8010f96:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010f9a:	edc4 4a0d 	vstr	s9, [r4, #52]	; 0x34
    f->s0 = fast_tanh4(f->s0);
 8010f9e:	f000 fd23 	bl	80119e8 <fast_tanh4>
 8010fa2:	eef0 7a40 	vmov.f32	s15, s0
    f->s1 = fast_tanh4(f->s1);
 8010fa6:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    f->s0 = fast_tanh4(f->s0);
 8010faa:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
    f->s1 = fast_tanh4(f->s1);
 8010fae:	f000 fd1b 	bl	80119e8 <fast_tanh4>
 8010fb2:	eef0 7a40 	vmov.f32	s15, s0
    f->s2 = fast_tanh4(f->s2);
 8010fb6:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
    f->s1 = fast_tanh4(f->s1);
 8010fba:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->s2 = fast_tanh4(f->s2);
 8010fbe:	f000 fd13 	bl	80119e8 <fast_tanh4>
 8010fc2:	eef0 7a40 	vmov.f32	s15, s0
    f->s3 = fast_tanh4(f->s3);
 8010fc6:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
    f->s2 = fast_tanh4(f->s2);
 8010fca:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->s3 = fast_tanh4(f->s3);
 8010fce:	f000 fd0b 	bl	80119e8 <fast_tanh4>
    f->zi = in;
    return fast_tanh4(y3*f->r);
 8010fd2:	edd4 7a03 	vldr	s15, [r4, #12]
    f->s3 = fast_tanh4(f->s3);
 8010fd6:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->zi = in;
 8010fda:	ed84 8a07 	vstr	s16, [r4, #28]
    return fast_tanh4(y3*f->r);
 8010fde:	ee28 0aa7 	vmul.f32	s0, s17, s15
}
 8010fe2:	ecbd 8b04 	vpop	{d8-d9}
 8010fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return fast_tanh4(y3*f->r);
 8010fea:	f000 bcfd 	b.w	80119e8 <fast_tanh4>
    if (t3 == 0.0f)
 8010fee:	eef5 5a40 	vcmp.f32	s11, #0.0
 8010ff2:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 801101c <tDiodeFilter_tickEfficient+0x3dc>
        t2 = 0.000001f;
 8010ff6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8011018 <tDiodeFilter_tickEfficient+0x3d8>
    if (t3 == 0.0f)
 8010ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ffe:	f47f af78 	bne.w	8010ef2 <tDiodeFilter_tickEfficient+0x2b2>
 8011002:	eddf 2a06 	vldr	s5, [pc, #24]	; 801101c <tDiodeFilter_tickEfficient+0x3dc>
        t3 = 0.000001f;
 8011006:	eddf 5a04 	vldr	s11, [pc, #16]	; 8011018 <tDiodeFilter_tickEfficient+0x3d8>
 801100a:	e776      	b.n	8010efa <tDiodeFilter_tickEfficient+0x2ba>
 801100c:	43d20000 	.word	0x43d20000
 8011010:	446c4000 	.word	0x446c4000
 8011014:	42d20000 	.word	0x42d20000
 8011018:	358637bd 	.word	0x358637bd
 801101c:	3f800008 	.word	0x3f800008

08011020 <tDiodeFilter_setFreqFast>:

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
	f->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
 8011020:	eddf 7a14 	vldr	s15, [pc, #80]	; 8011074 <tDiodeFilter_setFreqFast+0x54>
 8011024:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tDiodeFilter* f = *vf;
 8011028:	6801      	ldr	r1, [r0, #0]
    if (intVer < 0)
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 801102a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
 801102e:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011032:	6c0a      	ldr	r2, [r1, #64]	; 0x40
	f->cutoffMIDI = cutoff;
 8011034:	ed81 0a11 	vstr	s0, [r1, #68]	; 0x44
    int32_t intVer = (int32_t)cutoff;
 8011038:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 801103c:	ee16 3a90 	vmov	r3, s13
 8011040:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011044:	4563      	cmp	r3, ip
 8011046:	bfa8      	it	ge
 8011048:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801104a:	ee06 3a90 	vmov	s13, r3
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 801104e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011052:	eef8 5ae6 	vcvt.f32.s32	s11, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011056:	ed93 6a01 	vldr	s12, [r3, #4]
 801105a:	edd3 6a00 	vldr	s13, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801105e:	ee77 7ae5 	vsub.f32	s15, s15, s11
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011062:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011066:	ee67 7a86 	vmul.f32	s15, s15, s12
 801106a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801106e:	edc1 7a02 	vstr	s15, [r1, #8]
}
 8011072:	4770      	bx	lr
 8011074:	41f4898d 	.word	0x41f4898d

08011078 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 8011078:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801107c:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8011080:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8011084:	eef0 0a67 	vmov.f32	s1, s15
{
 8011088:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 801108a:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 801108c:	eee0 0a07 	vfma.f32	s1, s0, s14
 8011090:	eeb0 0a67 	vmov.f32	s0, s15
 8011094:	f000 fc76 	bl	8011984 <LEAF_clip>
 8011098:	ed84 0a03 	vstr	s0, [r4, #12]
}
 801109c:	bd10      	pop	{r4, pc}
 801109e:	bf00      	nop

080110a0 <tDiodeFilter_setSampleRate>:

void    tDiodeFilter_setSampleRate(tDiodeFilter* const vf, Lfloat sr)
{
    _tDiodeFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
 80110a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 80110a4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80110c8 <tDiodeFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 80110a8:	4908      	ldr	r1, [pc, #32]	; (80110cc <tDiodeFilter_setSampleRate+0x2c>)
 80110aa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80110ae:	4b08      	ldr	r3, [pc, #32]	; (80110d0 <tDiodeFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
 80110b0:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tDiodeFilter* f = *vf;
 80110b4:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
 80110b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ba:	bfd8      	it	le
 80110bc:	460b      	movle	r3, r1
 80110be:	6413      	str	r3, [r2, #64]	; 0x40
    f->invSampleRate = 1.0f/sr;
 80110c0:	edc2 7a0f 	vstr	s15, [r2, #60]	; 0x3c
    }
}
 80110c4:	4770      	bx	lr
 80110c6:	bf00      	nop
 80110c8:	47afc800 	.word	0x47afc800
 80110cc:	08019d08 	.word	0x08019d08
 80110d0:	0801dd08 	.word	0x0801dd08

080110d4 <tLadderFilter_initToPool>:
{
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
 80110d4:	b570      	push	{r4, r5, r6, lr}
 80110d6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80110da:	680d      	ldr	r5, [r1, #0]
{
 80110dc:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 80110de:	2040      	movs	r0, #64	; 0x40
{
 80110e0:	eeb0 8a40 	vmov.f32	s16, s0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 80110e4:	4629      	mov	r1, r5
{
 80110e6:	eef0 8a60 	vmov.f32	s17, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 80110ea:	f000 ff87 	bl	8011ffc <mpool_alloc>
 80110ee:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 80110f0:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->cutoffMIDI = ftom(cutoff);
 80110f2:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 80110f6:	686d      	ldr	r5, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 80110f8:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
 80110fa:	686b      	ldr	r3, [r5, #4]
    f->cutoff = cutoff;
 80110fc:	ed80 8a01 	vstr	s16, [r0, #4]
    f->invSampleRate = leaf->invSampleRate;
 8011100:	6083      	str	r3, [r0, #8]
    f->cutoffMIDI = ftom(cutoff);
 8011102:	f000 fee5 	bl	8011ed0 <ftom>
    f->oversampling = 1;
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 8011106:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8011178 <tLadderFilter_initToPool+0xa4>
    f->cutoffMIDI = ftom(cutoff);
 801110a:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->oversampling = 1;
 801110e:	2301      	movs	r3, #1
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 8011110:	ee28 0a07 	vmul.f32	s0, s16, s14
 8011114:	edd4 7a02 	vldr	s15, [r4, #8]
    f->oversampling = 1;
 8011118:	60e3      	str	r3, [r4, #12]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 801111a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801111e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8011122:	f006 f931 	bl	8017388 <tan>
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 8011126:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 801112a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 801112e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
 8011132:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
 8011136:	4911      	ldr	r1, [pc, #68]	; (801117c <tLadderFilter_initToPool+0xa8>)
    f->fb = (resonance * 8.0f);
 8011138:	ee68 8aa6 	vmul.f32	s17, s17, s13
    f->a = 2.0f;
 801113c:	61e3      	str	r3, [r4, #28]
    f->c2 = 2.0f * f->c;
 801113e:	ee30 7a00 	vadd.f32	s14, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
 8011142:	4b0f      	ldr	r3, [pc, #60]	; (8011180 <tLadderFilter_initToPool+0xac>)
    f->d = 1.0f;
 8011144:	6262      	str	r2, [r4, #36]	; 0x24
    f->b[0] = 0.04f;
 8011146:	62a3      	str	r3, [r4, #40]	; 0x28
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 8011148:	ed84 0a04 	vstr	s0, [r4, #16]
    f->s = 0.1f;
 801114c:	6221      	str	r1, [r4, #32]
    f->c2 = 2.0f * f->c;
 801114e:	ed84 7a06 	vstr	s14, [r4, #24]
    f->fb = (resonance * 8.0f);
 8011152:	edc4 8a05 	vstr	s17, [r4, #20]
    if (leaf->sampleRate > 90000)
 8011156:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8011184 <tLadderFilter_initToPool+0xb0>
 801115a:	ed95 7a00 	vldr	s14, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 801115e:	4a0a      	ldr	r2, [pc, #40]	; (8011188 <tLadderFilter_initToPool+0xb4>)
 8011160:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011164:	4b09      	ldr	r3, [pc, #36]	; (801118c <tLadderFilter_initToPool+0xb8>)
 8011166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801116a:	bfd8      	it	le
 801116c:	4613      	movle	r3, r2
 801116e:	63a3      	str	r3, [r4, #56]	; 0x38
    }
}
 8011170:	ecbd 8b02 	vpop	{d8}
 8011174:	bd70      	pop	{r4, r5, r6, pc}
 8011176:	bf00      	nop
 8011178:	40490fdb 	.word	0x40490fdb
 801117c:	3dcccccd 	.word	0x3dcccccd
 8011180:	3d23d70a 	.word	0x3d23d70a
 8011184:	47afc800 	.word	0x47afc800
 8011188:	08019d08 	.word	0x08019d08
 801118c:	0801dd08 	.word	0x0801dd08

08011190 <tLadderFilter_init>:
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
 8011190:	3118      	adds	r1, #24
 8011192:	f7ff bf9f 	b.w	80110d4 <tLadderFilter_initToPool>
 8011196:	bf00      	nop

08011198 <smoothclip>:
//	#endif
}

Lfloat smoothclip (Lfloat x, const Lfloat a, const Lfloat b) // assuming symmetrical clipping
{
    Lfloat  x1 = smoothABS (x-a, 0.01f);
 8011198:	ee30 7a60 	vsub.f32	s14, s0, s1
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 801119c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8011240 <smoothclip+0xa8>
{
 80111a0:	b500      	push	{lr}
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80111a2:	eee7 7a07 	vfma.f32	s15, s14, s14
{
 80111a6:	ed2d 8b02 	vpush	{d8}
 80111aa:	eeb0 8a40 	vmov.f32	s16, s0
 80111ae:	b083      	sub	sp, #12
 80111b0:	eef5 7a40 	vcmp.f32	s15, #0.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80111b4:	eeb0 0a67 	vmov.f32	s0, s15
 80111b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111bc:	d425      	bmi.n	801120a <smoothclip+0x72>
 80111be:	eef1 7ac0 	vsqrt.f32	s15, s0
 80111c2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8011240 <smoothclip+0xa8>
 80111c6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8011244 <smoothclip+0xac>
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 80111ca:	ee38 8a41 	vsub.f32	s16, s16, s2
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80111ce:	eea8 0a08 	vfma.f32	s0, s16, s16
 80111d2:	ee37 8ac7 	vsub.f32	s16, s15, s14
 80111d6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80111da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111de:	d421      	bmi.n	8011224 <smoothclip+0x8c>
 80111e0:	eef1 7ac0 	vsqrt.f32	s15, s0
 80111e4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8011244 <smoothclip+0xac>
    x = x1 + (a+b);
 80111e8:	ee70 0a81 	vadd.f32	s1, s1, s2
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 80111ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
    x = x - x2;
    x = x * 0.5;
 80111f0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    x = x1 + (a+b);
 80111f4:	ee70 0a88 	vadd.f32	s1, s1, s16
    x = x - x2;
 80111f8:	ee70 0ae7 	vsub.f32	s1, s1, s15
    return (x);
}
 80111fc:	ee20 0a80 	vmul.f32	s0, s1, s0
 8011200:	b003      	add	sp, #12
 8011202:	ecbd 8b02 	vpop	{d8}
 8011206:	f85d fb04 	ldr.w	pc, [sp], #4
 801120a:	ed8d 1a01 	vstr	s2, [sp, #4]
 801120e:	edcd 0a00 	vstr	s1, [sp]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8011212:	f005 fff9 	bl	8017208 <sqrtf>
 8011216:	ed9d 1a01 	vldr	s2, [sp, #4]
 801121a:	eef0 7a40 	vmov.f32	s15, s0
 801121e:	eddd 0a00 	vldr	s1, [sp]
 8011222:	e7ce      	b.n	80111c2 <smoothclip+0x2a>
 8011224:	ed8d 1a01 	vstr	s2, [sp, #4]
 8011228:	edcd 0a00 	vstr	s1, [sp]
 801122c:	f005 ffec 	bl	8017208 <sqrtf>
 8011230:	ed9d 1a01 	vldr	s2, [sp, #4]
 8011234:	eef0 7a40 	vmov.f32	s15, s0
 8011238:	eddd 0a00 	vldr	s1, [sp]
 801123c:	e7d2      	b.n	80111e4 <smoothclip+0x4c>
 801123e:	bf00      	nop
 8011240:	3c23d70a 	.word	0x3c23d70a
 8011244:	3dcccccd 	.word	0x3dcccccd

08011248 <tLadderFilter_tick>:
{
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
 8011248:	b570      	push	{r4, r5, r6, lr}
    _tLadderFilter* f = *vf;
 801124a:	6804      	ldr	r4, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
 801124c:	eddf 7a9f 	vldr	s15, [pc, #636]	; 80114cc <tLadderFilter_tick+0x284>
{
 8011250:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 8011254:	68e6      	ldr	r6, [r4, #12]
    in += 0.015f;
 8011256:	ee30 6a27 	vadd.f32	s12, s0, s15
{
 801125a:	b088      	sub	sp, #32
    for (int i = 0; i < f->oversampling; i++) {
 801125c:	2e00      	cmp	r6, #0
 801125e:	f340 812f 	ble.w	80114c0 <tLadderFilter_tick+0x278>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 8011262:	ed94 ca04 	vldr	s24, [r4, #16]
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8011266:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 801126a:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    for (int i = 0; i < f->oversampling; i++) {
 801126e:	2500      	movs	r5, #0
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
        
        Lfloat f3 = f->c       * t2*g3;
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
 8011270:	ee2c 7a0c 	vmul.f32	s14, s24, s24
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8011274:	edd4 7a08 	vldr	s15, [r4, #32]
 8011278:	ee7a fa88 	vadd.f32	s31, s21, s16
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 801127c:	ed94 fa0a 	vldr	s30, [r4, #40]	; 0x28
 8011280:	ed94 aa07 	vldr	s20, [r4, #28]
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
 8011284:	ed8d 7a05 	vstr	s14, [sp, #20]
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 8011288:	ee2c 7a07 	vmul.f32	s14, s24, s14
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801128c:	ee6f faa7 	vmul.f32	s31, s31, s15
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 8011290:	edd4 ea0b 	vldr	s29, [r4, #44]	; 0x2c
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 8011294:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
        Lfloat f0 = f->c*f->c*f->c*f->c *    g0 * t0*g1 * t1*g2 * t2*g3;
 8011298:	ee6c 7a07 	vmul.f32	s15, s24, s14
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 801129c:	edd4 da0d 	vldr	s27, [r4, #52]	; 0x34
        f->b[2] += f->c2 * (y1 - y2);
        f->b[3] += f->c2 * (y2 - y3);
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 80112a0:	ed94 ba05 	vldr	s22, [r4, #20]
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 80112a4:	ed8d 7a06 	vstr	s14, [sp, #24]
        Lfloat f0 = f->c*f->c*f->c*f->c *    g0 * t0*g1 * t1*g2 * t2*g3;
 80112a8:	edcd 7a07 	vstr	s15, [sp, #28]
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 80112ac:	ee3a 4a2d 	vadd.f32	s8, s20, s27
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
 80112b0:	ed9d 7a05 	vldr	s14, [sp, #20]
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80112b4:	eef0 0a6a 	vmov.f32	s1, s21
        Lfloat estimate =
 80112b8:	ed8d 6a01 	vstr	s12, [sp, #4]
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 80112bc:	ee7a 4a2e 	vadd.f32	s9, s20, s29
    for (int i = 0; i < f->oversampling; i++) {
 80112c0:	3501      	adds	r5, #1
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 80112c2:	ee3a 5a0e 	vadd.f32	s10, s20, s28
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80112c6:	eee4 0a04 	vfma.f32	s1, s8, s8
 80112ca:	ee64 2a2f 	vmul.f32	s5, s8, s31
 80112ce:	eeb0 1a6a 	vmov.f32	s2, s21
 80112d2:	eef0 1a6a 	vmov.f32	s3, s21
 80112d6:	ee62 2a84 	vmul.f32	s5, s5, s8
 80112da:	eea4 1aa4 	vfma.f32	s2, s9, s9
 80112de:	eee5 1a05 	vfma.f32	s3, s10, s10
 80112e2:	ee24 3aaf 	vmul.f32	s6, s9, s31
 80112e6:	ee65 3a2f 	vmul.f32	s7, s10, s31
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 80112ea:	ee7f 7a0a 	vadd.f32	s15, s30, s20
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80112ee:	ee23 3a24 	vmul.f32	s6, s6, s9
 80112f2:	ee23 5a85 	vmul.f32	s10, s7, s10
 80112f6:	eec2 4aa0 	vdiv.f32	s9, s5, s1
 80112fa:	ee83 da01 	vdiv.f32	s26, s6, s2
 80112fe:	eec5 ca21 	vdiv.f32	s25, s10, s3
 8011302:	eeb0 2a6a 	vmov.f32	s4, s21
 8011306:	ee27 4aaf 	vmul.f32	s8, s15, s31
 801130a:	ee78 4a64 	vsub.f32	s9, s16, s9
 801130e:	eea7 2aa7 	vfma.f32	s4, s15, s15
 8011312:	ee64 7a27 	vmul.f32	s15, s8, s15
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 8011316:	ee64 1a8c 	vmul.f32	s3, s9, s24
 801131a:	edcd 4a04 	vstr	s9, [sp, #16]
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801131e:	ee38 da4d 	vsub.f32	s26, s16, s26
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8011322:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8011326:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801132a:	ee87 5a82 	vdiv.f32	s10, s15, s4
 801132e:	ee78 ca6c 	vsub.f32	s25, s16, s25
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 8011332:	ee71 7a88 	vadd.f32	s15, s3, s16
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 8011336:	ee6d 8a0c 	vmul.f32	s17, s26, s24
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 801133a:	ee2c 4a8c 	vmul.f32	s8, s25, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 801133e:	eec8 ba27 	vdiv.f32	s23, s16, s15
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 8011342:	ee38 2a88 	vadd.f32	s4, s17, s16
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 8011346:	ee74 2a08 	vadd.f32	s5, s8, s16
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
 801134a:	ee81 3aa7 	vdiv.f32	s6, s3, s15
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 801134e:	ee88 9a02 	vdiv.f32	s18, s16, s4
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
 8011352:	eec8 1a82 	vdiv.f32	s3, s17, s4
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 8011356:	eec8 8a22 	vdiv.f32	s17, s16, s5
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801135a:	ee38 5a45 	vsub.f32	s10, s16, s10
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
 801135e:	ee84 2a22 	vdiv.f32	s4, s8, s5
        Lfloat f0 = f->c*f->c*f->c*f->c *    g0 * t0*g1 * t1*g2 * t2*g3;
 8011362:	ed8d 5a02 	vstr	s10, [sp, #8]
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 8011366:	ee25 0a0c 	vmul.f32	s0, s10, s24
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
 801136a:	ee6d 3a07 	vmul.f32	s7, s26, s14
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 801136e:	ee70 7a08 	vadd.f32	s15, s0, s16
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
 8011372:	ee63 3aa8 	vmul.f32	s7, s7, s17
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 8011376:	eec8 9a27 	vdiv.f32	s19, s16, s15
        Lfloat z0 = f->c*t0 / (1.0f + f->c*t0);
 801137a:	eec0 2a27 	vdiv.f32	s5, s0, s15
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 801137e:	eddd 7a06 	vldr	s15, [sp, #24]
        Lfloat f3 = f->c       * t2*g3;
 8011382:	ee24 0a2b 	vmul.f32	s0, s8, s23
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 8011386:	ee65 7a27 	vmul.f32	s15, s10, s15
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
 801138a:	ee63 3aac 	vmul.f32	s7, s7, s25
        f3 * g2 * f->b[2] +
 801138e:	ee20 0a28 	vmul.f32	s0, s0, s17
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 8011392:	ee67 7a89 	vmul.f32	s15, s15, s18
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
 8011396:	ee63 3aab 	vmul.f32	s7, s7, s23
        f3 * g2 * f->b[2] +
 801139a:	ee20 0a0e 	vmul.f32	s0, s0, s28
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 801139e:	ee67 7a8d 	vmul.f32	s15, s15, s26
        f2 * g1 * f->b[1] +
 80113a2:	ee69 3a23 	vmul.f32	s7, s18, s7
        g3 * f->b[3] +
 80113a6:	eeab 0aad 	vfma.f32	s0, s23, s27
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 80113aa:	ee67 7aa8 	vmul.f32	s15, s15, s17
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 80113ae:	ee62 2a8b 	vmul.f32	s5, s5, s22
 80113b2:	eeb0 4a48 	vmov.f32	s8, s16
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 80113b6:	ee67 7aac 	vmul.f32	s15, s15, s25
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 80113ba:	ee62 2aa1 	vmul.f32	s5, s5, s3
        f3 * g2 * f->b[2] +
 80113be:	eea3 0aae 	vfma.f32	s0, s7, s29
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 80113c2:	ee67 7aab 	vmul.f32	s15, s15, s23
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 80113c6:	ee62 2a82 	vmul.f32	s5, s5, s4
        f1 * g0 * f->b[0] +
 80113ca:	ee69 7aa7 	vmul.f32	s15, s19, s15
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 80113ce:	eea2 4a83 	vfma.f32	s8, s5, s6
        f2 * g1 * f->b[1] +
 80113d2:	eea7 0a8f 	vfma.f32	s0, s15, s30
        Lfloat f0 = f->c*f->c*f->c*f->c *    g0 * t0*g1 * t1*g2 * t2*g3;
 80113d6:	eddd 7a07 	vldr	s15, [sp, #28]
 80113da:	ee69 7aa7 	vmul.f32	s15, s19, s15
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 80113de:	ed8d 4a03 	vstr	s8, [sp, #12]
        Lfloat f0 = f->c*f->c*f->c*f->c *    g0 * t0*g1 * t1*g2 * t2*g3;
 80113e2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80113e6:	ee67 7a89 	vmul.f32	s15, s15, s18
 80113ea:	ee67 7a8d 	vmul.f32	s15, s15, s26
 80113ee:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80113f2:	ee67 7aac 	vmul.f32	s15, s15, s25
 80113f6:	ee67 7aab 	vmul.f32	s15, s15, s23
        Lfloat estimate =
 80113fa:	eea6 0a27 	vfma.f32	s0, s12, s15
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 80113fe:	ee20 0a0b 	vmul.f32	s0, s0, s22
 8011402:	f7ff fec9 	bl	8011198 <smoothclip>
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8011406:	ed9d 4a03 	vldr	s8, [sp, #12]
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 801140a:	ed9d 5a02 	vldr	s10, [sp, #8]
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 801140e:	ee29 9a0d 	vmul.f32	s18, s18, s26
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8011412:	eec8 3a04 	vdiv.f32	s7, s16, s8
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8011416:	ed9d 6a01 	vldr	s12, [sp, #4]
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 801141a:	eddd 4a04 	vldr	s9, [sp, #16]
    for (int i = 0; i < f->oversampling; i++) {
 801141e:	42b5      	cmp	r5, r6
        f->b[0] += f->c2 * (xx - y0);
 8011420:	edd4 7a06 	vldr	s15, [r4, #24]
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8011424:	ee69 9a85 	vmul.f32	s19, s19, s10
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8011428:	eeb0 5a46 	vmov.f32	s10, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 801142c:	ee6b baa4 	vmul.f32	s23, s23, s9
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8011430:	eef0 4a4f 	vmov.f32	s9, s30
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8011434:	ee68 8aac 	vmul.f32	s17, s17, s25
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8011438:	eea0 5a63 	vfms.f32	s10, s0, s7
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 801143c:	eee5 4a0c 	vfma.f32	s9, s10, s24
 8011440:	ee69 9aa4 	vmul.f32	s19, s19, s9
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8011444:	eef0 4a6e 	vmov.f32	s9, s29
        f->b[0] += f->c2 * (xx - y0);
 8011448:	ee35 5a69 	vsub.f32	s10, s10, s19
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 801144c:	eee9 4a8c 	vfma.f32	s9, s19, s24
        f->b[0] += f->c2 * (xx - y0);
 8011450:	eea7 fa85 	vfma.f32	s30, s15, s10
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8011454:	eeb0 5a4e 	vmov.f32	s10, s28
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8011458:	ee29 9a24 	vmul.f32	s18, s18, s9
        f->b[0] += f->c2 * (xx - y0);
 801145c:	ed84 fa0a 	vstr	s30, [r4, #40]	; 0x28
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8011460:	eea9 5a0c 	vfma.f32	s10, s18, s24
        f->b[1] += f->c2 * (y0 - y1);
 8011464:	ee79 9ac9 	vsub.f32	s19, s19, s18
 8011468:	eee7 eaa9 	vfma.f32	s29, s15, s19
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 801146c:	ee68 8a85 	vmul.f32	s17, s17, s10
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8011470:	eeb0 5a6d 	vmov.f32	s10, s27
        f->b[2] += f->c2 * (y1 - y2);
 8011474:	ee39 9a68 	vsub.f32	s18, s18, s17
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8011478:	eea8 5a8c 	vfma.f32	s10, s17, s24
        f->b[1] += f->c2 * (y0 - y1);
 801147c:	edc4 ea0b 	vstr	s29, [r4, #44]	; 0x2c
        f->b[2] += f->c2 * (y1 - y2);
 8011480:	eea7 ea89 	vfma.f32	s28, s15, s18
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8011484:	ee6b ba85 	vmul.f32	s23, s23, s10
        f->b[2] += f->c2 * (y1 - y2);
 8011488:	ed84 ea0c 	vstr	s28, [r4, #48]	; 0x30
        f->b[3] += f->c2 * (y2 - y3);
 801148c:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8011490:	eee7 daa8 	vfma.f32	s27, s15, s17
 8011494:	edc4 da0d 	vstr	s27, [r4, #52]	; 0x34
    for (int i = 0; i < f->oversampling; i++) {
 8011498:	f47f af08 	bne.w	80112ac <tLadderFilter_tick+0x64>
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 801149c:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 80114a0:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80114d0 <tLadderFilter_tick+0x288>
 80114a4:	eeb0 0a4b 	vmov.f32	s0, s22
 80114a8:	f7ff fe76 	bl	8011198 <smoothclip>
 80114ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80114b0:	ee30 0a27 	vadd.f32	s0, s0, s15
    return y3 * compensation;
}
 80114b4:	ee20 0a2b 	vmul.f32	s0, s0, s23
 80114b8:	b008      	add	sp, #32
 80114ba:	ecbd 8b10 	vpop	{d8-d15}
 80114be:	bd70      	pop	{r4, r5, r6, pc}
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 80114c0:	ed94 ba05 	vldr	s22, [r4, #20]
    Lfloat y3 = 0.0f;
 80114c4:	eddf ba02 	vldr	s23, [pc, #8]	; 80114d0 <tLadderFilter_tick+0x288>
 80114c8:	e7e8      	b.n	801149c <tLadderFilter_tick+0x254>
 80114ca:	bf00      	nop
 80114cc:	3c75c28f 	.word	0x3c75c28f
 80114d0:	00000000 	.word	0x00000000

080114d4 <tLadderFilter_setFreqFast>:

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
 80114d4:	eddf 7a16 	vldr	s15, [pc, #88]	; 8011530 <tLadderFilter_setFreqFast+0x5c>
 80114d8:	f640 7cfe 	movw	ip, #4094	; 0xffe
    _tLadderFilter* f = *vf;
 80114dc:	6802      	ldr	r2, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80114de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    cutoff *= 30.567164179104478f;
 80114e2:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80114e6:	6b91      	ldr	r1, [r2, #56]	; 0x38
    f->cutoffMIDI = cutoff;
 80114e8:	ed82 0a0f 	vstr	s0, [r2, #60]	; 0x3c
    int32_t intVer = (int32_t)cutoff;
 80114ec:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80114f0:	ee16 3a90 	vmov	r3, s13
 80114f4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80114f8:	4563      	cmp	r3, ip
 80114fa:	bfa8      	it	ge
 80114fc:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80114fe:	ee06 3a90 	vmov	s13, r3
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011502:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011506:	eef8 5ae6 	vcvt.f32.s32	s11, s13
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 801150a:	ed93 6a01 	vldr	s12, [r3, #4]
 801150e:	edd3 6a00 	vldr	s13, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011512:	ee77 7ae5 	vsub.f32	s15, s15, s11
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011516:	ee37 7a67 	vsub.f32	s14, s14, s15
 801151a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801151e:	eee6 7a87 	vfma.f32	s15, s13, s14
    f->c2 = 2.0f * f->c;
 8011522:	ee37 7aa7 	vadd.f32	s14, s15, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8011526:	edc2 7a04 	vstr	s15, [r2, #16]
    f->c2 = 2.0f * f->c;
 801152a:	ed82 7a06 	vstr	s14, [r2, #24]
}
 801152e:	4770      	bx	lr
 8011530:	41f4898d 	.word	0x41f4898d

08011534 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
 8011534:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
 8011536:	6804      	ldr	r4, [r0, #0]
{
 8011538:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 801153c:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8011540:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8011550 <tLadderFilter_setQ+0x1c>
 8011544:	f000 fa1e 	bl	8011984 <LEAF_clip>
 8011548:	ed84 0a05 	vstr	s0, [r4, #20]
}
 801154c:	bd10      	pop	{r4, pc}
 801154e:	bf00      	nop
 8011550:	3e4ccccd 	.word	0x3e4ccccd

08011554 <tLadderFilter_setSampleRate>:

void    tLadderFilter_setSampleRate(tLadderFilter* const vf, Lfloat sr)
{
    _tLadderFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
 8011554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 8011558:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801157c <tLadderFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 801155c:	4908      	ldr	r1, [pc, #32]	; (8011580 <tLadderFilter_setSampleRate+0x2c>)
 801155e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011562:	4b08      	ldr	r3, [pc, #32]	; (8011584 <tLadderFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
 8011564:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tLadderFilter* f = *vf;
 8011568:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
 801156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801156e:	bfd8      	it	le
 8011570:	460b      	movle	r3, r1
 8011572:	6393      	str	r3, [r2, #56]	; 0x38
    f->invSampleRate = 1.0f/sr;
 8011574:	edc2 7a02 	vstr	s15, [r2, #8]
    }
}
 8011578:	4770      	bx	lr
 801157a:	bf00      	nop
 801157c:	47afc800 	.word	0x47afc800
 8011580:	08019d08 	.word	0x08019d08
 8011584:	0801dd08 	.word	0x0801dd08

08011588 <LEAF_map>:
    return(fraction);
}

inline float LEAF_map(float value, float istart, float istop, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8011588:	ee70 7a60 	vsub.f32	s15, s0, s1
 801158c:	ee31 1a60 	vsub.f32	s2, s2, s1
 8011590:	ee32 2a61 	vsub.f32	s4, s4, s3
 8011594:	ee87 7a81 	vdiv.f32	s14, s15, s2
}
 8011598:	eee2 1a07 	vfma.f32	s3, s4, s14
 801159c:	eeb0 0a61 	vmov.f32	s0, s3
 80115a0:	4770      	bx	lr
 80115a2:	bf00      	nop

080115a4 <LEAF_mapFromZeroToOneInput>:

inline float LEAF_mapFromZeroToOneInput(float value, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * value;
 80115a4:	ee31 1a60 	vsub.f32	s2, s2, s1
}
 80115a8:	eee1 0a00 	vfma.f32	s1, s2, s0
 80115ac:	eeb0 0a60 	vmov.f32	s0, s1
 80115b0:	4770      	bx	lr
 80115b2:	bf00      	nop

080115b4 <LEAF_mapToZeroToOneOutput>:

inline float LEAF_mapToZeroToOneOutput(float value, float istart, float istop)
{
	return ((value - istart) / (istop - istart));
 80115b4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80115b8:	ee31 1a60 	vsub.f32	s2, s2, s1
}
 80115bc:	ee80 0a01 	vdiv.f32	s0, s0, s2
 80115c0:	4770      	bx	lr
 80115c2:	bf00      	nop

080115c4 <fastertanf>:
    return fResult;
}

inline Lfloat fastertanf(Lfloat fAngle)
{
    Lfloat fASqr = fAngle*fAngle;
 80115c4:	ee60 6a00 	vmul.f32	s13, s0, s0
    Lfloat fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
 80115c8:	ed9f 6a06 	vldr	s12, [pc, #24]	; 80115e4 <fastertanf+0x20>
 80115cc:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80115e8 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
 80115d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
 80115d4:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
 80115d8:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
 80115dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80115e0:	4770      	bx	lr
 80115e2:	bf00      	nop
 80115e4:	3e502de0 	.word	0x3e502de0
 80115e8:	3ea295ea 	.word	0x3ea295ea

080115ec <my_faster_logf>:
/* natural log on [0x1.f7a5ecp-127, 0x1.fffffep127]. Maximum relative error 9.4529e-5 */
inline Lfloat my_faster_logf (Lfloat a)
{
 80115ec:	b082      	sub	sp, #8
	Lfloat m, r, s, t, i, f;
    int32_t e;
    union unholy_t unholy;
    unholy.f = a;
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
 80115ee:	4915      	ldr	r1, [pc, #84]	; (8011644 <my_faster_logf+0x58>)
 80115f0:	4a15      	ldr	r2, [pc, #84]	; (8011648 <my_faster_logf+0x5c>)
    union unholy_t unholy2;
    unholy2.i = (unholy.i - e);
    m = unholy2.f;
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
    /* m in [2/3, 4/3] */
    f = m - 1.0f;
 80115f2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
{
 80115f6:	ed8d 0a01 	vstr	s0, [sp, #4]
    unholy.f = a;
 80115fa:	9b01      	ldr	r3, [sp, #4]
    s = f * f;
    /* Compute log1p(f) for f in [-1/3, 1/3] */
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 80115fc:	ed9f 5a13 	vldr	s10, [pc, #76]	; 801164c <my_faster_logf+0x60>
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
 8011600:	4419      	add	r1, r3
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8011602:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8011650 <my_faster_logf+0x64>
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8011606:	eddf 6a13 	vldr	s13, [pc, #76]	; 8011654 <my_faster_logf+0x68>
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
 801160a:	400a      	ands	r2, r1
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 801160c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8011658 <my_faster_logf+0x6c>
    r = fmaf (r, s, t);
    r = fmaf (r, s, f);
    r = fmaf (i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 8011610:	eddf 5a12 	vldr	s11, [pc, #72]	; 801165c <my_faster_logf+0x70>
    unholy2.i = (unholy.i - e);
 8011614:	1a9b      	subs	r3, r3, r2
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
 8011616:	ee07 2a90 	vmov	s15, r2
    unholy2.i = (unholy.i - e);
 801161a:	ee00 3a10 	vmov	s0, r3
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
 801161e:	eefa 7ae4 	vcvt.f32.s32	s15, s15, #23
    f = m - 1.0f;
 8011622:	ee30 0a64 	vsub.f32	s0, s0, s9
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8011626:	eee5 6a00 	vfma.f32	s13, s10, s0
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 801162a:	eea6 7a00 	vfma.f32	s14, s12, s0
    s = f * f;
 801162e:	ee20 6a00 	vmul.f32	s12, s0, s0
    r = fmaf (r, s, t);
 8011632:	eea6 7a86 	vfma.f32	s14, s13, s12
    r = fmaf (r, s, f);
 8011636:	eea7 0a06 	vfma.f32	s0, s14, s12
    return r;
}
 801163a:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801163e:	b002      	add	sp, #8
 8011640:	4770      	bx	lr
 8011642:	bf00      	nop
 8011644:	c0d55555 	.word	0xc0d55555
 8011648:	ff800000 	.word	0xff800000
 801164c:	3e6c6078 	.word	0x3e6c6078
 8011650:	3ea9e51a 	.word	0x3ea9e51a
 8011654:	be8ef46d 	.word	0xbe8ef46d
 8011658:	beff712d 	.word	0xbeff712d
 801165c:	3f317218 	.word	0x3f317218

08011660 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
inline Lfloat fastsqrtf(Lfloat x)
{
	union { Lfloat f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8011660:	ee10 2a10 	vmov	r2, s0
 8011664:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 8011668:	4b0d      	ldr	r3, [pc, #52]	; (80116a0 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 801166a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 801166e:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8011672:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011676:	ee00 3a10 	vmov	s0, r3
 801167a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801167e:	eea0 7a67 	vfms.f32	s14, s0, s15
 8011682:	ee60 7a07 	vmul.f32	s15, s0, s14
 8011686:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 801168a:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 801168e:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 8011692:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 8011696:	336e      	adds	r3, #110	; 0x6e
}
 8011698:	ee00 3a10 	vmov	s0, r3
 801169c:	4770      	bx	lr
 801169e:	bf00      	nop
 80116a0:	5f3759df 	.word	0x5f3759df

080116a4 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 80116a4:	ee10 3a10 	vmov	r3, s0
 80116a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80116ac:	ee00 3a10 	vmov	s0, r3
}
 80116b0:	4770      	bx	lr
 80116b2:	bf00      	nop

080116b4 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline Lfloat fasterexpf(Lfloat x) {
    x = 1.0f + (x * 0.00390625f);
 80116b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80116b8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80116e4 <fasterexpf+0x30>
 80116bc:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 80116c0:	ee27 0aa7 	vmul.f32	s0, s15, s15
 80116c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80116c8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80116cc:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 80116d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80116d4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80116d8:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
 80116dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80116e0:	4770      	bx	lr
 80116e2:	bf00      	nop
 80116e4:	3b800000 	.word	0x3b800000

080116e8 <fastExp3>:

inline Lfloat fastExp3(Lfloat x)  // cubic spline approximation
{
    union { Lfloat f; int32_t i; } reinterpreter;

    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 80116e8:	eddf 7a10 	vldr	s15, [pc, #64]	; 801172c <fastExp3+0x44>
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    // empirical values for small maximum relative error (8.34e-5):
    reinterpreter.i +=
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 80116ec:	f240 4cfd 	movw	ip, #1277	; 0x4fd
 80116f0:	f643 11e9 	movw	r1, #14825	; 0x39e9
 80116f4:	4b0e      	ldr	r3, [pc, #56]	; (8011730 <fastExp3+0x48>)
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 80116f6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80116fa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80116fe:	ee17 2a90 	vmov	r2, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 8011702:	f3c2 10cf 	ubfx	r0, r2, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8011706:	f102 527e 	add.w	r2, r2, #1065353216	; 0x3f800000
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 801170a:	fb0c fc00 	mul.w	ip, ip, r0
 801170e:	eb01 31ac 	add.w	r1, r1, ip, asr #14
 8011712:	fb00 f101 	mul.w	r1, r0, r1
 8011716:	eb03 33a1 	add.w	r3, r3, r1, asr #14
 801171a:	fb00 f303 	mul.w	r3, r0, r3
 801171e:	12db      	asrs	r3, r3, #11
 8011720:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    return reinterpreter.f;
 8011724:	4413      	add	r3, r2
 8011726:	ee00 3a10 	vmov	s0, r3
}
 801172a:	4770      	bx	lr
 801172c:	4b38aa3b 	.word	0x4b38aa3b
 8011730:	fffec87b 	.word	0xfffec87b

08011734 <fastExp4>:

inline Lfloat fastExp4(Lfloat x)  // quartic spline approximation
{
    union { Lfloat f; int32_t i; } reinterpreter;

    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8011734:	eddf 7a12 	vldr	s15, [pc, #72]	; 8011780 <fastExp4+0x4c>
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    // empirical values for small maximum relative error (1.21e-5):
    reinterpreter.i += (((((((((((3537*m) >> 16)
 8011738:	f640 5cd1 	movw	ip, #3537	; 0xdd1
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
 801173c:	f243 5264 	movw	r2, #13668	; 0x3564
 8011740:	f643 51c9 	movw	r1, #15817	; 0x3dc9
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8011744:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011748:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801174c:	ee17 3a90 	vmov	r3, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 8011750:	f3c3 10cf 	ubfx	r0, r3, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8011754:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
    reinterpreter.i += (((((((((((3537*m) >> 16)
 8011758:	fb0c fc00 	mul.w	ip, ip, r0
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
 801175c:	eb02 422c 	add.w	r2, r2, ip, asr #16
 8011760:	fb00 f202 	mul.w	r2, r0, r2
 8011764:	eb01 41a2 	add.w	r1, r1, r2, asr #18
 8011768:	4a06      	ldr	r2, [pc, #24]	; (8011784 <fastExp4+0x50>)
 801176a:	fb00 f101 	mul.w	r1, r0, r1
 801176e:	eb02 32a1 	add.w	r2, r2, r1, asr #14
 8011772:	fb00 f202 	mul.w	r2, r0, r2
    return reinterpreter.f;
 8011776:	eb03 23e2 	add.w	r3, r3, r2, asr #11
 801177a:	ee00 3a10 	vmov	s0, r3
}
 801177e:	4770      	bx	lr
 8011780:	4b38aa3b 	.word	0x4b38aa3b
 8011784:	fffec5aa 	.word	0xfffec5aa

08011788 <fast_sinf2>:
inline Lfloat fast_sinf2(Lfloat x)
{
	Lfloat invert = 1.0f;
	Lfloat out;

	x = x * INV_TWO_PI_TIMES_SINE_TABLE_SIZE;
 8011788:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 80117f8 <fast_sinf2+0x70>
 801178c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8011790:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011794:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

	if (x < 0.0f)
 8011798:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117a0:	d424      	bmi.n	80117ec <fast_sinf2+0x64>
	Lfloat invert = 1.0f;
 80117a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	{
		x *= -1.0f;
		invert = -1.0f;
	}
	int intX = ((int)x) & 2047;
 80117a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	int intXNext = (intX + 1) & 2047;
	Lfloat LfloatX = x-intX;

	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 80117aa:	4a15      	ldr	r2, [pc, #84]	; (8011800 <fast_sinf2+0x78>)
	int intX = ((int)x) & 2047;
 80117ac:	ee17 3a90 	vmov	r3, s15
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 80117b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	int intX = ((int)x) & 2047;
 80117b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
	int intXNext = (intX + 1) & 2047;
 80117b8:	1c59      	adds	r1, r3, #1
	Lfloat LfloatX = x-intX;
 80117ba:	ee06 3a90 	vmov	s13, r3
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 80117be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	Lfloat LfloatX = x-intX;
 80117c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	int intXNext = (intX + 1) & 2047;
 80117c6:	f3c1 010a 	ubfx	r1, r1, #0, #11
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 80117ca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	Lfloat LfloatX = x-intX;
 80117ce:	ee30 0a66 	vsub.f32	s0, s0, s13
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 80117d2:	edd3 6a00 	vldr	s13, [r3]
 80117d6:	ed92 6a00 	vldr	s12, [r2]
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 80117da:	ee77 7ac0 	vsub.f32	s15, s15, s0
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 80117de:	ee20 0a06 	vmul.f32	s0, s0, s12
 80117e2:	eea6 0aa7 	vfma.f32	s0, s13, s15
	out *= invert;
	return out;
}
 80117e6:	ee27 0a00 	vmul.f32	s0, s14, s0
 80117ea:	4770      	bx	lr
		x *= -1.0f;
 80117ec:	eeb1 0a40 	vneg.f32	s0, s0
		invert = -1.0f;
 80117f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80117f4:	e7d7      	b.n	80117a6 <fast_sinf2+0x1e>
 80117f6:	bf00      	nop
 80117f8:	6dc9c883 	.word	0x6dc9c883
 80117fc:	40745f30 	.word	0x40745f30
 8011800:	08021d88 	.word	0x08021d88

08011804 <fastPowf>:
    { 
        Lfloat d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 8011804:	ee10 3a10 	vmov	r3, s0
 8011808:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801182c <fastPowf+0x28>
 801180c:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8011810:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
 8011814:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8011818:	330b      	adds	r3, #11
 801181a:	ee07 3a90 	vmov	s15, r3
 801181e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011822:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
 8011826:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
 801182a:	4770      	bx	lr
 801182c:	4e7de250 	.word	0x4e7de250

08011830 <LEAF_crossfade>:
 when t = 0, volumes[0] = 0.707, volumes[1] = 0.707 (equal-power cross fade)
 when t = 1, volumes[0] = 1, volumes[1] = 0
 */

inline void LEAF_crossfade(Lfloat fade, Lfloat* volumes) {
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8011830:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011834:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011838:	ee70 7a27 	vadd.f32	s15, s0, s15
inline void LEAF_crossfade(Lfloat fade, Lfloat* volumes) {
 801183c:	b500      	push	{lr}
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 801183e:	ee67 7a87 	vmul.f32	s15, s15, s14
inline void LEAF_crossfade(Lfloat fade, Lfloat* volumes) {
 8011842:	ed2d 8b02 	vpush	{d8}
 8011846:	eef5 7a40 	vcmp.f32	s15, #0.0
 801184a:	b083      	sub	sp, #12
 801184c:	eeb0 8a40 	vmov.f32	s16, s0
 8011850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011854:	d419      	bmi.n	801188a <LEAF_crossfade+0x5a>
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8011856:	eeb1 0ae7 	vsqrt.f32	s0, s15
 801185a:	ed80 0a00 	vstr	s0, [r0]
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 801185e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011862:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011866:	ee37 0ac8 	vsub.f32	s0, s15, s16
 801186a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801186e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8011872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011876:	d40f      	bmi.n	8011898 <LEAF_crossfade+0x68>
 8011878:	eef1 7ac0 	vsqrt.f32	s15, s0
 801187c:	edc0 7a01 	vstr	s15, [r0, #4]
}
 8011880:	b003      	add	sp, #12
 8011882:	ecbd 8b02 	vpop	{d8}
 8011886:	f85d fb04 	ldr.w	pc, [sp], #4
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 801188a:	eeb0 0a67 	vmov.f32	s0, s15
 801188e:	9001      	str	r0, [sp, #4]
 8011890:	f005 fcba 	bl	8017208 <sqrtf>
 8011894:	9801      	ldr	r0, [sp, #4]
 8011896:	e7e0      	b.n	801185a <LEAF_crossfade+0x2a>
 8011898:	9001      	str	r0, [sp, #4]
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 801189a:	f005 fcb5 	bl	8017208 <sqrtf>
 801189e:	9801      	ldr	r0, [sp, #4]
 80118a0:	eef0 7a40 	vmov.f32	s15, s0
 80118a4:	e7ea      	b.n	801187c <LEAF_crossfade+0x4c>
 80118a6:	bf00      	nop

080118a8 <LEAF_shaper>:
}

// Jones shaper
Lfloat LEAF_shaper(Lfloat input, Lfloat m_drive)
{
    Lfloat fx = input * 2.0f;    // prescale
 80118a8:	ee70 7a00 	vadd.f32	s15, s0, s0
#else
		inline Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
 80118ac:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801192c <LEAF_shaper+0x84>
 80118b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118b8:	d406      	bmi.n	80118c8 <LEAF_shaper+0x20>
    {
        return min;
    }
    else if (val > max)
 80118ba:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8011930 <LEAF_shaper+0x88>
 80118be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c6:	dd16      	ble.n	80118f6 <LEAF_shaper+0x4e>
 80118c8:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8011934 <LEAF_shaper+0x8c>
 80118cc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8011938 <LEAF_shaper+0x90>
 80118d0:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 801193c <LEAF_shaper+0x94>
    c = 0.5f*fx*(3.0f - (xc2));
 80118d4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80118d8:	eef6 5a08 	vmov.f32	s11, #104	; 0x3f400000  0.750
    c = 0.5f*fx*(3.0f - (xc2));
 80118dc:	ee67 7a80 	vmul.f32	s15, s15, s0
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80118e0:	ee70 0aa5 	vadd.f32	s1, s1, s11
 80118e4:	eea7 7a86 	vfma.f32	s14, s15, s12
 80118e8:	ee67 7a26 	vmul.f32	s15, s14, s13
 80118ec:	ee67 7aa0 	vmul.f32	s15, s15, s1
}
 80118f0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80118f4:	4770      	bx	lr
    xc2 = xc*xc;
 80118f6:	ee67 5aa7 	vmul.f32	s11, s15, s15
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80118fa:	eddf 4a11 	vldr	s9, [pc, #68]	; 8011940 <LEAF_shaper+0x98>
 80118fe:	eef5 3a00 	vmov.f32	s7, #80	; 0x3e800000  0.250
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8011902:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8011944 <LEAF_shaper+0x9c>
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8011906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801190a:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 8011948 <LEAF_shaper+0xa0>
    xc4 = xc2 * xc2;
 801190e:	ee25 4aa5 	vmul.f32	s8, s11, s11
    c = 0.5f*fx*(3.0f - (xc2));
 8011912:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8011916:	eee5 6ae3 	vfms.f32	s13, s11, s7
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 801191a:	ee25 7a87 	vmul.f32	s14, s11, s14
    c = 0.5f*fx*(3.0f - (xc2));
 801191e:	ee36 6a65 	vsub.f32	s12, s12, s11
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8011922:	eee4 6a24 	vfma.f32	s13, s8, s9
 8011926:	ee66 6a85 	vmul.f32	s13, s13, s10
    {
        return max;
    }
    else
    {
        return val;
 801192a:	e7d3      	b.n	80118d4 <LEAF_shaper+0x2c>
 801192c:	c03504f3 	.word	0xc03504f3
 8011930:	403504f3 	.word	0x403504f3
 8011934:	00000000 	.word	0x00000000
 8011938:	3ecccccc 	.word	0x3ecccccc
 801193c:	c09fffff 	.word	0xc09fffff
 8011940:	3c800000 	.word	0x3c800000
 8011944:	3d4ccccd 	.word	0x3d4ccccd
 8011948:	3fa72f05 	.word	0x3fa72f05

0801194c <LEAF_round>:
    rnd = fabsf(rnd);
 801194c:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
 8011950:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011974 <LEAF_round+0x28>
 8011954:	eef4 0ae7 	vcmpe.f32	s1, s15
 8011958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801195c:	d909      	bls.n	8011972 <LEAF_round+0x26>
    Lfloat scale = 1.f / rnd;
 801195e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011962:	eec7 7a20 	vdiv.f32	s15, s14, s1
    return roundf(input * scale) * rnd;
 8011966:	ee67 7a80 	vmul.f32	s15, s15, s0
 801196a:	fef8 7a67 	vrinta.f32	s15, s15
 801196e:	ee27 0aa0 	vmul.f32	s0, s15, s1
}
 8011972:	4770      	bx	lr
 8011974:	33d6bf95 	.word	0x33d6bf95

08011978 <LEAF_bitwise_xor>:
    return unholy.f;
 8011978:	ee10 3a10 	vmov	r3, s0
 801197c:	4043      	eors	r3, r0
 801197e:	ee00 3a10 	vmov	s0, r3
}
 8011982:	4770      	bx	lr

08011984 <LEAF_clip>:
    if (val < min)
 8011984:	eef4 0ac0 	vcmpe.f32	s1, s0
 8011988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801198c:	d405      	bmi.n	801199a <LEAF_clip+0x16>
        return val;
 801198e:	eef4 0ac1 	vcmpe.f32	s1, s2
 8011992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011996:	fe31 0a20 	vselgt.f32	s0, s2, s1
    }
}
 801199a:	4770      	bx	lr

0801199c <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
inline Lfloat LEAF_tanh(Lfloat x)
{
    
    if( x < -3.0f )
 801199c:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 80119a0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80119a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119a8:	d41a      	bmi.n	80119e0 <LEAF_tanh+0x44>
        return -1.0f;
    else if( x > 3.0f )
 80119aa:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80119ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80119b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b6:	dd02      	ble.n	80119be <LEAF_tanh+0x22>
        return 1.0f;
 80119b8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
 80119bc:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 80119be:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 80119c2:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 80119c6:	eeb0 7a67 	vmov.f32	s14, s15
 80119ca:	ee60 6a26 	vmul.f32	s13, s0, s13
 80119ce:	eea0 7a00 	vfma.f32	s14, s0, s0
 80119d2:	eee6 7a80 	vfma.f32	s15, s13, s0
 80119d6:	ee27 7a00 	vmul.f32	s14, s14, s0
 80119da:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80119de:	4770      	bx	lr
        return -1.0f;
 80119e0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80119e4:	4770      	bx	lr
 80119e6:	bf00      	nop

080119e8 <fast_tanh4>:
    Lfloat xa = fabsf(x);
    Lfloat x2 = xa * xa;
    Lfloat x3 = xa * x2;
    Lfloat x4 = x2 * x2;
    Lfloat x7 = x3 * x4;
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 80119e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80119ec:	ed9f 4a13 	vldr	s8, [pc, #76]	; 8011a3c <fast_tanh4+0x54>
    Lfloat xa = fabsf(x);
 80119f0:	eef0 6ac0 	vabs.f32	s13, s0
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 80119f4:	eddf 4a12 	vldr	s9, [pc, #72]	; 8011a40 <fast_tanh4+0x58>
    Lfloat x2 = xa * xa;
 80119f8:	ee20 6a00 	vmul.f32	s12, s0, s0
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 80119fc:	ed9f 5a11 	vldr	s10, [pc, #68]	; 8011a44 <fast_tanh4+0x5c>
    Lfloat   result = (x < 0) ? -res : res;
 8011a00:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 8011a04:	ee76 7a87 	vadd.f32	s15, s13, s14
    Lfloat x3 = xa * x2;
 8011a08:	ee66 6a86 	vmul.f32	s13, s13, s12
    Lfloat x4 = x2 * x2;
 8011a0c:	ee66 5a06 	vmul.f32	s11, s12, s12
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 8011a10:	ee77 7a86 	vadd.f32	s15, s15, s12
    Lfloat   result = (x < 0) ? -res : res;
 8011a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat x7 = x3 * x4;
 8011a18:	ee26 6aa5 	vmul.f32	s12, s13, s11
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 8011a1c:	eee6 7a84 	vfma.f32	s15, s13, s8
 8011a20:	eee5 7aa4 	vfma.f32	s15, s11, s9
 8011a24:	eee6 7a05 	vfma.f32	s15, s12, s10
 8011a28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8011a2c:	ee37 7a66 	vsub.f32	s14, s14, s13
    Lfloat   result = (x < 0) ? -res : res;
 8011a30:	bf48      	it	mi
 8011a32:	eeb1 7a47 	vnegmi.f32	s14, s14

    return (result);
}
 8011a36:	eeb0 0a47 	vmov.f32	s0, s14
 8011a3a:	4770      	bx	lr
 8011a3c:	3f15f4d3 	.word	0x3f15f4d3
 8011a40:	3f0dee8b 	.word	0x3f0dee8b
 8011a44:	3d6b71bb 	.word	0x3d6b71bb

08011a48 <fast_tanh5>:

//from raphx on this post : https://www.kvraudio.com/forum/viewtopic.php?t=332930&start=30
inline Lfloat fast_tanh5(Lfloat x)
{
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8011a48:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8011aa4 <fast_tanh5+0x5c>
	return a / sqrtf(1.0f + a * a);
 8011a4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8011a50:	eddf 7a15 	vldr	s15, [pc, #84]	; 8011aa8 <fast_tanh5+0x60>
 8011a54:	ee20 7a07 	vmul.f32	s14, s0, s14
 8011a58:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011a5c:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011a60:	ee67 7a80 	vmul.f32	s15, s15, s0
{
 8011a64:	b508      	push	{r3, lr}
 8011a66:	ed2d 8b02 	vpush	{d8}
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8011a6a:	eeb0 8a40 	vmov.f32	s16, s0
 8011a6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011a72:	eea7 8a00 	vfma.f32	s16, s14, s0
 8011a76:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011a7a:	eea7 8a80 	vfma.f32	s16, s15, s0
	return a / sqrtf(1.0f + a * a);
 8011a7e:	eee8 6a08 	vfma.f32	s13, s16, s16
 8011a82:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a8a:	d406      	bmi.n	8011a9a <fast_tanh5+0x52>
 8011a8c:	eeb1 0ae6 	vsqrt.f32	s0, s13
}
 8011a90:	ee88 0a00 	vdiv.f32	s0, s16, s0
 8011a94:	ecbd 8b02 	vpop	{d8}
 8011a98:	bd08      	pop	{r3, pc}
	return a / sqrtf(1.0f + a * a);
 8011a9a:	eeb0 0a66 	vmov.f32	s0, s13
 8011a9e:	f005 fbb3 	bl	8017208 <sqrtf>
 8011aa2:	e7f5      	b.n	8011a90 <fast_tanh5+0x48>
 8011aa4:	3e28d927 	.word	0x3e28d927
 8011aa8:	3c217586 	.word	0x3c217586

08011aac <fastSine>:
//from Olli Niemitalo
//https://dsp.stackexchange.com/questions/46629/finding-polynomial-approximations-of-a-sine-wave
Lfloat fastSine(Lfloat x)
{
	Lfloat term1 = x * 1.570034357f;
	Lfloat term2 = x * x * x * -0.6425216143f;
 8011aac:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011ab0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8011adc <fastSine+0x30>
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
	return term1+term2+term3;
 8011ab4:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8011ae0 <fastSine+0x34>
 8011ab8:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8011ae4 <fastSine+0x38>
	Lfloat term2 = x * x * x * -0.6425216143f;
 8011abc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011ac0:	ee27 7a87 	vmul.f32	s14, s15, s14
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
 8011ac4:	ee67 7a80 	vmul.f32	s15, s15, s0
	return term1+term2+term3;
 8011ac8:	eea0 7a06 	vfma.f32	s14, s0, s12
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
 8011acc:	ee67 7a80 	vmul.f32	s15, s15, s0
}
 8011ad0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011ad4:	eeb0 0a47 	vmov.f32	s0, s14
 8011ad8:	4770      	bx	lr
 8011ada:	bf00      	nop
 8011adc:	bf247c4c 	.word	0xbf247c4c
 8011ae0:	3fc8f6e3 	.word	0x3fc8f6e3
 8011ae4:	3d947433 	.word	0x3d947433

08011ae8 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
 8011ae8:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 8011aea:	1e4b      	subs	r3, r1, #1
 8011aec:	ee31 1a60 	vsub.f32	s2, s2, s1
    Lfloat x = start;
    for (int i = 0; i < size; i++)
 8011af0:	2900      	cmp	r1, #0
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 8011af2:	ee07 3a90 	vmov	s15, r3
 8011af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8011afa:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 8011afe:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
 8011b02:	dd16      	ble.n	8011b32 <LEAF_generate_exp+0x4a>
 8011b04:	4604      	mov	r4, r0
 8011b06:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8011b0a:	eeb0 8a60 	vmov.f32	s16, s1
 8011b0e:	eef0 8a40 	vmov.f32	s17, s0
 8011b12:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
 8011b16:	eef0 0a48 	vmov.f32	s1, s16
 8011b1a:	eeb0 0a68 	vmov.f32	s0, s17
 8011b1e:	f005 f99f 	bl	8016e60 <powf>
 8011b22:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
 8011b26:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
 8011b2a:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8011b2e:	42ac      	cmp	r4, r5
 8011b30:	d1f1      	bne.n	8011b16 <LEAF_generate_exp+0x2e>
    }
}
 8011b32:	ecbd 8b04 	vpop	{d8-d9}
 8011b36:	bd38      	pop	{r3, r4, r5, pc}

08011b38 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
 8011b38:	b538      	push	{r3, r4, r5, lr}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8011b3a:	ee31 1a40 	vsub.f32	s2, s2, s0
{
 8011b3e:	460d      	mov	r5, r1
 8011b40:	4604      	mov	r4, r0
 8011b42:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8011b46:	ee30 9ac0 	vsub.f32	s18, s1, s0
{
 8011b4a:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8011b4e:	ee81 0a09 	vdiv.f32	s0, s2, s18
 8011b52:	f004 ff81 	bl	8016a58 <logf>
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8011b56:	1e6b      	subs	r3, r5, #1
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8011b58:	eddf 6a13 	vldr	s13, [pc, #76]	; 8011ba8 <LEAF_generate_table_skew_non_sym+0x70>
    Lfloat x = 0.0000000001f;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
 8011b5c:	2d00      	cmp	r5, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8011b5e:	ee07 3a90 	vmov	s15, r3
 8011b62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8011b6a:	eec6 9a80 	vdiv.f32	s19, s13, s0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8011b6e:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
 8011b72:	dd15      	ble.n	8011ba0 <LEAF_generate_table_skew_non_sym+0x68>
    Lfloat x = 0.0000000001f;
 8011b74:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8011bac <LEAF_generate_table_skew_non_sym+0x74>
 8011b78:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    {
        proportion = expf (logf(x) / skew);
 8011b7c:	eeb0 0a48 	vmov.f32	s0, s16
 8011b80:	f004 ff6a 	bl	8016a58 <logf>
 8011b84:	ee80 0a29 	vdiv.f32	s0, s0, s19
 8011b88:	f004 fef2 	bl	8016970 <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 8011b8c:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
 8011b90:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 8011b94:	eee9 7a00 	vfma.f32	s15, s18, s0
 8011b98:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8011b9c:	42ac      	cmp	r4, r5
 8011b9e:	d1ed      	bne.n	8011b7c <LEAF_generate_table_skew_non_sym+0x44>
    }
}
 8011ba0:	ecbd 8b06 	vpop	{d8-d10}
 8011ba4:	bd38      	pop	{r3, r4, r5, pc}
 8011ba6:	bf00      	nop
 8011ba8:	bf317218 	.word	0xbf317218
 8011bac:	2edbe6ff 	.word	0x2edbe6ff

08011bb0 <LEAF_generate_atodb>:


void LEAF_generate_atodb(Lfloat* buffer, int size, Lfloat min, Lfloat max)
{
 8011bb0:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 8011bb2:	1e4b      	subs	r3, r1, #1
 8011bb4:	ee70 0ac0 	vsub.f32	s1, s1, s0
    Lfloat x = min;
    for (int i = 0; i < size; i++)
 8011bb8:	2900      	cmp	r1, #0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 8011bba:	ee07 3a90 	vmov	s15, r3
 8011bbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8011bc2:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 8011bc6:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
 8011bca:	dd12      	ble.n	8011bf2 <LEAF_generate_atodb+0x42>
 8011bcc:	4604      	mov	r4, r0
 8011bce:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8011bd2:	eeb0 8a40 	vmov.f32	s16, s0
}


Lfloat atodb(Lfloat a)
{
    return 20.0f*log10f(a);
 8011bd6:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 8011bda:	eeb0 0a48 	vmov.f32	s0, s16
 8011bde:	f005 fae5 	bl	80171ac <log10f>
 8011be2:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 8011be6:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 8011bea:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8011bee:	42ac      	cmp	r4, r5
 8011bf0:	d1f3      	bne.n	8011bda <LEAF_generate_atodb+0x2a>
}
 8011bf2:	ecbd 8b04 	vpop	{d8-d9}
 8011bf6:	bd38      	pop	{r3, r4, r5, pc}

08011bf8 <LEAF_generate_dbtoa>:
{
 8011bf8:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 8011bfa:	1e4b      	subs	r3, r1, #1
 8011bfc:	ee70 0ac0 	vsub.f32	s1, s1, s0
    for (int i = 0; i < size; i++)
 8011c00:	2900      	cmp	r1, #0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 8011c02:	ee07 3a90 	vmov	s15, r3
 8011c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8011c0a:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 8011c0e:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
 8011c12:	dd12      	ble.n	8011c3a <LEAF_generate_dbtoa+0x42>
 8011c14:	4604      	mov	r4, r0
	return 20.0f*log10f_fast(a);
}

inline Lfloat dbtoa(Lfloat db)
{
    return powf(10.0f, db * 0.05f);
 8011c16:	ed9f 9a0a 	vldr	s18, [pc, #40]	; 8011c40 <LEAF_generate_dbtoa+0x48>
 8011c1a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8011c1e:	eeb0 8a40 	vmov.f32	s16, s0
 8011c22:	ee68 0a09 	vmul.f32	s1, s16, s18
 8011c26:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8011c2a:	f005 f919 	bl	8016e60 <powf>
        buffer[i] = dbtoa(x);
 8011c2e:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8011c32:	42ac      	cmp	r4, r5
        x += increment;
 8011c34:	ee38 8a28 	vadd.f32	s16, s16, s17
    for (int i = 0; i < size; i++)
 8011c38:	d1f3      	bne.n	8011c22 <LEAF_generate_dbtoa+0x2a>
}
 8011c3a:	ecbd 8b04 	vpop	{d8-d9}
 8011c3e:	bd38      	pop	{r3, r4, r5, pc}
 8011c40:	3d4ccccd 	.word	0x3d4ccccd

08011c44 <LEAF_generate_mtof>:
{
 8011c44:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8011c46:	1e4b      	subs	r3, r1, #1
 8011c48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (int i = 0; i < size; i++)
 8011c4c:	2900      	cmp	r1, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8011c4e:	ee07 3a90 	vmov	s15, r3
 8011c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8011c56:	ed2d 8b0a 	vpush	{d8-d12}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8011c5a:	eec7 aa27 	vdiv.f32	s21, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
 8011c5e:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
 8011c62:	dd29      	ble.n	8011cb8 <LEAF_generate_mtof+0x74>
    Lfloat x = 0.0f;
 8011c64:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8011ccc <LEAF_generate_mtof+0x88>
 8011c68:	eef0 9a40 	vmov.f32	s19, s0
 8011c6c:	4604      	mov	r4, r0
    if (f <= -1500.0f) return(0);
 8011c6e:	eddf 8a18 	vldr	s17, [pc, #96]	; 8011cd0 <LEAF_generate_mtof+0x8c>
 8011c72:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
 8011c76:	ed9f 8a17 	vldr	s16, [pc, #92]	; 8011cd4 <LEAF_generate_mtof+0x90>
 8011c7a:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
 8011c7e:	ed9f ca16 	vldr	s24, [pc, #88]	; 8011cd8 <LEAF_generate_mtof+0x94>
 8011c82:	eddf ba16 	vldr	s23, [pc, #88]	; 8011cdc <LEAF_generate_mtof+0x98>
        Lfloat midiVal = (x * scalar) + startMIDI;
 8011c86:	eeb0 0a69 	vmov.f32	s0, s19
 8011c8a:	eeaa 0a09 	vfma.f32	s0, s20, s18
Lfloat mtof(Lfloat f)
 8011c8e:	e006      	b.n	8011c9e <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8011c90:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8011c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c98:	dd11      	ble.n	8011cbe <LEAF_generate_mtof+0x7a>
 8011c9a:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
 8011c9e:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8011ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca6:	d8f3      	bhi.n	8011c90 <LEAF_generate_mtof+0x4c>
 8011ca8:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
 8011cac:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8011cb0:	42ac      	cmp	r4, r5
        x += increment;
 8011cb2:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
 8011cb6:	d1e6      	bne.n	8011c86 <LEAF_generate_mtof+0x42>
}
 8011cb8:	ecbd 8b0a 	vpop	{d8-d12}
 8011cbc:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8011cbe:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8011cc2:	f004 fe55 	bl	8016970 <expf>
 8011cc6:	ee60 7a2b 	vmul.f32	s15, s0, s23
 8011cca:	e7ef      	b.n	8011cac <LEAF_generate_mtof+0x68>
 8011ccc:	00000000 	.word	0x00000000
 8011cd0:	c4bb8000 	.word	0xc4bb8000
 8011cd4:	44bb6000 	.word	0x44bb6000
 8011cd8:	3d6c9820 	.word	0x3d6c9820
 8011cdc:	4102d013 	.word	0x4102d013

08011ce0 <LEAF_poly_blep>:
    if (t < dt) {
 8011ce0:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8011ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ce8:	d418      	bmi.n	8011d1c <LEAF_poly_blep+0x3c>
    else if (t > 1.0f - dt) {
 8011cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011cee:	ee77 7a60 	vsub.f32	s15, s14, s1
 8011cf2:	eef4 7ac0 	vcmpe.f32	s15, s0
 8011cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cfa:	d50c      	bpl.n	8011d16 <LEAF_poly_blep+0x36>
        t = (t - 1.0f) / dt;
 8011cfc:	ee70 7a47 	vsub.f32	s15, s0, s14
 8011d00:	eec7 6aa0 	vdiv.f32	s13, s15, s1
        return t*t + t+t + 1.0f;
 8011d04:	eeb0 0a66 	vmov.f32	s0, s13
 8011d08:	eea6 0aa6 	vfma.f32	s0, s13, s13
 8011d0c:	ee30 0a26 	vadd.f32	s0, s0, s13
 8011d10:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011d14:	4770      	bx	lr
    else return 0.0f;
 8011d16:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8011d38 <LEAF_poly_blep+0x58>
}
 8011d1a:	4770      	bx	lr
        t /= dt;
 8011d1c:	eec0 7a20 	vdiv.f32	s15, s0, s1
        return t+t - t*t - 1.0f;
 8011d20:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8011d24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011d28:	ee27 0ae7 	vnmul.f32	s0, s15, s15
 8011d2c:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8011d30:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011d34:	4770      	bx	lr
 8011d36:	bf00      	nop
 8011d38:	00000000 	.word	0x00000000

08011d3c <LEAF_poly_blamp>:
    if ((0 <= t) && (t < (2.0f * dt)))
 8011d3c:	eddf 7a19 	vldr	s15, [pc, #100]	; 8011da4 <LEAF_poly_blamp+0x68>
 8011d40:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d48:	db25      	blt.n	8011d96 <LEAF_poly_blamp+0x5a>
 8011d4a:	ee30 7aa0 	vadd.f32	s14, s1, s1
 8011d4e:	eeb4 7ac0 	vcmpe.f32	s14, s0
 8011d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d56:	dd1e      	ble.n	8011d96 <LEAF_poly_blamp+0x5a>
        Lfloat x = (t / dt);
 8011d58:	ee80 6a20 	vdiv.f32	s12, s0, s1
        Lfloat u = 2.0f - x;
 8011d5c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
        if (t < dt)
 8011d60:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8011d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        Lfloat u = 2.0f - x;
 8011d68:	ee37 7a46 	vsub.f32	s14, s14, s12
        Lfloat u2 = u * u;
 8011d6c:	ee67 6a07 	vmul.f32	s13, s14, s14
        y -= u;
 8011d70:	ee66 6ae6 	vnmul.f32	s13, s13, s13
 8011d74:	eee6 7a87 	vfma.f32	s15, s13, s14
        if (t < dt)
 8011d78:	d50d      	bpl.n	8011d96 <LEAF_poly_blamp+0x5a>
        	Lfloat v = 1.0f - x;
 8011d7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
            y += 4.0f * v;
 8011d7e:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0
        	Lfloat v = 1.0f - x;
 8011d82:	ee76 6ac6 	vsub.f32	s13, s13, s12
        	Lfloat v2 = v * v;
 8011d86:	ee26 7aa6 	vmul.f32	s14, s13, s13
            v *= v2 * v2;
 8011d8a:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011d8e:	ee27 7a26 	vmul.f32	s14, s14, s13
            y += 4.0f * v;
 8011d92:	eee7 7a25 	vfma.f32	s15, s14, s11
    return y * dt / 0.066666666666667f; // divide by 15
 8011d96:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8011d9a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8011da8 <LEAF_poly_blamp+0x6c>
}
 8011d9e:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8011da2:	4770      	bx	lr
 8011da4:	00000000 	.word	0x00000000
 8011da8:	3d888889 	.word	0x3d888889

08011dac <LEAF_interpolate_hermite_x>:
    Lfloat y0my1 = yy0 - yy1;
 8011dac:	ee70 7a60 	vsub.f32	s15, s0, s1
    Lfloat c1 = 0.5f * (yy2 - yy0);
 8011db0:	ee31 7a40 	vsub.f32	s14, s2, s0
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8011db4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011db8:	ee71 1ae7 	vsub.f32	s3, s3, s15
 8011dbc:	ee70 6ac1 	vsub.f32	s13, s1, s2
    Lfloat c2 = y0my1 + c1 - c3;
 8011dc0:	eee7 7a06 	vfma.f32	s15, s14, s12
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8011dc4:	ee31 1ac1 	vsub.f32	s2, s3, s2
 8011dc8:	eee1 6a06 	vfma.f32	s13, s2, s12
    Lfloat c2 = y0my1 + c1 - c3;
 8011dcc:	ee77 7ae6 	vsub.f32	s15, s15, s13
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 8011dd0:	eee6 7a82 	vfma.f32	s15, s13, s4
 8011dd4:	ee67 7a82 	vmul.f32	s15, s15, s4
 8011dd8:	eee7 7a06 	vfma.f32	s15, s14, s12
}
 8011ddc:	eee7 0a82 	vfma.f32	s1, s15, s4
 8011de0:	eeb0 0a60 	vmov.f32	s0, s1
 8011de4:	4770      	bx	lr
 8011de6:	bf00      	nop

08011de8 <LEAF_interpolation_linear>:
    if (val < min)
 8011de8:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8011e2c <LEAF_interpolation_linear+0x44>
 8011dec:	eeb4 1ac7 	vcmpe.f32	s2, s14
 8011df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011df4:	d414      	bmi.n	8011e20 <LEAF_interpolation_linear+0x38>
    else if (val > max)
 8011df6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011dfa:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8011dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e02:	dc08      	bgt.n	8011e16 <LEAF_interpolation_linear+0x2e>
    Lfloat omAlpha = 1.0f - alpha;
 8011e04:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
 8011e08:	ee60 0a81 	vmul.f32	s1, s1, s2
    Lfloat out = A * omAlpha;
 8011e0c:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8011e10:	ee30 0a80 	vadd.f32	s0, s1, s0
 8011e14:	4770      	bx	lr
    Lfloat out = A * omAlpha;
 8011e16:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 8011e1a:	ee30 0a80 	vadd.f32	s0, s1, s0
 8011e1e:	4770      	bx	lr
    out += B * alpha;
 8011e20:	ee60 0a87 	vmul.f32	s1, s1, s14
}
 8011e24:	ee30 0a80 	vadd.f32	s0, s1, s0
 8011e28:	4770      	bx	lr
 8011e2a:	bf00      	nop
 8011e2c:	00000000 	.word	0x00000000

08011e30 <mtof>:
    if (f <= -1500.0f) return(0);
 8011e30:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8011e70 <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8011e34:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8011e74 <mtof+0x44>
 8011e38:	e006      	b.n	8011e48 <mtof+0x18>
 8011e3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e42:	dd09      	ble.n	8011e58 <mtof+0x28>
 8011e44:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
 8011e48:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e50:	d8f3      	bhi.n	8011e3a <mtof+0xa>
 8011e52:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8011e78 <mtof+0x48>
}
 8011e56:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
 8011e58:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011e7c <mtof+0x4c>
{
 8011e5c:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8011e5e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011e62:	f004 fd85 	bl	8016970 <expf>
 8011e66:	eddf 7a06 	vldr	s15, [pc, #24]	; 8011e80 <mtof+0x50>
 8011e6a:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8011e6e:	bd08      	pop	{r3, pc}
 8011e70:	c4bb8000 	.word	0xc4bb8000
 8011e74:	44bb6000 	.word	0x44bb6000
 8011e78:	00000000 	.word	0x00000000
 8011e7c:	3d6c9820 	.word	0x3d6c9820
 8011e80:	4102d013 	.word	0x4102d013

08011e84 <faster_mtof>:
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 8011e84:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8011ec4 <faster_mtof+0x40>
    x = 1.0f + (x * 0.00390625f);
 8011e88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011e8c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8011ec8 <faster_mtof+0x44>
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 8011e90:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011e94:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8011ecc <faster_mtof+0x48>
    x = 1.0f + (x * 0.00390625f);
 8011e98:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
 8011e9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011ea0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011ea4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011ea8:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
 8011eac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011eb0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011eb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011eb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 8011ebc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011ec0:	4770      	bx	lr
 8011ec2:	bf00      	nop
 8011ec4:	3d6c9820 	.word	0x3d6c9820
 8011ec8:	3b800000 	.word	0x3b800000
 8011ecc:	4102d013 	.word	0x4102d013

08011ed0 <ftom>:
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8011ed0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ed8:	dc02      	bgt.n	8011ee0 <ftom+0x10>
 8011eda:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8011ef8 <ftom+0x28>
}
 8011ede:	4770      	bx	lr
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8011ee0:	eddf 7a06 	vldr	s15, [pc, #24]	; 8011efc <ftom+0x2c>
{
 8011ee4:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8011ee6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011eea:	f004 fdb5 	bl	8016a58 <logf>
 8011eee:	eddf 7a04 	vldr	s15, [pc, #16]	; 8011f00 <ftom+0x30>
 8011ef2:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8011ef6:	bd08      	pop	{r3, pc}
 8011ef8:	c4bb8000 	.word	0xc4bb8000
 8011efc:	3dfa7ed2 	.word	0x3dfa7ed2
 8011f00:	418a7fac 	.word	0x418a7fac

08011f04 <fasteratodb>:
{
 8011f04:	b500      	push	{lr}
 8011f06:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
 8011f08:	eeb0 0ac0 	vabs.f32	s0, s0
 8011f0c:	a801      	add	r0, sp, #4
 8011f0e:	f004 fd09 	bl	8016924 <frexpf>
    Y += -4.11852516267426f;
 8011f12:	eddf 5a10 	vldr	s11, [pc, #64]	; 8011f54 <fasteratodb+0x50>
 8011f16:	eddf 7a10 	vldr	s15, [pc, #64]	; 8011f58 <fasteratodb+0x54>
    Y += 6.02197014179219f;
 8011f1a:	eddf 6a10 	vldr	s13, [pc, #64]	; 8011f5c <fasteratodb+0x58>
    Y += -4.11852516267426f;
 8011f1e:	eee0 7a25 	vfma.f32	s15, s0, s11
    Y += -3.13396450166353f;
 8011f22:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8011f60 <fasteratodb+0x5c>
	return 20.0f*log10f_fast(a);
 8011f26:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 8011f64 <fasteratodb+0x60>
 8011f2a:	eef3 5a04 	vmov.f32	s11, #52	; 0x41a00000  20.0
    Y += -4.11852516267426f;
 8011f2e:	eeb0 6a67 	vmov.f32	s12, s15
    Y += E;
 8011f32:	eddd 7a01 	vldr	s15, [sp, #4]
 8011f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    Y += 6.02197014179219f;
 8011f3a:	eee0 6a06 	vfma.f32	s13, s0, s12
    Y += -3.13396450166353f;
 8011f3e:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
 8011f42:	ee77 7a87 	vadd.f32	s15, s15, s14
	return 20.0f*log10f_fast(a);
 8011f46:	ee67 7a85 	vmul.f32	s15, s15, s10
}
 8011f4a:	ee27 0aa5 	vmul.f32	s0, s15, s11
 8011f4e:	b003      	add	sp, #12
 8011f50:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f54:	3f9da1a8 	.word	0x3f9da1a8
 8011f58:	c083caf5 	.word	0xc083caf5
 8011f5c:	40c0b3fb 	.word	0x40c0b3fb
 8011f60:	c04892e0 	.word	0xc04892e0
 8011f64:	3e9a209b 	.word	0x3e9a209b

08011f68 <fasterdbtoa>:
}

inline Lfloat fasterdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 8011f68:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8011fa0 <fasterdbtoa+0x38>
    x = 1.0f + (x * 0.00390625f);
 8011f6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011f70:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8011fa4 <fasterdbtoa+0x3c>
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 8011f74:	ee20 7a07 	vmul.f32	s14, s0, s14
    x = 1.0f + (x * 0.00390625f);
 8011f78:	eee7 7a26 	vfma.f32	s15, s14, s13
    x *= x; x *= x; x *= x; x *= x;
 8011f7c:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8011f80:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011f84:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011f88:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8011f8c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011f90:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011f94:	ee20 0a00 	vmul.f32	s0, s0, s0
}
 8011f98:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011f9c:	4770      	bx	lr
 8011f9e:	bf00      	nop
 8011fa0:	3debc8e3 	.word	0x3debc8e3
 8011fa4:	3b800000 	.word	0x3b800000

08011fa8 <maximum>:


inline Lfloat maximum (Lfloat num1, Lfloat num2)
{
    return (num1 > num2 ) ? num1 : num2;
 8011fa8:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8011fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8011fb0:	fe30 0a20 	vselgt.f32	s0, s0, s1
 8011fb4:	4770      	bx	lr
 8011fb6:	bf00      	nop

08011fb8 <minimum>:

inline Lfloat minimum (Lfloat num1, Lfloat num2)
{
    return (num1 < num2 ) ? num1 : num2;
 8011fb8:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8011fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8011fc0:	bf58      	it	pl
 8011fc2:	eeb0 0a60 	vmovpl.f32	s0, s1
 8011fc6:	4770      	bx	lr

08011fc8 <leaf_pool_init>:
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
}


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8011fc8:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8011fca:	6a03      	ldr	r3, [r0, #32]
 8011fcc:	2510      	movs	r5, #16
    pool->usize  = 0;
 8011fce:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8011fd0:	635d      	str	r5, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
 8011fd2:	6a03      	ldr	r3, [r0, #32]
    pool->usize  = 0;
 8011fd4:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    if (size < pool->leaf->header_size)
 8011fd8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8011fda:	42aa      	cmp	r2, r5
 8011fdc:	bf38      	it	cc
 8011fde:	462a      	movcc	r2, r5
    pool->msize  = size;
 8011fe0:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8011fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fe4:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 8011fe6:	440b      	add	r3, r1
 8011fe8:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 8011fea:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 8011fee:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 8011ff0:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 8011ff4:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8011ff6:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 8011ff8:	6183      	str	r3, [r0, #24]
}
 8011ffa:	4770      	bx	lr

08011ffc <mpool_alloc>:
{
 8011ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8011ffe:	684a      	ldr	r2, [r1, #4]
{
 8012000:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8012002:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8012004:	3301      	adds	r3, #1
 8012006:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8012008:	694b      	ldr	r3, [r1, #20]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d04a      	beq.n	80120a4 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 801200e:	1dc4      	adds	r4, r0, #7
 8012010:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8012014:	e002      	b.n	801201c <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 8012016:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8012018:	2b00      	cmp	r3, #0
 801201a:	d043      	beq.n	80120a4 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 801201c:	68da      	ldr	r2, [r3, #12]
 801201e:	42a2      	cmp	r2, r4
 8012020:	d3f9      	bcc.n	8012016 <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 8012022:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8012024:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 8012026:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801202a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801202c:	4281      	cmp	r1, r0
 801202e:	d246      	bcs.n	80120be <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8012030:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8012034:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8012036:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8012038:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 801203a:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 801203c:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 801203e:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 8012042:	4429      	add	r1, r5
 8012044:	5111      	str	r1, [r2, r4]
    node->size = size;
 8012046:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 8012048:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 801204c:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8012050:	429a      	cmp	r2, r3
        pool->head = new_node;
 8012052:	bf08      	it	eq
 8012054:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8012058:	685a      	ldr	r2, [r3, #4]
 801205a:	b10a      	cbz	r2, 8012060 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 801205c:	6899      	ldr	r1, [r3, #8]
 801205e:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8012060:	689a      	ldr	r2, [r3, #8]
 8012062:	b10a      	cbz	r2, 8012068 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 8012064:	6859      	ldr	r1, [r3, #4]
 8012066:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 8012068:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 801206a:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 801206c:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8012070:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8012074:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8012078:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 801207a:	4422      	add	r2, r4
 801207c:	4402      	add	r2, r0
 801207e:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 8012082:	694a      	ldr	r2, [r1, #20]
 8012084:	42aa      	cmp	r2, r5
 8012086:	dd0b      	ble.n	80120a0 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8012088:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 801208a:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 801208c:	b14a      	cbz	r2, 80120a2 <mpool_alloc+0xa6>
 801208e:	1e41      	subs	r1, r0, #1
 8012090:	460a      	mov	r2, r1
 8012092:	f801 5f01 	strb.w	r5, [r1, #1]!
 8012096:	68dc      	ldr	r4, [r3, #12]
 8012098:	3202      	adds	r2, #2
 801209a:	1a12      	subs	r2, r2, r0
 801209c:	4294      	cmp	r4, r2
 801209e:	d8f7      	bhi.n	8012090 <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
 80120a0:	6818      	ldr	r0, [r3, #0]
}
 80120a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 80120a4:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 80120a8:	1a9b      	subs	r3, r3, r2
 80120aa:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80120ac:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80120b0:	bf8c      	ite	hi
 80120b2:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80120b4:	2100      	movls	r1, #0
 80120b6:	f004 fb95 	bl	80167e4 <LEAF_internalErrorCallback>
        return NULL;
 80120ba:	2000      	movs	r0, #0
}
 80120bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 80120be:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 80120c0:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 80120c2:	e7c3      	b.n	801204c <mpool_alloc+0x50>

080120c4 <mpool_calloc>:
{
 80120c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 80120c6:	684a      	ldr	r2, [r1, #4]
{
 80120c8:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 80120ca:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80120cc:	3301      	adds	r3, #1
 80120ce:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 80120d0:	694b      	ldr	r3, [r1, #20]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d044      	beq.n	8012160 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80120d6:	1dc4      	adds	r4, r0, #7
 80120d8:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 80120dc:	e002      	b.n	80120e4 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 80120de:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d03d      	beq.n	8012160 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 80120e4:	68da      	ldr	r2, [r3, #12]
 80120e6:	42a2      	cmp	r2, r4
 80120e8:	d3f9      	bcc.n	80120de <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 80120ea:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80120ec:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 80120ee:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80120f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80120f4:	4281      	cmp	r1, r0
 80120f6:	d240      	bcs.n	801217a <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80120f8:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 80120fc:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 80120fe:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8012100:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8012102:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8012104:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 8012106:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 801210a:	4429      	add	r1, r5
 801210c:	5111      	str	r1, [r2, r4]
    node->size = size;
 801210e:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 8012110:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8012114:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8012118:	429a      	cmp	r2, r3
        pool->head = new_node;
 801211a:	bf08      	it	eq
 801211c:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 8012120:	685a      	ldr	r2, [r3, #4]
 8012122:	b10a      	cbz	r2, 8012128 <mpool_calloc+0x64>
        node->next->prev = node->prev;
 8012124:	6899      	ldr	r1, [r3, #8]
 8012126:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 8012128:	689a      	ldr	r2, [r3, #8]
 801212a:	b10a      	cbz	r2, 8012130 <mpool_calloc+0x6c>
        node->prev->next = node->next;
 801212c:	6859      	ldr	r1, [r3, #4]
 801212e:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8012130:	2200      	movs	r2, #0
    node->prev = NULL;
 8012132:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8012136:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801213a:	f8dc 000c 	ldr.w	r0, [ip, #12]
 801213e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8012140:	4401      	add	r1, r0
 8012142:	68d8      	ldr	r0, [r3, #12]
 8012144:	4401      	add	r1, r0
 8012146:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 801214a:	68d9      	ldr	r1, [r3, #12]
 801214c:	b131      	cbz	r1, 801215c <mpool_calloc+0x98>
 801214e:	4610      	mov	r0, r2
 8012150:	6819      	ldr	r1, [r3, #0]
 8012152:	5488      	strb	r0, [r1, r2]
 8012154:	3201      	adds	r2, #1
 8012156:	68d9      	ldr	r1, [r3, #12]
 8012158:	4291      	cmp	r1, r2
 801215a:	d8f9      	bhi.n	8012150 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 801215c:	6818      	ldr	r0, [r3, #0]
}
 801215e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8012160:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 8012164:	1a9b      	subs	r3, r3, r2
 8012166:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8012168:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 801216c:	bf8c      	ite	hi
 801216e:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8012170:	2100      	movls	r1, #0
 8012172:	f004 fb37 	bl	80167e4 <LEAF_internalErrorCallback>
        return NULL;
 8012176:	2000      	movs	r0, #0
}
 8012178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 801217a:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 801217c:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 801217e:	e7c9      	b.n	8012114 <mpool_calloc+0x50>

08012180 <mpool_free>:
{
 8012180:	b470      	push	{r4, r5, r6}
    pool->leaf->freeCount++;
 8012182:	684a      	ldr	r2, [r1, #4]
 8012184:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8012186:	3301      	adds	r3, #1
 8012188:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
 801218a:	684e      	ldr	r6, [r1, #4]
    pool->usize -= pool->leaf->header_size + freed_node->size;
 801218c:	68cb      	ldr	r3, [r1, #12]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
 801218e:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8012190:	1a84      	subs	r4, r0, r2
    pool->usize -= pool->leaf->header_size + freed_node->size;
 8012192:	1a9b      	subs	r3, r3, r2
 8012194:	68e2      	ldr	r2, [r4, #12]
 8012196:	1a9a      	subs	r2, r3, r2
    mpool_node_t* other_node = pool->head;
 8012198:	694b      	ldr	r3, [r1, #20]
    pool->usize -= pool->leaf->header_size + freed_node->size;
 801219a:	60ca      	str	r2, [r1, #12]
    while (other_node != NULL)
 801219c:	2b00      	cmp	r3, #0
 801219e:	d051      	beq.n	8012244 <mpool_free+0xc4>
        if ((long) other_node < (long) pool->mpool ||
 80121a0:	688a      	ldr	r2, [r1, #8]
    node->next = NULL;
 80121a2:	2000      	movs	r0, #0
        if ((long) other_node < (long) pool->mpool ||
 80121a4:	429a      	cmp	r2, r3
 80121a6:	dc17      	bgt.n	80121d8 <mpool_free+0x58>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
 80121a8:	690d      	ldr	r5, [r1, #16]
 80121aa:	442a      	add	r2, r5
        if ((long) other_node < (long) pool->mpool ||
 80121ac:	429a      	cmp	r2, r3
 80121ae:	d913      	bls.n	80121d8 <mpool_free+0x58>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 80121b0:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80121b2:	68e6      	ldr	r6, [r4, #12]
        next_node = other_node->next;
 80121b4:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 80121b6:	eb02 0c06 	add.w	ip, r2, r6
 80121ba:	eb0c 0604 	add.w	r6, ip, r4
 80121be:	42b3      	cmp	r3, r6
 80121c0:	d029      	beq.n	8012216 <mpool_free+0x96>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
 80121c2:	68de      	ldr	r6, [r3, #12]
 80121c4:	441a      	add	r2, r3
 80121c6:	4432      	add	r2, r6
 80121c8:	4294      	cmp	r4, r2
 80121ca:	d00a      	beq.n	80121e2 <mpool_free+0x62>
    while (other_node != NULL)
 80121cc:	b1e5      	cbz	r5, 8012208 <mpool_free+0x88>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 80121ce:	462b      	mov	r3, r5
        if ((long) other_node < (long) pool->mpool ||
 80121d0:	688a      	ldr	r2, [r1, #8]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 80121d2:	684e      	ldr	r6, [r1, #4]
        if ((long) other_node < (long) pool->mpool ||
 80121d4:	429a      	cmp	r2, r3
 80121d6:	dde7      	ble.n	80121a8 <mpool_free+0x28>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
 80121d8:	4630      	mov	r0, r6
 80121da:	2102      	movs	r1, #2
}
 80121dc:	bc70      	pop	{r4, r5, r6}
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
 80121de:	f004 bb01 	b.w	80167e4 <LEAF_internalErrorCallback>
            other_node->size += pool->leaf->header_size + freed_node->size;
 80121e2:	4466      	add	r6, ip
 80121e4:	60de      	str	r6, [r3, #12]
            if (other_node != pool->head)
 80121e6:	694a      	ldr	r2, [r1, #20]
 80121e8:	429a      	cmp	r2, r3
 80121ea:	d025      	beq.n	8012238 <mpool_free+0xb8>
    if (node->next != NULL)
 80121ec:	b10d      	cbz	r5, 80121f2 <mpool_free+0x72>
        node->next->prev = node->prev;
 80121ee:	689a      	ldr	r2, [r3, #8]
 80121f0:	60aa      	str	r2, [r5, #8]
    if (node->prev != NULL)
 80121f2:	689a      	ldr	r2, [r3, #8]
 80121f4:	b10a      	cbz	r2, 80121fa <mpool_free+0x7a>
        node->prev->next = node->next;
 80121f6:	685c      	ldr	r4, [r3, #4]
 80121f8:	6054      	str	r4, [r2, #4]
    node->next = NULL;
 80121fa:	461c      	mov	r4, r3
    node->prev = NULL;
 80121fc:	e9c3 0001 	strd	r0, r0, [r3, #4]
                other_node->next = pool->head;
 8012200:	694a      	ldr	r2, [r1, #20]
 8012202:	605a      	str	r2, [r3, #4]
    while (other_node != NULL)
 8012204:	2d00      	cmp	r5, #0
 8012206:	d1e2      	bne.n	80121ce <mpool_free+0x4e>
    freed_node->next = pool->head;
 8012208:	694b      	ldr	r3, [r1, #20]
 801220a:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 801220c:	b103      	cbz	r3, 8012210 <mpool_free+0x90>
 801220e:	609c      	str	r4, [r3, #8]
    pool->head = freed_node;
 8012210:	614c      	str	r4, [r1, #20]
}
 8012212:	bc70      	pop	{r4, r5, r6}
 8012214:	4770      	bx	lr
            freed_node->size += pool->leaf->header_size + other_node->size;
 8012216:	68da      	ldr	r2, [r3, #12]
 8012218:	4462      	add	r2, ip
 801221a:	60e2      	str	r2, [r4, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
 801221c:	694a      	ldr	r2, [r1, #20]
 801221e:	429a      	cmp	r2, r3
 8012220:	d00d      	beq.n	801223e <mpool_free+0xbe>
    if (node->next != NULL)
 8012222:	685a      	ldr	r2, [r3, #4]
 8012224:	b10a      	cbz	r2, 801222a <mpool_free+0xaa>
        node->next->prev = node->prev;
 8012226:	689e      	ldr	r6, [r3, #8]
 8012228:	6096      	str	r6, [r2, #8]
    if (node->prev != NULL)
 801222a:	689a      	ldr	r2, [r3, #8]
 801222c:	b10a      	cbz	r2, 8012232 <mpool_free+0xb2>
        node->prev->next = node->next;
 801222e:	685e      	ldr	r6, [r3, #4]
 8012230:	6056      	str	r6, [r2, #4]
    node->prev = NULL;
 8012232:	e9c3 0001 	strd	r0, r0, [r3, #4]
}
 8012236:	e7c9      	b.n	80121cc <mpool_free+0x4c>
                pool->head = pool->head->next;
 8012238:	461c      	mov	r4, r3
 801223a:	614d      	str	r5, [r1, #20]
                freed_node = other_node;
 801223c:	e7c6      	b.n	80121cc <mpool_free+0x4c>
            if (other_node == pool->head) pool->head = pool->head->next;
 801223e:	685a      	ldr	r2, [r3, #4]
 8012240:	614a      	str	r2, [r1, #20]
 8012242:	e7ee      	b.n	8012222 <mpool_free+0xa2>
    freed_node->next = pool->head;
 8012244:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 8012246:	e7e3      	b.n	8012210 <mpool_free+0x90>

08012248 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 8012248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 801224a:	699f      	ldr	r7, [r3, #24]
{
 801224c:	4606      	mov	r6, r0
 801224e:	460c      	mov	r4, r1
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8012250:	2018      	movs	r0, #24
 8012252:	4639      	mov	r1, r7
{
 8012254:	4615      	mov	r5, r2
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8012256:	f7ff fed1 	bl	8011ffc <mpool_alloc>
 801225a:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
 801225c:	687b      	ldr	r3, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801225e:	2210      	movs	r2, #16
    pool->usize  = 0;
 8012260:	2100      	movs	r1, #0
    m->leaf = mm->leaf;
 8012262:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8012264:	635a      	str	r2, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
 8012266:	6843      	ldr	r3, [r0, #4]
    pool->usize  = 0;
 8012268:	e9c0 4102 	strd	r4, r1, [r0, #8]
    if (size < pool->leaf->header_size)
 801226c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801226e:	42aa      	cmp	r2, r5
 8012270:	bf38      	it	cc
 8012272:	462a      	movcc	r2, r5
    pool->msize  = size;
 8012274:	6102      	str	r2, [r0, #16]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8012276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012278:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 801227a:	4423      	add	r3, r4
    node->prev = prev;
 801227c:	e9c4 1101 	strd	r1, r1, [r4, #4]
    node->pool = block_location + header_size;
 8012280:	6023      	str	r3, [r4, #0]
    node->size = size;
 8012282:	60e2      	str	r2, [r4, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8012284:	6144      	str	r4, [r0, #20]
}
 8012286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012288 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 8012288:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801228a:	698c      	ldr	r4, [r1, #24]
{
 801228c:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801228e:	2018      	movs	r0, #24
 8012290:	4621      	mov	r1, r4
 8012292:	f7ff feb3 	bl	8011ffc <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 8012296:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8012298:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
 801229a:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 801229e:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80122a0:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80122a2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80122bc <tCycle_init+0x34>
    c->phase    =  0;
 80122a6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80122aa:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 80122ae:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80122b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122b4:	edc0 7a04 	vstr	s15, [r0, #16]
}
 80122b8:	bd38      	pop	{r3, r4, r5, pc}
 80122ba:	bf00      	nop
 80122bc:	4f800000 	.word	0x4f800000

080122c0 <tCycle_initToPool>:
{
 80122c0:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 80122c2:	680c      	ldr	r4, [r1, #0]
{
 80122c4:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80122c6:	2018      	movs	r0, #24
 80122c8:	4621      	mov	r1, r4
 80122ca:	f7ff fe97 	bl	8011ffc <mpool_alloc>
    c->inc      =  0;
 80122ce:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80122d0:	6028      	str	r0, [r5, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 80122d2:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 80122d6:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80122d8:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80122da:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80122f4 <tCycle_initToPool+0x34>
    c->phase    =  0;
 80122de:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80122e2:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 80122e6:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80122e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80122ec:	edc0 7a04 	vstr	s15, [r0, #16]
}
 80122f0:	bd38      	pop	{r3, r4, r5, pc}
 80122f2:	bf00      	nop
 80122f4:	4f800000 	.word	0x4f800000

080122f8 <tCycle_free>:

void    tCycle_free (tCycle* const cy)
{
    _tCycle* c = *cy;
 80122f8:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)c, c->mempool);
 80122fa:	6801      	ldr	r1, [r0, #0]
 80122fc:	f7ff bf40 	b.w	8012180 <mpool_free>

08012300 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 8012300:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
 8012302:	4910      	ldr	r1, [pc, #64]	; (8012344 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8012304:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012348 <tCycle_tick+0x48>
    c->phase += c->inc;
 8012308:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801230c:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
 801230e:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
 8012310:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8012312:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 8012316:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8012318:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
 801231c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
 8012320:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8012322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 8012326:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
 801232a:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
 801232c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8012330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012334:	ed91 7a00 	vldr	s14, [r1]
 8012338:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 801233c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8012340:	4770      	bx	lr
 8012342:	bf00      	nop
 8012344:	08021d88 	.word	0x08021d88
 8012348:	35000004 	.word	0x35000004

0801234c <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
 801234c:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801234e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 8012352:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012356:	ee20 0a27 	vmul.f32	s0, s0, s15
 801235a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801235e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8012362:	4770      	bx	lr

08012364 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
 8012364:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8012368:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8012384 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
 801236c:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801236e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012372:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8012376:	ee20 0a07 	vmul.f32	s0, s0, s14
 801237a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801237e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8012382:	4770      	bx	lr
 8012384:	4f800000 	.word	0x4f800000

08012388 <tCycle_setSampleRate>:

void     tCycle_setSampleRate (tCycle* const cy, Lfloat sr)
{
    _tCycle* c = *cy;
    
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 8012388:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801238c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80123bc <tCycle_setSampleRate+0x34>
    _tCycle* c = *cy;
 8012390:	6803      	ldr	r3, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 8012392:	ee87 7a80 	vdiv.f32	s14, s15, s0
    tCycle_setFreq(cy, c->freq);
 8012396:	edd3 7a03 	vldr	s15, [r3, #12]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 801239a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801239e:	ed83 7a04 	vstr	s14, [r3, #16]
    _tCycle* c = *cy;
 80123a2:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80123a4:	ed93 7a04 	vldr	s14, [r3, #16]
    c->freq  = freq;
 80123a8:	edc3 7a03 	vstr	s15, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80123ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80123b4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80123b8:	4770      	bx	lr
 80123ba:	bf00      	nop
 80123bc:	4f800000 	.word	0x4f800000

080123c0 <tPBTriangle_init>:

//==============================================================================

/* tTri: Anti-aliased Triangle waveform. */
void    tPBTriangle_init          (tPBTriangle* const osc, LEAF* const leaf)
{
 80123c0:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 80123c2:	698c      	ldr	r4, [r1, #24]
{
 80123c4:	4605      	mov	r5, r0
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
 80123c6:	2020      	movs	r0, #32
 80123c8:	4621      	mov	r1, r4
 80123ca:	f7ff fe17 	bl	8011ffc <mpool_alloc>
 80123ce:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 80123d0:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;

    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
    c->skew     =  0.5f;
 80123d2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
 80123d6:	6861      	ldr	r1, [r4, #4]
    c->inc      =  0.0f;
 80123d8:	2300      	movs	r3, #0
    c->phase    =  0.25f;
 80123da:	f04f 5c7a 	mov.w	ip, #1048576000	; 0x3e800000
    c->invSampleRate = leaf->invSampleRate;
 80123de:	6849      	ldr	r1, [r1, #4]
    c->phase    =  0.25f;
 80123e0:	f8c0 c004 	str.w	ip, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 80123e4:	61c1      	str	r1, [r0, #28]
    c->inc      =  0.0f;
 80123e6:	6083      	str	r3, [r0, #8]
    c->skew     =  0.5f;
 80123e8:	6102      	str	r2, [r0, #16]
    c->oneMinusSkew     =  0.5f;
 80123ea:	6142      	str	r2, [r0, #20]
    c->lastOut  =  0.0f;
 80123ec:	6183      	str	r3, [r0, #24]
}
 80123ee:	bd38      	pop	{r3, r4, r5, pc}

080123f0 <tPBTriangle_tick>:
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_tick          (tPBTriangle* const osc)
#else
Lfloat   tPBTriangle_tick          (tPBTriangle* const osc)
#endif

{
 80123f0:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
 80123f2:	6804      	ldr	r4, [r0, #0]
{
 80123f4:	ed2d 8b04 	vpush	{d8-d9}

    Lfloat t = c->phase;
    Lfloat dt = 0.0f;
    if (c->inc >=0)
 80123f8:	edd4 0a02 	vldr	s1, [r4, #8]
{
 80123fc:	b082      	sub	sp, #8
    Lfloat t = c->phase;
 80123fe:	edd4 8a01 	vldr	s17, [r4, #4]
    if (c->inc >=0)
 8012402:	eef5 0ac0 	vcmpe.f32	s1, #0.0
    //compute the naive waveform
    
    //Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    Lfloat v = 0.0f;
    
    if (t < c->skew)
 8012406:	edd4 7a04 	vldr	s15, [r4, #16]
    if (c->inc >=0)
 801240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (t < c->skew)
 801240e:	eef4 7ae8 	vcmpe.f32	s15, s17
        dt = -1.0f * c->inc;
 8012412:	bfa8      	it	ge
 8012414:	eef1 0a60 	vnegge.f32	s1, s1
    if (t < c->skew)
 8012418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801241c:	dd7c      	ble.n	8012518 <tPBTriangle_tick+0x128>
    {
        v = 2.0f * t / c->skew - 1.0f;
 801241e:	ee38 7aa8 	vadd.f32	s14, s17, s17
 8012422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012426:	ee87 9a27 	vdiv.f32	s18, s14, s15
 801242a:	ee39 9a66 	vsub.f32	s18, s18, s13
    }
    if (t >= c->skew)
 801242e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8012432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012436:	d80d      	bhi.n	8012454 <tPBTriangle_tick+0x64>
    {
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
 8012438:	ee78 7ae7 	vsub.f32	s15, s17, s15
 801243c:	edd4 6a05 	vldr	s13, [r4, #20]
 8012440:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 8012444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012448:	ee67 7a86 	vmul.f32	s15, s15, s12
 801244c:	ee87 9aa6 	vdiv.f32	s18, s15, s13
 8012450:	ee39 9a07 	vadd.f32	s18, s18, s14
    }

    //add the blamps
    v += LEAF_poly_blamp(t,  dt);
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8012454:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    v += LEAF_poly_blamp(t,  dt);
 8012458:	edcd 0a01 	vstr	s1, [sp, #4]
 801245c:	eeb0 0a68 	vmov.f32	s0, s17
 8012460:	f7ff fc6c 	bl	8011d3c <LEAF_poly_blamp>
 8012464:	eef0 7a40 	vmov.f32	s15, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8012468:	eddd 0a01 	vldr	s1, [sp, #4]
 801246c:	ee38 0a68 	vsub.f32	s0, s16, s17
    v += LEAF_poly_blamp(t,  dt);
 8012470:	ee39 9a27 	vadd.f32	s18, s18, s15
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8012474:	f7ff fc62 	bl	8011d3c <LEAF_poly_blamp>
    t += 0.5f;
 8012478:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    t -= (int)(t);
    v -= LEAF_poly_blamp(t, dt);
 801247c:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8012480:	ee39 9a00 	vadd.f32	s18, s18, s0
    t += 0.5f;
 8012484:	ee78 8aa7 	vadd.f32	s17, s17, s15
    t -= (int)(t);
 8012488:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 801248c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012490:	ee78 8ae7 	vsub.f32	s17, s17, s15
    v -= LEAF_poly_blamp(t, dt);
 8012494:	eeb0 0a68 	vmov.f32	s0, s17
 8012498:	f7ff fc50 	bl	8011d3c <LEAF_poly_blamp>
 801249c:	eef0 7a40 	vmov.f32	s15, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 80124a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80124a4:	ee38 0a68 	vsub.f32	s0, s16, s17
    v -= LEAF_poly_blamp(t, dt);
 80124a8:	ee39 9a67 	vsub.f32	s18, s18, s15
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 80124ac:	f7ff fc46 	bl	8011d3c <LEAF_poly_blamp>

    //increment phase for next tick
    c->phase += c->inc - (int)c->inc;
 80124b0:	edd4 7a02 	vldr	s15, [r4, #8]
 80124b4:	edd4 6a01 	vldr	s13, [r4, #4]
 80124b8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 80124bc:	ee39 0a40 	vsub.f32	s0, s18, s0
    c->phase += c->inc - (int)c->inc;
 80124c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80124c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80124c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
	while (c->phase >= 1.0f) c->phase -= 1.0f;
 80124cc:	eef4 7ac8 	vcmpe.f32	s15, s16
    c->phase += c->inc - (int)c->inc;
 80124d0:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase >= 1.0f) c->phase -= 1.0f;
 80124d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124d8:	db08      	blt.n	80124ec <tPBTriangle_tick+0xfc>
 80124da:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80124de:	eef4 7ac8 	vcmpe.f32	s15, s16
 80124e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124e6:	daf8      	bge.n	80124da <tPBTriangle_tick+0xea>
 80124e8:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase < 0.0f) c->phase += 1.0f;
 80124ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80124f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f4:	d50a      	bpl.n	801250c <tPBTriangle_tick+0x11c>
 80124f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80124fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80124fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012506:	d4f8      	bmi.n	80124fa <tPBTriangle_tick+0x10a>
 8012508:	edc4 7a01 	vstr	s15, [r4, #4]
	return -v;
}
 801250c:	eeb1 0a40 	vneg.f32	s0, s0
 8012510:	b002      	add	sp, #8
 8012512:	ecbd 8b04 	vpop	{d8-d9}
 8012516:	bd10      	pop	{r4, pc}
    Lfloat v = 0.0f;
 8012518:	ed9f 9a01 	vldr	s18, [pc, #4]	; 8012520 <tPBTriangle_tick+0x130>
 801251c:	e787      	b.n	801242e <tPBTriangle_tick+0x3e>
 801251e:	bf00      	nop
 8012520:	00000000 	.word	0x00000000

08012524 <tPBTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#else
void    tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#endif
{
    _tPBTriangle* c = *osc;
 8012524:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
 8012526:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
 801252a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
 801252e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8012532:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8012536:	4770      	bx	lr

08012538 <tPBTriangle_setSkew>:

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat mySkew)
{
 8012538:	eef0 0a40 	vmov.f32	s1, s0
    _tPBTriangle* c = *osc;

    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
 801253c:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 801256c <tPBTriangle_setSkew+0x34>
 8012540:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8012570 <tPBTriangle_setSkew+0x38>
{
 8012544:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
 8012546:	6804      	ldr	r4, [r0, #0]
    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
 8012548:	f7ff fa1c 	bl	8011984 <LEAF_clip>
    c->skew = (mySkew + 1.0f) * 0.5f;
 801254c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012550:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012554:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012558:	ee20 0a07 	vmul.f32	s0, s0, s14
    c->oneMinusSkew = 1.0f - c->skew;
 801255c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->skew = (mySkew + 1.0f) * 0.5f;
 8012560:	ed84 0a04 	vstr	s0, [r4, #16]
    c->oneMinusSkew = 1.0f - c->skew;
 8012564:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8012568:	bd10      	pop	{r4, pc}
 801256a:	bf00      	nop
 801256c:	3f7d70a4 	.word	0x3f7d70a4
 8012570:	3c23d70a 	.word	0x3c23d70a

08012574 <tPBSineTriangle_initToPool>:
{
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
 8012574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 8012576:	680e      	ldr	r6, [r1, #0]
{
 8012578:	4607      	mov	r7, r0
 801257a:	460d      	mov	r5, r1
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
 801257c:	2028      	movs	r0, #40	; 0x28
 801257e:	4631      	mov	r1, r6
 8012580:	f7ff fd3c 	bl	8011ffc <mpool_alloc>
 8012584:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8012586:	6006      	str	r6, [r0, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
 8012588:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 801258a:	682d      	ldr	r5, [r5, #0]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801258c:	2018      	movs	r0, #24
    LEAF* leaf = c->mempool->leaf;
 801258e:	6876      	ldr	r6, [r6, #4]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8012590:	4629      	mov	r1, r5
 8012592:	f7ff fd33 	bl	8011ffc <mpool_alloc>
    c->inc      =  0;
 8012596:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8012598:	61e0      	str	r0, [r4, #28]
    c->mask = SINE_TABLE_SIZE - 1;
 801259a:	f240 71ff 	movw	r1, #2047	; 0x7ff
    c->mempool = m;
 801259e:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80125a0:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80125a2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80125d8 <tPBSineTriangle_initToPool+0x64>
    c->phase    =  0;
 80125a6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80125aa:	edd2 7a01 	vldr	s15, [r2, #4]
    tCycle_initToPool(&c->sine, mp);
    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
 80125ae:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->mask = SINE_TABLE_SIZE - 1;
 80125b2:	6141      	str	r1, [r0, #20]
    c->inc      =  0.0f;
 80125b4:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80125b6:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->shape     =  0.0f;
    c->skew 	 = 0.5f;
 80125ba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80125be:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
 80125c2:	6870      	ldr	r0, [r6, #4]
    c->phase    =  0.25f;
 80125c4:	6062      	str	r2, [r4, #4]
    c->oneMinusShape = 1.0f;
 80125c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->inc      =  0.0f;
 80125ca:	60a3      	str	r3, [r4, #8]
    c->invSampleRate = leaf->invSampleRate;
 80125cc:	61a0      	str	r0, [r4, #24]
    c->shape     =  0.0f;
 80125ce:	6123      	str	r3, [r4, #16]
    c->lastOut  =  0.0f;
 80125d0:	6163      	str	r3, [r4, #20]
    c->skew 	 = 0.5f;
 80125d2:	6261      	str	r1, [r4, #36]	; 0x24
    c->oneMinusShape = 1.0f;
 80125d4:	6222      	str	r2, [r4, #32]
}
 80125d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125d8:	4f800000 	.word	0x4f800000

080125dc <tPBSineTriangle_init>:
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
 80125dc:	3118      	adds	r1, #24
 80125de:	f7ff bfc9 	b.w	8012574 <tPBSineTriangle_initToPool>
 80125e2:	bf00      	nop

080125e4 <tPBSineTriangle_tick>:
    {
        dt = c->inc;
    }

    //compute the naive waveform
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 80125e4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80125e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
{
 80125ec:	b510      	push	{r4, lr}
 80125ee:	ed2d 8b04 	vpush	{d8-d9}
    _tPBSineTriangle* c = *osc;
 80125f2:	6804      	ldr	r4, [r0, #0]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 80125f4:	eeb0 7a67 	vmov.f32	s14, s15
{
 80125f8:	b082      	sub	sp, #8

    //add the blamps
    v += LEAF_poly_blamp(t,  dt);
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80125fa:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    Lfloat t = c->phase;
 80125fe:	ed94 9a01 	vldr	s18, [r4, #4]
    if (c->inc >=0)
 8012602:	edd4 0a02 	vldr	s1, [r4, #8]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 8012606:	eea9 7a26 	vfma.f32	s14, s18, s13
    if (c->inc >=0)
 801260a:	eef5 0ac0 	vcmpe.f32	s1, #0.0
    v += LEAF_poly_blamp(t,  dt);
 801260e:	eeb0 0a49 	vmov.f32	s0, s18
    if (c->inc >=0)
 8012612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 8012616:	eeb0 7ac7 	vabs.f32	s14, s14
        dt = -1.0f * c->inc;
 801261a:	bfa8      	it	ge
 801261c:	eef1 0a60 	vnegge.f32	s1, s1
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 8012620:	eee7 7a26 	vfma.f32	s15, s14, s13
    v += LEAF_poly_blamp(t,  dt);
 8012624:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 8012628:	eef0 8a67 	vmov.f32	s17, s15
    v += LEAF_poly_blamp(t,  dt);
 801262c:	f7ff fb86 	bl	8011d3c <LEAF_poly_blamp>
 8012630:	eef0 7a40 	vmov.f32	s15, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8012634:	eddd 0a01 	vldr	s1, [sp, #4]
 8012638:	ee38 0a49 	vsub.f32	s0, s16, s18
    v += LEAF_poly_blamp(t,  dt);
 801263c:	ee78 8aa7 	vadd.f32	s17, s17, s15
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8012640:	f7ff fb7c 	bl	8011d3c <LEAF_poly_blamp>
    t += 0.5f;
 8012644:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    t -= (int)(t);
    v -= LEAF_poly_blamp(t, dt);
 8012648:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(1.0f - t,  dt);
 801264c:	ee78 8a80 	vadd.f32	s17, s17, s0
    t += 0.5f;
 8012650:	ee39 9a27 	vadd.f32	s18, s18, s15
    t -= (int)(t);
 8012654:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8012658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801265c:	ee39 9a67 	vsub.f32	s18, s18, s15
    v -= LEAF_poly_blamp(t, dt);
 8012660:	eeb0 0a49 	vmov.f32	s0, s18
 8012664:	f7ff fb6a 	bl	8011d3c <LEAF_poly_blamp>
 8012668:	eef0 7a40 	vmov.f32	s15, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 801266c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012670:	ee38 0a49 	vsub.f32	s0, s16, s18
    v -= LEAF_poly_blamp(t, dt);
 8012674:	ee78 8ae7 	vsub.f32	s17, s17, s15
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8012678:	f7ff fb60 	bl	8011d3c <LEAF_poly_blamp>

    //increment phase for next tick
    c->phase += c->inc - (int)c->inc;
 801267c:	edd4 7a02 	vldr	s15, [r4, #8]
 8012680:	edd4 6a01 	vldr	s13, [r4, #4]
 8012684:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8012688:	ee78 8ac0 	vsub.f32	s17, s17, s0
    c->phase += c->inc - (int)c->inc;
 801268c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012690:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012694:	ee77 7aa6 	vadd.f32	s15, s15, s13
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8012698:	eef4 7ac8 	vcmpe.f32	s15, s16
    c->phase += c->inc - (int)c->inc;
 801269c:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 80126a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126a4:	db08      	blt.n	80126b8 <tPBSineTriangle_tick+0xd4>
 80126a6:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80126aa:	eef4 7ac8 	vcmpe.f32	s15, s16
 80126ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126b2:	daf8      	bge.n	80126a6 <tPBSineTriangle_tick+0xc2>
 80126b4:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase < 0.0f) c->phase += 1.0f;
 80126b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80126bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126c0:	d50a      	bpl.n	80126d8 <tPBSineTriangle_tick+0xf4>
 80126c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80126c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80126ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80126ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126d2:	d4f8      	bmi.n	80126c6 <tPBSineTriangle_tick+0xe2>
 80126d4:	edc4 7a01 	vstr	s15, [r4, #4]
    out = v * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)

    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
 80126d8:	f104 001c 	add.w	r0, r4, #28
    out = v * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
 80126dc:	edd4 6a04 	vldr	s13, [r4, #16]
    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
 80126e0:	f7ff fe0e 	bl	8012300 <tCycle_tick>
 80126e4:	edd4 7a08 	vldr	s15, [r4, #32]
 80126e8:	ee20 0a27 	vmul.f32	s0, s0, s15
    return out;
}
 80126ec:	eea6 0aa8 	vfma.f32	s0, s13, s17
 80126f0:	b002      	add	sp, #8
 80126f2:	ecbd 8b04 	vpop	{d8-d9}
 80126f6:	bd10      	pop	{r4, pc}

080126f8 <tPBSineTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#else
void    tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#endif
{
    _tPBSineTriangle* c = *osc;
 80126f8:	6803      	ldr	r3, [r0, #0]

    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
 80126fa:	edd3 7a06 	vldr	s15, [r3, #24]
    _tCycle* c = *cy;
 80126fe:	69da      	ldr	r2, [r3, #28]
    c->inc = freq * c->invSampleRate;
 8012700:	ee67 7a80 	vmul.f32	s15, s15, s0
    c->freq  = freq;
 8012704:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
 8012708:	edc3 7a02 	vstr	s15, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801270c:	edd2 7a04 	vldr	s15, [r2, #16]
    c->freq  = freq;
 8012710:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012714:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012718:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801271c:	ed82 0a02 	vstr	s0, [r2, #8]
    tCycle_setFreq(&c->sine, freq);
}
 8012720:	4770      	bx	lr
 8012722:	bf00      	nop

08012724 <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
    c->oneMinusShape = 1.0f - shape;
 8012724:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSineTriangle* c = *osc;
 8012728:	6803      	ldr	r3, [r0, #0]
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
 801272a:	eeb1 7a40 	vneg.f32	s14, s0
    c->oneMinusShape = 1.0f - shape;
 801272e:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
 8012732:	ed83 7a04 	vstr	s14, [r3, #16]
    c->oneMinusShape = 1.0f - shape;
 8012736:	edc3 7a08 	vstr	s15, [r3, #32]
}
 801273a:	4770      	bx	lr

0801273c <tPBPulse_init>:
}
//==============================================================================

/* tPulse: Anti-aliased pulse waveform. */
void    tPBPulse_init        (tPBPulse* const osc, LEAF* const leaf)
{
 801273c:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 801273e:	698c      	ldr	r4, [r1, #24]
{
 8012740:	4605      	mov	r5, r0
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
 8012742:	2020      	movs	r0, #32
 8012744:	4621      	mov	r1, r4
 8012746:	f7ff fc59 	bl	8011ffc <mpool_alloc>
 801274a:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 801274c:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 801274e:	2200      	movs	r2, #0
    c->invSampleRate = leaf->invSampleRate;
 8012750:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->width     =  (0.5f * TWO_TO_32);
 8012752:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8012756:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012778 <tPBPulse_init+0x3c>
    c->invSampleRate = leaf->invSampleRate;
 801275a:	ed91 7a01 	vldr	s14, [r1, #4]
    c->oneMinusWidth =  c->width;
    c->freq = 0.0f;
 801275e:	2100      	movs	r1, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8012760:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 8012764:	ed80 7a06 	vstr	s14, [r0, #24]
    c->freq = 0.0f;
 8012768:	60c1      	str	r1, [r0, #12]
    c->phase    =  0;
 801276a:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->oneMinusWidth =  c->width;
 801276e:	e9c0 3304 	strd	r3, r3, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8012772:	edc0 7a07 	vstr	s15, [r0, #28]
}
 8012776:	bd38      	pop	{r3, r4, r5, pc}
 8012778:	4f800000 	.word	0x4f800000

0801277c <tPBPulse_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_tick        (tPBPulse* const osc)
#else
Lfloat   tPBPulse_tick        (tPBPulse* const osc)
#endif
{
 801277c:	b510      	push	{r4, lr}
    _tPBPulse* c = *osc;
 801277e:	6804      	ldr	r4, [r0, #0]
    

    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 8012780:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8012784:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80127f8 <tPBPulse_tick+0x7c>
{
 8012788:	ed2d 8b02 	vpush	{d8}
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 801278c:	6862      	ldr	r2, [r4, #4]
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 801278e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 8012792:	edd4 6a02 	vldr	s13, [r4, #8]
{
 8012796:	b082      	sub	sp, #8
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 8012798:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 801279c:	eef8 0ae6 	vcvt.f32.s32	s1, s13
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 80127a0:	ee06 2a90 	vmov	s13, r2
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 80127a4:	18d3      	adds	r3, r2, r3
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 80127a6:	428a      	cmp	r2, r1
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 80127a8:	eeb8 0a66 	vcvt.f32.u32	s0, s13
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 80127ac:	ee08 3a10 	vmov	s16, r3
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 80127b0:	ee60 0aa7 	vmul.f32	s1, s1, s15
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 80127b4:	bf28      	it	cs
 80127b6:	eef0 8a47 	vmovcs.f32	s17, s14
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 80127ba:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
 80127be:	ee20 0a27 	vmul.f32	s0, s0, s15
 80127c2:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 80127c6:	ee28 8a27 	vmul.f32	s16, s16, s15
    out += LEAF_poly_blep(phaseFloat,incFloat);
 80127ca:	f7ff fa89 	bl	8011ce0 <LEAF_poly_blep>
 80127ce:	eef0 7a40 	vmov.f32	s15, s0
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 80127d2:	eddd 0a01 	vldr	s1, [sp, #4]
 80127d6:	eeb0 0a48 	vmov.f32	s0, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
 80127da:	ee77 8aa8 	vadd.f32	s17, s15, s17
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 80127de:	f7ff fa7f 	bl	8011ce0 <LEAF_poly_blep>
    c->phase += c->inc;
 80127e2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    return out;
}
 80127e6:	ee38 0ac0 	vsub.f32	s0, s17, s0
    c->phase += c->inc;
 80127ea:	4413      	add	r3, r2
 80127ec:	6063      	str	r3, [r4, #4]
}
 80127ee:	b002      	add	sp, #8
 80127f0:	ecbd 8b02 	vpop	{d8}
 80127f4:	bd10      	pop	{r4, pc}
 80127f6:	bf00      	nop
 80127f8:	2f80000d 	.word	0x2f80000d

080127fc <tPBPulse_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#else
void    tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#endif
{
    _tPBPulse* c = *osc;
 80127fc:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80127fe:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
 8012802:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012806:	ee20 0a27 	vmul.f32	s0, s0, s15
 801280a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801280e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8012812:	4770      	bx	lr

08012814 <tPBPulse_setWidth>:

void    tPBPulse_setWidth    (tPBPulse* const osc, Lfloat width)
{
    _tPBPulse* c = *osc;
    //clip width to avoid silence from pulse widths of 0 or 1
    if (width < 0.05f)
 8012814:	eddf 7a15 	vldr	s15, [pc, #84]	; 801286c <tPBPulse_setWidth+0x58>
    _tPBPulse* c = *osc;
 8012818:	6803      	ldr	r3, [r0, #0]
    if (width < 0.05f)
 801281a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801281e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012822:	d40b      	bmi.n	801283c <tPBPulse_setWidth+0x28>
    {
        width = 0.05f;
    }
    if (width > 0.95f)
 8012824:	eddf 7a12 	vldr	s15, [pc, #72]	; 8012870 <tPBPulse_setWidth+0x5c>
 8012828:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012830:	dd09      	ble.n	8012846 <tPBPulse_setWidth+0x32>
 8012832:	4910      	ldr	r1, [pc, #64]	; (8012874 <tPBPulse_setWidth+0x60>)
 8012834:	4a10      	ldr	r2, [pc, #64]	; (8012878 <tPBPulse_setWidth+0x64>)
    {
        width = 0.95f;
    }
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
    c->width = width * TWO_TO_32;
 8012836:	e9c3 1204 	strd	r1, r2, [r3, #16]
}
 801283a:	4770      	bx	lr
 801283c:	490f      	ldr	r1, [pc, #60]	; (801287c <tPBPulse_setWidth+0x68>)
 801283e:	4a0d      	ldr	r2, [pc, #52]	; (8012874 <tPBPulse_setWidth+0x60>)
    c->width = width * TWO_TO_32;
 8012840:	e9c3 1204 	strd	r1, r2, [r3, #16]
}
 8012844:	4770      	bx	lr
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8012846:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801284a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8012880 <tPBPulse_setWidth+0x6c>
    c->width = width * TWO_TO_32;
 801284e:	ee20 7a26 	vmul.f32	s14, s0, s13
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8012852:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->width = width * TWO_TO_32;
 8012856:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 801285a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    c->width = width * TWO_TO_32;
 801285e:	ee17 1a10 	vmov	r1, s14
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8012862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012866:	ee17 2a90 	vmov	r2, s15
 801286a:	e7e4      	b.n	8012836 <tPBPulse_setWidth+0x22>
 801286c:	3d4ccccd 	.word	0x3d4ccccd
 8012870:	3f733333 	.word	0x3f733333
 8012874:	f3333300 	.word	0xf3333300
 8012878:	0ccccd00 	.word	0x0ccccd00
 801287c:	0cccccd0 	.word	0x0cccccd0
 8012880:	4f800000 	.word	0x4f800000

08012884 <tPBSaw_init>:

//==============================================================================

/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSaw_init          (tPBSaw* const osc, LEAF* const leaf)
{
 8012884:	b538      	push	{r3, r4, r5, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012886:	698c      	ldr	r4, [r1, #24]
{
 8012888:	4605      	mov	r5, r0
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
 801288a:	2020      	movs	r0, #32
 801288c:	4621      	mov	r1, r4
 801288e:	f7ff fbb5 	bl	8011ffc <mpool_alloc>
 8012892:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8012894:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 8012896:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8012898:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
 801289a:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 801289c:	eddf 7a06 	vldr	s15, [pc, #24]	; 80128b8 <tPBSaw_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
 80128a0:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
 80128a4:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 80128a6:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 80128aa:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
 80128ae:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 80128b2:	edc0 7a05 	vstr	s15, [r0, #20]
}
 80128b6:	bd38      	pop	{r3, r4, r5, pc}
 80128b8:	4f800000 	.word	0x4f800000

080128bc <tPBSaw_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSaw_tick          (tPBSaw* const osc)
#else
Lfloat   tPBSaw_tick          (tPBSaw* const osc)
#endif
{
 80128bc:	b510      	push	{r4, lr}
    _tPBSaw* c = *osc;
 80128be:	6804      	ldr	r4, [r0, #0]
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
 80128c0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8012908 <tPBSaw_tick+0x4c>

    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 80128c4:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801290c <tPBSaw_tick+0x50>
{
 80128c8:	ed2d 8b02 	vpush	{d8}
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
 80128cc:	edd4 7a01 	vldr	s15, [r4, #4]
 80128d0:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 80128d4:	edd4 6a02 	vldr	s13, [r4, #8]
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
 80128d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 80128dc:	eef8 0ae6 	vcvt.f32.s32	s1, s13
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
 80128e0:	eea7 8a87 	vfma.f32	s16, s15, s14
    out -= LEAF_poly_blep(phaseFloat, incFloat);
 80128e4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80128e8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80128ec:	f7ff f9f8 	bl	8011ce0 <LEAF_poly_blep>
    c->phase += c->inc;
 80128f0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    out -= LEAF_poly_blep(phaseFloat, incFloat);
 80128f4:	ee38 0a40 	vsub.f32	s0, s16, s0
    c->phase += c->inc;
 80128f8:	4413      	add	r3, r2
 80128fa:	6063      	str	r3, [r4, #4]
    return (-1.0f * out);
}
 80128fc:	eeb1 0a40 	vneg.f32	s0, s0
 8012900:	ecbd 8b02 	vpop	{d8}
 8012904:	bd10      	pop	{r4, pc}
 8012906:	bf00      	nop
 8012908:	2ffffff6 	.word	0x2ffffff6
 801290c:	2f80000d 	.word	0x2f80000d

08012910 <tPBSaw_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#else
void    tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#endif
{
    _tPBSaw* c = *osc;
 8012910:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012912:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8012916:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801291a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801291e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012922:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8012926:	4770      	bx	lr

08012928 <tPBSawSquare_init>:
//========================================================================


/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSawSquare_init          (tPBSawSquare* const osc, LEAF* const leaf)
{
 8012928:	b538      	push	{r3, r4, r5, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 801292a:	698c      	ldr	r4, [r1, #24]
{
 801292c:	4605      	mov	r5, r0
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
 801292e:	2028      	movs	r0, #40	; 0x28
 8012930:	4621      	mov	r1, r4
 8012932:	f7ff fb63 	bl	8011ffc <mpool_alloc>
 8012936:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8012938:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 801293a:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 801293c:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
 801293e:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8012940:	eddf 7a06 	vldr	s15, [pc, #24]	; 801295c <tPBSawSquare_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
 8012944:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
 8012948:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 801294a:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 801294e:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
 8012952:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8012956:	edc0 7a05 	vstr	s15, [r0, #20]
}
 801295a:	bd38      	pop	{r3, r4, r5, pc}
 801295c:	4f800000 	.word	0x4f800000

08012960 <tPBSawSquare_tick>:
#ifdef ITCMRAM
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_tick          (tPBSawSquare* const osc)
#else
Lfloat   tPBSawSquare_tick          (tPBSawSquare* const osc)
#endif
{
 8012960:	b530      	push	{r4, r5, lr}
    _tPBSawSquare* c = *osc;
 8012962:	6804      	ldr	r4, [r0, #0]

    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 8012964:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8012968:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 801296c:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8012970:	6865      	ldr	r5, [r4, #4]
 8012972:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 8012976:	eddf 9a20 	vldr	s19, [pc, #128]	; 80129f8 <tPBSawSquare_tick+0x98>
{
 801297a:	b083      	sub	sp, #12
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 801297c:	ee07 5a10 	vmov	s14, r5
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8012980:	2d00      	cmp	r5, #0
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8012982:	ed94 6a02 	vldr	s12, [r4, #8]
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 8012986:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 801298a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 801298e:	fe28 8a27 	vselge.f32	s16, s16, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8012992:	eef8 0ac6 	vcvt.f32.s32	s1, s12
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 8012996:	ee27 7a29 	vmul.f32	s14, s14, s19
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 801299a:	ee60 0aa9 	vmul.f32	s1, s1, s19
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 801299e:	eee7 7a26 	vfma.f32	s15, s14, s13
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
 80129a2:	eeb0 0a47 	vmov.f32	s0, s14
 80129a6:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 80129aa:	eef0 8a67 	vmov.f32	s17, s15
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
 80129ae:	f7ff f997 	bl	8011ce0 <LEAF_poly_blep>
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 80129b2:	ee07 5a90 	vmov	s15, r5
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
 80129b6:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 80129ba:	eddd 0a01 	vldr	s1, [sp, #4]
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 80129be:	eef8 7a67 	vcvt.f32.u32	s15, s15
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 80129c2:	ee27 0aa9 	vmul.f32	s0, s15, s19
 80129c6:	f7ff f98b 	bl	8011ce0 <LEAF_poly_blep>
    

    sawOut -= resetBlep;
    
    squareOut += resetBlep;
 80129ca:	ee39 8a08 	vadd.f32	s16, s18, s16
    squareOut -= midBlep;

    c->phase += c->inc;
    
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 80129ce:	edd4 6a08 	vldr	s13, [r4, #32]
    sawOut -= resetBlep;
 80129d2:	ee78 7ac9 	vsub.f32	s15, s17, s18
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 80129d6:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    squareOut -= midBlep;
 80129da:	ee38 8a40 	vsub.f32	s16, s16, s0
    c->phase += c->inc;
 80129de:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 80129e2:	ee28 0a26 	vmul.f32	s0, s16, s13
    c->phase += c->inc;
 80129e6:	4413      	add	r3, r2
}
 80129e8:	eea7 0ac7 	vfms.f32	s0, s15, s14
    c->phase += c->inc;
 80129ec:	6063      	str	r3, [r4, #4]
}
 80129ee:	b003      	add	sp, #12
 80129f0:	ecbd 8b04 	vpop	{d8-d9}
 80129f4:	bd30      	pop	{r4, r5, pc}
 80129f6:	bf00      	nop
 80129f8:	2f80000d 	.word	0x2f80000d

080129fc <tPBSawSquare_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#else
void    tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#endif
{
    _tPBSawSquare* c = *osc;
 80129fc:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
 80129fe:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8012a02:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
 8012a06:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012a0a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012a0e:	ed83 0a02 	vstr	s0, [r3, #8]

}
 8012a12:	4770      	bx	lr

08012a14 <tPBSawSquare_setShape>:
void    tPBSawSquare_setShape      (tPBSawSquare* const osc, Lfloat inputShape)
{
    _tPBSawSquare* c = *osc;
    
    c->shape  = inputShape;
    c->oneMinusShape = 1.0f - inputShape;
 8012a14:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSawSquare* c = *osc;
 8012a18:	6803      	ldr	r3, [r0, #0]
    c->shape  = inputShape;
 8012a1a:	ed83 0a08 	vstr	s0, [r3, #32]
    c->oneMinusShape = 1.0f - inputShape;
 8012a1e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012a22:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8012a26:	4770      	bx	lr

08012a28 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
 8012a28:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012a2a:	6995      	ldr	r5, [r2, #24]
{
 8012a2c:	4606      	mov	r6, r0
 8012a2e:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8012a30:	2018      	movs	r0, #24
 8012a32:	4629      	mov	r1, r5
 8012a34:	f7ff fae2 	bl	8011ffc <mpool_alloc>
 8012a38:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 8012a3a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 8012a3c:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
 8012a3e:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 8012a40:	691b      	ldr	r3, [r3, #16]
 8012a42:	6143      	str	r3, [r0, #20]
}
 8012a44:	bd70      	pop	{r4, r5, r6, pc}
 8012a46:	bf00      	nop

08012a48 <tNoise_initToPool>:
{
 8012a48:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
 8012a4a:	6815      	ldr	r5, [r2, #0]
{
 8012a4c:	4606      	mov	r6, r0
 8012a4e:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8012a50:	2018      	movs	r0, #24
 8012a52:	4629      	mov	r1, r5
 8012a54:	f7ff fad2 	bl	8011ffc <mpool_alloc>
 8012a58:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 8012a5a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 8012a5c:	686b      	ldr	r3, [r5, #4]
    n->type = type;
 8012a5e:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 8012a60:	691b      	ldr	r3, [r3, #16]
 8012a62:	6143      	str	r3, [r0, #20]
}
 8012a64:	bd70      	pop	{r4, r5, r6, pc}
 8012a66:	bf00      	nop

08012a68 <tNoise_free>:

void    tNoise_free (tNoise* const ns)
{
    _tNoise* n = *ns;
 8012a68:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)n, n->mempool);
 8012a6a:	6801      	ldr	r1, [r0, #0]
 8012a6c:	f7ff bb88 	b.w	8012180 <mpool_free>

08012a70 <tNoise_tick>:
}

Lfloat   tNoise_tick(tNoise* const ns)
{
 8012a70:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 8012a72:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 8012a74:	6963      	ldr	r3, [r4, #20]
 8012a76:	4798      	blx	r3
    
    if (n->type == PinkNoise)
 8012a78:	7923      	ldrb	r3, [r4, #4]
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 8012a7a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8012a7e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
 8012a82:	2b01      	cmp	r3, #1
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 8012a84:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
 8012a88:	d131      	bne.n	8012aee <tNoise_tick+0x7e>
    {
        Lfloat tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8012a8a:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8012af4 <tNoise_tick+0x84>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8012a8e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8012af8 <tNoise_tick+0x88>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8012a92:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8012a96:	ed94 5a03 	vldr	s10, [r4, #12]
 8012a9a:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8012a9e:	edd4 3a02 	vldr	s7, [r4, #8]
 8012aa2:	eddf 4a16 	vldr	s9, [pc, #88]	; 8012afc <tNoise_tick+0x8c>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8012aa6:	eddf 5a16 	vldr	s11, [pc, #88]	; 8012b00 <tNoise_tick+0x90>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8012aaa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8012b04 <tNoise_tick+0x94>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8012aae:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8012ab2:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8012ab6:	ed94 4a04 	vldr	s8, [r4, #16]
 8012aba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012abe:	eddf 5a12 	vldr	s11, [pc, #72]	; 8012b08 <tNoise_tick+0x98>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8012ac2:	eddf 4a12 	vldr	s9, [pc, #72]	; 8012b0c <tNoise_tick+0x9c>
        return (tmp * 0.05f);
 8012ac6:	ed9f 5a12 	vldr	s10, [pc, #72]	; 8012b10 <tNoise_tick+0xa0>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8012aca:	eea4 7a25 	vfma.f32	s14, s8, s11
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8012ace:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8012ad2:	ee76 5a26 	vadd.f32	s11, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8012ad6:	edc4 6a03 	vstr	s13, [r4, #12]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8012ada:	ee75 6a87 	vadd.f32	s13, s11, s14
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8012ade:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8012ae2:	eeb0 7a66 	vmov.f32	s14, s13
 8012ae6:	eea7 7aa4 	vfma.f32	s14, s15, s9
        return (tmp * 0.05f);
 8012aea:	ee67 7a05 	vmul.f32	s15, s14, s10
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 8012aee:	eeb0 0a67 	vmov.f32	s0, s15
 8012af2:	bd10      	pop	{r4, pc}
 8012af4:	3dcad8a1 	.word	0x3dcad8a1
 8012af8:	3e97d0ff 	.word	0x3e97d0ff
 8012afc:	3f7f65fe 	.word	0x3f7f65fe
 8012b00:	3f76872b 	.word	0x3f76872b
 8012b04:	3f86be97 	.word	0x3f86be97
 8012b08:	3f11eb85 	.word	0x3f11eb85
 8012b0c:	3e3d3c36 	.word	0x3e3d3c36
 8012b10:	3d4ccccd 	.word	0x3d4ccccd

08012b14 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
 8012b14:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012b16:	698c      	ldr	r4, [r1, #24]
{
 8012b18:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8012b1a:	201c      	movs	r0, #28
 8012b1c:	4621      	mov	r1, r4
 8012b1e:	f7ff fa6d 	bl	8011ffc <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
 8012b22:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8012b24:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8012b26:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8012b28:	6862      	ldr	r2, [r4, #4]
    c->inc  = 0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8012b2a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8012b40 <tIntPhasor_init+0x2c>
    c->inc  = 0;
 8012b2e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8012b32:	edd2 7a01 	vldr	s15, [r2, #4]
 8012b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012b3a:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8012b3e:	bd38      	pop	{r3, r4, r5, pc}
 8012b40:	4f800000 	.word	0x4f800000

08012b44 <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 8012b44:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
 8012b46:	eddf 7a06 	vldr	s15, [pc, #24]	; 8012b60 <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
 8012b4a:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 8012b4e:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
 8012b50:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
 8012b54:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8012b56:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
 8012b5a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012b5e:	4770      	bx	lr
 8012b60:	2f80000d 	.word	0x2f80000d

08012b64 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
 8012b64:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012b66:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8012b6a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012b6e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012b72:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012b76:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8012b7a:	4770      	bx	lr

08012b7c <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
 8012b7c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8012b80:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8012b9c <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
 8012b84:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8012b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b8a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8012b8e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012b92:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012b96:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8012b9a:	4770      	bx	lr
 8012b9c:	4f800000 	.word	0x4f800000

08012ba0 <tSquareLFO_initToPool>:
{
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
 8012ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ba2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8012ba6:	680f      	ldr	r7, [r1, #0]
{
 8012ba8:	4606      	mov	r6, r0
 8012baa:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8012bac:	2010      	movs	r0, #16
 8012bae:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8012bb0:	ed9f 8a22 	vldr	s16, [pc, #136]	; 8012c3c <tSquareLFO_initToPool+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8012bb4:	f7ff fa22 	bl	8011ffc <mpool_alloc>
 8012bb8:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8012bba:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8012bbc:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8012bbe:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8012bc0:	201c      	movs	r0, #28
 8012bc2:	4639      	mov	r1, r7
 8012bc4:	f7ff fa1a 	bl	8011ffc <mpool_alloc>
 8012bc8:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8012bca:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8012bcc:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
 8012bce:	2700      	movs	r7, #0
    c->inc  = 0;
 8012bd0:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8012bd4:	edd2 7a01 	vldr	s15, [r2, #4]
 8012bd8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012bdc:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8012be0:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 8012be2:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8012be4:	4629      	mov	r1, r5
 8012be6:	f7ff fa09 	bl	8011ffc <mpool_alloc>
 8012bea:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8012bec:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
 8012bee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 8012bf2:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012bf4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8012c40 <tSquareLFO_initToPool+0xa0>
    c->inc  = 0;
 8012bf8:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8012bfc:	ed92 7a01 	vldr	s14, [r2, #4]
 8012c00:	ee27 7a08 	vmul.f32	s14, s14, s16
 8012c04:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 8012c08:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012c0a:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8012c0c:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012c10:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8012c14:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012c16:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012c1a:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 8012c1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8012c22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012c26:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8012c2a:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012c32:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8012c36:	ecbd 8b02 	vpop	{d8}
 8012c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c3c:	4f800000 	.word	0x4f800000
 8012c40:	2f80000d 	.word	0x2f80000d

08012c44 <tSquareLFO_init>:
    tSquareLFO_initToPool(cy, &leaf->mempool);
 8012c44:	3118      	adds	r1, #24
 8012c46:	f7ff bfab 	b.w	8012ba0 <tSquareLFO_initToPool>
 8012c4a:	bf00      	nop

08012c4c <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
 8012c4c:	6802      	ldr	r2, [r0, #0]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8012c4e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    return c->phase * INV_TWO_TO_32; 
 8012c52:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012c94 <tSquareLFO_tick+0x48>
    _tIntPhasor* c = *cy;
 8012c56:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
 8012c58:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8012c5c:	4403      	add	r3, r0
 8012c5e:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8012c60:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 8012c64:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 8012c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 8012c6a:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8012c6e:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
 8012c70:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
 8012c74:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8012c76:	eeb8 0a46 	vcvt.f32.u32	s0, s12
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8012c7a:	ed92 6a01 	vldr	s12, [r2, #4]
 8012c7e:	ee27 0a40 	vnmul.f32	s0, s14, s0
 8012c82:	eea7 0a87 	vfma.f32	s0, s15, s14
 8012c86:	ee30 0a06 	vadd.f32	s0, s0, s12
 8012c8a:	ee30 0a66 	vsub.f32	s0, s0, s13
}
 8012c8e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012c92:	4770      	bx	lr
 8012c94:	2f80000d 	.word	0x2f80000d

08012c98 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
 8012c98:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
 8012c9a:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012c9c:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8012ca0:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012ca4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012cac:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8012cb0:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012cb2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8012cb6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012cba:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012cbe:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012cc2:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8012cc6:	4770      	bx	lr

08012cc8 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
 8012cc8:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012cca:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8012d00 <tSquareLFO_setPulseWidth+0x38>
 8012cce:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8012cd0:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012cd4:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
 8012cd8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8012d04 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 8012ce0:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012ce2:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
 8012ce6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 8012cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012cee:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8012cf2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012cf6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012cfa:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8012cfe:	4770      	bx	lr
 8012d00:	2f80000d 	.word	0x2f80000d
 8012d04:	4f800000 	.word	0x4f800000

08012d08 <tSquareLFO_setPhase>:
    int i = phase;
 8012d08:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 8012d0c:	eddf 6a13 	vldr	s13, [pc, #76]	; 8012d5c <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
    _tSquareLFO *c = *cy;
 8012d10:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012d12:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8012d60 <tSquareLFO_setPhase+0x58>
    phase -= i;
 8012d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tIntPhasor* c = *cy;
 8012d1a:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 8012d1c:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8012d20:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012d24:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012d28:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012d2c:	689a      	ldr	r2, [r3, #8]
 8012d2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8012d32:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8012d36:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012d38:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012d3c:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8012d40:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8012d44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012d48:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8012d4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012d54:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8012d58:	4770      	bx	lr
 8012d5a:	bf00      	nop
 8012d5c:	4f800000 	.word	0x4f800000
 8012d60:	2f80000d 	.word	0x2f80000d

08012d64 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
 8012d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012d66:	460c      	mov	r4, r1
{
 8012d68:	4606      	mov	r6, r0
 8012d6a:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8012d6c:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 8012d6e:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8012d72:	4639      	mov	r1, r7
 8012d74:	f7ff f942 	bl	8011ffc <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
 8012d78:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8012d7a:	6030      	str	r0, [r6, #0]
 8012d7c:	4604      	mov	r4, r0
    c->mempool = m;
 8012d7e:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 8012d82:	f7ff ff0d 	bl	8012ba0 <tSquareLFO_initToPool>
    _tMempool* m = *mp;
 8012d86:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8012d88:	201c      	movs	r0, #28
 8012d8a:	4629      	mov	r1, r5
 8012d8c:	f7ff f936 	bl	8011ffc <mpool_alloc>
    c->phase    =  0;
 8012d90:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8012d92:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8012d94:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8012d96:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8012d98:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8012db0 <tSawSquareLFO_init+0x4c>
    c->inc  = 0;
 8012d9c:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8012da0:	edd2 7a01 	vldr	s15, [r2, #4]
 8012da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012da8:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8012dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012dae:	bf00      	nop
 8012db0:	4f800000 	.word	0x4f800000

08012db4 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
 8012db4:	b510      	push	{r4, lr}
    _tSawSquareLFO* c = *cy;
 8012db6:	6804      	ldr	r4, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8012db8:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8012dbc:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8012df8 <tSawSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
 8012dc0:	68a2      	ldr	r2, [r4, #8]
    Lfloat b = tSquareLFO_tick(&c->square);
 8012dc2:	f104 000c 	add.w	r0, r4, #12
    c->phase = (c->phase + c->inc);
 8012dc6:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 8012dca:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
 8012dcc:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
 8012dd0:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8012dd2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8012dd6:	eee7 5a27 	vfma.f32	s11, s14, s15
    Lfloat b = tSquareLFO_tick(&c->square);
 8012dda:	f7ff ff37 	bl	8012c4c <tSquareLFO_tick>
    return  (1 - c->shape) * a + c->shape * b; 
 8012dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012de2:	edd4 7a01 	vldr	s15, [r4, #4]
 8012de6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012dea:	ee37 7a67 	vsub.f32	s14, s14, s15
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8012dee:	ee75 5aa5 	vadd.f32	s11, s11, s11
}
 8012df2:	eea7 0a25 	vfma.f32	s0, s14, s11
 8012df6:	bd10      	pop	{r4, pc}
 8012df8:	2f80000d 	.word	0x2f80000d

08012dfc <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
    _tSawSquareLFO* c = *cy;
 8012dfc:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
 8012dfe:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
 8012e00:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012e02:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8012e06:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012e0a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e12:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8012e16:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012e18:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8012e1c:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012e20:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e28:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8012e2c:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012e2e:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8012e32:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012e36:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012e3a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012e3e:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
 8012e42:	4770      	bx	lr

08012e44 <tSawSquareLFO_setPhase>:
    int i = phase;
 8012e44:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 8012e48:	eddf 6a15 	vldr	s13, [pc, #84]	; 8012ea0 <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
    _tSawSquareLFO* c = *cy;
 8012e4c:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012e4e:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8012ea4 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
 8012e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tSquareLFO *c = *cy;
 8012e56:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
 8012e58:	6890      	ldr	r0, [r2, #8]
    phase -= i;
 8012e5a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8012e5e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8012e62:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012e66:	edc0 7a01 	vstr	s15, [r0, #4]
 8012e6a:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012e6e:	6890      	ldr	r0, [r2, #8]
 8012e70:	edd2 7a01 	vldr	s15, [r2, #4]
 8012e74:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
 8012e78:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012e7a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012e7e:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8012e82:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8012e86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012e8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8012e8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e96:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
 8012e9a:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
 8012e9c:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
 8012e9e:	4770      	bx	lr
 8012ea0:	4f800000 	.word	0x4f800000
 8012ea4:	2f80000d 	.word	0x2f80000d

08012ea8 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
 8012ea8:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
 8012eaa:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8012eae:	4770      	bx	lr

08012eb0 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
 8012eb0:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012eb2:	698d      	ldr	r5, [r1, #24]
{
 8012eb4:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8012eb6:	2018      	movs	r0, #24
 8012eb8:	4629      	mov	r1, r5
 8012eba:	f7ff f89f 	bl	8011ffc <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 8012ebe:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8012ec0:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 8012ec2:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8012ec4:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8012ec6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012efc <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
 8012eca:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8012f00 <tTriLFO_init+0x50>
    c->phase    =  0;
 8012ece:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 8012ed2:	edd2 6a01 	vldr	s13, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8012ed6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    c->invSampleRate = leaf->invSampleRate;
 8012eda:	edc0 6a04 	vstr	s13, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8012ede:	edc0 7a05 	vstr	s15, [r0, #20]
    _tTriLFO* c = *cy;
 8012ee2:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012ee4:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8012ee8:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012eec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ef4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8012ef8:	bd38      	pop	{r3, r4, r5, pc}
 8012efa:	bf00      	nop
 8012efc:	4f800000 	.word	0x4f800000
 8012f00:	435c0000 	.word	0x435c0000

08012f04 <tTriLFO_initToPool>:
{
 8012f04:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 8012f06:	680d      	ldr	r5, [r1, #0]
{
 8012f08:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8012f0a:	2018      	movs	r0, #24
 8012f0c:	4629      	mov	r1, r5
 8012f0e:	f7ff f875 	bl	8011ffc <mpool_alloc>
    c->inc      =  0;
 8012f12:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8012f14:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 8012f16:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8012f18:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8012f1a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012f50 <tTriLFO_initToPool+0x4c>
    c->freq  = freq;
 8012f1e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8012f54 <tTriLFO_initToPool+0x50>
    c->phase    =  0;
 8012f22:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 8012f26:	edd2 6a01 	vldr	s13, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8012f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    c->invSampleRate = leaf->invSampleRate;
 8012f2e:	edc0 6a04 	vstr	s13, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8012f32:	edc0 7a05 	vstr	s15, [r0, #20]
    _tTriLFO* c = *cy;
 8012f36:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012f38:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8012f3c:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012f48:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8012f4c:	bd38      	pop	{r3, r4, r5, pc}
 8012f4e:	bf00      	nop
 8012f50:	4f800000 	.word	0x4f800000
 8012f54:	435c0000 	.word	0x435c0000

08012f58 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
 8012f58:	6801      	ldr	r1, [r0, #0]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8012f5a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8012f5e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8012f88 <tTriLFO_tick+0x30>
    c->phase += c->inc;
 8012f62:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 8012f66:	4413      	add	r3, r2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8012f68:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    c->phase += c->inc;
 8012f6c:	604b      	str	r3, [r1, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 8012f6e:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 8012f72:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8012f76:	ee07 3a90 	vmov	s15, r3
 8012f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012f7e:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 8012f82:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012f86:	4770      	bx	lr
 8012f88:	2ffffff6 	.word	0x2ffffff6

08012f8c <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
 8012f8c:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012f8e:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8012f92:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012f96:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012f9a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012f9e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8012fa2:	4770      	bx	lr

08012fa4 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
 8012fa4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
 8012fa8:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8012faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012fae:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 8012fb2:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 8012fb6:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8012fba:	4770      	bx	lr

08012fbc <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
 8012fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012fbe:	460c      	mov	r4, r1
{
 8012fc0:	4606      	mov	r6, r0
 8012fc2:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8012fc4:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 8012fc6:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8012fca:	4639      	mov	r1, r7
 8012fcc:	f7ff f816 	bl	8011ffc <mpool_alloc>
    c->mempool = m;
    tTriLFO_initToPool(&c->tri,mp);
 8012fd0:	4621      	mov	r1, r4
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8012fd2:	6030      	str	r0, [r6, #0]
 8012fd4:	4604      	mov	r4, r0
    c->mempool = m;
 8012fd6:	f840 7b08 	str.w	r7, [r0], #8
    tTriLFO_initToPool(&c->tri,mp);
 8012fda:	f7ff ff93 	bl	8012f04 <tTriLFO_initToPool>
    _tMempool* m = *mp;
 8012fde:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8012fe0:	2018      	movs	r0, #24
 8012fe2:	4629      	mov	r1, r5
 8012fe4:	f7ff f80a 	bl	8011ffc <mpool_alloc>
    c->inc      =  0;
 8012fe8:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8012fea:	60e0      	str	r0, [r4, #12]
    c->mask = SINE_TABLE_SIZE - 1;
 8012fec:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 8012ff0:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8012ff2:	6869      	ldr	r1, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8012ff4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801300c <tSineTriLFO_init+0x50>
    c->phase    =  0;
 8012ff8:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8012ffc:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 8013000:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8013002:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013006:	edc0 7a04 	vstr	s15, [r0, #16]
}
 801300a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801300c:	4f800000 	.word	0x4f800000

08013010 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
 8013010:	b510      	push	{r4, lr}
    _tSineTriLFO* c = *cy;
 8013012:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
    Lfloat b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
 8013014:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8013018:	eddf 5a12 	vldr	s11, [pc, #72]	; 8013064 <tSineTriLFO_tick+0x54>
    Lfloat a = tCycle_tick(&c->sine);
 801301c:	f104 000c 	add.w	r0, r4, #12
 8013020:	f7ff f96e 	bl	8012300 <tCycle_tick>
    _tTriLFO* c = *cy;
 8013024:	68a1      	ldr	r1, [r4, #8]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8013026:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    c->phase += c->inc;
 801302a:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 801302e:	4413      	add	r3, r2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8013030:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    c->phase += c->inc;
 8013034:	604b      	str	r3, [r1, #4]
    return  (1.0f - c->shape) * a + c->shape * b;
 8013036:	ed94 6a01 	vldr	s12, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 801303a:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
 801303e:	ee76 6ac6 	vsub.f32	s13, s13, s12
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 8013042:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8013046:	ee07 3a10 	vmov	s14, r3
 801304a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801304e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013052:	ee77 7aa7 	vadd.f32	s15, s15, s15
    return  (1.0f - c->shape) * a + c->shape * b;
 8013056:	ee67 7a86 	vmul.f32	s15, s15, s12
}
 801305a:	eee6 7a80 	vfma.f32	s15, s13, s0
 801305e:	eeb0 0a67 	vmov.f32	s0, s15
 8013062:	bd10      	pop	{r4, pc}
 8013064:	2ffffff6 	.word	0x2ffffff6

08013068 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
    _tSineTriLFO* c = *cy;
 8013068:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
 801306a:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801306c:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8013070:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8013074:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801307c:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
 8013080:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8013082:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 8013086:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801308a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801308e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013092:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
 8013096:	4770      	bx	lr

08013098 <tSineTriLFO_setPhase>:
    int i = phase;
 8013098:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
 801309c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80130c4 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
    _tSineTriLFO* c = *cy;
 80130a0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 80130a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
 80130a6:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 80130a8:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 80130ac:	ee20 0a07 	vmul.f32	s0, s0, s14
 80130b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 80130b4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
 80130b8:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
 80130bc:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
 80130be:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
 80130c2:	4770      	bx	lr
 80130c4:	4f800000 	.word	0x4f800000

080130c8 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
 80130c8:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 80130ca:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 80130ce:	4770      	bx	lr

080130d0 <pickupNonLinearity>:
#endif

Lfloat   pickupNonLinearity          (Lfloat x)
{

	x = x * 2.0f;
 80130d0:	ee70 7a00 	vadd.f32	s15, s0, s0
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 80130d4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8013130 <pickupNonLinearity+0x60>
 80130d8:	eddf 4a16 	vldr	s9, [pc, #88]	; 8013134 <pickupNonLinearity+0x64>
 80130dc:	eddf 5a16 	vldr	s11, [pc, #88]	; 8013138 <pickupNonLinearity+0x68>
 80130e0:	ee27 0a87 	vmul.f32	s0, s15, s14
 80130e4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801313c <pickupNonLinearity+0x6c>
 80130e8:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80130ec:	eddf 6a14 	vldr	s13, [pc, #80]	; 8013140 <pickupNonLinearity+0x70>
 80130f0:	ee27 6a86 	vmul.f32	s12, s15, s12
	out *= 4.366812227074236f;
 80130f4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8013144 <pickupNonLinearity+0x74>
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 80130f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80130fc:	ee65 5aa7 	vmul.f32	s11, s11, s15
 8013100:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8013104:	eea7 0aa4 	vfma.f32	s0, s15, s9
 8013108:	ee66 6a27 	vmul.f32	s13, s12, s15
 801310c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013110:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013114:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013118:	eea5 0aa7 	vfma.f32	s0, s11, s15
 801311c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013120:	eea6 0aa7 	vfma.f32	s0, s13, s15
 8013124:	eea7 0a27 	vfma.f32	s0, s14, s15
	return out;
}
 8013128:	ee20 0a05 	vmul.f32	s0, s0, s10
 801312c:	4770      	bx	lr
 801312e:	bf00      	nop
 8013130:	3bdd2f1b 	.word	0x3bdd2f1b
 8013134:	3d99999a 	.word	0x3d99999a
 8013138:	3b0a47ed 	.word	0x3b0a47ed
 801313c:	39f9096c 	.word	0x39f9096c
 8013140:	3a59d777 	.word	0x3a59d777
 8013144:	408bbced 	.word	0x408bbced

08013148 <tPickupNonLinearity_init>:


void   tPickupNonLinearity_init          (tPickupNonLinearity* const pl, LEAF* const leaf)
{
 8013148:	b538      	push	{r3, r4, r5, lr}
	tPickupNonLinearity_initToPool(pl, &leaf->mempool);
}
void   tPickupNonLinearity_initToPool          (tPickupNonLinearity* const pl, tMempool* const mp)
{
    _tMempool* m = *mp;
 801314a:	698d      	ldr	r5, [r1, #24]
{
 801314c:	4604      	mov	r4, r0
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
 801314e:	2008      	movs	r0, #8
 8013150:	4629      	mov	r1, r5
 8013152:	f7fe ff53 	bl	8011ffc <mpool_alloc>
    p->mempool = m;
    p->prev = 0.0f;
 8013156:	2300      	movs	r3, #0
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
 8013158:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 801315a:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
 801315c:	6043      	str	r3, [r0, #4]
}
 801315e:	bd38      	pop	{r3, r4, r5, pc}

08013160 <tPickupNonLinearity_free>:
}
void   tPickupNonLinearity_free          (tPickupNonLinearity* const pl)
{
	_tPickupNonLinearity* p = *pl;
 8013160:	6800      	ldr	r0, [r0, #0]
	mpool_free((char*)p, p->mempool);
 8013162:	6801      	ldr	r1, [r0, #0]
 8013164:	f7ff b80c 	b.w	8012180 <mpool_free>

08013168 <tPickupNonLinearity_tick>:
}
Lfloat   tPickupNonLinearity_tick          (tPickupNonLinearity* const pl, Lfloat x)
{
	_tPickupNonLinearity* p = *pl;
	x = x * 2.0f;
 8013168:	ee70 7a00 	vadd.f32	s15, s0, s0
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 801316c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80131cc <tPickupNonLinearity_tick+0x64>
 8013170:	eddf 4a17 	vldr	s9, [pc, #92]	; 80131d0 <tPickupNonLinearity_tick+0x68>
 8013174:	eddf 5a17 	vldr	s11, [pc, #92]	; 80131d4 <tPickupNonLinearity_tick+0x6c>
 8013178:	ee27 7a87 	vmul.f32	s14, s15, s14
 801317c:	ed9f 6a16 	vldr	s12, [pc, #88]	; 80131d8 <tPickupNonLinearity_tick+0x70>
 8013180:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8013184:	eddf 6a15 	vldr	s13, [pc, #84]	; 80131dc <tPickupNonLinearity_tick+0x74>
 8013188:	ee27 6a86 	vmul.f32	s12, s15, s12
	out *= 4.366812227074236f;
	Lfloat y = out - p->prev;
 801318c:	6803      	ldr	r3, [r0, #0]
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 801318e:	ee27 7a27 	vmul.f32	s14, s14, s15
	Lfloat y = out - p->prev;
 8013192:	ed9f 5a13 	vldr	s10, [pc, #76]	; 80131e0 <tPickupNonLinearity_tick+0x78>
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8013196:	ee65 5aa7 	vmul.f32	s11, s11, s15
	Lfloat y = out - p->prev;
 801319a:	ed93 0a01 	vldr	s0, [r3, #4]
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 801319e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80131a2:	eea7 7aa4 	vfma.f32	s14, s15, s9
 80131a6:	ee26 6a27 	vmul.f32	s12, s12, s15
 80131aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80131ae:	ee26 6a27 	vmul.f32	s12, s12, s15
 80131b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80131b6:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80131ba:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80131be:	eea6 7a27 	vfma.f32	s14, s12, s15
 80131c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
	return y;
}
 80131c6:	ee97 0a05 	vfnms.f32	s0, s14, s10
 80131ca:	4770      	bx	lr
 80131cc:	3bdd2f1b 	.word	0x3bdd2f1b
 80131d0:	3d99999a 	.word	0x3d99999a
 80131d4:	3b0a47ed 	.word	0x3b0a47ed
 80131d8:	39f9096c 	.word	0x39f9096c
 80131dc:	3a59d777 	.word	0x3a59d777
 80131e0:	408bbced 	.word	0x408bbced

080131e4 <tSimpleLivingString3_free>:


}

void    tSimpleLivingString3_free (tSimpleLivingString3* const pl)
{
 80131e4:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 80131e6:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_free(&p->fbLev);
 80131e8:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80131ec:	f7fa ffbe 	bl	800e16c <tFeedbackLeveler_free>
    tHighpass_free(&p->DCblocker);
 80131f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80131f4:	f7fc f888 	bl	800f308 <tHighpass_free>
    tOnePole_free(&p->bridgeFilter);
 80131f8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80131fc:	f7fb fe28 	bl	800ee50 <tOnePole_free>
    tLinearDelay_free(&p->delayLineL);
 8013200:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8013204:	f7fa fa30 	bl	800d668 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineU);
 8013208:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801320c:	f7fa fa2c 	bl	800d668 <tLinearDelay_free>

    tExpSmooth_free(&p->wlSmooth);
 8013210:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013214:	f7fb fba0 	bl	800e958 <tExpSmooth_free>

    
    mpool_free((char*)p, p->mempool);
 8013218:	6821      	ldr	r1, [r4, #0]
 801321a:	4620      	mov	r0, r4
}
 801321c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 8013220:	f7fe bfae 	b.w	8012180 <mpool_free>
 8013224:	0000      	movs	r0, r0
	...

08013228 <tSimpleLivingString3_setFreq>:

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
 8013228:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 801322a:	6804      	ldr	r4, [r0, #0]
    p->freq = freq;
    Lfloat waveLength = (p->sampleRate/freq);
 801322c:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
 8013230:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 8013234:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
 8013238:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80132c0 <tSimpleLivingString3_setFreq+0x98>
 801323c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8013240:	eeb4 5bc6 	vcmpe.f64	d5, d6
 8013244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013248:	d437      	bmi.n	80132ba <tSimpleLivingString3_setFreq+0x92>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801324a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801324c:	005b      	lsls	r3, r3, #1
 801324e:	ee00 3a10 	vmov	s0, r3
 8013252:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013256:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    p->waveLengthInSamples =  waveLength * 0.5f;
 801325e:	bf54      	ite	pl
 8013260:	eeb6 0a00 	vmovpl.f32	s0, #96	; 0x3f000000  0.5
 8013264:	eef6 7a00 	vmovmi.f32	s15, #96	; 0x3f000000  0.5
 8013268:	ee20 0a27 	vmul.f32	s0, s0, s15
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801326c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
 8013270:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8013274:	f7fb fb9c 	bl	800e9b0 <tExpSmooth_setDest>
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8013278:	ed94 6a01 	vldr	s12, [r4, #4]
 801327c:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8013280:	edd4 4a05 	vldr	s9, [r4, #20]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8013284:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8013288:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80132d0 <tSimpleLivingString3_setFreq+0xa8>
 801328c:	eddf 7a11 	vldr	s15, [pc, #68]	; 80132d4 <tSimpleLivingString3_setFreq+0xac>
 8013290:	eea4 7a87 	vfma.f32	s14, s9, s14
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8013294:	ee83 4b06 	vdiv.f64	d4, d3, d6
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8013298:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801329c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80132c8 <tSimpleLivingString3_setFreq+0xa0>
 80132a0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80132a4:	ee84 0b07 	vdiv.f64	d0, d4, d7
 80132a8:	ee20 0b05 	vmul.f64	d0, d0, d5
 80132ac:	f003 fca0 	bl	8016bf0 <exp>
 80132b0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80132b4:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
 80132b8:	bd10      	pop	{r4, pc}
 80132ba:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80132d8 <tSimpleLivingString3_setFreq+0xb0>
 80132be:	e7d5      	b.n	801326c <tSimpleLivingString3_setFreq+0x44>
 80132c0:	33333333 	.word	0x33333333
 80132c4:	40133333 	.word	0x40133333
 80132c8:	0a3d70a4 	.word	0x0a3d70a4
 80132cc:	c01ba3d7 	.word	0xc01ba3d7
 80132d0:	3c23d70a 	.word	0x3c23d70a
 80132d4:	40dd0cb3 	.word	0x40dd0cb3
 80132d8:	4019999a 	.word	0x4019999a
 80132dc:	00000000 	.word	0x00000000

080132e0 <tSimpleLivingString3_initToPool>:
{
 80132e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132e4:	ed2d 8b06 	vpush	{d8-d10}
    _tMempool* m = *mp;
 80132e8:	f8d3 9000 	ldr.w	r9, [r3]
{
 80132ec:	b083      	sub	sp, #12
 80132ee:	460e      	mov	r6, r1
 80132f0:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 80132f2:	4649      	mov	r1, r9
 80132f4:	2070      	movs	r0, #112	; 0x70
{
 80132f6:	eef0 9a41 	vmov.f32	s19, s2
 80132fa:	edcd 2a01 	vstr	s5, [sp, #4]
 80132fe:	eeb0 aa61 	vmov.f32	s20, s3
 8013302:	461d      	mov	r5, r3
 8013304:	eef0 aa42 	vmov.f32	s21, s4
 8013308:	4617      	mov	r7, r2
 801330a:	eef0 8a40 	vmov.f32	s17, s0
    p->curr=0.0f;
 801330e:	f04f 0b00 	mov.w	fp, #0
{
 8013312:	eeb0 8a60 	vmov.f32	s16, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 8013316:	f7fe fe71 	bl	8011ffc <mpool_alloc>
    p->sampleRate = leaf->sampleRate * oversampling;
 801331a:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801331e:	f8c8 0000 	str.w	r0, [r8]
    p->mempool = m;
 8013322:	f8c0 9000 	str.w	r9, [r0]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8013326:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
    LEAF* leaf = p->mempool->leaf;
 801332a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->sampleRate = leaf->sampleRate * oversampling;
 801332e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->oversampling = oversampling;
 8013332:	65c6      	str	r6, [r0, #92]	; 0x5c
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8013334:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    p->sampleRate = leaf->sampleRate * oversampling;
 8013338:	ed93 7a00 	vldr	s14, [r3]
    p->maxLength = 2400 * oversampling;
 801333c:	f44f 6316 	mov.w	r3, #2400	; 0x960
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 8013340:	4604      	mov	r4, r0
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 8013342:	f100 0934 	add.w	r9, r0, #52	; 0x34
    p->sampleRate = leaf->sampleRate * oversampling;
 8013346:	ee67 7a87 	vmul.f32	s15, s15, s14
    p->maxLength = 2400 * oversampling;
 801334a:	fb03 f606 	mul.w	r6, r3, r6
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801334e:	eddf 0a66 	vldr	s1, [pc, #408]	; 80134e8 <tSimpleLivingString3_initToPool+0x208>
 8013352:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
 8013354:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 8013356:	f100 0638 	add.w	r6, r0, #56	; 0x38
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801335a:	ee87 0aa8 	vdiv.f32	s0, s15, s17
    p->sampleRate = leaf->sampleRate * oversampling;
 801335e:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    p->curr=0.0f;
 8013362:	f8c0 b024 	str.w	fp, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8013366:	4650      	mov	r0, sl
 8013368:	ee20 0a09 	vmul.f32	s0, s0, s18
 801336c:	f7fb faba 	bl	800e8e4 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 8013370:	ed94 0a02 	vldr	s0, [r4, #8]
 8013374:	462a      	mov	r2, r5
 8013376:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013378:	4648      	mov	r0, r9
 801337a:	f7fa fa47 	bl	800d80c <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 801337e:	462a      	mov	r2, r5
 8013380:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013382:	4630      	mov	r0, r6
 8013384:	ed94 0a02 	vldr	s0, [r4, #8]
 8013388:	f7fa fa40 	bl	800d80c <tLinearDelay_initToPool>
    tSimpleLivingString3_setFreq(pl, freq);
 801338c:	4640      	mov	r0, r8
 801338e:	eeb0 0a68 	vmov.f32	s0, s17
    p->invOnePlusr = 1.0f;
 8013392:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
    tSimpleLivingString3_setFreq(pl, freq);
 8013396:	f7ff ff47 	bl	8013228 <tSimpleLivingString3_setFreq>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 801339a:	ed94 0a02 	vldr	s0, [r4, #8]
 801339e:	4648      	mov	r0, r9
 80133a0:	f7fa f9f8 	bl	800d794 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
 80133a4:	ed94 0a02 	vldr	s0, [r4, #8]
 80133a8:	4630      	mov	r0, r6
 80133aa:	f7fa f9f3 	bl	800d794 <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
 80133ae:	4648      	mov	r0, r9
 80133b0:	f7fa f966 	bl	800d680 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
 80133b4:	4630      	mov	r0, r6
 80133b6:	f7fa f963 	bl	800d680 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 80133ba:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80133be:	4629      	mov	r1, r5
 80133c0:	eeb0 0a48 	vmov.f32	s0, s16
    p->dampFreq = dampFreq;
 80133c4:	ed84 8a03 	vstr	s16, [r4, #12]
    tHighpass_initToPool(&p->DCblocker,13, mp);
 80133c8:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 80133cc:	9000      	str	r0, [sp, #0]
 80133ce:	f7fb fd0b 	bl	800ede8 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
 80133d2:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 80133d6:	9800      	ldr	r0, [sp, #0]
 80133d8:	f7fb fd70 	bl	800eebc <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 80133dc:	eeb0 0a48 	vmov.f32	s0, s16
 80133e0:	9800      	ldr	r0, [sp, #0]
 80133e2:	f7fb fd39 	bl	800ee58 <tOnePole_setFreq>
    tHighpass_initToPool(&p->DCblocker,13, mp);
 80133e6:	4629      	mov	r1, r5
 80133e8:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 80133ec:	4630      	mov	r0, r6
    p->rippleGain = 0.0f;
 80133ee:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
    p->rippleDelay = 0.5f;
 80133f2:	ed84 9a1a 	vstr	s18, [r4, #104]	; 0x68
    p->invOnePlusr = 1.0f;
 80133f6:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
    tHighpass_initToPool(&p->DCblocker,13, mp);
 80133fa:	f7fb ff65 	bl	800f2c8 <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
 80133fe:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 8013402:	4630      	mov	r0, r6
 8013404:	f7fb ffa0 	bl	800f348 <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
 8013408:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 801340c:	4630      	mov	r0, r6
 801340e:	f7fb ff7f 	bl	800f310 <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 8013412:	eef0 0a6a 	vmov.f32	s1, s21
 8013416:	eeb0 0a4a 	vmov.f32	s0, s20
 801341a:	ed9d 1a01 	vldr	s2, [sp, #4]
 801341e:	462a      	mov	r2, r5
 8013420:	4639      	mov	r1, r7
 8013422:	f104 0054 	add.w	r0, r4, #84	; 0x54
    p->userDecay = decay;
 8013426:	edc4 9a05 	vstr	s19, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801342a:	f7fa fe77 	bl	800e11c <tFeedbackLeveler_initToPool>
    Lfloat waveLength = (p->sampleRate/freq);
 801342e:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
    p->levMode=levMode;
 8013432:	6227      	str	r7, [r4, #32]
    Lfloat waveLength = (p->sampleRate/freq);
 8013434:	ee87 7aa8 	vdiv.f32	s14, s15, s17
    p->changeGainCompensator = 1.0f;
 8013438:	f8c4 801c 	str.w	r8, [r4, #28]
    p->freq = freq;
 801343c:	edc4 8a01 	vstr	s17, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
 8013440:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80134d8 <tSimpleLivingString3_initToPool+0x1f8>
 8013444:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
 8013448:	eeb4 5bc6 	vcmpe.f64	d5, d6
 801344c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013450:	d43c      	bmi.n	80134cc <tSimpleLivingString3_initToPool+0x1ec>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8013452:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8013454:	005b      	lsls	r3, r3, #1
 8013456:	ee07 3a90 	vmov	s15, r3
 801345a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801345e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    p->waveLengthInSamples =  waveLength * 0.5f;
 8013466:	bf54      	ite	pl
 8013468:	ee27 0a09 	vmulpl.f32	s0, s14, s18
 801346c:	ee27 0a89 	vmulmi.f32	s0, s15, s18
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8013470:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
 8013472:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8013476:	f7fb fa9b 	bl	800e9b0 <tExpSmooth_setDest>
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801347a:	ed94 6a01 	vldr	s12, [r4, #4]
 801347e:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8013482:	edd4 4a05 	vldr	s9, [r4, #20]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8013486:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801348a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80134e8 <tSimpleLivingString3_initToPool+0x208>
 801348e:	eddf 7a17 	vldr	s15, [pc, #92]	; 80134ec <tSimpleLivingString3_initToPool+0x20c>
 8013492:	eea4 7a87 	vfma.f32	s14, s9, s14
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8013496:	ee83 4b06 	vdiv.f64	d4, d3, d6
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801349a:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801349e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80134e0 <tSimpleLivingString3_initToPool+0x200>
 80134a2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80134a6:	ee84 0b07 	vdiv.f64	d0, d4, d7
 80134aa:	ee20 0b05 	vmul.f64	d0, d0, d5
 80134ae:	f003 fb9f 	bl	8016bf0 <exp>
    p->pickupPoint = 0.9f;
 80134b2:	4a0f      	ldr	r2, [pc, #60]	; (80134f0 <tSimpleLivingString3_initToPool+0x210>)
    p->prevDelayLength = p->waveLengthInSamples;
 80134b4:	68a3      	ldr	r3, [r4, #8]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 80134b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->pickupPoint = 0.9f;
 80134ba:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->prevDelayLength = p->waveLengthInSamples;
 80134bc:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 80134be:	ed84 0a04 	vstr	s0, [r4, #16]
}
 80134c2:	b003      	add	sp, #12
 80134c4:	ecbd 8b06 	vpop	{d8-d10}
 80134c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134cc:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80134f4 <tSimpleLivingString3_initToPool+0x214>
 80134d0:	e7ce      	b.n	8013470 <tSimpleLivingString3_initToPool+0x190>
 80134d2:	bf00      	nop
 80134d4:	f3af 8000 	nop.w
 80134d8:	33333333 	.word	0x33333333
 80134dc:	40133333 	.word	0x40133333
 80134e0:	0a3d70a4 	.word	0x0a3d70a4
 80134e4:	c01ba3d7 	.word	0xc01ba3d7
 80134e8:	3c23d70a 	.word	0x3c23d70a
 80134ec:	40dd0cb3 	.word	0x40dd0cb3
 80134f0:	3f666666 	.word	0x3f666666
 80134f4:	4019999a 	.word	0x4019999a

080134f8 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 80134f8:	6800      	ldr	r0, [r0, #0]
 80134fa:	303c      	adds	r0, #60	; 0x3c
 80134fc:	f7fb bcac 	b.w	800ee58 <tOnePole_setFreq>

08013500 <tSimpleLivingString3_setDecay>:
}

void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
 8013500:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 8013502:	6804      	ldr	r4, [r0, #0]
    p->userDecay = decay;

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 8013504:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 8013508:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8013550 <tSimpleLivingString3_setDecay+0x50>
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 801350c:	ed94 6a01 	vldr	s12, [r4, #4]
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 8013510:	eea0 7a07 	vfma.f32	s14, s0, s14
 8013514:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8013554 <tSimpleLivingString3_setDecay+0x54>
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 8013518:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    p->userDecay = decay;
 801351c:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 8013520:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8013548 <tSimpleLivingString3_setDecay+0x48>
 8013524:	ee83 4b06 	vdiv.f64	d4, d3, d6
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 8013528:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 801352c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8013530:	ee84 0b07 	vdiv.f64	d0, d4, d7
 8013534:	ee20 0b05 	vmul.f64	d0, d0, d5
 8013538:	f003 fb5a 	bl	8016bf0 <exp>
 801353c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013540:	ed84 0a04 	vstr	s0, [r4, #16]


    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
 8013544:	bd10      	pop	{r4, pc}
 8013546:	bf00      	nop
 8013548:	52bd3c36 	.word	0x52bd3c36
 801354c:	c01ba196 	.word	0xc01ba196
 8013550:	3c23d70a 	.word	0x3c23d70a
 8013554:	40dd0cb3 	.word	0x40dd0cb3

08013558 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
 8013558:	6800      	ldr	r0, [r0, #0]
 801355a:	3054      	adds	r0, #84	; 0x54
 801355c:	f7fa be44 	b.w	800e1e8 <tFeedbackLeveler_setTargetLevel>

08013560 <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
 8013560:	6800      	ldr	r0, [r0, #0]
 8013562:	3054      	adds	r0, #84	; 0x54
 8013564:	f7fa be12 	b.w	800e18c <tFeedbackLeveler_setFactor>

08013568 <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
 8013568:	6800      	ldr	r0, [r0, #0]
 801356a:	3054      	adds	r0, #84	; 0x54
 801356c:	f7fa be0a 	b.w	800e184 <tFeedbackLeveler_setStrength>

08013570 <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
 8013570:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
 8013572:	6805      	ldr	r5, [r0, #0]
{
 8013574:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
 8013576:	f105 0054 	add.w	r0, r5, #84	; 0x54
 801357a:	f7fa fe0b 	bl	800e194 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 801357e:	622c      	str	r4, [r5, #32]
}
 8013580:	bd38      	pop	{r3, r4, r5, pc}
 8013582:	bf00      	nop

08013584 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
 8013584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tSimpleLivingString3* p = *pl;
 8013588:	6800      	ldr	r0, [r0, #0]
{
 801358a:	b083      	sub	sp, #12
    int length = p->waveLengthInSamples;
 801358c:	edd0 7a02 	vldr	s15, [r0, #8]
 8013590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013594:	ee17 ca90 	vmov	ip, s15
    int pluckPoint = (int)(length * position);
 8013598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801359c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80135a0:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 80135a4:	ee17 5a90 	vmov	r5, s15
    if (pluckPoint < 1)
 80135a8:	2d00      	cmp	r5, #0
 80135aa:	dd66      	ble.n	801367a <tSimpleLivingString3_pluck+0xf6>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
 80135ac:	45ac      	cmp	ip, r5
 80135ae:	dd36      	ble.n	801361e <tSimpleLivingString3_pluck+0x9a>
    {
    	pluckPoint = length-1;
    }
    int remainder = length-pluckPoint;
 80135b0:	ebac 0305 	sub.w	r3, ip, r5
 80135b4:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
 80135b8:	ee05 3a90 	vmov	s11, r3
    for (int i = 0; i < length; i++)
 80135bc:	ee07 5a90 	vmov	s15, r5
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 80135c0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    	pluckPoint = length-1;
 80135c4:	2200      	movs	r2, #0
 80135c6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80135ca:	e017      	b.n	80135fc <tSimpleLivingString3_pluck+0x78>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 80135cc:	ee07 2a90 	vmov	s15, r2
 80135d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80135d4:	eec7 7a06 	vdiv.f32	s15, s14, s12
 80135d8:	ee67 7a80 	vmul.f32	s15, s15, s0
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 80135dc:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80135de:	e9d1 3406 	ldrd	r3, r4, [r1, #24]
        p->delayLineU->buff[bufWritePoint] = val;
 80135e2:	6889      	ldr	r1, [r1, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 80135e4:	4413      	add	r3, r2
    for (int i = 0; i < length; i++)
 80135e6:	3201      	adds	r2, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 80135e8:	fbb3 f6f4 	udiv	r6, r3, r4
 80135ec:	fb04 3316 	mls	r3, r4, r6, r3
    for (int i = 0; i < length; i++)
 80135f0:	4594      	cmp	ip, r2
        p->delayLineU->buff[bufWritePoint] = val;
 80135f2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80135f6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < length; i++)
 80135fa:	d01b      	beq.n	8013634 <tSimpleLivingString3_pluck+0xb0>
        if (i <= pluckPoint)
 80135fc:	42aa      	cmp	r2, r5
 80135fe:	dde5      	ble.n	80135cc <tSimpleLivingString3_pluck+0x48>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8013600:	ee07 2a90 	vmov	s15, r2
 8013604:	eef8 6ae5 	vcvt.f32.s32	s13, s11
 8013608:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801360c:	ee37 7a46 	vsub.f32	s14, s14, s12
 8013610:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013614:	ee75 7a67 	vsub.f32	s15, s10, s15
 8013618:	ee67 7a80 	vmul.f32	s15, s15, s0
 801361c:	e7de      	b.n	80135dc <tSimpleLivingString3_pluck+0x58>
    	pluckPoint = length-1;
 801361e:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
 8013622:	eddf 5a19 	vldr	s11, [pc, #100]	; 8013688 <tSimpleLivingString3_pluck+0x104>
 8013626:	4675      	mov	r5, lr
    for (int i = 0; i < length; i++)
 8013628:	f1bc 0f00 	cmp.w	ip, #0
 801362c:	dcc6      	bgt.n	80135bc <tSimpleLivingString3_pluck+0x38>
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
    }
}
 801362e:	b003      	add	sp, #12
 8013630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013634:	2100      	movs	r1, #0
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 8013636:	ebae 0201 	sub.w	r2, lr, r1
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801363a:	e9d0 540d 	ldrd	r5, r4, [r0, #52]	; 0x34
 801363e:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 8013640:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8013642:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 8013644:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8013646:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 8013648:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801364a:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 801364c:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801364e:	440b      	add	r3, r1
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8013650:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
 8013652:	3101      	adds	r1, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 8013654:	fbb2 f9f7 	udiv	r9, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8013658:	fbb3 f8f6 	udiv	r8, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 801365c:	fb07 2219 	mls	r2, r7, r9, r2
    for (int i = 0; i < length; i++)
 8013660:	458c      	cmp	ip, r1
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8013662:	fb06 3318 	mls	r3, r6, r8, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8013666:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801366a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801366e:	6812      	ldr	r2, [r2, #0]
 8013670:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 8013672:	d1e0      	bne.n	8013636 <tSimpleLivingString3_pluck+0xb2>
}
 8013674:	b003      	add	sp, #12
 8013676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801367a:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
    	pluckPoint = 1;
 801367e:	2501      	movs	r5, #1
 8013680:	ee05 ea90 	vmov	s11, lr
 8013684:	e7d0      	b.n	8013628 <tSimpleLivingString3_pluck+0xa4>
 8013686:	bf00      	nop
 8013688:	00000001 	.word	0x00000001

0801368c <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
 801368c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013690:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
 8013694:	6804      	ldr	r4, [r0, #0]
{
 8013696:	eef0 8a40 	vmov.f32	s17, s0

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
 801369a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
 801369e:	f104 0534 	add.w	r5, r4, #52	; 0x34
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
 80136a2:	f7fb f993 	bl	800e9cc <tExpSmooth_tick>
 80136a6:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
 80136aa:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
 80136ae:	4628      	mov	r0, r5
 80136b0:	f7fa f870 	bl	800d794 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
 80136b4:	eeb0 0a48 	vmov.f32	s0, s16
 80136b8:	4638      	mov	r0, r7
 80136ba:	f7fa f86b 	bl	800d794 <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
 80136be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	dd56      	ble.n	8013772 <tSimpleLivingString3_tick+0xe6>
    {
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 80136c4:	f104 0a50 	add.w	sl, r4, #80	; 0x50
 80136c8:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 80136cc:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
 80136d0:	2600      	movs	r6, #0
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 80136d2:	4628      	mov	r0, r5
    for (int i = 0; i < p->oversampling; i++)
 80136d4:	3601      	adds	r6, #1
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 80136d6:	f7fa f831 	bl	800d73c <tLinearDelay_tickOut>
 80136da:	4648      	mov	r0, r9
 80136dc:	f7fb fbda 	bl	800ee94 <tOnePole_tick>
 80136e0:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
 80136e4:	edd4 7a04 	vldr	s15, [r4, #16]
 80136e8:	4650      	mov	r0, sl
 80136ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80136ee:	ee27 0a80 	vmul.f32	s0, s15, s0
 80136f2:	f7fb fe19 	bl	800f328 <tHighpass_tick>
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 80136f6:	4640      	mov	r0, r8
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 80136f8:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 80136fc:	f7fa fd4e 	bl	800e19c <tFeedbackLeveler_tick>
 8013700:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8013704:	eef0 0a40 	vmov.f32	s1, s0
 8013708:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801370c:	f7fe f93a 	bl	8011984 <LEAF_clip>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 8013710:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 8013712:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 8013716:	f7fa f811 	bl	800d73c <tLinearDelay_tickOut>
 801371a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801371e:	eef0 0a40 	vmov.f32	s1, s0
 8013722:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013726:	f7fe f92d 	bl	8011984 <LEAF_clip>
 801372a:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
 801372e:	4628      	mov	r0, r5
 8013730:	ee38 0ac0 	vsub.f32	s0, s17, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 8013734:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
 8013738:	f7f9 ffec 	bl	800d714 <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
 801373c:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8013740:	4638      	mov	r0, r7
 8013742:	eeb1 0a40 	vneg.f32	s0, s0
 8013746:	f7f9 ffe5 	bl	800d714 <tLinearDelay_tickIn>
		tLinearDelay_addTo (&p->delayLineU, p->Lout * p->rippleGain, p->rippleDelay*wl);
 801374a:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 801374e:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8013752:	4628      	mov	r0, r5
 8013754:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013758:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
 801375c:	ee26 0a80 	vmul.f32	s0, s13, s0
 8013760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013764:	ee17 1a90 	vmov	r1, s15
 8013768:	f7fa f890 	bl	800d88c <tLinearDelay_addTo>
    for (int i = 0; i < p->oversampling; i++)
 801376c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801376e:	42b3      	cmp	r3, r6
 8013770:	dcaf      	bgt.n	80136d2 <tSimpleLivingString3_tick+0x46>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 8013772:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    Lfloat point = wl * p->pickupPoint;
 8013776:	ed94 7a13 	vldr	s14, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    Lfloat LfloatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 801377a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 801377c:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    Lfloat point = wl * p->pickupPoint;
 8013780:	ee67 7a08 	vmul.f32	s15, s14, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8013784:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 8013786:	ee35 7ac7 	vsub.f32	s14, s11, s14
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 801378a:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
 801378c:	fef8 6a67 	vrinta.f32	s13, s15
 8013790:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 8013794:	ee27 7a08 	vmul.f32	s14, s14, s16
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 8013798:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    Lfloat LfloatPart = point - whichPoint;
 801379c:	eeb8 6ae6 	vcvt.f32.s32	s12, s13
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 80137a0:	ee16 3a90 	vmov	r3, s13
    whichPoint = (int32_t)roundf(reversePoint);
 80137a4:	fef8 6a47 	vrinta.f32	s13, s14
 80137a8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 80137ac:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 80137ae:	698b      	ldr	r3, [r1, #24]
    Lfloat LfloatPart = point - whichPoint;
 80137b0:	ee77 7ac6 	vsub.f32	s15, s15, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 80137b4:	ee16 0a90 	vmov	r0, s13
    LfloatPart = reversePoint - whichPoint;
 80137b8:	eef8 4ae6 	vcvt.f32.s32	s9, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 80137bc:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 80137c0:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 80137c2:	fb07 2216 	mls	r2, r7, r6, r2
    LfloatPart = reversePoint - whichPoint;
 80137c6:	ee37 7a64 	vsub.f32	s14, s14, s9
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 80137ca:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 80137cc:	69c8      	ldr	r0, [r1, #28]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 80137ce:	6889      	ldr	r1, [r1, #8]
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 80137d0:	ee35 6ae7 	vsub.f32	s12, s11, s15
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 80137d4:	ee75 5ac7 	vsub.f32	s11, s11, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 80137d8:	fb93 f6f0 	sdiv	r6, r3, r0
 80137dc:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 80137e0:	1c56      	adds	r6, r2, #1
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 80137e2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80137e6:	edd2 4a00 	vldr	s9, [r2]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 80137ea:	1c5a      	adds	r2, r3, #1
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 80137ec:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80137f0:	edd3 6a00 	vldr	s13, [r3]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 80137f4:	fb96 f3f7 	sdiv	r3, r6, r7
 80137f8:	fb07 6613 	mls	r6, r7, r3, r6
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 80137fc:	fb92 f3f0 	sdiv	r3, r2, r0
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8013800:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 8013804:	fb00 2213 	mls	r2, r0, r3, r2
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
 8013808:	68a3      	ldr	r3, [r4, #8]
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 801380a:	ed95 4a00 	vldr	s8, [r5]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 801380e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8013812:	ee27 0a84 	vmul.f32	s0, s15, s8
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8013816:	edd1 7a00 	vldr	s15, [r1]
    p->prevDelayLength = p->waveLengthInSamples;
 801381a:	61a3      	str	r3, [r4, #24]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 801381c:	ee27 7a27 	vmul.f32	s14, s14, s15
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8013820:	eea4 0a86 	vfma.f32	s0, s9, s12
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8013824:	eea6 7aa5 	vfma.f32	s14, s13, s11
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 8013828:	ee30 0a07 	vadd.f32	s0, s0, s14
 801382c:	ee20 0a05 	vmul.f32	s0, s0, s10
 8013830:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
 8013834:	ecbd 8b02 	vpop	{d8}
 8013838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801383c <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
 801383c:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
 801383e:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 8013842:	4770      	bx	lr

08013844 <tTString_free>:
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
    x->pickupAmount = 0.0f;
    tPickupNonLinearity_initToPool(&x->p, mp);
}
void    tTString_free                  (tTString* const bw)
{
 8013844:	b510      	push	{r4, lr}
    _tTString* x = *bw;
 8013846:	6804      	ldr	r4, [r0, #0]
	_tPickupNonLinearity* p = *pl;
 8013848:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
	mpool_free((char*)p, p->mempool);
 801384c:	6801      	ldr	r1, [r0, #0]
 801384e:	f7fe fc97 	bl	8012180 <mpool_free>
    tPickupNonLinearity_free(&x->p);
    tNoise_free(&x->pickNoiseSource);
 8013852:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8013856:	f7ff f907 	bl	8012a68 <tNoise_free>
    tFeedbackLeveler_free(&x->feedbackP);
 801385a:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 801385e:	f7fa fc85 	bl	800e16c <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&x->feedback);
 8013862:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8013866:	f7fa fc81 	bl	800e16c <tFeedbackLeveler_free>
    tSVF_free(&x->barLP);
 801386a:	f504 7088 	add.w	r0, r4, #272	; 0x110
 801386e:	f7fb fc2d 	bl	800f0cc <tSVF_free>
    tHighpass_free(&x->barHP);
 8013872:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8013876:	f7fb fd47 	bl	800f308 <tHighpass_free>
    tSVF_free(&x->barResonator);
 801387a:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 801387e:	f7fb fc25 	bl	800f0cc <tSVF_free>
    tExpSmooth_free(&x->barPulse);
 8013882:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 8013886:	f7fb f867 	bl	800e958 <tExpSmooth_free>
    tSlide_free(&x->barPulseSlide);
 801388a:	f504 708a 	add.w	r0, r4, #276	; 0x114
 801388e:	f7fb f8df 	bl	800ea50 <tSlide_free>
    tSlide_free(&x->barSmooth);
 8013892:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8013896:	f7fb f8db 	bl	800ea50 <tSlide_free>
	tExpSmooth_free(&x->barSmoothVol);
 801389a:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 801389e:	f7fb f85b 	bl	800e958 <tExpSmooth_free>
	tExpSmooth_free(&x->barSmooth2);
 80138a2:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80138a6:	f7fb f857 	bl	800e958 <tExpSmooth_free>
	tSlide_free(&x->slide);
 80138aa:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80138ae:	f7fb f8cf 	bl	800ea50 <tSlide_free>
    tHighpass_free(&x->dcBlockP);
 80138b2:	f104 0020 	add.w	r0, r4, #32
 80138b6:	f7fb fd27 	bl	800f308 <tHighpass_free>
    tHighpass_free(&x->dcBlock);
 80138ba:	f104 001c 	add.w	r0, r4, #28
 80138be:	f7fb fd23 	bl	800f308 <tHighpass_free>
    tNoise_free(&x->noise);
 80138c2:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 80138c6:	f7ff f8cf 	bl	8012a68 <tNoise_free>
    tSVF_free(&x->peakFilt);
 80138ca:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 80138ce:	f7fb fbfd 	bl	800f0cc <tSVF_free>
    tSVF_free(&x->pickupFilter2);
 80138d2:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80138d6:	f7fb fbf9 	bl	800f0cc <tSVF_free>
    tSVF_free(&x->pickupFilter);
 80138da:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80138de:	f7fb fbf5 	bl	800f0cc <tSVF_free>
    tCycle_free(&x->pickupModOsc);
 80138e2:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80138e6:	f7fe fd07 	bl	80122f8 <tCycle_free>
    tCycle_free(&x->tensionModOsc);
 80138ea:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 80138ee:	f7fe fd03 	bl	80122f8 <tCycle_free>
    tSVF_free(&x->highpassP);
 80138f2:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80138f6:	f7fb fbe9 	bl	800f0cc <tSVF_free>
    tSVF_free(&x->lowpassP),
 80138fa:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80138fe:	f7fb fbe5 	bl	800f0cc <tSVF_free>
    tThiranAllpassSOCascade_free(&x->allpassP);
 8013902:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013906:	f7fb f93d 	bl	800eb84 <tThiranAllpassSOCascade_free>
    tThiranAllpassSOCascade_free(&x->allpass);
 801390a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801390e:	f7fb f939 	bl	800eb84 <tThiranAllpassSOCascade_free>
    tExpSmooth_free(&x->pickNoise);
 8013912:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 8013916:	f7fb f81f 	bl	800e958 <tExpSmooth_free>
    tExpSmooth_free(&x->pitchSmoother);
 801391a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801391e:	f7fb f81b 	bl	800e958 <tExpSmooth_free>
    tExpSmooth_free(&x->tensionSmoother);
 8013922:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8013926:	f7fb f817 	bl	800e958 <tExpSmooth_free>
    tCookOnePole_free(&x->reflFiltP);
 801392a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801392e:	f7fb fb07 	bl	800ef40 <tCookOnePole_free>
    tCookOnePole_free(&x->reflFilt);
 8013932:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013936:	f7fb fb03 	bl	800ef40 <tCookOnePole_free>
    tLagrangeDelay_free(&x->delayP);
 801393a:	f104 0018 	add.w	r0, r4, #24
 801393e:	f7f9 ffb7 	bl	800d8b0 <tLagrangeDelay_free>
    tLagrangeDelay_free(&x->delay);
 8013942:	f104 0014 	add.w	r0, r4, #20
 8013946:	f7f9 ffb3 	bl	800d8b0 <tLagrangeDelay_free>
    mpool_free((char*)x, x->mempool);
 801394a:	6821      	ldr	r1, [r4, #0]
 801394c:	4620      	mov	r0, r4
}
 801394e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)x, x->mempool);
 8013952:	f7fe bc15 	b.w	8012180 <mpool_free>
 8013956:	bf00      	nop

08013958 <tTString_tick>:

Lfloat   tTString_tick                  (tTString* const bw)
{
 8013958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801395c:	ed2d 8b10 	vpush	{d8-d15}
    _tTString* x = *bw;
 8013960:	6804      	ldr	r4, [r0, #0]
{
 8013962:	b093      	sub	sp, #76	; 0x4c
    Lfloat theOutput = 0.0f;
    x->feedbackNoise = tNoise_tick(&x->noise);
 8013964:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8013968:	f7ff f882 	bl	8012a70 <tNoise_tick>

    Lfloat barPos = x->barPosition;
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 801396c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013970:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
	{
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 8013974:	f504 708c 	add.w	r0, r4, #280	; 0x118
    Lfloat barPos = x->barPosition;
 8013978:	ed94 8a3b 	vldr	s16, [r4, #236]	; 0xec
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 801397c:	ee77 6a87 	vadd.f32	s13, s15, s14
    x->feedbackNoise = tNoise_tick(&x->noise);
 8013980:	ed84 0a58 	vstr	s0, [r4, #352]	; 0x160
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 8013984:	9000      	str	r0, [sp, #0]
 8013986:	eeb0 0a48 	vmov.f32	s0, s16
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 801398a:	eef4 6ac8 	vcmpe.f32	s13, s16
 801398e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013992:	d407      	bmi.n	80139a4 <tTString_tick+0x4c>
 8013994:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013998:	eef4 7ac8 	vcmpe.f32	s15, s16
 801399c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139a0:	f340 8385 	ble.w	80140ae <tTString_tick+0x756>
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 80139a4:	f7fb f80c 	bl	800e9c0 <tExpSmooth_setValAndDest>
 80139a8:	9800      	ldr	r0, [sp, #0]
    {
    	tExpSmooth_setDest(&x->barSmooth2,barPos);
    }

    //Lfloat currentBumpSmoothed = currentBump;
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
 80139aa:	f7fb f80f 	bl	800e9cc <tExpSmooth_tick>

    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 80139ae:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128


    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 80139b2:	f504 758e 	add.w	r5, r4, #284	; 0x11c
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
 80139b6:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 80139ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80139be:	f7fd fe71 	bl	80116a4 <fastabsf>
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 80139c2:	4628      	mov	r0, r5
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 80139c4:	eeb0 9a40 	vmov.f32	s18, s0
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 80139c8:	9500      	str	r5, [sp, #0]
 80139ca:	eeb0 0a48 	vmov.f32	s0, s16
 80139ce:	f7fa ffef 	bl	800e9b0 <tExpSmooth_setDest>
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
 80139d2:	9800      	ldr	r0, [sp, #0]
 80139d4:	f7fa fffa 	bl	800e9cc <tExpSmooth_tick>
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
 80139d8:	edd4 7a48 	vldr	s15, [r4, #288]	; 0x120
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
 80139dc:	eeb0 8a40 	vmov.f32	s16, s0
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
 80139e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80139e4:	f7fd fe5e 	bl	80116a4 <fastabsf>
        x->prevBarPosSmoothVol = barPosSmoothVol;
        Lfloat volCut = 1.0f;
        if (differenceFastSmooth < 0.0001f)
 80139e8:	eddf 7ada 	vldr	s15, [pc, #872]	; 8013d54 <tTString_tick+0x3fc>
        x->prevBarPosSmoothVol = barPosSmoothVol;
 80139ec:	ed84 8a48 	vstr	s16, [r4, #288]	; 0x120
        if (differenceFastSmooth < 0.0001f)
 80139f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80139f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139f8:	f140 8309 	bpl.w	801400e <tTString_tick+0x6b6>
        {
        	//volCut = LEAF_map(differenceFastSmooth, 0.00001f, 0.0001f, 0.0f, 1.0f);
        	volCut = ((differenceFastSmooth - 0.00001f) * 1111.111111111111111f);
 80139fc:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 8013d58 <tTString_tick+0x400>
 8013a00:	eddf 7ad6 	vldr	s15, [pc, #856]	; 8013d5c <tTString_tick+0x404>
 8013a04:	ee30 8a47 	vsub.f32	s16, s0, s14
 8013a08:	ee28 8a27 	vmul.f32	s16, s16, s15
        	if (volCut < 0.0f)
 8013a0c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a14:	f100 834f 	bmi.w	80140b6 <tTString_tick+0x75e>
        	{
        		volCut = 0.0f;
        	}
        }
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
 8013a18:	edd4 9a5b 	vldr	s19, [r4, #364]	; 0x16c
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 8013a1c:	ed94 0a3f 	vldr	s0, [r4, #252]	; 0xfc
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
 8013a20:	ee68 9aa9 	vmul.f32	s19, s17, s19
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 8013a24:	ee39 0ac0 	vsub.f32	s0, s19, s0
 8013a28:	f7fd fe3c 	bl	80116a4 <fastabsf>
 8013a2c:	eef0 7a40 	vmov.f32	s15, s0

    x->prevBarPosSmoothed = barPosSmoothed;
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 8013a30:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    x->prevBarPosSmoothed = barPosSmoothed;
 8013a34:	edc4 8a4a 	vstr	s17, [r4, #296]	; 0x128
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 8013a38:	ee79 0a09 	vadd.f32	s1, s18, s18
 8013a3c:	ed9f 0ad0 	vldr	s0, [pc, #832]	; 8013d80 <tTString_tick+0x428>
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 8013a40:	eef0 8a67 	vmov.f32	s17, s15
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 8013a44:	f7fd ff9e 	bl	8011984 <LEAF_clip>
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
 8013a48:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8013a4c:	f7fb f822 	bl	800ea94 <tSlide_tick>
    if (x->wound)
 8013a50:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
 8013a54:	ed84 0a30 	vstr	s0, [r4, #192]	; 0xc0
    if (x->wound)
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	f000 8358 	beq.w	801410e <tTString_tick+0x7b6>
    {
		if (bumpDifference > 1.0f)
 8013a5e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013a62:	eef4 8ac9 	vcmpe.f32	s17, s18
 8013a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a6a:	f300 82d3 	bgt.w	8014014 <tTString_tick+0x6bc>
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
			x->sampleCount = 0;
		}
		else
		{
			x->bumpOsc = 0;
 8013a6e:	2300      	movs	r3, #0
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8013a70:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 8013a74:	f504 768a 	add.w	r6, r4, #276	; 0x114
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8013a78:	f504 7584 	add.w	r5, r4, #264	; 0x108
			x->bumpOsc = 0;
 8013a7c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
				x->bumpCount = 0;
			}
			x->bumpCount++;
		}

		if (x->sampleCount < 3000)
 8013a80:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8013a84:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8013a88:	4293      	cmp	r3, r2
 8013a8a:	f240 830c 	bls.w	80140a6 <tTString_tick+0x74e>
			x->sampleCount++;

		}
		else
		{
			tSlide_setDest(&x->barSmooth, 5.0f);
 8013a8e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8013a92:	4628      	mov	r0, r5
 8013a94:	f7fa ffe0 	bl	800ea58 <tSlide_setDest>
		}
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
 8013a98:	4628      	mov	r0, r5
		tSVF_setFreq(&x->barResonator, barFreq);
 8013a9a:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
 8013a9e:	f7fa ffdf 	bl	800ea60 <tSlide_tickNoInput>
 8013aa2:	eef0 9a40 	vmov.f32	s19, s0
		tSVF_setFreq(&x->barResonator, barFreq);
 8013aa6:	4628      	mov	r0, r5
 8013aa8:	f7fb fb4e 	bl	800f148 <tSVF_setFreq>
		Lfloat filterAmount = 0.5f;
		Lfloat dryAmount = 1.0f;
		x->slideNoise = x->feedbackNoise;
 8013aac:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160

		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 8013ab0:	4630      	mov	r0, r6
		x->slideNoise = x->feedbackNoise;
 8013ab2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 8013ab6:	f7fa ffd3 	bl	800ea60 <tSlide_tickNoInput>

		if (pulseVal > .99f)
 8013aba:	eddf 7aa9 	vldr	s15, [pc, #676]	; 8013d60 <tTString_tick+0x408>
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 8013abe:	eef0 8a40 	vmov.f32	s17, s0
		if (pulseVal > .99f)
 8013ac2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aca:	f300 835c 	bgt.w	8014186 <tTString_tick+0x82e>
		{
			tSlide_setDest(&x->barPulseSlide, 0.0f);

		}

		x->slideNoise *= pulseVal;
 8013ace:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		//x->slideNoise = tExpSmooth_tick(&x->barPulse);
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 8013ad2:	4638      	mov	r0, r7
		x->slideNoise *= pulseVal;
 8013ad4:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8013ad8:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 8013adc:	f7fa ff76 	bl	800e9cc <tExpSmooth_tick>
 8013ae0:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		//x->slideNoise *= x->slideGain;
		Lfloat tempSlideNoise1 = x->slideNoise;
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 8013ae4:	4628      	mov	r0, r5
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 8013ae6:	ee60 8a27 	vmul.f32	s17, s0, s15
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 8013aea:	eeb0 0a68 	vmov.f32	s0, s17
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 8013aee:	edc4 8a34 	vstr	s17, [r4, #208]	; 0xd0
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 8013af2:	f7fb faef 	bl	800f0d4 <tSVF_tick>
 8013af6:	edd4 7a4c 	vldr	s15, [r4, #304]	; 0x130
 8013afa:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013afe:	f7fd ffa3 	bl	8011a48 <fast_tanh5>

		Lfloat filterFade = 1.0f;
		if (barFreq < 300.0f)
 8013b02:	eddf 7a98 	vldr	s15, [pc, #608]	; 8013d64 <tTString_tick+0x40c>
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 8013b06:	eeb0 9a40 	vmov.f32	s18, s0
		if (barFreq < 300.0f)
 8013b0a:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b12:	f100 8329 	bmi.w	8014168 <tTString_tick+0x810>
		Lfloat filterFade = 1.0f;
 8013b16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
			//filterFade = LEAF_map(barFreq, 100.0f, 300.0f, 0.0f, 1.0f);
			filterFade = (barFreq - 100.0f) * 0.005f;
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
		}

		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
 8013b1a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
		x->slideNoise *= x->muted;
 8013b1e:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8013b22:	f504 7086 	add.w	r0, r4, #268	; 0x10c
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
 8013b26:	ee29 9a07 	vmul.f32	s18, s18, s14
 8013b2a:	eee9 8a00 	vfma.f32	s17, s18, s0
		x->slideNoise *= x->muted;
 8013b2e:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8013b32:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8013b36:	f7fb fbf7 	bl	800f328 <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
 8013b3a:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8013b3e:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
 8013b42:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8013b46:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013b4a:	ee27 0a88 	vmul.f32	s0, s15, s16
 8013b4e:	f7fb fac1 	bl	800f0d4 <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
 8013b52:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
		x->slideNoise *= x->muted;
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
		x->slideNoise = x->slideNoise * x->slideGain;
    }
    for (int i = 0; i < x->oversampling; i++)
 8013b56:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
 8013b58:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
 8013b5c:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
 8013b5e:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
    for (int i = 0; i < x->oversampling; i++)
 8013b62:	f340 82fa 	ble.w	801415a <tTString_tick+0x802>
    {
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8013b66:	f104 0350 	add.w	r3, r4, #80	; 0x50
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
        }


        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8013b6a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8013b6e:	eeff ba00 	vmov.f32	s23, #240	; 0xbf800000 -1.0
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8013b72:	f104 0614 	add.w	r6, r4, #20
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8013b76:	9300      	str	r3, [sp, #0]
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8013b78:	f104 034c 	add.w	r3, r4, #76	; 0x4c
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8013b7c:	f104 0518 	add.w	r5, r4, #24
    	x->tensionAmount = tension * 0.01f;
 8013b80:	ed9f ba79 	vldr	s22, [pc, #484]	; 8013d68 <tTString_tick+0x410>
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8013b84:	9301      	str	r3, [sp, #4]
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 8013b86:	f504 73c0 	add.w	r3, r4, #384	; 0x180
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8013b8a:	ed9f 9a78 	vldr	s18, [pc, #480]	; 8013d6c <tTString_tick+0x414>
        Lfloat volumes[2];
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
 8013b8e:	f04f 0900 	mov.w	r9, #0
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 8013b92:	9302      	str	r3, [sp, #8]
 8013b94:	f504 73be 	add.w	r3, r4, #380	; 0x17c
        Lfloat positionMax = (x->openStringLength * 0.021666666666667f);
 8013b98:	eddf aa75 	vldr	s21, [pc, #468]	; 8013d70 <tTString_tick+0x418>
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 8013b9c:	9303      	str	r3, [sp, #12]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 8013b9e:	f104 0324 	add.w	r3, r4, #36	; 0x24
        Lfloat positionMin = (x->openStringLength * 0.104166666666667f);
 8013ba2:	ed9f aa74 	vldr	s20, [pc, #464]	; 8013d74 <tTString_tick+0x41c>
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 8013ba6:	9304      	str	r3, [sp, #16]
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 8013ba8:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8013bac:	9305      	str	r3, [sp, #20]
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 8013bae:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 8013bb2:	9306      	str	r3, [sp, #24]
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8013bb4:	f504 73ac 	add.w	r3, r4, #344	; 0x158
 8013bb8:	9307      	str	r3, [sp, #28]
 8013bba:	f104 031c 	add.w	r3, r4, #28
 8013bbe:	9308      	str	r3, [sp, #32]
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8013bc0:	f504 73ae 	add.w	r3, r4, #348	; 0x15c
 8013bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8013bc6:	f104 0320 	add.w	r3, r4, #32
 8013bca:	930a      	str	r3, [sp, #40]	; 0x28
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
 8013bcc:	f104 0368 	add.w	r3, r4, #104	; 0x68
 8013bd0:	930b      	str	r3, [sp, #44]	; 0x2c
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 8013bd2:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 8013bd6:	930c      	str	r3, [sp, #48]	; 0x30
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 8013bd8:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 8013bdc:	930d      	str	r3, [sp, #52]	; 0x34
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
 8013bde:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 8013be2:	930e      	str	r3, [sp, #56]	; 0x38
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
 8013be4:	f504 73c4 	add.w	r3, r4, #392	; 0x188
 8013be8:	930f      	str	r3, [sp, #60]	; 0x3c
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8013bea:	9800      	ldr	r0, [sp, #0]
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
 8013bec:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8013bf0:	f7fa feec 	bl	800e9cc <tExpSmooth_tick>
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8013bf4:	9801      	ldr	r0, [sp, #4]
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8013bf6:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8013bfa:	f7fa fee7 	bl	800e9cc <tExpSmooth_tick>
        if (currentDelay < 5.0f)
 8013bfe:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8013c02:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8013c06:	4630      	mov	r0, r6
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8013c08:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
        	currentDelay = 5.0f;
 8013c0c:	eef4 8a67 	vcmp.f32	s17, s15
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8013c10:	ed94 6a17 	vldr	s12, [r4, #92]	; 0x5c
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8013c14:	ee20 0a07 	vmul.f32	s0, s0, s14
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8013c18:	edd4 6a53 	vldr	s13, [r4, #332]	; 0x14c
 8013c1c:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
        	currentDelay = 5.0f;
 8013c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8013c24:	ee20 0a28 	vmul.f32	s0, s0, s17
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8013c28:	ee29 7a47 	vnmul.f32	s14, s18, s14
        	currentDelay = 5.0f;
 8013c2c:	bf48      	it	mi
 8013c2e:	eef0 8a67 	vmovmi.f32	s17, s15
        if (currentDelay > x->maxDelay)
 8013c32:	edd4 7a54 	vldr	s15, [r4, #336]	; 0x150
    	x->tensionAmount = tension * 0.01f;
 8013c36:	ee20 0a0b 	vmul.f32	s0, s0, s22
        if (currentDelay > x->maxDelay)
 8013c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    	x->tensionAmount = tension * 0.01f;
 8013c3e:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
        	currentDelay = x->maxDelay;
 8013c42:	eef4 7a68 	vcmp.f32	s15, s17
 8013c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c4a:	bf48      	it	mi
 8013c4c:	eef0 8a67 	vmovmi.f32	s17, s15
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8013c50:	ee38 0ac0 	vsub.f32	s0, s17, s0
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
 8013c54:	ee28 8a88 	vmul.f32	s16, s17, s16
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8013c58:	eea6 0a66 	vfms.f32	s0, s12, s13
 8013c5c:	eea7 0a28 	vfma.f32	s0, s14, s17
 8013c60:	f7f9 fe82 	bl	800d968 <tLagrangeDelay_setDelay>
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8013c64:	ed94 0a28 	vldr	s0, [r4, #160]	; 0xa0
 8013c68:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
 8013c6c:	4628      	mov	r0, r5
 8013c6e:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8013c72:	ed94 7a53 	vldr	s14, [r4, #332]	; 0x14c
 8013c76:	edd4 7a4f 	vldr	s15, [r4, #316]	; 0x13c
 8013c7a:	eea6 0ac7 	vfms.f32	s0, s13, s14
 8013c7e:	ee69 7a67 	vnmul.f32	s15, s18, s15
 8013c82:	eea7 0aa8 	vfma.f32	s0, s15, s17
 8013c86:	f7f9 fe6f 	bl	800d968 <tLagrangeDelay_setDelay>
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 8013c8a:	9802      	ldr	r0, [sp, #8]
 8013c8c:	f7fe fef0 	bl	8012a70 <tNoise_tick>
 8013c90:	eeb0 ca40 	vmov.f32	s24, s0
 8013c94:	9803      	ldr	r0, [sp, #12]
 8013c96:	f7fa fe99 	bl	800e9cc <tExpSmooth_tick>
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 8013c9a:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 8013c9e:	ee2c ca00 	vmul.f32	s24, s24, s0
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 8013ca2:	4630      	mov	r0, r6
 8013ca4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013ca8:	ee3c ca0c 	vadd.f32	s24, s24, s24
 8013cac:	ee17 1a90 	vmov	r1, s15
 8013cb0:	eeb0 0a4c 	vmov.f32	s0, s24
 8013cb4:	f7f9 ff7c 	bl	800dbb0 <tLagrangeDelay_addTo>
        tLagrangeDelay_addTo(&x->delayP,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 8013cb8:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
 8013cbc:	eeb0 0a4c 	vmov.f32	s0, s24
 8013cc0:	4628      	mov	r0, r5
 8013cc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013cc6:	ee17 1a90 	vmov	r1, s15
 8013cca:	f7f9 ff71 	bl	800dbb0 <tLagrangeDelay_addTo>
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 8013cce:	9804      	ldr	r0, [sp, #16]
 8013cd0:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8013cd4:	f7fb f950 	bl	800ef78 <tCookOnePole_tick>
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 8013cd8:	9805      	ldr	r0, [sp, #20]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 8013cda:	eef0 ca40 	vmov.f32	s25, s0
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 8013cde:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8013ce2:	f7fb f949 	bl	800ef78 <tCookOnePole_tick>
        Lfloat rippleLength = x->rippleRate *  currentDelay;
 8013ce6:	ed94 ca20 	vldr	s24, [r4, #128]	; 0x80
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 8013cea:	4630      	mov	r0, r6
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 8013cec:	eeb0 da40 	vmov.f32	s26, s0
        Lfloat rippleLength = x->rippleRate *  currentDelay;
 8013cf0:	ee28 ca8c 	vmul.f32	s24, s17, s24
        uint32_t rippleLengthInt = (uint32_t) rippleLength;
 8013cf4:	eefc facc 	vcvt.u32.f32	s31, s24
        Lfloat rippleLengthAlpha = rippleLength - rippleLengthInt;
 8013cf8:	eef8 7a6f 	vcvt.f32.u32	s15, s31
 8013cfc:	ee3c ca67 	vsub.f32	s24, s24, s15
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 8013d00:	f7f9 fdfe 	bl	800d900 <tLagrangeDelay_tickOut>
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 8013d04:	4628      	mov	r0, r5
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 8013d06:	eeb0 ea40 	vmov.f32	s28, s0
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 8013d0a:	f7f9 fdf9 	bl	800d900 <tLagrangeDelay_tickOut>
 8013d0e:	eef0 da40 	vmov.f32	s27, s0
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
 8013d12:	ee1f 1a90 	vmov	r1, s31
 8013d16:	eeb0 0a4c 	vmov.f32	s0, s24
 8013d1a:	4630      	mov	r0, r6
 8013d1c:	f7f9 fee0 	bl	800dae0 <tLagrangeDelay_tapOutInterpolated>
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
 8013d20:	ee1f 1a90 	vmov	r1, s31
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
 8013d24:	eef0 ea40 	vmov.f32	s29, s0
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
 8013d28:	4628      	mov	r0, r5
 8013d2a:	eeb0 0a4c 	vmov.f32	s0, s24
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
 8013d2e:	ed94 fa1f 	vldr	s30, [r4, #124]	; 0x7c
        Lfloat rippleOutP = delayOutP + rippleOut1P;
 8013d32:	eeb0 ca6d 	vmov.f32	s24, s27
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
 8013d36:	f7f9 fed3 	bl	800dae0 <tLagrangeDelay_tapOutInterpolated>
        Lfloat rippleOutP = delayOutP + rippleOut1P;
 8013d3a:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
        Lfloat rippleOut = delayOut + rippleOut1;
 8013d3e:	eeae ea8f 	vfma.f32	s28, s29, s30
        if (x->inharmonic)
 8013d42:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        Lfloat rippleOutP = delayOutP + rippleOut1P;
 8013d46:	eea0 ca27 	vfma.f32	s24, s0, s15
        if (x->inharmonic)
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	f040 81c7 	bne.w	80140de <tTString_tick+0x786>
 8013d50:	e018      	b.n	8013d84 <tTString_tick+0x42c>
 8013d52:	bf00      	nop
 8013d54:	38d1b717 	.word	0x38d1b717
 8013d58:	3727c5ac 	.word	0x3727c5ac
 8013d5c:	448ae38e 	.word	0x448ae38e
 8013d60:	3f7d70a4 	.word	0x3f7d70a4
 8013d64:	43960000 	.word	0x43960000
 8013d68:	3c23d70a 	.word	0x3c23d70a
 8013d6c:	3e22f983 	.word	0x3e22f983
 8013d70:	3cb17e4b 	.word	0x3cb17e4b
 8013d74:	3dd55555 	.word	0x3dd55555
 8013d78:	3fa66666 	.word	0x3fa66666
 8013d7c:	42c80000 	.word	0x42c80000
 8013d80:	00000000 	.word	0x00000000
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8013d84:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
 8013d88:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8013d8c:	edd4 7a1d 	vldr	s15, [r4, #116]	; 0x74
 8013d90:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013d94:	edd4 0a1e 	vldr	s1, [r4, #120]	; 0x78
 8013d98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013d9c:	ee67 7a8e 	vmul.f32	s15, s15, s28
 8013da0:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8013da4:	f7fd fdee 	bl	8011984 <LEAF_clip>
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8013da8:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
 8013dac:	edd4 7a1d 	vldr	s15, [r4, #116]	; 0x74
 8013db0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8013db4:	edd4 0a1e 	vldr	s1, [r4, #120]	; 0x78
 8013db8:	ee67 7a87 	vmul.f32	s15, s15, s14
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8013dbc:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8013dc0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013dc4:	ee67 7a8c 	vmul.f32	s15, s15, s24
 8013dc8:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8013dcc:	f7fd fdda 	bl	8011984 <LEAF_clip>
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 8013dd0:	9806      	ldr	r0, [sp, #24]
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8013dd2:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
        Lfloat positionMin = (x->openStringLength * 0.104166666666667f);
 8013dd6:	ed94 ca3d 	vldr	s24, [r4, #244]	; 0xf4
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 8013dda:	edd4 da27 	vldr	s27, [r4, #156]	; 0x9c
 8013dde:	f7fe fa8f 	bl	8012300 <tCycle_tick>
 8013de2:	edd4 7a2d 	vldr	s15, [r4, #180]	; 0xb4
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
 8013de6:	ee2c 1a2a 	vmul.f32	s2, s24, s21
 8013dea:	ee6c 0a0a 	vmul.f32	s1, s24, s20
 8013dee:	eee0 da27 	vfma.f32	s27, s0, s15
 8013df2:	eeb0 0a6d 	vmov.f32	s0, s27
 8013df6:	f7fd fbd5 	bl	80115a4 <LEAF_mapFromZeroToOneInput>
        while (pickupPos > halfCurrentDelay)
 8013dfa:	eeb4 8ac0 	vcmpe.f32	s16, s0
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
 8013dfe:	eef0 7a40 	vmov.f32	s15, s0
        while (pickupPos > halfCurrentDelay)
 8013e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e06:	f140 817b 	bpl.w	8014100 <tTString_tick+0x7a8>
        uint32_t backwards = 0;
 8013e0a:	2300      	movs	r3, #0
        	pickupPos = pickupPos - halfCurrentDelay;
 8013e0c:	ee77 7ac8 	vsub.f32	s15, s15, s16
        	backwards = !backwards;
 8013e10:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos > halfCurrentDelay)
 8013e14:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e1c:	d4f6      	bmi.n	8013e0c <tTString_tick+0x4b4>
        while (pickupPos < 0.0f)
 8013e1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e26:	d508      	bpl.n	8013e3a <tTString_tick+0x4e2>
        	pickupPos = pickupPos + halfCurrentDelay;
 8013e28:	ee77 7a88 	vadd.f32	s15, s15, s16
        	backwards = !backwards;
 8013e2c:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos < 0.0f)
 8013e30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e38:	d4f6      	bmi.n	8013e28 <tTString_tick+0x4d0>
        if (backwards)
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	f000 813e 	beq.w	80140bc <tTString_tick+0x764>
        	pickupPosFinal = halfCurrentDelay - pickupPos;
 8013e40:	ee78 6a67 	vsub.f32	s13, s16, s15
        	inversePickupPos = halfCurrentDelay + pickupPos;
 8013e44:	ee78 8a27 	vadd.f32	s17, s16, s15
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8013e48:	eefc 7ae6 	vcvt.u32.f32	s15, s13
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
 8013e4c:	ee86 7a88 	vdiv.f32	s14, s13, s16
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8013e50:	ee17 7a90 	vmov	r7, s15
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
 8013e54:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8013e58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e5c:	ee36 8ae7 	vsub.f32	s16, s13, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8013e60:	ee79 dac8 	vsub.f32	s27, s19, s16
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
 8013e64:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8013e68:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 8013e6c:	4639      	mov	r1, r7
 8013e6e:	4630      	mov	r0, r6
    for (int i = 0; i < x->oversampling; i++)
 8013e70:	f109 0901 	add.w	r9, r9, #1
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
 8013e74:	ee17 8a90 	vmov	r8, s15
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
 8013e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
        uint32_t inversePickupPosIntPlusOne = inversePickupPosInt + 1;
 8013e7c:	f108 0b01 	add.w	fp, r8, #1
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
 8013e80:	ee78 8ae7 	vsub.f32	s17, s17, s15
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 8013e84:	f7f9 fe20 	bl	800dac8 <tLagrangeDelay_tapOut>
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 8013e88:	4651      	mov	r1, sl
 8013e8a:	4630      	mov	r0, r6
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 8013e8c:	eef0 ea40 	vmov.f32	s29, s0
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 8013e90:	f7f9 fe1a 	bl	800dac8 <tLagrangeDelay_tapOut>
 8013e94:	ee20 ea08 	vmul.f32	s28, s0, s16
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8013e98:	4641      	mov	r1, r8
 8013e9a:	4630      	mov	r0, r6
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
 8013e9c:	ee39 cae8 	vsub.f32	s24, s19, s17
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8013ea0:	f7f9 fe12 	bl	800dac8 <tLagrangeDelay_tapOut>
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8013ea4:	4659      	mov	r1, fp
 8013ea6:	4630      	mov	r0, r6
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 8013ea8:	eeae eaad 	vfma.f32	s28, s29, s27
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8013eac:	eef0 ea40 	vmov.f32	s29, s0
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8013eb0:	f7f9 fe0a 	bl	800dac8 <tLagrangeDelay_tapOut>
 8013eb4:	eef0 3a40 	vmov.f32	s7, s0
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8013eb8:	4639      	mov	r1, r7
 8013eba:	4628      	mov	r0, r5
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8013ebc:	ee63 3aa8 	vmul.f32	s7, s7, s17
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8013ec0:	eeb0 0a4e 	vmov.f32	s0, s28
 8013ec4:	f7ff f904 	bl	80130d0 <pickupNonLinearity>
 8013ec8:	eeb0 4a40 	vmov.f32	s8, s0
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8013ecc:	eeee 3a8c 	vfma.f32	s7, s29, s24
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8013ed0:	eeb0 0a63 	vmov.f32	s0, s7
 8013ed4:	f7ff f8fc 	bl	80130d0 <pickupNonLinearity>
 8013ed8:	ee34 0a40 	vsub.f32	s0, s8, s0
 8013edc:	ed84 0a25 	vstr	s0, [r4, #148]	; 0x94
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8013ee0:	f7f9 fdf2 	bl	800dac8 <tLagrangeDelay_tapOut>
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 8013ee4:	4651      	mov	r1, sl
 8013ee6:	4628      	mov	r0, r5
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8013ee8:	eeb0 ea40 	vmov.f32	s28, s0
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 8013eec:	f7f9 fdec 	bl	800dac8 <tLagrangeDelay_tapOut>
 8013ef0:	ee20 8a08 	vmul.f32	s16, s0, s16
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8013ef4:	4641      	mov	r1, r8
 8013ef6:	4628      	mov	r0, r5
 8013ef8:	f7f9 fde6 	bl	800dac8 <tLagrangeDelay_tapOut>
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8013efc:	4659      	mov	r1, fp
 8013efe:	4628      	mov	r0, r5
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 8013f00:	eeae 8a2d 	vfma.f32	s16, s28, s27
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8013f04:	eef0 da40 	vmov.f32	s27, s0
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8013f08:	f7f9 fdde 	bl	800dac8 <tLagrangeDelay_tapOut>
 8013f0c:	eef0 3a40 	vmov.f32	s7, s0
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8013f10:	9808      	ldr	r0, [sp, #32]
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8013f12:	ee63 3aa8 	vmul.f32	s7, s7, s17
		x->pickupOutP =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8013f16:	eeb0 0a48 	vmov.f32	s0, s16
 8013f1a:	f7ff f8d9 	bl	80130d0 <pickupNonLinearity>
 8013f1e:	eeb0 4a40 	vmov.f32	s8, s0
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8013f22:	eeed 3a8c 	vfma.f32	s7, s27, s24
		x->pickupOutP =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8013f26:	eeb0 0a63 	vmov.f32	s0, s7
 8013f2a:	f7ff f8d1 	bl	80130d0 <pickupNonLinearity>
 8013f2e:	ee34 4a40 	vsub.f32	s8, s8, s0
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8013f32:	ed94 0a34 	vldr	s0, [r4, #208]	; 0xd0
 8013f36:	ed94 7a58 	vldr	s14, [r4, #352]	; 0x160
 8013f3a:	ee3c 0a80 	vadd.f32	s0, s25, s0
 8013f3e:	edd4 7a59 	vldr	s15, [r4, #356]	; 0x164
		x->pickupOutP =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8013f42:	ed84 4a26 	vstr	s8, [r4, #152]	; 0x98
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8013f46:	eea7 0a27 	vfma.f32	s0, s14, s15
 8013f4a:	f7fb f9ed 	bl	800f328 <tHighpass_tick>
 8013f4e:	9807      	ldr	r0, [sp, #28]
 8013f50:	f7fa f924 	bl	800e19c <tFeedbackLeveler_tick>
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8013f54:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8013f58:	eef0 8a40 	vmov.f32	s17, s0
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8013f5c:	edd4 6a58 	vldr	s13, [r4, #352]	; 0x160
 8013f60:	ee3d 0a27 	vadd.f32	s0, s26, s15
 8013f64:	ed94 7a59 	vldr	s14, [r4, #356]	; 0x164
 8013f68:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013f6a:	eea6 0a87 	vfma.f32	s0, s13, s14
 8013f6e:	f7fb f9db 	bl	800f328 <tHighpass_tick>
 8013f72:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f74:	f7fa f912 	bl	800e19c <tFeedbackLeveler_tick>
 8013f78:	eeb0 8a40 	vmov.f32	s16, s0
        tLagrangeDelay_tickIn(&x->delay, inputSample);
 8013f7c:	4630      	mov	r0, r6
 8013f7e:	eeb0 0a68 	vmov.f32	s0, s17
 8013f82:	f7f9 fcaf 	bl	800d8e4 <tLagrangeDelay_tickIn>
        tLagrangeDelay_tickIn(&x->delayP, inputSampleP);
 8013f86:	4628      	mov	r0, r5
 8013f88:	eeb0 0a48 	vmov.f32	s0, s16
 8013f8c:	f7f9 fcaa 	bl	800d8e4 <tLagrangeDelay_tickIn>
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
 8013f90:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8013f92:	ed94 0a26 	vldr	s0, [r4, #152]	; 0x98
 8013f96:	f7fb f89d 	bl	800f0d4 <tSVF_tick>
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 8013f9a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013f9c:	f7fb f89a 	bl	800f0d4 <tSVF_tick>
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
 8013fa0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 8013fa4:	eeb0 8a40 	vmov.f32	s16, s0
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
 8013fa8:	ed94 7a63 	vldr	s14, [r4, #396]	; 0x18c
 8013fac:	eeb0 0a6b 	vmov.f32	s0, s23
 8013fb0:	a810      	add	r0, sp, #64	; 0x40
 8013fb2:	eea7 0a27 	vfma.f32	s0, s14, s15
 8013fb6:	f7fd fc3b 	bl	8011830 <LEAF_crossfade>
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
 8013fba:	ed94 7a2a 	vldr	s14, [r4, #168]	; 0xa8
 8013fbe:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 8013fc2:	980d      	ldr	r0, [sp, #52]	; 0x34
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
 8013fc4:	eee7 7a08 	vfma.f32	s15, s14, s16
 8013fc8:	ee37 8aa7 	vadd.f32	s16, s15, s15
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 8013fcc:	eeb0 0a48 	vmov.f32	s0, s16
 8013fd0:	f7fb f880 	bl	800f0d4 <tSVF_tick>
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
 8013fd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013fd6:	f7fb f87d 	bl	800f0d4 <tSVF_tick>
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
 8013fda:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013fdc:	f7fb f87a 	bl	800f0d4 <tSVF_tick>
    for (int i = 0; i < x->oversampling; i++)
 8013fe0:	6863      	ldr	r3, [r4, #4]

        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
 8013fe2:	eddd 6a11 	vldr	s13, [sp, #68]	; 0x44
    for (int i = 0; i < x->oversampling; i++)
 8013fe6:	454b      	cmp	r3, r9
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
 8013fe8:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
    for (int i = 0; i < x->oversampling; i++)
 8013fec:	f73f adfd 	bgt.w	8013bea <tTString_tick+0x292>
        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
 8013ff0:	ed5f 7a9f 	vldr	s15, [pc, #-636]	; 8013d78 <tTString_tick+0x420>
 8013ff4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013ff8:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013ffc:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014000:	eea7 0a87 	vfma.f32	s0, s15, s14
    }
    return theOutput;
}
 8014004:	b013      	add	sp, #76	; 0x4c
 8014006:	ecbd 8b10 	vpop	{d8-d15}
 801400a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Lfloat volCut = 1.0f;
 801400e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014012:	e501      	b.n	8013a18 <tTString_tick+0xc0>
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8014014:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 8014018:	f504 768a 	add.w	r6, r4, #276	; 0x114
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 801401c:	eeb0 0a49 	vmov.f32	s0, s18
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8014020:	f504 7584 	add.w	r5, r4, #264	; 0x108
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8014024:	4638      	mov	r0, r7
 8014026:	f7fa fcc7 	bl	800e9b8 <tExpSmooth_setVal>
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 801402a:	eeb0 0a49 	vmov.f32	s0, s18
 801402e:	4630      	mov	r0, r6
 8014030:	f7fa fd12 	bl	800ea58 <tSlide_setDest>
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 8014034:	eec9 6a28 	vdiv.f32	s13, s18, s17
 8014038:	edd4 7a41 	vldr	s15, [r4, #260]	; 0x104
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 801403c:	4628      	mov	r0, r5
			if (x->timeSinceLastBump < 100)
 801403e:	ed1f 7ab1 	vldr	s14, [pc, #-708]	; 8013d7c <tTString_tick+0x424>
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8014042:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8014046:	ed94 6a02 	vldr	s12, [r4, #8]
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 801404a:	eef8 7a67 	vcvt.f32.u32	s15, s15
			x->lastBump = currentBump;
 801404e:	edc4 9a3f 	vstr	s19, [r4, #252]	; 0xfc
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8014052:	ee20 0a06 	vmul.f32	s0, s0, s12
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 8014056:	ee77 7aa6 	vadd.f32	s15, s15, s13
			if (x->timeSinceLastBump < 100)
 801405a:	eef4 7ac7 	vcmpe.f32	s15, s14
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 801405e:	edc4 7a40 	vstr	s15, [r4, #256]	; 0x100
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8014062:	ee80 0a27 	vdiv.f32	s0, s0, s15
			if (x->timeSinceLastBump < 100)
 8014066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801406a:	bf4c      	ite	mi
 801406c:	2301      	movmi	r3, #1
 801406e:	2300      	movpl	r3, #0
 8014070:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8014074:	f7fa fcf0 	bl	800ea58 <tSlide_setDest>
			x->sampleCount = 0;
 8014078:	2200      	movs	r2, #0
		if (x->bumpOsc)
 801407a:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
			x->sampleCount = 0;
 801407e:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
		if (x->bumpOsc)
 8014082:	b183      	cbz	r3, 80140a6 <tTString_tick+0x74e>
			if (x->bumpCount > x->timeSinceLastBump)
 8014084:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8014088:	edd4 7a40 	vldr	s15, [r4, #256]	; 0x100
 801408c:	ee07 3a10 	vmov	s14, r3
 8014090:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014094:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801409c:	dc79      	bgt.n	8014192 <tTString_tick+0x83a>
			x->bumpCount++;
 801409e:	3301      	adds	r3, #1
 80140a0:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 80140a4:	4613      	mov	r3, r2
			x->sampleCount++;
 80140a6:	3301      	adds	r3, #1
 80140a8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 80140ac:	e4f4      	b.n	8013a98 <tTString_tick+0x140>
    	tExpSmooth_setDest(&x->barSmooth2,barPos);
 80140ae:	f7fa fc7f 	bl	800e9b0 <tExpSmooth_setDest>
 80140b2:	9800      	ldr	r0, [sp, #0]
 80140b4:	e479      	b.n	80139aa <tTString_tick+0x52>
        		volCut = 0.0f;
 80140b6:	ed1f 8ace 	vldr	s16, [pc, #-824]	; 8013d80 <tTString_tick+0x428>
 80140ba:	e4ad      	b.n	8013a18 <tTString_tick+0xc0>
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 80140bc:	eefc 6ae7 	vcvt.u32.f32	s13, s15
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
 80140c0:	ee87 7a88 	vdiv.f32	s14, s15, s16
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 80140c4:	ee16 7a90 	vmov	r7, s13
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
 80140c8:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 80140cc:	eef8 6a66 	vcvt.f32.u32	s13, s13
        Lfloat inversePickupPos = currentDelay - pickupPos;
 80140d0:	ee78 8ae7 	vsub.f32	s17, s17, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 80140d4:	ee37 8ae6 	vsub.f32	s16, s15, s13
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 80140d8:	ee79 dac8 	vsub.f32	s27, s19, s16
        if (backwards)
 80140dc:	e6c2      	b.n	8013e64 <tTString_tick+0x50c>
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
 80140de:	eeb0 0a4e 	vmov.f32	s0, s28
 80140e2:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80140e6:	f7fa fe3f 	bl	800ed68 <tThiranAllpassSOCascade_tick>
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
 80140ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
 80140ee:	eeb0 ea40 	vmov.f32	s28, s0
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
 80140f2:	eeb0 0a4c 	vmov.f32	s0, s24
 80140f6:	f7fa fe37 	bl	800ed68 <tThiranAllpassSOCascade_tick>
 80140fa:	eeb0 ca40 	vmov.f32	s24, s0
 80140fe:	e641      	b.n	8013d84 <tTString_tick+0x42c>
        while (pickupPos < 0.0f)
 8014100:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014108:	d5d8      	bpl.n	80140bc <tTString_tick+0x764>
        uint32_t backwards = 0;
 801410a:	2300      	movs	r3, #0
 801410c:	e68c      	b.n	8013e28 <tTString_tick+0x4d0>
		x->slideNoise *= x->muted;
 801410e:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8014112:	f504 7086 	add.w	r0, r4, #268	; 0x10c
		x->slideNoise *= x->muted;
 8014116:	ed94 0a58 	vldr	s0, [r4, #352]	; 0x160
 801411a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801411e:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8014122:	f7fb f901 	bl	800f328 <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
 8014126:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
 801412a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 801412e:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
 8014132:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014136:	f504 7088 	add.w	r0, r4, #272	; 0x110
 801413a:	ee27 0a87 	vmul.f32	s0, s15, s14
 801413e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8014142:	f7fa ffc7 	bl	800f0d4 <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
 8014146:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
    for (int i = 0; i < x->oversampling; i++)
 801414a:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
 801414c:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
 8014150:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
 8014152:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
    for (int i = 0; i < x->oversampling; i++)
 8014156:	f73f ad06 	bgt.w	8013b66 <tTString_tick+0x20e>
 801415a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80141b4 <tTString_tick+0x85c>
}
 801415e:	b013      	add	sp, #76	; 0x4c
 8014160:	ecbd 8b10 	vpop	{d8-d15}
 8014164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			filterFade = (barFreq - 100.0f) * 0.005f;
 8014168:	eddf 7a13 	vldr	s15, [pc, #76]	; 80141b8 <tTString_tick+0x860>
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
 801416c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			filterFade = (barFreq - 100.0f) * 0.005f;
 8014170:	eddf 0a12 	vldr	s1, [pc, #72]	; 80141bc <tTString_tick+0x864>
 8014174:	ee79 9ae7 	vsub.f32	s19, s19, s15
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
 8014178:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80141b4 <tTString_tick+0x85c>
 801417c:	ee69 0aa0 	vmul.f32	s1, s19, s1
 8014180:	f7fd fc00 	bl	8011984 <LEAF_clip>
 8014184:	e4c9      	b.n	8013b1a <tTString_tick+0x1c2>
			tSlide_setDest(&x->barPulseSlide, 0.0f);
 8014186:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80141b4 <tTString_tick+0x85c>
 801418a:	4630      	mov	r0, r6
 801418c:	f7fa fc64 	bl	800ea58 <tSlide_setDest>
 8014190:	e49d      	b.n	8013ace <tTString_tick+0x176>
				tExpSmooth_setVal(&x->barPulse, 1.0f);
 8014192:	eeb0 0a49 	vmov.f32	s0, s18
 8014196:	4638      	mov	r0, r7
 8014198:	f7fa fc0e 	bl	800e9b8 <tExpSmooth_setVal>
				tSlide_setDest(&x->barPulseSlide, 1.0f);
 801419c:	eeb0 0a49 	vmov.f32	s0, s18
 80141a0:	4630      	mov	r0, r6
 80141a2:	f7fa fc59 	bl	800ea58 <tSlide_setDest>
			x->bumpCount++;
 80141a6:	2201      	movs	r2, #1
		if (x->sampleCount < 3000)
 80141a8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
			x->bumpCount++;
 80141ac:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 80141b0:	e468      	b.n	8013a84 <tTString_tick+0x12c>
 80141b2:	bf00      	nop
 80141b4:	00000000 	.word	0x00000000
 80141b8:	42c80000 	.word	0x42c80000
 80141bc:	3ba3d70a 	.word	0x3ba3d70a

080141c0 <tTString_setFreq>:

void    tTString_setFreq               (tTString* const bw, Lfloat freq)
{
 80141c0:	b510      	push	{r4, lr}
 80141c2:	ed2d 8b04 	vpush	{d8-d9}
    _tTString* x = *bw;
 80141c6:	6804      	ldr	r4, [r0, #0]
    x->freq = freq;

    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);

    //tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 1.0f);
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 80141c8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
{
 80141cc:	b082      	sub	sp, #8
    if (freq < x->actualLowestFreq)
 80141ce:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 80141d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80141d6:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
        freq = x->actualLowestFreq;
 80141da:	eef4 7a40 	vcmp.f32	s15, s0
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 80141de:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
        freq = x->actualLowestFreq;
 80141e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e6:	fe37 0a80 	vselgt.f32	s0, s15, s0
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 80141ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
    x->freq = freq;
 80141ee:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 80141f2:	ee20 8a08 	vmul.f32	s16, s0, s16
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 80141f6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80141fa:	f7fa fbd9 	bl	800e9b0 <tExpSmooth_setDest>

    //tCycle_setFreq(&x->tensionModOsc, freq * x->invOversamplingTimesTwo);
#ifdef ARM_MATH_CM7
    Lfloat result = 0.0f;
 80141fe:	2300      	movs	r3, #0
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 8014200:	eeb0 0a48 	vmov.f32	s0, s16
 8014204:	edd4 8a50 	vldr	s17, [r4, #320]	; 0x140
    Lfloat result = 0.0f;
 8014208:	9301      	str	r3, [sp, #4]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 801420a:	f7ec fab9 	bl	8000780 <arm_sin_f32>
 801420e:	eef0 7a40 	vmov.f32	s15, s0
 8014212:	ed94 9a50 	vldr	s18, [r4, #320]	; 0x140
 8014216:	eeb0 0a48 	vmov.f32	s0, s16
 801421a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801421e:	f7ec f983 	bl	8000528 <arm_cos_f32>
 8014222:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8014226:	a801      	add	r0, sp, #4
 8014228:	eef0 7a40 	vmov.f32	s15, s0
 801422c:	eeb0 0a68 	vmov.f32	s0, s17
 8014230:	eee9 0a67 	vfms.f32	s1, s18, s15
 8014234:	f7ec f858 	bl	80002e8 <arm_atan2_f32>
     x->phaseComp = result;
 8014238:	9b01      	ldr	r3, [sp, #4]
 801423a:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    //if I can figure out how to use a newer CMSIS DSP pack, the new version 1.15 has an atan2f approximation that's likely faster
#else
    x->phaseComp = atan2f((x->poleCoeff * sinf(Fc)) , (1.0f - (x->poleCoeff * cosf(Fc))));
#endif
}
 801423e:	b002      	add	sp, #8
 8014240:	ecbd 8b04 	vpop	{d8-d9}
 8014244:	bd10      	pop	{r4, pc}
 8014246:	bf00      	nop

08014248 <tTString_initToPool>:
{
 8014248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801424c:	ed2d 8b08 	vpush	{d8-d11}
    _tMempool* m = *mp;
 8014250:	6817      	ldr	r7, [r2, #0]
{
 8014252:	460e      	mov	r6, r1
 8014254:	b085      	sub	sp, #20
 8014256:	4680      	mov	r8, r0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 8014258:	4639      	mov	r1, r7
 801425a:	f44f 70ca 	mov.w	r0, #404	; 0x194
{
 801425e:	4615      	mov	r5, r2
 8014260:	eef0 9a40 	vmov.f32	s19, s0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 8014264:	f7fd feca 	bl	8011ffc <mpool_alloc>
    x->invOversampling = 1.0f / oversampling;
 8014268:	ee07 6a90 	vmov	s15, r6
 801426c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 8014270:	f8c8 0000 	str.w	r0, [r8]
    x->invOversampling = 1.0f / oversampling;
 8014274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    x->mempool = m;
 8014278:	6007      	str	r7, [r0, #0]
    LEAF* leaf = x->mempool->leaf;
 801427a:	687a      	ldr	r2, [r7, #4]
    x->barPulsePhasor = 0;
 801427c:	f04f 0800 	mov.w	r8, #0
    x->oversampling = oversampling;
 8014280:	6046      	str	r6, [r0, #4]
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 8014282:	f100 0714 	add.w	r7, r0, #20
    x->invOversampling = 1.0f / oversampling;
 8014286:	ee88 7aa7 	vdiv.f32	s14, s17, s15
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 801428a:	eddf aaf3 	vldr	s21, [pc, #972]	; 8014658 <tTString_initToPool+0x410>
    x->decayInSeconds = 10.0f;
 801428e:	4bf3      	ldr	r3, [pc, #972]	; (801465c <tTString_initToPool+0x414>)
    x->wound = 1;
 8014290:	2601      	movs	r6, #1
    x->tensionGain = 0.0f;
 8014292:	ed9f 8af3 	vldr	s16, [pc, #972]	; 8014660 <tTString_initToPool+0x418>
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 8014296:	4604      	mov	r4, r0
    x->baseDelay = 100.0f;
 8014298:	ed9f 9af2 	vldr	s18, [pc, #968]	; 8014664 <tTString_initToPool+0x41c>
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 801429c:	9003      	str	r0, [sp, #12]
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
 801429e:	f104 0918 	add.w	r9, r4, #24
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 80142a2:	eeb0 0a49 	vmov.f32	s0, s18
    tTString_setFreq(&x, 440.0f);
 80142a6:	ed9f aaf0 	vldr	s20, [pc, #960]	; 8014668 <tTString_initToPool+0x420>
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 80142aa:	ed9f baf0 	vldr	s22, [pc, #960]	; 801466c <tTString_initToPool+0x424>
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
 80142ae:	ee77 6a07 	vadd.f32	s13, s14, s14
    x->invOversampling = 1.0f / oversampling;
 80142b2:	ed80 7a02 	vstr	s14, [r0, #8]
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
 80142b6:	edc0 6a03 	vstr	s13, [r0, #12]
    x->sampleRate          = leaf->sampleRate * oversampling;
 80142ba:	ed92 7a00 	vldr	s14, [r2]
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 80142be:	462a      	mov	r2, r5
    x->decayInSeconds = 10.0f;
 80142c0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    x->sampleRate          = leaf->sampleRate * oversampling;
 80142c4:	ee67 7a87 	vmul.f32	s15, s15, s14
    x->slideGain = 0.4f;
 80142c8:	4be9      	ldr	r3, [pc, #932]	; (8014670 <tTString_initToPool+0x428>)
    x->wound = 1;
 80142ca:	f8c0 60d8 	str.w	r6, [r0, #216]	; 0xd8
    x->slideGain = 0.4f;
 80142ce:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
    x->barDrive = 1.5f;
 80142d2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    x->invSampleRate = 1.f / x->sampleRate;
 80142d6:	eec8 6aa7 	vdiv.f32	s13, s17, s15
    x->sampleRate          = leaf->sampleRate * oversampling;
 80142da:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
    x->barDrive = 1.5f;
 80142de:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    x->barPulsePhasor = 0;
 80142e2:	f8c0 80e4 	str.w	r8, [r0, #228]	; 0xe4
    x->tensionGain = 0.0f;
 80142e6:	ed80 8a11 	vstr	s16, [r0, #68]	; 0x44
    x->allpassDelay = 0.f;
 80142ea:	ed80 8a17 	vstr	s16, [r0, #92]	; 0x5c
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
 80142ee:	ee87 7aa9 	vdiv.f32	s14, s15, s19
    x->decayCoeff = 1.0f;
 80142f2:	edc0 8a1d 	vstr	s17, [r0, #116]	; 0x74
    x->muteCoeff = 1.0f;
 80142f6:	edc0 8a1e 	vstr	s17, [r0, #120]	; 0x78
    x->output = 0.0f;
 80142fa:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    x->outputP = 0.0f;
 80142fe:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    x->rippleRate = 1.0f;
 8014302:	edc0 8a20 	vstr	s17, [r0, #128]	; 0x80
    x->r = 0.0f;
 8014306:	ed80 8a1f 	vstr	s16, [r0, #124]	; 0x7c
    x->invOnePlusr = 1.0f;
 801430a:	edc0 8a23 	vstr	s17, [r0, #140]	; 0x8c
    x->harmonic = 1.0f;
 801430e:	edc0 8a21 	vstr	s17, [r0, #132]	; 0x84
    x->baseDelay = 100.0f;
 8014312:	ed80 9a0b 	vstr	s18, [r0, #44]	; 0x2c
    x->tensionAmount = 0.0f;
 8014316:	ed80 8a28 	vstr	s16, [r0, #160]	; 0xa0
    x->pickupPos = 0.0f;
 801431a:	ed80 8a27 	vstr	s16, [r0, #156]	; 0x9c
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 801431e:	ee66 7aaa 	vmul.f32	s15, s13, s21
    x->invSampleRate = 1.f / x->sampleRate;
 8014322:	edc0 6a0d 	vstr	s13, [r0, #52]	; 0x34
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 8014326:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 801432a:	4638      	mov	r0, r7
 801432c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8014330:	ee17 1a90 	vmov	r1, s15
 8014334:	edcd 7a01 	vstr	s15, [sp, #4]
 8014338:	f7f9 fb74 	bl	800da24 <tLagrangeDelay_initToPool>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
 801433c:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
 8014340:	4638      	mov	r0, r7
 8014342:	f7f9 fc45 	bl	800dbd0 <tLagrangeDelay_getMaxDelay>
 8014346:	eec9 7a80 	vdiv.f32	s15, s19, s0
    tLagrangeDelay_clear(&x->delay);
 801434a:	4638      	mov	r0, r7
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
 801434c:	edc4 7a24 	vstr	s15, [r4, #144]	; 0x90
    tLagrangeDelay_clear(&x->delay);
 8014350:	f7f9 faba 	bl	800d8c8 <tLagrangeDelay_clear>
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
 8014354:	462a      	mov	r2, r5
 8014356:	9901      	ldr	r1, [sp, #4]
 8014358:	eeb0 0a49 	vmov.f32	s0, s18
 801435c:	4648      	mov	r0, r9
 801435e:	f7f9 fb61 	bl	800da24 <tLagrangeDelay_initToPool>
    tLagrangeDelay_clear(&x->delayP);
 8014362:	4648      	mov	r0, r9
 8014364:	f7f9 fab0 	bl	800d8c8 <tLagrangeDelay_clear>
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
 8014368:	4638      	mov	r0, r7
 801436a:	f7f9 fc31 	bl	800dbd0 <tLagrangeDelay_getMaxDelay>
 801436e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    tCookOnePole_initToPool(&x->reflFilt, mp);
 8014372:	f104 0924 	add.w	r9, r4, #36	; 0x24
    tCookOnePole_initToPool(&x->reflFiltP, mp);
 8014376:	f104 0728 	add.w	r7, r4, #40	; 0x28
    tCookOnePole_initToPool(&x->reflFilt, mp);
 801437a:	4629      	mov	r1, r5
 801437c:	4648      	mov	r0, r9
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
 801437e:	ed84 0a54 	vstr	s0, [r4, #336]	; 0x150
    tCookOnePole_initToPool(&x->reflFilt, mp);
 8014382:	f7fa fdc5 	bl	800ef10 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFilt, x->sampleRate);
 8014386:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 801438a:	4648      	mov	r0, r9
 801438c:	f7fa fe04 	bl	800ef98 <tCookOnePole_setSampleRate>
    tCookOnePole_initToPool(&x->reflFiltP, mp);
 8014390:	4629      	mov	r1, r5
 8014392:	4638      	mov	r0, r7
 8014394:	f7fa fdbc 	bl	800ef10 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFiltP, x->sampleRate);
 8014398:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 801439c:	4638      	mov	r0, r7
 801439e:	f7fa fdfb 	bl	800ef98 <tCookOnePole_setSampleRate>
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
 80143a2:	4648      	mov	r0, r9
 80143a4:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8014674 <tTString_initToPool+0x42c>
 80143a8:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8014678 <tTString_initToPool+0x430>
 80143ac:	f7fa fdde 	bl	800ef6c <tCookOnePole_setGainAndPole>
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
 80143b0:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8014674 <tTString_initToPool+0x42c>
 80143b4:	4638      	mov	r0, r7
 80143b6:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8014678 <tTString_initToPool+0x430>
 80143ba:	f7fa fdd7 	bl	800ef6c <tCookOnePole_setGainAndPole>
    tTString_setFreq(&x, 440.0f);
 80143be:	eeb0 0a4a 	vmov.f32	s0, s20
 80143c2:	a803      	add	r0, sp, #12
 80143c4:	f7ff fefc 	bl	80141c0 <tTString_setFreq>
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 80143c8:	9c03      	ldr	r4, [sp, #12]
 80143ca:	4629      	mov	r1, r5
 80143cc:	eeb0 0a48 	vmov.f32	s0, s16
 80143d0:	edd4 0a02 	vldr	s1, [r4, #8]
 80143d4:	f104 004c 	add.w	r0, r4, #76	; 0x4c
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
 80143d8:	f104 0750 	add.w	r7, r4, #80	; 0x50
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
 80143dc:	f104 0954 	add.w	r9, r4, #84	; 0x54
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 80143e0:	ee60 0a8b 	vmul.f32	s1, s1, s22
 80143e4:	9001      	str	r0, [sp, #4]
 80143e6:	f7fa fa7d 	bl	800e8e4 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
 80143ea:	eeb0 0a48 	vmov.f32	s0, s16
 80143ee:	9801      	ldr	r0, [sp, #4]
 80143f0:	f7fa fade 	bl	800e9b0 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
 80143f4:	eddf 7aa1 	vldr	s15, [pc, #644]	; 801467c <tTString_initToPool+0x434>
 80143f8:	edd4 0a02 	vldr	s1, [r4, #8]
 80143fc:	4629      	mov	r1, r5
 80143fe:	4638      	mov	r0, r7
 8014400:	eeb0 0a49 	vmov.f32	s0, s18
 8014404:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014408:	f7fa fa6c 	bl	800e8e4 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
 801440c:	4638      	mov	r0, r7
 801440e:	eeb0 0a49 	vmov.f32	s0, s18
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
 8014412:	f104 0758 	add.w	r7, r4, #88	; 0x58
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
 8014416:	f7fa facb 	bl	800e9b0 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
 801441a:	eddf 7a99 	vldr	s15, [pc, #612]	; 8014680 <tTString_initToPool+0x438>
 801441e:	edd4 0a02 	vldr	s1, [r4, #8]
 8014422:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 8014426:	4629      	mov	r1, r5
 8014428:	eeb0 0a48 	vmov.f32	s0, s16
 801442c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014430:	9001      	str	r0, [sp, #4]
 8014432:	f7fa fa57 	bl	800e8e4 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
 8014436:	eeb0 0a48 	vmov.f32	s0, s16
 801443a:	9801      	ldr	r0, [sp, #4]
 801443c:	f7fa fab8 	bl	800e9b0 <tExpSmooth_setDest>
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
 8014440:	462a      	mov	r2, r5
 8014442:	2104      	movs	r1, #4
 8014444:	4648      	mov	r0, r9
 8014446:	f7fa fb3f 	bl	800eac8 <tThiranAllpassSOCascade_initToPool>
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
 801444a:	462a      	mov	r2, r5
 801444c:	2104      	movs	r1, #4
 801444e:	4638      	mov	r0, r7
 8014450:	f7fa fb3a 	bl	800eac8 <tThiranAllpassSOCascade_initToPool>
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
 8014454:	eef0 0a49 	vmov.f32	s1, s18
 8014458:	ed94 1a02 	vldr	s2, [r4, #8]
 801445c:	4648      	mov	r0, r9
 801445e:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8014684 <tTString_initToPool+0x43c>
 8014462:	f7fa fba9 	bl	800ebb8 <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 8014466:	ed94 1a02 	vldr	s2, [r4, #8]
 801446a:	4638      	mov	r0, r7
 801446c:	eef0 0a49 	vmov.f32	s1, s18
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
 8014470:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
 8014474:	f104 076c 	add.w	r7, r4, #108	; 0x6c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 8014478:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8014688 <tTString_initToPool+0x440>
 801447c:	f7fa fb9c 	bl	800ebb8 <tThiranAllpassSOCascade_setCoeff>
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
 8014480:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014484:	4631      	mov	r1, r6
 8014486:	eddf 0a81 	vldr	s1, [pc, #516]	; 801468c <tTString_initToPool+0x444>
 801448a:	462a      	mov	r2, r5
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 801448c:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
 8014490:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8014690 <tTString_initToPool+0x448>
 8014494:	9001      	str	r0, [sp, #4]
 8014496:	f7fa fd8d 	bl	800efb4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->lowpassP, x->sampleRate);
 801449a:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 801449e:	9801      	ldr	r0, [sp, #4]
 80144a0:	f7fa fee8 	bl	800f274 <tSVF_setSampleRate>
    tSVF_setFreq(&x->lowpassP, 6000.0f);
 80144a4:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8014694 <tTString_initToPool+0x44c>
 80144a8:	9801      	ldr	r0, [sp, #4]
 80144aa:	f7fa fe4d 	bl	800f148 <tSVF_setFreq>
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
 80144ae:	eddf 0a77 	vldr	s1, [pc, #476]	; 801468c <tTString_initToPool+0x444>
 80144b2:	462a      	mov	r2, r5
 80144b4:	4641      	mov	r1, r8
 80144b6:	4638      	mov	r0, r7
 80144b8:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8014698 <tTString_initToPool+0x450>
 80144bc:	f7fa fd7a 	bl	800efb4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
 80144c0:	4638      	mov	r0, r7
 80144c2:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
 80144c6:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
 80144ca:	f7fa fed3 	bl	800f274 <tSVF_setSampleRate>
    tSVF_setFreq(&x->highpassP, 1800.0f);
 80144ce:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8014698 <tTString_initToPool+0x450>
 80144d2:	4638      	mov	r0, r7
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
 80144d4:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    tSVF_setFreq(&x->highpassP, 1800.0f);
 80144d8:	f7fa fe36 	bl	800f148 <tSVF_setFreq>
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 80144dc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    tCycle_initToPool(&x->tensionModOsc, mp);
 80144e0:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 80144e4:	4629      	mov	r1, r5
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 80144e6:	ee67 7aaa 	vmul.f32	s15, s15, s21
    tCycle_initToPool(&x->tensionModOsc, mp);
 80144ea:	9001      	str	r0, [sp, #4]
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 80144ec:	edc4 7a04 	vstr	s15, [r4, #16]
    tCycle_initToPool(&x->tensionModOsc, mp);
 80144f0:	f7fd fee6 	bl	80122c0 <tCycle_initToPool>
    tCycle_setSampleRate(&x->tensionModOsc, x->sampleRate);
 80144f4:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80144f8:	9801      	ldr	r0, [sp, #4]
 80144fa:	f7fd ff45 	bl	8012388 <tCycle_setSampleRate>
    tCycle_initToPool(&x->pickupModOsc, mp);
 80144fe:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8014502:	4629      	mov	r1, r5
 8014504:	9001      	str	r0, [sp, #4]
 8014506:	f7fd fedb 	bl	80122c0 <tCycle_initToPool>
    tCycle_setSampleRate(&x->pickupModOsc, x->sampleRate);
 801450a:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 801450e:	9801      	ldr	r0, [sp, #4]
 8014510:	f7fd ff3a 	bl	8012388 <tCycle_setSampleRate>
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
 8014514:	4631      	mov	r1, r6
 8014516:	eef0 0a68 	vmov.f32	s1, s17
 801451a:	462a      	mov	r2, r5
 801451c:	4638      	mov	r0, r7
 801451e:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 801469c <tTString_initToPool+0x454>
    x->pickupModOscFreq = 440.0f;
 8014522:	ed84 aa2c 	vstr	s20, [r4, #176]	; 0xb0
    x->pickupModOscAmp = 1.0f;
 8014526:	edc4 8a2d 	vstr	s17, [r4, #180]	; 0xb4
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
 801452a:	f7fa fd43 	bl	800efb4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter, x->sampleRate);
 801452e:	4638      	mov	r0, r7
 8014530:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8014534:	f7fa fe9e 	bl	800f274 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
 8014538:	4638      	mov	r0, r7
 801453a:	ed9f 0a59 	vldr	s0, [pc, #356]	; 80146a0 <tTString_initToPool+0x458>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, .9f, mp);
 801453e:	f504 77c4 	add.w	r7, r4, #392	; 0x188
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
 8014542:	f7fa fe01 	bl	800f148 <tSVF_setFreq>
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
 8014546:	4631      	mov	r1, r6
 8014548:	eddf 0a56 	vldr	s1, [pc, #344]	; 80146a4 <tTString_initToPool+0x45c>
 801454c:	462a      	mov	r2, r5
 801454e:	ed9f 0a56 	vldr	s0, [pc, #344]	; 80146a8 <tTString_initToPool+0x460>
 8014552:	4640      	mov	r0, r8
 8014554:	f7fa fd2e 	bl	800efb4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter2, x->sampleRate);
 8014558:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 801455c:	4640      	mov	r0, r8
 801455e:	f7fa fe89 	bl	800f274 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter2, 4100.0f);
 8014562:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80146ac <tTString_initToPool+0x464>
 8014566:	4640      	mov	r0, r8
 8014568:	f7fa fdee 	bl	800f148 <tSVF_setFreq>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, .9f, mp);
 801456c:	eddf 0a55 	vldr	s1, [pc, #340]	; 80146c4 <tTString_initToPool+0x47c>
 8014570:	462a      	mov	r2, r5
 8014572:	2104      	movs	r1, #4
 8014574:	4638      	mov	r0, r7
 8014576:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80146b0 <tTString_initToPool+0x468>
 801457a:	f7fa fd1b 	bl	800efb4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->peakFilt, x->sampleRate);
 801457e:	4638      	mov	r0, r7
 8014580:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8014584:	f7fa fe76 	bl	800f274 <tSVF_setSampleRate>
    tSVF_setFreq(&x->peakFilt, 1000.0f);
 8014588:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80146b0 <tTString_initToPool+0x468>
 801458c:	4638      	mov	r0, r7
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
 801458e:	f104 071c 	add.w	r7, r4, #28
    tSVF_setFreq(&x->peakFilt, 1000.0f);
 8014592:	f7fa fdd9 	bl	800f148 <tSVF_setFreq>
    tNoise_initToPool(&x->noise, PinkNoise, mp);
 8014596:	462a      	mov	r2, r5
 8014598:	4631      	mov	r1, r6
 801459a:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 801459e:	f7fe fa53 	bl	8012a48 <tNoise_initToPool>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
 80145a2:	f104 0620 	add.w	r6, r4, #32
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
 80145a6:	4629      	mov	r1, r5
 80145a8:	eeb0 0a68 	vmov.f32	s0, s17
 80145ac:	4638      	mov	r0, r7
 80145ae:	f7fa fe8b 	bl	800f2c8 <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlock,x->sampleRate);
 80145b2:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80145b6:	4638      	mov	r0, r7
 80145b8:	f7fa fec6 	bl	800f348 <tHighpass_setSampleRate>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
 80145bc:	4629      	mov	r1, r5
 80145be:	eeb0 0a68 	vmov.f32	s0, s17
 80145c2:	4630      	mov	r0, r6
 80145c4:	f7fa fe80 	bl	800f2c8 <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlockP,x->sampleRate);
 80145c8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80145cc:	4630      	mov	r0, r6
 80145ce:	f7fa febb 	bl	800f348 <tHighpass_setSampleRate>
    tSlide_initToPool(&x->slide, 0, 3000, mp);//100 1400
 80145d2:	4629      	mov	r1, r5
 80145d4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80145d8:	eeb0 0a48 	vmov.f32	s0, s16
 80145dc:	eddf 0a35 	vldr	s1, [pc, #212]	; 80146b4 <tTString_initToPool+0x46c>
 80145e0:	f7fa fa04 	bl	800e9ec <tSlide_initToPool>
    if (x->wound)
 80145e4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
 80145e8:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80145ec:	4629      	mov	r1, r5
    if (x->wound)
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	f000 80e2 	beq.w	80147b8 <tTString_initToPool+0x570>
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
 80145f4:	eddf 0a30 	vldr	s1, [pc, #192]	; 80146b8 <tTString_initToPool+0x470>
 80145f8:	eeb0 0a48 	vmov.f32	s0, s16
 80145fc:	9001      	str	r0, [sp, #4]
 80145fe:	f7fa f971 	bl	800e8e4 <tExpSmooth_initToPool>
    	    tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 8014602:	eeb0 0a48 	vmov.f32	s0, s16
 8014606:	9801      	ldr	r0, [sp, #4]
 8014608:	f7fa f9d2 	bl	800e9b0 <tExpSmooth_setDest>
    	    tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.0008f, mp); //was 0.008
 801460c:	f504 768e 	add.w	r6, r4, #284	; 0x11c
 8014610:	4629      	mov	r1, r5
 8014612:	eddf 0a2a 	vldr	s1, [pc, #168]	; 80146bc <tTString_initToPool+0x474>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
 8014616:	eeb0 0a48 	vmov.f32	s0, s16
 801461a:	4630      	mov	r0, r6
 801461c:	9601      	str	r6, [sp, #4]
 801461e:	f7fa f961 	bl	800e8e4 <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmoothVol, 0.0f);
 8014622:	eeb0 0a48 	vmov.f32	s0, s16
 8014626:	9801      	ldr	r0, [sp, #4]
 8014628:	f7fa f9c2 	bl	800e9b0 <tExpSmooth_setDest>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 801462c:	eddf 0a20 	vldr	s1, [pc, #128]	; 80146b0 <tTString_initToPool+0x468>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
 8014630:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 8014660 <tTString_initToPool+0x418>
 8014634:	f104 06dc 	add.w	r6, r4, #220	; 0xdc
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 8014638:	eeb0 0a60 	vmov.f32	s0, s1
 801463c:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8014640:	4629      	mov	r1, r5
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8014642:	eddf 8a0e 	vldr	s17, [pc, #56]	; 801467c <tTString_initToPool+0x434>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 8014646:	f7fa f9d1 	bl	800e9ec <tSlide_initToPool>
    tSlide_initToPool(&x->barPulseSlide, 2, 30, mp);//100 1400 // 10 3000
 801464a:	4629      	mov	r1, r5
 801464c:	f504 708a 	add.w	r0, r4, #276	; 0x114
 8014650:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8014654:	e03e      	b.n	80146d4 <tTString_initToPool+0x48c>
 8014656:	bf00      	nop
 8014658:	40c90fdb 	.word	0x40c90fdb
 801465c:	41200000 	.word	0x41200000
 8014660:	00000000 	.word	0x00000000
 8014664:	42c80000 	.word	0x42c80000
 8014668:	43dc0000 	.word	0x43dc0000
 801466c:	3b83126f 	.word	0x3b83126f
 8014670:	3ecccccd 	.word	0x3ecccccd
 8014674:	bab78034 	.word	0xbab78034
 8014678:	3f7fbe77 	.word	0x3f7fbe77
 801467c:	3d23d70a 	.word	0x3d23d70a
 8014680:	3db851ec 	.word	0x3db851ec
 8014684:	38d1b717 	.word	0x38d1b717
 8014688:	37d1b717 	.word	0x37d1b717
 801468c:	3f4ccccd 	.word	0x3f4ccccd
 8014690:	459c4000 	.word	0x459c4000
 8014694:	45bb8000 	.word	0x45bb8000
 8014698:	44e10000 	.word	0x44e10000
 801469c:	45354000 	.word	0x45354000
 80146a0:	4573c000 	.word	0x4573c000
 80146a4:	3f8ccccd 	.word	0x3f8ccccd
 80146a8:	456d8000 	.word	0x456d8000
 80146ac:	45802000 	.word	0x45802000
 80146b0:	447a0000 	.word	0x447a0000
 80146b4:	453b8000 	.word	0x453b8000
 80146b8:	3a03126f 	.word	0x3a03126f
 80146bc:	3a51b717 	.word	0x3a51b717
 80146c0:	3d4ccccd 	.word	0x3d4ccccd
 80146c4:	3f666666 	.word	0x3f666666
 80146c8:	45dac000 	.word	0x45dac000
 80146cc:	3dcccccd 	.word	0x3dcccccd
 80146d0:	3e7ae148 	.word	0x3e7ae148
 80146d4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80146d8:	f7fa f988 	bl	800e9ec <tSlide_initToPool>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
 80146dc:	4629      	mov	r1, r5
 80146de:	eeb0 0a48 	vmov.f32	s0, s16
 80146e2:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 80146c0 <tTString_initToPool+0x478>
 80146e6:	4630      	mov	r0, r6
 80146e8:	f7fa f8fc 	bl	800e8e4 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->barPulse, 0.0f);
 80146ec:	eeb0 0a48 	vmov.f32	s0, s16
 80146f0:	4630      	mov	r0, r6
    x->timeSinceLastBump = 1;
 80146f2:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    tExpSmooth_setDest(&x->barPulse, 0.0f);
 80146f6:	f7fa f95b 	bl	800e9b0 <tExpSmooth_setDest>
    tSVF_initToPool(&x->barResonator, SVFTypeBandpass, 5.0f, 15.0f, mp);
 80146fa:	462a      	mov	r2, r5
 80146fc:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8014700:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8014704:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8014708:	2102      	movs	r1, #2
 801470a:	f7fa fc53 	bl	800efb4 <tSVF_initToPool>
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
 801470e:	4629      	mov	r1, r5
 8014710:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8014714:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
    x->timeSinceLastBump = 1;
 8014718:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
 801471c:	f7fa fdd4 	bl	800f2c8 <tHighpass_initToPool>
    tSVF_initToPool(&x->barLP, SVFTypeLowpass, 7000.0f, 0.9f, mp);
 8014720:	462a      	mov	r2, r5
 8014722:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8014726:	ed5f 0a19 	vldr	s1, [pc, #-100]	; 80146c4 <tTString_initToPool+0x47c>
 801472a:	ed1f 0a19 	vldr	s0, [pc, #-100]	; 80146c8 <tTString_initToPool+0x480>
 801472e:	2101      	movs	r1, #1
 8014730:	f7fa fc40 	bl	800efb4 <tSVF_initToPool>
    x->inharmonic = 1;
 8014734:	2101      	movs	r1, #1
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8014736:	edd4 0a02 	vldr	s1, [r4, #8]
 801473a:	462a      	mov	r2, r5
 801473c:	f504 70ac 	add.w	r0, r4, #344	; 0x158
    x->inharmonic = 1;
 8014740:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8014744:	ee60 0aa8 	vmul.f32	s1, s1, s17
 8014748:	ed1f 1a20 	vldr	s2, [pc, #-128]	; 80146cc <tTString_initToPool+0x484>
 801474c:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
    x->inharmonicMult = 1.0f;
 8014750:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8014754:	f7f9 fce2 	bl	800e11c <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&x->feedbackP, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 8014758:	edd4 0a02 	vldr	s1, [r4, #8]
 801475c:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8014760:	ed1f 1a26 	vldr	s2, [pc, #-152]	; 80146cc <tTString_initToPool+0x484>
 8014764:	ee60 0aa8 	vmul.f32	s1, s1, s17
 8014768:	462a      	mov	r2, r5
 801476a:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 801476e:	2101      	movs	r1, #1
 8014770:	f7f9 fcd4 	bl	800e11c <tFeedbackLeveler_initToPool>
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 8014774:	ed1f 7a2a 	vldr	s14, [pc, #-168]	; 80146d0 <tTString_initToPool+0x488>
 8014778:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 801477c:	462a      	mov	r2, r5
    x->windingsPerInch = 70.0f;
 801477e:	4b17      	ldr	r3, [pc, #92]	; (80147dc <tTString_initToPool+0x594>)
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 8014780:	f504 70c0 	add.w	r0, r4, #384	; 0x180
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 8014784:	ee67 7a87 	vmul.f32	s15, s15, s14
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 8014788:	2101      	movs	r1, #1
    x->windingsPerInch = 70.0f;
 801478a:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 801478e:	edc4 7a5a 	vstr	s15, [r4, #360]	; 0x168
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 8014792:	f7fe f959 	bl	8012a48 <tNoise_initToPool>
    x->pickupAmount = 0.0f;
 8014796:	ed84 8a63 	vstr	s16, [r4, #396]	; 0x18c
    _tMempool* m = *mp;
 801479a:	682d      	ldr	r5, [r5, #0]
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
 801479c:	2008      	movs	r0, #8
 801479e:	4629      	mov	r1, r5
 80147a0:	f7fd fc2c 	bl	8011ffc <mpool_alloc>
 80147a4:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    p->mempool = m;
 80147a8:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
 80147aa:	ed80 8a01 	vstr	s16, [r0, #4]
}
 80147ae:	b005      	add	sp, #20
 80147b0:	ecbd 8b08 	vpop	{d8-d11}
 80147b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.005f, mp); //was 0.0005
 80147b8:	eddf 0a09 	vldr	s1, [pc, #36]	; 80147e0 <tTString_initToPool+0x598>
 80147bc:	eeb0 0a48 	vmov.f32	s0, s16
 80147c0:	9001      	str	r0, [sp, #4]
 80147c2:	f7fa f88f 	bl	800e8e4 <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 80147c6:	eeb0 0a48 	vmov.f32	s0, s16
 80147ca:	9801      	ldr	r0, [sp, #4]
 80147cc:	f7fa f8f0 	bl	800e9b0 <tExpSmooth_setDest>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
 80147d0:	f504 768e 	add.w	r6, r4, #284	; 0x11c
 80147d4:	eef0 0a4b 	vmov.f32	s1, s22
 80147d8:	4629      	mov	r1, r5
 80147da:	e71c      	b.n	8014616 <tTString_initToPool+0x3ce>
 80147dc:	428c0000 	.word	0x428c0000
 80147e0:	3ba3d70a 	.word	0x3ba3d70a

080147e4 <tTString_setDecayInSeconds>:

void    tTString_setDecayInSeconds               (tTString* const bw, Lfloat decay)
{
	 _tTString* x = *bw;
	 x->decayInSeconds = decay;
	 if (x->decayInSeconds > 20.0f)
 80147e4:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
{
 80147e8:	b510      	push	{r4, lr}
	 if (x->decayInSeconds > 20.0f)
 80147ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
	 _tTString* x = *bw;
 80147ee:	6804      	ldr	r4, [r0, #0]
	 x->decayInSeconds = decay;
 80147f0:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
	 if (x->decayInSeconds > 20.0f)
 80147f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f8:	dd04      	ble.n	8014804 <tTString_setDecayInSeconds+0x20>
 80147fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	 {
		 x->decayCoeff = 1.0f;
 80147fe:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
		 //decay = LEAF_map(decay, 0.0f, 1.0f, 0.99f, 1.01f);
		 decay = LEAF_clip(0.1f, decay, 1.0f);
		 x->decayCoeff = decay;
	 }
}
 8014802:	bd10      	pop	{r4, pc}
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
 8014804:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8014808:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801480c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014810:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8014814:	f7fc ff68 	bl	80116e8 <fastExp3>
		 decay = LEAF_clip(0.1f, decay, 1.0f);
 8014818:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
 801481c:	eef0 0a40 	vmov.f32	s1, s0
		 decay = LEAF_clip(0.1f, decay, 1.0f);
 8014820:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014830 <tTString_setDecayInSeconds+0x4c>
 8014824:	f7fd f8ae 	bl	8011984 <LEAF_clip>
		 x->decayCoeff = 1.0f;
 8014828:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
}
 801482c:	bd10      	pop	{r4, pc}
 801482e:	bf00      	nop
 8014830:	3dcccccd 	.word	0x3dcccccd

08014834 <tTString_setPickupPos>:

void    tTString_setPickupPos               (tTString* const bw, Lfloat pos)
{
	_tTString* x = *bw;
 8014834:	6803      	ldr	r3, [r0, #0]
	x->pickupPos = pos;
 8014836:	ed83 0a27 	vstr	s0, [r3, #156]	; 0x9c
}
 801483a:	4770      	bx	lr

0801483c <tTString_setPickupAmount>:

void    tTString_setPickupAmount               (tTString* const bw, Lfloat amount)
{
	_tTString* x = *bw;
 801483c:	6803      	ldr	r3, [r0, #0]
	x->pickupAmount = amount;
 801483e:	ed83 0a63 	vstr	s0, [r3, #396]	; 0x18c
}
 8014842:	4770      	bx	lr

08014844 <tTString_setPickupModAmp>:

void    tTString_setPickupModAmp               (tTString* const bw, Lfloat amp)
{
	_tTString* x = *bw;
 8014844:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscAmp = amp;
 8014846:	ed83 0a2d 	vstr	s0, [r3, #180]	; 0xb4
}
 801484a:	4770      	bx	lr

0801484c <tTString_setPickupModFreq>:


void    tTString_setPickupModFreq               (tTString* const bw, Lfloat freq)
{
	_tTString* x = *bw;
 801484c:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscFreq = freq;
	tCycle_setFreq(&x->pickupModOsc, freq);
 801484e:	f103 00ac 	add.w	r0, r3, #172	; 0xac
	x->pickupModOscFreq = freq;
 8014852:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
	tCycle_setFreq(&x->pickupModOsc, freq);
 8014856:	f7fd bd79 	b.w	801234c <tCycle_setFreq>
 801485a:	bf00      	nop

0801485c <tTString_mute>:
}



void    tTString_mute              (tTString* const bw)
{
 801485c:	b510      	push	{r4, lr}
	 _tTString* x = *bw;
 801485e:	6804      	ldr	r4, [r0, #0]
	 x->muteCoeff = fastExp3(-1.0f / (x->freq * 0.007f));;
 8014860:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014864:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014898 <tTString_mute+0x3c>
 8014868:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 801486c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014870:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8014874:	f7fc ff38 	bl	80116e8 <fastExp3>
	 if (x->muteCoeff < 0.5f)
	 {
		 x->muteCoeff = 0.5f;
	 }
	 x->muted = 0.0f;
 8014878:	2300      	movs	r3, #0
 801487a:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	 if (x->muteCoeff < 0.5f)
 801487e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		 x->muteCoeff = 0.5f;
 8014882:	eeb4 0a67 	vcmp.f32	s0, s15
 8014886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801488a:	bf48      	it	mi
 801488c:	eeb0 0a67 	vmovmi.f32	s0, s15
 8014890:	ed84 0a1e 	vstr	s0, [r4, #120]	; 0x78
}
 8014894:	bd10      	pop	{r4, pc}
 8014896:	bf00      	nop
 8014898:	3be56042 	.word	0x3be56042

0801489c <tTString_setFilterFreqDirectly>:
	tCookOnePole_setPole(&x->reflFiltP,filter);
	x->poleCoeff = filter;
}

void    tTString_setFilterFreqDirectly              (tTString* const bw, Lfloat freq)
{
 801489c:	b510      	push	{r4, lr}
 801489e:	ed2d 8b02 	vpush	{d8}
	 _tTString* x = *bw;
 80148a2:	6804      	ldr	r4, [r0, #0]
{
 80148a4:	eef0 0a40 	vmov.f32	s1, s0
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
 80148a8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80148ac:	ed94 1a5a 	vldr	s2, [r4, #360]	; 0x168
	x->filterFreq = freqToUse;
#ifdef ARM_MATH_CM7
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 80148b0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
 80148b4:	f7fd f866 	bl	8011984 <LEAF_clip>
 80148b8:	eef0 7a40 	vmov.f32	s15, s0
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 80148bc:	ed94 7a04 	vldr	s14, [r4, #16]
	x->filterFreq = freqToUse;
 80148c0:	edc4 7a1c 	vstr	s15, [r4, #112]	; 0x70
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 80148c4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80148c8:	f7eb ff5a 	bl	8000780 <arm_sin_f32>
 80148cc:	ee38 8a40 	vsub.f32	s16, s16, s0
	freq = 1.0f - sinf(freqToUse * x->twoPiTimesInvSampleRate);
#endif
	//volatile Lfloat normalizedFreq = (overtone * x->freq) * x->twoPiTimesInvSampleRate;
	//filter = 1.0f - normalizedFreq;

	tCookOnePole_setPole(&x->reflFilt,freq);
 80148d0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80148d4:	eeb0 0a48 	vmov.f32	s0, s16
 80148d8:	f7fa fb36 	bl	800ef48 <tCookOnePole_setPole>
	tCookOnePole_setPole(&x->reflFiltP,freq);
 80148dc:	eeb0 0a48 	vmov.f32	s0, s16
 80148e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80148e4:	f7fa fb30 	bl	800ef48 <tCookOnePole_setPole>
	x->poleCoeff = freq;
 80148e8:	ed84 8a50 	vstr	s16, [r4, #320]	; 0x140
}
 80148ec:	ecbd 8b02 	vpop	{d8}
 80148f0:	bd10      	pop	{r4, pc}
 80148f2:	bf00      	nop

080148f4 <tTString_setTensionGain>:

void   tTString_setTensionGain                  (tTString* const bw, Lfloat tensionGain)
{
	_tTString* x = *bw;
 80148f4:	6803      	ldr	r3, [r0, #0]
	x->tensionGain = tensionGain;
 80148f6:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 80148fa:	4770      	bx	lr

080148fc <tTString_setBarPosition>:
	x->barDrive = drive + 1.0f;
}

void   tTString_setBarPosition                  (tTString* const bw, Lfloat barPosition)
{
	_tTString* x = *bw;
 80148fc:	6803      	ldr	r3, [r0, #0]
	x->prevBarPosition = x->barPosition;
 80148fe:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
	x->barPosition = barPosition;
 8014902:	ed83 0a3b 	vstr	s0, [r3, #236]	; 0xec
	x->prevBarPosition = x->barPosition;
 8014906:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
 801490a:	4770      	bx	lr

0801490c <tTString_setOpenStringFrequency>:

void   tTString_setOpenStringFrequency                  (tTString* const bw, Lfloat openStringFrequency)
{
	_tTString* x = *bw;
 801490c:	6803      	ldr	r3, [r0, #0]
	x->openStringLength = ((x->sampleRate / openStringFrequency) - 2.0f);
 801490e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014912:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8014916:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801491a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801491e:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
}
 8014922:	4770      	bx	lr

08014924 <tTString_setPhantomHarmonicsGain>:
	x->pickupRatio = ratio;
}

void   tTString_setPhantomHarmonicsGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
 8014924:	6803      	ldr	r3, [r0, #0]
	x->phantomGain = gain;
 8014926:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
}
 801492a:	4770      	bx	lr

0801492c <tTString_setSlideGain>:

void   tTString_setSlideGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
 801492c:	6803      	ldr	r3, [r0, #0]
	x->slideGain = gain;
 801492e:	ed83 0a35 	vstr	s0, [r3, #212]	; 0xd4
}
 8014932:	4770      	bx	lr

08014934 <tTString_setRippleDepth>:
	tExpSmooth_setFactor(&x->tensionSmoother, 0.00064f * x->invOversampling * (1.0f - tensionSpeed) + 0.00001f); //0.5 is good
}


void   tTString_setRippleDepth                  (tTString* const bw, Lfloat depth)
{
 8014934:	b510      	push	{r4, lr}
 8014936:	ed2d 8b02 	vpush	{d8}
	_tTString* x = *bw;
 801493a:	6804      	ldr	r4, [r0, #0]
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 801493c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014940:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80149b4 <tTString_setRippleDepth+0x80>
{
 8014944:	eeb0 8a40 	vmov.f32	s16, s0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 8014948:	edd4 5a22 	vldr	s11, [r4, #136]	; 0x88
{
 801494c:	b082      	sub	sp, #8
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 801494e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80149b8 <tTString_setRippleDepth+0x84>
 8014952:	edd4 6a19 	vldr	s13, [r4, #100]	; 0x64
 8014956:	eee5 7a86 	vfma.f32	s15, s11, s12
 801495a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801495e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014962:	f7fc fec1 	bl	80116e8 <fastExp3>
	x->invOnePlusr = 1.0f / (1.0f + x->r);
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 8014966:	f104 001c 	add.w	r0, r4, #28
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 801496a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 801496e:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014972:	ee60 7a08 	vmul.f32	s15, s0, s16
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 8014976:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 801497a:	eeb0 0a47 	vmov.f32	s0, s14
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 801497e:	ee67 7a86 	vmul.f32	s15, s15, s12
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 8014982:	eea8 0a26 	vfma.f32	s0, s16, s13
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 8014986:	ee77 6a87 	vadd.f32	s13, s15, s14
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 801498a:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 801498e:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 8014992:	ed8d 0a01 	vstr	s0, [sp, #4]
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 8014996:	edc4 7a23 	vstr	s15, [r4, #140]	; 0x8c
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 801499a:	f7fa fcb9 	bl	800f310 <tHighpass_setFreq>
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
 801499e:	ed9d 0a01 	vldr	s0, [sp, #4]
 80149a2:	f104 0020 	add.w	r0, r4, #32
}
 80149a6:	b002      	add	sp, #8
 80149a8:	ecbd 8b02 	vpop	{d8}
 80149ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
 80149b0:	f7fa bcae 	b.w	800f310 <tHighpass_setFreq>
 80149b4:	3ba3d70a 	.word	0x3ba3d70a
 80149b8:	38d1b717 	.word	0x38d1b717

080149bc <tTString_setHarmonic>:

void   tTString_setHarmonic                  (tTString* const bw, Lfloat harmonic)
{
	_tTString* x = *bw;
	x->harmonic = harmonic;
	x->rippleRate = 1.0f / harmonic;
 80149bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	_tTString* x = *bw;
 80149c0:	6803      	ldr	r3, [r0, #0]
	x->harmonic = harmonic;
 80149c2:	ed83 0a21 	vstr	s0, [r3, #132]	; 0x84
	x->rippleRate = 1.0f / harmonic;
 80149c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80149ca:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
 80149ce:	4770      	bx	lr

080149d0 <tTString_setFeedbackStrength>:
void   tTString_setFeedbackStrength                  (tTString* const bw, Lfloat strength)
{
	_tTString* x = *bw;
	Lfloat strengthVal = 0.5f * strength;
 80149d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 80149d4:	b510      	push	{r4, lr}
 80149d6:	ed2d 8b02 	vpush	{d8}
 80149da:	eeb0 8a40 	vmov.f32	s16, s0
	_tTString* x = *bw;
 80149de:	6804      	ldr	r4, [r0, #0]
	Lfloat strengthVal = 0.5f * strength;
 80149e0:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 80149e4:	b082      	sub	sp, #8
	tFeedbackLeveler_setStrength(&x->feedback, strengthVal);
 80149e6:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 80149ea:	ed8d 0a01 	vstr	s0, [sp, #4]
 80149ee:	f7f9 fbc9 	bl	800e184 <tFeedbackLeveler_setStrength>
	tFeedbackLeveler_setStrength(&x->feedbackP, strengthVal);
 80149f2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80149f6:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 80149fa:	f7f9 fbc3 	bl	800e184 <tFeedbackLeveler_setStrength>
	x->feedbackNoiseLevel = strength * 0.005f;
 80149fe:	eddf 7a05 	vldr	s15, [pc, #20]	; 8014a14 <tTString_setFeedbackStrength+0x44>
 8014a02:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014a06:	ed84 8a59 	vstr	s16, [r4, #356]	; 0x164

}
 8014a0a:	b002      	add	sp, #8
 8014a0c:	ecbd 8b02 	vpop	{d8}
 8014a10:	bd10      	pop	{r4, pc}
 8014a12:	bf00      	nop
 8014a14:	3ba3d70a 	.word	0x3ba3d70a

08014a18 <tTString_setFeedbackReactionSpeed>:
void   tTString_setFeedbackReactionSpeed                  (tTString* const bw, Lfloat speed)
{
 8014a18:	b510      	push	{r4, lr}
	_tTString* x = *bw;
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 8014a1a:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8014a4c <tTString_setFeedbackReactionSpeed+0x34>
{
 8014a1e:	ed2d 8b02 	vpush	{d8}
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 8014a22:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 8014a50 <tTString_setFeedbackReactionSpeed+0x38>
	_tTString* x = *bw;
 8014a26:	6804      	ldr	r4, [r0, #0]
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 8014a28:	eea0 8a27 	vfma.f32	s16, s0, s15
	tFeedbackLeveler_setFactor(&x->feedback, speedVal);
 8014a2c:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8014a30:	eeb0 0a48 	vmov.f32	s0, s16
 8014a34:	f7f9 fbaa 	bl	800e18c <tFeedbackLeveler_setFactor>
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
 8014a38:	eeb0 0a48 	vmov.f32	s0, s16
 8014a3c:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
}
 8014a40:	ecbd 8b02 	vpop	{d8}
 8014a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
 8014a48:	f7f9 bba0 	b.w	800e18c <tFeedbackLeveler_setFactor>
 8014a4c:	3dcccccd 	.word	0x3dcccccd
 8014a50:	3727c5ac 	.word	0x3727c5ac

08014a54 <tTString_pluck>:

void    tTString_pluck               (tTString* const bw, Lfloat position, Lfloat amplitude)
{
 8014a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a58:	ed2d 8b08 	vpush	{d8-d11}
    _tTString* x = *bw;

    x->muted = 1.0f;
 8014a5c:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    _tTString* x = *bw;
 8014a60:	f8d0 8000 	ldr.w	r8, [r0]
{
 8014a64:	b085      	sub	sp, #20
 8014a66:	eeb0 8a40 	vmov.f32	s16, s0
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
 8014a6a:	f108 004c 	add.w	r0, r8, #76	; 0x4c
 8014a6e:	eeb0 0a60 	vmov.f32	s0, s1
    x->muted = 1.0f;
 8014a72:	ed88 aa51 	vstr	s20, [r8, #324]	; 0x144
{
 8014a76:	eeb0 9a60 	vmov.f32	s18, s1
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
 8014a7a:	f7f9 ff9d 	bl	800e9b8 <tExpSmooth_setVal>
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
 8014a7e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8014a82:	f508 70ac 	add.w	r0, r8, #344	; 0x158
    Lfloat currentDelay = x->baseDelay;// - x->allpassDelay;
    x->muteCoeff = 1.0f;
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
    Lfloat positionMax = (x->openStringLength * 0.001f);
 8014a86:	eddf 8a63 	vldr	s17, [pc, #396]	; 8014c14 <tTString_pluck+0x1c0>
    //0.083335f; * position;//position * halfCurrentDelay;
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
    tLagrangeDelay_clear(&x->delay);
 8014a8a:	f108 0614 	add.w	r6, r8, #20
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
 8014a8e:	ee29 0a27 	vmul.f32	s0, s18, s15
 8014a92:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014a96:	f7f9 fba7 	bl	800e1e8 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&x->feedbackP, amplitude * 0.25f);
 8014a9a:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014a9e:	f508 70ae 	add.w	r0, r8, #348	; 0x15c
 8014aa2:	f7f9 fba1 	bl	800e1e8 <tFeedbackLeveler_setTargetLevel>
    tExpSmooth_setValAndDest(&x->pitchSmoother, x->pitchSmoother->dest);
 8014aa6:	4640      	mov	r0, r8
 8014aa8:	f850 3f50 	ldr.w	r3, [r0, #80]!
 8014aac:	ed93 0a04 	vldr	s0, [r3, #16]
 8014ab0:	f7f9 ff86 	bl	800e9c0 <tExpSmooth_setValAndDest>
    x->baseDelay = x->pitchSmoother->dest;
 8014ab4:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 8014ab8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
 8014abc:	edd8 6a3d 	vldr	s13, [r8, #244]	; 0xf4
    x->baseDelay = x->pitchSmoother->dest;
 8014ac0:	ed93 7a04 	vldr	s14, [r3, #16]
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8014ac4:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
 8014ac8:	eddf 0a53 	vldr	s1, [pc, #332]	; 8014c18 <tTString_pluck+0x1c4>
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8014acc:	ee26 1aa8 	vmul.f32	s2, s13, s17
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 8014ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
    x->baseDelay = x->pitchSmoother->dest;
 8014ad4:	ed88 7a0b 	vstr	s14, [r8, #44]	; 0x2c
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8014ad8:	ee66 0aa0 	vmul.f32	s1, s13, s1
    x->muteCoeff = 1.0f;
 8014adc:	ed88 aa1e 	vstr	s20, [r8, #120]	; 0x78
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 8014ae0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
 8014ae4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 8014ae8:	ee17 9a90 	vmov	r9, s15
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
 8014aec:	ee78 7a08 	vadd.f32	s15, s16, s16
 8014af0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014af4:	ee17 ba90 	vmov	fp, s15
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8014af8:	f7fc fd54 	bl	80115a4 <LEAF_mapFromZeroToOneInput>
 8014afc:	eef0 7a40 	vmov.f32	s15, s0
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
 8014b00:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8014c1c <tTString_pluck+0x1c8>
 8014b04:	eeb0 1a48 	vmov.f32	s2, s16
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8014b08:	edcd 7a02 	vstr	s15, [sp, #8]
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
 8014b0c:	eddd 0a02 	vldr	s1, [sp, #8]
 8014b10:	f7fc ff38 	bl	8011984 <LEAF_clip>
 8014b14:	ed8d 0a02 	vstr	s0, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8014b18:	ed9d 7a02 	vldr	s14, [sp, #8]
    tLagrangeDelay_clear(&x->delay);
 8014b1c:	4630      	mov	r0, r6
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8014b1e:	eddd 7a02 	vldr	s15, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8014b22:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8014b26:	ee78 7a67 	vsub.f32	s15, s16, s15
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
 8014b2a:	eef8 aa47 	vcvt.f32.u32	s21, s14
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8014b2e:	ee17 aa10 	vmov	sl, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8014b32:	ee77 7aa8 	vadd.f32	s15, s15, s17
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
 8014b36:	ee7a 8aa8 	vadd.f32	s17, s21, s17
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8014b3a:	ee8a 7a27 	vdiv.f32	s14, s20, s15
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
 8014b3e:	ee8a ba28 	vdiv.f32	s22, s20, s17
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8014b42:	ed8d 7a03 	vstr	s14, [sp, #12]
    tLagrangeDelay_clear(&x->delay);
 8014b46:	f7f8 febf 	bl	800d8c8 <tLagrangeDelay_clear>
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 8014b4a:	ed9d 7a02 	vldr	s14, [sp, #8]
    x->pluckPoint_forInput = pluckPoint;
 8014b4e:	9b02      	ldr	r3, [sp, #8]
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 8014b50:	eec7 7a08 	vdiv.f32	s15, s14, s16
    x->pluckPoint_forInput = pluckPoint;
 8014b54:	f8c8 3184 	str.w	r3, [r8, #388]	; 0x184
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 8014b58:	edc8 7a5d 	vstr	s15, [r8, #372]	; 0x174
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8014b5c:	f1b9 0f00 	cmp.w	r9, #0
 8014b60:	d045      	beq.n	8014bee <tTString_pluck+0x19a>
 8014b62:	eddf 9a2f 	vldr	s19, [pc, #188]	; 8014c20 <tTString_pluck+0x1cc>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
        }
        val = LEAF_tanh(val* 1.2f) * amplitude;
        tLagrangeDelay_tapIn(&x->delay, val, i);
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8014b66:	f108 0718 	add.w	r7, r8, #24
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8014b6a:	2400      	movs	r4, #0
 8014b6c:	e02a      	b.n	8014bc4 <tTString_pluck+0x170>
            val = ((Lfloat)i * invPluckPointInt);
 8014b6e:	ee07 4a90 	vmov	s15, r4
 8014b72:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8014b76:	ee20 0a0b 	vmul.f32	s0, s0, s22
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8014b7a:	ee20 0a29 	vmul.f32	s0, s0, s19
 8014b7e:	f7fc ff0d 	bl	801199c <LEAF_tanh>
 8014b82:	ee20 8a09 	vmul.f32	s16, s0, s18
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8014b86:	ebab 0504 	sub.w	r5, fp, r4
 8014b8a:	4621      	mov	r1, r4
 8014b8c:	4630      	mov	r0, r6
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8014b8e:	eef1 8a48 	vneg.f32	s17, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8014b92:	eeb0 0a48 	vmov.f32	s0, s16
 8014b96:	f7f8 ffff 	bl	800db98 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8014b9a:	4629      	mov	r1, r5
 8014b9c:	eeb0 0a68 	vmov.f32	s0, s17
 8014ba0:	4630      	mov	r0, r6
 8014ba2:	f7f8 fff9 	bl	800db98 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8014ba6:	4621      	mov	r1, r4
 8014ba8:	eeb0 0a48 	vmov.f32	s0, s16
 8014bac:	4638      	mov	r0, r7
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8014bae:	3401      	adds	r4, #1
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8014bb0:	f7f8 fff2 	bl	800db98 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 8014bb4:	eeb0 0a68 	vmov.f32	s0, s17
 8014bb8:	4629      	mov	r1, r5
 8014bba:	4638      	mov	r0, r7
 8014bbc:	f7f8 ffec 	bl	800db98 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8014bc0:	45a1      	cmp	r9, r4
 8014bc2:	d014      	beq.n	8014bee <tTString_pluck+0x19a>
        if (i == pluckPointInt)
 8014bc4:	45a2      	cmp	sl, r4
 8014bc6:	d00f      	beq.n	8014be8 <tTString_pluck+0x194>
        else if (i < pluckPointInt)
 8014bc8:	d8d1      	bhi.n	8014b6e <tTString_pluck+0x11a>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 8014bca:	ee07 4a90 	vmov	s15, r4
 8014bce:	eeb0 0a4a 	vmov.f32	s0, s20
 8014bd2:	ed9d 7a03 	vldr	s14, [sp, #12]
 8014bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014bda:	ee77 7aea 	vsub.f32	s15, s15, s21
 8014bde:	eea7 0ac7 	vfms.f32	s0, s15, s14
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8014be2:	ee20 0a29 	vmul.f32	s0, s0, s19
 8014be6:	e7ca      	b.n	8014b7e <tTString_pluck+0x12a>
 8014be8:	eeb0 0a69 	vmov.f32	s0, s19
 8014bec:	e7c7      	b.n	8014b7e <tTString_pluck+0x12a>

    }
    tThiranAllpassSOCascade_clear(&x->allpass);
 8014bee:	f108 0054 	add.w	r0, r8, #84	; 0x54
 8014bf2:	f7fa f8e5 	bl	800edc0 <tThiranAllpassSOCascade_clear>
    tThiranAllpassSOCascade_clear(&x->allpassP);
 8014bf6:	f108 0058 	add.w	r0, r8, #88	; 0x58
 8014bfa:	f7fa f8e1 	bl	800edc0 <tThiranAllpassSOCascade_clear>

    tExpSmooth_setVal(&x->pickNoise, amplitude);
 8014bfe:	eeb0 0a49 	vmov.f32	s0, s18
 8014c02:	f508 70be 	add.w	r0, r8, #380	; 0x17c
}
 8014c06:	b005      	add	sp, #20
 8014c08:	ecbd 8b08 	vpop	{d8-d11}
 8014c0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tExpSmooth_setVal(&x->pickNoise, amplitude);
 8014c10:	f7f9 bed2 	b.w	800e9b8 <tExpSmooth_setVal>
 8014c14:	3a83126f 	.word	0x3a83126f
 8014c18:	3e511111 	.word	0x3e511111
 8014c1c:	00000000 	.word	0x00000000
 8014c20:	3f99999a 	.word	0x3f99999a

08014c24 <tTString_setHarmonicity>:
	x->wavelength = waveLength;
}
void    tTString_setSampleRate         (tTString* const, Lfloat sr);

void    tTString_setHarmonicity         (tTString* const bw, Lfloat B, Lfloat freq)
{
 8014c24:	b510      	push	{r4, lr}
 8014c26:	ed2d 8b02 	vpush	{d8}
    _tTString* x = *bw;
 8014c2a:	6804      	ldr	r4, [r0, #0]
{
 8014c2c:	eeb0 8a60 	vmov.f32	s16, s1
 8014c30:	eef0 8a40 	vmov.f32	s17, s0
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
 8014c34:	edd4 7a01 	vldr	s15, [r4, #4]
 8014c38:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8014c3c:	edd4 0a02 	vldr	s1, [r4, #8]
 8014c40:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 8014c44:	ee68 0a20 	vmul.f32	s1, s16, s1
 8014c48:	f7f9 ffb6 	bl	800ebb8 <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
 8014c4c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8014c50:	edd4 0a02 	vldr	s1, [r4, #8]
 8014c54:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014c58:	ed94 7a01 	vldr	s14, [r4, #4]
 8014c5c:	ee68 0a20 	vmul.f32	s1, s16, s1
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
 8014c60:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
 8014c64:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
 8014c68:	ee28 0aa7 	vmul.f32	s0, s17, s15
 8014c6c:	f7f9 ffa4 	bl	800ebb8 <tThiranAllpassSOCascade_setCoeff>
 8014c70:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 8014c74:	ecbd 8b02 	vpop	{d8}
 8014c78:	bd10      	pop	{r4, pc}
 8014c7a:	bf00      	nop

08014c7c <tTString_setInharmonic>:

void    tTString_setInharmonic         (tTString* const bw, uint32_t onOrOff)
{
    _tTString* x = *bw;
    x->inharmonic = onOrOff;
    x->inharmonicMult = (Lfloat)onOrOff;
 8014c7c:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
 8014c80:	6803      	ldr	r3, [r0, #0]
    x->inharmonicMult = (Lfloat)onOrOff;
 8014c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
    x->inharmonic = onOrOff;
 8014c86:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
    x->inharmonicMult = (Lfloat)onOrOff;
 8014c8a:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
}
 8014c8e:	4770      	bx	lr

08014c90 <tTString_setWoundOrUnwound>:
void    tTString_setWoundOrUnwound         (tTString* const bw, uint32_t wound)
{
 8014c90:	b510      	push	{r4, lr}
    _tTString* x = *bw;
 8014c92:	6804      	ldr	r4, [r0, #0]
    x->wound = wound;
 8014c94:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
    if (x->wound)
 8014c98:	b169      	cbz	r1, 8014cb6 <tTString_setWoundOrUnwound+0x26>
	{

    	tExpSmooth_setFactor(&x->barSmooth2, 0.0005f);
 8014c9a:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8014c9e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8014cd4 <tTString_setWoundOrUnwound+0x44>
 8014ca2:	f7f9 fe5d 	bl	800e960 <tExpSmooth_setFactor>
    	tExpSmooth_setFactor(&x->barSmoothVol, 0.0008f);
 8014ca6:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8014caa:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8014cd8 <tTString_setWoundOrUnwound+0x48>

		tExpSmooth_setFactor(&x->barSmooth2, 0.005f);
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);

	}
}
 8014cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	tExpSmooth_setFactor(&x->barSmoothVol, 0.0008f);
 8014cb2:	f7f9 be55 	b.w	800e960 <tExpSmooth_setFactor>
		tExpSmooth_setFactor(&x->barSmooth2, 0.005f);
 8014cb6:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8014cba:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8014cdc <tTString_setWoundOrUnwound+0x4c>
 8014cbe:	f7f9 fe4f 	bl	800e960 <tExpSmooth_setFactor>
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);
 8014cc2:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8014cc6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8014ce0 <tTString_setWoundOrUnwound+0x50>
}
 8014cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);
 8014cce:	f7f9 be47 	b.w	800e960 <tExpSmooth_setFactor>
 8014cd2:	bf00      	nop
 8014cd4:	3a03126f 	.word	0x3a03126f
 8014cd8:	3a51b717 	.word	0x3a51b717
 8014cdc:	3ba3d70a 	.word	0x3ba3d70a
 8014ce0:	3b83126f 	.word	0x3b83126f

08014ce4 <tTString_setWindingsPerInch>:
void    tTString_setWindingsPerInch         (tTString* const bw, uint32_t windings)
{
    _tTString* x = *bw;
    x->windingsPerInch = windings;
 8014ce4:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
 8014ce8:	6803      	ldr	r3, [r0, #0]
    x->windingsPerInch = windings;
 8014cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014cee:	edc3 7a5b 	vstr	s15, [r3, #364]	; 0x16c
}
 8014cf2:	4770      	bx	lr

08014cf4 <tTString_setPickupFilterFreq>:

void    tTString_setPickupFilterFreq         (tTString* const bw, Lfloat cutoff)
{
    _tTString* x = *bw;
    tSVF_setFreq(&x->pickupFilter,cutoff);
 8014cf4:	6800      	ldr	r0, [r0, #0]
 8014cf6:	30b8      	adds	r0, #184	; 0xb8
 8014cf8:	f7fa ba26 	b.w	800f148 <tSVF_setFreq>

08014cfc <tTString_setPickupFilterQ>:

}
void    tTString_setPickupFilterQ        (tTString* const bw, Lfloat Q)
{
    _tTString* x = *bw;
    tSVF_setQ(&x->pickupFilter,Q+0.5f);
 8014cfc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014d00:	6800      	ldr	r0, [r0, #0]
 8014d02:	30b8      	adds	r0, #184	; 0xb8
 8014d04:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014d08:	f7fa ba96 	b.w	800f238 <tSVF_setQ>

08014d0c <tTString_setPeakFilterFreq>:
}

void    tTString_setPeakFilterFreq         (tTString* const bw, Lfloat cutoff)
{
    _tTString* x = *bw;
    tSVF_setFreq(&x->peakFilt,cutoff);
 8014d0c:	6800      	ldr	r0, [r0, #0]
 8014d0e:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8014d12:	f7fa ba19 	b.w	800f148 <tSVF_setFreq>
 8014d16:	bf00      	nop

08014d18 <tTString_setPeakFilterQ>:

}
void    tTString_setPeakFilterQ        (tTString* const bw, Lfloat Q)
{
    _tTString* x = *bw;
    tSVF_setQ(&x->peakFilt,Q+0.5f);
 8014d18:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014d1c:	6800      	ldr	r0, [r0, #0]
 8014d1e:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8014d22:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014d26:	f7fa ba87 	b.w	800f238 <tSVF_setQ>
 8014d2a:	bf00      	nop

08014d2c <tStiffString_free>:
}



void    tStiffString_free (tStiffString* const pm)
{
 8014d2c:	b538      	push	{r3, r4, r5, lr}
    _tStiffString* p = *pm;
 8014d2e:	6805      	ldr	r5, [r0, #0]

    for (int i = 0; i < p->numModes; ++i) {
 8014d30:	686b      	ldr	r3, [r5, #4]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	dd09      	ble.n	8014d4a <tStiffString_free+0x1e>
 8014d36:	2400      	movs	r4, #0
        //tDampedOscillator_free(&p->osc[i]);
    	tCycle_free(&p->osc[i]);
 8014d38:	68a8      	ldr	r0, [r5, #8]
 8014d3a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    for (int i = 0; i < p->numModes; ++i) {
 8014d3e:	3401      	adds	r4, #1
    	tCycle_free(&p->osc[i]);
 8014d40:	f7fd fada 	bl	80122f8 <tCycle_free>
    for (int i = 0; i < p->numModes; ++i) {
 8014d44:	686b      	ldr	r3, [r5, #4]
 8014d46:	42a3      	cmp	r3, r4
 8014d48:	dcf6      	bgt.n	8014d38 <tStiffString_free+0xc>
    	//
    }
    mpool_free((char *) p->nyquistCoeff, p->mempool);
 8014d4a:	6829      	ldr	r1, [r5, #0]
 8014d4c:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8014d4e:	f7fd fa17 	bl	8012180 <mpool_free>
    mpool_free((char *) p->decayScalar, p->mempool);
 8014d52:	6829      	ldr	r1, [r5, #0]
 8014d54:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8014d56:	f7fd fa13 	bl	8012180 <mpool_free>
    mpool_free((char *) p->decayVal, p->mempool);
 8014d5a:	6829      	ldr	r1, [r5, #0]
 8014d5c:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8014d5e:	f7fd fa0f 	bl	8012180 <mpool_free>
    mpool_free((char *) p->amplitudes, p->mempool);
 8014d62:	6829      	ldr	r1, [r5, #0]
 8014d64:	68e8      	ldr	r0, [r5, #12]
 8014d66:	f7fd fa0b 	bl	8012180 <mpool_free>
    mpool_free((char *) p->outputWeights, p->mempool);
 8014d6a:	6829      	ldr	r1, [r5, #0]
 8014d6c:	6928      	ldr	r0, [r5, #16]
 8014d6e:	f7fd fa07 	bl	8012180 <mpool_free>
    mpool_free((char *) p, p->mempool);
 8014d72:	6829      	ldr	r1, [r5, #0]
 8014d74:	4628      	mov	r0, r5
}
 8014d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char *) p, p->mempool);
 8014d7a:	f7fd ba01 	b.w	8012180 <mpool_free>
 8014d7e:	bf00      	nop

08014d80 <tStiffString_updateOscillators>:

void tStiffString_updateOscillators(tStiffString* const pm)
{
 8014d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d82:	ed2d 8b08 	vpush	{d8-d11}
	_tStiffString *p = *pm;
 8014d86:	6804      	ldr	r4, [r0, #0]
	Lfloat kappa_sq = p->stiffness * p->stiffness;
	Lfloat compensation = 0.0f;
    for (int i = 0; i < p->numModes; ++i) {
 8014d88:	6863      	ldr	r3, [r4, #4]
	Lfloat kappa_sq = p->stiffness * p->stiffness;
 8014d8a:	edd4 9a06 	vldr	s19, [r4, #24]
    for (int i = 0; i < p->numModes; ++i) {
 8014d8e:	2b00      	cmp	r3, #0
	Lfloat kappa_sq = p->stiffness * p->stiffness;
 8014d90:	ee69 9aa9 	vmul.f32	s19, s19, s19
    for (int i = 0; i < p->numModes; ++i) {
 8014d94:	dd60      	ble.n	8014e58 <tStiffString_updateOscillators+0xd8>
      int n = i + 1;
      int n_sq = n * n;
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
      //Lfloat w0 = n * sqrtf(1.0f + kappa_sq * n_sq);
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8014d96:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
	Lfloat compensation = 0.0f;
 8014d9a:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8014e60 <tStiffString_updateOscillators+0xe0>
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8014d9e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8014da2:	2500      	movs	r5, #0
    	  tDampedOscillator_setDecay(&p->osc[i],0.5f);
      }
      */
      Lfloat	testFreq = (p->freqHz * w);
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 8014da4:	eef0 aa49 	vmov.f32	s21, s18
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8014da8:	ee69 9a8a 	vmul.f32	s19, s19, s20
    	  compensation = 1.0f / w;
 8014dac:	462e      	mov	r6, r5
 8014dae:	3501      	adds	r5, #1
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8014db0:	eef0 6a4b 	vmov.f32	s13, s22
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
 8014db4:	ed94 6a0a 	vldr	s12, [r4, #40]	; 0x28
      int n_sq = n * n;
 8014db8:	fb05 f305 	mul.w	r3, r5, r5
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
 8014dbc:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8014dc0:	ee07 5a90 	vmov	s15, r5
       Lfloat w = w0 * (1.0f - 0.5f * zeta * zeta);
 8014dc4:	eeb0 8a4b 	vmov.f32	s16, s22
      int n_sq = n * n;
 8014dc8:	ee07 3a10 	vmov	s14, r3
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 8014dcc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8014dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014dd4:	00b7      	lsls	r7, r6, #2
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
 8014dd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 8014dda:	eeb0 0a6a 	vmov.f32	s0, s21
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8014dde:	eee7 6a29 	vfma.f32	s13, s14, s19
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
 8014de2:	eee6 8a07 	vfma.f32	s17, s12, s14
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8014de6:	ee67 7aa6 	vmul.f32	s15, s15, s13
      Lfloat zeta = sig / w0;
 8014dea:	ee88 7aa7 	vdiv.f32	s14, s17, s15
       Lfloat w = w0 * (1.0f - 0.5f * zeta * zeta);
 8014dee:	ee6a 6a47 	vnmul.f32	s13, s20, s14
 8014df2:	eea6 8a87 	vfma.f32	s16, s13, s14
 8014df6:	ee28 8a27 	vmul.f32	s16, s16, s15
      if (i == 0)
 8014dfa:	b90e      	cbnz	r6, 8014e00 <tStiffString_updateOscillators+0x80>
    	  compensation = 1.0f / w;
 8014dfc:	ee8b 9a08 	vdiv.f32	s18, s22, s16
      Lfloat	testFreq = (p->freqHz * w);
 8014e00:	ed94 7a05 	vldr	s14, [r4, #20]
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
 8014e04:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 8014e08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
 8014e0a:	edd4 0a11 	vldr	s1, [r4, #68]	; 0x44
      Lfloat	testFreq = (p->freqHz * w);
 8014e0e:	ee28 8a07 	vmul.f32	s16, s16, s14
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 8014e12:	eb03 0686 	add.w	r6, r3, r6, lsl #2
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
 8014e16:	ee78 7a67 	vsub.f32	s15, s16, s15
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 8014e1a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8014e1e:	f7fc fdb1 	bl	8011984 <LEAF_clip>
 8014e22:	ed86 0a00 	vstr	s0, [r6]
	  tCycle_setFreq(&p->osc[i], testFreq * compensation);
 8014e26:	68a0      	ldr	r0, [r4, #8]
 8014e28:	ee29 0a08 	vmul.f32	s0, s18, s16
 8014e2c:	4438      	add	r0, r7
 8014e2e:	f7fd fa8d 	bl	801234c <tCycle_setFreq>
	  //tDampedOscillator_setDecay(&p->osc[i],p->freqHz * sig);
	  Lfloat val = p->freqHz * sig;
 8014e32:	edd4 7a05 	vldr	s15, [r4, #20]
	  Lfloat r = fastExp4(-val * p->twoPiTimesInvSampleRate);
 8014e36:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8014e3a:	ee67 7ae8 	vnmul.f32	s15, s15, s17
 8014e3e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014e42:	f7fc fc77 	bl	8011734 <fastExp4>
	  p->decayScalar[i] = r * r;
 8014e46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014e48:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014e4c:	443b      	add	r3, r7
 8014e4e:	ed83 0a00 	vstr	s0, [r3]
    for (int i = 0; i < p->numModes; ++i) {
 8014e52:	6863      	ldr	r3, [r4, #4]
 8014e54:	42ab      	cmp	r3, r5
 8014e56:	dca9      	bgt.n	8014dac <tStiffString_updateOscillators+0x2c>
    }
}
 8014e58:	ecbd 8b08 	vpop	{d8-d11}
 8014e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014e5e:	bf00      	nop
 8014e60:	00000000 	.word	0x00000000

08014e64 <tStiffString_updateOutputWeights>:
void tStiffString_updateOutputWeights(tStiffString* const pm)
{
 8014e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e66:	ed2d 8b02 	vpush	{d8}
	_tStiffString *p = *pm;
 8014e6a:	6807      	ldr	r7, [r0, #0]
		Lfloat x0 = p->pickupPos * PI;
 8014e6c:	eddf 7a22 	vldr	s15, [pc, #136]	; 8014ef8 <tStiffString_updateOutputWeights+0x94>
		Lfloat totalGain = 0.0f;
	  for (int i = 0; i < p->numModes; ++i)
 8014e70:	687b      	ldr	r3, [r7, #4]
		Lfloat x0 = p->pickupPos * PI;
 8014e72:	edd7 8a08 	vldr	s17, [r7, #32]
	  for (int i = 0; i < p->numModes; ++i)
 8014e76:	2b00      	cmp	r3, #0
		Lfloat x0 = p->pickupPos * PI;
 8014e78:	ee68 8aa7 	vmul.f32	s17, s17, s15
	  for (int i = 0; i < p->numModes; ++i)
 8014e7c:	dd39      	ble.n	8014ef2 <tStiffString_updateOutputWeights+0x8e>
	  {
#ifdef ARM_MATH_CM7
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
 8014e7e:	693e      	ldr	r6, [r7, #16]
	  for (int i = 0; i < p->numModes; ++i)
 8014e80:	2500      	movs	r5, #0
		Lfloat totalGain = 0.0f;
 8014e82:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 8014efc <tStiffString_updateOutputWeights+0x98>
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
 8014e86:	3501      	adds	r5, #1
 8014e88:	ee07 5a90 	vmov	s15, r5
 8014e8c:	00ac      	lsls	r4, r5, #2
 8014e8e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8014e92:	3c04      	subs	r4, #4
 8014e94:	4426      	add	r6, r4
 8014e96:	ee20 0a28 	vmul.f32	s0, s0, s17
 8014e9a:	f7eb fc71 	bl	8000780 <arm_sin_f32>
 8014e9e:	ed86 0a00 	vstr	s0, [r6]
	  for (int i = 0; i < p->numModes; ++i)
 8014ea2:	6879      	ldr	r1, [r7, #4]
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
 8014ea4:	e9d7 2603 	ldrd	r2, r6, [r7, #12]
	  for (int i = 0; i < p->numModes; ++i)
 8014ea8:	428d      	cmp	r5, r1
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
 8014eaa:	eb06 0004 	add.w	r0, r6, r4
 8014eae:	4422      	add	r2, r4
 8014eb0:	edd0 7a00 	vldr	s15, [r0]
 8014eb4:	ed92 7a00 	vldr	s14, [r2]
 8014eb8:	eef0 7ae7 	vabs.f32	s15, s15
 8014ebc:	eea7 8a87 	vfma.f32	s16, s15, s14
	  for (int i = 0; i < p->numModes; ++i)
 8014ec0:	dbe1      	blt.n	8014e86 <tStiffString_updateOutputWeights+0x22>
#else
		  p->outputWeights[i] = sinf((i + 1) * x0);
		  totalGain += p->outputWeights[i] * p->amplitudes[i];
#endif
	  }
	  if (totalGain < 0.01f)
 8014ec2:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8014f00 <tStiffString_updateOutputWeights+0x9c>
 8014ec6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ece:	d410      	bmi.n	8014ef2 <tStiffString_updateOutputWeights+0x8e>
	  {
		  totalGain = 0.01f;
	  }
	  totalGain = LEAF_clip(0.01f, totalGain, 1.0f);
 8014ed0:	eef0 0a48 	vmov.f32	s1, s16
 8014ed4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8014f00 <tStiffString_updateOutputWeights+0x9c>
 8014ed8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8014edc:	f7fc fd52 	bl	8011984 <LEAF_clip>
	  p->gainComp = 1.0f / totalGain;
 8014ee0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014ee4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014ee8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
}
 8014eec:	ecbd 8b02 	vpop	{d8}
 8014ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		  totalGain = 0.01f;
 8014ef2:	ed9f 8a03 	vldr	s16, [pc, #12]	; 8014f00 <tStiffString_updateOutputWeights+0x9c>
 8014ef6:	e7eb      	b.n	8014ed0 <tStiffString_updateOutputWeights+0x6c>
 8014ef8:	40490fdb 	.word	0x40490fdb
 8014efc:	00000000 	.word	0x00000000
 8014f00:	3c23d70a 	.word	0x3c23d70a

08014f04 <tStiffString_initToPool>:
{
 8014f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tMempool* m = *mp;
 8014f08:	6813      	ldr	r3, [r2, #0]
{
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	460e      	mov	r6, r1
 8014f0e:	4680      	mov	r8, r0
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
 8014f10:	4619      	mov	r1, r3
 8014f12:	2054      	movs	r0, #84	; 0x54
    _tMempool* m = *mp;
 8014f14:	9301      	str	r3, [sp, #4]
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
 8014f16:	f7fd f871 	bl	8011ffc <mpool_alloc>
    p->freqHz = 440.0f;
 8014f1a:	4b32      	ldr	r3, [pc, #200]	; (8014fe4 <tStiffString_initToPool+0xe0>)
    p->nyquist = p->sampleRate * 0.5f;
 8014f1c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
 8014f20:	f8c8 0000 	str.w	r0, [r8]
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
 8014f24:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    p->freqHz = 440.0f;
 8014f28:	6143      	str	r3, [r0, #20]
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
 8014f2a:	00b7      	lsls	r7, r6, #2
    p->pluckPos = 0.2f;
 8014f2c:	4b2e      	ldr	r3, [pc, #184]	; (8014fe8 <tStiffString_initToPool+0xe4>)
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
 8014f2e:	4605      	mov	r5, r0
    p->mempool = m;
 8014f30:	9a01      	ldr	r2, [sp, #4]
    p->pluckPos = 0.2f;
 8014f32:	61c3      	str	r3, [r0, #28]
    p->pickupPos = 0.3f;
 8014f34:	4b2d      	ldr	r3, [pc, #180]	; (8014fec <tStiffString_initToPool+0xe8>)
    p->mempool = m;
 8014f36:	6002      	str	r2, [r0, #0]
    p->pickupPos = 0.3f;
 8014f38:	6203      	str	r3, [r0, #32]
    p->decay = 0.0001f;
 8014f3a:	4b2d      	ldr	r3, [pc, #180]	; (8014ff0 <tStiffString_initToPool+0xec>)
    p->muteDecay = 0.4f;
 8014f3c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8014ff4 <tStiffString_initToPool+0xf0>
    p->decay = 0.0001f;
 8014f40:	6243      	str	r3, [r0, #36]	; 0x24
    p->sampleRate = m->leaf->sampleRate;
 8014f42:	9901      	ldr	r1, [sp, #4]
    p->stiffness = 0.001f;
 8014f44:	4a2c      	ldr	r2, [pc, #176]	; (8014ff8 <tStiffString_initToPool+0xf4>)
    p->decayHighFreq = 0.0003f;
 8014f46:	4b2d      	ldr	r3, [pc, #180]	; (8014ffc <tStiffString_initToPool+0xf8>)
    p->stiffness = 0.001f;
 8014f48:	6182      	str	r2, [r0, #24]
    p->numModes = numModes;
 8014f4a:	6046      	str	r6, [r0, #4]
    p->muteDecay = 0.4f;
 8014f4c:	edc0 6a12 	vstr	s13, [r0, #72]	; 0x48
    p->decayHighFreq = 0.0003f;
 8014f50:	6283      	str	r3, [r0, #40]	; 0x28
    p->sampleRate = m->leaf->sampleRate;
 8014f52:	684b      	ldr	r3, [r1, #4]
 8014f54:	ed93 7a00 	vldr	s14, [r3]
    p->nyquist = p->sampleRate * 0.5f;
 8014f58:	ee67 7a27 	vmul.f32	s15, s14, s15
    p->sampleRate = m->leaf->sampleRate;
 8014f5c:	ed80 7a0b 	vstr	s14, [r0, #44]	; 0x2c
    p->twoPiTimesInvSampleRate = m->leaf->twoPiTimesInvSampleRate;
 8014f60:	684b      	ldr	r3, [r1, #4]
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
 8014f62:	eeb0 6a67 	vmov.f32	s12, s15
    p->twoPiTimesInvSampleRate = m->leaf->twoPiTimesInvSampleRate;
 8014f66:	68db      	ldr	r3, [r3, #12]
    p->nyquist = p->sampleRate * 0.5f;
 8014f68:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    p->twoPiTimesInvSampleRate = m->leaf->twoPiTimesInvSampleRate;
 8014f6c:	6303      	str	r3, [r0, #48]	; 0x30
    p->amp = 0.0f;
 8014f6e:	2300      	movs	r3, #0
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
 8014f70:	ee97 6a26 	vfnms.f32	s12, s14, s13
    p->amp = 0.0f;
 8014f74:	64c3      	str	r3, [r0, #76]	; 0x4c
    p->gainComp = 0.0f;
 8014f76:	6503      	str	r3, [r0, #80]	; 0x50
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
 8014f78:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8014f7c:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
 8014f80:	4638      	mov	r0, r7
 8014f82:	f7fd f83b 	bl	8011ffc <mpool_alloc>
    for (int i = 0; i < numModes; ++i) {
 8014f86:	2e00      	cmp	r6, #0
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
 8014f88:	60a8      	str	r0, [r5, #8]
    for (int i = 0; i < numModes; ++i) {
 8014f8a:	dd0a      	ble.n	8014fa2 <tStiffString_initToPool+0x9e>
 8014f8c:	2400      	movs	r4, #0
 8014f8e:	e000      	b.n	8014f92 <tStiffString_initToPool+0x8e>
    	tCycle_initToPool(&p->osc[i], &m);
 8014f90:	68a8      	ldr	r0, [r5, #8]
 8014f92:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    for (int i = 0; i < numModes; ++i) {
 8014f96:	3401      	adds	r4, #1
    	tCycle_initToPool(&p->osc[i], &m);
 8014f98:	a901      	add	r1, sp, #4
 8014f9a:	f7fd f991 	bl	80122c0 <tCycle_initToPool>
    for (int i = 0; i < numModes; ++i) {
 8014f9e:	42a6      	cmp	r6, r4
 8014fa0:	d1f6      	bne.n	8014f90 <tStiffString_initToPool+0x8c>
    p->amplitudes = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8014fa2:	9901      	ldr	r1, [sp, #4]
 8014fa4:	4638      	mov	r0, r7
 8014fa6:	f7fd f829 	bl	8011ffc <mpool_alloc>
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8014faa:	9901      	ldr	r1, [sp, #4]
    p->amplitudes = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8014fac:	60e8      	str	r0, [r5, #12]
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8014fae:	4638      	mov	r0, r7
 8014fb0:	f7fd f824 	bl	8011ffc <mpool_alloc>
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8014fb4:	9901      	ldr	r1, [sp, #4]
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8014fb6:	6128      	str	r0, [r5, #16]
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8014fb8:	4638      	mov	r0, r7
 8014fba:	f7fd f81f 	bl	8011ffc <mpool_alloc>
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8014fbe:	9901      	ldr	r1, [sp, #4]
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8014fc0:	6368      	str	r0, [r5, #52]	; 0x34
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8014fc2:	4638      	mov	r0, r7
 8014fc4:	f7fd f81a 	bl	8011ffc <mpool_alloc>
 8014fc8:	4603      	mov	r3, r0
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8014fca:	9901      	ldr	r1, [sp, #4]
 8014fcc:	4638      	mov	r0, r7
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8014fce:	63ab      	str	r3, [r5, #56]	; 0x38
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8014fd0:	f7fd f814 	bl	8011ffc <mpool_alloc>
 8014fd4:	4603      	mov	r3, r0
    tStiffString_updateOutputWeights(pm);
 8014fd6:	4640      	mov	r0, r8
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8014fd8:	63eb      	str	r3, [r5, #60]	; 0x3c
    tStiffString_updateOutputWeights(pm);
 8014fda:	f7ff ff43 	bl	8014e64 <tStiffString_updateOutputWeights>
}
 8014fde:	b002      	add	sp, #8
 8014fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fe4:	43dc0000 	.word	0x43dc0000
 8014fe8:	3e4ccccd 	.word	0x3e4ccccd
 8014fec:	3e99999a 	.word	0x3e99999a
 8014ff0:	38d1b717 	.word	0x38d1b717
 8014ff4:	3ecccccd 	.word	0x3ecccccd
 8014ff8:	3a83126f 	.word	0x3a83126f
 8014ffc:	399d4952 	.word	0x399d4952

08015000 <tStiffString_init>:
    tStiffString_initToPool(pm, numModes, &leaf->mempool);
 8015000:	3218      	adds	r2, #24
 8015002:	f7ff bf7f 	b.w	8014f04 <tStiffString_initToPool>
 8015006:	bf00      	nop

08015008 <tStiffString_tick>:

Lfloat   tStiffString_tick                  (tStiffString* const pm)
{
 8015008:	b570      	push	{r4, r5, r6, lr}
 801500a:	ed2d 8b02 	vpush	{d8}
    _tStiffString *p = *pm;
 801500e:	6804      	ldr	r4, [r0, #0]
    Lfloat sample = 0.0f;
    for (int i = 0; i < p->numModes; ++i) {
 8015010:	6863      	ldr	r3, [r4, #4]
 8015012:	2b00      	cmp	r3, #0
 8015014:	dd3b      	ble.n	801508e <tStiffString_tick+0x86>
 8015016:	2600      	movs	r6, #0
    Lfloat sample = 0.0f;
 8015018:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 8015094 <tStiffString_tick+0x8c>
      //sample += tDampedOscillator_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i];
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 801501c:	68a0      	ldr	r0, [r4, #8]
 801501e:	00b5      	lsls	r5, r6, #2
 8015020:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    for (int i = 0; i < p->numModes; ++i) {
 8015024:	3601      	adds	r6, #1
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8015026:	f7fd f96b 	bl	8012300 <tCycle_tick>
 801502a:	68e0      	ldr	r0, [r4, #12]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 801502c:	6b61      	ldr	r1, [r4, #52]	; 0x34
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 801502e:	4428      	add	r0, r5
 8015030:	6922      	ldr	r2, [r4, #16]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 8015032:	4429      	add	r1, r5
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8015034:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 8015036:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 801503a:	442a      	add	r2, r5
 801503c:	ed90 6a00 	vldr	s12, [r0]
 8015040:	442b      	add	r3, r5
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 8015042:	edd1 7a00 	vldr	s15, [r1]
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8015046:	ee20 0a06 	vmul.f32	s0, s0, s12
 801504a:	edd2 6a00 	vldr	s13, [r2]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 801504e:	ee67 7a87 	vmul.f32	s15, s15, s14
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8015052:	ed93 7a00 	vldr	s14, [r3]
 8015056:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8015058:	ee20 0a26 	vmul.f32	s0, s0, s13
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 801505c:	ee67 7a87 	vmul.f32	s15, s15, s14
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8015060:	442a      	add	r2, r5
 8015062:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015066:	ed92 7a00 	vldr	s14, [r2]
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 801506a:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < p->numModes; ++i) {
 801506e:	6863      	ldr	r3, [r4, #4]
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 8015070:	eea0 8a07 	vfma.f32	s16, s0, s14
    for (int i = 0; i < p->numModes; ++i) {
 8015074:	42b3      	cmp	r3, r6
 8015076:	dcd1      	bgt.n	801501c <tStiffString_tick+0x14>
    }
    return sample * p->amp * p->gainComp;
 8015078:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 801507c:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
 8015080:	ee28 8a27 	vmul.f32	s16, s16, s15
}
 8015084:	ee28 0a00 	vmul.f32	s0, s16, s0
 8015088:	ecbd 8b02 	vpop	{d8}
 801508c:	bd70      	pop	{r4, r5, r6, pc}
    Lfloat sample = 0.0f;
 801508e:	ed9f 8a01 	vldr	s16, [pc, #4]	; 8015094 <tStiffString_tick+0x8c>
 8015092:	e7f1      	b.n	8015078 <tStiffString_tick+0x70>
 8015094:	00000000 	.word	0x00000000

08015098 <tStiffString_setFreq>:
}


void tStiffString_setFreq(tStiffString* const pm, Lfloat newFreq)
{
    _tStiffString *p = *pm;
 8015098:	6803      	ldr	r3, [r0, #0]
    p->freqHz = newFreq;
 801509a:	ed83 0a05 	vstr	s0, [r3, #20]
    tStiffString_updateOscillators(pm);
 801509e:	f7ff be6f 	b.w	8014d80 <tStiffString_updateOscillators>
 80150a2:	bf00      	nop

080150a4 <tStiffString_mute>:
}

void tStiffString_mute(tStiffString* const pm)
{
    _tStiffString *p = *pm;
    p->muteDecay = 0.99f;
 80150a4:	4a01      	ldr	r2, [pc, #4]	; (80150ac <tStiffString_mute+0x8>)
    _tStiffString *p = *pm;
 80150a6:	6803      	ldr	r3, [r0, #0]
    p->muteDecay = 0.99f;
 80150a8:	649a      	str	r2, [r3, #72]	; 0x48
}
 80150aa:	4770      	bx	lr
 80150ac:	3f7d70a4 	.word	0x3f7d70a4

080150b0 <tStiffString_pluck>:

void tStiffString_pluck(tStiffString* const mp, Lfloat amp)
{
 80150b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150b4:	ed2d 8b06 	vpush	{d8-d10}
    _tStiffString* p = *mp;
 80150b8:	6807      	ldr	r7, [r0, #0]
    Lfloat x0 = p->pluckPos * PI;
    p->muteDecay = 1.0f;
 80150ba:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
    Lfloat x0 = p->pluckPos * PI;
 80150be:	eddf 9a23 	vldr	s19, [pc, #140]	; 801514c <tStiffString_pluck+0x9c>
{
 80150c2:	eeb0 aa40 	vmov.f32	s20, s0
    for (int i = 0; i < p->numModes; ++i) {
 80150c6:	687b      	ldr	r3, [r7, #4]
{
 80150c8:	4606      	mov	r6, r0
    Lfloat x0 = p->pluckPos * PI;
 80150ca:	edd7 8a07 	vldr	s17, [r7, #28]
    for (int i = 0; i < p->numModes; ++i) {
 80150ce:	2b00      	cmp	r3, #0
    p->muteDecay = 1.0f;
 80150d0:	f8c7 8048 	str.w	r8, [r7, #72]	; 0x48
    Lfloat x0 = p->pluckPos * PI;
 80150d4:	ee68 8aa9 	vmul.f32	s17, s17, s19
    for (int i = 0; i < p->numModes; ++i) {
 80150d8:	dd2f      	ble.n	801513a <tStiffString_pluck+0x8a>
        int n = i + 1;
        float denom = n * n * x0 * (PI - x0);
 80150da:	2500      	movs	r5, #0
 80150dc:	ee79 9ae8 	vsub.f32	s19, s19, s17
        if (denom < 0.001f)
 80150e0:	ed9f 9a1b 	vldr	s18, [pc, #108]	; 8015150 <tStiffString_pluck+0xa0>
    for (int i = 0; i < p->numModes; ++i) {
 80150e4:	462c      	mov	r4, r5
        int n = i + 1;
 80150e6:	3401      	adds	r4, #1
        float denom = n * n * x0 * (PI - x0);
 80150e8:	fb04 f304 	mul.w	r3, r4, r4
        {
        	denom = 0.001f; // to avoid divide by zero
        }
#ifdef ARM_MATH_CM7
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 80150ec:	ee07 4a90 	vmov	s15, r4
        float denom = n * n * x0 * (PI - x0);
 80150f0:	ee08 3a10 	vmov	s16, r3
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 80150f4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        float denom = n * n * x0 * (PI - x0);
 80150f8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 80150fc:	ee20 0a28 	vmul.f32	s0, s0, s17
        float denom = n * n * x0 * (PI - x0);
 8015100:	ee28 8a28 	vmul.f32	s16, s16, s17
 8015104:	ee28 8a29 	vmul.f32	s16, s16, s19
        	denom = 0.001f; // to avoid divide by zero
 8015108:	eeb4 8a49 	vcmp.f32	s16, s18
 801510c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015110:	bf48      	it	mi
 8015112:	eeb0 8a49 	vmovmi.f32	s16, s18
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 8015116:	f7eb fb33 	bl	8000780 <arm_sin_f32>
 801511a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	442b      	add	r3, r5
 8015122:	eec0 7a08 	vdiv.f32	s15, s0, s16
 8015126:	edc3 7a00 	vstr	s15, [r3]
#else
	      p->amplitudes[i] = 2.0f * sinf(x0 * n) / denom;
#endif
        //tDampedOscillator_reset(&p->osc[i]);
        p->decayVal[i] = 1.0f;
 801512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801512c:	442b      	add	r3, r5
 801512e:	3504      	adds	r5, #4
 8015130:	f8c3 8000 	str.w	r8, [r3]
    for (int i = 0; i < p->numModes; ++i) {
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	42a3      	cmp	r3, r4
 8015138:	dcd5      	bgt.n	80150e6 <tStiffString_pluck+0x36>
    }
    p->amp = amp;
 801513a:	ed87 aa13 	vstr	s20, [r7, #76]	; 0x4c
    tStiffString_updateOutputWeights(mp);
 801513e:	4630      	mov	r0, r6
}
 8015140:	ecbd 8b06 	vpop	{d8-d10}
 8015144:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    tStiffString_updateOutputWeights(mp);
 8015148:	f7ff be8c 	b.w	8014e64 <tStiffString_updateOutputWeights>
 801514c:	40490fdb 	.word	0x40490fdb
 8015150:	3a83126f 	.word	0x3a83126f

08015154 <tStiffString_setStiffnessNoUpdate>:
 8015154:	b510      	push	{r4, lr}
 8015156:	6804      	ldr	r4, [r0, #0]
 8015158:	ed9f 1a04 	vldr	s2, [pc, #16]	; 801516c <tStiffString_setStiffnessNoUpdate+0x18>
 801515c:	eddf 0a04 	vldr	s1, [pc, #16]	; 8015170 <tStiffString_setStiffnessNoUpdate+0x1c>
 8015160:	f7fc fa20 	bl	80115a4 <LEAF_mapFromZeroToOneInput>
 8015164:	ed84 0a06 	vstr	s0, [r4, #24]
 8015168:	bd10      	pop	{r4, pc}
 801516a:	bf00      	nop
 801516c:	3e4ccccd 	.word	0x3e4ccccd
 8015170:	00000000 	.word	0x00000000

08015174 <tStiffString_setPickupPosNoUpdate>:

    p->stiffness = LEAF_mapFromZeroToOneInput(newValue,0.00f, 0.2f);
}

void tStiffString_setPickupPosNoUpdate(tStiffString* const pm, Lfloat newValue)
{
 8015174:	b510      	push	{r4, lr}
    tStiffString p = *pm;
 8015176:	6804      	ldr	r4, [r0, #0]
{
 8015178:	eef0 0a40 	vmov.f32	s1, s0

    p->pickupPos = LEAF_clip(0.01f, newValue, 0.99f);
 801517c:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8015190 <tStiffString_setPickupPosNoUpdate+0x1c>
 8015180:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8015194 <tStiffString_setPickupPosNoUpdate+0x20>
 8015184:	f7fc fbfe 	bl	8011984 <LEAF_clip>
 8015188:	ed84 0a08 	vstr	s0, [r4, #32]
}
 801518c:	bd10      	pop	{r4, pc}
 801518e:	bf00      	nop
 8015190:	3f7d70a4 	.word	0x3f7d70a4
 8015194:	3c23d70a 	.word	0x3c23d70a

08015198 <tStiffString_setPluckPosNoUpdate>:

void tStiffString_setPluckPosNoUpdate(tStiffString* const pm, Lfloat newValue)
{
 8015198:	b510      	push	{r4, lr}
    tStiffString p = *pm;
 801519a:	6804      	ldr	r4, [r0, #0]
{
 801519c:	eef0 0a40 	vmov.f32	s1, s0

    p->pluckPos = LEAF_clip(0.01f, newValue, 0.99f);
 80151a0:	ed9f 1a04 	vldr	s2, [pc, #16]	; 80151b4 <tStiffString_setPluckPosNoUpdate+0x1c>
 80151a4:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80151b8 <tStiffString_setPluckPosNoUpdate+0x20>
 80151a8:	f7fc fbec 	bl	8011984 <LEAF_clip>
 80151ac:	ed84 0a07 	vstr	s0, [r4, #28]
}
 80151b0:	bd10      	pop	{r4, pc}
 80151b2:	bf00      	nop
 80151b4:	3f7d70a4 	.word	0x3f7d70a4
 80151b8:	3c23d70a 	.word	0x3c23d70a

080151bc <tStiffString_setFreqNoUpdate>:


void tStiffString_setFreqNoUpdate(tStiffString* const pm, Lfloat newFreq)
{
    _tStiffString *p = *pm;
 80151bc:	6803      	ldr	r3, [r0, #0]
    p->freqHz = newFreq;
 80151be:	ed83 0a05 	vstr	s0, [r3, #20]
}
 80151c2:	4770      	bx	lr

080151c4 <tStiffString_setDecayNoUpdate>:

void tStiffString_setDecayNoUpdate(tStiffString* const pm, Lfloat decay)
{
    _tStiffString *p = *pm;
 80151c4:	6803      	ldr	r3, [r0, #0]
    p->decay = decay;
 80151c6:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
}
 80151ca:	4770      	bx	lr

080151cc <tStiffString_setDecayHighFreqNoUpdate>:

void tStiffString_setDecayHighFreqNoUpdate(tStiffString* const pm, Lfloat decayHF)
{
    _tStiffString *p = *pm;
 80151cc:	6803      	ldr	r3, [r0, #0]
    p->decayHighFreq = decayHF;
 80151ce:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
 80151d2:	4770      	bx	lr
 80151d4:	0000      	movs	r0, r0
	...

080151d8 <glottis_setup_waveform>:




void glottis_setup_waveform(glottis* const glo)
{
 80151d8:	b510      	push	{r4, lr}
	_glottis* glot = *glo;
 80151da:	6804      	ldr	r4, [r0, #0]

    Lfloat alpha;
    Lfloat E0;


    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 80151dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80151e0:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
    glot->waveform_length = 1.0f / glot->freq;

    Rd = glot->Rd;
    if(Rd < 0.5f) Rd = 0.5f;
 80151e4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
{
 80151e8:	ed2d 8b0a 	vpush	{d8-d12}
    glot->waveform_length = 1.0f / glot->freq;
 80151ec:	ed94 5a01 	vldr	s10, [r4, #4]
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 80151f0:	ed94 7a02 	vldr	s14, [r4, #8]
    glot->waveform_length = 1.0f / glot->freq;
 80151f4:	ee87 6a85 	vdiv.f32	s12, s15, s10
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 80151f8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80151fc:	ee27 7a25 	vmul.f32	s14, s14, s11
    if(Rd < 0.5f) Rd = 0.5f;
 8015200:	eeb4 7ae6 	vcmpe.f32	s14, s13
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8015204:	ed84 7a03 	vstr	s14, [r4, #12]
    if(Rd < 0.5f) Rd = 0.5f;
 8015208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    glot->waveform_length = 1.0f / glot->freq;
 801520c:	ed84 6a04 	vstr	s12, [r4, #16]
    if(Rd < 0.5f) Rd = 0.5f;
 8015210:	d46d      	bmi.n	80152ee <glottis_setup_waveform+0x116>
    if(Rd > 2.7f) Rd = 2.7f;
 8015212:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8015378 <glottis_setup_waveform+0x1a0>
 8015216:	eeb4 7ac6 	vcmpe.f32	s14, s12
 801521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801521e:	dd71      	ble.n	8015304 <glottis_setup_waveform+0x12c>
 8015220:	ed9f 0a56 	vldr	s0, [pc, #344]	; 801537c <glottis_setup_waveform+0x1a4>
 8015224:	ed9f 8a56 	vldr	s16, [pc, #344]	; 8015380 <glottis_setup_waveform+0x1a8>
 8015228:	ed9f ca56 	vldr	s24, [pc, #344]	; 8015384 <glottis_setup_waveform+0x1ac>
 801522c:	eddf 8a56 	vldr	s17, [pc, #344]	; 8015388 <glottis_setup_waveform+0x1b0>
 8015230:	eddf ba56 	vldr	s23, [pc, #344]	; 801538c <glottis_setup_waveform+0x1b4>
    Te = Tp + Tp*Rk;



    epsilon = (Lfloat)1.0f / Ta;
    shift = fasterexpf(-epsilon * (1.0f - Te));
 8015234:	f7fc fa3e 	bl	80116b4 <fasterexpf>
    delta = 1.0f - shift;
 8015238:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    rhs_integral = rhs_integral / delta;
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
    upper_integral = -lower_integral;


    omega = M_PI / Tp;
 801523c:	eeb7 3aeb 	vcvt.f64.f32	d3, s23
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8015240:	ee60 7a08 	vmul.f32	s15, s0, s16
 8015244:	eec7 4a28 	vdiv.f32	s9, s14, s17
 8015248:	ee30 6a47 	vsub.f32	s12, s0, s14
    delta = 1.0f - shift;
 801524c:	ee77 aa40 	vsub.f32	s21, s14, s0
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
 8015250:	ee7c 6a6b 	vsub.f32	s13, s24, s23
 8015254:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
    shift = fasterexpf(-epsilon * (1.0f - Te));
 8015258:	eeb0 ba40 	vmov.f32	s22, s0
    omega = M_PI / Tp;
 801525c:	ed9f 2b42 	vldr	d2, [pc, #264]	; 8015368 <glottis_setup_waveform+0x190>
 8015260:	ee82 5b03 	vdiv.f64	d5, d2, d3
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8015264:	eee4 7a86 	vfma.f32	s15, s9, s12
    rhs_integral = rhs_integral / delta;
 8015268:	ee87 8aaa 	vdiv.f32	s16, s15, s21
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
 801526c:	eea6 8ac9 	vfms.f32	s16, s13, s18
    omega = M_PI / Tp;
 8015270:	eef7 9bc5 	vcvt.f32.f64	s19, d5
    s = fast_sinf2(omega * Te);
 8015274:	ee29 0a8c 	vmul.f32	s0, s19, s24
 8015278:	f7fc fa86 	bl	8011788 <fast_sinf2>

    y = -M_PI * s * upper_integral / (Tp*2.0f);
 801527c:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
    upper_integral = -lower_integral;
 8015280:	eeb1 7a48 	vneg.f32	s14, s16
    y = -M_PI * s * upper_integral / (Tp*2.0f);
 8015284:	ee3b 5aab 	vadd.f32	s10, s23, s23
    s = fast_sinf2(omega * Te);
 8015288:	eeb0 aa40 	vmov.f32	s20, s0
    y = -M_PI * s * upper_integral / (Tp*2.0f);
 801528c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8015290:	eeb7 5ac5 	vcvt.f64.f32	d5, s10
 8015294:	ed9f 4b36 	vldr	d4, [pc, #216]	; 8015370 <glottis_setup_waveform+0x198>
 8015298:	ee26 6b04 	vmul.f64	d6, d6, d4
 801529c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80152a0:	ee87 0b05 	vdiv.f64	d0, d7, d5
    z = my_faster_logf(y);
 80152a4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80152a8:	f7fc f9a0 	bl	80115ec <my_faster_logf>
    alpha = z / (Tp/2.0f - Te);
 80152ac:	eef0 7a4c 	vmov.f32	s15, s24
 80152b0:	eedb 7a89 	vfnms.f32	s15, s23, s18
 80152b4:	ee80 8a27 	vdiv.f32	s16, s0, s15
    E0 = -1.0f / (s * fastExp4(alpha*Te));
 80152b8:	ee28 0a0c 	vmul.f32	s0, s16, s24
 80152bc:	f7fc fa3a 	bl	8011734 <fastExp4>
 80152c0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80152c4:	ee60 7a0a 	vmul.f32	s15, s0, s20



    glot->alpha = alpha;
 80152c8:	ed84 8a06 	vstr	s16, [r4, #24]
    glot->E0 = E0;
    glot->epsilon = epsilon;
 80152cc:	edc4 8a08 	vstr	s17, [r4, #32]
    glot->shift = shift;
 80152d0:	ed84 ba09 	vstr	s22, [r4, #36]	; 0x24
    E0 = -1.0f / (s * fastExp4(alpha*Te));
 80152d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    glot->delta = delta;
 80152d8:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
    glot->Te = Te;
 80152dc:	ed84 ca0b 	vstr	s24, [r4, #44]	; 0x2c
    glot->omega = omega;
 80152e0:	edc4 9a0c 	vstr	s19, [r4, #48]	; 0x30
    glot->E0 = E0;
 80152e4:	ed84 7a07 	vstr	s14, [r4, #28]
}
 80152e8:	ecbd 8b0a 	vpop	{d8-d12}
 80152ec:	bd10      	pop	{r4, pc}
 80152ee:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8015390 <glottis_setup_waveform+0x1b8>
 80152f2:	ed9f 8a28 	vldr	s16, [pc, #160]	; 8015394 <glottis_setup_waveform+0x1bc>
 80152f6:	ed9f ca28 	vldr	s24, [pc, #160]	; 8015398 <glottis_setup_waveform+0x1c0>
 80152fa:	eddf 8a28 	vldr	s17, [pc, #160]	; 801539c <glottis_setup_waveform+0x1c4>
 80152fe:	eddf ba28 	vldr	s23, [pc, #160]	; 80153a0 <glottis_setup_waveform+0x1c8>
 8015302:	e797      	b.n	8015234 <glottis_setup_waveform+0x5c>
    Rk = 0.224f + 0.118f*Rd;
 8015304:	ed9f 6a27 	vldr	s12, [pc, #156]	; 80153a4 <glottis_setup_waveform+0x1cc>
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8015308:	eeb5 5a00 	vmov.f32	s10, #80	; 0x3e800000  0.250
    Rk = 0.224f + 0.118f*Rd;
 801530c:	eddf 5a26 	vldr	s11, [pc, #152]	; 80153a8 <glottis_setup_waveform+0x1d0>
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8015310:	ed9f 4a26 	vldr	s8, [pc, #152]	; 80153ac <glottis_setup_waveform+0x1d4>
    Rk = 0.224f + 0.118f*Rd;
 8015314:	eee7 5a06 	vfma.f32	s11, s14, s12
    Ra = -0.01f + 0.048f*Rd;
 8015318:	eddf 3a25 	vldr	s7, [pc, #148]	; 80153b0 <glottis_setup_waveform+0x1d8>
 801531c:	ed9f 6a25 	vldr	s12, [pc, #148]	; 80153b4 <glottis_setup_waveform+0x1dc>
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8015320:	eddf 4a25 	vldr	s9, [pc, #148]	; 80153b8 <glottis_setup_waveform+0x1e0>
    Ra = -0.01f + 0.048f*Rd;
 8015324:	eea7 6a23 	vfma.f32	s12, s14, s7
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8015328:	eee5 6a84 	vfma.f32	s13, s11, s8
 801532c:	ee25 5a85 	vmul.f32	s10, s11, s10
    epsilon = (Lfloat)1.0f / Ta;
 8015330:	eec7 8a86 	vdiv.f32	s17, s15, s12
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8015334:	ee26 6a66 	vnmul.f32	s12, s12, s13
 8015338:	ee25 5a26 	vmul.f32	s10, s10, s13
 801533c:	eef0 6a46 	vmov.f32	s13, s12
 8015340:	eee7 6a24 	vfma.f32	s13, s14, s9
 8015344:	ee85 7a26 	vdiv.f32	s14, s10, s13
    Tp = (Lfloat)1.0f / (2.0f*Rg);
 8015348:	ee37 7a07 	vadd.f32	s14, s14, s14
 801534c:	eec7 ba87 	vdiv.f32	s23, s15, s14
    Te = Tp + Tp*Rk;
 8015350:	eeb0 ca6b 	vmov.f32	s24, s23
 8015354:	eea5 caab 	vfma.f32	s24, s11, s23
    shift = fasterexpf(-epsilon * (1.0f - Te));
 8015358:	ee37 8acc 	vsub.f32	s16, s15, s24
 801535c:	ee28 0ac8 	vnmul.f32	s0, s17, s16
 8015360:	e768      	b.n	8015234 <glottis_setup_waveform+0x5c>
 8015362:	bf00      	nop
 8015364:	f3af 8000 	nop.w
 8015368:	54442d18 	.word	0x54442d18
 801536c:	400921fb 	.word	0x400921fb
 8015370:	54442d18 	.word	0x54442d18
 8015374:	c00921fb 	.word	0xc00921fb
 8015378:	402ccccd 	.word	0x402ccccd
 801537c:	bfe3f844 	.word	0xbfe3f844
 8015380:	3e5a1f1c 	.word	0x3e5a1f1c
 8015384:	3f497839 	.word	0x3f497839
 8015388:	4105c77d 	.word	0x4105c77d
 801538c:	3f029a9b 	.word	0x3f029a9b
 8015390:	c2184758 	.word	0xc2184758
 8015394:	3f087114 	.word	0x3f087114
 8015398:	3eef1dd8 	.word	0x3eef1dd8
 801539c:	428edb6d 	.word	0x428edb6d
 80153a0:	3eba5f7e 	.word	0x3eba5f7e
 80153a4:	3df1a9fc 	.word	0x3df1a9fc
 80153a8:	3e656042 	.word	0x3e656042
 80153ac:	3f99999a 	.word	0x3f99999a
 80153b0:	3d449ba6 	.word	0x3d449ba6
 80153b4:	bc23d70a 	.word	0xbc23d70a
 80153b8:	3de147ae 	.word	0x3de147ae

080153bc <glottis_compute>:
	mpool_free((char*)glot, glot->mempool);
}


Lfloat glottis_compute(glottis* const glo)
{
 80153bc:	b530      	push	{r4, r5, lr}
 80153be:	ed2d 8b02 	vpush	{d8}
	_glottis* glot = *glo;
 80153c2:	6804      	ldr	r4, [r0, #0]
{
 80153c4:	b083      	sub	sp, #12
    Lfloat t;
    Lfloat intensity;

    out = 0.0f;
    intensity = 1.0f;
    glot->time_in_waveform += glot->T;
 80153c6:	ed94 0a05 	vldr	s0, [r4, #20]
 80153ca:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38

    if(glot->time_in_waveform > glot->waveform_length) {
 80153ce:	edd4 7a04 	vldr	s15, [r4, #16]
    glot->time_in_waveform += glot->T;
 80153d2:	ee30 0a07 	vadd.f32	s0, s0, s14
	LEAF* leaf = glot->mempool->leaf;
 80153d6:	6823      	ldr	r3, [r4, #0]
	_glottis* glot = *glo;
 80153d8:	9401      	str	r4, [sp, #4]
	LEAF* leaf = glot->mempool->leaf;
 80153da:	685d      	ldr	r5, [r3, #4]
    if(glot->time_in_waveform > glot->waveform_length) {
 80153dc:	eeb4 0ae7 	vcmpe.f32	s0, s15
    glot->time_in_waveform += glot->T;
 80153e0:	ed84 0a05 	vstr	s0, [r4, #20]
    if(glot->time_in_waveform > glot->waveform_length) {
 80153e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e8:	dc52      	bgt.n	8015490 <glottis_compute+0xd4>
        glot->time_in_waveform -= glot->waveform_length;
        glottis_setup_waveform(&glot);

    }

    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
 80153ea:	ed94 7a01 	vldr	s14, [r4, #4]

    if(t > glot->Te) {
 80153ee:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
 80153f2:	ee20 8a07 	vmul.f32	s16, s0, s14
    if(t > glot->Te) {
 80153f6:	eef4 7ac8 	vcmpe.f32	s15, s16
 80153fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153fe:	d534      	bpl.n	801546a <glottis_compute+0xae>
        out = (-fastExp4(-glot->epsilon * (t-glot->Te)) + glot->shift) / glot->delta;
 8015400:	ee38 0a67 	vsub.f32	s0, s16, s15
 8015404:	edd4 7a08 	vldr	s15, [r4, #32]
 8015408:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
 801540c:	ee27 0ac0 	vnmul.f32	s0, s15, s0
 8015410:	f7fc f990 	bl	8011734 <fastExp4>
 8015414:	ee38 0a40 	vsub.f32	s0, s16, s0
 8015418:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 801541c:	eec0 8a27 	vdiv.f32	s17, s0, s15
        out = glot->E0 * fastExp4(glot->alpha * t) * sinf(glot->omega * t);
#endif

    }

    noise = (2.0f * leaf->random()) - 1.0f;
 8015420:	692b      	ldr	r3, [r5, #16]
 8015422:	4798      	blx	r3

#ifdef ARM_MATH_CM7
    Lfloat sqr = 0.0f;
    arm_sqrt_f32(glot->tenseness, &sqr);
 8015424:	edd4 6a02 	vldr	s13, [r4, #8]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8015428:	eef5 6ac0 	vcmpe.f32	s13, #0.0
    noise = (2.0f * leaf->random()) - 1.0f;
 801542c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8015430:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8015434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015438:	eee0 7a07 	vfma.f32	s15, s0, s14
 801543c:	db33      	blt.n	80154a6 <glottis_compute+0xea>
    aspiration = intensity * (1.0f - sqr) * 0.3f * noise;
 801543e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015442:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80154ac <glottis_compute+0xf0>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8015446:	eef1 6ae6 	vsqrt.f32	s13, s13
 801544a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801544e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015452:	ee67 7a87 	vmul.f32	s15, s15, s14
        aspiration = intensity * (1.0f - sqrtf(glot->tenseness)) * 0.3f * noise;
#endif

    aspiration *= 0.2f;

    out += aspiration;
 8015456:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80154b0 <glottis_compute+0xf4>

    return out;
}
 801545a:	eeb0 0a68 	vmov.f32	s0, s17
 801545e:	eea7 0a87 	vfma.f32	s0, s15, s14
 8015462:	b003      	add	sp, #12
 8015464:	ecbd 8b02 	vpop	{d8}
 8015468:	bd30      	pop	{r4, r5, pc}
        out = glot->E0 * fastExp4(glot->alpha * t) * arm_sin_f32(glot->omega * t);
 801546a:	ed94 0a06 	vldr	s0, [r4, #24]
 801546e:	edd4 8a07 	vldr	s17, [r4, #28]
 8015472:	ee28 0a00 	vmul.f32	s0, s16, s0
 8015476:	f7fc f95d 	bl	8011734 <fastExp4>
 801547a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 801547e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8015482:	ee28 0a27 	vmul.f32	s0, s16, s15
 8015486:	f7eb f97b 	bl	8000780 <arm_sin_f32>
 801548a:	ee68 8a80 	vmul.f32	s17, s17, s0
 801548e:	e7c7      	b.n	8015420 <glottis_compute+0x64>
        glot->time_in_waveform -= glot->waveform_length;
 8015490:	ee30 0a67 	vsub.f32	s0, s0, s15
        glottis_setup_waveform(&glot);
 8015494:	a801      	add	r0, sp, #4
        glot->time_in_waveform -= glot->waveform_length;
 8015496:	ed84 0a05 	vstr	s0, [r4, #20]
        glottis_setup_waveform(&glot);
 801549a:	f7ff fe9d 	bl	80151d8 <glottis_setup_waveform>
    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
 801549e:	9c01      	ldr	r4, [sp, #4]
 80154a0:	ed94 0a05 	vldr	s0, [r4, #20]
 80154a4:	e7a1      	b.n	80153ea <glottis_compute+0x2e>
 80154a6:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80154ac <glottis_compute+0xf0>
 80154aa:	e7d2      	b.n	8015452 <glottis_compute+0x96>
 80154ac:	3e99999a 	.word	0x3e99999a
 80154b0:	3e4ccccd 	.word	0x3e4ccccd

080154b4 <tract_calculate_reflections>:
	mpool_free((char*)tr, tr->mempool);
}


void tract_calculate_reflections(tract* const t)
{
 80154b4:	b500      	push	{lr}
	_tract* tr = *t;
 80154b6:	6803      	ldr	r3, [r0, #0]
	int i;
    Lfloat  sum;

    for(i = 0; i < tr->n; i++) {
 80154b8:	685a      	ldr	r2, [r3, #4]
 80154ba:	2a00      	cmp	r2, #0
 80154bc:	dd47      	ble.n	801554e <tract_calculate_reflections+0x9a>
 80154be:	2200      	movs	r2, #0
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
 80154c0:	6958      	ldr	r0, [r3, #20]
 80154c2:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 80154c6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
        tr->A[i] = scaledDiameter * scaledDiameter;
 80154ca:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
 80154cc:	edd0 7a00 	vldr	s15, [r0]
        tr->A[i] = scaledDiameter * scaledDiameter;
 80154d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
 80154d4:	3201      	adds	r2, #1
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
 80154d6:	ee67 7a87 	vmul.f32	s15, s15, s14
        tr->A[i] = scaledDiameter * scaledDiameter;
 80154da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80154de:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
 80154e2:	6859      	ldr	r1, [r3, #4]
 80154e4:	4291      	cmp	r1, r2
 80154e6:	dceb      	bgt.n	80154c0 <tract_calculate_reflections+0xc>
        /* Calculate area from diameter squared*/
    }

    for(i = 1; i < tr->n; i++) {
 80154e8:	2901      	cmp	r1, #1
 80154ea:	dd30      	ble.n	801554e <tract_calculate_reflections+0x9a>
 80154ec:	2204      	movs	r2, #4
 80154ee:	f04f 0c01 	mov.w	ip, #1
        tr->reflection[i] = tr->new_reflection[i];
        if(tr->A[i] == 0) {
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
 80154f2:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 80155c8 <tract_calculate_reflections+0x114>
 80154f6:	e009      	b.n	801550c <tract_calculate_reflections+0x58>
 80154f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
    for(i = 1; i < tr->n; i++) {
 80154fa:	f10c 0c01 	add.w	ip, ip, #1
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
 80154fe:	4411      	add	r1, r2
    for(i = 1; i < tr->n; i++) {
 8015500:	3204      	adds	r2, #4
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
 8015502:	f8c1 e000 	str.w	lr, [r1]
    for(i = 1; i < tr->n; i++) {
 8015506:	6859      	ldr	r1, [r3, #4]
 8015508:	4561      	cmp	r1, ip
 801550a:	dd20      	ble.n	801554e <tract_calculate_reflections+0x9a>
        tr->reflection[i] = tr->new_reflection[i];
 801550c:	e9d3 100b 	ldrd	r1, r0, [r3, #44]	; 0x2c
 8015510:	4410      	add	r0, r2
 8015512:	4411      	add	r1, r2
 8015514:	6800      	ldr	r0, [r0, #0]
 8015516:	6008      	str	r0, [r1, #0]
        if(tr->A[i] == 0) {
 8015518:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801551a:	4411      	add	r1, r2
 801551c:	edd1 7a00 	vldr	s15, [r1]
 8015520:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015528:	d0e6      	beq.n	80154f8 <tract_calculate_reflections+0x44>
        } else {
            tr->new_reflection[i] =
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 801552a:	ed11 7a01 	vldr	s14, [r1, #-4]
    for(i = 1; i < tr->n; i++) {
 801552e:	f10c 0c01 	add.w	ip, ip, #1
            tr->new_reflection[i] =
 8015532:	6b19      	ldr	r1, [r3, #48]	; 0x30
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 8015534:	ee77 6a67 	vsub.f32	s13, s14, s15
 8015538:	ee77 7a87 	vadd.f32	s15, s15, s14
            tr->new_reflection[i] =
 801553c:	4411      	add	r1, r2
    for(i = 1; i < tr->n; i++) {
 801553e:	3204      	adds	r2, #4
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 8015540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            tr->new_reflection[i] =
 8015544:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->n; i++) {
 8015548:	6859      	ldr	r1, [r3, #4]
 801554a:	4561      	cmp	r1, ip
 801554c:	dcde      	bgt.n	801550c <tract_calculate_reflections+0x58>
        }
    }

    tr->reflection_left = tr->new_reflection_left;
 801554e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    tr->reflection_right = tr->new_reflection_right;
    tr->reflection_nose = tr->new_reflection_nose;

    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
    Lfloat invSum = 1.0f / sum;
 8015552:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8015556:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
 8015558:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 801555c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
    tr->reflection_left = tr->new_reflection_left;
 801555e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    tr->reflection_right = tr->new_reflection_right;
 8015562:	f8d3 c090 	ldr.w	ip, [r3, #144]	; 0x90
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8015566:	eb01 0280 	add.w	r2, r1, r0, lsl #2
    tr->reflection_nose = tr->new_reflection_nose;
 801556a:	f8d3 e094 	ldr.w	lr, [r3, #148]	; 0x94
    tr->reflection_right = tr->new_reflection_right;
 801556e:	f8c3 c084 	str.w	ip, [r3, #132]	; 0x84
    tr->reflection_nose = tr->new_reflection_nose;
 8015572:	f8c3 e088 	str.w	lr, [r3, #136]	; 0x88
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8015576:	edd2 5a00 	vldr	s11, [r2]
 801557a:	edd2 7a01 	vldr	s15, [r2, #4]
 801557e:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8015580:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8015584:	ed91 7a00 	vldr	s14, [r1]
 8015588:	ee77 7a87 	vadd.f32	s15, s15, s14
    Lfloat invSum = 1.0f / sum;
 801558c:	ee86 7a27 	vdiv.f32	s14, s12, s15
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
 8015590:	eeb0 6a67 	vmov.f32	s12, s15
 8015594:	ee95 6aa6 	vfnms.f32	s12, s11, s13
 8015598:	ee26 6a07 	vmul.f32	s12, s12, s14
 801559c:	ed83 6a23 	vstr	s12, [r3, #140]	; 0x8c
    tr->new_reflection_right = (Lfloat)(2.0f * tr->A[tr->nose_start + 1] - sum) * invSum;
 80155a0:	eeb0 6a67 	vmov.f32	s12, s15
 80155a4:	edd2 5a01 	vldr	s11, [r2, #4]
 80155a8:	ee95 6aa6 	vfnms.f32	s12, s11, s13
 80155ac:	ee26 6a07 	vmul.f32	s12, s12, s14
 80155b0:	ed83 6a24 	vstr	s12, [r3, #144]	; 0x90
    tr->new_reflection_nose = (Lfloat)(2.0f * tr->noseA[0] - sum) * invSum;
 80155b4:	ed91 6a00 	vldr	s12, [r1]
 80155b8:	eed6 7a26 	vfnms.f32	s15, s12, s13
 80155bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155c0:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
}
 80155c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80155c8:	3f7fbe77 	.word	0x3f7fbe77

080155cc <tract_newLength>:

void tract_newLength(tract* const t, int numTractSections)
{
 80155cc:	b410      	push	{r4}
	_tract* tr = *t;
 80155ce:	6803      	ldr	r3, [r0, #0]
    }

    tr->n = n; //44
    tr->invN = 1.0f / n;
    tr->nose_length = n*0.636363636363636f; //28
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80155d0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    tr->lip_reflection = -0.85f;
    tr->last_obstruction = -1;
    tr->movement_speed = 200.0f;
    tr->lip_output = 0.0f;
    tr->nose_output = 0.0f;
    tr->tip_start = n*0.727272727272727f;
 80155d4:	eddf 5aa7 	vldr	s11, [pc, #668]	; 8015874 <tract_newLength+0x2a8>

	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));

	tr->turbuluencePointPosition[0] = n* 0.45f;
	tr->turbuluencePointPosition[1] = n* 0.5f;
 80155d8:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    if (numTractSections < tr->maxNumTractSections)
 80155dc:	691a      	ldr	r2, [r3, #16]
	tr->turbuluencePointDiameter[0] = 1.5f;
 80155de:	eef7 3a08 	vmov.f32	s7, #120	; 0x3fc00000  1.5
    tr->blade_start = n*0.227272727272727f;
 80155e2:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8015878 <tract_newLength+0x2ac>
    if (numTractSections < tr->maxNumTractSections)
 80155e6:	428a      	cmp	r2, r1
    tr->velum_target = 0.01f;
 80155e8:	4ca4      	ldr	r4, [pc, #656]	; (801587c <tract_newLength+0x2b0>)
    tr->lip_start = n*0.886363636363636f;
 80155ea:	ed9f 5aa5 	vldr	s10, [pc, #660]	; 8015880 <tract_newLength+0x2b4>
    	n = numTractSections;
 80155ee:	bfcc      	ite	gt
 80155f0:	ee07 1a90 	vmovgt	s15, r1
    	n = tr->maxNumTractSections;
 80155f4:	ee07 2a90 	vmovle	s15, r2
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 80155f8:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 8015884 <tract_newLength+0x2b8>
    tr->reflection_left = 0.0f;
 80155fc:	2100      	movs	r1, #0
    	n = tr->maxNumTractSections;
 80155fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8015602:	eddf 0aa1 	vldr	s1, [pc, #644]	; 8015888 <tract_newLength+0x2bc>
    tr->velum_target = 0.01f;
 8015606:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    tr->glottal_reflection = 0.75f;
 801560a:	f04f 547d 	mov.w	r4, #1061158912	; 0x3f400000
	tr->turbuluencePointPosition[0] = n* 0.45f;
 801560e:	ed9f 4a9f 	vldr	s8, [pc, #636]	; 801588c <tract_newLength+0x2c0>
    tr->n = n; //44
 8015612:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    tr->glottal_reflection = 0.75f;
 8015616:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
    tr->tip_start = n*0.727272727272727f;
 801561a:	ee67 5a25 	vmul.f32	s11, s14, s11
    tr->lip_reflection = -0.85f;
 801561e:	4c9c      	ldr	r4, [pc, #624]	; (8015890 <tract_newLength+0x2c4>)
    tr->blade_start = n*0.227272727272727f;
 8015620:	ee67 6a26 	vmul.f32	s13, s14, s13
    tr->movement_speed = 200.0f;
 8015624:	f8df c284 	ldr.w	ip, [pc, #644]	; 80158ac <tract_newLength+0x2e0>
    tr->n = n; //44
 8015628:	ee17 0a90 	vmov	r0, s15
    tr->nose_length = n*0.636363636363636f; //28
 801562c:	eddf 7a99 	vldr	s15, [pc, #612]	; 8015894 <tract_newLength+0x2c8>
    tr->tip_start = n*0.727272727272727f;
 8015630:	eefd 5ae5 	vcvt.s32.f32	s11, s11
    tr->lip_reflection = -0.85f;
 8015634:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    tr->nose_length = n*0.636363636363636f; //28
 8015638:	ee67 7a27 	vmul.f32	s15, s14, s15
	tr->turbuluencePointDiameter[1] = 1.5f;

    tr->invN = 1.0f / tr->n;
 801563c:	ee06 0a10 	vmov	s12, r0
    tr->blade_start = n*0.227272727272727f;
 8015640:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    tr->last_obstruction = -1;
 8015644:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    tr->invN = 1.0f / tr->n;
 8015648:	eeb8 6ac6 	vcvt.f32.s32	s12, s12

    for(i = 0; i < tr->n; i++) {
 801564c:	2800      	cmp	r0, #0
    tr->nose_length = n*0.636363636363636f; //28
 801564e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    tr->n = n; //44
 8015652:	6058      	str	r0, [r3, #4]
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8015654:	eef8 2ae5 	vcvt.f32.s32	s5, s11
    tr->reflection_left = 0.0f;
 8015658:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 801565c:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
    tr->reflection_right = 0.0f;
 8015660:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    tr->nose_length = n*0.636363636363636f; //28
 8015664:	ee17 2a90 	vmov	r2, s15
    tr->invN = 1.0f / tr->n;
 8015668:	eec1 7a86 	vdiv.f32	s15, s3, s12
    tr->reflection_nose = 0.0f;
 801566c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8015670:	ee04 2a90 	vmov	s9, r2
    tr->nose_length = n*0.636363636363636f; //28
 8015674:	649a      	str	r2, [r3, #72]	; 0x48
    tr->new_reflection_left = 0.0f;
 8015676:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    tr->new_reflection_right= 0.0f;
 801567a:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
    tr->nose_start = (n - tr->nose_length) + 1; //17
 801567e:	eeb8 2ae4 	vcvt.f32.s32	s4, s9
    tr->new_reflection_nose = 0.0f;
 8015682:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8015686:	eee7 2a40 	vfms.f32	s5, s14, s0
    tr->lip_output = 0.0f;
 801568a:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 801568e:	eea7 3a20 	vfma.f32	s6, s14, s1
    tr->nose_output = 0.0f;
 8015692:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8015696:	ee77 4a42 	vsub.f32	s9, s14, s4
    tr->tip_start = n*0.727272727272727f;
 801569a:	edc3 5a14 	vstr	s11, [r3, #80]	; 0x50
    tr->lip_start = n*0.886363636363636f;
 801569e:	ee27 5a05 	vmul.f32	s10, s14, s10
    tr->blade_start = n*0.227272727272727f;
 80156a2:	edc3 6a15 	vstr	s13, [r3, #84]	; 0x54
	tr->turbuluencePointPosition[0] = n* 0.45f;
 80156a6:	ee27 4a04 	vmul.f32	s8, s14, s8
	tr->turbuluencePointDiameter[0] = 1.5f;
 80156aa:	edc3 3a36 	vstr	s7, [r3, #216]	; 0xd8
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80156ae:	ee74 4aa1 	vadd.f32	s9, s9, s3
	tr->turbuluencePointDiameter[1] = 1.5f;
 80156b2:	edc3 3a37 	vstr	s7, [r3, #220]	; 0xdc
	tr->turbuluencePointPosition[1] = n* 0.5f;
 80156b6:	ee27 7a01 	vmul.f32	s14, s14, s2
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 80156ba:	edc3 2a17 	vstr	s5, [r3, #92]	; 0x5c
    tr->lip_start = n*0.886363636363636f;
 80156be:	eebd 5ac5 	vcvt.s32.f32	s10, s10
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 80156c2:	ed83 3a18 	vstr	s6, [r3, #96]	; 0x60
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80156c6:	eefd 4ae4 	vcvt.s32.f32	s9, s9
	tr->turbuluencePointPosition[0] = n* 0.45f;
 80156ca:	ed83 4a34 	vstr	s8, [r3, #208]	; 0xd0
	tr->turbuluencePointPosition[1] = n* 0.5f;
 80156ce:	ed83 7a35 	vstr	s14, [r3, #212]	; 0xd4
    tr->lip_start = n*0.886363636363636f;
 80156d2:	ed83 5a16 	vstr	s10, [r3, #88]	; 0x58
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80156d6:	edc3 4a13 	vstr	s9, [r3, #76]	; 0x4c
    tr->invN = 1.0f / tr->n;
 80156da:	edc3 7a02 	vstr	s15, [r3, #8]
    tr->last_obstruction = -1;
 80156de:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
    tr->movement_speed = 200.0f;
 80156e2:	f8c3 c0ac 	str.w	ip, [r3, #172]	; 0xac
    for(i = 0; i < tr->n; i++) {
 80156e6:	dd5f      	ble.n	80157a8 <tract_newLength+0x1dc>
        diameter = 0;
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 80156e8:	eeb1 4a0c 	vmov.f32	s8, #28	; 0x40e00000  7.0
    for(i = 0; i < tr->n; i++) {
 80156ec:	2200      	movs	r2, #0
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 80156ee:	eefe 4a00 	vmov.f32	s9, #224	; 0xbf000000 -0.5
            diameter = 0.6f;
 80156f2:	ed9f 5a69 	vldr	s10, [pc, #420]	; 8015898 <tract_newLength+0x2cc>
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 80156f6:	eef2 2a08 	vmov.f32	s5, #40	; 0x41400000  12.0
            diameter = 1.1f;
        } else {
            diameter = 1.5f;
 80156fa:	ed9f 3a68 	vldr	s6, [pc, #416]	; 801589c <tract_newLength+0x2d0>
 80156fe:	e005      	b.n	801570c <tract_newLength+0x140>
 8015700:	ee07 0a90 	vmov	s15, r0
 8015704:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8015708:	edd3 7a02 	vldr	s15, [r3, #8]
 801570c:	ee67 5a84 	vmul.f32	s11, s15, s8
 8015710:	eef0 6a64 	vmov.f32	s13, s9
            diameter = 0.6f;
 8015714:	eeb0 7a45 	vmov.f32	s14, s10
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8015718:	eee5 6a86 	vfma.f32	s13, s11, s12
 801571c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8015720:	ee16 0a90 	vmov	r0, s13
 8015724:	4290      	cmp	r0, r2
 8015726:	dc0a      	bgt.n	801573e <tract_newLength+0x172>
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 8015728:	ee67 7aa2 	vmul.f32	s15, s15, s5
 801572c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
            diameter = 1.5f;
 8015734:	ee17 0a90 	vmov	r0, s15
 8015738:	4290      	cmp	r0, r2
 801573a:	fe33 7a23 	vselgt.f32	s14, s6, s7
        }

        tr->diameter[i] =
            tr->rest_diameter[i] =
            tr->target_diameter[i] =
            tr->new_diameter[i] = diameter;
 801573e:	6a18      	ldr	r0, [r3, #32]
 8015740:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8015744:	ed80 7a00 	vstr	s14, [r0]
            tr->target_diameter[i] =
 8015748:	69d8      	ldr	r0, [r3, #28]
 801574a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801574e:	ed80 7a00 	vstr	s14, [r0]
            tr->rest_diameter[i] =
 8015752:	6998      	ldr	r0, [r3, #24]
 8015754:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8015758:	ed80 7a00 	vstr	s14, [r0]
        tr->diameter[i] =
 801575c:	6958      	ldr	r0, [r3, #20]
 801575e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8015762:	ed80 7a00 	vstr	s14, [r0]
        tr->reflection[i] = 0.0f;
 8015766:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8015768:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801576c:	6001      	str	r1, [r0, #0]
        tr->new_reflection[i] = 0.0f;
 801576e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015770:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8015774:	6001      	str	r1, [r0, #0]
        tr->R[i] = 0.0f;
 8015776:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015778:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801577c:	6001      	str	r1, [r0, #0]
        tr->L[i] = 0.0f;
 801577e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8015780:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8015784:	6001      	str	r1, [r0, #0]
        tr->junction_outR[i] = 0.0f;
 8015786:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8015788:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801578c:	6001      	str	r1, [r0, #0]
        tr->junction_outL[i] = 0.0f;
 801578e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015790:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
 8015794:	3201      	adds	r2, #1
        tr->junction_outL[i] = 0.0f;
 8015796:	6001      	str	r1, [r0, #0]
    for(i = 0; i < tr->n; i++) {
 8015798:	6858      	ldr	r0, [r3, #4]
 801579a:	4290      	cmp	r0, r2
 801579c:	dcb0      	bgt.n	8015700 <tract_newLength+0x134>
    }

    Lfloat invNoseLength = 1.0f / tr->nose_length;
 801579e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80157a0:	ee07 2a90 	vmov	s15, r2
 80157a4:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
 80157a8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	for(i = 0; i < tr->nose_length; i++) {
 80157ac:	2a00      	cmp	r2, #0
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 80157ae:	eec6 5a02 	vdiv.f32	s11, s12, s4
	for(i = 0; i < tr->nose_length; i++) {
 80157b2:	dd4a      	ble.n	801584a <tract_newLength+0x27e>
 80157b4:	2200      	movs	r2, #0
		d = 2.0f * ((Lfloat)i * invNoseLength);
		if(d < 1.0f) {
			diameter = 0.4f + 1.6f * d;
 80157b6:	ed9f 3a3a 	vldr	s6, [pc, #232]	; 80158a0 <tract_newLength+0x2d4>
 80157ba:	eddf 3a3a 	vldr	s7, [pc, #232]	; 80158a4 <tract_newLength+0x2d8>
		} else {
			diameter = 0.5f + 1.5f*(2.0f-d);
		}
		diameter = MIN(diameter, 1.9f);
		tr->nose_diameter[i] = diameter;
        tr->nose_reflection[i] = 0.0f;
 80157be:	2100      	movs	r1, #0
		diameter = MIN(diameter, 1.9f);
 80157c0:	eddf 6a39 	vldr	s13, [pc, #228]	; 80158a8 <tract_newLength+0x2dc>
			diameter = 0.5f + 1.5f*(2.0f-d);
 80157c4:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
 80157c8:	eef7 4a08 	vmov.f32	s9, #120	; 0x3fc00000  1.5
 80157cc:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
 80157d0:	e029      	b.n	8015826 <tract_newLength+0x25a>
 80157d2:	ee74 7a67 	vsub.f32	s15, s8, s15
 80157d6:	eeb0 7a45 	vmov.f32	s14, s10
 80157da:	eea7 7aa4 	vfma.f32	s14, s15, s9
		diameter = MIN(diameter, 1.9f);
 80157de:	eeb4 7ae6 	vcmpe.f32	s14, s13
		tr->nose_diameter[i] = diameter;
 80157e2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80157e4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
		diameter = MIN(diameter, 1.9f);
 80157e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157ec:	bf58      	it	pl
 80157ee:	eeb0 7a66 	vmovpl.f32	s14, s13
		tr->nose_diameter[i] = diameter;
 80157f2:	ed80 7a00 	vstr	s14, [r0]
        tr->nose_reflection[i] = 0.0f;
 80157f6:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80157f8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80157fc:	6001      	str	r1, [r0, #0]
        tr->noseR[i] = 0.0f;
 80157fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8015800:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8015804:	6001      	str	r1, [r0, #0]
        tr->noseL[i] = 0.0f;
 8015806:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8015808:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801580c:	6001      	str	r1, [r0, #0]
        tr->nose_junc_outR[i] = 0.0f;
 801580e:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8015810:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8015814:	6001      	str	r1, [r0, #0]
        tr->nose_junc_outL[i] = 0.0f;
 8015816:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8015818:	eb00 0082 	add.w	r0, r0, r2, lsl #2
	for(i = 0; i < tr->nose_length; i++) {
 801581c:	3201      	adds	r2, #1
        tr->nose_junc_outL[i] = 0.0f;
 801581e:	6001      	str	r1, [r0, #0]
	for(i = 0; i < tr->nose_length; i++) {
 8015820:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8015822:	4290      	cmp	r0, r2
 8015824:	dd11      	ble.n	801584a <tract_newLength+0x27e>
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8015826:	ee07 2a90 	vmov	s15, r2
 801582a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801582e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015832:	ee77 7aa7 	vadd.f32	s15, s15, s15
		if(d < 1.0f) {
 8015836:	eef4 7ac6 	vcmpe.f32	s15, s12
 801583a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801583e:	d5c8      	bpl.n	80157d2 <tract_newLength+0x206>
			diameter = 0.4f + 1.6f * d;
 8015840:	eeb0 7a63 	vmov.f32	s14, s7
 8015844:	eea7 7a83 	vfma.f32	s14, s15, s6
 8015848:	e7c9      	b.n	80157de <tract_newLength+0x212>
	}

    tr->new_reflection_left = 0.0f;
 801584a:	2200      	movs	r2, #0
 801584c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    tr->reflection_left = 0.0f;
 8015850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    tr->new_reflection_right = 0.0f;
 8015854:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    tr->reflection_right = 0.0f;
 8015858:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    tr->new_reflection_nose = 0.0f;
 801585c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    tr->reflection_nose = 0.0f;
 8015860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    tr->lip_output = 0.0f;
 8015864:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tr->nose_output = 0.0f;
 8015868:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

}
 801586c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015870:	4770      	bx	lr
 8015872:	bf00      	nop
 8015874:	3f3a2e8c 	.word	0x3f3a2e8c
 8015878:	3e68ba2f 	.word	0x3e68ba2f
 801587c:	3c23d70a 	.word	0x3c23d70a
 8015880:	3f62e8ba 	.word	0x3f62e8ba
 8015884:	3d8ba2e9 	.word	0x3d8ba2e9
 8015888:	3d3a2e8c 	.word	0x3d3a2e8c
 801588c:	3ee66666 	.word	0x3ee66666
 8015890:	bf59999a 	.word	0xbf59999a
 8015894:	3f22e8ba 	.word	0x3f22e8ba
 8015898:	3f19999a 	.word	0x3f19999a
 801589c:	3f8ccccd 	.word	0x3f8ccccd
 80158a0:	3fcccccd 	.word	0x3fcccccd
 80158a4:	3ecccccd 	.word	0x3ecccccd
 80158a8:	3ff33333 	.word	0x3ff33333
 80158ac:	43480000 	.word	0x43480000

080158b0 <tract_reshape>:

void tract_reshape(tract* const t)
{
 80158b0:	b410      	push	{r4}
	_tract* tr = *t;
 80158b2:	6802      	ldr	r2, [r0, #0]
    current_obstruction = -1;


    amount = tr->block_time * tr->movement_speed;

    for(i = 0; i < tr->n; i++) {
 80158b4:	6853      	ldr	r3, [r2, #4]
    amount = tr->block_time * tr->movement_speed;
 80158b6:	edd2 5a2e 	vldr	s11, [r2, #184]	; 0xb8
 80158ba:	edd2 7a2b 	vldr	s15, [r2, #172]	; 0xac
    for(i = 0; i < tr->n; i++) {
 80158be:	2b00      	cmp	r3, #0
    amount = tr->block_time * tr->movement_speed;
 80158c0:	ee65 5aa7 	vmul.f32	s11, s11, s15
    for(i = 0; i < tr->n; i++) {
 80158c4:	dd39      	ble.n	801593a <tract_reshape+0x8a>
        else {
            slow_return =
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
        }

        tr->diameter[i] = move_towards(diameter, target_diameter,
 80158c6:	ee35 4aa5 	vadd.f32	s8, s11, s11
    for(i = 0; i < tr->n; i++) {
 80158ca:	2300      	movs	r3, #0
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 80158cc:	eddf 3a3e 	vldr	s7, [pc, #248]	; 80159c8 <tract_reshape+0x118>
            slow_return =
 80158d0:	eddf 4a3e 	vldr	s9, [pc, #248]	; 80159cc <tract_reshape+0x11c>
 80158d4:	e00e      	b.n	80158f4 <tract_reshape+0x44>
Lfloat move_towards(Lfloat current, Lfloat target,
        Lfloat amt_up, Lfloat amt_down)
{
    Lfloat tmp;
    if(current < target) {
        tmp = current + amt_up;
 80158d6:	ee77 7a87 	vadd.f32	s15, s15, s14
    for(i = 0; i < tr->n; i++) {
 80158da:	3301      	adds	r3, #1
        return MIN(tmp, target);
 80158dc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80158e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158e4:	bf58      	it	pl
 80158e6:	eef0 7a66 	vmovpl.f32	s15, s13
        tr->diameter[i] = move_towards(diameter, target_diameter,
 80158ea:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
 80158ee:	6851      	ldr	r1, [r2, #4]
 80158f0:	4299      	cmp	r1, r3
 80158f2:	dd22      	ble.n	801593a <tract_reshape+0x8a>
        diameter = tr->diameter[i];
 80158f4:	6951      	ldr	r1, [r2, #20]
        if(i < tr->nose_start) slow_return = 0.6f;
 80158f6:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
        target_diameter = tr->target_diameter[i];
 80158f8:	69d4      	ldr	r4, [r2, #28]
        diameter = tr->diameter[i];
 80158fa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
        if(i < tr->nose_start) slow_return = 0.6f;
 80158fe:	4298      	cmp	r0, r3
        target_diameter = tr->target_diameter[i];
 8015900:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
        diameter = tr->diameter[i];
 8015904:	edd1 7a00 	vldr	s15, [r1]
        target_diameter = tr->target_diameter[i];
 8015908:	eddc 6a00 	vldr	s13, [ip]
        if(i < tr->nose_start) slow_return = 0.6f;
 801590c:	dd36      	ble.n	801597c <tract_reshape+0xcc>
        tr->diameter[i] = move_towards(diameter, target_diameter,
 801590e:	ee25 7aa4 	vmul.f32	s14, s11, s9
    if(current < target) {
 8015912:	eef4 7ae6 	vcmpe.f32	s15, s13
 8015916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801591a:	d4dc      	bmi.n	80158d6 <tract_reshape+0x26>
    } else {
        tmp = current - amt_down;
 801591c:	ee77 7ac4 	vsub.f32	s15, s15, s8
    for(i = 0; i < tr->n; i++) {
 8015920:	3301      	adds	r3, #1
        return MAX(tmp, target);
 8015922:	eef4 6ae7 	vcmpe.f32	s13, s15
 8015926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801592a:	bf58      	it	pl
 801592c:	eef0 7a66 	vmovpl.f32	s15, s13
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8015930:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
 8015934:	6851      	ldr	r1, [r2, #4]
 8015936:	4299      	cmp	r1, r3
 8015938:	dcdc      	bgt.n	80158f4 <tract_reshape+0x44>
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 801593a:	6f93      	ldr	r3, [r2, #120]	; 0x78
 801593c:	ed92 7a26 	vldr	s14, [r2, #152]	; 0x98
 8015940:	edd3 7a00 	vldr	s15, [r3]
    if(current < target) {
 8015944:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801594c:	d530      	bpl.n	80159b0 <tract_reshape+0x100>
        tmp = current + amt_up;
 801594e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8015952:	eee5 7aa6 	vfma.f32	s15, s11, s13
        return MIN(tmp, target);
 8015956:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801595a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801595e:	fe77 7a87 	vselgt.f32	s15, s15, s14
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 8015962:	edc3 7a00 	vstr	s15, [r3]
    tr->noseA[0] = tr->nose_diameter[0] * tr->nose_diameter[0];
 8015966:	e9d2 131e 	ldrd	r1, r3, [r2, #120]	; 0x78
 801596a:	edd1 7a00 	vldr	s15, [r1]
 801596e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015972:	edc3 7a00 	vstr	s15, [r3]
}
 8015976:	f85d 4b04 	ldr.w	r4, [sp], #4
 801597a:	4770      	bx	lr
        else if(i >= tr->tip_start) slow_return = 1.0f;
 801597c:	6d14      	ldr	r4, [r2, #80]	; 0x50
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 801597e:	eba3 0c00 	sub.w	ip, r3, r0
 8015982:	eeb0 7a65 	vmov.f32	s14, s11
        else if(i >= tr->tip_start) slow_return = 1.0f;
 8015986:	429c      	cmp	r4, r3
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 8015988:	eba4 0000 	sub.w	r0, r4, r0
        else if(i >= tr->tip_start) slow_return = 1.0f;
 801598c:	ddc1      	ble.n	8015912 <tract_reshape+0x62>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 801598e:	ee07 ca10 	vmov	s14, ip
 8015992:	eeb8 5ac7 	vcvt.f32.s32	s10, s14
 8015996:	ee07 0a10 	vmov	s14, r0
 801599a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801599e:	ee25 5a23 	vmul.f32	s10, s10, s7
 80159a2:	ee85 6a07 	vdiv.f32	s12, s10, s14
            slow_return =
 80159a6:	ee36 7a24 	vadd.f32	s14, s12, s9
        tr->diameter[i] = move_towards(diameter, target_diameter,
 80159aa:	ee27 7a25 	vmul.f32	s14, s14, s11
 80159ae:	e7b0      	b.n	8015912 <tract_reshape+0x62>
        tmp = current - amt_down;
 80159b0:	eddf 6a07 	vldr	s13, [pc, #28]	; 80159d0 <tract_reshape+0x120>
 80159b4:	eee5 7ae6 	vfms.f32	s15, s11, s13
        return MAX(tmp, target);
 80159b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80159bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159c0:	bf58      	it	pl
 80159c2:	eef0 7a47 	vmovpl.f32	s15, s14
 80159c6:	e7cc      	b.n	8015962 <tract_reshape+0xb2>
 80159c8:	3ecccccd 	.word	0x3ecccccd
 80159cc:	3f19999a 	.word	0x3f19999a
 80159d0:	3dcccccd 	.word	0x3dcccccd

080159d4 <tract_addTurbulenceNoiseAtPosition>:
	int i = (int)floorf(position);
 80159d4:	fefb 6a60 	vrintm.f32	s13, s1
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 80159d8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8015ac0 <tract_addTurbulenceNoiseAtPosition+0xec>
	int i = (int)floorf(position);
 80159dc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 80159e0:	ee37 7a41 	vsub.f32	s14, s14, s2
 80159e4:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
{
 80159e8:	eef0 7a60 	vmov.f32	s15, s1
 80159ec:	b538      	push	{r3, r4, r5, lr}
	int i = (int)floorf(position);
 80159ee:	ee16 4a90 	vmov	r4, s13
	Lfloat delta = position - i;
 80159f2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 80159f6:	ee67 0a06 	vmul.f32	s1, s14, s12
	_tract* tr = *t;
 80159fa:	6805      	ldr	r5, [r0, #0]
{
 80159fc:	ed2d 8b04 	vpush	{d8-d9}
 8015a00:	eef0 8a41 	vmov.f32	s17, s2
 8015a04:	eef0 9a40 	vmov.f32	s19, s0
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 8015a08:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8015ac4 <tract_addTurbulenceNoiseAtPosition+0xf0>
 8015a0c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	Lfloat delta = position - i;
 8015a10:	ee37 8ae6 	vsub.f32	s16, s15, s13
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 8015a14:	f7fb ffb6 	bl	8011984 <LEAF_clip>
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 8015a18:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 8015a1c:	eeb0 9a40 	vmov.f32	s18, s0
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 8015a20:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8015ac4 <tract_addTurbulenceNoiseAtPosition+0xf0>
 8015a24:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8015a28:	ee68 0aa0 	vmul.f32	s1, s17, s1
 8015a2c:	f7fb ffaa 	bl	8011984 <LEAF_clip>
	if ((i + 1) < tr->n) {
 8015a30:	686b      	ldr	r3, [r5, #4]
 8015a32:	1c62      	adds	r2, r4, #1
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 8015a34:	eeb0 7a40 	vmov.f32	s14, s0
	if ((i + 1) < tr->n) {
 8015a38:	429a      	cmp	r2, r3
 8015a3a:	da1e      	bge.n	8015a7a <tract_addTurbulenceNoiseAtPosition+0xa6>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 8015a3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		tr->R[i + 1] += noise0;
 8015a40:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015a42:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015a46:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 8015a4a:	ee77 7ac8 	vsub.f32	s15, s15, s16
		tr->R[i + 1] += noise0;
 8015a4e:	edd3 6a00 	vldr	s13, [r3]
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 8015a52:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8015a56:	ee67 7a89 	vmul.f32	s15, s15, s18
 8015a5a:	ee67 7a80 	vmul.f32	s15, s15, s0
		tr->R[i + 1] += noise0;
 8015a5e:	eee7 6a86 	vfma.f32	s13, s15, s12
 8015a62:	edc3 6a00 	vstr	s13, [r3]
		tr->L[i + 1] += noise0;
 8015a66:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015a68:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015a6c:	edd3 6a00 	vldr	s13, [r3]
 8015a70:	eee7 6a86 	vfma.f32	s13, s15, s12
 8015a74:	edc3 6a00 	vstr	s13, [r3]
	if ((i + 2) < tr->n) {
 8015a78:	686b      	ldr	r3, [r5, #4]
 8015a7a:	3402      	adds	r4, #2
 8015a7c:	429c      	cmp	r4, r3
 8015a7e:	da1b      	bge.n	8015ab8 <tract_addTurbulenceNoiseAtPosition+0xe4>
		tr->R[i + 2] += noise1;
 8015a80:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	Lfloat noise1 = turbulenceNoise * delta * thinness0 * openness * 0.5f;
 8015a82:	ee68 7a29 	vmul.f32	s15, s16, s19
		tr->R[i + 2] += noise1;
 8015a86:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015a8a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
	Lfloat noise1 = turbulenceNoise * delta * thinness0 * openness * 0.5f;
 8015a8e:	ee67 7a89 	vmul.f32	s15, s15, s18
		tr->R[i + 2] += noise1;
 8015a92:	edd3 6a00 	vldr	s13, [r3]
	Lfloat noise1 = turbulenceNoise * delta * thinness0 * openness * 0.5f;
 8015a96:	ee27 0a87 	vmul.f32	s0, s15, s14
		tr->R[i + 2] += noise1;
 8015a9a:	eef0 7a66 	vmov.f32	s15, s13
 8015a9e:	eee0 7a06 	vfma.f32	s15, s0, s12
 8015aa2:	edc3 7a00 	vstr	s15, [r3]
		tr->L[i + 2] += noise1;
 8015aa6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015aa8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015aac:	edd3 7a00 	vldr	s15, [r3]
 8015ab0:	eee0 7a06 	vfma.f32	s15, s0, s12
 8015ab4:	edc3 7a00 	vstr	s15, [r3]
 }
 8015ab8:	ecbd 8b04 	vpop	{d8-d9}
 8015abc:	bd38      	pop	{r3, r4, r5, pc}
 8015abe:	bf00      	nop
 8015ac0:	3db851ec 	.word	0x3db851ec
 8015ac4:	00000000 	.word	0x00000000

08015ac8 <tract_addTurbulenceNoise>:
{
 8015ac8:	b510      	push	{r4, lr}
 8015aca:	ed2d 8b02 	vpush	{d8}
	_tract* tr = *t;
 8015ace:	6804      	ldr	r4, [r0, #0]
{
 8015ad0:	b082      	sub	sp, #8
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
 8015ad2:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8015b38 <tract_addTurbulenceNoise+0x70>
 8015ad6:	edd4 8a10 	vldr	s17, [r4, #64]	; 0x40
 8015ada:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
	_tract* tr = *t;
 8015ade:	9401      	str	r4, [sp, #4]
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
 8015ae0:	f7fc ffc6 	bl	8012a70 <tNoise_tick>
 8015ae4:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 8015ae8:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015aec:	f7f9 faf2 	bl	800f0d4 <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
 8015af0:	ed94 1a36 	vldr	s2, [r4, #216]	; 0xd8
 8015af4:	edd4 0a34 	vldr	s1, [r4, #208]	; 0xd0
 8015af8:	ee28 0a80 	vmul.f32	s0, s17, s0
 8015afc:	a801      	add	r0, sp, #4
 8015afe:	f7ff ff69 	bl	80159d4 <tract_addTurbulenceNoiseAtPosition>
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
 8015b02:	9c01      	ldr	r4, [sp, #4]
 8015b04:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8015b08:	edd4 8a10 	vldr	s17, [r4, #64]	; 0x40
 8015b0c:	f7fc ffb0 	bl	8012a70 <tNoise_tick>
 8015b10:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 8015b14:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015b18:	f7f9 fadc 	bl	800f0d4 <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
 8015b1c:	ee28 0a80 	vmul.f32	s0, s17, s0
 8015b20:	ed94 1a37 	vldr	s2, [r4, #220]	; 0xdc
 8015b24:	a801      	add	r0, sp, #4
 8015b26:	edd4 0a35 	vldr	s1, [r4, #212]	; 0xd4
 8015b2a:	f7ff ff53 	bl	80159d4 <tract_addTurbulenceNoiseAtPosition>
}
 8015b2e:	b002      	add	sp, #8
 8015b30:	ecbd 8b02 	vpop	{d8}
 8015b34:	bd10      	pop	{r4, pc}
 8015b36:	bf00      	nop
 8015b38:	3e4ccccd 	.word	0x3e4ccccd

08015b3c <tract_compute>:
{
 8015b3c:	b530      	push	{r4, r5, lr}
 8015b3e:	ed2d 8b04 	vpush	{d8-d9}
	_tract* tr = *t;
 8015b42:	6804      	ldr	r4, [r0, #0]
{
 8015b44:	b083      	sub	sp, #12
 8015b46:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat UVnoise = tNoise_tick(&tr->whiteNoise);
 8015b4a:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
    Lfloat oneMinusLambda = 1.0f - lambda;
 8015b4e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
{
 8015b52:	eef0 9a40 	vmov.f32	s19, s0
	_tract* tr = *t;
 8015b56:	9401      	str	r4, [sp, #4]
    Lfloat UVnoise = tNoise_tick(&tr->whiteNoise);
 8015b58:	f7fc ff8a 	bl	8012a70 <tNoise_tick>
    UVnoise = tSVF_tick(&tr->aspirationNoiseFilt,UVnoise);
 8015b5c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8015b60:	f7f9 fab8 	bl	800f0d4 <tSVF_tick>
    in = tanhf((UVnoise * tr->AnoiseGain) + (in * (1.0f - tr->AnoiseGain)));
 8015b64:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
    Lfloat oneMinusLambda = 1.0f - lambda;
 8015b68:	ee79 8a48 	vsub.f32	s17, s18, s16
    in = tanhf((UVnoise * tr->AnoiseGain) + (in * (1.0f - tr->AnoiseGain)));
 8015b6c:	ee39 9a67 	vsub.f32	s18, s18, s15
 8015b70:	ee29 9a29 	vmul.f32	s18, s18, s19
 8015b74:	eea7 9a80 	vfma.f32	s18, s15, s0
 8015b78:	eeb0 0a49 	vmov.f32	s0, s18
 8015b7c:	f001 fb9c 	bl	80172b8 <tanhf>
	tract_addTurbulenceNoise(&tr);
 8015b80:	a801      	add	r0, sp, #4
    in = tanhf((UVnoise * tr->AnoiseGain) + (in * (1.0f - tr->AnoiseGain)));
 8015b82:	eeb0 9a40 	vmov.f32	s18, s0
	tract_addTurbulenceNoise(&tr);
 8015b86:	f7ff ff9f 	bl	8015ac8 <tract_addTurbulenceNoise>
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
 8015b8a:	9b01      	ldr	r3, [sp, #4]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
 8015b8c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
 8015b90:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8015b92:	eeb0 0a49 	vmov.f32	s0, s18
 8015b96:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8015b9a:	ed90 7a00 	vldr	s14, [r0]
 8015b9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8015ba0:	eea7 0a27 	vfma.f32	s0, s14, s15
 8015ba4:	ed81 0a00 	vstr	s0, [r1]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
 8015ba8:	6859      	ldr	r1, [r3, #4]
 8015baa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015bac:	440a      	add	r2, r1
 8015bae:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8015bb2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8015bb4:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8015bb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015bbc:	edd0 7a00 	vldr	s15, [r0]
 8015bc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015bc4:	edc1 7a01 	vstr	s15, [r1, #4]
    for(i = 1; i < tr->n; i++) {
 8015bc8:	685a      	ldr	r2, [r3, #4]
 8015bca:	2a01      	cmp	r2, #1
 8015bcc:	dd2e      	ble.n	8015c2c <tract_compute+0xf0>
 8015bce:	2204      	movs	r2, #4
 8015bd0:	f04f 0c01 	mov.w	ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 8015bd4:	f103 0024 	add.w	r0, r3, #36	; 0x24
    for(i = 1; i < tr->n; i++) {
 8015bd8:	f10c 0c01 	add.w	ip, ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 8015bdc:	c833      	ldmia	r0, {r0, r1, r4, r5}
 8015bde:	eb05 0e02 	add.w	lr, r5, r2
 8015be2:	4414      	add	r4, r2
        w = r * (tr->R[i - 1] + tr->L[i]);
 8015be4:	4410      	add	r0, r2
 8015be6:	4411      	add	r1, r2
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 8015be8:	edde 7a00 	vldr	s15, [lr]
 8015bec:	ed94 6a00 	vldr	s12, [r4]
 8015bf0:	ee68 7a27 	vmul.f32	s15, s16, s15
        w = r * (tr->R[i - 1] + tr->L[i]);
 8015bf4:	ed50 6a01 	vldr	s13, [r0, #-4]
 8015bf8:	ed91 7a00 	vldr	s14, [r1]
        tr->junction_outR[i] = tr->R[i - 1] - w;
 8015bfc:	6b99      	ldr	r1, [r3, #56]	; 0x38
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 8015bfe:	eee6 7a28 	vfma.f32	s15, s12, s17
        w = r * (tr->R[i - 1] + tr->L[i]);
 8015c02:	ee36 7a87 	vadd.f32	s14, s13, s14
        tr->junction_outR[i] = tr->R[i - 1] - w;
 8015c06:	4411      	add	r1, r2
 8015c08:	eee7 6a67 	vfms.f32	s13, s14, s15
 8015c0c:	edc1 6a00 	vstr	s13, [r1]
        tr->junction_outL[i] = tr->L[i] + w;
 8015c10:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8015c12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8015c14:	4410      	add	r0, r2
 8015c16:	4411      	add	r1, r2
 8015c18:	3204      	adds	r2, #4
 8015c1a:	edd0 6a00 	vldr	s13, [r0]
 8015c1e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8015c22:	edc1 6a00 	vstr	s13, [r1]
    for(i = 1; i < tr->n; i++) {
 8015c26:	6859      	ldr	r1, [r3, #4]
 8015c28:	4561      	cmp	r1, ip
 8015c2a:	dcd3      	bgt.n	8015bd4 <tract_compute+0x98>
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 8015c2c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8015c2e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 8015c32:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 8015c36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015c3a:	440a      	add	r2, r1
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 8015c3c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8015c40:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 8015c44:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8015c46:	0092      	lsls	r2, r2, #2
 8015c48:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8015c4a:	edd1 5a00 	vldr	s11, [r1]
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 8015c4e:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 8015c52:	1d11      	adds	r1, r2, #4
 8015c54:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8015c56:	440c      	add	r4, r1
 8015c58:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015c5a:	eb05 0c02 	add.w	ip, r5, r2
 8015c5e:	edd4 7a00 	vldr	s15, [r4]
 8015c62:	4408      	add	r0, r1
 8015c64:	ed9c 6a00 	vldr	s12, [ip]
 8015c68:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8015c6c:	ee77 5a26 	vadd.f32	s11, s14, s13
 8015c70:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015c74:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015c78:	edc0 7a00 	vstr	s15, [r0]
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
 8015c7c:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8015c80:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8015c84:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
 8015c88:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8015c8a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015c8c:	440c      	add	r4, r1
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
 8015c8e:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
 8015c92:	4410      	add	r0, r2
 8015c94:	ed94 6a00 	vldr	s12, [r4]
 8015c98:	6e5c      	ldr	r4, [r3, #100]	; 0x64
 8015c9a:	edd0 7a00 	vldr	s15, [r0]
 8015c9e:	ed94 5a00 	vldr	s10, [r4]
 8015ca2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8015ca4:	ee77 5a26 	vadd.f32	s11, s14, s13
 8015ca8:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015cac:	4408      	add	r0, r1
 8015cae:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015cb2:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015cb6:	edc0 7a00 	vstr	s15, [r0]
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 8015cba:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 8015cbe:	6e58      	ldr	r0, [r3, #100]	; 0x64
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 8015cc0:	ee28 7a07 	vmul.f32	s14, s16, s14
 8015cc4:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 8015cc8:	ed90 6a00 	vldr	s12, [r0]
 8015ccc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 8015cce:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 8015cd2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
 8015cd4:	4408      	add	r0, r1
 8015cd6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8015cd8:	4411      	add	r1, r2
 8015cda:	edd0 7a00 	vldr	s15, [r0]
 8015cde:	edd1 5a00 	vldr	s11, [r1]
 8015ce2:	ee77 6a26 	vadd.f32	s13, s14, s13
 8015ce6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8015cea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015cee:	eee6 7a07 	vfma.f32	s15, s12, s14
 8015cf2:	edc4 7a00 	vstr	s15, [r4]
    for(i = 0; i < tr->n; i++) {
 8015cf6:	6859      	ldr	r1, [r3, #4]
 8015cf8:	2900      	cmp	r1, #0
 8015cfa:	dd1d      	ble.n	8015d38 <tract_compute+0x1fc>
 8015cfc:	2200      	movs	r2, #0
        tr->R[i] = tr->junction_outR[i]*0.999f;
 8015cfe:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8015e04 <tract_compute+0x2c8>
    for(i = 0; i < tr->n; i++) {
 8015d02:	4614      	mov	r4, r2
        tr->R[i] = tr->junction_outR[i]*0.999f;
 8015d04:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8015d06:	4694      	mov	ip, r2
 8015d08:	6a59      	ldr	r1, [r3, #36]	; 0x24
    for(i = 0; i < tr->n; i++) {
 8015d0a:	3401      	adds	r4, #1
        tr->R[i] = tr->junction_outR[i]*0.999f;
 8015d0c:	4410      	add	r0, r2
 8015d0e:	4411      	add	r1, r2
 8015d10:	3204      	adds	r2, #4
 8015d12:	edd0 7a00 	vldr	s15, [r0]
 8015d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015d1a:	edc1 7a00 	vstr	s15, [r1]
        tr->L[i] = tr->junction_outL[i + 1]*0.999f;
 8015d1e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8015d20:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8015d22:	4410      	add	r0, r2
 8015d24:	4461      	add	r1, ip
 8015d26:	edd0 7a00 	vldr	s15, [r0]
 8015d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015d2e:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
 8015d32:	6859      	ldr	r1, [r3, #4]
 8015d34:	42a1      	cmp	r1, r4
 8015d36:	dce5      	bgt.n	8015d04 <tract_compute+0x1c8>
    tr->lip_output = tr->R[tr->n - 1];
 8015d38:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8015d3c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8015d3e:	6c98      	ldr	r0, [r3, #72]	; 0x48
    tr->lip_output = tr->R[tr->n - 1];
 8015d40:	4411      	add	r1, r2
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8015d42:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8015d46:	4402      	add	r2, r0
    tr->nose_junc_outL[tr->nose_length] =
 8015d48:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
    tr->lip_output = tr->R[tr->n - 1];
 8015d4a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    tr->nose_junc_outL[tr->nose_length] =
 8015d4e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    tr->lip_output = tr->R[tr->n - 1];
 8015d52:	6821      	ldr	r1, [r4, #0]
 8015d54:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8015d58:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8015d5a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015d5e:	edd1 7a00 	vldr	s15, [r1]
 8015d62:	ee67 7a87 	vmul.f32	s15, s15, s14
    tr->nose_junc_outL[tr->nose_length] =
 8015d66:	edc0 7a01 	vstr	s15, [r0, #4]
    for(i = 1; i < tr->nose_length; i++) {
 8015d6a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8015d6c:	2901      	cmp	r1, #1
 8015d6e:	dd27      	ble.n	8015dc0 <tract_compute+0x284>
 8015d70:	2204      	movs	r2, #4
 8015d72:	f04f 0e01 	mov.w	lr, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 8015d76:	6e9c      	ldr	r4, [r3, #104]	; 0x68
    for(i = 1; i < tr->nose_length; i++) {
 8015d78:	f10e 0e01 	add.w	lr, lr, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 8015d7c:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8015d7e:	4414      	add	r4, r2
 8015d80:	eb05 0c02 	add.w	ip, r5, r2
 8015d84:	ed14 7a01 	vldr	s14, [r4, #-4]
 8015d88:	eddc 7a00 	vldr	s15, [ip]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 8015d8c:	e9d3 101c 	ldrd	r1, r0, [r3, #112]	; 0x70
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 8015d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d94:	4410      	add	r0, r2
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 8015d96:	4411      	add	r1, r2
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 8015d98:	edd0 6a00 	vldr	s13, [r0]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 8015d9c:	eea6 7ae7 	vfms.f32	s14, s13, s15
 8015da0:	ed81 7a00 	vstr	s14, [r1]
        tr->nose_junc_outL[i] = tr->noseL[i] + w;
 8015da4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8015da6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8015da8:	4410      	add	r0, r2
 8015daa:	4411      	add	r1, r2
 8015dac:	3204      	adds	r2, #4
 8015dae:	ed90 7a00 	vldr	s14, [r0]
 8015db2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015db6:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->nose_length; i++) {
 8015dba:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8015dbc:	4571      	cmp	r1, lr
 8015dbe:	dcda      	bgt.n	8015d76 <tract_compute+0x23a>
    for(i = 0; i < tr->nose_length; i++) {
 8015dc0:	2900      	cmp	r1, #0
 8015dc2:	dd13      	ble.n	8015dec <tract_compute+0x2b0>
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	4614      	mov	r4, r2
        tr->noseR[i] = tr->nose_junc_outR[i];
 8015dc8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8015dca:	4694      	mov	ip, r2
 8015dcc:	6e99      	ldr	r1, [r3, #104]	; 0x68
    for(i = 0; i < tr->nose_length; i++) {
 8015dce:	3401      	adds	r4, #1
        tr->noseR[i] = tr->nose_junc_outR[i];
 8015dd0:	4410      	add	r0, r2
 8015dd2:	4411      	add	r1, r2
 8015dd4:	3204      	adds	r2, #4
 8015dd6:	6800      	ldr	r0, [r0, #0]
 8015dd8:	6008      	str	r0, [r1, #0]
        tr->noseL[i] = tr->nose_junc_outL[i + 1];
 8015dda:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8015ddc:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8015dde:	4410      	add	r0, r2
 8015de0:	4461      	add	r1, ip
 8015de2:	6800      	ldr	r0, [r0, #0]
 8015de4:	6008      	str	r0, [r1, #0]
    for(i = 0; i < tr->nose_length; i++) {
 8015de6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8015de8:	42a1      	cmp	r1, r4
 8015dea:	dced      	bgt.n	8015dc8 <tract_compute+0x28c>
    tr->nose_output = tr->noseR[tr->nose_length - 1];
 8015dec:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8015dee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015df2:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8015df6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8015dfa:	b003      	add	sp, #12
 8015dfc:	ecbd 8b04 	vpop	{d8-d9}
 8015e00:	bd30      	pop	{r4, r5, pc}
 8015e02:	bf00      	nop
 8015e04:	3f7fbe77 	.word	0x3f7fbe77

08015e08 <tract_calculate_nose_reflections>:
	_tract* tr = *t;
 8015e08:	6803      	ldr	r3, [r0, #0]
    for(i = 0; i < tr->nose_length; i++) {
 8015e0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015e0c:	2a00      	cmp	r2, #0
 8015e0e:	dd32      	ble.n	8015e76 <tract_calculate_nose_reflections+0x6e>
 8015e10:	2200      	movs	r2, #0
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
 8015e12:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8015e16:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8015e1a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->nose_length; i++) {
 8015e1e:	3201      	adds	r2, #1
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
 8015e20:	edd0 7a00 	vldr	s15, [r0]
 8015e24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015e28:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->nose_length; i++) {
 8015e2c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8015e2e:	4291      	cmp	r1, r2
 8015e30:	dcef      	bgt.n	8015e12 <tract_calculate_nose_reflections+0xa>
    for(i = 1; i < tr->nose_length; i++) {
 8015e32:	2901      	cmp	r1, #1
 8015e34:	dd1f      	ble.n	8015e76 <tract_calculate_nose_reflections+0x6e>
 8015e36:	f04f 0c00 	mov.w	ip, #0
 8015e3a:	2201      	movs	r2, #1
{
 8015e3c:	b500      	push	{lr}
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8015e3e:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8015e40:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8015e42:	eb01 0e0c 	add.w	lr, r1, ip
 8015e46:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015e4a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    for(i = 1; i < tr->nose_length; i++) {
 8015e4e:	3201      	adds	r2, #1
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8015e50:	ed91 7a00 	vldr	s14, [r1]
    for(i = 1; i < tr->nose_length; i++) {
 8015e54:	f10c 0c04 	add.w	ip, ip, #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8015e58:	edde 7a00 	vldr	s15, [lr]
 8015e5c:	ee77 6ac7 	vsub.f32	s13, s15, s14
            (tr->noseA[i-1] + tr->noseA[i]);
 8015e60:	ee77 7a87 	vadd.f32	s15, s15, s14
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8015e64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015e68:	ed80 7a00 	vstr	s14, [r0]
    for(i = 1; i < tr->nose_length; i++) {
 8015e6c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8015e6e:	4291      	cmp	r1, r2
 8015e70:	dce5      	bgt.n	8015e3e <tract_calculate_nose_reflections+0x36>
}
 8015e72:	f85d fb04 	ldr.w	pc, [sp], #4
 8015e76:	4770      	bx	lr

08015e78 <tract_initToPool>:
{
 8015e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e7c:	ed2d 8b02 	vpush	{d8}
	_tMempool* m = *mp;
 8015e80:	681b      	ldr	r3, [r3, #0]
{
 8015e82:	b082      	sub	sp, #8
 8015e84:	ee08 1a10 	vmov	s16, r1
 8015e88:	4605      	mov	r5, r0
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8015e8a:	4619      	mov	r1, r3
 8015e8c:	20e8      	movs	r0, #232	; 0xe8
{
 8015e8e:	4617      	mov	r7, r2
	_tMempool* m = *mp;
 8015e90:	9300      	str	r3, [sp, #0]
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8015e92:	f7fc f917 	bl	80120c4 <mpool_calloc>
    Lfloat n = numTractSections;
 8015e96:	eef8 7ac8 	vcvt.f32.s32	s15, s16
    tr->nose_length = n*0.636363636363636f; //28
 8015e9a:	eddf 5ab3 	vldr	s11, [pc, #716]	; 8016168 <tract_initToPool+0x2f0>
    tr->invN = 1.0f / n;
 8015e9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tr->tip_start = n*0.727272727272727f;
 8015ea2:	ed9f 6ab2 	vldr	s12, [pc, #712]	; 801616c <tract_initToPool+0x2f4>
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8015ea6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    tr->nose_length = n*0.636363636363636f; //28
 8015eaa:	ee67 5aa5 	vmul.f32	s11, s15, s11
    tr->blade_start = n*0.227272727272727f;
 8015eae:	eddf 6ab0 	vldr	s13, [pc, #704]	; 8016170 <tract_initToPool+0x2f8>
    tr->invN = 1.0f / n;
 8015eb2:	ee87 2a27 	vdiv.f32	s4, s14, s15
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8015eb6:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8016174 <tract_initToPool+0x2fc>
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8015eba:	eddf 1aaf 	vldr	s3, [pc, #700]	; 8016178 <tract_initToPool+0x300>
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8015ebe:	4604      	mov	r4, r0
    tr->lip_start = n*0.886363636363636f;
 8015ec0:	ed9f 5aae 	vldr	s10, [pc, #696]	; 801617c <tract_initToPool+0x304>
    tr->glottal_reflection = 0.75f;
 8015ec4:	f04f 5e7d 	mov.w	lr, #1061158912	; 0x3f400000
	tr->mempool = m;
 8015ec8:	9b00      	ldr	r3, [sp, #0]
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8015eca:	ed9f 4aad 	vldr	s8, [pc, #692]	; 8016180 <tract_initToPool+0x308>
    tr->nose_length = n*0.636363636363636f; //28
 8015ece:	eefd 5ae5 	vcvt.s32.f32	s11, s11
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8015ed2:	6028      	str	r0, [r5, #0]
    tr->tip_start = n*0.727272727272727f;
 8015ed4:	ee27 6a86 	vmul.f32	s12, s15, s12
	tr->mempool = m;
 8015ed8:	6003      	str	r3, [r0, #0]
    tr->blade_start = n*0.227272727272727f;
 8015eda:	ee67 6aa6 	vmul.f32	s13, s15, s13
    tr->reflection_left = 0.0f;
 8015ede:	2300      	movs	r3, #0
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8015ee0:	eef8 2ae5 	vcvt.f32.s32	s5, s11
    tr->movement_speed = 200.0f;
 8015ee4:	4aa7      	ldr	r2, [pc, #668]	; (8016184 <tract_initToPool+0x30c>)
    tr->tip_start = n*0.727272727272727f;
 8015ee6:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->lip_reflection = -0.85f;
 8015eea:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 801619c <tract_initToPool+0x324>
    tr->blade_start = n*0.227272727272727f;
 8015eee:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015ef2:	00bd      	lsls	r5, r7, #2
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8015ef4:	ee77 4ae2 	vsub.f32	s9, s15, s5
	LEAF* leaf = m->leaf;
 8015ef8:	9900      	ldr	r1, [sp, #0]
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8015efa:	eeb8 3ac6 	vcvt.f32.s32	s6, s12
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8015efe:	9001      	str	r0, [sp, #4]
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8015f00:	eef8 3ae6 	vcvt.f32.s32	s7, s13
    tr->last_obstruction = -1;
 8015f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8015f08:	ee74 4a87 	vadd.f32	s9, s9, s14
    tr->velum_target = 0.01f;
 8015f0c:	f8df 8290 	ldr.w	r8, [pc, #656]	; 80161a0 <tract_initToPool+0x328>
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8015f10:	eea7 3ae0 	vfms.f32	s6, s15, s1
	LEAF* leaf = m->leaf;
 8015f14:	684e      	ldr	r6, [r1, #4]
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8015f16:	eee7 3aa1 	vfma.f32	s7, s15, s3
    tr->movement_speed = 200.0f;
 8015f1a:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    tr->lip_start = n*0.886363636363636f;
 8015f1e:	ee27 5a85 	vmul.f32	s10, s15, s10
    tr->glottal_reflection = 0.75f;
 8015f22:	f8c4 e09c 	str.w	lr, [r4, #156]	; 0x9c
    tr->n = n; //44
 8015f26:	eefd 1ae7 	vcvt.s32.f32	s3, s15
    tr->lip_reflection = -0.85f;
 8015f2a:	f8c4 c0a0 	str.w	ip, [r4, #160]	; 0xa0
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8015f2e:	ee27 4a84 	vmul.f32	s8, s15, s8
    tr->invN = 1.0f / n;
 8015f32:	ed84 2a02 	vstr	s4, [r4, #8]
    tr->lip_start = n*0.886363636363636f;
 8015f36:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    tr->nose_length = n*0.636363636363636f; //28
 8015f3a:	edc4 5a12 	vstr	s11, [r4, #72]	; 0x48
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8015f3e:	ee67 7a81 	vmul.f32	s15, s15, s2
    tr->n = n; //44
 8015f42:	edc4 1a01 	vstr	s3, [r4, #4]
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8015f46:	eefd 4ae4 	vcvt.s32.f32	s9, s9
    tr->tip_start = n*0.727272727272727f;
 8015f4a:	ed84 6a14 	vstr	s12, [r4, #80]	; 0x50
	tr->turbuluencePointDiameter[0] = 1.5f;
 8015f4e:	eef7 8a08 	vmov.f32	s17, #120	; 0x3fc00000  1.5
    tr->lip_start = n*0.886363636363636f;
 8015f52:	ed84 5a16 	vstr	s10, [r4, #88]	; 0x58
    tr->blade_start = n*0.227272727272727f;
 8015f56:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 8015f5a:	ee87 8a22 	vdiv.f32	s16, s14, s5
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8015f5e:	edc4 4a13 	vstr	s9, [r4, #76]	; 0x4c
    tr->TnoiseGain = 1.0f;
 8015f62:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    tr->AnoiseGain = 1.0f;
 8015f66:	ed84 7a11 	vstr	s14, [r4, #68]	; 0x44
    tr->diameterScale = 1.0f;
 8015f6a:	ed84 7a2f 	vstr	s14, [r4, #188]	; 0xbc
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8015f6e:	ed84 3a17 	vstr	s6, [r4, #92]	; 0x5c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8015f72:	edc4 3a18 	vstr	s7, [r4, #96]	; 0x60
    tr->reflection_left = 0.0f;
 8015f76:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    tr->reflection_right = 0.0f;
 8015f7a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tr->reflection_nose = 0.0f;
 8015f7e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    tr->new_reflection_left = 0.0f;
 8015f82:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    tr->new_reflection_right= 0.0f;
 8015f86:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    tr->new_reflection_nose = 0.0f;
 8015f8a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    tr->lip_output = 0.0f;
 8015f8e:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
    tr->nose_output = 0.0f;
 8015f92:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    tr->last_obstruction = -1;
 8015f96:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015f9a:	4628      	mov	r0, r5
    tr->maxNumTractSections = maxNumTractSections;
 8015f9c:	6127      	str	r7, [r4, #16]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8015f9e:	1d2f      	adds	r7, r5, #4
    tr->velum_target = 0.01f;
 8015fa0:	f8c4 8098 	str.w	r8, [r4, #152]	; 0x98
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8015fa4:	ed84 4a34 	vstr	s8, [r4, #208]	; 0xd0
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8015fa8:	edc4 7a35 	vstr	s15, [r4, #212]	; 0xd4
	tr->turbuluencePointDiameter[0] = 1.5f;
 8015fac:	edc4 8a36 	vstr	s17, [r4, #216]	; 0xd8
	tr->turbuluencePointDiameter[1] = 1.5f;
 8015fb0:	edc4 8a37 	vstr	s17, [r4, #220]	; 0xdc
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fb4:	f7fc f886 	bl	80120c4 <mpool_calloc>
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fb8:	9900      	ldr	r1, [sp, #0]
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fba:	6160      	str	r0, [r4, #20]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fbc:	4628      	mov	r0, r5
 8015fbe:	f7fc f881 	bl	80120c4 <mpool_calloc>
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fc2:	9900      	ldr	r1, [sp, #0]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fc4:	61a0      	str	r0, [r4, #24]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fc6:	4628      	mov	r0, r5
 8015fc8:	f7fc f87c 	bl	80120c4 <mpool_calloc>
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fcc:	9900      	ldr	r1, [sp, #0]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fce:	61e0      	str	r0, [r4, #28]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fd0:	4628      	mov	r0, r5
 8015fd2:	f7fc f877 	bl	80120c4 <mpool_calloc>
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fd6:	9900      	ldr	r1, [sp, #0]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fd8:	6220      	str	r0, [r4, #32]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fda:	4628      	mov	r0, r5
 8015fdc:	f7fc f872 	bl	80120c4 <mpool_calloc>
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fe0:	9900      	ldr	r1, [sp, #0]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fe2:	62a0      	str	r0, [r4, #40]	; 0x28
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fe4:	4628      	mov	r0, r5
 8015fe6:	f7fc f86d 	bl	80120c4 <mpool_calloc>
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8015fea:	9900      	ldr	r1, [sp, #0]
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fec:	6260      	str	r0, [r4, #36]	; 0x24
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8015fee:	4638      	mov	r0, r7
 8015ff0:	f7fc f868 	bl	80120c4 <mpool_calloc>
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8015ff4:	9900      	ldr	r1, [sp, #0]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8015ff6:	62e0      	str	r0, [r4, #44]	; 0x2c
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8015ff8:	4638      	mov	r0, r7
 8015ffa:	f7fc f863 	bl	80120c4 <mpool_calloc>
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8015ffe:	9900      	ldr	r1, [sp, #0]
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8016000:	6320      	str	r0, [r4, #48]	; 0x30
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8016002:	4638      	mov	r0, r7
 8016004:	f7fc f85e 	bl	80120c4 <mpool_calloc>
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8016008:	9900      	ldr	r1, [sp, #0]
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801600a:	6360      	str	r0, [r4, #52]	; 0x34
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801600c:	4638      	mov	r0, r7
 801600e:	f7fc f859 	bl	80120c4 <mpool_calloc>
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016012:	9900      	ldr	r1, [sp, #0]
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8016014:	63a0      	str	r0, [r4, #56]	; 0x38
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016016:	4628      	mov	r0, r5
 8016018:	f7fc f854 	bl	80120c4 <mpool_calloc>
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801601c:	9900      	ldr	r1, [sp, #0]
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801601e:	63e0      	str	r0, [r4, #60]	; 0x3c
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016020:	4628      	mov	r0, r5
 8016022:	f7fc f84f 	bl	80120c4 <mpool_calloc>
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016026:	9900      	ldr	r1, [sp, #0]
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016028:	6660      	str	r0, [r4, #100]	; 0x64
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801602a:	4628      	mov	r0, r5
 801602c:	f7fc f84a 	bl	80120c4 <mpool_calloc>
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8016030:	9900      	ldr	r1, [sp, #0]
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016032:	66a0      	str	r0, [r4, #104]	; 0x68
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8016034:	4638      	mov	r0, r7
 8016036:	f7fc f845 	bl	80120c4 <mpool_calloc>
 801603a:	4603      	mov	r3, r0
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801603c:	9900      	ldr	r1, [sp, #0]
 801603e:	4638      	mov	r0, r7
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8016040:	66e3      	str	r3, [r4, #108]	; 0x6c
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8016042:	f7fc f83f 	bl	80120c4 <mpool_calloc>
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016046:	9900      	ldr	r1, [sp, #0]
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8016048:	6720      	str	r0, [r4, #112]	; 0x70
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801604a:	4628      	mov	r0, r5
 801604c:	f7fc f83a 	bl	80120c4 <mpool_calloc>
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016050:	9900      	ldr	r1, [sp, #0]
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016052:	67a0      	str	r0, [r4, #120]	; 0x78
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016054:	4628      	mov	r0, r5
 8016056:	f7fc f835 	bl	80120c4 <mpool_calloc>
 801605a:	4603      	mov	r3, r0
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801605c:	9900      	ldr	r1, [sp, #0]
 801605e:	4628      	mov	r0, r5
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016060:	6763      	str	r3, [r4, #116]	; 0x74
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016062:	f7fc f82f 	bl	80120c4 <mpool_calloc>
    for(i = 0; i < tr->n; i++) {
 8016066:	6862      	ldr	r2, [r4, #4]
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016068:	67e0      	str	r0, [r4, #124]	; 0x7c
    for(i = 0; i < tr->n; i++) {
 801606a:	2a00      	cmp	r2, #0
 801606c:	dd41      	ble.n	80160f2 <tract_initToPool+0x27a>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 801606e:	eeb1 4a0c 	vmov.f32	s8, #28	; 0x40e00000  7.0
    for(i = 0; i < tr->n; i++) {
 8016072:	2300      	movs	r3, #0
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8016074:	eefe 4a00 	vmov.f32	s9, #224	; 0xbf000000 -0.5
            diameter = 0.6f;
 8016078:	ed9f 5a43 	vldr	s10, [pc, #268]	; 8016188 <tract_initToPool+0x310>
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 801607c:	eeb2 3a08 	vmov.f32	s6, #40	; 0x41400000  12.0
            diameter = 1.5f;
 8016080:	eddf 3a42 	vldr	s7, [pc, #264]	; 801618c <tract_initToPool+0x314>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8016084:	ee07 2a90 	vmov	s15, r2
 8016088:	edd4 6a02 	vldr	s13, [r4, #8]
 801608c:	eeb0 6a64 	vmov.f32	s12, s9
 8016090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016094:	ee66 5a84 	vmul.f32	s11, s13, s8
            diameter = 0.6f;
 8016098:	eeb0 7a45 	vmov.f32	s14, s10
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 801609c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80160a0:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 80160a4:	ee16 2a10 	vmov	r2, s12
 80160a8:	429a      	cmp	r2, r3
 80160aa:	dc0a      	bgt.n	80160c2 <tract_initToPool+0x24a>
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 80160ac:	ee66 6a83 	vmul.f32	s13, s13, s6
 80160b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80160b4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
            diameter = 1.5f;
 80160b8:	ee16 2a90 	vmov	r2, s13
 80160bc:	429a      	cmp	r2, r3
 80160be:	fe33 7aa8 	vselgt.f32	s14, s7, s17
            tr->new_diameter[i] = diameter;
 80160c2:	6a22      	ldr	r2, [r4, #32]
 80160c4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80160c8:	ed82 7a00 	vstr	s14, [r2]
            tr->target_diameter[i] =
 80160cc:	69e2      	ldr	r2, [r4, #28]
 80160ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80160d2:	ed82 7a00 	vstr	s14, [r2]
            tr->rest_diameter[i] =
 80160d6:	69a2      	ldr	r2, [r4, #24]
 80160d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80160dc:	ed82 7a00 	vstr	s14, [r2]
        tr->diameter[i] =
 80160e0:	6962      	ldr	r2, [r4, #20]
 80160e2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for(i = 0; i < tr->n; i++) {
 80160e6:	3301      	adds	r3, #1
        tr->diameter[i] =
 80160e8:	ed82 7a00 	vstr	s14, [r2]
    for(i = 0; i < tr->n; i++) {
 80160ec:	6862      	ldr	r2, [r4, #4]
 80160ee:	429a      	cmp	r2, r3
 80160f0:	dcc8      	bgt.n	8016084 <tract_initToPool+0x20c>
	for(i = 0; i < tr->nose_length; i++) {
 80160f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	dd5f      	ble.n	80161b8 <tract_initToPool+0x340>
		if(d < 1.0f) {
 80160f8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
	for(i = 0; i < tr->nose_length; i++) {
 80160fc:	2300      	movs	r3, #0
			diameter = 0.5f + 1.5f*(2.0f-d);
 80160fe:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
			diameter = 0.4f + 1.6f * d;
 8016102:	eddf 3a23 	vldr	s7, [pc, #140]	; 8016190 <tract_initToPool+0x318>
			diameter = 0.5f + 1.5f*(2.0f-d);
 8016106:	eeb7 5a08 	vmov.f32	s10, #120	; 0x3fc00000  1.5
			diameter = 0.4f + 1.6f * d;
 801610a:	ed9f 4a22 	vldr	s8, [pc, #136]	; 8016194 <tract_initToPool+0x31c>
			diameter = 0.5f + 1.5f*(2.0f-d);
 801610e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
		diameter = MIN(diameter, 1.9f);
 8016112:	eddf 6a21 	vldr	s13, [pc, #132]	; 8016198 <tract_initToPool+0x320>
 8016116:	e015      	b.n	8016144 <tract_initToPool+0x2cc>
			diameter = 0.5f + 1.5f*(2.0f-d);
 8016118:	ee74 7ae7 	vsub.f32	s15, s9, s15
 801611c:	eeb0 7a65 	vmov.f32	s14, s11
 8016120:	eea7 7a85 	vfma.f32	s14, s15, s10
		diameter = MIN(diameter, 1.9f);
 8016124:	eeb4 7ae6 	vcmpe.f32	s14, s13
		tr->nose_diameter[i] = diameter;
 8016128:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801612a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	for(i = 0; i < tr->nose_length; i++) {
 801612e:	3301      	adds	r3, #1
		diameter = MIN(diameter, 1.9f);
 8016130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016134:	bf58      	it	pl
 8016136:	eeb0 7a66 	vmovpl.f32	s14, s13
		tr->nose_diameter[i] = diameter;
 801613a:	ed82 7a00 	vstr	s14, [r2]
	for(i = 0; i < tr->nose_length; i++) {
 801613e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8016140:	429a      	cmp	r2, r3
 8016142:	dd39      	ble.n	80161b8 <tract_initToPool+0x340>
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8016144:	ee07 3a90 	vmov	s15, r3
 8016148:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801614c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8016150:	ee77 7aa7 	vadd.f32	s15, s15, s15
		if(d < 1.0f) {
 8016154:	eef4 7ac6 	vcmpe.f32	s15, s12
 8016158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801615c:	d5dc      	bpl.n	8016118 <tract_initToPool+0x2a0>
			diameter = 0.4f + 1.6f * d;
 801615e:	eeb0 7a44 	vmov.f32	s14, s8
 8016162:	eea7 7aa3 	vfma.f32	s14, s15, s7
 8016166:	e7dd      	b.n	8016124 <tract_initToPool+0x2ac>
 8016168:	3f22e8ba 	.word	0x3f22e8ba
 801616c:	3f3a2e8c 	.word	0x3f3a2e8c
 8016170:	3e68ba2f 	.word	0x3e68ba2f
 8016174:	3d8ba2e9 	.word	0x3d8ba2e9
 8016178:	3d3a2e8c 	.word	0x3d3a2e8c
 801617c:	3f62e8ba 	.word	0x3f62e8ba
 8016180:	3ee66666 	.word	0x3ee66666
 8016184:	43480000 	.word	0x43480000
 8016188:	3f19999a 	.word	0x3f19999a
 801618c:	3f8ccccd 	.word	0x3f8ccccd
 8016190:	3fcccccd 	.word	0x3fcccccd
 8016194:	3ecccccd 	.word	0x3ecccccd
 8016198:	3ff33333 	.word	0x3ff33333
 801619c:	bf59999a 	.word	0xbf59999a
 80161a0:	3c23d70a 	.word	0x3c23d70a
 80161a4:	447c8000 	.word	0x447c8000
 80161a8:	44778000 	.word	0x44778000
 80161ac:	3f333333 	.word	0x3f333333
 80161b0:	43fa0000 	.word	0x43fa0000
 80161b4:	42800000 	.word	0x42800000
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.7f, &m);
 80161b8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
 80161bc:	ed5f 0a05 	vldr	s1, [pc, #-20]	; 80161ac <tract_initToPool+0x334>
 80161c0:	ed1f 0a08 	vldr	s0, [pc, #-32]	; 80161a4 <tract_initToPool+0x32c>
 80161c4:	2102      	movs	r1, #2
 80161c6:	466a      	mov	r2, sp
        tr->tpool->pool[i]->is_free = 1;
 80161c8:	2701      	movs	r7, #1
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.7f, &m);
 80161ca:	f7f8 fef3 	bl	800efb4 <tSVF_initToPool>
	tSVF_initToPool(&tr->fricativeNoiseFilt[1], SVFTypeBandpass, 990.0f, 0.7f, &m);
 80161ce:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
 80161d2:	466a      	mov	r2, sp
 80161d4:	ed5f 0a0b 	vldr	s1, [pc, #-44]	; 80161ac <tract_initToPool+0x334>
 80161d8:	ed1f 0a0d 	vldr	s0, [pc, #-52]	; 80161a8 <tract_initToPool+0x330>
 80161dc:	2102      	movs	r1, #2
 80161de:	f7f8 fee9 	bl	800efb4 <tSVF_initToPool>
	tSVF_initToPool(&tr->aspirationNoiseFilt, SVFTypeBandpass, 500.0f, 0.7f, &m);
 80161e2:	ed5f 0a0e 	vldr	s1, [pc, #-56]	; 80161ac <tract_initToPool+0x334>
 80161e6:	ed1f 0a0e 	vldr	s0, [pc, #-56]	; 80161b0 <tract_initToPool+0x338>
 80161ea:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 80161ee:	466a      	mov	r2, sp
 80161f0:	2102      	movs	r1, #2
 80161f2:	f7f8 fedf 	bl	800efb4 <tSVF_initToPool>
	tNoise_initToPool(&tr->whiteNoise, WhiteNoise, &m);
 80161f6:	466a      	mov	r2, sp
 80161f8:	2100      	movs	r1, #0
 80161fa:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 80161fe:	f7fc fc23 	bl	8012a48 <tNoise_initToPool>
    tract_calculate_reflections(&tr);
 8016202:	a801      	add	r0, sp, #4
 8016204:	f7ff f956 	bl	80154b4 <tract_calculate_reflections>
    tract_calculate_nose_reflections(&tr);
 8016208:	a801      	add	r0, sp, #4
 801620a:	f7ff fdfd 	bl	8015e08 <tract_calculate_nose_reflections>
    tr->nose_diameter[0] = tr->velum_target;
 801620e:	9d01      	ldr	r5, [sp, #4]
    tr->block_time = 64.0f / leaf->sampleRate;
 8016210:	ed1f 6a18 	vldr	s12, [pc, #-96]	; 80161b4 <tract_initToPool+0x33c>
    tr->T = 1.0f / leaf->sampleRate;
 8016214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    tr->nose_diameter[0] = tr->velum_target;
 8016218:	6fab      	ldr	r3, [r5, #120]	; 0x78
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 801621a:	201c      	movs	r0, #28
    tr->nose_diameter[0] = tr->velum_target;
 801621c:	f8d5 2098 	ldr.w	r2, [r5, #152]	; 0x98
 8016220:	601a      	str	r2, [r3, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
 8016222:	ed96 7a00 	vldr	s14, [r6]
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8016226:	9900      	ldr	r1, [sp, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
 8016228:	eec6 7a07 	vdiv.f32	s15, s12, s14
 801622c:	edc5 7a2e 	vstr	s15, [r5, #184]	; 0xb8
    tr->T = 1.0f / leaf->sampleRate;
 8016230:	ed96 7a00 	vldr	s14, [r6]
        tr->tpool->pool[i]->time_alive = 0;
 8016234:	2600      	movs	r6, #0
    tr->T = 1.0f / leaf->sampleRate;
 8016236:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801623a:	edc5 7a39 	vstr	s15, [r5, #228]	; 0xe4
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 801623e:	f7fb fedd 	bl	8011ffc <mpool_alloc>
    tr->tpool->size = 0;
 8016242:	2300      	movs	r3, #0
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8016244:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8016248:	461c      	mov	r4, r3
    tr->tpool->size = 0;
 801624a:	6143      	str	r3, [r0, #20]
    tr->tpool->next_free = 0;
 801624c:	f8d5 20e0 	ldr.w	r2, [r5, #224]	; 0xe0
 8016250:	6193      	str	r3, [r2, #24]
    	tr->tpool->pool[i] = (_transient*) mpool_alloc(sizeof(_transient), m);
 8016252:	f8d5 80e0 	ldr.w	r8, [r5, #224]	; 0xe0
 8016256:	2020      	movs	r0, #32
 8016258:	9900      	ldr	r1, [sp, #0]
 801625a:	f7fb fecf 	bl	8011ffc <mpool_alloc>
 801625e:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
        tr->tpool->pool[i]->is_free = 1;
 8016262:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
        tr->tpool->pool[i]->position = 0;
 8016266:	2200      	movs	r2, #0
        tr->tpool->pool[i]->is_free = 1;
 8016268:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801626c:	751f      	strb	r7, [r3, #20]
        tr->tpool->pool[i]->id = i;
 801626e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8016272:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8016276:	619c      	str	r4, [r3, #24]
        tr->tpool->pool[i]->position = 0;
 8016278:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 801627c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8016280:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
 8016282:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8016286:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801628a:	605e      	str	r6, [r3, #4]
        tr->tpool->pool[i]->strength = 0;
 801628c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8016290:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8016294:	60de      	str	r6, [r3, #12]
        tr->tpool->pool[i]->exponent = 0;
 8016296:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 801629a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 801629e:	3401      	adds	r4, #1
 80162a0:	2c04      	cmp	r4, #4
        tr->tpool->pool[i]->exponent = 0;
 80162a2:	611e      	str	r6, [r3, #16]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 80162a4:	d1d5      	bne.n	8016252 <tract_initToPool+0x3da>
}
 80162a6:	b002      	add	sp, #8
 80162a8:	ecbd 8b02 	vpop	{d8}
 80162ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080162b0 <tVoc_init>:
}



void    tVoc_init         (tVoc* const voc, int numTractSections, int maxNumTractSections, LEAF* const leaf)
{
 80162b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	tVoc_initToPool   (voc, numTractSections, maxNumTractSections, &leaf->mempool);
}

void    tVoc_initToPool   (tVoc* const voc, int numTractSections, int maxNumTractSections, tMempool* const mp)
{
	_tMempool* m = *mp;
 80162b2:	699d      	ldr	r5, [r3, #24]
{
 80162b4:	b085      	sub	sp, #20
 80162b6:	4607      	mov	r7, r0
 80162b8:	460e      	mov	r6, r1
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
 80162ba:	2018      	movs	r0, #24
 80162bc:	4629      	mov	r1, r5
{
 80162be:	9201      	str	r2, [sp, #4]
	_tMempool* m = *mp;
 80162c0:	9502      	str	r5, [sp, #8]
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
 80162c2:	f7fb fe9b 	bl	8011ffc <mpool_alloc>
 80162c6:	4604      	mov	r4, r0
 80162c8:	6038      	str	r0, [r7, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 80162ca:	4629      	mov	r1, r5
	v->mempool = m;
 80162cc:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 80162ce:	203c      	movs	r0, #60	; 0x3c
 80162d0:	f7fb fef8 	bl	80120c4 <mpool_calloc>
 80162d4:	6060      	str	r0, [r4, #4]
 80162d6:	4603      	mov	r3, r0
	glot->mempool = m;
 80162d8:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 80162da:	9003      	str	r0, [sp, #12]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 80162dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	glot->freq = 140.0f; /* 140Hz frequency by default */
 80162e0:	480d      	ldr	r0, [pc, #52]	; (8016318 <tVoc_init+0x68>)
	LEAF* leaf = glot->mempool->leaf;
 80162e2:	6869      	ldr	r1, [r5, #4]
	glot->freq = 140.0f; /* 140Hz frequency by default */
 80162e4:	6058      	str	r0, [r3, #4]
    glot->tenseness = 0.6f; /* value between 0 and 1 */
 80162e6:	480d      	ldr	r0, [pc, #52]	; (801631c <tVoc_init+0x6c>)
 80162e8:	6098      	str	r0, [r3, #8]
    glottis_setup_waveform(&glot);
 80162ea:	a803      	add	r0, sp, #12
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 80162ec:	ed91 7a00 	vldr	s14, [r1]
    glot->time_in_waveform = 0;
 80162f0:	2100      	movs	r1, #0
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 80162f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
    glot->time_in_waveform = 0;
 80162f6:	6159      	str	r1, [r3, #20]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 80162f8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    glottis_setup_waveform(&glot);
 80162fc:	f7fe ff6c 	bl	80151d8 <glottis_setup_waveform>
	glottis_initToPool(&v->glot, &m); /* initialize glottis */
	tract_initToPool(&v->tr, numTractSections, maxNumTractSections, &m); /* initialize vocal tract */
 8016300:	ab02      	add	r3, sp, #8
 8016302:	9a01      	ldr	r2, [sp, #4]
 8016304:	4631      	mov	r1, r6
 8016306:	f104 0008 	add.w	r0, r4, #8
 801630a:	f7ff fdb5 	bl	8015e78 <tract_initToPool>
	v->counter = 0;
 801630e:	2300      	movs	r3, #0
 8016310:	6123      	str	r3, [r4, #16]
}
 8016312:	b005      	add	sp, #20
 8016314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016316:	bf00      	nop
 8016318:	430c0000 	.word	0x430c0000
 801631c:	3f19999a 	.word	0x3f19999a

08016320 <tVoc_tick>:
	//mpool_free((char*)v->buf, v->mempool);
	mpool_free((char*)v, v->mempool);
}

Lfloat   tVoc_tick         (tVoc* const voc)
{
 8016320:	b538      	push	{r3, r4, r5, lr}
 8016322:	ed2d 8b04 	vpush	{d8-d9}
	_tVoc* v = *voc;
 8016326:	6804      	ldr	r4, [r0, #0]
	Lfloat vocal_output, glot;
	Lfloat lambda1,lambda2;

	if(v->counter == 0) {
 8016328:	6923      	ldr	r3, [r4, #16]
		tract_reshape(&v->tr);
 801632a:	f104 0508 	add.w	r5, r4, #8
	if(v->counter == 0) {
 801632e:	b343      	cbz	r3, 8016382 <tVoc_tick+0x62>
		tract_calculate_reflections(&v->tr);
	}

	//Lfloat finalOutput = v->buf[v->counter];
	vocal_output = 0.0f;
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 8016330:	ee07 3a90 	vmov	s15, r3
 8016334:	eddf 9a23 	vldr	s19, [pc, #140]	; 80163c4 <tVoc_tick+0xa4>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
	glot = glottis_compute(&v->glot);
 8016338:	1d20      	adds	r0, r4, #4
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 801633a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	glot = glottis_compute(&v->glot);
 801633e:	f7ff f83d 	bl	80153bc <glottis_compute>

	tract_compute(&v->tr, glot, lambda1);
 8016342:	4628      	mov	r0, r5
	glot = glottis_compute(&v->glot);
 8016344:	eeb0 9a40 	vmov.f32	s18, s0
	tract_compute(&v->tr, glot, lambda1);
 8016348:	ee68 0aa9 	vmul.f32	s1, s17, s19
 801634c:	f7ff fbf6 	bl	8015b3c <tract_compute>
	vocal_output += v->tr->lip_output + v->tr->nose_output;
 8016350:	68a3      	ldr	r3, [r4, #8]
 8016352:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80163c8 <tVoc_tick+0xa8>
 8016356:	ed93 8a2c 	vldr	s16, [r3, #176]	; 0xb0
 801635a:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4

	if (v->doubleCompute)
 801635e:	68e2      	ldr	r2, [r4, #12]
	vocal_output += v->tr->lip_output + v->tr->nose_output;
 8016360:	ee38 8a07 	vadd.f32	s16, s16, s14
 8016364:	ee38 8a27 	vadd.f32	s16, s16, s15
	if (v->doubleCompute)
 8016368:	b99a      	cbnz	r2, 8016392 <tVoc_tick+0x72>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
		vocal_output *= 0.125f;
	}
	else
	{
		vocal_output *= 0.25f;
 801636a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801636e:	ee28 0a27 	vmul.f32	s0, s16, s15
	}

	v->counter = (v->counter + 1) & 63;
 8016372:	6923      	ldr	r3, [r4, #16]
 8016374:	3301      	adds	r3, #1
 8016376:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801637a:	6123      	str	r3, [r4, #16]
	return vocal_output;
}
 801637c:	ecbd 8b04 	vpop	{d8-d9}
 8016380:	bd38      	pop	{r3, r4, r5, pc}
		tract_reshape(&v->tr);
 8016382:	4628      	mov	r0, r5
 8016384:	f7ff fa94 	bl	80158b0 <tract_reshape>
		tract_calculate_reflections(&v->tr);
 8016388:	4628      	mov	r0, r5
 801638a:	f7ff f893 	bl	80154b4 <tract_calculate_reflections>
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 801638e:	6923      	ldr	r3, [r4, #16]
 8016390:	e7ce      	b.n	8016330 <tVoc_tick+0x10>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
 8016392:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		tract_compute(&v->tr, glot, lambda2);
 8016396:	4628      	mov	r0, r5
 8016398:	eeb0 0a49 	vmov.f32	s0, s18
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
 801639c:	ee78 0aa7 	vadd.f32	s1, s17, s15
		tract_compute(&v->tr, glot, lambda2);
 80163a0:	ee60 0aa9 	vmul.f32	s1, s1, s19
 80163a4:	f7ff fbca 	bl	8015b3c <tract_compute>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
 80163a8:	68a3      	ldr	r3, [r4, #8]
		vocal_output *= 0.125f;
 80163aa:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
		vocal_output += v->tr->lip_output + v->tr->nose_output;
 80163ae:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80163b2:	edd3 6a2d 	vldr	s13, [r3, #180]	; 0xb4
 80163b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80163ba:	ee77 7a88 	vadd.f32	s15, s15, s16
		vocal_output *= 0.125f;
 80163be:	ee27 0a87 	vmul.f32	s0, s15, s14
 80163c2:	e7d6      	b.n	8016372 <tVoc_tick+0x52>
 80163c4:	3c800000 	.word	0x3c800000
 80163c8:	00000000 	.word	0x00000000

080163cc <tVoc_setDoubleComputeFlag>:
    *out = vocal_output * 0.125;
    v->counter = (v->counter + 1) & 64;
}
void    tVoc_setDoubleComputeFlag(tVoc* const voc, int doubleCompute)
{
	_tVoc* v = *voc;
 80163cc:	6803      	ldr	r3, [r0, #0]
	v->doubleCompute = doubleCompute;
 80163ce:	60d9      	str	r1, [r3, #12]
}
 80163d0:	4770      	bx	lr
 80163d2:	bf00      	nop

080163d4 <tVoc_setFreq>:
}

void    tVoc_setFreq      (tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
	v->glot->freq = freq;
 80163d4:	6803      	ldr	r3, [r0, #0]
 80163d6:	685b      	ldr	r3, [r3, #4]
 80163d8:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80163dc:	4770      	bx	lr
 80163de:	bf00      	nop

080163e0 <tVoc_set_tractLength>:
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
}
void tVoc_set_tractLength(tVoc* const voc, int newLength)
{
	_tVoc* v = *voc;
	tract_newLength(&v->tr, newLength);
 80163e0:	6800      	ldr	r0, [r0, #0]
 80163e2:	3008      	adds	r0, #8
 80163e4:	f7ff b8f2 	b.w	80155cc <tract_newLength>

080163e8 <tVoc_set_tenseness>:
}

void tVoc_set_tenseness(tVoc* const voc, Lfloat tenseness)
{
	_tVoc* v = *voc;
	v->glot->tenseness = tenseness;
 80163e8:	6803      	ldr	r3, [r0, #0]
 80163ea:	685b      	ldr	r3, [r3, #4]
 80163ec:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80163f0:	4770      	bx	lr
 80163f2:	bf00      	nop

080163f4 <tVoc_set_velum>:
	return &v->glot->tenseness;
}
void tVoc_set_velum(tVoc* const voc, Lfloat velum)
{
	_tVoc* v = *voc;
	v->tr->velum_target = velum;
 80163f4:	6803      	ldr	r3, [r0, #0]
 80163f6:	689b      	ldr	r3, [r3, #8]
 80163f8:	ed83 0a26 	vstr	s0, [r3, #152]	; 0x98
}
 80163fc:	4770      	bx	lr
 80163fe:	bf00      	nop

08016400 <tVoc_setTurbulenceNoiseGain>:

void tVoc_setTurbulenceNoiseGain(tVoc* const voc, Lfloat gain)
{
	_tVoc* v = *voc;
	v->tr->TnoiseGain = gain;
 8016400:	6803      	ldr	r3, [r0, #0]
 8016402:	689b      	ldr	r3, [r3, #8]
 8016404:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
}
 8016408:	4770      	bx	lr
 801640a:	bf00      	nop

0801640c <tVoc_setAspirationNoiseGain>:

void tVoc_setAspirationNoiseGain(tVoc* const voc, Lfloat gain)
{
	_tVoc* v = *voc;
	v->tr->AnoiseGain = gain;
 801640c:	6803      	ldr	r3, [r0, #0]
 801640e:	689b      	ldr	r3, [r3, #8]
 8016410:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 8016414:	4770      	bx	lr
 8016416:	bf00      	nop

08016418 <tVoc_setAspirationNoiseFilterFreq>:

//0-1
void tVoc_setAspirationNoiseFilterFreq(tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
	tSVF_setFreqFast(&v->tr->aspirationNoiseFilt,freq*30.0f + 60.0f);
 8016418:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 801641c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8016434 <tVoc_setAspirationNoiseFilterFreq+0x1c>
 8016420:	6803      	ldr	r3, [r0, #0]
 8016422:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016426:	6898      	ldr	r0, [r3, #8]
 8016428:	30c8      	adds	r0, #200	; 0xc8
 801642a:	eeb0 0a67 	vmov.f32	s0, s15
 801642e:	f7f8 bec3 	b.w	800f1b8 <tSVF_setFreqFast>
 8016432:	bf00      	nop
 8016434:	42700000 	.word	0x42700000

08016438 <tVoc_setAspirationNoiseFilterQ>:
}

void tVoc_setAspirationNoiseFilterQ(tVoc* const voc, Lfloat Q)
{
	_tVoc* v = *voc;
	tSVF_setQ(&v->tr->aspirationNoiseFilt,Q*0.49f + 0.5f);
 8016438:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801643c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8016454 <tVoc_setAspirationNoiseFilterQ+0x1c>
 8016440:	6803      	ldr	r3, [r0, #0]
 8016442:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016446:	6898      	ldr	r0, [r3, #8]
 8016448:	30c8      	adds	r0, #200	; 0xc8
 801644a:	eeb0 0a67 	vmov.f32	s0, s15
 801644e:	f7f8 bef3 	b.w	800f238 <tSVF_setQ>
 8016452:	bf00      	nop
 8016454:	3efae148 	.word	0x3efae148

08016458 <tVoc_set_tongue_and_touch_diameters>:
}


//diameter and index are 0-1.0f
void tVoc_set_tongue_and_touch_diameters(tVoc* const voc, Lfloat tongue_index, Lfloat tongue_diameter, Lfloat touch_index, Lfloat touch_diameter, Lfloat *theDiameters)
{
 8016458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801645a:	ed2d 8b0a 	vpush	{d8-d12}
	int i;

	_tVoc* v = *voc;
 801645e:	6805      	ldr	r5, [r0, #0]

	Lfloat t;
	Lfloat curve;
	//do tongue position
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8016460:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
{
 8016464:	eef0 8a40 	vmov.f32	s17, s0
 8016468:	460e      	mov	r6, r1
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 801646a:	68ab      	ldr	r3, [r5, #8]
{
 801646c:	eeb0 ba41 	vmov.f32	s22, s2
 8016470:	eef0 ba61 	vmov.f32	s23, s3
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8016474:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 8016476:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016478:	1b12      	subs	r2, r2, r4
 801647a:	ee07 2a90 	vmov	s15, r2

	for (i = 0; i < v->tr->n; i++)
 801647e:	685a      	ldr	r2, [r3, #4]
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8016480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	for (i = 0; i < v->tr->n; i++)
 8016484:	2a00      	cmp	r2, #0
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8016486:	ee87 9a27 	vdiv.f32	s18, s14, s15
	for (i = 0; i < v->tr->n; i++)
 801648a:	dd0c      	ble.n	80164a6 <tVoc_set_tongue_and_touch_diameters+0x4e>
 801648c:	2200      	movs	r2, #0
	{
		theDiameters[i] = v->tr->rest_diameter[i];
 801648e:	699b      	ldr	r3, [r3, #24]
 8016490:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (i = 0; i < v->tr->n; i++)
 8016494:	3201      	adds	r2, #1
		theDiameters[i] = v->tr->rest_diameter[i];
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	f841 3b04 	str.w	r3, [r1], #4
	for (i = 0; i < v->tr->n; i++)
 801649c:	68ab      	ldr	r3, [r5, #8]
 801649e:	6858      	ldr	r0, [r3, #4]
 80164a0:	4290      	cmp	r0, r2
 80164a2:	dcf4      	bgt.n	801648e <tVoc_set_tongue_and_touch_diameters+0x36>
	}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 80164a4:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80164a6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80164a8:	42a2      	cmp	r2, r4
 80164aa:	dd4c      	ble.n	8016546 <tVoc_set_tongue_and_touch_diameters+0xee>
	{
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
		Lfloat fixedTongueDiameter = 2.0f + ((tongue_diameter - 2.0f) * 0.66666666666667f);
 80164ac:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80164b0:	eddf 6a81 	vldr	s13, [pc, #516]	; 80166b8 <tVoc_set_tongue_and_touch_diameters+0x260>
#ifdef ARM_MATH_CM7
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 80164b4:	eeb7 8a08 	vmov.f32	s16, #120	; 0x3fc00000  1.5
 80164b8:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80166bc <tVoc_set_tongue_and_touch_diameters+0x264>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
 80164bc:	eeb7 9ac9 	vcvt.f64.f32	d9, s18
 80164c0:	eb06 0784 	add.w	r7, r6, r4, lsl #2
		Lfloat fixedTongueDiameter = 2.0f + ((tongue_diameter - 2.0f) * 0.66666666666667f);
 80164c4:	ee70 0ae7 	vsub.f32	s1, s1, s15
#else
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
#endif
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
		{
			curve *= 0.8f;
 80164c8:	eddf ca7d 	vldr	s25, [pc, #500]	; 80166c0 <tVoc_set_tongue_and_touch_diameters+0x268>
		}
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
		{
			curve *= 0.94f;
 80164cc:	ed9f ca7d 	vldr	s24, [pc, #500]	; 80166c4 <tVoc_set_tongue_and_touch_diameters+0x26c>
		Lfloat fixedTongueDiameter = 2.0f + ((tongue_diameter - 2.0f) * 0.66666666666667f);
 80164d0:	eee0 7aa6 	vfma.f32	s15, s1, s13
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
 80164d4:	ed9f ab74 	vldr	d10, [pc, #464]	; 80166a8 <tVoc_set_tongue_and_touch_diameters+0x250>
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 80164d8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80164dc:	ee38 8a07 	vadd.f32	s16, s16, s14
 80164e0:	e00c      	b.n	80164fc <tVoc_set_tongue_and_touch_diameters+0xa4>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 80164e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80164e4:	3b02      	subs	r3, #2
 80164e6:	42a3      	cmp	r3, r4
 80164e8:	d027      	beq.n	801653a <tVoc_set_tongue_and_touch_diameters+0xe2>
		}
		theDiameters[i] = 1.5f - curve;
 80164ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 80164ee:	3401      	adds	r4, #1
		theDiameters[i] = 1.5f - curve;
 80164f0:	ece7 7a01 	vstmia	r7!, {s15}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 80164f4:	68ab      	ldr	r3, [r5, #8]
 80164f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80164f8:	42a2      	cmp	r2, r4
 80164fa:	dd24      	ble.n	8016546 <tVoc_set_tongue_and_touch_diameters+0xee>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
 80164fc:	ee07 4a90 	vmov	s15, r4
 8016500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016504:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8016508:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801650c:	ee27 7b0a 	vmul.f64	d7, d7, d10
 8016510:	ee27 7b09 	vmul.f64	d7, d7, d9
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 8016514:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 8016518:	f7ea f806 	bl	8000528 <arm_cos_f32>
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 801651c:	68ab      	ldr	r3, [r5, #8]
		theDiameters[i] = 1.5f - curve;
 801651e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 8016522:	6d5a      	ldr	r2, [r3, #84]	; 0x54
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 8016524:	ee28 0a00 	vmul.f32	s0, s16, s0
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 8016528:	1e91      	subs	r1, r2, #2
 801652a:	42a1      	cmp	r1, r4
 801652c:	d008      	beq.n	8016540 <tVoc_set_tongue_and_touch_diameters+0xe8>
 801652e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8016530:	3901      	subs	r1, #1
 8016532:	42a1      	cmp	r1, r4
 8016534:	d004      	beq.n	8016540 <tVoc_set_tongue_and_touch_diameters+0xe8>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 8016536:	42a2      	cmp	r2, r4
 8016538:	d1d3      	bne.n	80164e2 <tVoc_set_tongue_and_touch_diameters+0x8a>
			curve *= 0.94f;
 801653a:	ee20 0a0c 	vmul.f32	s0, s0, s24
 801653e:	e7d4      	b.n	80164ea <tVoc_set_tongue_and_touch_diameters+0x92>
			curve *= 0.8f;
 8016540:	ee20 0a2c 	vmul.f32	s0, s0, s25
 8016544:	e7f7      	b.n	8016536 <tVoc_set_tongue_and_touch_diameters+0xde>

	Lfloat invWidth = 1.0f / width;
	*/

	Lfloat width=2.0f;
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
 8016546:	edd3 7a01 	vldr	s15, [r3, #4]
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
		Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
 801654a:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80166c8 <tVoc_set_tongue_and_touch_diameters+0x270>
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
 801654e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016552:	ed9f 9a5e 	vldr	s18, [pc, #376]	; 80166cc <tVoc_set_tongue_and_touch_diameters+0x274>
		Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
 8016556:	ee27 7a87 	vmul.f32	s14, s15, s14
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
 801655a:	ee27 9a89 	vmul.f32	s18, s15, s18
		if (touch_index< (twentyfivewidth)) width = tenwidth; //25 in original code
 801655e:	eeb4 7acb 	vcmpe.f32	s14, s22
 8016562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016566:	dc0e      	bgt.n	8016586 <tVoc_set_tongue_and_touch_diameters+0x12e>
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8016568:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
 801656c:	ed9f 6a58 	vldr	s12, [pc, #352]	; 80166d0 <tVoc_set_tongue_and_touch_diameters+0x278>
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8016570:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
 8016574:	ee27 6a86 	vmul.f32	s12, s15, s12
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8016578:	eef4 6acb 	vcmpe.f32	s13, s22
 801657c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016580:	d871      	bhi.n	8016666 <tVoc_set_tongue_and_touch_diameters+0x20e>
 8016582:	eeb0 9a46 	vmov.f32	s18, s12
		else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
		Lfloat invWidth = 1.0f / width;
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
 8016586:	eef4 7acb 	vcmpe.f32	s15, s22
 801658a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801658e:	dd67      	ble.n	8016660 <tVoc_set_tongue_and_touch_diameters+0x208>
 8016590:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8016594:	eef4 bae7 	vcmpe.f32	s23, s15
 8016598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801659c:	d560      	bpl.n	8016660 <tVoc_set_tongue_and_touch_diameters+0x208>
	{
		int intIndex = roundf(touch_index);
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 801659e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80165a2:	fefa 7a49 	vrintp.f32	s15, s18
 80165a6:	eef1 7a67 	vneg.f32	s15, s15
		int intIndex = roundf(touch_index);
 80165aa:	feb8 7a4b 	vrinta.f32	s14, s22
 80165ae:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 80165b2:	ee79 9a26 	vadd.f32	s19, s18, s13
 80165b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
		int intIndex = roundf(touch_index);
 80165ba:	ee17 7a10 	vmov	r7, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 80165be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80165c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80165c6:	eef4 9ac7 	vcmpe.f32	s19, s14
 80165ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ce:	dd47      	ble.n	8016660 <tVoc_set_tongue_and_touch_diameters+0x208>
		Lfloat invWidth = 1.0f / width;
 80165d0:	ee86 ca89 	vdiv.f32	s24, s13, s18
 80165d4:	ee17 4a90 	vmov	r4, s15
		{
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
			Lfloat relpos = (intIndex+i) - touch_index;
			relpos = fabsf(relpos)-0.5f;
			Lfloat shrink;
			if (relpos <= 0.0f) shrink = 0.0f;
 80165d8:	eddf aa3e 	vldr	s21, [pc, #248]	; 80166d4 <tVoc_set_tongue_and_touch_diameters+0x27c>
 80165dc:	443c      	add	r4, r7
 80165de:	f1c7 0701 	rsb	r7, r7, #1
 80165e2:	eb06 0684 	add.w	r6, r6, r4, lsl #2
			relpos = fabsf(relpos)-0.5f;
 80165e6:	eeb6 aa00 	vmov.f32	s20, #96	; 0x3f000000  0.5
			else if (relpos > width) shrink = 1.0f;
#ifdef ARM_MATH_CM7
			else shrink = 0.5f*(1.0f-arm_cos_f32(M_PI * relpos * invWidth));
 80165ea:	ed9f 8b31 	vldr	d8, [pc, #196]	; 80166b0 <tVoc_set_tongue_and_touch_diameters+0x258>
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 80165ee:	2c00      	cmp	r4, #0
 80165f0:	db2a      	blt.n	8016648 <tVoc_set_tongue_and_touch_diameters+0x1f0>
 80165f2:	68ab      	ldr	r3, [r5, #8]
 80165f4:	685b      	ldr	r3, [r3, #4]
 80165f6:	429c      	cmp	r4, r3
 80165f8:	da26      	bge.n	8016648 <tVoc_set_tongue_and_touch_diameters+0x1f0>
			Lfloat relpos = (intIndex+i) - touch_index;
 80165fa:	ee07 4a90 	vmov	s15, r4
			if (relpos <= 0.0f) shrink = 0.0f;
 80165fe:	eeb0 7a6a 	vmov.f32	s14, s21
			Lfloat relpos = (intIndex+i) - touch_index;
 8016602:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8016606:	ee30 0a4b 	vsub.f32	s0, s0, s22
			relpos = fabsf(relpos)-0.5f;
 801660a:	eeb0 0ac0 	vabs.f32	s0, s0
 801660e:	ee30 0a4a 	vsub.f32	s0, s0, s20
			if (relpos <= 0.0f) shrink = 0.0f;
 8016612:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801661a:	d906      	bls.n	801662a <tVoc_set_tongue_and_touch_diameters+0x1d2>
			else if (relpos > width) shrink = 1.0f;
 801661c:	eeb4 9ac0 	vcmpe.f32	s18, s0
 8016620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016628:	d528      	bpl.n	801667c <tVoc_set_tongue_and_touch_diameters+0x224>
#else
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
#endif
			if (touch_diameter < theDiameters[intIndex+i])
 801662a:	edd6 7a00 	vldr	s15, [r6]
 801662e:	eef4 7aeb 	vcmpe.f32	s15, s23
 8016632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016636:	dd07      	ble.n	8016648 <tVoc_set_tongue_and_touch_diameters+0x1f0>
			{
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 8016638:	ee77 7aeb 	vsub.f32	s15, s15, s23
 801663c:	eef0 6a6b 	vmov.f32	s13, s23
 8016640:	eee7 6a87 	vfma.f32	s13, s15, s14
 8016644:	edc6 6a00 	vstr	s13, [r6]
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8016648:	193b      	adds	r3, r7, r4
 801664a:	3604      	adds	r6, #4
 801664c:	3401      	adds	r4, #1
 801664e:	ee07 3a90 	vmov	s15, r3
 8016652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016656:	eef4 7ae9 	vcmpe.f32	s15, s19
 801665a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801665e:	d4c6      	bmi.n	80165ee <tVoc_set_tongue_and_touch_diameters+0x196>
			}
		}
	}

}
 8016660:	ecbd 8b0a 	vpop	{d8-d12}
 8016664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
 8016666:	ee7b 5a47 	vsub.f32	s11, s22, s14
 801666a:	ee76 6ac7 	vsub.f32	s13, s13, s14
 801666e:	ee25 7a86 	vmul.f32	s14, s11, s12
 8016672:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8016676:	ee39 9a46 	vsub.f32	s18, s18, s12
 801667a:	e784      	b.n	8016586 <tVoc_set_tongue_and_touch_diameters+0x12e>
			else shrink = 0.5f*(1.0f-arm_cos_f32(M_PI * relpos * invWidth));
 801667c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8016680:	eeb7 7acc 	vcvt.f64.f32	d7, s24
 8016684:	ee20 0b08 	vmul.f64	d0, d0, d8
 8016688:	ee20 0b07 	vmul.f64	d0, d0, d7
 801668c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016690:	f7e9 ff4a 	bl	8000528 <arm_cos_f32>
 8016694:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016698:	ee37 7a40 	vsub.f32	s14, s14, s0
 801669c:	ee27 7a0a 	vmul.f32	s14, s14, s20
 80166a0:	e7c3      	b.n	801662a <tVoc_set_tongue_and_touch_diameters+0x1d2>
 80166a2:	bf00      	nop
 80166a4:	f3af 8000 	nop.w
 80166a8:	4d2562ef 	.word	0x4d2562ef
 80166ac:	400ba561 	.word	0x400ba561
 80166b0:	54442d18 	.word	0x54442d18
 80166b4:	400921fb 	.word	0x400921fb
 80166b8:	3f2aaaab 	.word	0x3f2aaaab
 80166bc:	3fd9999a 	.word	0x3fd9999a
 80166c0:	3f4ccccd 	.word	0x3f4ccccd
 80166c4:	3f70a3d7 	.word	0x3f70a3d7
 80166c8:	3f11745d 	.word	0x3f11745d
 80166cc:	3e68ba2f 	.word	0x3e68ba2f
 80166d0:	3de8ba2f 	.word	0x3de8ba2f
 80166d4:	00000000 	.word	0x00000000

080166d8 <tVoc_set_tongue_shape_and_touch>:
{
 80166d8:	b500      	push	{lr}
 80166da:	ed2d 8b04 	vpush	{d8-d9}
	_tVoc* v = *voc;
 80166de:	6802      	ldr	r2, [r0, #0]
	if (touch_diameter<0.0f) touch_diameter = 0.0f;
 80166e0:	eef5 1ac0 	vcmpe.f32	s3, #0.0
	tongue_diameter += 2.05f;
 80166e4:	eddf 7a22 	vldr	s15, [pc, #136]	; 8016770 <tVoc_set_tongue_shape_and_touch+0x98>
{
 80166e8:	b083      	sub	sp, #12
	return v->tr->target_diameter;
 80166ea:	6893      	ldr	r3, [r2, #8]
	tongue_diameter += 2.05f;
 80166ec:	eddf 9a21 	vldr	s19, [pc, #132]	; 8016774 <tVoc_set_tongue_shape_and_touch+0x9c>
	if (touch_diameter<0.0f) touch_diameter = 0.0f;
 80166f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 80166f4:	edd3 8a18 	vldr	s17, [r3, #96]	; 0x60
	tongue_diameter += 2.05f;
 80166f8:	eee0 9aa7 	vfma.f32	s19, s1, s15
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 80166fc:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
	return v->tr->target_diameter;
 8016700:	69d9      	ldr	r1, [r3, #28]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 8016702:	ee77 7ae8 	vsub.f32	s15, s15, s17
	_tVoc* v = *voc;
 8016706:	9201      	str	r2, [sp, #4]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 8016708:	eee7 8a80 	vfma.f32	s17, s15, s0
	if (touch_diameter<0.0f) touch_diameter = 0.0f;
 801670c:	d42c      	bmi.n	8016768 <tVoc_set_tongue_shape_and_touch+0x90>
	touch_diameter *= 1.6f;
 801670e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8016778 <tVoc_set_tongue_shape_and_touch+0xa0>
 8016712:	ee21 8aa7 	vmul.f32	s16, s3, s15
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8016716:	edd3 7a01 	vldr	s15, [r3, #4]
 801671a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801671e:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8016722:	a801      	add	r0, sp, #4
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8016724:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8016728:	eef0 1a48 	vmov.f32	s3, s16
 801672c:	eef0 0a69 	vmov.f32	s1, s19
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8016730:	ee77 7ac7 	vsub.f32	s15, s15, s14
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8016734:	eeb0 0a68 	vmov.f32	s0, s17
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8016738:	eea7 9a81 	vfma.f32	s18, s15, s2
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 801673c:	eeb0 1a49 	vmov.f32	s2, s18
 8016740:	f7ff fe8a 	bl	8016458 <tVoc_set_tongue_and_touch_diameters>
	v->tr->turbuluencePointPosition[0] = tongue_index;
 8016744:	9b01      	ldr	r3, [sp, #4]
 8016746:	689a      	ldr	r2, [r3, #8]
 8016748:	edc2 8a34 	vstr	s17, [r2, #208]	; 0xd0
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
 801674c:	689a      	ldr	r2, [r3, #8]
 801674e:	edc2 9a36 	vstr	s19, [r2, #216]	; 0xd8
	v->tr->turbuluencePointPosition[1] = touch_index;
 8016752:	689a      	ldr	r2, [r3, #8]
 8016754:	ed82 9a35 	vstr	s18, [r2, #212]	; 0xd4
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
 8016758:	689b      	ldr	r3, [r3, #8]
 801675a:	ed83 8a37 	vstr	s16, [r3, #220]	; 0xdc
}
 801675e:	b003      	add	sp, #12
 8016760:	ecbd 8b04 	vpop	{d8-d9}
 8016764:	f85d fb04 	ldr.w	pc, [sp], #4
 8016768:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801677c <tVoc_set_tongue_shape_and_touch+0xa4>
 801676c:	e7d3      	b.n	8016716 <tVoc_set_tongue_shape_and_touch+0x3e>
 801676e:	bf00      	nop
 8016770:	3fb9999a 	.word	0x3fb9999a
 8016774:	40033333 	.word	0x40033333
 8016778:	3fcccccd 	.word	0x3fcccccd
 801677c:	00000000 	.word	0x00000000

08016780 <tVoc_rescaleDiameter>:
}

void tVoc_rescaleDiameter(tVoc* const voc, Lfloat scale)
{
	_tVoc* v = *voc;
	v->tr->diameterScale = scale;
 8016780:	6803      	ldr	r3, [r0, #0]
 8016782:	689b      	ldr	r3, [r3, #8]
 8016784:	ed83 0a2f 	vstr	s0, [r3, #188]	; 0xbc
}
 8016788:	4770      	bx	lr
 801678a:	bf00      	nop

0801678c <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 801678c:	4770      	bx	lr
 801678e:	bf00      	nop

08016790 <LEAF_init>:
{
 8016790:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 8016792:	6200      	str	r0, [r0, #32]
{
 8016794:	4604      	mov	r4, r0
 8016796:	461d      	mov	r5, r3
 8016798:	ed2d 8b02 	vpush	{d8}
 801679c:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 80167a0:	f7fb fc12 	bl	8011fc8 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 80167a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 80167a8:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80167dc <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 80167ac:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 80167ae:	4b0c      	ldr	r3, [pc, #48]	; (80167e0 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 80167b0:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 80167b4:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 80167b8:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 80167ba:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 80167bc:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 80167c0:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 80167c4:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 80167c8:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 80167cc:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 80167d0:	edc4 7a03 	vstr	s15, [r4, #12]
}
 80167d4:	ecbd 8b02 	vpop	{d8}
 80167d8:	bd38      	pop	{r3, r4, r5, pc}
 80167da:	bf00      	nop
 80167dc:	40c90fdb 	.word	0x40c90fdb
 80167e0:	0801678d 	.word	0x0801678d

080167e4 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 80167e4:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 80167e6:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 80167ea:	2401      	movs	r4, #1
 80167ec:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 80167ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 80167f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80167f4:	4718      	bx	r3
 80167f6:	bf00      	nop

080167f8 <__itoa>:
 80167f8:	1e93      	subs	r3, r2, #2
 80167fa:	2b22      	cmp	r3, #34	; 0x22
 80167fc:	b510      	push	{r4, lr}
 80167fe:	460c      	mov	r4, r1
 8016800:	d904      	bls.n	801680c <__itoa+0x14>
 8016802:	2300      	movs	r3, #0
 8016804:	700b      	strb	r3, [r1, #0]
 8016806:	461c      	mov	r4, r3
 8016808:	4620      	mov	r0, r4
 801680a:	bd10      	pop	{r4, pc}
 801680c:	2a0a      	cmp	r2, #10
 801680e:	d109      	bne.n	8016824 <__itoa+0x2c>
 8016810:	2800      	cmp	r0, #0
 8016812:	da07      	bge.n	8016824 <__itoa+0x2c>
 8016814:	232d      	movs	r3, #45	; 0x2d
 8016816:	700b      	strb	r3, [r1, #0]
 8016818:	4240      	negs	r0, r0
 801681a:	2101      	movs	r1, #1
 801681c:	4421      	add	r1, r4
 801681e:	f000 f805 	bl	801682c <__utoa>
 8016822:	e7f1      	b.n	8016808 <__itoa+0x10>
 8016824:	2100      	movs	r1, #0
 8016826:	e7f9      	b.n	801681c <__itoa+0x24>

08016828 <itoa>:
 8016828:	f7ff bfe6 	b.w	80167f8 <__itoa>

0801682c <__utoa>:
 801682c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801682e:	4c1f      	ldr	r4, [pc, #124]	; (80168ac <__utoa+0x80>)
 8016830:	b08b      	sub	sp, #44	; 0x2c
 8016832:	4605      	mov	r5, r0
 8016834:	460b      	mov	r3, r1
 8016836:	466e      	mov	r6, sp
 8016838:	f104 0c20 	add.w	ip, r4, #32
 801683c:	6820      	ldr	r0, [r4, #0]
 801683e:	6861      	ldr	r1, [r4, #4]
 8016840:	4637      	mov	r7, r6
 8016842:	c703      	stmia	r7!, {r0, r1}
 8016844:	3408      	adds	r4, #8
 8016846:	4564      	cmp	r4, ip
 8016848:	463e      	mov	r6, r7
 801684a:	d1f7      	bne.n	801683c <__utoa+0x10>
 801684c:	7921      	ldrb	r1, [r4, #4]
 801684e:	7139      	strb	r1, [r7, #4]
 8016850:	1e91      	subs	r1, r2, #2
 8016852:	6820      	ldr	r0, [r4, #0]
 8016854:	6038      	str	r0, [r7, #0]
 8016856:	2922      	cmp	r1, #34	; 0x22
 8016858:	f04f 0100 	mov.w	r1, #0
 801685c:	d904      	bls.n	8016868 <__utoa+0x3c>
 801685e:	7019      	strb	r1, [r3, #0]
 8016860:	460b      	mov	r3, r1
 8016862:	4618      	mov	r0, r3
 8016864:	b00b      	add	sp, #44	; 0x2c
 8016866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016868:	1e58      	subs	r0, r3, #1
 801686a:	4684      	mov	ip, r0
 801686c:	fbb5 f7f2 	udiv	r7, r5, r2
 8016870:	fb02 5617 	mls	r6, r2, r7, r5
 8016874:	3628      	adds	r6, #40	; 0x28
 8016876:	446e      	add	r6, sp
 8016878:	460c      	mov	r4, r1
 801687a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801687e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8016882:	462e      	mov	r6, r5
 8016884:	42b2      	cmp	r2, r6
 8016886:	f101 0101 	add.w	r1, r1, #1
 801688a:	463d      	mov	r5, r7
 801688c:	d9ee      	bls.n	801686c <__utoa+0x40>
 801688e:	2200      	movs	r2, #0
 8016890:	545a      	strb	r2, [r3, r1]
 8016892:	1919      	adds	r1, r3, r4
 8016894:	1aa5      	subs	r5, r4, r2
 8016896:	42aa      	cmp	r2, r5
 8016898:	dae3      	bge.n	8016862 <__utoa+0x36>
 801689a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801689e:	780e      	ldrb	r6, [r1, #0]
 80168a0:	7006      	strb	r6, [r0, #0]
 80168a2:	3201      	adds	r2, #1
 80168a4:	f801 5901 	strb.w	r5, [r1], #-1
 80168a8:	e7f4      	b.n	8016894 <__utoa+0x68>
 80168aa:	bf00      	nop
 80168ac:	08023d88 	.word	0x08023d88

080168b0 <memset>:
 80168b0:	4402      	add	r2, r0
 80168b2:	4603      	mov	r3, r0
 80168b4:	4293      	cmp	r3, r2
 80168b6:	d100      	bne.n	80168ba <memset+0xa>
 80168b8:	4770      	bx	lr
 80168ba:	f803 1b01 	strb.w	r1, [r3], #1
 80168be:	e7f9      	b.n	80168b4 <memset+0x4>

080168c0 <__libc_init_array>:
 80168c0:	b570      	push	{r4, r5, r6, lr}
 80168c2:	4d0d      	ldr	r5, [pc, #52]	; (80168f8 <__libc_init_array+0x38>)
 80168c4:	4c0d      	ldr	r4, [pc, #52]	; (80168fc <__libc_init_array+0x3c>)
 80168c6:	1b64      	subs	r4, r4, r5
 80168c8:	10a4      	asrs	r4, r4, #2
 80168ca:	2600      	movs	r6, #0
 80168cc:	42a6      	cmp	r6, r4
 80168ce:	d109      	bne.n	80168e4 <__libc_init_array+0x24>
 80168d0:	4d0b      	ldr	r5, [pc, #44]	; (8016900 <__libc_init_array+0x40>)
 80168d2:	4c0c      	ldr	r4, [pc, #48]	; (8016904 <__libc_init_array+0x44>)
 80168d4:	f002 fa24 	bl	8018d20 <_init>
 80168d8:	1b64      	subs	r4, r4, r5
 80168da:	10a4      	asrs	r4, r4, #2
 80168dc:	2600      	movs	r6, #0
 80168de:	42a6      	cmp	r6, r4
 80168e0:	d105      	bne.n	80168ee <__libc_init_array+0x2e>
 80168e2:	bd70      	pop	{r4, r5, r6, pc}
 80168e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80168e8:	4798      	blx	r3
 80168ea:	3601      	adds	r6, #1
 80168ec:	e7ee      	b.n	80168cc <__libc_init_array+0xc>
 80168ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80168f2:	4798      	blx	r3
 80168f4:	3601      	adds	r6, #1
 80168f6:	e7f2      	b.n	80168de <__libc_init_array+0x1e>
 80168f8:	08025078 	.word	0x08025078
 80168fc:	08025078 	.word	0x08025078
 8016900:	08025078 	.word	0x08025078
 8016904:	0802507c 	.word	0x0802507c

08016908 <memcpy>:
 8016908:	440a      	add	r2, r1
 801690a:	4291      	cmp	r1, r2
 801690c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016910:	d100      	bne.n	8016914 <memcpy+0xc>
 8016912:	4770      	bx	lr
 8016914:	b510      	push	{r4, lr}
 8016916:	f811 4b01 	ldrb.w	r4, [r1], #1
 801691a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801691e:	4291      	cmp	r1, r2
 8016920:	d1f9      	bne.n	8016916 <memcpy+0xe>
 8016922:	bd10      	pop	{r4, pc}

08016924 <frexpf>:
 8016924:	ee10 3a10 	vmov	r3, s0
 8016928:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801692c:	2100      	movs	r1, #0
 801692e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016932:	6001      	str	r1, [r0, #0]
 8016934:	da19      	bge.n	801696a <frexpf+0x46>
 8016936:	b1c2      	cbz	r2, 801696a <frexpf+0x46>
 8016938:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801693c:	d10a      	bne.n	8016954 <frexpf+0x30>
 801693e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801696c <frexpf+0x48>
 8016942:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016946:	f06f 0118 	mvn.w	r1, #24
 801694a:	ee17 3a90 	vmov	r3, s15
 801694e:	6001      	str	r1, [r0, #0]
 8016950:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016954:	6801      	ldr	r1, [r0, #0]
 8016956:	15d2      	asrs	r2, r2, #23
 8016958:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801695c:	3a7e      	subs	r2, #126	; 0x7e
 801695e:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8016962:	4411      	add	r1, r2
 8016964:	ee00 3a10 	vmov	s0, r3
 8016968:	6001      	str	r1, [r0, #0]
 801696a:	4770      	bx	lr
 801696c:	4c000000 	.word	0x4c000000

08016970 <expf>:
 8016970:	ee10 2a10 	vmov	r2, s0
 8016974:	f240 412a 	movw	r1, #1066	; 0x42a
 8016978:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801697c:	428b      	cmp	r3, r1
 801697e:	b430      	push	{r4, r5}
 8016980:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8016984:	d92a      	bls.n	80169dc <expf+0x6c>
 8016986:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801698a:	d058      	beq.n	8016a3e <expf+0xce>
 801698c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8016990:	d303      	bcc.n	801699a <expf+0x2a>
 8016992:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016996:	bc30      	pop	{r4, r5}
 8016998:	4770      	bx	lr
 801699a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8016a44 <expf+0xd4>
 801699e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80169a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169a6:	dd03      	ble.n	80169b0 <expf+0x40>
 80169a8:	bc30      	pop	{r4, r5}
 80169aa:	2000      	movs	r0, #0
 80169ac:	f000 bbd6 	b.w	801715c <__math_oflowf>
 80169b0:	eddf 7a25 	vldr	s15, [pc, #148]	; 8016a48 <expf+0xd8>
 80169b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80169b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169bc:	d503      	bpl.n	80169c6 <expf+0x56>
 80169be:	bc30      	pop	{r4, r5}
 80169c0:	2000      	movs	r0, #0
 80169c2:	f000 bbbf 	b.w	8017144 <__math_uflowf>
 80169c6:	eddf 7a21 	vldr	s15, [pc, #132]	; 8016a4c <expf+0xdc>
 80169ca:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80169ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169d2:	d503      	bpl.n	80169dc <expf+0x6c>
 80169d4:	bc30      	pop	{r4, r5}
 80169d6:	2000      	movs	r0, #0
 80169d8:	f000 bbba 	b.w	8017150 <__math_may_uflowf>
 80169dc:	4b1c      	ldr	r3, [pc, #112]	; (8016a50 <expf+0xe0>)
 80169de:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80169e2:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 80169e6:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 80169ea:	eeb0 7b44 	vmov.f64	d7, d4
 80169ee:	eea5 7b06 	vfma.f64	d7, d5, d6
 80169f2:	ee17 0a10 	vmov	r0, s14
 80169f6:	ee37 7b44 	vsub.f64	d7, d7, d4
 80169fa:	f000 021f 	and.w	r2, r0, #31
 80169fe:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8016a02:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8016a06:	ee27 4b07 	vmul.f64	d4, d7, d7
 8016a0a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8016a0e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8016a12:	eea5 6b07 	vfma.f64	d6, d5, d7
 8016a16:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8016a1a:	684d      	ldr	r5, [r1, #4]
 8016a1c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8016a20:	2100      	movs	r1, #0
 8016a22:	190a      	adds	r2, r1, r4
 8016a24:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8016a28:	eea5 0b07 	vfma.f64	d0, d5, d7
 8016a2c:	ec43 2b17 	vmov	d7, r2, r3
 8016a30:	eea6 0b04 	vfma.f64	d0, d6, d4
 8016a34:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016a38:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016a3c:	e7ab      	b.n	8016996 <expf+0x26>
 8016a3e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8016a54 <expf+0xe4>
 8016a42:	e7a8      	b.n	8016996 <expf+0x26>
 8016a44:	42b17217 	.word	0x42b17217
 8016a48:	c2cff1b4 	.word	0xc2cff1b4
 8016a4c:	c2ce8ecf 	.word	0xc2ce8ecf
 8016a50:	08023db0 	.word	0x08023db0
 8016a54:	00000000 	.word	0x00000000

08016a58 <logf>:
 8016a58:	ee10 3a10 	vmov	r3, s0
 8016a5c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8016a60:	b410      	push	{r4}
 8016a62:	d055      	beq.n	8016b10 <logf+0xb8>
 8016a64:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8016a68:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8016a6c:	d31a      	bcc.n	8016aa4 <logf+0x4c>
 8016a6e:	005a      	lsls	r2, r3, #1
 8016a70:	d104      	bne.n	8016a7c <logf+0x24>
 8016a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a76:	2001      	movs	r0, #1
 8016a78:	f000 bb76 	b.w	8017168 <__math_divzerof>
 8016a7c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016a80:	d043      	beq.n	8016b0a <logf+0xb2>
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	db02      	blt.n	8016a8c <logf+0x34>
 8016a86:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8016a8a:	d303      	bcc.n	8016a94 <logf+0x3c>
 8016a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a90:	f000 bb7c 	b.w	801718c <__math_invalidf>
 8016a94:	eddf 7a20 	vldr	s15, [pc, #128]	; 8016b18 <logf+0xc0>
 8016a98:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016a9c:	ee10 3a10 	vmov	r3, s0
 8016aa0:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8016aa4:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8016aa8:	491c      	ldr	r1, [pc, #112]	; (8016b1c <logf+0xc4>)
 8016aaa:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8016aae:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8016ab2:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8016ab6:	0dd4      	lsrs	r4, r2, #23
 8016ab8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8016abc:	05e4      	lsls	r4, r4, #23
 8016abe:	ed90 6b00 	vldr	d6, [r0]
 8016ac2:	1b1b      	subs	r3, r3, r4
 8016ac4:	ee07 3a90 	vmov	s15, r3
 8016ac8:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8016acc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016ad0:	15d2      	asrs	r2, r2, #23
 8016ad2:	eea6 0b07 	vfma.f64	d0, d6, d7
 8016ad6:	ed90 6b02 	vldr	d6, [r0, #8]
 8016ada:	ee20 4b00 	vmul.f64	d4, d0, d0
 8016ade:	ee07 2a90 	vmov	s15, r2
 8016ae2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016ae6:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016aea:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8016aee:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8016af2:	eea5 7b00 	vfma.f64	d7, d5, d0
 8016af6:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8016afa:	ee30 0b06 	vadd.f64	d0, d0, d6
 8016afe:	eea5 7b04 	vfma.f64	d7, d5, d4
 8016b02:	eea4 0b07 	vfma.f64	d0, d4, d7
 8016b06:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b0e:	4770      	bx	lr
 8016b10:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8016b20 <logf+0xc8>
 8016b14:	e7f9      	b.n	8016b0a <logf+0xb2>
 8016b16:	bf00      	nop
 8016b18:	4b000000 	.word	0x4b000000
 8016b1c:	08023ef8 	.word	0x08023ef8
 8016b20:	00000000 	.word	0x00000000

08016b24 <log2f>:
 8016b24:	ee10 2a10 	vmov	r2, s0
 8016b28:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8016b2c:	b410      	push	{r4}
 8016b2e:	d055      	beq.n	8016bdc <log2f+0xb8>
 8016b30:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 8016b34:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8016b38:	d31a      	bcc.n	8016b70 <log2f+0x4c>
 8016b3a:	0053      	lsls	r3, r2, #1
 8016b3c:	d104      	bne.n	8016b48 <log2f+0x24>
 8016b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b42:	2001      	movs	r0, #1
 8016b44:	f000 bb10 	b.w	8017168 <__math_divzerof>
 8016b48:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016b4c:	d043      	beq.n	8016bd6 <log2f+0xb2>
 8016b4e:	2a00      	cmp	r2, #0
 8016b50:	db02      	blt.n	8016b58 <log2f+0x34>
 8016b52:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8016b56:	d303      	bcc.n	8016b60 <log2f+0x3c>
 8016b58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b5c:	f000 bb16 	b.w	801718c <__math_invalidf>
 8016b60:	eddf 7a20 	vldr	s15, [pc, #128]	; 8016be4 <log2f+0xc0>
 8016b64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016b68:	ee10 3a10 	vmov	r3, s0
 8016b6c:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 8016b70:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 8016b74:	491c      	ldr	r1, [pc, #112]	; (8016be8 <log2f+0xc4>)
 8016b76:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8016b7a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8016b7e:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 8016b82:	0ddc      	lsrs	r4, r3, #23
 8016b84:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8016b88:	05e4      	lsls	r4, r4, #23
 8016b8a:	ed90 5b00 	vldr	d5, [r0]
 8016b8e:	1b12      	subs	r2, r2, r4
 8016b90:	ee07 2a90 	vmov	s15, r2
 8016b94:	15db      	asrs	r3, r3, #23
 8016b96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016b9a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8016b9e:	ed90 7b02 	vldr	d7, [r0, #8]
 8016ba2:	ee26 4b06 	vmul.f64	d4, d6, d6
 8016ba6:	ee00 3a10 	vmov	s0, r3
 8016baa:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8016bae:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8016bb2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016bb6:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 8016bba:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016bbe:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8016bc2:	eea5 7b04 	vfma.f64	d7, d5, d4
 8016bc6:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 8016bca:	eea5 0b06 	vfma.f64	d0, d5, d6
 8016bce:	eea4 0b07 	vfma.f64	d0, d4, d7
 8016bd2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bda:	4770      	bx	lr
 8016bdc:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8016bec <log2f+0xc8>
 8016be0:	e7f9      	b.n	8016bd6 <log2f+0xb2>
 8016be2:	bf00      	nop
 8016be4:	4b000000 	.word	0x4b000000
 8016be8:	08024888 	.word	0x08024888
 8016bec:	00000000 	.word	0x00000000

08016bf0 <exp>:
 8016bf0:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8016bf2:	ee10 3a90 	vmov	r3, s1
 8016bf6:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8016bfa:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8016bfe:	18a2      	adds	r2, r4, r2
 8016c00:	2a3e      	cmp	r2, #62	; 0x3e
 8016c02:	ee10 1a10 	vmov	r1, s0
 8016c06:	d922      	bls.n	8016c4e <exp+0x5e>
 8016c08:	2a00      	cmp	r2, #0
 8016c0a:	da06      	bge.n	8016c1a <exp+0x2a>
 8016c0c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8016c10:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016c14:	b004      	add	sp, #16
 8016c16:	bcf0      	pop	{r4, r5, r6, r7}
 8016c18:	4770      	bx	lr
 8016c1a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8016c1e:	f04f 0000 	mov.w	r0, #0
 8016c22:	d913      	bls.n	8016c4c <exp+0x5c>
 8016c24:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8016c28:	bf08      	it	eq
 8016c2a:	4281      	cmpeq	r1, r0
 8016c2c:	f000 80a0 	beq.w	8016d70 <exp+0x180>
 8016c30:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8016c34:	4294      	cmp	r4, r2
 8016c36:	d0e9      	beq.n	8016c0c <exp+0x1c>
 8016c38:	4283      	cmp	r3, r0
 8016c3a:	da03      	bge.n	8016c44 <exp+0x54>
 8016c3c:	b004      	add	sp, #16
 8016c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8016c40:	f000 b8c6 	b.w	8016dd0 <__math_uflow>
 8016c44:	b004      	add	sp, #16
 8016c46:	bcf0      	pop	{r4, r5, r6, r7}
 8016c48:	f000 b8ca 	b.w	8016de0 <__math_oflow>
 8016c4c:	4604      	mov	r4, r0
 8016c4e:	4950      	ldr	r1, [pc, #320]	; (8016d90 <exp+0x1a0>)
 8016c50:	ed91 6b02 	vldr	d6, [r1, #8]
 8016c54:	ed91 5b00 	vldr	d5, [r1]
 8016c58:	eeb0 7b46 	vmov.f64	d7, d6
 8016c5c:	eea5 7b00 	vfma.f64	d7, d5, d0
 8016c60:	ee17 5a10 	vmov	r5, s14
 8016c64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016c68:	ed91 6b04 	vldr	d6, [r1, #16]
 8016c6c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8016c70:	eea6 0b07 	vfma.f64	d0, d6, d7
 8016c74:	ed91 6b06 	vldr	d6, [r1, #24]
 8016c78:	18d8      	adds	r0, r3, r3
 8016c7a:	f100 030f 	add.w	r3, r0, #15
 8016c7e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8016c82:	eea6 0b07 	vfma.f64	d0, d6, d7
 8016c86:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8016c8a:	ee20 7b00 	vmul.f64	d7, d0, d0
 8016c8e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 8016c92:	ed91 4b08 	vldr	d4, [r1, #32]
 8016c96:	ee30 6b06 	vadd.f64	d6, d0, d6
 8016c9a:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8016c9e:	eea3 4b00 	vfma.f64	d4, d3, d0
 8016ca2:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8016ca6:	eea4 6b07 	vfma.f64	d6, d4, d7
 8016caa:	ee27 7b07 	vmul.f64	d7, d7, d7
 8016cae:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8016cb2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8016cb6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8016cba:	eea3 4b00 	vfma.f64	d4, d3, d0
 8016cbe:	2600      	movs	r6, #0
 8016cc0:	19f2      	adds	r2, r6, r7
 8016cc2:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 8016cc6:	eea7 6b04 	vfma.f64	d6, d7, d4
 8016cca:	2c00      	cmp	r4, #0
 8016ccc:	d14b      	bne.n	8016d66 <exp+0x176>
 8016cce:	42b5      	cmp	r5, r6
 8016cd0:	db10      	blt.n	8016cf4 <exp+0x104>
 8016cd2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8016cd6:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8016d78 <exp+0x188>
 8016cda:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8016cde:	4610      	mov	r0, r2
 8016ce0:	ec41 0b10 	vmov	d0, r0, r1
 8016ce4:	eea6 0b00 	vfma.f64	d0, d6, d0
 8016ce8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016cec:	b004      	add	sp, #16
 8016cee:	bcf0      	pop	{r4, r5, r6, r7}
 8016cf0:	f000 b88a 	b.w	8016e08 <__math_check_oflow>
 8016cf4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8016cf8:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8016cfc:	4610      	mov	r0, r2
 8016cfe:	ec41 0b17 	vmov	d7, r0, r1
 8016d02:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8016d06:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016d0a:	ee37 5b06 	vadd.f64	d5, d7, d6
 8016d0e:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8016d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d16:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8016d80 <exp+0x190>
 8016d1a:	d51e      	bpl.n	8016d5a <exp+0x16a>
 8016d1c:	ee35 3b04 	vadd.f64	d3, d5, d4
 8016d20:	ee37 7b45 	vsub.f64	d7, d7, d5
 8016d24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016d28:	ee34 6b43 	vsub.f64	d6, d4, d3
 8016d2c:	ee36 6b05 	vadd.f64	d6, d6, d5
 8016d30:	ee36 6b07 	vadd.f64	d6, d6, d7
 8016d34:	ee36 6b03 	vadd.f64	d6, d6, d3
 8016d38:	ee36 5b44 	vsub.f64	d5, d6, d4
 8016d3c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8016d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d44:	d101      	bne.n	8016d4a <exp+0x15a>
 8016d46:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8016d88 <exp+0x198>
 8016d4a:	ed8d 0b00 	vstr	d0, [sp]
 8016d4e:	ed9d 7b00 	vldr	d7, [sp]
 8016d52:	ee27 7b00 	vmul.f64	d7, d7, d0
 8016d56:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016d5a:	ee25 0b00 	vmul.f64	d0, d5, d0
 8016d5e:	b004      	add	sp, #16
 8016d60:	bcf0      	pop	{r4, r5, r6, r7}
 8016d62:	f000 b845 	b.w	8016df0 <__math_check_uflow>
 8016d66:	ec43 2b10 	vmov	d0, r2, r3
 8016d6a:	eea6 0b00 	vfma.f64	d0, d6, d0
 8016d6e:	e751      	b.n	8016c14 <exp+0x24>
 8016d70:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8016d88 <exp+0x198>
 8016d74:	e74e      	b.n	8016c14 <exp+0x24>
 8016d76:	bf00      	nop
 8016d78:	00000000 	.word	0x00000000
 8016d7c:	7f000000 	.word	0x7f000000
 8016d80:	00000000 	.word	0x00000000
 8016d84:	00100000 	.word	0x00100000
	...
 8016d90:	08024018 	.word	0x08024018

08016d94 <with_errno>:
 8016d94:	b513      	push	{r0, r1, r4, lr}
 8016d96:	4604      	mov	r4, r0
 8016d98:	ed8d 0b00 	vstr	d0, [sp]
 8016d9c:	f001 ffba 	bl	8018d14 <__errno>
 8016da0:	ed9d 0b00 	vldr	d0, [sp]
 8016da4:	6004      	str	r4, [r0, #0]
 8016da6:	b002      	add	sp, #8
 8016da8:	bd10      	pop	{r4, pc}

08016daa <xflow>:
 8016daa:	b082      	sub	sp, #8
 8016dac:	b158      	cbz	r0, 8016dc6 <xflow+0x1c>
 8016dae:	eeb1 7b40 	vneg.f64	d7, d0
 8016db2:	ed8d 7b00 	vstr	d7, [sp]
 8016db6:	ed9d 7b00 	vldr	d7, [sp]
 8016dba:	2022      	movs	r0, #34	; 0x22
 8016dbc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016dc0:	b002      	add	sp, #8
 8016dc2:	f7ff bfe7 	b.w	8016d94 <with_errno>
 8016dc6:	eeb0 7b40 	vmov.f64	d7, d0
 8016dca:	e7f2      	b.n	8016db2 <xflow+0x8>
 8016dcc:	0000      	movs	r0, r0
	...

08016dd0 <__math_uflow>:
 8016dd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016dd8 <__math_uflow+0x8>
 8016dd4:	f7ff bfe9 	b.w	8016daa <xflow>
 8016dd8:	00000000 	.word	0x00000000
 8016ddc:	10000000 	.word	0x10000000

08016de0 <__math_oflow>:
 8016de0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016de8 <__math_oflow+0x8>
 8016de4:	f7ff bfe1 	b.w	8016daa <xflow>
 8016de8:	00000000 	.word	0x00000000
 8016dec:	70000000 	.word	0x70000000

08016df0 <__math_check_uflow>:
 8016df0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016df8:	d102      	bne.n	8016e00 <__math_check_uflow+0x10>
 8016dfa:	2022      	movs	r0, #34	; 0x22
 8016dfc:	f7ff bfca 	b.w	8016d94 <with_errno>
 8016e00:	4770      	bx	lr
 8016e02:	0000      	movs	r0, r0
 8016e04:	0000      	movs	r0, r0
	...

08016e08 <__math_check_oflow>:
 8016e08:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8016e28 <__math_check_oflow+0x20>
 8016e0c:	eeb0 7bc0 	vabs.f64	d7, d0
 8016e10:	eeb4 7b46 	vcmp.f64	d7, d6
 8016e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e18:	dd02      	ble.n	8016e20 <__math_check_oflow+0x18>
 8016e1a:	2022      	movs	r0, #34	; 0x22
 8016e1c:	f7ff bfba 	b.w	8016d94 <with_errno>
 8016e20:	4770      	bx	lr
 8016e22:	bf00      	nop
 8016e24:	f3af 8000 	nop.w
 8016e28:	ffffffff 	.word	0xffffffff
 8016e2c:	7fefffff 	.word	0x7fefffff

08016e30 <checkint>:
 8016e30:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8016e34:	2b7e      	cmp	r3, #126	; 0x7e
 8016e36:	dd10      	ble.n	8016e5a <checkint+0x2a>
 8016e38:	2b96      	cmp	r3, #150	; 0x96
 8016e3a:	dc0c      	bgt.n	8016e56 <checkint+0x26>
 8016e3c:	2201      	movs	r2, #1
 8016e3e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8016e42:	fa02 f303 	lsl.w	r3, r2, r3
 8016e46:	1e5a      	subs	r2, r3, #1
 8016e48:	4202      	tst	r2, r0
 8016e4a:	d106      	bne.n	8016e5a <checkint+0x2a>
 8016e4c:	4203      	tst	r3, r0
 8016e4e:	bf0c      	ite	eq
 8016e50:	2002      	moveq	r0, #2
 8016e52:	2001      	movne	r0, #1
 8016e54:	4770      	bx	lr
 8016e56:	2002      	movs	r0, #2
 8016e58:	4770      	bx	lr
 8016e5a:	2000      	movs	r0, #0
 8016e5c:	4770      	bx	lr
	...

08016e60 <powf>:
 8016e60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016e62:	ee10 1a10 	vmov	r1, s0
 8016e66:	ee10 4a90 	vmov	r4, s1
 8016e6a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8016e6e:	0062      	lsls	r2, r4, #1
 8016e70:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8016e74:	eef0 7a40 	vmov.f32	s15, s0
 8016e78:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8016e7c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8016e80:	d252      	bcs.n	8016f28 <powf+0xc8>
 8016e82:	4298      	cmp	r0, r3
 8016e84:	d252      	bcs.n	8016f2c <powf+0xcc>
 8016e86:	2000      	movs	r0, #0
 8016e88:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8016e8c:	4a9e      	ldr	r2, [pc, #632]	; (8017108 <powf+0x2a8>)
 8016e8e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8016e92:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8016e96:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8016e9a:	0ddb      	lsrs	r3, r3, #23
 8016e9c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8016ea0:	05db      	lsls	r3, r3, #23
 8016ea2:	ed94 5b00 	vldr	d5, [r4]
 8016ea6:	1ac9      	subs	r1, r1, r3
 8016ea8:	ee07 1a90 	vmov	s15, r1
 8016eac:	15db      	asrs	r3, r3, #23
 8016eae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016eb2:	eea5 6b07 	vfma.f64	d6, d5, d7
 8016eb6:	ed94 5b02 	vldr	d5, [r4, #8]
 8016eba:	ee26 2b06 	vmul.f64	d2, d6, d6
 8016ebe:	ee22 1b02 	vmul.f64	d1, d2, d2
 8016ec2:	ee07 3a90 	vmov	s15, r3
 8016ec6:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
 8016eca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016ece:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016ed2:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8016ed6:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
 8016eda:	eea6 3b05 	vfma.f64	d3, d6, d5
 8016ede:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8016ee2:	eea6 5b04 	vfma.f64	d5, d6, d4
 8016ee6:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
 8016eea:	eea6 7b04 	vfma.f64	d7, d6, d4
 8016eee:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
 8016ef2:	eea2 7b05 	vfma.f64	d7, d2, d5
 8016ef6:	eea3 7b01 	vfma.f64	d7, d3, d1
 8016efa:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016efe:	ee16 3a90 	vmov	r3, s13
 8016f02:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8016f06:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8016f0a:	429a      	cmp	r2, r3
 8016f0c:	f0c0 80b0 	bcc.w	8017070 <powf+0x210>
 8016f10:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80170e8 <powf+0x288>
 8016f14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f1c:	dd78      	ble.n	8017010 <powf+0x1b0>
 8016f1e:	b003      	add	sp, #12
 8016f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016f24:	f000 b91a 	b.w	801715c <__math_oflowf>
 8016f28:	4298      	cmp	r0, r3
 8016f2a:	d32d      	bcc.n	8016f88 <powf+0x128>
 8016f2c:	b952      	cbnz	r2, 8016f44 <powf+0xe4>
 8016f2e:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
 8016f32:	0049      	lsls	r1, r1, #1
 8016f34:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 8016f38:	f240 80c8 	bls.w	80170cc <powf+0x26c>
 8016f3c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8016f40:	b003      	add	sp, #12
 8016f42:	bd30      	pop	{r4, r5, pc}
 8016f44:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8016f48:	d105      	bne.n	8016f56 <powf+0xf6>
 8016f4a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8016f4e:	0064      	lsls	r4, r4, #1
 8016f50:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8016f54:	e7f0      	b.n	8016f38 <powf+0xd8>
 8016f56:	0049      	lsls	r1, r1, #1
 8016f58:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 8016f5c:	d8ee      	bhi.n	8016f3c <powf+0xdc>
 8016f5e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8016f62:	d1eb      	bne.n	8016f3c <powf+0xdc>
 8016f64:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8016f68:	f000 80b0 	beq.w	80170cc <powf+0x26c>
 8016f6c:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8016f70:	ea6f 0404 	mvn.w	r4, r4
 8016f74:	bf34      	ite	cc
 8016f76:	2100      	movcc	r1, #0
 8016f78:	2101      	movcs	r1, #1
 8016f7a:	0fe4      	lsrs	r4, r4, #31
 8016f7c:	42a1      	cmp	r1, r4
 8016f7e:	f040 80a8 	bne.w	80170d2 <powf+0x272>
 8016f82:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8016f86:	e7db      	b.n	8016f40 <powf+0xe0>
 8016f88:	004d      	lsls	r5, r1, #1
 8016f8a:	1e6a      	subs	r2, r5, #1
 8016f8c:	429a      	cmp	r2, r3
 8016f8e:	d31c      	bcc.n	8016fca <powf+0x16a>
 8016f90:	2900      	cmp	r1, #0
 8016f92:	ee20 0a00 	vmul.f32	s0, s0, s0
 8016f96:	da0f      	bge.n	8016fb8 <powf+0x158>
 8016f98:	ee10 0a90 	vmov	r0, s1
 8016f9c:	f7ff ff48 	bl	8016e30 <checkint>
 8016fa0:	2801      	cmp	r0, #1
 8016fa2:	d109      	bne.n	8016fb8 <powf+0x158>
 8016fa4:	eeb1 0a40 	vneg.f32	s0, s0
 8016fa8:	b945      	cbnz	r5, 8016fbc <powf+0x15c>
 8016faa:	2c00      	cmp	r4, #0
 8016fac:	dac8      	bge.n	8016f40 <powf+0xe0>
 8016fae:	b003      	add	sp, #12
 8016fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016fb4:	f000 b8d8 	b.w	8017168 <__math_divzerof>
 8016fb8:	2000      	movs	r0, #0
 8016fba:	e7f5      	b.n	8016fa8 <powf+0x148>
 8016fbc:	2c00      	cmp	r4, #0
 8016fbe:	dabf      	bge.n	8016f40 <powf+0xe0>
 8016fc0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016fc4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016fc8:	e7ba      	b.n	8016f40 <powf+0xe0>
 8016fca:	2900      	cmp	r1, #0
 8016fcc:	da1e      	bge.n	801700c <powf+0x1ac>
 8016fce:	ee10 0a90 	vmov	r0, s1
 8016fd2:	f7ff ff2d 	bl	8016e30 <checkint>
 8016fd6:	b920      	cbnz	r0, 8016fe2 <powf+0x182>
 8016fd8:	b003      	add	sp, #12
 8016fda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016fde:	f000 b8d5 	b.w	801718c <__math_invalidf>
 8016fe2:	1e43      	subs	r3, r0, #1
 8016fe4:	4258      	negs	r0, r3
 8016fe6:	4158      	adcs	r0, r3
 8016fe8:	0400      	lsls	r0, r0, #16
 8016fea:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8016fee:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8016ff2:	f4bf af49 	bcs.w	8016e88 <powf+0x28>
 8016ff6:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801710c <powf+0x2ac>
 8016ffa:	ee27 0a87 	vmul.f32	s0, s15, s14
 8016ffe:	ee10 3a10 	vmov	r3, s0
 8017002:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017006:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801700a:	e73d      	b.n	8016e88 <powf+0x28>
 801700c:	2000      	movs	r0, #0
 801700e:	e7ee      	b.n	8016fee <powf+0x18e>
 8017010:	ed9f 7b37 	vldr	d7, [pc, #220]	; 80170f0 <powf+0x290>
 8017014:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801701c:	dd10      	ble.n	8017040 <powf+0x1e0>
 801701e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8017022:	2800      	cmp	r0, #0
 8017024:	d158      	bne.n	80170d8 <powf+0x278>
 8017026:	9300      	str	r3, [sp, #0]
 8017028:	eddd 7a00 	vldr	s15, [sp]
 801702c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017030:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017034:	eef4 7a47 	vcmp.f32	s15, s14
 8017038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801703c:	f47f af6f 	bne.w	8016f1e <powf+0xbe>
 8017040:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80170f8 <powf+0x298>
 8017044:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801704c:	d804      	bhi.n	8017058 <powf+0x1f8>
 801704e:	b003      	add	sp, #12
 8017050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017054:	f000 b876 	b.w	8017144 <__math_uflowf>
 8017058:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8017100 <powf+0x2a0>
 801705c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017064:	d504      	bpl.n	8017070 <powf+0x210>
 8017066:	b003      	add	sp, #12
 8017068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801706c:	f000 b870 	b.w	8017150 <__math_may_uflowf>
 8017070:	4b27      	ldr	r3, [pc, #156]	; (8017110 <powf+0x2b0>)
 8017072:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017076:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 801707a:	ee36 7b05 	vadd.f64	d7, d6, d5
 801707e:	ee17 2a10 	vmov	r2, s14
 8017082:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017086:	f002 011f 	and.w	r1, r2, #31
 801708a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801708e:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8017092:	ee27 4b07 	vmul.f64	d4, d7, d7
 8017096:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 801709a:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801709e:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80170a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80170a6:	686d      	ldr	r5, [r5, #4]
 80170a8:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80170ac:	1882      	adds	r2, r0, r2
 80170ae:	2300      	movs	r3, #0
 80170b0:	1918      	adds	r0, r3, r4
 80170b2:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80170b6:	eea7 0b05 	vfma.f64	d0, d7, d5
 80170ba:	ec41 0b17 	vmov	d7, r0, r1
 80170be:	eea6 0b04 	vfma.f64	d0, d6, d4
 80170c2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80170c6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80170ca:	e739      	b.n	8016f40 <powf+0xe0>
 80170cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80170d0:	e736      	b.n	8016f40 <powf+0xe0>
 80170d2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8017114 <powf+0x2b4>
 80170d6:	e733      	b.n	8016f40 <powf+0xe0>
 80170d8:	9301      	str	r3, [sp, #4]
 80170da:	eddd 7a01 	vldr	s15, [sp, #4]
 80170de:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80170e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80170e6:	e7a5      	b.n	8017034 <powf+0x1d4>
 80170e8:	ffd1d571 	.word	0xffd1d571
 80170ec:	405fffff 	.word	0x405fffff
 80170f0:	ffa3aae2 	.word	0xffa3aae2
 80170f4:	405fffff 	.word	0x405fffff
 80170f8:	00000000 	.word	0x00000000
 80170fc:	c062c000 	.word	0xc062c000
 8017100:	00000000 	.word	0x00000000
 8017104:	c062a000 	.word	0xc062a000
 8017108:	08024ec8 	.word	0x08024ec8
 801710c:	4b000000 	.word	0x4b000000
 8017110:	08023db0 	.word	0x08023db0
 8017114:	00000000 	.word	0x00000000

08017118 <with_errnof>:
 8017118:	b513      	push	{r0, r1, r4, lr}
 801711a:	4604      	mov	r4, r0
 801711c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017120:	f001 fdf8 	bl	8018d14 <__errno>
 8017124:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017128:	6004      	str	r4, [r0, #0]
 801712a:	b002      	add	sp, #8
 801712c:	bd10      	pop	{r4, pc}

0801712e <xflowf>:
 801712e:	b130      	cbz	r0, 801713e <xflowf+0x10>
 8017130:	eef1 7a40 	vneg.f32	s15, s0
 8017134:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017138:	2022      	movs	r0, #34	; 0x22
 801713a:	f7ff bfed 	b.w	8017118 <with_errnof>
 801713e:	eef0 7a40 	vmov.f32	s15, s0
 8017142:	e7f7      	b.n	8017134 <xflowf+0x6>

08017144 <__math_uflowf>:
 8017144:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801714c <__math_uflowf+0x8>
 8017148:	f7ff bff1 	b.w	801712e <xflowf>
 801714c:	10000000 	.word	0x10000000

08017150 <__math_may_uflowf>:
 8017150:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017158 <__math_may_uflowf+0x8>
 8017154:	f7ff bfeb 	b.w	801712e <xflowf>
 8017158:	1a200000 	.word	0x1a200000

0801715c <__math_oflowf>:
 801715c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017164 <__math_oflowf+0x8>
 8017160:	f7ff bfe5 	b.w	801712e <xflowf>
 8017164:	70000000 	.word	0x70000000

08017168 <__math_divzerof>:
 8017168:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8017188 <__math_divzerof+0x20>
 801716c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017170:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017174:	2800      	cmp	r0, #0
 8017176:	f04f 0022 	mov.w	r0, #34	; 0x22
 801717a:	fe47 7a27 	vseleq.f32	s15, s14, s15
 801717e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8017182:	f7ff bfc9 	b.w	8017118 <with_errnof>
 8017186:	bf00      	nop
 8017188:	00000000 	.word	0x00000000

0801718c <__math_invalidf>:
 801718c:	eef0 7a40 	vmov.f32	s15, s0
 8017190:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017194:	eef4 7a67 	vcmp.f32	s15, s15
 8017198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801719c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80171a0:	d602      	bvs.n	80171a8 <__math_invalidf+0x1c>
 80171a2:	2021      	movs	r0, #33	; 0x21
 80171a4:	f7ff bfb8 	b.w	8017118 <with_errnof>
 80171a8:	4770      	bx	lr
	...

080171ac <log10f>:
 80171ac:	b508      	push	{r3, lr}
 80171ae:	ed2d 8b02 	vpush	{d8}
 80171b2:	eeb0 8a40 	vmov.f32	s16, s0
 80171b6:	f000 f9ff 	bl	80175b8 <__ieee754_log10f>
 80171ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80171be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171c2:	d60f      	bvs.n	80171e4 <log10f+0x38>
 80171c4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80171c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171cc:	d80a      	bhi.n	80171e4 <log10f+0x38>
 80171ce:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80171d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171d6:	d108      	bne.n	80171ea <log10f+0x3e>
 80171d8:	f001 fd9c 	bl	8018d14 <__errno>
 80171dc:	2322      	movs	r3, #34	; 0x22
 80171de:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8017200 <log10f+0x54>
 80171e2:	6003      	str	r3, [r0, #0]
 80171e4:	ecbd 8b02 	vpop	{d8}
 80171e8:	bd08      	pop	{r3, pc}
 80171ea:	f001 fd93 	bl	8018d14 <__errno>
 80171ee:	ecbd 8b02 	vpop	{d8}
 80171f2:	2321      	movs	r3, #33	; 0x21
 80171f4:	6003      	str	r3, [r0, #0]
 80171f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80171fa:	4802      	ldr	r0, [pc, #8]	; (8017204 <log10f+0x58>)
 80171fc:	f000 b82a 	b.w	8017254 <nanf>
 8017200:	ff800000 	.word	0xff800000
 8017204:	08023dac 	.word	0x08023dac

08017208 <sqrtf>:
 8017208:	b508      	push	{r3, lr}
 801720a:	ed2d 8b02 	vpush	{d8}
 801720e:	eeb0 8a40 	vmov.f32	s16, s0
 8017212:	f000 f9cd 	bl	80175b0 <__ieee754_sqrtf>
 8017216:	eeb4 8a48 	vcmp.f32	s16, s16
 801721a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801721e:	d60c      	bvs.n	801723a <sqrtf+0x32>
 8017220:	eddf 8a07 	vldr	s17, [pc, #28]	; 8017240 <sqrtf+0x38>
 8017224:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801722c:	d505      	bpl.n	801723a <sqrtf+0x32>
 801722e:	f001 fd71 	bl	8018d14 <__errno>
 8017232:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8017236:	2321      	movs	r3, #33	; 0x21
 8017238:	6003      	str	r3, [r0, #0]
 801723a:	ecbd 8b02 	vpop	{d8}
 801723e:	bd08      	pop	{r3, pc}
 8017240:	00000000 	.word	0x00000000

08017244 <fabsf>:
 8017244:	ee10 3a10 	vmov	r3, s0
 8017248:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801724c:	ee00 3a10 	vmov	s0, r3
 8017250:	4770      	bx	lr
	...

08017254 <nanf>:
 8017254:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801725c <nanf+0x8>
 8017258:	4770      	bx	lr
 801725a:	bf00      	nop
 801725c:	7fc00000 	.word	0x7fc00000

08017260 <tanf>:
 8017260:	ee10 3a10 	vmov	r3, s0
 8017264:	b507      	push	{r0, r1, r2, lr}
 8017266:	4a12      	ldr	r2, [pc, #72]	; (80172b0 <tanf+0x50>)
 8017268:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801726c:	4293      	cmp	r3, r2
 801726e:	dc07      	bgt.n	8017280 <tanf+0x20>
 8017270:	eddf 0a10 	vldr	s1, [pc, #64]	; 80172b4 <tanf+0x54>
 8017274:	2001      	movs	r0, #1
 8017276:	b003      	add	sp, #12
 8017278:	f85d eb04 	ldr.w	lr, [sp], #4
 801727c:	f000 b8b8 	b.w	80173f0 <__kernel_tanf>
 8017280:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017284:	db04      	blt.n	8017290 <tanf+0x30>
 8017286:	ee30 0a40 	vsub.f32	s0, s0, s0
 801728a:	b003      	add	sp, #12
 801728c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017290:	4668      	mov	r0, sp
 8017292:	f000 f9e9 	bl	8017668 <__ieee754_rem_pio2f>
 8017296:	0040      	lsls	r0, r0, #1
 8017298:	f000 0002 	and.w	r0, r0, #2
 801729c:	eddd 0a01 	vldr	s1, [sp, #4]
 80172a0:	ed9d 0a00 	vldr	s0, [sp]
 80172a4:	f1c0 0001 	rsb	r0, r0, #1
 80172a8:	f000 f8a2 	bl	80173f0 <__kernel_tanf>
 80172ac:	e7ed      	b.n	801728a <tanf+0x2a>
 80172ae:	bf00      	nop
 80172b0:	3f490fda 	.word	0x3f490fda
 80172b4:	00000000 	.word	0x00000000

080172b8 <tanhf>:
 80172b8:	b538      	push	{r3, r4, r5, lr}
 80172ba:	ee10 5a10 	vmov	r5, s0
 80172be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80172c2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80172c6:	ed2d 8b02 	vpush	{d8}
 80172ca:	db0f      	blt.n	80172ec <tanhf+0x34>
 80172cc:	4b2a      	ldr	r3, [pc, #168]	; (8017378 <tanhf+0xc0>)
 80172ce:	ed93 6a00 	vldr	s12, [r3]
 80172d2:	edd3 6a00 	vldr	s13, [r3]
 80172d6:	eec6 7a00 	vdiv.f32	s15, s12, s0
 80172da:	2d00      	cmp	r5, #0
 80172dc:	bfac      	ite	ge
 80172de:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 80172e2:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 80172e6:	ecbd 8b02 	vpop	{d8}
 80172ea:	bd38      	pop	{r3, r4, r5, pc}
 80172ec:	4a23      	ldr	r2, [pc, #140]	; (801737c <tanhf+0xc4>)
 80172ee:	4293      	cmp	r3, r2
 80172f0:	dc39      	bgt.n	8017366 <tanhf+0xae>
 80172f2:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 80172f6:	da07      	bge.n	8017308 <tanhf+0x50>
 80172f8:	4b1f      	ldr	r3, [pc, #124]	; (8017378 <tanhf+0xc0>)
 80172fa:	edd3 7a00 	vldr	s15, [r3]
 80172fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8017302:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017306:	e7ee      	b.n	80172e6 <tanhf+0x2e>
 8017308:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801730c:	4c1c      	ldr	r4, [pc, #112]	; (8017380 <tanhf+0xc8>)
 801730e:	db19      	blt.n	8017344 <tanhf+0x8c>
 8017310:	f7ff ff98 	bl	8017244 <fabsf>
 8017314:	edd4 7a00 	vldr	s15, [r4]
 8017318:	ee20 0a27 	vmul.f32	s0, s0, s15
 801731c:	f000 ffc4 	bl	80182a8 <expm1f>
 8017320:	4b15      	ldr	r3, [pc, #84]	; (8017378 <tanhf+0xc0>)
 8017322:	edd3 7a00 	vldr	s15, [r3]
 8017326:	edd4 6a00 	vldr	s13, [r4]
 801732a:	ed94 7a00 	vldr	s14, [r4]
 801732e:	ee37 0a00 	vadd.f32	s0, s14, s0
 8017332:	ee86 7a80 	vdiv.f32	s14, s13, s0
 8017336:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801733a:	2d00      	cmp	r5, #0
 801733c:	bfb8      	it	lt
 801733e:	eeb1 0a40 	vneglt.f32	s0, s0
 8017342:	e7d0      	b.n	80172e6 <tanhf+0x2e>
 8017344:	ed94 8a00 	vldr	s16, [r4]
 8017348:	f7ff ff7c 	bl	8017244 <fabsf>
 801734c:	ee28 0a40 	vnmul.f32	s0, s16, s0
 8017350:	f000 ffaa 	bl	80182a8 <expm1f>
 8017354:	edd4 7a00 	vldr	s15, [r4]
 8017358:	ee77 7a80 	vadd.f32	s15, s15, s0
 801735c:	eeb1 7a40 	vneg.f32	s14, s0
 8017360:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8017364:	e7e9      	b.n	801733a <tanhf+0x82>
 8017366:	4b04      	ldr	r3, [pc, #16]	; (8017378 <tanhf+0xc0>)
 8017368:	ed93 0a00 	vldr	s0, [r3]
 801736c:	4b05      	ldr	r3, [pc, #20]	; (8017384 <tanhf+0xcc>)
 801736e:	edd3 7a00 	vldr	s15, [r3]
 8017372:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017376:	e7e0      	b.n	801733a <tanhf+0x82>
 8017378:	20000b94 	.word	0x20000b94
 801737c:	41afffff 	.word	0x41afffff
 8017380:	20000b9c 	.word	0x20000b9c
 8017384:	20000b98 	.word	0x20000b98

08017388 <tan>:
 8017388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801738a:	eeb0 7b40 	vmov.f64	d7, d0
 801738e:	ee17 3a90 	vmov	r3, s15
 8017392:	4a15      	ldr	r2, [pc, #84]	; (80173e8 <tan+0x60>)
 8017394:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017398:	4293      	cmp	r3, r2
 801739a:	dc07      	bgt.n	80173ac <tan+0x24>
 801739c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80173e0 <tan+0x58>
 80173a0:	2001      	movs	r0, #1
 80173a2:	b005      	add	sp, #20
 80173a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80173a8:	f000 be62 	b.w	8018070 <__kernel_tan>
 80173ac:	4a0f      	ldr	r2, [pc, #60]	; (80173ec <tan+0x64>)
 80173ae:	4293      	cmp	r3, r2
 80173b0:	dd04      	ble.n	80173bc <tan+0x34>
 80173b2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80173b6:	b005      	add	sp, #20
 80173b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80173bc:	4668      	mov	r0, sp
 80173be:	f000 fa7f 	bl	80178c0 <__ieee754_rem_pio2>
 80173c2:	0040      	lsls	r0, r0, #1
 80173c4:	f000 0002 	and.w	r0, r0, #2
 80173c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80173cc:	ed9d 0b00 	vldr	d0, [sp]
 80173d0:	f1c0 0001 	rsb	r0, r0, #1
 80173d4:	f000 fe4c 	bl	8018070 <__kernel_tan>
 80173d8:	e7ed      	b.n	80173b6 <tan+0x2e>
 80173da:	bf00      	nop
 80173dc:	f3af 8000 	nop.w
	...
 80173e8:	3fe921fb 	.word	0x3fe921fb
 80173ec:	7fefffff 	.word	0x7fefffff

080173f0 <__kernel_tanf>:
 80173f0:	b508      	push	{r3, lr}
 80173f2:	ee10 3a10 	vmov	r3, s0
 80173f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80173fa:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 80173fe:	eef0 7a40 	vmov.f32	s15, s0
 8017402:	da17      	bge.n	8017434 <__kernel_tanf+0x44>
 8017404:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8017408:	ee17 1a10 	vmov	r1, s14
 801740c:	bb41      	cbnz	r1, 8017460 <__kernel_tanf+0x70>
 801740e:	1c43      	adds	r3, r0, #1
 8017410:	4313      	orrs	r3, r2
 8017412:	d108      	bne.n	8017426 <__kernel_tanf+0x36>
 8017414:	f7ff ff16 	bl	8017244 <fabsf>
 8017418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801741c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017420:	eeb0 0a67 	vmov.f32	s0, s15
 8017424:	bd08      	pop	{r3, pc}
 8017426:	2801      	cmp	r0, #1
 8017428:	d0fa      	beq.n	8017420 <__kernel_tanf+0x30>
 801742a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801742e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017432:	e7f5      	b.n	8017420 <__kernel_tanf+0x30>
 8017434:	494c      	ldr	r1, [pc, #304]	; (8017568 <__kernel_tanf+0x178>)
 8017436:	428a      	cmp	r2, r1
 8017438:	db12      	blt.n	8017460 <__kernel_tanf+0x70>
 801743a:	2b00      	cmp	r3, #0
 801743c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801756c <__kernel_tanf+0x17c>
 8017440:	bfb8      	it	lt
 8017442:	eef1 7a40 	vneglt.f32	s15, s0
 8017446:	ee37 7a67 	vsub.f32	s14, s14, s15
 801744a:	eddf 7a49 	vldr	s15, [pc, #292]	; 8017570 <__kernel_tanf+0x180>
 801744e:	bfb8      	it	lt
 8017450:	eef1 0a60 	vneglt.f32	s1, s1
 8017454:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017458:	eddf 0a46 	vldr	s1, [pc, #280]	; 8017574 <__kernel_tanf+0x184>
 801745c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017460:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8017464:	eddf 5a44 	vldr	s11, [pc, #272]	; 8017578 <__kernel_tanf+0x188>
 8017468:	ed9f 6a44 	vldr	s12, [pc, #272]	; 801757c <__kernel_tanf+0x18c>
 801746c:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8017580 <__kernel_tanf+0x190>
 8017470:	493d      	ldr	r1, [pc, #244]	; (8017568 <__kernel_tanf+0x178>)
 8017472:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017476:	428a      	cmp	r2, r1
 8017478:	eea7 6a25 	vfma.f32	s12, s14, s11
 801747c:	eddf 5a41 	vldr	s11, [pc, #260]	; 8017584 <__kernel_tanf+0x194>
 8017480:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017484:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8017588 <__kernel_tanf+0x198>
 8017488:	eea5 6a87 	vfma.f32	s12, s11, s14
 801748c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801758c <__kernel_tanf+0x19c>
 8017490:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017494:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8017590 <__kernel_tanf+0x1a0>
 8017498:	eea5 6a87 	vfma.f32	s12, s11, s14
 801749c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8017594 <__kernel_tanf+0x1a4>
 80174a0:	eee7 5a05 	vfma.f32	s11, s14, s10
 80174a4:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8017598 <__kernel_tanf+0x1a8>
 80174a8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80174ac:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801759c <__kernel_tanf+0x1ac>
 80174b0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80174b4:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80175a0 <__kernel_tanf+0x1b0>
 80174b8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80174bc:	eddf 5a39 	vldr	s11, [pc, #228]	; 80175a4 <__kernel_tanf+0x1b4>
 80174c0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80174c4:	eeb0 7a46 	vmov.f32	s14, s12
 80174c8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80174cc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80174d0:	eeb0 6a60 	vmov.f32	s12, s1
 80174d4:	eea7 6a05 	vfma.f32	s12, s14, s10
 80174d8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80175a8 <__kernel_tanf+0x1b8>
 80174dc:	eee6 0a26 	vfma.f32	s1, s12, s13
 80174e0:	eee5 0a07 	vfma.f32	s1, s10, s14
 80174e4:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80174e8:	db1d      	blt.n	8017526 <__kernel_tanf+0x136>
 80174ea:	ee07 0a10 	vmov	s14, r0
 80174ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80174f2:	ee66 5aa6 	vmul.f32	s11, s13, s13
 80174f6:	ee76 6a87 	vadd.f32	s13, s13, s14
 80174fa:	179b      	asrs	r3, r3, #30
 80174fc:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8017500:	f003 0302 	and.w	r3, r3, #2
 8017504:	f1c3 0301 	rsb	r3, r3, #1
 8017508:	ee76 6a60 	vsub.f32	s13, s12, s1
 801750c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017510:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017514:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8017518:	ee07 3a90 	vmov	s15, r3
 801751c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017524:	e77c      	b.n	8017420 <__kernel_tanf+0x30>
 8017526:	2801      	cmp	r0, #1
 8017528:	d01b      	beq.n	8017562 <__kernel_tanf+0x172>
 801752a:	4b20      	ldr	r3, [pc, #128]	; (80175ac <__kernel_tanf+0x1bc>)
 801752c:	ee16 2a90 	vmov	r2, s13
 8017530:	401a      	ands	r2, r3
 8017532:	ee05 2a90 	vmov	s11, r2
 8017536:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801753a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801753e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8017542:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017546:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 801754a:	ee16 2a10 	vmov	r2, s12
 801754e:	4013      	ands	r3, r2
 8017550:	ee07 3a90 	vmov	s15, r3
 8017554:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8017558:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801755c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8017560:	e75e      	b.n	8017420 <__kernel_tanf+0x30>
 8017562:	eef0 7a66 	vmov.f32	s15, s13
 8017566:	e75b      	b.n	8017420 <__kernel_tanf+0x30>
 8017568:	3f2ca140 	.word	0x3f2ca140
 801756c:	3f490fda 	.word	0x3f490fda
 8017570:	33222168 	.word	0x33222168
 8017574:	00000000 	.word	0x00000000
 8017578:	b79bae5f 	.word	0xb79bae5f
 801757c:	38a3f445 	.word	0x38a3f445
 8017580:	37d95384 	.word	0x37d95384
 8017584:	3a1a26c8 	.word	0x3a1a26c8
 8017588:	3b6b6916 	.word	0x3b6b6916
 801758c:	3cb327a4 	.word	0x3cb327a4
 8017590:	3e088889 	.word	0x3e088889
 8017594:	3895c07a 	.word	0x3895c07a
 8017598:	398137b9 	.word	0x398137b9
 801759c:	3abede48 	.word	0x3abede48
 80175a0:	3c11371f 	.word	0x3c11371f
 80175a4:	3d5d0dd1 	.word	0x3d5d0dd1
 80175a8:	3eaaaaab 	.word	0x3eaaaaab
 80175ac:	fffff000 	.word	0xfffff000

080175b0 <__ieee754_sqrtf>:
 80175b0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80175b4:	4770      	bx	lr
	...

080175b8 <__ieee754_log10f>:
 80175b8:	b508      	push	{r3, lr}
 80175ba:	ee10 2a10 	vmov	r2, s0
 80175be:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80175c2:	ed2d 8b02 	vpush	{d8}
 80175c6:	d108      	bne.n	80175da <__ieee754_log10f+0x22>
 80175c8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8017650 <__ieee754_log10f+0x98>
 80175cc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8017654 <__ieee754_log10f+0x9c>
 80175d0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80175d4:	ecbd 8b02 	vpop	{d8}
 80175d8:	bd08      	pop	{r3, pc}
 80175da:	2a00      	cmp	r2, #0
 80175dc:	da02      	bge.n	80175e4 <__ieee754_log10f+0x2c>
 80175de:	ee30 7a40 	vsub.f32	s14, s0, s0
 80175e2:	e7f3      	b.n	80175cc <__ieee754_log10f+0x14>
 80175e4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80175e8:	db02      	blt.n	80175f0 <__ieee754_log10f+0x38>
 80175ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 80175ee:	e7f1      	b.n	80175d4 <__ieee754_log10f+0x1c>
 80175f0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80175f4:	bfbf      	itttt	lt
 80175f6:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8017658 <__ieee754_log10f+0xa0>
 80175fa:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80175fe:	f06f 0118 	mvnlt.w	r1, #24
 8017602:	ee17 2a90 	vmovlt	r2, s15
 8017606:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801760a:	bfa8      	it	ge
 801760c:	2100      	movge	r1, #0
 801760e:	3b7f      	subs	r3, #127	; 0x7f
 8017610:	440b      	add	r3, r1
 8017612:	0fd9      	lsrs	r1, r3, #31
 8017614:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8017618:	ee07 3a90 	vmov	s15, r3
 801761c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8017620:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8017624:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017628:	ee00 3a10 	vmov	s0, r3
 801762c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017630:	f7ff fa12 	bl	8016a58 <logf>
 8017634:	eddf 7a09 	vldr	s15, [pc, #36]	; 801765c <__ieee754_log10f+0xa4>
 8017638:	ee20 0a27 	vmul.f32	s0, s0, s15
 801763c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8017660 <__ieee754_log10f+0xa8>
 8017640:	eea8 0a27 	vfma.f32	s0, s16, s15
 8017644:	eddf 7a07 	vldr	s15, [pc, #28]	; 8017664 <__ieee754_log10f+0xac>
 8017648:	eea8 0a27 	vfma.f32	s0, s16, s15
 801764c:	e7c2      	b.n	80175d4 <__ieee754_log10f+0x1c>
 801764e:	bf00      	nop
 8017650:	cc000000 	.word	0xcc000000
 8017654:	00000000 	.word	0x00000000
 8017658:	4c000000 	.word	0x4c000000
 801765c:	3ede5bd9 	.word	0x3ede5bd9
 8017660:	355427db 	.word	0x355427db
 8017664:	3e9a2080 	.word	0x3e9a2080

08017668 <__ieee754_rem_pio2f>:
 8017668:	b5f0      	push	{r4, r5, r6, r7, lr}
 801766a:	ee10 6a10 	vmov	r6, s0
 801766e:	4b86      	ldr	r3, [pc, #536]	; (8017888 <__ieee754_rem_pio2f+0x220>)
 8017670:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8017674:	429d      	cmp	r5, r3
 8017676:	b087      	sub	sp, #28
 8017678:	4604      	mov	r4, r0
 801767a:	dc05      	bgt.n	8017688 <__ieee754_rem_pio2f+0x20>
 801767c:	2300      	movs	r3, #0
 801767e:	ed80 0a00 	vstr	s0, [r0]
 8017682:	6043      	str	r3, [r0, #4]
 8017684:	2000      	movs	r0, #0
 8017686:	e020      	b.n	80176ca <__ieee754_rem_pio2f+0x62>
 8017688:	4b80      	ldr	r3, [pc, #512]	; (801788c <__ieee754_rem_pio2f+0x224>)
 801768a:	429d      	cmp	r5, r3
 801768c:	dc38      	bgt.n	8017700 <__ieee754_rem_pio2f+0x98>
 801768e:	2e00      	cmp	r6, #0
 8017690:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8017890 <__ieee754_rem_pio2f+0x228>
 8017694:	4b7f      	ldr	r3, [pc, #508]	; (8017894 <__ieee754_rem_pio2f+0x22c>)
 8017696:	f025 050f 	bic.w	r5, r5, #15
 801769a:	dd18      	ble.n	80176ce <__ieee754_rem_pio2f+0x66>
 801769c:	429d      	cmp	r5, r3
 801769e:	ee70 7a47 	vsub.f32	s15, s0, s14
 80176a2:	bf09      	itett	eq
 80176a4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8017898 <__ieee754_rem_pio2f+0x230>
 80176a8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 801789c <__ieee754_rem_pio2f+0x234>
 80176ac:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80176b0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80178a0 <__ieee754_rem_pio2f+0x238>
 80176b4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80176b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80176bc:	edc0 6a00 	vstr	s13, [r0]
 80176c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80176c4:	edc0 7a01 	vstr	s15, [r0, #4]
 80176c8:	2001      	movs	r0, #1
 80176ca:	b007      	add	sp, #28
 80176cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80176ce:	429d      	cmp	r5, r3
 80176d0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80176d4:	bf09      	itett	eq
 80176d6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8017898 <__ieee754_rem_pio2f+0x230>
 80176da:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 801789c <__ieee754_rem_pio2f+0x234>
 80176de:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80176e2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80178a0 <__ieee754_rem_pio2f+0x238>
 80176e6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80176ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80176ee:	edc0 6a00 	vstr	s13, [r0]
 80176f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80176f6:	edc0 7a01 	vstr	s15, [r0, #4]
 80176fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80176fe:	e7e4      	b.n	80176ca <__ieee754_rem_pio2f+0x62>
 8017700:	4b68      	ldr	r3, [pc, #416]	; (80178a4 <__ieee754_rem_pio2f+0x23c>)
 8017702:	429d      	cmp	r5, r3
 8017704:	dc71      	bgt.n	80177ea <__ieee754_rem_pio2f+0x182>
 8017706:	f7ff fd9d 	bl	8017244 <fabsf>
 801770a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80178a8 <__ieee754_rem_pio2f+0x240>
 801770e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017712:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801771a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801771e:	ee17 0a90 	vmov	r0, s15
 8017722:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8017890 <__ieee754_rem_pio2f+0x228>
 8017726:	eea7 0a67 	vfms.f32	s0, s14, s15
 801772a:	281f      	cmp	r0, #31
 801772c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801789c <__ieee754_rem_pio2f+0x234>
 8017730:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017734:	eeb1 6a47 	vneg.f32	s12, s14
 8017738:	ee70 6a67 	vsub.f32	s13, s0, s15
 801773c:	ee16 2a90 	vmov	r2, s13
 8017740:	dc1c      	bgt.n	801777c <__ieee754_rem_pio2f+0x114>
 8017742:	495a      	ldr	r1, [pc, #360]	; (80178ac <__ieee754_rem_pio2f+0x244>)
 8017744:	1e47      	subs	r7, r0, #1
 8017746:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801774a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801774e:	428b      	cmp	r3, r1
 8017750:	d014      	beq.n	801777c <__ieee754_rem_pio2f+0x114>
 8017752:	6022      	str	r2, [r4, #0]
 8017754:	ed94 7a00 	vldr	s14, [r4]
 8017758:	ee30 0a47 	vsub.f32	s0, s0, s14
 801775c:	2e00      	cmp	r6, #0
 801775e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017762:	ed84 0a01 	vstr	s0, [r4, #4]
 8017766:	dab0      	bge.n	80176ca <__ieee754_rem_pio2f+0x62>
 8017768:	eeb1 7a47 	vneg.f32	s14, s14
 801776c:	eeb1 0a40 	vneg.f32	s0, s0
 8017770:	ed84 7a00 	vstr	s14, [r4]
 8017774:	ed84 0a01 	vstr	s0, [r4, #4]
 8017778:	4240      	negs	r0, r0
 801777a:	e7a6      	b.n	80176ca <__ieee754_rem_pio2f+0x62>
 801777c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8017780:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8017784:	2908      	cmp	r1, #8
 8017786:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801778a:	dde2      	ble.n	8017752 <__ieee754_rem_pio2f+0xea>
 801778c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8017898 <__ieee754_rem_pio2f+0x230>
 8017790:	eef0 6a40 	vmov.f32	s13, s0
 8017794:	eee6 6a25 	vfma.f32	s13, s12, s11
 8017798:	ee70 7a66 	vsub.f32	s15, s0, s13
 801779c:	eee6 7a25 	vfma.f32	s15, s12, s11
 80177a0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80178a0 <__ieee754_rem_pio2f+0x238>
 80177a4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80177a8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80177ac:	ee15 2a90 	vmov	r2, s11
 80177b0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80177b4:	1a5b      	subs	r3, r3, r1
 80177b6:	2b19      	cmp	r3, #25
 80177b8:	dc04      	bgt.n	80177c4 <__ieee754_rem_pio2f+0x15c>
 80177ba:	edc4 5a00 	vstr	s11, [r4]
 80177be:	eeb0 0a66 	vmov.f32	s0, s13
 80177c2:	e7c7      	b.n	8017754 <__ieee754_rem_pio2f+0xec>
 80177c4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80178b0 <__ieee754_rem_pio2f+0x248>
 80177c8:	eeb0 0a66 	vmov.f32	s0, s13
 80177cc:	eea6 0a25 	vfma.f32	s0, s12, s11
 80177d0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80177d4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80178b4 <__ieee754_rem_pio2f+0x24c>
 80177d8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80177dc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80177e0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80177e4:	ed84 7a00 	vstr	s14, [r4]
 80177e8:	e7b4      	b.n	8017754 <__ieee754_rem_pio2f+0xec>
 80177ea:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80177ee:	db06      	blt.n	80177fe <__ieee754_rem_pio2f+0x196>
 80177f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80177f4:	edc0 7a01 	vstr	s15, [r0, #4]
 80177f8:	edc0 7a00 	vstr	s15, [r0]
 80177fc:	e742      	b.n	8017684 <__ieee754_rem_pio2f+0x1c>
 80177fe:	15ea      	asrs	r2, r5, #23
 8017800:	3a86      	subs	r2, #134	; 0x86
 8017802:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8017806:	ee07 3a90 	vmov	s15, r3
 801780a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801780e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80178b8 <__ieee754_rem_pio2f+0x250>
 8017812:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017816:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801781a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801781e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017822:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8017826:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801782a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801782e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8017832:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017836:	eef5 7a40 	vcmp.f32	s15, #0.0
 801783a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801783e:	edcd 7a05 	vstr	s15, [sp, #20]
 8017842:	d11e      	bne.n	8017882 <__ieee754_rem_pio2f+0x21a>
 8017844:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801784c:	bf14      	ite	ne
 801784e:	2302      	movne	r3, #2
 8017850:	2301      	moveq	r3, #1
 8017852:	491a      	ldr	r1, [pc, #104]	; (80178bc <__ieee754_rem_pio2f+0x254>)
 8017854:	9101      	str	r1, [sp, #4]
 8017856:	2102      	movs	r1, #2
 8017858:	9100      	str	r1, [sp, #0]
 801785a:	a803      	add	r0, sp, #12
 801785c:	4621      	mov	r1, r4
 801785e:	f000 fec9 	bl	80185f4 <__kernel_rem_pio2f>
 8017862:	2e00      	cmp	r6, #0
 8017864:	f6bf af31 	bge.w	80176ca <__ieee754_rem_pio2f+0x62>
 8017868:	edd4 7a00 	vldr	s15, [r4]
 801786c:	eef1 7a67 	vneg.f32	s15, s15
 8017870:	edc4 7a00 	vstr	s15, [r4]
 8017874:	edd4 7a01 	vldr	s15, [r4, #4]
 8017878:	eef1 7a67 	vneg.f32	s15, s15
 801787c:	edc4 7a01 	vstr	s15, [r4, #4]
 8017880:	e77a      	b.n	8017778 <__ieee754_rem_pio2f+0x110>
 8017882:	2303      	movs	r3, #3
 8017884:	e7e5      	b.n	8017852 <__ieee754_rem_pio2f+0x1ea>
 8017886:	bf00      	nop
 8017888:	3f490fd8 	.word	0x3f490fd8
 801788c:	4016cbe3 	.word	0x4016cbe3
 8017890:	3fc90f80 	.word	0x3fc90f80
 8017894:	3fc90fd0 	.word	0x3fc90fd0
 8017898:	37354400 	.word	0x37354400
 801789c:	37354443 	.word	0x37354443
 80178a0:	2e85a308 	.word	0x2e85a308
 80178a4:	43490f80 	.word	0x43490f80
 80178a8:	3f22f984 	.word	0x3f22f984
 80178ac:	080249a8 	.word	0x080249a8
 80178b0:	2e85a300 	.word	0x2e85a300
 80178b4:	248d3132 	.word	0x248d3132
 80178b8:	43800000 	.word	0x43800000
 80178bc:	08024a28 	.word	0x08024a28

080178c0 <__ieee754_rem_pio2>:
 80178c0:	b570      	push	{r4, r5, r6, lr}
 80178c2:	eeb0 7b40 	vmov.f64	d7, d0
 80178c6:	ee17 5a90 	vmov	r5, s15
 80178ca:	4b99      	ldr	r3, [pc, #612]	; (8017b30 <__ieee754_rem_pio2+0x270>)
 80178cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80178d0:	429e      	cmp	r6, r3
 80178d2:	b088      	sub	sp, #32
 80178d4:	4604      	mov	r4, r0
 80178d6:	dc07      	bgt.n	80178e8 <__ieee754_rem_pio2+0x28>
 80178d8:	2200      	movs	r2, #0
 80178da:	2300      	movs	r3, #0
 80178dc:	ed84 0b00 	vstr	d0, [r4]
 80178e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80178e4:	2000      	movs	r0, #0
 80178e6:	e01b      	b.n	8017920 <__ieee754_rem_pio2+0x60>
 80178e8:	4b92      	ldr	r3, [pc, #584]	; (8017b34 <__ieee754_rem_pio2+0x274>)
 80178ea:	429e      	cmp	r6, r3
 80178ec:	dc3b      	bgt.n	8017966 <__ieee754_rem_pio2+0xa6>
 80178ee:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80178f2:	2d00      	cmp	r5, #0
 80178f4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8017af0 <__ieee754_rem_pio2+0x230>
 80178f8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80178fc:	dd19      	ble.n	8017932 <__ieee754_rem_pio2+0x72>
 80178fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8017902:	429e      	cmp	r6, r3
 8017904:	d00e      	beq.n	8017924 <__ieee754_rem_pio2+0x64>
 8017906:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8017af8 <__ieee754_rem_pio2+0x238>
 801790a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801790e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017912:	ed84 5b00 	vstr	d5, [r4]
 8017916:	ee37 7b46 	vsub.f64	d7, d7, d6
 801791a:	ed84 7b02 	vstr	d7, [r4, #8]
 801791e:	2001      	movs	r0, #1
 8017920:	b008      	add	sp, #32
 8017922:	bd70      	pop	{r4, r5, r6, pc}
 8017924:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8017b00 <__ieee754_rem_pio2+0x240>
 8017928:	ee37 7b46 	vsub.f64	d7, d7, d6
 801792c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8017b08 <__ieee754_rem_pio2+0x248>
 8017930:	e7eb      	b.n	801790a <__ieee754_rem_pio2+0x4a>
 8017932:	429e      	cmp	r6, r3
 8017934:	ee30 7b06 	vadd.f64	d7, d0, d6
 8017938:	d00e      	beq.n	8017958 <__ieee754_rem_pio2+0x98>
 801793a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8017af8 <__ieee754_rem_pio2+0x238>
 801793e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8017942:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017946:	ed84 5b00 	vstr	d5, [r4]
 801794a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801794e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017952:	ed84 7b02 	vstr	d7, [r4, #8]
 8017956:	e7e3      	b.n	8017920 <__ieee754_rem_pio2+0x60>
 8017958:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017b00 <__ieee754_rem_pio2+0x240>
 801795c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017960:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017b08 <__ieee754_rem_pio2+0x248>
 8017964:	e7eb      	b.n	801793e <__ieee754_rem_pio2+0x7e>
 8017966:	4b74      	ldr	r3, [pc, #464]	; (8017b38 <__ieee754_rem_pio2+0x278>)
 8017968:	429e      	cmp	r6, r3
 801796a:	dc70      	bgt.n	8017a4e <__ieee754_rem_pio2+0x18e>
 801796c:	f000 fdb8 	bl	80184e0 <fabs>
 8017970:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017974:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8017b10 <__ieee754_rem_pio2+0x250>
 8017978:	eea0 7b06 	vfma.f64	d7, d0, d6
 801797c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8017980:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8017984:	ee17 0a90 	vmov	r0, s15
 8017988:	eeb1 4b45 	vneg.f64	d4, d5
 801798c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8017af0 <__ieee754_rem_pio2+0x230>
 8017990:	eea5 0b47 	vfms.f64	d0, d5, d7
 8017994:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8017af8 <__ieee754_rem_pio2+0x238>
 8017998:	281f      	cmp	r0, #31
 801799a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801799e:	ee30 6b47 	vsub.f64	d6, d0, d7
 80179a2:	dc08      	bgt.n	80179b6 <__ieee754_rem_pio2+0xf6>
 80179a4:	4b65      	ldr	r3, [pc, #404]	; (8017b3c <__ieee754_rem_pio2+0x27c>)
 80179a6:	1e42      	subs	r2, r0, #1
 80179a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80179ac:	42b3      	cmp	r3, r6
 80179ae:	d002      	beq.n	80179b6 <__ieee754_rem_pio2+0xf6>
 80179b0:	ed84 6b00 	vstr	d6, [r4]
 80179b4:	e024      	b.n	8017a00 <__ieee754_rem_pio2+0x140>
 80179b6:	ee16 3a90 	vmov	r3, s13
 80179ba:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80179be:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80179c2:	2b10      	cmp	r3, #16
 80179c4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80179c8:	ddf2      	ble.n	80179b0 <__ieee754_rem_pio2+0xf0>
 80179ca:	eeb0 6b40 	vmov.f64	d6, d0
 80179ce:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8017b00 <__ieee754_rem_pio2+0x240>
 80179d2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80179d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80179da:	eea4 7b03 	vfma.f64	d7, d4, d3
 80179de:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8017b08 <__ieee754_rem_pio2+0x248>
 80179e2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80179e6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80179ea:	ee13 3a90 	vmov	r3, s7
 80179ee:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80179f2:	1ad3      	subs	r3, r2, r3
 80179f4:	2b31      	cmp	r3, #49	; 0x31
 80179f6:	dc17      	bgt.n	8017a28 <__ieee754_rem_pio2+0x168>
 80179f8:	eeb0 0b46 	vmov.f64	d0, d6
 80179fc:	ed84 3b00 	vstr	d3, [r4]
 8017a00:	ed94 6b00 	vldr	d6, [r4]
 8017a04:	2d00      	cmp	r5, #0
 8017a06:	ee30 0b46 	vsub.f64	d0, d0, d6
 8017a0a:	ee30 0b47 	vsub.f64	d0, d0, d7
 8017a0e:	ed84 0b02 	vstr	d0, [r4, #8]
 8017a12:	da85      	bge.n	8017920 <__ieee754_rem_pio2+0x60>
 8017a14:	eeb1 6b46 	vneg.f64	d6, d6
 8017a18:	eeb1 0b40 	vneg.f64	d0, d0
 8017a1c:	ed84 6b00 	vstr	d6, [r4]
 8017a20:	ed84 0b02 	vstr	d0, [r4, #8]
 8017a24:	4240      	negs	r0, r0
 8017a26:	e77b      	b.n	8017920 <__ieee754_rem_pio2+0x60>
 8017a28:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8017b18 <__ieee754_rem_pio2+0x258>
 8017a2c:	eeb0 0b46 	vmov.f64	d0, d6
 8017a30:	eea4 0b07 	vfma.f64	d0, d4, d7
 8017a34:	ee36 6b40 	vsub.f64	d6, d6, d0
 8017a38:	eea4 6b07 	vfma.f64	d6, d4, d7
 8017a3c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8017b20 <__ieee754_rem_pio2+0x260>
 8017a40:	eeb0 7b46 	vmov.f64	d7, d6
 8017a44:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8017a48:	ee30 6b47 	vsub.f64	d6, d0, d7
 8017a4c:	e7b0      	b.n	80179b0 <__ieee754_rem_pio2+0xf0>
 8017a4e:	4b3c      	ldr	r3, [pc, #240]	; (8017b40 <__ieee754_rem_pio2+0x280>)
 8017a50:	429e      	cmp	r6, r3
 8017a52:	dd06      	ble.n	8017a62 <__ieee754_rem_pio2+0x1a2>
 8017a54:	ee30 7b40 	vsub.f64	d7, d0, d0
 8017a58:	ed80 7b02 	vstr	d7, [r0, #8]
 8017a5c:	ed80 7b00 	vstr	d7, [r0]
 8017a60:	e740      	b.n	80178e4 <__ieee754_rem_pio2+0x24>
 8017a62:	1532      	asrs	r2, r6, #20
 8017a64:	ee10 0a10 	vmov	r0, s0
 8017a68:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8017a6c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8017a70:	ec41 0b17 	vmov	d7, r0, r1
 8017a74:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8017a78:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8017b28 <__ieee754_rem_pio2+0x268>
 8017a7c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017a80:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017a84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017a88:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017a8c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8017a90:	a808      	add	r0, sp, #32
 8017a92:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017a96:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017a9a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8017a9e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017aa2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017aa6:	2103      	movs	r1, #3
 8017aa8:	ed30 7b02 	vldmdb	r0!, {d7}
 8017aac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ab4:	460b      	mov	r3, r1
 8017ab6:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8017aba:	d0f5      	beq.n	8017aa8 <__ieee754_rem_pio2+0x1e8>
 8017abc:	4921      	ldr	r1, [pc, #132]	; (8017b44 <__ieee754_rem_pio2+0x284>)
 8017abe:	9101      	str	r1, [sp, #4]
 8017ac0:	2102      	movs	r1, #2
 8017ac2:	9100      	str	r1, [sp, #0]
 8017ac4:	a802      	add	r0, sp, #8
 8017ac6:	4621      	mov	r1, r4
 8017ac8:	f000 f83e 	bl	8017b48 <__kernel_rem_pio2>
 8017acc:	2d00      	cmp	r5, #0
 8017ace:	f6bf af27 	bge.w	8017920 <__ieee754_rem_pio2+0x60>
 8017ad2:	ed94 7b00 	vldr	d7, [r4]
 8017ad6:	eeb1 7b47 	vneg.f64	d7, d7
 8017ada:	ed84 7b00 	vstr	d7, [r4]
 8017ade:	ed94 7b02 	vldr	d7, [r4, #8]
 8017ae2:	eeb1 7b47 	vneg.f64	d7, d7
 8017ae6:	ed84 7b02 	vstr	d7, [r4, #8]
 8017aea:	e79b      	b.n	8017a24 <__ieee754_rem_pio2+0x164>
 8017aec:	f3af 8000 	nop.w
 8017af0:	54400000 	.word	0x54400000
 8017af4:	3ff921fb 	.word	0x3ff921fb
 8017af8:	1a626331 	.word	0x1a626331
 8017afc:	3dd0b461 	.word	0x3dd0b461
 8017b00:	1a600000 	.word	0x1a600000
 8017b04:	3dd0b461 	.word	0x3dd0b461
 8017b08:	2e037073 	.word	0x2e037073
 8017b0c:	3ba3198a 	.word	0x3ba3198a
 8017b10:	6dc9c883 	.word	0x6dc9c883
 8017b14:	3fe45f30 	.word	0x3fe45f30
 8017b18:	2e000000 	.word	0x2e000000
 8017b1c:	3ba3198a 	.word	0x3ba3198a
 8017b20:	252049c1 	.word	0x252049c1
 8017b24:	397b839a 	.word	0x397b839a
 8017b28:	00000000 	.word	0x00000000
 8017b2c:	41700000 	.word	0x41700000
 8017b30:	3fe921fb 	.word	0x3fe921fb
 8017b34:	4002d97b 	.word	0x4002d97b
 8017b38:	413921fb 	.word	0x413921fb
 8017b3c:	08024d40 	.word	0x08024d40
 8017b40:	7fefffff 	.word	0x7fefffff
 8017b44:	08024dc0 	.word	0x08024dc0

08017b48 <__kernel_rem_pio2>:
 8017b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b4c:	ed2d 8b06 	vpush	{d8-d10}
 8017b50:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8017b54:	460f      	mov	r7, r1
 8017b56:	9002      	str	r0, [sp, #8]
 8017b58:	49c3      	ldr	r1, [pc, #780]	; (8017e68 <__kernel_rem_pio2+0x320>)
 8017b5a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8017b5c:	9301      	str	r3, [sp, #4]
 8017b5e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8017b62:	9901      	ldr	r1, [sp, #4]
 8017b64:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8017b66:	f112 0f14 	cmn.w	r2, #20
 8017b6a:	bfa8      	it	ge
 8017b6c:	1ed0      	subge	r0, r2, #3
 8017b6e:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8017b72:	bfaa      	itet	ge
 8017b74:	2418      	movge	r4, #24
 8017b76:	2000      	movlt	r0, #0
 8017b78:	fb90 f0f4 	sdivge	r0, r0, r4
 8017b7c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8017e50 <__kernel_rem_pio2+0x308>
 8017b80:	f06f 0417 	mvn.w	r4, #23
 8017b84:	fb00 4404 	mla	r4, r0, r4, r4
 8017b88:	eba0 060a 	sub.w	r6, r0, sl
 8017b8c:	4414      	add	r4, r2
 8017b8e:	eb09 0c0a 	add.w	ip, r9, sl
 8017b92:	ad1a      	add	r5, sp, #104	; 0x68
 8017b94:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8017b98:	2200      	movs	r2, #0
 8017b9a:	4562      	cmp	r2, ip
 8017b9c:	dd10      	ble.n	8017bc0 <__kernel_rem_pio2+0x78>
 8017b9e:	9a01      	ldr	r2, [sp, #4]
 8017ba0:	a91a      	add	r1, sp, #104	; 0x68
 8017ba2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8017ba6:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8017baa:	f04f 0c00 	mov.w	ip, #0
 8017bae:	45cc      	cmp	ip, r9
 8017bb0:	dc26      	bgt.n	8017c00 <__kernel_rem_pio2+0xb8>
 8017bb2:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8017e50 <__kernel_rem_pio2+0x308>
 8017bb6:	f8dd e008 	ldr.w	lr, [sp, #8]
 8017bba:	4616      	mov	r6, r2
 8017bbc:	2500      	movs	r5, #0
 8017bbe:	e015      	b.n	8017bec <__kernel_rem_pio2+0xa4>
 8017bc0:	42d6      	cmn	r6, r2
 8017bc2:	d409      	bmi.n	8017bd8 <__kernel_rem_pio2+0x90>
 8017bc4:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8017bc8:	ee07 1a90 	vmov	s15, r1
 8017bcc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017bd0:	eca5 7b02 	vstmia	r5!, {d7}
 8017bd4:	3201      	adds	r2, #1
 8017bd6:	e7e0      	b.n	8017b9a <__kernel_rem_pio2+0x52>
 8017bd8:	eeb0 7b46 	vmov.f64	d7, d6
 8017bdc:	e7f8      	b.n	8017bd0 <__kernel_rem_pio2+0x88>
 8017bde:	ecbe 5b02 	vldmia	lr!, {d5}
 8017be2:	ed96 6b00 	vldr	d6, [r6]
 8017be6:	3501      	adds	r5, #1
 8017be8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017bec:	4555      	cmp	r5, sl
 8017bee:	f1a6 0608 	sub.w	r6, r6, #8
 8017bf2:	ddf4      	ble.n	8017bde <__kernel_rem_pio2+0x96>
 8017bf4:	eca8 7b02 	vstmia	r8!, {d7}
 8017bf8:	f10c 0c01 	add.w	ip, ip, #1
 8017bfc:	3208      	adds	r2, #8
 8017bfe:	e7d6      	b.n	8017bae <__kernel_rem_pio2+0x66>
 8017c00:	aa06      	add	r2, sp, #24
 8017c02:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8017e58 <__kernel_rem_pio2+0x310>
 8017c06:	ed9f ab96 	vldr	d10, [pc, #600]	; 8017e60 <__kernel_rem_pio2+0x318>
 8017c0a:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8017c0e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8017c12:	9204      	str	r2, [sp, #16]
 8017c14:	9303      	str	r3, [sp, #12]
 8017c16:	464d      	mov	r5, r9
 8017c18:	00eb      	lsls	r3, r5, #3
 8017c1a:	9305      	str	r3, [sp, #20]
 8017c1c:	ab92      	add	r3, sp, #584	; 0x248
 8017c1e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8017c22:	f10d 0b18 	add.w	fp, sp, #24
 8017c26:	ab6a      	add	r3, sp, #424	; 0x1a8
 8017c28:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8017c2c:	465e      	mov	r6, fp
 8017c2e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8017c32:	4628      	mov	r0, r5
 8017c34:	2800      	cmp	r0, #0
 8017c36:	f1a2 0208 	sub.w	r2, r2, #8
 8017c3a:	dc48      	bgt.n	8017cce <__kernel_rem_pio2+0x186>
 8017c3c:	4620      	mov	r0, r4
 8017c3e:	f000 fc5b 	bl	80184f8 <scalbn>
 8017c42:	eeb0 8b40 	vmov.f64	d8, d0
 8017c46:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8017c4a:	ee28 0b00 	vmul.f64	d0, d8, d0
 8017c4e:	f000 ff43 	bl	8018ad8 <floor>
 8017c52:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8017c56:	eea0 8b47 	vfms.f64	d8, d0, d7
 8017c5a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8017c5e:	2c00      	cmp	r4, #0
 8017c60:	ee17 8a90 	vmov	r8, s15
 8017c64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017c68:	ee38 8b47 	vsub.f64	d8, d8, d7
 8017c6c:	dd41      	ble.n	8017cf2 <__kernel_rem_pio2+0x1aa>
 8017c6e:	1e68      	subs	r0, r5, #1
 8017c70:	ab06      	add	r3, sp, #24
 8017c72:	f1c4 0c18 	rsb	ip, r4, #24
 8017c76:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8017c7a:	fa46 f20c 	asr.w	r2, r6, ip
 8017c7e:	4490      	add	r8, r2
 8017c80:	fa02 f20c 	lsl.w	r2, r2, ip
 8017c84:	1ab6      	subs	r6, r6, r2
 8017c86:	f1c4 0217 	rsb	r2, r4, #23
 8017c8a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8017c8e:	4116      	asrs	r6, r2
 8017c90:	2e00      	cmp	r6, #0
 8017c92:	dd3d      	ble.n	8017d10 <__kernel_rem_pio2+0x1c8>
 8017c94:	f04f 0c00 	mov.w	ip, #0
 8017c98:	f108 0801 	add.w	r8, r8, #1
 8017c9c:	4660      	mov	r0, ip
 8017c9e:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8017ca2:	4565      	cmp	r5, ip
 8017ca4:	dc6a      	bgt.n	8017d7c <__kernel_rem_pio2+0x234>
 8017ca6:	2c00      	cmp	r4, #0
 8017ca8:	dd04      	ble.n	8017cb4 <__kernel_rem_pio2+0x16c>
 8017caa:	2c01      	cmp	r4, #1
 8017cac:	d07b      	beq.n	8017da6 <__kernel_rem_pio2+0x25e>
 8017cae:	2c02      	cmp	r4, #2
 8017cb0:	f000 8083 	beq.w	8017dba <__kernel_rem_pio2+0x272>
 8017cb4:	2e02      	cmp	r6, #2
 8017cb6:	d12b      	bne.n	8017d10 <__kernel_rem_pio2+0x1c8>
 8017cb8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017cbc:	ee30 8b48 	vsub.f64	d8, d0, d8
 8017cc0:	b330      	cbz	r0, 8017d10 <__kernel_rem_pio2+0x1c8>
 8017cc2:	4620      	mov	r0, r4
 8017cc4:	f000 fc18 	bl	80184f8 <scalbn>
 8017cc8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8017ccc:	e020      	b.n	8017d10 <__kernel_rem_pio2+0x1c8>
 8017cce:	ee20 7b09 	vmul.f64	d7, d0, d9
 8017cd2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017cd6:	3801      	subs	r0, #1
 8017cd8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8017cdc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8017ce0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017ce4:	eca6 0a01 	vstmia	r6!, {s0}
 8017ce8:	ed92 0b00 	vldr	d0, [r2]
 8017cec:	ee37 0b00 	vadd.f64	d0, d7, d0
 8017cf0:	e7a0      	b.n	8017c34 <__kernel_rem_pio2+0xec>
 8017cf2:	d105      	bne.n	8017d00 <__kernel_rem_pio2+0x1b8>
 8017cf4:	1e6a      	subs	r2, r5, #1
 8017cf6:	ab06      	add	r3, sp, #24
 8017cf8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017cfc:	15f6      	asrs	r6, r6, #23
 8017cfe:	e7c7      	b.n	8017c90 <__kernel_rem_pio2+0x148>
 8017d00:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017d04:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d0c:	da34      	bge.n	8017d78 <__kernel_rem_pio2+0x230>
 8017d0e:	2600      	movs	r6, #0
 8017d10:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d18:	f040 80aa 	bne.w	8017e70 <__kernel_rem_pio2+0x328>
 8017d1c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8017d20:	4658      	mov	r0, fp
 8017d22:	2200      	movs	r2, #0
 8017d24:	4548      	cmp	r0, r9
 8017d26:	da50      	bge.n	8017dca <__kernel_rem_pio2+0x282>
 8017d28:	2a00      	cmp	r2, #0
 8017d2a:	d06b      	beq.n	8017e04 <__kernel_rem_pio2+0x2bc>
 8017d2c:	ab06      	add	r3, sp, #24
 8017d2e:	3c18      	subs	r4, #24
 8017d30:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	f000 8087 	beq.w	8017e48 <__kernel_rem_pio2+0x300>
 8017d3a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017d3e:	4620      	mov	r0, r4
 8017d40:	f000 fbda 	bl	80184f8 <scalbn>
 8017d44:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8017e58 <__kernel_rem_pio2+0x310>
 8017d48:	f10b 0201 	add.w	r2, fp, #1
 8017d4c:	a96a      	add	r1, sp, #424	; 0x1a8
 8017d4e:	00d3      	lsls	r3, r2, #3
 8017d50:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017d54:	465a      	mov	r2, fp
 8017d56:	2a00      	cmp	r2, #0
 8017d58:	f280 80b8 	bge.w	8017ecc <__kernel_rem_pio2+0x384>
 8017d5c:	465a      	mov	r2, fp
 8017d5e:	2a00      	cmp	r2, #0
 8017d60:	f2c0 80d6 	blt.w	8017f10 <__kernel_rem_pio2+0x3c8>
 8017d64:	a96a      	add	r1, sp, #424	; 0x1a8
 8017d66:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8017d6a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8017e50 <__kernel_rem_pio2+0x308>
 8017d6e:	4d3f      	ldr	r5, [pc, #252]	; (8017e6c <__kernel_rem_pio2+0x324>)
 8017d70:	2000      	movs	r0, #0
 8017d72:	ebab 0102 	sub.w	r1, fp, r2
 8017d76:	e0c0      	b.n	8017efa <__kernel_rem_pio2+0x3b2>
 8017d78:	2602      	movs	r6, #2
 8017d7a:	e78b      	b.n	8017c94 <__kernel_rem_pio2+0x14c>
 8017d7c:	f8db 2000 	ldr.w	r2, [fp]
 8017d80:	b958      	cbnz	r0, 8017d9a <__kernel_rem_pio2+0x252>
 8017d82:	b122      	cbz	r2, 8017d8e <__kernel_rem_pio2+0x246>
 8017d84:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8017d88:	f8cb 2000 	str.w	r2, [fp]
 8017d8c:	2201      	movs	r2, #1
 8017d8e:	f10c 0c01 	add.w	ip, ip, #1
 8017d92:	f10b 0b04 	add.w	fp, fp, #4
 8017d96:	4610      	mov	r0, r2
 8017d98:	e783      	b.n	8017ca2 <__kernel_rem_pio2+0x15a>
 8017d9a:	ebae 0202 	sub.w	r2, lr, r2
 8017d9e:	f8cb 2000 	str.w	r2, [fp]
 8017da2:	4602      	mov	r2, r0
 8017da4:	e7f3      	b.n	8017d8e <__kernel_rem_pio2+0x246>
 8017da6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8017daa:	ab06      	add	r3, sp, #24
 8017dac:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8017db0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8017db4:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8017db8:	e77c      	b.n	8017cb4 <__kernel_rem_pio2+0x16c>
 8017dba:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8017dbe:	ab06      	add	r3, sp, #24
 8017dc0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8017dc4:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8017dc8:	e7f4      	b.n	8017db4 <__kernel_rem_pio2+0x26c>
 8017dca:	ab06      	add	r3, sp, #24
 8017dcc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017dd0:	3801      	subs	r0, #1
 8017dd2:	431a      	orrs	r2, r3
 8017dd4:	e7a6      	b.n	8017d24 <__kernel_rem_pio2+0x1dc>
 8017dd6:	3201      	adds	r2, #1
 8017dd8:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8017ddc:	2e00      	cmp	r6, #0
 8017dde:	d0fa      	beq.n	8017dd6 <__kernel_rem_pio2+0x28e>
 8017de0:	9b05      	ldr	r3, [sp, #20]
 8017de2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8017de6:	eb0d 0003 	add.w	r0, sp, r3
 8017dea:	9b01      	ldr	r3, [sp, #4]
 8017dec:	18ee      	adds	r6, r5, r3
 8017dee:	ab1a      	add	r3, sp, #104	; 0x68
 8017df0:	f105 0c01 	add.w	ip, r5, #1
 8017df4:	3898      	subs	r0, #152	; 0x98
 8017df6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8017dfa:	442a      	add	r2, r5
 8017dfc:	4562      	cmp	r2, ip
 8017dfe:	da04      	bge.n	8017e0a <__kernel_rem_pio2+0x2c2>
 8017e00:	4615      	mov	r5, r2
 8017e02:	e709      	b.n	8017c18 <__kernel_rem_pio2+0xd0>
 8017e04:	9804      	ldr	r0, [sp, #16]
 8017e06:	2201      	movs	r2, #1
 8017e08:	e7e6      	b.n	8017dd8 <__kernel_rem_pio2+0x290>
 8017e0a:	9b03      	ldr	r3, [sp, #12]
 8017e0c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8017e10:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8017e14:	9305      	str	r3, [sp, #20]
 8017e16:	ee07 3a90 	vmov	s15, r3
 8017e1a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017e1e:	2500      	movs	r5, #0
 8017e20:	eca6 7b02 	vstmia	r6!, {d7}
 8017e24:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8017e50 <__kernel_rem_pio2+0x308>
 8017e28:	46b0      	mov	r8, r6
 8017e2a:	4555      	cmp	r5, sl
 8017e2c:	dd04      	ble.n	8017e38 <__kernel_rem_pio2+0x2f0>
 8017e2e:	eca0 7b02 	vstmia	r0!, {d7}
 8017e32:	f10c 0c01 	add.w	ip, ip, #1
 8017e36:	e7e1      	b.n	8017dfc <__kernel_rem_pio2+0x2b4>
 8017e38:	ecbe 5b02 	vldmia	lr!, {d5}
 8017e3c:	ed38 6b02 	vldmdb	r8!, {d6}
 8017e40:	3501      	adds	r5, #1
 8017e42:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017e46:	e7f0      	b.n	8017e2a <__kernel_rem_pio2+0x2e2>
 8017e48:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017e4c:	e76e      	b.n	8017d2c <__kernel_rem_pio2+0x1e4>
 8017e4e:	bf00      	nop
	...
 8017e5c:	3e700000 	.word	0x3e700000
 8017e60:	00000000 	.word	0x00000000
 8017e64:	41700000 	.word	0x41700000
 8017e68:	08025030 	.word	0x08025030
 8017e6c:	08024ff0 	.word	0x08024ff0
 8017e70:	4260      	negs	r0, r4
 8017e72:	eeb0 0b48 	vmov.f64	d0, d8
 8017e76:	f000 fb3f 	bl	80184f8 <scalbn>
 8017e7a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8018058 <__kernel_rem_pio2+0x510>
 8017e7e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8017e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e86:	db18      	blt.n	8017eba <__kernel_rem_pio2+0x372>
 8017e88:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8018060 <__kernel_rem_pio2+0x518>
 8017e8c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017e90:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017e94:	aa06      	add	r2, sp, #24
 8017e96:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8017e9a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8017e9e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017ea2:	f105 0b01 	add.w	fp, r5, #1
 8017ea6:	ee10 3a10 	vmov	r3, s0
 8017eaa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8017eae:	ee17 3a10 	vmov	r3, s14
 8017eb2:	3418      	adds	r4, #24
 8017eb4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8017eb8:	e73f      	b.n	8017d3a <__kernel_rem_pio2+0x1f2>
 8017eba:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017ebe:	aa06      	add	r2, sp, #24
 8017ec0:	ee10 3a10 	vmov	r3, s0
 8017ec4:	46ab      	mov	fp, r5
 8017ec6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8017eca:	e736      	b.n	8017d3a <__kernel_rem_pio2+0x1f2>
 8017ecc:	a806      	add	r0, sp, #24
 8017ece:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8017ed2:	9001      	str	r0, [sp, #4]
 8017ed4:	ee07 0a90 	vmov	s15, r0
 8017ed8:	3a01      	subs	r2, #1
 8017eda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017ede:	ee27 7b00 	vmul.f64	d7, d7, d0
 8017ee2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8017ee6:	ed21 7b02 	vstmdb	r1!, {d7}
 8017eea:	e734      	b.n	8017d56 <__kernel_rem_pio2+0x20e>
 8017eec:	ecb5 5b02 	vldmia	r5!, {d5}
 8017ef0:	ecb4 6b02 	vldmia	r4!, {d6}
 8017ef4:	3001      	adds	r0, #1
 8017ef6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017efa:	4548      	cmp	r0, r9
 8017efc:	dc01      	bgt.n	8017f02 <__kernel_rem_pio2+0x3ba>
 8017efe:	4288      	cmp	r0, r1
 8017f00:	ddf4      	ble.n	8017eec <__kernel_rem_pio2+0x3a4>
 8017f02:	a842      	add	r0, sp, #264	; 0x108
 8017f04:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8017f08:	ed81 7b00 	vstr	d7, [r1]
 8017f0c:	3a01      	subs	r2, #1
 8017f0e:	e726      	b.n	8017d5e <__kernel_rem_pio2+0x216>
 8017f10:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8017f12:	2a02      	cmp	r2, #2
 8017f14:	dc0a      	bgt.n	8017f2c <__kernel_rem_pio2+0x3e4>
 8017f16:	2a00      	cmp	r2, #0
 8017f18:	dc2e      	bgt.n	8017f78 <__kernel_rem_pio2+0x430>
 8017f1a:	d047      	beq.n	8017fac <__kernel_rem_pio2+0x464>
 8017f1c:	f008 0007 	and.w	r0, r8, #7
 8017f20:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8017f24:	ecbd 8b06 	vpop	{d8-d10}
 8017f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f2c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8017f2e:	2a03      	cmp	r2, #3
 8017f30:	d1f4      	bne.n	8017f1c <__kernel_rem_pio2+0x3d4>
 8017f32:	a942      	add	r1, sp, #264	; 0x108
 8017f34:	f1a3 0208 	sub.w	r2, r3, #8
 8017f38:	440a      	add	r2, r1
 8017f3a:	4611      	mov	r1, r2
 8017f3c:	4658      	mov	r0, fp
 8017f3e:	2800      	cmp	r0, #0
 8017f40:	f1a1 0108 	sub.w	r1, r1, #8
 8017f44:	dc55      	bgt.n	8017ff2 <__kernel_rem_pio2+0x4aa>
 8017f46:	4659      	mov	r1, fp
 8017f48:	2901      	cmp	r1, #1
 8017f4a:	f1a2 0208 	sub.w	r2, r2, #8
 8017f4e:	dc60      	bgt.n	8018012 <__kernel_rem_pio2+0x4ca>
 8017f50:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8018068 <__kernel_rem_pio2+0x520>
 8017f54:	aa42      	add	r2, sp, #264	; 0x108
 8017f56:	4413      	add	r3, r2
 8017f58:	f1bb 0f01 	cmp.w	fp, #1
 8017f5c:	dc69      	bgt.n	8018032 <__kernel_rem_pio2+0x4ea>
 8017f5e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8017f62:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8017f66:	2e00      	cmp	r6, #0
 8017f68:	d16a      	bne.n	8018040 <__kernel_rem_pio2+0x4f8>
 8017f6a:	ed87 5b00 	vstr	d5, [r7]
 8017f6e:	ed87 6b02 	vstr	d6, [r7, #8]
 8017f72:	ed87 7b04 	vstr	d7, [r7, #16]
 8017f76:	e7d1      	b.n	8017f1c <__kernel_rem_pio2+0x3d4>
 8017f78:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8018068 <__kernel_rem_pio2+0x520>
 8017f7c:	aa42      	add	r2, sp, #264	; 0x108
 8017f7e:	4413      	add	r3, r2
 8017f80:	465a      	mov	r2, fp
 8017f82:	2a00      	cmp	r2, #0
 8017f84:	da26      	bge.n	8017fd4 <__kernel_rem_pio2+0x48c>
 8017f86:	b35e      	cbz	r6, 8017fe0 <__kernel_rem_pio2+0x498>
 8017f88:	eeb1 7b46 	vneg.f64	d7, d6
 8017f8c:	ed87 7b00 	vstr	d7, [r7]
 8017f90:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8017f94:	aa44      	add	r2, sp, #272	; 0x110
 8017f96:	2301      	movs	r3, #1
 8017f98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017f9c:	459b      	cmp	fp, r3
 8017f9e:	da22      	bge.n	8017fe6 <__kernel_rem_pio2+0x49e>
 8017fa0:	b10e      	cbz	r6, 8017fa6 <__kernel_rem_pio2+0x45e>
 8017fa2:	eeb1 7b47 	vneg.f64	d7, d7
 8017fa6:	ed87 7b02 	vstr	d7, [r7, #8]
 8017faa:	e7b7      	b.n	8017f1c <__kernel_rem_pio2+0x3d4>
 8017fac:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018068 <__kernel_rem_pio2+0x520>
 8017fb0:	aa42      	add	r2, sp, #264	; 0x108
 8017fb2:	4413      	add	r3, r2
 8017fb4:	f1bb 0f00 	cmp.w	fp, #0
 8017fb8:	da05      	bge.n	8017fc6 <__kernel_rem_pio2+0x47e>
 8017fba:	b10e      	cbz	r6, 8017fc0 <__kernel_rem_pio2+0x478>
 8017fbc:	eeb1 7b47 	vneg.f64	d7, d7
 8017fc0:	ed87 7b00 	vstr	d7, [r7]
 8017fc4:	e7aa      	b.n	8017f1c <__kernel_rem_pio2+0x3d4>
 8017fc6:	ed33 6b02 	vldmdb	r3!, {d6}
 8017fca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017fce:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017fd2:	e7ef      	b.n	8017fb4 <__kernel_rem_pio2+0x46c>
 8017fd4:	ed33 7b02 	vldmdb	r3!, {d7}
 8017fd8:	3a01      	subs	r2, #1
 8017fda:	ee36 6b07 	vadd.f64	d6, d6, d7
 8017fde:	e7d0      	b.n	8017f82 <__kernel_rem_pio2+0x43a>
 8017fe0:	eeb0 7b46 	vmov.f64	d7, d6
 8017fe4:	e7d2      	b.n	8017f8c <__kernel_rem_pio2+0x444>
 8017fe6:	ecb2 6b02 	vldmia	r2!, {d6}
 8017fea:	3301      	adds	r3, #1
 8017fec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017ff0:	e7d4      	b.n	8017f9c <__kernel_rem_pio2+0x454>
 8017ff2:	ed91 7b00 	vldr	d7, [r1]
 8017ff6:	ed91 5b02 	vldr	d5, [r1, #8]
 8017ffa:	3801      	subs	r0, #1
 8017ffc:	ee37 6b05 	vadd.f64	d6, d7, d5
 8018000:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018004:	ed81 6b00 	vstr	d6, [r1]
 8018008:	ee37 7b05 	vadd.f64	d7, d7, d5
 801800c:	ed81 7b02 	vstr	d7, [r1, #8]
 8018010:	e795      	b.n	8017f3e <__kernel_rem_pio2+0x3f6>
 8018012:	ed92 7b00 	vldr	d7, [r2]
 8018016:	ed92 5b02 	vldr	d5, [r2, #8]
 801801a:	3901      	subs	r1, #1
 801801c:	ee37 6b05 	vadd.f64	d6, d7, d5
 8018020:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018024:	ed82 6b00 	vstr	d6, [r2]
 8018028:	ee37 7b05 	vadd.f64	d7, d7, d5
 801802c:	ed82 7b02 	vstr	d7, [r2, #8]
 8018030:	e78a      	b.n	8017f48 <__kernel_rem_pio2+0x400>
 8018032:	ed33 6b02 	vldmdb	r3!, {d6}
 8018036:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801803a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801803e:	e78b      	b.n	8017f58 <__kernel_rem_pio2+0x410>
 8018040:	eeb1 5b45 	vneg.f64	d5, d5
 8018044:	eeb1 6b46 	vneg.f64	d6, d6
 8018048:	ed87 5b00 	vstr	d5, [r7]
 801804c:	eeb1 7b47 	vneg.f64	d7, d7
 8018050:	ed87 6b02 	vstr	d6, [r7, #8]
 8018054:	e78d      	b.n	8017f72 <__kernel_rem_pio2+0x42a>
 8018056:	bf00      	nop
 8018058:	00000000 	.word	0x00000000
 801805c:	41700000 	.word	0x41700000
 8018060:	00000000 	.word	0x00000000
 8018064:	3e700000 	.word	0x3e700000
	...

08018070 <__kernel_tan>:
 8018070:	eeb0 7b40 	vmov.f64	d7, d0
 8018074:	ee17 3a90 	vmov	r3, s15
 8018078:	4989      	ldr	r1, [pc, #548]	; (80182a0 <__kernel_tan+0x230>)
 801807a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801807e:	428a      	cmp	r2, r1
 8018080:	b510      	push	{r4, lr}
 8018082:	dc33      	bgt.n	80180ec <__kernel_tan+0x7c>
 8018084:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8018088:	ee16 1a90 	vmov	r1, s13
 801808c:	2900      	cmp	r1, #0
 801808e:	d143      	bne.n	8018118 <__kernel_tan+0xa8>
 8018090:	ee10 4a10 	vmov	r4, s0
 8018094:	1c43      	adds	r3, r0, #1
 8018096:	4323      	orrs	r3, r4
 8018098:	4313      	orrs	r3, r2
 801809a:	d108      	bne.n	80180ae <__kernel_tan+0x3e>
 801809c:	f000 fa20 	bl	80184e0 <fabs>
 80180a0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80180a4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80180a8:	eeb0 0b47 	vmov.f64	d0, d7
 80180ac:	bd10      	pop	{r4, pc}
 80180ae:	2801      	cmp	r0, #1
 80180b0:	d0fa      	beq.n	80180a8 <__kernel_tan+0x38>
 80180b2:	ee30 6b01 	vadd.f64	d6, d0, d1
 80180b6:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80180ba:	ec53 2b16 	vmov	r2, r3, d6
 80180be:	ee87 3b06 	vdiv.f64	d3, d7, d6
 80180c2:	460a      	mov	r2, r1
 80180c4:	ec43 2b15 	vmov	d5, r2, r3
 80180c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80180cc:	ec53 2b13 	vmov	r2, r3, d3
 80180d0:	ee35 4b40 	vsub.f64	d4, d5, d0
 80180d4:	460a      	mov	r2, r1
 80180d6:	ec43 2b17 	vmov	d7, r2, r3
 80180da:	ee31 4b44 	vsub.f64	d4, d1, d4
 80180de:	eea5 6b07 	vfma.f64	d6, d5, d7
 80180e2:	eea4 6b07 	vfma.f64	d6, d4, d7
 80180e6:	eea6 7b03 	vfma.f64	d7, d6, d3
 80180ea:	e7dd      	b.n	80180a8 <__kernel_tan+0x38>
 80180ec:	496d      	ldr	r1, [pc, #436]	; (80182a4 <__kernel_tan+0x234>)
 80180ee:	428a      	cmp	r2, r1
 80180f0:	dd12      	ble.n	8018118 <__kernel_tan+0xa8>
 80180f2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8018220 <__kernel_tan+0x1b0>
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	bfb8      	it	lt
 80180fa:	eeb1 7b40 	vneglt.f64	d7, d0
 80180fe:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018102:	ed9f 7b49 	vldr	d7, [pc, #292]	; 8018228 <__kernel_tan+0x1b8>
 8018106:	bfb8      	it	lt
 8018108:	eeb1 1b41 	vneglt.f64	d1, d1
 801810c:	ee37 7b41 	vsub.f64	d7, d7, d1
 8018110:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8018230 <__kernel_tan+0x1c0>
 8018114:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018118:	ee27 5b07 	vmul.f64	d5, d7, d7
 801811c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8018238 <__kernel_tan+0x1c8>
 8018120:	ee25 6b05 	vmul.f64	d6, d5, d5
 8018124:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8018240 <__kernel_tan+0x1d0>
 8018128:	eea6 4b03 	vfma.f64	d4, d6, d3
 801812c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8018248 <__kernel_tan+0x1d8>
 8018130:	eea4 3b06 	vfma.f64	d3, d4, d6
 8018134:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8018250 <__kernel_tan+0x1e0>
 8018138:	eea3 4b06 	vfma.f64	d4, d3, d6
 801813c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8018258 <__kernel_tan+0x1e8>
 8018140:	eea4 3b06 	vfma.f64	d3, d4, d6
 8018144:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8018260 <__kernel_tan+0x1f0>
 8018148:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8018268 <__kernel_tan+0x1f8>
 801814c:	eea3 4b06 	vfma.f64	d4, d3, d6
 8018150:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8018270 <__kernel_tan+0x200>
 8018154:	eea6 3b02 	vfma.f64	d3, d6, d2
 8018158:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8018278 <__kernel_tan+0x208>
 801815c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8018160:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8018280 <__kernel_tan+0x210>
 8018164:	eea2 3b06 	vfma.f64	d3, d2, d6
 8018168:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8018288 <__kernel_tan+0x218>
 801816c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8018170:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8018290 <__kernel_tan+0x220>
 8018174:	494b      	ldr	r1, [pc, #300]	; (80182a4 <__kernel_tan+0x234>)
 8018176:	eea2 3b06 	vfma.f64	d3, d2, d6
 801817a:	ee27 2b05 	vmul.f64	d2, d7, d5
 801817e:	eeb0 6b44 	vmov.f64	d6, d4
 8018182:	eeb0 4b41 	vmov.f64	d4, d1
 8018186:	eea3 6b05 	vfma.f64	d6, d3, d5
 801818a:	eea6 4b02 	vfma.f64	d4, d6, d2
 801818e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8018298 <__kernel_tan+0x228>
 8018192:	eea4 1b05 	vfma.f64	d1, d4, d5
 8018196:	428a      	cmp	r2, r1
 8018198:	eea2 1b06 	vfma.f64	d1, d2, d6
 801819c:	ee37 5b01 	vadd.f64	d5, d7, d1
 80181a0:	dd1d      	ble.n	80181de <__kernel_tan+0x16e>
 80181a2:	ee25 3b05 	vmul.f64	d3, d5, d5
 80181a6:	179b      	asrs	r3, r3, #30
 80181a8:	ee06 0a90 	vmov	s13, r0
 80181ac:	f003 0302 	and.w	r3, r3, #2
 80181b0:	f1c3 0301 	rsb	r3, r3, #1
 80181b4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80181b8:	ee35 5b06 	vadd.f64	d5, d5, d6
 80181bc:	ee83 4b05 	vdiv.f64	d4, d3, d5
 80181c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80181c4:	ee34 4b41 	vsub.f64	d4, d4, d1
 80181c8:	ee37 7b44 	vsub.f64	d7, d7, d4
 80181cc:	eea7 6b45 	vfms.f64	d6, d7, d5
 80181d0:	ee07 3a90 	vmov	s15, r3
 80181d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80181d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80181dc:	e764      	b.n	80180a8 <__kernel_tan+0x38>
 80181de:	2801      	cmp	r0, #1
 80181e0:	d01a      	beq.n	8018218 <__kernel_tan+0x1a8>
 80181e2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80181e6:	ec51 0b15 	vmov	r0, r1, d5
 80181ea:	2000      	movs	r0, #0
 80181ec:	ec41 0b13 	vmov	d3, r0, r1
 80181f0:	ee33 7b47 	vsub.f64	d7, d3, d7
 80181f4:	ee31 1b47 	vsub.f64	d1, d1, d7
 80181f8:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80181fc:	ee87 4b05 	vdiv.f64	d4, d7, d5
 8018200:	ec53 2b14 	vmov	r2, r3, d4
 8018204:	4602      	mov	r2, r0
 8018206:	ec43 2b17 	vmov	d7, r2, r3
 801820a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801820e:	eea1 6b07 	vfma.f64	d6, d1, d7
 8018212:	eea6 7b04 	vfma.f64	d7, d6, d4
 8018216:	e747      	b.n	80180a8 <__kernel_tan+0x38>
 8018218:	eeb0 7b45 	vmov.f64	d7, d5
 801821c:	e744      	b.n	80180a8 <__kernel_tan+0x38>
 801821e:	bf00      	nop
 8018220:	54442d18 	.word	0x54442d18
 8018224:	3fe921fb 	.word	0x3fe921fb
 8018228:	33145c07 	.word	0x33145c07
 801822c:	3c81a626 	.word	0x3c81a626
	...
 8018238:	db605373 	.word	0xdb605373
 801823c:	bef375cb 	.word	0xbef375cb
 8018240:	a03792a6 	.word	0xa03792a6
 8018244:	3f147e88 	.word	0x3f147e88
 8018248:	f2f26501 	.word	0xf2f26501
 801824c:	3f4344d8 	.word	0x3f4344d8
 8018250:	c9560328 	.word	0xc9560328
 8018254:	3f6d6d22 	.word	0x3f6d6d22
 8018258:	8406d637 	.word	0x8406d637
 801825c:	3f9664f4 	.word	0x3f9664f4
 8018260:	1110fe7a 	.word	0x1110fe7a
 8018264:	3fc11111 	.word	0x3fc11111
 8018268:	74bf7ad4 	.word	0x74bf7ad4
 801826c:	3efb2a70 	.word	0x3efb2a70
 8018270:	32f0a7e9 	.word	0x32f0a7e9
 8018274:	3f12b80f 	.word	0x3f12b80f
 8018278:	1a8d1068 	.word	0x1a8d1068
 801827c:	3f3026f7 	.word	0x3f3026f7
 8018280:	fee08315 	.word	0xfee08315
 8018284:	3f57dbc8 	.word	0x3f57dbc8
 8018288:	e96e8493 	.word	0xe96e8493
 801828c:	3f8226e3 	.word	0x3f8226e3
 8018290:	1bb341fe 	.word	0x1bb341fe
 8018294:	3faba1ba 	.word	0x3faba1ba
 8018298:	55555563 	.word	0x55555563
 801829c:	3fd55555 	.word	0x3fd55555
 80182a0:	3e2fffff 	.word	0x3e2fffff
 80182a4:	3fe59427 	.word	0x3fe59427

080182a8 <expm1f>:
 80182a8:	ee10 2a10 	vmov	r2, s0
 80182ac:	497d      	ldr	r1, [pc, #500]	; (80184a4 <expm1f+0x1fc>)
 80182ae:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80182b2:	428b      	cmp	r3, r1
 80182b4:	d920      	bls.n	80182f8 <expm1f+0x50>
 80182b6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80182ba:	d902      	bls.n	80182c2 <expm1f+0x1a>
 80182bc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80182c0:	4770      	bx	lr
 80182c2:	d105      	bne.n	80182d0 <expm1f+0x28>
 80182c4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80182c8:	2a00      	cmp	r2, #0
 80182ca:	fe20 0a27 	vselge.f32	s0, s0, s15
 80182ce:	4770      	bx	lr
 80182d0:	2a00      	cmp	r2, #0
 80182d2:	db05      	blt.n	80182e0 <expm1f+0x38>
 80182d4:	4974      	ldr	r1, [pc, #464]	; (80184a8 <expm1f+0x200>)
 80182d6:	428b      	cmp	r3, r1
 80182d8:	d95c      	bls.n	8018394 <expm1f+0xec>
 80182da:	2000      	movs	r0, #0
 80182dc:	f7fe bf3e 	b.w	801715c <__math_oflowf>
 80182e0:	eddf 7a72 	vldr	s15, [pc, #456]	; 80184ac <expm1f+0x204>
 80182e4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80182e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80182ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182f0:	d550      	bpl.n	8018394 <expm1f+0xec>
 80182f2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80182f6:	4770      	bx	lr
 80182f8:	496d      	ldr	r1, [pc, #436]	; (80184b0 <expm1f+0x208>)
 80182fa:	428b      	cmp	r3, r1
 80182fc:	d966      	bls.n	80183cc <expm1f+0x124>
 80182fe:	496d      	ldr	r1, [pc, #436]	; (80184b4 <expm1f+0x20c>)
 8018300:	428b      	cmp	r3, r1
 8018302:	d847      	bhi.n	8018394 <expm1f+0xec>
 8018304:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80184b8 <expm1f+0x210>
 8018308:	2a00      	cmp	r2, #0
 801830a:	bfa7      	ittee	ge
 801830c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8018310:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 80184bc <expm1f+0x214>
 8018314:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 80184c0 <expm1f+0x218>
 8018318:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801831c:	bfac      	ite	ge
 801831e:	2301      	movge	r3, #1
 8018320:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018324:	ee37 0a66 	vsub.f32	s0, s14, s13
 8018328:	ee77 7a40 	vsub.f32	s15, s14, s0
 801832c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018330:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8018334:	ee20 4a25 	vmul.f32	s8, s0, s11
 8018338:	ed9f 6a62 	vldr	s12, [pc, #392]	; 80184c4 <expm1f+0x21c>
 801833c:	eddf 6a62 	vldr	s13, [pc, #392]	; 80184c8 <expm1f+0x220>
 8018340:	ed9f 5a62 	vldr	s10, [pc, #392]	; 80184cc <expm1f+0x224>
 8018344:	ee20 7a04 	vmul.f32	s14, s0, s8
 8018348:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801834c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8018350:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 80184d0 <expm1f+0x228>
 8018354:	eea6 6a87 	vfma.f32	s12, s13, s14
 8018358:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80184d4 <expm1f+0x22c>
 801835c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018360:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8018364:	eea6 5a87 	vfma.f32	s10, s13, s14
 8018368:	eef0 6a46 	vmov.f32	s13, s12
 801836c:	eee5 6a07 	vfma.f32	s13, s10, s14
 8018370:	eee4 4a66 	vfms.f32	s9, s8, s13
 8018374:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8018378:	eea0 4a64 	vfms.f32	s8, s0, s9
 801837c:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8018380:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8018384:	ee66 6a87 	vmul.f32	s13, s13, s14
 8018388:	bb73      	cbnz	r3, 80183e8 <expm1f+0x140>
 801838a:	ee90 7a26 	vfnms.f32	s14, s0, s13
 801838e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018392:	4770      	bx	lr
 8018394:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8018398:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801839c:	2a00      	cmp	r2, #0
 801839e:	fe67 7a87 	vselge.f32	s15, s15, s14
 80183a2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80184d8 <expm1f+0x230>
 80183a6:	ee40 7a07 	vmla.f32	s15, s0, s14
 80183aa:	eeb0 7a40 	vmov.f32	s14, s0
 80183ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80183b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80183b6:	ee17 3a90 	vmov	r3, s15
 80183ba:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80184b8 <expm1f+0x210>
 80183be:	eea6 7ae7 	vfms.f32	s14, s13, s15
 80183c2:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80184bc <expm1f+0x214>
 80183c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80183ca:	e7ab      	b.n	8018324 <expm1f+0x7c>
 80183cc:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80183d0:	d208      	bcs.n	80183e4 <expm1f+0x13c>
 80183d2:	eddf 7a42 	vldr	s15, [pc, #264]	; 80184dc <expm1f+0x234>
 80183d6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80183da:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80183de:	ee30 0a67 	vsub.f32	s0, s0, s15
 80183e2:	4770      	bx	lr
 80183e4:	2300      	movs	r3, #0
 80183e6:	e7a3      	b.n	8018330 <expm1f+0x88>
 80183e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80183ec:	1c5a      	adds	r2, r3, #1
 80183ee:	eed6 7a80 	vfnms.f32	s15, s13, s0
 80183f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80183f6:	d106      	bne.n	8018406 <expm1f+0x15e>
 80183f8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80183fc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018400:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8018404:	4770      	bx	lr
 8018406:	2b01      	cmp	r3, #1
 8018408:	d118      	bne.n	801843c <expm1f+0x194>
 801840a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801840e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8018412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018416:	bf5b      	ittet	pl
 8018418:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 801841c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8018420:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 8018424:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8018428:	bf43      	ittte	mi
 801842a:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 801842e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8018432:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8018436:	eeb0 0a46 	vmovpl.f32	s0, s12
 801843a:	4770      	bx	lr
 801843c:	1c5a      	adds	r2, r3, #1
 801843e:	2a39      	cmp	r2, #57	; 0x39
 8018440:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8018444:	d90b      	bls.n	801845e <expm1f+0x1b6>
 8018446:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801844a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801844e:	ee17 3a90 	vmov	r3, s15
 8018452:	4419      	add	r1, r3
 8018454:	ee07 1a90 	vmov	s15, r1
 8018458:	ee37 0ac6 	vsub.f32	s0, s15, s12
 801845c:	4770      	bx	lr
 801845e:	2b16      	cmp	r3, #22
 8018460:	dc11      	bgt.n	8018486 <expm1f+0x1de>
 8018462:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018466:	fa42 f303 	asr.w	r3, r2, r3
 801846a:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801846e:	ee07 3a10 	vmov	s14, r3
 8018472:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8018476:	ee77 7a67 	vsub.f32	s15, s14, s15
 801847a:	ee17 3a90 	vmov	r3, s15
 801847e:	440b      	add	r3, r1
 8018480:	ee00 3a10 	vmov	s0, r3
 8018484:	4770      	bx	lr
 8018486:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801848a:	05db      	lsls	r3, r3, #23
 801848c:	ee07 3a10 	vmov	s14, r3
 8018490:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018494:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018498:	ee77 7a86 	vadd.f32	s15, s15, s12
 801849c:	ee17 3a90 	vmov	r3, s15
 80184a0:	e7ed      	b.n	801847e <expm1f+0x1d6>
 80184a2:	bf00      	nop
 80184a4:	4195b843 	.word	0x4195b843
 80184a8:	42b17217 	.word	0x42b17217
 80184ac:	0da24260 	.word	0x0da24260
 80184b0:	3eb17218 	.word	0x3eb17218
 80184b4:	3f851591 	.word	0x3f851591
 80184b8:	3f317180 	.word	0x3f317180
 80184bc:	3717f7d1 	.word	0x3717f7d1
 80184c0:	b717f7d1 	.word	0xb717f7d1
 80184c4:	b457edbb 	.word	0xb457edbb
 80184c8:	36867e54 	.word	0x36867e54
 80184cc:	bd088889 	.word	0xbd088889
 80184d0:	b8a670cd 	.word	0xb8a670cd
 80184d4:	3ad00d01 	.word	0x3ad00d01
 80184d8:	3fb8aa3b 	.word	0x3fb8aa3b
 80184dc:	7149f2ca 	.word	0x7149f2ca

080184e0 <fabs>:
 80184e0:	ec51 0b10 	vmov	r0, r1, d0
 80184e4:	ee10 2a10 	vmov	r2, s0
 80184e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80184ec:	ec43 2b10 	vmov	d0, r2, r3
 80184f0:	4770      	bx	lr
 80184f2:	0000      	movs	r0, r0
 80184f4:	0000      	movs	r0, r0
	...

080184f8 <scalbn>:
 80184f8:	ee10 1a90 	vmov	r1, s1
 80184fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018500:	b98b      	cbnz	r3, 8018526 <scalbn+0x2e>
 8018502:	ee10 3a10 	vmov	r3, s0
 8018506:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801850a:	4319      	orrs	r1, r3
 801850c:	d00a      	beq.n	8018524 <scalbn+0x2c>
 801850e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80185c0 <scalbn+0xc8>
 8018512:	4b37      	ldr	r3, [pc, #220]	; (80185f0 <scalbn+0xf8>)
 8018514:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018518:	4298      	cmp	r0, r3
 801851a:	da0b      	bge.n	8018534 <scalbn+0x3c>
 801851c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 80185c8 <scalbn+0xd0>
 8018520:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018524:	4770      	bx	lr
 8018526:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801852a:	4293      	cmp	r3, r2
 801852c:	d107      	bne.n	801853e <scalbn+0x46>
 801852e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8018532:	4770      	bx	lr
 8018534:	ee10 1a90 	vmov	r1, s1
 8018538:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801853c:	3b36      	subs	r3, #54	; 0x36
 801853e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8018542:	4290      	cmp	r0, r2
 8018544:	dd0d      	ble.n	8018562 <scalbn+0x6a>
 8018546:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80185d0 <scalbn+0xd8>
 801854a:	ee10 3a90 	vmov	r3, s1
 801854e:	eeb0 6b47 	vmov.f64	d6, d7
 8018552:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80185d8 <scalbn+0xe0>
 8018556:	2b00      	cmp	r3, #0
 8018558:	fe27 7b05 	vselge.f64	d7, d7, d5
 801855c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8018560:	4770      	bx	lr
 8018562:	4418      	add	r0, r3
 8018564:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8018568:	4298      	cmp	r0, r3
 801856a:	dcec      	bgt.n	8018546 <scalbn+0x4e>
 801856c:	2800      	cmp	r0, #0
 801856e:	dd0a      	ble.n	8018586 <scalbn+0x8e>
 8018570:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8018574:	ec53 2b10 	vmov	r2, r3, d0
 8018578:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801857c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8018580:	ec43 2b10 	vmov	d0, r2, r3
 8018584:	4770      	bx	lr
 8018586:	f110 0f35 	cmn.w	r0, #53	; 0x35
 801858a:	da09      	bge.n	80185a0 <scalbn+0xa8>
 801858c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80185c8 <scalbn+0xd0>
 8018590:	ee10 3a90 	vmov	r3, s1
 8018594:	eeb0 6b47 	vmov.f64	d6, d7
 8018598:	ed9f 5b11 	vldr	d5, [pc, #68]	; 80185e0 <scalbn+0xe8>
 801859c:	2b00      	cmp	r3, #0
 801859e:	e7db      	b.n	8018558 <scalbn+0x60>
 80185a0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80185a4:	ec53 2b10 	vmov	r2, r3, d0
 80185a8:	3036      	adds	r0, #54	; 0x36
 80185aa:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80185ae:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80185b2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80185e8 <scalbn+0xf0>
 80185b6:	ec43 2b10 	vmov	d0, r2, r3
 80185ba:	e7b1      	b.n	8018520 <scalbn+0x28>
 80185bc:	f3af 8000 	nop.w
 80185c0:	00000000 	.word	0x00000000
 80185c4:	43500000 	.word	0x43500000
 80185c8:	c2f8f359 	.word	0xc2f8f359
 80185cc:	01a56e1f 	.word	0x01a56e1f
 80185d0:	8800759c 	.word	0x8800759c
 80185d4:	7e37e43c 	.word	0x7e37e43c
 80185d8:	8800759c 	.word	0x8800759c
 80185dc:	fe37e43c 	.word	0xfe37e43c
 80185e0:	c2f8f359 	.word	0xc2f8f359
 80185e4:	81a56e1f 	.word	0x81a56e1f
 80185e8:	00000000 	.word	0x00000000
 80185ec:	3c900000 	.word	0x3c900000
 80185f0:	ffff3cb0 	.word	0xffff3cb0

080185f4 <__kernel_rem_pio2f>:
 80185f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185f8:	ed2d 8b04 	vpush	{d8-d9}
 80185fc:	b0d9      	sub	sp, #356	; 0x164
 80185fe:	4688      	mov	r8, r1
 8018600:	9002      	str	r0, [sp, #8]
 8018602:	49b8      	ldr	r1, [pc, #736]	; (80188e4 <__kernel_rem_pio2f+0x2f0>)
 8018604:	9866      	ldr	r0, [sp, #408]	; 0x198
 8018606:	9301      	str	r3, [sp, #4]
 8018608:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801860c:	9901      	ldr	r1, [sp, #4]
 801860e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8018610:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8018614:	1d11      	adds	r1, r2, #4
 8018616:	db25      	blt.n	8018664 <__kernel_rem_pio2f+0x70>
 8018618:	1ed0      	subs	r0, r2, #3
 801861a:	bf48      	it	mi
 801861c:	1d10      	addmi	r0, r2, #4
 801861e:	10c0      	asrs	r0, r0, #3
 8018620:	1c45      	adds	r5, r0, #1
 8018622:	00e9      	lsls	r1, r5, #3
 8018624:	eba0 070b 	sub.w	r7, r0, fp
 8018628:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80188f4 <__kernel_rem_pio2f+0x300>
 801862c:	9103      	str	r1, [sp, #12]
 801862e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8018632:	eb0a 0c0b 	add.w	ip, sl, fp
 8018636:	ae1c      	add	r6, sp, #112	; 0x70
 8018638:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801863c:	2400      	movs	r4, #0
 801863e:	4564      	cmp	r4, ip
 8018640:	dd12      	ble.n	8018668 <__kernel_rem_pio2f+0x74>
 8018642:	9901      	ldr	r1, [sp, #4]
 8018644:	ac1c      	add	r4, sp, #112	; 0x70
 8018646:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801864a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801864e:	f04f 0c00 	mov.w	ip, #0
 8018652:	45d4      	cmp	ip, sl
 8018654:	dc27      	bgt.n	80186a6 <__kernel_rem_pio2f+0xb2>
 8018656:	f8dd e008 	ldr.w	lr, [sp, #8]
 801865a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80188f4 <__kernel_rem_pio2f+0x300>
 801865e:	4627      	mov	r7, r4
 8018660:	2600      	movs	r6, #0
 8018662:	e016      	b.n	8018692 <__kernel_rem_pio2f+0x9e>
 8018664:	2000      	movs	r0, #0
 8018666:	e7db      	b.n	8018620 <__kernel_rem_pio2f+0x2c>
 8018668:	42e7      	cmn	r7, r4
 801866a:	bf5d      	ittte	pl
 801866c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8018670:	ee07 1a90 	vmovpl	s15, r1
 8018674:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8018678:	eef0 7a47 	vmovmi.f32	s15, s14
 801867c:	ece6 7a01 	vstmia	r6!, {s15}
 8018680:	3401      	adds	r4, #1
 8018682:	e7dc      	b.n	801863e <__kernel_rem_pio2f+0x4a>
 8018684:	ecfe 6a01 	vldmia	lr!, {s13}
 8018688:	ed97 7a00 	vldr	s14, [r7]
 801868c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018690:	3601      	adds	r6, #1
 8018692:	455e      	cmp	r6, fp
 8018694:	f1a7 0704 	sub.w	r7, r7, #4
 8018698:	ddf4      	ble.n	8018684 <__kernel_rem_pio2f+0x90>
 801869a:	ece9 7a01 	vstmia	r9!, {s15}
 801869e:	f10c 0c01 	add.w	ip, ip, #1
 80186a2:	3404      	adds	r4, #4
 80186a4:	e7d5      	b.n	8018652 <__kernel_rem_pio2f+0x5e>
 80186a6:	a908      	add	r1, sp, #32
 80186a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80186ac:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80186b0:	eddf 8a8f 	vldr	s17, [pc, #572]	; 80188f0 <__kernel_rem_pio2f+0x2fc>
 80186b4:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80188ec <__kernel_rem_pio2f+0x2f8>
 80186b8:	9105      	str	r1, [sp, #20]
 80186ba:	9304      	str	r3, [sp, #16]
 80186bc:	4656      	mov	r6, sl
 80186be:	00b3      	lsls	r3, r6, #2
 80186c0:	9306      	str	r3, [sp, #24]
 80186c2:	ab58      	add	r3, sp, #352	; 0x160
 80186c4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80186c8:	ac08      	add	r4, sp, #32
 80186ca:	ab44      	add	r3, sp, #272	; 0x110
 80186cc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80186d0:	46a4      	mov	ip, r4
 80186d2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80186d6:	4637      	mov	r7, r6
 80186d8:	2f00      	cmp	r7, #0
 80186da:	f1a0 0004 	sub.w	r0, r0, #4
 80186de:	dc4a      	bgt.n	8018776 <__kernel_rem_pio2f+0x182>
 80186e0:	4628      	mov	r0, r5
 80186e2:	9207      	str	r2, [sp, #28]
 80186e4:	f000 fab2 	bl	8018c4c <scalbnf>
 80186e8:	eeb0 8a40 	vmov.f32	s16, s0
 80186ec:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80186f0:	ee28 0a00 	vmul.f32	s0, s16, s0
 80186f4:	f000 fa68 	bl	8018bc8 <floorf>
 80186f8:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80186fc:	eea0 8a67 	vfms.f32	s16, s0, s15
 8018700:	2d00      	cmp	r5, #0
 8018702:	9a07      	ldr	r2, [sp, #28]
 8018704:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8018708:	ee17 9a90 	vmov	r9, s15
 801870c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018710:	ee38 8a67 	vsub.f32	s16, s16, s15
 8018714:	dd41      	ble.n	801879a <__kernel_rem_pio2f+0x1a6>
 8018716:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801871a:	ab08      	add	r3, sp, #32
 801871c:	f1c5 0e08 	rsb	lr, r5, #8
 8018720:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8018724:	fa47 f00e 	asr.w	r0, r7, lr
 8018728:	4481      	add	r9, r0
 801872a:	fa00 f00e 	lsl.w	r0, r0, lr
 801872e:	1a3f      	subs	r7, r7, r0
 8018730:	f1c5 0007 	rsb	r0, r5, #7
 8018734:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8018738:	4107      	asrs	r7, r0
 801873a:	2f00      	cmp	r7, #0
 801873c:	dd3c      	ble.n	80187b8 <__kernel_rem_pio2f+0x1c4>
 801873e:	f04f 0e00 	mov.w	lr, #0
 8018742:	f109 0901 	add.w	r9, r9, #1
 8018746:	4671      	mov	r1, lr
 8018748:	4576      	cmp	r6, lr
 801874a:	dc67      	bgt.n	801881c <__kernel_rem_pio2f+0x228>
 801874c:	2d00      	cmp	r5, #0
 801874e:	dd03      	ble.n	8018758 <__kernel_rem_pio2f+0x164>
 8018750:	2d01      	cmp	r5, #1
 8018752:	d074      	beq.n	801883e <__kernel_rem_pio2f+0x24a>
 8018754:	2d02      	cmp	r5, #2
 8018756:	d07b      	beq.n	8018850 <__kernel_rem_pio2f+0x25c>
 8018758:	2f02      	cmp	r7, #2
 801875a:	d12d      	bne.n	80187b8 <__kernel_rem_pio2f+0x1c4>
 801875c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8018760:	ee30 8a48 	vsub.f32	s16, s0, s16
 8018764:	b341      	cbz	r1, 80187b8 <__kernel_rem_pio2f+0x1c4>
 8018766:	4628      	mov	r0, r5
 8018768:	9207      	str	r2, [sp, #28]
 801876a:	f000 fa6f 	bl	8018c4c <scalbnf>
 801876e:	9a07      	ldr	r2, [sp, #28]
 8018770:	ee38 8a40 	vsub.f32	s16, s16, s0
 8018774:	e020      	b.n	80187b8 <__kernel_rem_pio2f+0x1c4>
 8018776:	ee60 7a28 	vmul.f32	s15, s0, s17
 801877a:	3f01      	subs	r7, #1
 801877c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018784:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8018788:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801878c:	ecac 0a01 	vstmia	ip!, {s0}
 8018790:	ed90 0a00 	vldr	s0, [r0]
 8018794:	ee37 0a80 	vadd.f32	s0, s15, s0
 8018798:	e79e      	b.n	80186d8 <__kernel_rem_pio2f+0xe4>
 801879a:	d105      	bne.n	80187a8 <__kernel_rem_pio2f+0x1b4>
 801879c:	1e70      	subs	r0, r6, #1
 801879e:	ab08      	add	r3, sp, #32
 80187a0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80187a4:	11ff      	asrs	r7, r7, #7
 80187a6:	e7c8      	b.n	801873a <__kernel_rem_pio2f+0x146>
 80187a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80187ac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80187b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187b4:	da30      	bge.n	8018818 <__kernel_rem_pio2f+0x224>
 80187b6:	2700      	movs	r7, #0
 80187b8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80187bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187c0:	f040 809a 	bne.w	80188f8 <__kernel_rem_pio2f+0x304>
 80187c4:	1e74      	subs	r4, r6, #1
 80187c6:	46a4      	mov	ip, r4
 80187c8:	2100      	movs	r1, #0
 80187ca:	45d4      	cmp	ip, sl
 80187cc:	da47      	bge.n	801885e <__kernel_rem_pio2f+0x26a>
 80187ce:	2900      	cmp	r1, #0
 80187d0:	d063      	beq.n	801889a <__kernel_rem_pio2f+0x2a6>
 80187d2:	ab08      	add	r3, sp, #32
 80187d4:	3d08      	subs	r5, #8
 80187d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d07f      	beq.n	80188de <__kernel_rem_pio2f+0x2ea>
 80187de:	4628      	mov	r0, r5
 80187e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80187e4:	f000 fa32 	bl	8018c4c <scalbnf>
 80187e8:	1c63      	adds	r3, r4, #1
 80187ea:	aa44      	add	r2, sp, #272	; 0x110
 80187ec:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80188f0 <__kernel_rem_pio2f+0x2fc>
 80187f0:	0099      	lsls	r1, r3, #2
 80187f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80187f6:	4623      	mov	r3, r4
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	f280 80ad 	bge.w	8018958 <__kernel_rem_pio2f+0x364>
 80187fe:	4623      	mov	r3, r4
 8018800:	2b00      	cmp	r3, #0
 8018802:	f2c0 80cb 	blt.w	801899c <__kernel_rem_pio2f+0x3a8>
 8018806:	aa44      	add	r2, sp, #272	; 0x110
 8018808:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801880c:	4e36      	ldr	r6, [pc, #216]	; (80188e8 <__kernel_rem_pio2f+0x2f4>)
 801880e:	eddf 7a39 	vldr	s15, [pc, #228]	; 80188f4 <__kernel_rem_pio2f+0x300>
 8018812:	2000      	movs	r0, #0
 8018814:	1ae2      	subs	r2, r4, r3
 8018816:	e0b6      	b.n	8018986 <__kernel_rem_pio2f+0x392>
 8018818:	2702      	movs	r7, #2
 801881a:	e790      	b.n	801873e <__kernel_rem_pio2f+0x14a>
 801881c:	6820      	ldr	r0, [r4, #0]
 801881e:	b949      	cbnz	r1, 8018834 <__kernel_rem_pio2f+0x240>
 8018820:	b118      	cbz	r0, 801882a <__kernel_rem_pio2f+0x236>
 8018822:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8018826:	6020      	str	r0, [r4, #0]
 8018828:	2001      	movs	r0, #1
 801882a:	f10e 0e01 	add.w	lr, lr, #1
 801882e:	3404      	adds	r4, #4
 8018830:	4601      	mov	r1, r0
 8018832:	e789      	b.n	8018748 <__kernel_rem_pio2f+0x154>
 8018834:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8018838:	6020      	str	r0, [r4, #0]
 801883a:	4608      	mov	r0, r1
 801883c:	e7f5      	b.n	801882a <__kernel_rem_pio2f+0x236>
 801883e:	1e74      	subs	r4, r6, #1
 8018840:	ab08      	add	r3, sp, #32
 8018842:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018846:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801884a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801884e:	e783      	b.n	8018758 <__kernel_rem_pio2f+0x164>
 8018850:	1e74      	subs	r4, r6, #1
 8018852:	ab08      	add	r3, sp, #32
 8018854:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018858:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801885c:	e7f5      	b.n	801884a <__kernel_rem_pio2f+0x256>
 801885e:	ab08      	add	r3, sp, #32
 8018860:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8018864:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8018868:	4301      	orrs	r1, r0
 801886a:	e7ae      	b.n	80187ca <__kernel_rem_pio2f+0x1d6>
 801886c:	3001      	adds	r0, #1
 801886e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8018872:	2f00      	cmp	r7, #0
 8018874:	d0fa      	beq.n	801886c <__kernel_rem_pio2f+0x278>
 8018876:	9b06      	ldr	r3, [sp, #24]
 8018878:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801887c:	eb0d 0403 	add.w	r4, sp, r3
 8018880:	9b01      	ldr	r3, [sp, #4]
 8018882:	18f7      	adds	r7, r6, r3
 8018884:	ab1c      	add	r3, sp, #112	; 0x70
 8018886:	f106 0c01 	add.w	ip, r6, #1
 801888a:	3c4c      	subs	r4, #76	; 0x4c
 801888c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8018890:	4430      	add	r0, r6
 8018892:	4560      	cmp	r0, ip
 8018894:	da04      	bge.n	80188a0 <__kernel_rem_pio2f+0x2ac>
 8018896:	4606      	mov	r6, r0
 8018898:	e711      	b.n	80186be <__kernel_rem_pio2f+0xca>
 801889a:	9c05      	ldr	r4, [sp, #20]
 801889c:	2001      	movs	r0, #1
 801889e:	e7e6      	b.n	801886e <__kernel_rem_pio2f+0x27a>
 80188a0:	9b04      	ldr	r3, [sp, #16]
 80188a2:	f8dd e008 	ldr.w	lr, [sp, #8]
 80188a6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80188aa:	9306      	str	r3, [sp, #24]
 80188ac:	ee07 3a90 	vmov	s15, r3
 80188b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80188b4:	2600      	movs	r6, #0
 80188b6:	ece7 7a01 	vstmia	r7!, {s15}
 80188ba:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80188f4 <__kernel_rem_pio2f+0x300>
 80188be:	46b9      	mov	r9, r7
 80188c0:	455e      	cmp	r6, fp
 80188c2:	dd04      	ble.n	80188ce <__kernel_rem_pio2f+0x2da>
 80188c4:	ece4 7a01 	vstmia	r4!, {s15}
 80188c8:	f10c 0c01 	add.w	ip, ip, #1
 80188cc:	e7e1      	b.n	8018892 <__kernel_rem_pio2f+0x29e>
 80188ce:	ecfe 6a01 	vldmia	lr!, {s13}
 80188d2:	ed39 7a01 	vldmdb	r9!, {s14}
 80188d6:	3601      	adds	r6, #1
 80188d8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80188dc:	e7f0      	b.n	80188c0 <__kernel_rem_pio2f+0x2cc>
 80188de:	3c01      	subs	r4, #1
 80188e0:	e777      	b.n	80187d2 <__kernel_rem_pio2f+0x1de>
 80188e2:	bf00      	nop
 80188e4:	0802506c 	.word	0x0802506c
 80188e8:	08025040 	.word	0x08025040
 80188ec:	43800000 	.word	0x43800000
 80188f0:	3b800000 	.word	0x3b800000
 80188f4:	00000000 	.word	0x00000000
 80188f8:	9b03      	ldr	r3, [sp, #12]
 80188fa:	eeb0 0a48 	vmov.f32	s0, s16
 80188fe:	1a98      	subs	r0, r3, r2
 8018900:	f000 f9a4 	bl	8018c4c <scalbnf>
 8018904:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80188ec <__kernel_rem_pio2f+0x2f8>
 8018908:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801890c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018910:	db19      	blt.n	8018946 <__kernel_rem_pio2f+0x352>
 8018912:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80188f0 <__kernel_rem_pio2f+0x2fc>
 8018916:	ee60 7a27 	vmul.f32	s15, s0, s15
 801891a:	aa08      	add	r2, sp, #32
 801891c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018920:	1c74      	adds	r4, r6, #1
 8018922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018926:	3508      	adds	r5, #8
 8018928:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801892c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018930:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018934:	ee10 3a10 	vmov	r3, s0
 8018938:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801893c:	ee17 3a90 	vmov	r3, s15
 8018940:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8018944:	e74b      	b.n	80187de <__kernel_rem_pio2f+0x1ea>
 8018946:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801894a:	aa08      	add	r2, sp, #32
 801894c:	ee10 3a10 	vmov	r3, s0
 8018950:	4634      	mov	r4, r6
 8018952:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8018956:	e742      	b.n	80187de <__kernel_rem_pio2f+0x1ea>
 8018958:	a808      	add	r0, sp, #32
 801895a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801895e:	9001      	str	r0, [sp, #4]
 8018960:	ee07 0a90 	vmov	s15, r0
 8018964:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018968:	3b01      	subs	r3, #1
 801896a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801896e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018972:	ed62 7a01 	vstmdb	r2!, {s15}
 8018976:	e73f      	b.n	80187f8 <__kernel_rem_pio2f+0x204>
 8018978:	ecf6 6a01 	vldmia	r6!, {s13}
 801897c:	ecb5 7a01 	vldmia	r5!, {s14}
 8018980:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018984:	3001      	adds	r0, #1
 8018986:	4550      	cmp	r0, sl
 8018988:	dc01      	bgt.n	801898e <__kernel_rem_pio2f+0x39a>
 801898a:	4290      	cmp	r0, r2
 801898c:	ddf4      	ble.n	8018978 <__kernel_rem_pio2f+0x384>
 801898e:	a858      	add	r0, sp, #352	; 0x160
 8018990:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8018994:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8018998:	3b01      	subs	r3, #1
 801899a:	e731      	b.n	8018800 <__kernel_rem_pio2f+0x20c>
 801899c:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801899e:	2b02      	cmp	r3, #2
 80189a0:	dc09      	bgt.n	80189b6 <__kernel_rem_pio2f+0x3c2>
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	dc2b      	bgt.n	80189fe <__kernel_rem_pio2f+0x40a>
 80189a6:	d044      	beq.n	8018a32 <__kernel_rem_pio2f+0x43e>
 80189a8:	f009 0007 	and.w	r0, r9, #7
 80189ac:	b059      	add	sp, #356	; 0x164
 80189ae:	ecbd 8b04 	vpop	{d8-d9}
 80189b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189b6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80189b8:	2b03      	cmp	r3, #3
 80189ba:	d1f5      	bne.n	80189a8 <__kernel_rem_pio2f+0x3b4>
 80189bc:	aa30      	add	r2, sp, #192	; 0xc0
 80189be:	1f0b      	subs	r3, r1, #4
 80189c0:	4413      	add	r3, r2
 80189c2:	461a      	mov	r2, r3
 80189c4:	4620      	mov	r0, r4
 80189c6:	2800      	cmp	r0, #0
 80189c8:	f1a2 0204 	sub.w	r2, r2, #4
 80189cc:	dc52      	bgt.n	8018a74 <__kernel_rem_pio2f+0x480>
 80189ce:	4622      	mov	r2, r4
 80189d0:	2a01      	cmp	r2, #1
 80189d2:	f1a3 0304 	sub.w	r3, r3, #4
 80189d6:	dc5d      	bgt.n	8018a94 <__kernel_rem_pio2f+0x4a0>
 80189d8:	ab30      	add	r3, sp, #192	; 0xc0
 80189da:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80188f4 <__kernel_rem_pio2f+0x300>
 80189de:	440b      	add	r3, r1
 80189e0:	2c01      	cmp	r4, #1
 80189e2:	dc67      	bgt.n	8018ab4 <__kernel_rem_pio2f+0x4c0>
 80189e4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80189e8:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80189ec:	2f00      	cmp	r7, #0
 80189ee:	d167      	bne.n	8018ac0 <__kernel_rem_pio2f+0x4cc>
 80189f0:	edc8 6a00 	vstr	s13, [r8]
 80189f4:	ed88 7a01 	vstr	s14, [r8, #4]
 80189f8:	edc8 7a02 	vstr	s15, [r8, #8]
 80189fc:	e7d4      	b.n	80189a8 <__kernel_rem_pio2f+0x3b4>
 80189fe:	ab30      	add	r3, sp, #192	; 0xc0
 8018a00:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 80188f4 <__kernel_rem_pio2f+0x300>
 8018a04:	440b      	add	r3, r1
 8018a06:	4622      	mov	r2, r4
 8018a08:	2a00      	cmp	r2, #0
 8018a0a:	da24      	bge.n	8018a56 <__kernel_rem_pio2f+0x462>
 8018a0c:	b34f      	cbz	r7, 8018a62 <__kernel_rem_pio2f+0x46e>
 8018a0e:	eef1 7a47 	vneg.f32	s15, s14
 8018a12:	edc8 7a00 	vstr	s15, [r8]
 8018a16:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8018a1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018a1e:	aa31      	add	r2, sp, #196	; 0xc4
 8018a20:	2301      	movs	r3, #1
 8018a22:	429c      	cmp	r4, r3
 8018a24:	da20      	bge.n	8018a68 <__kernel_rem_pio2f+0x474>
 8018a26:	b10f      	cbz	r7, 8018a2c <__kernel_rem_pio2f+0x438>
 8018a28:	eef1 7a67 	vneg.f32	s15, s15
 8018a2c:	edc8 7a01 	vstr	s15, [r8, #4]
 8018a30:	e7ba      	b.n	80189a8 <__kernel_rem_pio2f+0x3b4>
 8018a32:	ab30      	add	r3, sp, #192	; 0xc0
 8018a34:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80188f4 <__kernel_rem_pio2f+0x300>
 8018a38:	440b      	add	r3, r1
 8018a3a:	2c00      	cmp	r4, #0
 8018a3c:	da05      	bge.n	8018a4a <__kernel_rem_pio2f+0x456>
 8018a3e:	b10f      	cbz	r7, 8018a44 <__kernel_rem_pio2f+0x450>
 8018a40:	eef1 7a67 	vneg.f32	s15, s15
 8018a44:	edc8 7a00 	vstr	s15, [r8]
 8018a48:	e7ae      	b.n	80189a8 <__kernel_rem_pio2f+0x3b4>
 8018a4a:	ed33 7a01 	vldmdb	r3!, {s14}
 8018a4e:	3c01      	subs	r4, #1
 8018a50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018a54:	e7f1      	b.n	8018a3a <__kernel_rem_pio2f+0x446>
 8018a56:	ed73 7a01 	vldmdb	r3!, {s15}
 8018a5a:	3a01      	subs	r2, #1
 8018a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018a60:	e7d2      	b.n	8018a08 <__kernel_rem_pio2f+0x414>
 8018a62:	eef0 7a47 	vmov.f32	s15, s14
 8018a66:	e7d4      	b.n	8018a12 <__kernel_rem_pio2f+0x41e>
 8018a68:	ecb2 7a01 	vldmia	r2!, {s14}
 8018a6c:	3301      	adds	r3, #1
 8018a6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018a72:	e7d6      	b.n	8018a22 <__kernel_rem_pio2f+0x42e>
 8018a74:	edd2 7a00 	vldr	s15, [r2]
 8018a78:	edd2 6a01 	vldr	s13, [r2, #4]
 8018a7c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018a80:	3801      	subs	r0, #1
 8018a82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018a86:	ed82 7a00 	vstr	s14, [r2]
 8018a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018a8e:	edc2 7a01 	vstr	s15, [r2, #4]
 8018a92:	e798      	b.n	80189c6 <__kernel_rem_pio2f+0x3d2>
 8018a94:	edd3 7a00 	vldr	s15, [r3]
 8018a98:	edd3 6a01 	vldr	s13, [r3, #4]
 8018a9c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018aa0:	3a01      	subs	r2, #1
 8018aa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018aa6:	ed83 7a00 	vstr	s14, [r3]
 8018aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018aae:	edc3 7a01 	vstr	s15, [r3, #4]
 8018ab2:	e78d      	b.n	80189d0 <__kernel_rem_pio2f+0x3dc>
 8018ab4:	ed33 7a01 	vldmdb	r3!, {s14}
 8018ab8:	3c01      	subs	r4, #1
 8018aba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018abe:	e78f      	b.n	80189e0 <__kernel_rem_pio2f+0x3ec>
 8018ac0:	eef1 6a66 	vneg.f32	s13, s13
 8018ac4:	eeb1 7a47 	vneg.f32	s14, s14
 8018ac8:	edc8 6a00 	vstr	s13, [r8]
 8018acc:	ed88 7a01 	vstr	s14, [r8, #4]
 8018ad0:	eef1 7a67 	vneg.f32	s15, s15
 8018ad4:	e790      	b.n	80189f8 <__kernel_rem_pio2f+0x404>
 8018ad6:	bf00      	nop

08018ad8 <floor>:
 8018ad8:	ee10 1a90 	vmov	r1, s1
 8018adc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018ae0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8018ae4:	2b13      	cmp	r3, #19
 8018ae6:	b530      	push	{r4, r5, lr}
 8018ae8:	ee10 0a10 	vmov	r0, s0
 8018aec:	ee10 5a10 	vmov	r5, s0
 8018af0:	dc31      	bgt.n	8018b56 <floor+0x7e>
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	da15      	bge.n	8018b22 <floor+0x4a>
 8018af6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8018bb8 <floor+0xe0>
 8018afa:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018afe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b06:	dd07      	ble.n	8018b18 <floor+0x40>
 8018b08:	2900      	cmp	r1, #0
 8018b0a:	da4e      	bge.n	8018baa <floor+0xd2>
 8018b0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018b10:	4308      	orrs	r0, r1
 8018b12:	d04d      	beq.n	8018bb0 <floor+0xd8>
 8018b14:	492a      	ldr	r1, [pc, #168]	; (8018bc0 <floor+0xe8>)
 8018b16:	2000      	movs	r0, #0
 8018b18:	460b      	mov	r3, r1
 8018b1a:	4602      	mov	r2, r0
 8018b1c:	ec43 2b10 	vmov	d0, r2, r3
 8018b20:	e020      	b.n	8018b64 <floor+0x8c>
 8018b22:	4a28      	ldr	r2, [pc, #160]	; (8018bc4 <floor+0xec>)
 8018b24:	411a      	asrs	r2, r3
 8018b26:	ea01 0402 	and.w	r4, r1, r2
 8018b2a:	4304      	orrs	r4, r0
 8018b2c:	d01a      	beq.n	8018b64 <floor+0x8c>
 8018b2e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8018bb8 <floor+0xe0>
 8018b32:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018b36:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b3e:	ddeb      	ble.n	8018b18 <floor+0x40>
 8018b40:	2900      	cmp	r1, #0
 8018b42:	bfbe      	ittt	lt
 8018b44:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8018b48:	fa40 f303 	asrlt.w	r3, r0, r3
 8018b4c:	18c9      	addlt	r1, r1, r3
 8018b4e:	ea21 0102 	bic.w	r1, r1, r2
 8018b52:	2000      	movs	r0, #0
 8018b54:	e7e0      	b.n	8018b18 <floor+0x40>
 8018b56:	2b33      	cmp	r3, #51	; 0x33
 8018b58:	dd05      	ble.n	8018b66 <floor+0x8e>
 8018b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018b5e:	d101      	bne.n	8018b64 <floor+0x8c>
 8018b60:	ee30 0b00 	vadd.f64	d0, d0, d0
 8018b64:	bd30      	pop	{r4, r5, pc}
 8018b66:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8018b6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018b6e:	40e2      	lsrs	r2, r4
 8018b70:	4210      	tst	r0, r2
 8018b72:	d0f7      	beq.n	8018b64 <floor+0x8c>
 8018b74:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8018bb8 <floor+0xe0>
 8018b78:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018b7c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b84:	ddc8      	ble.n	8018b18 <floor+0x40>
 8018b86:	2900      	cmp	r1, #0
 8018b88:	da02      	bge.n	8018b90 <floor+0xb8>
 8018b8a:	2b14      	cmp	r3, #20
 8018b8c:	d103      	bne.n	8018b96 <floor+0xbe>
 8018b8e:	3101      	adds	r1, #1
 8018b90:	ea20 0002 	bic.w	r0, r0, r2
 8018b94:	e7c0      	b.n	8018b18 <floor+0x40>
 8018b96:	2401      	movs	r4, #1
 8018b98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018b9c:	fa04 f303 	lsl.w	r3, r4, r3
 8018ba0:	4418      	add	r0, r3
 8018ba2:	4285      	cmp	r5, r0
 8018ba4:	bf88      	it	hi
 8018ba6:	1909      	addhi	r1, r1, r4
 8018ba8:	e7f2      	b.n	8018b90 <floor+0xb8>
 8018baa:	2000      	movs	r0, #0
 8018bac:	4601      	mov	r1, r0
 8018bae:	e7b3      	b.n	8018b18 <floor+0x40>
 8018bb0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8018bb4:	e7b0      	b.n	8018b18 <floor+0x40>
 8018bb6:	bf00      	nop
 8018bb8:	8800759c 	.word	0x8800759c
 8018bbc:	7e37e43c 	.word	0x7e37e43c
 8018bc0:	bff00000 	.word	0xbff00000
 8018bc4:	000fffff 	.word	0x000fffff

08018bc8 <floorf>:
 8018bc8:	ee10 3a10 	vmov	r3, s0
 8018bcc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018bd0:	3a7f      	subs	r2, #127	; 0x7f
 8018bd2:	2a16      	cmp	r2, #22
 8018bd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018bd8:	dc2a      	bgt.n	8018c30 <floorf+0x68>
 8018bda:	2a00      	cmp	r2, #0
 8018bdc:	da11      	bge.n	8018c02 <floorf+0x3a>
 8018bde:	eddf 7a18 	vldr	s15, [pc, #96]	; 8018c40 <floorf+0x78>
 8018be2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018be6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bee:	dd05      	ble.n	8018bfc <floorf+0x34>
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	da23      	bge.n	8018c3c <floorf+0x74>
 8018bf4:	4a13      	ldr	r2, [pc, #76]	; (8018c44 <floorf+0x7c>)
 8018bf6:	2900      	cmp	r1, #0
 8018bf8:	bf18      	it	ne
 8018bfa:	4613      	movne	r3, r2
 8018bfc:	ee00 3a10 	vmov	s0, r3
 8018c00:	4770      	bx	lr
 8018c02:	4911      	ldr	r1, [pc, #68]	; (8018c48 <floorf+0x80>)
 8018c04:	4111      	asrs	r1, r2
 8018c06:	420b      	tst	r3, r1
 8018c08:	d0fa      	beq.n	8018c00 <floorf+0x38>
 8018c0a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018c40 <floorf+0x78>
 8018c0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018c12:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c1a:	ddef      	ble.n	8018bfc <floorf+0x34>
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	bfbe      	ittt	lt
 8018c20:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8018c24:	fa40 f202 	asrlt.w	r2, r0, r2
 8018c28:	189b      	addlt	r3, r3, r2
 8018c2a:	ea23 0301 	bic.w	r3, r3, r1
 8018c2e:	e7e5      	b.n	8018bfc <floorf+0x34>
 8018c30:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018c34:	d3e4      	bcc.n	8018c00 <floorf+0x38>
 8018c36:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018c3a:	4770      	bx	lr
 8018c3c:	2300      	movs	r3, #0
 8018c3e:	e7dd      	b.n	8018bfc <floorf+0x34>
 8018c40:	7149f2ca 	.word	0x7149f2ca
 8018c44:	bf800000 	.word	0xbf800000
 8018c48:	007fffff 	.word	0x007fffff

08018c4c <scalbnf>:
 8018c4c:	ee10 3a10 	vmov	r3, s0
 8018c50:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8018c54:	d02a      	beq.n	8018cac <scalbnf+0x60>
 8018c56:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8018c5a:	d302      	bcc.n	8018c62 <scalbnf+0x16>
 8018c5c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018c60:	4770      	bx	lr
 8018c62:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8018c66:	d122      	bne.n	8018cae <scalbnf+0x62>
 8018c68:	4b23      	ldr	r3, [pc, #140]	; (8018cf8 <scalbnf+0xac>)
 8018c6a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8018cfc <scalbnf+0xb0>
 8018c6e:	4298      	cmp	r0, r3
 8018c70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018c74:	db16      	blt.n	8018ca4 <scalbnf+0x58>
 8018c76:	ee10 3a10 	vmov	r3, s0
 8018c7a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018c7e:	3a19      	subs	r2, #25
 8018c80:	f24c 3150 	movw	r1, #50000	; 0xc350
 8018c84:	4288      	cmp	r0, r1
 8018c86:	dd14      	ble.n	8018cb2 <scalbnf+0x66>
 8018c88:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8018d00 <scalbnf+0xb4>
 8018c8c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8018d04 <scalbnf+0xb8>
 8018c90:	ee10 3a10 	vmov	r3, s0
 8018c94:	eeb0 7a67 	vmov.f32	s14, s15
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8018c9e:	ee27 0a87 	vmul.f32	s0, s15, s14
 8018ca2:	4770      	bx	lr
 8018ca4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8018d08 <scalbnf+0xbc>
 8018ca8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018cac:	4770      	bx	lr
 8018cae:	0dd2      	lsrs	r2, r2, #23
 8018cb0:	e7e6      	b.n	8018c80 <scalbnf+0x34>
 8018cb2:	4410      	add	r0, r2
 8018cb4:	28fe      	cmp	r0, #254	; 0xfe
 8018cb6:	dce7      	bgt.n	8018c88 <scalbnf+0x3c>
 8018cb8:	2800      	cmp	r0, #0
 8018cba:	dd06      	ble.n	8018cca <scalbnf+0x7e>
 8018cbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018cc0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018cc4:	ee00 3a10 	vmov	s0, r3
 8018cc8:	4770      	bx	lr
 8018cca:	f110 0f16 	cmn.w	r0, #22
 8018cce:	da09      	bge.n	8018ce4 <scalbnf+0x98>
 8018cd0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018d08 <scalbnf+0xbc>
 8018cd4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8018d0c <scalbnf+0xc0>
 8018cd8:	ee10 3a10 	vmov	r3, s0
 8018cdc:	eeb0 7a67 	vmov.f32	s14, s15
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	e7da      	b.n	8018c9a <scalbnf+0x4e>
 8018ce4:	3019      	adds	r0, #25
 8018ce6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018cea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018cee:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8018d10 <scalbnf+0xc4>
 8018cf2:	ee07 3a90 	vmov	s15, r3
 8018cf6:	e7d7      	b.n	8018ca8 <scalbnf+0x5c>
 8018cf8:	ffff3cb0 	.word	0xffff3cb0
 8018cfc:	4c000000 	.word	0x4c000000
 8018d00:	7149f2ca 	.word	0x7149f2ca
 8018d04:	f149f2ca 	.word	0xf149f2ca
 8018d08:	0da24260 	.word	0x0da24260
 8018d0c:	8da24260 	.word	0x8da24260
 8018d10:	33000000 	.word	0x33000000

08018d14 <__errno>:
 8018d14:	4b01      	ldr	r3, [pc, #4]	; (8018d1c <__errno+0x8>)
 8018d16:	6818      	ldr	r0, [r3, #0]
 8018d18:	4770      	bx	lr
 8018d1a:	bf00      	nop
 8018d1c:	20000b90 	.word	0x20000b90

08018d20 <_init>:
 8018d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d22:	bf00      	nop
 8018d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d26:	bc08      	pop	{r3}
 8018d28:	469e      	mov	lr, r3
 8018d2a:	4770      	bx	lr

08018d2c <_fini>:
 8018d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d2e:	bf00      	nop
 8018d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018d32:	bc08      	pop	{r3}
 8018d34:	469e      	mov	lr, r3
 8018d36:	4770      	bx	lr

08018d38 <__audioInitString3_veneer>:
 8018d38:	f85f f000 	ldr.w	pc, [pc]	; 8018d3c <__audioInitString3_veneer+0x4>
 8018d3c:	00005081 	.word	0x00005081

08018d40 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
 8018d40:	f85f f000 	ldr.w	pc, [pc]	; 8018d44 <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
 8018d44:	00003b01 	.word	0x00003b01

08018d48 <__HAL_I2C_ErrorCallback_veneer>:
 8018d48:	f85f f000 	ldr.w	pc, [pc]	; 8018d4c <__HAL_I2C_ErrorCallback_veneer+0x4>
 8018d4c:	00003b41 	.word	0x00003b41

08018d50 <__HAL_SPI_RxHalfCpltCallback_veneer>:
 8018d50:	f85f f000 	ldr.w	pc, [pc]	; 8018d54 <__HAL_SPI_RxHalfCpltCallback_veneer+0x4>
 8018d54:	00003e61 	.word	0x00003e61

08018d58 <__HAL_SPI_RxCpltCallback_veneer>:
 8018d58:	f85f f000 	ldr.w	pc, [pc]	; 8018d5c <__HAL_SPI_RxCpltCallback_veneer+0x4>
 8018d5c:	00003d41 	.word	0x00003d41

08018d60 <__parsePreset_veneer>:
 8018d60:	f85f f000 	ldr.w	pc, [pc]	; 8018d64 <__parsePreset_veneer+0x4>
 8018d64:	00001b01 	.word	0x00001b01

08018d68 <__audioInitString1_veneer>:
 8018d68:	f85f f000 	ldr.w	pc, [pc]	; 8018d6c <__audioInitString1_veneer+0x4>
 8018d6c:	00003f81 	.word	0x00003f81

08018d70 <__HAL_SPI_TxRxCpltCallback_veneer>:
 8018d70:	f85f f000 	ldr.w	pc, [pc]	; 8018d74 <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
 8018d74:	00003b81 	.word	0x00003b81

08018d78 <__HAL_SAI_TxHalfCpltCallback_veneer>:
 8018d78:	f85f f000 	ldr.w	pc, [pc]	; 8018d7c <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
 8018d7c:	00001601 	.word	0x00001601

08018d80 <__randomNumber_veneer>:
 8018d80:	f85f f000 	ldr.w	pc, [pc]	; 8018d84 <__randomNumber_veneer+0x4>
 8018d84:	00001aa1 	.word	0x00001aa1

08018d88 <__HAL_SAI_ErrorCallback_veneer>:
 8018d88:	f85f f000 	ldr.w	pc, [pc]	; 8018d8c <__HAL_SAI_ErrorCallback_veneer+0x4>
 8018d8c:	00001781 	.word	0x00001781

08018d90 <__HAL_SAI_TxCpltCallback_veneer>:
 8018d90:	f85f f000 	ldr.w	pc, [pc]	; 8018d94 <__HAL_SAI_TxCpltCallback_veneer+0x4>
 8018d94:	00001481 	.word	0x00001481

08018d98 <__audioInitAdditive_veneer>:
 8018d98:	f85f f000 	ldr.w	pc, [pc]	; 8018d9c <__audioInitAdditive_veneer+0x4>
 8018d9c:	00000401 	.word	0x00000401

08018da0 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
 8018da0:	f85f f000 	ldr.w	pc, [pc]	; 8018da4 <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
 8018da4:	00003c61 	.word	0x00003c61

08018da8 <__audioInitVocal_veneer>:
 8018da8:	f85f f000 	ldr.w	pc, [pc]	; 8018dac <__audioInitVocal_veneer+0x4>
 8018dac:	00008aa1 	.word	0x00008aa1

Disassembly of section .itcmram:

00000400 <audioInitAdditive>:
}
     400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                                break; // Return early if we have false correlation
                            }
                            Lfloat periodicity = 1.0f - (count * p->_weight);
                            _auto_correlation_info info = { i, j, (int) period, periodicity };
                            sub_collector_process(&collect, info);
                            if (count == 0)
     404:	49af      	ldr	r1, [pc, #700]	; (6c4 <audioInitAdditive+0x2c4>)
     406:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
                                for (int d = start + 1; d < mid; ++d)
     40a:	f8df 931c 	ldr.w	r9, [pc, #796]	; 728 <audioInitAdditive+0x328>
                            int mid = p->_bacf->_mid_array * CHAR_BIT * sizeof(unsigned int);
     40e:	4cae      	ldr	r4, [pc, #696]	; (6c8 <audioInitAdditive+0x2c8>)
                                for (int d = start + 1; d < mid; ++d)
     410:	f101 0e40 	add.w	lr, r1, #64	; 0x40
     414:	4dad      	ldr	r5, [pc, #692]	; (6cc <audioInitAdditive+0x2cc>)
     416:	460f      	mov	r7, r1
     418:	4bad      	ldr	r3, [pc, #692]	; (6d0 <audioInitAdditive+0x2d0>)
     41a:	46a0      	mov	r8, r4
     41c:	46ac      	mov	ip, r5
     41e:	48ad      	ldr	r0, [pc, #692]	; (6d4 <audioInitAdditive+0x2d4>)
     420:	ed2d 8b04 	vpush	{d8-d9}
     424:	b083      	sub	sp, #12
     426:	ed99 4a00 	vldr	s8, [r9]
                                    int c = tBACF_getCorrelation(&p->_bacf, d);
     42a:	edd9 4a01 	vldr	s9, [r9, #4]
     42e:	601a      	str	r2, [r3, #0]
     430:	ecb7 7a01 	vldmia	r7!, {s14}
                                for (int d = start + 1; d < mid; ++d)
     434:	4662      	mov	r2, ip
     436:	ecf8 7a01 	vldmia	r8!, {s15}
                                    if (c > count)
     43a:	4ea7      	ldr	r6, [pc, #668]	; (6d8 <audioInitAdditive+0x2d8>)
     43c:	ee34 4a07 	vadd.f32	s8, s8, s14
     440:	ee74 4aa7 	vadd.f32	s9, s9, s15
     444:	4633      	mov	r3, r6
                                for (int d = start - 1; d > p->_min_period; --d)
     446:	edd3 6a00 	vldr	s13, [r3]
     44a:	330c      	adds	r3, #12
     44c:	ed13 7a02 	vldr	s14, [r3, #-8]
     450:	32d8      	adds	r2, #216	; 0xd8
     452:	ed53 7a01 	vldr	s15, [r3, #-4]
     456:	4283      	cmp	r3, r0
     458:	ed12 5a36 	vldr	s10, [r2, #-216]	; 0xffffff28
     45c:	ed52 5a24 	vldr	s11, [r2, #-144]	; 0xffffff70
     460:	ed12 6a12 	vldr	s12, [r2, #-72]	; 0xffffffb8
     464:	ee76 6a85 	vadd.f32	s13, s13, s10
     468:	ee37 7a25 	vadd.f32	s14, s14, s11
                                    int c = tBACF_getCorrelation(&p->_bacf, d);
     46c:	ee77 7a86 	vadd.f32	s15, s15, s12
     470:	ed43 6a03 	vstr	s13, [r3, #-12]
                                    count = c;
     474:	ed03 7a02 	vstr	s14, [r3, #-8]
                                    int c = tBACF_getCorrelation(&p->_bacf, d);
     478:	ed43 7a01 	vstr	s15, [r3, #-4]
                                    if (c > count)
     47c:	d1e3      	bne.n	446 <audioInitAdditive+0x46>
     47e:	4577      	cmp	r7, lr
     480:	f10c 0c04 	add.w	ip, ip, #4
     484:	d1d4      	bne.n	430 <audioInitAdditive+0x30>
     486:	4f95      	ldr	r7, [pc, #596]	; (6dc <audioInitAdditive+0x2dc>)
     488:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        p->_fundamental.periodicity = -1.0f;
     48c:	edc9 4a01 	vstr	s9, [r9, #4]
     490:	463b      	mov	r3, r7
     492:	ed89 4a00 	vstr	s8, [r9]
}
     496:	edd6 6a00 	vldr	s13, [r6]
     49a:	360c      	adds	r6, #12
     49c:	ed16 7a02 	vldr	s14, [r6, #-8]
                                if (tBACF_getCorrelation(&p->_bacf, period / 2.0f) == 0)
     4a0:	330c      	adds	r3, #12
     4a2:	ed56 5a01 	vldr	s11, [r6, #-4]
     4a6:	ee87 6aa6 	vdiv.f32	s12, s15, s13
     4aa:	4286      	cmp	r6, r0
     4ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
     4b0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
     4b4:	ed03 6a03 	vstr	s12, [r3, #-12]
     4b8:	ed43 6a02 	vstr	s13, [r3, #-8]
     4bc:	ed03 7a01 	vstr	s14, [r3, #-4]
                            Lfloat periodicity = 1.0f - (count * p->_weight);
     4c0:	d1e9      	bne.n	496 <audioInitAdditive+0x96>
     4c2:	eec7 3a84 	vdiv.f32	s7, s15, s8
     4c6:	4b86      	ldr	r3, [pc, #536]	; (6e0 <audioInitAdditive+0x2e0>)
                        int period = tZeroCrossingInfo_period(&curr, &next);
     4c8:	f107 0024 	add.w	r0, r7, #36	; 0x24
                            Lfloat periodicity = 1.0f - (count * p->_weight);
     4cc:	ee87 4aa4 	vdiv.f32	s8, s15, s9
    return sub_collector_try_sub_harmonic(collector, fmin(collector->_range, multiple), info, incoming_period/multiple);
}

static inline void sub_collector_process(_sub_collector* collector, _auto_correlation_info info)
{
    if (collector->_fundamental._period == -1.0f)
     4d0:	edc3 3a00 	vstr	s7, [r3]
     4d4:	ed83 4a01 	vstr	s8, [r3, #4]
     4d8:	ed91 7a00 	vldr	s14, [r1]
     4dc:	463a      	mov	r2, r7
     4de:	edd4 7a00 	vldr	s15, [r4]
     4e2:	462b      	mov	r3, r5
    Lfloat result = n->_leading_edge - z->_leading_edge;
     4e4:	ee23 7a87 	vmul.f32	s14, s7, s14
    Lfloat prev1 = z->_before_crossing;
     4e8:	ee64 7a27 	vmul.f32	s15, s8, s15
    Lfloat prev2 = n->_before_crossing;
     4ec:	eca1 7a01 	vstmia	r1!, {s14}
                            Lfloat periodicity = 1.0f - (count * p->_weight);
     4f0:	ece4 7a01 	vstmia	r4!, {s15}
    Lfloat result = n->_leading_edge - z->_leading_edge;
     4f4:	edd3 6a00 	vldr	s13, [r3]
    return result + (dx2 - dx1);
     4f8:	320c      	adds	r2, #12
     4fa:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
    Lfloat dy2 = curr2 - prev2;
     4fe:	33d8      	adds	r3, #216	; 0xd8
    Lfloat dx2 = -prev2 / dy2;
     500:	ed53 7a12 	vldr	s15, [r3, #-72]	; 0xffffffb8
     504:	ed12 5a03 	vldr	s10, [r2, #-12]
    Lfloat dy1 = curr1 - prev1;
     508:	ed52 5a02 	vldr	s11, [r2, #-8]
    Lfloat dx1 = -prev1 / dy1;
     50c:	ed12 6a01 	vldr	s12, [r2, #-4]
    Lfloat dy2 = curr2 - prev2;
     510:	ee66 6a85 	vmul.f32	s13, s13, s10
    Lfloat dy1 = curr1 - prev1;
     514:	ee27 7a25 	vmul.f32	s14, s14, s11
    Lfloat dx2 = -prev2 / dy2;
     518:	4282      	cmp	r2, r0
     51a:	ee67 7a86 	vmul.f32	s15, s15, s12
    Lfloat dx1 = -prev1 / dy1;
     51e:	ed43 6a36 	vstr	s13, [r3, #-216]	; 0xffffff28
    return result + (dx2 - dx1);
     522:	ed03 7a24 	vstr	s14, [r3, #-144]	; 0xffffff70
     526:	ed43 7a12 	vstr	s15, [r3, #-72]	; 0xffffffb8
        result->periodicity = info._periodicity;
    }
    else
    {
        result->period = -1.0f;
        result->period = 0.0f;
     52a:	d1e3      	bne.n	4f4 <audioInitAdditive+0xf4>
     52c:	4571      	cmp	r1, lr
     52e:	f105 0504 	add.w	r5, r5, #4
    unsigned int trailing_edge = 0;
     532:	d1d1      	bne.n	4d8 <audioInitAdditive+0xd8>
     534:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
        if (info._periodicity > collector->_fundamental._periodicity &&
     538:	4b6a      	ldr	r3, [pc, #424]	; (6e4 <audioInitAdditive+0x2e4>)
     53a:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 72c <audioInitAdditive+0x32c>
     53e:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 730 <audioInitAdditive+0x330>
    return sub_collector_try_sub_harmonic(collector, fmin(collector->_range, multiple), info, incoming_period/multiple);
     542:	f8df a1f0 	ldr.w	sl, [pc, #496]	; 734 <audioInitAdditive+0x334>
     546:	ed9f 2a68 	vldr	s4, [pc, #416]	; 6e8 <audioInitAdditive+0x2e8>
        if (info._periodicity > collector->_fundamental._periodicity &&
     54a:	eddf 2a68 	vldr	s5, [pc, #416]	; 6ec <audioInitAdditive+0x2ec>
    return sub_collector_try_sub_harmonic(collector, fmin(collector->_range, multiple), info, incoming_period/multiple);
     54e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 738 <audioInitAdditive+0x338>
     552:	4f67      	ldr	r7, [pc, #412]	; (6f0 <audioInitAdditive+0x2f0>)
     554:	4e67      	ldr	r6, [pc, #412]	; (6f4 <audioInitAdditive+0x2f4>)
     556:	4d68      	ldr	r5, [pc, #416]	; (6f8 <audioInitAdditive+0x2f8>)
     558:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 718 <audioInitAdditive+0x318>
        if (info._periodicity > collector->_fundamental._periodicity &&
     55c:	4c67      	ldr	r4, [pc, #412]	; (6fc <audioInitAdditive+0x2fc>)
     55e:	9300      	str	r3, [sp, #0]
     560:	ecfe 6a01 	vldmia	lr!, {s13}
            Lfloat periodicity_diff = fabsf(info._periodicity - collector->_fundamental._periodicity);
     564:	46ac      	mov	ip, r5
     566:	ecf9 7a01 	vldmia	r9!, {s15}
            if (periodicity_diff <= collector->_harmonic_threshold)
     56a:	4630      	mov	r0, r6
     56c:	9a00      	ldr	r2, [sp, #0]
     56e:	4639      	mov	r1, r7
     570:	ee84 7aa7 	vdiv.f32	s14, s9, s15
                collector->_fundamental._i1 = info._i1;
     574:	4b62      	ldr	r3, [pc, #392]	; (700 <audioInitAdditive+0x300>)
                            Lfloat periodicity = 1.0f - (count * p->_weight);
     576:	eec4 7aa6 	vdiv.f32	s15, s9, s13
            if (periodicity_diff <= collector->_harmonic_threshold)
     57a:	ee77 7ac7 	vsub.f32	s15, s15, s14
                collector->_fundamental._i1 = info._i1;
     57e:	ee67 7a82 	vmul.f32	s15, s15, s4
                            if (count == 0)
     582:	ee67 6aa2 	vmul.f32	s13, s15, s5
     586:	eceb 7a01 	vstmia	fp!, {s15}
                                for (int d = start - 1; d > p->_min_period; --d)
     58a:	ee37 7a66 	vsub.f32	s14, s14, s13
                                for (int d = start + 1; d < mid; ++d)
     58e:	ecea 6a01 	vstmia	sl!, {s13}
                            Lfloat periodicity = 1.0f - (count * p->_weight);
     592:	eca2 7a01 	vstmia	r2!, {s14}
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     596:	9200      	str	r2, [sp, #0]
     598:	4642      	mov	r2, r8
     59a:	ed92 6a12 	vldr	s12, [r2, #72]	; 0x48
     59e:	330c      	adds	r3, #12
     5a0:	edd2 5a00 	vldr	s11, [r2]
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
     5a4:	3180      	adds	r1, #128	; 0x80
     5a6:	edd2 6a24 	vldr	s13, [r2, #144]	; 0x90
     5aa:	ee84 7a86 	vdiv.f32	s14, s9, s12
     5ae:	ed53 7a02 	vldr	s15, [r3, #-8]
     5b2:	32d8      	adds	r2, #216	; 0xd8
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
     5b4:	3080      	adds	r0, #128	; 0x80
     5b6:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
     5ba:	ee84 6aa5 	vdiv.f32	s12, s9, s11
     5be:	ed53 5a01 	vldr	s11, [r3, #-4]
  return status;
     5c2:	ee84 5aa6 	vdiv.f32	s10, s9, s13
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c6:	ed53 6a03 	vldr	s13, [r3, #-12]
     5ca:	429c      	cmp	r4, r3
     5cc:	ee37 4ae6 	vsub.f32	s8, s15, s13
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
     5d0:	ee75 5ae7 	vsub.f32	s11, s11, s15
     5d4:	ee37 3a46 	vsub.f32	s6, s14, s12
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
     5d8:	eec3 3a04 	vdiv.f32	s7, s6, s8
     5dc:	ee35 5a47 	vsub.f32	s10, s10, s14
     5e0:	ee85 4a25 	vdiv.f32	s8, s10, s11
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
     5e4:	ee63 6aa6 	vmul.f32	s13, s7, s13
		*d++ = (BYTE)val;
     5e8:	ed41 3a20 	vstr	s7, [r1, #-128]	; 0xffffff80
     5ec:	ee36 6a66 	vsub.f32	s12, s12, s13
     5f0:	ed40 6a20 	vstr	s13, [r0, #-128]	; 0xffffff80
     5f4:	ed0c 6a20 	vstr	s12, [ip, #-128]	; 0xffffff80
	*ptr++ = (BYTE)val; val >>= 8;
     5f8:	ee64 7a27 	vmul.f32	s15, s8, s15
			pte[PTE_Boot] = 0;					/* Boot indicator */
			pte[PTE_StHead] = 1;				/* Start head */
			pte[PTE_StSec] = 1;					/* Start sector */
			pte[PTE_StCyl] = 0;					/* Start cylinder */
			pte[PTE_System] = sys;				/* System type */
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     5fc:	ed01 4a10 	vstr	s8, [r1, #-64]	; 0xffffffc0
	*ptr++ = (BYTE)val; val >>= 8;
     600:	ee37 7a67 	vsub.f32	s14, s14, s15
     604:	ed40 7a10 	vstr	s15, [r0, #-64]	; 0xffffffc0
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     608:	ed0c 7a10 	vstr	s14, [ip, #-64]	; 0xffffffc0
			pte[PTE_System] = sys;				/* System type */
     60c:	d1c5      	bne.n	59a <audioInitAdditive+0x19a>
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     60e:	4b3d      	ldr	r3, [pc, #244]	; (704 <audioInitAdditive+0x304>)
     610:	f108 0804 	add.w	r8, r8, #4
			pte[PTE_EdHead] = 254;				/* End head */
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
     614:	3704      	adds	r7, #4
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     616:	3604      	adds	r6, #4
	*ptr++ = (BYTE)val; val >>= 8;
     618:	459e      	cmp	lr, r3
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     61a:	f105 0504 	add.w	r5, r5, #4
	*ptr++ = (BYTE)val; val >>= 8;
     61e:	d19f      	bne.n	560 <audioInitAdditive+0x160>
     620:	4b39      	ldr	r3, [pc, #228]	; (708 <audioInitAdditive+0x308>)
	*ptr++ = (BYTE)val; val >>= 8;
     622:	f04f 0b00 	mov.w	fp, #0
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     626:	4f39      	ldr	r7, [pc, #228]	; (70c <audioInitAdditive+0x30c>)
	*ptr++ = (BYTE)val; val >>= 8;
     628:	9300      	str	r3, [sp, #0]
	*ptr++ = (BYTE)val; val >>= 8;
     62a:	4b39      	ldr	r3, [pc, #228]	; (710 <audioInitAdditive+0x310>)
     62c:	eddf 9a39 	vldr	s19, [pc, #228]	; 714 <audioInitAdditive+0x314>
	*ptr++ = (BYTE)val; val >>= 8;
     630:	9301      	str	r3, [sp, #4]
     632:	4b39      	ldr	r3, [pc, #228]	; (718 <audioInitAdditive+0x318>)
	*ptr++ = (BYTE)val; val >>= 8;
     634:	f8df a104 	ldr.w	sl, [pc, #260]	; 73c <audioInitAdditive+0x33c>
	*ptr++ = (BYTE)val;
     638:	f103 0940 	add.w	r9, r3, #64	; 0x40
	*ptr++ = (BYTE)val;
     63c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 740 <audioInitAdditive+0x340>
			pte[PTE_StHead] = 1;				/* Start head */
     640:	ed9f 9a36 	vldr	s18, [pc, #216]	; 71c <audioInitAdditive+0x31c>
			pte[PTE_EdHead] = 254;				/* End head */
     644:	ed9f 8a36 	vldr	s16, [pc, #216]	; 720 <audioInitAdditive+0x320>
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     648:	eddf 8a36 	vldr	s17, [pc, #216]	; 724 <audioInitAdditive+0x324>
			pte[PTE_StHead] = 1;				/* Start head */
     64c:	9e01      	ldr	r6, [sp, #4]
			pte[PTE_StSec] = 1;					/* Start sector */
     64e:	4d32      	ldr	r5, [pc, #200]	; (718 <audioInitAdditive+0x318>)
     650:	9c00      	ldr	r4, [sp, #0]
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     652:	4620      	mov	r0, r4
     654:	4651      	mov	r1, sl
     656:	f008 fd53 	bl	9100 <__tCycle_init_veneer>
     65a:	ecf5 0a01 	vldmia	r5!, {s1}
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
     65e:	eef0 1a49 	vmov.f32	s3, s18
     662:	4653      	mov	r3, sl
     664:	eeb0 1a48 	vmov.f32	s2, s16
	if (vol < 0) return FR_INVALID_DRIVE;
     668:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     66c:	4630      	mov	r0, r6
				sys = 0x06;	/* FAT12/16 (>=64KS) */
     66e:	ee60 0aa9 	vmul.f32	s1, s1, s19
			sys = 0x0C;		/* FAT32X */
     672:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
     676:	4641      	mov	r1, r8
     678:	f008 ff22 	bl	94c0 <__tADSRT_init_veneer>
     67c:	eef0 0a68 	vmov.f32	s1, s17
     680:	eeb0 0a48 	vmov.f32	s0, s16
     684:	4651      	mov	r1, sl
     686:	4638      	mov	r0, r7
     688:	3404      	adds	r4, #4
     68a:	f008 fdc1 	bl	9210 <__tExpSmooth_init_veneer>
            	tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
     68e:	eeb0 0a48 	vmov.f32	s0, s16
     692:	4638      	mov	r0, r7
     694:	3604      	adds	r6, #4
     696:	f008 ff6b 	bl	9570 <__tExpSmooth_setDest_veneer>
     69a:	45a9      	cmp	r9, r5
     69c:	d1d9      	bne.n	652 <audioInitAdditive+0x252>
     69e:	9b00      	ldr	r3, [sp, #0]
     6a0:	f10b 0b10 	add.w	fp, fp, #16
     6a4:	3704      	adds	r7, #4
     6a6:	3340      	adds	r3, #64	; 0x40
     6a8:	f1bb 0f20 	cmp.w	fp, #32
     6ac:	9300      	str	r3, [sp, #0]
            tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, 0.0f - x, 0.0f, -sw);
     6ae:	9b01      	ldr	r3, [sp, #4]
     6b0:	f103 0340 	add.w	r3, r3, #64	; 0x40
     6b4:	9301      	str	r3, [sp, #4]
     6b6:	d1c9      	bne.n	64c <audioInitAdditive+0x24c>
     6b8:	b003      	add	sp, #12
     6ba:	ecbd 8b04 	vpop	{d8-d9}
     6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6c2:	bf00      	nop
     6c4:	200000c0 	.word	0x200000c0
            if (p < b) {
     6c8:	20000108 	.word	0x20000108
     6cc:	200003fc 	.word	0x200003fc
     6d0:	200012c0 	.word	0x200012c0
                x = 0.5f - (p - b) * invB1;
     6d4:	20001378 	.word	0x20001378
     6d8:	20001354 	.word	0x20001354
     6dc:	2000128c 	.word	0x2000128c
     6e0:	20001284 	.word	0x20001284
                    p_at_reset -= 1.0f;
     6e4:	200011c4 	.word	0x200011c4
                    x = -0.5f + p_at_reset * invB;
     6e8:	3b84a9fa 	.word	0x3b84a9fa
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     6ec:	42f60000 	.word	0x42f60000
     6f0:	20000e44 	.word	0x20000e44
                    p_at_reset -= 1.0f;
     6f4:	20000cc4 	.word	0x20000cc4
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     6f8:	20000fc4 	.word	0x20000fc4
     6fc:	200003fc 	.word	0x200003fc
     700:	200003d8 	.word	0x200003d8
                    x = -0.5f + p_at_reset * invB;
     704:	200000b8 	.word	0x200000b8
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     708:	20000bbc 	.word	0x20000bbc
     70c:	20001344 	.word	0x20001344
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
     710:	20000c3c 	.word	0x20000c3c
     714:	447a0000 	.word	0x447a0000
                x = -0.5f + p * invB;
     718:	20000030 	.word	0x20000030
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
     71c:	43160000 	.word	0x43160000
                k = 0;
     720:	00000000 	.word	0x00000000
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
     724:	3a83126f 	.word	0x3a83126f
     728:	2000134c 	.word	0x2000134c
     72c:	20000078 	.word	0x20000078
     730:	20001184 	.word	0x20001184
                x = -0.5f + p * invB;
     734:	20001144 	.word	0x20001144
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
     738:	20000150 	.word	0x20000150
        	p = (1.0f - eof_offset) + 0.25f;
     73c:	20005484 	.word	0x20005484
     740:	200013a8 	.word	0x200013a8
     744:	f3af 8000 	nop.w
        if (!k) {
     748:	f3af 8000 	nop.w
     74c:	f3af 8000 	nop.w
            x = -0.5f + p_at_reset * invB;
     750:	f3af 8000 	nop.w
     754:	f3af 8000 	nop.w
                    p_at_reset -= 1.0f;
     758:	f3af 8000 	nop.w
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
     75c:	f3af 8000 	nop.w

00000760 <audioFreeAdditive>:
     760:	4770      	bx	lr
     762:	bf00      	nop
     764:	f3af 8000 	nop.w
     768:	f3af 8000 	nop.w
     76c:	f3af 8000 	nop.w
     770:	f3af 8000 	nop.w
     774:	f3af 8000 	nop.w
     778:	f3af 8000 	nop.w
                if (!k && p_at_reset >= b) {
     77c:	f3af 8000 	nop.w

00000780 <audioSwitchToAdditive>:
     780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     784:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
                    x = -0.5f + p_at_reset * invB;
     788:	ed9f 0a24 	vldr	s0, [pc, #144]	; 81c <audioSwitchToAdditive+0x9c>
     78c:	4824      	ldr	r0, [pc, #144]	; (820 <audioSwitchToAdditive+0xa0>)
     78e:	2500      	movs	r5, #0
                x = 0.5f - (p - b) * invB1;
     790:	4c24      	ldr	r4, [pc, #144]	; (824 <audioSwitchToAdditive+0xa4>)
     792:	f04f 0801 	mov.w	r8, #1
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
     796:	4f24      	ldr	r7, [pc, #144]	; (828 <audioSwitchToAdditive+0xa8>)
     798:	4e24      	ldr	r6, [pc, #144]	; (82c <audioSwitchToAdditive+0xac>)
     79a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 848 <audioSwitchToAdditive+0xc8>
                x = 0.5f - (p - b) * invB1;
     79e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 84c <audioSwitchToAdditive+0xcc>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
     7a2:	ed2d 8b02 	vpush	{d8}
     7a6:	ed9f 8a22 	vldr	s16, [pc, #136]	; 830 <audioSwitchToAdditive+0xb0>
     7aa:	f008 fd39 	bl	9220 <__tVZFilter_setFrequencyAndResonance_veneer>
     7ae:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
     7b2:	ed9f 0a20 	vldr	s0, [pc, #128]	; 834 <audioSwitchToAdditive+0xb4>
                x = 0.5f - (p - b) * invB1;
     7b6:	4820      	ldr	r0, [pc, #128]	; (838 <audioSwitchToAdditive+0xb8>)
     7b8:	f008 fd32 	bl	9220 <__tVZFilter_setFrequencyAndResonance_veneer>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
     7bc:	eeb0 0a48 	vmov.f32	s0, s16
                    x = 0.5f - (p_at_reset - b) * invB1;
     7c0:	4620      	mov	r0, r4
     7c2:	f008 fe15 	bl	93f0 <__tExpSmooth_setFactor_veneer>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     7c6:	f8da 3000 	ldr.w	r3, [sl]
     7ca:	4620      	mov	r0, r4
     7cc:	3704      	adds	r7, #4
     7ce:	2b3d      	cmp	r3, #61	; 0x3d
     7d0:	f104 0404 	add.w	r4, r4, #4
     7d4:	f106 0604 	add.w	r6, r6, #4
     7d8:	bf0c      	ite	eq
     7da:	ed17 0a01 	vldreq	s0, [r7, #-4]
     7de:	ed16 0a01 	vldrne	s0, [r6, #-4]
                if (p_at_reset >= 1.0f) {
     7e2:	f008 fe8d 	bl	9500 <__tExpSmooth_setValAndDest_veneer>
     7e6:	f809 8005 	strb.w	r8, [r9, r5]
     7ea:	3501      	adds	r5, #1
     7ec:	2d0c      	cmp	r5, #12
                    x = 0.5f - (p_at_reset - b) * invB1;
     7ee:	d1e5      	bne.n	7bc <audioSwitchToAdditive+0x3c>
     7f0:	4e12      	ldr	r6, [pc, #72]	; (83c <audioSwitchToAdditive+0xbc>)
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     7f2:	7833      	ldrb	r3, [r6, #0]
     7f4:	b16b      	cbz	r3, 812 <audioSwitchToAdditive+0x92>
     7f6:	4d12      	ldr	r5, [pc, #72]	; (840 <audioSwitchToAdditive+0xc0>)
     7f8:	2400      	movs	r4, #0
     7fa:	ed9f 8a12 	vldr	s16, [pc, #72]	; 844 <audioSwitchToAdditive+0xc4>
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
     7fe:	4628      	mov	r0, r5
     800:	eeb0 0a48 	vmov.f32	s0, s16
                x = -0.5f + p * invB;
     804:	f008 fd70 	bl	92e8 <__tADSRT_setSustain_veneer>
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
     808:	3401      	adds	r4, #1
     80a:	7833      	ldrb	r3, [r6, #0]
                k = 0;
     80c:	3504      	adds	r5, #4
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
     80e:	42a3      	cmp	r3, r4
     810:	dcf5      	bgt.n	7fe <audioSwitchToAdditive+0x7e>
     812:	ecbd 8b02 	vpop	{d8}
     816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     81a:	bf00      	nop
     81c:	44dc0000 	.word	0x44dc0000
                x = -0.5f + p * invB;
     820:	200054e4 	.word	0x200054e4
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
     824:	20005430 	.word	0x20005430
                    x = 0.5f - (p_at_reset - b) * invB1;
     828:	20000000 	.word	0x20000000
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     82c:	200186f8 	.word	0x200186f8
     830:	3a83126f 	.word	0x3a83126f
                    x = 0.5f - (p_at_reset - b) * invB1;
     834:	42740000 	.word	0x42740000
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     838:	200054e8 	.word	0x200054e8
     83c:	20000694 	.word	0x20000694
     840:	200053b4 	.word	0x200053b4
     844:	00000000 	.word	0x00000000
     848:	20014440 	.word	0x20014440
                    x = 0.5f - (p_at_reset - b) * invB1;
     84c:	200053cc 	.word	0x200053cc
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
     850:	f3af 8000 	nop.w
        if (sw > 0)
     854:	f3af 8000 	nop.w
                    p_at_reset += 1.0f;
     858:	f3af 8000 	nop.w
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     85c:	f3af 8000 	nop.w

00000860 <audioTickAdditive>:
     860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     864:	4ca9      	ldr	r4, [pc, #676]	; (b0c <audioTickAdditive+0x2ac>)
                    p_at_reset += 1.0f;
     866:	4daa      	ldr	r5, [pc, #680]	; (b10 <audioTickAdditive+0x2b0>)
     868:	f104 0630 	add.w	r6, r4, #48	; 0x30
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     86c:	ed2d 8b10 	vpush	{d8-d15}
     870:	b087      	sub	sp, #28
     872:	4628      	mov	r0, r5
     874:	3504      	adds	r5, #4
     876:	f008 feb3 	bl	95e0 <__tExpSmooth_tick_veneer>
     87a:	eca4 0a01 	vstmia	r4!, {s0}
     87e:	42b4      	cmp	r4, r6
     880:	d1f7      	bne.n	872 <audioTickAdditive+0x12>
     882:	48a4      	ldr	r0, [pc, #656]	; (b14 <audioTickAdditive+0x2b4>)
     884:	f008 fe00 	bl	9488 <__tNoise_tick_veneer>
     888:	48a3      	ldr	r0, [pc, #652]	; (b18 <audioTickAdditive+0x2b8>)
                if (k && p_at_reset < b) {
     88a:	f008 fe01 	bl	9490 <__tVZFilter_tickEfficient_veneer>
     88e:	48a1      	ldr	r0, [pc, #644]	; (b14 <audioTickAdditive+0x2b4>)
     890:	eeb0 da40 	vmov.f32	s26, s0
                    x = 0.5f - (p_at_reset - b)  * invB1;
     894:	f008 fdf8 	bl	9488 <__tNoise_tick_veneer>
     898:	48a0      	ldr	r0, [pc, #640]	; (b1c <audioTickAdditive+0x2bc>)
     89a:	f008 fdf9 	bl	9490 <__tVZFilter_tickEfficient_veneer>
            tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, 0.0f - x, 0.0f, -sw);
     89e:	4b9b      	ldr	r3, [pc, #620]	; (b0c <audioTickAdditive+0x2ac>)
                    x = 0.5f - (p_at_reset - b)  * invB1;
     8a0:	489f      	ldr	r0, [pc, #636]	; (b20 <audioTickAdditive+0x2c0>)
     8a2:	eef0 8a40 	vmov.f32	s17, s0
                    tMBSineTri_place_dd_noBuffer(osc, j, b - p_at_reset - eof_offset, -inv_sw, -invB1 - invB, 1.0f, -sw);
     8a6:	edd3 9a00 	vldr	s19, [r3]
     8aa:	edd3 aa04 	vldr	s21, [r3, #16]
     8ae:	ed93 aa01 	vldr	s20, [r3, #4]
     8b2:	f008 fe95 	bl	95e0 <__tExpSmooth_tick_veneer>
     8b6:	4b9b      	ldr	r3, [pc, #620]	; (b24 <audioTickAdditive+0x2c4>)
     8b8:	ed8d 0a05 	vstr	s0, [sp, #20]
     8bc:	781b      	ldrb	r3, [r3, #0]
     8be:	2b00      	cmp	r3, #0
     8c0:	f000 8120 	beq.w	b04 <audioTickAdditive+0x2a4>
     8c4:	ee29 9aa9 	vmul.f32	s18, s19, s19
     8c8:	4b97      	ldr	r3, [pc, #604]	; (b28 <audioTickAdditive+0x2c8>)
     8ca:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
     8ce:	eddf 7a97 	vldr	s15, [pc, #604]	; b2c <audioTickAdditive+0x2cc>
                if (p_at_reset < 0.0f) {
     8d2:	ee3d da28 	vadd.f32	s26, s26, s17
     8d6:	9301      	str	r3, [sp, #4]
     8d8:	ee29 9a29 	vmul.f32	s18, s18, s19
                    x = -0.5f + p_at_reset * invB;
     8dc:	4b94      	ldr	r3, [pc, #592]	; (b30 <audioTickAdditive+0x2d0>)
     8de:	eddf 8a95 	vldr	s17, [pc, #596]	; b34 <audioTickAdditive+0x2d4>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     8e2:	ee78 ca6a 	vsub.f32	s25, s16, s21
                    x = -0.5f + p_at_reset * invB;
     8e6:	9304      	str	r3, [sp, #16]
        if (sw > 0)
     8e8:	ee3d da0d 	vadd.f32	s26, s26, s26
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     8ec:	ee29 9a29 	vmul.f32	s18, s18, s19
     8f0:	4b91      	ldr	r3, [pc, #580]	; (b38 <audioTickAdditive+0x2d8>)
                    p_at_reset += 1.0f;
     8f2:	ee38 ca4a 	vsub.f32	s24, s16, s20
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     8f6:	eddf da91 	vldr	s27, [pc, #580]	; b3c <audioTickAdditive+0x2dc>
                    x = 0.5f - (p_at_reset - b) * invB1;
     8fa:	eef0 9a68 	vmov.f32	s19, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     8fe:	9302      	str	r3, [sp, #8]
     900:	ee29 9a27 	vmul.f32	s18, s18, s15
                    p_at_reset += 1.0f;
     904:	2300      	movs	r3, #0
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     906:	eddf ba8e 	vldr	s23, [pc, #568]	; b40 <audioTickAdditive+0x2e0>
     90a:	ed9f ba8e 	vldr	s22, [pc, #568]	; b44 <audioTickAdditive+0x2e4>
     90e:	f8df a26c 	ldr.w	sl, [pc, #620]	; b7c <audioTickAdditive+0x31c>
                    x = 0.5f - (p_at_reset - b) * invB1;
     912:	f8df b26c 	ldr.w	fp, [pc, #620]	; b80 <audioTickAdditive+0x320>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
     916:	4f8c      	ldr	r7, [pc, #560]	; (b48 <audioTickAdditive+0x2e8>)
     918:	9303      	str	r3, [sp, #12]
     91a:	9300      	str	r3, [sp, #0]
     91c:	9d01      	ldr	r5, [sp, #4]
     91e:	4c7b      	ldr	r4, [pc, #492]	; (b0c <audioTickAdditive+0x2ac>)
     920:	4628      	mov	r0, r5
                    x = 0.5f - (p_at_reset - b) * invB1;
     922:	f008 fe5d 	bl	95e0 <__tExpSmooth_tick_veneer>
            tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, 0.0f - x, 0.0f, -sw);
     926:	edd4 7a06 	vldr	s15, [r4, #24]
     92a:	eef0 fa40 	vmov.f32	s31, s0
                    tMBSineTri_place_dd_noBuffer(osc, j, b - p_at_reset - eof_offset, -inv_sw, -invB1 - invB, 1.0f, -sw);
     92e:	4628      	mov	r0, r5
     930:	ee78 7a67 	vsub.f32	s15, s16, s15
     934:	ed94 ea05 	vldr	s28, [r4, #20]
                    x = -0.5f + p_at_reset * invB;
     938:	eeb0 0a6d 	vmov.f32	s0, s27
                    tMBSineTri_place_dd_noBuffer(osc, j, b - p_at_reset - eof_offset, -inv_sw, -invB1 - invB, 1.0f, -sw);
     93c:	ee27 7aa7 	vmul.f32	s14, s15, s15
     940:	ee27 7a27 	vmul.f32	s14, s14, s15
     944:	ee67 7a27 	vmul.f32	s15, s14, s15
     948:	ed9f 7a80 	vldr	s14, [pc, #512]	; b4c <audioTickAdditive+0x2ec>
     94c:	eea7 0a87 	vfma.f32	s0, s15, s14
                    x = -0.5f + p_at_reset * invB;
     950:	f008 fd4e 	bl	93f0 <__tExpSmooth_setFactor_veneer>
                    tMBSineTri_place_dd_noBuffer(osc, j, b - p_at_reset - eof_offset, -inv_sw, -invB1 - invB, 1.0f, -sw);
     954:	9b04      	ldr	r3, [sp, #16]
     956:	9a00      	ldr	r2, [sp, #0]
        if (sw > 0)
     958:	ecf3 7a01 	vldmia	r3!, {s15}
		tensionSpeed = tensionSpeed*tensionSpeed*tensionSpeed*tensionSpeed;
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);

		float theMIDI = (stringMIDIPitches[i]+ stringOctave[i]) + thisTension;

		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     95c:	9802      	ldr	r0, [sp, #8]
		float theMIDI = (stringMIDIPitches[i]+ stringOctave[i]) + thisTension;
     95e:	9304      	str	r3, [sp, #16]
     960:	4b7b      	ldr	r3, [pc, #492]	; (b50 <audioTickAdditive+0x2f0>)
     962:	eb03 0282 	add.w	r2, r3, r2, lsl #2
     966:	ed92 fa00 	vldr	s30, [r2]
     96a:	ee3f fa27 	vadd.f32	s30, s30, s15
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     96e:	f008 fc03 	bl	9178 <__tADSRT_tick_veneer>
		tempSamp += filtNoise * noiseEnv *  knobScaled[2];
     972:	ee6d 7a00 	vmul.f32	s15, s26, s0
     976:	ed94 7a02 	vldr	s14, [r4, #8]
		float theMIDI = (stringMIDIPitches[i]+ stringOctave[i]) + thisTension;
     97a:	eeae fa2f 	vfma.f32	s30, s28, s31
		tempSamp += filtNoise * noiseEnv *  knobScaled[2];
     97e:	eee7 8a87 	vfma.f32	s17, s15, s14
		stringFrequencies[i] = mtofTableLookup(theMIDI);
     982:	eeb0 0a4f 	vmov.f32	s0, s30
     986:	f008 fe3f 	bl	9608 <__mtofTableLookup_veneer>
		invGainSum[i] = 1.0f;
		if(gainSum[i] > 0.0001f)
     98a:	ecf7 7a01 	vldmia	r7!, {s15}
		stringFrequencies[i] = mtofTableLookup(theMIDI);
     98e:	ecaa 0a01 	vstmia	sl!, {s0}
		if(gainSum[i] > 0.0001f)
     992:	eef4 7aed 	vcmpe.f32	s15, s27
		invGainSum[i] = 1.0f;
     996:	ecab 8a01 	vstmia	fp!, {s16}
		if(gainSum[i] > 0.0001f)
     99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     99e:	dd03      	ble.n	9a8 <audioTickAdditive+0x148>
		{
			invGainSum[i] = 1.0f / gainSum[i];
     9a0:	ee88 7a27 	vdiv.f32	s14, s16, s15
     9a4:	ed0b 7a01 	vstr	s14, [fp, #-4]
		}
		gainSum[i] = 0.0f;
     9a8:	9b03      	ldr	r3, [sp, #12]
		for (int j = 0; j < NUM_OVERTONES; j++)
     9aa:	2400      	movs	r4, #0
     9ac:	4a69      	ldr	r2, [pc, #420]	; (b54 <audioTickAdditive+0x2f4>)
		gainSum[i] = 0.0f;
     9ae:	ed47 9a01 	vstr	s19, [r7, #-4]
		for (int j = 0; j < NUM_OVERTONES; j++)
     9b2:	18d6      	adds	r6, r2, r3
     9b4:	4a68      	ldr	r2, [pc, #416]	; (b58 <audioTickAdditive+0x2f8>)
     9b6:	18d5      	adds	r5, r2, r3
     9b8:	4a68      	ldr	r2, [pc, #416]	; (b5c <audioTickAdditive+0x2fc>)
     9ba:	eb02 0903 	add.w	r9, r2, r3
     9be:	4a68      	ldr	r2, [pc, #416]	; (b60 <audioTickAdditive+0x300>)
     9c0:	eb02 0803 	add.w	r8, r2, r3
		{


			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     9c4:	ee0f 4a10 	vmov	s30, r4
     9c8:	4630      	mov	r0, r6
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     9ca:	3401      	adds	r4, #1
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     9cc:	f008 fbd4 	bl	9178 <__tADSRT_tick_veneer>
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     9d0:	eeb8 facf 	vcvt.f32.s32	s30, s30
     9d4:	ed5a 6a01 	vldr	s13, [sl, #-4]
     9d8:	eeb0 7a48 	vmov.f32	s14, s16
     9dc:	ee07 4a90 	vmov	s15, r4
			//float tempFreq = 0.0f;
			float tempGain = ((tempFreq - 15000.0f) * 0.00025f);
			//float tempGain = LEAF_map(tempFreq, 15000.0f, 19000.0f, 0.0, 1.0f);
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     9e0:	eef0 0a48 	vmov.f32	s1, s16
		for (int j = 0; j < NUM_OVERTONES; j++)
     9e4:	3604      	adds	r6, #4
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     9e6:	eef8 fae7 	vcvt.f32.s32	s31, s15
     9ea:	eeaf 7a09 	vfma.f32	s14, s30, s18
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     9ee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     9f2:	ee6f faa6 	vmul.f32	s31, s31, s13
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     9f6:	eef0 ea40 	vmov.f32	s29, s0
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     9fa:	eeb0 0a69 	vmov.f32	s0, s19
			tCycle_setFreq(&additive[i][j], tempFreq);
			float upRamp = (j * invNumOvertones);
			float downRamp = 1.0f - (j * invNumOvertones);
			float freqWeight = (upRamp * freqWeightKnob) + (downRamp * oneMinusFreqWeightKnob);
			gainSum[i] += freqWeight * finalGains[i][j];
			float thisWeight = oneMinusPickup + pickupWeights[i][j] * pickup;
     9fe:	eeb0 ea6c 	vmov.f32	s28, s25
			float tempFreq = (stringFrequencies[i] * (j+1) * ((stretch * j) + 1.0f));// * ((Env2 * knobScaled[5])+ 1.0f);
     a02:	ee6f fa87 	vmul.f32	s31, s31, s14
			float tempGain = ((tempFreq - 15000.0f) * 0.00025f);
     a06:	ee3f 7aeb 	vsub.f32	s14, s31, s23
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     a0a:	eee7 0a4b 	vfms.f32	s1, s14, s22
     a0e:	f008 fe23 	bl	9658 <__LEAF_clip_veneer>
			tCycle_setFreq(&additive[i][j], tempFreq);
     a12:	eeb0 0a6f 	vmov.f32	s0, s31
     a16:	4628      	mov	r0, r5
     a18:	f008 fb6e 	bl	90f8 <__tCycle_setFreq_veneer>
			float upRamp = (j * invNumOvertones);
     a1c:	4b51      	ldr	r3, [pc, #324]	; (b64 <audioTickAdditive+0x304>)
			gainSum[i] += freqWeight * finalGains[i][j];
     a1e:	ed17 7a01 	vldr	s14, [r7, #-4]
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * thisWeight * freqWeight * invGainSum[i];
     a22:	4628      	mov	r0, r5
			float upRamp = (j * invNumOvertones);
     a24:	edd3 6a00 	vldr	s13, [r3]
		for (int j = 0; j < NUM_OVERTONES; j++)
     a28:	3504      	adds	r5, #4
			gainSum[i] += freqWeight * finalGains[i][j];
     a2a:	ecb9 6a01 	vldmia	r9!, {s12}
			float upRamp = (j * invNumOvertones);
     a2e:	ee2f fa26 	vmul.f32	s30, s30, s13
			float thisWeight = oneMinusPickup + pickupWeights[i][j] * pickup;
     a32:	ecf8 5a01 	vldmia	r8!, {s11}
     a36:	eeaa eaa5 	vfma.f32	s28, s21, s11
			float downRamp = 1.0f - (j * invNumOvertones);
     a3a:	ee78 fa4f 	vsub.f32	s31, s16, s30
			float freqWeight = (upRamp * freqWeightKnob) + (downRamp * oneMinusFreqWeightKnob);
     a3e:	ee6f fa8c 	vmul.f32	s31, s31, s24
     a42:	eeea fa0f 	vfma.f32	s31, s20, s30
			gainSum[i] += freqWeight * finalGains[i][j];
     a46:	eea6 7a2f 	vfma.f32	s14, s12, s31
     a4a:	ed07 7a01 	vstr	s14, [r7, #-4]
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * thisWeight * freqWeight * invGainSum[i];
     a4e:	f008 fc0b 	bl	9268 <__tCycle_tick_veneer>
     a52:	ee20 0a2e 	vmul.f32	s0, s0, s29
     a56:	ed1b 7a01 	vldr	s14, [fp, #-4]
		for (int j = 0; j < NUM_OVERTONES; j++)
     a5a:	2c10      	cmp	r4, #16
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * thisWeight * freqWeight * invGainSum[i];
     a5c:	ee60 7a0e 	vmul.f32	s15, s0, s28
     a60:	ee67 7aaf 	vmul.f32	s15, s15, s31
     a64:	eee7 8a87 	vfma.f32	s17, s15, s14
		for (int j = 0; j < NUM_OVERTONES; j++)
     a68:	d1ac      	bne.n	9c4 <audioTickAdditive+0x164>
	for (int i = 0; i < numStringsThisBoard; i++)
     a6a:	9a01      	ldr	r2, [sp, #4]
     a6c:	9b00      	ldr	r3, [sp, #0]
     a6e:	3204      	adds	r2, #4
     a70:	3301      	adds	r3, #1
     a72:	9201      	str	r2, [sp, #4]
     a74:	9a02      	ldr	r2, [sp, #8]
     a76:	9300      	str	r3, [sp, #0]
     a78:	3204      	adds	r2, #4
     a7a:	9202      	str	r2, [sp, #8]
     a7c:	9a03      	ldr	r2, [sp, #12]
     a7e:	3240      	adds	r2, #64	; 0x40
     a80:	9203      	str	r2, [sp, #12]
     a82:	4a28      	ldr	r2, [pc, #160]	; (b24 <audioTickAdditive+0x2c4>)
     a84:	7812      	ldrb	r2, [r2, #0]
     a86:	429a      	cmp	r2, r3
     a88:	f73f af48 	bgt.w	91c <audioTickAdditive+0xbc>
		}


	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
     a8c:	ed9f 0a36 	vldr	s0, [pc, #216]	; b68 <audioTickAdditive+0x308>
     a90:	ed9d 7a05 	vldr	s14, [sp, #20]
     a94:	eef0 0a40 	vmov.f32	s1, s0
     a98:	eddf 7a34 	vldr	s15, [pc, #208]	; b6c <audioTickAdditive+0x30c>
     a9c:	ed9f 1a34 	vldr	s2, [pc, #208]	; b70 <audioTickAdditive+0x310>
     aa0:	eee7 0a27 	vfma.f32	s1, s14, s15
     aa4:	f008 fdd8 	bl	9658 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
     aa8:	eefd 6ac0 	vcvt.s32.f32	s13, s0
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
	tempSamp *= 0.5f;
     aac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
     ab0:	4930      	ldr	r1, [pc, #192]	; (b74 <audioTickAdditive+0x314>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
     ab2:	4a31      	ldr	r2, [pc, #196]	; (b78 <audioTickAdditive+0x318>)
	float omAlpha = 1.0f - alpha;
     ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	int volIdxInt = (int) volIdx;
     ab8:	ee16 3a90 	vmov	r3, s13
	tempSamp *= masterVolFromBrain;
     abc:	edd1 6a00 	vldr	s13, [r1]
	tempSamp *= 0.5f;
     ac0:	ee68 8aa7 	vmul.f32	s17, s17, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
     ac4:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
     ac6:	ee07 3a90 	vmov	s15, r3
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
     aca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
     ace:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
     ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
     ad6:	ed93 6a00 	vldr	s12, [r3]
     ada:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float alpha = volIdx-volIdxInt;
     ade:	ee70 7a67 	vsub.f32	s15, s0, s15
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
     ae2:	edd2 5a00 	vldr	s11, [r2]
	float omAlpha = 1.0f - alpha;
     ae6:	ee37 7a67 	vsub.f32	s14, s14, s15
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
     aea:	ee67 7aa5 	vmul.f32	s15, s15, s11
     aee:	eee6 7a07 	vfma.f32	s15, s12, s14
	tempSamp *= outVol;
     af2:	ee67 7aa8 	vmul.f32	s15, s15, s17
	return tempSamp;
}
     af6:	ee27 0aa6 	vmul.f32	s0, s15, s13
     afa:	b007      	add	sp, #28
     afc:	ecbd 8b10 	vpop	{d8-d15}
     b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	float tempSamp = 0.0f;
     b04:	eddf 8a0b 	vldr	s17, [pc, #44]	; b34 <audioTickAdditive+0x2d4>
     b08:	e7c0      	b.n	a8c <audioTickAdditive+0x22c>
     b0a:	bf00      	nop
     b0c:	200053e0 	.word	0x200053e0
     b10:	20005430 	.word	0x20005430
     b14:	200054dc 	.word	0x200054dc
     b18:	200054e4 	.word	0x200054e4
     b1c:	200054e8 	.word	0x200054e8
     b20:	2001444c 	.word	0x2001444c
     b24:	20000694 	.word	0x20000694
     b28:	20001344 	.word	0x20001344
     b2c:	3e99999a 	.word	0x3e99999a
     b30:	2001441c 	.word	0x2001441c
     b34:	00000000 	.word	0x00000000
     b38:	200053b4 	.word	0x200053b4
     b3c:	38d1b717 	.word	0x38d1b717
     b40:	466a6000 	.word	0x466a6000
     b44:	3983126f 	.word	0x3983126f
     b48:	200012b0 	.word	0x200012b0
     b4c:	3c23d70a 	.word	0x3c23d70a
     b50:	20014414 	.word	0x20014414
     b54:	20000c3c 	.word	0x20000c3c
     b58:	20000bbc 	.word	0x20000bbc
     b5c:	20001204 	.word	0x20001204
     b60:	200012c4 	.word	0x200012c4
     b64:	200012c0 	.word	0x200012c0
     b68:	423c0000 	.word	0x423c0000
     b6c:	42a00000 	.word	0x42a00000
     b70:	42fe0000 	.word	0x42fe0000
     b74:	2000068c 	.word	0x2000068c
     b78:	200006a0 	.word	0x200006a0
     b7c:	200143cc 	.word	0x200143cc
     b80:	200012b8 	.word	0x200012b8
     b84:	f3af 8000 	nop.w
     b88:	f3af 8000 	nop.w
     b8c:	f3af 8000 	nop.w
     b90:	f3af 8000 	nop.w
     b94:	f3af 8000 	nop.w
     b98:	f3af 8000 	nop.w
     b9c:	f3af 8000 	nop.w

00000ba0 <audioFrameAdditive>:
	uint32_t tempCountFrame = DWT->CYCCNT;
     ba0:	4b8f      	ldr	r3, [pc, #572]	; (de0 <audioFrameAdditive+0x240>)
{
     ba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (resetStringInputs)
     ba6:	f8df 82a0 	ldr.w	r8, [pc, #672]	; e48 <audioFrameAdditive+0x2a8>
		for (int i = 0; i < numStringsThisBoard; i++)
     baa:	4c8e      	ldr	r4, [pc, #568]	; (de4 <audioFrameAdditive+0x244>)
{
     bac:	ed2d 8b10 	vpush	{d8-d15}
	uint32_t tempCountFrame = DWT->CYCCNT;
     bb0:	685b      	ldr	r3, [r3, #4]
{
     bb2:	b08f      	sub	sp, #60	; 0x3c
	uint32_t tempCountFrame = DWT->CYCCNT;
     bb4:	9309      	str	r3, [sp, #36]	; 0x24
	if (resetStringInputs)
     bb6:	f898 3000 	ldrb.w	r3, [r8]
{
     bba:	900a      	str	r0, [sp, #40]	; 0x28
	if (resetStringInputs)
     bbc:	2b00      	cmp	r3, #0
     bbe:	f040 80c4 	bne.w	d4a <audioFrameAdditive+0x1aa>
	for (int i = 0; i < numStringsThisBoard; i++)
     bc2:	4b89      	ldr	r3, [pc, #548]	; (de8 <audioFrameAdditive+0x248>)
     bc4:	9303      	str	r3, [sp, #12]
		for (int i = 0; i < numStringsThisBoard; i++)
     bc6:	7823      	ldrb	r3, [r4, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
     bc8:	2b00      	cmp	r3, #0
     bca:	f000 80e8 	beq.w	d9e <audioFrameAdditive+0x1fe>
     bce:	4d87      	ldr	r5, [pc, #540]	; (dec <audioFrameAdditive+0x24c>)
     bd0:	2600      	movs	r6, #0
		additivePickupPos[i] = (knobScaled[3] * 0.4f) + 0.1f;
     bd2:	ed9f 9a87 	vldr	s18, [pc, #540]	; df0 <audioFrameAdditive+0x250>
     bd6:	eddf 8a87 	vldr	s17, [pc, #540]	; df4 <audioFrameAdditive+0x254>
			Lfloat x0 = additivePickupPos[i] * PI;
     bda:	ed9f 8a87 	vldr	s16, [pc, #540]	; df8 <audioFrameAdditive+0x258>
     bde:	4f87      	ldr	r7, [pc, #540]	; (dfc <audioFrameAdditive+0x25c>)
     be0:	f8df a268 	ldr.w	sl, [pc, #616]	; e4c <audioFrameAdditive+0x2ac>
		additivePickupPos[i] = (knobScaled[3] * 0.4f) + 0.1f;
     be4:	eeb0 0a68 	vmov.f32	s0, s17
     be8:	edda 7a03 	vldr	s15, [sl, #12]
     bec:	46b9      	mov	r9, r7
		for (int j = 0; j < NUM_OVERTONES; j++)
     bee:	f04f 0800 	mov.w	r8, #0
		additivePickupPos[i] = (knobScaled[3] * 0.4f) + 0.1f;
     bf2:	eea7 0a89 	vfma.f32	s0, s15, s18
     bf6:	eca5 0a01 	vstmia	r5!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
     bfa:	e001      	b.n	c00 <audioFrameAdditive+0x60>
			Lfloat x0 = additivePickupPos[i] * PI;
     bfc:	ed15 0a01 	vldr	s0, [r5, #-4]
			pickupWeights[i][j] = arm_sin_f32((j + 1) * x0);
     c00:	f108 0801 	add.w	r8, r8, #1
			Lfloat x0 = additivePickupPos[i] * PI;
     c04:	ee20 0a08 	vmul.f32	s0, s0, s16
			pickupWeights[i][j] = arm_sin_f32((j + 1) * x0);
     c08:	ee07 8a90 	vmov	s15, r8
     c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     c10:	ee27 0a80 	vmul.f32	s0, s15, s0
     c14:	f008 fbc0 	bl	9398 <__arm_sin_f32_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
     c18:	f1b8 0f10 	cmp.w	r8, #16
			pickupWeights[i][j] = arm_sin_f32((j + 1) * x0);
     c1c:	eca9 0a01 	vstmia	r9!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
     c20:	d1ec      	bne.n	bfc <audioFrameAdditive+0x5c>
	for (int i = 0; i < numStringsThisBoard; i++)
     c22:	3601      	adds	r6, #1
     c24:	7823      	ldrb	r3, [r4, #0]
     c26:	3740      	adds	r7, #64	; 0x40
     c28:	42b3      	cmp	r3, r6
     c2a:	dcdb      	bgt.n	be4 <audioFrameAdditive+0x44>
	if (newPluck)
     c2c:	9a03      	ldr	r2, [sp, #12]
     c2e:	6812      	ldr	r2, [r2, #0]
     c30:	2a00      	cmp	r2, #0
     c32:	d056      	beq.n	ce2 <audioFrameAdditive+0x142>
		for (int i = 0; i < numStringsThisBoard; i++)
     c34:	2b00      	cmp	r3, #0
     c36:	d051      	beq.n	cdc <audioFrameAdditive+0x13c>
     c38:	4b71      	ldr	r3, [pc, #452]	; (e00 <audioFrameAdditive+0x260>)
     c3a:	f04f 0900 	mov.w	r9, #0
     c3e:	f8df b210 	ldr.w	fp, [pc, #528]	; e50 <audioFrameAdditive+0x2b0>
     c42:	9302      	str	r3, [sp, #8]
     c44:	4b6f      	ldr	r3, [pc, #444]	; (e04 <audioFrameAdditive+0x264>)
					thisDecay *= 2000.0f * knobScaled[10];
     c46:	ed9f da70 	vldr	s26, [pc, #448]	; e08 <audioFrameAdditive+0x268>
     c4a:	9308      	str	r3, [sp, #32]
     c4c:	4b6f      	ldr	r3, [pc, #444]	; (e0c <audioFrameAdditive+0x26c>)
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     c4e:	eddf ea70 	vldr	s29, [pc, #448]	; e10 <audioFrameAdditive+0x270>
     c52:	9304      	str	r3, [sp, #16]
     c54:	4b6f      	ldr	r3, [pc, #444]	; (e14 <audioFrameAdditive+0x274>)
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     c56:	eddf da70 	vldr	s27, [pc, #448]	; e18 <audioFrameAdditive+0x278>
     c5a:	9305      	str	r3, [sp, #20]
     c5c:	4b6f      	ldr	r3, [pc, #444]	; (e1c <audioFrameAdditive+0x27c>)
     c5e:	ed9f ea70 	vldr	s28, [pc, #448]	; e20 <audioFrameAdditive+0x280>
     c62:	9306      	str	r3, [sp, #24]
     c64:	4b6f      	ldr	r3, [pc, #444]	; (e24 <audioFrameAdditive+0x284>)
     c66:	940c      	str	r4, [sp, #48]	; 0x30
     c68:	9307      	str	r3, [sp, #28]
     c6a:	f8cd b004 	str.w	fp, [sp, #4]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
     c6e:	9b01      	ldr	r3, [sp, #4]
     c70:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
     c74:	b29b      	uxth	r3, r3
     c76:	b933      	cbnz	r3, c86 <audioFrameAdditive+0xe6>
     c78:	4b6b      	ldr	r3, [pc, #428]	; (e28 <audioFrameAdditive+0x288>)
     c7a:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
     c7e:	b29b      	uxth	r3, r3
     c80:	2b00      	cmp	r3, #0
     c82:	f040 80e7 	bne.w	e54 <audioFrameAdditive+0x2b4>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
     c86:	9b01      	ldr	r3, [sp, #4]
     c88:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
     c8c:	b29b      	uxth	r3, r3
     c8e:	b133      	cbz	r3, c9e <audioFrameAdditive+0xfe>
     c90:	4b65      	ldr	r3, [pc, #404]	; (e28 <audioFrameAdditive+0x288>)
     c92:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
     c96:	b29b      	uxth	r3, r3
     c98:	2b00      	cmp	r3, #0
     c9a:	f000 8093 	beq.w	dc4 <audioFrameAdditive+0x224>
     c9e:	9c08      	ldr	r4, [sp, #32]
     ca0:	3440      	adds	r4, #64	; 0x40
		for (int i = 0; i < numStringsThisBoard; i++)
     ca2:	9b02      	ldr	r3, [sp, #8]
			previousStringInputs[i] = stringInputs[i];
     ca4:	9a01      	ldr	r2, [sp, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
     ca6:	3304      	adds	r3, #4
     ca8:	9408      	str	r4, [sp, #32]
     caa:	9302      	str	r3, [sp, #8]
     cac:	9b04      	ldr	r3, [sp, #16]
     cae:	3340      	adds	r3, #64	; 0x40
     cb0:	9304      	str	r3, [sp, #16]
     cb2:	9b05      	ldr	r3, [sp, #20]
     cb4:	3304      	adds	r3, #4
     cb6:	9305      	str	r3, [sp, #20]
     cb8:	9b06      	ldr	r3, [sp, #24]
     cba:	3304      	adds	r3, #4
     cbc:	9306      	str	r3, [sp, #24]
     cbe:	9b07      	ldr	r3, [sp, #28]
     cc0:	3304      	adds	r3, #4
     cc2:	9307      	str	r3, [sp, #28]
			previousStringInputs[i] = stringInputs[i];
     cc4:	4b58      	ldr	r3, [pc, #352]	; (e28 <audioFrameAdditive+0x288>)
     cc6:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
     cca:	b29b      	uxth	r3, r3
     ccc:	f822 3019 	strh.w	r3, [r2, r9, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     cd0:	f109 0901 	add.w	r9, r9, #1
     cd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
     cd6:	781b      	ldrb	r3, [r3, #0]
     cd8:	454b      	cmp	r3, r9
     cda:	dcc8      	bgt.n	c6e <audioFrameAdditive+0xce>
		newPluck = 0;
     cdc:	2300      	movs	r3, #0
     cde:	9a03      	ldr	r2, [sp, #12]
     ce0:	6013      	str	r3, [r2, #0]
     ce2:	4c52      	ldr	r4, [pc, #328]	; (e2c <audioFrameAdditive+0x28c>)
     ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     ce6:	f504 7500 	add.w	r5, r4, #512	; 0x200
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     cea:	ed9f 8a51 	vldr	s16, [pc, #324]	; e30 <audioFrameAdditive+0x290>
     cee:	eb04 0483 	add.w	r4, r4, r3, lsl #2
     cf2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     cf6:	f7ff fdb3 	bl	860 <audioTickAdditive>
     cfa:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     cfe:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     d00:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     d04:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     d06:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
     d0a:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     d0e:	d1f2      	bne.n	cf6 <audioFrameAdditive+0x156>
	if (switchStrings)
     d10:	4c48      	ldr	r4, [pc, #288]	; (e34 <audioFrameAdditive+0x294>)
     d12:	6823      	ldr	r3, [r4, #0]
     d14:	2b00      	cmp	r3, #0
     d16:	d14a      	bne.n	dae <audioFrameAdditive+0x20e>
	switchStrings = 0;
     d18:	2200      	movs	r2, #0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     d1a:	4847      	ldr	r0, [pc, #284]	; (e38 <audioFrameAdditive+0x298>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
     d1c:	4b30      	ldr	r3, [pc, #192]	; (de0 <audioFrameAdditive+0x240>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     d1e:	ed90 7a00 	vldr	s14, [r0]
	switchStrings = 0;
     d22:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
     d24:	9809      	ldr	r0, [sp, #36]	; 0x24
     d26:	685b      	ldr	r3, [r3, #4]
     d28:	4944      	ldr	r1, [pc, #272]	; (e3c <audioFrameAdditive+0x29c>)
     d2a:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     d2c:	4a44      	ldr	r2, [pc, #272]	; (e40 <audioFrameAdditive+0x2a0>)
     d2e:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
     d32:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
     d38:	ee67 7a87 	vmul.f32	s15, s15, s14
     d3c:	edc2 7a00 	vstr	s15, [r2]
}
     d40:	b00f      	add	sp, #60	; 0x3c
     d42:	ecbd 8b10 	vpop	{d8-d15}
     d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
     d4a:	7823      	ldrb	r3, [r4, #0]
     d4c:	2b00      	cmp	r3, #0
     d4e:	d032      	beq.n	db6 <audioFrameAdditive+0x216>
     d50:	2600      	movs	r6, #0
     d52:	4f2b      	ldr	r7, [pc, #172]	; (e00 <audioFrameAdditive+0x260>)
     d54:	4d3b      	ldr	r5, [pc, #236]	; (e44 <audioFrameAdditive+0x2a4>)
     d56:	f8df b0f8 	ldr.w	fp, [pc, #248]	; e50 <audioFrameAdditive+0x2b0>
			previousStringInputs[i] = 0;
     d5a:	46b1      	mov	r9, r6
     d5c:	f1a5 0a40 	sub.w	sl, r5, #64	; 0x40
				tADSRT_clear(&additiveEnv[i][j]);
     d60:	4650      	mov	r0, sl
			for (int j = 0; j < NUM_OVERTONES; j++)
     d62:	f10a 0a04 	add.w	sl, sl, #4
				tADSRT_clear(&additiveEnv[i][j]);
     d66:	f008 fb37 	bl	93d8 <__tADSRT_clear_veneer>
			for (int j = 0; j < NUM_OVERTONES; j++)
     d6a:	45aa      	cmp	sl, r5
     d6c:	d1f8      	bne.n	d60 <audioFrameAdditive+0x1c0>
			tADSRT_clear(&fenvelopes[i]);
     d6e:	4638      	mov	r0, r7
		for (int i = 0; i < numStringsThisBoard; i++)
     d70:	f10a 0540 	add.w	r5, sl, #64	; 0x40
			tADSRT_clear(&fenvelopes[i]);
     d74:	f008 fb30 	bl	93d8 <__tADSRT_clear_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
     d78:	7823      	ldrb	r3, [r4, #0]
			previousStringInputs[i] = 0;
     d7a:	f82b 9016 	strh.w	r9, [fp, r6, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     d7e:	3601      	adds	r6, #1
			previousStringInputs[i] = 0;
     d80:	f04f 0200 	mov.w	r2, #0
		for (int i = 0; i < numStringsThisBoard; i++)
     d84:	3704      	adds	r7, #4
     d86:	42b3      	cmp	r3, r6
     d88:	dce8      	bgt.n	d5c <audioFrameAdditive+0x1bc>
		resetStringInputs = 0;
     d8a:	f888 2000 	strb.w	r2, [r8]
		newPluck = 1;
     d8e:	4a16      	ldr	r2, [pc, #88]	; (de8 <audioFrameAdditive+0x248>)
     d90:	4611      	mov	r1, r2
     d92:	9203      	str	r2, [sp, #12]
     d94:	2201      	movs	r2, #1
     d96:	600a      	str	r2, [r1, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
     d98:	2b00      	cmp	r3, #0
     d9a:	f47f af18 	bne.w	bce <audioFrameAdditive+0x2e>
	if (newPluck)
     d9e:	9b03      	ldr	r3, [sp, #12]
     da0:	681b      	ldr	r3, [r3, #0]
     da2:	2b00      	cmp	r3, #0
     da4:	d09d      	beq.n	ce2 <audioFrameAdditive+0x142>
		newPluck = 0;
     da6:	2300      	movs	r3, #0
     da8:	9a03      	ldr	r2, [sp, #12]
     daa:	6013      	str	r3, [r2, #0]
     dac:	e799      	b.n	ce2 <audioFrameAdditive+0x142>
		switchStringModel(switchStrings);
     dae:	6820      	ldr	r0, [r4, #0]
     db0:	f000 fad6 	bl	1360 <switchStringModel>
     db4:	e7b0      	b.n	d18 <audioFrameAdditive+0x178>
		newPluck = 1;
     db6:	4a0c      	ldr	r2, [pc, #48]	; (de8 <audioFrameAdditive+0x248>)
		resetStringInputs = 0;
     db8:	f888 3000 	strb.w	r3, [r8]
		newPluck = 1;
     dbc:	2301      	movs	r3, #1
     dbe:	9203      	str	r2, [sp, #12]
     dc0:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
     dc2:	e7ec      	b.n	d9e <audioFrameAdditive+0x1fe>
     dc4:	9d08      	ldr	r5, [sp, #32]
     dc6:	f105 0440 	add.w	r4, r5, #64	; 0x40
					tADSRT_off(&additiveEnv[i][j]);
     dca:	4628      	mov	r0, r5
				for (int j = 0; j < NUM_OVERTONES; j++)
     dcc:	3504      	adds	r5, #4
					tADSRT_off(&additiveEnv[i][j]);
     dce:	f008 fc13 	bl	95f8 <__tADSRT_off_veneer>
				for (int j = 0; j < NUM_OVERTONES; j++)
     dd2:	42a5      	cmp	r5, r4
     dd4:	d1f9      	bne.n	dca <audioFrameAdditive+0x22a>
				tADSRT_off(&fenvelopes[i]);
     dd6:	9802      	ldr	r0, [sp, #8]
     dd8:	f008 fc0e 	bl	95f8 <__tADSRT_off_veneer>
     ddc:	e761      	b.n	ca2 <audioFrameAdditive+0x102>
     dde:	bf00      	nop
     de0:	e0001000 	.word	0xe0001000
     de4:	20000694 	.word	0x20000694
     de8:	200054e0 	.word	0x200054e0
     dec:	20000cbc 	.word	0x20000cbc
     df0:	3ecccccd 	.word	0x3ecccccd
     df4:	3dcccccd 	.word	0x3dcccccd
     df8:	40490fdb 	.word	0x40490fdb
     dfc:	200012c4 	.word	0x200012c4
     e00:	200053b4 	.word	0x200053b4
     e04:	20000c3c 	.word	0x20000c3c
     e08:	44fa0000 	.word	0x44fa0000
     e0c:	20001204 	.word	0x20001204
     e10:	3e4ccccd 	.word	0x3e4ccccd
     e14:	20001344 	.word	0x20001344
     e18:	00000000 	.word	0x00000000
     e1c:	2001441c 	.word	0x2001441c
     e20:	3ffeb852 	.word	0x3ffeb852
     e24:	200143cc 	.word	0x200143cc
     e28:	200143fc 	.word	0x200143fc
     e2c:	30000000 	.word	0x30000000
     e30:	4b000000 	.word	0x4b000000
     e34:	20014434 	.word	0x20014434
     e38:	20000684 	.word	0x20000684
     e3c:	20014438 	.word	0x20014438
     e40:	200053c4 	.word	0x200053c4
     e44:	20000c7c 	.word	0x20000c7c
     e48:	20005968 	.word	0x20005968
     e4c:	200053e0 	.word	0x200053e0
     e50:	20005550 	.word	0x20005550
				float amplitz = stringInputs[i] * 0.000015259021897f;
     e54:	4be4      	ldr	r3, [pc, #912]	; (11e8 <audioFrameAdditive+0x648>)
     e56:	eddf 7ae5 	vldr	s15, [pc, #916]	; 11ec <audioFrameAdditive+0x64c>
     e5a:	f833 3019 	ldrh.w	r3, [r3, r9, lsl #1]
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     e5e:	9805      	ldr	r0, [sp, #20]
				float amplitz = stringInputs[i] * 0.000015259021897f;
     e60:	b29b      	uxth	r3, r3
     e62:	ee0c 3a90 	vmov	s25, r3
     e66:	eef8 caec 	vcvt.f32.s32	s25, s25
     e6a:	ee6c caa7 	vmul.f32	s25, s25, s15
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     e6e:	eeb0 0a6c 	vmov.f32	s0, s25
     e72:	f008 f9c9 	bl	9208 <__tExpSmooth_setVal_veneer>
				stringOctave[i] = octave;
     e76:	4bde      	ldr	r3, [pc, #888]	; (11f0 <audioFrameAdditive+0x650>)
     e78:	9c06      	ldr	r4, [sp, #24]
     e7a:	681b      	ldr	r3, [r3, #0]
				tADSRT_setDecay(&fenvelopes[i], 50.0f);
     e7c:	9d02      	ldr	r5, [sp, #8]
				stringOctave[i] = octave;
     e7e:	6023      	str	r3, [r4, #0]
				tADSRT_setDecay(&fenvelopes[i], 50.0f);
     e80:	ed9f 0adc 	vldr	s0, [pc, #880]	; 11f4 <audioFrameAdditive+0x654>
     e84:	4628      	mov	r0, r5
     e86:	f008 fb23 	bl	94d0 <__tADSRT_setDecay_veneer>
				tADSRT_on(&fenvelopes[i], amplitz);
     e8a:	eeb0 0a6c 	vmov.f32	s0, s25
     e8e:	4628      	mov	r0, r5
     e90:	f008 f976 	bl	9180 <__tADSRT_on_veneer>
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     e94:	4bd8      	ldr	r3, [pc, #864]	; (11f8 <audioFrameAdditive+0x658>)
     e96:	edd4 7a00 	vldr	s15, [r4]
     e9a:	eb03 0389 	add.w	r3, r3, r9, lsl #2
     e9e:	ed93 0a00 	vldr	s0, [r3]
     ea2:	ee30 0a27 	vadd.f32	s0, s0, s15
     ea6:	f008 fbaf 	bl	9608 <__mtofTableLookup_veneer>
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     eae:	ed9a 6a0b 	vldr	s12, [sl, #44]	; 0x2c
     eb2:	eef0 6a0c 	vmov.f32	s13, #12	; 0x40600000  3.5
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     eb6:	9b07      	ldr	r3, [sp, #28]
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     eb8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
     ebc:	ee37 7a46 	vsub.f32	s14, s14, s12
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     ec0:	ed83 0a00 	vstr	s0, [r3]
				int thisString = i + firstString;
     ec4:	4bcd      	ldr	r3, [pc, #820]	; (11fc <audioFrameAdditive+0x65c>)
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     ec6:	eee7 7a26 	vfma.f32	s15, s14, s13
				int thisString = i + firstString;
     eca:	681b      	ldr	r3, [r3, #0]
     ecc:	444b      	add	r3, r9
				if (thisString < 6)
     ece:	2b05      	cmp	r3, #5
				int thisString = i + firstString;
     ed0:	930b      	str	r3, [sp, #44]	; 0x2c
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     ed2:	ee60 9a27 	vmul.f32	s19, s0, s15
				if (thisString < 6)
     ed6:	f340 8117 	ble.w	1108 <audioFrameAdditive+0x568>
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     eda:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     ede:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
     ee2:	4dc7      	ldr	r5, [pc, #796]	; (1200 <audioFrameAdditive+0x660>)
     ee4:	eef0 1a6d 	vmov.f32	s3, s27
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     ee8:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
     eec:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     ef0:	ed95 1a05 	vldr	s2, [r5, #20]
     ef4:	edd5 0a03 	vldr	s1, [r5, #12]
     ef8:	eeb0 0a69 	vmov.f32	s0, s19
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     efc:	ee39 9a67 	vsub.f32	s18, s18, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     f00:	f008 f9fa 	bl	92f8 <__LEAF_map_veneer>
     f04:	eeb0 1a4e 	vmov.f32	s2, s28
     f08:	eef0 0a40 	vmov.f32	s1, s0
     f0c:	eeb0 0a6d 	vmov.f32	s0, s27
     f10:	f008 fba2 	bl	9658 <__LEAF_clip_veneer>
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     f14:	ee29 9a2e 	vmul.f32	s18, s18, s29
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     f18:	eef0 ba40 	vmov.f32	s23, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
     f1c:	ed95 1a02 	vldr	s2, [r5, #8]
     f20:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
     f24:	edd5 0a00 	vldr	s1, [r5]
     f28:	eef0 1a6d 	vmov.f32	s3, s27
     f2c:	eeb0 0a69 	vmov.f32	s0, s19
     f30:	4eb4      	ldr	r6, [pc, #720]	; (1204 <audioFrameAdditive+0x664>)
     f32:	f008 f9e1 	bl	92f8 <__LEAF_map_veneer>
     f36:	eeb0 1a4e 	vmov.f32	s2, s28
     f3a:	eef0 0a40 	vmov.f32	s1, s0
     f3e:	4cb2      	ldr	r4, [pc, #712]	; (1208 <audioFrameAdditive+0x668>)
     f40:	eeb0 0a6d 	vmov.f32	s0, s27
     f44:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 1214 <audioFrameAdditive+0x674>
     f48:	f008 fb86 	bl	9658 <__LEAF_clip_veneer>
				int height1Int = floor(height1);
     f4c:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
				int height2Int = floor(height2);
     f50:	eeb7 7aeb 	vcvt.f64.f32	d7, s23
     f54:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
				float oneMinusStringFade = 1.0f - stringFade;
     f58:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				float height2Float = height2 - height2Int;
     f5c:	9f08      	ldr	r7, [sp, #32]
				int height1Int = floor(height1);
     f5e:	febb 6b46 	vrintm.f64	d6, d6
     f62:	eebd 6bc6 	vcvt.s32.f64	s12, d6
				int height2Int = floor(height2);
     f66:	febb 7b47 	vrintm.f64	d7, d7
     f6a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
     f6e:	eeb0 ca40 	vmov.f32	s24, s0
				float oneMinusStringFade = 1.0f - stringFade;
     f72:	ee16 3a10 	vmov	r3, s12
				float height1Float = height1 - height1Int;
     f76:	eeb8 bac6 	vcvt.f32.s32	s22, s12
				float height2Float = height2 - height2Int;
     f7a:	eef8 aac7 	vcvt.f32.s32	s21, s14
     f7e:	eb03 01c3 	add.w	r1, r3, r3, lsl #3
     f82:	ee17 3a10 	vmov	r3, s14
				float oneMinusStringFade = 1.0f - stringFade;
     f86:	ee38 aac9 	vsub.f32	s20, s17, s18
				float height1Float = height1 - height1Int;
     f8a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     f8e:	ee30 ba4b 	vsub.f32	s22, s0, s22
				float height2Float = height2 - height2Int;
     f92:	ee7b aaea 	vsub.f32	s21, s23, s21
				for (int j = 0; j < NUM_OVERTONES; j++)
     f96:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
     f9a:	eb06 06c1 	add.w	r6, r6, r1, lsl #3
     f9e:	f103 0bd8 	add.w	fp, r3, #216	; 0xd8
				float height2Float = height2 - height2Int;
     fa2:	9b04      	ldr	r3, [sp, #16]
     fa4:	46b1      	mov	r9, r6
     fa6:	461e      	mov	r6, r3
     fa8:	e06b      	b.n	1082 <audioFrameAdditive+0x4e2>
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
     faa:	ed9b 8a48 	vldr	s16, [fp, #288]	; 0x120
     fae:	ee78 6aea 	vsub.f32	s13, s17, s21
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
     fb2:	edd9 7a48 	vldr	s15, [r9, #288]	; 0x120
     fb6:	ee38 7acb 	vsub.f32	s14, s17, s22
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
     fba:	ee2a 8a88 	vmul.f32	s16, s21, s16
     fbe:	ed9b 6a36 	vldr	s12, [fp, #216]	; 0xd8
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
     fc2:	ee6b 7a27 	vmul.f32	s15, s22, s15
						if (height2 < 1.0f)
     fc6:	eef4 bae8 	vcmpe.f32	s23, s17
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
     fca:	eea6 8a26 	vfma.f32	s16, s12, s13
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
     fce:	edd9 6a36 	vldr	s13, [r9, #216]	; 0xd8
     fd2:	eee6 7a87 	vfma.f32	s15, s13, s14
						if (height2 < 1.0f)
     fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);
     fda:	ee2a 8a08 	vmul.f32	s16, s20, s16
     fde:	eea9 8a27 	vfma.f32	s16, s18, s15
						if (height2 < 1.0f)
     fe2:	f100 80c8 	bmi.w	1176 <audioFrameAdditive+0x5d6>
							d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
     fe6:	eef0 0a69 	vmov.f32	s1, s19
     fea:	ed95 1a08 	vldr	s2, [r5, #32]
     fee:	ed95 0a07 	vldr	s0, [r5, #28]
     ff2:	ed94 fa50 	vldr	s30, [r4, #320]	; 0x140
     ff6:	f008 fb2f 	bl	9658 <__LEAF_clip_veneer>
     ffa:	ed98 7a50 	vldr	s14, [r8, #320]	; 0x140
     ffe:	eeaf 7a00 	vfma.f32	s14, s30, s0
    1002:	ee88 fa87 	vdiv.f32	s30, s17, s14
						if (height1 < 1.0f)
    1006:	eeb4 cae8 	vcmpe.f32	s24, s17
    100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    100e:	f100 80a1 	bmi.w	1154 <audioFrameAdditive+0x5b4>
							d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    1012:	eef0 0a69 	vmov.f32	s1, s19
    1016:	ed95 1a05 	vldr	s2, [r5, #20]
    101a:	ed95 0a04 	vldr	s0, [r5, #16]
    101e:	edd4 fa30 	vldr	s31, [r4, #192]	; 0xc0
    1022:	f008 fb19 	bl	9658 <__LEAF_clip_veneer>
    1026:	ed98 7a30 	vldr	s14, [r8, #192]	; 0xc0
    102a:	eeaf 7a80 	vfma.f32	s14, s31, s0
    102e:	eec8 6a87 	vdiv.f32	s13, s17, s14
						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
    1032:	ee6f 7a0a 	vmul.f32	s15, s30, s20
    1036:	eee6 7a89 	vfma.f32	s15, s13, s18
					thisDecay *= 2000.0f * knobScaled[10];
    103a:	ed9a 0a0a 	vldr	s0, [sl, #40]	; 0x28
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * randomFactors[currentRandom]);
    103e:	4638      	mov	r0, r7
				for (int j = 0; j < NUM_OVERTONES; j++)
    1040:	3404      	adds	r4, #4
    1042:	f108 0804 	add.w	r8, r8, #4
					thisDecay *= 2000.0f * knobScaled[10];
    1046:	ee20 0a0d 	vmul.f32	s0, s0, s26
				for (int j = 0; j < NUM_OVERTONES; j++)
    104a:	f109 0904 	add.w	r9, r9, #4
    104e:	f10b 0b04 	add.w	fp, fp, #4
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * randomFactors[currentRandom]);
    1052:	ee20 0a27 	vmul.f32	s0, s0, s15
    1056:	f008 fa3b 	bl	94d0 <__tADSRT_setDecay_veneer>
					currentRandom++;
    105a:	4b6c      	ldr	r3, [pc, #432]	; (120c <audioFrameAdditive+0x66c>)
					tADSRT_on(&additiveEnv[i][j], amplitz * thisGain);
    105c:	4638      	mov	r0, r7
    105e:	ee28 0a2c 	vmul.f32	s0, s16, s25
					currentRandom++;
    1062:	781a      	ldrb	r2, [r3, #0]
				for (int j = 0; j < NUM_OVERTONES; j++)
    1064:	3704      	adds	r7, #4
					currentRandom++;
    1066:	3201      	adds	r2, #1
    1068:	701a      	strb	r2, [r3, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * thisGain);
    106a:	f008 f889 	bl	9180 <__tADSRT_on_veneer>
					currentRandom++;
    106e:	4b67      	ldr	r3, [pc, #412]	; (120c <audioFrameAdditive+0x66c>)
					finalGains[i][j] = thisGain;
    1070:	eca6 8a01 	vstmia	r6!, {s16}
					currentRandom++;
    1074:	781a      	ldrb	r2, [r3, #0]
    1076:	3201      	adds	r2, #1
    1078:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < NUM_OVERTONES; j++)
    107a:	4b65      	ldr	r3, [pc, #404]	; (1210 <audioFrameAdditive+0x670>)
    107c:	42a3      	cmp	r3, r4
    107e:	f000 80ad 	beq.w	11dc <audioFrameAdditive+0x63c>
					if (thisString < 6)
    1082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1084:	2b05      	cmp	r3, #5
    1086:	dd90      	ble.n	faa <audioFrameAdditive+0x40a>
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1088:	eddb 6a48 	vldr	s13, [fp, #288]	; 0x120
						if (height2 < 1.0f)
    108c:	eef4 bae8 	vcmpe.f32	s23, s17
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1090:	ed9b 8a00 	vldr	s16, [fp]
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1094:	ed99 7a48 	vldr	s14, [r9, #288]	; 0x120
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1098:	eea6 8aaa 	vfma.f32	s16, s13, s21
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    109c:	edd9 7a00 	vldr	s15, [r9]
						if (height2 < 1.0f)
    10a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    10a4:	eee7 7a0b 	vfma.f32	s15, s14, s22
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);
    10a8:	ee2a 8a08 	vmul.f32	s16, s20, s16
    10ac:	eea9 8a27 	vfma.f32	s16, s18, s15
						if (height2 < 1.0f)
    10b0:	f100 8083 	bmi.w	11ba <audioFrameAdditive+0x61a>
							d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    10b4:	eef0 0a69 	vmov.f32	s1, s19
    10b8:	ed95 1a05 	vldr	s2, [r5, #20]
    10bc:	ed95 0a04 	vldr	s0, [r5, #16]
    10c0:	ed94 fa30 	vldr	s30, [r4, #192]	; 0xc0
    10c4:	f008 fac8 	bl	9658 <__LEAF_clip_veneer>
    10c8:	ed98 7a30 	vldr	s14, [r8, #192]	; 0xc0
    10cc:	eeaf 7a00 	vfma.f32	s14, s30, s0
    10d0:	eec8 fa87 	vdiv.f32	s31, s17, s14
						if (height1 < 1.0f)
    10d4:	eeb4 cae8 	vcmpe.f32	s24, s17
    10d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10dc:	d45c      	bmi.n	1198 <audioFrameAdditive+0x5f8>
							d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    10de:	eef0 0a69 	vmov.f32	s1, s19
    10e2:	ed95 1a02 	vldr	s2, [r5, #8]
    10e6:	ed95 0a01 	vldr	s0, [r5, #4]
    10ea:	ed94 fa10 	vldr	s30, [r4, #64]	; 0x40
    10ee:	f008 fab3 	bl	9658 <__LEAF_clip_veneer>
    10f2:	ed98 7a10 	vldr	s14, [r8, #64]	; 0x40
    10f6:	eeaf 7a00 	vfma.f32	s14, s30, s0
    10fa:	eec8 6a87 	vdiv.f32	s13, s17, s14
						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
    10fe:	ee6f 7a8a 	vmul.f32	s15, s31, s20
    1102:	eee6 7a89 	vfma.f32	s15, s13, s18
    1106:	e798      	b.n	103a <audioFrameAdditive+0x49a>
					stringFade = (float)thisString * 0.2f;
    1108:	ee07 3a90 	vmov	s15, r3
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    110c:	4d3c      	ldr	r5, [pc, #240]	; (1200 <audioFrameAdditive+0x660>)
    110e:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					stringFade = (float)thisString * 0.2f;
    1112:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1116:	ed95 1a08 	vldr	s2, [r5, #32]
    111a:	eef0 1a6d 	vmov.f32	s3, s27
    111e:	edd5 0a06 	vldr	s1, [r5, #24]
    1122:	eeb0 0a69 	vmov.f32	s0, s19
    1126:	f008 f8e7 	bl	92f8 <__LEAF_map_veneer>
    112a:	eeb0 1a4e 	vmov.f32	s2, s28
    112e:	eef0 0a40 	vmov.f32	s1, s0
    1132:	eeb0 0a6d 	vmov.f32	s0, s27
    1136:	f008 fa8f 	bl	9658 <__LEAF_clip_veneer>
					stringFade = (float)thisString * 0.2f;
    113a:	ee29 9a2e 	vmul.f32	s18, s18, s29
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    113e:	eef0 ba40 	vmov.f32	s23, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1142:	ed95 1a05 	vldr	s2, [r5, #20]
    1146:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
    114a:	edd5 0a03 	vldr	s1, [r5, #12]
    114e:	eef0 1a6d 	vmov.f32	s3, s27
    1152:	e6eb      	b.n	f2c <audioFrameAdditive+0x38c>
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    1154:	eef0 0a69 	vmov.f32	s1, s19
    1158:	ed95 1a04 	vldr	s2, [r5, #16]
    115c:	ed95 0a03 	vldr	s0, [r5, #12]
    1160:	edd4 fa20 	vldr	s31, [r4, #128]	; 0x80
    1164:	f008 fa78 	bl	9658 <__LEAF_clip_veneer>
    1168:	ed98 7a20 	vldr	s14, [r8, #128]	; 0x80
    116c:	eeaf 7a80 	vfma.f32	s14, s31, s0
    1170:	eec8 6a87 	vdiv.f32	s13, s17, s14
    1174:	e75d      	b.n	1032 <audioFrameAdditive+0x492>
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    1176:	eef0 0a69 	vmov.f32	s1, s19
    117a:	ed95 1a07 	vldr	s2, [r5, #28]
    117e:	ed95 0a06 	vldr	s0, [r5, #24]
    1182:	ed94 fa40 	vldr	s30, [r4, #256]	; 0x100
    1186:	f008 fa67 	bl	9658 <__LEAF_clip_veneer>
    118a:	ed98 7a40 	vldr	s14, [r8, #256]	; 0x100
    118e:	eeaf 7a00 	vfma.f32	s14, s30, s0
    1192:	ee88 fa87 	vdiv.f32	s30, s17, s14
    1196:	e736      	b.n	1006 <audioFrameAdditive+0x466>
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    1198:	eef0 0a69 	vmov.f32	s1, s19
    119c:	ed95 1a01 	vldr	s2, [r5, #4]
    11a0:	ed95 0a00 	vldr	s0, [r5]
    11a4:	ed94 fa00 	vldr	s30, [r4]
    11a8:	f008 fa56 	bl	9658 <__LEAF_clip_veneer>
    11ac:	ed98 7a00 	vldr	s14, [r8]
    11b0:	eeaf 7a00 	vfma.f32	s14, s30, s0
    11b4:	eec8 6a87 	vdiv.f32	s13, s17, s14
    11b8:	e7a1      	b.n	10fe <audioFrameAdditive+0x55e>
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    11ba:	eef0 0a69 	vmov.f32	s1, s19
    11be:	ed95 1a04 	vldr	s2, [r5, #16]
    11c2:	ed95 0a03 	vldr	s0, [r5, #12]
    11c6:	ed94 fa20 	vldr	s30, [r4, #128]	; 0x80
    11ca:	f008 fa45 	bl	9658 <__LEAF_clip_veneer>
    11ce:	ed98 7a20 	vldr	s14, [r8, #128]	; 0x80
    11d2:	eeaf 7a00 	vfma.f32	s14, s30, s0
    11d6:	eec8 fa87 	vdiv.f32	s31, s17, s14
    11da:	e77b      	b.n	10d4 <audioFrameAdditive+0x534>
    11dc:	9c08      	ldr	r4, [sp, #32]
    11de:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    11e2:	3440      	adds	r4, #64	; 0x40
    11e4:	e55d      	b.n	ca2 <audioFrameAdditive+0x102>
    11e6:	bf00      	nop
    11e8:	200143fc 	.word	0x200143fc
    11ec:	37800080 	.word	0x37800080
    11f0:	200054ec 	.word	0x200054ec
    11f4:	42480000 	.word	0x42480000
    11f8:	20014414 	.word	0x20014414
    11fc:	200053bc 	.word	0x200053bc
    1200:	200003d8 	.word	0x200003d8
    1204:	200003fc 	.word	0x200003fc
    1208:	20000e44 	.word	0x20000e44
    120c:	20014504 	.word	0x20014504
    1210:	20000e84 	.word	0x20000e84
    1214:	20000fc4 	.word	0x20000fc4
	...

00001220 <updateStateFromSPIMessage>:


void __ATTR_ITCMRAM updateStateFromSPIMessage(uint8_t offset)
{
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1220:	4a3a      	ldr	r2, [pc, #232]	; (130c <updateStateFromSPIMessage+0xec>)
	edit = (modeBit >> 4) & 1;
	voice = SPI_LEVERS_RX[25 + offset];



	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1222:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1226:	1813      	adds	r3, r2, r0
{
    1228:	b4f0      	push	{r4, r5, r6, r7}
	int modeBit = SPI_LEVERS_RX[24 + offset];
    122a:	7e19      	ldrb	r1, [r3, #24]
	voice = SPI_LEVERS_RX[25 + offset];
    122c:	7e5e      	ldrb	r6, [r3, #25]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    122e:	f001 030f 	and.w	r3, r1, #15
	octaveAction = (modeBit >> 6) & 1;
    1232:	4c37      	ldr	r4, [pc, #220]	; (1310 <updateStateFromSPIMessage+0xf0>)
	voice = SPI_LEVERS_RX[25 + offset];
    1234:	4d37      	ldr	r5, [pc, #220]	; (1314 <updateStateFromSPIMessage+0xf4>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1236:	3b05      	subs	r3, #5
    1238:	4f37      	ldr	r7, [pc, #220]	; (1318 <updateStateFromSPIMessage+0xf8>)
    123a:	ee07 3a90 	vmov	s15, r3
	octaveAction = (modeBit >> 6) & 1;
    123e:	f3c1 1380 	ubfx	r3, r1, #6, #1
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	octaveAction = (modeBit >> 6) & 1;
    1246:	7023      	strb	r3, [r4, #0]
	voice = SPI_LEVERS_RX[25 + offset];
    1248:	602e      	str	r6, [r5, #0]
	dualSlider = (modeBit >> 5) & 1;
    124a:	f3c1 1540 	ubfx	r5, r1, #5, #1
	//if "octave action" is set to 1, then immediately change octave instead of waiting for new note
	if (octaveAction)
    124e:	7823      	ldrb	r3, [r4, #0]
	edit = (modeBit >> 4) & 1;
    1250:	f3c1 1100 	ubfx	r1, r1, #4, #1
	dualSlider = (modeBit >> 5) & 1;
    1254:	4c31      	ldr	r4, [pc, #196]	; (131c <updateStateFromSPIMessage+0xfc>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1256:	ee67 7a87 	vmul.f32	s15, s15, s14
	dualSlider = (modeBit >> 5) & 1;
    125a:	6025      	str	r5, [r4, #0]
	edit = (modeBit >> 4) & 1;
    125c:	4c30      	ldr	r4, [pc, #192]	; (1320 <updateStateFromSPIMessage+0x100>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    125e:	edc7 7a00 	vstr	s15, [r7]
	edit = (modeBit >> 4) & 1;
    1262:	6021      	str	r1, [r4, #0]
	if (octaveAction)
    1264:	b14b      	cbz	r3, 127a <updateStateFromSPIMessage+0x5a>
	{
		for (int i = 0; i < numStringsThisBoard; i++)
    1266:	4b2f      	ldr	r3, [pc, #188]	; (1324 <updateStateFromSPIMessage+0x104>)
    1268:	781b      	ldrb	r3, [r3, #0]
    126a:	b133      	cbz	r3, 127a <updateStateFromSPIMessage+0x5a>
		{
			stringOctave[i] = octave;
    126c:	492e      	ldr	r1, [pc, #184]	; (1328 <updateStateFromSPIMessage+0x108>)
		for (int i = 0; i < numStringsThisBoard; i++)
    126e:	2b01      	cmp	r3, #1
			stringOctave[i] = octave;
    1270:	edc1 7a00 	vstr	s15, [r1]
    1274:	bf18      	it	ne
    1276:	edc1 7a01 	vstrne	s15, [r1, #4]
		}
	}

	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    127a:	4410      	add	r0, r2
    127c:	4c2b      	ldr	r4, [pc, #172]	; (132c <updateStateFromSPIMessage+0x10c>)
	volumePedal = volumePedalInt * 0.0002442002442f;

	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    127e:	4a2c      	ldr	r2, [pc, #176]	; (1330 <updateStateFromSPIMessage+0x110>)
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    1280:	7e81      	ldrb	r1, [r0, #26]
    1282:	7ec3      	ldrb	r3, [r0, #27]
	volumePedal = volumePedalInt * 0.0002442002442f;
    1284:	eddf 7a2b 	vldr	s15, [pc, #172]	; 1334 <updateStateFromSPIMessage+0x114>
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    1288:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    128c:	7f01      	ldrb	r1, [r0, #28]
    128e:	7f40      	ldrb	r0, [r0, #29]
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    1290:	b29b      	uxth	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    1292:	4d29      	ldr	r5, [pc, #164]	; (1338 <updateStateFromSPIMessage+0x118>)
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    1294:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    1298:	4928      	ldr	r1, [pc, #160]	; (133c <updateStateFromSPIMessage+0x11c>)
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    129a:	8023      	strh	r3, [r4, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    129c:	8823      	ldrh	r3, [r4, #0]
    129e:	b29b      	uxth	r3, r3
    12a0:	ee00 3a10 	vmov	s0, r3
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    12a4:	7813      	ldrb	r3, [r2, #0]
    12a6:	b2db      	uxtb	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    12a8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    12ac:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    12b0:	7813      	ldrb	r3, [r2, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    12b2:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    12b6:	4822      	ldr	r0, [pc, #136]	; (1340 <updateStateFromSPIMessage+0x120>)
    12b8:	b2db      	uxtb	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    12ba:	ed85 0a00 	vstr	s0, [r5]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    12be:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
    12c2:	7813      	ldrb	r3, [r2, #0]
    12c4:	b2db      	uxtb	r3, r3
    12c6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    12ca:	429c      	cmp	r4, r3
    12cc:	d01a      	beq.n	1304 <updateStateFromSPIMessage+0xe4>
	{
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    12ce:	7814      	ldrb	r4, [r2, #0]
    12d0:	7813      	ldrb	r3, [r2, #0]
    12d2:	b2e2      	uxtb	r2, r4
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    12d4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 1344 <updateStateFromSPIMessage+0x124>
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    12d8:	b2db      	uxtb	r3, r3
    12da:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    12de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    12e2:	ed91 7a00 	vldr	s14, [r1]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    12e6:	edd1 7a01 	vldr	s15, [r1, #4]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    12ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    12ee:	4b16      	ldr	r3, [pc, #88]	; (1348 <updateStateFromSPIMessage+0x128>)
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    12f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    12f4:	ee27 7a26 	vmul.f32	s14, s14, s13
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    12f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    12fc:	ed83 7a00 	vstr	s14, [r3]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    1300:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    1304:	4811      	ldr	r0, [pc, #68]	; (134c <updateStateFromSPIMessage+0x12c>)
}
    1306:	bcf0      	pop	{r4, r5, r6, r7}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    1308:	f008 b932 	b.w	9570 <__tExpSmooth_setDest_veneer>
    130c:	30000840 	.word	0x30000840
    1310:	200054f0 	.word	0x200054f0
    1314:	20014440 	.word	0x20014440
    1318:	200054ec 	.word	0x200054ec
    131c:	200053ac 	.word	0x200053ac
    1320:	200053b0 	.word	0x200053b0
    1324:	20000694 	.word	0x20000694
    1328:	2001441c 	.word	0x2001441c
    132c:	20014448 	.word	0x20014448
    1330:	20014450 	.word	0x20014450
    1334:	39800801 	.word	0x39800801
    1338:	20014444 	.word	0x20014444
    133c:	20014424 	.word	0x20014424
    1340:	2001442c 	.word	0x2001442c
    1344:	3b000000 	.word	0x3b000000
    1348:	20001384 	.word	0x20001384
    134c:	2001444c 	.word	0x2001444c
    1350:	f3af 8000 	nop.w
    1354:	f3af 8000 	nop.w
    1358:	f3af 8000 	nop.w
    135c:	f3af 8000 	nop.w

00001360 <switchStringModel>:



void __ATTR_ITCMRAM switchStringModel(int which)
{
	if (which == 1)
    1360:	2801      	cmp	r0, #1
{
    1362:	b510      	push	{r4, lr}
	if (which == 1)
    1364:	d01a      	beq.n	139c <switchStringModel+0x3c>
		audioFrameFunction = audioFrameString1;
		resetStringInputs = 1;
	}


	else if (which == 2)
    1366:	2802      	cmp	r0, #2
    1368:	d00b      	beq.n	1382 <switchStringModel+0x22>
		audioFrameFunction = audioFrameString2;
		resetStringInputs = 1;
	}
	presetReady = 1;
	diskBusy = 0;
	currentActivePreset = voice;
    136a:	4b17      	ldr	r3, [pc, #92]	; (13c8 <switchStringModel+0x68>)
	diskBusy = 0;
    136c:	2100      	movs	r1, #0
    136e:	4a17      	ldr	r2, [pc, #92]	; (13cc <switchStringModel+0x6c>)
	presetReady = 1;
    1370:	2401      	movs	r4, #1
	currentActivePreset = voice;
    1372:	681b      	ldr	r3, [r3, #0]
	diskBusy = 0;
    1374:	7011      	strb	r1, [r2, #0]
	presetReady = 1;
    1376:	4816      	ldr	r0, [pc, #88]	; (13d0 <switchStringModel+0x70>)
	currentActivePreset = voice;
    1378:	b2db      	uxtb	r3, r3
    137a:	4a16      	ldr	r2, [pc, #88]	; (13d4 <switchStringModel+0x74>)
	presetReady = 1;
    137c:	6004      	str	r4, [r0, #0]
	currentActivePreset = voice;
    137e:	7013      	strb	r3, [r2, #0]

}
    1380:	bd10      	pop	{r4, pc}
		if (whichStringModelLoaded != String2Loaded)
    1382:	4b15      	ldr	r3, [pc, #84]	; (13d8 <switchStringModel+0x78>)
    1384:	781b      	ldrb	r3, [r3, #0]
    1386:	2b01      	cmp	r3, #1
    1388:	d114      	bne.n	13b4 <switchStringModel+0x54>
		 audioSwitchToString2();
    138a:	f003 fa09 	bl	47a0 <audioSwitchToString2>
		audioFrameFunction = audioFrameString2;
    138e:	4913      	ldr	r1, [pc, #76]	; (13dc <switchStringModel+0x7c>)
    1390:	4813      	ldr	r0, [pc, #76]	; (13e0 <switchStringModel+0x80>)
		resetStringInputs = 1;
    1392:	2201      	movs	r2, #1
    1394:	4b13      	ldr	r3, [pc, #76]	; (13e4 <switchStringModel+0x84>)
		audioFrameFunction = audioFrameString2;
    1396:	6008      	str	r0, [r1, #0]
		resetStringInputs = 1;
    1398:	701a      	strb	r2, [r3, #0]
    139a:	e7e6      	b.n	136a <switchStringModel+0xa>
		if (whichStringModelLoaded != String1Loaded)
    139c:	4b0e      	ldr	r3, [pc, #56]	; (13d8 <switchStringModel+0x78>)
    139e:	781b      	ldrb	r3, [r3, #0]
    13a0:	b96b      	cbnz	r3, 13be <switchStringModel+0x5e>
		 audioSwitchToString1();
    13a2:	f002 fe9d 	bl	40e0 <audioSwitchToString1>
		audioFrameFunction = audioFrameString1;
    13a6:	490d      	ldr	r1, [pc, #52]	; (13dc <switchStringModel+0x7c>)
    13a8:	480f      	ldr	r0, [pc, #60]	; (13e8 <switchStringModel+0x88>)
		resetStringInputs = 1;
    13aa:	2201      	movs	r2, #1
    13ac:	4b0d      	ldr	r3, [pc, #52]	; (13e4 <switchStringModel+0x84>)
		audioFrameFunction = audioFrameString1;
    13ae:	6008      	str	r0, [r1, #0]
		resetStringInputs = 1;
    13b0:	701a      	strb	r2, [r3, #0]
    13b2:	e7da      	b.n	136a <switchStringModel+0xa>
			audioFreeString1();
    13b4:	f002 fe64 	bl	4080 <audioFreeString1>
			audioInitString2();
    13b8:	f003 f9a2 	bl	4700 <audioInitString2>
    13bc:	e7e5      	b.n	138a <switchStringModel+0x2a>
			audioFreeString2();
    13be:	f003 f9cf 	bl	4760 <audioFreeString2>
			audioInitString1();
    13c2:	f002 fddd 	bl	3f80 <audioInitString1>
    13c6:	e7ec      	b.n	13a2 <switchStringModel+0x42>
    13c8:	20014440 	.word	0x20014440
    13cc:	20014540 	.word	0x20014540
    13d0:	20005544 	.word	0x20005544
    13d4:	200008ac 	.word	0x200008ac
    13d8:	20014451 	.word	0x20014451
    13dc:	20001380 	.word	0x20001380
    13e0:	00004ec1 	.word	0x00004ec1
    13e4:	20005968 	.word	0x20005968
    13e8:	00004481 	.word	0x00004481
    13ec:	f3af 8000 	nop.w
    13f0:	f3af 8000 	nop.w
    13f4:	f3af 8000 	nop.w
    13f8:	f3af 8000 	nop.w
    13fc:	f3af 8000 	nop.w

00001400 <audioFrameWaiting>:
{
}


void __ATTR_ITCMRAM audioFrameWaiting(uint16_t buffer_offset)
{
    1400:	b538      	push	{r3, r4, r5, lr}
    1402:	4b15      	ldr	r3, [pc, #84]	; (1458 <audioFrameWaiting+0x58>)
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
		uint32_t tempCountFrame = DWT->CYCCNT;
    1404:	4a15      	ldr	r2, [pc, #84]	; (145c <audioFrameWaiting+0x5c>)
    1406:	f503 7100 	add.w	r1, r3, #512	; 0x200
    140a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    140e:	6855      	ldr	r5, [r2, #4]
		//mono operation, no need to compute right channel. Also for loop iterating by 2 instead of 1 to avoid if statement.
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
		{
			int iplusbuffer = buffer_offset + i;
			audioOutBuffer[iplusbuffer] = 0;
    1410:	2200      	movs	r2, #0
    1412:	eb01 0180 	add.w	r1, r1, r0, lsl #2
			audioOutBuffer[iplusbuffer + 1] = 0;
    1416:	e9c3 2200 	strd	r2, r2, [r3]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    141a:	3308      	adds	r3, #8
    141c:	428b      	cmp	r3, r1
    141e:	d1fa      	bne.n	1416 <audioFrameWaiting+0x16>
		}
		if (switchStrings)
    1420:	4c0f      	ldr	r4, [pc, #60]	; (1460 <audioFrameWaiting+0x60>)
    1422:	6823      	ldr	r3, [r4, #0]
    1424:	b99b      	cbnz	r3, 144e <audioFrameWaiting+0x4e>
		{
			switchStringModel(switchStrings);
		}
		switchStrings = 0;
    1426:	2200      	movs	r2, #0
		timeFrame = DWT->CYCCNT - tempCountFrame;
    1428:	4b0c      	ldr	r3, [pc, #48]	; (145c <audioFrameWaiting+0x5c>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    142a:	480e      	ldr	r0, [pc, #56]	; (1464 <audioFrameWaiting+0x64>)
		switchStrings = 0;
    142c:	6022      	str	r2, [r4, #0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    142e:	685b      	ldr	r3, [r3, #4]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1430:	ed90 7a00 	vldr	s14, [r0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    1434:	1b5b      	subs	r3, r3, r5
    1436:	490c      	ldr	r1, [pc, #48]	; (1468 <audioFrameWaiting+0x68>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1438:	4a0c      	ldr	r2, [pc, #48]	; (146c <audioFrameWaiting+0x6c>)
    143a:	ee07 3a90 	vmov	s15, r3
		timeFrame = DWT->CYCCNT - tempCountFrame;
    143e:	600b      	str	r3, [r1, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    1440:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1444:	ee67 7a87 	vmul.f32	s15, s15, s14
    1448:	edc2 7a00 	vstr	s15, [r2]
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}
    144c:	bd38      	pop	{r3, r4, r5, pc}
			switchStringModel(switchStrings);
    144e:	6820      	ldr	r0, [r4, #0]
    1450:	f7ff ff86 	bl	1360 <switchStringModel>
    1454:	e7e7      	b.n	1426 <audioFrameWaiting+0x26>
    1456:	bf00      	nop
    1458:	30000000 	.word	0x30000000
    145c:	e0001000 	.word	0xe0001000
    1460:	20014434 	.word	0x20014434
    1464:	20000684 	.word	0x20000684
    1468:	20014438 	.word	0x20014438
    146c:	200053c4 	.word	0x200053c4
    1470:	f3af 8000 	nop.w
    1474:	f3af 8000 	nop.w
    1478:	f3af 8000 	nop.w
    147c:	f3af 8000 	nop.w

00001480 <HAL_SAI_TxCpltCallback>:
{
    1480:	b570      	push	{r4, r5, r6, lr}
	if ((!diskBusy)&& (presetReady))
    1482:	4e48      	ldr	r6, [pc, #288]	; (15a4 <HAL_SAI_TxCpltCallback+0x124>)
    1484:	7833      	ldrb	r3, [r6, #0]
    1486:	b91b      	cbnz	r3, 1490 <HAL_SAI_TxCpltCallback+0x10>
    1488:	4b47      	ldr	r3, [pc, #284]	; (15a8 <HAL_SAI_TxCpltCallback+0x128>)
    148a:	681b      	ldr	r3, [r3, #0]
    148c:	2b00      	cmp	r3, #0
    148e:	d13d      	bne.n	150c <HAL_SAI_TxCpltCallback+0x8c>
	if (voice != prevVoice)
    1490:	4c46      	ldr	r4, [pc, #280]	; (15ac <HAL_SAI_TxCpltCallback+0x12c>)
    1492:	4d47      	ldr	r5, [pc, #284]	; (15b0 <HAL_SAI_TxCpltCallback+0x130>)
    1494:	6822      	ldr	r2, [r4, #0]
    1496:	682b      	ldr	r3, [r5, #0]
    1498:	429a      	cmp	r2, r3
    149a:	d025      	beq.n	14e8 <HAL_SAI_TxCpltCallback+0x68>
		if (voice == 63)
    149c:	6823      	ldr	r3, [r4, #0]
    149e:	2b3f      	cmp	r3, #63	; 0x3f
    14a0:	d039      	beq.n	1516 <HAL_SAI_TxCpltCallback+0x96>
		else if (voice == 62)
    14a2:	6823      	ldr	r3, [r4, #0]
    14a4:	2b3e      	cmp	r3, #62	; 0x3e
    14a6:	d03e      	beq.n	1526 <HAL_SAI_TxCpltCallback+0xa6>
		else if (voice == 61)
    14a8:	6823      	ldr	r3, [r4, #0]
    14aa:	2b3d      	cmp	r3, #61	; 0x3d
    14ac:	d03d      	beq.n	152a <HAL_SAI_TxCpltCallback+0xaa>
		else if (voice == 60)
    14ae:	6823      	ldr	r3, [r4, #0]
    14b0:	2b3c      	cmp	r3, #60	; 0x3c
    14b2:	d04e      	beq.n	1552 <HAL_SAI_TxCpltCallback+0xd2>
		else if (voice == 59)
    14b4:	6823      	ldr	r3, [r4, #0]
    14b6:	2b3b      	cmp	r3, #59	; 0x3b
    14b8:	d05f      	beq.n	157a <HAL_SAI_TxCpltCallback+0xfa>
			presetWaitingToLoad = 1;
    14ba:	4b3e      	ldr	r3, [pc, #248]	; (15b4 <HAL_SAI_TxCpltCallback+0x134>)
    14bc:	2201      	movs	r2, #1
			presetNumberToLoad = voice;
    14be:	483e      	ldr	r0, [pc, #248]	; (15b8 <HAL_SAI_TxCpltCallback+0x138>)
			presetWaitingToLoad = 1;
    14c0:	601a      	str	r2, [r3, #0]
			presetNumberToLoad = voice;
    14c2:	6823      	ldr	r3, [r4, #0]
			audioFrameFunction = audioFrameWaiting;
    14c4:	493d      	ldr	r1, [pc, #244]	; (15bc <HAL_SAI_TxCpltCallback+0x13c>)
			presetNumberToLoad = voice;
    14c6:	b2db      	uxtb	r3, r3
    14c8:	7003      	strb	r3, [r0, #0]
			audioFrameFunction = audioFrameWaiting;
    14ca:	483d      	ldr	r0, [pc, #244]	; (15c0 <HAL_SAI_TxCpltCallback+0x140>)
			presetReady = 0;
    14cc:	4b36      	ldr	r3, [pc, #216]	; (15a8 <HAL_SAI_TxCpltCallback+0x128>)
			audioFrameFunction = audioFrameWaiting;
    14ce:	6008      	str	r0, [r1, #0]
			presetReady = 0;
    14d0:	2100      	movs	r1, #0
    14d2:	6019      	str	r1, [r3, #0]
			if (prevVoice > 59)
    14d4:	682b      	ldr	r3, [r5, #0]
    14d6:	2b3b      	cmp	r3, #59	; 0x3b
    14d8:	dd01      	ble.n	14de <HAL_SAI_TxCpltCallback+0x5e>
				resetStringInputs = 1;
    14da:	4b3a      	ldr	r3, [pc, #232]	; (15c4 <HAL_SAI_TxCpltCallback+0x144>)
    14dc:	701a      	strb	r2, [r3, #0]
			frameLoadOverCount = 0;
    14de:	2300      	movs	r3, #0
    14e0:	4939      	ldr	r1, [pc, #228]	; (15c8 <HAL_SAI_TxCpltCallback+0x148>)
			whichModel = 0;
    14e2:	4a3a      	ldr	r2, [pc, #232]	; (15cc <HAL_SAI_TxCpltCallback+0x14c>)
			frameLoadOverCount = 0;
    14e4:	600b      	str	r3, [r1, #0]
			whichModel = 0;
    14e6:	7013      	strb	r3, [r2, #0]
	prevVoice = voice;
    14e8:	6822      	ldr	r2, [r4, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    14ea:	4b39      	ldr	r3, [pc, #228]	; (15d0 <HAL_SAI_TxCpltCallback+0x150>)
	prevVoice = voice;
    14ec:	602a      	str	r2, [r5, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    14ee:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;

      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    14f2:	4938      	ldr	r1, [pc, #224]	; (15d4 <HAL_SAI_TxCpltCallback+0x154>)
    14f4:	f503 7290 	add.w	r2, r3, #288	; 0x120
    14f8:	f8c1 3268 	str.w	r3, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    14fc:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
    14fe:	4293      	cmp	r3, r2
    1500:	d1fa      	bne.n	14f8 <HAL_SAI_TxCpltCallback+0x78>
    1502:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1506:	f3bf 8f6f 	isb	sy
}
    150a:	bd70      	pop	{r4, r5, r6, pc}
		audioFrameFunction(HALF_BUFFER_SIZE);
    150c:	4b2b      	ldr	r3, [pc, #172]	; (15bc <HAL_SAI_TxCpltCallback+0x13c>)
    150e:	2080      	movs	r0, #128	; 0x80
    1510:	681b      	ldr	r3, [r3, #0]
    1512:	4798      	blx	r3
    1514:	e7bc      	b.n	1490 <HAL_SAI_TxCpltCallback+0x10>
			switchStrings = 1;
    1516:	2301      	movs	r3, #1
			switchStrings = 2;
    1518:	4a2f      	ldr	r2, [pc, #188]	; (15d8 <HAL_SAI_TxCpltCallback+0x158>)
    151a:	6013      	str	r3, [r2, #0]
			diskBusy = 0;
    151c:	2200      	movs	r2, #0
    151e:	7032      	strb	r2, [r6, #0]
			whichModel = 2;
    1520:	4a2a      	ldr	r2, [pc, #168]	; (15cc <HAL_SAI_TxCpltCallback+0x14c>)
    1522:	7013      	strb	r3, [r2, #0]
    1524:	e7e0      	b.n	14e8 <HAL_SAI_TxCpltCallback+0x68>
			switchStrings = 2;
    1526:	2302      	movs	r3, #2
    1528:	e7f6      	b.n	1518 <HAL_SAI_TxCpltCallback+0x98>
			audioFrameFunction = audioFrameAdditive;
    152a:	4b24      	ldr	r3, [pc, #144]	; (15bc <HAL_SAI_TxCpltCallback+0x13c>)
    152c:	4a2b      	ldr	r2, [pc, #172]	; (15dc <HAL_SAI_TxCpltCallback+0x15c>)
    152e:	601a      	str	r2, [r3, #0]
			audioSwitchToAdditive();
    1530:	f7ff f926 	bl	780 <audioSwitchToAdditive>
			currentActivePreset = voice;
    1534:	6823      	ldr	r3, [r4, #0]
    1536:	4a2a      	ldr	r2, [pc, #168]	; (15e0 <HAL_SAI_TxCpltCallback+0x160>)
    1538:	b2db      	uxtb	r3, r3
			presetReady = 1;
    153a:	491b      	ldr	r1, [pc, #108]	; (15a8 <HAL_SAI_TxCpltCallback+0x128>)
			currentActivePreset = voice;
    153c:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    153e:	2200      	movs	r2, #0
			presetReady = 1;
    1540:	2301      	movs	r3, #1
			diskBusy = 0;
    1542:	7032      	strb	r2, [r6, #0]
			resetStringInputs = 1;
    1544:	4a1f      	ldr	r2, [pc, #124]	; (15c4 <HAL_SAI_TxCpltCallback+0x144>)
			presetReady = 1;
    1546:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    1548:	7013      	strb	r3, [r2, #0]
			whichModel = 3;
    154a:	2203      	movs	r2, #3
    154c:	4b1f      	ldr	r3, [pc, #124]	; (15cc <HAL_SAI_TxCpltCallback+0x14c>)
    154e:	701a      	strb	r2, [r3, #0]
    1550:	e7ca      	b.n	14e8 <HAL_SAI_TxCpltCallback+0x68>
			audioFrameFunction = audioFrameVocal;
    1552:	4b1a      	ldr	r3, [pc, #104]	; (15bc <HAL_SAI_TxCpltCallback+0x13c>)
    1554:	4a23      	ldr	r2, [pc, #140]	; (15e4 <HAL_SAI_TxCpltCallback+0x164>)
    1556:	601a      	str	r2, [r3, #0]
			audioSwitchToVocal();
    1558:	f007 fad2 	bl	8b00 <audioSwitchToVocal>
			currentActivePreset = voice;
    155c:	6823      	ldr	r3, [r4, #0]
    155e:	4a20      	ldr	r2, [pc, #128]	; (15e0 <HAL_SAI_TxCpltCallback+0x160>)
    1560:	b2db      	uxtb	r3, r3
			presetReady = 1;
    1562:	4911      	ldr	r1, [pc, #68]	; (15a8 <HAL_SAI_TxCpltCallback+0x128>)
			currentActivePreset = voice;
    1564:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    1566:	2200      	movs	r2, #0
			presetReady = 1;
    1568:	2301      	movs	r3, #1
			diskBusy = 0;
    156a:	7032      	strb	r2, [r6, #0]
			resetStringInputs = 1;
    156c:	4a15      	ldr	r2, [pc, #84]	; (15c4 <HAL_SAI_TxCpltCallback+0x144>)
			presetReady = 1;
    156e:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    1570:	7013      	strb	r3, [r2, #0]
			whichModel = 4;
    1572:	2204      	movs	r2, #4
    1574:	4b15      	ldr	r3, [pc, #84]	; (15cc <HAL_SAI_TxCpltCallback+0x14c>)
    1576:	701a      	strb	r2, [r3, #0]
    1578:	e7b6      	b.n	14e8 <HAL_SAI_TxCpltCallback+0x68>
			audioFrameFunction = audioFrameString3;
    157a:	4b10      	ldr	r3, [pc, #64]	; (15bc <HAL_SAI_TxCpltCallback+0x13c>)
    157c:	4a1a      	ldr	r2, [pc, #104]	; (15e8 <HAL_SAI_TxCpltCallback+0x168>)
    157e:	601a      	str	r2, [r3, #0]
			audioSwitchToString3();
    1580:	f003 fdbe 	bl	5100 <audioSwitchToString3>
			currentActivePreset = voice;
    1584:	6823      	ldr	r3, [r4, #0]
    1586:	4a16      	ldr	r2, [pc, #88]	; (15e0 <HAL_SAI_TxCpltCallback+0x160>)
    1588:	b2db      	uxtb	r3, r3
			presetReady = 1;
    158a:	4907      	ldr	r1, [pc, #28]	; (15a8 <HAL_SAI_TxCpltCallback+0x128>)
			currentActivePreset = voice;
    158c:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    158e:	2200      	movs	r2, #0
			presetReady = 1;
    1590:	2301      	movs	r3, #1
			diskBusy = 0;
    1592:	7032      	strb	r2, [r6, #0]
			resetStringInputs = 1;
    1594:	4a0b      	ldr	r2, [pc, #44]	; (15c4 <HAL_SAI_TxCpltCallback+0x144>)
			presetReady = 1;
    1596:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    1598:	7013      	strb	r3, [r2, #0]
			whichModel = 5;
    159a:	2205      	movs	r2, #5
    159c:	4b0b      	ldr	r3, [pc, #44]	; (15cc <HAL_SAI_TxCpltCallback+0x14c>)
    159e:	701a      	strb	r2, [r3, #0]
    15a0:	e7a2      	b.n	14e8 <HAL_SAI_TxCpltCallback+0x68>
    15a2:	bf00      	nop
    15a4:	20014540 	.word	0x20014540
    15a8:	20005544 	.word	0x20005544
    15ac:	20014440 	.word	0x20014440
    15b0:	2000069c 	.word	0x2000069c
    15b4:	2001a210 	.word	0x2001a210
    15b8:	2001a20e 	.word	0x2001a20e
    15bc:	20001380 	.word	0x20001380
    15c0:	00001401 	.word	0x00001401
    15c4:	20005968 	.word	0x20005968
    15c8:	200053c0 	.word	0x200053c0
    15cc:	2001c815 	.word	0x2001c815
    15d0:	30000000 	.word	0x30000000
    15d4:	e000ed00 	.word	0xe000ed00
    15d8:	20014434 	.word	0x20014434
    15dc:	00000ba1 	.word	0x00000ba1
    15e0:	200008ac 	.word	0x200008ac
    15e4:	00008ce1 	.word	0x00008ce1
    15e8:	000053a1 	.word	0x000053a1
    15ec:	f3af 8000 	nop.w
    15f0:	f3af 8000 	nop.w
    15f4:	f3af 8000 	nop.w
    15f8:	f3af 8000 	nop.w
    15fc:	f3af 8000 	nop.w

00001600 <HAL_SAI_TxHalfCpltCallback>:
{
    1600:	b570      	push	{r4, r5, r6, lr}
	if ((!diskBusy)&& (presetReady))
    1602:	4e47      	ldr	r6, [pc, #284]	; (1720 <HAL_SAI_TxHalfCpltCallback+0x120>)
    1604:	7830      	ldrb	r0, [r6, #0]
    1606:	b918      	cbnz	r0, 1610 <HAL_SAI_TxHalfCpltCallback+0x10>
    1608:	4b46      	ldr	r3, [pc, #280]	; (1724 <HAL_SAI_TxHalfCpltCallback+0x124>)
    160a:	681b      	ldr	r3, [r3, #0]
    160c:	2b00      	cmp	r3, #0
    160e:	d13d      	bne.n	168c <HAL_SAI_TxHalfCpltCallback+0x8c>
	if (voice != prevVoice)
    1610:	4c45      	ldr	r4, [pc, #276]	; (1728 <HAL_SAI_TxHalfCpltCallback+0x128>)
    1612:	4d46      	ldr	r5, [pc, #280]	; (172c <HAL_SAI_TxHalfCpltCallback+0x12c>)
    1614:	6822      	ldr	r2, [r4, #0]
    1616:	682b      	ldr	r3, [r5, #0]
    1618:	429a      	cmp	r2, r3
    161a:	d025      	beq.n	1668 <HAL_SAI_TxHalfCpltCallback+0x68>
		if (voice == 63)
    161c:	6823      	ldr	r3, [r4, #0]
    161e:	2b3f      	cmp	r3, #63	; 0x3f
    1620:	d038      	beq.n	1694 <HAL_SAI_TxHalfCpltCallback+0x94>
		else if (voice == 62)
    1622:	6823      	ldr	r3, [r4, #0]
    1624:	2b3e      	cmp	r3, #62	; 0x3e
    1626:	d03d      	beq.n	16a4 <HAL_SAI_TxHalfCpltCallback+0xa4>
		else if (voice == 61)
    1628:	6823      	ldr	r3, [r4, #0]
    162a:	2b3d      	cmp	r3, #61	; 0x3d
    162c:	d03c      	beq.n	16a8 <HAL_SAI_TxHalfCpltCallback+0xa8>
		else if (voice == 60)
    162e:	6823      	ldr	r3, [r4, #0]
    1630:	2b3c      	cmp	r3, #60	; 0x3c
    1632:	d04d      	beq.n	16d0 <HAL_SAI_TxHalfCpltCallback+0xd0>
		else if (voice == 59)
    1634:	6823      	ldr	r3, [r4, #0]
    1636:	2b3b      	cmp	r3, #59	; 0x3b
    1638:	d05e      	beq.n	16f8 <HAL_SAI_TxHalfCpltCallback+0xf8>
			presetWaitingToLoad = 1;
    163a:	4b3d      	ldr	r3, [pc, #244]	; (1730 <HAL_SAI_TxHalfCpltCallback+0x130>)
    163c:	2201      	movs	r2, #1
			presetNumberToLoad = voice;
    163e:	483d      	ldr	r0, [pc, #244]	; (1734 <HAL_SAI_TxHalfCpltCallback+0x134>)
			presetWaitingToLoad = 1;
    1640:	601a      	str	r2, [r3, #0]
			presetNumberToLoad = voice;
    1642:	6823      	ldr	r3, [r4, #0]
			audioFrameFunction = audioFrameWaiting;
    1644:	493c      	ldr	r1, [pc, #240]	; (1738 <HAL_SAI_TxHalfCpltCallback+0x138>)
			presetNumberToLoad = voice;
    1646:	b2db      	uxtb	r3, r3
    1648:	7003      	strb	r3, [r0, #0]
			audioFrameFunction = audioFrameWaiting;
    164a:	483c      	ldr	r0, [pc, #240]	; (173c <HAL_SAI_TxHalfCpltCallback+0x13c>)
			presetReady = 0;
    164c:	4b35      	ldr	r3, [pc, #212]	; (1724 <HAL_SAI_TxHalfCpltCallback+0x124>)
			audioFrameFunction = audioFrameWaiting;
    164e:	6008      	str	r0, [r1, #0]
			presetReady = 0;
    1650:	2100      	movs	r1, #0
    1652:	6019      	str	r1, [r3, #0]
			if (prevVoice > 59)
    1654:	682b      	ldr	r3, [r5, #0]
    1656:	2b3b      	cmp	r3, #59	; 0x3b
    1658:	dd01      	ble.n	165e <HAL_SAI_TxHalfCpltCallback+0x5e>
				resetStringInputs = 1;
    165a:	4b39      	ldr	r3, [pc, #228]	; (1740 <HAL_SAI_TxHalfCpltCallback+0x140>)
    165c:	701a      	strb	r2, [r3, #0]
			frameLoadOverCount = 0;
    165e:	2300      	movs	r3, #0
    1660:	4938      	ldr	r1, [pc, #224]	; (1744 <HAL_SAI_TxHalfCpltCallback+0x144>)
			whichModel = 0;
    1662:	4a39      	ldr	r2, [pc, #228]	; (1748 <HAL_SAI_TxHalfCpltCallback+0x148>)
			frameLoadOverCount = 0;
    1664:	600b      	str	r3, [r1, #0]
			whichModel = 0;
    1666:	7013      	strb	r3, [r2, #0]
	prevVoice = voice;
    1668:	6822      	ldr	r2, [r4, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    166a:	4b38      	ldr	r3, [pc, #224]	; (174c <HAL_SAI_TxHalfCpltCallback+0x14c>)
	prevVoice = voice;
    166c:	602a      	str	r2, [r5, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    166e:	f3bf 8f4f 	dsb	sy
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1672:	4937      	ldr	r1, [pc, #220]	; (1750 <HAL_SAI_TxHalfCpltCallback+0x150>)
    1674:	f503 7290 	add.w	r2, r3, #288	; 0x120
    1678:	f8c1 3268 	str.w	r3, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    167c:	3320      	adds	r3, #32
      } while ( op_size > 0 );
    167e:	4293      	cmp	r3, r2
    1680:	d1fa      	bne.n	1678 <HAL_SAI_TxHalfCpltCallback+0x78>
    1682:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1686:	f3bf 8f6f 	isb	sy
}
    168a:	bd70      	pop	{r4, r5, r6, pc}
		audioFrameFunction(0);
    168c:	4b2a      	ldr	r3, [pc, #168]	; (1738 <HAL_SAI_TxHalfCpltCallback+0x138>)
    168e:	681b      	ldr	r3, [r3, #0]
    1690:	4798      	blx	r3
    1692:	e7bd      	b.n	1610 <HAL_SAI_TxHalfCpltCallback+0x10>
			switchStrings = 1;
    1694:	2301      	movs	r3, #1
			switchStrings = 2;
    1696:	4a2f      	ldr	r2, [pc, #188]	; (1754 <HAL_SAI_TxHalfCpltCallback+0x154>)
    1698:	6013      	str	r3, [r2, #0]
			diskBusy = 0;
    169a:	2200      	movs	r2, #0
    169c:	7032      	strb	r2, [r6, #0]
			whichModel = 2;
    169e:	4a2a      	ldr	r2, [pc, #168]	; (1748 <HAL_SAI_TxHalfCpltCallback+0x148>)
    16a0:	7013      	strb	r3, [r2, #0]
    16a2:	e7e1      	b.n	1668 <HAL_SAI_TxHalfCpltCallback+0x68>
			switchStrings = 2;
    16a4:	2302      	movs	r3, #2
    16a6:	e7f6      	b.n	1696 <HAL_SAI_TxHalfCpltCallback+0x96>
			audioFrameFunction = audioFrameAdditive;
    16a8:	4b23      	ldr	r3, [pc, #140]	; (1738 <HAL_SAI_TxHalfCpltCallback+0x138>)
    16aa:	4a2b      	ldr	r2, [pc, #172]	; (1758 <HAL_SAI_TxHalfCpltCallback+0x158>)
    16ac:	601a      	str	r2, [r3, #0]
			audioSwitchToAdditive();
    16ae:	f7ff f867 	bl	780 <audioSwitchToAdditive>
			currentActivePreset = voice;
    16b2:	6823      	ldr	r3, [r4, #0]
    16b4:	4a29      	ldr	r2, [pc, #164]	; (175c <HAL_SAI_TxHalfCpltCallback+0x15c>)
    16b6:	b2db      	uxtb	r3, r3
			presetReady = 1;
    16b8:	491a      	ldr	r1, [pc, #104]	; (1724 <HAL_SAI_TxHalfCpltCallback+0x124>)
			currentActivePreset = voice;
    16ba:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    16bc:	2200      	movs	r2, #0
			presetReady = 1;
    16be:	2301      	movs	r3, #1
			diskBusy = 0;
    16c0:	7032      	strb	r2, [r6, #0]
			resetStringInputs = 1;
    16c2:	4a1f      	ldr	r2, [pc, #124]	; (1740 <HAL_SAI_TxHalfCpltCallback+0x140>)
			presetReady = 1;
    16c4:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    16c6:	7013      	strb	r3, [r2, #0]
			whichModel = 3;
    16c8:	2203      	movs	r2, #3
    16ca:	4b1f      	ldr	r3, [pc, #124]	; (1748 <HAL_SAI_TxHalfCpltCallback+0x148>)
    16cc:	701a      	strb	r2, [r3, #0]
    16ce:	e7cb      	b.n	1668 <HAL_SAI_TxHalfCpltCallback+0x68>
			audioFrameFunction = audioFrameVocal;
    16d0:	4b19      	ldr	r3, [pc, #100]	; (1738 <HAL_SAI_TxHalfCpltCallback+0x138>)
    16d2:	4a23      	ldr	r2, [pc, #140]	; (1760 <HAL_SAI_TxHalfCpltCallback+0x160>)
    16d4:	601a      	str	r2, [r3, #0]
			audioSwitchToVocal();
    16d6:	f007 fa13 	bl	8b00 <audioSwitchToVocal>
			currentActivePreset = voice;
    16da:	6823      	ldr	r3, [r4, #0]
    16dc:	4a1f      	ldr	r2, [pc, #124]	; (175c <HAL_SAI_TxHalfCpltCallback+0x15c>)
    16de:	b2db      	uxtb	r3, r3
			presetReady = 1;
    16e0:	4910      	ldr	r1, [pc, #64]	; (1724 <HAL_SAI_TxHalfCpltCallback+0x124>)
			currentActivePreset = voice;
    16e2:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    16e4:	2200      	movs	r2, #0
			presetReady = 1;
    16e6:	2301      	movs	r3, #1
			diskBusy = 0;
    16e8:	7032      	strb	r2, [r6, #0]
			resetStringInputs = 1;
    16ea:	4a15      	ldr	r2, [pc, #84]	; (1740 <HAL_SAI_TxHalfCpltCallback+0x140>)
			presetReady = 1;
    16ec:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    16ee:	7013      	strb	r3, [r2, #0]
			whichModel = 4;
    16f0:	2204      	movs	r2, #4
    16f2:	4b15      	ldr	r3, [pc, #84]	; (1748 <HAL_SAI_TxHalfCpltCallback+0x148>)
    16f4:	701a      	strb	r2, [r3, #0]
    16f6:	e7b7      	b.n	1668 <HAL_SAI_TxHalfCpltCallback+0x68>
			audioFrameFunction = audioFrameString3;
    16f8:	4b0f      	ldr	r3, [pc, #60]	; (1738 <HAL_SAI_TxHalfCpltCallback+0x138>)
    16fa:	4a1a      	ldr	r2, [pc, #104]	; (1764 <HAL_SAI_TxHalfCpltCallback+0x164>)
    16fc:	601a      	str	r2, [r3, #0]
			audioSwitchToString3();
    16fe:	f003 fcff 	bl	5100 <audioSwitchToString3>
			currentActivePreset = voice;
    1702:	6823      	ldr	r3, [r4, #0]
    1704:	4a15      	ldr	r2, [pc, #84]	; (175c <HAL_SAI_TxHalfCpltCallback+0x15c>)
    1706:	b2db      	uxtb	r3, r3
			presetReady = 1;
    1708:	4906      	ldr	r1, [pc, #24]	; (1724 <HAL_SAI_TxHalfCpltCallback+0x124>)
			currentActivePreset = voice;
    170a:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    170c:	2200      	movs	r2, #0
			presetReady = 1;
    170e:	2301      	movs	r3, #1
			diskBusy = 0;
    1710:	7032      	strb	r2, [r6, #0]
			resetStringInputs = 1;
    1712:	4a0b      	ldr	r2, [pc, #44]	; (1740 <HAL_SAI_TxHalfCpltCallback+0x140>)
			presetReady = 1;
    1714:	600b      	str	r3, [r1, #0]
			resetStringInputs = 1;
    1716:	7013      	strb	r3, [r2, #0]
			whichModel = 5;
    1718:	2205      	movs	r2, #5
    171a:	4b0b      	ldr	r3, [pc, #44]	; (1748 <HAL_SAI_TxHalfCpltCallback+0x148>)
    171c:	701a      	strb	r2, [r3, #0]
    171e:	e7a3      	b.n	1668 <HAL_SAI_TxHalfCpltCallback+0x68>
    1720:	20014540 	.word	0x20014540
    1724:	20005544 	.word	0x20005544
    1728:	20014440 	.word	0x20014440
    172c:	2000069c 	.word	0x2000069c
    1730:	2001a210 	.word	0x2001a210
    1734:	2001a20e 	.word	0x2001a20e
    1738:	20001380 	.word	0x20001380
    173c:	00001401 	.word	0x00001401
    1740:	20005968 	.word	0x20005968
    1744:	200053c0 	.word	0x200053c0
    1748:	2001c815 	.word	0x2001c815
    174c:	30000000 	.word	0x30000000
    1750:	e000ed00 	.word	0xe000ed00
    1754:	20014434 	.word	0x20014434
    1758:	00000ba1 	.word	0x00000ba1
    175c:	200008ac 	.word	0x200008ac
    1760:	00008ce1 	.word	0x00008ce1
    1764:	000053a1 	.word	0x000053a1
    1768:	f3af 8000 	nop.w
    176c:	f3af 8000 	nop.w
    1770:	f3af 8000 	nop.w
    1774:	f3af 8000 	nop.w
    1778:	f3af 8000 	nop.w
    177c:	f3af 8000 	nop.w

00001780 <HAL_SAI_ErrorCallback>:
}
    1780:	4770      	bx	lr
    1782:	bf00      	nop
	...

000017a0 <scaleDefault>:
}
    17a0:	4770      	bx	lr
    17a2:	bf00      	nop
    17a4:	f3af 8000 	nop.w
    17a8:	f3af 8000 	nop.w
    17ac:	f3af 8000 	nop.w
    17b0:	f3af 8000 	nop.w
    17b4:	f3af 8000 	nop.w
    17b8:	f3af 8000 	nop.w
    17bc:	f3af 8000 	nop.w

000017c0 <scaleOscPitch>:
	return ((input * 2.0f) - 1.0f);
    17c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    17c4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
    17c8:	eee0 7a07 	vfma.f32	s15, s0, s14
    17cc:	eeb0 0a67 	vmov.f32	s0, s15
    17d0:	4770      	bx	lr
    17d2:	bf00      	nop
    17d4:	f3af 8000 	nop.w
    17d8:	f3af 8000 	nop.w
    17dc:	f3af 8000 	nop.w

000017e0 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    17e0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 17f4 <scaleOscFine+0x14>
    17e4:	eddf 7a04 	vldr	s15, [pc, #16]	; 17f8 <scaleOscFine+0x18>
}
    17e8:	eee0 7a07 	vfma.f32	s15, s0, s14
    17ec:	eeb0 0a67 	vmov.f32	s0, s15
    17f0:	4770      	bx	lr
    17f2:	bf00      	nop
    17f4:	43480000 	.word	0x43480000
    17f8:	c2c80000 	.word	0xc2c80000
    17fc:	f3af 8000 	nop.w

00001800 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    1800:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1814 <scaleOscFreq+0x14>
    1804:	eddf 7a04 	vldr	s15, [pc, #16]	; 1818 <scaleOscFreq+0x18>
}
    1808:	eee0 7a07 	vfma.f32	s15, s0, s14
    180c:	eeb0 0a67 	vmov.f32	s0, s15
    1810:	4770      	bx	lr
    1812:	bf00      	nop
    1814:	457a0000 	.word	0x457a0000
    1818:	c4fa0000 	.word	0xc4fa0000
    181c:	f3af 8000 	nop.w

00001820 <scaleFilterCutoff>:
	return (input * 127.0f);
    1820:	eddf 7a02 	vldr	s15, [pc, #8]	; 182c <scaleFilterCutoff+0xc>
}
    1824:	ee20 0a27 	vmul.f32	s0, s0, s15
    1828:	4770      	bx	lr
    182a:	bf00      	nop
    182c:	42fe0000 	.word	0x42fe0000
    1830:	f3af 8000 	nop.w
    1834:	f3af 8000 	nop.w
    1838:	f3af 8000 	nop.w
    183c:	f3af 8000 	nop.w

00001840 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    1840:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1854 <scaleFinalLowpass+0x14>
    1844:	eddf 7a04 	vldr	s15, [pc, #16]	; 1858 <scaleFinalLowpass+0x18>
}
    1848:	eee0 7a07 	vfma.f32	s15, s0, s14
    184c:	eeb0 0a67 	vmov.f32	s0, s15
    1850:	4770      	bx	lr
    1852:	bf00      	nop
    1854:	428c0000 	.word	0x428c0000
    1858:	42680000 	.word	0x42680000
    185c:	f3af 8000 	nop.w

00001860 <blankFunction>:
}
    1860:	4770      	bx	lr
    1862:	bf00      	nop
    1864:	f3af 8000 	nop.w
    1868:	f3af 8000 	nop.w
    186c:	f3af 8000 	nop.w
    1870:	f3af 8000 	nop.w
    1874:	f3af 8000 	nop.w
    1878:	f3af 8000 	nop.w
    187c:	f3af 8000 	nop.w

00001880 <scaleTranspose>:
{
    1880:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    1884:	ed9f 0a07 	vldr	s0, [pc, #28]	; 18a4 <scaleTranspose+0x24>
    1888:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    188c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    188e:	f007 fee3 	bl	9658 <__LEAF_clip_veneer>
	return (input * 96.0f) - 48.0f;
    1892:	ed9f 7a05 	vldr	s14, [pc, #20]	; 18a8 <scaleTranspose+0x28>
    1896:	eddf 7a05 	vldr	s15, [pc, #20]	; 18ac <scaleTranspose+0x2c>
}
    189a:	eee0 7a07 	vfma.f32	s15, s0, s14
    189e:	eeb0 0a67 	vmov.f32	s0, s15
    18a2:	bd08      	pop	{r3, pc}
    18a4:	00000000 	.word	0x00000000
    18a8:	42c00000 	.word	0x42c00000
    18ac:	c2400000 	.word	0xc2400000
    18b0:	f3af 8000 	nop.w
    18b4:	f3af 8000 	nop.w
    18b8:	f3af 8000 	nop.w
    18bc:	f3af 8000 	nop.w

000018c0 <scalePitchBend>:
{
    18c0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    18c4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 18dc <scalePitchBend+0x1c>
    18c8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    18cc:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    18ce:	f007 fec3 	bl	9658 <__LEAF_clip_veneer>
	return (input * 48.0f);
    18d2:	eddf 7a03 	vldr	s15, [pc, #12]	; 18e0 <scalePitchBend+0x20>
}
    18d6:	ee20 0a27 	vmul.f32	s0, s0, s15
    18da:	bd08      	pop	{r3, pc}
    18dc:	00000000 	.word	0x00000000
    18e0:	42400000 	.word	0x42400000
    18e4:	f3af 8000 	nop.w
    18e8:	f3af 8000 	nop.w
    18ec:	f3af 8000 	nop.w
    18f0:	f3af 8000 	nop.w
    18f4:	f3af 8000 	nop.w
    18f8:	f3af 8000 	nop.w
    18fc:	f3af 8000 	nop.w

00001900 <scaleFilterResonance>:
{
    1900:	eef0 7a40 	vmov.f32	s15, s0
	input *= 2047.0f;
    1904:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 1974 <scaleFilterResonance+0x74>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1908:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 1978 <scaleFilterResonance+0x78>
	input *= 2047.0f;
    190c:	ee67 7a81 	vmul.f32	s15, s15, s2
{
    1910:	b510      	push	{r4, lr}
	int inputInt = (int)input;
    1912:	eebd 7ae7 	vcvt.s32.f32	s14, s15
{
    1916:	ed2d 8b02 	vpush	{d8}
	int inputInt = (int)input;
    191a:	ee17 4a10 	vmov	r4, s14
	float inputFloat = (float)inputInt - input;
    191e:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1922:	1c63      	adds	r3, r4, #1
	float inputFloat = (float)inputInt - input;
    1924:	ee38 8a67 	vsub.f32	s16, s16, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1928:	ee00 3a90 	vmov	s1, r3
    192c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1930:	f007 fe92 	bl	9658 <__LEAF_clip_veneer>
    1934:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1938:	4b10      	ldr	r3, [pc, #64]	; (197c <scaleFilterResonance+0x7c>)
    193a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    193e:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    1942:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 1980 <scaleFilterResonance+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1946:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    194a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    194e:	ee77 7ac8 	vsub.f32	s15, s15, s16
    1952:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1956:	ed94 7a00 	vldr	s14, [r4]
    195a:	edd3 6a00 	vldr	s13, [r3]
    195e:	ee68 0a26 	vmul.f32	s1, s16, s13
}
    1962:	ecbd 8b02 	vpop	{d8}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1966:	eee7 0a27 	vfma.f32	s1, s14, s15
}
    196a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    196e:	f007 be73 	b.w	9658 <__LEAF_clip_veneer>
    1972:	bf00      	nop
    1974:	44ffe000 	.word	0x44ffe000
    1978:	00000000 	.word	0x00000000
    197c:	2001a670 	.word	0x2001a670
    1980:	3dcccccd 	.word	0x3dcccccd
    1984:	f3af 8000 	nop.w
    1988:	f3af 8000 	nop.w
    198c:	f3af 8000 	nop.w
    1990:	f3af 8000 	nop.w
    1994:	f3af 8000 	nop.w
    1998:	f3af 8000 	nop.w
    199c:	f3af 8000 	nop.w

000019a0 <scaleEnvTimes>:
{
    19a0:	eef0 7a40 	vmov.f32	s15, s0
	input *= 2047.0f;
    19a4:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1a04 <scaleEnvTimes+0x64>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    19a8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1a08 <scaleEnvTimes+0x68>
	input *= 2047.0f;
    19ac:	ee67 7a81 	vmul.f32	s15, s15, s2
{
    19b0:	b510      	push	{r4, lr}
	int inputInt = (int)input;
    19b2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
{
    19b6:	ed2d 8b02 	vpush	{d8}
	int inputInt = (int)input;
    19ba:	ee17 4a10 	vmov	r4, s14
	float inputFloat = (float)inputInt - input;
    19be:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    19c2:	1c63      	adds	r3, r4, #1
	float inputFloat = (float)inputInt - input;
    19c4:	ee38 8a67 	vsub.f32	s16, s16, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    19c8:	ee00 3a90 	vmov	s1, r3
    19cc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    19d0:	f007 fe42 	bl	9658 <__LEAF_clip_veneer>
    19d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    19d8:	4b0c      	ldr	r3, [pc, #48]	; (1a0c <scaleEnvTimes+0x6c>)
    19da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    19de:	ee10 2a10 	vmov	r2, s0
    19e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    19e6:	ee77 7ac8 	vsub.f32	s15, s15, s16
    19ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    19ee:	ed94 7a00 	vldr	s14, [r4]
    19f2:	edd3 6a00 	vldr	s13, [r3]
    19f6:	ee28 0a26 	vmul.f32	s0, s16, s13
}
    19fa:	ecbd 8b02 	vpop	{d8}
    19fe:	eea7 0a27 	vfma.f32	s0, s14, s15
    1a02:	bd10      	pop	{r4, pc}
    1a04:	44ffe000 	.word	0x44ffe000
    1a08:	00000000 	.word	0x00000000
    1a0c:	20014598 	.word	0x20014598
    1a10:	f3af 8000 	nop.w
    1a14:	f3af 8000 	nop.w
    1a18:	f3af 8000 	nop.w
    1a1c:	f3af 8000 	nop.w

00001a20 <scaleLFORates>:
{
    1a20:	eef0 7a40 	vmov.f32	s15, s0
	input *= 2047.0f;
    1a24:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1a84 <scaleLFORates+0x64>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1a28:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1a88 <scaleLFORates+0x68>
	input *= 2047.0f;
    1a2c:	ee67 7a81 	vmul.f32	s15, s15, s2
{
    1a30:	b510      	push	{r4, lr}
	int inputInt = (int)input;
    1a32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
{
    1a36:	ed2d 8b02 	vpush	{d8}
	int inputInt = (int)input;
    1a3a:	ee17 4a10 	vmov	r4, s14
	float inputFloat = (float)inputInt - input;
    1a3e:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1a42:	1c63      	adds	r3, r4, #1
	float inputFloat = (float)inputInt - input;
    1a44:	ee38 8a67 	vsub.f32	s16, s16, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1a48:	ee00 3a90 	vmov	s1, r3
    1a4c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1a50:	f007 fe02 	bl	9658 <__LEAF_clip_veneer>
    1a54:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1a58:	4b0c      	ldr	r3, [pc, #48]	; (1a8c <scaleLFORates+0x6c>)
    1a5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1a5e:	ee10 2a10 	vmov	r2, s0
    1a62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1a66:	ee77 7ac8 	vsub.f32	s15, s15, s16
    1a6a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1a6e:	ed94 7a00 	vldr	s14, [r4]
    1a72:	edd3 6a00 	vldr	s13, [r3]
    1a76:	ee28 0a26 	vmul.f32	s0, s16, s13
}
    1a7a:	ecbd 8b02 	vpop	{d8}
    1a7e:	eea7 0a27 	vfma.f32	s0, s14, s15
    1a82:	bd10      	pop	{r4, pc}
    1a84:	44ffe000 	.word	0x44ffe000
    1a88:	00000000 	.word	0x00000000
    1a8c:	200166c4 	.word	0x200166c4
    1a90:	f3af 8000 	nop.w
    1a94:	f3af 8000 	nop.w
    1a98:	f3af 8000 	nop.w
    1a9c:	f3af 8000 	nop.w

00001aa0 <randomNumber>:
	float num = (random_values[currentRandom++] + 1.0f) * 0.5f;
    1aa0:	4908      	ldr	r1, [pc, #32]	; (1ac4 <randomNumber+0x24>)
    1aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1aa6:	4a08      	ldr	r2, [pc, #32]	; (1ac8 <randomNumber+0x28>)
    1aa8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    1aac:	780b      	ldrb	r3, [r1, #0]
    1aae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    1ab2:	3301      	adds	r3, #1
    1ab4:	edd2 7a00 	vldr	s15, [r2]
    1ab8:	700b      	strb	r3, [r1, #0]
    1aba:	ee77 7a87 	vadd.f32	s15, s15, s14
}
    1abe:	ee27 0a80 	vmul.f32	s0, s15, s0
    1ac2:	4770      	bx	lr
    1ac4:	20014504 	.word	0x20014504
    1ac8:	2001a26c 	.word	0x2001a26c
    1acc:	f3af 8000 	nop.w
    1ad0:	f3af 8000 	nop.w
    1ad4:	f3af 8000 	nop.w
    1ad8:	f3af 8000 	nop.w
    1adc:	f3af 8000 	nop.w

00001ae0 <scaleTwo>:
}
    1ae0:	ee30 0a00 	vadd.f32	s0, s0, s0
    1ae4:	4770      	bx	lr
    1ae6:	bf00      	nop
    1ae8:	f3af 8000 	nop.w
    1aec:	f3af 8000 	nop.w
    1af0:	f3af 8000 	nop.w
    1af4:	f3af 8000 	nop.w
    1af8:	f3af 8000 	nop.w
    1afc:	f3af 8000 	nop.w

00001b00 <parsePreset>:
{
    1b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	currentPresetSize = size;
    1b04:	4b4a      	ldr	r3, [pc, #296]	; (1c30 <parsePreset+0x130>)
{
    1b06:	4605      	mov	r5, r0
    1b08:	ed2d 8b02 	vpush	{d8}
    1b0c:	b08d      	sub	sp, #52	; 0x34
	currentPresetSize = size;
    1b0e:	6018      	str	r0, [r3, #0]
{
    1b10:	9100      	str	r1, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    1b12:	b672      	cpsid	i
	 presetReady = 0;
    1b14:	2700      	movs	r7, #0
    1b16:	4b47      	ldr	r3, [pc, #284]	; (1c34 <parsePreset+0x134>)
	if (buffer[bufferIndex] == 17)
    1b18:	f8df 9130 	ldr.w	r9, [pc, #304]	; 1c4c <parsePreset+0x14c>
		 audioOutBuffer[i] = 0;
    1b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1b20:	4639      	mov	r1, r7
    1b22:	4845      	ldr	r0, [pc, #276]	; (1c38 <parsePreset+0x138>)
	 presetReady = 0;
    1b24:	601f      	str	r7, [r3, #0]
		 audioOutBuffer[i] = 0;
    1b26:	f007 fcd7 	bl	94d8 <__memset_veneer>
	if (buffer[bufferIndex] == 17)
    1b2a:	f899 0000 	ldrb.w	r0, [r9]
	audioMasterLevel = 0.0f;
    1b2e:	2300      	movs	r3, #0
    1b30:	4a42      	ldr	r2, [pc, #264]	; (1c3c <parsePreset+0x13c>)
	if (buffer[bufferIndex] == 17)
    1b32:	2811      	cmp	r0, #17
	audioMasterLevel = 0.0f;
    1b34:	6013      	str	r3, [r2, #0]
		if (buffer[bufferIndex + 1] == 18)
    1b36:	f899 2001 	ldrb.w	r2, [r9, #1]
	if (buffer[bufferIndex] == 17)
    1b3a:	f000 83a2 	beq.w	2282 <parsePreset+0x782>
	uint16_t presetVersionNumber = 0;
    1b3e:	46bb      	mov	fp, r7
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1b40:	9b00      	ldr	r3, [sp, #0]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1b42:	f107 0c01 	add.w	ip, r7, #1
    1b46:	4c3e      	ldr	r4, [pc, #248]	; (1c40 <parsePreset+0x140>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1b48:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    1b4c:	4e3d      	ldr	r6, [pc, #244]	; (1c44 <parsePreset+0x144>)
    1b4e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	for (int i = 0; i < 14; i++)
    1b52:	2300      	movs	r3, #0
    1b54:	e001      	b.n	1b5a <parsePreset+0x5a>
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1b56:	f819 2001 	ldrb.w	r2, [r9, r1]
		presetName[i] = buffer[bufferIndex];
    1b5a:	54f0      	strb	r0, [r6, r3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1b5c:	54e0      	strb	r0, [r4, r3]
	for (int i = 0; i < 14; i++)
    1b5e:	3301      	adds	r3, #1
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1b60:	4610      	mov	r0, r2
    1b62:	eb0c 0103 	add.w	r1, ip, r3
	for (int i = 0; i < 14; i++)
    1b66:	2b0e      	cmp	r3, #14
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1b68:	b289      	uxth	r1, r1
	for (int i = 0; i < 14; i++)
    1b6a:	d1f4      	bne.n	1b56 <parsePreset+0x56>
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1b6c:	f04f 0ec8 	mov.w	lr, #200	; 0xc8
    1b70:	9b00      	ldr	r3, [sp, #0]
		bufferIndex++;
    1b72:	f107 060e 	add.w	r6, r7, #14
	for (int j = 0; j < 8; j++)
    1b76:	2000      	movs	r0, #0
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1b78:	fb0e fe03 	mul.w	lr, lr, r3
    1b7c:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 1c50 <parsePreset+0x150>
    1b80:	eb00 0180 	add.w	r1, r0, r0, lsl #2
		for (int k = 0; k < 9; k++)
    1b84:	2300      	movs	r3, #0
    1b86:	1c74      	adds	r4, r6, #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1b88:	eb0e 0141 	add.w	r1, lr, r1, lsl #1
    1b8c:	4461      	add	r1, ip
    1b8e:	e001      	b.n	1b94 <parsePreset+0x94>
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1b90:	f819 2002 	ldrb.w	r2, [r9, r2]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1b94:	54ca      	strb	r2, [r1, r3]
			bufferIndex++;
    1b96:	18e2      	adds	r2, r4, r3
		for (int k = 0; k < 9; k++)
    1b98:	3301      	adds	r3, #1
    1b9a:	b292      	uxth	r2, r2
    1b9c:	2b09      	cmp	r3, #9
    1b9e:	d1f7      	bne.n	1b90 <parsePreset+0x90>
	for (int j = 0; j < 8; j++)
    1ba0:	3001      	adds	r0, #1
			bufferIndex++;
    1ba2:	3609      	adds	r6, #9
	for (int j = 0; j < 8; j++)
    1ba4:	2808      	cmp	r0, #8
			bufferIndex++;
    1ba6:	b2b6      	uxth	r6, r6
	for (int j = 0; j < 8; j++)
    1ba8:	d002      	beq.n	1bb0 <parsePreset+0xb0>
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1baa:	f819 2006 	ldrb.w	r2, [r9, r6]
    1bae:	e7e7      	b.n	1b80 <parsePreset+0x80>
    1bb0:	26c8      	movs	r6, #200	; 0xc8
    1bb2:	9b00      	ldr	r3, [sp, #0]
			bufferIndex++;
    1bb4:	f107 0456 	add.w	r4, r7, #86	; 0x56
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1bb8:	fb03 f606 	mul.w	r6, r3, r6
    1bbc:	eb00 0180 	add.w	r1, r0, r0, lsl #2
		for (int k = 0; k < 10; k++)
    1bc0:	2300      	movs	r3, #0
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1bc2:	eb06 0141 	add.w	r1, r6, r1, lsl #1
    1bc6:	4461      	add	r1, ip
    1bc8:	18e2      	adds	r2, r4, r3
    1bca:	b292      	uxth	r2, r2
    1bcc:	f819 2002 	ldrb.w	r2, [r9, r2]
    1bd0:	54ca      	strb	r2, [r1, r3]
		for (int k = 0; k < 10; k++)
    1bd2:	3301      	adds	r3, #1
    1bd4:	2b0a      	cmp	r3, #10
    1bd6:	d1f7      	bne.n	1bc8 <parsePreset+0xc8>
	for (int j = 0; j < 4; j++)
    1bd8:	3001      	adds	r0, #1
			bufferIndex++;
    1bda:	340a      	adds	r4, #10
	for (int j = 0; j < 4; j++)
    1bdc:	280c      	cmp	r0, #12
			bufferIndex++;
    1bde:	b2a4      	uxth	r4, r4
	for (int j = 0; j < 4; j++)
    1be0:	d1ec      	bne.n	1bbc <parsePreset+0xbc>
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    1be2:	f107 027e 	add.w	r2, r7, #126	; 0x7e
    1be6:	eb09 0302 	add.w	r3, r9, r2
    1bea:	f819 1002 	ldrb.w	r1, [r9, r2]
    1bee:	785b      	ldrb	r3, [r3, #1]
    1bf0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    1bf4:	b29b      	uxth	r3, r3
	if (paramCount > size)
    1bf6:	42ab      	cmp	r3, r5
    1bf8:	dc0c      	bgt.n	1c14 <parsePreset+0x114>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    1bfa:	eb02 0243 	add.w	r2, r2, r3, lsl #1
	if (paramEndCheck != 0xefef)
    1bfe:	f64e 74ef 	movw	r4, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    1c02:	0058      	lsls	r0, r3, #1
    1c04:	444a      	add	r2, r9
    1c06:	7896      	ldrb	r6, [r2, #2]
    1c08:	78d1      	ldrb	r1, [r2, #3]
    1c0a:	eb01 2106 	add.w	r1, r1, r6, lsl #8
	if (paramEndCheck != 0xefef)
    1c0e:	b289      	uxth	r1, r1
    1c10:	42a1      	cmp	r1, r4
    1c12:	d01f      	beq.n	1c54 <parsePreset+0x154>
		audioMasterLevel = 1.0f;
    1c14:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    1c18:	4b0b      	ldr	r3, [pc, #44]	; (1c48 <parsePreset+0x148>)
    1c1a:	2200      	movs	r2, #0
		audioMasterLevel = 1.0f;
    1c1c:	4807      	ldr	r0, [pc, #28]	; (1c3c <parsePreset+0x13c>)
    1c1e:	6001      	str	r1, [r0, #0]
		presetWaitingToParse = 0;
    1c20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    1c22:	b662      	cpsie	i
}
    1c24:	b00d      	add	sp, #52	; 0x34
    1c26:	ecbd 8b02 	vpop	{d8}
    1c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c2e:	bf00      	nop
    1c30:	20014500 	.word	0x20014500
    1c34:	20005544 	.word	0x20005544
    1c38:	30000000 	.word	0x30000000
    1c3c:	200008a8 	.word	0x200008a8
    1c40:	30042000 	.word	0x30042000
    1c44:	2001a200 	.word	0x2001a200
    1c48:	2001a214 	.word	0x2001a214
    1c4c:	30042380 	.word	0x30042380
    1c50:	30043380 	.word	0x30043380
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    1c54:	7911      	ldrb	r1, [r2, #4]
    1c56:	7952      	ldrb	r2, [r2, #5]
    1c58:	eb02 2201 	add.w	r2, r2, r1, lsl #8
    1c5c:	b291      	uxth	r1, r2
    1c5e:	9107      	str	r1, [sp, #28]
	if (presetVersionNumber == 0)
    1c60:	f1bb 0f00 	cmp.w	fp, #0
    1c64:	f000 8317 	beq.w	2296 <parsePreset+0x796>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    1c68:	9a07      	ldr	r2, [sp, #28]
    1c6a:	eb02 0142 	add.w	r1, r2, r2, lsl #1
    1c6e:	f107 0284 	add.w	r2, r7, #132	; 0x84
    1c72:	4419      	add	r1, r3
    1c74:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    1c78:	b292      	uxth	r2, r2
	if (mappingEndLocation > size)
    1c7a:	42aa      	cmp	r2, r5
    1c7c:	dcca      	bgt.n	1c14 <parsePreset+0x114>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    1c7e:	eb09 0402 	add.w	r4, r9, r2
    1c82:	f819 1002 	ldrb.w	r1, [r9, r2]
    1c86:	7862      	ldrb	r2, [r4, #1]
    1c88:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    1c8c:	f64f 61fe 	movw	r1, #65278	; 0xfefe
    1c90:	b292      	uxth	r2, r2
    1c92:	428a      	cmp	r2, r1
    1c94:	d1be      	bne.n	1c14 <parsePreset+0x114>
	bufferIndex = bufferIndex + 2;
    1c96:	f107 0280 	add.w	r2, r7, #128	; 0x80
    1c9a:	4615      	mov	r5, r2
	for (int i = 0; i < paramCount; i++)
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	f000 8692 	beq.w	29c6 <parsePreset+0xec6>
    1ca2:	f8df c3dc 	ldr.w	ip, [pc, #988]	; 2080 <parsePreset+0x580>
    1ca6:	4410      	add	r0, r2
    1ca8:	f8df a388 	ldr.w	sl, [pc, #904]	; 2034 <parsePreset+0x534>
    1cac:	4662      	mov	r2, ip
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    1cae:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 1ffc <parsePreset+0x4fc>
    1cb2:	469c      	mov	ip, r3
    1cb4:	b280      	uxth	r0, r0
    1cb6:	4ed2      	ldr	r6, [pc, #840]	; (2000 <parsePreset+0x500>)
    1cb8:	4651      	mov	r1, sl
    1cba:	4613      	mov	r3, r2
    1cbc:	eb09 0205 	add.w	r2, r9, r5
    1cc0:	f819 4005 	ldrb.w	r4, [r9, r5]
		bufferIndex += 2;
    1cc4:	3502      	adds	r5, #2
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    1cc6:	7852      	ldrb	r2, [r2, #1]
		bufferIndex += 2;
    1cc8:	b2ad      	uxth	r5, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    1cca:	eb02 2204 	add.w	r2, r2, r4, lsl #8
	for (int i = 0; i < paramCount; i++)
    1cce:	42a8      	cmp	r0, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    1cd0:	ee07 2a90 	vmov	s15, r2
    1cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		params[i].setParam = &blankFunction;
    1cd8:	e9c1 3604 	strd	r3, r6, [r1, #16]
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    1cdc:	ee67 7a87 	vmul.f32	s15, s15, s14
	for (int i = 0; i < paramCount; i++)
    1ce0:	f101 011c 	add.w	r1, r1, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    1ce4:	ed41 7a07 	vstr	s15, [r1, #-28]	; 0xffffffe4
    1ce8:	ed41 7a06 	vstr	s15, [r1, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    1cec:	d1e6      	bne.n	1cbc <parsePreset+0x1bc>
		bufferIndex += 2;
    1cee:	eb07 024c 	add.w	r2, r7, ip, lsl #1
    1cf2:	4663      	mov	r3, ip
    1cf4:	3280      	adds	r2, #128	; 0x80
    1cf6:	b295      	uxth	r5, r2
	for (int i = paramCount; i < NUM_PARAMS; i++)
    1cf8:	2b9c      	cmp	r3, #156	; 0x9c
    1cfa:	f000 8661 	beq.w	29c0 <parsePreset+0xec0>
    1cfe:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    1d02:	f8df c37c 	ldr.w	ip, [pc, #892]	; 2080 <parsePreset+0x580>
    1d06:	4cbf      	ldr	r4, [pc, #764]	; (2004 <parsePreset+0x504>)
			params[i].zeroToOneVal[v] = 0.0f;
    1d08:	2200      	movs	r2, #0
    1d0a:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    1d0e:	4ebc      	ldr	r6, [pc, #752]	; (2000 <parsePreset+0x500>)
    1d10:	4661      	mov	r1, ip
    1d12:	601a      	str	r2, [r3, #0]
    1d14:	605a      	str	r2, [r3, #4]
		params[i].setParam = &blankFunction;
    1d16:	e9c3 1604 	strd	r1, r6, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    1d1a:	331c      	adds	r3, #28
    1d1c:	429c      	cmp	r4, r3
    1d1e:	d1f8      	bne.n	1d12 <parsePreset+0x212>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    1d20:	4ab9      	ldr	r2, [pc, #740]	; (2008 <parsePreset+0x508>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    1d22:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    1d26:	4bb9      	ldr	r3, [pc, #740]	; (200c <parsePreset+0x50c>)
	for (int i = 0; i < NUM_EFFECT; i++)
    1d28:	2700      	movs	r7, #0
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    1d2a:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    1d2e:	f8ca 2454 	str.w	r2, [sl, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    1d32:	f8ca 25c0 	str.w	r2, [sl, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    1d36:	4ab6      	ldr	r2, [pc, #728]	; (2010 <parsePreset+0x510>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    1d38:	f8ca 3be0 	str.w	r3, [sl, #3040]	; 0xbe0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    1d3c:	f8ca 2304 	str.w	r2, [sl, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    1d40:	f8ca 2470 	str.w	r2, [sl, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    1d44:	f8ca 25dc 	str.w	r2, [sl, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    1d48:	4ab2      	ldr	r2, [pc, #712]	; (2014 <parsePreset+0x514>)
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    1d4a:	f8ca 3bfc 	str.w	r3, [sl, #3068]	; 0xbfc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    1d4e:	f8ca 2aac 	str.w	r2, [sl, #2732]	; 0xaac
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    1d52:	f8ca 2b54 	str.w	r2, [sl, #2900]	; 0xb54
	params[Transpose].scaleFunc = &scaleTranspose;
    1d56:	4ab0      	ldr	r2, [pc, #704]	; (2018 <parsePreset+0x518>)
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    1d58:	f8ca 3c34 	str.w	r3, [sl, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    1d5c:	f8ca 3c88 	str.w	r3, [sl, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    1d60:	f8ca 3ca4 	str.w	r3, [sl, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    1d64:	f8ca 3cdc 	str.w	r3, [sl, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    1d68:	f8ca 3d30 	str.w	r3, [sl, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    1d6c:	f8ca 3d4c 	str.w	r3, [sl, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    1d70:	f8ca 3d84 	str.w	r3, [sl, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    1d74:	f8ca 3dd8 	str.w	r3, [sl, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    1d78:	f8ca 3df4 	str.w	r3, [sl, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    1d7c:	f8ca 3e2c 	str.w	r3, [sl, #3628]	; 0xe2c
	params[Transpose].scaleFunc = &scaleTranspose;
    1d80:	f8ca 21d0 	str.w	r2, [sl, #464]	; 0x1d0
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    1d84:	4ba5      	ldr	r3, [pc, #660]	; (201c <parsePreset+0x51c>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    1d86:	4aa6      	ldr	r2, [pc, #664]	; (2020 <parsePreset+0x520>)
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    1d88:	4ea6      	ldr	r6, [pc, #664]	; (2024 <parsePreset+0x524>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    1d8a:	f8ca 32cc 	str.w	r3, [sl, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    1d8e:	f8ca 3358 	str.w	r3, [sl, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    1d92:	f8ca 3438 	str.w	r3, [sl, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    1d96:	f8ca 34c4 	str.w	r3, [sl, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    1d9a:	f8ca 35a4 	str.w	r3, [sl, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    1d9e:	f8ca 3630 	str.w	r3, [sl, #1584]	; 0x630
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    1da2:	f8ca 21ec 	str.w	r2, [sl, #492]	; 0x1ec
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    1da6:	4ba0      	ldr	r3, [pc, #640]	; (2028 <parsePreset+0x528>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    1da8:	4aa0      	ldr	r2, [pc, #640]	; (202c <parsePreset+0x52c>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    1daa:	f8ca 3e80 	str.w	r3, [sl, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    1dae:	f8ca 3f0c 	str.w	r3, [sl, #3852]	; 0xf0c
    1db2:	f6a2 181c 	subw	r8, r2, #2332	; 0x91c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    1db6:	f8ca 6ae4 	str.w	r6, [sl, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    1dba:	f8ca 6b8c 	str.w	r6, [sl, #2956]	; 0xb8c
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    1dbe:	f8ca 3f98 	str.w	r3, [sl, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    1dc2:	6253      	str	r3, [r2, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    1dc4:	4b9a      	ldr	r3, [pc, #616]	; (2030 <parsePreset+0x530>)
    1dc6:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    1dca:	edd8 7a00 	vldr	s15, [r8]
			setEffectsFunctions(effectType, i);
    1dce:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    1dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
    1dd4:	fef8 7a67 	vrinta.f32	s15, s15
    1dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1ddc:	edcd 7a01 	vstr	s15, [sp, #4]
    1de0:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    1de4:	280d      	cmp	r0, #13
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    1de6:	bf88      	it	hi
    1de8:	f8c8 6064 	strhi.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    1dec:	f007 fa78 	bl	92e0 <__setEffectsFunctions_veneer>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    1df0:	edd8 7a01 	vldr	s15, [r8, #4]
    1df4:	ee67 7a87 	vmul.f32	s15, s15, s14
    1df8:	fef8 7a67 	vrinta.f32	s15, s15
    1dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1e00:	edcd 7a01 	vstr	s15, [sp, #4]
    1e04:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    1e08:	280d      	cmp	r0, #13
    1e0a:	d901      	bls.n	1e10 <parsePreset+0x310>
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    1e0c:	f8c8 6064 	str.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    1e10:	4639      	mov	r1, r7
	for (int i = 0; i < NUM_EFFECT; i++)
    1e12:	3701      	adds	r7, #1
			setEffectsFunctions(effectType, i);
    1e14:	f007 fa64 	bl	92e0 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    1e18:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    1e1c:	2f04      	cmp	r7, #4
    1e1e:	d1d4      	bne.n	1dca <parsePreset+0x2ca>
    1e20:	4f84      	ldr	r7, [pc, #528]	; (2034 <parsePreset+0x534>)
    1e22:	46ba      	mov	sl, r7
    1e24:	463e      	mov	r6, r7
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    1e26:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    1e28:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    1e2a:	ed16 0a07 	vldr	s0, [r6, #-28]	; 0xffffffe4
    1e2e:	4798      	blx	r3
    1e30:	ed06 0a05 	vstr	s0, [r6, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    1e34:	42b4      	cmp	r4, r6
    1e36:	d1f6      	bne.n	1e26 <parsePreset+0x326>
    1e38:	4e7e      	ldr	r6, [pc, #504]	; (2034 <parsePreset+0x534>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    1e3a:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    1e3c:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    1e3e:	ed16 0a06 	vldr	s0, [r6, #-24]	; 0xffffffe8
    1e42:	4798      	blx	r3
    1e44:	ed06 0a04 	vstr	s0, [r6, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    1e48:	42b4      	cmp	r4, r6
    1e4a:	d1f6      	bne.n	1e3a <parsePreset+0x33a>
    1e4c:	f8df 8234 	ldr.w	r8, [pc, #564]	; 2084 <parsePreset+0x584>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    1e50:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
    1e54:	4e78      	ldr	r6, [pc, #480]	; (2038 <parsePreset+0x538>)
	for (int i = 0; i < NUM_OSC; i++)
    1e56:	2100      	movs	r1, #0
	uint8_t enabledCount = 0;
    1e58:	4643      	mov	r3, r8
		for (int i = 0; i < NUM_PARAMS; i++)
    1e5a:	4c76      	ldr	r4, [pc, #472]	; (2034 <parsePreset+0x534>)
	uint8_t enabledCount = 0;
    1e5c:	46b0      	mov	r8, r6
    1e5e:	462e      	mov	r6, r5
    1e60:	461d      	mov	r5, r3
    1e62:	9101      	str	r1, [sp, #4]
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    1e64:	edd4 7af7 	vldr	s15, [r4, #988]	; 0x3dc
    1e68:	ee67 7aa6 	vmul.f32	s15, s15, s13
    1e6c:	fef8 7a67 	vrinta.f32	s15, s15
		setOscilllatorShapes(oscshape, i);
    1e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1e74:	ee17 0a90 	vmov	r0, s15
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    1e78:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		setOscilllatorShapes(oscshape, i);
    1e7c:	f007 fb4c 	bl	9518 <__setOscilllatorShapes_veneer>
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    1e80:	ed94 7aaa 	vldr	s14, [r4, #680]	; 0x2a8
    1e84:	2200      	movs	r2, #0
			enabledCount++;
    1e86:	9b01      	ldr	r3, [sp, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    1e88:	eeb4 7ae7 	vcmpe.f32	s14, s15
			enabledCount++;
    1e8c:	f103 0c01 	add.w	ip, r3, #1
    1e90:	4610      	mov	r0, r2
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    1e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1e96:	dd04      	ble.n	1ea2 <parsePreset+0x3a2>
    1e98:	2201      	movs	r2, #1
			enabledCount++;
    1e9a:	fa5f f38c 	uxtb.w	r3, ip
    1e9e:	4610      	mov	r0, r2
    1ea0:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < NUM_OSC; i++)
    1ea2:	3101      	adds	r1, #1
    1ea4:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
			oscsEnabled[i] = 1;
    1ea8:	f845 2b04 	str.w	r2, [r5], #4
	for (int i = 0; i < NUM_OSC; i++)
    1eac:	2903      	cmp	r1, #3
			oscOn[i] = 1;
    1eae:	f808 0b01 	strb.w	r0, [r8], #1
	for (int i = 0; i < NUM_OSC; i++)
    1eb2:	d1d7      	bne.n	1e64 <parsePreset+0x364>
	if (params[Noise].realVal[0]  > 0.5f)
    1eb4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    1eb8:	ed9a 6a80 	vldr	s12, [sl, #512]	; 0x200
    1ebc:	4635      	mov	r5, r6
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    1ebe:	4e5f      	ldr	r6, [pc, #380]	; (203c <parsePreset+0x53c>)
    1ec0:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
	oscAmpMult = oscAmpMultArray[enabledCount];
    1ec4:	9a01      	ldr	r2, [sp, #4]
	if (params[Noise].realVal[0]  > 0.5f)
    1ec6:	eeb4 6ae7 	vcmpe.f32	s12, s15
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    1eca:	edd6 7a00 	vldr	s15, [r6]
	oscAmpMult = oscAmpMultArray[enabledCount];
    1ece:	4b5c      	ldr	r3, [pc, #368]	; (2040 <parsePreset+0x540>)
    1ed0:	f206 4444 	addw	r4, r6, #1092	; 0x444
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    1ed4:	ee67 7aa6 	vmul.f32	s15, s15, s13
	oscAmpMult = oscAmpMultArray[enabledCount];
    1ed8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (params[Noise].realVal[0]  > 0.5f)
    1edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	oscAmpMult = oscAmpMultArray[enabledCount];
    1ee0:	4a58      	ldr	r2, [pc, #352]	; (2044 <parsePreset+0x544>)
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    1ee2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
	oscAmpMult = oscAmpMultArray[enabledCount];
    1ee6:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    1ee8:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    1eec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    1ef0:	4633      	mov	r3, r6
	oscAmpMult = oscAmpMultArray[enabledCount];
    1ef2:	6011      	str	r1, [r2, #0]
	if (params[Noise].realVal[0]  > 0.5f)
    1ef4:	bfcc      	ite	gt
    1ef6:	2301      	movgt	r3, #1
    1ef8:	2300      	movle	r3, #0
    1efa:	4a53      	ldr	r2, [pc, #332]	; (2048 <parsePreset+0x548>)
		setFilterTypes(filterType, i);
    1efc:	ee17 0a90 	vmov	r0, s15
    1f00:	2100      	movs	r1, #0
	if (params[Noise].realVal[0]  > 0.5f)
    1f02:	7013      	strb	r3, [r2, #0]
		setFilterTypes(filterType, i);
    1f04:	f007 f978 	bl	91f8 <__setFilterTypes_veneer>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    1f08:	edd6 7a2a 	vldr	s15, [r6, #168]	; 0xa8
	for (int i = 0; i < NUM_LFOS; i++)
    1f0c:	460e      	mov	r6, r1
		setFilterTypes(filterType, i);
    1f0e:	2101      	movs	r1, #1
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    1f10:	ee67 7aa6 	vmul.f32	s15, s15, s13
    1f14:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    1f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1f1c:	ee17 0a90 	vmov	r0, s15
    1f20:	f007 f96a 	bl	91f8 <__setFilterTypes_veneer>
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    1f24:	4623      	mov	r3, r4
		setLFOShapes(LFOShape, i);
    1f26:	4631      	mov	r1, r6
	for (int i = 0; i < NUM_LFOS; i++)
    1f28:	3601      	adds	r6, #1
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    1f2a:	348c      	adds	r4, #140	; 0x8c
    1f2c:	edd3 7a00 	vldr	s15, [r3]
    1f30:	ee67 7a87 	vmul.f32	s15, s15, s14
    1f34:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    1f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1f3c:	ee17 0a90 	vmov	r0, s15
    1f40:	f007 f8a6 	bl	9090 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    1f44:	2e04      	cmp	r6, #4
    1f46:	d1ed      	bne.n	1f24 <parsePreset+0x424>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    1f48:	4840      	ldr	r0, [pc, #256]	; (204c <parsePreset+0x54c>)
	for (int i = 0; i < NUM_PARAMS; i++)
    1f4a:	f04f 0800 	mov.w	r8, #0
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    1f4e:	4b40      	ldr	r3, [pc, #256]	; (2050 <parsePreset+0x550>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    1f50:	f8ca 02d0 	str.w	r0, [sl, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    1f54:	f8ca 043c 	str.w	r0, [sl, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    1f58:	f8ca 05a8 	str.w	r0, [sl, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    1f5c:	483d      	ldr	r0, [pc, #244]	; (2054 <parsePreset+0x554>)
	params[OutputTone].setParam = &setFinalLowpass;
    1f5e:	4e33      	ldr	r6, [pc, #204]	; (202c <parsePreset+0x52c>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    1f60:	f8ca 035c 	str.w	r0, [sl, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    1f64:	f8ca 04c8 	str.w	r0, [sl, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    1f68:	f8ca 0634 	str.w	r0, [sl, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    1f6c:	6818      	ldr	r0, [r3, #0]
	params[Effect1Mix].setParam = &fxMixSet;
    1f6e:	493a      	ldr	r1, [pc, #232]	; (2058 <parsePreset+0x558>)
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    1f70:	f8ca 0714 	str.w	r0, [sl, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    1f74:	6858      	ldr	r0, [r3, #4]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    1f76:	4c39      	ldr	r4, [pc, #228]	; (205c <parsePreset+0x55c>)
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    1f78:	f8ca 0730 	str.w	r0, [sl, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    1f7c:	6898      	ldr	r0, [r3, #8]
	params[Effect1Mix].setParam = &fxMixSet;
    1f7e:	f8ca 17a0 	str.w	r1, [sl, #1952]	; 0x7a0
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    1f82:	f8ca 074c 	str.w	r0, [sl, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    1f86:	68d8      	ldr	r0, [r3, #12]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    1f88:	f8ca 47bc 	str.w	r4, [sl, #1980]	; 0x7bc
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    1f8c:	f8ca 0768 	str.w	r0, [sl, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    1f90:	6918      	ldr	r0, [r3, #16]
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    1f92:	4a33      	ldr	r2, [pc, #204]	; (2060 <parsePreset+0x560>)
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    1f94:	f8ca 0784 	str.w	r0, [sl, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    1f98:	6958      	ldr	r0, [r3, #20]
    1f9a:	f8ca 07f4 	str.w	r0, [sl, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    1f9e:	6998      	ldr	r0, [r3, #24]
    1fa0:	f8ca 0810 	str.w	r0, [sl, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    1fa4:	69d8      	ldr	r0, [r3, #28]
    1fa6:	f8ca 082c 	str.w	r0, [sl, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
    1faa:	482e      	ldr	r0, [pc, #184]	; (2064 <parsePreset+0x564>)
    1fac:	f8ca 0228 	str.w	r0, [sl, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    1fb0:	482d      	ldr	r0, [pc, #180]	; (2068 <parsePreset+0x568>)
    1fb2:	f8ca 0260 	str.w	r0, [sl, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    1fb6:	482d      	ldr	r0, [pc, #180]	; (206c <parsePreset+0x56c>)
    1fb8:	f8ca 0244 	str.w	r0, [sl, #580]	; 0x244
	params[Master].setParam = &setMaster;
    1fbc:	482c      	ldr	r0, [pc, #176]	; (2070 <parsePreset+0x570>)
    1fbe:	f8ca 004c 	str.w	r0, [sl, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    1fc2:	482c      	ldr	r0, [pc, #176]	; (2074 <parsePreset+0x574>)
    1fc4:	f8ca 01d4 	str.w	r0, [sl, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    1fc8:	482b      	ldr	r0, [pc, #172]	; (2078 <parsePreset+0x578>)
    1fca:	f8ca 01f0 	str.w	r0, [sl, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    1fce:	482b      	ldr	r0, [pc, #172]	; (207c <parsePreset+0x57c>)
    1fd0:	f8c6 00d0 	str.w	r0, [r6, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    1fd4:	6a18      	ldr	r0, [r3, #32]
    1fd6:	f8ca 0848 	str.w	r0, [sl, #2120]	; 0x848
	params[Effect2Mix].setParam = &fxMixSet;
    1fda:	f8ca 1880 	str.w	r1, [sl, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
    1fde:	f8ca 1960 	str.w	r1, [sl, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
    1fe2:	f8ca 1a40 	str.w	r1, [sl, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    1fe6:	6a59      	ldr	r1, [r3, #36]	; 0x24
	params[Effect2PostGain].setParam = &fxPostGainSet;
    1fe8:	f8ca 489c 	str.w	r4, [sl, #2204]	; 0x89c
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    1fec:	f8ca 1864 	str.w	r1, [sl, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    1ff0:	6a99      	ldr	r1, [r3, #40]	; 0x28
	params[Effect3PostGain].setParam = &fxPostGainSet;
    1ff2:	f8ca 497c 	str.w	r4, [sl, #2428]	; 0x97c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    1ff6:	f8ca 18d4 	str.w	r1, [sl, #2260]	; 0x8d4
    1ffa:	e045      	b.n	2088 <parsePreset+0x588>
    1ffc:	377ffff6 	.word	0x377ffff6
    2000:	00001861 	.word	0x00001861
    2004:	2001a1f4 	.word	0x2001a1f4
    2008:	000017e1 	.word	0x000017e1
    200c:	000019a1 	.word	0x000019a1
    2010:	00001801 	.word	0x00001801
    2014:	00001821 	.word	0x00001821
    2018:	00001881 	.word	0x00001881
    201c:	000017c1 	.word	0x000017c1
    2020:	000018c1 	.word	0x000018c1
    2024:	00001901 	.word	0x00001901
    2028:	00001a21 	.word	0x00001a21
    202c:	2001a0e4 	.word	0x2001a0e4
    2030:	00001841 	.word	0x00001841
    2034:	200190e4 	.word	0x200190e4
    2038:	2001d568 	.word	0x2001d568
    203c:	20019b6c 	.word	0x20019b6c
    2040:	20000ad8 	.word	0x20000ad8
    2044:	20000ad4 	.word	0x20000ad4
    2048:	2001d514 	.word	0x2001d514
    204c:	00006081 	.word	0x00006081
    2050:	20014544 	.word	0x20014544
    2054:	000060e1 	.word	0x000060e1
    2058:	000070e1 	.word	0x000070e1
    205c:	00007101 	.word	0x00007101
    2060:	20016598 	.word	0x20016598
    2064:	00007ea1 	.word	0x00007ea1
    2068:	00007f41 	.word	0x00007f41
    206c:	00007f01 	.word	0x00007f01
    2070:	00006641 	.word	0x00006641
    2074:	00006661 	.word	0x00006661
    2078:	00006681 	.word	0x00006681
    207c:	000066c1 	.word	0x000066c1
    2080:	000017a1 	.word	0x000017a1
    2084:	200190d8 	.word	0x200190d8
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	params[Effect4PostGain].setParam = &fxPostGainSet;
    208a:	f8ca 4a5c 	str.w	r4, [sl, #2652]	; 0xa5c
		params[i].objectNumber = 0;
    208e:	4644      	mov	r4, r8
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2090:	f8ca 18f0 	str.w	r1, [sl, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    2094:	6b19      	ldr	r1, [r3, #48]	; 0x30
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    2096:	4884      	ldr	r0, [pc, #528]	; (22a8 <parsePreset+0x7a8>)
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    2098:	f8ca 190c 	str.w	r1, [sl, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    209c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    209e:	f8ca 1928 	str.w	r1, [sl, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    20a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    20a4:	f8ca 1944 	str.w	r1, [sl, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    20a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    20aa:	f8ca 19b4 	str.w	r1, [sl, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    20ae:	6c19      	ldr	r1, [r3, #64]	; 0x40
    20b0:	f8ca 19d0 	str.w	r1, [sl, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    20b4:	6c59      	ldr	r1, [r3, #68]	; 0x44
    20b6:	f8ca 19ec 	str.w	r1, [sl, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    20ba:	6c99      	ldr	r1, [r3, #72]	; 0x48
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    20bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    20be:	f8ca 1a08 	str.w	r1, [sl, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    20c2:	f8ca 3a24 	str.w	r3, [sl, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    20c6:	6813      	ldr	r3, [r2, #0]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    20c8:	4978      	ldr	r1, [pc, #480]	; (22ac <parsePreset+0x7ac>)
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    20ca:	f8ca 3ae8 	str.w	r3, [sl, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    20ce:	6853      	ldr	r3, [r2, #4]
    20d0:	f8ca 3acc 	str.w	r3, [sl, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    20d4:	6893      	ldr	r3, [r2, #8]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    20d6:	f8ca 1be4 	str.w	r1, [sl, #3044]	; 0xbe4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    20da:	f8ca 3b90 	str.w	r3, [sl, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    20de:	68d3      	ldr	r3, [r2, #12]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    20e0:	f8ca 1c8c 	str.w	r1, [sl, #3212]	; 0xc8c
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    20e4:	f8ca 3b74 	str.w	r3, [sl, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    20e8:	4b71      	ldr	r3, [pc, #452]	; (22b0 <parsePreset+0x7b0>)
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    20ea:	f8ca 1d34 	str.w	r1, [sl, #3380]	; 0xd34
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    20ee:	f8ca 3c00 	str.w	r3, [sl, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    20f2:	f8ca 3ca8 	str.w	r3, [sl, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    20f6:	f8ca 3d50 	str.w	r3, [sl, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    20fa:	f8ca 3df8 	str.w	r3, [sl, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    20fe:	4b6d      	ldr	r3, [pc, #436]	; (22b4 <parsePreset+0x7b4>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    2100:	f8ca 1ddc 	str.w	r1, [sl, #3548]	; 0xddc
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    2104:	f8ca 3c1c 	str.w	r3, [sl, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    2108:	f8ca 3cc4 	str.w	r3, [sl, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    210c:	f8ca 3d6c 	str.w	r3, [sl, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    2110:	f8ca 3e14 	str.w	r3, [sl, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    2114:	4b68      	ldr	r3, [pc, #416]	; (22b8 <parsePreset+0x7b8>)
    2116:	f8ca 3c38 	str.w	r3, [sl, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    211a:	f8ca 3ce0 	str.w	r3, [sl, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    211e:	f8ca 3d88 	str.w	r3, [sl, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    2122:	f8ca 3e30 	str.w	r3, [sl, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    2126:	4b65      	ldr	r3, [pc, #404]	; (22bc <parsePreset+0x7bc>)
    2128:	f8ca 3c54 	str.w	r3, [sl, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    212c:	f8ca 3cfc 	str.w	r3, [sl, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    2130:	f8ca 3da4 	str.w	r3, [sl, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    2134:	f8ca 3e4c 	str.w	r3, [sl, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    2138:	6803      	ldr	r3, [r0, #0]
    213a:	f8ca 3e84 	str.w	r3, [sl, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    213e:	68c3      	ldr	r3, [r0, #12]
    2140:	f8ca 3f10 	str.w	r3, [sl, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    2144:	6983      	ldr	r3, [r0, #24]
    2146:	f8ca 3f9c 	str.w	r3, [sl, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    214a:	6a43      	ldr	r3, [r0, #36]	; 0x24
    214c:	62b3      	str	r3, [r6, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    214e:	6843      	ldr	r3, [r0, #4]
    2150:	f8ca 3ea0 	str.w	r3, [sl, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    2154:	6903      	ldr	r3, [r0, #16]
    2156:	f8ca 3f2c 	str.w	r3, [sl, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    215a:	69c3      	ldr	r3, [r0, #28]
    215c:	f8ca 3fb8 	str.w	r3, [sl, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    2160:	6a83      	ldr	r3, [r0, #40]	; 0x28
    2162:	6473      	str	r3, [r6, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    2164:	6883      	ldr	r3, [r0, #8]
    2166:	f8ca 3ebc 	str.w	r3, [sl, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    216a:	6943      	ldr	r3, [r0, #20]
    216c:	f8ca 3f48 	str.w	r3, [sl, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    2170:	6a03      	ldr	r3, [r0, #32]
    2172:	f8ca 3fd4 	str.w	r3, [sl, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    2176:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2178:	6633      	str	r3, [r6, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    217a:	4b51      	ldr	r3, [pc, #324]	; (22c0 <parsePreset+0x7c0>)
    217c:	f8c6 30b4 	str.w	r3, [r6, #180]	; 0xb4
			params[i].objectNumber = 1;
    2180:	2601      	movs	r6, #1
		if ((i >= Osc1) && (i < Osc2))
    2182:	f1a8 0318 	sub.w	r3, r8, #24
		params[i].objectNumber = 0;
    2186:	763c      	strb	r4, [r7, #24]
		if ((i >= Osc1) && (i < Osc2))
    2188:	2b0c      	cmp	r3, #12
    218a:	f240 8287 	bls.w	269c <parsePreset+0xb9c>
		else if ((i >= Osc2) && (i < Osc3))
    218e:	f1a8 0325 	sub.w	r3, r8, #37	; 0x25
    2192:	2b72      	cmp	r3, #114	; 0x72
    2194:	f200 8282 	bhi.w	269c <parsePreset+0xb9c>
    2198:	e8df f013 	tbh	[pc, r3, lsl #1]
    219c:	00960096 	.word	0x00960096
    21a0:	00960096 	.word	0x00960096
    21a4:	00960096 	.word	0x00960096
    21a8:	00960096 	.word	0x00960096
    21ac:	00960096 	.word	0x00960096
    21b0:	00960096 	.word	0x00960096
    21b4:	027a0096 	.word	0x027a0096
    21b8:	027a027a 	.word	0x027a027a
    21bc:	027a027a 	.word	0x027a027a
    21c0:	027a027a 	.word	0x027a027a
    21c4:	027a027a 	.word	0x027a027a
    21c8:	027a027a 	.word	0x027a027a
    21cc:	027a027a 	.word	0x027a027a
    21d0:	02800280 	.word	0x02800280
    21d4:	02800280 	.word	0x02800280
    21d8:	02800280 	.word	0x02800280
    21dc:	02800280 	.word	0x02800280
    21e0:	00960096 	.word	0x00960096
    21e4:	00960096 	.word	0x00960096
    21e8:	00960096 	.word	0x00960096
    21ec:	00960096 	.word	0x00960096
    21f0:	027a027a 	.word	0x027a027a
    21f4:	027a027a 	.word	0x027a027a
    21f8:	027a027a 	.word	0x027a027a
    21fc:	027a027a 	.word	0x027a027a
    2200:	027d027d 	.word	0x027d027d
    2204:	027d027d 	.word	0x027d027d
    2208:	027d027d 	.word	0x027d027d
    220c:	027d027d 	.word	0x027d027d
    2210:	02800280 	.word	0x02800280
    2214:	02800280 	.word	0x02800280
    2218:	02800280 	.word	0x02800280
    221c:	00960096 	.word	0x00960096
    2220:	00960096 	.word	0x00960096
    2224:	00960096 	.word	0x00960096
    2228:	02800096 	.word	0x02800096
    222c:	02800280 	.word	0x02800280
    2230:	02800280 	.word	0x02800280
    2234:	00960280 	.word	0x00960280
    2238:	00960096 	.word	0x00960096
    223c:	00960096 	.word	0x00960096
    2240:	027a0096 	.word	0x027a0096
    2244:	027a027a 	.word	0x027a027a
    2248:	027a027a 	.word	0x027a027a
    224c:	027d027a 	.word	0x027d027a
    2250:	027d027d 	.word	0x027d027d
    2254:	027d027d 	.word	0x027d027d
    2258:	0280027d 	.word	0x0280027d
    225c:	02800280 	.word	0x02800280
    2260:	02800280 	.word	0x02800280
    2264:	00960096 	.word	0x00960096
    2268:	00960096 	.word	0x00960096
    226c:	027a0096 	.word	0x027a0096
    2270:	027a027a 	.word	0x027a027a
    2274:	027a027a 	.word	0x027a027a
    2278:	027d027d 	.word	0x027d027d
    227c:	027d027d 	.word	0x027d027d
    2280:	027d      	.short	0x027d
		if (buffer[bufferIndex + 1] == 18)
    2282:	2a12      	cmp	r2, #18
    2284:	f000 8286 	beq.w	2794 <parsePreset+0xc94>
	uint16_t presetVersionNumber = 0;
    2288:	46bb      	mov	fp, r7
		if (buffer[bufferIndex + 1] == 19) //this means its an internal model, not the subtractive synth
    228a:	2a13      	cmp	r2, #19
    228c:	f000 82de 	beq.w	284c <parsePreset+0xd4c>
		presetName[i] = buffer[bufferIndex];
    2290:	f819 0007 	ldrb.w	r0, [r9, r7]
    2294:	e454      	b.n	1b40 <parsePreset+0x40>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    2296:	f107 0284 	add.w	r2, r7, #132	; 0x84
    229a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    229e:	4402      	add	r2, r0
    22a0:	440a      	add	r2, r1
    22a2:	b292      	uxth	r2, r2
    22a4:	e4e9      	b.n	1c7a <parsePreset+0x17a>
    22a6:	bf00      	nop
    22a8:	200186c4 	.word	0x200186c4
    22ac:	00006561 	.word	0x00006561
    22b0:	00006581 	.word	0x00006581
    22b4:	000065a1 	.word	0x000065a1
    22b8:	000065c1 	.word	0x000065c1
    22bc:	000065e1 	.word	0x000065e1
    22c0:	00006621 	.word	0x00006621
    22c4:	42fe0000 	.word	0x42fe0000
			params[i].objectNumber = 1;
    22c8:	2001      	movs	r0, #1
    22ca:	763e      	strb	r6, [r7, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    22cc:	ed97 0a02 	vldr	s0, [r7, #8]
    22d0:	2100      	movs	r1, #0
    22d2:	697b      	ldr	r3, [r7, #20]
	for (int i = 0; i < NUM_PARAMS; i++)
    22d4:	f108 0801 	add.w	r8, r8, #1
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    22d8:	4798      	blx	r3
    22da:	ed97 0a03 	vldr	s0, [r7, #12]
    22de:	697b      	ldr	r3, [r7, #20]
    22e0:	2101      	movs	r1, #1
    22e2:	7e38      	ldrb	r0, [r7, #24]
	for (int i = 0; i < NUM_PARAMS; i++)
    22e4:	371c      	adds	r7, #28
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    22e6:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    22e8:	f1b8 0f9c 	cmp.w	r8, #156	; 0x9c
    22ec:	f47f af49 	bne.w	2182 <parsePreset+0x682>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    22f0:	ed5f 6a0c 	vldr	s13, [pc, #-48]	; 22c4 <parsePreset+0x7c4>
    22f4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    22f8:	edda 7a09 	vldr	s15, [sl, #36]	; 0x24
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    22fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2300:	edda 4a02 	vldr	s9, [sl, #8]
    2304:	ee67 7aa6 	vmul.f32	s15, s15, s13
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2308:	49a9      	ldr	r1, [pc, #676]	; (25b0 <parsePreset+0xab0>)
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    230a:	4baa      	ldr	r3, [pc, #680]	; (25b4 <parsePreset+0xab4>)
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    230c:	ed91 5a38 	vldr	s10, [r1, #224]	; 0xe0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2310:	eeb0 6a67 	vmov.f32	s12, s15
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2314:	eeb4 5ac7 	vcmpe.f32	s10, s14
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2318:	ee94 6aa6 	vfnms.f32	s12, s9, s13
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2320:	bfcc      	ite	gt
    2322:	2201      	movgt	r2, #1
    2324:	2200      	movle	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2326:	eec5 6a86 	vdiv.f32	s13, s11, s12
    232a:	edc3 6a00 	vstr	s13, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    232e:	4ba2      	ldr	r3, [pc, #648]	; (25b8 <parsePreset+0xab8>)
    2330:	edc3 7a00 	vstr	s15, [r3]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2334:	4ba1      	ldr	r3, [pc, #644]	; (25bc <parsePreset+0xabc>)
    2336:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    2338:	f1bb 0f00 	cmp.w	fp, #0
    233c:	f000 8317 	beq.w	296e <parsePreset+0xe6e>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    2340:	edd1 7a3f 	vldr	s15, [r1, #252]	; 0xfc
    2344:	eef4 7ac7 	vcmpe.f32	s15, s14
    2348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    234c:	bfcc      	ite	gt
    234e:	2101      	movgt	r1, #1
    2350:	2100      	movle	r1, #0
	bufferIndex += 2;
    2352:	3504      	adds	r5, #4
	numMappings = 0;
    2354:	2200      	movs	r2, #0
		envOn[i] = 0;
    2356:	489a      	ldr	r0, [pc, #616]	; (25c0 <parsePreset+0xac0>)
	bufferIndex += 2;
    2358:	b2ab      	uxth	r3, r5
		envOn[i] = 0;
    235a:	7002      	strb	r2, [r0, #0]
	bufferIndex += 2;
    235c:	461c      	mov	r4, r3
		envOn[i] = 0;
    235e:	7042      	strb	r2, [r0, #1]
		lfoOn[i] = 0;
    2360:	4b98      	ldr	r3, [pc, #608]	; (25c4 <parsePreset+0xac4>)
		envOn[i] = 0;
    2362:	7082      	strb	r2, [r0, #2]
    2364:	70c2      	strb	r2, [r0, #3]
    2366:	4898      	ldr	r0, [pc, #608]	; (25c8 <parsePreset+0xac8>)
		lfoOn[i] = 0;
    2368:	701a      	strb	r2, [r3, #0]
    236a:	705a      	strb	r2, [r3, #1]
    236c:	709a      	strb	r2, [r3, #2]
    236e:	70da      	strb	r2, [r3, #3]
	for (int i = 0; i < 12; i++)
    2370:	4613      	mov	r3, r2
    2372:	7001      	strb	r1, [r0, #0]
	numMappings = 0;
    2374:	4995      	ldr	r1, [pc, #596]	; (25cc <parsePreset+0xacc>)
    2376:	700a      	strb	r2, [r1, #0]
		knobFrozen[i] = 0;
    2378:	4995      	ldr	r1, [pc, #596]	; (25d0 <parsePreset+0xad0>)
    237a:	54ca      	strb	r2, [r1, r3]
	for (int i = 0; i < 12; i++)
    237c:	3301      	adds	r3, #1
    237e:	2b0c      	cmp	r3, #12
    2380:	d1fa      	bne.n	2378 <parsePreset+0x878>
    2382:	4b94      	ldr	r3, [pc, #592]	; (25d4 <parsePreset+0xad4>)
		mappings[i].destNumber = 255;
    2384:	20ff      	movs	r0, #255	; 0xff
		mappings[i].hookActive[0] = 0;
    2386:	2200      	movs	r2, #0
    2388:	f503 6118 	add.w	r1, r3, #2432	; 0x980
		mappings[i].destNumber = 255;
    238c:	7018      	strb	r0, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    238e:	334c      	adds	r3, #76	; 0x4c
		mappings[i].hookActive[0] = 0;
    2390:	f803 2c04 	strb.w	r2, [r3, #-4]
		mappings[i].hookActive[1] = 0;
    2394:	f803 2c03 	strb.w	r2, [r3, #-3]
		mappings[i].hookActive[2] = 0;
    2398:	f803 2c02 	strb.w	r2, [r3, #-2]
		mappings[i].numHooks = 0;
    239c:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    23a0:	4299      	cmp	r1, r3
    23a2:	d1f3      	bne.n	238c <parsePreset+0x88c>
	for (int i = 0; i < mappingCount; i++)
    23a4:	9b07      	ldr	r3, [sp, #28]
    23a6:	2b00      	cmp	r3, #0
    23a8:	f000 8202 	beq.w	27b0 <parsePreset+0xcb0>
    23ac:	2300      	movs	r3, #0
			for (int v = 0; v < numStringsThisBoard; v++)
    23ae:	465e      	mov	r6, fp
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    23b0:	ed9f 8a89 	vldr	s16, [pc, #548]	; 25d8 <parsePreset+0xad8>
			for (int v = 0; v < numStringsThisBoard; v++)
    23b4:	46a3      	mov	fp, r4
	for (int i = 0; i < mappingCount; i++)
    23b6:	9305      	str	r3, [sp, #20]
			for (int v = 0; v < numStringsThisBoard; v++)
    23b8:	f8cd a010 	str.w	sl, [sp, #16]
		uint8_t destNumber = buffer[bufferIndex+1];
    23bc:	eb09 030b 	add.w	r3, r9, fp
    23c0:	7858      	ldrb	r0, [r3, #1]
		if (presetVersionNumber > 0)
    23c2:	2e00      	cmp	r6, #0
    23c4:	f000 818c 	beq.w	26e0 <parsePreset+0xbe0>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    23c8:	795d      	ldrb	r5, [r3, #5]
		uint8_t whichHook = 0;
    23ca:	2300      	movs	r3, #0
    23cc:	4a81      	ldr	r2, [pc, #516]	; (25d4 <parsePreset+0xad4>)
    23ce:	461f      	mov	r7, r3
    23d0:	461c      	mov	r4, r3
    23d2:	e003      	b.n	23dc <parsePreset+0x8dc>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    23d4:	3301      	adds	r3, #1
    23d6:	324c      	adds	r2, #76	; 0x4c
    23d8:	2b20      	cmp	r3, #32
    23da:	d00c      	beq.n	23f6 <parsePreset+0x8f6>
			if (mappings[j].destNumber == destNumber)
    23dc:	7811      	ldrb	r1, [r2, #0]
    23de:	4281      	cmp	r1, r0
    23e0:	d1f8      	bne.n	23d4 <parsePreset+0x8d4>
				foundOne = 1;
    23e2:	2701      	movs	r7, #1
    23e4:	b2dc      	uxtb	r4, r3
				if (presetVersionNumber == 0)
    23e6:	2e00      	cmp	r6, #0
    23e8:	d1f4      	bne.n	23d4 <parsePreset+0x8d4>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    23ea:	3301      	adds	r3, #1
					whichHook = mappings[j].numHooks;
    23ec:	f892 504b 	ldrb.w	r5, [r2, #75]	; 0x4b
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    23f0:	324c      	adds	r2, #76	; 0x4c
    23f2:	2b20      	cmp	r3, #32
    23f4:	d1f2      	bne.n	23dc <parsePreset+0x8dc>
		if (foundOne == 0)
    23f6:	b99f      	cbnz	r7, 2420 <parsePreset+0x920>
			whichMapping = numMappings;
    23f8:	4974      	ldr	r1, [pc, #464]	; (25cc <parsePreset+0xacc>)
			mappings[whichMapping].dest = &params[destNumber];
    23fa:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    23fe:	9c04      	ldr	r4, [sp, #16]
			if (presetVersionNumber == 0)
    2400:	2e00      	cmp	r6, #0
			whichMapping = numMappings;
    2402:	780b      	ldrb	r3, [r1, #0]
			mappings[whichMapping].dest = &params[destNumber];
    2404:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			if (presetVersionNumber == 0)
    2408:	bf08      	it	eq
    240a:	2500      	moveq	r5, #0
			mappings[whichMapping].destNumber = destNumber;
    240c:	461c      	mov	r4, r3
			numMappings++;
    240e:	3301      	adds	r3, #1
    2410:	700b      	strb	r3, [r1, #0]
			mappings[whichMapping].destNumber = destNumber;
    2412:	234c      	movs	r3, #76	; 0x4c
    2414:	496f      	ldr	r1, [pc, #444]	; (25d4 <parsePreset+0xad4>)
    2416:	fb03 f304 	mul.w	r3, r3, r4
    241a:	54c8      	strb	r0, [r1, r3]
    241c:	440b      	add	r3, r1
			mappings[whichMapping].dest = &params[destNumber];
    241e:	605a      	str	r2, [r3, #4]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2420:	234c      	movs	r3, #76	; 0x4c
    2422:	4f6c      	ldr	r7, [pc, #432]	; (25d4 <parsePreset+0xad4>)
    2424:	1c69      	adds	r1, r5, #1
		int source = buffer[bufferIndex];
    2426:	f819 200b 	ldrb.w	r2, [r9, fp]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    242a:	fb03 f304 	mul.w	r3, r3, r4
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    242e:	2a03      	cmp	r2, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2430:	eb03 00c5 	add.w	r0, r3, r5, lsl #3
    2434:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    2438:	443b      	add	r3, r7
    243a:	4438      	add	r0, r7
    243c:	4f67      	ldr	r7, [pc, #412]	; (25dc <parsePreset+0xadc>)
    243e:	442b      	add	r3, r5
    2440:	eb07 07c2 	add.w	r7, r7, r2, lsl #3
    2444:	f107 0704 	add.w	r7, r7, #4
    2448:	60c7      	str	r7, [r0, #12]
    244a:	4864      	ldr	r0, [pc, #400]	; (25dc <parsePreset+0xadc>)
    244c:	eb00 07c2 	add.w	r7, r0, r2, lsl #3
    2450:	4860      	ldr	r0, [pc, #384]	; (25d4 <parsePreset+0xad4>)
    2452:	5047      	str	r7, [r0, r1]
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2454:	bfd4      	ite	le
    2456:	2100      	movle	r1, #0
    2458:	2101      	movgt	r1, #1
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    245a:	9708      	str	r7, [sp, #32]
    245c:	00ef      	lsls	r7, r5, #3
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    245e:	f883 1020 	strb.w	r1, [r3, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2462:	f1a2 0118 	sub.w	r1, r2, #24
    2466:	2903      	cmp	r1, #3
    2468:	f200 812e 	bhi.w	26c8 <parsePreset+0xbc8>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    246c:	4b55      	ldr	r3, [pc, #340]	; (25c4 <parsePreset+0xac4>)
    246e:	1899      	adds	r1, r3, r2
    2470:	f04f 0301 	mov.w	r3, #1
    2474:	f801 3c18 	strb.w	r3, [r1, #-24]
		if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    2478:	2a02      	cmp	r2, #2
    247a:	d803      	bhi.n	2484 <parsePreset+0x984>
			oscOn[source - OSC_SOURCE_OFFSET] = 1;
    247c:	4b58      	ldr	r3, [pc, #352]	; (25e0 <parsePreset+0xae0>)
    247e:	f04f 0101 	mov.w	r1, #1
    2482:	5499      	strb	r1, [r3, r2]
		if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    2484:	2a03      	cmp	r2, #3
    2486:	f000 814c 	beq.w	2722 <parsePreset+0xc22>
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    248a:	1f13      	subs	r3, r2, #4
    248c:	2b0b      	cmp	r3, #11
    248e:	9301      	str	r3, [sp, #4]
    2490:	f240 8153 	bls.w	273a <parsePreset+0xc3a>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2494:	b2da      	uxtb	r2, r3
    2496:	4953      	ldr	r1, [pc, #332]	; (25e4 <parsePreset+0xae4>)
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    2498:	b2db      	uxtb	r3, r3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    249a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    249e:	9306      	str	r3, [sp, #24]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    24a0:	9209      	str	r2, [sp, #36]	; 0x24
		int scalar = buffer[bufferIndex+2];
    24a2:	234c      	movs	r3, #76	; 0x4c
    24a4:	eb09 020b 	add.w	r2, r9, fp
    24a8:	9904      	ldr	r1, [sp, #16]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    24aa:	f04f 0a00 	mov.w	sl, #0
    24ae:	fb03 7704 	mla	r7, r3, r4, r7
    24b2:	4b48      	ldr	r3, [pc, #288]	; (25d4 <parsePreset+0xad4>)
		int scalar = buffer[bufferIndex+2];
    24b4:	f892 8002 	ldrb.w	r8, [r2, #2]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    24b8:	3724      	adds	r7, #36	; 0x24
    24ba:	441f      	add	r7, r3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    24bc:	9b06      	ldr	r3, [sp, #24]
    24be:	3303      	adds	r3, #3
    24c0:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
    24c4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    24c8:	f102 0108 	add.w	r1, r2, #8
    24cc:	4a43      	ldr	r2, [pc, #268]	; (25dc <parsePreset+0xadc>)
    24ce:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
    24d2:	9202      	str	r2, [sp, #8]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    24d4:	f1a8 0218 	sub.w	r2, r8, #24
    24d8:	9203      	str	r2, [sp, #12]
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    24da:	461a      	mov	r2, r3
    24dc:	4623      	mov	r3, r4
    24de:	4614      	mov	r4, r2
			if (scalar == 0xff)
    24e0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    24e4:	f000 80dc 	beq.w	26a0 <parsePreset+0xba0>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    24e8:	9a02      	ldr	r2, [sp, #8]
    24ea:	4452      	add	r2, sl
    24ec:	603a      	str	r2, [r7, #0]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    24ee:	9a03      	ldr	r2, [sp, #12]
    24f0:	2a03      	cmp	r2, #3
    24f2:	f200 80d8 	bhi.w	26a6 <parsePreset+0xba6>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    24f6:	4a33      	ldr	r2, [pc, #204]	; (25c4 <parsePreset+0xac4>)
    24f8:	f04f 0001 	mov.w	r0, #1
    24fc:	4442      	add	r2, r8
    24fe:	f802 0c18 	strb.w	r0, [r2, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2502:	f1b8 0f02 	cmp.w	r8, #2
    2506:	d804      	bhi.n	2512 <parsePreset+0xa12>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2508:	4a35      	ldr	r2, [pc, #212]	; (25e0 <parsePreset+0xae0>)
    250a:	f04f 0001 	mov.w	r0, #1
    250e:	f802 0008 	strb.w	r0, [r2, r8]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2512:	f1b8 0f03 	cmp.w	r8, #3
    2516:	d103      	bne.n	2520 <parsePreset+0xa20>
					noiseOn = 1;
    2518:	4a33      	ldr	r2, [pc, #204]	; (25e8 <parsePreset+0xae8>)
    251a:	f04f 0001 	mov.w	r0, #1
    251e:	7010      	strb	r0, [r2, #0]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2520:	9a01      	ldr	r2, [sp, #4]
    2522:	2a0b      	cmp	r2, #11
    2524:	f240 80de 	bls.w	26e4 <parsePreset+0xbe4>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2528:	f10a 0a04 	add.w	sl, sl, #4
    252c:	3704      	adds	r7, #4
    252e:	f1ba 0f08 	cmp.w	sl, #8
    2532:	d1d5      	bne.n	24e0 <parsePreset+0x9e0>
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2534:	461c      	mov	r4, r3
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2536:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
		mappings[whichMapping].hookActive[whichHook] = 1;
    253a:	4926      	ldr	r1, [pc, #152]	; (25d4 <parsePreset+0xad4>)
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    253c:	eb09 020b 	add.w	r2, r9, fp
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2540:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		mappings[whichMapping].hookActive[whichHook] = 1;
    2544:	204c      	movs	r0, #76	; 0x4c
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2546:	442b      	add	r3, r5
		mappings[whichMapping].hookActive[whichHook] = 1;
    2548:	fb00 1404 	mla	r4, r0, r4, r1
    254c:	f04f 0001 	mov.w	r0, #1
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2550:	eb01 0383 	add.w	r3, r1, r3, lsl #2
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2554:	78d1      	ldrb	r1, [r2, #3]
    2556:	7912      	ldrb	r2, [r2, #4]
		mappings[whichMapping].hookActive[whichHook] = 1;
    2558:	4425      	add	r5, r4
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    255a:	eb02 2201 	add.w	r2, r2, r1, lsl #8
		mappings[whichMapping].hookActive[whichHook] = 1;
    255e:	f885 0048 	strb.w	r0, [r5, #72]	; 0x48
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2562:	b212      	sxth	r2, r2
    2564:	ee07 2a90 	vmov	s15, r2
    2568:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    256c:	ee67 7a88 	vmul.f32	s15, s15, s16
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2570:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
    2574:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    2578:	3301      	adds	r3, #1
    257a:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		if (presetVersionNumber > 0)
    257e:	2e00      	cmp	r6, #0
    2580:	f000 809d 	beq.w	26be <parsePreset+0xbbe>
			bufferIndex += 6;
    2584:	f10b 0b06 	add.w	fp, fp, #6
    2588:	fa1f fb8b 	uxth.w	fp, fp
	for (int i = 0; i < mappingCount; i++)
    258c:	9b05      	ldr	r3, [sp, #20]
    258e:	9a07      	ldr	r2, [sp, #28]
    2590:	3301      	adds	r3, #1
    2592:	4293      	cmp	r3, r2
    2594:	9305      	str	r3, [sp, #20]
    2596:	f47f af11 	bne.w	23bc <parsePreset+0x8bc>
	for (int i = 0; i < numMappings; i++)
    259a:	4b0c      	ldr	r3, [pc, #48]	; (25cc <parsePreset+0xacc>)
    259c:	781b      	ldrb	r3, [r3, #0]
    259e:	2b00      	cmp	r3, #0
    25a0:	f000 8106 	beq.w	27b0 <parsePreset+0xcb0>
    25a4:	4c11      	ldr	r4, [pc, #68]	; (25ec <parsePreset+0xaec>)
    25a6:	2600      	movs	r6, #0
			for (int v = 0; v < numStringsThisBoard; v++)
    25a8:	f8df 8044 	ldr.w	r8, [pc, #68]	; 25f0 <parsePreset+0xaf0>
    25ac:	e029      	b.n	2602 <parsePreset+0xb02>
    25ae:	bf00      	nop
    25b0:	2001a0e4 	.word	0x2001a0e4
    25b4:	200190c8 	.word	0x200190c8
    25b8:	200190cc 	.word	0x200190cc
    25bc:	200166c1 	.word	0x200166c1
    25c0:	2001d148 	.word	0x2001d148
    25c4:	2001d2cc 	.word	0x2001d2cc
    25c8:	2001a1f4 	.word	0x2001a1f4
    25cc:	200190d4 	.word	0x200190d4
    25d0:	200053cc 	.word	0x200053cc
    25d4:	20018748 	.word	0x20018748
    25d8:	37fffffc 	.word	0x37fffffc
    25dc:	2001d788 	.word	0x2001d788
    25e0:	2001d568 	.word	0x2001d568
    25e4:	20005430 	.word	0x20005430
    25e8:	2001d514 	.word	0x2001d514
    25ec:	2001878f 	.word	0x2001878f
    25f0:	20000694 	.word	0x20000694
	for (int i = 0; i < numMappings; i++)
    25f4:	4b81      	ldr	r3, [pc, #516]	; (27fc <parsePreset+0xcfc>)
    25f6:	3601      	adds	r6, #1
    25f8:	344c      	adds	r4, #76	; 0x4c
    25fa:	781b      	ldrb	r3, [r3, #0]
    25fc:	42b3      	cmp	r3, r6
    25fe:	f340 80d7 	ble.w	27b0 <parsePreset+0xcb0>
		if (mappings[i].destNumber != 255)
    2602:	f814 3c47 	ldrb.w	r3, [r4, #-71]
    2606:	2bff      	cmp	r3, #255	; 0xff
    2608:	d0f4      	beq.n	25f4 <parsePreset+0xaf4>
			for (int v = 0; v < numStringsThisBoard; v++)
    260a:	f898 3000 	ldrb.w	r3, [r8]
    260e:	2b00      	cmp	r3, #0
    2610:	d0f0      	beq.n	25f4 <parsePreset+0xaf4>
    2612:	f1a4 0947 	sub.w	r9, r4, #71	; 0x47
    2616:	2500      	movs	r5, #0
    2618:	f1a4 070b 	sub.w	r7, r4, #11
				float unsmoothedValue = 0.0f;
    261c:	ed9f 7a78 	vldr	s14, [pc, #480]	; 2800 <parsePreset+0xd00>
    2620:	46bc      	mov	ip, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    2622:	464a      	mov	r2, r9
    2624:	46a6      	mov	lr, r4
				for (int j = 0; j < 3; j++)
    2626:	2300      	movs	r3, #0
					if (mappings[i].hookActive[j])
    2628:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
				for (int j = 0; j < 3; j++)
    262c:	3301      	adds	r3, #1
					if (mappings[i].hookActive[j])
    262e:	b159      	cbz	r1, 2648 <parsePreset+0xb48>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2630:	6890      	ldr	r0, [r2, #8]
    2632:	ed9c 6a00 	vldr	s12, [ip]
    2636:	edd0 7a00 	vldr	s15, [r0]
    263a:	6a51      	ldr	r1, [r2, #36]	; 0x24
    263c:	ee67 7a86 	vmul.f32	s15, s15, s12
						unsmoothedValue += sum;
    2640:	edd1 6a00 	vldr	s13, [r1]
    2644:	eea7 7aa6 	vfma.f32	s14, s15, s13
				for (int j = 0; j < 3; j++)
    2648:	2b03      	cmp	r3, #3
    264a:	f102 0208 	add.w	r2, r2, #8
    264e:	f10c 0c04 	add.w	ip, ip, #4
    2652:	d1e9      	bne.n	2628 <parsePreset+0xb28>
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2654:	f854 3c43 	ldr.w	r3, [r4, #-67]
			for (int v = 0; v < numStringsThisBoard; v++)
    2658:	f109 0904 	add.w	r9, r9, #4
    265c:	eb03 0a85 	add.w	sl, r3, r5, lsl #2
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2660:	691b      	ldr	r3, [r3, #16]
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2662:	ed9a 0a00 	vldr	s0, [sl]
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2666:	ee37 0a00 	vadd.f32	s0, s14, s0
    266a:	4798      	blx	r3
    266c:	ed8a 0a02 	vstr	s0, [sl, #8]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2670:	f854 3c43 	ldr.w	r3, [r4, #-67]
    2674:	4629      	mov	r1, r5
    2676:	eb03 0285 	add.w	r2, r3, r5, lsl #2
    267a:	7e18      	ldrb	r0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    267c:	3501      	adds	r5, #1
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    267e:	ed92 0a02 	vldr	s0, [r2, #8]
    2682:	695a      	ldr	r2, [r3, #20]
    2684:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    2686:	f898 3000 	ldrb.w	r3, [r8]
    268a:	42ab      	cmp	r3, r5
    268c:	dcc6      	bgt.n	261c <parsePreset+0xb1c>
    268e:	e7b1      	b.n	25f4 <parsePreset+0xaf4>
			params[i].objectNumber = 2;
    2690:	2002      	movs	r0, #2
    2692:	7638      	strb	r0, [r7, #24]
    2694:	e61a      	b.n	22cc <parsePreset+0x7cc>
			params[i].objectNumber = 3;
    2696:	2003      	movs	r0, #3
    2698:	7638      	strb	r0, [r7, #24]
    269a:	e617      	b.n	22cc <parsePreset+0x7cc>
		if ((i >= Osc1) && (i < Osc2))
    269c:	2000      	movs	r0, #0
    269e:	e615      	b.n	22cc <parsePreset+0x7cc>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    26a0:	4a58      	ldr	r2, [pc, #352]	; (2804 <parsePreset+0xd04>)
    26a2:	603a      	str	r2, [r7, #0]
    26a4:	e740      	b.n	2528 <parsePreset+0xa28>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    26a6:	f1a8 0214 	sub.w	r2, r8, #20
    26aa:	2a03      	cmp	r2, #3
    26ac:	f63f af29 	bhi.w	2502 <parsePreset+0xa02>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    26b0:	4a55      	ldr	r2, [pc, #340]	; (2808 <parsePreset+0xd08>)
    26b2:	f04f 0001 	mov.w	r0, #1
    26b6:	4442      	add	r2, r8
    26b8:	f802 0c14 	strb.w	r0, [r2, #-20]
    26bc:	e721      	b.n	2502 <parsePreset+0xa02>
			bufferIndex += 5;
    26be:	f10b 0b05 	add.w	fp, fp, #5
    26c2:	fa1f fb8b 	uxth.w	fp, fp
    26c6:	e761      	b.n	258c <parsePreset+0xa8c>
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    26c8:	f1a2 0114 	sub.w	r1, r2, #20
    26cc:	2903      	cmp	r1, #3
    26ce:	f63f aed3 	bhi.w	2478 <parsePreset+0x978>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    26d2:	4b4d      	ldr	r3, [pc, #308]	; (2808 <parsePreset+0xd08>)
    26d4:	1899      	adds	r1, r3, r2
    26d6:	f04f 0301 	mov.w	r3, #1
    26da:	f801 3c14 	strb.w	r3, [r1, #-20]
    26de:	e6cb      	b.n	2478 <parsePreset+0x978>
		uint8_t whichHook = 0;
    26e0:	4635      	mov	r5, r6
    26e2:	e672      	b.n	23ca <parsePreset+0x8ca>
					for (int v = 0; v < numStringsThisBoard; v++)
    26e4:	4a49      	ldr	r2, [pc, #292]	; (280c <parsePreset+0xd0c>)
    26e6:	7812      	ldrb	r2, [r2, #0]
    26e8:	b13a      	cbz	r2, 26fa <parsePreset+0xbfa>
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    26ea:	0092      	lsls	r2, r2, #2
    26ec:	9808      	ldr	r0, [sp, #32]
    26ee:	930b      	str	r3, [sp, #44]	; 0x2c
    26f0:	910a      	str	r1, [sp, #40]	; 0x28
    26f2:	f006 fd21 	bl	9138 <__memcpy_veneer>
    26f6:	e9dd 130a 	ldrd	r1, r3, [sp, #40]	; 0x28
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    26fa:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
    26fe:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
    2702:	9b04      	ldr	r3, [sp, #16]
    2704:	9809      	ldr	r0, [sp, #36]	; 0x24
    2706:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    270a:	ed92 0a02 	vldr	s0, [r2, #8]
    270e:	f006 fef7 	bl	9500 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    2712:	4b3f      	ldr	r3, [pc, #252]	; (2810 <parsePreset+0xd10>)
    2714:	f04f 0101 	mov.w	r1, #1
    2718:	9a06      	ldr	r2, [sp, #24]
    271a:	5499      	strb	r1, [r3, r2]
    271c:	e9dd 130a 	ldrd	r1, r3, [sp, #40]	; 0x28
    2720:	e702      	b.n	2528 <parsePreset+0xa28>
			noiseOn = 1;
    2722:	4b3c      	ldr	r3, [pc, #240]	; (2814 <parsePreset+0xd14>)
    2724:	f04f 0201 	mov.w	r2, #1
    2728:	701a      	strb	r2, [r3, #0]
    272a:	4b3b      	ldr	r3, [pc, #236]	; (2818 <parsePreset+0xd18>)
    272c:	9309      	str	r3, [sp, #36]	; 0x24
    272e:	23ff      	movs	r3, #255	; 0xff
    2730:	9306      	str	r3, [sp, #24]
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2736:	9301      	str	r3, [sp, #4]
    2738:	e6b3      	b.n	24a2 <parsePreset+0x9a2>
			for (int v = 0; v < numStringsThisBoard; v++)
    273a:	4b34      	ldr	r3, [pc, #208]	; (280c <parsePreset+0xd0c>)
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    273c:	f89d 8004 	ldrb.w	r8, [sp, #4]
			for (int v = 0; v < numStringsThisBoard; v++)
    2740:	781a      	ldrb	r2, [r3, #0]
    2742:	2a00      	cmp	r2, #0
    2744:	f000 810c 	beq.w	2960 <parsePreset+0xe60>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2748:	f108 0a03 	add.w	sl, r8, #3
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    274c:	9b04      	ldr	r3, [sp, #16]
    274e:	0092      	lsls	r2, r2, #2
    2750:	9808      	ldr	r0, [sp, #32]
    2752:	ebca 01ca 	rsb	r1, sl, sl, lsl #3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2756:	f8cd 8018 	str.w	r8, [sp, #24]
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    275a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    275e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
    2762:	3108      	adds	r1, #8
    2764:	9302      	str	r3, [sp, #8]
    2766:	f006 fce7 	bl	9138 <__memcpy_veneer>
    276a:	9b02      	ldr	r3, [sp, #8]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    276c:	eba3 020a 	sub.w	r2, r3, sl
    2770:	9b04      	ldr	r3, [sp, #16]
    2772:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    2776:	ed92 0a02 	vldr	s0, [r2, #8]
    277a:	4a28      	ldr	r2, [pc, #160]	; (281c <parsePreset+0xd1c>)
    277c:	eb02 0388 	add.w	r3, r2, r8, lsl #2
    2780:	4618      	mov	r0, r3
    2782:	9309      	str	r3, [sp, #36]	; 0x24
    2784:	f006 febc 	bl	9500 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[whichMacro] = 1;
    2788:	4b21      	ldr	r3, [pc, #132]	; (2810 <parsePreset+0xd10>)
    278a:	f04f 0201 	mov.w	r2, #1
    278e:	f803 2008 	strb.w	r2, [r3, r8]
    2792:	e686      	b.n	24a2 <parsePreset+0x9a2>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    2794:	f899 2002 	ldrb.w	r2, [r9, #2]
    2798:	f899 3003 	ldrb.w	r3, [r9, #3]
    279c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
		if (buffer[bufferIndex + 1] == 19) //this means its an internal model, not the subtractive synth
    27a0:	f899 2005 	ldrb.w	r2, [r9, #5]
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    27a4:	fa1f fb83 	uxth.w	fp, r3
			whichModel = 0; //this is a synth preset
    27a8:	4b1d      	ldr	r3, [pc, #116]	; (2820 <parsePreset+0xd20>)
    27aa:	701f      	strb	r7, [r3, #0]
			bufferIndex = 4;
    27ac:	2704      	movs	r7, #4
    27ae:	e56c      	b.n	228a <parsePreset+0x78a>
	audioFrameFunction = audioFrameSynth;
    27b0:	4b1c      	ldr	r3, [pc, #112]	; (2824 <parsePreset+0xd24>)
	presetWaitingToParse = 0;
    27b2:	2400      	movs	r4, #0
	audioFrameFunction = audioFrameSynth;
    27b4:	4a1c      	ldr	r2, [pc, #112]	; (2828 <parsePreset+0xd28>)
	overSampled = 1;
    27b6:	2501      	movs	r5, #1
	audioFrameFunction = audioFrameSynth;
    27b8:	601a      	str	r2, [r3, #0]
	audioSwitchToSynth();
    27ba:	f006 fd35 	bl	9228 <__audioSwitchToSynth_veneer>
	presetWaitingToParse = 0;
    27be:	4b1b      	ldr	r3, [pc, #108]	; (282c <parsePreset+0xd2c>)
	changeOversampling(overSampled);
    27c0:	4628      	mov	r0, r5
	currentActivePreset = presetNumber;
    27c2:	f89d 2000 	ldrb.w	r2, [sp]
	presetWaitingToParse = 0;
    27c6:	601c      	str	r4, [r3, #0]
	currentActivePreset = presetNumber;
    27c8:	4b19      	ldr	r3, [pc, #100]	; (2830 <parsePreset+0xd30>)
    27ca:	701a      	strb	r2, [r3, #0]
	audioMasterLevel = 1.0f;
    27cc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    27d0:	4a18      	ldr	r2, [pc, #96]	; (2834 <parsePreset+0xd34>)
    27d2:	6013      	str	r3, [r2, #0]
	oscToTick = NUM_OSC;
    27d4:	2203      	movs	r2, #3
    27d6:	4b18      	ldr	r3, [pc, #96]	; (2838 <parsePreset+0xd38>)
    27d8:	701a      	strb	r2, [r3, #0]
	overSampled = 1;
    27da:	4b18      	ldr	r3, [pc, #96]	; (283c <parsePreset+0xd3c>)
    27dc:	601d      	str	r5, [r3, #0]
	changeOversampling(overSampled);
    27de:	f006 fd73 	bl	92c8 <__changeOversampling_veneer>
    27e2:	b662      	cpsie	i
	diskBusy = 0;
    27e4:	4a16      	ldr	r2, [pc, #88]	; (2840 <parsePreset+0xd40>)
	receivingI2C = 0;
    27e6:	4b17      	ldr	r3, [pc, #92]	; (2844 <parsePreset+0xd44>)
	presetReady = 1;
    27e8:	4917      	ldr	r1, [pc, #92]	; (2848 <parsePreset+0xd48>)
	diskBusy = 0;
    27ea:	7014      	strb	r4, [r2, #0]
	presetReady = 1;
    27ec:	600d      	str	r5, [r1, #0]
	receivingI2C = 0;
    27ee:	701c      	strb	r4, [r3, #0]
}
    27f0:	b00d      	add	sp, #52	; 0x34
    27f2:	ecbd 8b02 	vpop	{d8}
    27f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    27fa:	bf00      	nop
    27fc:	200190d4 	.word	0x200190d4
    2800:	00000000 	.word	0x00000000
    2804:	200008b0 	.word	0x200008b0
    2808:	2001d148 	.word	0x2001d148
    280c:	20000694 	.word	0x20000694
    2810:	200053cc 	.word	0x200053cc
    2814:	2001d514 	.word	0x2001d514
    2818:	2000582c 	.word	0x2000582c
    281c:	20005430 	.word	0x20005430
    2820:	2001c815 	.word	0x2001c815
    2824:	20001380 	.word	0x20001380
    2828:	00008781 	.word	0x00008781
    282c:	2001a214 	.word	0x2001a214
    2830:	200008ac 	.word	0x200008ac
    2834:	200008a8 	.word	0x200008a8
    2838:	20000ae8 	.word	0x20000ae8
    283c:	20000aec 	.word	0x20000aec
    2840:	20014540 	.word	0x20014540
    2844:	2001a66c 	.word	0x2001a66c
    2848:	20005544 	.word	0x20005544
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    284c:	9a00      	ldr	r2, [sp, #0]
    284e:	f06f 0002 	mvn.w	r0, #2
    2852:	4b5f      	ldr	r3, [pc, #380]	; (29d0 <parsePreset+0xed0>)
    2854:	4c5f      	ldr	r4, [pc, #380]	; (29d4 <parsePreset+0xed4>)
    2856:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    285a:	eba0 0009 	sub.w	r0, r0, r9
    285e:	f103 050e 	add.w	r5, r3, #14
    2862:	eb04 0442 	add.w	r4, r4, r2, lsl #1
    2866:	4e5c      	ldr	r6, [pc, #368]	; (29d8 <parsePreset+0xed8>)
    2868:	18c2      	adds	r2, r0, r3
				presetName[i] = buffer[bufferIndex];
    286a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
			for (int i = 0; i < 14; i++)
    286e:	42ab      	cmp	r3, r5
				presetName[i] = buffer[bufferIndex];
    2870:	54b1      	strb	r1, [r6, r2]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    2872:	54a1      	strb	r1, [r4, r2]
			for (int i = 0; i < 14; i++)
    2874:	d1f8      	bne.n	2868 <parsePreset+0xd68>
			whichModel = buffer[bufferIndex]; // not a synth preset, maybe string or additive or something
    2876:	4b59      	ldr	r3, [pc, #356]	; (29dc <parsePreset+0xedc>)
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2878:	26c8      	movs	r6, #200	; 0xc8
			whichModel = buffer[bufferIndex]; // not a synth preset, maybe string or additive or something
    287a:	f899 0014 	ldrb.w	r0, [r9, #20]
			for (int j = 0; j < 8; j++)
    287e:	2500      	movs	r5, #0
    2880:	f8df c194 	ldr.w	ip, [pc, #404]	; 2a18 <parsePreset+0xf18>
			whichModel = buffer[bufferIndex]; // not a synth preset, maybe string or additive or something
    2884:	7018      	strb	r0, [r3, #0]
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2886:	9b00      	ldr	r3, [sp, #0]
    2888:	fb03 f606 	mul.w	r6, r3, r6
			bufferIndex++;
    288c:	2315      	movs	r3, #21
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    288e:	eb05 0485 	add.w	r4, r5, r5, lsl #2
				for (int k = 0; k < 9; k++)
    2892:	2200      	movs	r2, #0
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    2894:	eb06 0444 	add.w	r4, r6, r4, lsl #1
    2898:	4464      	add	r4, ip
    289a:	1899      	adds	r1, r3, r2
    289c:	b289      	uxth	r1, r1
    289e:	f819 1001 	ldrb.w	r1, [r9, r1]
    28a2:	54a1      	strb	r1, [r4, r2]
				for (int k = 0; k < 9; k++)
    28a4:	3201      	adds	r2, #1
    28a6:	2a09      	cmp	r2, #9
    28a8:	d1f7      	bne.n	289a <parsePreset+0xd9a>
					bufferIndex++;
    28aa:	3309      	adds	r3, #9
			for (int j = 0; j < 8; j++)
    28ac:	3501      	adds	r5, #1
					bufferIndex++;
    28ae:	b29b      	uxth	r3, r3
			for (int j = 0; j < 8; j++)
    28b0:	2b5d      	cmp	r3, #93	; 0x5d
    28b2:	d1ec      	bne.n	288e <parsePreset+0xd8e>
					macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    28b4:	26c8      	movs	r6, #200	; 0xc8
    28b6:	9a00      	ldr	r2, [sp, #0]
    28b8:	2508      	movs	r5, #8
    28ba:	fb02 f606 	mul.w	r6, r2, r6
    28be:	eb05 0485 	add.w	r4, r5, r5, lsl #2
				for (int k = 0; k < 10; k++)
    28c2:	2200      	movs	r2, #0
					macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    28c4:	eb06 0444 	add.w	r4, r6, r4, lsl #1
    28c8:	4464      	add	r4, ip
    28ca:	1899      	adds	r1, r3, r2
    28cc:	b289      	uxth	r1, r1
    28ce:	f819 1001 	ldrb.w	r1, [r9, r1]
    28d2:	54a1      	strb	r1, [r4, r2]
				for (int k = 0; k < 10; k++)
    28d4:	3201      	adds	r2, #1
    28d6:	2a0a      	cmp	r2, #10
    28d8:	d1f7      	bne.n	28ca <parsePreset+0xdca>
					bufferIndex++;
    28da:	330a      	adds	r3, #10
			for (int j = 0; j < 4; j++)
    28dc:	3501      	adds	r5, #1
					bufferIndex++;
    28de:	b29b      	uxth	r3, r3
			for (int j = 0; j < 4; j++)
    28e0:	2b85      	cmp	r3, #133	; 0x85
    28e2:	d1ec      	bne.n	28be <parsePreset+0xdbe>
					macroNamesArray[presetNumber][j+12][k] = buffer[bufferIndex];
    28e4:	26c8      	movs	r6, #200	; 0xc8
    28e6:	9a00      	ldr	r2, [sp, #0]
    28e8:	250c      	movs	r5, #12
    28ea:	fb02 f606 	mul.w	r6, r2, r6
    28ee:	eb05 0485 	add.w	r4, r5, r5, lsl #2
				for (int k = 0; k < 9; k++)
    28f2:	2200      	movs	r2, #0
					macroNamesArray[presetNumber][j+12][k] = buffer[bufferIndex];
    28f4:	eb06 0444 	add.w	r4, r6, r4, lsl #1
    28f8:	4464      	add	r4, ip
    28fa:	1899      	adds	r1, r3, r2
    28fc:	b289      	uxth	r1, r1
    28fe:	f819 1001 	ldrb.w	r1, [r9, r1]
    2902:	54a1      	strb	r1, [r4, r2]
				for (int k = 0; k < 9; k++)
    2904:	3201      	adds	r2, #1
    2906:	2a09      	cmp	r2, #9
    2908:	d1f7      	bne.n	28fa <parsePreset+0xdfa>
					bufferIndex++;
    290a:	3309      	adds	r3, #9
			for (int j = 0; j < 8; j++)
    290c:	3501      	adds	r5, #1
					bufferIndex++;
    290e:	b29b      	uxth	r3, r3
			for (int j = 0; j < 8; j++)
    2910:	2bcd      	cmp	r3, #205	; 0xcd
    2912:	d1ec      	bne.n	28ee <parsePreset+0xdee>
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2914:	ed9f 7a32 	vldr	s14, [pc, #200]	; 29e0 <parsePreset+0xee0>
    2918:	4932      	ldr	r1, [pc, #200]	; (29e4 <parsePreset+0xee4>)
    291a:	eb09 0203 	add.w	r2, r9, r3
    291e:	f819 4003 	ldrb.w	r4, [r9, r3]
				bufferIndex = bufferIndex + 2;
    2922:	3302      	adds	r3, #2
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2924:	7852      	ldrb	r2, [r2, #1]
				bufferIndex = bufferIndex + 2;
    2926:	b29b      	uxth	r3, r3
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2928:	eb02 2204 	add.w	r2, r2, r4, lsl #8
			for (int i = 0; i < 20; i++)
    292c:	2bf5      	cmp	r3, #245	; 0xf5
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    292e:	ee07 2a90 	vmov	s15, r2
    2932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2936:	ee67 7a87 	vmul.f32	s15, s15, s14
    293a:	ece1 7a01 	vstmia	r1!, {s15}
			for (int i = 0; i < 20; i++)
    293e:	d1ec      	bne.n	291a <parsePreset+0xe1a>
			presetWaitingToParse = 0;
    2940:	4b29      	ldr	r3, [pc, #164]	; (29e8 <parsePreset+0xee8>)
    2942:	2100      	movs	r1, #0
			currentActivePreset = presetNumber;
    2944:	f89d 2000 	ldrb.w	r2, [sp]
			if (whichModel == 1)
    2948:	2801      	cmp	r0, #1
			presetWaitingToParse = 0;
    294a:	6019      	str	r1, [r3, #0]
			currentActivePreset = presetNumber;
    294c:	4b27      	ldr	r3, [pc, #156]	; (29ec <parsePreset+0xeec>)
    294e:	701a      	strb	r2, [r3, #0]
			if (whichModel == 1)
    2950:	d00f      	beq.n	2972 <parsePreset+0xe72>
			else if (whichModel == 2)
    2952:	3802      	subs	r0, #2
    2954:	2803      	cmp	r0, #3
    2956:	d80e      	bhi.n	2976 <parsePreset+0xe76>
    2958:	e8df f000 	tbb	[pc, r0]
    295c:	1c262c22 	.word	0x1c262c22
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2960:	f108 0a03 	add.w	sl, r8, #3
    2964:	f8cd 8018 	str.w	r8, [sp, #24]
    2968:	ea4f 03ca 	mov.w	r3, sl, lsl #3
    296c:	e6fe      	b.n	276c <parsePreset+0xc6c>
		pedalControlsMaster = 1;
    296e:	2101      	movs	r1, #1
    2970:	e4ef      	b.n	2352 <parsePreset+0x852>
				switchStrings = 1;
    2972:	4b1f      	ldr	r3, [pc, #124]	; (29f0 <parsePreset+0xef0>)
    2974:	6018      	str	r0, [r3, #0]
			audioMasterLevel = 1.0f;
    2976:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    297a:	4a1e      	ldr	r2, [pc, #120]	; (29f4 <parsePreset+0xef4>)
    297c:	6013      	str	r3, [r2, #0]
    297e:	b662      	cpsie	i
			diskBusy = 0;
    2980:	2300      	movs	r3, #0
			presetReady = 1;
    2982:	2001      	movs	r0, #1
			diskBusy = 0;
    2984:	491c      	ldr	r1, [pc, #112]	; (29f8 <parsePreset+0xef8>)
			receivingI2C = 0;
    2986:	4a1d      	ldr	r2, [pc, #116]	; (29fc <parsePreset+0xefc>)
			presetReady = 1;
    2988:	4c1d      	ldr	r4, [pc, #116]	; (2a00 <parsePreset+0xf00>)
			diskBusy = 0;
    298a:	700b      	strb	r3, [r1, #0]
			presetReady = 1;
    298c:	6020      	str	r0, [r4, #0]
			receivingI2C = 0;
    298e:	7013      	strb	r3, [r2, #0]
			return;
    2990:	f7ff b948 	b.w	1c24 <parsePreset+0x124>
				audioFrameFunction = audioFrameString3;
    2994:	4b1b      	ldr	r3, [pc, #108]	; (2a04 <parsePreset+0xf04>)
    2996:	4a1c      	ldr	r2, [pc, #112]	; (2a08 <parsePreset+0xf08>)
    2998:	601a      	str	r2, [r3, #0]
				audioSwitchToString3();
    299a:	f002 fbb1 	bl	5100 <audioSwitchToString3>
    299e:	e7ea      	b.n	2976 <parsePreset+0xe76>
				switchStrings = 2;
    29a0:	4b13      	ldr	r3, [pc, #76]	; (29f0 <parsePreset+0xef0>)
    29a2:	2202      	movs	r2, #2
    29a4:	601a      	str	r2, [r3, #0]
    29a6:	e7e6      	b.n	2976 <parsePreset+0xe76>
				audioFrameFunction = audioFrameVocal;
    29a8:	4b16      	ldr	r3, [pc, #88]	; (2a04 <parsePreset+0xf04>)
    29aa:	4a18      	ldr	r2, [pc, #96]	; (2a0c <parsePreset+0xf0c>)
    29ac:	601a      	str	r2, [r3, #0]
				audioSwitchToVocal();
    29ae:	f006 f8a7 	bl	8b00 <audioSwitchToVocal>
    29b2:	e7e0      	b.n	2976 <parsePreset+0xe76>
				audioFrameFunction = audioFrameAdditive;
    29b4:	4b13      	ldr	r3, [pc, #76]	; (2a04 <parsePreset+0xf04>)
    29b6:	4a16      	ldr	r2, [pc, #88]	; (2a10 <parsePreset+0xf10>)
    29b8:	601a      	str	r2, [r3, #0]
				audioSwitchToAdditive();
    29ba:	f7fd fee1 	bl	780 <audioSwitchToAdditive>
    29be:	e7da      	b.n	2976 <parsePreset+0xe76>
    29c0:	4c14      	ldr	r4, [pc, #80]	; (2a14 <parsePreset+0xf14>)
    29c2:	f7ff b9ad 	b.w	1d20 <parsePreset+0x220>
    29c6:	f8df a054 	ldr.w	sl, [pc, #84]	; 2a1c <parsePreset+0xf1c>
    29ca:	f7ff b995 	b.w	1cf8 <parsePreset+0x1f8>
    29ce:	bf00      	nop
    29d0:	30042383 	.word	0x30042383
    29d4:	30042000 	.word	0x30042000
    29d8:	2001a200 	.word	0x2001a200
    29dc:	2001c815 	.word	0x2001c815
    29e0:	377ffff6 	.word	0x377ffff6
    29e4:	200186f8 	.word	0x200186f8
    29e8:	2001a214 	.word	0x2001a214
    29ec:	200008ac 	.word	0x200008ac
    29f0:	20014434 	.word	0x20014434
    29f4:	200008a8 	.word	0x200008a8
    29f8:	20014540 	.word	0x20014540
    29fc:	2001a66c 	.word	0x2001a66c
    2a00:	20005544 	.word	0x20005544
    2a04:	20001380 	.word	0x20001380
    2a08:	000053a1 	.word	0x000053a1
    2a0c:	00008ce1 	.word	0x00008ce1
    2a10:	00000ba1 	.word	0x00000ba1
    2a14:	2001a1f4 	.word	0x2001a1f4
    2a18:	30043380 	.word	0x30043380
    2a1c:	200190e4 	.word	0x200190e4

00002a20 <handleSPI>:
	if (foundBrainFirmware)
    2a20:	4a47      	ldr	r2, [pc, #284]	; (2b40 <handleSPI+0x120>)
	interruptChecker = 1;
    2a22:	2301      	movs	r3, #1
{
    2a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 1;
    2a28:	4d46      	ldr	r5, [pc, #280]	; (2b44 <handleSPI+0x124>)
{
    2a2a:	4604      	mov	r4, r0
    2a2c:	ed2d 8b02 	vpush	{d8}
	if (foundBrainFirmware)
    2a30:	7816      	ldrb	r6, [r2, #0]
{
    2a32:	b085      	sub	sp, #20
	interruptChecker = 1;
    2a34:	702b      	strb	r3, [r5, #0]
	if (foundBrainFirmware)
    2a36:	b31e      	cbz	r6, 2a80 <handleSPI+0x60>
		if (brainFirmwareEndSignal)
    2a38:	f8df 8120 	ldr.w	r8, [pc, #288]	; 2b5c <handleSPI+0x13c>
    2a3c:	f8d8 0000 	ldr.w	r0, [r8]
    2a40:	2800      	cmp	r0, #0
    2a42:	d03c      	beq.n	2abe <handleSPI+0x9e>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    2a44:	4b40      	ldr	r3, [pc, #256]	; (2b48 <handleSPI+0x128>)
    2a46:	21f9      	movs	r1, #249	; 0xf9
    2a48:	5519      	strb	r1, [r3, r4]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    2a4a:	4423      	add	r3, r4
    2a4c:	493f      	ldr	r1, [pc, #252]	; (2b4c <handleSPI+0x12c>)
			SPI_LEVERS_TX[offset+31] = 254;
    2a4e:	24fe      	movs	r4, #254	; 0xfe
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    2a50:	6809      	ldr	r1, [r1, #0]
			SPI_LEVERS_TX[offset+31] = 254;
    2a52:	77dc      	strb	r4, [r3, #31]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    2a54:	0e08      	lsrs	r0, r1, #24
    2a56:	7058      	strb	r0, [r3, #1]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    2a58:	0c08      	lsrs	r0, r1, #16
    2a5a:	7098      	strb	r0, [r3, #2]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    2a5c:	0a08      	lsrs	r0, r1, #8
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    2a5e:	3900      	subs	r1, #0
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    2a60:	70d8      	strb	r0, [r3, #3]
			brainFirmwareEndSignal = 0;
    2a62:	f04f 0000 	mov.w	r0, #0
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    2a66:	bf18      	it	ne
    2a68:	2101      	movne	r1, #1
			foundBrainFirmware = 0;
    2a6a:	7010      	strb	r0, [r2, #0]
			brainFirmwareSendInProgress = 0;
    2a6c:	4a38      	ldr	r2, [pc, #224]	; (2b50 <handleSPI+0x130>)
			brainFirmwareEndSignal = 0;
    2a6e:	f8c8 0000 	str.w	r0, [r8]
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    2a72:	7119      	strb	r1, [r3, #4]
			brainFirmwareSendInProgress = 0;
    2a74:	6010      	str	r0, [r2, #0]
}
    2a76:	b005      	add	sp, #20
    2a78:	ecbd 8b02 	vpop	{d8}
    2a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (SPI_LEVERS_RX[offset] == ReceivingPitches)
    2a80:	4f31      	ldr	r7, [pc, #196]	; (2b48 <handleSPI+0x128>)
    2a82:	183b      	adds	r3, r7, r0
    2a84:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    2a88:	2a01      	cmp	r2, #1
    2a8a:	d06b      	beq.n	2b64 <handleSPI+0x144>
		else if (SPI_LEVERS_RX[offset] == ReceivingPreset)
    2a8c:	2a0e      	cmp	r2, #14
    2a8e:	f200 818b 	bhi.w	2da8 <handleSPI+0x388>
    2a92:	2a01      	cmp	r2, #1
    2a94:	f240 80a4 	bls.w	2be0 <handleSPI+0x1c0>
    2a98:	3a02      	subs	r2, #2
    2a9a:	2a0c      	cmp	r2, #12
    2a9c:	f200 80a0 	bhi.w	2be0 <handleSPI+0x1c0>
    2aa0:	e8df f012 	tbh	[pc, r2, lsl #1]
    2aa4:	022801f6 	.word	0x022801f6
    2aa8:	009e009e 	.word	0x009e009e
    2aac:	02f00265 	.word	0x02f00265
    2ab0:	009e009e 	.word	0x009e009e
    2ab4:	02d803ae 	.word	0x02d803ae
    2ab8:	03c402e4 	.word	0x03c402e4
    2abc:	0401      	.short	0x0401
		else if (brainFirmwareSendInProgress)
    2abe:	4a24      	ldr	r2, [pc, #144]	; (2b50 <handleSPI+0x130>)
    2ac0:	6815      	ldr	r5, [r2, #0]
    2ac2:	2d00      	cmp	r5, #0
    2ac4:	f000 8188 	beq.w	2dd8 <handleSPI+0x3b8>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    2ac8:	4f1f      	ldr	r7, [pc, #124]	; (2b48 <handleSPI+0x128>)
    2aca:	23fb      	movs	r3, #251	; 0xfb
    2acc:	f8df a090 	ldr.w	sl, [pc, #144]	; 2b60 <handleSPI+0x140>
    2ad0:	4684      	mov	ip, r0
    2ad2:	553b      	strb	r3, [r7, r4]
			for (int i = 0; i < 30; i++)
    2ad4:	4683      	mov	fp, r0
    2ad6:	4b1f      	ldr	r3, [pc, #124]	; (2b54 <handleSPI+0x134>)
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    2ad8:	eb07 0904 	add.w	r9, r7, r4
    2adc:	f8ba 6000 	ldrh.w	r6, [sl]
    2ae0:	681b      	ldr	r3, [r3, #0]
    2ae2:	4d1d      	ldr	r5, [pc, #116]	; (2b58 <handleSPI+0x138>)
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    2ae4:	461a      	mov	r2, r3
    2ae6:	9301      	str	r3, [sp, #4]
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    2ae8:	18ab      	adds	r3, r5, r2
				if (positionInRowLine < 294)
    2aea:	f5b6 7f93 	cmp.w	r6, #294	; 0x126
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    2aee:	5ca8      	ldrb	r0, [r5, r2]
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    2af0:	7859      	ldrb	r1, [r3, #1]
				if (positionInRowLine < 294)
    2af2:	f0c0 8194 	bcc.w	2e1e <handleSPI+0x3fe>
    2af6:	2300      	movs	r3, #0
    2af8:	e000      	b.n	2afc <handleSPI+0xdc>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    2afa:	5cc8      	ldrb	r0, [r1, r3]
    2afc:	283a      	cmp	r0, #58	; 0x3a
    2afe:	d103      	bne.n	2b08 <handleSPI+0xe8>
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    2b00:	3201      	adds	r2, #1
    2b02:	f04f 0c01 	mov.w	ip, #1
    2b06:	441a      	add	r2, r3
					for (uint8_t j = 0; j<10; j++)
    2b08:	3301      	adds	r3, #1
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    2b0a:	18a9      	adds	r1, r5, r2
					for (uint8_t j = 0; j<10; j++)
    2b0c:	2b0a      	cmp	r3, #10
    2b0e:	d1f4      	bne.n	2afa <handleSPI+0xda>
					positionInRowLine = 0;
    2b10:	2600      	movs	r6, #0
			for (int i = 0; i < 30; i++)
    2b12:	f1bb 0f1e 	cmp.w	fp, #30
    2b16:	d1e7      	bne.n	2ae8 <handleSPI+0xc8>
    2b18:	f8aa 6000 	strh.w	r6, [sl]
    2b1c:	f1bc 0f00 	cmp.w	ip, #0
    2b20:	f000 8550 	beq.w	35c4 <_Min_Heap_Size+0x5c4>
    2b24:	4b0b      	ldr	r3, [pc, #44]	; (2b54 <handleSPI+0x134>)
    2b26:	601a      	str	r2, [r3, #0]
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    2b28:	4b08      	ldr	r3, [pc, #32]	; (2b4c <handleSPI+0x12c>)
			SPI_LEVERS_TX[offset+31] = 254;
    2b2a:	443c      	add	r4, r7
    2b2c:	21fe      	movs	r1, #254	; 0xfe
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    2b2e:	681b      	ldr	r3, [r3, #0]
			SPI_LEVERS_TX[offset+31] = 254;
    2b30:	77e1      	strb	r1, [r4, #31]
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    2b32:	4293      	cmp	r3, r2
    2b34:	d89f      	bhi.n	2a76 <handleSPI+0x56>
				brainFirmwareEndSignal = 1;
    2b36:	2301      	movs	r3, #1
    2b38:	f8c8 3000 	str.w	r3, [r8]
    2b3c:	e79b      	b.n	2a76 <handleSPI+0x56>
    2b3e:	bf00      	nop
    2b40:	200166c0 	.word	0x200166c0
    2b44:	200166c3 	.word	0x200166c3
    2b48:	30000800 	.word	0x30000800
    2b4c:	200144f4 	.word	0x200144f4
    2b50:	200144f0 	.word	0x200144f0
    2b54:	200144e8 	.word	0x200144e8
    2b58:	61e00000 	.word	0x61e00000
    2b5c:	200144ec 	.word	0x200144ec
    2b60:	2001a1fc 	.word	0x2001a1fc
			 for (int i = 0; i < numStringsThisBoard; i++)
    2b64:	4bb4      	ldr	r3, [pc, #720]	; (2e38 <handleSPI+0x418>)
    2b66:	781d      	ldrb	r5, [r3, #0]
    2b68:	b3a5      	cbz	r5, 2bd4 <handleSPI+0x1b4>
			 uint8_t currentByte = offset+1;
    2b6a:	1c41      	adds	r1, r0, #1
			 for (int i = 0; i < numStringsThisBoard; i++)
    2b6c:	4633      	mov	r3, r6
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2b6e:	eddf 6ab3 	vldr	s13, [pc, #716]	; 2e3c <handleSPI+0x41c>
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    2b72:	ed9f 6ab3 	vldr	s12, [pc, #716]	; 2e40 <handleSPI+0x420>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    2b76:	b2c9      	uxtb	r1, r1
    2b78:	48b2      	ldr	r0, [pc, #712]	; (2e44 <handleSPI+0x424>)
					stringMIDIPitches[i] = myPitch;
    2b7a:	4eb3      	ldr	r6, [pc, #716]	; (2e48 <handleSPI+0x428>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    2b7c:	6802      	ldr	r2, [r0, #0]
    2b7e:	441a      	add	r2, r3
    2b80:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    2b84:	440a      	add	r2, r1
    2b86:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
    2b8a:	0212      	lsls	r2, r2, #8
    2b8c:	ee07 2a90 	vmov	s15, r2
    2b90:	6802      	ldr	r2, [r0, #0]
    2b92:	441a      	add	r2, r3
    2b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2b98:	eb07 0242 	add.w	r2, r7, r2, lsl #1
    2b9c:	440a      	add	r2, r1
    2b9e:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    2ba2:	ee07 2a10 	vmov	s14, r2
    2ba6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2baa:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2bae:	ee67 7aa6 	vmul.f32	s15, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    2bb2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2bba:	dd08      	ble.n	2bce <handleSPI+0x1ae>
    2bbc:	eef4 7ac6 	vcmpe.f32	s15, s12
					stringMIDIPitches[i] = myPitch;
    2bc0:	eb06 0283 	add.w	r2, r6, r3, lsl #2
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    2bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2bc8:	d501      	bpl.n	2bce <handleSPI+0x1ae>
					stringMIDIPitches[i] = myPitch;
    2bca:	edc2 7a00 	vstr	s15, [r2]
			 for (int i = 0; i < numStringsThisBoard; i++)
    2bce:	3301      	adds	r3, #1
    2bd0:	42ab      	cmp	r3, r5
    2bd2:	dbd3      	blt.n	2b7c <handleSPI+0x15c>
			 whichBar = 0;
    2bd4:	4b9d      	ldr	r3, [pc, #628]	; (2e4c <handleSPI+0x42c>)
    2bd6:	2200      	movs	r2, #0
			 updateStateFromSPIMessage(offset);
    2bd8:	4620      	mov	r0, r4
			 whichBar = 0;
    2bda:	701a      	strb	r2, [r3, #0]
			 updateStateFromSPIMessage(offset);
    2bdc:	f7fe fb20 	bl	1220 <updateStateFromSPIMessage>
			if (boardNumber == 0)
    2be0:	4b9b      	ldr	r3, [pc, #620]	; (2e50 <handleSPI+0x430>)
    2be2:	781b      	ldrb	r3, [r3, #0]
    2be4:	2b00      	cmp	r3, #0
    2be6:	f47f af46 	bne.w	2a76 <handleSPI+0x56>
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    2bea:	f104 0e01 	add.w	lr, r4, #1
    2bee:	4999      	ldr	r1, [pc, #612]	; (2e54 <handleSPI+0x434>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    2bf0:	23fd      	movs	r3, #253	; 0xfd
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    2bf2:	4a99      	ldr	r2, [pc, #612]	; (2e58 <handleSPI+0x438>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    2bf4:	553b      	strb	r3, [r7, r4]
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    2bf6:	443c      	add	r4, r7
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    2bf8:	4b98      	ldr	r3, [pc, #608]	; (2e5c <handleSPI+0x43c>)
    2bfa:	7818      	ldrb	r0, [r3, #0]
    2bfc:	f807 000e 	strb.w	r0, [r7, lr]
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    2c00:	7818      	ldrb	r0, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    2c02:	4f97      	ldr	r7, [pc, #604]	; (2e60 <handleSPI+0x440>)
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    2c04:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c08:	0040      	lsls	r0, r0, #1
    2c0a:	5c10      	ldrb	r0, [r2, r0]
    2c0c:	70a0      	strb	r0, [r4, #2]
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    2c0e:	7818      	ldrb	r0, [r3, #0]
    2c10:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c14:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2c18:	7840      	ldrb	r0, [r0, #1]
    2c1a:	70e0      	strb	r0, [r4, #3]
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    2c1c:	7818      	ldrb	r0, [r3, #0]
    2c1e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c22:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2c26:	7880      	ldrb	r0, [r0, #2]
    2c28:	7120      	strb	r0, [r4, #4]
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    2c2a:	7818      	ldrb	r0, [r3, #0]
    2c2c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c30:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2c34:	78c0      	ldrb	r0, [r0, #3]
    2c36:	7160      	strb	r0, [r4, #5]
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    2c38:	7818      	ldrb	r0, [r3, #0]
    2c3a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c3e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2c42:	7900      	ldrb	r0, [r0, #4]
    2c44:	71a0      	strb	r0, [r4, #6]
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    2c46:	7818      	ldrb	r0, [r3, #0]
    2c48:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c4c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2c50:	7940      	ldrb	r0, [r0, #5]
    2c52:	71e0      	strb	r0, [r4, #7]
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    2c54:	7818      	ldrb	r0, [r3, #0]
    2c56:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c5a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2c5e:	7980      	ldrb	r0, [r0, #6]
    2c60:	7220      	strb	r0, [r4, #8]
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    2c62:	7818      	ldrb	r0, [r3, #0]
    2c64:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c68:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2c6c:	79c0      	ldrb	r0, [r0, #7]
    2c6e:	7260      	strb	r0, [r4, #9]
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    2c70:	7818      	ldrb	r0, [r3, #0]
    2c72:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c76:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2c7a:	7a00      	ldrb	r0, [r0, #8]
    2c7c:	72a0      	strb	r0, [r4, #10]
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    2c7e:	7818      	ldrb	r0, [r3, #0]
    2c80:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2c84:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2c88:	7a40      	ldrb	r0, [r0, #9]
    2c8a:	72e0      	strb	r0, [r4, #11]
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    2c8c:	7818      	ldrb	r0, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    2c8e:	783d      	ldrb	r5, [r7, #0]
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    2c90:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    2c94:	7425      	strb	r5, [r4, #16]
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    2c96:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2c9a:	7a80      	ldrb	r0, [r0, #10]
    2c9c:	7320      	strb	r0, [r4, #12]
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    2c9e:	7818      	ldrb	r0, [r3, #0]
    2ca0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2ca4:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2ca8:	7ac0      	ldrb	r0, [r0, #11]
    2caa:	7360      	strb	r0, [r4, #13]
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    2cac:	7818      	ldrb	r0, [r3, #0]
    2cae:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2cb2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2cb6:	7b00      	ldrb	r0, [r0, #12]
    2cb8:	73a0      	strb	r0, [r4, #14]
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    2cba:	7818      	ldrb	r0, [r3, #0]
    2cbc:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2cc0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    2cc4:	20c8      	movs	r0, #200	; 0xc8
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    2cc6:	7b52      	ldrb	r2, [r2, #13]
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    2cc8:	781e      	ldrb	r6, [r3, #0]
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    2cca:	73e2      	strb	r2, [r4, #15]
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    2ccc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    2cd0:	fb00 f606 	mul.w	r6, r0, r6
				whichMacroToSendName = (whichMacroToSendName + 1);
    2cd4:	3501      	adds	r5, #1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    2cd6:	eb06 0642 	add.w	r6, r6, r2, lsl #1
				whichMacroToSendName = (whichMacroToSendName + 1);
    2cda:	b2ed      	uxtb	r5, r5
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    2cdc:	5d8e      	ldrb	r6, [r1, r6]
    2cde:	7466      	strb	r6, [r4, #17]
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    2ce0:	781e      	ldrb	r6, [r3, #0]
    2ce2:	fb00 f606 	mul.w	r6, r0, r6
    2ce6:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    2cea:	440e      	add	r6, r1
    2cec:	7876      	ldrb	r6, [r6, #1]
    2cee:	74a6      	strb	r6, [r4, #18]
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    2cf0:	781e      	ldrb	r6, [r3, #0]
    2cf2:	fb00 f606 	mul.w	r6, r0, r6
    2cf6:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    2cfa:	440e      	add	r6, r1
    2cfc:	78b6      	ldrb	r6, [r6, #2]
    2cfe:	74e6      	strb	r6, [r4, #19]
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    2d00:	781e      	ldrb	r6, [r3, #0]
    2d02:	fb00 f606 	mul.w	r6, r0, r6
    2d06:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    2d0a:	440e      	add	r6, r1
    2d0c:	78f6      	ldrb	r6, [r6, #3]
    2d0e:	7526      	strb	r6, [r4, #20]
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    2d10:	781e      	ldrb	r6, [r3, #0]
    2d12:	fb00 f606 	mul.w	r6, r0, r6
    2d16:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    2d1a:	440e      	add	r6, r1
    2d1c:	7936      	ldrb	r6, [r6, #4]
    2d1e:	7566      	strb	r6, [r4, #21]
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    2d20:	781e      	ldrb	r6, [r3, #0]
    2d22:	fb00 f606 	mul.w	r6, r0, r6
    2d26:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    2d2a:	440e      	add	r6, r1
    2d2c:	7976      	ldrb	r6, [r6, #5]
    2d2e:	75a6      	strb	r6, [r4, #22]
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    2d30:	781e      	ldrb	r6, [r3, #0]
    2d32:	fb00 f606 	mul.w	r6, r0, r6
    2d36:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    2d3a:	440e      	add	r6, r1
    2d3c:	79b6      	ldrb	r6, [r6, #6]
    2d3e:	75e6      	strb	r6, [r4, #23]
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    2d40:	781e      	ldrb	r6, [r3, #0]
    2d42:	fb00 f606 	mul.w	r6, r0, r6
    2d46:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    2d4a:	440e      	add	r6, r1
    2d4c:	79f6      	ldrb	r6, [r6, #7]
    2d4e:	7626      	strb	r6, [r4, #24]
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    2d50:	781e      	ldrb	r6, [r3, #0]
    2d52:	fb00 f606 	mul.w	r6, r0, r6
    2d56:	eb06 0642 	add.w	r6, r6, r2, lsl #1
    2d5a:	440e      	add	r6, r1
    2d5c:	7a36      	ldrb	r6, [r6, #8]
    2d5e:	7666      	strb	r6, [r4, #25]
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    2d60:	781e      	ldrb	r6, [r3, #0]
    2d62:	fb06 f000 	mul.w	r0, r6, r0
    2d66:	eb00 0242 	add.w	r2, r0, r2, lsl #1
    2d6a:	4411      	add	r1, r2
    2d6c:	7a4a      	ldrb	r2, [r1, #9]
    2d6e:	76a2      	strb	r2, [r4, #26]
				SPI_LEVERS_TX[offset+27] = 13;
    2d70:	220d      	movs	r2, #13
    2d72:	76e2      	strb	r2, [r4, #27]
				SPI_LEVERS_TX[offset+28] = 13;
    2d74:	7722      	strb	r2, [r4, #28]
				SPI_LEVERS_TX[offset+29] = 13;
    2d76:	7762      	strb	r2, [r4, #29]
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    2d78:	4a3a      	ldr	r2, [pc, #232]	; (2e64 <handleSPI+0x444>)
    2d7a:	8812      	ldrh	r2, [r2, #0]
    2d7c:	b292      	uxth	r2, r2
    2d7e:	3a00      	subs	r2, #0
    2d80:	bf18      	it	ne
    2d82:	2201      	movne	r2, #1
				if (whichMacroToSendName >= 20)
    2d84:	2d13      	cmp	r5, #19
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    2d86:	77a2      	strb	r2, [r4, #30]
				SPI_LEVERS_TX[offset+31] = 254;
    2d88:	f04f 02fe 	mov.w	r2, #254	; 0xfe
    2d8c:	77e2      	strb	r2, [r4, #31]
				if (whichMacroToSendName >= 20)
    2d8e:	d940      	bls.n	2e12 <handleSPI+0x3f2>
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    2d90:	781a      	ldrb	r2, [r3, #0]
					whichMacroToSendName = 0;
    2d92:	2100      	movs	r1, #0
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    2d94:	3201      	adds	r2, #1
					whichMacroToSendName = 0;
    2d96:	7039      	strb	r1, [r7, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    2d98:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    2d9c:	701a      	strb	r2, [r3, #0]
}
    2d9e:	b005      	add	sp, #20
    2da0:	ecbd 8b02 	vpop	{d8}
    2da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2da8:	2afd      	cmp	r2, #253	; 0xfd
    2daa:	f47f af19 	bne.w	2be0 <handleSPI+0x1c0>
			if(writingState == ReceivingPreset)
    2dae:	4b2e      	ldr	r3, [pc, #184]	; (2e68 <handleSPI+0x448>)
    2db0:	781a      	ldrb	r2, [r3, #0]
    2db2:	2a02      	cmp	r2, #2
    2db4:	f47f af14 	bne.w	2be0 <handleSPI+0x1c0>
				 presetNumberToLoad = presetNumberToSave;
    2db8:	482c      	ldr	r0, [pc, #176]	; (2e6c <handleSPI+0x44c>)
				 writingState = 0;
    2dba:	701e      	strb	r6, [r3, #0]
				 presetNumberToLoad = presetNumberToSave;
    2dbc:	7803      	ldrb	r3, [r0, #0]
				 presetWaitingToParse = bufferPos;
    2dbe:	4a2c      	ldr	r2, [pc, #176]	; (2e70 <handleSPI+0x450>)
				 presetNumberToLoad = presetNumberToSave;
    2dc0:	492c      	ldr	r1, [pc, #176]	; (2e74 <handleSPI+0x454>)
    2dc2:	b2db      	uxtb	r3, r3
    2dc4:	700b      	strb	r3, [r1, #0]
				 presetWaitingToParse = bufferPos;
    2dc6:	8813      	ldrh	r3, [r2, #0]
    2dc8:	492b      	ldr	r1, [pc, #172]	; (2e78 <handleSPI+0x458>)
    2dca:	b29b      	uxth	r3, r3
    2dcc:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    2dce:	8813      	ldrh	r3, [r2, #0]
    2dd0:	4a2a      	ldr	r2, [pc, #168]	; (2e7c <handleSPI+0x45c>)
    2dd2:	b29b      	uxth	r3, r3
    2dd4:	6013      	str	r3, [r2, #0]
    2dd6:	e703      	b.n	2be0 <handleSPI+0x1c0>
			brainFirmwareSendInProgress = 1;
    2dd8:	6013      	str	r3, [r2, #0]
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    2dda:	20fc      	movs	r0, #252	; 0xfc
    2ddc:	4b28      	ldr	r3, [pc, #160]	; (2e80 <handleSPI+0x460>)
    2dde:	4a29      	ldr	r2, [pc, #164]	; (2e84 <handleSPI+0x464>)
    2de0:	1c5e      	adds	r6, r3, #1
    2de2:	5510      	strb	r0, [r2, r4]
			for (uint8_t i = 0; i<100; i++)
    2de4:	f103 0464 	add.w	r4, r3, #100	; 0x64
    2de8:	461a      	mov	r2, r3
				if (brainFirmwareBuffer[i] ==  0x3a)
    2dea:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    2dee:	283a      	cmp	r0, #58	; 0x3a
    2df0:	d102      	bne.n	2df8 <handleSPI+0x3d8>
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    2df2:	3202      	adds	r2, #2
				if (brainFirmwareBuffer[i] ==  0x3a)
    2df4:	2501      	movs	r5, #1
    2df6:	1b91      	subs	r1, r2, r6
			for (uint8_t i = 0; i<100; i++)
    2df8:	429c      	cmp	r4, r3
    2dfa:	d1f5      	bne.n	2de8 <handleSPI+0x3c8>
    2dfc:	b10d      	cbz	r5, 2e02 <handleSPI+0x3e2>
    2dfe:	4b22      	ldr	r3, [pc, #136]	; (2e88 <handleSPI+0x468>)
    2e00:	6019      	str	r1, [r3, #0]
			positionInRowLine = 0;
    2e02:	4b22      	ldr	r3, [pc, #136]	; (2e8c <handleSPI+0x46c>)
    2e04:	2200      	movs	r2, #0
    2e06:	801a      	strh	r2, [r3, #0]
}
    2e08:	b005      	add	sp, #20
    2e0a:	ecbd 8b02 	vpop	{d8}
    2e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				whichMacroToSendName = (whichMacroToSendName + 1);
    2e12:	703d      	strb	r5, [r7, #0]
}
    2e14:	b005      	add	sp, #20
    2e16:	ecbd 8b02 	vpop	{d8}
    2e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				uint8_t valToSend = fromAscii(val1, val2);
    2e1e:	f006 fafb 	bl	9418 <__fromAscii_veneer>
				positionInRowLine++;
    2e22:	3601      	adds	r6, #1
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    2e24:	eb09 030b 	add.w	r3, r9, fp
					brainFirmwareBufferIndex += 2;
    2e28:	3202      	adds	r2, #2
				positionInRowLine++;
    2e2a:	b2b6      	uxth	r6, r6
			for (int i = 0; i < 30; i++)
    2e2c:	f10b 0b01 	add.w	fp, fp, #1
    2e30:	f04f 0c01 	mov.w	ip, #1
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    2e34:	7058      	strb	r0, [r3, #1]
					brainFirmwareBufferIndex += 2;
    2e36:	e66c      	b.n	2b12 <handleSPI+0xf2>
    2e38:	20000694 	.word	0x20000694
    2e3c:	3b000080 	.word	0x3b000080
    2e40:	430c0000 	.word	0x430c0000
    2e44:	200053bc 	.word	0x200053bc
    2e48:	20014414 	.word	0x20014414
    2e4c:	20014450 	.word	0x20014450
    2e50:	200144e5 	.word	0x200144e5
    2e54:	30043380 	.word	0x30043380
    2e58:	30042000 	.word	0x30042000
    2e5c:	2001c816 	.word	0x2001c816
    2e60:	2001c814 	.word	0x2001c814
    2e64:	2000596a 	.word	0x2000596a
    2e68:	2001c817 	.word	0x2001c817
    2e6c:	2001a20f 	.word	0x2001a20f
    2e70:	200144fc 	.word	0x200144fc
    2e74:	2001a20e 	.word	0x2001a20e
    2e78:	2001a214 	.word	0x2001a214
    2e7c:	2001a218 	.word	0x2001a218
    2e80:	61dfffff 	.word	0x61dfffff
    2e84:	30000800 	.word	0x30000800
    2e88:	200144e8 	.word	0x200144e8
    2e8c:	2001a1fc 	.word	0x2001a1fc
			 if (writingState != ReceivingPreset)
    2e90:	4ac0      	ldr	r2, [pc, #768]	; (3194 <_Min_Heap_Size+0x194>)
    2e92:	7813      	ldrb	r3, [r2, #0]
    2e94:	2b02      	cmp	r3, #2
    2e96:	f000 839a 	beq.w	35ce <_Min_Heap_Size+0x5ce>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    2e9a:	2102      	movs	r1, #2
    2e9c:	4bbe      	ldr	r3, [pc, #760]	; (3198 <_Min_Heap_Size+0x198>)
    2e9e:	7011      	strb	r1, [r2, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    2ea0:	f503 6280 	add.w	r2, r3, #1024	; 0x400
						audioOutBuffer[i] = 0;
    2ea4:	2100      	movs	r1, #0
						audioOutBuffer[i + 1] = 0;
    2ea6:	e9c3 1100 	strd	r1, r1, [r3]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    2eaa:	3308      	adds	r3, #8
    2eac:	429a      	cmp	r2, r3
    2eae:	d1fa      	bne.n	2ea6 <handleSPI+0x486>
				 diskBusy = 1;
    2eb0:	4bba      	ldr	r3, [pc, #744]	; (319c <_Min_Heap_Size+0x19c>)
    2eb2:	2201      	movs	r2, #1
    2eb4:	701a      	strb	r2, [r3, #0]
				 audioMasterLevel = 0.0f;
    2eb6:	2200      	movs	r2, #0
    2eb8:	4bb9      	ldr	r3, [pc, #740]	; (31a0 <_Min_Heap_Size+0x1a0>)
    2eba:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    2ebc:	4ab9      	ldr	r2, [pc, #740]	; (31a4 <_Min_Heap_Size+0x1a4>)
    2ebe:	8011      	strh	r1, [r2, #0]
			 presetNumberToSave = SPI_LEVERS_RX[offset + 1];
    2ec0:	193b      	adds	r3, r7, r4
    2ec2:	49b9      	ldr	r1, [pc, #740]	; (31a8 <_Min_Heap_Size+0x1a8>)
    2ec4:	48b9      	ldr	r0, [pc, #740]	; (31ac <_Min_Heap_Size+0x1ac>)
    2ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    2eca:	700b      	strb	r3, [r1, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    2ecc:	1ca3      	adds	r3, r4, #2
    2ece:	49b8      	ldr	r1, [pc, #736]	; (31b0 <_Min_Heap_Size+0x1b0>)
    2ed0:	b2db      	uxtb	r3, r3
    2ed2:	f101 061b 	add.w	r6, r1, #27
    2ed6:	441e      	add	r6, r3
    2ed8:	3b01      	subs	r3, #1
    2eda:	4419      	add	r1, r3
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    2edc:	8813      	ldrh	r3, [r2, #0]
    2ede:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    2ee2:	b29b      	uxth	r3, r3
			 for (int i = 0; i < 28; i++)
    2ee4:	428e      	cmp	r6, r1
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    2ee6:	54c5      	strb	r5, [r0, r3]
    2ee8:	f103 0301 	add.w	r3, r3, #1
    2eec:	b29b      	uxth	r3, r3
    2eee:	8013      	strh	r3, [r2, #0]
			 for (int i = 0; i < 28; i++)
    2ef0:	d1f4      	bne.n	2edc <handleSPI+0x4bc>
    2ef2:	e675      	b.n	2be0 <handleSPI+0x1c0>
			uint8_t currentByte = offset+1;
    2ef4:	f100 0a01 	add.w	sl, r0, #1
    2ef8:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 31b0 <_Min_Heap_Size+0x1b0>
    2efc:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 31f0 <_Min_Heap_Size+0x1f0>
			for (int i = 0; i < 8; i++)
    2f00:	2500      	movs	r5, #0
    2f02:	fa5f f38a 	uxtb.w	r3, sl
    2f06:	4eab      	ldr	r6, [pc, #684]	; (31b4 <_Min_Heap_Size+0x1b4>)
						knobFrozen[i] = 0;
    2f08:	9702      	str	r7, [sp, #8]
    2f0a:	464f      	mov	r7, r9
    2f0c:	eb08 0b03 	add.w	fp, r8, r3
    2f10:	46b1      	mov	r9, r6
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    2f12:	ed9f 8aa9 	vldr	s16, [pc, #676]	; 31b8 <_Min_Heap_Size+0x1b8>
						knobFrozen[i] = 0;
    2f16:	465e      	mov	r6, fp
    2f18:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 31f4 <_Min_Heap_Size+0x1f4>
    2f1c:	4683      	mov	fp, r0
    2f1e:	9301      	str	r3, [sp, #4]
    2f20:	e014      	b.n	2f4c <handleSPI+0x52c>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    2f22:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
    2f26:	3303      	adds	r3, #3
    2f28:	42a3      	cmp	r3, r4
    2f2a:	db04      	blt.n	2f36 <handleSPI+0x516>
    2f2c:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
    2f30:	3b03      	subs	r3, #3
    2f32:	42a3      	cmp	r3, r4
    2f34:	dd04      	ble.n	2f40 <handleSPI+0x520>
						knobFrozen[i] = 0;
    2f36:	f04f 0300 	mov.w	r3, #0
    2f3a:	557b      	strb	r3, [r7, r5]
						prevKnobByte[i] = newByte;
    2f3c:	f849 4025 	str.w	r4, [r9, r5, lsl #2]
			for (int i = 0; i < 8; i++)
    2f40:	3501      	adds	r5, #1
    2f42:	f10a 0a04 	add.w	sl, sl, #4
    2f46:	2d08      	cmp	r5, #8
    2f48:	f000 826e 	beq.w	3428 <_Min_Heap_Size+0x428>
				if (knobFrozen[i])
    2f4c:	5d7b      	ldrb	r3, [r7, r5]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    2f4e:	f816 4b01 	ldrb.w	r4, [r6], #1
				if (knobFrozen[i])
    2f52:	2b00      	cmp	r3, #0
    2f54:	d1e5      	bne.n	2f22 <handleSPI+0x502>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    2f56:	ee07 4a90 	vmov	s15, r4
    2f5a:	4650      	mov	r0, sl
    2f5c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    2f60:	ee20 0a08 	vmul.f32	s0, s0, s16
    2f64:	f006 fb04 	bl	9570 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    2f68:	f849 4025 	str.w	r4, [r9, r5, lsl #2]
    2f6c:	e7e8      	b.n	2f40 <handleSPI+0x520>
			if (presetReady)
    2f6e:	4b93      	ldr	r3, [pc, #588]	; (31bc <_Min_Heap_Size+0x1bc>)
    2f70:	681b      	ldr	r3, [r3, #0]
    2f72:	2b00      	cmp	r3, #0
    2f74:	f43f ae34 	beq.w	2be0 <handleSPI+0x1c0>
				uint8_t currentByte = offset+1;
    2f78:	1c43      	adds	r3, r0, #1
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    2f7a:	ed9f 7a91 	vldr	s14, [pc, #580]	; 31c0 <_Min_Heap_Size+0x1c0>
    2f7e:	4e91      	ldr	r6, [pc, #580]	; (31c4 <_Min_Heap_Size+0x1c4>)
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    2f80:	fa57 f383 	uxtab	r3, r7, r3
    2f84:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    2f88:	f893 5041 	ldrb.w	r5, [r3, #65]	; 0x41
				currentByte = currentByte + 2;
    2f8c:	1cc3      	adds	r3, r0, #3
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    2f8e:	fa57 f383 	uxtab	r3, r7, r3
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    2f92:	eb05 2502 	add.w	r5, r5, r2, lsl #8
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    2f96:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    2f9a:	b2ad      	uxth	r5, r5
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    2f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    2fa0:	f1a5 083f 	sub.w	r8, r5, #63	; 0x3f
    2fa4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    2fa8:	fa1f f288 	uxth.w	r2, r8
    2fac:	ee07 3a90 	vmov	s15, r3
    2fb0:	00eb      	lsls	r3, r5, #3
    2fb2:	2a18      	cmp	r2, #24
    2fb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2fb8:	9301      	str	r3, [sp, #4]
    2fba:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    2fbe:	ee67 7a87 	vmul.f32	s15, s15, s14
    2fc2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    2fc6:	edc3 7a00 	vstr	s15, [r3]
    2fca:	edc3 7a01 	vstr	s15, [r3, #4]
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    2fce:	d805      	bhi.n	2fdc <handleSPI+0x5bc>
    2fd0:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    2fd4:	40d3      	lsrs	r3, r2
    2fd6:	07d9      	lsls	r1, r3, #31
    2fd8:	f100 8335 	bmi.w	3646 <_Min_Heap_Size+0x646>
    2fdc:	00eb      	lsls	r3, r5, #3
			for (int i = 8; i < 12; i++)
    2fde:	f04f 0b00 	mov.w	fp, #0
    2fe2:	46a1      	mov	r9, r4
    2fe4:	eba3 0805 	sub.w	r8, r3, r5
    2fe8:	465c      	mov	r4, fp
    2fea:	eb06 0888 	add.w	r8, r6, r8, lsl #2
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    2fee:	46c2      	mov	sl, r8
    2ff0:	ecb8 0a01 	vldmia	r8!, {s0}
    2ff4:	f8da 3010 	ldr.w	r3, [sl, #16]
    2ff8:	4798      	blx	r3
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    2ffa:	4621      	mov	r1, r4
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    2ffc:	ed88 0a01 	vstr	s0, [r8, #4]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    3000:	f8da 3014 	ldr.w	r3, [sl, #20]
    3004:	f89a 0018 	ldrb.w	r0, [sl, #24]
    3008:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    300a:	2c00      	cmp	r4, #0
    300c:	f000 82dd 	beq.w	35ca <_Min_Heap_Size+0x5ca>
    3010:	f1a5 0323 	sub.w	r3, r5, #35	; 0x23
    3014:	464c      	mov	r4, r9
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    3016:	b299      	uxth	r1, r3
    3018:	291a      	cmp	r1, #26
    301a:	d804      	bhi.n	3026 <_Min_Heap_Size+0x26>
    301c:	4a6a      	ldr	r2, [pc, #424]	; (31c8 <_Min_Heap_Size+0x1c8>)
    301e:	40ca      	lsrs	r2, r1
    3020:	07d2      	lsls	r2, r2, #31
    3022:	f100 84df 	bmi.w	39e4 <_Min_Heap_Size+0x9e4>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    3026:	f1a5 0318 	sub.w	r3, r5, #24
    302a:	b299      	uxth	r1, r3
    302c:	291a      	cmp	r1, #26
    302e:	f240 8341 	bls.w	36b4 <_Min_Heap_Size+0x6b4>
				if ((whichParam == Noise))
    3032:	2d12      	cmp	r5, #18
    3034:	f040 846c 	bne.w	3910 <_Min_Heap_Size+0x910>
					if (params[whichParam].realVal[0]  > 0.5f)
    3038:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    303c:	ed96 7a80 	vldr	s14, [r6, #512]	; 0x200
    3040:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3048:	f77f adca 	ble.w	2be0 <handleSPI+0x1c0>
    304c:	4b5f      	ldr	r3, [pc, #380]	; (31cc <_Min_Heap_Size+0x1cc>)
    304e:	2201      	movs	r2, #1
    3050:	701a      	strb	r2, [r3, #0]
    3052:	e5c5      	b.n	2be0 <handleSPI+0x1c0>
			if (boardNumber == 0)
    3054:	4b5e      	ldr	r3, [pc, #376]	; (31d0 <_Min_Heap_Size+0x1d0>)
    3056:	781b      	ldrb	r3, [r3, #0]
    3058:	2b00      	cmp	r3, #0
    305a:	f47f ad0c 	bne.w	2a76 <handleSPI+0x56>
				brainFirmwareUpdateRequested = 1;
    305e:	2201      	movs	r2, #1
    3060:	4b5c      	ldr	r3, [pc, #368]	; (31d4 <_Min_Heap_Size+0x1d4>)
    3062:	495d      	ldr	r1, [pc, #372]	; (31d8 <_Min_Heap_Size+0x1d8>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    3064:	eb00 0e02 	add.w	lr, r0, r2
				brainFirmwareUpdateRequested = 1;
    3068:	601a      	str	r2, [r3, #0]
    306a:	e5c1      	b.n	2bf0 <handleSPI+0x1d0>
			if (boardNumber == 0)
    306c:	4b58      	ldr	r3, [pc, #352]	; (31d0 <_Min_Heap_Size+0x1d0>)
    306e:	781b      	ldrb	r3, [r3, #0]
    3070:	2b00      	cmp	r3, #0
    3072:	f47f ad00 	bne.w	2a76 <handleSPI+0x56>
				pluckFirmwareUpdateRequested = 1;
    3076:	2201      	movs	r2, #1
    3078:	4b58      	ldr	r3, [pc, #352]	; (31dc <_Min_Heap_Size+0x1dc>)
    307a:	4957      	ldr	r1, [pc, #348]	; (31d8 <_Min_Heap_Size+0x1d8>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    307c:	eb00 0e02 	add.w	lr, r0, r2
				pluckFirmwareUpdateRequested = 1;
    3080:	601a      	str	r2, [r3, #0]
    3082:	e5b5      	b.n	2bf0 <handleSPI+0x1d0>
			if (presetReady)
    3084:	4b4d      	ldr	r3, [pc, #308]	; (31bc <_Min_Heap_Size+0x1bc>)
    3086:	681b      	ldr	r3, [r3, #0]
    3088:	2b00      	cmp	r3, #0
    308a:	f43f ada9 	beq.w	2be0 <handleSPI+0x1c0>
				uint8_t currentByte = offset+1;
    308e:	1c41      	adds	r1, r0, #1
    3090:	f8df 9164 	ldr.w	r9, [pc, #356]	; 31f8 <_Min_Heap_Size+0x1f8>
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    3094:	f04f 0e20 	mov.w	lr, #32
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3098:	fa57 f181 	uxtab	r1, r7, r1
    309c:	4648      	mov	r0, r9
    309e:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    30a2:	f891 c041 	ldrb.w	ip, [r1, #65]	; 0x41
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    30a6:	f891 2044 	ldrb.w	r2, [r1, #68]	; 0x44
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    30aa:	eb0c 2c03 	add.w	ip, ip, r3, lsl #8
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    30ae:	f891 3045 	ldrb.w	r3, [r1, #69]	; 0x45
				uint8_t whichSlot = (SPI_LEVERS_RX[currentByte+2]);
    30b2:	f891 a042 	ldrb.w	sl, [r1, #66]	; 0x42
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    30b6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
				uint8_t foundOne = 0;
    30ba:	2200      	movs	r2, #0
				uint8_t mappingChangeType = (SPI_LEVERS_RX[currentByte+3]);
    30bc:	f891 8043 	ldrb.w	r8, [r1, #67]	; 0x43
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    30c0:	fa1f fc8c 	uxth.w	ip, ip
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    30c4:	b21b      	sxth	r3, r3
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    30c6:	4611      	mov	r1, r2
					if (mappings[j].destNumber == destNumber)
    30c8:	7805      	ldrb	r5, [r0, #0]
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    30ca:	304c      	adds	r0, #76	; 0x4c
					if (mappings[j].destNumber == destNumber)
    30cc:	4565      	cmp	r5, ip
    30ce:	d101      	bne.n	30d4 <_Min_Heap_Size+0xd4>
						whichMapping = j;
    30d0:	b2ce      	uxtb	r6, r1
						foundOne = 1;
    30d2:	2201      	movs	r2, #1
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    30d4:	2dff      	cmp	r5, #255	; 0xff
    30d6:	d103      	bne.n	30e0 <_Min_Heap_Size+0xe0>
    30d8:	458e      	cmp	lr, r1
    30da:	bfc8      	it	gt
    30dc:	fa5f fe81 	uxtbgt.w	lr, r1
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    30e0:	3101      	adds	r1, #1
    30e2:	2920      	cmp	r1, #32
    30e4:	d1f0      	bne.n	30c8 <_Min_Heap_Size+0xc8>
				if (foundOne == 0)
    30e6:	b982      	cbnz	r2, 310a <_Min_Heap_Size+0x10a>
					numMappings++;
    30e8:	493d      	ldr	r1, [pc, #244]	; (31e0 <_Min_Heap_Size+0x1e0>)
					mappings[whichMapping].destNumber = destNumber;
    30ea:	224c      	movs	r2, #76	; 0x4c
					mappings[whichMapping].dest = &params[destNumber];
    30ec:	4676      	mov	r6, lr
					numMappings++;
    30ee:	7808      	ldrb	r0, [r1, #0]
					mappings[whichMapping].destNumber = destNumber;
    30f0:	fb02 f20e 	mul.w	r2, r2, lr
					numMappings++;
    30f4:	3001      	adds	r0, #1
					mappings[whichMapping].destNumber = destNumber;
    30f6:	f809 c002 	strb.w	ip, [r9, r2]
					mappings[whichMapping].dest = &params[destNumber];
    30fa:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
					mappings[whichMapping].destNumber = destNumber;
    30fe:	444a      	add	r2, r9
					numMappings++;
    3100:	7008      	strb	r0, [r1, #0]
					mappings[whichMapping].dest = &params[destNumber];
    3102:	4930      	ldr	r1, [pc, #192]	; (31c4 <_Min_Heap_Size+0x1c4>)
    3104:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    3108:	6051      	str	r1, [r2, #4]
				if (mappingChangeType == SourceID)
    310a:	f1b8 0f00 	cmp.w	r8, #0
    310e:	f040 8260 	bne.w	35d2 <_Min_Heap_Size+0x5d2>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    3112:	224c      	movs	r2, #76	; 0x4c
    3114:	2001      	movs	r0, #1
					if (source == 255)
    3116:	2bff      	cmp	r3, #255	; 0xff
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    3118:	fb06 f202 	mul.w	r2, r6, r2
    311c:	eb09 0502 	add.w	r5, r9, r2
    3120:	eb05 0c0a 	add.w	ip, r5, sl
    3124:	f88c 0020 	strb.w	r0, [ip, #32]
					if (source == 255)
    3128:	f000 848b 	beq.w	3a42 <_Min_Heap_Size+0xa42>
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    312c:	4d2d      	ldr	r5, [pc, #180]	; (31e4 <_Min_Heap_Size+0x1e4>)
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    312e:	f10a 0104 	add.w	r1, sl, #4
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3132:	f10a 0e01 	add.w	lr, sl, #1
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    3136:	2b03      	cmp	r3, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3138:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
						mappings[whichMapping].hookActive[whichSlot] = 1;
    313c:	f88c 0048 	strb.w	r0, [ip, #72]	; 0x48
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3140:	eb02 0ece 	add.w	lr, r2, lr, lsl #3
    3144:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3148:	4449      	add	r1, r9
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    314a:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
    314e:	f10b 0504 	add.w	r5, fp, #4
    3152:	f849 b00e 	str.w	fp, [r9, lr]
    3156:	444a      	add	r2, r9
    3158:	60d5      	str	r5, [r2, #12]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    315a:	4d23      	ldr	r5, [pc, #140]	; (31e8 <_Min_Heap_Size+0x1e8>)
    315c:	604d      	str	r5, [r1, #4]
    315e:	6295      	str	r5, [r2, #40]	; 0x28
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    3160:	f340 8433 	ble.w	39ca <_Min_Heap_Size+0x9ca>
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3164:	f1a3 0218 	sub.w	r2, r3, #24
    3168:	2a03      	cmp	r2, #3
    316a:	f200 8495 	bhi.w	3a98 <_Min_Heap_Size+0xa98>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    316e:	4a1f      	ldr	r2, [pc, #124]	; (31ec <_Min_Heap_Size+0x1ec>)
    3170:	441a      	add	r2, r3
    3172:	f802 0c18 	strb.w	r0, [r2, #-24]
						if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    3176:	2b03      	cmp	r3, #3
    3178:	d102      	bne.n	3180 <_Min_Heap_Size+0x180>
							noiseOn = 1;
    317a:	4b14      	ldr	r3, [pc, #80]	; (31cc <_Min_Heap_Size+0x1cc>)
    317c:	2201      	movs	r2, #1
    317e:	701a      	strb	r2, [r3, #0]
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    3180:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
    3184:	2200      	movs	r2, #0
    3186:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    318a:	4453      	add	r3, sl
    318c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    3190:	63da      	str	r2, [r3, #60]	; 0x3c
    3192:	e525      	b.n	2be0 <handleSPI+0x1c0>
    3194:	2001c817 	.word	0x2001c817
    3198:	30000000 	.word	0x30000000
    319c:	20014540 	.word	0x20014540
    31a0:	200008a8 	.word	0x200008a8
    31a4:	200144fc 	.word	0x200144fc
    31a8:	2001a20f 	.word	0x2001a20f
    31ac:	30042380 	.word	0x30042380
    31b0:	30000840 	.word	0x30000840
    31b4:	2001a21c 	.word	0x2001a21c
    31b8:	3b808081 	.word	0x3b808081
    31bc:	20005544 	.word	0x20005544
    31c0:	377ffff6 	.word	0x377ffff6
    31c4:	200190e4 	.word	0x200190e4
    31c8:	04002001 	.word	0x04002001
    31cc:	2001d514 	.word	0x2001d514
    31d0:	200144e5 	.word	0x200144e5
    31d4:	200144f8 	.word	0x200144f8
    31d8:	30043380 	.word	0x30043380
    31dc:	2001a1f8 	.word	0x2001a1f8
    31e0:	200190d4 	.word	0x200190d4
    31e4:	2001d788 	.word	0x2001d788
    31e8:	200008b0 	.word	0x200008b0
    31ec:	2001d2cc 	.word	0x2001d2cc
    31f0:	200053cc 	.word	0x200053cc
    31f4:	20005430 	.word	0x20005430
    31f8:	20018748 	.word	0x20018748
    31fc:	3c23d70a 	.word	0x3c23d70a
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3200:	183b      	adds	r3, r7, r0
    3202:	ed5f 6a02 	vldr	s13, [pc, #-8]	; 31fc <_Min_Heap_Size+0x1fc>
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3206:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    320a:	4ab1      	ldr	r2, [pc, #708]	; (34d0 <_Min_Heap_Size+0x4d0>)
    320c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    3210:	ee07 3a90 	vmov	s15, r3
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3214:	4baf      	ldr	r3, [pc, #700]	; (34d4 <_Min_Heap_Size+0x4d4>)
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    321a:	ee67 7aa6 	vmul.f32	s15, s15, s13
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    321e:	ee27 7a87 	vmul.f32	s14, s15, s14
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3222:	edc2 7a00 	vstr	s15, [r2]
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3226:	ed83 7a00 	vstr	s14, [r3]
    322a:	e4d9      	b.n	2be0 <handleSPI+0x1c0>
			 uint8_t currentByte = offset+1;
    322c:	f100 0a01 	add.w	sl, r0, #1
    3230:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 34e4 <_Min_Heap_Size+0x4e4>
    3234:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 3518 <_Min_Heap_Size+0x518>
    3238:	250c      	movs	r5, #12
    323a:	fa5f f38a 	uxtb.w	r3, sl
    323e:	4ea6      	ldr	r6, [pc, #664]	; (34d8 <_Min_Heap_Size+0x4d8>)
    3240:	9702      	str	r7, [sp, #8]
    3242:	464f      	mov	r7, r9
    3244:	eb08 0b03 	add.w	fp, r8, r3
    3248:	46b1      	mov	r9, r6
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    324a:	ed9f 8aa4 	vldr	s16, [pc, #656]	; 34dc <_Min_Heap_Size+0x4dc>
    324e:	465e      	mov	r6, fp
    3250:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 351c <_Min_Heap_Size+0x51c>
    3254:	4683      	mov	fp, r0
    3256:	9301      	str	r3, [sp, #4]
    3258:	e014      	b.n	3284 <_Min_Heap_Size+0x284>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    325a:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
    325e:	3303      	adds	r3, #3
    3260:	42a3      	cmp	r3, r4
    3262:	db04      	blt.n	326e <_Min_Heap_Size+0x26e>
    3264:	f859 3025 	ldr.w	r3, [r9, r5, lsl #2]
    3268:	3b03      	subs	r3, #3
    326a:	42a3      	cmp	r3, r4
    326c:	dd04      	ble.n	3278 <_Min_Heap_Size+0x278>
						knobFrozen[whichKnob] = 0;
    326e:	f04f 0300 	mov.w	r3, #0
    3272:	557b      	strb	r3, [r7, r5]
						prevKnobByte[whichKnob] = newByte;
    3274:	f849 4025 	str.w	r4, [r9, r5, lsl #2]
			for (int i = 0; i < 8; i++)
    3278:	3501      	adds	r5, #1
    327a:	f10a 0a04 	add.w	sl, sl, #4
    327e:	2d14      	cmp	r5, #20
    3280:	f000 8152 	beq.w	3528 <_Min_Heap_Size+0x528>
				if (knobFrozen[whichKnob])
    3284:	5d7b      	ldrb	r3, [r7, r5]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3286:	f816 4b01 	ldrb.w	r4, [r6], #1
				if (knobFrozen[whichKnob])
    328a:	2b00      	cmp	r3, #0
    328c:	d1e5      	bne.n	325a <_Min_Heap_Size+0x25a>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    328e:	ee07 4a90 	vmov	s15, r4
    3292:	4650      	mov	r0, sl
    3294:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3298:	ee20 0a08 	vmul.f32	s0, s0, s16
    329c:	f006 f968 	bl	9570 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    32a0:	f849 4025 	str.w	r4, [r9, r5, lsl #2]
    32a4:	e7e8      	b.n	3278 <_Min_Heap_Size+0x278>
			if (boardNumber == 0)
    32a6:	4b8e      	ldr	r3, [pc, #568]	; (34e0 <_Min_Heap_Size+0x4e0>)
    32a8:	781b      	ldrb	r3, [r3, #0]
    32aa:	2b00      	cmp	r3, #0
    32ac:	f47f abe3 	bne.w	2a76 <handleSPI+0x56>
				uint_fast8_t  currentByte = offset+1;
    32b0:	f100 0e01 	add.w	lr, r0, #1
				presetNumberToSave = SPI_LEVERS_RX[currentByte];
    32b4:	498b      	ldr	r1, [pc, #556]	; (34e4 <_Min_Heap_Size+0x4e4>)
    32b6:	f8df a268 	ldr.w	sl, [pc, #616]	; 3520 <_Min_Heap_Size+0x520>
    32ba:	eb07 020e 	add.w	r2, r7, lr
    32be:	f101 0613 	add.w	r6, r1, #19
    32c2:	4471      	add	r1, lr
    32c4:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
    32c8:	4406      	add	r6, r0
    32ca:	4887      	ldr	r0, [pc, #540]	; (34e8 <_Min_Heap_Size+0x4e8>)
    32cc:	f88a 2000 	strb.w	r2, [sl]
				bufferPos = 0;
    32d0:	4a86      	ldr	r2, [pc, #536]	; (34ec <_Min_Heap_Size+0x4ec>)
    32d2:	8013      	strh	r3, [r2, #0]
					buffer[bufferPos++] = SPI_LEVERS_RX[currentByte++];
    32d4:	8813      	ldrh	r3, [r2, #0]
    32d6:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    32da:	b29b      	uxth	r3, r3
				for (int i = 0; i < 18; i++)
    32dc:	42b1      	cmp	r1, r6
					buffer[bufferPos++] = SPI_LEVERS_RX[currentByte++];
    32de:	54c5      	strb	r5, [r0, r3]
    32e0:	f103 0301 	add.w	r3, r3, #1
    32e4:	b29b      	uxth	r3, r3
    32e6:	8013      	strh	r3, [r2, #0]
				for (int i = 0; i < 18; i++)
    32e8:	d1f4      	bne.n	32d4 <_Min_Heap_Size+0x2d4>
				if (whichModel != 0)
    32ea:	4b81      	ldr	r3, [pc, #516]	; (34f0 <_Min_Heap_Size+0x4f0>)
    32ec:	781d      	ldrb	r5, [r3, #0]
    32ee:	2d00      	cmp	r5, #0
    32f0:	f000 82be 	beq.w	3870 <_Min_Heap_Size+0x870>
					bufferPos = 20;//first byte after name
    32f4:	2314      	movs	r3, #20
					for (int j = 0; j < 8; j++)
    32f6:	f04f 0800 	mov.w	r8, #0
    32fa:	4e7e      	ldr	r6, [pc, #504]	; (34f4 <_Min_Heap_Size+0x4f4>)
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    32fc:	f04f 09c8 	mov.w	r9, #200	; 0xc8
					bufferPos = 20;//first byte after name
    3300:	8013      	strh	r3, [r2, #0]
					buffer[bufferPos] = whichModel; // not a synth preset, maybe string or additive or something
    3302:	8811      	ldrh	r1, [r2, #0]
					bufferPos++;
    3304:	8813      	ldrh	r3, [r2, #0]
					buffer[bufferPos] = whichModel; // not a synth preset, maybe string or additive or something
    3306:	b289      	uxth	r1, r1
					bufferPos++;
    3308:	3301      	adds	r3, #1
    330a:	b29b      	uxth	r3, r3
    330c:	8013      	strh	r3, [r2, #0]
					buffer[1] = 19; // instead of the 18 that was sent by the brain, to signal that this is an internal model, not synth
    330e:	2313      	movs	r3, #19
    3310:	7043      	strb	r3, [r0, #1]
					buffer[bufferPos] = whichModel; // not a synth preset, maybe string or additive or something
    3312:	5445      	strb	r5, [r0, r1]
					for (int j = 0; j < 8; j++)
    3314:	4978      	ldr	r1, [pc, #480]	; (34f8 <_Min_Heap_Size+0x4f8>)
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    3316:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
						for (int k = 0; k < 9; k++)
    331a:	2500      	movs	r5, #0
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    331c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    3320:	7833      	ldrb	r3, [r6, #0]
    3322:	f8b2 b000 	ldrh.w	fp, [r2]
    3326:	fb09 c303 	mla	r3, r9, r3, ip
    332a:	fa1f fb8b 	uxth.w	fp, fp
    332e:	440b      	add	r3, r1
    3330:	5d5b      	ldrb	r3, [r3, r5]
						for (int k = 0; k < 9; k++)
    3332:	3501      	adds	r5, #1
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    3334:	f800 300b 	strb.w	r3, [r0, fp]
						for (int k = 0; k < 9; k++)
    3338:	2d09      	cmp	r5, #9
							bufferPos++;
    333a:	8813      	ldrh	r3, [r2, #0]
    333c:	f103 0301 	add.w	r3, r3, #1
    3340:	b29b      	uxth	r3, r3
    3342:	8013      	strh	r3, [r2, #0]
						for (int k = 0; k < 9; k++)
    3344:	d1ec      	bne.n	3320 <_Min_Heap_Size+0x320>
					for (int j = 0; j < 8; j++)
    3346:	f108 0801 	add.w	r8, r8, #1
    334a:	f1b8 0f08 	cmp.w	r8, #8
    334e:	d1e2      	bne.n	3316 <_Min_Heap_Size+0x316>
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    3350:	f04f 09c8 	mov.w	r9, #200	; 0xc8
    3354:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
						for (int k = 0; k < 10; k++)
    3358:	2500      	movs	r5, #0
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    335a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    335e:	7833      	ldrb	r3, [r6, #0]
    3360:	f8b2 b000 	ldrh.w	fp, [r2]
    3364:	fb09 c303 	mla	r3, r9, r3, ip
    3368:	fa1f fb8b 	uxth.w	fp, fp
    336c:	440b      	add	r3, r1
    336e:	5d5b      	ldrb	r3, [r3, r5]
						for (int k = 0; k < 10; k++)
    3370:	3501      	adds	r5, #1
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    3372:	f800 300b 	strb.w	r3, [r0, fp]
						for (int k = 0; k < 10; k++)
    3376:	2d0a      	cmp	r5, #10
							bufferPos++;
    3378:	8813      	ldrh	r3, [r2, #0]
    337a:	f103 0301 	add.w	r3, r3, #1
    337e:	b29b      	uxth	r3, r3
    3380:	8013      	strh	r3, [r2, #0]
						for (int k = 0; k < 10; k++)
    3382:	d1ec      	bne.n	335e <_Min_Heap_Size+0x35e>
					for (int j = 0; j < 4; j++)
    3384:	f108 0801 	add.w	r8, r8, #1
    3388:	f1b8 0f0c 	cmp.w	r8, #12
    338c:	d1e2      	bne.n	3354 <_Min_Heap_Size+0x354>
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    338e:	f04f 09c8 	mov.w	r9, #200	; 0xc8
    3392:	eb08 0c88 	add.w	ip, r8, r8, lsl #2
						for (int k = 0; k < 9; k++)
    3396:	2500      	movs	r5, #0
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    3398:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    339c:	7833      	ldrb	r3, [r6, #0]
    339e:	f8b2 b000 	ldrh.w	fp, [r2]
    33a2:	fb09 c303 	mla	r3, r9, r3, ip
    33a6:	fa1f fb8b 	uxth.w	fp, fp
    33aa:	440b      	add	r3, r1
    33ac:	5d5b      	ldrb	r3, [r3, r5]
						for (int k = 0; k < 9; k++)
    33ae:	3501      	adds	r5, #1
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    33b0:	f800 300b 	strb.w	r3, [r0, fp]
						for (int k = 0; k < 9; k++)
    33b4:	2d09      	cmp	r5, #9
							bufferPos++;
    33b6:	8813      	ldrh	r3, [r2, #0]
    33b8:	f103 0301 	add.w	r3, r3, #1
    33bc:	b29b      	uxth	r3, r3
    33be:	8013      	strh	r3, [r2, #0]
						for (int k = 0; k < 9; k++)
    33c0:	d1ec      	bne.n	339c <_Min_Heap_Size+0x39c>
					for (int j = 0; j < 8; j++)
    33c2:	f108 0801 	add.w	r8, r8, #1
    33c6:	f1b8 0f14 	cmp.w	r8, #20
    33ca:	d1e2      	bne.n	3392 <_Min_Heap_Size+0x392>
    33cc:	f8df c154 	ldr.w	ip, [pc, #340]	; 3524 <_Min_Heap_Size+0x524>
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    33d0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 34fc <_Min_Heap_Size+0x4fc>
    33d4:	f10c 0850 	add.w	r8, ip, #80	; 0x50
    33d8:	ecfc 7a01 	vldmia	ip!, {s15}
						buffer[bufferPos] = integerVersion >> 8;
    33dc:	8816      	ldrh	r6, [r2, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    33de:	ee67 7a87 	vmul.f32	s15, s15, s14
						buffer[bufferPos+1] = integerVersion & 255;
    33e2:	8815      	ldrh	r5, [r2, #0]
						bufferPos = bufferPos + 2;
    33e4:	8813      	ldrh	r3, [r2, #0]
						buffer[bufferPos] = integerVersion >> 8;
    33e6:	b2b6      	uxth	r6, r6
						buffer[bufferPos+1] = integerVersion & 255;
    33e8:	fa10 f585 	uxtah	r5, r0, r5
					for (int i = 0; i < 20; i++)
    33ec:	45c4      	cmp	ip, r8
						bufferPos = bufferPos + 2;
    33ee:	f103 0302 	add.w	r3, r3, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    33f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
						bufferPos = bufferPos + 2;
    33f6:	b29b      	uxth	r3, r3
    33f8:	8013      	strh	r3, [r2, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    33fa:	ee17 3a90 	vmov	r3, s15
						buffer[bufferPos] = integerVersion >> 8;
    33fe:	f3c3 2907 	ubfx	r9, r3, #8, #8
    3402:	f800 9006 	strb.w	r9, [r0, r6]
						buffer[bufferPos+1] = integerVersion & 255;
    3406:	706b      	strb	r3, [r5, #1]
					for (int i = 0; i < 20; i++)
    3408:	d1e6      	bne.n	33d8 <_Min_Heap_Size+0x3d8>
					 presetNumberToLoad = presetNumberToSave;
    340a:	f89a 3000 	ldrb.w	r3, [sl]
    340e:	483c      	ldr	r0, [pc, #240]	; (3500 <_Min_Heap_Size+0x500>)
    3410:	b2db      	uxtb	r3, r3
    3412:	7003      	strb	r3, [r0, #0]
					 presetWaitingToParse = bufferPos;
    3414:	8813      	ldrh	r3, [r2, #0]
    3416:	483b      	ldr	r0, [pc, #236]	; (3504 <_Min_Heap_Size+0x504>)
    3418:	b29b      	uxth	r3, r3
    341a:	6003      	str	r3, [r0, #0]
					 presetWaitingToWrite = bufferPos;
    341c:	8813      	ldrh	r3, [r2, #0]
    341e:	4a3a      	ldr	r2, [pc, #232]	; (3508 <_Min_Heap_Size+0x508>)
    3420:	b29b      	uxth	r3, r3
    3422:	6013      	str	r3, [r2, #0]
    3424:	f7ff bbe4 	b.w	2bf0 <handleSPI+0x1d0>
    3428:	464e      	mov	r6, r9
    342a:	46b9      	mov	r9, r7
    342c:	4837      	ldr	r0, [pc, #220]	; (350c <_Min_Heap_Size+0x50c>)
						knobFrozen[i] = 0;
    342e:	2200      	movs	r2, #0
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    3430:	ed9f 8a2a 	vldr	s16, [pc, #168]	; 34dc <_Min_Heap_Size+0x4dc>
						knobFrozen[i] = 0;
    3434:	4604      	mov	r4, r0
    3436:	e9dd 3701 	ldrd	r3, r7, [sp, #4]
    343a:	f8cd b004 	str.w	fp, [sp, #4]
    343e:	46b3      	mov	fp, r6
    3440:	f103 0a07 	add.w	sl, r3, #7
    3444:	44c2      	add	sl, r8
				if (knobFrozen[i])
    3446:	f819 3005 	ldrb.w	r3, [r9, r5]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    344a:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
				if (knobFrozen[i])
    344e:	b393      	cbz	r3, 34b6 <_Min_Heap_Size+0x4b6>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    3450:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
    3454:	3303      	adds	r3, #3
    3456:	42b3      	cmp	r3, r6
    3458:	db04      	blt.n	3464 <_Min_Heap_Size+0x464>
    345a:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
    345e:	3b03      	subs	r3, #3
    3460:	42b3      	cmp	r3, r6
    3462:	dd03      	ble.n	346c <_Min_Heap_Size+0x46c>
						knobFrozen[i] = 0;
    3464:	f809 2005 	strb.w	r2, [r9, r5]
						prevKnobByte[i] = newByte;
    3468:	f84b 6025 	str.w	r6, [fp, r5, lsl #2]
			for (int i = 8; i < 12; i++)
    346c:	3501      	adds	r5, #1
    346e:	3404      	adds	r4, #4
    3470:	2d0c      	cmp	r5, #12
    3472:	d1e8      	bne.n	3446 <_Min_Heap_Size+0x446>
			currentByte += 12;
    3474:	9c01      	ldr	r4, [sp, #4]
			for (int i = 0; i < 10; i++)
    3476:	4d26      	ldr	r5, [pc, #152]	; (3510 <_Min_Heap_Size+0x510>)
			currentByte += 12;
    3478:	f104 060d 	add.w	r6, r4, #13
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    347c:	ed9f 8a17 	vldr	s16, [pc, #92]	; 34dc <_Min_Heap_Size+0x4dc>
    3480:	b2f6      	uxtb	r6, r6
    3482:	3e01      	subs	r6, #1
    3484:	4446      	add	r6, r8
    3486:	f105 0828 	add.w	r8, r5, #40	; 0x28
    348a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
    348e:	4628      	mov	r0, r5
			for (int i = 0; i < 10; i++)
    3490:	3504      	adds	r5, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3492:	ee00 3a10 	vmov	s0, r3
    3496:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    349a:	ee20 0a08 	vmul.f32	s0, s0, s16
    349e:	f006 f867 	bl	9570 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    34a2:	4545      	cmp	r5, r8
    34a4:	d1f1      	bne.n	348a <_Min_Heap_Size+0x48a>
			whichBar = 1;
    34a6:	4b1b      	ldr	r3, [pc, #108]	; (3514 <_Min_Heap_Size+0x514>)
    34a8:	2201      	movs	r2, #1
			updateStateFromSPIMessage(offset);
    34aa:	4620      	mov	r0, r4
			whichBar = 1;
    34ac:	701a      	strb	r2, [r3, #0]
			updateStateFromSPIMessage(offset);
    34ae:	f7fd feb7 	bl	1220 <updateStateFromSPIMessage>
    34b2:	f7ff bb95 	b.w	2be0 <handleSPI+0x1c0>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    34b6:	ee07 6a90 	vmov	s15, r6
    34ba:	4620      	mov	r0, r4
    34bc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    34c0:	ee20 0a08 	vmul.f32	s0, s0, s16
    34c4:	f006 f854 	bl	9570 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    34c8:	2200      	movs	r2, #0
    34ca:	f84b 6025 	str.w	r6, [fp, r5, lsl #2]
    34ce:	e7cd      	b.n	346c <_Min_Heap_Size+0x46c>
    34d0:	2000068c 	.word	0x2000068c
    34d4:	20000690 	.word	0x20000690
    34d8:	2001a21c 	.word	0x2001a21c
    34dc:	3b808081 	.word	0x3b808081
    34e0:	200144e5 	.word	0x200144e5
    34e4:	30000840 	.word	0x30000840
    34e8:	30042380 	.word	0x30042380
    34ec:	200144fc 	.word	0x200144fc
    34f0:	2001c815 	.word	0x2001c815
    34f4:	200008ac 	.word	0x200008ac
    34f8:	30043380 	.word	0x30043380
    34fc:	47800000 	.word	0x47800000
    3500:	2001a20e 	.word	0x2001a20e
    3504:	2001a214 	.word	0x2001a214
    3508:	2001a218 	.word	0x2001a218
    350c:	20005450 	.word	0x20005450
    3510:	2000551c 	.word	0x2000551c
    3514:	20014450 	.word	0x20014450
    3518:	200053cc 	.word	0x200053cc
    351c:	20005460 	.word	0x20005460
    3520:	2001a20f 	.word	0x2001a20f
    3524:	200053e0 	.word	0x200053e0
    3528:	464e      	mov	r6, r9
    352a:	46b9      	mov	r9, r7
    352c:	48bd      	ldr	r0, [pc, #756]	; (3824 <_Min_Heap_Size+0x824>)
			for (int i = 8; i < 12; i++)
    352e:	2508      	movs	r5, #8
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3530:	ed9f 8abd 	vldr	s16, [pc, #756]	; 3828 <_Min_Heap_Size+0x828>
						knobFrozen[whichKnob] = 0;
    3534:	2200      	movs	r2, #0
    3536:	4604      	mov	r4, r0
    3538:	e9dd 3701 	ldrd	r3, r7, [sp, #4]
    353c:	f8cd b004 	str.w	fp, [sp, #4]
    3540:	46b3      	mov	fp, r6
    3542:	f103 0a07 	add.w	sl, r3, #7
    3546:	44c2      	add	sl, r8
				if (knobFrozen[whichKnob])
    3548:	f819 3005 	ldrb.w	r3, [r9, r5]
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    354c:	f81a 6f01 	ldrb.w	r6, [sl, #1]!
				if (knobFrozen[whichKnob])
    3550:	b35b      	cbz	r3, 35aa <_Min_Heap_Size+0x5aa>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    3552:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
    3556:	3303      	adds	r3, #3
    3558:	42b3      	cmp	r3, r6
    355a:	db04      	blt.n	3566 <_Min_Heap_Size+0x566>
    355c:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
    3560:	3b03      	subs	r3, #3
    3562:	42b3      	cmp	r3, r6
    3564:	dd03      	ble.n	356e <_Min_Heap_Size+0x56e>
						knobFrozen[whichKnob] = 0;
    3566:	f809 2005 	strb.w	r2, [r9, r5]
						prevKnobByte[whichKnob] = newByte;
    356a:	f84b 6025 	str.w	r6, [fp, r5, lsl #2]
			for (int i = 8; i < 12; i++)
    356e:	3501      	adds	r5, #1
    3570:	3404      	adds	r4, #4
    3572:	2d0c      	cmp	r5, #12
    3574:	d1e8      	bne.n	3548 <_Min_Heap_Size+0x548>
			currentByte += 12;
    3576:	9c01      	ldr	r4, [sp, #4]
			for (int i = 0; i < 10; i++)
    3578:	4dac      	ldr	r5, [pc, #688]	; (382c <_Min_Heap_Size+0x82c>)
			currentByte += 12;
    357a:	f104 030d 	add.w	r3, r4, #13
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    357e:	ed9f 8aaa 	vldr	s16, [pc, #680]	; 3828 <_Min_Heap_Size+0x828>
    3582:	f105 0628 	add.w	r6, r5, #40	; 0x28
    3586:	b2db      	uxtb	r3, r3
    3588:	3b01      	subs	r3, #1
    358a:	4498      	add	r8, r3
    358c:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    3590:	4628      	mov	r0, r5
			for (int i = 0; i < 10; i++)
    3592:	3504      	adds	r5, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3594:	ee00 3a10 	vmov	s0, r3
    3598:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    359c:	ee20 0a08 	vmul.f32	s0, s0, s16
    35a0:	f005 ffe6 	bl	9570 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    35a4:	42ae      	cmp	r6, r5
    35a6:	d1f1      	bne.n	358c <_Min_Heap_Size+0x58c>
    35a8:	e77d      	b.n	34a6 <_Min_Heap_Size+0x4a6>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    35aa:	ee07 6a90 	vmov	s15, r6
    35ae:	4620      	mov	r0, r4
    35b0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    35b4:	ee20 0a08 	vmul.f32	s0, s0, s16
    35b8:	f005 ffda 	bl	9570 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    35bc:	2200      	movs	r2, #0
    35be:	f84b 6025 	str.w	r6, [fp, r5, lsl #2]
    35c2:	e7d4      	b.n	356e <_Min_Heap_Size+0x56e>
			for (int i = 0; i < 30; i++)
    35c4:	9a01      	ldr	r2, [sp, #4]
    35c6:	f7ff baaf 	b.w	2b28 <handleSPI+0x108>
    35ca:	2401      	movs	r4, #1
    35cc:	e510      	b.n	2ff0 <handleSPI+0x5d0>
    35ce:	4a98      	ldr	r2, [pc, #608]	; (3830 <_Min_Heap_Size+0x830>)
    35d0:	e476      	b.n	2ec0 <handleSPI+0x4a0>
				else if (mappingChangeType == Amount)
    35d2:	f1b8 0f01 	cmp.w	r8, #1
    35d6:	f000 821b 	beq.w	3a10 <_Min_Heap_Size+0xa10>
				else if (mappingChangeType == ScalarID)
    35da:	f1b8 0f02 	cmp.w	r8, #2
    35de:	f47f aaff 	bne.w	2be0 <handleSPI+0x1c0>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    35e2:	2124      	movs	r1, #36	; 0x24
    35e4:	224c      	movs	r2, #76	; 0x4c
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    35e6:	4893      	ldr	r0, [pc, #588]	; (3834 <_Min_Heap_Size+0x834>)
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    35e8:	2501      	movs	r5, #1
    35ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
    35ee:	f8df 8264 	ldr.w	r8, [pc, #612]	; 3854 <_Min_Heap_Size+0x854>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    35f2:	eb00 0c03 	add.w	ip, r0, r3
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    35f6:	f1a3 0a18 	sub.w	sl, r3, #24
    35fa:	fb12 1206 	smlabb	r2, r2, r6, r1
    35fe:	498e      	ldr	r1, [pc, #568]	; (3838 <_Min_Heap_Size+0x838>)
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3600:	4e8e      	ldr	r6, [pc, #568]	; (383c <_Min_Heap_Size+0x83c>)
    3602:	eb01 0ec3 	add.w	lr, r1, r3, lsl #3
					int scalar = mappingChangeValue;
    3606:	2100      	movs	r1, #0
    3608:	444a      	add	r2, r9
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    360a:	441e      	add	r6, r3
					int scalar = mappingChangeValue;
    360c:	4608      	mov	r0, r1
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    360e:	f1a3 0914 	sub.w	r9, r3, #20
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    3612:	9401      	str	r4, [sp, #4]
						if (scalar == 0xff)
    3614:	2bff      	cmp	r3, #255	; 0xff
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3616:	eb01 0b0e 	add.w	fp, r1, lr
						if (scalar == 0xff)
    361a:	f000 8235 	beq.w	3a88 <_Min_Heap_Size+0xa88>
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    361e:	f1ba 0f03 	cmp.w	sl, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3622:	f8c2 b000 	str.w	fp, [r2]
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3626:	f200 8206 	bhi.w	3a36 <_Min_Heap_Size+0xa36>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    362a:	f806 5c18 	strb.w	r5, [r6, #-24]
							if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    362e:	2b03      	cmp	r3, #3
    3630:	bf08      	it	eq
    3632:	2001      	moveq	r0, #1
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3634:	3104      	adds	r1, #4
    3636:	3204      	adds	r2, #4
    3638:	2908      	cmp	r1, #8
    363a:	d1eb      	bne.n	3614 <_Min_Heap_Size+0x614>
    363c:	9c01      	ldr	r4, [sp, #4]
    363e:	2800      	cmp	r0, #0
    3640:	f43f aace 	beq.w	2be0 <handleSPI+0x1c0>
    3644:	e502      	b.n	304c <_Min_Heap_Size+0x4c>
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    3646:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
					param *FXAlias = &params[whichParam + 1];
    364a:	f105 0901 	add.w	r9, r5, #1
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    364e:	ea4f 08e8 	mov.w	r8, r8, asr #3
					param *FXAlias = &params[whichParam + 1];
    3652:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    3656:	ee67 7a87 	vmul.f32	s15, s15, s14
					param *FXAlias = &params[whichParam + 1];
    365a:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
    365e:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    3662:	fef8 7a67 	vrinta.f32	s15, s15
    3666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    366a:	edcd 7a02 	vstr	s15, [sp, #8]
    366e:	f89d 0008 	ldrb.w	r0, [sp, #8]
					if (effectType > FXLowpass)
    3672:	280d      	cmp	r0, #13
    3674:	d902      	bls.n	367c <_Min_Heap_Size+0x67c>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    3676:	4a72      	ldr	r2, [pc, #456]	; (3840 <_Min_Heap_Size+0x840>)
    3678:	f8ca 2048 	str.w	r2, [sl, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    367c:	4641      	mov	r1, r8
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    367e:	eb08 0888 	add.w	r8, r8, r8, lsl #2
					setEffectsFunctions(effectType, whichEffect);
    3682:	f005 fe2d 	bl	92e0 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    3686:	4a6f      	ldr	r2, [pc, #444]	; (3844 <_Min_Heap_Size+0x844>)
    3688:	ebab 0309 	sub.w	r3, fp, r9
    368c:	eb02 0188 	add.w	r1, r2, r8, lsl #2
    3690:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    3694:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    3698:	615a      	str	r2, [r3, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    369a:	684b      	ldr	r3, [r1, #4]
    369c:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    36a0:	688b      	ldr	r3, [r1, #8]
    36a2:	f8ca 304c 	str.w	r3, [sl, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    36a6:	68cb      	ldr	r3, [r1, #12]
    36a8:	f8ca 3068 	str.w	r3, [sl, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    36ac:	690b      	ldr	r3, [r1, #16]
    36ae:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
    36b2:	e493      	b.n	2fdc <handleSPI+0x5bc>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    36b4:	4a64      	ldr	r2, [pc, #400]	; (3848 <_Min_Heap_Size+0x848>)
    36b6:	410a      	asrs	r2, r1
    36b8:	f012 0101 	ands.w	r1, r2, #1
    36bc:	d124      	bne.n	3708 <_Min_Heap_Size+0x708>
					if (params[whichParam].realVal[0]  > 0.5f)
    36be:	9a01      	ldr	r2, [sp, #4]
    36c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    36c4:	1b52      	subs	r2, r2, r5
    36c6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    36ca:	ed92 7a02 	vldr	s14, [r2, #8]
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    36ce:	4a5f      	ldr	r2, [pc, #380]	; (384c <_Min_Heap_Size+0x84c>)
					if (params[whichParam].realVal[0]  > 0.5f)
    36d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    36d4:	fb82 0203 	smull	r0, r2, r2, r3
    36d8:	17db      	asrs	r3, r3, #31
					if (params[whichParam].realVal[0]  > 0.5f)
    36da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    36de:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					if (params[whichParam].realVal[0]  > 0.5f)
    36e2:	f340 816e 	ble.w	39c2 <_Min_Heap_Size+0x9c2>
						oscsEnabled[whichOsc] = 1;
    36e6:	2101      	movs	r1, #1
    36e8:	4a59      	ldr	r2, [pc, #356]	; (3850 <_Min_Heap_Size+0x850>)
						oscOn[whichOsc] = 1;
    36ea:	485a      	ldr	r0, [pc, #360]	; (3854 <_Min_Heap_Size+0x854>)
						oscsEnabled[whichOsc] = 1;
    36ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						oscOn[whichOsc] = 1;
    36f0:	54c1      	strb	r1, [r0, r3]
						enabledCount += oscsEnabled[j];
    36f2:	e9d2 3100 	ldrd	r3, r1, [r2]
					oscAmpMult = oscAmpMultArray[enabledCount];
    36f6:	6892      	ldr	r2, [r2, #8]
						enabledCount += oscsEnabled[j];
    36f8:	440b      	add	r3, r1
					oscAmpMult = oscAmpMultArray[enabledCount];
    36fa:	4413      	add	r3, r2
    36fc:	4a56      	ldr	r2, [pc, #344]	; (3858 <_Min_Heap_Size+0x858>)
    36fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3702:	681a      	ldr	r2, [r3, #0]
    3704:	4b55      	ldr	r3, [pc, #340]	; (385c <_Min_Heap_Size+0x85c>)
    3706:	601a      	str	r2, [r3, #0]
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    3708:	2d87      	cmp	r5, #135	; 0x87
    370a:	d005      	beq.n	3718 <_Min_Heap_Size+0x718>
    370c:	2d8c      	cmp	r5, #140	; 0x8c
    370e:	d003      	beq.n	3718 <_Min_Heap_Size+0x718>
    3710:	2d91      	cmp	r5, #145	; 0x91
    3712:	d001      	beq.n	3718 <_Min_Heap_Size+0x718>
    3714:	2d96      	cmp	r5, #150	; 0x96
    3716:	d16e      	bne.n	37f6 <_Min_Heap_Size+0x7f6>
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    3718:	9b01      	ldr	r3, [sp, #4]
    371a:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    371e:	4a50      	ldr	r2, [pc, #320]	; (3860 <_Min_Heap_Size+0x860>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3720:	f04f 0a00 	mov.w	sl, #0
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    3724:	1b5b      	subs	r3, r3, r5
    3726:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    372a:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    372e:	f1a5 0387 	sub.w	r3, r5, #135	; 0x87
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    3732:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    3736:	fb82 1203 	smull	r1, r2, r2, r3
    373a:	17db      	asrs	r3, r3, #31
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    373c:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    3740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    3744:	ebc3 0862 	rsb	r8, r3, r2, asr #1
					setLFOShapes(LFOShape, whichLFO);
    3748:	ee17 0a90 	vmov	r0, s15
    374c:	4641      	mov	r1, r8
    374e:	f005 fc9f 	bl	9090 <__setLFOShapes_veneer>
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    3752:	4944      	ldr	r1, [pc, #272]	; (3864 <_Min_Heap_Size+0x864>)
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    3754:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    3758:	9703      	str	r7, [sp, #12]
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    375a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    375e:	f103 0984 	add.w	r9, r3, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    3762:	f103 0285 	add.w	r2, r3, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    3766:	3386      	adds	r3, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    3768:	eb01 0088 	add.w	r0, r1, r8, lsl #2
    376c:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
    3770:	f851 1028 	ldr.w	r1, [r1, r8, lsl #2]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    3774:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    3778:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    377c:	eb06 0b82 	add.w	fp, r6, r2, lsl #2
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    3780:	eb06 0283 	add.w	r2, r6, r3, lsl #2
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    3784:	ea4f 0389 	mov.w	r3, r9, lsl #2
    3788:	eb06 0989 	add.w	r9, r6, r9, lsl #2
    378c:	4617      	mov	r7, r2
    378e:	f103 0840 	add.w	r8, r3, #64	; 0x40
    3792:	f8c9 1014 	str.w	r1, [r9, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    3796:	6841      	ldr	r1, [r0, #4]
    3798:	44b0      	add	r8, r6
    379a:	f8cb 1014 	str.w	r1, [fp, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    379e:	6881      	ldr	r1, [r0, #8]
    37a0:	6151      	str	r1, [r2, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    37a2:	f103 0108 	add.w	r1, r3, #8
    37a6:	1871      	adds	r1, r6, r1
    37a8:	9101      	str	r1, [sp, #4]
    37aa:	f103 0124 	add.w	r1, r3, #36	; 0x24
    37ae:	1873      	adds	r3, r6, r1
    37b0:	9302      	str	r3, [sp, #8]
    37b2:	4623      	mov	r3, r4
    37b4:	462c      	mov	r4, r5
    37b6:	4655      	mov	r5, sl
    37b8:	469a      	mov	sl, r3
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    37ba:	9b01      	ldr	r3, [sp, #4]
    37bc:	4629      	mov	r1, r5
    37be:	f899 0018 	ldrb.w	r0, [r9, #24]
    37c2:	ecb3 0a01 	vldmia	r3!, {s0}
    37c6:	9301      	str	r3, [sp, #4]
    37c8:	f8d9 3014 	ldr.w	r3, [r9, #20]
    37cc:	4798      	blx	r3
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    37ce:	9b02      	ldr	r3, [sp, #8]
    37d0:	4629      	mov	r1, r5
    37d2:	f89b 0018 	ldrb.w	r0, [fp, #24]
    37d6:	ecb3 0a01 	vldmia	r3!, {s0}
    37da:	9302      	str	r3, [sp, #8]
    37dc:	f8db 3014 	ldr.w	r3, [fp, #20]
    37e0:	4798      	blx	r3
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    37e2:	ecb8 0a01 	vldmia	r8!, {s0}
    37e6:	4629      	mov	r1, r5
    37e8:	697b      	ldr	r3, [r7, #20]
    37ea:	7e38      	ldrb	r0, [r7, #24]
    37ec:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    37ee:	b1b5      	cbz	r5, 381e <_Min_Heap_Size+0x81e>
    37f0:	4625      	mov	r5, r4
    37f2:	9f03      	ldr	r7, [sp, #12]
    37f4:	4654      	mov	r4, sl
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    37f6:	2d01      	cmp	r5, #1
    37f8:	d968      	bls.n	38cc <_Min_Heap_Size+0x8cc>
				if (whichParam == FXOrder)
    37fa:	2d9a      	cmp	r5, #154	; 0x9a
    37fc:	d17e      	bne.n	38fc <_Min_Heap_Size+0x8fc>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    37fe:	4a1a      	ldr	r2, [pc, #104]	; (3868 <_Min_Heap_Size+0x868>)
    3800:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3804:	4b19      	ldr	r3, [pc, #100]	; (386c <_Min_Heap_Size+0x86c>)
    3806:	ed92 7a38 	vldr	s14, [r2, #224]	; 0xe0
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    380a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3812:	bfcc      	ite	gt
    3814:	2201      	movgt	r2, #1
    3816:	2200      	movle	r2, #0
    3818:	701a      	strb	r2, [r3, #0]
    381a:	f7ff b9e1 	b.w	2be0 <handleSPI+0x1c0>
    381e:	2501      	movs	r5, #1
    3820:	e7cb      	b.n	37ba <_Min_Heap_Size+0x7ba>
    3822:	bf00      	nop
    3824:	20005450 	.word	0x20005450
    3828:	3b808081 	.word	0x3b808081
    382c:	2000551c 	.word	0x2000551c
    3830:	200144fc 	.word	0x200144fc
    3834:	2001d148 	.word	0x2001d148
    3838:	2001d788 	.word	0x2001d788
    383c:	2001d2cc 	.word	0x2001d2cc
    3840:	00001901 	.word	0x00001901
    3844:	20014544 	.word	0x20014544
    3848:	fbffdffe 	.word	0xfbffdffe
    384c:	4ec4ec4f 	.word	0x4ec4ec4f
    3850:	200190d8 	.word	0x200190d8
    3854:	2001d568 	.word	0x2001d568
    3858:	20000ad8 	.word	0x20000ad8
    385c:	20000ad4 	.word	0x20000ad4
    3860:	66666667 	.word	0x66666667
    3864:	200186c4 	.word	0x200186c4
    3868:	2001a0e4 	.word	0x2001a0e4
    386c:	200166c1 	.word	0x200166c1
					bufferPos = 138;//first byte after name
    3870:	4e8c      	ldr	r6, [pc, #560]	; (3aa4 <_Min_Heap_Size+0xaa4>)
    3872:	238a      	movs	r3, #138	; 0x8a
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    3874:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 3aa8 <_Min_Heap_Size+0xaa8>
    3878:	f106 0c30 	add.w	ip, r6, #48	; 0x30
					bufferPos = 138;//first byte after name
    387c:	8013      	strh	r3, [r2, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    387e:	ecf6 7a01 	vldmia	r6!, {s15}
						buffer[bufferPos] = integerVersion >> 8;
    3882:	8815      	ldrh	r5, [r2, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    3884:	ee67 7a87 	vmul.f32	s15, s15, s14
						buffer[bufferPos+1] = integerVersion & 255;
    3888:	8811      	ldrh	r1, [r2, #0]
						bufferPos = bufferPos + 2;
    388a:	8813      	ldrh	r3, [r2, #0]
						buffer[bufferPos] = integerVersion >> 8;
    388c:	b2ad      	uxth	r5, r5
						buffer[bufferPos+1] = integerVersion & 255;
    388e:	fa10 f181 	uxtah	r1, r0, r1
					for (int i = 0; i < 12; i++)
    3892:	4566      	cmp	r6, ip
						bufferPos = bufferPos + 2;
    3894:	f103 0302 	add.w	r3, r3, #2
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    3898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
						bufferPos = bufferPos + 2;
    389c:	b29b      	uxth	r3, r3
    389e:	8013      	strh	r3, [r2, #0]
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    38a0:	ee17 3a90 	vmov	r3, s15
						buffer[bufferPos] = integerVersion >> 8;
    38a4:	f3c3 2807 	ubfx	r8, r3, #8, #8
    38a8:	f800 8005 	strb.w	r8, [r0, r5]
						buffer[bufferPos+1] = integerVersion & 255;
    38ac:	704b      	strb	r3, [r1, #1]
					for (int i = 0; i < 12; i++)
    38ae:	d1e6      	bne.n	387e <_Min_Heap_Size+0x87e>
					 presetNumberToLoad = presetNumberToSave;
    38b0:	f89a 3000 	ldrb.w	r3, [sl]
    38b4:	4a7d      	ldr	r2, [pc, #500]	; (3aac <_Min_Heap_Size+0xaac>)
    38b6:	b2db      	uxtb	r3, r3
    38b8:	497d      	ldr	r1, [pc, #500]	; (3ab0 <_Min_Heap_Size+0xab0>)
    38ba:	7013      	strb	r3, [r2, #0]
					 presetWaitingToParse = currentPresetSize; //use current stored preset size because that's how long the whole remaining buffer we didn't alter is
    38bc:	4b7d      	ldr	r3, [pc, #500]	; (3ab4 <_Min_Heap_Size+0xab4>)
    38be:	4a7e      	ldr	r2, [pc, #504]	; (3ab8 <_Min_Heap_Size+0xab8>)
    38c0:	681b      	ldr	r3, [r3, #0]
    38c2:	6013      	str	r3, [r2, #0]
					 presetWaitingToWrite = currentPresetSize;
    38c4:	4a7d      	ldr	r2, [pc, #500]	; (3abc <_Min_Heap_Size+0xabc>)
    38c6:	6013      	str	r3, [r2, #0]
    38c8:	f7ff b992 	b.w	2bf0 <handleSPI+0x1d0>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    38cc:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 3ac0 <_Min_Heap_Size+0xac0>
    38d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    38d4:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
    38d8:	edd6 5a02 	vldr	s11, [r6, #8]
    38dc:	ee67 7a87 	vmul.f32	s15, s15, s14
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    38e0:	4a78      	ldr	r2, [pc, #480]	; (3ac4 <_Min_Heap_Size+0xac4>)
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    38e2:	4b79      	ldr	r3, [pc, #484]	; (3ac8 <_Min_Heap_Size+0xac8>)
    38e4:	eef0 6a67 	vmov.f32	s13, s15
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    38e8:	edc2 7a00 	vstr	s15, [r2]
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    38ec:	eed5 6a87 	vfnms.f32	s13, s11, s14
    38f0:	eec6 7a26 	vdiv.f32	s15, s12, s13
    38f4:	edc3 7a00 	vstr	s15, [r3]
				if (whichParam == PedalControlsMaster)
    38f8:	f7ff b972 	b.w	2be0 <handleSPI+0x1c0>
    38fc:	2d9b      	cmp	r5, #155	; 0x9b
    38fe:	f47f a96f 	bne.w	2be0 <handleSPI+0x1c0>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    3902:	4a72      	ldr	r2, [pc, #456]	; (3acc <_Min_Heap_Size+0xacc>)
    3904:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3908:	4b71      	ldr	r3, [pc, #452]	; (3ad0 <_Min_Heap_Size+0xad0>)
    390a:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
    390e:	e77c      	b.n	380a <_Min_Heap_Size+0x80a>
				if ((whichParam == Filter1Type) || (whichParam == Filter2Type))
    3910:	2d60      	cmp	r5, #96	; 0x60
    3912:	d002      	beq.n	391a <_Min_Heap_Size+0x91a>
    3914:	2d66      	cmp	r5, #102	; 0x66
    3916:	f47f aef7 	bne.w	3708 <_Min_Heap_Size+0x708>
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    391a:	9b01      	ldr	r3, [sp, #4]
    391c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    3920:	496c      	ldr	r1, [pc, #432]	; (3ad4 <_Min_Heap_Size+0xad4>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3922:	f04f 0900 	mov.w	r9, #0
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    3926:	1b5b      	subs	r3, r3, r5
    3928:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    392c:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    3930:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    3934:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    3938:	fb81 2103 	smull	r2, r1, r1, r3
    393c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    3940:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    3944:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3948:	ee17 0a90 	vmov	r0, s15
    394c:	f005 fc54 	bl	91f8 <__setFilterTypes_veneer>
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    3950:	4861      	ldr	r0, [pc, #388]	; (3ad8 <_Min_Heap_Size+0xad8>)
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    3952:	eb01 0341 	add.w	r3, r1, r1, lsl #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    3956:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    395a:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    395e:	005b      	lsls	r3, r3, #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    3960:	f8dc 0004 	ldr.w	r0, [ip, #4]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    3964:	f103 0863 	add.w	r8, r3, #99	; 0x63
					int filterGainParamNum = Filter1Gain + (whichFilter * FilterParamsNum);
    3968:	3362      	adds	r3, #98	; 0x62
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    396a:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    396e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    3972:	ea4f 0a88 	mov.w	sl, r8, lsl #2
    3976:	eb06 0888 	add.w	r8, r6, r8, lsl #2
    397a:	f10a 0b08 	add.w	fp, sl, #8
    397e:	f1aa 0a14 	sub.w	sl, sl, #20
    3982:	f8c8 1014 	str.w	r1, [r8, #20]
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    3986:	eb06 0183 	add.w	r1, r6, r3, lsl #2
    398a:	44b3      	add	fp, r6
    398c:	009b      	lsls	r3, r3, #2
    398e:	44b2      	add	sl, r6
    3990:	6148      	str	r0, [r1, #20]
    3992:	9302      	str	r3, [sp, #8]
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    3994:	ecbb 0a01 	vldmia	fp!, {s0}
    3998:	4649      	mov	r1, r9
    399a:	f898 0018 	ldrb.w	r0, [r8, #24]
    399e:	f8d8 3014 	ldr.w	r3, [r8, #20]
    39a2:	4798      	blx	r3
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    39a4:	9b02      	ldr	r3, [sp, #8]
    39a6:	ecba 0a01 	vldmia	sl!, {s0}
    39aa:	4649      	mov	r1, r9
    39ac:	18f3      	adds	r3, r6, r3
    39ae:	695a      	ldr	r2, [r3, #20]
    39b0:	7e18      	ldrb	r0, [r3, #24]
    39b2:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    39b4:	f1b9 0f00 	cmp.w	r9, #0
    39b8:	f47f aea6 	bne.w	3708 <_Min_Heap_Size+0x708>
    39bc:	f04f 0901 	mov.w	r9, #1
    39c0:	e7e8      	b.n	3994 <_Min_Heap_Size+0x994>
						oscsEnabled[whichOsc] = 0;
    39c2:	4a46      	ldr	r2, [pc, #280]	; (3adc <_Min_Heap_Size+0xadc>)
    39c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    39c8:	e693      	b.n	36f2 <_Min_Heap_Size+0x6f2>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    39ca:	f1a3 0214 	sub.w	r2, r3, #20
    39ce:	f88c 8020 	strb.w	r8, [ip, #32]
    39d2:	2a03      	cmp	r2, #3
    39d4:	d851      	bhi.n	3a7a <_Min_Heap_Size+0xa7a>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    39d6:	4a42      	ldr	r2, [pc, #264]	; (3ae0 <_Min_Heap_Size+0xae0>)
    39d8:	2101      	movs	r1, #1
    39da:	441a      	add	r2, r3
    39dc:	f802 1c14 	strb.w	r1, [r2, #-20]
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    39e0:	f7ff bbc9 	b.w	3176 <_Min_Heap_Size+0x176>
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    39e4:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    39e8:	edda 7a02 	vldr	s15, [sl, #8]
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    39ec:	493d      	ldr	r1, [pc, #244]	; (3ae4 <_Min_Heap_Size+0xae4>)
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    39ee:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    39f2:	fb81 2103 	smull	r2, r1, r1, r3
    39f6:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    39f8:	fef8 7a67 	vrinta.f32	s15, s15
					setOscilllatorShapes(oscshape, whichOsc);
    39fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3a00:	ebc3 01a1 	rsb	r1, r3, r1, asr #2
    3a04:	ee17 0a90 	vmov	r0, s15
    3a08:	f005 fd86 	bl	9518 <__setOscilllatorShapes_veneer>
    3a0c:	f7ff bb0b 	b.w	3026 <_Min_Heap_Size+0x26>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    3a10:	ee07 3a90 	vmov	s15, r3
    3a14:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
    3a18:	ed9f 7a33 	vldr	s14, [pc, #204]	; 3ae8 <_Min_Heap_Size+0xae8>
    3a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3a20:	eb06 0343 	add.w	r3, r6, r3, lsl #1
    3a24:	4453      	add	r3, sl
    3a26:	ee67 7a87 	vmul.f32	s15, s15, s14
    3a2a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    3a2e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    3a32:	f7ff b8d5 	b.w	2be0 <handleSPI+0x1c0>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    3a36:	f1b9 0f03 	cmp.w	r9, #3
    3a3a:	d828      	bhi.n	3a8e <_Min_Heap_Size+0xa8e>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    3a3c:	f80c 5c14 	strb.w	r5, [ip, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    3a40:	e5f5      	b.n	362e <_Min_Heap_Size+0x62e>
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3a42:	4646      	mov	r6, r8
							mappings[whichMapping].destNumber = 255;
    3a44:	f809 3002 	strb.w	r3, [r9, r2]
						mappings[whichMapping].hookActive[whichSlot] = 0;
    3a48:	f88c 8048 	strb.w	r8, [ip, #72]	; 0x48
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    3a4c:	686b      	ldr	r3, [r5, #4]
    3a4e:	eb03 0886 	add.w	r8, r3, r6, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    3a52:	691b      	ldr	r3, [r3, #16]
    3a54:	ed98 0a00 	vldr	s0, [r8]
    3a58:	4798      	blx	r3
    3a5a:	ed88 0a02 	vstr	s0, [r8, #8]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    3a5e:	686b      	ldr	r3, [r5, #4]
    3a60:	4631      	mov	r1, r6
    3a62:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
    3a66:	695a      	ldr	r2, [r3, #20]
    3a68:	7e18      	ldrb	r0, [r3, #24]
    3a6a:	ed9c 0a02 	vldr	s0, [ip, #8]
    3a6e:	4790      	blx	r2
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3a70:	2e00      	cmp	r6, #0
    3a72:	f47f a8b5 	bne.w	2be0 <handleSPI+0x1c0>
    3a76:	2601      	movs	r6, #1
    3a78:	e7e8      	b.n	3a4c <_Min_Heap_Size+0xa4c>
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    3a7a:	2b02      	cmp	r3, #2
    3a7c:	f63f ab7b 	bhi.w	3176 <_Min_Heap_Size+0x176>
							oscOn[source - OSC_SOURCE_OFFSET] = 1;
    3a80:	4a1a      	ldr	r2, [pc, #104]	; (3aec <_Min_Heap_Size+0xaec>)
    3a82:	54d0      	strb	r0, [r2, r3]
    3a84:	f7ff bb77 	b.w	3176 <_Min_Heap_Size+0x176>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    3a88:	4c19      	ldr	r4, [pc, #100]	; (3af0 <_Min_Heap_Size+0xaf0>)
    3a8a:	6014      	str	r4, [r2, #0]
    3a8c:	e5d2      	b.n	3634 <_Min_Heap_Size+0x634>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    3a8e:	2b02      	cmp	r3, #2
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    3a90:	bf98      	it	ls
    3a92:	f808 5003 	strbls.w	r5, [r8, r3]
    3a96:	e5ca      	b.n	362e <_Min_Heap_Size+0x62e>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    3a98:	f1a3 0214 	sub.w	r2, r3, #20
    3a9c:	2a03      	cmp	r2, #3
    3a9e:	d99a      	bls.n	39d6 <_Min_Heap_Size+0x9d6>
    3aa0:	f7ff bb69 	b.w	3176 <_Min_Heap_Size+0x176>
    3aa4:	200053e0 	.word	0x200053e0
    3aa8:	47800000 	.word	0x47800000
    3aac:	2001a20e 	.word	0x2001a20e
    3ab0:	30043380 	.word	0x30043380
    3ab4:	20014500 	.word	0x20014500
    3ab8:	2001a214 	.word	0x2001a214
    3abc:	2001a218 	.word	0x2001a218
    3ac0:	42fe0000 	.word	0x42fe0000
    3ac4:	200190cc 	.word	0x200190cc
    3ac8:	200190c8 	.word	0x200190c8
    3acc:	2001a0e4 	.word	0x2001a0e4
    3ad0:	2001a1f4 	.word	0x2001a1f4
    3ad4:	2aaaaaab 	.word	0x2aaaaaab
    3ad8:	20016598 	.word	0x20016598
    3adc:	200190d8 	.word	0x200190d8
    3ae0:	2001d148 	.word	0x2001d148
    3ae4:	4ec4ec4f 	.word	0x4ec4ec4f
    3ae8:	37fffffc 	.word	0x37fffffc
    3aec:	2001d568 	.word	0x2001d568
    3af0:	200008b0 	.word	0x200008b0
    3af4:	f3af 8000 	nop.w
    3af8:	f3af 8000 	nop.w
    3afc:	f3af 8000 	nop.w

00003b00 <HAL_I2C_SlaveRxCpltCallback>:
	presetWaitingToParse = 4096;
    3b00:	4b02      	ldr	r3, [pc, #8]	; (3b0c <HAL_I2C_SlaveRxCpltCallback+0xc>)
    3b02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3b06:	601a      	str	r2, [r3, #0]
}
    3b08:	4770      	bx	lr
    3b0a:	bf00      	nop
    3b0c:	2001a214 	.word	0x2001a214
    3b10:	f3af 8000 	nop.w
    3b14:	f3af 8000 	nop.w
    3b18:	f3af 8000 	nop.w
    3b1c:	f3af 8000 	nop.w

00003b20 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    3b20:	4b01      	ldr	r3, [pc, #4]	; (3b28 <HAL_I2C_MasterTxCpltCallback+0x8>)
    3b22:	2200      	movs	r2, #0
    3b24:	701a      	strb	r2, [r3, #0]
}
    3b26:	4770      	bx	lr
    3b28:	200166c2 	.word	0x200166c2
    3b2c:	f3af 8000 	nop.w
    3b30:	f3af 8000 	nop.w
    3b34:	f3af 8000 	nop.w
    3b38:	f3af 8000 	nop.w
    3b3c:	f3af 8000 	nop.w

00003b40 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    3b40:	2100      	movs	r1, #0
	I2CErrors++;
    3b42:	4a05      	ldr	r2, [pc, #20]	; (3b58 <HAL_I2C_ErrorCallback+0x18>)
	i2cSending = 0;
    3b44:	4b05      	ldr	r3, [pc, #20]	; (3b5c <HAL_I2C_ErrorCallback+0x1c>)
	receivingI2C = 0;
    3b46:	4806      	ldr	r0, [pc, #24]	; (3b60 <HAL_I2C_ErrorCallback+0x20>)
	i2cSending = 0;
    3b48:	7019      	strb	r1, [r3, #0]
	I2CErrors++;
    3b4a:	7813      	ldrb	r3, [r2, #0]
	receivingI2C = 0;
    3b4c:	7001      	strb	r1, [r0, #0]
	I2CErrors++;
    3b4e:	3301      	adds	r3, #1
    3b50:	b2db      	uxtb	r3, r3
    3b52:	7013      	strb	r3, [r2, #0]
}
    3b54:	4770      	bx	lr
    3b56:	bf00      	nop
    3b58:	200144e4 	.word	0x200144e4
    3b5c:	200166c2 	.word	0x200166c2
    3b60:	2001a66c 	.word	0x2001a66c
    3b64:	f3af 8000 	nop.w
    3b68:	f3af 8000 	nop.w
    3b6c:	f3af 8000 	nop.w
    3b70:	f3af 8000 	nop.w
    3b74:	f3af 8000 	nop.w
    3b78:	f3af 8000 	nop.w
    3b7c:	f3af 8000 	nop.w

00003b80 <HAL_SPI_TxRxCpltCallback>:
{
    3b80:	b570      	push	{r4, r5, r6, lr}
	interrupted = 1;
    3b82:	4b2b      	ldr	r3, [pc, #172]	; (3c30 <HAL_SPI_TxRxCpltCallback+0xb0>)
    3b84:	2201      	movs	r2, #1
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    3b86:	4c2b      	ldr	r4, [pc, #172]	; (3c34 <HAL_SPI_TxRxCpltCallback+0xb4>)
	interrupted = 1;
    3b88:	701a      	strb	r2, [r3, #0]
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    3b8a:	f104 0540 	add.w	r5, r4, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    3b8e:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;

      __DSB();

      do {
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    3b92:	4b29      	ldr	r3, [pc, #164]	; (3c38 <HAL_SPI_TxRxCpltCallback+0xb8>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    3b94:	f104 0160 	add.w	r1, r4, #96	; 0x60
    3b98:	f104 0280 	add.w	r2, r4, #128	; 0x80
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    3b9c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    3ba0:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
    3ba4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    3ba8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3bac:	f3bf 8f6f 	isb	sy
	if ((SPI_LEVERS_RX[62] == 254) && (SPI_LEVERS_RX[63] == 253))
    3bb0:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    3bb4:	2bfe      	cmp	r3, #254	; 0xfe
    3bb6:	d103      	bne.n	3bc0 <HAL_SPI_TxRxCpltCallback+0x40>
    3bb8:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    3bbc:	2bfd      	cmp	r3, #253	; 0xfd
    3bbe:	d032      	beq.n	3c26 <HAL_SPI_TxRxCpltCallback+0xa6>
		HAL_SPI_Abort(&hspi1);
    3bc0:	4e1e      	ldr	r6, [pc, #120]	; (3c3c <HAL_SPI_TxRxCpltCallback+0xbc>)
    3bc2:	4630      	mov	r0, r6
    3bc4:	f005 fabc 	bl	9140 <__HAL_SPI_Abort_veneer>
		__HAL_RCC_SPI1_FORCE_RESET();
    3bc8:	4b1d      	ldr	r3, [pc, #116]	; (3c40 <HAL_SPI_TxRxCpltCallback+0xc0>)
    3bca:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3bce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    3bd2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		__HAL_RCC_SPI1_RELEASE_RESET();
    3bd6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3bda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    3bde:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		MX_SPI1_Init();
    3be2:	f005 fbad 	bl	9340 <__MX_SPI1_Init_veneer>
		__HAL_SPI_ENABLE(&hspi1);
    3be6:	6832      	ldr	r2, [r6, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    3be8:	4630      	mov	r0, r6
		__HAL_SPI_ENABLE(&hspi1);
    3bea:	6813      	ldr	r3, [r2, #0]
    3bec:	f043 0301 	orr.w	r3, r3, #1
    3bf0:	6013      	str	r3, [r2, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    3bf2:	2340      	movs	r3, #64	; 0x40
    3bf4:	4a13      	ldr	r2, [pc, #76]	; (3c44 <HAL_SPI_TxRxCpltCallback+0xc4>)
    3bf6:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    3bfa:	f005 fc99 	bl	9530 <__HAL_SPI_TransmitReceive_DMA_veneer>
		numResets++;
    3bfe:	4a12      	ldr	r2, [pc, #72]	; (3c48 <HAL_SPI_TxRxCpltCallback+0xc8>)
    3c00:	7813      	ldrb	r3, [r2, #0]
    3c02:	3301      	adds	r3, #1
    3c04:	b2db      	uxtb	r3, r3
    3c06:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    3c08:	f3bf 8f4f 	dsb	sy
    3c0c:	4b0a      	ldr	r3, [pc, #40]	; (3c38 <HAL_SPI_TxRxCpltCallback+0xb8>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    3c0e:	4a0f      	ldr	r2, [pc, #60]	; (3c4c <HAL_SPI_TxRxCpltCallback+0xcc>)
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    3c10:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    3c14:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    3c18:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    3c1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c20:	f3bf 8f6f 	isb	sy
}
    3c24:	bd70      	pop	{r4, r5, r6, pc}
		handleSPI(LEVER_BUFFER_SIZE);
    3c26:	2020      	movs	r0, #32
    3c28:	f7fe fefa 	bl	2a20 <handleSPI>
    3c2c:	e7ec      	b.n	3c08 <HAL_SPI_TxRxCpltCallback+0x88>
    3c2e:	bf00      	nop
    3c30:	200053c8 	.word	0x200053c8
    3c34:	30000800 	.word	0x30000800
    3c38:	e000ed00 	.word	0xe000ed00
    3c3c:	2001cc34 	.word	0x2001cc34
    3c40:	58024400 	.word	0x58024400
    3c44:	30000840 	.word	0x30000840
    3c48:	200190d5 	.word	0x200190d5
    3c4c:	30000820 	.word	0x30000820
    3c50:	f3af 8000 	nop.w
    3c54:	f3af 8000 	nop.w
    3c58:	f3af 8000 	nop.w
    3c5c:	f3af 8000 	nop.w

00003c60 <HAL_SPI_TxRxHalfCpltCallback>:
{
    3c60:	b570      	push	{r4, r5, r6, lr}
	interrupted = 1;
    3c62:	4b2b      	ldr	r3, [pc, #172]	; (3d10 <HAL_SPI_TxRxHalfCpltCallback+0xb0>)
    3c64:	2201      	movs	r2, #1
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    3c66:	4c2b      	ldr	r4, [pc, #172]	; (3d14 <HAL_SPI_TxRxHalfCpltCallback+0xb4>)
	interrupted = 1;
    3c68:	701a      	strb	r2, [r3, #0]
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    3c6a:	f104 0540 	add.w	r5, r4, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    3c6e:	f3bf 8f4f 	dsb	sy
    3c72:	4b29      	ldr	r3, [pc, #164]	; (3d18 <HAL_SPI_TxRxHalfCpltCallback+0xb8>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    3c74:	f104 0160 	add.w	r1, r4, #96	; 0x60
    3c78:	f104 0280 	add.w	r2, r4, #128	; 0x80
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    3c7c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    3c80:	f8c3 1270 	str.w	r1, [r3, #624]	; 0x270
    3c84:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    3c88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c8c:	f3bf 8f6f 	isb	sy
	if ((SPI_LEVERS_RX[30] == 254) && (SPI_LEVERS_RX[31] == 253))
    3c90:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
    3c94:	2bfe      	cmp	r3, #254	; 0xfe
    3c96:	d103      	bne.n	3ca0 <HAL_SPI_TxRxHalfCpltCallback+0x40>
    3c98:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
    3c9c:	2bfd      	cmp	r3, #253	; 0xfd
    3c9e:	d032      	beq.n	3d06 <HAL_SPI_TxRxHalfCpltCallback+0xa6>
		HAL_SPI_Abort(&hspi1);
    3ca0:	4e1e      	ldr	r6, [pc, #120]	; (3d1c <HAL_SPI_TxRxHalfCpltCallback+0xbc>)
    3ca2:	4630      	mov	r0, r6
    3ca4:	f005 fa4c 	bl	9140 <__HAL_SPI_Abort_veneer>
		__HAL_RCC_SPI1_FORCE_RESET();
    3ca8:	4b1d      	ldr	r3, [pc, #116]	; (3d20 <HAL_SPI_TxRxHalfCpltCallback+0xc0>)
    3caa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3cae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    3cb2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		__HAL_RCC_SPI1_RELEASE_RESET();
    3cb6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3cba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    3cbe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		MX_SPI1_Init();
    3cc2:	f005 fb3d 	bl	9340 <__MX_SPI1_Init_veneer>
		__HAL_SPI_ENABLE(&hspi1);
    3cc6:	6832      	ldr	r2, [r6, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    3cc8:	4630      	mov	r0, r6
		__HAL_SPI_ENABLE(&hspi1);
    3cca:	6813      	ldr	r3, [r2, #0]
    3ccc:	f043 0301 	orr.w	r3, r3, #1
    3cd0:	6013      	str	r3, [r2, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    3cd2:	2340      	movs	r3, #64	; 0x40
    3cd4:	4a13      	ldr	r2, [pc, #76]	; (3d24 <HAL_SPI_TxRxHalfCpltCallback+0xc4>)
    3cd6:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    3cda:	f005 fc29 	bl	9530 <__HAL_SPI_TransmitReceive_DMA_veneer>
		numResets++;
    3cde:	4a12      	ldr	r2, [pc, #72]	; (3d28 <HAL_SPI_TxRxHalfCpltCallback+0xc8>)
    3ce0:	7813      	ldrb	r3, [r2, #0]
    3ce2:	3301      	adds	r3, #1
    3ce4:	b2db      	uxtb	r3, r3
    3ce6:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    3ce8:	f3bf 8f4f 	dsb	sy
    3cec:	4b0a      	ldr	r3, [pc, #40]	; (3d18 <HAL_SPI_TxRxHalfCpltCallback+0xb8>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    3cee:	4a0f      	ldr	r2, [pc, #60]	; (3d2c <HAL_SPI_TxRxHalfCpltCallback+0xcc>)
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    3cf0:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    3cf4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
    3cf8:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    3cfc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d00:	f3bf 8f6f 	isb	sy
}
    3d04:	bd70      	pop	{r4, r5, r6, pc}
		handleSPI(0);
    3d06:	2000      	movs	r0, #0
    3d08:	f7fe fe8a 	bl	2a20 <handleSPI>
    3d0c:	e7ec      	b.n	3ce8 <HAL_SPI_TxRxHalfCpltCallback+0x88>
    3d0e:	bf00      	nop
    3d10:	200053c8 	.word	0x200053c8
    3d14:	30000800 	.word	0x30000800
    3d18:	e000ed00 	.word	0xe000ed00
    3d1c:	2001cc34 	.word	0x2001cc34
    3d20:	58024400 	.word	0x58024400
    3d24:	30000840 	.word	0x30000840
    3d28:	200190d5 	.word	0x200190d5
    3d2c:	30000820 	.word	0x30000820
    3d30:	f3af 8000 	nop.w
    3d34:	f3af 8000 	nop.w
    3d38:	f3af 8000 	nop.w
    3d3c:	f3af 8000 	nop.w

00003d40 <HAL_SPI_RxCpltCallback>:
{
    3d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hspi == &hspi5)
    3d42:	4f3b      	ldr	r7, [pc, #236]	; (3e30 <HAL_SPI_RxCpltCallback+0xf0>)
	interrupted = 1;
    3d44:	2201      	movs	r2, #1
    3d46:	4b3b      	ldr	r3, [pc, #236]	; (3e34 <HAL_SPI_RxCpltCallback+0xf4>)
	if (hspi == &hspi5)
    3d48:	4287      	cmp	r7, r0
	interrupted = 1;
    3d4a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    3d4c:	d000      	beq.n	3d50 <HAL_SPI_RxCpltCallback+0x10>
}
    3d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    3d50:	4939      	ldr	r1, [pc, #228]	; (3e38 <HAL_SPI_RxCpltCallback+0xf8>)
    3d52:	f101 0640 	add.w	r6, r1, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    3d56:	f3bf 8f4f 	dsb	sy
    3d5a:	4b38      	ldr	r3, [pc, #224]	; (3e3c <HAL_SPI_RxCpltCallback+0xfc>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    3d5c:	f101 0560 	add.w	r5, r1, #96	; 0x60
    3d60:	f101 0480 	add.w	r4, r1, #128	; 0x80
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    3d64:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
    3d68:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    3d6c:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    3d70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3d74:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    3d78:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
    3d7c:	2bfe      	cmp	r3, #254	; 0xfe
    3d7e:	d127      	bne.n	3dd0 <HAL_SPI_RxCpltCallback+0x90>
    3d80:	f891 307f 	ldrb.w	r3, [r1, #127]	; 0x7f
    3d84:	2bfd      	cmp	r3, #253	; 0xfd
    3d86:	d123      	bne.n	3dd0 <HAL_SPI_RxCpltCallback+0x90>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    3d88:	4b2d      	ldr	r3, [pc, #180]	; (3e40 <HAL_SPI_RxCpltCallback+0x100>)
    3d8a:	781f      	ldrb	r7, [r3, #0]
    3d8c:	b1bf      	cbz	r7, 3dbe <HAL_SPI_RxCpltCallback+0x7e>
    3d8e:	2300      	movs	r3, #0
    3d90:	482c      	ldr	r0, [pc, #176]	; (3e44 <HAL_SPI_RxCpltCallback+0x104>)
    3d92:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 3e58 <HAL_SPI_RxCpltCallback+0x118>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    3d96:	6802      	ldr	r2, [r0, #0]
    3d98:	441a      	add	r2, r3
    3d9a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3d9e:	f892 e061 	ldrb.w	lr, [r2, #97]	; 0x61
    3da2:	6802      	ldr	r2, [r0, #0]
    3da4:	441a      	add	r2, r3
    3da6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3daa:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
    3dae:	eb02 220e 	add.w	r2, r2, lr, lsl #8
    3db2:	b292      	uxth	r2, r2
    3db4:	f82c 2013 	strh.w	r2, [ip, r3, lsl #1]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    3db8:	3301      	adds	r3, #1
    3dba:	42bb      	cmp	r3, r7
    3dbc:	d1eb      	bne.n	3d96 <HAL_SPI_RxCpltCallback+0x56>
			newPluck = 1;
    3dbe:	4b22      	ldr	r3, [pc, #136]	; (3e48 <HAL_SPI_RxCpltCallback+0x108>)
    3dc0:	2201      	movs	r2, #1
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3dc2:	4922      	ldr	r1, [pc, #136]	; (3e4c <HAL_SPI_RxCpltCallback+0x10c>)
			newPluck = 1;
    3dc4:	601a      	str	r2, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3dc6:	2240      	movs	r2, #64	; 0x40
    3dc8:	4819      	ldr	r0, [pc, #100]	; (3e30 <HAL_SPI_RxCpltCallback+0xf0>)
    3dca:	f005 fb95 	bl	94f8 <__HAL_SPI_Receive_DMA_veneer>
    3dce:	e020      	b.n	3e12 <HAL_SPI_RxCpltCallback+0xd2>
			HAL_SPI_Abort(&hspi5);
    3dd0:	4817      	ldr	r0, [pc, #92]	; (3e30 <HAL_SPI_RxCpltCallback+0xf0>)
    3dd2:	f005 f9b5 	bl	9140 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    3dd6:	4b1e      	ldr	r3, [pc, #120]	; (3e50 <HAL_SPI_RxCpltCallback+0x110>)
    3dd8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3ddc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    3de0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    3de4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3de8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    3dec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    3df0:	f005 fafa 	bl	93e8 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    3df4:	683a      	ldr	r2, [r7, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3df6:	4915      	ldr	r1, [pc, #84]	; (3e4c <HAL_SPI_RxCpltCallback+0x10c>)
			__HAL_SPI_ENABLE(&hspi5);
    3df8:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3dfa:	480d      	ldr	r0, [pc, #52]	; (3e30 <HAL_SPI_RxCpltCallback+0xf0>)
			__HAL_SPI_ENABLE(&hspi5);
    3dfc:	f043 0301 	orr.w	r3, r3, #1
    3e00:	6013      	str	r3, [r2, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3e02:	2240      	movs	r2, #64	; 0x40
    3e04:	f005 fb78 	bl	94f8 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    3e08:	4a12      	ldr	r2, [pc, #72]	; (3e54 <HAL_SPI_RxCpltCallback+0x114>)
    3e0a:	7813      	ldrb	r3, [r2, #0]
    3e0c:	3301      	adds	r3, #1
    3e0e:	b2db      	uxtb	r3, r3
    3e10:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    3e12:	f3bf 8f4f 	dsb	sy
    3e16:	4b09      	ldr	r3, [pc, #36]	; (3e3c <HAL_SPI_RxCpltCallback+0xfc>)
    3e18:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
    3e1c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    3e20:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    3e24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e28:	f3bf 8f6f 	isb	sy
}
    3e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3e2e:	bf00      	nop
    3e30:	2001ccbc 	.word	0x2001ccbc
    3e34:	200053c8 	.word	0x200053c8
    3e38:	38000000 	.word	0x38000000
    3e3c:	e000ed00 	.word	0xe000ed00
    3e40:	20000694 	.word	0x20000694
    3e44:	200053bc 	.word	0x200053bc
    3e48:	200054e0 	.word	0x200054e0
    3e4c:	38000040 	.word	0x38000040
    3e50:	58024400 	.word	0x58024400
    3e54:	200190d5 	.word	0x200190d5
    3e58:	200143fc 	.word	0x200143fc
    3e5c:	f3af 8000 	nop.w

00003e60 <HAL_SPI_RxHalfCpltCallback>:
{
    3e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (hspi == &hspi5)
    3e62:	4f3b      	ldr	r7, [pc, #236]	; (3f50 <HAL_SPI_RxHalfCpltCallback+0xf0>)
	interrupted = 1;
    3e64:	2201      	movs	r2, #1
    3e66:	4b3b      	ldr	r3, [pc, #236]	; (3f54 <HAL_SPI_RxHalfCpltCallback+0xf4>)
	if (hspi == &hspi5)
    3e68:	4287      	cmp	r7, r0
	interrupted = 1;
    3e6a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    3e6c:	d000      	beq.n	3e70 <HAL_SPI_RxHalfCpltCallback+0x10>
}
    3e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    3e70:	4939      	ldr	r1, [pc, #228]	; (3f58 <HAL_SPI_RxHalfCpltCallback+0xf8>)
    3e72:	f101 0640 	add.w	r6, r1, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    3e76:	f3bf 8f4f 	dsb	sy
    3e7a:	4b38      	ldr	r3, [pc, #224]	; (3f5c <HAL_SPI_RxHalfCpltCallback+0xfc>)
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    3e7c:	f101 0560 	add.w	r5, r1, #96	; 0x60
    3e80:	f101 0480 	add.w	r4, r1, #128	; 0x80
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    3e84:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
    3e88:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    3e8c:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    3e90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3e94:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    3e98:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    3e9c:	2bfe      	cmp	r3, #254	; 0xfe
    3e9e:	d127      	bne.n	3ef0 <HAL_SPI_RxHalfCpltCallback+0x90>
    3ea0:	f891 305f 	ldrb.w	r3, [r1, #95]	; 0x5f
    3ea4:	2bfd      	cmp	r3, #253	; 0xfd
    3ea6:	d123      	bne.n	3ef0 <HAL_SPI_RxHalfCpltCallback+0x90>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    3ea8:	4b2d      	ldr	r3, [pc, #180]	; (3f60 <HAL_SPI_RxHalfCpltCallback+0x100>)
    3eaa:	781f      	ldrb	r7, [r3, #0]
    3eac:	b1bf      	cbz	r7, 3ede <HAL_SPI_RxHalfCpltCallback+0x7e>
    3eae:	2300      	movs	r3, #0
    3eb0:	482c      	ldr	r0, [pc, #176]	; (3f64 <HAL_SPI_RxHalfCpltCallback+0x104>)
    3eb2:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 3f78 <HAL_SPI_RxHalfCpltCallback+0x118>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    3eb6:	6802      	ldr	r2, [r0, #0]
    3eb8:	441a      	add	r2, r3
    3eba:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3ebe:	f892 e041 	ldrb.w	lr, [r2, #65]	; 0x41
    3ec2:	6802      	ldr	r2, [r0, #0]
    3ec4:	441a      	add	r2, r3
    3ec6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    3eca:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
    3ece:	eb02 220e 	add.w	r2, r2, lr, lsl #8
    3ed2:	b292      	uxth	r2, r2
    3ed4:	f82c 2013 	strh.w	r2, [ip, r3, lsl #1]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    3ed8:	3301      	adds	r3, #1
    3eda:	42bb      	cmp	r3, r7
    3edc:	d1eb      	bne.n	3eb6 <HAL_SPI_RxHalfCpltCallback+0x56>
			newPluck = 1;
    3ede:	4b22      	ldr	r3, [pc, #136]	; (3f68 <HAL_SPI_RxHalfCpltCallback+0x108>)
    3ee0:	2201      	movs	r2, #1
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3ee2:	4922      	ldr	r1, [pc, #136]	; (3f6c <HAL_SPI_RxHalfCpltCallback+0x10c>)
			newPluck = 1;
    3ee4:	601a      	str	r2, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3ee6:	2240      	movs	r2, #64	; 0x40
    3ee8:	4819      	ldr	r0, [pc, #100]	; (3f50 <HAL_SPI_RxHalfCpltCallback+0xf0>)
    3eea:	f005 fb05 	bl	94f8 <__HAL_SPI_Receive_DMA_veneer>
    3eee:	e020      	b.n	3f32 <HAL_SPI_RxHalfCpltCallback+0xd2>
			HAL_SPI_Abort(&hspi5);
    3ef0:	4817      	ldr	r0, [pc, #92]	; (3f50 <HAL_SPI_RxHalfCpltCallback+0xf0>)
    3ef2:	f005 f925 	bl	9140 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    3ef6:	4b1e      	ldr	r3, [pc, #120]	; (3f70 <HAL_SPI_RxHalfCpltCallback+0x110>)
    3ef8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3efc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    3f00:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    3f04:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3f08:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    3f0c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    3f10:	f005 fa6a 	bl	93e8 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    3f14:	683a      	ldr	r2, [r7, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3f16:	4915      	ldr	r1, [pc, #84]	; (3f6c <HAL_SPI_RxHalfCpltCallback+0x10c>)
			__HAL_SPI_ENABLE(&hspi5);
    3f18:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3f1a:	480d      	ldr	r0, [pc, #52]	; (3f50 <HAL_SPI_RxHalfCpltCallback+0xf0>)
			__HAL_SPI_ENABLE(&hspi5);
    3f1c:	f043 0301 	orr.w	r3, r3, #1
    3f20:	6013      	str	r3, [r2, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    3f22:	2240      	movs	r2, #64	; 0x40
    3f24:	f005 fae8 	bl	94f8 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    3f28:	4a12      	ldr	r2, [pc, #72]	; (3f74 <HAL_SPI_RxHalfCpltCallback+0x114>)
    3f2a:	7813      	ldrb	r3, [r2, #0]
    3f2c:	3301      	adds	r3, #1
    3f2e:	b2db      	uxtb	r3, r3
    3f30:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    3f32:	f3bf 8f4f 	dsb	sy
    3f36:	4b09      	ldr	r3, [pc, #36]	; (3f5c <HAL_SPI_RxHalfCpltCallback+0xfc>)
    3f38:	f8c3 6270 	str.w	r6, [r3, #624]	; 0x270
    3f3c:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
    3f40:	f8c3 4270 	str.w	r4, [r3, #624]	; 0x270
    3f44:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f48:	f3bf 8f6f 	isb	sy
}
    3f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f4e:	bf00      	nop
    3f50:	2001ccbc 	.word	0x2001ccbc
    3f54:	200053c8 	.word	0x200053c8
    3f58:	38000000 	.word	0x38000000
    3f5c:	e000ed00 	.word	0xe000ed00
    3f60:	20000694 	.word	0x20000694
    3f64:	200053bc 	.word	0x200053bc
    3f68:	200054e0 	.word	0x200054e0
    3f6c:	38000040 	.word	0x38000040
    3f70:	58024400 	.word	0x58024400
    3f74:	200190d5 	.word	0x200190d5
    3f78:	200143fc 	.word	0x200143fc
    3f7c:	00000000 	.word	0x00000000

00003f80 <audioInitString1>:
tSimpleLivingString3 livStr[NUM_STRINGS_PER_BOARD];
tPickupNonLinearity pu[NUM_STRINGS_PER_BOARD];
tExpSmooth pitchSmootherS[NUM_STRINGS_PER_BOARD];
float string1Defaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};
void __ATTR_ITCMRAM audioInitString1()
{
    3f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    3f84:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 406c <audioInitString1+0xec>
    3f88:	f899 3000 	ldrb.w	r3, [r9]
{
    3f8c:	ed2d 8b06 	vpush	{d8-d10}
	for (int v = 0; v < numStringsThisBoard; v++)
    3f90:	2b00      	cmp	r3, #0
    3f92:	d048      	beq.n	4026 <audioInitString1+0xa6>
    3f94:	4c27      	ldr	r4, [pc, #156]	; (4034 <audioInitString1+0xb4>)
    3f96:	2500      	movs	r5, #0
    3f98:	4f27      	ldr	r7, [pc, #156]	; (4038 <audioInitString1+0xb8>)
    3f9a:	4e28      	ldr	r6, [pc, #160]	; (403c <audioInitString1+0xbc>)
	{

		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    3f9c:	ed9f aa28 	vldr	s20, [pc, #160]	; 4040 <audioInitString1+0xc0>
    3fa0:	ed9f 8a28 	vldr	s16, [pc, #160]	; 4044 <audioInitString1+0xc4>
    3fa4:	eddf 9a28 	vldr	s19, [pc, #160]	; 4048 <audioInitString1+0xc8>
    3fa8:	ed9f 9a28 	vldr	s18, [pc, #160]	; 404c <audioInitString1+0xcc>
    3fac:	eddf 8a28 	vldr	s17, [pc, #160]	; 4050 <audioInitString1+0xd0>
												 0.01f, 0, &mediumPool);
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
		tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
		tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
		tPickupNonLinearity_init(&pu[v], &leaf);
    3fb0:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 4070 <audioInitString1+0xf0>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    3fb4:	4b27      	ldr	r3, [pc, #156]	; (4054 <audioInitString1+0xd4>)
    3fb6:	eef0 2a4a 	vmov.f32	s5, s20
    3fba:	eef0 1a48 	vmov.f32	s3, s16
    3fbe:	2200      	movs	r2, #0
    3fc0:	eeb0 1a69 	vmov.f32	s2, s19
    3fc4:	ed9f 2a1e 	vldr	s4, [pc, #120]	; 4040 <audioInitString1+0xc0>
    3fc8:	eef0 0a49 	vmov.f32	s1, s18
    3fcc:	2104      	movs	r1, #4
    3fce:	4620      	mov	r0, r4
    3fd0:	eeb0 0a68 	vmov.f32	s0, s17
    3fd4:	f005 f8fc 	bl	91d0 <__tSimpleLivingString3_initToPool_veneer>
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    3fd8:	4620      	mov	r0, r4
    3fda:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 4058 <audioInitString1+0xd8>
	for (int v = 0; v < numStringsThisBoard; v++)
    3fde:	3501      	adds	r5, #1
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    3fe0:	f005 fb06 	bl	95f0 <__tSimpleLivingString3_setTargetLev_veneer>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
    3fe4:	4620      	mov	r0, r4
    3fe6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 405c <audioInitString1+0xdc>
    3fea:	f005 f839 	bl	9060 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
    3fee:	eeb0 0a48 	vmov.f32	s0, s16
    3ff2:	4620      	mov	r0, r4
    3ff4:	f005 fb20 	bl	9638 <__tSimpleLivingString3_setLevStrength_veneer>
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
    3ff8:	4620      	mov	r0, r4
    3ffa:	2101      	movs	r1, #1
	for (int v = 0; v < numStringsThisBoard; v++)
    3ffc:	3404      	adds	r4, #4
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
    3ffe:	f005 fabf 	bl	9580 <__tSimpleLivingString3_setLevMode_veneer>
		tPickupNonLinearity_init(&pu[v], &leaf);
    4002:	4638      	mov	r0, r7
    4004:	4641      	mov	r1, r8
	for (int v = 0; v < numStringsThisBoard; v++)
    4006:	3704      	adds	r7, #4
		tPickupNonLinearity_init(&pu[v], &leaf);
    4008:	f005 fa52 	bl	94b0 <__tPickupNonLinearity_init_veneer>
		tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    400c:	4630      	mov	r0, r6
    400e:	4641      	mov	r1, r8
    4010:	eddf 0a13 	vldr	s1, [pc, #76]	; 4060 <audioInitString1+0xe0>
    4014:	ed9f 0a13 	vldr	s0, [pc, #76]	; 4064 <audioInitString1+0xe4>
	for (int v = 0; v < numStringsThisBoard; v++)
    4018:	3604      	adds	r6, #4
		tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    401a:	f005 f8f9 	bl	9210 <__tExpSmooth_init_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    401e:	f899 3000 	ldrb.w	r3, [r9]
    4022:	42ab      	cmp	r3, r5
    4024:	dcc6      	bgt.n	3fb4 <audioInitString1+0x34>
	}


	whichStringModelLoaded = String1Loaded;
    4026:	4b10      	ldr	r3, [pc, #64]	; (4068 <audioInitString1+0xe8>)
    4028:	2200      	movs	r2, #0
    402a:	701a      	strb	r2, [r3, #0]
}
    402c:	ecbd 8b06 	vpop	{d8-d10}
    4030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4034:	2001cd44 	.word	0x2001cd44
    4038:	2001cd54 	.word	0x2001cd54
    403c:	2001cd4c 	.word	0x2001cd4c
    4040:	3c23d70a 	.word	0x3c23d70a
    4044:	00000000 	.word	0x00000000
    4048:	3f7fff58 	.word	0x3f7fff58
    404c:	4684d000 	.word	0x4684d000
    4050:	435c0000 	.word	0x435c0000
    4054:	200054d8 	.word	0x200054d8
    4058:	3d40c0f0 	.word	0x3d40c0f0
    405c:	3cf753bf 	.word	0x3cf753bf
    4060:	3f19999a 	.word	0x3f19999a
    4064:	42800000 	.word	0x42800000
    4068:	20014451 	.word	0x20014451
    406c:	20000694 	.word	0x20000694
    4070:	20005484 	.word	0x20005484
    4074:	f3af 8000 	nop.w
    4078:	f3af 8000 	nop.w
    407c:	f3af 8000 	nop.w

00004080 <audioFreeString1>:


void __ATTR_ITCMRAM audioFreeString1()
{
    4080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    4084:	f8df 8044 	ldr.w	r8, [pc, #68]	; 40cc <audioFreeString1+0x4c>
    4088:	f898 3000 	ldrb.w	r3, [r8]
    408c:	b1ab      	cbz	r3, 40ba <audioFreeString1+0x3a>
    408e:	4f0c      	ldr	r7, [pc, #48]	; (40c0 <audioFreeString1+0x40>)
    4090:	2400      	movs	r4, #0
    4092:	4e0c      	ldr	r6, [pc, #48]	; (40c4 <audioFreeString1+0x44>)
    4094:	4d0c      	ldr	r5, [pc, #48]	; (40c8 <audioFreeString1+0x48>)
	{
		tExpSmooth_free(&pitchSmootherS[v]);
    4096:	4638      	mov	r0, r7
	for (int v = 0; v < numStringsThisBoard; v++)
    4098:	3401      	adds	r4, #1
		tExpSmooth_free(&pitchSmootherS[v]);
    409a:	f005 f8f1 	bl	9280 <__tExpSmooth_free_veneer>
		tSimpleLivingString3_free(&livStr[v]);
    409e:	4630      	mov	r0, r6
    40a0:	f005 fa0a 	bl	94b8 <__tSimpleLivingString3_free_veneer>
		tPickupNonLinearity_free(&pu[v]);
    40a4:	4628      	mov	r0, r5
    40a6:	f005 f833 	bl	9110 <__tPickupNonLinearity_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    40aa:	f898 3000 	ldrb.w	r3, [r8]
    40ae:	3704      	adds	r7, #4
    40b0:	3604      	adds	r6, #4
    40b2:	42a3      	cmp	r3, r4
    40b4:	f105 0504 	add.w	r5, r5, #4
    40b8:	dced      	bgt.n	4096 <audioFreeString1+0x16>
	}
}
    40ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40be:	bf00      	nop
    40c0:	2001cd4c 	.word	0x2001cd4c
    40c4:	2001cd44 	.word	0x2001cd44
    40c8:	2001cd54 	.word	0x2001cd54
    40cc:	20000694 	.word	0x20000694
    40d0:	f3af 8000 	nop.w
    40d4:	f3af 8000 	nop.w
    40d8:	f3af 8000 	nop.w
    40dc:	f3af 8000 	nop.w

000040e0 <audioSwitchToString1>:

void __ATTR_ITCMRAM audioSwitchToString1()
{
    40e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    40e4:	4c18      	ldr	r4, [pc, #96]	; (4148 <audioSwitchToString1+0x68>)
	//load string1 default params:
	for (int i = 0; i < 12; i++)
    40e6:	2500      	movs	r5, #0
    40e8:	4f18      	ldr	r7, [pc, #96]	; (414c <audioSwitchToString1+0x6c>)
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}

		knobFrozen[i] = 1;
    40ea:	f04f 0801 	mov.w	r8, #1
    40ee:	4e18      	ldr	r6, [pc, #96]	; (4150 <audioSwitchToString1+0x70>)
    40f0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 4160 <audioSwitchToString1+0x80>
    40f4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 4164 <audioSwitchToString1+0x84>
{
    40f8:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    40fc:	ed9f 8a15 	vldr	s16, [pc, #84]	; 4154 <audioSwitchToString1+0x74>
    4100:	eeb0 0a48 	vmov.f32	s0, s16
    4104:	4620      	mov	r0, r4
    4106:	f005 f973 	bl	93f0 <__tExpSmooth_setFactor_veneer>
		if (voice == 63)
    410a:	f8da 3000 	ldr.w	r3, [sl]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    410e:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
    4110:	3704      	adds	r7, #4
		if (voice == 63)
    4112:	2b3f      	cmp	r3, #63	; 0x3f
	for (int i = 0; i < 12; i++)
    4114:	f104 0404 	add.w	r4, r4, #4
    4118:	f106 0604 	add.w	r6, r6, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    411c:	bf0c      	ite	eq
    411e:	ed17 0a01 	vldreq	s0, [r7, #-4]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    4122:	ed16 0a01 	vldrne	s0, [r6, #-4]
    4126:	f005 f9eb 	bl	9500 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    412a:	f809 8005 	strb.w	r8, [r9, r5]
	for (int i = 0; i < 12; i++)
    412e:	3501      	adds	r5, #1
    4130:	2d0c      	cmp	r5, #12
    4132:	d1e5      	bne.n	4100 <audioSwitchToString1+0x20>
	}
	tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
}
    4134:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
    4138:	ed9f 0a07 	vldr	s0, [pc, #28]	; 4158 <audioSwitchToString1+0x78>
    413c:	4807      	ldr	r0, [pc, #28]	; (415c <audioSwitchToString1+0x7c>)
}
    413e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
    4142:	f005 ba69 	b.w	9618 <__tVZFilter_setFreq_veneer>
    4146:	bf00      	nop
    4148:	20005430 	.word	0x20005430
    414c:	200008b4 	.word	0x200008b4
    4150:	200186f8 	.word	0x200186f8
    4154:	3a83126f 	.word	0x3a83126f
    4158:	45504000 	.word	0x45504000
    415c:	200054e8 	.word	0x200054e8
    4160:	20014440 	.word	0x20014440
    4164:	200053cc 	.word	0x200053cc
    4168:	f3af 8000 	nop.w
    416c:	f3af 8000 	nop.w
    4170:	f3af 8000 	nop.w
    4174:	f3af 8000 	nop.w
    4178:	f3af 8000 	nop.w
    417c:	f3af 8000 	nop.w

00004180 <audioTickString1>:
}



float __ATTR_ITCMRAM audioTickString1(void)
{
    4180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
    4184:	4b9f      	ldr	r3, [pc, #636]	; (4404 <audioTickString1+0x284>)
    4186:	4ca0      	ldr	r4, [pc, #640]	; (4408 <audioTickString1+0x288>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    4188:	48a0      	ldr	r0, [pc, #640]	; (440c <audioTickString1+0x28c>)
    418a:	4ea1      	ldr	r6, [pc, #644]	; (4410 <audioTickString1+0x290>)
    418c:	4625      	mov	r5, r4
    418e:	f104 0930 	add.w	r9, r4, #48	; 0x30
{
    4192:	ed2d 8b0a 	vpush	{d8-d12}
    4196:	b087      	sub	sp, #28
	float note[numStringsThisBoard];
    4198:	781b      	ldrb	r3, [r3, #0]
{
    419a:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
    419c:	009b      	lsls	r3, r3, #2
    419e:	3307      	adds	r3, #7
    41a0:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    41a4:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    41a8:	f005 fa1a 	bl	95e0 <__tExpSmooth_tick_veneer>
    41ac:	eef0 8a40 	vmov.f32	s17, s0
	float note[numStringsThisBoard];
    41b0:	46e8      	mov	r8, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    41b2:	4630      	mov	r0, r6
	for (int i = 0; i < 12; i++)
    41b4:	3604      	adds	r6, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    41b6:	f005 fa13 	bl	95e0 <__tExpSmooth_tick_veneer>
    41ba:	eca5 0a01 	vstmia	r5!, {s0}
	for (int i = 0; i < 12; i++)
    41be:	454d      	cmp	r5, r9
    41c0:	d1f7      	bne.n	41b2 <audioTickString1+0x32>
	}
	pluckPos = knobScaled[9];

	for (int i = 0; i < numStringsThisBoard; i++)
    41c2:	4b90      	ldr	r3, [pc, #576]	; (4404 <audioTickString1+0x284>)
	pluckPos = knobScaled[9];
    41c4:	4a93      	ldr	r2, [pc, #588]	; (4414 <audioTickString1+0x294>)
    41c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
	for (int i = 0; i < numStringsThisBoard; i++)
    41c8:	781b      	ldrb	r3, [r3, #0]
	float temp = 0.0f;
    41ca:	ed9f ca93 	vldr	s24, [pc, #588]	; 4418 <audioTickString1+0x298>
	pluckPos = knobScaled[9];
    41ce:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    41d0:	2b00      	cmp	r3, #0
    41d2:	f000 80d4 	beq.w	437e <audioTickString1+0x1fe>
    41d6:	4b91      	ldr	r3, [pc, #580]	; (441c <audioTickString1+0x29c>)
	{
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
    41d8:	eeb0 9a4c 	vmov.f32	s18, s24
    41dc:	4a90      	ldr	r2, [pc, #576]	; (4420 <audioTickString1+0x2a0>)
	for (int i = 0; i < numStringsThisBoard; i++)
    41de:	2600      	movs	r6, #0
    41e0:	613b      	str	r3, [r7, #16]
		{
			decay = (knobScaled[10] * 800.0f) + 10.0f;
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
		tSimpleLivingString3_setDecay(&livStr[i], decay);
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    41e2:	60fa      	str	r2, [r7, #12]
    41e4:	4642      	mov	r2, r8
    41e6:	4b8f      	ldr	r3, [pc, #572]	; (4424 <audioTickString1+0x2a4>)
    41e8:	f8df a284 	ldr.w	sl, [pc, #644]	; 4470 <audioTickString1+0x2f0>
		if (note[i] > 127.0f)
    41ec:	eddf 9a8e 	vldr	s19, [pc, #568]	; 4428 <audioTickString1+0x2a8>
			note[i] = 64.0f;
    41f0:	eddf ba8e 	vldr	s23, [pc, #568]	; 442c <audioTickString1+0x2ac>
		float decay = 0.1f;
    41f4:	eddf aa8e 	vldr	s21, [pc, #568]	; 4430 <audioTickString1+0x2b0>
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    41f8:	ed9f ba8e 	vldr	s22, [pc, #568]	; 4434 <audioTickString1+0x2b4>
    41fc:	4d8e      	ldr	r5, [pc, #568]	; (4438 <audioTickString1+0x2b8>)
    41fe:	f8df 9274 	ldr.w	r9, [pc, #628]	; 4474 <audioTickString1+0x2f4>
    4202:	f8df b274 	ldr.w	fp, [pc, #628]	; 4478 <audioTickString1+0x2f8>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    4206:	ed9f aa8d 	vldr	s20, [pc, #564]	; 443c <audioTickString1+0x2bc>
    420a:	617b      	str	r3, [r7, #20]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    420c:	4b8c      	ldr	r3, [pc, #560]	; (4440 <audioTickString1+0x2c0>)
    420e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    4212:	ed93 8a00 	vldr	s16, [r3]
    4216:	693b      	ldr	r3, [r7, #16]
    4218:	ecf3 7a01 	vldmia	r3!, {s15}
    421c:	ee38 8a27 	vadd.f32	s16, s16, s15
    4220:	613b      	str	r3, [r7, #16]
    4222:	00b3      	lsls	r3, r6, #2
		if (note[i] < 0.0f)
    4224:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    4228:	eca2 8a01 	vstmia	r2!, {s16}
		if (note[i] < 0.0f)
    422c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4230:	f100 80da 	bmi.w	43e8 <audioTickString1+0x268>
		if (note[i] > 127.0f)
    4234:	eeb4 8ae9 	vcmpe.f32	s16, s19
    4238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    423c:	f340 80d9 	ble.w	43f2 <audioTickString1+0x272>
			note[i] = 127.0f;
    4240:	ed9f 8a79 	vldr	s16, [pc, #484]	; 4428 <audioTickString1+0x2a8>
    4244:	ed42 9a01 	vstr	s19, [r2, #-4]
		if (lsDecay[i])
    4248:	68f8      	ldr	r0, [r7, #12]
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    424a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
		float decay = 0.1f;
    424e:	eef0 ca6a 	vmov.f32	s25, s21
    4252:	ed02 8a01 	vstr	s16, [r2, #-4]
		if (lsDecay[i])
    4256:	f810 1b01 	ldrb.w	r1, [r0], #1
    425a:	60f8      	str	r0, [r7, #12]
    425c:	b129      	cbz	r1, 426a <audioTickString1+0xea>
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    425e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    4262:	eee7 7a0b 	vfma.f32	s15, s14, s22
    4266:	eef0 ca67 	vmov.f32	s25, s15
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    426a:	607a      	str	r2, [r7, #4]
    426c:	4628      	mov	r0, r5
    426e:	4a75      	ldr	r2, [pc, #468]	; (4444 <audioTickString1+0x2c4>)
    4270:	46a8      	mov	r8, r5
    4272:	ed94 0a08 	vldr	s0, [r4, #32]
	for (int i = 0; i < numStringsThisBoard; i++)
    4276:	3601      	adds	r6, #1
    4278:	4413      	add	r3, r2
    427a:	60bb      	str	r3, [r7, #8]
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    427c:	f004 ffac 	bl	91d8 <__tSimpleLivingString3_setPickupPoint_veneer>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    4280:	4628      	mov	r0, r5
    4282:	eeb0 0a6c 	vmov.f32	s0, s25
    4286:	f005 f8f7 	bl	9478 <__tSimpleLivingString3_setDecay_veneer>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    428a:	4628      	mov	r0, r5
    428c:	eeb0 0a4a 	vmov.f32	s0, s20
    4290:	f005 f85e 	bl	9350 <__tSimpleLivingString3_setDampFreq_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    4294:	eddf 7a6c 	vldr	s15, [pc, #432]	; 4448 <audioTickString1+0x2c8>
    4298:	ed94 0a00 	vldr	s0, [r4]
    429c:	4628      	mov	r0, r5
    429e:	ee20 0a27 	vmul.f32	s0, s0, s15
    42a2:	f005 f9c9 	bl	9638 <__tSimpleLivingString3_setLevStrength_veneer>

		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    42a6:	edd4 7a05 	vldr	s15, [r4, #20]
    42aa:	eddf 6a68 	vldr	s13, [pc, #416]	; 444c <audioTickString1+0x2cc>
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    42ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		livStr[i]->rippleDelay = knobScaled[11];
    42b2:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    42b6:	eeb0 0a48 	vmov.f32	s0, s16
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    42ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
    42be:	f855 0b04 	ldr.w	r0, [r5], #4
		livStr[i]->rippleDelay = knobScaled[11];
    42c2:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    42c6:	ee37 6a87 	vadd.f32	s12, s15, s14
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    42ca:	edc0 7a19 	vstr	s15, [r0, #100]	; 0x64
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    42ce:	eec7 6a06 	vdiv.f32	s13, s14, s12
    42d2:	edc0 6a1b 	vstr	s13, [r0, #108]	; 0x6c
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    42d6:	f004 feff 	bl	90d8 <__mtof_veneer>
    42da:	4648      	mov	r0, r9
    42dc:	f005 f948 	bl	9570 <__tExpSmooth_setDest_veneer>
		float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    42e0:	4648      	mov	r0, r9
    42e2:	f005 f97d 	bl	95e0 <__tExpSmooth_tick_veneer>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    42e6:	4640      	mov	r0, r8
    42e8:	f005 f99e 	bl	9628 <__tSimpleLivingString3_setFreq_veneer>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    42ec:	4b58      	ldr	r3, [pc, #352]	; (4450 <audioTickString1+0x2d0>)
    42ee:	eddb 7a00 	vldr	s15, [fp]
	for (int i = 0; i < numStringsThisBoard; i++)
    42f2:	f109 0904 	add.w	r9, r9, #4
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    42f6:	edd3 6a00 	vldr	s13, [r3]
		if (barDelta > 0.2f)
    42fa:	ed9f 7a56 	vldr	s14, [pc, #344]	; 4454 <audioTickString1+0x2d4>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    42fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
		{
			barDelta = 0.0f; //to avoid noise on open string glitches
		}
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    4302:	68bb      	ldr	r3, [r7, #8]
    4304:	4618      	mov	r0, r3
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    4306:	eeb0 0ae7 	vabs.f32	s0, s15
			barDelta = 0.0f; //to avoid noise on open string glitches
    430a:	eeb4 0a47 	vcmp.f32	s0, s14
    430e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4312:	fe39 0a00 	vselgt.f32	s0, s18, s0
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    4316:	f005 f92b 	bl	9570 <__tExpSmooth_setDest_veneer>
		barDelta = tExpSmooth_tick(&barSlideSmoother[i]);
    431a:	68bb      	ldr	r3, [r7, #8]
    431c:	4618      	mov	r0, r3
    431e:	f005 f95f 	bl	95e0 <__tExpSmooth_tick_veneer>
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    4322:	4650      	mov	r0, sl
    4324:	f005 f93c 	bl	95a0 <__tEnvelopeFollower_tick_veneer>
		prevBarInMIDI[0] = barInMIDI[0];
    4328:	f8db 3000 	ldr.w	r3, [fp]
    432c:	4a48      	ldr	r2, [pc, #288]	; (4450 <audioTickString1+0x2d0>)
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    432e:	eeb0 8a40 	vmov.f32	s16, s0
		//tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));

		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    4332:	4849      	ldr	r0, [pc, #292]	; (4458 <audioTickString1+0x2d8>)
	for (int i = 0; i < numStringsThisBoard; i++)
    4334:	f10a 0a04 	add.w	sl, sl, #4
		prevBarInMIDI[0] = barInMIDI[0];
    4338:	6013      	str	r3, [r2, #0]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    433a:	f005 f8a5 	bl	9488 <__tNoise_tick_veneer>
    433e:	4847      	ldr	r0, [pc, #284]	; (445c <audioTickString1+0x2dc>)
    4340:	f005 f8a6 	bl	9490 <__tVZFilter_tickEfficient_veneer>
		//filtNoise = tVZFilter_tickEfficient(&noiseFilt2, filtNoise);
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    4344:	ee28 8a00 	vmul.f32	s16, s16, s0
    4348:	edd4 7a01 	vldr	s15, [r4, #4]
    434c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0

		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    4350:	4640      	mov	r0, r8
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    4352:	ee28 8a27 	vmul.f32	s16, s16, s15
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    4356:	ee28 0a00 	vmul.f32	s0, s16, s0
    435a:	f004 fef9 	bl	9150 <__tSimpleLivingString3_tick_veneer>
    435e:	f8d7 8014 	ldr.w	r8, [r7, #20]
    4362:	4640      	mov	r0, r8
    4364:	f005 f808 	bl	9378 <__tPickupNonLinearity_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    4368:	4643      	mov	r3, r8
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    436a:	ee3c ca00 	vadd.f32	s24, s24, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    436e:	687a      	ldr	r2, [r7, #4]
    4370:	3304      	adds	r3, #4
    4372:	617b      	str	r3, [r7, #20]
    4374:	4b23      	ldr	r3, [pc, #140]	; (4404 <audioTickString1+0x284>)
    4376:	781b      	ldrb	r3, [r3, #0]
    4378:	42b3      	cmp	r3, r6
    437a:	f73f af47 	bgt.w	420c <audioTickString1+0x8c>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    437e:	ed9f 0a38 	vldr	s0, [pc, #224]	; 4460 <audioTickString1+0x2e0>
    4382:	eddf 7a38 	vldr	s15, [pc, #224]	; 4464 <audioTickString1+0x2e4>
    4386:	eef0 0a40 	vmov.f32	s1, s0
    438a:	ed9f 1a27 	vldr	s2, [pc, #156]	; 4428 <audioTickString1+0x2a8>
    438e:	eee8 0aa7 	vfma.f32	s1, s17, s15
    4392:	f005 f961 	bl	9658 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
    4396:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp = input;
	temp *= outVol * masterVolFromBrain;
    439a:	4933      	ldr	r1, [pc, #204]	; (4468 <audioTickString1+0x2e8>)
	float omAlpha = 1.0f - alpha;
    439c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    43a0:	4a32      	ldr	r2, [pc, #200]	; (446c <audioTickString1+0x2ec>)

	return temp;
}
    43a2:	371c      	adds	r7, #28
	int volIdxInt = (int) volIdx;
    43a4:	ee17 3a90 	vmov	r3, s15
	temp *= outVol * masterVolFromBrain;
    43a8:	edd1 6a00 	vldr	s13, [r1]
	float alpha = volIdx-volIdxInt;
    43ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    43b0:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    43b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    43b6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    43ba:	ee70 7a67 	vsub.f32	s15, s0, s15
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    43be:	ed93 6a00 	vldr	s12, [r3]
    43c2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    43c6:	ee37 7a67 	vsub.f32	s14, s14, s15
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    43ca:	edd2 5a00 	vldr	s11, [r2]
    43ce:	ee27 0aa5 	vmul.f32	s0, s15, s11
    43d2:	eea6 0a07 	vfma.f32	s0, s12, s14
	temp *= outVol * masterVolFromBrain;
    43d6:	ee20 0a26 	vmul.f32	s0, s0, s13
    43da:	ee20 0a0c 	vmul.f32	s0, s0, s24
}
    43de:	46bd      	mov	sp, r7
    43e0:	ecbd 8b0a 	vpop	{d8-d12}
    43e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			note[i] = 0.0f;
    43e8:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 4418 <audioTickString1+0x298>
    43ec:	ed02 9a01 	vstr	s18, [r2, #-4]
		if (isnan(note[i]))
    43f0:	e72a      	b.n	4248 <audioTickString1+0xc8>
			note[i] = 64.0f;
    43f2:	eeb4 8a48 	vcmp.f32	s16, s16
    43f6:	ed02 8a01 	vstr	s16, [r2, #-4]
    43fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    43fe:	fe1b 8a88 	vselvs.f32	s16, s23, s16
    4402:	e721      	b.n	4248 <audioTickString1+0xc8>
    4404:	20000694 	.word	0x20000694
    4408:	200053e0 	.word	0x200053e0
    440c:	2001444c 	.word	0x2001444c
    4410:	20005430 	.word	0x20005430
    4414:	20000698 	.word	0x20000698
    4418:	00000000 	.word	0x00000000
    441c:	2001441c 	.word	0x2001441c
    4420:	200054d4 	.word	0x200054d4
    4424:	2001cd54 	.word	0x2001cd54
    4428:	42fe0000 	.word	0x42fe0000
    442c:	42800000 	.word	0x42800000
    4430:	3dcccccd 	.word	0x3dcccccd
    4434:	44480000 	.word	0x44480000
    4438:	2001cd44 	.word	0x2001cd44
    443c:	46768933 	.word	0x46768933
    4440:	20014414 	.word	0x20014414
    4444:	20001394 	.word	0x20001394
    4448:	3d108950 	.word	0x3d108950
    444c:	bcf5c28f 	.word	0xbcf5c28f
    4450:	20005548 	.word	0x20005548
    4454:	3e4ccccd 	.word	0x3e4ccccd
    4458:	200054dc 	.word	0x200054dc
    445c:	200054e8 	.word	0x200054e8
    4460:	423c0000 	.word	0x423c0000
    4464:	42a00000 	.word	0x42a00000
    4468:	2000068c 	.word	0x2000068c
    446c:	200006a0 	.word	0x200006a0
    4470:	2000138c 	.word	0x2000138c
    4474:	2001cd4c 	.word	0x2001cd4c
    4478:	20001384 	.word	0x20001384
    447c:	f3af 8000 	nop.w

00004480 <audioFrameString1>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    4480:	4a81      	ldr	r2, [pc, #516]	; (4688 <audioFrameString1+0x208>)
	if (resetStringInputs)
    4482:	4b82      	ldr	r3, [pc, #520]	; (468c <audioFrameString1+0x20c>)
{
    4484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4488:	ed2d 8b06 	vpush	{d8-d10}
	uint32_t tempCountFrame = DWT->CYCCNT;
    448c:	f8d2 b004 	ldr.w	fp, [r2, #4]
{
    4490:	b083      	sub	sp, #12
	if (resetStringInputs)
    4492:	781a      	ldrb	r2, [r3, #0]
{
    4494:	4605      	mov	r5, r0
	if (resetStringInputs)
    4496:	2a00      	cmp	r2, #0
    4498:	f040 80c9 	bne.w	462e <audioFrameString1+0x1ae>
    449c:	4f7c      	ldr	r7, [pc, #496]	; (4690 <audioFrameString1+0x210>)
	if (newPluck)
    449e:	683b      	ldr	r3, [r7, #0]
    44a0:	2b00      	cmp	r3, #0
    44a2:	f000 8091 	beq.w	45c8 <audioFrameString1+0x148>
		for (int i = 0; i < numStringsThisBoard; i++)
    44a6:	4a7b      	ldr	r2, [pc, #492]	; (4694 <audioFrameString1+0x214>)
    44a8:	7813      	ldrb	r3, [r2, #0]
    44aa:	2b00      	cmp	r3, #0
    44ac:	f000 808a 	beq.w	45c4 <audioFrameString1+0x144>
    44b0:	f8df 8234 	ldr.w	r8, [pc, #564]	; 46e8 <audioFrameString1+0x268>
    44b4:	2400      	movs	r4, #0
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    44b6:	ed9f 9a78 	vldr	s18, [pc, #480]	; 4698 <audioFrameString1+0x218>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    44ba:	eddf 8a78 	vldr	s17, [pc, #480]	; 469c <audioFrameString1+0x21c>
				if (note > 127.0f)
    44be:	eddf 9a78 	vldr	s19, [pc, #480]	; 46a0 <audioFrameString1+0x220>
					note = 64.0f;
    44c2:	ed9f aa78 	vldr	s20, [pc, #480]	; 46a4 <audioFrameString1+0x224>
    44c6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 46e4 <audioFrameString1+0x264>
    44ca:	f8df a220 	ldr.w	sl, [pc, #544]	; 46ec <audioFrameString1+0x26c>
    44ce:	4e76      	ldr	r6, [pc, #472]	; (46a8 <audioFrameString1+0x228>)
    44d0:	4b76      	ldr	r3, [pc, #472]	; (46ac <audioFrameString1+0x22c>)
				float note = stringMIDIPitches[i] + stringOctave[i];
    44d2:	9500      	str	r5, [sp, #0]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    44d4:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
    44d8:	b289      	uxth	r1, r1
    44da:	2900      	cmp	r1, #0
    44dc:	f040 80b9 	bne.w	4652 <audioFrameString1+0x1d2>
    44e0:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
    44e4:	b289      	uxth	r1, r1
    44e6:	2900      	cmp	r1, #0
    44e8:	f000 80b3 	beq.w	4652 <audioFrameString1+0x1d2>
				stringOctave[i] = octave;
    44ec:	4970      	ldr	r1, [pc, #448]	; (46b0 <audioFrameString1+0x230>)
				float note = stringMIDIPitches[i] + stringOctave[i];
    44ee:	00a5      	lsls	r5, r4, #2
				stringOctave[i] = octave;
    44f0:	ed91 0a00 	vldr	s0, [r1]
				float note = stringMIDIPitches[i] + stringOctave[i];
    44f4:	496f      	ldr	r1, [pc, #444]	; (46b4 <audioFrameString1+0x234>)
				stringOctave[i] = octave;
    44f6:	ed8a 0a00 	vstr	s0, [sl]
				float note = stringMIDIPitches[i] + stringOctave[i];
    44fa:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    44fe:	edd1 7a00 	vldr	s15, [r1]
    4502:	ee30 0a27 	vadd.f32	s0, s0, s15
				if (note < 0.0f)
    4506:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    450e:	f100 80b1 	bmi.w	4674 <audioFrameString1+0x1f4>
				if (note > 127.0f)
    4512:	eeb4 0ae9 	vcmpe.f32	s0, s19
    4516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    451a:	f340 80ae 	ble.w	467a <audioFrameString1+0x1fa>
					note = 127.0f;
    451e:	ed9f 0a60 	vldr	s0, [pc, #384]	; 46a0 <audioFrameString1+0x220>
				tExpSmooth_setValAndDest(&pitchSmootherS[i], mtof(note));
    4522:	f004 fdd9 	bl	90d8 <__mtof_veneer>
    4526:	4640      	mov	r0, r8
    4528:	f004 ffea 	bl	9500 <__tExpSmooth_setValAndDest_veneer>
				float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    452c:	4640      	mov	r0, r8
    452e:	f005 f857 	bl	95e0 <__tExpSmooth_tick_veneer>
				tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    4532:	4861      	ldr	r0, [pc, #388]	; (46b8 <audioFrameString1+0x238>)
    4534:	4428      	add	r0, r5
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    4536:	4d61      	ldr	r5, [pc, #388]	; (46bc <audioFrameString1+0x23c>)
				tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    4538:	9001      	str	r0, [sp, #4]
    453a:	f005 f875 	bl	9628 <__tSimpleLivingString3_setFreq_veneer>
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    453e:	4960      	ldr	r1, [pc, #384]	; (46c0 <audioFrameString1+0x240>)
    4540:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    4544:	f895 e000 	ldrb.w	lr, [r5]
    4548:	eeb0 0a49 	vmov.f32	s0, s18
    454c:	ed91 7a02 	vldr	s14, [r1, #8]
    4550:	495c      	ldr	r1, [pc, #368]	; (46c4 <audioFrameString1+0x244>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4552:	4b56      	ldr	r3, [pc, #344]	; (46ac <audioFrameString1+0x22c>)
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    4554:	ee71 0a47 	vsub.f32	s1, s2, s14
    4558:	eb01 0c8e 	add.w	ip, r1, lr, lsl #2
    455c:	495a      	ldr	r1, [pc, #360]	; (46c8 <audioFrameString1+0x248>)
    455e:	eddc 7a00 	vldr	s15, [ip]
    4562:	edd1 6a00 	vldr	s13, [r1]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4566:	f833 c014 	ldrh.w	ip, [r3, r4, lsl #1]
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    456a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				float amplitz = stringInputs[i] * 0.000015259021897f;
    456e:	fa1f f38c 	uxth.w	r3, ip
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    4572:	ee60 0aa6 	vmul.f32	s1, s1, s13
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4576:	ee08 3a10 	vmov	s16, r3
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    457a:	eee7 0a87 	vfma.f32	s1, s15, s14
    457e:	f005 f86b 	bl	9658 <__LEAF_clip_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4582:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    4586:	eef0 0a40 	vmov.f32	s1, s0
    458a:	9801      	ldr	r0, [sp, #4]
    458c:	ee28 0a28 	vmul.f32	s0, s16, s17
    4590:	f004 ff12 	bl	93b8 <__tSimpleLivingString3_pluck_veneer>
				currentRandom++;
    4594:	7828      	ldrb	r0, [r5, #0]
				lsDecay[i] = 1;
    4596:	2101      	movs	r1, #1
			{
    4598:	4b44      	ldr	r3, [pc, #272]	; (46ac <audioFrameString1+0x22c>)
				currentRandom++;
    459a:	3001      	adds	r0, #1
			{
    459c:	4a3d      	ldr	r2, [pc, #244]	; (4694 <audioFrameString1+0x214>)
				lsDecay[i] = 1;
    459e:	f889 1000 	strb.w	r1, [r9]
				currentRandom++;
    45a2:	7028      	strb	r0, [r5, #0]
			previousStringInputs[i] = stringInputs[i];
    45a4:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    45a8:	f108 0804 	add.w	r8, r8, #4
    45ac:	f109 0901 	add.w	r9, r9, #1
    45b0:	f10a 0a04 	add.w	sl, sl, #4
			previousStringInputs[i] = stringInputs[i];
    45b4:	b289      	uxth	r1, r1
    45b6:	f826 1014 	strh.w	r1, [r6, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    45ba:	3401      	adds	r4, #1
    45bc:	7811      	ldrb	r1, [r2, #0]
    45be:	42a1      	cmp	r1, r4
    45c0:	dc88      	bgt.n	44d4 <audioFrameString1+0x54>
    45c2:	9d00      	ldr	r5, [sp, #0]
		newPluck = 0;
    45c4:	2300      	movs	r3, #0
    45c6:	603b      	str	r3, [r7, #0]
    45c8:	4c40      	ldr	r4, [pc, #256]	; (46cc <audioFrameString1+0x24c>)
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    45ca:	ed9f 8a41 	vldr	s16, [pc, #260]	; 46d0 <audioFrameString1+0x250>
    45ce:	f504 7300 	add.w	r3, r4, #512	; 0x200
    45d2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    45d6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    45da:	f7ff fdd1 	bl	4180 <audioTickString1>
    45de:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    45e2:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    45e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    45e8:	42ac      	cmp	r4, r5
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    45ea:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[iplusbuffer + 1] = current_sample;
    45ee:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    45f2:	d1f2      	bne.n	45da <audioFrameString1+0x15a>
	if (switchStrings)
    45f4:	4c37      	ldr	r4, [pc, #220]	; (46d4 <audioFrameString1+0x254>)
    45f6:	6823      	ldr	r3, [r4, #0]
    45f8:	2b00      	cmp	r3, #0
    45fa:	d137      	bne.n	466c <audioFrameString1+0x1ec>
	switchStrings = 0;
    45fc:	2200      	movs	r2, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    45fe:	4b22      	ldr	r3, [pc, #136]	; (4688 <audioFrameString1+0x208>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4600:	4835      	ldr	r0, [pc, #212]	; (46d8 <audioFrameString1+0x258>)
	switchStrings = 0;
    4602:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    4604:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4606:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    460a:	eba3 030b 	sub.w	r3, r3, fp
    460e:	4933      	ldr	r1, [pc, #204]	; (46dc <audioFrameString1+0x25c>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4610:	4a33      	ldr	r2, [pc, #204]	; (46e0 <audioFrameString1+0x260>)
    4612:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    4616:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4618:	eef8 7a67 	vcvt.f32.u32	s15, s15
    461c:	ee67 7a87 	vmul.f32	s15, s15, s14
    4620:	edc2 7a00 	vstr	s15, [r2]
}
    4624:	b003      	add	sp, #12
    4626:	ecbd 8b06 	vpop	{d8-d10}
    462a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    462e:	4a19      	ldr	r2, [pc, #100]	; (4694 <audioFrameString1+0x214>)
    4630:	7811      	ldrb	r1, [r2, #0]
    4632:	b141      	cbz	r1, 4646 <audioFrameString1+0x1c6>
			lsDecay[i] = 0;
    4634:	2200      	movs	r2, #0
    4636:	482b      	ldr	r0, [pc, #172]	; (46e4 <audioFrameString1+0x264>)
			previousStringInputs[i] = 0;
    4638:	4e1b      	ldr	r6, [pc, #108]	; (46a8 <audioFrameString1+0x228>)
		for (int i = 0; i < numStringsThisBoard; i++)
    463a:	2901      	cmp	r1, #1
			lsDecay[i] = 0;
    463c:	7002      	strb	r2, [r0, #0]
			previousStringInputs[i] = 0;
    463e:	8032      	strh	r2, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    4640:	d001      	beq.n	4646 <audioFrameString1+0x1c6>
			lsDecay[i] = 0;
    4642:	7042      	strb	r2, [r0, #1]
			previousStringInputs[i] = 0;
    4644:	8072      	strh	r2, [r6, #2]
		resetStringInputs = 0;
    4646:	2200      	movs	r2, #0
		newPluck = 1;
    4648:	4f11      	ldr	r7, [pc, #68]	; (4690 <audioFrameString1+0x210>)
		resetStringInputs = 0;
    464a:	701a      	strb	r2, [r3, #0]
		newPluck = 1;
    464c:	2301      	movs	r3, #1
    464e:	603b      	str	r3, [r7, #0]
    4650:	e725      	b.n	449e <audioFrameString1+0x1e>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    4652:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
    4656:	b289      	uxth	r1, r1
    4658:	2900      	cmp	r1, #0
    465a:	d0a3      	beq.n	45a4 <audioFrameString1+0x124>
    465c:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
    4660:	b289      	uxth	r1, r1
    4662:	2900      	cmp	r1, #0
    4664:	d19e      	bne.n	45a4 <audioFrameString1+0x124>
				lsDecay[i] = 0;
    4666:	f889 1000 	strb.w	r1, [r9]
    466a:	e79b      	b.n	45a4 <audioFrameString1+0x124>
		switchStringModel(switchStrings);
    466c:	6820      	ldr	r0, [r4, #0]
    466e:	f7fc fe77 	bl	1360 <switchStringModel>
    4672:	e7c3      	b.n	45fc <audioFrameString1+0x17c>
					note = 0.0f;
    4674:	ed9f 0a08 	vldr	s0, [pc, #32]	; 4698 <audioFrameString1+0x218>
    4678:	e753      	b.n	4522 <audioFrameString1+0xa2>
					note = 64.0f;
    467a:	eeb4 0a40 	vcmp.f32	s0, s0
    467e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4682:	fe1a 0a00 	vselvs.f32	s0, s20, s0
    4686:	e74c      	b.n	4522 <audioFrameString1+0xa2>
    4688:	e0001000 	.word	0xe0001000
    468c:	20005968 	.word	0x20005968
    4690:	200054e0 	.word	0x200054e0
    4694:	20000694 	.word	0x20000694
    4698:	00000000 	.word	0x00000000
    469c:	37800080 	.word	0x37800080
    46a0:	42fe0000 	.word	0x42fe0000
    46a4:	42800000 	.word	0x42800000
    46a8:	20005550 	.word	0x20005550
    46ac:	200143fc 	.word	0x200143fc
    46b0:	200054ec 	.word	0x200054ec
    46b4:	20014414 	.word	0x20014414
    46b8:	2001cd44 	.word	0x2001cd44
    46bc:	20014504 	.word	0x20014504
    46c0:	200053e0 	.word	0x200053e0
    46c4:	20005568 	.word	0x20005568
    46c8:	20000698 	.word	0x20000698
    46cc:	30000000 	.word	0x30000000
    46d0:	4b000000 	.word	0x4b000000
    46d4:	20014434 	.word	0x20014434
    46d8:	20000684 	.word	0x20000684
    46dc:	20014438 	.word	0x20014438
    46e0:	200053c4 	.word	0x200053c4
    46e4:	200054d4 	.word	0x200054d4
    46e8:	2001cd4c 	.word	0x2001cd4c
    46ec:	2001441c 	.word	0x2001441c
	...

00004700 <audioInitString2>:
};



void __ATTR_ITCMRAM audioInitString2()
{
    4700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	for (int v = 0; v < numStringsThisBoard; v++)
    4704:	4e11      	ldr	r6, [pc, #68]	; (474c <audioInitString2+0x4c>)
    4706:	7833      	ldrb	r3, [r6, #0]
    4708:	b1d3      	cbz	r3, 4740 <audioInitString2+0x40>
    470a:	4d11      	ldr	r5, [pc, #68]	; (4750 <audioInitString2+0x50>)
    470c:	2400      	movs	r4, #0
    470e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 475c <audioInitString2+0x5c>
	{
		 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    4712:	4f10      	ldr	r7, [pc, #64]	; (4754 <audioInitString2+0x54>)
    4714:	4628      	mov	r0, r5
    4716:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
    471a:	463a      	mov	r2, r7
    471c:	2101      	movs	r1, #1
    471e:	f004 fe43 	bl	93a8 <__tTString_initToPool_veneer>
		 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    4722:	f8d8 1000 	ldr.w	r1, [r8]
    4726:	4628      	mov	r0, r5
	for (int v = 0; v < numStringsThisBoard; v++)
    4728:	3504      	adds	r5, #4
		 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    472a:	4421      	add	r1, r4
	for (int v = 0; v < numStringsThisBoard; v++)
    472c:	3401      	adds	r4, #1
		 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    472e:	2903      	cmp	r1, #3
    4730:	bfd4      	ite	le
    4732:	2100      	movle	r1, #0
    4734:	2101      	movgt	r1, #1
    4736:	f004 fdb7 	bl	92a8 <__tTString_setWoundOrUnwound_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    473a:	7833      	ldrb	r3, [r6, #0]
    473c:	42a3      	cmp	r3, r4
    473e:	dce9      	bgt.n	4714 <audioInitString2+0x14>
	}

	whichStringModelLoaded = String2Loaded;
    4740:	4b05      	ldr	r3, [pc, #20]	; (4758 <audioInitString2+0x58>)
    4742:	2201      	movs	r2, #1
    4744:	701a      	strb	r2, [r3, #0]
}
    4746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    474a:	bf00      	nop
    474c:	20000694 	.word	0x20000694
    4750:	2001cd5c 	.word	0x2001cd5c
    4754:	200054d8 	.word	0x200054d8
    4758:	20014451 	.word	0x20014451
    475c:	200053bc 	.word	0x200053bc

00004760 <audioFreeString2>:


void __ATTR_ITCMRAM audioFreeString2()
{
    4760:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    4762:	4e07      	ldr	r6, [pc, #28]	; (4780 <audioFreeString2+0x20>)
    4764:	7833      	ldrb	r3, [r6, #0]
    4766:	b14b      	cbz	r3, 477c <audioFreeString2+0x1c>
    4768:	4d06      	ldr	r5, [pc, #24]	; (4784 <audioFreeString2+0x24>)
    476a:	2400      	movs	r4, #0
	{
		tTString_free(&strings[v]);
    476c:	4628      	mov	r0, r5
	for (int v = 0; v < numStringsThisBoard; v++)
    476e:	3401      	adds	r4, #1
		tTString_free(&strings[v]);
    4770:	f004 fc7a 	bl	9068 <__tTString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    4774:	7833      	ldrb	r3, [r6, #0]
    4776:	3504      	adds	r5, #4
    4778:	42a3      	cmp	r3, r4
    477a:	dcf7      	bgt.n	476c <audioFreeString2+0xc>
	}
}
    477c:	bd70      	pop	{r4, r5, r6, pc}
    477e:	bf00      	nop
    4780:	20000694 	.word	0x20000694
    4784:	2001cd5c 	.word	0x2001cd5c
    4788:	f3af 8000 	nop.w
    478c:	f3af 8000 	nop.w
    4790:	f3af 8000 	nop.w
    4794:	f3af 8000 	nop.w
    4798:	f3af 8000 	nop.w
    479c:	f3af 8000 	nop.w

000047a0 <audioSwitchToString2>:

void __ATTR_ITCMRAM audioSwitchToString2()
{
    47a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47a4:	4c17      	ldr	r4, [pc, #92]	; (4804 <audioSwitchToString2+0x64>)
	//load string2 default params:
	for (int i = 0; i < 20; i++)
    47a6:	2500      	movs	r5, #0
    47a8:	4f17      	ldr	r7, [pc, #92]	; (4808 <audioSwitchToString2+0x68>)
		}
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}
		knobFrozen[i] = 1;
    47aa:	f04f 0801 	mov.w	r8, #1
    47ae:	4e17      	ldr	r6, [pc, #92]	; (480c <audioSwitchToString2+0x6c>)
    47b0:	f104 0b50 	add.w	fp, r4, #80	; 0x50
    47b4:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4814 <audioSwitchToString2+0x74>
    47b8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 4818 <audioSwitchToString2+0x78>
{
    47bc:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    47c0:	ed9f 8a13 	vldr	s16, [pc, #76]	; 4810 <audioSwitchToString2+0x70>
    47c4:	eeb0 0a48 	vmov.f32	s0, s16
    47c8:	4620      	mov	r0, r4
    47ca:	f004 fe11 	bl	93f0 <__tExpSmooth_setFactor_veneer>
		if (voice == 62)
    47ce:	f8da 3000 	ldr.w	r3, [sl]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    47d2:	4620      	mov	r0, r4
	for (int i = 0; i < 20; i++)
    47d4:	3404      	adds	r4, #4
		if (voice == 62)
    47d6:	2b3e      	cmp	r3, #62	; 0x3e
	for (int i = 0; i < 20; i++)
    47d8:	f107 0704 	add.w	r7, r7, #4
    47dc:	f106 0604 	add.w	r6, r6, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    47e0:	bf0c      	ite	eq
    47e2:	ed17 0a01 	vldreq	s0, [r7, #-4]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    47e6:	ed16 0a01 	vldrne	s0, [r6, #-4]
    47ea:	f004 fe89 	bl	9500 <__tExpSmooth_setValAndDest_veneer>
	for (int i = 0; i < 20; i++)
    47ee:	455c      	cmp	r4, fp
		knobFrozen[i] = 1;
    47f0:	f809 8005 	strb.w	r8, [r9, r5]
	for (int i = 0; i < 20; i++)
    47f4:	f105 0501 	add.w	r5, r5, #1
    47f8:	d1e4      	bne.n	47c4 <audioSwitchToString2+0x24>
	}
}
    47fa:	ecbd 8b02 	vpop	{d8}
    47fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4802:	bf00      	nop
    4804:	20005430 	.word	0x20005430
    4808:	200008e4 	.word	0x200008e4
    480c:	200186f8 	.word	0x200186f8
    4810:	3a83126f 	.word	0x3a83126f
    4814:	20014440 	.word	0x20014440
    4818:	200053cc 	.word	0x200053cc
    481c:	f3af 8000 	nop.w

00004820 <audioTickString2>:
}

uint32_t thisFrameCount = 0;

float __ATTR_ITCMRAM audioTickString2(void)
{
    4820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float theNote[NUM_STRINGS_PER_BOARD];

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    4824:	4871      	ldr	r0, [pc, #452]	; (49ec <audioTickString2+0x1cc>)
    4826:	4e72      	ldr	r6, [pc, #456]	; (49f0 <audioTickString2+0x1d0>)
    4828:	4d72      	ldr	r5, [pc, #456]	; (49f4 <audioTickString2+0x1d4>)
    482a:	4634      	mov	r4, r6
    482c:	f106 0750 	add.w	r7, r6, #80	; 0x50
{
    4830:	ed2d 8b0e 	vpush	{d8-d14}
    4834:	b087      	sub	sp, #28
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    4836:	f004 fed3 	bl	95e0 <__tExpSmooth_tick_veneer>
    483a:	eeb0 ba40 	vmov.f32	s22, s0

	for (int i = 0; i < 20; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    483e:	4628      	mov	r0, r5
	for (int i = 0; i < 20; i++)
    4840:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    4842:	f004 fecd 	bl	95e0 <__tExpSmooth_tick_veneer>
    4846:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 20; i++)
    484a:	42a7      	cmp	r7, r4
    484c:	d1f7      	bne.n	483e <audioTickString2+0x1e>
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
    484e:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 4a20 <audioTickString2+0x200>
    4852:	f8d8 3000 	ldr.w	r3, [r8]
    4856:	2b00      	cmp	r3, #0
    4858:	f040 826c 	bne.w	4d34 <audioTickString2+0x514>
	{
		for (int i = 0; i < numStringsThisBoard; i++)
    485c:	4b66      	ldr	r3, [pc, #408]	; (49f8 <audioTickString2+0x1d8>)
    485e:	9304      	str	r3, [sp, #16]
    4860:	781b      	ldrb	r3, [r3, #0]
			}
			previousStringInputs[i] = stringInputs[i];
		}
		newPluck = 0;
	}
	for (int i = 0; i < numStringsThisBoard; i++)
    4862:	2b00      	cmp	r3, #0
    4864:	f000 82d9 	beq.w	4e1a <audioTickString2+0x5fa>
    4868:	4b64      	ldr	r3, [pc, #400]	; (49fc <audioTickString2+0x1dc>)
		if (thisFrameCount == 0)
		{

			float thisString = (firstString + i);
			float thisStringProportion = thisString * invNumStrings;
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    486a:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
    486e:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 4a24 <audioTickString2+0x204>
	for (int i = 0; i < numStringsThisBoard; i++)
    4872:	f04f 0800 	mov.w	r8, #0
    4876:	9300      	str	r3, [sp, #0]
    4878:	4b61      	ldr	r3, [pc, #388]	; (4a00 <audioTickString2+0x1e0>)
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    487a:	46cb      	mov	fp, r9
    487c:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 4a28 <audioTickString2+0x208>
    4880:	9305      	str	r3, [sp, #20]
    4882:	4f60      	ldr	r7, [pc, #384]	; (4a04 <audioTickString2+0x1e4>)
    4884:	4b60      	ldr	r3, [pc, #384]	; (4a08 <audioTickString2+0x1e8>)
	for (int i = 0; i < numStringsThisBoard; i++)
    4886:	eddf aa6b 	vldr	s21, [pc, #428]	; 4a34 <audioTickString2+0x214>
		if (theNote[i] > 127.0f)
    488a:	eddf ca69 	vldr	s25, [pc, #420]	; 4a30 <audioTickString2+0x210>
			theNote[i] = 64.0f;
    488e:	ed9f da5f 	vldr	s26, [pc, #380]	; 4a0c <audioTickString2+0x1ec>
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    4892:	ed9f ca5f 	vldr	s24, [pc, #380]	; 4a10 <audioTickString2+0x1f0>
    4896:	eddf ba5f 	vldr	s23, [pc, #380]	; 4a14 <audioTickString2+0x1f4>
    489a:	9303      	str	r3, [sp, #12]
		theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    489c:	9b00      	ldr	r3, [sp, #0]
    489e:	ecf3 7a01 	vldmia	r3!, {s15}
    48a2:	9300      	str	r3, [sp, #0]
    48a4:	9b05      	ldr	r3, [sp, #20]
    48a6:	eb03 0288 	add.w	r2, r3, r8, lsl #2
    48aa:	edd2 8a00 	vldr	s17, [r2]
    48ae:	ee78 8aa7 	vadd.f32	s17, s17, s15
		if (theNote[i] < 0.0f)
    48b2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
    48b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    48ba:	f100 81a6 	bmi.w	4c0a <audioTickString2+0x3ea>
		if (theNote[i] > 127.0f)
    48be:	eef4 8aec 	vcmpe.f32	s17, s25
    48c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    48c6:	f340 82ad 	ble.w	4e24 <audioTickString2+0x604>
			theNote[i] = 127.0f;
    48ca:	eddf 8a59 	vldr	s17, [pc, #356]	; 4a30 <audioTickString2+0x210>
		float finalFreq = mtofTableLookup(theNote[i]);
    48ce:	eeb0 0a68 	vmov.f32	s0, s17
    48d2:	f004 fe99 	bl	9608 <__mtofTableLookup_veneer>
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    48d6:	edd7 7a00 	vldr	s15, [r7]
		float finalFreq = mtofTableLookup(theNote[i]);
    48da:	eeb0 9a40 	vmov.f32	s18, s0
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    48de:	ee38 0ae7 	vsub.f32	s0, s17, s15
    48e2:	f004 fe91 	bl	9608 <__mtofTableLookup_veneer>
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    48e6:	eeb0 2a4c 	vmov.f32	s4, s24
    48ea:	eef0 1a6b 	vmov.f32	s3, s23
    48ee:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 4a18 <audioTickString2+0x1f8>
    48f2:	eddf 0a4a 	vldr	s1, [pc, #296]	; 4a1c <audioTickString2+0x1fc>
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    48f6:	eeb0 8a40 	vmov.f32	s16, s0
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    48fa:	f004 fcfd 	bl	92f8 <__LEAF_map_veneer>
    48fe:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    4902:	4650      	mov	r0, sl
    4904:	ee17 1a90 	vmov	r1, s15
    4908:	f004 fbd6 	bl	90b8 <__tTString_setWindingsPerInch_veneer>
		if (thisFrameCount == 0)
    490c:	9b03      	ldr	r3, [sp, #12]
    490e:	9701      	str	r7, [sp, #4]
    4910:	681c      	ldr	r4, [r3, #0]
    4912:	2c00      	cmp	r4, #0
    4914:	f000 81c3 	beq.w	4c9e <audioTickString2+0x47e>




		//tTString_setPickupAmount(&strings[i], knobScaled[7]);
		tTString_setBarPosition(&strings[i],barInMIDI[i]);
    4918:	ed97 0a00 	vldr	s0, [r7]
    491c:	4650      	mov	r0, sl
    491e:	f004 fdf3 	bl	9508 <__tTString_setBarPosition_veneer>
		//tTString_setBarDrive(&strings[i],knobScaled[4]);
		tTString_setOpenStringFrequency(&strings[i], openStringFreq);
    4922:	eeb0 0a48 	vmov.f32	s0, s16
    4926:	4650      	mov	r0, sl

		tTString_setFreq(&strings[i], finalFreq);



		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    4928:	eef8 9a00 	vmov.f32	s19, #128	; 0xc0000000 -2.0
		tTString_setOpenStringFrequency(&strings[i], openStringFreq);
    492c:	f004 fbec 	bl	9108 <__tTString_setOpenStringFrequency_veneer>
		tTString_setFeedbackStrength(&strings[i],knobScaled[6]);
    4930:	ed96 0a06 	vldr	s0, [r6, #24]
    4934:	4650      	mov	r0, sl
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    4936:	eef1 da00 	vmov.f32	s27, #16	; 0x40800000  4.0
		tTString_setFeedbackStrength(&strings[i],knobScaled[6]);
    493a:	f004 fdd9 	bl	94f0 <__tTString_setFeedbackStrength_veneer>
		tTString_setFeedbackReactionSpeed(&strings[i],knobScaled[7]);
    493e:	ed96 0a07 	vldr	s0, [r6, #28]
    4942:	4650      	mov	r0, sl
		float alpha = 0.0f;
		float oneMinusAlpha = 1.0f;
		for (int i = 0; i < 9; i++)
		{
			//find the closest open string frequency and interpolate
			if (stringParams[i][0][0] > openStringFreq)
    4944:	f04f 0900 	mov.w	r9, #0
		tTString_setFeedbackReactionSpeed(&strings[i],knobScaled[7]);
    4948:	f004 fe16 	bl	9578 <__tTString_setFeedbackReactionSpeed_veneer>
		tTString_setRippleDepth(&strings[i],knobScaled[9]);
    494c:	ed96 0a09 	vldr	s0, [r6, #36]	; 0x24
    4950:	4650      	mov	r0, sl
		float oneMinusAlpha = 1.0f;
    4952:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
		tTString_setRippleDepth(&strings[i],knobScaled[9]);
    4956:	f004 fd17 	bl	9388 <__tTString_setRippleDepth_veneer>
		tTString_setFreq(&strings[i], finalFreq);
    495a:	eeb0 0a49 	vmov.f32	s0, s18
    495e:	4650      	mov	r0, sl
		float alpha = 0.0f;
    4960:	eddf 8a34 	vldr	s17, [pc, #208]	; 4a34 <audioTickString2+0x214>
		tTString_setFreq(&strings[i], finalFreq);
    4964:	f004 fd3c 	bl	93e0 <__tTString_setFreq_veneer>
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    4968:	eef0 0a69 	vmov.f32	s1, s19
    496c:	edd6 7a00 	vldr	s15, [r6]
    4970:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
			if (stringParams[i][0][0] > openStringFreq)
    4974:	2401      	movs	r4, #1
		uint32_t which = 0;
    4976:	464d      	mov	r5, r9
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    4978:	eee7 0aad 	vfma.f32	s1, s15, s27
    497c:	f004 fbec 	bl	9158 <__fastPowf_veneer>
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    4980:	eef0 0a69 	vmov.f32	s1, s19
    4984:	edd6 7a01 	vldr	s15, [r6, #4]
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    4988:	eeb0 9a40 	vmov.f32	s18, s0
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    498c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    4990:	eee7 0aad 	vfma.f32	s1, s15, s27
    4994:	f004 fbe0 	bl	9158 <__fastPowf_veneer>
			if (stringParams[i][0][0] > openStringFreq)
    4998:	eddb 0a00 	vldr	s1, [fp]
    499c:	f8df b084 	ldr.w	fp, [pc, #132]	; 4a24 <audioTickString2+0x204>
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    49a0:	eef0 9a40 	vmov.f32	s19, s0
		uint32_t which = 0;
    49a4:	9702      	str	r7, [sp, #8]
    49a6:	465f      	mov	r7, fp
    49a8:	e011      	b.n	49ce <audioTickString2+0x1ae>
			{
				if (stringParams[i+1][0][0] < openStringFreq)
    49aa:	ed9b 1a09 	vldr	s2, [fp, #36]	; 0x24
    49ae:	eeb4 1ac8 	vcmpe.f32	s2, s16
    49b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    49b6:	d43f      	bmi.n	4a38 <audioTickString2+0x218>
				{
					which = i;
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
					oneMinusAlpha = 1.0f - alpha;
				}
				else if (i == 8)
    49b8:	f1b9 0f08 	cmp.w	r9, #8
    49bc:	eef0 0a41 	vmov.f32	s1, s2
    49c0:	f000 8126 	beq.w	4c10 <audioTickString2+0x3f0>
    49c4:	f109 0901 	add.w	r9, r9, #1
    49c8:	3401      	adds	r4, #1
    49ca:	f10b 0b24 	add.w	fp, fp, #36	; 0x24
			if (stringParams[i][0][0] > openStringFreq)
    49ce:	eeb4 8ae0 	vcmpe.f32	s16, s1
    49d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    49d6:	d4e8      	bmi.n	49aa <audioTickString2+0x18a>
    49d8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
		for (int i = 0; i < 9; i++)
    49dc:	2c09      	cmp	r4, #9
			if (stringParams[i][0][0] > openStringFreq)
    49de:	eb07 0383 	add.w	r3, r7, r3, lsl #2
		for (int i = 0; i < 9; i++)
    49e2:	d038      	beq.n	4a56 <audioTickString2+0x236>
			if (stringParams[i][0][0] > openStringFreq)
    49e4:	edd3 0a00 	vldr	s1, [r3]
    49e8:	e7ec      	b.n	49c4 <audioTickString2+0x1a4>
    49ea:	bf00      	nop
    49ec:	2001444c 	.word	0x2001444c
    49f0:	200053e0 	.word	0x200053e0
    49f4:	20005430 	.word	0x20005430
    49f8:	20000694 	.word	0x20000694
    49fc:	2001441c 	.word	0x2001441c
    4a00:	20014414 	.word	0x20014414
    4a04:	20001384 	.word	0x20001384
    4a08:	2001cd64 	.word	0x2001cd64
    4a0c:	42800000 	.word	0x42800000
    4a10:	42f00000 	.word	0x42f00000
    4a14:	428c0000 	.word	0x428c0000
    4a18:	43770000 	.word	0x43770000
    4a1c:	42f60000 	.word	0x42f60000
    4a20:	200054e0 	.word	0x200054e0
    4a24:	20000934 	.word	0x20000934
    4a28:	2001cd5c 	.word	0x2001cd5c
    4a2c:	42a00000 	.word	0x42a00000
    4a30:	42fe0000 	.word	0x42fe0000
    4a34:	00000000 	.word	0x00000000
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    4a38:	eeb0 0a48 	vmov.f32	s0, s16
					which = i;
    4a3c:	464d      	mov	r5, r9
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    4a3e:	f004 fbbb 	bl	91b8 <__LEAF_mapToZeroToOneOutput_veneer>
		for (int i = 0; i < 9; i++)
    4a42:	2c09      	cmp	r4, #9
			if (stringParams[i][0][0] > openStringFreq)
    4a44:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    4a48:	eef0 8a40 	vmov.f32	s17, s0
					oneMinusAlpha = 1.0f - alpha;
    4a4c:	ee3a ea40 	vsub.f32	s28, s20, s0
			if (stringParams[i][0][0] > openStringFreq)
    4a50:	eb07 0383 	add.w	r3, r7, r3, lsl #2
		for (int i = 0; i < 9; i++)
    4a54:	d1c6      	bne.n	49e4 <audioTickString2+0x1c4>
					which = 9;
				}
			}
		}

		float barHeight = barInMIDI[i] / 12.0f;
    4a56:	46bb      	mov	fp, r7
    4a58:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0

		uint32_t barHeightInt = (uint32_t)barHeight;
		float barHeightAlpha = barHeight - barHeightInt;
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    4a5c:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
    4a60:	ed1f 0a0c 	vldr	s0, [pc, #-48]	; 4a34 <audioTickString2+0x214>
		float barHeight = barInMIDI[i] / 12.0f;
    4a64:	e9dd 3701 	ldrd	r3, r7, [sp, #4]
    4a68:	ed93 7a00 	vldr	s14, [r3]
    4a6c:	3704      	adds	r7, #4
    4a6e:	eec7 da27 	vdiv.f32	s27, s14, s15
		uint32_t barHeightInt = (uint32_t)barHeight;
    4a72:	eefc 7aed 	vcvt.u32.f32	s15, s27
    4a76:	ee17 9a90 	vmov	r9, s15
		float barHeightAlpha = barHeight - barHeightInt;
    4a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    4a7e:	f109 0301 	add.w	r3, r9, #1
		float barHeightAlpha = barHeight - barHeightInt;
    4a82:	ee7d dae7 	vsub.f32	s27, s27, s15
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    4a86:	ee00 3a90 	vmov	s1, r3
    4a8a:	eef8 0a60 	vcvt.f32.u32	s1, s1
    4a8e:	f004 fde3 	bl	9658 <__LEAF_clip_veneer>
    4a92:	eef0 7a40 	vmov.f32	s15, s0

		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    4a96:	1c6b      	adds	r3, r5, #1
    4a98:	eeb2 1a02 	vmov.f32	s2, #34	; 0x41100000  9.0
    4a9c:	ed1f 0a1b 	vldr	s0, [pc, #-108]	; 4a34 <audioTickString2+0x214>
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    4aa0:	ee7a ea6d 	vsub.f32	s29, s20, s27
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    4aa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    4aa8:	ee00 3a90 	vmov	s1, r3
    4aac:	eef8 0a60 	vcvt.f32.u32	s1, s1
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    4ab0:	ee17 4a90 	vmov	r4, s15
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    4ab4:	f004 fdd0 	bl	9658 <__LEAF_clip_veneer>
			float decayRatio2 = stringParams[0][barHeightIntPlusOne][2] / stringParams[0][barHeightIntPlusOne][0];

			decayTime = (decayRatio1 * barHeightOneMinusAlpha + decayRatio2 * barHeightAlpha) * openStringFreq;
		}

		if (which == 9)
    4ab8:	2d09      	cmp	r5, #9
    4aba:	f000 80d7 	beq.w	4c6c <audioTickString2+0x44c>
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    4abe:	eefc 7ac0 	vcvt.u32.f32	s15, s0
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
		}

		else
		{
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    4ac2:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    4ac6:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    4aca:	eb04 0cc4 	add.w	ip, r4, r4, lsl #3
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    4ace:	ee17 1a90 	vmov	r1, s15
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    4ad2:	00ad      	lsls	r5, r5, #2
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    4ad4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    4ad8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
    4adc:	0089      	lsls	r1, r1, #2
    4ade:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    4ae2:	4459      	add	r1, fp
    4ae4:	edd1 6a01 	vldr	s13, [r1, #4]
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    4ae8:	ed91 7a02 	vldr	s14, [r1, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    4aec:	eb04 0144 	add.w	r1, r4, r4, lsl #1
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    4af0:	ee68 6aa6 	vmul.f32	s13, s17, s13
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    4af4:	eb05 0181 	add.w	r1, r5, r1, lsl #2
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    4af8:	ee28 7a87 	vmul.f32	s14, s17, s14
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    4afc:	eb05 0582 	add.w	r5, r5, r2, lsl #2
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    4b00:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    4b04:	4459      	add	r1, fp
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    4b06:	445d      	add	r5, fp
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    4b08:	445a      	add	r2, fp
    4b0a:	edd1 5a01 	vldr	s11, [r1, #4]
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    4b0e:	ed91 6a02 	vldr	s12, [r1, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    4b12:	ed92 8a01 	vldr	s16, [r2, #4]
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    4b16:	edd2 7a02 	vldr	s15, [r2, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    4b1a:	ee28 8a88 	vmul.f32	s16, s17, s16
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    4b1e:	edd5 4a01 	vldr	s9, [r5, #4]
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    4b22:	ee68 7aa7 	vmul.f32	s15, s17, s15
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    4b26:	ed95 5a02 	vldr	s10, [r5, #8]
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    4b2a:	eee4 6a8e 	vfma.f32	s13, s9, s28
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    4b2e:	eea5 8a8e 	vfma.f32	s16, s11, s28
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    4b32:	eee6 7a0e 	vfma.f32	s15, s12, s28
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    4b36:	eea5 7a0e 	vfma.f32	s14, s10, s28
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    4b3a:	ee2d 8a88 	vmul.f32	s16, s27, s16
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    4b3e:	ee6d 7aa7 	vmul.f32	s15, s27, s15
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    4b42:	eeae 8aa6 	vfma.f32	s16, s29, s13
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    4b46:	eeee 7a87 	vfma.f32	s15, s29, s14
		}


		tTString_setDecayInSeconds(&strings[i],decayTime * decayScaling);
    4b4a:	ee27 0a89 	vmul.f32	s0, s15, s18
    4b4e:	4650      	mov	r0, sl
    4b50:	f004 fd1e 	bl	9590 <__tTString_setDecayInSeconds_veneer>
		tTString_setFilterFreqDirectly(&strings[i], filterFreq * filterScaling);
    4b54:	4650      	mov	r0, sl
    4b56:	ee28 0a29 	vmul.f32	s0, s16, s19
	for (int i = 0; i < numStringsThisBoard; i++)
    4b5a:	f108 0801 	add.w	r8, r8, #1
		tTString_setFilterFreqDirectly(&strings[i], filterFreq * filterScaling);
    4b5e:	f004 fbaf 	bl	92c0 <__tTString_setFilterFreqDirectly_veneer>

		temp += tTString_tick(&strings[i]);
    4b62:	4650      	mov	r0, sl
    4b64:	f004 fb44 	bl	91f0 <__tTString_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    4b68:	9b04      	ldr	r3, [sp, #16]
		temp += tTString_tick(&strings[i]);
    4b6a:	ee7a aa80 	vadd.f32	s21, s21, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    4b6e:	f10a 0a04 	add.w	sl, sl, #4
    4b72:	781a      	ldrb	r2, [r3, #0]
    4b74:	4542      	cmp	r2, r8
    4b76:	f73f ae91 	bgt.w	489c <audioTickString2+0x7c>
	}
	thisFrameCount = (thisFrameCount + 1) & 63;
    4b7a:	9a03      	ldr	r2, [sp, #12]
	//float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
    4b7c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    4b80:	ed5f 0a56 	vldr	s1, [pc, #-344]	; 4a2c <audioTickString2+0x20c>
	thisFrameCount = (thisFrameCount + 1) & 63;
    4b84:	6813      	ldr	r3, [r2, #0]
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    4b86:	ee6b 0a20 	vmul.f32	s1, s22, s1
    4b8a:	ed1f 1a57 	vldr	s2, [pc, #-348]	; 4a30 <audioTickString2+0x210>
	thisFrameCount = (thisFrameCount + 1) & 63;
    4b8e:	3301      	adds	r3, #1
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    4b90:	ed1f 0a58 	vldr	s0, [pc, #-352]	; 4a34 <audioTickString2+0x214>
	thisFrameCount = (thisFrameCount + 1) & 63;
    4b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4b98:	6013      	str	r3, [r2, #0]
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    4b9a:	f004 fd5d 	bl	9658 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
    4b9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp *= outVol;
	temp *= outVol * masterVolFromBrain;
    4ba2:	4bae      	ldr	r3, [pc, #696]	; (4e5c <audioTickString2+0x63c>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    4ba4:	4aae      	ldr	r2, [pc, #696]	; (4e60 <audioTickString2+0x640>)
	temp *= outVol * masterVolFromBrain;
    4ba6:	ed93 7a00 	vldr	s14, [r3]
	int volIdxInt = (int) volIdx;
    4baa:	ee17 3a90 	vmov	r3, s15
	float alpha = volIdx-volIdxInt;
    4bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    4bb2:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    4bb4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
    4bb8:	ee70 7a67 	vsub.f32	s15, s0, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    4bbc:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    4bc0:	ed93 6a00 	vldr	s12, [r3]
    4bc4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    4bc8:	ee78 6a67 	vsub.f32	s13, s16, s15
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    4bcc:	edd2 5a00 	vldr	s11, [r2]
    4bd0:	ee27 0aa5 	vmul.f32	s0, s15, s11
    4bd4:	eef0 7a40 	vmov.f32	s15, s0
    4bd8:	eee6 7a26 	vfma.f32	s15, s12, s13
	temp *= outVol * masterVolFromBrain;
    4bdc:	ee27 0a87 	vmul.f32	s0, s15, s14
	temp = tanhf(temp);
    4be0:	ee20 0a2a 	vmul.f32	s0, s0, s21
    4be4:	f004 faf0 	bl	91c8 <__tanhf_veneer>
    4be8:	eef0 0a40 	vmov.f32	s1, s0
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    4bec:	eddf 7a9d 	vldr	s15, [pc, #628]	; 4e64 <audioTickString2+0x644>
    4bf0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    4bf4:	eeb0 1a48 	vmov.f32	s2, s16
    4bf8:	ee60 0aa7 	vmul.f32	s1, s1, s15
}
    4bfc:	b007      	add	sp, #28
    4bfe:	ecbd 8b0e 	vpop	{d8-d14}
    4c02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    4c06:	f004 bd27 	b.w	9658 <__LEAF_clip_veneer>
			theNote[i] = 0.0f;
    4c0a:	eddf 8a97 	vldr	s17, [pc, #604]	; 4e68 <audioTickString2+0x648>
    4c0e:	e65e      	b.n	48ce <audioTickString2+0xae>
		float barHeight = barInMIDI[i] / 12.0f;
    4c10:	46bb      	mov	fp, r7
    4c12:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    4c16:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
    4c1a:	ed9f 0a93 	vldr	s0, [pc, #588]	; 4e68 <audioTickString2+0x648>
		float barHeight = barInMIDI[i] / 12.0f;
    4c1e:	e9dd 3701 	ldrd	r3, r7, [sp, #4]
    4c22:	ed93 7a00 	vldr	s14, [r3]
    4c26:	3704      	adds	r7, #4
    4c28:	eec7 da27 	vdiv.f32	s27, s14, s15
		uint32_t barHeightInt = (uint32_t)barHeight;
    4c2c:	eefc 7aed 	vcvt.u32.f32	s15, s27
    4c30:	ee17 9a90 	vmov	r9, s15
		float barHeightAlpha = barHeight - barHeightInt;
    4c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    4c38:	f109 0301 	add.w	r3, r9, #1
		float barHeightAlpha = barHeight - barHeightInt;
    4c3c:	ee7d dae7 	vsub.f32	s27, s27, s15
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    4c40:	ee00 3a90 	vmov	s1, r3
    4c44:	eef8 0a60 	vcvt.f32.u32	s1, s1
    4c48:	f004 fd06 	bl	9658 <__LEAF_clip_veneer>
    4c4c:	eef0 7a40 	vmov.f32	s15, s0
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    4c50:	eeb2 1a02 	vmov.f32	s2, #34	; 0x41100000  9.0
    4c54:	ed9f 0a84 	vldr	s0, [pc, #528]	; 4e68 <audioTickString2+0x648>
    4c58:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    4c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    4c60:	ee7a ea6d 	vsub.f32	s29, s20, s27
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    4c64:	ee17 4a90 	vmov	r4, s15
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    4c68:	f004 fcf6 	bl	9658 <__LEAF_clip_veneer>
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    4c6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
			float freq1 = stringParams[9][barHeightInt][1];
    4c70:	eb09 0249 	add.w	r2, r9, r9, lsl #1
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    4c74:	eb0b 0484 	add.w	r4, fp, r4, lsl #2
			float freq1 = stringParams[9][barHeightInt][1];
    4c78:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    4c7c:	ed94 8a52 	vldr	s16, [r4, #328]	; 0x148
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    4c80:	edd4 7a53 	vldr	s15, [r4, #332]	; 0x14c
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    4c84:	ee2d 8a88 	vmul.f32	s16, s27, s16
    4c88:	edd2 6a52 	vldr	s13, [r2, #328]	; 0x148
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    4c8c:	ee6d 7aa7 	vmul.f32	s15, s27, s15
    4c90:	ed92 7a53 	vldr	s14, [r2, #332]	; 0x14c
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    4c94:	eeae 8aa6 	vfma.f32	s16, s29, s13
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    4c98:	eeee 7a87 	vfma.f32	s15, s29, s14
    4c9c:	e755      	b.n	4b4a <audioTickString2+0x32a>
			float thisString = (firstString + i);
    4c9e:	4a73      	ldr	r2, [pc, #460]	; (4e6c <audioTickString2+0x64c>)
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    4ca0:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    4ca4:	ed96 7a0b 	vldr	s14, [r6, #44]	; 0x2c
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    4ca8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
			float thisString = (firstString + i);
    4cac:	6812      	ldr	r2, [r2, #0]
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    4cae:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    4cb2:	edd6 5a0a 	vldr	s11, [r6, #40]	; 0x28
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    4cb6:	eeb0 0a68 	vmov.f32	s0, s17
			float thisString = (firstString + i);
    4cba:	eb08 0302 	add.w	r3, r8, r2
			float thisStringProportion = thisString * invNumStrings;
    4cbe:	4a6c      	ldr	r2, [pc, #432]	; (4e70 <audioTickString2+0x650>)
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    4cc0:	ed9f 2a6c 	vldr	s4, [pc, #432]	; 4e74 <audioTickString2+0x654>
			float thisString = (firstString + i);
    4cc4:	ee07 3a90 	vmov	s15, r3
			float thisStringProportion = thisString * invNumStrings;
    4cc8:	ed92 5a00 	vldr	s10, [r2]
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    4ccc:	eddf 1a6a 	vldr	s3, [pc, #424]	; 4e78 <audioTickString2+0x658>
			float thisString = (firstString + i);
    4cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    4cd4:	ed9f 1a69 	vldr	s2, [pc, #420]	; 4e7c <audioTickString2+0x65c>
			float thisStringProportion = thisString * invNumStrings;
    4cd8:	ee67 7a85 	vmul.f32	s15, s15, s10
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    4cdc:	ee27 7a87 	vmul.f32	s14, s15, s14
    4ce0:	ee7a 7a67 	vsub.f32	s15, s20, s15
    4ce4:	eea5 7aa7 	vfma.f32	s14, s11, s15
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    4ce8:	eee7 6a06 	vfma.f32	s13, s14, s12
    4cec:	eef0 8a66 	vmov.f32	s17, s13
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    4cf0:	f004 fb02 	bl	92f8 <__LEAF_map_veneer>
			if (knobScaled[5] > 0.05f)
    4cf4:	edd6 0a05 	vldr	s1, [r6, #20]
    4cf8:	eddf 7a61 	vldr	s15, [pc, #388]	; 4e80 <audioTickString2+0x660>
    4cfc:	eef4 0ae7 	vcmpe.f32	s1, s15
    4d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d04:	dd62      	ble.n	4dcc <audioTickString2+0x5ac>
				inHarm = LEAF_clip(0.00000001f, inHarm * knobScaled[5], 0.01f);
    4d06:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 4e84 <audioTickString2+0x664>
    4d0a:	ee60 0a80 	vmul.f32	s1, s1, s0
    4d0e:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 4e88 <audioTickString2+0x668>
    4d12:	f004 fca1 	bl	9658 <__LEAF_clip_veneer>
				tTString_setHarmonicity(&strings[i], inHarm, finalFreq);
    4d16:	eef0 0a49 	vmov.f32	s1, s18
    4d1a:	4650      	mov	r0, sl
    4d1c:	f004 fb6c 	bl	93f8 <__tTString_setHarmonicity_veneer>
				tTString_setInharmonic(&strings[i], 1);
    4d20:	4650      	mov	r0, sl
    4d22:	2101      	movs	r1, #1
    4d24:	f004 fc94 	bl	9650 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],harmonic);
    4d28:	eeb0 0a68 	vmov.f32	s0, s17
    4d2c:	4650      	mov	r0, sl
    4d2e:	f004 fbef 	bl	9510 <__tTString_setHarmonic_veneer>
    4d32:	e5f1      	b.n	4918 <audioTickString2+0xf8>
		for (int i = 0; i < numStringsThisBoard; i++)
    4d34:	4a55      	ldr	r2, [pc, #340]	; (4e8c <audioTickString2+0x66c>)
    4d36:	7813      	ldrb	r3, [r2, #0]
    4d38:	9204      	str	r2, [sp, #16]
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	d079      	beq.n	4e32 <audioTickString2+0x612>
    4d3e:	f8df b170 	ldr.w	fp, [pc, #368]	; 4eb0 <audioTickString2+0x690>
    4d42:	2400      	movs	r4, #0
    4d44:	4f52      	ldr	r7, [pc, #328]	; (4e90 <audioTickString2+0x670>)
    4d46:	4691      	mov	r9, r2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4d48:	ed9f 8a52 	vldr	s16, [pc, #328]	; 4e94 <audioTickString2+0x674>
				if (theNote[i] > 127.0f)
    4d4c:	eddf 8a52 	vldr	s17, [pc, #328]	; 4e98 <audioTickString2+0x678>
					theNote[i] = 64.0f;
    4d50:	ed9f 9a52 	vldr	s18, [pc, #328]	; 4e9c <audioTickString2+0x67c>
    4d54:	4d52      	ldr	r5, [pc, #328]	; (4ea0 <audioTickString2+0x680>)
    4d56:	f8df a15c 	ldr.w	sl, [pc, #348]	; 4eb4 <audioTickString2+0x694>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    4d5a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4d5e:	b29b      	uxth	r3, r3
    4d60:	2b00      	cmp	r3, #0
    4d62:	d13f      	bne.n	4de4 <audioTickString2+0x5c4>
    4d64:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
    4d68:	b29b      	uxth	r3, r3
    4d6a:	b3db      	cbz	r3, 4de4 <audioTickString2+0x5c4>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4d6c:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    4d70:	4a4c      	ldr	r2, [pc, #304]	; (4ea4 <audioTickString2+0x684>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4d72:	b29b      	uxth	r3, r3
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    4d74:	eb02 0284 	add.w	r2, r2, r4, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4d78:	ee07 3a90 	vmov	s15, r3
				stringOctave[i] = octave;
    4d7c:	4b4a      	ldr	r3, [pc, #296]	; (4ea8 <audioTickString2+0x688>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    4d7e:	ed92 0a00 	vldr	s0, [r2]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4d82:	eef8 0ae7 	vcvt.f32.s32	s1, s15
				stringOctave[i] = octave;
    4d86:	edd3 7a00 	vldr	s15, [r3]
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    4d8a:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    4d8e:	edc7 7a00 	vstr	s15, [r7]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4d92:	ee60 0a88 	vmul.f32	s1, s1, s16
				if (theNote[i] < 0.0f)
    4d96:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    4d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d9e:	d44f      	bmi.n	4e40 <audioTickString2+0x620>
				if (theNote[i] > 127.0f)
    4da0:	eeb4 0ae8 	vcmpe.f32	s0, s17
    4da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4da8:	dd51      	ble.n	4e4e <audioTickString2+0x62e>
					theNote[i] = 127.0f;
    4daa:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 4e98 <audioTickString2+0x678>
				float finalFreq = mtofTableLookup(theNote[i]);
    4dae:	edcd 0a00 	vstr	s1, [sp]
    4db2:	f004 fc29 	bl	9608 <__mtofTableLookup_veneer>
				tTString_setFreq(&strings[i], finalFreq);
    4db6:	4658      	mov	r0, fp
    4db8:	f004 fb12 	bl	93e0 <__tTString_setFreq_veneer>
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    4dbc:	eddd 0a00 	vldr	s1, [sp]
    4dc0:	ed96 0a02 	vldr	s0, [r6, #8]
    4dc4:	4658      	mov	r0, fp
    4dc6:	f004 f97b 	bl	90c0 <__tTString_pluck_veneer>
			{
    4dca:	e013      	b.n	4df4 <audioTickString2+0x5d4>
				tTString_setInharmonic(&strings[i], 0);
    4dcc:	4650      	mov	r0, sl
    4dce:	4621      	mov	r1, r4
    4dd0:	f004 fc3e 	bl	9650 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],(uint32_t)harmonic);
    4dd4:	eebc 0ae8 	vcvt.u32.f32	s0, s17
    4dd8:	4650      	mov	r0, sl
    4dda:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    4dde:	f004 fb97 	bl	9510 <__tTString_setHarmonic_veneer>
    4de2:	e599      	b.n	4918 <audioTickString2+0xf8>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    4de4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4de8:	b29b      	uxth	r3, r3
    4dea:	b11b      	cbz	r3, 4df4 <audioTickString2+0x5d4>
    4dec:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
    4df0:	b29b      	uxth	r3, r3
    4df2:	b343      	cbz	r3, 4e46 <audioTickString2+0x626>
			previousStringInputs[i] = stringInputs[i];
    4df4:	f83a 3014 	ldrh.w	r3, [sl, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    4df8:	f10b 0b04 	add.w	fp, fp, #4
    4dfc:	3704      	adds	r7, #4
			previousStringInputs[i] = stringInputs[i];
    4dfe:	b29b      	uxth	r3, r3
    4e00:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    4e04:	3401      	adds	r4, #1
    4e06:	f899 3000 	ldrb.w	r3, [r9]
    4e0a:	42a3      	cmp	r3, r4
    4e0c:	dca5      	bgt.n	4d5a <audioTickString2+0x53a>
		newPluck = 0;
    4e0e:	2200      	movs	r2, #0
    4e10:	f8c8 2000 	str.w	r2, [r8]
	for (int i = 0; i < numStringsThisBoard; i++)
    4e14:	2b00      	cmp	r3, #0
    4e16:	f47f ad27 	bne.w	4868 <audioTickString2+0x48>
    4e1a:	4b24      	ldr	r3, [pc, #144]	; (4eac <audioTickString2+0x68c>)
    4e1c:	eddf aa12 	vldr	s21, [pc, #72]	; 4e68 <audioTickString2+0x648>
    4e20:	9303      	str	r3, [sp, #12]
    4e22:	e6aa      	b.n	4b7a <audioTickString2+0x35a>
			theNote[i] = 64.0f;
    4e24:	eef4 8a68 	vcmp.f32	s17, s17
    4e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e2c:	fe5d 8a28 	vselvs.f32	s17, s26, s17
    4e30:	e54d      	b.n	48ce <audioTickString2+0xae>
		newPluck = 0;
    4e32:	4a1e      	ldr	r2, [pc, #120]	; (4eac <audioTickString2+0x68c>)
    4e34:	eddf aa0c 	vldr	s21, [pc, #48]	; 4e68 <audioTickString2+0x648>
    4e38:	9203      	str	r2, [sp, #12]
    4e3a:	f8c8 3000 	str.w	r3, [r8]
	for (int i = 0; i < numStringsThisBoard; i++)
    4e3e:	e69c      	b.n	4b7a <audioTickString2+0x35a>
					theNote[i] = 0.0f;
    4e40:	ed9f 0a09 	vldr	s0, [pc, #36]	; 4e68 <audioTickString2+0x648>
    4e44:	e7b3      	b.n	4dae <audioTickString2+0x58e>
				tTString_mute(&strings[i]);
    4e46:	4658      	mov	r0, fp
    4e48:	f004 fa52 	bl	92f0 <__tTString_mute_veneer>
    4e4c:	e7d2      	b.n	4df4 <audioTickString2+0x5d4>
					theNote[i] = 64.0f;
    4e4e:	eeb4 0a40 	vcmp.f32	s0, s0
    4e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4e56:	fe19 0a00 	vselvs.f32	s0, s18, s0
    4e5a:	e7a8      	b.n	4dae <audioTickString2+0x58e>
    4e5c:	2000068c 	.word	0x2000068c
    4e60:	200006a0 	.word	0x200006a0
    4e64:	3f7ae148 	.word	0x3f7ae148
    4e68:	00000000 	.word	0x00000000
    4e6c:	200053bc 	.word	0x200053bc
    4e70:	20000688 	.word	0x20000688
    4e74:	3727c5ac 	.word	0x3727c5ac
    4e78:	38d1b717 	.word	0x38d1b717
    4e7c:	42980000 	.word	0x42980000
    4e80:	3d4ccccd 	.word	0x3d4ccccd
    4e84:	3c23d70a 	.word	0x3c23d70a
    4e88:	322bcc77 	.word	0x322bcc77
    4e8c:	20000694 	.word	0x20000694
    4e90:	2001441c 	.word	0x2001441c
    4e94:	37800080 	.word	0x37800080
    4e98:	42fe0000 	.word	0x42fe0000
    4e9c:	42800000 	.word	0x42800000
    4ea0:	20005550 	.word	0x20005550
    4ea4:	20014414 	.word	0x20014414
    4ea8:	200054ec 	.word	0x200054ec
    4eac:	2001cd64 	.word	0x2001cd64
    4eb0:	2001cd5c 	.word	0x2001cd5c
    4eb4:	200143fc 	.word	0x200143fc
    4eb8:	f3af 8000 	nop.w
    4ebc:	f3af 8000 	nop.w

00004ec0 <audioFrameString2>:
{
    4ec0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uint32_t tempCountFrame = DWT->CYCCNT;
    4ec4:	4b5c      	ldr	r3, [pc, #368]	; (5038 <audioFrameString2+0x178>)
{
    4ec6:	4680      	mov	r8, r0
		if (resetStringInputs)
    4ec8:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 506c <audioFrameString2+0x1ac>
			for (int i = 0; i < numStringsThisBoard; i++)
    4ecc:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 5070 <audioFrameString2+0x1b0>
{
    4ed0:	ed2d 8b04 	vpush	{d8-d9}
		uint32_t tempCountFrame = DWT->CYCCNT;
    4ed4:	685e      	ldr	r6, [r3, #4]
		if (resetStringInputs)
    4ed6:	f89b 3000 	ldrb.w	r3, [fp]
    4eda:	2b00      	cmp	r3, #0
    4edc:	f040 8086 	bne.w	4fec <audioFrameString2+0x12c>
			for (int i = 0; i < numStringsThisBoard; i++)
    4ee0:	f899 3000 	ldrb.w	r3, [r9]
		for (int i = 0; i < numStringsThisBoard; i++)
    4ee4:	2b00      	cmp	r3, #0
    4ee6:	d051      	beq.n	4f8c <audioFrameString2+0xcc>
    4ee8:	4c54      	ldr	r4, [pc, #336]	; (503c <audioFrameString2+0x17c>)
    4eea:	2700      	movs	r7, #0
			tTString_setPickupFilterFreq(&strings[i],knobScaled[8]*6000.0f + 1000.0f);
    4eec:	ed9f 8a54 	vldr	s16, [pc, #336]	; 5040 <audioFrameString2+0x180>
    4ef0:	ed9f 9a54 	vldr	s18, [pc, #336]	; 5044 <audioFrameString2+0x184>
			tTString_setPeakFilterFreq(&strings[i],knobScaled[16]*6000.0f + 60.0f);
    4ef4:	eddf 8a54 	vldr	s17, [pc, #336]	; 5048 <audioFrameString2+0x188>
    4ef8:	4d54      	ldr	r5, [pc, #336]	; (504c <audioFrameString2+0x18c>)
			tTString_setPickupPos(&strings[i],knobScaled[3]);
    4efa:	4620      	mov	r0, r4
    4efc:	ed95 0a03 	vldr	s0, [r5, #12]
    4f00:	f004 fb12 	bl	9528 <__tTString_setPickupPos_veneer>
			tTString_setSlideGain(&strings[i],knobScaled[4]);
    4f04:	4620      	mov	r0, r4
    4f06:	ed95 0a04 	vldr	s0, [r5, #16]
		for (int i = 0; i < numStringsThisBoard; i++)
    4f0a:	3701      	adds	r7, #1
			tTString_setSlideGain(&strings[i],knobScaled[4]);
    4f0c:	f004 f9d0 	bl	92b0 <__tTString_setSlideGain_veneer>
			tTString_setPickupFilterFreq(&strings[i],knobScaled[8]*6000.0f + 1000.0f);
    4f10:	eeb0 0a49 	vmov.f32	s0, s18
    4f14:	edd5 7a08 	vldr	s15, [r5, #32]
    4f18:	4620      	mov	r0, r4
    4f1a:	eea7 0a88 	vfma.f32	s0, s15, s16
    4f1e:	f004 f9ef 	bl	9300 <__tTString_setPickupFilterFreq_veneer>
			tTString_setPickupModFreq(&strings[i],(knobScaled[12]));
    4f22:	4620      	mov	r0, r4
    4f24:	ed95 0a0c 	vldr	s0, [r5, #48]	; 0x30
    4f28:	f004 f88e 	bl	9048 <__tTString_setPickupModFreq_veneer>
			tTString_setPickupModAmp(&strings[i],knobScaled[13]);
    4f2c:	4620      	mov	r0, r4
    4f2e:	ed95 0a0d 	vldr	s0, [r5, #52]	; 0x34
    4f32:	f004 f965 	bl	9200 <__tTString_setPickupModAmp_veneer>
			tTString_setPhantomHarmonicsGain(&strings[i],knobScaled[14]);
    4f36:	4620      	mov	r0, r4
    4f38:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
    4f3c:	f004 f938 	bl	91b0 <__tTString_setPhantomHarmonicsGain_veneer>
			tTString_setPickupFilterQ(&strings[i],knobScaled[15]+0.5f);
    4f40:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4f44:	ed95 0a0f 	vldr	s0, [r5, #60]	; 0x3c
    4f48:	4620      	mov	r0, r4
    4f4a:	ee30 0a27 	vadd.f32	s0, s0, s15
    4f4e:	f004 fb2b 	bl	95a8 <__tTString_setPickupFilterQ_veneer>
			tTString_setPeakFilterFreq(&strings[i],knobScaled[16]*6000.0f + 60.0f);
    4f52:	eeb0 0a68 	vmov.f32	s0, s17
    4f56:	edd5 7a10 	vldr	s15, [r5, #64]	; 0x40
    4f5a:	4620      	mov	r0, r4
    4f5c:	eea7 0a88 	vfma.f32	s0, s15, s16
    4f60:	f004 f99e 	bl	92a0 <__tTString_setPeakFilterFreq_veneer>
			tTString_setPeakFilterQ(&strings[i],knobScaled[17]);
    4f64:	4620      	mov	r0, r4
    4f66:	ed95 0a11 	vldr	s0, [r5, #68]	; 0x44
    4f6a:	f004 f8f9 	bl	9160 <__tTString_setPeakFilterQ_veneer>
			tTString_setTensionGain(&strings[i],knobScaled[18]);
    4f6e:	4620      	mov	r0, r4
    4f70:	ed95 0a12 	vldr	s0, [r5, #72]	; 0x48
    4f74:	f004 f938 	bl	91e8 <__tTString_setTensionGain_veneer>
			tTString_setPickupAmount(&strings[i],knobScaled[19]);
    4f78:	4620      	mov	r0, r4
    4f7a:	ed95 0a13 	vldr	s0, [r5, #76]	; 0x4c
		for (int i = 0; i < numStringsThisBoard; i++)
    4f7e:	3404      	adds	r4, #4
			tTString_setPickupAmount(&strings[i],knobScaled[19]);
    4f80:	f004 f95e 	bl	9240 <__tTString_setPickupAmount_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    4f84:	f899 3000 	ldrb.w	r3, [r9]
    4f88:	42bb      	cmp	r3, r7
    4f8a:	dcb6      	bgt.n	4efa <audioFrameString2+0x3a>
    4f8c:	4c30      	ldr	r4, [pc, #192]	; (5050 <audioFrameString2+0x190>)
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    4f8e:	ed9f 8a31 	vldr	s16, [pc, #196]	; 5054 <audioFrameString2+0x194>
    4f92:	f504 7500 	add.w	r5, r4, #512	; 0x200
    4f96:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    4f9a:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    4f9e:	f7ff fc3f 	bl	4820 <audioTickString2>
    4fa2:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    4fa6:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    4fa8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    4fac:	42ac      	cmp	r4, r5
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    4fae:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    4fb2:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    4fb6:	d1f2      	bne.n	4f9e <audioFrameString2+0xde>
		if (switchStrings)
    4fb8:	4c27      	ldr	r4, [pc, #156]	; (5058 <audioFrameString2+0x198>)
    4fba:	6823      	ldr	r3, [r4, #0]
    4fbc:	bb8b      	cbnz	r3, 5022 <audioFrameString2+0x162>
		switchStrings = 0;
    4fbe:	2200      	movs	r2, #0
		timeFrame = DWT->CYCCNT - tempCountFrame;
    4fc0:	4b1d      	ldr	r3, [pc, #116]	; (5038 <audioFrameString2+0x178>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4fc2:	4826      	ldr	r0, [pc, #152]	; (505c <audioFrameString2+0x19c>)
		switchStrings = 0;
    4fc4:	6022      	str	r2, [r4, #0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    4fc6:	685b      	ldr	r3, [r3, #4]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4fc8:	ed90 7a00 	vldr	s14, [r0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    4fcc:	1b9b      	subs	r3, r3, r6
    4fce:	4924      	ldr	r1, [pc, #144]	; (5060 <audioFrameString2+0x1a0>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4fd0:	4a24      	ldr	r2, [pc, #144]	; (5064 <audioFrameString2+0x1a4>)
    4fd2:	ee07 3a90 	vmov	s15, r3
		timeFrame = DWT->CYCCNT - tempCountFrame;
    4fd6:	600b      	str	r3, [r1, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    4fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    4fdc:	ee67 7a87 	vmul.f32	s15, s15, s14
    4fe0:	edc2 7a00 	vstr	s15, [r2]
}
    4fe4:	ecbd 8b04 	vpop	{d8-d9}
    4fe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			for (int i = 0; i < numStringsThisBoard; i++)
    4fec:	f899 3000 	ldrb.w	r3, [r9]
    4ff0:	b1db      	cbz	r3, 502a <audioFrameString2+0x16a>
    4ff2:	2400      	movs	r4, #0
    4ff4:	4d11      	ldr	r5, [pc, #68]	; (503c <audioFrameString2+0x17c>)
    4ff6:	f8df a07c 	ldr.w	sl, [pc, #124]	; 5074 <audioFrameString2+0x1b4>
				previousStringInputs[i] = 0;
    4ffa:	4627      	mov	r7, r4
				tTString_mute(&strings[i]);
    4ffc:	4628      	mov	r0, r5
			for (int i = 0; i < numStringsThisBoard; i++)
    4ffe:	3504      	adds	r5, #4
				tTString_mute(&strings[i]);
    5000:	f004 f976 	bl	92f0 <__tTString_mute_veneer>
			for (int i = 0; i < numStringsThisBoard; i++)
    5004:	f899 3000 	ldrb.w	r3, [r9]
				previousStringInputs[i] = 0;
    5008:	f82a 7014 	strh.w	r7, [sl, r4, lsl #1]
			for (int i = 0; i < numStringsThisBoard; i++)
    500c:	3401      	adds	r4, #1
				previousStringInputs[i] = 0;
    500e:	f04f 0200 	mov.w	r2, #0
			for (int i = 0; i < numStringsThisBoard; i++)
    5012:	42a3      	cmp	r3, r4
    5014:	dcf2      	bgt.n	4ffc <audioFrameString2+0x13c>
			resetStringInputs = 0;
    5016:	f88b 2000 	strb.w	r2, [fp]
			newPluck = 1;
    501a:	2101      	movs	r1, #1
    501c:	4a12      	ldr	r2, [pc, #72]	; (5068 <audioFrameString2+0x1a8>)
    501e:	6011      	str	r1, [r2, #0]
    5020:	e760      	b.n	4ee4 <audioFrameString2+0x24>
			switchStringModel(switchStrings);
    5022:	6820      	ldr	r0, [r4, #0]
    5024:	f7fc f99c 	bl	1360 <switchStringModel>
    5028:	e7c9      	b.n	4fbe <audioFrameString2+0xfe>
			resetStringInputs = 0;
    502a:	f88b 3000 	strb.w	r3, [fp]
			newPluck = 1;
    502e:	2301      	movs	r3, #1
    5030:	4a0d      	ldr	r2, [pc, #52]	; (5068 <audioFrameString2+0x1a8>)
    5032:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    5034:	e7aa      	b.n	4f8c <audioFrameString2+0xcc>
    5036:	bf00      	nop
    5038:	e0001000 	.word	0xe0001000
    503c:	2001cd5c 	.word	0x2001cd5c
    5040:	45bb8000 	.word	0x45bb8000
    5044:	447a0000 	.word	0x447a0000
    5048:	42700000 	.word	0x42700000
    504c:	200053e0 	.word	0x200053e0
    5050:	30000000 	.word	0x30000000
    5054:	4b000000 	.word	0x4b000000
    5058:	20014434 	.word	0x20014434
    505c:	20000684 	.word	0x20000684
    5060:	20014438 	.word	0x20014438
    5064:	200053c4 	.word	0x200053c4
    5068:	200054e0 	.word	0x200054e0
    506c:	20005968 	.word	0x20005968
    5070:	20000694 	.word	0x20000694
    5074:	20005550 	.word	0x20005550
	...

00005080 <audioInitString3>:
float finalPuPos[NUM_STRINGS_PER_BOARD];

float string3Defaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};

void __ATTR_ITCMRAM audioInitString3()
{
    5080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	for (int v = 0; v < numStringsThisBoard; v++)
    5082:	4e08      	ldr	r6, [pc, #32]	; (50a4 <audioInitString3+0x24>)
    5084:	7833      	ldrb	r3, [r6, #0]
    5086:	b163      	cbz	r3, 50a2 <audioInitString3+0x22>
    5088:	4d07      	ldr	r5, [pc, #28]	; (50a8 <audioInitString3+0x28>)
    508a:	2400      	movs	r4, #0
	{
		tStiffString_init(&stringsC[v], 70, &leaf);
    508c:	4f07      	ldr	r7, [pc, #28]	; (50ac <audioInitString3+0x2c>)
    508e:	4628      	mov	r0, r5
    5090:	463a      	mov	r2, r7
    5092:	2146      	movs	r1, #70	; 0x46
	for (int v = 0; v < numStringsThisBoard; v++)
    5094:	3401      	adds	r4, #1
		tStiffString_init(&stringsC[v], 70, &leaf);
    5096:	f004 f9df 	bl	9458 <__tStiffString_init_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    509a:	7833      	ldrb	r3, [r6, #0]
    509c:	3504      	adds	r5, #4
    509e:	42a3      	cmp	r3, r4
    50a0:	dcf5      	bgt.n	508e <audioInitString3+0xe>
	}
}
    50a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50a4:	20000694 	.word	0x20000694
    50a8:	2001cd90 	.word	0x2001cd90
    50ac:	20005484 	.word	0x20005484
    50b0:	f3af 8000 	nop.w
    50b4:	f3af 8000 	nop.w
    50b8:	f3af 8000 	nop.w
    50bc:	f3af 8000 	nop.w

000050c0 <audioFreeString3>:


void __ATTR_ITCMRAM audioFreeString3()
{
    50c0:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    50c2:	4e07      	ldr	r6, [pc, #28]	; (50e0 <audioFreeString3+0x20>)
    50c4:	7833      	ldrb	r3, [r6, #0]
    50c6:	b14b      	cbz	r3, 50dc <audioFreeString3+0x1c>
    50c8:	4d06      	ldr	r5, [pc, #24]	; (50e4 <audioFreeString3+0x24>)
    50ca:	2400      	movs	r4, #0
	{
		tStiffString_free(&stringsC[v]);
    50cc:	4628      	mov	r0, r5
	for (int v = 0; v < numStringsThisBoard; v++)
    50ce:	3401      	adds	r4, #1
		tStiffString_free(&stringsC[v]);
    50d0:	f004 f932 	bl	9338 <__tStiffString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    50d4:	7833      	ldrb	r3, [r6, #0]
    50d6:	3504      	adds	r5, #4
    50d8:	42a3      	cmp	r3, r4
    50da:	dcf7      	bgt.n	50cc <audioFreeString3+0xc>
	}
}
    50dc:	bd70      	pop	{r4, r5, r6, pc}
    50de:	bf00      	nop
    50e0:	20000694 	.word	0x20000694
    50e4:	2001cd90 	.word	0x2001cd90
    50e8:	f3af 8000 	nop.w
    50ec:	f3af 8000 	nop.w
    50f0:	f3af 8000 	nop.w
    50f4:	f3af 8000 	nop.w
    50f8:	f3af 8000 	nop.w
    50fc:	f3af 8000 	nop.w

00005100 <audioSwitchToString3>:

void __ATTR_ITCMRAM audioSwitchToString3()
{
    5100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5104:	4c15      	ldr	r4, [pc, #84]	; (515c <audioSwitchToString3+0x5c>)
	for (int i = 0; i < 12; i++)
    5106:	2500      	movs	r5, #0
    5108:	4f15      	ldr	r7, [pc, #84]	; (5160 <audioSwitchToString3+0x60>)
		}
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}
		knobFrozen[i] = 1;
    510a:	f04f 0801 	mov.w	r8, #1
    510e:	4e15      	ldr	r6, [pc, #84]	; (5164 <audioSwitchToString3+0x64>)
    5110:	f8df a058 	ldr.w	sl, [pc, #88]	; 516c <audioSwitchToString3+0x6c>
    5114:	f8df 9058 	ldr.w	r9, [pc, #88]	; 5170 <audioSwitchToString3+0x70>
{
    5118:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    511c:	ed9f 8a12 	vldr	s16, [pc, #72]	; 5168 <audioSwitchToString3+0x68>
    5120:	eeb0 0a48 	vmov.f32	s0, s16
    5124:	4620      	mov	r0, r4
    5126:	f004 f963 	bl	93f0 <__tExpSmooth_setFactor_veneer>
		if (voice == 59)
    512a:	f8da 3000 	ldr.w	r3, [sl]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    512e:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
    5130:	3704      	adds	r7, #4
		if (voice == 59)
    5132:	2b3b      	cmp	r3, #59	; 0x3b
	for (int i = 0; i < 12; i++)
    5134:	f104 0404 	add.w	r4, r4, #4
    5138:	f106 0604 	add.w	r6, r6, #4
			tExpSmooth_setValAndDest(&knobSmoothers[i], string3Defaults[i]);
    513c:	bf0c      	ite	eq
    513e:	ed17 0a01 	vldreq	s0, [r7, #-4]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    5142:	ed16 0a01 	vldrne	s0, [r6, #-4]
    5146:	f004 f9db 	bl	9500 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    514a:	f809 8005 	strb.w	r8, [r9, r5]
	for (int i = 0; i < 12; i++)
    514e:	3501      	adds	r5, #1
    5150:	2d0c      	cmp	r5, #12
    5152:	d1e5      	bne.n	5120 <audioSwitchToString3+0x20>
	}
}
    5154:	ecbd 8b02 	vpop	{d8}
    5158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    515c:	20005430 	.word	0x20005430
    5160:	20000a9c 	.word	0x20000a9c
    5164:	200186f8 	.word	0x200186f8
    5168:	3a83126f 	.word	0x3a83126f
    516c:	20014440 	.word	0x20014440
    5170:	200053cc 	.word	0x200053cc
    5174:	f3af 8000 	nop.w
    5178:	f3af 8000 	nop.w
    517c:	f3af 8000 	nop.w

00005180 <audioTickString3>:
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickString3(void)
{
    5180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float temp = 0.0f;


	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    5184:	486e      	ldr	r0, [pc, #440]	; (5340 <audioTickString3+0x1c0>)
    5186:	4c6f      	ldr	r4, [pc, #444]	; (5344 <audioTickString3+0x1c4>)
    5188:	4d6f      	ldr	r5, [pc, #444]	; (5348 <audioTickString3+0x1c8>)
    518a:	f104 0630 	add.w	r6, r4, #48	; 0x30
{
    518e:	ed2d 8b06 	vpush	{d8-d10}
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    5192:	f004 fa25 	bl	95e0 <__tExpSmooth_tick_veneer>
    5196:	eef0 8a40 	vmov.f32	s17, s0

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    519a:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    519c:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    519e:	f004 fa1f 	bl	95e0 <__tExpSmooth_tick_veneer>
    51a2:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    51a6:	42a6      	cmp	r6, r4
    51a8:	d1f7      	bne.n	519a <audioTickString3+0x1a>
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
    51aa:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 5384 <audioTickString3+0x204>
	{
		float theNote[NUM_STRINGS_PER_BOARD];
		for (int i = 0; i < numStringsThisBoard; i++)
    51ae:	4e67      	ldr	r6, [pc, #412]	; (534c <audioTickString3+0x1cc>)
	if (newPluck)
    51b0:	f8d8 3000 	ldr.w	r3, [r8]
    51b4:	2b00      	cmp	r3, #0
    51b6:	d150      	bne.n	525a <audioTickString3+0xda>
		for (int i = 0; i < numStringsThisBoard; i++)
    51b8:	7833      	ldrb	r3, [r6, #0]
			}
			previousStringInputs[i] = stringInputs[i];
		}
		newPluck = 0;
	}
	for (int i = 0; i < numStringsThisBoard; i++)
    51ba:	2b00      	cmp	r3, #0
    51bc:	f000 80bc 	beq.w	5338 <audioTickString3+0x1b8>
    51c0:	4d63      	ldr	r5, [pc, #396]	; (5350 <audioTickString3+0x1d0>)
    51c2:	2400      	movs	r4, #0
    51c4:	ed9f 8a63 	vldr	s16, [pc, #396]	; 5354 <audioTickString3+0x1d4>
	{

		temp += tStiffString_tick(&stringsC[i]);
    51c8:	4628      	mov	r0, r5
	for (int i = 0; i < numStringsThisBoard; i++)
    51ca:	3401      	adds	r4, #1
		temp += tStiffString_tick(&stringsC[i]);
    51cc:	f004 f85c 	bl	9288 <__tStiffString_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    51d0:	7833      	ldrb	r3, [r6, #0]
		temp += tStiffString_tick(&stringsC[i]);
    51d2:	ee38 8a00 	vadd.f32	s16, s16, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    51d6:	3504      	adds	r5, #4
    51d8:	42a3      	cmp	r3, r4
    51da:	dcf5      	bgt.n	51c8 <audioTickString3+0x48>
	}
	//float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    51dc:	eddf 0a5e 	vldr	s1, [pc, #376]	; 5358 <audioTickString3+0x1d8>
	int volIdxInt = (int) volIdx;
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
    51e0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    51e4:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 535c <audioTickString3+0x1dc>
    51e8:	ee68 0aa0 	vmul.f32	s1, s17, s1
    51ec:	ed9f 0a59 	vldr	s0, [pc, #356]	; 5354 <audioTickString3+0x1d4>
    51f0:	f004 fa32 	bl	9658 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
    51f4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp *= outVol;
	temp *= outVol * masterVolFromBrain;
    51f8:	4b59      	ldr	r3, [pc, #356]	; (5360 <audioTickString3+0x1e0>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    51fa:	4a5a      	ldr	r2, [pc, #360]	; (5364 <audioTickString3+0x1e4>)
	temp *= outVol * masterVolFromBrain;
    51fc:	edd3 7a00 	vldr	s15, [r3]
	int volIdxInt = (int) volIdx;
    5200:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
    5204:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    5208:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    520a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    520e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    5212:	ee30 0a47 	vsub.f32	s0, s0, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    5216:	edd3 6a00 	vldr	s13, [r3]
    521a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    521e:	ee39 7a40 	vsub.f32	s14, s18, s0
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    5222:	ed92 6a00 	vldr	s12, [r2]
    5226:	ee20 0a06 	vmul.f32	s0, s0, s12
    522a:	eea6 0a87 	vfma.f32	s0, s13, s14
	temp *= outVol * masterVolFromBrain;
    522e:	ee20 0a27 	vmul.f32	s0, s0, s15
	temp = tanhf(temp);
    5232:	ee20 0a08 	vmul.f32	s0, s0, s16
    5236:	f003 ffc7 	bl	91c8 <__tanhf_veneer>
    523a:	eef0 0a40 	vmov.f32	s1, s0
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    523e:	eeb0 1a49 	vmov.f32	s2, s18
    5242:	eddf 7a49 	vldr	s15, [pc, #292]	; 5368 <audioTickString3+0x1e8>
    5246:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    524a:	ee60 0aa7 	vmul.f32	s1, s1, s15
}
    524e:	ecbd 8b06 	vpop	{d8-d10}
    5252:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5256:	f004 b9ff 	b.w	9658 <__LEAF_clip_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    525a:	7833      	ldrb	r3, [r6, #0]
    525c:	2b00      	cmp	r3, #0
    525e:	d058      	beq.n	5312 <audioTickString3+0x192>
    5260:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 5350 <audioTickString3+0x1d0>
    5264:	2400      	movs	r4, #0
    5266:	4f41      	ldr	r7, [pc, #260]	; (536c <audioTickString3+0x1ec>)
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    5268:	ed9f 9a41 	vldr	s18, [pc, #260]	; 5370 <audioTickString3+0x1f0>
				if (theNote[i] > 127.0f)
    526c:	eddf 9a3b 	vldr	s19, [pc, #236]	; 535c <audioTickString3+0x1dc>
					theNote[i] = 64.0f;
    5270:	ed9f aa40 	vldr	s20, [pc, #256]	; 5374 <audioTickString3+0x1f4>
    5274:	4d40      	ldr	r5, [pc, #256]	; (5378 <audioTickString3+0x1f8>)
    5276:	f8df 9110 	ldr.w	r9, [pc, #272]	; 5388 <audioTickString3+0x208>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    527a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    527e:	b29b      	uxth	r3, r3
    5280:	bb7b      	cbnz	r3, 52e2 <audioTickString3+0x162>
    5282:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    5286:	b29b      	uxth	r3, r3
    5288:	b35b      	cbz	r3, 52e2 <audioTickString3+0x162>
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    528a:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    528e:	4a3b      	ldr	r2, [pc, #236]	; (537c <audioTickString3+0x1fc>)
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    5290:	b29b      	uxth	r3, r3
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    5292:	eb02 0284 	add.w	r2, r2, r4, lsl #2
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    5296:	ee08 3a10 	vmov	s16, r3
				stringOctave[i] = octave;
    529a:	4b39      	ldr	r3, [pc, #228]	; (5380 <audioTickString3+0x200>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    529c:	ed92 0a00 	vldr	s0, [r2]
				stringOctave[i] = octave;
    52a0:	edd3 7a00 	vldr	s15, [r3]
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    52a4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    52a8:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    52ac:	edc7 7a00 	vstr	s15, [r7]
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    52b0:	ee28 8a09 	vmul.f32	s16, s16, s18
				if (theNote[i] < 0.0f)
    52b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    52b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    52bc:	d42e      	bmi.n	531c <audioTickString3+0x19c>
				if (theNote[i] > 127.0f)
    52be:	eeb4 0ae9 	vcmpe.f32	s0, s19
    52c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    52c6:	dd30      	ble.n	532a <audioTickString3+0x1aa>
					theNote[i] = 127.0f;
    52c8:	ed9f 0a24 	vldr	s0, [pc, #144]	; 535c <audioTickString3+0x1dc>
				float finalFreq = mtofTableLookup(theNote[i]);
    52cc:	f004 f99c 	bl	9608 <__mtofTableLookup_veneer>
				tStiffString_setFreq(&stringsC[i], finalFreq);
    52d0:	4650      	mov	r0, sl
    52d2:	f004 f99d 	bl	9610 <__tStiffString_setFreq_veneer>
				tStiffString_pluck(&stringsC[i], str3Amp);
    52d6:	eeb0 0a48 	vmov.f32	s0, s16
    52da:	4650      	mov	r0, sl
    52dc:	f003 fef8 	bl	90d0 <__tStiffString_pluck_veneer>
			{
    52e0:	e007      	b.n	52f2 <audioTickString3+0x172>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    52e2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    52e6:	b29b      	uxth	r3, r3
    52e8:	b11b      	cbz	r3, 52f2 <audioTickString3+0x172>
    52ea:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    52ee:	b29b      	uxth	r3, r3
    52f0:	b1bb      	cbz	r3, 5322 <audioTickString3+0x1a2>
			previousStringInputs[i] = stringInputs[i];
    52f2:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    52f6:	f10a 0a04 	add.w	sl, sl, #4
    52fa:	3704      	adds	r7, #4
			previousStringInputs[i] = stringInputs[i];
    52fc:	b29b      	uxth	r3, r3
    52fe:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    5302:	3401      	adds	r4, #1
    5304:	7833      	ldrb	r3, [r6, #0]
    5306:	42a3      	cmp	r3, r4
    5308:	dcb7      	bgt.n	527a <audioTickString3+0xfa>
		newPluck = 0;
    530a:	2200      	movs	r2, #0
    530c:	f8c8 2000 	str.w	r2, [r8]
    5310:	e753      	b.n	51ba <audioTickString3+0x3a>
    5312:	ed9f 8a10 	vldr	s16, [pc, #64]	; 5354 <audioTickString3+0x1d4>
    5316:	f8c8 3000 	str.w	r3, [r8]
	for (int i = 0; i < numStringsThisBoard; i++)
    531a:	e75f      	b.n	51dc <audioTickString3+0x5c>
					theNote[i] = 0.0f;
    531c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 5354 <audioTickString3+0x1d4>
    5320:	e7d4      	b.n	52cc <audioTickString3+0x14c>
				tStiffString_mute(&stringsC[i]);
    5322:	4650      	mov	r0, sl
    5324:	f003 ffb8 	bl	9298 <__tStiffString_mute_veneer>
    5328:	e7e3      	b.n	52f2 <audioTickString3+0x172>
					theNote[i] = 64.0f;
    532a:	eeb4 0a40 	vcmp.f32	s0, s0
    532e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5332:	fe1a 0a00 	vselvs.f32	s0, s20, s0
    5336:	e7c9      	b.n	52cc <audioTickString3+0x14c>
	for (int i = 0; i < numStringsThisBoard; i++)
    5338:	ed9f 8a06 	vldr	s16, [pc, #24]	; 5354 <audioTickString3+0x1d4>
    533c:	e74e      	b.n	51dc <audioTickString3+0x5c>
    533e:	bf00      	nop
    5340:	2001444c 	.word	0x2001444c
    5344:	200053e0 	.word	0x200053e0
    5348:	20005430 	.word	0x20005430
    534c:	20000694 	.word	0x20000694
    5350:	2001cd90 	.word	0x2001cd90
    5354:	00000000 	.word	0x00000000
    5358:	42a00000 	.word	0x42a00000
    535c:	42fe0000 	.word	0x42fe0000
    5360:	2000068c 	.word	0x2000068c
    5364:	200006a0 	.word	0x200006a0
    5368:	3f7ae148 	.word	0x3f7ae148
    536c:	2001441c 	.word	0x2001441c
    5370:	37800080 	.word	0x37800080
    5374:	42800000 	.word	0x42800000
    5378:	20005550 	.word	0x20005550
    537c:	20014414 	.word	0x20014414
    5380:	200054ec 	.word	0x200054ec
    5384:	200054e0 	.word	0x200054e0
    5388:	200143fc 	.word	0x200143fc
    538c:	f3af 8000 	nop.w
    5390:	f3af 8000 	nop.w
    5394:	f3af 8000 	nop.w
    5398:	f3af 8000 	nop.w
    539c:	f3af 8000 	nop.w

000053a0 <audioFrameString3>:
		uint32_t tempCountFrame = DWT->CYCCNT;
    53a0:	4bce      	ldr	r3, [pc, #824]	; (56dc <audioFrameString3+0x33c>)
{
    53a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (resetStringInputs)
    53a6:	4cce      	ldr	r4, [pc, #824]	; (56e0 <audioFrameString3+0x340>)
{
    53a8:	ed2d 8b08 	vpush	{d8-d11}
		uint32_t tempCountFrame = DWT->CYCCNT;
    53ac:	685b      	ldr	r3, [r3, #4]
{
    53ae:	b08b      	sub	sp, #44	; 0x2c
		uint32_t tempCountFrame = DWT->CYCCNT;
    53b0:	9304      	str	r3, [sp, #16]
		if (resetStringInputs)
    53b2:	7823      	ldrb	r3, [r4, #0]
{
    53b4:	9005      	str	r0, [sp, #20]
		if (resetStringInputs)
    53b6:	2b00      	cmp	r3, #0
    53b8:	f040 815e 	bne.w	5678 <audioFrameString3+0x2d8>
			for (int i = 0; i < numStringsThisBoard; i++)
    53bc:	4bc9      	ldr	r3, [pc, #804]	; (56e4 <audioFrameString3+0x344>)
    53be:	781a      	ldrb	r2, [r3, #0]
    53c0:	9303      	str	r3, [sp, #12]
		for (int i = 0; i < numStringsThisBoard; i++)
    53c2:	2a00      	cmp	r2, #0
    53c4:	f000 811b 	beq.w	55fe <audioFrameString3+0x25e>
    53c8:	4bc7      	ldr	r3, [pc, #796]	; (56e8 <audioFrameString3+0x348>)
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    53ca:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    53ce:	4ec7      	ldr	r6, [pc, #796]	; (56ec <audioFrameString3+0x34c>)
		for (int i = 0; i < numStringsThisBoard; i++)
    53d0:	2400      	movs	r4, #0
    53d2:	9302      	str	r3, [sp, #8]
			if (theNote[i] > 127.0f)
    53d4:	eddf aac6 	vldr	s21, [pc, #792]	; 56f0 <audioFrameString3+0x350>
    53d8:	4bc6      	ldr	r3, [pc, #792]	; (56f4 <audioFrameString3+0x354>)
				theNote[i] = 64.0f;
    53da:	ed9f bac7 	vldr	s22, [pc, #796]	; 56f8 <audioFrameString3+0x358>
			float newStiffness = (knobScaled[0] * 100.0f);
    53de:	ed9f aac7 	vldr	s20, [pc, #796]	; 56fc <audioFrameString3+0x35c>
				float squishedStiffness = (newStiffness*0.01f) ;
    53e2:	eddf 9ac7 	vldr	s19, [pc, #796]	; 5700 <audioFrameString3+0x360>
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    53e6:	ed9f 9ac7 	vldr	s18, [pc, #796]	; 5704 <audioFrameString3+0x364>
    53ea:	4fc7      	ldr	r7, [pc, #796]	; (5708 <audioFrameString3+0x368>)
    53ec:	f8df 9364 	ldr.w	r9, [pc, #868]	; 5754 <audioFrameString3+0x3b4>
    53f0:	4dc6      	ldr	r5, [pc, #792]	; (570c <audioFrameString3+0x36c>)
    53f2:	f8df 8364 	ldr.w	r8, [pc, #868]	; 5758 <audioFrameString3+0x3b8>
    53f6:	f8df a364 	ldr.w	sl, [pc, #868]	; 575c <audioFrameString3+0x3bc>
    53fa:	9301      	str	r3, [sp, #4]
			theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    53fc:	9b02      	ldr	r3, [sp, #8]
    53fe:	00a0      	lsls	r0, r4, #2
    5400:	ecf3 7a01 	vldmia	r3!, {s15}
    5404:	9302      	str	r3, [sp, #8]
    5406:	4bc2      	ldr	r3, [pc, #776]	; (5710 <audioFrameString3+0x370>)
    5408:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    540c:	ed93 8a00 	vldr	s16, [r3]
    5410:	ee38 8a27 	vadd.f32	s16, s16, s15
			if (theNote[i] < 0.0f)
    5414:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    5418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    541c:	f100 8129 	bmi.w	5672 <audioFrameString3+0x2d2>
			if (theNote[i] > 127.0f)
    5420:	eeb4 8aea 	vcmpe.f32	s16, s21
    5424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5428:	f340 8151 	ble.w	56ce <audioFrameString3+0x32e>
				theNote[i] = 127.0f;
    542c:	ed9f 8ab0 	vldr	s16, [pc, #704]	; 56f0 <audioFrameString3+0x350>
			float finalFreq = mtofTableLookup(theNote[i]);
    5430:	4bb8      	ldr	r3, [pc, #736]	; (5714 <audioFrameString3+0x374>)
    5432:	eeb0 0a48 	vmov.f32	s0, s16
    5436:	eb03 0b00 	add.w	fp, r3, r0
    543a:	f004 f8e5 	bl	9608 <__mtofTableLookup_veneer>
    543e:	eef0 ba40 	vmov.f32	s23, s0
			tStiffString_setFreqNoUpdate(&stringsC[i], finalFreq);
    5442:	4658      	mov	r0, fp
    5444:	f004 f800 	bl	9448 <__tStiffString_setFreqNoUpdate_veneer>
			float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    5448:	9b01      	ldr	r3, [sp, #4]
    544a:	ecb3 0a01 	vldmia	r3!, {s0}
    544e:	ee38 0a40 	vsub.f32	s0, s16, s0
    5452:	9301      	str	r3, [sp, #4]
    5454:	f004 f8d8 	bl	9608 <__mtofTableLookup_veneer>
			volatile float ratioOfOpenStringToNote=(finalFreq/ openStringFreq);
    5458:	ee8b 6a80 	vdiv.f32	s12, s23, s0
			float newStiffness = (knobScaled[0] * 100.0f);
    545c:	ed9a 8a00 	vldr	s16, [sl]
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    5460:	edd5 7a00 	vldr	s15, [r5]
			volatile float ratioOfNoteToOpenString = openStringFreq/ finalFreq;
    5464:	eec0 6a2b 	vdiv.f32	s13, s0, s23
			float newStiffness = (knobScaled[0] * 100.0f);
    5468:	ee28 8a0a 	vmul.f32	s16, s16, s20
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    546c:	ee37 7aa8 	vadd.f32	s14, s15, s17
    5470:	eeb4 7ac8 	vcmpe.f32	s14, s16
			volatile float ratioOfOpenStringToNote=(finalFreq/ openStringFreq);
    5474:	ed8d 6a06 	vstr	s12, [sp, #24]
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    5478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			volatile float ratioOfNoteToOpenString = openStringFreq/ finalFreq;
    547c:	edcd 6a07 	vstr	s13, [sp, #28]
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    5480:	d406      	bmi.n	5490 <audioFrameString3+0xf0>
    5482:	ee77 7ae8 	vsub.f32	s15, s15, s17
    5486:	eef4 7ac8 	vcmpe.f32	s15, s16
    548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    548e:	dd0b      	ble.n	54a8 <audioFrameString3+0x108>
				float squishedStiffness = (newStiffness*0.01f) ;
    5490:	ee68 ba29 	vmul.f32	s23, s16, s19
				if ( squishedStiffness != prevSquishedStiffness[i])
    5494:	edd8 7a00 	vldr	s15, [r8]
    5498:	eef4 7a6b 	vcmp.f32	s15, s23
    549c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54a0:	f040 8109 	bne.w	56b6 <audioFrameString3+0x316>
				prevStiffness[i] = newStiffness;
    54a4:	ed85 8a00 	vstr	s16, [r5]
			float newpuPos = (knobScaled[10] * 200.0f);
    54a8:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 5718 <audioFrameString3+0x378>
    54ac:	ed9a 8a0a 	vldr	s16, [sl, #40]	; 0x28
			if ((newpuPos > (prevPuPos[i] + 1.0f))|| (newpuPos < (prevPuPos[i] - 1.0f)))
    54b0:	edd6 7a00 	vldr	s15, [r6]
			float newpuPos = (knobScaled[10] * 200.0f);
    54b4:	ee28 8a07 	vmul.f32	s16, s16, s14
			if ((newpuPos > (prevPuPos[i] + 1.0f))|| (newpuPos < (prevPuPos[i] - 1.0f)))
    54b8:	ee37 7aa8 	vadd.f32	s14, s15, s17
    54bc:	eeb4 7ac8 	vcmpe.f32	s14, s16
    54c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54c4:	d406      	bmi.n	54d4 <audioFrameString3+0x134>
    54c6:	ee77 7ae8 	vsub.f32	s15, s15, s17
    54ca:	eef4 7ac8 	vcmpe.f32	s15, s16
    54ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54d2:	dd2d      	ble.n	5530 <audioFrameString3+0x190>
				float squishedPuPos = (newpuPos*0.005f) ;
    54d4:	eddf ba91 	vldr	s23, [pc, #580]	; 571c <audioFrameString3+0x37c>
				if ( squishedPuPos != prevSquishedPuPos[i])
    54d8:	edd7 7a00 	vldr	s15, [r7]
				float squishedPuPos = (newpuPos*0.005f) ;
    54dc:	ee68 ba2b 	vmul.f32	s23, s16, s23
				if ( squishedPuPos != prevSquishedPuPos[i])
    54e0:	eef4 7a6b 	vcmp.f32	s15, s23
    54e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    54e8:	d020      	beq.n	552c <audioFrameString3+0x18c>
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    54ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
					if (ratioOfNoteToOpenString < pickupKnobVal)
    54ee:	ed9d 7a07 	vldr	s14, [sp, #28]
					finalPuPos[i] = squishedPuPos;
    54f2:	edc9 ba00 	vstr	s23, [r9]
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    54f6:	eeeb 7ae7 	vfms.f32	s15, s23, s15
					if (ratioOfNoteToOpenString < pickupKnobVal)
    54fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
    54fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5502:	f100 80cb 	bmi.w	569c <audioFrameString3+0x2fc>
					float pickupKnobVal2 = pickupKnobVal;
    5506:	eef0 6a67 	vmov.f32	s13, s15
					float pickuppos = (pickupKnobVal * knobScaled[1]) + (pickupKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[1]);
    550a:	ed9a 7a01 	vldr	s14, [sl, #4]
					tStiffString_setPickupPosNoUpdate(&stringsC[i], (pickuppos));
    550e:	4658      	mov	r0, fp
					float pickuppos = (pickupKnobVal * knobScaled[1]) + (pickupKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[1]);
    5510:	ed9d 0a06 	vldr	s0, [sp, #24]
    5514:	ee38 6ac7 	vsub.f32	s12, s17, s14
    5518:	ee20 0a26 	vmul.f32	s0, s0, s13
    551c:	ee20 0a06 	vmul.f32	s0, s0, s12
					tStiffString_setPickupPosNoUpdate(&stringsC[i], (pickuppos));
    5520:	eea7 0a27 	vfma.f32	s0, s14, s15
    5524:	f003 ff10 	bl	9348 <__tStiffString_setPickupPosNoUpdate_veneer>
					prevSquishedPuPos[i] = squishedPuPos;
    5528:	edc7 ba00 	vstr	s23, [r7]
				prevPuPos[i] = newpuPos;
    552c:	ed86 8a00 	vstr	s16, [r6]
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    5530:	edda 6a0b 	vldr	s13, [sl, #44]	; 0x2c
    5534:	eddf 7a7a 	vldr	s15, [pc, #488]	; 5720 <audioFrameString3+0x380>
			if (ratioOfNoteToOpenString < pluckKnobVal)
    5538:	ed9d 7a07 	vldr	s14, [sp, #28]
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    553c:	eee6 7ae7 	vfms.f32	s15, s13, s15
    5540:	ee77 7a89 	vadd.f32	s15, s15, s18
			if (ratioOfNoteToOpenString < pluckKnobVal)
    5544:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    554c:	f140 808e 	bpl.w	566c <audioFrameString3+0x2cc>
				volatile float difference = pluckKnobVal - ratioOfNoteToOpenString;
    5550:	ed9d 7a07 	vldr	s14, [sp, #28]
    5554:	ee37 7ac7 	vsub.f32	s14, s15, s14
    5558:	ed8d 7a09 	vstr	s14, [sp, #36]	; 0x24
				pluckKnobVal2 = ratioOfNoteToOpenString-difference;
    555c:	eddd 6a07 	vldr	s13, [sp, #28]
    5560:	ed9d 7a09 	vldr	s14, [sp, #36]	; 0x24
    5564:	ee76 6ac7 	vsub.f32	s13, s13, s14
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    5568:	ed9a 7a02 	vldr	s14, [sl, #8]
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    556c:	eeb0 0a49 	vmov.f32	s0, s18
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    5570:	eddd 0a06 	vldr	s1, [sp, #24]
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    5574:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 5724 <audioFrameString3+0x384>
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    5578:	ee60 0aa6 	vmul.f32	s1, s1, s13
    557c:	ee78 6ac7 	vsub.f32	s13, s17, s14
    5580:	ee60 0aa6 	vmul.f32	s1, s1, s13
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    5584:	eee7 0a27 	vfma.f32	s1, s14, s15
    5588:	f004 f866 	bl	9658 <__LEAF_clip_veneer>
    558c:	4658      	mov	r0, fp
    558e:	f003 fe17 	bl	91c0 <__tStiffString_setPluckPosNoUpdate_veneer>
			float mainDecay = (1.0f - knobScaled[8]);
    5592:	edda 7a08 	vldr	s15, [sl, #32]
			float dampKnob = (1.0f - knobScaled[9]);
    5596:	ed9a 8a09 	vldr	s16, [sl, #36]	; 0x24
			float mainDecay = (1.0f - knobScaled[8]);
    559a:	ee78 7ae7 	vsub.f32	s15, s17, s15
			float dampKnob = (1.0f - knobScaled[9]);
    559e:	ee38 8ac8 	vsub.f32	s16, s17, s16
			if (mainDecay < 0.01f)
    55a2:	eef4 7ae9 	vcmpe.f32	s15, s19
    55a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    55aa:	d45c      	bmi.n	5666 <audioFrameString3+0x2c6>
			tStiffString_setDecayNoUpdate(&stringsC[i], mainDecay * mainDecay * mainDecay * 0.001f);
    55ac:	ee27 0aa7 	vmul.f32	s0, s15, s15
    55b0:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 5728 <audioFrameString3+0x388>
    55b4:	ee20 0a27 	vmul.f32	s0, s0, s15
    55b8:	ee20 0a07 	vmul.f32	s0, s0, s14
    55bc:	4658      	mov	r0, fp
		for (int i = 0; i < numStringsThisBoard; i++)
    55be:	3401      	adds	r4, #1
			tStiffString_setDecayNoUpdate(&stringsC[i], mainDecay * mainDecay * mainDecay * 0.001f);
    55c0:	f003 ffce 	bl	9560 <__tStiffString_setDecayNoUpdate_veneer>
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    55c4:	ee68 7a08 	vmul.f32	s15, s16, s16
    55c8:	ed9f 0a58 	vldr	s0, [pc, #352]	; 572c <audioFrameString3+0x38c>
    55cc:	4658      	mov	r0, fp
		for (int i = 0; i < numStringsThisBoard; i++)
    55ce:	3604      	adds	r6, #4
    55d0:	3704      	adds	r7, #4
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    55d2:	ee67 7a88 	vmul.f32	s15, s15, s16
		for (int i = 0; i < numStringsThisBoard; i++)
    55d6:	f109 0904 	add.w	r9, r9, #4
    55da:	3504      	adds	r5, #4
    55dc:	f108 0804 	add.w	r8, r8, #4
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    55e0:	ee27 0a80 	vmul.f32	s0, s15, s0
    55e4:	f003 fd84 	bl	90f0 <__tStiffString_setDecayHighFreqNoUpdate_veneer>
			tStiffString_updateOscillators(&stringsC[i]);
    55e8:	4658      	mov	r0, fp
    55ea:	f003 fd49 	bl	9080 <__tStiffString_updateOscillators_veneer>
			tStiffString_updateOutputWeights(&stringsC[i]);
    55ee:	4658      	mov	r0, fp
    55f0:	f004 f81e 	bl	9630 <__tStiffString_updateOutputWeights_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    55f4:	9b03      	ldr	r3, [sp, #12]
    55f6:	781b      	ldrb	r3, [r3, #0]
    55f8:	42a3      	cmp	r3, r4
    55fa:	f73f aeff 	bgt.w	53fc <audioFrameString3+0x5c>
    55fe:	4c4c      	ldr	r4, [pc, #304]	; (5730 <audioFrameString3+0x390>)
    5600:	9b05      	ldr	r3, [sp, #20]
    5602:	f504 7500 	add.w	r5, r4, #512	; 0x200
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    5606:	ed9f 8a4b 	vldr	s16, [pc, #300]	; 5734 <audioFrameString3+0x394>
    560a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    560e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    5612:	f7ff fdb5 	bl	5180 <audioTickString3>
    5616:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    561a:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    561c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5620:	42ac      	cmp	r4, r5
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    5622:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    5626:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    562a:	d1f2      	bne.n	5612 <audioFrameString3+0x272>
		if (switchStrings)
    562c:	4c42      	ldr	r4, [pc, #264]	; (5738 <audioFrameString3+0x398>)
    562e:	6823      	ldr	r3, [r4, #0]
    5630:	2b00      	cmp	r3, #0
    5632:	d148      	bne.n	56c6 <audioFrameString3+0x326>
		switchStrings = 0;
    5634:	2200      	movs	r2, #0
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5636:	4841      	ldr	r0, [pc, #260]	; (573c <audioFrameString3+0x39c>)
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5638:	4b28      	ldr	r3, [pc, #160]	; (56dc <audioFrameString3+0x33c>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    563a:	ed90 7a00 	vldr	s14, [r0]
		switchStrings = 0;
    563e:	6022      	str	r2, [r4, #0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5640:	9804      	ldr	r0, [sp, #16]
    5642:	685b      	ldr	r3, [r3, #4]
    5644:	493e      	ldr	r1, [pc, #248]	; (5740 <audioFrameString3+0x3a0>)
    5646:	1a1b      	subs	r3, r3, r0
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5648:	4a3e      	ldr	r2, [pc, #248]	; (5744 <audioFrameString3+0x3a4>)
    564a:	ee07 3a90 	vmov	s15, r3
		timeFrame = DWT->CYCCNT - tempCountFrame;
    564e:	600b      	str	r3, [r1, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5650:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5654:	ee67 7a87 	vmul.f32	s15, s15, s14
    5658:	edc2 7a00 	vstr	s15, [r2]
}
    565c:	b00b      	add	sp, #44	; 0x2c
    565e:	ecbd 8b08 	vpop	{d8-d11}
    5662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5666:	ed9f 0a38 	vldr	s0, [pc, #224]	; 5748 <audioFrameString3+0x3a8>
    566a:	e7a7      	b.n	55bc <audioFrameString3+0x21c>
			float pluckKnobVal2 = pluckKnobVal;
    566c:	eef0 6a67 	vmov.f32	s13, s15
    5670:	e77a      	b.n	5568 <audioFrameString3+0x1c8>
				theNote[i] = 0.0f;
    5672:	ed9f 8a35 	vldr	s16, [pc, #212]	; 5748 <audioFrameString3+0x3a8>
    5676:	e6db      	b.n	5430 <audioFrameString3+0x90>
			for (int i = 0; i < numStringsThisBoard; i++)
    5678:	4b1a      	ldr	r3, [pc, #104]	; (56e4 <audioFrameString3+0x344>)
    567a:	781a      	ldrb	r2, [r3, #0]
    567c:	9303      	str	r3, [sp, #12]
    567e:	b13a      	cbz	r2, 5690 <audioFrameString3+0x2f0>
    5680:	2300      	movs	r3, #0
    5682:	4832      	ldr	r0, [pc, #200]	; (574c <audioFrameString3+0x3ac>)
				previousStringInputs[i] = 0;
    5684:	4619      	mov	r1, r3
    5686:	f820 1013 	strh.w	r1, [r0, r3, lsl #1]
			for (int i = 0; i < numStringsThisBoard; i++)
    568a:	3301      	adds	r3, #1
    568c:	4293      	cmp	r3, r2
    568e:	d1fa      	bne.n	5686 <audioFrameString3+0x2e6>
			resetStringInputs = 0;
    5690:	2300      	movs	r3, #0
			newPluck = 1;
    5692:	2101      	movs	r1, #1
			resetStringInputs = 0;
    5694:	7023      	strb	r3, [r4, #0]
			newPluck = 1;
    5696:	4b2e      	ldr	r3, [pc, #184]	; (5750 <audioFrameString3+0x3b0>)
    5698:	6019      	str	r1, [r3, #0]
    569a:	e692      	b.n	53c2 <audioFrameString3+0x22>
						volatile float difference = pickupKnobVal - ratioOfNoteToOpenString;
    569c:	ed9d 7a07 	vldr	s14, [sp, #28]
    56a0:	ee37 7ac7 	vsub.f32	s14, s15, s14
    56a4:	ed8d 7a08 	vstr	s14, [sp, #32]
						pickupKnobVal2 = ratioOfNoteToOpenString-difference;
    56a8:	eddd 6a07 	vldr	s13, [sp, #28]
    56ac:	ed9d 7a08 	vldr	s14, [sp, #32]
    56b0:	ee76 6ac7 	vsub.f32	s13, s13, s14
    56b4:	e729      	b.n	550a <audioFrameString3+0x16a>
					tStiffString_setStiffnessNoUpdate(&stringsC[i],squishedStiffness );
    56b6:	eeb0 0a6b 	vmov.f32	s0, s23
    56ba:	4658      	mov	r0, fp
    56bc:	f003 ffb0 	bl	9620 <__tStiffString_setStiffnessNoUpdate_veneer>
					prevSquishedStiffness[i] = squishedStiffness;
    56c0:	edc8 ba00 	vstr	s23, [r8]
    56c4:	e6ee      	b.n	54a4 <audioFrameString3+0x104>
			switchStringModel(switchStrings);
    56c6:	6820      	ldr	r0, [r4, #0]
    56c8:	f7fb fe4a 	bl	1360 <switchStringModel>
    56cc:	e7b2      	b.n	5634 <audioFrameString3+0x294>
				theNote[i] = 64.0f;
    56ce:	eeb4 8a48 	vcmp.f32	s16, s16
    56d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    56d6:	fe1b 8a08 	vselvs.f32	s16, s22, s16
    56da:	e6a9      	b.n	5430 <audioFrameString3+0x90>
    56dc:	e0001000 	.word	0xe0001000
    56e0:	20005968 	.word	0x20005968
    56e4:	20000694 	.word	0x20000694
    56e8:	2001441c 	.word	0x2001441c
    56ec:	2001cd70 	.word	0x2001cd70
    56f0:	42fe0000 	.word	0x42fe0000
    56f4:	20001384 	.word	0x20001384
    56f8:	42800000 	.word	0x42800000
    56fc:	42c80000 	.word	0x42c80000
    5700:	3c23d70a 	.word	0x3c23d70a
    5704:	3dcccccd 	.word	0x3dcccccd
    5708:	2001cd78 	.word	0x2001cd78
    570c:	2001cd88 	.word	0x2001cd88
    5710:	20014414 	.word	0x20014414
    5714:	2001cd90 	.word	0x2001cd90
    5718:	43480000 	.word	0x43480000
    571c:	3ba3d70a 	.word	0x3ba3d70a
    5720:	3ecccccd 	.word	0x3ecccccd
    5724:	3f666666 	.word	0x3f666666
    5728:	3a83126f 	.word	0x3a83126f
    572c:	3983126f 	.word	0x3983126f
    5730:	30000000 	.word	0x30000000
    5734:	4b000000 	.word	0x4b000000
    5738:	20014434 	.word	0x20014434
    573c:	20000684 	.word	0x20000684
    5740:	20014438 	.word	0x20014438
    5744:	200053c4 	.word	0x200053c4
    5748:	00000000 	.word	0x00000000
    574c:	20005550 	.word	0x20005550
    5750:	200054e0 	.word	0x200054e0
    5754:	2001cd68 	.word	0x2001cd68
    5758:	2001cd80 	.word	0x2001cd80
    575c:	200053e0 	.word	0x200053e0

00005760 <oscillator_tick>:
{
    5760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		oscOuts[0][i][string] = 0.0f;
    5764:	4a58      	ldr	r2, [pc, #352]	; (58c8 <oscillator_tick+0x168>)
    5766:	0081      	lsls	r1, r0, #2
	for (int osc = 0; osc < oscToTick; osc++)
    5768:	f8df b188 	ldr.w	fp, [pc, #392]	; 58f4 <oscillator_tick+0x194>
		oscOuts[0][i][string] = 0.0f;
    576c:	eb02 0580 	add.w	r5, r2, r0, lsl #2
	for (int osc = 0; osc < oscToTick; osc++)
    5770:	f89b 2000 	ldrb.w	r2, [fp]
{
    5774:	ed2d 8b06 	vpush	{d8-d10}
		oscOuts[0][i][string] = 0.0f;
    5778:	eddf 8a54 	vldr	s17, [pc, #336]	; 58cc <oscillator_tick+0x16c>
{
    577c:	b087      	sub	sp, #28
		oscOuts[0][i][string] = 0.0f;
    577e:	edc5 8a00 	vstr	s17, [r5]
		oscOuts[1][i][string] = 0.0f;
    5782:	edc5 8a06 	vstr	s17, [r5, #24]
		oscOuts[0][i][string] = 0.0f;
    5786:	edc5 8a02 	vstr	s17, [r5, #8]
		oscOuts[1][i][string] = 0.0f;
    578a:	edc5 8a08 	vstr	s17, [r5, #32]
		oscOuts[0][i][string] = 0.0f;
    578e:	edc5 8a04 	vstr	s17, [r5, #16]
		oscOuts[1][i][string] = 0.0f;
    5792:	edc5 8a0a 	vstr	s17, [r5, #40]	; 0x28
	for (int osc = 0; osc < oscToTick; osc++)
    5796:	b342      	cbz	r2, 57ea <oscillator_tick+0x8a>
    5798:	4a4d      	ldr	r2, [pc, #308]	; (58d0 <oscillator_tick+0x170>)
    579a:	eef0 9a40 	vmov.f32	s19, s0
    579e:	4c4d      	ldr	r4, [pc, #308]	; (58d4 <oscillator_tick+0x174>)
    57a0:	eb02 0901 	add.w	r9, r2, r1
    57a4:	4e4c      	ldr	r6, [pc, #304]	; (58d8 <oscillator_tick+0x178>)
    57a6:	4a4d      	ldr	r2, [pc, #308]	; (58dc <oscillator_tick+0x17c>)
    57a8:	440c      	add	r4, r1
    57aa:	4f4d      	ldr	r7, [pc, #308]	; (58e0 <oscillator_tick+0x180>)
    57ac:	440e      	add	r6, r1
    57ae:	eb02 0801 	add.w	r8, r2, r1
    57b2:	f8df a144 	ldr.w	sl, [pc, #324]	; 58f8 <oscillator_tick+0x198>
    57b6:	440f      	add	r7, r1
			float freqToSmooth = (note + (fine*0.01f));
    57b8:	ed9f aa4a 	vldr	s20, [pc, #296]	; 58e4 <oscillator_tick+0x184>
	for (int osc = 0; osc < oscToTick; osc++)
    57bc:	2100      	movs	r1, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    57be:	9003      	str	r0, [sp, #12]
    57c0:	9700      	str	r7, [sp, #0]
		if (oscOn[osc])
    57c2:	f81a 3b01 	ldrb.w	r3, [sl], #1
    57c6:	b9ab      	cbnz	r3, 57f4 <oscillator_tick+0x94>
	for (int osc = 0; osc < oscToTick; osc++)
    57c8:	9a00      	ldr	r2, [sp, #0]
    57ca:	3101      	adds	r1, #1
    57cc:	f89b 3000 	ldrb.w	r3, [fp]
    57d0:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
    57d4:	3208      	adds	r2, #8
    57d6:	3508      	adds	r5, #8
    57d8:	428b      	cmp	r3, r1
    57da:	f109 0908 	add.w	r9, r9, #8
    57de:	f106 0608 	add.w	r6, r6, #8
    57e2:	f108 0808 	add.w	r8, r8, #8
    57e6:	9200      	str	r2, [sp, #0]
    57e8:	dceb      	bgt.n	57c2 <oscillator_tick+0x62>
}
    57ea:	b007      	add	sp, #28
    57ec:	ecbd 8b06 	vpop	{d8-d10}
    57f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    57f4:	eeb0 0a69 	vmov.f32	s0, s19
			float freqToSmooth = (note + (fine*0.01f));
    57f8:	edd4 7ab8 	vldr	s15, [r4, #736]	; 0x2e0
			float shape = oscParams[OscShape].realVal[string];
    57fc:	edd4 0ac6 	vldr	s1, [r4, #792]	; 0x318
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5800:	4630      	mov	r0, r6
    5802:	9102      	str	r1, [sp, #8]
    5804:	eea7 0a8a 	vfma.f32	s0, s15, s20
			float shape = oscParams[OscShape].realVal[string];
    5808:	edcd 0a01 	vstr	s1, [sp, #4]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    580c:	ed94 9afe 	vldr	s18, [r4, #1016]	; 0x3f8
			float freqOffset= oscParams[OscFreq].realVal[string];
    5810:	edd4 aabf 	vldr	s21, [r4, #764]	; 0x2fc
			float amp = oscParams[OscAmp].realVal[string];
    5814:	ed94 8acd 	vldr	s16, [r4, #820]	; 0x334
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5818:	f003 feaa 	bl	9570 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    581c:	4630      	mov	r0, r6
    581e:	f003 fedf 	bl	95e0 <__tExpSmooth_tick_veneer>
    5822:	edd8 7a00 	vldr	s15, [r8]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5826:	ee30 0a27 	vadd.f32	s0, s0, s15
    582a:	f003 feed 	bl	9608 <__mtofTableLookup_veneer>
    582e:	9b00      	ldr	r3, [sp, #0]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5830:	9902      	ldr	r1, [sp, #8]
    5832:	2200      	movs	r2, #0
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5834:	edd3 7a00 	vldr	s15, [r3]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5838:	a805      	add	r0, sp, #20
    583a:	4b2b      	ldr	r3, [pc, #172]	; (58e8 <oscillator_tick+0x188>)
    583c:	eee0 aa27 	vfma.f32	s21, s0, s15
    5840:	eddd 0a01 	vldr	s1, [sp, #4]
    5844:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
			float sample = 0.0f;
    5848:	edcd 8a05 	vstr	s17, [sp, #20]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    584c:	461f      	mov	r7, r3
    584e:	9b03      	ldr	r3, [sp, #12]
    5850:	9101      	str	r1, [sp, #4]
    5852:	eeb0 0a6a 	vmov.f32	s0, s21
    5856:	47b8      	blx	r7
			sample *= amp;
    5858:	eddd 7a05 	vldr	s15, [sp, #20]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    585c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (isnan(sample))
    5860:	9901      	ldr	r1, [sp, #4]
			sample *= amp;
    5862:	ee68 7a27 	vmul.f32	s15, s16, s15
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5866:	ee37 7a49 	vsub.f32	s14, s14, s18
			if (isnan(sample))
    586a:	eef4 7a67 	vcmp.f32	s15, s15
    586e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5872:	d61a      	bvs.n	58aa <oscillator_tick+0x14a>
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5874:	4b1d      	ldr	r3, [pc, #116]	; (58ec <oscillator_tick+0x18c>)
			sourceValues[osc][string] = sample;
    5876:	edc9 7a00 	vstr	s15, [r9]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    587a:	edd3 6a00 	vldr	s13, [r3]
    587e:	ee67 7aa6 	vmul.f32	s15, s15, s13
			if (isnan(sample))
    5882:	eef4 7a67 	vcmp.f32	s15, s15
    5886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    588a:	d615      	bvs.n	58b8 <oscillator_tick+0x158>
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    588c:	ee29 9a27 	vmul.f32	s18, s18, s15
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5890:	ee67 7a27 	vmul.f32	s15, s14, s15
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5894:	ed94 7aaa 	vldr	s14, [r4, #680]	; 0x2a8
    5898:	ee29 9a07 	vmul.f32	s18, s18, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    589c:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    58a0:	ed85 9a00 	vstr	s18, [r5]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    58a4:	edc5 7a06 	vstr	s15, [r5, #24]
    58a8:	e78e      	b.n	57c8 <oscillator_tick+0x68>
				nanChuck++;
    58aa:	4a11      	ldr	r2, [pc, #68]	; (58f0 <oscillator_tick+0x190>)
    58ac:	eef0 7a68 	vmov.f32	s15, s17
    58b0:	6813      	ldr	r3, [r2, #0]
    58b2:	3301      	adds	r3, #1
    58b4:	6013      	str	r3, [r2, #0]
    58b6:	e7dd      	b.n	5874 <oscillator_tick+0x114>
				nanChuck++;
    58b8:	4a0d      	ldr	r2, [pc, #52]	; (58f0 <oscillator_tick+0x190>)
    58ba:	eef0 7a68 	vmov.f32	s15, s17
    58be:	6813      	ldr	r3, [r2, #0]
    58c0:	3301      	adds	r3, #1
    58c2:	6013      	str	r3, [r2, #0]
    58c4:	e7e2      	b.n	588c <oscillator_tick+0x12c>
    58c6:	bf00      	nop
    58c8:	2001d56c 	.word	0x2001d56c
    58cc:	00000000 	.word	0x00000000
    58d0:	2001d788 	.word	0x2001d788
    58d4:	200190e4 	.word	0x200190e4
    58d8:	2001d644 	.word	0x2001d644
    58dc:	2001d4b0 	.word	0x2001d4b0
    58e0:	2001d1c4 	.word	0x2001d1c4
    58e4:	3c23d70a 	.word	0x3c23d70a
    58e8:	2001d70c 	.word	0x2001d70c
    58ec:	20000ad4 	.word	0x20000ad4
    58f0:	2001d508 	.word	0x2001d508
    58f4:	20000ae8 	.word	0x20000ae8
    58f8:	2001d568 	.word	0x2001d568
    58fc:	f3af 8000 	nop.w

00005900 <sawSquareTick>:
{
    5900:	b538      	push	{r3, r4, r5, lr}
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    5902:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5906:	4c0e      	ldr	r4, [pc, #56]	; (5940 <sawSquareTick+0x40>)
{
    5908:	4605      	mov	r5, r0
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    590a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    590e:	ed2d 8b02 	vpush	{d8}
    5912:	eeb0 8a60 	vmov.f32	s16, s1
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    5916:	4620      	mov	r0, r4
    5918:	f003 fbaa 	bl	9070 <__tPBSawSquare_setFreq_veneer>
	tPBSawSquare_setShape(&sawPaired[v][string], shape);
    591c:	4620      	mov	r0, r4
    591e:	eeb0 0a48 	vmov.f32	s0, s16
    5922:	f003 fc21 	bl	9168 <__tPBSawSquare_setShape_veneer>
    *sample += tPBSawSquare_tick(&sawPaired[v][string]);
    5926:	4620      	mov	r0, r4
    5928:	f003 fd82 	bl	9430 <__tPBSawSquare_tick_veneer>
    592c:	edd5 7a00 	vldr	s15, [r5]
    5930:	ee37 0a80 	vadd.f32	s0, s15, s0
    5934:	ed85 0a00 	vstr	s0, [r5]
}
    5938:	ecbd 8b02 	vpop	{d8}
    593c:	bd38      	pop	{r3, r4, r5, pc}
    593e:	bf00      	nop
    5940:	2001d6b4 	.word	0x2001d6b4
    5944:	f3af 8000 	nop.w
    5948:	f3af 8000 	nop.w
    594c:	f3af 8000 	nop.w
    5950:	f3af 8000 	nop.w
    5954:	f3af 8000 	nop.w
    5958:	f3af 8000 	nop.w
    595c:	f3af 8000 	nop.w

00005960 <sineTriTick>:
{
    5960:	b538      	push	{r3, r4, r5, lr}
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    5962:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5966:	4c0e      	ldr	r4, [pc, #56]	; (59a0 <sineTriTick+0x40>)
{
    5968:	4605      	mov	r5, r0
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    596a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    596e:	ed2d 8b02 	vpush	{d8}
    5972:	eeb0 8a60 	vmov.f32	s16, s1
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    5976:	4620      	mov	r0, r4
    5978:	f003 fd22 	bl	93c0 <__tPBSineTriangle_setFreq_veneer>
    tPBSineTriangle_setShape(&sinePaired[v][string],shape);
    597c:	4620      	mov	r0, r4
    597e:	eeb0 0a48 	vmov.f32	s0, s16
    5982:	f003 fe29 	bl	95d8 <__tPBSineTriangle_setShape_veneer>
    *sample += tPBSineTriangle_tick(&sinePaired[v][string]);
    5986:	4620      	mov	r0, r4
    5988:	f003 fd6a 	bl	9460 <__tPBSineTriangle_tick_veneer>
    598c:	edd5 7a00 	vldr	s15, [r5]
    5990:	ee37 0a80 	vadd.f32	s0, s15, s0
    5994:	ed85 0a00 	vstr	s0, [r5]
}
    5998:	ecbd 8b02 	vpop	{d8}
    599c:	bd38      	pop	{r3, r4, r5, pc}
    599e:	bf00      	nop
    59a0:	2001d770 	.word	0x2001d770
    59a4:	f3af 8000 	nop.w
    59a8:	f3af 8000 	nop.w
    59ac:	f3af 8000 	nop.w
    59b0:	f3af 8000 	nop.w
    59b4:	f3af 8000 	nop.w
    59b8:	f3af 8000 	nop.w
    59bc:	f3af 8000 	nop.w

000059c0 <sawTick>:
	tPBSaw_setFreq(&saw[v][string], freq);
    59c0:	4a0a      	ldr	r2, [pc, #40]	; (59ec <sawTick+0x2c>)
    59c2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    59c6:	b510      	push	{r4, lr}
    59c8:	4604      	mov	r4, r0
    59ca:	b082      	sub	sp, #8
	tPBSaw_setFreq(&saw[v][string], freq);
    59cc:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    59d0:	9001      	str	r0, [sp, #4]
    59d2:	f003 fb59 	bl	9088 <__tPBSaw_setFreq_veneer>
    *sample += tPBSaw_tick(&saw[v][string]);
    59d6:	9801      	ldr	r0, [sp, #4]
    59d8:	f003 fdde 	bl	9598 <__tPBSaw_tick_veneer>
    59dc:	edd4 7a00 	vldr	s15, [r4]
    59e0:	ee37 0a80 	vadd.f32	s0, s15, s0
    59e4:	ed84 0a00 	vstr	s0, [r4]
}
    59e8:	b002      	add	sp, #8
    59ea:	bd10      	pop	{r4, pc}
    59ec:	2001d69c 	.word	0x2001d69c
    59f0:	f3af 8000 	nop.w
    59f4:	f3af 8000 	nop.w
    59f8:	f3af 8000 	nop.w
    59fc:	f3af 8000 	nop.w

00005a00 <pulseTick>:
{
    5a00:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_setFreq(&pulse[v][string], freq);
    5a02:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5a06:	4c0e      	ldr	r4, [pc, #56]	; (5a40 <pulseTick+0x40>)
{
    5a08:	4605      	mov	r5, r0
    tPBPulse_setFreq(&pulse[v][string], freq);
    5a0a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    5a0e:	ed2d 8b02 	vpush	{d8}
    5a12:	eeb0 8a60 	vmov.f32	s16, s1
    tPBPulse_setFreq(&pulse[v][string], freq);
    5a16:	4620      	mov	r0, r4
    5a18:	f003 fd82 	bl	9520 <__tPBPulse_setFreq_veneer>
    tPBPulse_setWidth(&pulse[v][string], shape);
    5a1c:	4620      	mov	r0, r4
    5a1e:	eeb0 0a48 	vmov.f32	s0, s16
    5a22:	f003 fd91 	bl	9548 <__tPBPulse_setWidth_veneer>
    *sample += tPBPulse_tick(&pulse[v][string]);
    5a26:	4620      	mov	r0, r4
    5a28:	f003 fdce 	bl	95c8 <__tPBPulse_tick_veneer>
    5a2c:	edd5 7a00 	vldr	s15, [r5]
    5a30:	ee37 0a80 	vadd.f32	s0, s15, s0
    5a34:	ed85 0a00 	vstr	s0, [r5]
}
    5a38:	ecbd 8b02 	vpop	{d8}
    5a3c:	bd38      	pop	{r3, r4, r5, pc}
    5a3e:	bf00      	nop
    5a40:	2001d680 	.word	0x2001d680
    5a44:	f3af 8000 	nop.w
    5a48:	f3af 8000 	nop.w
    5a4c:	f3af 8000 	nop.w
    5a50:	f3af 8000 	nop.w
    5a54:	f3af 8000 	nop.w
    5a58:	f3af 8000 	nop.w
    5a5c:	f3af 8000 	nop.w

00005a60 <sineTick>:
    tCycle_setFreq(&sine[v][string], freq);
    5a60:	4a0a      	ldr	r2, [pc, #40]	; (5a8c <sineTick+0x2c>)
    5a62:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    5a66:	b510      	push	{r4, lr}
    5a68:	4604      	mov	r4, r0
    5a6a:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
    5a6c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    5a70:	9001      	str	r0, [sp, #4]
    5a72:	f003 fb41 	bl	90f8 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
    5a76:	9801      	ldr	r0, [sp, #4]
    5a78:	f003 fbf6 	bl	9268 <__tCycle_tick_veneer>
    5a7c:	edd4 7a00 	vldr	s15, [r4]
    5a80:	ee37 0a80 	vadd.f32	s0, s15, s0
    5a84:	ed84 0a00 	vstr	s0, [r4]
}
    5a88:	b002      	add	sp, #8
    5a8a:	bd10      	pop	{r4, pc}
    5a8c:	2001d758 	.word	0x2001d758
    5a90:	f3af 8000 	nop.w
    5a94:	f3af 8000 	nop.w
    5a98:	f3af 8000 	nop.w
    5a9c:	f3af 8000 	nop.w

00005aa0 <triTick>:
{
    5aa0:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_setFreq(&tri[v][string], freq);
    5aa2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5aa6:	4c0e      	ldr	r4, [pc, #56]	; (5ae0 <triTick+0x40>)
{
    5aa8:	4605      	mov	r5, r0
    tPBTriangle_setFreq(&tri[v][string], freq);
    5aaa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    5aae:	ed2d 8b02 	vpush	{d8}
    5ab2:	eeb0 8a60 	vmov.f32	s16, s1
    tPBTriangle_setFreq(&tri[v][string], freq);
    5ab6:	4620      	mov	r0, r4
    5ab8:	f003 fb46 	bl	9148 <__tPBTriangle_setFreq_veneer>
    tPBTriangle_setSkew(&tri[v][string], shape);
    5abc:	4620      	mov	r0, r4
    5abe:	eeb0 0a48 	vmov.f32	s0, s16
    5ac2:	f003 fbc9 	bl	9258 <__tPBTriangle_setSkew_veneer>
    *sample += tPBTriangle_tick(&tri[v][string]);
    5ac6:	4620      	mov	r0, r4
    5ac8:	f003 fbd2 	bl	9270 <__tPBTriangle_tick_veneer>
    5acc:	edd5 7a00 	vldr	s15, [r5]
    5ad0:	ee37 0a80 	vadd.f32	s0, s15, s0
    5ad4:	ed85 0a00 	vstr	s0, [r5]
}
    5ad8:	ecbd 8b02 	vpop	{d8}
    5adc:	bd38      	pop	{r3, r4, r5, pc}
    5ade:	bf00      	nop
    5ae0:	2001d908 	.word	0x2001d908
    5ae4:	f3af 8000 	nop.w
    5ae8:	f3af 8000 	nop.w
    5aec:	f3af 8000 	nop.w
    5af0:	f3af 8000 	nop.w
    5af4:	f3af 8000 	nop.w
    5af8:	f3af 8000 	nop.w
    5afc:	f3af 8000 	nop.w

00005b00 <userTick>:
}
    5b00:	4770      	bx	lr
    5b02:	bf00      	nop
    5b04:	f3af 8000 	nop.w
    5b08:	f3af 8000 	nop.w
    5b0c:	f3af 8000 	nop.w
    5b10:	f3af 8000 	nop.w
    5b14:	f3af 8000 	nop.w
    5b18:	f3af 8000 	nop.w
    5b1c:	f3af 8000 	nop.w

00005b20 <filter_tick>:
		float enabled = filtParams[FilterEnabled].realVal[string];
    5b20:	4b8b      	ldr	r3, [pc, #556]	; (5d50 <filter_tick+0x230>)
    5b22:	f201 229b 	addw	r2, r1, #667	; 0x29b
		if (!enabledFilt[f]) continue;
    5b26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    5b2a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
{
    5b2e:	b570      	push	{r4, r5, r6, lr}
    5b30:	ed2d 8b04 	vpush	{d8-d9}
		float enabled = filtParams[FilterEnabled].realVal[string];
    5b34:	edd2 6a00 	vldr	s13, [r2]
{
    5b38:	460d      	mov	r5, r1
    5b3a:	4604      	mov	r4, r0
		if (!enabledFilt[f]) continue;
    5b3c:	eef4 6ac7 	vcmpe.f32	s13, s14
    5b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5b44:	f340 809c 	ble.w	5c80 <filter_tick+0x160>
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    5b48:	1c8a      	adds	r2, r1, #2
    5b4a:	f603 219c 	addw	r1, r3, #2716	; 0xa9c
		if (isnan(note))
    5b4e:	eeb4 0a40 	vcmp.f32	s0, s0
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    5b52:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    5b56:	ed91 6a00 	vldr	s12, [r1]
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    5b5a:	f503 612f 	add.w	r1, r3, #2800	; 0xaf0
		if (isnan(note))
    5b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    5b62:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    5b66:	edd1 5a00 	vldr	s11, [r1]
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    5b6a:	ea4f 0182 	mov.w	r1, r2, lsl #2
		if (isnan(note))
    5b6e:	f180 80c0 	bvs.w	5cf2 <filter_tick+0x1d2>
		float enabled = filtParams[FilterEnabled].realVal[string];
    5b72:	f205 21c5 	addw	r1, r5, #709	; 0x2c5
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    5b76:	eea0 6a25 	vfma.f32	s12, s0, s11
		float enabled = filtParams[FilterEnabled].realVal[string];
    5b7a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    5b7e:	ed91 9a00 	vldr	s18, [r1]
		if (!enabledFilt[f]) continue;
    5b82:	eeb4 9ac7 	vcmpe.f32	s18, s14
    5b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5b8a:	dd47      	ble.n	5c1c <filter_tick+0xfc>
		if (isnan(note))
    5b8c:	eeb4 0a40 	vcmp.f32	s0, s0
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    5b90:	4970      	ldr	r1, [pc, #448]	; (5d54 <filter_tick+0x234>)
    5b92:	eb01 0082 	add.w	r0, r1, r2, lsl #2
		if (isnan(note))
    5b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    5b9a:	edd0 7a00 	vldr	s15, [r0]
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    5b9e:	edd0 5a15 	vldr	s11, [r0, #84]	; 0x54
			note = 0.0f; //is this necessary?
    5ba2:	bf68      	it	vs
    5ba4:	ed9f 0a6c 	vldrvs	s0, [pc, #432]	; 5d58 <filter_tick+0x238>
	if (enabledFilt[0])
    5ba8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    5bac:	f205 22ef 	addw	r2, r5, #751	; 0x2ef
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    5bb0:	eee0 7a25 	vfma.f32	s15, s0, s11
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    5bb4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (enabledFilt[0])
    5bb8:	eef4 6ac7 	vcmpe.f32	s13, s14
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    5bbc:	ed93 8a00 	vldr	s16, [r3]
	if (enabledFilt[0])
    5bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    5bc4:	eef0 8a67 	vmov.f32	s17, s15
	if (enabledFilt[0])
    5bc8:	dc2e      	bgt.n	5c28 <filter_tick+0x108>
	float sendToFilter2 = samples[0] * (1.0f - sp);
    5bca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    5bce:	ed94 0a01 	vldr	s0, [r4, #4]
    5bd2:	ed94 7a00 	vldr	s14, [r4]
    5bd6:	4e61      	ldr	r6, [pc, #388]	; (5d5c <filter_tick+0x23c>)
	float sendToFilter2 = samples[0] * (1.0f - sp);
    5bd8:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
    5bdc:	eea7 0a87 	vfma.f32	s0, s15, s14
    5be0:	ed84 0a01 	vstr	s0, [r4, #4]
		if (isnan(samples[1]))
    5be4:	eeb4 0a40 	vcmp.f32	s0, s0
    5be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5bec:	f180 80a8 	bvs.w	5d40 <filter_tick+0x220>
		filterTick[1](&samples[1], 1, cutoff[1], string);
    5bf0:	eeb0 0a68 	vmov.f32	s0, s17
    5bf4:	6873      	ldr	r3, [r6, #4]
    5bf6:	462a      	mov	r2, r5
    5bf8:	2101      	movs	r1, #1
    5bfa:	1d20      	adds	r0, r4, #4
    5bfc:	4798      	blx	r3
		if (isnan(samples[0]))
    5bfe:	edd4 7a00 	vldr	s15, [r4]
    5c02:	eef4 7a67 	vcmp.f32	s15, s15
    5c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5c0a:	f180 808e 	bvs.w	5d2a <filter_tick+0x20a>
	return samples[1] + (samples[0] * sp);
    5c0e:	ed94 0a01 	vldr	s0, [r4, #4]
    5c12:	eea7 0a88 	vfma.f32	s0, s15, s16
}
    5c16:	ecbd 8b04 	vpop	{d8-d9}
    5c1a:	bd70      	pop	{r4, r5, r6, pc}
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    5c1c:	f205 22ef 	addw	r2, r5, #751	; 0x2ef
    5c20:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5c24:	ed93 8a00 	vldr	s16, [r3]
		if (isnan(samples[0]))
    5c28:	edd4 7a00 	vldr	s15, [r4]
    5c2c:	eef4 7a67 	vcmp.f32	s15, s15
    5c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5c34:	d64d      	bvs.n	5cd2 <filter_tick+0x1b2>
		filterTick[0](&samples[0], 0, cutoff[0], string);
    5c36:	4e49      	ldr	r6, [pc, #292]	; (5d5c <filter_tick+0x23c>)
    5c38:	eeb0 0a46 	vmov.f32	s0, s12
    5c3c:	462a      	mov	r2, r5
    5c3e:	2100      	movs	r1, #0
    5c40:	6833      	ldr	r3, [r6, #0]
    5c42:	4620      	mov	r0, r4
    5c44:	4798      	blx	r3
		if (isnan(samples[0]))
    5c46:	edd4 7a00 	vldr	s15, [r4]
    5c4a:	eef4 7a67 	vcmp.f32	s15, s15
    5c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5c52:	d645      	bvs.n	5ce0 <filter_tick+0x1c0>
	float sendToFilter2 = samples[0] * (1.0f - sp);
    5c54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    5c58:	ed94 0a01 	vldr	s0, [r4, #4]
	if (enabledFilt[1])
    5c5c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	float sendToFilter2 = samples[0] * (1.0f - sp);
    5c60:	ee37 7a48 	vsub.f32	s14, s14, s16
	if (enabledFilt[1])
    5c64:	eeb4 9ae6 	vcmpe.f32	s18, s13
	samples[1] += sendToFilter2;
    5c68:	eea7 0a87 	vfma.f32	s0, s15, s14
	if (enabledFilt[1])
    5c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	samples[1] += sendToFilter2;
    5c70:	ed84 0a01 	vstr	s0, [r4, #4]
	if (enabledFilt[1])
    5c74:	dcb6      	bgt.n	5be4 <filter_tick+0xc4>
	return samples[1] + (samples[0] * sp);
    5c76:	eea7 0a88 	vfma.f32	s0, s15, s16
}
    5c7a:	ecbd 8b04 	vpop	{d8-d9}
    5c7e:	bd70      	pop	{r4, r5, r6, pc}
		float enabled = filtParams[FilterEnabled].realVal[string];
    5c80:	f201 22c5 	addw	r2, r1, #709	; 0x2c5
    5c84:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5c88:	ed92 9a00 	vldr	s18, [r2]
		if (!enabledFilt[f]) continue;
    5c8c:	eeb4 9ac7 	vcmpe.f32	s18, s14
    5c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5c94:	dc1b      	bgt.n	5cce <filter_tick+0x1ae>
	if (enabledFilt[0])
    5c96:	eef4 6ac7 	vcmpe.f32	s13, s14
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    5c9a:	f201 22ef 	addw	r2, r1, #751	; 0x2ef
    5c9e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (enabledFilt[0])
    5ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    5ca6:	ed93 8a00 	vldr	s16, [r3]
	if (enabledFilt[0])
    5caa:	dcbd      	bgt.n	5c28 <filter_tick+0x108>
	float sendToFilter2 = samples[0] * (1.0f - sp);
    5cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    5cb0:	ed94 0a01 	vldr	s0, [r4, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    5cb4:	edd4 7a00 	vldr	s15, [r4]
    5cb8:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    5cbc:	eea7 0a27 	vfma.f32	s0, s14, s15
    5cc0:	ed84 0a01 	vstr	s0, [r4, #4]
	return samples[1] + (samples[0] * sp);
    5cc4:	eea7 0a88 	vfma.f32	s0, s15, s16
}
    5cc8:	ecbd 8b04 	vpop	{d8-d9}
    5ccc:	bd70      	pop	{r4, r5, r6, pc}
    5cce:	1c8a      	adds	r2, r1, #2
    5cd0:	e75c      	b.n	5b8c <filter_tick+0x6c>
			nanChuck++;
    5cd2:	4a23      	ldr	r2, [pc, #140]	; (5d60 <filter_tick+0x240>)
			samples[0] = 0.0f;
    5cd4:	2300      	movs	r3, #0
    5cd6:	6023      	str	r3, [r4, #0]
			nanChuck++;
    5cd8:	6813      	ldr	r3, [r2, #0]
    5cda:	3301      	adds	r3, #1
    5cdc:	6013      	str	r3, [r2, #0]
    5cde:	e7aa      	b.n	5c36 <filter_tick+0x116>
			nanChuck++;
    5ce0:	4a1f      	ldr	r2, [pc, #124]	; (5d60 <filter_tick+0x240>)
			samples[0] = 0.0f;
    5ce2:	2300      	movs	r3, #0
    5ce4:	6023      	str	r3, [r4, #0]
			nanChuck++;
    5ce6:	6813      	ldr	r3, [r2, #0]
    5ce8:	3301      	adds	r3, #1
    5cea:	6013      	str	r3, [r2, #0]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    5cec:	edd4 7a00 	vldr	s15, [r4]
    5cf0:	e7b0      	b.n	5c54 <filter_tick+0x134>
		float enabled = filtParams[FilterEnabled].realVal[string];
    5cf2:	f205 22c5 	addw	r2, r5, #709	; 0x2c5
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    5cf6:	eddf 7a18 	vldr	s15, [pc, #96]	; 5d58 <filter_tick+0x238>
		float enabled = filtParams[FilterEnabled].realVal[string];
    5cfa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    5cfe:	eea5 6aa7 	vfma.f32	s12, s11, s15
		float enabled = filtParams[FilterEnabled].realVal[string];
    5d02:	ed92 9a00 	vldr	s18, [r2]
		if (!enabledFilt[f]) continue;
    5d06:	eeb4 9ac7 	vcmpe.f32	s18, s14
    5d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5d0e:	dd85      	ble.n	5c1c <filter_tick+0xfc>
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    5d10:	f603 3244 	addw	r2, r3, #2884	; 0xb44
			note = 0.0f; //is this necessary?
    5d14:	eeb0 0a67 	vmov.f32	s0, s15
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    5d18:	440a      	add	r2, r1
    5d1a:	edd2 7a00 	vldr	s15, [r2]
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    5d1e:	f603 3298 	addw	r2, r3, #2968	; 0xb98
    5d22:	440a      	add	r2, r1
    5d24:	edd2 5a00 	vldr	s11, [r2]
		if (isnan(note))
    5d28:	e73e      	b.n	5ba8 <filter_tick+0x88>
			nanChuck++;
    5d2a:	4a0d      	ldr	r2, [pc, #52]	; (5d60 <filter_tick+0x240>)
			samples[0] = 0.0f;
    5d2c:	2300      	movs	r3, #0
	return samples[1] + (samples[0] * sp);
    5d2e:	ed94 0a01 	vldr	s0, [r4, #4]
			samples[0] = 0.0f;
    5d32:	6023      	str	r3, [r4, #0]
			nanChuck++;
    5d34:	6813      	ldr	r3, [r2, #0]
    5d36:	3301      	adds	r3, #1
    5d38:	6013      	str	r3, [r2, #0]
	return samples[1] + (samples[0] * sp);
    5d3a:	edd4 7a00 	vldr	s15, [r4]
    5d3e:	e79a      	b.n	5c76 <filter_tick+0x156>
			nanChuck++;
    5d40:	4a07      	ldr	r2, [pc, #28]	; (5d60 <filter_tick+0x240>)
			samples[1] = 0.0f;
    5d42:	2300      	movs	r3, #0
    5d44:	6063      	str	r3, [r4, #4]
			nanChuck++;
    5d46:	6813      	ldr	r3, [r2, #0]
    5d48:	3301      	adds	r3, #1
    5d4a:	6013      	str	r3, [r2, #0]
    5d4c:	e750      	b.n	5bf0 <filter_tick+0xd0>
    5d4e:	bf00      	nop
    5d50:	200190e4 	.word	0x200190e4
    5d54:	20019c28 	.word	0x20019c28
    5d58:	00000000 	.word	0x00000000
    5d5c:	2001d1ac 	.word	0x2001d1ac
    5d60:	2001d508 	.word	0x2001d508
    5d64:	f3af 8000 	nop.w
    5d68:	f3af 8000 	nop.w
    5d6c:	f3af 8000 	nop.w
    5d70:	f3af 8000 	nop.w
    5d74:	f3af 8000 	nop.w
    5d78:	f3af 8000 	nop.w
    5d7c:	f3af 8000 	nop.w

00005d80 <lowpassTick>:
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    5d80:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    5d84:	4b0d      	ldr	r3, [pc, #52]	; (5dbc <lowpassTick+0x3c>)
{
    5d86:	b530      	push	{r4, r5, lr}
    5d88:	4605      	mov	r5, r0
    5d8a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    5d8c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    5d90:	0094      	lsls	r4, r2, #2
    5d92:	9001      	str	r0, [sp, #4]
    5d94:	f003 fa90 	bl	92b8 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    5d98:	ed95 0a00 	vldr	s0, [r5]
    5d9c:	9801      	ldr	r0, [sp, #4]
    5d9e:	f003 fbdb 	bl	9558 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    5da2:	4b07      	ldr	r3, [pc, #28]	; (5dc0 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    5da4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    5da8:	4423      	add	r3, r4
    5daa:	edd3 7a00 	vldr	s15, [r3]
    5dae:	ee67 7a80 	vmul.f32	s15, s15, s0
    5db2:	edc5 7a00 	vstr	s15, [r5]
}
    5db6:	b003      	add	sp, #12
    5db8:	bd30      	pop	{r4, r5, pc}
    5dba:	bf00      	nop
    5dbc:	2001d3a0 	.word	0x2001d3a0
    5dc0:	2001d19c 	.word	0x2001d19c
    5dc4:	f3af 8000 	nop.w
    5dc8:	f3af 8000 	nop.w
    5dcc:	f3af 8000 	nop.w
    5dd0:	f3af 8000 	nop.w
    5dd4:	f3af 8000 	nop.w
    5dd8:	f3af 8000 	nop.w
    5ddc:	f3af 8000 	nop.w

00005de0 <highpassTick>:
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    5de0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    5de4:	4b0d      	ldr	r3, [pc, #52]	; (5e1c <highpassTick+0x3c>)
{
    5de6:	b530      	push	{r4, r5, lr}
    5de8:	4605      	mov	r5, r0
    5dea:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    5dec:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    5df0:	0094      	lsls	r4, r2, #2
    5df2:	9001      	str	r0, [sp, #4]
    5df4:	f003 fa60 	bl	92b8 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
    5df8:	ed95 0a00 	vldr	s0, [r5]
    5dfc:	9801      	ldr	r0, [sp, #4]
    5dfe:	f003 fbab 	bl	9558 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    5e02:	4b07      	ldr	r3, [pc, #28]	; (5e20 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
    5e04:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    5e08:	4423      	add	r3, r4
    5e0a:	edd3 7a00 	vldr	s15, [r3]
    5e0e:	ee67 7a80 	vmul.f32	s15, s15, s0
    5e12:	edc5 7a00 	vstr	s15, [r5]
}
    5e16:	b003      	add	sp, #12
    5e18:	bd30      	pop	{r4, r5, pc}
    5e1a:	bf00      	nop
    5e1c:	2001d21c 	.word	0x2001d21c
    5e20:	2001d19c 	.word	0x2001d19c
    5e24:	f3af 8000 	nop.w
    5e28:	f3af 8000 	nop.w
    5e2c:	f3af 8000 	nop.w
    5e30:	f3af 8000 	nop.w
    5e34:	f3af 8000 	nop.w
    5e38:	f3af 8000 	nop.w
    5e3c:	f3af 8000 	nop.w

00005e40 <bandpassTick>:
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    5e40:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    5e44:	4b0d      	ldr	r3, [pc, #52]	; (5e7c <bandpassTick+0x3c>)
{
    5e46:	b530      	push	{r4, r5, lr}
    5e48:	4605      	mov	r5, r0
    5e4a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    5e4c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    5e50:	0094      	lsls	r4, r2, #2
    5e52:	9001      	str	r0, [sp, #4]
    5e54:	f003 fa30 	bl	92b8 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    5e58:	ed95 0a00 	vldr	s0, [r5]
    5e5c:	9801      	ldr	r0, [sp, #4]
    5e5e:	f003 fb7b 	bl	9558 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    5e62:	4b07      	ldr	r3, [pc, #28]	; (5e80 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    5e64:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    5e68:	4423      	add	r3, r4
    5e6a:	edd3 7a00 	vldr	s15, [r3]
    5e6e:	ee67 7a80 	vmul.f32	s15, s15, s0
    5e72:	edc5 7a00 	vstr	s15, [r5]
}
    5e76:	b003      	add	sp, #12
    5e78:	bd30      	pop	{r4, r5, pc}
    5e7a:	bf00      	nop
    5e7c:	2001cf10 	.word	0x2001cf10
    5e80:	2001d19c 	.word	0x2001d19c
    5e84:	f3af 8000 	nop.w
    5e88:	f3af 8000 	nop.w
    5e8c:	f3af 8000 	nop.w
    5e90:	f3af 8000 	nop.w
    5e94:	f3af 8000 	nop.w
    5e98:	f3af 8000 	nop.w
    5e9c:	f3af 8000 	nop.w

00005ea0 <diodeLowpassTick>:
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    5ea0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    5ea4:	4b0d      	ldr	r3, [pc, #52]	; (5edc <diodeLowpassTick+0x3c>)
{
    5ea6:	b530      	push	{r4, r5, lr}
    5ea8:	4605      	mov	r5, r0
    5eaa:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    5eac:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    5eb0:	0094      	lsls	r4, r2, #2
    5eb2:	9001      	str	r0, [sp, #4]
    5eb4:	f003 f994 	bl	91e0 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    5eb8:	ed95 0a00 	vldr	s0, [r5]
    5ebc:	9801      	ldr	r0, [sp, #4]
    5ebe:	f003 fa0b 	bl	92d8 <__tDiodeFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    5ec2:	4b07      	ldr	r3, [pc, #28]	; (5ee0 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    5ec4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    5ec8:	4423      	add	r3, r4
    5eca:	edd3 7a00 	vldr	s15, [r3]
    5ece:	ee67 7a80 	vmul.f32	s15, s15, s0
    5ed2:	edc5 7a00 	vstr	s15, [r5]
}
    5ed6:	b003      	add	sp, #12
    5ed8:	bd30      	pop	{r4, r5, pc}
    5eda:	bf00      	nop
    5edc:	2001d128 	.word	0x2001d128
    5ee0:	2001d19c 	.word	0x2001d19c
    5ee4:	f3af 8000 	nop.w
    5ee8:	f3af 8000 	nop.w
    5eec:	f3af 8000 	nop.w
    5ef0:	f3af 8000 	nop.w
    5ef4:	f3af 8000 	nop.w
    5ef8:	f3af 8000 	nop.w
    5efc:	f3af 8000 	nop.w

00005f00 <VZpeakTick>:
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    5f00:	4b09      	ldr	r3, [pc, #36]	; (5f28 <VZpeakTick+0x28>)
    5f02:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    5f06:	b510      	push	{r4, lr}
    5f08:	4604      	mov	r4, r0
    5f0a:	b082      	sub	sp, #8
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    5f0c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    5f10:	9001      	str	r0, [sp, #4]
    5f12:	f003 fae9 	bl	94e8 <__tVZFilterBell_setFreq_veneer>
	*sample = tVZFilterBell_tick(&VZfilterPeak[v][string], *sample);
    5f16:	9801      	ldr	r0, [sp, #4]
    5f18:	ed94 0a00 	vldr	s0, [r4]
    5f1c:	f003 f938 	bl	9190 <__tVZFilterBell_tick_veneer>
    5f20:	ed84 0a00 	vstr	s0, [r4]
}
    5f24:	b002      	add	sp, #8
    5f26:	bd10      	pop	{r4, pc}
    5f28:	2001cef8 	.word	0x2001cef8
    5f2c:	f3af 8000 	nop.w
    5f30:	f3af 8000 	nop.w
    5f34:	f3af 8000 	nop.w
    5f38:	f3af 8000 	nop.w
    5f3c:	f3af 8000 	nop.w

00005f40 <VZlowshelfTick>:
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    5f40:	4b09      	ldr	r3, [pc, #36]	; (5f68 <VZlowshelfTick+0x28>)
    5f42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    5f46:	b510      	push	{r4, lr}
    5f48:	4604      	mov	r4, r0
    5f4a:	b082      	sub	sp, #8
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    5f4c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    5f50:	9001      	str	r0, [sp, #4]
    5f52:	f003 f9e5 	bl	9320 <__tVZFilterLS_setFreqFast_veneer>
	*sample = tVZFilterLS_tick(&VZfilterLS[v][string], *sample);
    5f56:	9801      	ldr	r0, [sp, #4]
    5f58:	ed94 0a00 	vldr	s0, [r4]
    5f5c:	f003 fa9c 	bl	9498 <__tVZFilterLS_tick_veneer>
    5f60:	ed84 0a00 	vstr	s0, [r4]
}
    5f64:	b002      	add	sp, #8
    5f66:	bd10      	pop	{r4, pc}
    5f68:	2001cee8 	.word	0x2001cee8
    5f6c:	f3af 8000 	nop.w
    5f70:	f3af 8000 	nop.w
    5f74:	f3af 8000 	nop.w
    5f78:	f3af 8000 	nop.w
    5f7c:	f3af 8000 	nop.w

00005f80 <VZhighshelfTick>:
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    5f80:	4b09      	ldr	r3, [pc, #36]	; (5fa8 <VZhighshelfTick+0x28>)
    5f82:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    5f86:	b510      	push	{r4, lr}
    5f88:	4604      	mov	r4, r0
    5f8a:	b082      	sub	sp, #8
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    5f8c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    5f90:	9001      	str	r0, [sp, #4]
    5f92:	f003 f889 	bl	90a8 <__tVZFilterHS_setFreqFast_veneer>
	*sample = tVZFilterHS_tick(&VZfilterHS[v][string], *sample);
    5f96:	9801      	ldr	r0, [sp, #4]
    5f98:	ed94 0a00 	vldr	s0, [r4]
    5f9c:	f003 fad0 	bl	9540 <__tVZFilterHS_tick_veneer>
    5fa0:	ed84 0a00 	vstr	s0, [r4]
}
    5fa4:	b002      	add	sp, #8
    5fa6:	bd10      	pop	{r4, pc}
    5fa8:	2001ced8 	.word	0x2001ced8
    5fac:	f3af 8000 	nop.w
    5fb0:	f3af 8000 	nop.w
    5fb4:	f3af 8000 	nop.w
    5fb8:	f3af 8000 	nop.w
    5fbc:	f3af 8000 	nop.w

00005fc0 <VZbandrejectTick>:
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    5fc0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    5fc4:	4b0d      	ldr	r3, [pc, #52]	; (5ffc <VZbandrejectTick+0x3c>)
{
    5fc6:	b530      	push	{r4, r5, lr}
    5fc8:	4605      	mov	r5, r0
    5fca:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    5fcc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    5fd0:	0094      	lsls	r4, r2, #2
    5fd2:	9001      	str	r0, [sp, #4]
    5fd4:	f003 f920 	bl	9218 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    5fd8:	ed95 0a00 	vldr	s0, [r5]
    5fdc:	9801      	ldr	r0, [sp, #4]
    5fde:	f003 fa57 	bl	9490 <__tVZFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    5fe2:	4b07      	ldr	r3, [pc, #28]	; (6000 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    5fe4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    5fe8:	4423      	add	r3, r4
    5fea:	edd3 7a00 	vldr	s15, [r3]
    5fee:	ee67 7a80 	vmul.f32	s15, s15, s0
    5ff2:	edc5 7a00 	vstr	s15, [r5]
}
    5ff6:	b003      	add	sp, #12
    5ff8:	bd30      	pop	{r4, r5, pc}
    5ffa:	bf00      	nop
    5ffc:	2001cec8 	.word	0x2001cec8
    6000:	2001d19c 	.word	0x2001d19c
    6004:	f3af 8000 	nop.w
    6008:	f3af 8000 	nop.w
    600c:	f3af 8000 	nop.w
    6010:	f3af 8000 	nop.w
    6014:	f3af 8000 	nop.w
    6018:	f3af 8000 	nop.w
    601c:	f3af 8000 	nop.w

00006020 <LadderLowpassTick>:
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    6020:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6024:	4b0d      	ldr	r3, [pc, #52]	; (605c <LadderLowpassTick+0x3c>)
{
    6026:	b530      	push	{r4, r5, lr}
    6028:	4605      	mov	r5, r0
    602a:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    602c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6030:	0094      	lsls	r4, r2, #2
    6032:	9001      	str	r0, [sp, #4]
    6034:	f003 f9bc 	bl	93b0 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    6038:	ed95 0a00 	vldr	s0, [r5]
    603c:	9801      	ldr	r0, [sp, #4]
    603e:	f003 f8ab 	bl	9198 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v][string];
    6042:	4b07      	ldr	r3, [pc, #28]	; (6060 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    6044:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6048:	4423      	add	r3, r4
    604a:	edd3 7a00 	vldr	s15, [r3]
    604e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6052:	edc5 7a00 	vstr	s15, [r5]
}
    6056:	b003      	add	sp, #12
    6058:	bd30      	pop	{r4, r5, pc}
    605a:	bf00      	nop
    605c:	2001ceb8 	.word	0x2001ceb8
    6060:	2001d19c 	.word	0x2001d19c
    6064:	f3af 8000 	nop.w
    6068:	f3af 8000 	nop.w
    606c:	f3af 8000 	nop.w
    6070:	f3af 8000 	nop.w
    6074:	f3af 8000 	nop.w
    6078:	f3af 8000 	nop.w
    607c:	f3af 8000 	nop.w

00006080 <setFreqMultPitch>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    6080:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    6084:	4b0f      	ldr	r3, [pc, #60]	; (60c4 <setFreqMultPitch+0x44>)
    6086:	0042      	lsls	r2, r0, #1
	pitch *= 24.0f;
    6088:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    608c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    6090:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6094:	3020      	adds	r0, #32
	pitch *= 24.0f;
    6096:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    609a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    609e:	4408      	add	r0, r1
    60a0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    60a4:	ed93 7a02 	vldr	s14, [r3, #8]
    60a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    60ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    60b0:	dd01      	ble.n	60b6 <setFreqMultPitch+0x36>
		pitch = roundf(pitch);
    60b2:	feb8 0a40 	vrinta.f32	s0, s0
	midiAdd[osc][string] = pitch;
    60b6:	4b04      	ldr	r3, [pc, #16]	; (60c8 <setFreqMultPitch+0x48>)
    60b8:	440a      	add	r2, r1
    60ba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    60be:	ed83 0a00 	vstr	s0, [r3]
}
    60c2:	4770      	bx	lr
    60c4:	200190e4 	.word	0x200190e4
    60c8:	2001d4b0 	.word	0x2001d4b0
    60cc:	f3af 8000 	nop.w
    60d0:	f3af 8000 	nop.w
    60d4:	f3af 8000 	nop.w
    60d8:	f3af 8000 	nop.w
    60dc:	f3af 8000 	nop.w

000060e0 <setFreqMultHarm>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    60e0:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    60e4:	4b17      	ldr	r3, [pc, #92]	; (6144 <setFreqMultHarm+0x64>)
    60e6:	0042      	lsls	r2, r0, #1
	harm *= 15.0f;
    60e8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    60ec:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    60f0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    60f4:	3020      	adds	r0, #32
	harm *= 15.0f;
    60f6:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    60fa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    60fe:	4408      	add	r0, r1
    6100:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6104:	ed93 7a02 	vldr	s14, [r3, #8]
    6108:	eeb4 7ae7 	vcmpe.f32	s14, s15
    610c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6110:	dd01      	ble.n	6116 <setFreqMultHarm+0x36>
		harm = roundf(harm);
    6112:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
    6116:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		freqMult[osc][string] = (harm + 1);
    611a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
    611e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6122:	db08      	blt.n	6136 <setFreqMultHarm+0x56>
		freqMult[osc][string] = (harm + 1);
    6124:	ee30 0a27 	vadd.f32	s0, s0, s15
    6128:	4b07      	ldr	r3, [pc, #28]	; (6148 <setFreqMultHarm+0x68>)
    612a:	440a      	add	r2, r1
    612c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6130:	ed83 0a00 	vstr	s0, [r3]
}
    6134:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    6136:	ee30 0a67 	vsub.f32	s0, s0, s15
    613a:	eeb0 7ac0 	vabs.f32	s14, s0
    613e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    6142:	e7f1      	b.n	6128 <setFreqMultHarm+0x48>
    6144:	200190e4 	.word	0x200190e4
    6148:	2001d1c4 	.word	0x2001d1c4
    614c:	f3af 8000 	nop.w
    6150:	f3af 8000 	nop.w
    6154:	f3af 8000 	nop.w
    6158:	f3af 8000 	nop.w
    615c:	f3af 8000 	nop.w

00006160 <lowpassSetQ>:
    tSVF_setQ(&lowpass[v][string], q);
    6160:	4b03      	ldr	r3, [pc, #12]	; (6170 <lowpassSetQ+0x10>)
    6162:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6166:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    616a:	f003 b989 	b.w	9480 <__tSVF_setQ_veneer>
    616e:	bf00      	nop
    6170:	2001d3a0 	.word	0x2001d3a0
    6174:	f3af 8000 	nop.w
    6178:	f3af 8000 	nop.w
    617c:	f3af 8000 	nop.w

00006180 <highpassSetQ>:
    tSVF_setQ(&highpass[v][string], q);
    6180:	4b03      	ldr	r3, [pc, #12]	; (6190 <highpassSetQ+0x10>)
    6182:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6186:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    618a:	f003 b979 	b.w	9480 <__tSVF_setQ_veneer>
    618e:	bf00      	nop
    6190:	2001d21c 	.word	0x2001d21c
    6194:	f3af 8000 	nop.w
    6198:	f3af 8000 	nop.w
    619c:	f3af 8000 	nop.w

000061a0 <bandpassSetQ>:
    tSVF_setQ(&bandpass[v][string], q);
    61a0:	4b03      	ldr	r3, [pc, #12]	; (61b0 <bandpassSetQ+0x10>)
    61a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    61a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    61aa:	f003 b969 	b.w	9480 <__tSVF_setQ_veneer>
    61ae:	bf00      	nop
    61b0:	2001cf10 	.word	0x2001cf10
    61b4:	f3af 8000 	nop.w
    61b8:	f3af 8000 	nop.w
    61bc:	f3af 8000 	nop.w

000061c0 <diodeLowpassSetQ>:
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    61c0:	4b03      	ldr	r3, [pc, #12]	; (61d0 <diodeLowpassSetQ+0x10>)
    61c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    61c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    61ca:	f003 b935 	b.w	9438 <__tDiodeFilter_setQ_veneer>
    61ce:	bf00      	nop
    61d0:	2001d128 	.word	0x2001d128
    61d4:	f3af 8000 	nop.w
    61d8:	f3af 8000 	nop.w
    61dc:	f3af 8000 	nop.w

000061e0 <VZpeakSetQ>:
	tVZFilterBell_setBandwidth(&VZfilterPeak[v][string], q);
    61e0:	4b03      	ldr	r3, [pc, #12]	; (61f0 <VZpeakSetQ+0x10>)
    61e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    61e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    61ea:	f002 bfa1 	b.w	9130 <__tVZFilterBell_setBandwidth_veneer>
    61ee:	bf00      	nop
    61f0:	2001cef8 	.word	0x2001cef8
    61f4:	f3af 8000 	nop.w
    61f8:	f3af 8000 	nop.w
    61fc:	f3af 8000 	nop.w

00006200 <VZlowshelfSetQ>:
	tVZFilterLS_setResonance(&VZfilterLS[v][string], q);
    6200:	4b03      	ldr	r3, [pc, #12]	; (6210 <VZlowshelfSetQ+0x10>)
    6202:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6206:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    620a:	f003 b8c1 	b.w	9390 <__tVZFilterLS_setResonance_veneer>
    620e:	bf00      	nop
    6210:	2001cee8 	.word	0x2001cee8
    6214:	f3af 8000 	nop.w
    6218:	f3af 8000 	nop.w
    621c:	f3af 8000 	nop.w

00006220 <VZhighshelfSetQ>:
	tVZFilterHS_setResonance(&VZfilterHS[v][string], q);
    6220:	4b03      	ldr	r3, [pc, #12]	; (6230 <VZhighshelfSetQ+0x10>)
    6222:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6226:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    622a:	f003 b9c1 	b.w	95b0 <__tVZFilterHS_setResonance_veneer>
    622e:	bf00      	nop
    6230:	2001ced8 	.word	0x2001ced8
    6234:	f3af 8000 	nop.w
    6238:	f3af 8000 	nop.w
    623c:	f3af 8000 	nop.w

00006240 <VZbandrejectSetQ>:
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    6240:	4b03      	ldr	r3, [pc, #12]	; (6250 <VZbandrejectSetQ+0x10>)
    6242:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6246:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    624a:	f003 b809 	b.w	9260 <__tVZFilter_setResonance_veneer>
    624e:	bf00      	nop
    6250:	2001cec8 	.word	0x2001cec8
    6254:	f3af 8000 	nop.w
    6258:	f3af 8000 	nop.w
    625c:	f3af 8000 	nop.w

00006260 <LadderLowpassSetQ>:
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    6260:	4b03      	ldr	r3, [pc, #12]	; (6270 <LadderLowpassSetQ+0x10>)
    6262:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6266:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    626a:	f003 b919 	b.w	94a0 <__tLadderFilter_setQ_veneer>
    626e:	bf00      	nop
    6270:	2001ceb8 	.word	0x2001ceb8
    6274:	f3af 8000 	nop.w
    6278:	f3af 8000 	nop.w
    627c:	f3af 8000 	nop.w

00006280 <lowpassSetGain>:
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6280:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6284:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    6288:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    628a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    628e:	4605      	mov	r5, r0
    6290:	460c      	mov	r4, r1
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6292:	eeb0 0a67 	vmov.f32	s0, s15
    6296:	f002 ff0b 	bl	90b0 <__dbToATableLookup_veneer>
    629a:	4b04      	ldr	r3, [pc, #16]	; (62ac <lowpassSetGain+0x2c>)
    629c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    62a0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    62a4:	ed83 0a00 	vstr	s0, [r3]
}
    62a8:	bd38      	pop	{r3, r4, r5, pc}
    62aa:	bf00      	nop
    62ac:	2001d19c 	.word	0x2001d19c
    62b0:	f3af 8000 	nop.w
    62b4:	f3af 8000 	nop.w
    62b8:	f3af 8000 	nop.w
    62bc:	f3af 8000 	nop.w

000062c0 <highpassSetGain>:
    62c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    62c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    62c8:	b538      	push	{r3, r4, r5, lr}
    62ca:	eee0 7a07 	vfma.f32	s15, s0, s14
    62ce:	4605      	mov	r5, r0
    62d0:	460c      	mov	r4, r1
    62d2:	eeb0 0a67 	vmov.f32	s0, s15
    62d6:	f002 feeb 	bl	90b0 <__dbToATableLookup_veneer>
    62da:	4b04      	ldr	r3, [pc, #16]	; (62ec <highpassSetGain+0x2c>)
    62dc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    62e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    62e4:	ed83 0a00 	vstr	s0, [r3]
    62e8:	bd38      	pop	{r3, r4, r5, pc}
    62ea:	bf00      	nop
    62ec:	2001d19c 	.word	0x2001d19c
    62f0:	f3af 8000 	nop.w
    62f4:	f3af 8000 	nop.w
    62f8:	f3af 8000 	nop.w
    62fc:	f3af 8000 	nop.w

00006300 <bandpassSetGain>:
    6300:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6304:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6308:	b538      	push	{r3, r4, r5, lr}
    630a:	eee0 7a07 	vfma.f32	s15, s0, s14
    630e:	4605      	mov	r5, r0
    6310:	460c      	mov	r4, r1
    6312:	eeb0 0a67 	vmov.f32	s0, s15
    6316:	f002 fecb 	bl	90b0 <__dbToATableLookup_veneer>
    631a:	4b04      	ldr	r3, [pc, #16]	; (632c <bandpassSetGain+0x2c>)
    631c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6320:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6324:	ed83 0a00 	vstr	s0, [r3]
    6328:	bd38      	pop	{r3, r4, r5, pc}
    632a:	bf00      	nop
    632c:	2001d19c 	.word	0x2001d19c
    6330:	f3af 8000 	nop.w
    6334:	f3af 8000 	nop.w
    6338:	f3af 8000 	nop.w
    633c:	f3af 8000 	nop.w

00006340 <diodeLowpassSetGain>:
    6340:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6344:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6348:	b538      	push	{r3, r4, r5, lr}
    634a:	eee0 7a07 	vfma.f32	s15, s0, s14
    634e:	4605      	mov	r5, r0
    6350:	460c      	mov	r4, r1
    6352:	eeb0 0a67 	vmov.f32	s0, s15
    6356:	f002 feab 	bl	90b0 <__dbToATableLookup_veneer>
    635a:	4b04      	ldr	r3, [pc, #16]	; (636c <diodeLowpassSetGain+0x2c>)
    635c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6360:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6364:	ed83 0a00 	vstr	s0, [r3]
    6368:	bd38      	pop	{r3, r4, r5, pc}
    636a:	bf00      	nop
    636c:	2001d19c 	.word	0x2001d19c
    6370:	f3af 8000 	nop.w
    6374:	f3af 8000 	nop.w
    6378:	f3af 8000 	nop.w
    637c:	f3af 8000 	nop.w

00006380 <VZpeakSetGain>:
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6380:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    6384:	ed9f 7a09 	vldr	s14, [pc, #36]	; 63ac <VZpeakSetGain+0x2c>
{
    6388:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    638a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    638e:	4605      	mov	r5, r0
    6390:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6392:	eeb0 0a67 	vmov.f32	s0, s15
    6396:	f002 fe8b 	bl	90b0 <__dbToATableLookup_veneer>
    639a:	4b05      	ldr	r3, [pc, #20]	; (63b0 <VZpeakSetGain+0x30>)
    639c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    63a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    63a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    63a8:	f002 be52 	b.w	9050 <__tVZFilterBell_setGain_veneer>
    63ac:	42480000 	.word	0x42480000
    63b0:	2001cef8 	.word	0x2001cef8
    63b4:	f3af 8000 	nop.w
    63b8:	f3af 8000 	nop.w
    63bc:	f3af 8000 	nop.w

000063c0 <VZlowshelfSetGain>:
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    63c0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    63c4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 63ec <VZlowshelfSetGain+0x2c>
{
    63c8:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    63ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    63ce:	4605      	mov	r5, r0
    63d0:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    63d2:	eeb0 0a67 	vmov.f32	s0, s15
    63d6:	f002 fe6b 	bl	90b0 <__dbToATableLookup_veneer>
    63da:	4b05      	ldr	r3, [pc, #20]	; (63f0 <VZlowshelfSetGain+0x30>)
    63dc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    63e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    63e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    63e8:	f002 bf2e 	b.w	9248 <__tVZFilterLS_setGain_veneer>
    63ec:	42480000 	.word	0x42480000
    63f0:	2001cee8 	.word	0x2001cee8
    63f4:	f3af 8000 	nop.w
    63f8:	f3af 8000 	nop.w
    63fc:	f3af 8000 	nop.w

00006400 <VZhighshelfSetGain>:
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6400:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    6404:	ed9f 7a09 	vldr	s14, [pc, #36]	; 642c <VZhighshelfSetGain+0x2c>
{
    6408:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    640a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    640e:	4605      	mov	r5, r0
    6410:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6412:	eeb0 0a67 	vmov.f32	s0, s15
    6416:	f002 fe4b 	bl	90b0 <__dbToATableLookup_veneer>
    641a:	4b05      	ldr	r3, [pc, #20]	; (6430 <VZhighshelfSetGain+0x30>)
    641c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6420:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    6424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6428:	f003 b812 	b.w	9450 <__tVZFilterHS_setGain_veneer>
    642c:	42480000 	.word	0x42480000
    6430:	2001ced8 	.word	0x2001ced8
    6434:	f3af 8000 	nop.w
    6438:	f3af 8000 	nop.w
    643c:	f3af 8000 	nop.w

00006440 <VZbandrejectSetGain>:
    6440:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6444:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6448:	b538      	push	{r3, r4, r5, lr}
    644a:	eee0 7a07 	vfma.f32	s15, s0, s14
    644e:	4605      	mov	r5, r0
    6450:	460c      	mov	r4, r1
    6452:	eeb0 0a67 	vmov.f32	s0, s15
    6456:	f002 fe2b 	bl	90b0 <__dbToATableLookup_veneer>
    645a:	4b04      	ldr	r3, [pc, #16]	; (646c <VZbandrejectSetGain+0x2c>)
    645c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6460:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6464:	ed83 0a00 	vstr	s0, [r3]
    6468:	bd38      	pop	{r3, r4, r5, pc}
    646a:	bf00      	nop
    646c:	2001d19c 	.word	0x2001d19c
    6470:	f3af 8000 	nop.w
    6474:	f3af 8000 	nop.w
    6478:	f3af 8000 	nop.w
    647c:	f3af 8000 	nop.w

00006480 <LadderLowpassSetGain>:
    6480:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6484:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6488:	b538      	push	{r3, r4, r5, lr}
    648a:	eee0 7a07 	vfma.f32	s15, s0, s14
    648e:	4605      	mov	r5, r0
    6490:	460c      	mov	r4, r1
    6492:	eeb0 0a67 	vmov.f32	s0, s15
    6496:	f002 fe0b 	bl	90b0 <__dbToATableLookup_veneer>
    649a:	4b04      	ldr	r3, [pc, #16]	; (64ac <LadderLowpassSetGain+0x2c>)
    649c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    64a0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    64a4:	ed83 0a00 	vstr	s0, [r3]
    64a8:	bd38      	pop	{r3, r4, r5, pc}
    64aa:	bf00      	nop
    64ac:	2001d19c 	.word	0x2001d19c
    64b0:	f3af 8000 	nop.w
    64b4:	f3af 8000 	nop.w
    64b8:	f3af 8000 	nop.w
    64bc:	f3af 8000 	nop.w

000064c0 <envelope_tick>:
{
    64c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    64c2:	4c0c      	ldr	r4, [pc, #48]	; (64f4 <envelope_tick+0x34>)
    64c4:	4e0c      	ldr	r6, [pc, #48]	; (64f8 <envelope_tick+0x38>)
    64c6:	4d0d      	ldr	r5, [pc, #52]	; (64fc <envelope_tick+0x3c>)
    64c8:	1d27      	adds	r7, r4, #4
    64ca:	eb06 0680 	add.w	r6, r6, r0, lsl #2
    64ce:	eb05 0580 	add.w	r5, r5, r0, lsl #2
		if (envOn[v])
    64d2:	f814 3b01 	ldrb.w	r3, [r4], #1
    64d6:	b933      	cbnz	r3, 64e6 <envelope_tick+0x26>
	for (int v = 0; v < NUM_ENV; v++)
    64d8:	42bc      	cmp	r4, r7
    64da:	f106 0608 	add.w	r6, r6, #8
    64de:	f105 0508 	add.w	r5, r5, #8
    64e2:	d1f6      	bne.n	64d2 <envelope_tick+0x12>
}
    64e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    64e6:	4630      	mov	r0, r6
    64e8:	f002 ff6e 	bl	93c8 <__tADSRT_tickNoInterp_veneer>
    64ec:	ed85 0a28 	vstr	s0, [r5, #160]	; 0xa0
    64f0:	e7f2      	b.n	64d8 <envelope_tick+0x18>
    64f2:	bf00      	nop
    64f4:	2001d148 	.word	0x2001d148
    64f8:	2001d14c 	.word	0x2001d14c
    64fc:	2001d788 	.word	0x2001d788

00006500 <lfo_tick>:
{
    6500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6504:	f8df 804c 	ldr.w	r8, [pc, #76]	; 6554 <lfo_tick+0x54>
    6508:	b082      	sub	sp, #8
    650a:	4d10      	ldr	r5, [pc, #64]	; (654c <lfo_tick+0x4c>)
    650c:	4607      	mov	r7, r0
    650e:	4e10      	ldr	r6, [pc, #64]	; (6550 <lfo_tick+0x50>)
    6510:	f108 0904 	add.w	r9, r8, #4
    6514:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    6518:	4644      	mov	r4, r8
			float sample = 0.0f;
    651a:	f04f 0a00 	mov.w	sl, #0
    651e:	eba4 0108 	sub.w	r1, r4, r8
		if (lfoOn[i])
    6522:	f814 3b01 	ldrb.w	r3, [r4], #1
			lfoShapeTick[i](&sample,i, string);
    6526:	463a      	mov	r2, r7
    6528:	a801      	add	r0, sp, #4
		if (lfoOn[i])
    652a:	b133      	cbz	r3, 653a <lfo_tick+0x3a>
			lfoShapeTick[i](&sample,i, string);
    652c:	6833      	ldr	r3, [r6, #0]
			float sample = 0.0f;
    652e:	f8cd a004 	str.w	sl, [sp, #4]
			lfoShapeTick[i](&sample,i, string);
    6532:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    6534:	9b01      	ldr	r3, [sp, #4]
    6536:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    653a:	454c      	cmp	r4, r9
    653c:	f106 0604 	add.w	r6, r6, #4
    6540:	f105 0508 	add.w	r5, r5, #8
    6544:	d1eb      	bne.n	651e <lfo_tick+0x1e>
}
    6546:	b002      	add	sp, #8
    6548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    654c:	2001d788 	.word	0x2001d788
    6550:	2001d330 	.word	0x2001d330
    6554:	2001d2cc 	.word	0x2001d2cc
    6558:	f3af 8000 	nop.w
    655c:	f3af 8000 	nop.w

00006560 <setEnvelopeAttack>:
	a = a + 0.001f;
    6560:	eddf 7a05 	vldr	s15, [pc, #20]	; 6578 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
    6564:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6568:	4b04      	ldr	r3, [pc, #16]	; (657c <setEnvelopeAttack+0x1c>)
    656a:	ee30 0a27 	vadd.f32	s0, s0, s15
    656e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6572:	f002 bf7d 	b.w	9470 <__tADSRT_setAttack_veneer>
    6576:	bf00      	nop
    6578:	3a83126f 	.word	0x3a83126f
    657c:	2001d14c 	.word	0x2001d14c

00006580 <setEnvelopeDecay>:
	d = d + 0.001f;
    6580:	eddf 7a05 	vldr	s15, [pc, #20]	; 6598 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
    6584:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6588:	4b04      	ldr	r3, [pc, #16]	; (659c <setEnvelopeDecay+0x1c>)
    658a:	ee30 0a27 	vadd.f32	s0, s0, s15
    658e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6592:	f002 bf9d 	b.w	94d0 <__tADSRT_setDecay_veneer>
    6596:	bf00      	nop
    6598:	3a83126f 	.word	0x3a83126f
    659c:	2001d14c 	.word	0x2001d14c

000065a0 <setEnvelopeSustain>:
	tADSRT_setSustain(&envs[v][string], s);
    65a0:	4b03      	ldr	r3, [pc, #12]	; (65b0 <setEnvelopeSustain+0x10>)
    65a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    65a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    65aa:	f002 be9d 	b.w	92e8 <__tADSRT_setSustain_veneer>
    65ae:	bf00      	nop
    65b0:	2001d14c 	.word	0x2001d14c
    65b4:	f3af 8000 	nop.w
    65b8:	f3af 8000 	nop.w
    65bc:	f3af 8000 	nop.w

000065c0 <setEnvelopeRelease>:
	r = r + 0.001f;
    65c0:	eddf 7a05 	vldr	s15, [pc, #20]	; 65d8 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
    65c4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    65c8:	4b04      	ldr	r3, [pc, #16]	; (65dc <setEnvelopeRelease+0x1c>)
    65ca:	ee30 0a27 	vadd.f32	s0, s0, s15
    65ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    65d2:	f002 bffd 	b.w	95d0 <__tADSRT_setRelease_veneer>
    65d6:	bf00      	nop
    65d8:	3a83126f 	.word	0x3a83126f
    65dc:	2001d14c 	.word	0x2001d14c

000065e0 <setEnvelopeLeak>:
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    65e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    65e4:	eddf 6a08 	vldr	s13, [pc, #32]	; 6608 <setEnvelopeLeak+0x28>
    65e8:	ed9f 7a08 	vldr	s14, [pc, #32]	; 660c <setEnvelopeLeak+0x2c>
    65ec:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    65f0:	4b07      	ldr	r3, [pc, #28]	; (6610 <setEnvelopeLeak+0x30>)
    65f2:	ee77 7ac0 	vsub.f32	s15, s15, s0
    65f6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    65fa:	eea7 7aa6 	vfma.f32	s14, s15, s13
    65fe:	eeb0 0a47 	vmov.f32	s0, s14
    6602:	f002 bd61 	b.w	90c8 <__tADSRT_setLeakFactor_veneer>
    6606:	bf00      	nop
    6608:	3851b717 	.word	0x3851b717
    660c:	3f7ffcb9 	.word	0x3f7ffcb9
    6610:	2001d14c 	.word	0x2001d14c
    6614:	f3af 8000 	nop.w
    6618:	f3af 8000 	nop.w
    661c:	f3af 8000 	nop.w

00006620 <setAmp>:
	amplitude[string] = amp;
    6620:	4b02      	ldr	r3, [pc, #8]	; (662c <setAmp+0xc>)
    6622:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6626:	ed81 0a00 	vstr	s0, [r1]
}
    662a:	4770      	bx	lr
    662c:	2001cf08 	.word	0x2001cf08
    6630:	f3af 8000 	nop.w
    6634:	f3af 8000 	nop.w
    6638:	f3af 8000 	nop.w
    663c:	f3af 8000 	nop.w

00006640 <setMaster>:
	finalMaster[string] = amp;
    6640:	4b02      	ldr	r3, [pc, #8]	; (664c <setMaster+0xc>)
    6642:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6646:	ed81 0a00 	vstr	s0, [r1]
}
    664a:	4770      	bx	lr
    664c:	2001d1bc 	.word	0x2001d1bc
    6650:	f3af 8000 	nop.w
    6654:	f3af 8000 	nop.w
    6658:	f3af 8000 	nop.w
    665c:	f3af 8000 	nop.w

00006660 <setTranspose>:
	transpose = in;
    6660:	4b01      	ldr	r3, [pc, #4]	; (6668 <setTranspose+0x8>)
    6662:	ed83 0a00 	vstr	s0, [r3]
}
    6666:	4770      	bx	lr
    6668:	2001d904 	.word	0x2001d904
    666c:	f3af 8000 	nop.w
    6670:	f3af 8000 	nop.w
    6674:	f3af 8000 	nop.w
    6678:	f3af 8000 	nop.w
    667c:	f3af 8000 	nop.w

00006680 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    6680:	ee30 0a00 	vadd.f32	s0, s0, s0
    6684:	eddf 7a05 	vldr	s15, [pc, #20]	; 669c <setPitchBendRange+0x1c>
    6688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    668c:	4b04      	ldr	r3, [pc, #16]	; (66a0 <setPitchBendRange+0x20>)
    668e:	ee87 7a80 	vdiv.f32	s14, s15, s0
    6692:	eec6 7a87 	vdiv.f32	s15, s13, s14
    6696:	edc3 7a00 	vstr	s15, [r3]
}
    669a:	4770      	bx	lr
    669c:	467ffc00 	.word	0x467ffc00
    66a0:	20000acc 	.word	0x20000acc
    66a4:	f3af 8000 	nop.w
    66a8:	f3af 8000 	nop.w
    66ac:	f3af 8000 	nop.w
    66b0:	f3af 8000 	nop.w
    66b4:	f3af 8000 	nop.w
    66b8:	f3af 8000 	nop.w
    66bc:	f3af 8000 	nop.w

000066c0 <setFinalLowpass>:
	if (isnan(in))
    66c0:	eeb4 0a40 	vcmp.f32	s0, s0
    66c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    66c8:	d604      	bvs.n	66d4 <setFinalLowpass+0x14>
	tSVF_setFreqFast(&finalLowpass[string], in);
    66ca:	4808      	ldr	r0, [pc, #32]	; (66ec <setFinalLowpass+0x2c>)
    66cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    66d0:	f002 bdf2 	b.w	92b8 <__tSVF_setFreqFast_veneer>
		nanChuck++;
    66d4:	4a06      	ldr	r2, [pc, #24]	; (66f0 <setFinalLowpass+0x30>)
	tSVF_setFreqFast(&finalLowpass[string], in);
    66d6:	4805      	ldr	r0, [pc, #20]	; (66ec <setFinalLowpass+0x2c>)
		nanChuck++;
    66d8:	6813      	ldr	r3, [r2, #0]
		in = 0.0f;
    66da:	ed9f 0a06 	vldr	s0, [pc, #24]	; 66f4 <setFinalLowpass+0x34>
	tSVF_setFreqFast(&finalLowpass[string], in);
    66de:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		nanChuck++;
    66e2:	3301      	adds	r3, #1
    66e4:	6013      	str	r3, [r2, #0]
	tSVF_setFreqFast(&finalLowpass[string], in);
    66e6:	f002 bde7 	b.w	92b8 <__tSVF_setFreqFast_veneer>
    66ea:	bf00      	nop
    66ec:	2001d1b4 	.word	0x2001d1b4
    66f0:	2001d508 	.word	0x2001d508
    66f4:	00000000 	.word	0x00000000
    66f8:	f3af 8000 	nop.w
    66fc:	f3af 8000 	nop.w

00006700 <tickMappings>:
	for (int i = 0; i < numMappings; i++)
    6700:	4b40      	ldr	r3, [pc, #256]	; (6804 <tickMappings+0x104>)
	interruptChecker = 0;
    6702:	4a41      	ldr	r2, [pc, #260]	; (6808 <tickMappings+0x108>)
{
    6704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 0;
    6708:	2600      	movs	r6, #0
{
    670a:	ed2d 8b02 	vpush	{d8}
	for (int i = 0; i < numMappings; i++)
    670e:	781b      	ldrb	r3, [r3, #0]
{
    6710:	b083      	sub	sp, #12
	interruptChecker = 0;
    6712:	7016      	strb	r6, [r2, #0]
	for (int i = 0; i < numMappings; i++)
    6714:	2b00      	cmp	r3, #0
    6716:	d070      	beq.n	67fa <tickMappings+0xfa>
    6718:	4c3c      	ldr	r4, [pc, #240]	; (680c <tickMappings+0x10c>)
    671a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 6814 <tickMappings+0x114>
			for (int v = 0; v < numStringsThisBoard; v++)
    671e:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 6818 <tickMappings+0x118>
    6722:	e007      	b.n	6734 <tickMappings+0x34>
	for (int i = 0; i < numMappings; i++)
    6724:	4b37      	ldr	r3, [pc, #220]	; (6804 <tickMappings+0x104>)
    6726:	3601      	adds	r6, #1
    6728:	344c      	adds	r4, #76	; 0x4c
    672a:	f109 0908 	add.w	r9, r9, #8
    672e:	781b      	ldrb	r3, [r3, #0]
    6730:	42b3      	cmp	r3, r6
    6732:	dd62      	ble.n	67fa <tickMappings+0xfa>
		if (mappings[i].destNumber != 255)
    6734:	f814 3c3c 	ldrb.w	r3, [r4, #-60]
    6738:	2bff      	cmp	r3, #255	; 0xff
    673a:	d0f3      	beq.n	6724 <tickMappings+0x24>
			for (int v = 0; v < numStringsThisBoard; v++)
    673c:	f898 3000 	ldrb.w	r3, [r8]
    6740:	2b00      	cmp	r3, #0
    6742:	d0ef      	beq.n	6724 <tickMappings+0x24>
    6744:	f104 030b 	add.w	r3, r4, #11
    6748:	f1a4 073c 	sub.w	r7, r4, #60	; 0x3c
    674c:	464d      	mov	r5, r9
    674e:	f04f 0a00 	mov.w	sl, #0
    6752:	469b      	mov	fp, r3
    6754:	9601      	str	r6, [sp, #4]
				float smoothedValue = 0.0f;
    6756:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 6810 <tickMappings+0x110>
    675a:	46dc      	mov	ip, fp
			for (int v = 0; v < numStringsThisBoard; v++)
    675c:	4621      	mov	r1, r4
    675e:	463a      	mov	r2, r7
				float unsmoothedValue = 0.0f;
    6760:	eeb0 8a47 	vmov.f32	s16, s14
				for (int j = 0; j < 3; j++)
    6764:	2300      	movs	r3, #0
					if (mappings[i].hookActive[j])
    6766:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
    676a:	b180      	cbz	r0, 678e <tickMappings+0x8e>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    676c:	6896      	ldr	r6, [r2, #8]
    676e:	ed91 6a00 	vldr	s12, [r1]
    6772:	edd6 7a00 	vldr	s15, [r6]
    6776:	6a56      	ldr	r6, [r2, #36]	; 0x24
    6778:	ee67 7a86 	vmul.f32	s15, s15, s12
						if (mappings[i].sourceSmoothed[j])
    677c:	f81c 0c28 	ldrb.w	r0, [ip, #-40]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    6780:	edd6 6a00 	vldr	s13, [r6]
    6784:	ee67 7aa6 	vmul.f32	s15, s15, s13
						if (mappings[i].sourceSmoothed[j])
    6788:	b3a0      	cbz	r0, 67f4 <tickMappings+0xf4>
							smoothedValue += sum;
    678a:	ee37 7a27 	vadd.f32	s14, s14, s15
				for (int j = 0; j < 3; j++)
    678e:	3301      	adds	r3, #1
    6790:	3208      	adds	r2, #8
    6792:	3104      	adds	r1, #4
    6794:	2b03      	cmp	r3, #3
    6796:	d1e6      	bne.n	6766 <tickMappings+0x66>
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    6798:	f854 3c38 	ldr.w	r3, [r4, #-56]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    679c:	4628      	mov	r0, r5
			for (int v = 0; v < numStringsThisBoard; v++)
    679e:	3704      	adds	r7, #4
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    67a0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    67a4:	ed93 0a00 	vldr	s0, [r3]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    67a8:	ee37 0a00 	vadd.f32	s0, s14, s0
    67ac:	f002 fee0 	bl	9570 <__tExpSmooth_setDest_veneer>
				smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    67b0:	4628      	mov	r0, r5
    67b2:	f002 ff15 	bl	95e0 <__tExpSmooth_tick_veneer>
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    67b6:	f854 6c38 	ldr.w	r6, [r4, #-56]
    67ba:	ee38 0a00 	vadd.f32	s0, s16, s0
			for (int v = 0; v < numStringsThisBoard; v++)
    67be:	3504      	adds	r5, #4
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    67c0:	6933      	ldr	r3, [r6, #16]
    67c2:	4798      	blx	r3
    67c4:	f10a 0302 	add.w	r3, sl, #2
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    67c8:	4651      	mov	r1, sl
			for (int v = 0; v < numStringsThisBoard; v++)
    67ca:	f10a 0a01 	add.w	sl, sl, #1
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    67ce:	eb06 0283 	add.w	r2, r6, r3, lsl #2
    67d2:	ed82 0a00 	vstr	s0, [r2]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    67d6:	f854 2c38 	ldr.w	r2, [r4, #-56]
    67da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    67de:	7e10      	ldrb	r0, [r2, #24]
    67e0:	ed93 0a00 	vldr	s0, [r3]
    67e4:	6953      	ldr	r3, [r2, #20]
    67e6:	4798      	blx	r3
			for (int v = 0; v < numStringsThisBoard; v++)
    67e8:	f898 3000 	ldrb.w	r3, [r8]
    67ec:	4553      	cmp	r3, sl
    67ee:	dcb2      	bgt.n	6756 <tickMappings+0x56>
    67f0:	9e01      	ldr	r6, [sp, #4]
    67f2:	e797      	b.n	6724 <tickMappings+0x24>
							unsmoothedValue += sum;
    67f4:	ee38 8a27 	vadd.f32	s16, s16, s15
    67f8:	e7c9      	b.n	678e <tickMappings+0x8e>
}
    67fa:	b003      	add	sp, #12
    67fc:	ecbd 8b02 	vpop	{d8}
    6800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6804:	200190d4 	.word	0x200190d4
    6808:	200166c3 	.word	0x200166c3
    680c:	20018784 	.word	0x20018784
    6810:	00000000 	.word	0x00000000
    6814:	2001d3b0 	.word	0x2001d3b0
    6818:	20000694 	.word	0x20000694
    681c:	f3af 8000 	nop.w

00006820 <lfoSawSquareTick>:
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    6820:	4b05      	ldr	r3, [pc, #20]	; (6838 <lfoSawSquareTick+0x18>)
    6822:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6826:	b510      	push	{r4, lr}
    6828:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    682a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    682e:	f002 fdfb 	bl	9428 <__tSawSquareLFO_tick_veneer>
    6832:	ed84 0a00 	vstr	s0, [r4]
}
    6836:	bd10      	pop	{r4, pc}
    6838:	2001d310 	.word	0x2001d310
    683c:	f3af 8000 	nop.w

00006840 <lfoSineTriTick>:
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    6840:	4b05      	ldr	r3, [pc, #20]	; (6858 <lfoSineTriTick+0x18>)
    6842:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6846:	b510      	push	{r4, lr}
    6848:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    684a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    684e:	f002 fd63 	bl	9318 <__tSineTriLFO_tick_veneer>
    6852:	ed84 0a00 	vstr	s0, [r4]
}
    6856:	bd10      	pop	{r4, pc}
    6858:	2001d360 	.word	0x2001d360
    685c:	f3af 8000 	nop.w

00006860 <lfoSineTick>:
    *sample = tCycle_tick(&lfoSine[v][string]);
    6860:	4b05      	ldr	r3, [pc, #20]	; (6878 <lfoSineTick+0x18>)
    6862:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6866:	b510      	push	{r4, lr}
    6868:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    686a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    686e:	f002 fcfb 	bl	9268 <__tCycle_tick_veneer>
    6872:	ed84 0a00 	vstr	s0, [r4]
}
    6876:	bd10      	pop	{r4, pc}
    6878:	2001d340 	.word	0x2001d340
    687c:	f3af 8000 	nop.w

00006880 <lfoTriTick>:
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    6880:	4b05      	ldr	r3, [pc, #20]	; (6898 <lfoTriTick+0x18>)
    6882:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6886:	b510      	push	{r4, lr}
    6888:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    688a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    688e:	f002 fc27 	bl	90e0 <__tTriLFO_tick_veneer>
    6892:	ed84 0a00 	vstr	s0, [r4]
}
    6896:	bd10      	pop	{r4, pc}
    6898:	2001d380 	.word	0x2001d380
    689c:	f3af 8000 	nop.w

000068a0 <lfoSawTick>:
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    68a0:	4b08      	ldr	r3, [pc, #32]	; (68c4 <lfoSawTick+0x24>)
    68a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    68a6:	b510      	push	{r4, lr}
    68a8:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    68aa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    68ae:	f002 fc6b 	bl	9188 <__tIntPhasor_tick_veneer>
    68b2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    68b6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    68ba:	eee0 7a07 	vfma.f32	s15, s0, s14
    68be:	edc4 7a00 	vstr	s15, [r4]
}
    68c2:	bd10      	pop	{r4, pc}
    68c4:	2001d2f0 	.word	0x2001d2f0
    68c8:	f3af 8000 	nop.w
    68cc:	f3af 8000 	nop.w
    68d0:	f3af 8000 	nop.w
    68d4:	f3af 8000 	nop.w
    68d8:	f3af 8000 	nop.w
    68dc:	f3af 8000 	nop.w

000068e0 <lfoPulseTick>:
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    68e0:	4b05      	ldr	r3, [pc, #20]	; (68f8 <lfoPulseTick+0x18>)
    68e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    68e6:	b510      	push	{r4, lr}
    68e8:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    68ea:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    68ee:	f002 fc17 	bl	9120 <__tSquareLFO_tick_veneer>
    68f2:	ed84 0a00 	vstr	s0, [r4]
}
    68f6:	bd10      	pop	{r4, pc}
    68f8:	2001d2d0 	.word	0x2001d2d0
    68fc:	f3af 8000 	nop.w

00006900 <lfoSawSquareSetRate>:
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    6900:	4b03      	ldr	r3, [pc, #12]	; (6910 <lfoSawSquareSetRate+0x10>)
    6902:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6906:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    690a:	f002 bd31 	b.w	9370 <__tSawSquareLFO_setFreq_veneer>
    690e:	bf00      	nop
    6910:	2001d310 	.word	0x2001d310
    6914:	f3af 8000 	nop.w
    6918:	f3af 8000 	nop.w
    691c:	f3af 8000 	nop.w

00006920 <lfoSineTriSetRate>:
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    6920:	4b03      	ldr	r3, [pc, #12]	; (6930 <lfoSineTriSetRate+0x10>)
    6922:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6926:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    692a:	f002 bd6d 	b.w	9408 <__tSineTriLFO_setFreq_veneer>
    692e:	bf00      	nop
    6930:	2001d360 	.word	0x2001d360
    6934:	f3af 8000 	nop.w
    6938:	f3af 8000 	nop.w
    693c:	f3af 8000 	nop.w

00006940 <lfoSineSetRate>:
	tCycle_setFreq(&lfoSine[v][string], r);
    6940:	4b03      	ldr	r3, [pc, #12]	; (6950 <lfoSineSetRate+0x10>)
    6942:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6946:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    694a:	f002 bbd5 	b.w	90f8 <__tCycle_setFreq_veneer>
    694e:	bf00      	nop
    6950:	2001d340 	.word	0x2001d340
    6954:	f3af 8000 	nop.w
    6958:	f3af 8000 	nop.w
    695c:	f3af 8000 	nop.w

00006960 <lfoTriSetRate>:
	tTriLFO_setFreq(&lfoTri[v][string], r);
    6960:	4b03      	ldr	r3, [pc, #12]	; (6970 <lfoTriSetRate+0x10>)
    6962:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6966:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    696a:	f002 bc65 	b.w	9238 <__tTriLFO_setFreq_veneer>
    696e:	bf00      	nop
    6970:	2001d380 	.word	0x2001d380
    6974:	f3af 8000 	nop.w
    6978:	f3af 8000 	nop.w
    697c:	f3af 8000 	nop.w

00006980 <lfoSawSetRate>:
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    6980:	4b03      	ldr	r3, [pc, #12]	; (6990 <lfoSawSetRate+0x10>)
    6982:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6986:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    698a:	f002 bccd 	b.w	9328 <__tIntPhasor_setFreq_veneer>
    698e:	bf00      	nop
    6990:	2001d2f0 	.word	0x2001d2f0
    6994:	f3af 8000 	nop.w
    6998:	f3af 8000 	nop.w
    699c:	f3af 8000 	nop.w

000069a0 <lfoPulseSetRate>:
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    69a0:	4b03      	ldr	r3, [pc, #12]	; (69b0 <lfoPulseSetRate+0x10>)
    69a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    69a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    69aa:	f002 bb65 	b.w	9078 <__tSquareLFO_setFreq_veneer>
    69ae:	bf00      	nop
    69b0:	2001d2d0 	.word	0x2001d2d0
    69b4:	f3af 8000 	nop.w
    69b8:	f3af 8000 	nop.w
    69bc:	f3af 8000 	nop.w

000069c0 <lfoSawSquareSetPhase>:
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    69c0:	4b03      	ldr	r3, [pc, #12]	; (69d0 <lfoSawSquareSetPhase+0x10>)
    69c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    69c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    69ca:	f002 bce9 	b.w	93a0 <__tSawSquareLFO_setPhase_veneer>
    69ce:	bf00      	nop
    69d0:	2001d310 	.word	0x2001d310
    69d4:	f3af 8000 	nop.w
    69d8:	f3af 8000 	nop.w
    69dc:	f3af 8000 	nop.w

000069e0 <lfoSineTriSetPhase>:
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    69e0:	4b03      	ldr	r3, [pc, #12]	; (69f0 <lfoSineTriSetPhase+0x10>)
    69e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    69e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    69ea:	f002 be29 	b.w	9640 <__tSineTriLFO_setPhase_veneer>
    69ee:	bf00      	nop
    69f0:	2001d360 	.word	0x2001d360
    69f4:	f3af 8000 	nop.w
    69f8:	f3af 8000 	nop.w
    69fc:	f3af 8000 	nop.w

00006a00 <lfoSineSetPhase>:
	tCycle_setPhase(&lfoSine[v][string],p);
    6a00:	4b03      	ldr	r3, [pc, #12]	; (6a10 <lfoSineSetPhase+0x10>)
    6a02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6a06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6a0a:	f002 bce1 	b.w	93d0 <__tCycle_setPhase_veneer>
    6a0e:	bf00      	nop
    6a10:	2001d340 	.word	0x2001d340
    6a14:	f3af 8000 	nop.w
    6a18:	f3af 8000 	nop.w
    6a1c:	f3af 8000 	nop.w

00006a20 <lfoTriSetPhase>:
	tTriLFO_setPhase(&lfoTri[v][string],p);
    6a20:	4b03      	ldr	r3, [pc, #12]	; (6a30 <lfoTriSetPhase+0x10>)
    6a22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6a26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6a2a:	f002 bc01 	b.w	9230 <__tTriLFO_setPhase_veneer>
    6a2e:	bf00      	nop
    6a30:	2001d380 	.word	0x2001d380
    6a34:	f3af 8000 	nop.w
    6a38:	f3af 8000 	nop.w
    6a3c:	f3af 8000 	nop.w

00006a40 <lfoSawSetPhase>:
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    6a40:	4b03      	ldr	r3, [pc, #12]	; (6a50 <lfoSawSetPhase+0x10>)
    6a42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6a46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6a4a:	f002 bd3d 	b.w	94c8 <__tIntPhasor_setPhase_veneer>
    6a4e:	bf00      	nop
    6a50:	2001d2f0 	.word	0x2001d2f0
    6a54:	f3af 8000 	nop.w
    6a58:	f3af 8000 	nop.w
    6a5c:	f3af 8000 	nop.w

00006a60 <lfoPulseSetPhase>:
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    6a60:	4b03      	ldr	r3, [pc, #12]	; (6a70 <lfoPulseSetPhase+0x10>)
    6a62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6a66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6a6a:	f002 bda5 	b.w	95b8 <__tSquareLFO_setPhase_veneer>
    6a6e:	bf00      	nop
    6a70:	2001d2d0 	.word	0x2001d2d0
    6a74:	f3af 8000 	nop.w
    6a78:	f3af 8000 	nop.w
    6a7c:	f3af 8000 	nop.w

00006a80 <lfoSawSquareSetShape>:
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    6a80:	4b03      	ldr	r3, [pc, #12]	; (6a90 <lfoSawSquareSetShape+0x10>)
    6a82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6a86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6a8a:	f002 bdad 	b.w	95e8 <__tSawSquareLFO_setShape_veneer>
    6a8e:	bf00      	nop
    6a90:	2001d310 	.word	0x2001d310
    6a94:	f3af 8000 	nop.w
    6a98:	f3af 8000 	nop.w
    6a9c:	f3af 8000 	nop.w

00006aa0 <lfoSineTriSetShape>:
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    6aa0:	4b03      	ldr	r3, [pc, #12]	; (6ab0 <lfoSineTriSetShape+0x10>)
    6aa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6aa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6aaa:	f002 bc69 	b.w	9380 <__tSineTriLFO_setShape_veneer>
    6aae:	bf00      	nop
    6ab0:	2001d360 	.word	0x2001d360
    6ab4:	f3af 8000 	nop.w
    6ab8:	f3af 8000 	nop.w
    6abc:	f3af 8000 	nop.w

00006ac0 <lfoSineSetShape>:
}
    6ac0:	4770      	bx	lr
    6ac2:	bf00      	nop
    6ac4:	f3af 8000 	nop.w
    6ac8:	f3af 8000 	nop.w
    6acc:	f3af 8000 	nop.w
    6ad0:	f3af 8000 	nop.w
    6ad4:	f3af 8000 	nop.w
    6ad8:	f3af 8000 	nop.w
    6adc:	f3af 8000 	nop.w

00006ae0 <lfoTriSetShape>:
    6ae0:	4770      	bx	lr
    6ae2:	bf00      	nop
    6ae4:	f3af 8000 	nop.w
    6ae8:	f3af 8000 	nop.w
    6aec:	f3af 8000 	nop.w
    6af0:	f3af 8000 	nop.w
    6af4:	f3af 8000 	nop.w
    6af8:	f3af 8000 	nop.w
    6afc:	f3af 8000 	nop.w

00006b00 <lfoSawSetShape>:
    6b00:	4770      	bx	lr
    6b02:	bf00      	nop
    6b04:	f3af 8000 	nop.w
    6b08:	f3af 8000 	nop.w
    6b0c:	f3af 8000 	nop.w
    6b10:	f3af 8000 	nop.w
    6b14:	f3af 8000 	nop.w
    6b18:	f3af 8000 	nop.w
    6b1c:	f3af 8000 	nop.w

00006b20 <lfoPulseSetShape>:
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    6b20:	4b03      	ldr	r3, [pc, #12]	; (6b30 <lfoPulseSetShape+0x10>)
    6b22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6b26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6b2a:	f002 bab9 	b.w	90a0 <__tSquareLFO_setPulseWidth_veneer>
    6b2e:	bf00      	nop
    6b30:	2001d2d0 	.word	0x2001d2d0
    6b34:	f3af 8000 	nop.w
    6b38:	f3af 8000 	nop.w
    6b3c:	f3af 8000 	nop.w

00006b40 <clipperGainSet>:
	param1[v][string] = dbToATableLookup(value * 24.0f);
    6b40:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    6b44:	b538      	push	{r3, r4, r5, lr}
    6b46:	4605      	mov	r5, r0
    6b48:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 24.0f);
    6b4a:	ee20 0a27 	vmul.f32	s0, s0, s15
    6b4e:	f002 faaf 	bl	90b0 <__dbToATableLookup_veneer>
    6b52:	4b04      	ldr	r3, [pc, #16]	; (6b64 <clipperGainSet+0x24>)
    6b54:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6b58:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6b5c:	ed83 0a00 	vstr	s0, [r3]
}
    6b60:	bd38      	pop	{r3, r4, r5, pc}
    6b62:	bf00      	nop
    6b64:	2001d5a4 	.word	0x2001d5a4
    6b68:	f3af 8000 	nop.w
    6b6c:	f3af 8000 	nop.w
    6b70:	f3af 8000 	nop.w
    6b74:	f3af 8000 	nop.w
    6b78:	f3af 8000 	nop.w
    6b7c:	f3af 8000 	nop.w

00006b80 <wavefolderParam1>:
	param1[v][string] = dbToATableLookup(value * 12.0f);
    6b80:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    6b84:	b538      	push	{r3, r4, r5, lr}
    6b86:	4605      	mov	r5, r0
    6b88:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 12.0f);
    6b8a:	ee20 0a27 	vmul.f32	s0, s0, s15
    6b8e:	f002 fa8f 	bl	90b0 <__dbToATableLookup_veneer>
    6b92:	4b04      	ldr	r3, [pc, #16]	; (6ba4 <wavefolderParam1+0x24>)
    6b94:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6b98:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6b9c:	ed83 0a00 	vstr	s0, [r3]
}
    6ba0:	bd38      	pop	{r3, r4, r5, pc}
    6ba2:	bf00      	nop
    6ba4:	2001d5a4 	.word	0x2001d5a4
    6ba8:	f3af 8000 	nop.w
    6bac:	f3af 8000 	nop.w
    6bb0:	f3af 8000 	nop.w
    6bb4:	f3af 8000 	nop.w
    6bb8:	f3af 8000 	nop.w
    6bbc:	f3af 8000 	nop.w

00006bc0 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    6bc0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6bc4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6bc8:	4b07      	ldr	r3, [pc, #28]	; (6be8 <wavefolderParam3+0x28>)
	param3[v][string] = value;
    6bca:	4a08      	ldr	r2, [pc, #32]	; (6bec <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
    6bcc:	ee70 6a27 	vadd.f32	s13, s0, s15
    6bd0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    6bd4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    6bd8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    6bdc:	ed82 0a00 	vstr	s0, [r2]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    6be0:	ed83 7a00 	vstr	s14, [r3]
}
    6be4:	4770      	bx	lr
    6be6:	bf00      	nop
    6be8:	2001d2ac 	.word	0x2001d2ac
    6bec:	2001d5e4 	.word	0x2001d5e4
    6bf0:	f3af 8000 	nop.w
    6bf4:	f3af 8000 	nop.w
    6bf8:	f3af 8000 	nop.w
    6bfc:	f3af 8000 	nop.w

00006c00 <tiltParam1>:
{
    6c00:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    6c02:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
    6c06:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    6c0a:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    6c0e:	eeba 8a0e 	vmov.f32	s16, #174	; 0xc1700000 -15.0
    6c12:	0084      	lsls	r4, r0, #2
    6c14:	eea0 8a27 	vfma.f32	s16, s0, s15
    6c18:	eeb1 0a48 	vneg.f32	s0, s16
    6c1c:	f002 fa48 	bl	90b0 <__dbToATableLookup_veneer>
    6c20:	4807      	ldr	r0, [pc, #28]	; (6c40 <tiltParam1+0x40>)
    6c22:	4420      	add	r0, r4
    6c24:	f002 fb10 	bl	9248 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    6c28:	eeb0 0a48 	vmov.f32	s0, s16
    6c2c:	f002 fa40 	bl	90b0 <__dbToATableLookup_veneer>
    6c30:	4804      	ldr	r0, [pc, #16]	; (6c44 <tiltParam1+0x44>)
}
    6c32:	ecbd 8b02 	vpop	{d8}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    6c36:	4420      	add	r0, r4
}
    6c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    6c3c:	f002 bc08 	b.w	9450 <__tVZFilterHS_setGain_veneer>
    6c40:	2001d718 	.word	0x2001d718
    6c44:	2001d738 	.word	0x2001d738
    6c48:	f3af 8000 	nop.w
    6c4c:	f3af 8000 	nop.w
    6c50:	f3af 8000 	nop.w
    6c54:	f3af 8000 	nop.w
    6c58:	f3af 8000 	nop.w
    6c5c:	f3af 8000 	nop.w

00006c60 <tiltParam2>:
	value = (value * 77.0f) + 42.0f;
    6c60:	eddf 6a0f 	vldr	s13, [pc, #60]	; 6ca0 <tiltParam2+0x40>
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    6c64:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
	value = (value * 77.0f) + 42.0f;
    6c68:	eddf 7a0e 	vldr	s15, [pc, #56]	; 6ca4 <tiltParam2+0x44>
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    6c6c:	eddf 0a0e 	vldr	s1, [pc, #56]	; 6ca8 <tiltParam2+0x48>
	value = (value * 77.0f) + 42.0f;
    6c70:	eee0 7a26 	vfma.f32	s15, s0, s13
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    6c74:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 6cac <tiltParam2+0x4c>
    6c78:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 6cb0 <tiltParam2+0x50>
{
    6c7c:	b538      	push	{r3, r4, r5, lr}
    6c7e:	4605      	mov	r5, r0
    6c80:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    6c82:	ee77 7ac7 	vsub.f32	s15, s15, s14
    6c86:	ee67 0aa0 	vmul.f32	s1, s15, s1
    6c8a:	f002 fce5 	bl	9658 <__LEAF_clip_veneer>
	tVZFilterBell_setFreq(&bell1[v][string], value);
    6c8e:	4b09      	ldr	r3, [pc, #36]	; (6cb4 <tiltParam2+0x54>)
    6c90:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6c94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    6c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setFreq(&bell1[v][string], value);
    6c9c:	f002 bc24 	b.w	94e8 <__tVZFilterBell_setFreq_veneer>
    6ca0:	429a0000 	.word	0x429a0000
    6ca4:	42280000 	.word	0x42280000
    6ca8:	420fb824 	.word	0x420fb824
    6cac:	457ff000 	.word	0x457ff000
    6cb0:	00000000 	.word	0x00000000
    6cb4:	2001cf40 	.word	0x2001cf40
    6cb8:	f3af 8000 	nop.w
    6cbc:	f3af 8000 	nop.w

00006cc0 <tiltParam3>:
	tVZFilterBell_setBandwidth(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    6cc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    6cc4:	4b06      	ldr	r3, [pc, #24]	; (6ce0 <tiltParam3+0x20>)
    6cc6:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    6cca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6cce:	ee30 0a07 	vadd.f32	s0, s0, s14
    6cd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6cd6:	ee20 0a27 	vmul.f32	s0, s0, s15
    6cda:	f002 ba29 	b.w	9130 <__tVZFilterBell_setBandwidth_veneer>
    6cde:	bf00      	nop
    6ce0:	2001cf40 	.word	0x2001cf40
    6ce4:	f3af 8000 	nop.w
    6ce8:	f3af 8000 	nop.w
    6cec:	f3af 8000 	nop.w
    6cf0:	f3af 8000 	nop.w
    6cf4:	f3af 8000 	nop.w
    6cf8:	f3af 8000 	nop.w
    6cfc:	f3af 8000 	nop.w

00006d00 <tiltParam4>:
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    6d00:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    6d04:	ed9f 7a09 	vldr	s14, [pc, #36]	; 6d2c <tiltParam4+0x2c>
{
    6d08:	b538      	push	{r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    6d0a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    6d0e:	4605      	mov	r5, r0
    6d10:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    6d12:	eeb0 0a67 	vmov.f32	s0, s15
    6d16:	f002 f9cb 	bl	90b0 <__dbToATableLookup_veneer>
    6d1a:	4b05      	ldr	r3, [pc, #20]	; (6d30 <tiltParam4+0x30>)
    6d1c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6d20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    6d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    6d28:	f002 b992 	b.w	9050 <__tVZFilterBell_setGain_veneer>
    6d2c:	42080000 	.word	0x42080000
    6d30:	2001cf40 	.word	0x2001cf40
    6d34:	f3af 8000 	nop.w
    6d38:	f3af 8000 	nop.w
    6d3c:	f3af 8000 	nop.w

00006d40 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    6d40:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    6d44:	4b04      	ldr	r3, [pc, #16]	; (6d58 <compressorParam1+0x18>)
    6d46:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6d4a:	ee20 0a27 	vmul.f32	s0, s0, s15
    6d4e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6d52:	ed83 0a03 	vstr	s0, [r3, #12]
}
    6d56:	4770      	bx	lr
    6d58:	2001cf60 	.word	0x2001cf60
    6d5c:	f3af 8000 	nop.w

00006d60 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    6d60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6d64:	4b0a      	ldr	r3, [pc, #40]	; (6d90 <compressorParam2+0x30>)
    6d66:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    6d6a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6d6e:	eeb0 7a67 	vmov.f32	s14, s15
    6d72:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    6d76:	eea0 7a26 	vfma.f32	s14, s0, s13
    6d7a:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    6d7e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6d82:	edd3 6a04 	vldr	s13, [r3, #16]
    6d86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    6d8a:	ed83 7a07 	vstr	s14, [r3, #28]
}
    6d8e:	4770      	bx	lr
    6d90:	2001cf60 	.word	0x2001cf60
    6d94:	f3af 8000 	nop.w
    6d98:	f3af 8000 	nop.w
    6d9c:	f3af 8000 	nop.w

00006da0 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    6da0:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    6da4:	4b04      	ldr	r3, [pc, #16]	; (6db8 <compressorParam3+0x18>)
    6da6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6daa:	ee20 0a27 	vmul.f32	s0, s0, s15
    6dae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    6db2:	ed83 0a06 	vstr	s0, [r3, #24]
}
    6db6:	4770      	bx	lr
    6db8:	2001cf60 	.word	0x2001cf60
    6dbc:	f3af 8000 	nop.w

00006dc0 <compressorParam4>:
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    6dc0:	4b0b      	ldr	r3, [pc, #44]	; (6df0 <compressorParam4+0x30>)
    6dc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
    6dc6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 6df4 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    6dca:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    6dce:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    6dd0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    6dd4:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    6dd8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    6ddc:	ee20 0a07 	vmul.f32	s0, s0, s14
    6de0:	ee87 0a80 	vdiv.f32	s0, s15, s0
    6de4:	f002 f9e0 	bl	91a8 <__fasterexpf_veneer>
    6de8:	ed84 0a01 	vstr	s0, [r4, #4]
}
    6dec:	bd10      	pop	{r4, pc}
    6dee:	bf00      	nop
    6df0:	2001cf60 	.word	0x2001cf60
    6df4:	3a83126f 	.word	0x3a83126f
    6df8:	f3af 8000 	nop.w
    6dfc:	f3af 8000 	nop.w

00006e00 <compressorParam5>:
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    6e00:	4b0b      	ldr	r3, [pc, #44]	; (6e30 <compressorParam5+0x30>)
    6e02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
    6e06:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 6e34 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    6e0a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    6e0e:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    6e10:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    6e14:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    6e18:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    6e1c:	ee20 0a07 	vmul.f32	s0, s0, s14
    6e20:	ee87 0a80 	vdiv.f32	s0, s15, s0
    6e24:	f002 f9c0 	bl	91a8 <__fasterexpf_veneer>
    6e28:	ed84 0a02 	vstr	s0, [r4, #8]
}
    6e2c:	bd10      	pop	{r4, pc}
    6e2e:	bf00      	nop
    6e30:	2001cf60 	.word	0x2001cf60
    6e34:	3a83126f 	.word	0x3a83126f
    6e38:	f3af 8000 	nop.w
    6e3c:	f3af 8000 	nop.w

00006e40 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    6e40:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    6e44:	4b05      	ldr	r3, [pc, #20]	; (6e5c <offsetParam2+0x1c>)
    6e46:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    6e4a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6e4e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6e52:	eee0 7a07 	vfma.f32	s15, s0, s14
    6e56:	edc3 7a00 	vstr	s15, [r3]
}
    6e5a:	4770      	bx	lr
    6e5c:	2001d5c4 	.word	0x2001d5c4

00006e60 <param2Linear>:
	param2[v][string] = value;
    6e60:	4b03      	ldr	r3, [pc, #12]	; (6e70 <param2Linear+0x10>)
    6e62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6e66:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6e6a:	ed83 0a00 	vstr	s0, [r3]
}
    6e6e:	4770      	bx	lr
    6e70:	2001d5c4 	.word	0x2001d5c4
    6e74:	f3af 8000 	nop.w
    6e78:	f3af 8000 	nop.w
    6e7c:	f3af 8000 	nop.w

00006e80 <param3Linear>:
	param3[v][string] = value;
    6e80:	4b03      	ldr	r3, [pc, #12]	; (6e90 <param3Linear+0x10>)
    6e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6e86:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6e8a:	ed83 0a00 	vstr	s0, [r3]
}
    6e8e:	4770      	bx	lr
    6e90:	2001d5e4 	.word	0x2001d5e4
    6e94:	f3af 8000 	nop.w
    6e98:	f3af 8000 	nop.w
    6e9c:	f3af 8000 	nop.w

00006ea0 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    6ea0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 6ee0 <param3Soft+0x40>
    6ea4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6ea8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 6ee4 <param3Soft+0x44>
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    6eac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	param3[v][string] = (value * .99f) + 0.01f;
    6eb0:	4a0d      	ldr	r2, [pc, #52]	; (6ee8 <param3Soft+0x48>)
    6eb2:	eee0 7a07 	vfma.f32	s15, s0, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    6eb6:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 6eec <param3Soft+0x4c>
	param3[v][string] = (value * .99f) + 0.01f;
    6eba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    6ebe:	4b0c      	ldr	r3, [pc, #48]	; (6ef0 <param3Soft+0x50>)
    6ec0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6ec4:	ee27 7aa7 	vmul.f32	s14, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    6ec8:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    6ecc:	ee27 7ac7 	vnmul.f32	s14, s15, s14
    6ed0:	eee7 7a06 	vfma.f32	s15, s14, s12
    6ed4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    6ed8:	ed83 7a00 	vstr	s14, [r3]
}
    6edc:	4770      	bx	lr
    6ede:	bf00      	nop
    6ee0:	3f7d70a4 	.word	0x3f7d70a4
    6ee4:	3c23d70a 	.word	0x3c23d70a
    6ee8:	2001d5e4 	.word	0x2001d5e4
    6eec:	3eaaaaaa 	.word	0x3eaaaaaa
    6ef0:	2001d6ec 	.word	0x2001d6ec
    6ef4:	f3af 8000 	nop.w
    6ef8:	f3af 8000 	nop.w
    6efc:	f3af 8000 	nop.w

00006f00 <param3Hard>:
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    6f00:	eddf 6a17 	vldr	s13, [pc, #92]	; 6f60 <param3Hard+0x60>
    6f04:	eddf 7a17 	vldr	s15, [pc, #92]	; 6f64 <param3Hard+0x64>
    6f08:	ed9f 7a17 	vldr	s14, [pc, #92]	; 6f68 <param3Hard+0x68>
    6f0c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    6f10:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    6f12:	4b16      	ldr	r3, [pc, #88]	; (6f6c <param3Hard+0x6c>)
    6f14:	0045      	lsls	r5, r0, #1
    6f16:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    6f1a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    6f1c:	ee27 0a87 	vmul.f32	s0, s15, s14
    6f20:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6f24:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
    6f28:	f002 fa36 	bl	9398 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    6f2c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    6f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f34:	d00a      	beq.n	6f4c <param3Hard+0x4c>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    6f36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    6f3a:	4b0d      	ldr	r3, [pc, #52]	; (6f70 <param3Hard+0x70>)
    6f3c:	4425      	add	r5, r4
    6f3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    6f42:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6f46:	edc3 7a00 	vstr	s15, [r3]
}
    6f4a:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    6f4c:	4b08      	ldr	r3, [pc, #32]	; (6f70 <param3Hard+0x70>)
    6f4e:	4425      	add	r5, r4
    6f50:	eddf 7a08 	vldr	s15, [pc, #32]	; 6f74 <param3Hard+0x74>
    6f54:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6f58:	edc3 7a00 	vstr	s15, [r3]
}
    6f5c:	bd38      	pop	{r3, r4, r5, pc}
    6f5e:	bf00      	nop
    6f60:	3f7d70a4 	.word	0x3f7d70a4
    6f64:	3c23d70a 	.word	0x3c23d70a
    6f68:	3fc90fdb 	.word	0x3fc90fdb
    6f6c:	2001d5e4 	.word	0x2001d5e4
    6f70:	2001d6cc 	.word	0x2001d6cc
    6f74:	4479ffff 	.word	0x4479ffff
    6f78:	f3af 8000 	nop.w
    6f7c:	f3af 8000 	nop.w

00006f80 <param3Poly>:
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    6f80:	eddf 6a17 	vldr	s13, [pc, #92]	; 6fe0 <param3Poly+0x60>
    6f84:	eddf 7a17 	vldr	s15, [pc, #92]	; 6fe4 <param3Poly+0x64>
    6f88:	ed9f 7a17 	vldr	s14, [pc, #92]	; 6fe8 <param3Poly+0x68>
    6f8c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    6f90:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    6f92:	4b16      	ldr	r3, [pc, #88]	; (6fec <param3Poly+0x6c>)
    6f94:	0045      	lsls	r5, r0, #1
    6f96:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    6f9a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    6f9c:	ee27 0a87 	vmul.f32	s0, s15, s14
    6fa0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6fa4:	ed83 0a00 	vstr	s0, [r3]
    float tempDiv = fastSine(param3[v][string]);
    6fa8:	f002 fade 	bl	9568 <__fastSine_veneer>
    if (tempDiv == 0.0f)
    6fac:	eeb5 0a40 	vcmp.f32	s0, #0.0
    6fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6fb4:	d00a      	beq.n	6fcc <param3Poly+0x4c>
    polyDivider[v][string] = 1.0f/tempDiv;
    6fb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    6fba:	4b0d      	ldr	r3, [pc, #52]	; (6ff0 <param3Poly+0x70>)
    6fbc:	4425      	add	r5, r4
    6fbe:	eec7 7a00 	vdiv.f32	s15, s14, s0
    6fc2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6fc6:	edc3 7a00 	vstr	s15, [r3]
}
    6fca:	bd38      	pop	{r3, r4, r5, pc}
    polyDivider[v][string] = 1.0f/tempDiv;
    6fcc:	4b08      	ldr	r3, [pc, #32]	; (6ff0 <param3Poly+0x70>)
    6fce:	4425      	add	r5, r4
    6fd0:	eddf 7a08 	vldr	s15, [pc, #32]	; 6ff4 <param3Poly+0x74>
    6fd4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    6fd8:	edc3 7a00 	vstr	s15, [r3]
}
    6fdc:	bd38      	pop	{r3, r4, r5, pc}
    6fde:	bf00      	nop
    6fe0:	3f7d70a4 	.word	0x3f7d70a4
    6fe4:	3c23d70a 	.word	0x3c23d70a
    6fe8:	3fc90fdb 	.word	0x3fc90fdb
    6fec:	2001d5e4 	.word	0x2001d5e4
    6ff0:	2001d65c 	.word	0x2001d65c
    6ff4:	4479ffff 	.word	0x4479ffff
    6ff8:	f3af 8000 	nop.w
    6ffc:	f3af 8000 	nop.w

00007000 <param4Linear>:
	param4[v][string] = value;
    7000:	4b03      	ldr	r3, [pc, #12]	; (7010 <param4Linear+0x10>)
    7002:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7006:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    700a:	ed83 0a00 	vstr	s0, [r3]
}
    700e:	4770      	bx	lr
    7010:	2001d604 	.word	0x2001d604
    7014:	f3af 8000 	nop.w
    7018:	f3af 8000 	nop.w
    701c:	f3af 8000 	nop.w

00007020 <param5Linear>:
	param5[v][string] = value;
    7020:	4b03      	ldr	r3, [pc, #12]	; (7030 <param5Linear+0x10>)
    7022:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7026:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    702a:	ed83 0a00 	vstr	s0, [r3]
}
    702e:	4770      	bx	lr
    7030:	2001d624 	.word	0x2001d624
    7034:	f3af 8000 	nop.w
    7038:	f3af 8000 	nop.w
    703c:	f3af 8000 	nop.w

00007040 <param2BC>:
	tCrusher_setQuality (&bc[v][string],value);
    7040:	4b03      	ldr	r3, [pc, #12]	; (7050 <param2BC+0x10>)
    7042:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7046:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    704a:	f002 b825 	b.w	9098 <__tCrusher_setQuality_veneer>
    704e:	bf00      	nop
    7050:	2001cf20 	.word	0x2001cf20
    7054:	f3af 8000 	nop.w
    7058:	f3af 8000 	nop.w
    705c:	f3af 8000 	nop.w

00007060 <param3BC>:
	value = (value * inv_oversample) + 0.01f;
    7060:	4a07      	ldr	r2, [pc, #28]	; (7080 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
    7062:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
    7066:	eddf 7a07 	vldr	s15, [pc, #28]	; 7084 <param3BC+0x24>
    706a:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
    706e:	4b06      	ldr	r3, [pc, #24]	; (7088 <param3BC+0x28>)
    7070:	eee7 7a00 	vfma.f32	s15, s14, s0
    7074:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7078:	eeb0 0a67 	vmov.f32	s0, s15
    707c:	f002 ba5c 	b.w	9538 <__tCrusher_setSamplingRatio_veneer>
    7080:	20000ad0 	.word	0x20000ad0
    7084:	3c23d70a 	.word	0x3c23d70a
    7088:	2001cf20 	.word	0x2001cf20
    708c:	f3af 8000 	nop.w
    7090:	f3af 8000 	nop.w
    7094:	f3af 8000 	nop.w
    7098:	f3af 8000 	nop.w
    709c:	f3af 8000 	nop.w

000070a0 <param4BC>:
	tCrusher_setRound(&bc[v][string], value);
    70a0:	4b03      	ldr	r3, [pc, #12]	; (70b0 <param4BC+0x10>)
    70a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    70a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    70aa:	f002 baa9 	b.w	9600 <__tCrusher_setRound_veneer>
    70ae:	bf00      	nop
    70b0:	2001cf20 	.word	0x2001cf20
    70b4:	f3af 8000 	nop.w
    70b8:	f3af 8000 	nop.w
    70bc:	f3af 8000 	nop.w

000070c0 <param5BC>:
	tCrusher_setOperation(&bc[v][string], value);
    70c0:	4b03      	ldr	r3, [pc, #12]	; (70d0 <param5BC+0x10>)
    70c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    70c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    70ca:	f002 b8c1 	b.w	9250 <__tCrusher_setOperation_veneer>
    70ce:	bf00      	nop
    70d0:	2001cf20 	.word	0x2001cf20
    70d4:	f3af 8000 	nop.w
    70d8:	f3af 8000 	nop.w
    70dc:	f3af 8000 	nop.w

000070e0 <fxMixSet>:
	fxMix[v][string] = value;
    70e0:	4b03      	ldr	r3, [pc, #12]	; (70f0 <fxMixSet+0x10>)
    70e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    70e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    70ea:	ed83 0a00 	vstr	s0, [r3]
}
    70ee:	4770      	bx	lr
    70f0:	2001d1dc 	.word	0x2001d1dc
    70f4:	f3af 8000 	nop.w
    70f8:	f3af 8000 	nop.w
    70fc:	f3af 8000 	nop.w

00007100 <fxPostGainSet>:
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    7100:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    7104:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    7108:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    710a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    710e:	4605      	mov	r5, r0
    7110:	460c      	mov	r4, r1
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    7112:	eeb0 0a67 	vmov.f32	s0, s15
    7116:	f001 ffcb 	bl	90b0 <__dbToATableLookup_veneer>
    711a:	4b04      	ldr	r3, [pc, #16]	; (712c <fxPostGainSet+0x2c>)
    711c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7120:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7124:	ed83 0a00 	vstr	s0, [r3]
}
    7128:	bd38      	pop	{r3, r4, r5, pc}
    712a:	bf00      	nop
    712c:	2001d1fc 	.word	0x2001d1fc
    7130:	f3af 8000 	nop.w
    7134:	f3af 8000 	nop.w
    7138:	f3af 8000 	nop.w
    713c:	f3af 8000 	nop.w

00007140 <wavefolderTick>:
{
    7140:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7142:	4a48      	ldr	r2, [pc, #288]	; (7264 <wavefolderTick+0x124>)
    7144:	0043      	lsls	r3, r0, #1
    7146:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    if (ffSample <= -1.0f)
    714a:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    714e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
{
    7152:	ed2d 8b02 	vpush	{d8}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7156:	edd2 7a00 	vldr	s15, [r2]
    715a:	4a43      	ldr	r2, [pc, #268]	; (7268 <wavefolderTick+0x128>)
    715c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    7160:	ed92 7a00 	vldr	s14, [r2]
    float curFB = param3[v][string];
    7164:	4a41      	ldr	r2, [pc, #260]	; (726c <wavefolderTick+0x12c>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7166:	ee27 7a87 	vmul.f32	s14, s15, s14
    float curFB = param3[v][string];
    716a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    716e:	eea7 7a80 	vfma.f32	s14, s15, s0
    float curFB = param3[v][string];
    7172:	edd2 4a00 	vldr	s9, [r2]
    float curFF = param4[v][string];
    7176:	4a3e      	ldr	r2, [pc, #248]	; (7270 <wavefolderTick+0x130>)
    7178:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    717c:	ed92 6a00 	vldr	s12, [r2]
    if (ffSample <= -1.0f)
    7180:	eeb4 7ae6 	vcmpe.f32	s14, s13
    7184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7188:	d959      	bls.n	723e <wavefolderTick+0xfe>
    } else if (ffSample >= 1.0f)
    718a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    718e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    7192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7196:	db43      	blt.n	7220 <wavefolderTick+0xe0>
    7198:	ed9f 5a36 	vldr	s10, [pc, #216]	; 7274 <wavefolderTick+0x134>
    float fbSample = wfState[v][string];
    719c:	4c36      	ldr	r4, [pc, #216]	; (7278 <wavefolderTick+0x138>)
    719e:	185a      	adds	r2, r3, r1
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    71a0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    float fbSample = wfState[v][string];
    71a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    if (fbSample <= -1.0f)
    71a8:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
    float fbSample = wfState[v][string];
    71ac:	edd2 6a00 	vldr	s13, [r2]
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    71b0:	ee75 7ac6 	vsub.f32	s15, s11, s12
    if (fbSample <= -1.0f)
    71b4:	eef4 6ac4 	vcmpe.f32	s13, s8
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    71b8:	ee67 7a87 	vmul.f32	s15, s15, s14
    if (fbSample <= -1.0f)
    71bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    71c0:	eee6 7a05 	vfma.f32	s15, s12, s10
    if (fbSample <= -1.0f)
    71c4:	d93e      	bls.n	7244 <wavefolderTick+0x104>
    } else if (fbSample >= 1.0f)
    71c6:	eef4 6ae5 	vcmpe.f32	s13, s11
    71ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71ce:	db3c      	blt.n	724a <wavefolderTick+0x10a>
    71d0:	eddf 6a28 	vldr	s13, [pc, #160]	; 7274 <wavefolderTick+0x134>
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    71d4:	eee4 7aa6 	vfma.f32	s15, s9, s13
    71d8:	4419      	add	r1, r3
    71da:	4b28      	ldr	r3, [pc, #160]	; (727c <wavefolderTick+0x13c>)
    71dc:	ed9f 0a28 	vldr	s0, [pc, #160]	; 7280 <wavefolderTick+0x140>
    71e0:	008d      	lsls	r5, r1, #2
    71e2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    71e6:	ee27 0a00 	vmul.f32	s0, s14, s0
    71ea:	442c      	add	r4, r5
    71ec:	edd3 8a00 	vldr	s17, [r3]
    71f0:	eeb0 8a67 	vmov.f32	s16, s15
    71f4:	f002 f8d0 	bl	9398 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    71f8:	4b22      	ldr	r3, [pc, #136]	; (7284 <wavefolderTick+0x144>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    71fa:	4823      	ldr	r0, [pc, #140]	; (7288 <wavefolderTick+0x148>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    71fc:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    7200:	442b      	add	r3, r5
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7202:	4428      	add	r0, r5
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    7204:	eee8 7ac0 	vfms.f32	s15, s17, s0
    sample = wfState[v][string] * invCurFB[v][string];
    7208:	ed93 0a00 	vldr	s0, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    720c:	edc4 7a00 	vstr	s15, [r4]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7210:	ee27 0a80 	vmul.f32	s0, s15, s0
}
    7214:	ecbd 8b02 	vpop	{d8}
    7218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    721c:	f001 bfa8 	b.w	9170 <__tHighpass_tick_veneer>
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    7220:	ee67 7a07 	vmul.f32	s15, s14, s14
    7224:	eddf 5a19 	vldr	s11, [pc, #100]	; 728c <wavefolderTick+0x14c>
    7228:	eeb0 5a47 	vmov.f32	s10, s14
    ffSample *= 1.499999f;
    722c:	eddf 6a18 	vldr	s13, [pc, #96]	; 7290 <wavefolderTick+0x150>
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    7230:	ee67 7a67 	vnmul.f32	s15, s14, s15
    7234:	eea7 5aa5 	vfma.f32	s10, s15, s11
    ffSample *= 1.499999f;
    7238:	ee25 5a26 	vmul.f32	s10, s10, s13
    723c:	e7ae      	b.n	719c <wavefolderTick+0x5c>
    723e:	ed9f 5a15 	vldr	s10, [pc, #84]	; 7294 <wavefolderTick+0x154>
    7242:	e7ab      	b.n	719c <wavefolderTick+0x5c>
    7244:	eddf 6a13 	vldr	s13, [pc, #76]	; 7294 <wavefolderTick+0x154>
    7248:	e7c4      	b.n	71d4 <wavefolderTick+0x94>
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    724a:	ee26 6aa6 	vmul.f32	s12, s13, s13
    724e:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 728c <wavefolderTick+0x14c>
    fbSample *= 1.499999f;
    7252:	eddf 5a0f 	vldr	s11, [pc, #60]	; 7290 <wavefolderTick+0x150>
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    7256:	ee26 6ac6 	vnmul.f32	s12, s13, s12
    725a:	eee6 6a05 	vfma.f32	s13, s12, s10
    fbSample *= 1.499999f;
    725e:	ee66 6aa5 	vmul.f32	s13, s13, s11
    7262:	e7b7      	b.n	71d4 <wavefolderTick+0x94>
    7264:	2001d5a4 	.word	0x2001d5a4
    7268:	2001d5c4 	.word	0x2001d5c4
    726c:	2001d5e4 	.word	0x2001d5e4
    7270:	2001d604 	.word	0x2001d604
    7274:	3f7ffff6 	.word	0x3f7ffff6
    7278:	2001d924 	.word	0x2001d924
    727c:	2001d624 	.word	0x2001d624
    7280:	40c90fdb 	.word	0x40c90fdb
    7284:	2001d2ac 	.word	0x2001d2ac
    7288:	2001cf80 	.word	0x2001cf80
    728c:	3eaaaaaa 	.word	0x3eaaaaaa
    7290:	3fbffff8 	.word	0x3fbffff8
    7294:	bf7ffff6 	.word	0xbf7ffff6
    7298:	f3af 8000 	nop.w
    729c:	f3af 8000 	nop.w

000072a0 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    72a0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    72a4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 72bc <chorusParam1+0x1c>
    72a8:	4b05      	ldr	r3, [pc, #20]	; (72c0 <chorusParam1+0x20>)
    72aa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    72ae:	eee0 7a07 	vfma.f32	s15, s0, s14
    72b2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    72b6:	edc3 7a00 	vstr	s15, [r3]
}
    72ba:	4770      	bx	lr
    72bc:	45b4a000 	.word	0x45b4a000
    72c0:	2001d5a4 	.word	0x2001d5a4
    72c4:	f3af 8000 	nop.w
    72c8:	f3af 8000 	nop.w
    72cc:	f3af 8000 	nop.w
    72d0:	f3af 8000 	nop.w
    72d4:	f3af 8000 	nop.w
    72d8:	f3af 8000 	nop.w
    72dc:	f3af 8000 	nop.w

000072e0 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    72e0:	eddf 7a05 	vldr	s15, [pc, #20]	; 72f8 <chorusParam2+0x18>
    72e4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    72e8:	4b04      	ldr	r3, [pc, #16]	; (72fc <chorusParam2+0x1c>)
    72ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    72ee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    72f2:	ed83 0a00 	vstr	s0, [r3]
}
    72f6:	4770      	bx	lr
    72f8:	3dcccccd 	.word	0x3dcccccd
    72fc:	2001d5c4 	.word	0x2001d5c4

00007300 <chorusParam3>:
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    7300:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7320 <chorusParam3+0x20>
    7304:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7308:	eddf 7a06 	vldr	s15, [pc, #24]	; 7324 <chorusParam3+0x24>
    730c:	4b06      	ldr	r3, [pc, #24]	; (7328 <chorusParam3+0x28>)
    730e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7312:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7316:	eeb0 0a67 	vmov.f32	s0, s15
    731a:	f001 beed 	b.w	90f8 <__tCycle_setFreq_veneer>
    731e:	bf00      	nop
    7320:	3ecccccd 	.word	0x3ecccccd
    7324:	3c23d70a 	.word	0x3c23d70a
    7328:	2001d4c8 	.word	0x2001d4c8
    732c:	f3af 8000 	nop.w
    7330:	f3af 8000 	nop.w
    7334:	f3af 8000 	nop.w
    7338:	f3af 8000 	nop.w
    733c:	f3af 8000 	nop.w

00007340 <chorusParam4>:
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    7340:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7360 <chorusParam4+0x20>
    7344:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7348:	eddf 7a06 	vldr	s15, [pc, #24]	; 7364 <chorusParam4+0x24>
    734c:	4b06      	ldr	r3, [pc, #24]	; (7368 <chorusParam4+0x28>)
    734e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7352:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7356:	eeb0 0a67 	vmov.f32	s0, s15
    735a:	f001 becd 	b.w	90f8 <__tCycle_setFreq_veneer>
    735e:	bf00      	nop
    7360:	3ee38e37 	.word	0x3ee38e37
    7364:	3c343958 	.word	0x3c343958
    7368:	2001d4e8 	.word	0x2001d4e8
    736c:	f3af 8000 	nop.w
    7370:	f3af 8000 	nop.w
    7374:	f3af 8000 	nop.w
    7378:	f3af 8000 	nop.w
    737c:	f3af 8000 	nop.w

00007380 <delayParam1>:
    tTapeDelay_setDelay(&tapeDelay[v][string], value * 30000.0f + 1.0f);
    7380:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7384:	ed9f 7a06 	vldr	s14, [pc, #24]	; 73a0 <delayParam1+0x20>
    7388:	4b06      	ldr	r3, [pc, #24]	; (73a4 <delayParam1+0x24>)
    738a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    738e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7392:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7396:	eeb0 0a67 	vmov.f32	s0, s15
    739a:	f001 bfe1 	b.w	9360 <__tTapeDelay_setDelay_veneer>
    739e:	bf00      	nop
    73a0:	46ea6000 	.word	0x46ea6000
    73a4:	2001d8b8 	.word	0x2001d8b8
    73a8:	f3af 8000 	nop.w
    73ac:	f3af 8000 	nop.w
    73b0:	f3af 8000 	nop.w
    73b4:	f3af 8000 	nop.w
    73b8:	f3af 8000 	nop.w
    73bc:	f3af 8000 	nop.w

000073c0 <delayParam2>:
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    73c0:	ed9f 1a09 	vldr	s2, [pc, #36]	; 73e8 <delayParam2+0x28>
{
    73c4:	b538      	push	{r3, r4, r5, lr}
    73c6:	4605      	mov	r5, r0
    73c8:	460c      	mov	r4, r1
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    73ca:	ee60 0a01 	vmul.f32	s1, s0, s2
    73ce:	ed9f 0a07 	vldr	s0, [pc, #28]	; 73ec <delayParam2+0x2c>
    73d2:	f002 f941 	bl	9658 <__LEAF_clip_veneer>
    73d6:	4b06      	ldr	r3, [pc, #24]	; (73f0 <delayParam2+0x30>)
    73d8:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    73dc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    73e0:	ed83 0a00 	vstr	s0, [r3]
}
    73e4:	bd38      	pop	{r3, r4, r5, pc}
    73e6:	bf00      	nop
    73e8:	3f8ccccd 	.word	0x3f8ccccd
    73ec:	00000000 	.word	0x00000000
    73f0:	2001d5c4 	.word	0x2001d5c4
    73f4:	f3af 8000 	nop.w
    73f8:	f3af 8000 	nop.w
    73fc:	f3af 8000 	nop.w

00007400 <delayParam3>:
    tSVF_setFreqFast(&FXlowpass[v][string], (value * 127.0f));
    7400:	eddf 7a05 	vldr	s15, [pc, #20]	; 7418 <delayParam3+0x18>
    7404:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7408:	4b04      	ldr	r3, [pc, #16]	; (741c <delayParam3+0x1c>)
    740a:	ee20 0a27 	vmul.f32	s0, s0, s15
    740e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7412:	f001 bf51 	b.w	92b8 <__tSVF_setFreqFast_veneer>
    7416:	bf00      	nop
    7418:	42fe0000 	.word	0x42fe0000
    741c:	2001ce98 	.word	0x2001ce98

00007420 <delayParam4>:
    tSVF_setFreqFast(&FXhighpass[v][string], (value * 127.0f));
    7420:	eddf 7a05 	vldr	s15, [pc, #20]	; 7438 <delayParam4+0x18>
    7424:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7428:	4b04      	ldr	r3, [pc, #16]	; (743c <delayParam4+0x1c>)
    742a:	ee20 0a27 	vmul.f32	s0, s0, s15
    742e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7432:	f001 bf41 	b.w	92b8 <__tSVF_setFreqFast_veneer>
    7436:	bf00      	nop
    7438:	42fe0000 	.word	0x42fe0000
    743c:	2001ce78 	.word	0x2001ce78

00007440 <delayParam5>:
	param5[v][string] = (value * 1.5f) + 1.0f;
    7440:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
    7444:	4b05      	ldr	r3, [pc, #20]	; (745c <delayParam5+0x1c>)
    7446:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    744a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    744e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7452:	eee0 7a07 	vfma.f32	s15, s0, s14
    7456:	edc3 7a00 	vstr	s15, [r3]
}
    745a:	4770      	bx	lr
    745c:	2001d624 	.word	0x2001d624

00007460 <chorusTick>:

float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    7460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7462:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    7466:	4d2b      	ldr	r5, [pc, #172]	; (7514 <chorusTick+0xb4>)
    7468:	4f2b      	ldr	r7, [pc, #172]	; (7518 <chorusTick+0xb8>)
    746a:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    746e:	482b      	ldr	r0, [pc, #172]	; (751c <chorusTick+0xbc>)
    7470:	eb07 0781 	add.w	r7, r7, r1, lsl #2
    7474:	eddf 7a2a 	vldr	s15, [pc, #168]	; 7520 <chorusTick+0xc0>
    7478:	4e2a      	ldr	r6, [pc, #168]	; (7524 <chorusTick+0xc4>)
    747a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    747e:	008c      	lsls	r4, r1, #2
    7480:	eb06 0681 	add.w	r6, r6, r1, lsl #2
{
    7484:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    7488:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    748c:	ed95 9a00 	vldr	s18, [r5]
{
    7490:	eeb0 8a40 	vmov.f32	s16, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    7494:	edd7 9a00 	vldr	s19, [r7]
    7498:	ee29 9a27 	vmul.f32	s18, s18, s15
    749c:	f001 fee4 	bl	9268 <__tCycle_tick_veneer>
    74a0:	eef0 7a68 	vmov.f32	s15, s17
    74a4:	4630      	mov	r0, r6
    74a6:	eee9 7a80 	vfma.f32	s15, s19, s0
    74aa:	ee29 0a27 	vmul.f32	s0, s18, s15
    74ae:	f001 fee3 	bl	9278 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    74b2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    74b6:	481c      	ldr	r0, [pc, #112]	; (7528 <chorusTick+0xc8>)
    74b8:	ed95 9a00 	vldr	s18, [r5]
    74bc:	edd7 9a00 	vldr	s19, [r7]
    74c0:	4420      	add	r0, r4
    74c2:	ee29 9a27 	vmul.f32	s18, s18, s15
    74c6:	f001 fecf 	bl	9268 <__tCycle_tick_veneer>
    74ca:	eee9 8ac0 	vfms.f32	s17, s19, s0
    74ce:	4d17      	ldr	r5, [pc, #92]	; (752c <chorusTick+0xcc>)
    74d0:	4425      	add	r5, r4
    74d2:	4628      	mov	r0, r5
    74d4:	ee29 0a28 	vmul.f32	s0, s18, s17
    74d8:	f001 fece 	bl	9278 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    74dc:	eeb0 0a48 	vmov.f32	s0, s16
    74e0:	4630      	mov	r0, r6
    74e2:	f001 ff25 	bl	9330 <__tLinearDelay_tick_veneer>
    74e6:	eef0 8a40 	vmov.f32	s17, s0
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    74ea:	4628      	mov	r0, r5
    74ec:	eeb0 0a48 	vmov.f32	s0, s16
    74f0:	f001 ff1e 	bl	9330 <__tLinearDelay_tick_veneer>
    74f4:	ee30 0a48 	vsub.f32	s0, s0, s16
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    74f8:	ee78 8ac8 	vsub.f32	s17, s17, s16
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    74fc:	480c      	ldr	r0, [pc, #48]	; (7530 <chorusTick+0xd0>)
    74fe:	4420      	add	r0, r4
    7500:	ee30 0a28 	vadd.f32	s0, s0, s17
    7504:	f001 fe34 	bl	9170 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    7508:	eeb1 0a40 	vneg.f32	s0, s0
    750c:	ecbd 8b04 	vpop	{d8-d9}
    7510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7512:	bf00      	nop
    7514:	2001d5a4 	.word	0x2001d5a4
    7518:	2001d5c4 	.word	0x2001d5c4
    751c:	2001d4c8 	.word	0x2001d4c8
    7520:	3f34fdf4 	.word	0x3f34fdf4
    7524:	2001d0c8 	.word	0x2001d0c8
    7528:	2001d4e8 	.word	0x2001d4e8
    752c:	2001d0e8 	.word	0x2001d0e8
    7530:	2001cf80 	.word	0x2001cf80
    7534:	f3af 8000 	nop.w
    7538:	f3af 8000 	nop.w
    753c:	f3af 8000 	nop.w

00007540 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    7540:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    7544:	4a0f      	ldr	r2, [pc, #60]	; (7584 <shaperTick+0x44>)
    7546:	4b10      	ldr	r3, [pc, #64]	; (7588 <shaperTick+0x48>)
    7548:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    754c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
    7550:	b510      	push	{r4, lr}
    sample = sample * param1[v][string];
    7552:	4c0e      	ldr	r4, [pc, #56]	; (758c <shaperTick+0x4c>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    7554:	edd2 7a00 	vldr	s15, [r2]
    sample = sample * param1[v][string];
    7558:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    755c:	edd3 0a00 	vldr	s1, [r3]
    sample = sample * param1[v][string];
    7560:	ed94 7a00 	vldr	s14, [r4]
    7564:	0084      	lsls	r4, r0, #2
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    7566:	ee67 7a27 	vmul.f32	s15, s14, s15
    756a:	eee7 7a00 	vfma.f32	s15, s14, s0
    756e:	eeb0 0a67 	vmov.f32	s0, s15
    7572:	f001 fecd 	bl	9310 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7576:	4806      	ldr	r0, [pc, #24]	; (7590 <shaperTick+0x50>)
    7578:	4420      	add	r0, r4
    return temp;
}
    757a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    757e:	f001 bdf7 	b.w	9170 <__tHighpass_tick_veneer>
    7582:	bf00      	nop
    7584:	2001d5c4 	.word	0x2001d5c4
    7588:	2001d5e4 	.word	0x2001d5e4
    758c:	2001d5a4 	.word	0x2001d5a4
    7590:	2001cf80 	.word	0x2001cf80
    7594:	f3af 8000 	nop.w
    7598:	f3af 8000 	nop.w
    759c:	f3af 8000 	nop.w

000075a0 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    75a0:	4770      	bx	lr
    75a2:	bf00      	nop
    75a4:	f3af 8000 	nop.w
    75a8:	f3af 8000 	nop.w
    75ac:	f3af 8000 	nop.w
    75b0:	f3af 8000 	nop.w
    75b4:	f3af 8000 	nop.w
    75b8:	f3af 8000 	nop.w
    75bc:	f3af 8000 	nop.w

000075c0 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    75c0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    75c4:	4b08      	ldr	r3, [pc, #32]	; (75e8 <tiltFilterTick+0x28>)
{
    75c6:	b510      	push	{r4, lr}
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    75c8:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    75cc:	008c      	lsls	r4, r1, #2
    75ce:	f001 ff63 	bl	9498 <__tVZFilterLS_tick_veneer>
    sample = tVZFilterHS_tick(&shelf2[v][string], sample);
    75d2:	4806      	ldr	r0, [pc, #24]	; (75ec <tiltFilterTick+0x2c>)
    75d4:	4420      	add	r0, r4
    75d6:	f001 ffb3 	bl	9540 <__tVZFilterHS_tick_veneer>
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    75da:	4805      	ldr	r0, [pc, #20]	; (75f0 <tiltFilterTick+0x30>)
    75dc:	4420      	add	r0, r4
    return sample;
}
    75de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    75e2:	f001 bdd5 	b.w	9190 <__tVZFilterBell_tick_veneer>
    75e6:	bf00      	nop
    75e8:	2001d718 	.word	0x2001d718
    75ec:	2001d738 	.word	0x2001d738
    75f0:	2001cf40 	.word	0x2001cf40
    75f4:	f3af 8000 	nop.w
    75f8:	f3af 8000 	nop.w
    75fc:	f3af 8000 	nop.w

00007600 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
    7600:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7604:	4a0f      	ldr	r2, [pc, #60]	; (7644 <tanhTick+0x44>)
	sample = sample * gain;
    gain = gain * 0.5f;
    7606:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
    760a:	4b0f      	ldr	r3, [pc, #60]	; (7648 <tanhTick+0x48>)
    float gain = param1[v][string];
    760c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float temp = tanhf(sample + (param2[v][string]*gain));
    7610:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
    7614:	b510      	push	{r4, lr}
    float gain = param1[v][string];
    7616:	ed92 7a00 	vldr	s14, [r2]
    761a:	0084      	lsls	r4, r0, #2
    float temp = tanhf(sample + (param2[v][string]*gain));
    761c:	edd3 6a00 	vldr	s13, [r3]
    gain = gain * 0.5f;
    7620:	ee67 7a27 	vmul.f32	s15, s14, s15
    float temp = tanhf(sample + (param2[v][string]*gain));
    7624:	ee67 7aa6 	vmul.f32	s15, s15, s13
    7628:	eee7 7a00 	vfma.f32	s15, s14, s0
    762c:	eeb0 0a67 	vmov.f32	s0, s15
    7630:	f001 fdca 	bl	91c8 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7634:	4805      	ldr	r0, [pc, #20]	; (764c <tanhTick+0x4c>)
    7636:	4420      	add	r0, r4
    7638:	f001 fd9a 	bl	9170 <__tHighpass_tick_veneer>
    //temp *= param4[v][string];
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    763c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    7640:	f001 bdc2 	b.w	91c8 <__tanhf_veneer>
    7644:	2001d5a4 	.word	0x2001d5a4
    7648:	2001d5c4 	.word	0x2001d5c4
    764c:	2001cf80 	.word	0x2001cf80
    7650:	f3af 8000 	nop.w
    7654:	f3af 8000 	nop.w
    7658:	f3af 8000 	nop.w
    765c:	f3af 8000 	nop.w

00007660 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    7660:	4a1e      	ldr	r2, [pc, #120]	; (76dc <softClipTick+0x7c>)
    7662:	0043      	lsls	r3, r0, #1
    7664:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    sample = sample + param2[v][string];
    //float shape = param3[v][string];
    if (sample <= -1.0f)
    7668:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string];
    766c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    sample = sample + param2[v][string];
    7670:	edd2 6a00 	vldr	s13, [r2]
    7674:	4a1a      	ldr	r2, [pc, #104]	; (76e0 <softClipTick+0x80>)
    7676:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    767a:	edd2 7a00 	vldr	s15, [r2]
    767e:	eee6 7a80 	vfma.f32	s15, s13, s0
    if (sample <= -1.0f)
    7682:	eef4 7ac7 	vcmpe.f32	s15, s14
    7686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    768a:	d91e      	bls.n	76ca <softClipTick+0x6a>
    {
        sample = -1.0f;
    } else if (sample >= 1.0f)
    768c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7690:	eef4 7ac7 	vcmpe.f32	s15, s14
    7694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7698:	db07      	blt.n	76aa <softClipTick+0x4a>
    {
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
        //sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    769a:	4812      	ldr	r0, [pc, #72]	; (76e4 <softClipTick+0x84>)
    769c:	440b      	add	r3, r1
    769e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 76e8 <softClipTick+0x88>
    76a2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    76a6:	f001 bd63 	b.w	9170 <__tHighpass_tick_veneer>
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
    76aa:	ee27 7aa7 	vmul.f32	s14, s15, s15
    76ae:	eddf 6a0f 	vldr	s13, [pc, #60]	; 76ec <softClipTick+0x8c>
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    76b2:	480c      	ldr	r0, [pc, #48]	; (76e4 <softClipTick+0x84>)
    76b4:	440b      	add	r3, r1
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
    76b6:	ee27 7ac7 	vnmul.f32	s14, s15, s14
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    76ba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
    76be:	eee7 7a26 	vfma.f32	s15, s14, s13
    76c2:	eeb0 0a67 	vmov.f32	s0, s15
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    76c6:	f001 bd53 	b.w	9170 <__tHighpass_tick_veneer>
    76ca:	4806      	ldr	r0, [pc, #24]	; (76e4 <softClipTick+0x84>)
    76cc:	440b      	add	r3, r1
    76ce:	ed9f 0a08 	vldr	s0, [pc, #32]	; 76f0 <softClipTick+0x90>
    76d2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    76d6:	f001 bd4b 	b.w	9170 <__tHighpass_tick_veneer>
    76da:	bf00      	nop
    76dc:	2001d5a4 	.word	0x2001d5a4
    76e0:	2001d5c4 	.word	0x2001d5c4
    76e4:	2001cf80 	.word	0x2001cf80
    76e8:	3f2aaaab 	.word	0x3f2aaaab
    76ec:	3eaaaaaa 	.word	0x3eaaaaaa
    76f0:	bf2aaaab 	.word	0xbf2aaaab
    76f4:	f3af 8000 	nop.w
    76f8:	f3af 8000 	nop.w
    76fc:	f3af 8000 	nop.w

00007700 <hardClipTick>:
    return sample;
}


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{
    7700:	b570      	push	{r4, r5, r6, lr}

    sample = sample * param1[v][string];
    7702:	4b21      	ldr	r3, [pc, #132]	; (7788 <hardClipTick+0x88>)
    7704:	0044      	lsls	r4, r0, #1
    7706:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    sample = sample + param2[v][string];
    if (sample <= -1.0f)
    770a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string];
    770e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    sample = sample + param2[v][string];
    7712:	edd3 6a00 	vldr	s13, [r3]
    7716:	4b1d      	ldr	r3, [pc, #116]	; (778c <hardClipTick+0x8c>)
    7718:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    771c:	edd3 7a00 	vldr	s15, [r3]
    7720:	eee6 7a80 	vfma.f32	s15, s13, s0
    if (sample <= -1.0f)
    7724:	eef4 7ac7 	vcmpe.f32	s15, s14
    7728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    772c:	d928      	bls.n	7780 <hardClipTick+0x80>
    {
        sample = -1.0f;
    } else if (sample >= 1.0f)
    772e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    {
        sample = 1.0f;
    7732:	eef4 7a47 	vcmp.f32	s15, s14
    7736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    773a:	fe67 7a27 	vselge.f32	s15, s14, s15
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    773e:	4421      	add	r1, r4
    7740:	4e13      	ldr	r6, [pc, #76]	; (7790 <hardClipTick+0x90>)
    7742:	4d14      	ldr	r5, [pc, #80]	; (7794 <hardClipTick+0x94>)
    7744:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    7748:	008c      	lsls	r4, r1, #2
    774a:	ed96 0a00 	vldr	s0, [r6]
    774e:	4425      	add	r5, r4
    7750:	ee27 0a80 	vmul.f32	s0, s15, s0
    7754:	f001 fe20 	bl	9398 <__arm_sin_f32_veneer>
    7758:	ed95 7a00 	vldr	s14, [r5]
    775c:	edd6 7a00 	vldr	s15, [r6]
    7760:	ee20 0a07 	vmul.f32	s0, s0, s14
    7764:	ee20 0a27 	vmul.f32	s0, s0, s15
    7768:	f001 fe16 	bl	9398 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    776c:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7770:	4809      	ldr	r0, [pc, #36]	; (7798 <hardClipTick+0x98>)
    7772:	ee20 0a27 	vmul.f32	s0, s0, s15
    7776:	4420      	add	r0, r4
    return sample;
}
    7778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    777c:	f001 bcf8 	b.w	9170 <__tHighpass_tick_veneer>
        sample = -1.0f;
    7780:	eef0 7a47 	vmov.f32	s15, s14
    7784:	e7db      	b.n	773e <hardClipTick+0x3e>
    7786:	bf00      	nop
    7788:	2001d5a4 	.word	0x2001d5a4
    778c:	2001d5c4 	.word	0x2001d5c4
    7790:	2001d5e4 	.word	0x2001d5e4
    7794:	2001d6cc 	.word	0x2001d6cc
    7798:	2001cf80 	.word	0x2001cf80
    779c:	f3af 8000 	nop.w

000077a0 <polynomialShaperTick>:


float __ATTR_ITCMRAM polynomialShaperTick(float sample, int v, int string)
{
    77a0:	b570      	push	{r4, r5, r6, lr}

    sample = sample * param1[v][string];
    77a2:	4b21      	ldr	r3, [pc, #132]	; (7828 <polynomialShaperTick+0x88>)
    77a4:	0044      	lsls	r4, r0, #1
    77a6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    sample = sample + param2[v][string];

    if (sample <= -1.0f)
    77aa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string];
    77ae:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    sample = sample + param2[v][string];
    77b2:	edd3 6a00 	vldr	s13, [r3]
    77b6:	4b1d      	ldr	r3, [pc, #116]	; (782c <polynomialShaperTick+0x8c>)
    77b8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    77bc:	edd3 7a00 	vldr	s15, [r3]
    77c0:	eee6 7a80 	vfma.f32	s15, s13, s0
    if (sample <= -1.0f)
    77c4:	eef4 7ac7 	vcmpe.f32	s15, s14
    77c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    77cc:	d928      	bls.n	7820 <polynomialShaperTick+0x80>
    {
        sample = -1.0f;
    } else if (sample >= 1.0f)
    77ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    {
        sample = 1.0f;
    77d2:	eef4 7a47 	vcmp.f32	s15, s14
    77d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    77da:	fe67 7a27 	vselge.f32	s15, s14, s15
    }

	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    77de:	4421      	add	r1, r4
    77e0:	4e13      	ldr	r6, [pc, #76]	; (7830 <polynomialShaperTick+0x90>)
    77e2:	4d14      	ldr	r5, [pc, #80]	; (7834 <polynomialShaperTick+0x94>)
    77e4:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    77e8:	008c      	lsls	r4, r1, #2
    77ea:	ed96 0a00 	vldr	s0, [r6]
    77ee:	4425      	add	r5, r4
    77f0:	ee27 0a80 	vmul.f32	s0, s15, s0
    77f4:	f001 feb8 	bl	9568 <__fastSine_veneer>
    77f8:	ed95 7a00 	vldr	s14, [r5]
    77fc:	edd6 7a00 	vldr	s15, [r6]
    7800:	ee20 0a07 	vmul.f32	s0, s0, s14
    7804:	ee20 0a27 	vmul.f32	s0, s0, s15
    7808:	f001 feae 	bl	9568 <__fastSine_veneer>
	sample = sample * polyDivider[v][string];
    780c:	edd5 7a00 	vldr	s15, [r5]


    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7810:	4809      	ldr	r0, [pc, #36]	; (7838 <polynomialShaperTick+0x98>)
    7812:	ee20 0a27 	vmul.f32	s0, s0, s15
    7816:	4420      	add	r0, r4
    return sample;
}
    7818:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    781c:	f001 bca8 	b.w	9170 <__tHighpass_tick_veneer>
        sample = -1.0f;
    7820:	eef0 7a47 	vmov.f32	s15, s14
    7824:	e7db      	b.n	77de <polynomialShaperTick+0x3e>
    7826:	bf00      	nop
    7828:	2001d5a4 	.word	0x2001d5a4
    782c:	2001d5c4 	.word	0x2001d5c4
    7830:	2001d5e4 	.word	0x2001d5e4
    7834:	2001d65c 	.word	0x2001d65c
    7838:	2001cf80 	.word	0x2001cf80
    783c:	f3af 8000 	nop.w

00007840 <satTick>:
float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
    7840:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    7844:	4b17      	ldr	r3, [pc, #92]	; (78a4 <satTick+0x64>)
    sample = sample * param1[v][string];
    7846:	4a18      	ldr	r2, [pc, #96]	; (78a8 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    7848:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    784c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7850:	4816      	ldr	r0, [pc, #88]	; (78ac <satTick+0x6c>)
    sample = sample * param1[v][string];
    7852:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7856:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
    785a:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    785c:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
    7860:	008c      	lsls	r4, r1, #2
    7862:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    7866:	eeb0 6a47 	vmov.f32	s12, s14
    786a:	ee27 7a87 	vmul.f32	s14, s15, s14
    786e:	eea7 6a80 	vfma.f32	s12, s15, s0
    7872:	eea7 7a80 	vfma.f32	s14, s15, s0
    7876:	eeb0 6ac6 	vabs.f32	s12, s12
    787a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    787e:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7882:	ee36 6b05 	vadd.f64	d6, d6, d5
    7886:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    788a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    788e:	f001 fc6f 	bl	9170 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    7892:	4807      	ldr	r0, [pc, #28]	; (78b0 <satTick+0x70>)
    7894:	4420      	add	r0, r4
    7896:	f001 fc6b 	bl	9170 <__tHighpass_tick_veneer>
    temp = LEAF_tanh(temp);
    return temp;
}
    789a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
    789e:	f001 bd63 	b.w	9368 <__LEAF_tanh_veneer>
    78a2:	bf00      	nop
    78a4:	2001d5c4 	.word	0x2001d5c4
    78a8:	2001d5a4 	.word	0x2001d5a4
    78ac:	2001cf80 	.word	0x2001cf80
    78b0:	2001cfa0 	.word	0x2001cfa0
    78b4:	f3af 8000 	nop.w
    78b8:	f3af 8000 	nop.w
    78bc:	f3af 8000 	nop.w

000078c0 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    78c0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    78c4:	4b05      	ldr	r3, [pc, #20]	; (78dc <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
    78c6:	4806      	ldr	r0, [pc, #24]	; (78e0 <bcTick+0x20>)
    sample = sample * param1[v][string];
    78c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    78cc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    78d0:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    78d4:	ee20 0a27 	vmul.f32	s0, s0, s15
    78d8:	f001 bda2 	b.w	9420 <__tCrusher_tick_veneer>
    78dc:	2001d5a4 	.word	0x2001d5a4
    78e0:	2001cf20 	.word	0x2001cf20
    78e4:	f3af 8000 	nop.w
    78e8:	f3af 8000 	nop.w
    78ec:	f3af 8000 	nop.w
    78f0:	f3af 8000 	nop.w
    78f4:	f3af 8000 	nop.w
    78f8:	f3af 8000 	nop.w
    78fc:	f3af 8000 	nop.w

00007900 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
    7900:	4b03      	ldr	r3, [pc, #12]	; (7910 <compressorTick+0x10>)
    7902:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7906:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    790a:	f001 bcfd 	b.w	9308 <__tCompressor_tick_veneer>
    790e:	bf00      	nop
    7910:	2001cf60 	.word	0x2001cf60
    7914:	f3af 8000 	nop.w
    7918:	f3af 8000 	nop.w
    791c:	f3af 8000 	nop.w

00007920 <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
    7920:	4b03      	ldr	r3, [pc, #12]	; (7930 <FXlowpassTick+0x10>)
    7922:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7926:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    792a:	f001 be15 	b.w	9558 <__tSVF_tick_veneer>
    792e:	bf00      	nop
    7930:	2001ce98 	.word	0x2001ce98
    7934:	f3af 8000 	nop.w
    7938:	f3af 8000 	nop.w
    793c:	f3af 8000 	nop.w

00007940 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
    7940:	4b03      	ldr	r3, [pc, #12]	; (7950 <FXhighpassTick+0x10>)
    7942:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7946:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    794a:	f001 be05 	b.w	9558 <__tSVF_tick_veneer>
    794e:	bf00      	nop
    7950:	2001ce78 	.word	0x2001ce78
    7954:	f3af 8000 	nop.w
    7958:	f3af 8000 	nop.w
    795c:	f3af 8000 	nop.w

00007960 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
    7960:	4b03      	ldr	r3, [pc, #12]	; (7970 <FXbandpassTick+0x10>)
    7962:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7966:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    796a:	f001 bdf5 	b.w	9558 <__tSVF_tick_veneer>
    796e:	bf00      	nop
    7970:	2001ce38 	.word	0x2001ce38
    7974:	f3af 8000 	nop.w
    7978:	f3af 8000 	nop.w
    797c:	f3af 8000 	nop.w

00007980 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    7980:	4b03      	ldr	r3, [pc, #12]	; (7990 <FXdiodeLowpassTick+0x10>)
    7982:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7986:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    798a:	f001 bbcd 	b.w	9128 <__tDiodeFilter_tick_veneer>
    798e:	bf00      	nop
    7990:	2001ce58 	.word	0x2001ce58
    7994:	f3af 8000 	nop.w
    7998:	f3af 8000 	nop.w
    799c:	f3af 8000 	nop.w

000079a0 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilterBell_tick(&FXVZfilterPeak[v][string], sample);
    79a0:	4b03      	ldr	r3, [pc, #12]	; (79b0 <FXVZpeakTick+0x10>)
    79a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    79a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    79aa:	f001 bbf1 	b.w	9190 <__tVZFilterBell_tick_veneer>
    79ae:	bf00      	nop
    79b0:	2001ce18 	.word	0x2001ce18
    79b4:	f3af 8000 	nop.w
    79b8:	f3af 8000 	nop.w
    79bc:	f3af 8000 	nop.w

000079c0 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilterLS_tick(&FXVZfilterLS[v][string], sample);
    79c0:	4b03      	ldr	r3, [pc, #12]	; (79d0 <FXVZlowshelfTick+0x10>)
    79c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    79c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    79ca:	f001 bd65 	b.w	9498 <__tVZFilterLS_tick_veneer>
    79ce:	bf00      	nop
    79d0:	2001cdf8 	.word	0x2001cdf8
    79d4:	f3af 8000 	nop.w
    79d8:	f3af 8000 	nop.w
    79dc:	f3af 8000 	nop.w

000079e0 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilterHS_tick(&FXVZfilterHS[v][string], sample);
    79e0:	4b03      	ldr	r3, [pc, #12]	; (79f0 <FXVZhighshelfTick+0x10>)
    79e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    79e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    79ea:	f001 bda9 	b.w	9540 <__tVZFilterHS_tick_veneer>
    79ee:	bf00      	nop
    79f0:	2001cdd8 	.word	0x2001cdd8
    79f4:	f3af 8000 	nop.w
    79f8:	f3af 8000 	nop.w
    79fc:	f3af 8000 	nop.w

00007a00 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    7a00:	4b03      	ldr	r3, [pc, #12]	; (7a10 <FXVZbandrejectTick+0x10>)
    7a02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7a06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7a0a:	f001 bd41 	b.w	9490 <__tVZFilter_tickEfficient_veneer>
    7a0e:	bf00      	nop
    7a10:	2001cdb8 	.word	0x2001cdb8
    7a14:	f3af 8000 	nop.w
    7a18:	f3af 8000 	nop.w
    7a1c:	f3af 8000 	nop.w

00007a20 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    7a20:	4b03      	ldr	r3, [pc, #12]	; (7a30 <FXLadderLowpassTick+0x10>)
    7a22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7a26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7a2a:	f001 bbb5 	b.w	9198 <__tLadderFilter_tick_veneer>
    7a2e:	bf00      	nop
    7a30:	2001cd98 	.word	0x2001cd98
    7a34:	f3af 8000 	nop.w
    7a38:	f3af 8000 	nop.w
    7a3c:	f3af 8000 	nop.w

00007a40 <FXLowpassParam1>:
}
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7a40:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7a60 <FXLowpassParam1+0x20>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    7a44:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7a48:	eddf 7a06 	vldr	s15, [pc, #24]	; 7a64 <FXLowpassParam1+0x24>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    7a4c:	4b06      	ldr	r3, [pc, #24]	; (7a68 <FXLowpassParam1+0x28>)
    7a4e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7a52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7a56:	eeb0 0a67 	vmov.f32	s0, s15
    7a5a:	f001 bc2d 	b.w	92b8 <__tSVF_setFreqFast_veneer>
    7a5e:	bf00      	nop
    7a60:	429a0000 	.word	0x429a0000
    7a64:	42280000 	.word	0x42280000
    7a68:	2001ce98 	.word	0x2001ce98
    7a6c:	f3af 8000 	nop.w
    7a70:	f3af 8000 	nop.w
    7a74:	f3af 8000 	nop.w
    7a78:	f3af 8000 	nop.w
    7a7c:	f3af 8000 	nop.w

00007a80 <FXHighpassParam1>:
}
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7a80:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7aa0 <FXHighpassParam1+0x20>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    7a84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7a88:	eddf 7a06 	vldr	s15, [pc, #24]	; 7aa4 <FXHighpassParam1+0x24>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    7a8c:	4b06      	ldr	r3, [pc, #24]	; (7aa8 <FXHighpassParam1+0x28>)
    7a8e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7a92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7a96:	eeb0 0a67 	vmov.f32	s0, s15
    7a9a:	f001 bc0d 	b.w	92b8 <__tSVF_setFreqFast_veneer>
    7a9e:	bf00      	nop
    7aa0:	429a0000 	.word	0x429a0000
    7aa4:	42280000 	.word	0x42280000
    7aa8:	2001ce78 	.word	0x2001ce78
    7aac:	f3af 8000 	nop.w
    7ab0:	f3af 8000 	nop.w
    7ab4:	f3af 8000 	nop.w
    7ab8:	f3af 8000 	nop.w
    7abc:	f3af 8000 	nop.w

00007ac0 <FXBandpassParam1>:
}

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7ac0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7ae0 <FXBandpassParam1+0x20>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    7ac4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7ac8:	eddf 7a06 	vldr	s15, [pc, #24]	; 7ae4 <FXBandpassParam1+0x24>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    7acc:	4b06      	ldr	r3, [pc, #24]	; (7ae8 <FXBandpassParam1+0x28>)
    7ace:	eee0 7a07 	vfma.f32	s15, s0, s14
    7ad2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7ad6:	eeb0 0a67 	vmov.f32	s0, s15
    7ada:	f001 bbed 	b.w	92b8 <__tSVF_setFreqFast_veneer>
    7ade:	bf00      	nop
    7ae0:	429a0000 	.word	0x429a0000
    7ae4:	42280000 	.word	0x42280000
    7ae8:	2001ce38 	.word	0x2001ce38
    7aec:	f3af 8000 	nop.w
    7af0:	f3af 8000 	nop.w
    7af4:	f3af 8000 	nop.w
    7af8:	f3af 8000 	nop.w
    7afc:	f3af 8000 	nop.w

00007b00 <FXDiodeParam1>:
}

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7b00:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7b20 <FXDiodeParam1+0x20>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    7b04:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7b08:	eddf 7a06 	vldr	s15, [pc, #24]	; 7b24 <FXDiodeParam1+0x24>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    7b0c:	4b06      	ldr	r3, [pc, #24]	; (7b28 <FXDiodeParam1+0x28>)
    7b0e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7b12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7b16:	eeb0 0a67 	vmov.f32	s0, s15
    7b1a:	f001 bb61 	b.w	91e0 <__tDiodeFilter_setFreqFast_veneer>
    7b1e:	bf00      	nop
    7b20:	429a0000 	.word	0x429a0000
    7b24:	42280000 	.word	0x42280000
    7b28:	2001ce58 	.word	0x2001ce58
    7b2c:	f3af 8000 	nop.w
    7b30:	f3af 8000 	nop.w
    7b34:	f3af 8000 	nop.w
    7b38:	f3af 8000 	nop.w
    7b3c:	f3af 8000 	nop.w

00007b40 <FXPeakParam1>:
}
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7b40:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7b60 <FXPeakParam1+0x20>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    7b44:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7b48:	eddf 7a06 	vldr	s15, [pc, #24]	; 7b64 <FXPeakParam1+0x24>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    7b4c:	4b06      	ldr	r3, [pc, #24]	; (7b68 <FXPeakParam1+0x28>)
    7b4e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7b52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7b56:	eeb0 0a67 	vmov.f32	s0, s15
    7b5a:	f001 bcc5 	b.w	94e8 <__tVZFilterBell_setFreq_veneer>
    7b5e:	bf00      	nop
    7b60:	429a0000 	.word	0x429a0000
    7b64:	42280000 	.word	0x42280000
    7b68:	2001ce18 	.word	0x2001ce18
    7b6c:	f3af 8000 	nop.w
    7b70:	f3af 8000 	nop.w
    7b74:	f3af 8000 	nop.w
    7b78:	f3af 8000 	nop.w
    7b7c:	f3af 8000 	nop.w

00007b80 <FXLowShelfParam1>:
}
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7b80:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7ba0 <FXLowShelfParam1+0x20>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    7b84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7b88:	eddf 7a06 	vldr	s15, [pc, #24]	; 7ba4 <FXLowShelfParam1+0x24>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    7b8c:	4b06      	ldr	r3, [pc, #24]	; (7ba8 <FXLowShelfParam1+0x28>)
    7b8e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7b92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7b96:	eeb0 0a67 	vmov.f32	s0, s15
    7b9a:	f001 bbc1 	b.w	9320 <__tVZFilterLS_setFreqFast_veneer>
    7b9e:	bf00      	nop
    7ba0:	429a0000 	.word	0x429a0000
    7ba4:	42280000 	.word	0x42280000
    7ba8:	2001cdf8 	.word	0x2001cdf8
    7bac:	f3af 8000 	nop.w
    7bb0:	f3af 8000 	nop.w
    7bb4:	f3af 8000 	nop.w
    7bb8:	f3af 8000 	nop.w
    7bbc:	f3af 8000 	nop.w

00007bc0 <FXHighShelfParam1>:
}
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7bc0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7be0 <FXHighShelfParam1+0x20>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    7bc4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7bc8:	eddf 7a06 	vldr	s15, [pc, #24]	; 7be4 <FXHighShelfParam1+0x24>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    7bcc:	4b06      	ldr	r3, [pc, #24]	; (7be8 <FXHighShelfParam1+0x28>)
    7bce:	eee0 7a07 	vfma.f32	s15, s0, s14
    7bd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7bd6:	eeb0 0a67 	vmov.f32	s0, s15
    7bda:	f001 ba65 	b.w	90a8 <__tVZFilterHS_setFreqFast_veneer>
    7bde:	bf00      	nop
    7be0:	429a0000 	.word	0x429a0000
    7be4:	42280000 	.word	0x42280000
    7be8:	2001cdd8 	.word	0x2001cdd8
    7bec:	f3af 8000 	nop.w
    7bf0:	f3af 8000 	nop.w
    7bf4:	f3af 8000 	nop.w
    7bf8:	f3af 8000 	nop.w
    7bfc:	f3af 8000 	nop.w

00007c00 <FXNotchParam1>:
}
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7c00:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7c20 <FXNotchParam1+0x20>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    7c04:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7c08:	eddf 7a06 	vldr	s15, [pc, #24]	; 7c24 <FXNotchParam1+0x24>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    7c0c:	4b06      	ldr	r3, [pc, #24]	; (7c28 <FXNotchParam1+0x28>)
    7c0e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7c12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7c16:	eeb0 0a67 	vmov.f32	s0, s15
    7c1a:	f001 bafd 	b.w	9218 <__tVZFilter_setFreqFast_veneer>
    7c1e:	bf00      	nop
    7c20:	429a0000 	.word	0x429a0000
    7c24:	42280000 	.word	0x42280000
    7c28:	2001cdb8 	.word	0x2001cdb8
    7c2c:	f3af 8000 	nop.w
    7c30:	f3af 8000 	nop.w
    7c34:	f3af 8000 	nop.w
    7c38:	f3af 8000 	nop.w
    7c3c:	f3af 8000 	nop.w

00007c40 <FXLadderParam1>:
}
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7c40:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7c60 <FXLadderParam1+0x20>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    7c44:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    7c48:	eddf 7a06 	vldr	s15, [pc, #24]	; 7c64 <FXLadderParam1+0x24>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    7c4c:	4b06      	ldr	r3, [pc, #24]	; (7c68 <FXLadderParam1+0x28>)
    7c4e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7c52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7c56:	eeb0 0a67 	vmov.f32	s0, s15
    7c5a:	f001 bba9 	b.w	93b0 <__tLadderFilter_setFreqFast_veneer>
    7c5e:	bf00      	nop
    7c60:	429a0000 	.word	0x429a0000
    7c64:	42280000 	.word	0x42280000
    7c68:	2001cd98 	.word	0x2001cd98
    7c6c:	f3af 8000 	nop.w
    7c70:	f3af 8000 	nop.w
    7c74:	f3af 8000 	nop.w
    7c78:	f3af 8000 	nop.w
    7c7c:	f3af 8000 	nop.w

00007c80 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7c80:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    7c84:	ed9f 7a09 	vldr	s14, [pc, #36]	; 7cac <FXPeakParam2+0x2c>
{
    7c88:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7c8a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    7c8e:	4605      	mov	r5, r0
    7c90:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7c92:	eeb0 0a67 	vmov.f32	s0, s15
    7c96:	f001 fa0b 	bl	90b0 <__dbToATableLookup_veneer>
    7c9a:	4b05      	ldr	r3, [pc, #20]	; (7cb0 <FXPeakParam2+0x30>)
    7c9c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7ca0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    7ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7ca8:	f001 b9d2 	b.w	9050 <__tVZFilterBell_setGain_veneer>
    7cac:	42480000 	.word	0x42480000
    7cb0:	2001ce18 	.word	0x2001ce18
    7cb4:	f3af 8000 	nop.w
    7cb8:	f3af 8000 	nop.w
    7cbc:	f3af 8000 	nop.w

00007cc0 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7cc0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    7cc4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 7cec <FXLowShelfParam2+0x2c>
{
    7cc8:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7cca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    7cce:	4605      	mov	r5, r0
    7cd0:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7cd2:	eeb0 0a67 	vmov.f32	s0, s15
    7cd6:	f001 f9eb 	bl	90b0 <__dbToATableLookup_veneer>
    7cda:	4b05      	ldr	r3, [pc, #20]	; (7cf0 <FXLowShelfParam2+0x30>)
    7cdc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7ce0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    7ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7ce8:	f001 baae 	b.w	9248 <__tVZFilterLS_setGain_veneer>
    7cec:	42480000 	.word	0x42480000
    7cf0:	2001cdf8 	.word	0x2001cdf8
    7cf4:	f3af 8000 	nop.w
    7cf8:	f3af 8000 	nop.w
    7cfc:	f3af 8000 	nop.w

00007d00 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7d00:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    7d04:	ed9f 7a09 	vldr	s14, [pc, #36]	; 7d2c <FXHighShelfParam2+0x2c>
{
    7d08:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7d0a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    7d0e:	4605      	mov	r5, r0
    7d10:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7d12:	eeb0 0a67 	vmov.f32	s0, s15
    7d16:	f001 f9cb 	bl	90b0 <__dbToATableLookup_veneer>
    7d1a:	4b05      	ldr	r3, [pc, #20]	; (7d30 <FXHighShelfParam2+0x30>)
    7d1c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7d20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    7d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7d28:	f001 bb92 	b.w	9450 <__tVZFilterHS_setGain_veneer>
    7d2c:	42480000 	.word	0x42480000
    7d30:	2001cdd8 	.word	0x2001cdd8
    7d34:	f3af 8000 	nop.w
    7d38:	f3af 8000 	nop.w
    7d3c:	f3af 8000 	nop.w

00007d40 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7d40:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    7d44:	ed9f 7a09 	vldr	s14, [pc, #36]	; 7d6c <FXNotchParam2+0x2c>
{
    7d48:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7d4a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    7d4e:	4605      	mov	r5, r0
    7d50:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7d52:	eeb0 0a67 	vmov.f32	s0, s15
    7d56:	f001 f9ab 	bl	90b0 <__dbToATableLookup_veneer>
    7d5a:	4b05      	ldr	r3, [pc, #20]	; (7d70 <FXNotchParam2+0x30>)
    7d5c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7d60:	eb03 0080 	add.w	r0, r3, r0, lsl #2

}
    7d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7d68:	f001 ba1a 	b.w	91a0 <__tVZFilter_setGain_veneer>
    7d6c:	42480000 	.word	0x42480000
    7d70:	2001cdb8 	.word	0x2001cdb8
    7d74:	f3af 8000 	nop.w
    7d78:	f3af 8000 	nop.w
    7d7c:	f3af 8000 	nop.w

00007d80 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
    7d80:	4b03      	ldr	r3, [pc, #12]	; (7d90 <FXLowpassParam3+0x10>)
    7d82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7d86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7d8a:	f001 bb79 	b.w	9480 <__tSVF_setQ_veneer>
    7d8e:	bf00      	nop
    7d90:	2001ce98 	.word	0x2001ce98
    7d94:	f3af 8000 	nop.w
    7d98:	f3af 8000 	nop.w
    7d9c:	f3af 8000 	nop.w

00007da0 <FXHighpassParam3>:
}

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
    7da0:	4b03      	ldr	r3, [pc, #12]	; (7db0 <FXHighpassParam3+0x10>)
    7da2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7da6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7daa:	f001 bb69 	b.w	9480 <__tSVF_setQ_veneer>
    7dae:	bf00      	nop
    7db0:	2001ce78 	.word	0x2001ce78
    7db4:	f3af 8000 	nop.w
    7db8:	f3af 8000 	nop.w
    7dbc:	f3af 8000 	nop.w

00007dc0 <FXBandpassParam3>:
}

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
    7dc0:	4b03      	ldr	r3, [pc, #12]	; (7dd0 <FXBandpassParam3+0x10>)
    7dc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7dc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7dca:	f001 bb59 	b.w	9480 <__tSVF_setQ_veneer>
    7dce:	bf00      	nop
    7dd0:	2001ce38 	.word	0x2001ce38
    7dd4:	f3af 8000 	nop.w
    7dd8:	f3af 8000 	nop.w
    7ddc:	f3af 8000 	nop.w

00007de0 <FXDiodeParam3>:
}

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
    7de0:	4b03      	ldr	r3, [pc, #12]	; (7df0 <FXDiodeParam3+0x10>)
    7de2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7de6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7dea:	f001 bb25 	b.w	9438 <__tDiodeFilter_setQ_veneer>
    7dee:	bf00      	nop
    7df0:	2001ce58 	.word	0x2001ce58
    7df4:	f3af 8000 	nop.w
    7df8:	f3af 8000 	nop.w
    7dfc:	f3af 8000 	nop.w

00007e00 <FXPeakParam3>:
}


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
	tVZFilterBell_setBandwidth(&FXVZfilterPeak[v][string], value);
    7e00:	4b03      	ldr	r3, [pc, #12]	; (7e10 <FXPeakParam3+0x10>)
    7e02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e0a:	f001 b991 	b.w	9130 <__tVZFilterBell_setBandwidth_veneer>
    7e0e:	bf00      	nop
    7e10:	2001ce18 	.word	0x2001ce18
    7e14:	f3af 8000 	nop.w
    7e18:	f3af 8000 	nop.w
    7e1c:	f3af 8000 	nop.w

00007e20 <FXLowShelfParam3>:
}


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
	tVZFilterLS_setResonance(&FXVZfilterLS[v][string], value);
    7e20:	4b03      	ldr	r3, [pc, #12]	; (7e30 <FXLowShelfParam3+0x10>)
    7e22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e2a:	f001 bab1 	b.w	9390 <__tVZFilterLS_setResonance_veneer>
    7e2e:	bf00      	nop
    7e30:	2001cdf8 	.word	0x2001cdf8
    7e34:	f3af 8000 	nop.w
    7e38:	f3af 8000 	nop.w
    7e3c:	f3af 8000 	nop.w

00007e40 <FXHighShelfParam3>:
}


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
	tVZFilterHS_setResonance(&FXVZfilterHS[v][string], value);
    7e40:	4b03      	ldr	r3, [pc, #12]	; (7e50 <FXHighShelfParam3+0x10>)
    7e42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e4a:	f001 bbb1 	b.w	95b0 <__tVZFilterHS_setResonance_veneer>
    7e4e:	bf00      	nop
    7e50:	2001cdd8 	.word	0x2001cdd8
    7e54:	f3af 8000 	nop.w
    7e58:	f3af 8000 	nop.w
    7e5c:	f3af 8000 	nop.w

00007e60 <FXNotchParam3>:
}


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
    7e60:	4b03      	ldr	r3, [pc, #12]	; (7e70 <FXNotchParam3+0x10>)
    7e62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e6a:	f001 b9f9 	b.w	9260 <__tVZFilter_setResonance_veneer>
    7e6e:	bf00      	nop
    7e70:	2001cdb8 	.word	0x2001cdb8
    7e74:	f3af 8000 	nop.w
    7e78:	f3af 8000 	nop.w
    7e7c:	f3af 8000 	nop.w

00007e80 <FXLadderParam3>:
}


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
    7e80:	4b03      	ldr	r3, [pc, #12]	; (7e90 <FXLadderParam3+0x10>)
    7e82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7e86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7e8a:	f001 bb09 	b.w	94a0 <__tLadderFilter_setQ_veneer>
    7e8e:	bf00      	nop
    7e90:	2001cd98 	.word	0x2001cd98
    7e94:	f3af 8000 	nop.w
    7e98:	f3af 8000 	nop.w
    7e9c:	f3af 8000 	nop.w

00007ea0 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    7ea0:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    7ea2:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
    7ea6:	008c      	lsls	r4, r1, #2
{
    7ea8:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    7eac:	eeba 8a0e 	vmov.f32	s16, #174	; 0xc1700000 -15.0
    7eb0:	eea0 8a27 	vfma.f32	s16, s0, s15
    7eb4:	eeb1 0a48 	vneg.f32	s0, s16
    7eb8:	f001 f8fa 	bl	90b0 <__dbToATableLookup_veneer>
    7ebc:	4807      	ldr	r0, [pc, #28]	; (7edc <noiseSetTilt+0x3c>)
    7ebe:	4420      	add	r0, r4
    7ec0:	f001 f9c2 	bl	9248 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    7ec4:	eeb0 0a48 	vmov.f32	s0, s16
    7ec8:	f001 f8f2 	bl	90b0 <__dbToATableLookup_veneer>
    7ecc:	4804      	ldr	r0, [pc, #16]	; (7ee0 <noiseSetTilt+0x40>)
}
    7ece:	ecbd 8b02 	vpop	{d8}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    7ed2:	4420      	add	r0, r4
}
    7ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    7ed8:	f001 baba 	b.w	9450 <__tVZFilterHS_setGain_veneer>
    7edc:	2001d528 	.word	0x2001d528
    7ee0:	2001d530 	.word	0x2001d530
    7ee4:	f3af 8000 	nop.w
    7ee8:	f3af 8000 	nop.w
    7eec:	f3af 8000 	nop.w
    7ef0:	f3af 8000 	nop.w
    7ef4:	f3af 8000 	nop.w
    7ef8:	f3af 8000 	nop.w
    7efc:	f3af 8000 	nop.w

00007f00 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    7f00:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    7f04:	ed9f 7a08 	vldr	s14, [pc, #32]	; 7f28 <noiseSetGain+0x28>
{
    7f08:	b510      	push	{r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    7f0a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    7f0e:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    7f10:	eeb0 0a67 	vmov.f32	s0, s15
    7f14:	f001 f8cc 	bl	90b0 <__dbToATableLookup_veneer>
    7f18:	4804      	ldr	r0, [pc, #16]	; (7f2c <noiseSetGain+0x2c>)
    7f1a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    7f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    7f22:	f001 b895 	b.w	9050 <__tVZFilterBell_setGain_veneer>
    7f26:	bf00      	nop
    7f28:	42080000 	.word	0x42080000
    7f2c:	2001d50c 	.word	0x2001d50c
    7f30:	f3af 8000 	nop.w
    7f34:	f3af 8000 	nop.w
    7f38:	f3af 8000 	nop.w
    7f3c:	f3af 8000 	nop.w

00007f40 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    7f40:	ed9f 7a09 	vldr	s14, [pc, #36]	; 7f68 <noiseSetFreq+0x28>
    7f44:	eddf 7a09 	vldr	s15, [pc, #36]	; 7f6c <noiseSetFreq+0x2c>
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    7f48:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    7f4c:	b510      	push	{r4, lr}
    7f4e:	460c      	mov	r4, r1
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    7f50:	eeb0 0a67 	vmov.f32	s0, s15
    7f54:	f001 fa5c 	bl	9410 <__faster_mtof_veneer>
    7f58:	4805      	ldr	r0, [pc, #20]	; (7f70 <noiseSetFreq+0x30>)
    7f5a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	//value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);

}
    7f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    7f62:	f001 bac1 	b.w	94e8 <__tVZFilterBell_setFreq_veneer>
    7f66:	bf00      	nop
    7f68:	429a0000 	.word	0x429a0000
    7f6c:	42280000 	.word	0x42280000
    7f70:	2001d50c 	.word	0x2001d50c
    7f74:	f3af 8000 	nop.w
    7f78:	f3af 8000 	nop.w
    7f7c:	f3af 8000 	nop.w

00007f80 <noise_tick>:


void __ATTR_ITCMRAM noise_tick(int string)
{
    7f80:	b538      	push	{r3, r4, r5, lr}
	float enabled = params[Noise].realVal[string];
    7f82:	4b2f      	ldr	r3, [pc, #188]	; (8040 <noise_tick+0xc0>)
{
    7f84:	4604      	mov	r4, r0
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
    7f86:	4a2f      	ldr	r2, [pc, #188]	; (8044 <noise_tick+0xc4>)
	float amp = params[NoiseAmp].realVal[string];
    7f88:	eb03 0180 	add.w	r1, r3, r0, lsl #2
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    7f8c:	482e      	ldr	r0, [pc, #184]	; (8048 <noise_tick+0xc8>)
    7f8e:	00a5      	lsls	r5, r4, #2
    7f90:	eb00 0084 	add.w	r0, r0, r4, lsl #2
{
    7f94:	ed2d 8b04 	vpush	{d8-d9}
	float amp = params[NoiseAmp].realVal[string];
    7f98:	ed91 8a9c 	vldr	s16, [r1, #624]	; 0x270
	float enabled = params[Noise].realVal[string];
    7f9c:	edd1 8a80 	vldr	s17, [r1, #512]	; 0x200
	float filterSend = params[NoiseFilterSend].realVal[string];
    7fa0:	ed91 9aa3 	vldr	s18, [r1, #652]	; 0x28c
	amp = amp < 0.f ? 0.f : amp;
    7fa4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
	float sample = random_values[randomValPointer++];
    7fa8:	4928      	ldr	r1, [pc, #160]	; (804c <noise_tick+0xcc>)
    7faa:	780b      	ldrb	r3, [r1, #0]
	amp = amp < 0.f ? 0.f : amp;
    7fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float sample = random_values[randomValPointer++];
    7fb0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7fb4:	f103 0301 	add.w	r3, r3, #1
	amp = amp < 0.f ? 0.f : amp;
    7fb8:	bf48      	it	mi
    7fba:	ed9f 8a25 	vldrmi	s16, [pc, #148]	; 8050 <noise_tick+0xd0>
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    7fbe:	ed92 0a00 	vldr	s0, [r2]
	float sample = random_values[randomValPointer++];
    7fc2:	700b      	strb	r3, [r1, #0]
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    7fc4:	f001 fa68 	bl	9498 <__tVZFilterLS_tick_veneer>
	sample = tVZFilterHS_tick(&noiseShelf2[string], sample);
    7fc8:	4822      	ldr	r0, [pc, #136]	; (8054 <noise_tick+0xd4>)
    7fca:	4428      	add	r0, r5
    7fcc:	f001 fab8 	bl	9540 <__tVZFilterHS_tick_veneer>
	sample = tVZFilterBell_tick(&noiseBell1[string], sample);
    7fd0:	4821      	ldr	r0, [pc, #132]	; (8058 <noise_tick+0xd8>)
    7fd2:	4428      	add	r0, r5
    7fd4:	f001 f8dc 	bl	9190 <__tVZFilterBell_tick_veneer>
	sample = sample * amp;
    7fd8:	ee28 0a00 	vmul.f32	s0, s16, s0
	if (isnan(sample))
    7fdc:	eeb4 0a40 	vcmp.f32	s0, s0
    7fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7fe4:	d623      	bvs.n	802e <noise_tick+0xae>
	{
		nanChuck++;
		sample = 0.0f;
	}
	float normSample = (sample + 1.f) * 0.5f;
    7fe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7fea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    7fee:	ee30 7a07 	vadd.f32	s14, s0, s14
    7ff2:	ee27 7a27 	vmul.f32	s14, s14, s15
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    7ff6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	noiseOuts[0][string] = sample * filterSend *  enabled;
    7ffa:	4b18      	ldr	r3, [pc, #96]	; (805c <noise_tick+0xdc>)
    7ffc:	ee60 6a09 	vmul.f32	s13, s0, s18
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    8000:	4a17      	ldr	r2, [pc, #92]	; (8060 <noise_tick+0xe0>)
	noiseOuts[0][string] = sample * filterSend *  enabled;
    8002:	441d      	add	r5, r3
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    8004:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8008:	ee77 7ac9 	vsub.f32	s15, s15, s18
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    800c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	noiseOuts[0][string] = sample * filterSend *  enabled;
    8010:	ee66 6aa8 	vmul.f32	s13, s13, s17
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    8014:	ed82 7a06 	vstr	s14, [r2, #24]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    8018:	ee67 7a80 	vmul.f32	s15, s15, s0
	noiseOuts[0][string] = sample * filterSend *  enabled;
    801c:	edc5 6a00 	vstr	s13, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    8020:	ee67 7aa8 	vmul.f32	s15, s15, s17
    8024:	edc3 7a02 	vstr	s15, [r3, #8]
}
    8028:	ecbd 8b04 	vpop	{d8-d9}
    802c:	bd38      	pop	{r3, r4, r5, pc}
		nanChuck++;
    802e:	4a0d      	ldr	r2, [pc, #52]	; (8064 <noise_tick+0xe4>)
    8030:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
		sample = 0.0f;
    8034:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8050 <noise_tick+0xd0>
		nanChuck++;
    8038:	6813      	ldr	r3, [r2, #0]
    803a:	3301      	adds	r3, #1
    803c:	6013      	str	r3, [r2, #0]
		sample = 0.0f;
    803e:	e7da      	b.n	7ff6 <noise_tick+0x76>
    8040:	200190e4 	.word	0x200190e4
    8044:	2001a26c 	.word	0x2001a26c
    8048:	2001d528 	.word	0x2001d528
    804c:	2001d698 	.word	0x2001d698
    8050:	00000000 	.word	0x00000000
    8054:	2001d530 	.word	0x2001d530
    8058:	2001d50c 	.word	0x2001d50c
    805c:	2001d518 	.word	0x2001d518
    8060:	2001d788 	.word	0x2001d788
    8064:	2001d508 	.word	0x2001d508
    8068:	f3af 8000 	nop.w
    806c:	f3af 8000 	nop.w
    8070:	f3af 8000 	nop.w
    8074:	f3af 8000 	nop.w
    8078:	f3af 8000 	nop.w
    807c:	f3af 8000 	nop.w

00008080 <audioTickSynth>:
{
    8080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountTick = DWT->CYCCNT;
    8084:	4cb8      	ldr	r4, [pc, #736]	; (8368 <audioTickSynth+0x2e8>)
    8086:	4db9      	ldr	r5, [pc, #740]	; (836c <audioTickSynth+0x2ec>)
    8088:	f8df a360 	ldr.w	sl, [pc, #864]	; 83ec <audioTickSynth+0x36c>
    808c:	f8df b360 	ldr.w	fp, [pc, #864]	; 83f0 <audioTickSynth+0x370>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    8090:	46a9      	mov	r9, r5
    8092:	f10a 0830 	add.w	r8, sl, #48	; 0x30
{
    8096:	ed2d 8b08 	vpush	{d8-d11}
    809a:	b093      	sub	sp, #76	; 0x4c
    809c:	af00      	add	r7, sp, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    809e:	6863      	ldr	r3, [r4, #4]
    80a0:	60fb      	str	r3, [r7, #12]
	uint32_t tempCountMap = DWT->CYCCNT;
    80a2:	6866      	ldr	r6, [r4, #4]
	tickMappings();
    80a4:	f7fe fb2c 	bl	6700 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    80a8:	6863      	ldr	r3, [r4, #4]
    80aa:	4ab1      	ldr	r2, [pc, #708]	; (8370 <audioTickSynth+0x2f0>)
    80ac:	1b9b      	subs	r3, r3, r6
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    80ae:	48b1      	ldr	r0, [pc, #708]	; (8374 <audioTickSynth+0x2f4>)
	timeMap = DWT->CYCCNT - tempCountMap;
    80b0:	6013      	str	r3, [r2, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    80b2:	6866      	ldr	r6, [r4, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    80b4:	f001 fa94 	bl	95e0 <__tExpSmooth_tick_veneer>
    80b8:	eef0 8a40 	vmov.f32	s17, s0
    80bc:	462c      	mov	r4, r5
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    80be:	4658      	mov	r0, fp
    80c0:	f001 fa8e 	bl	95e0 <__tExpSmooth_tick_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    80c4:	4bac      	ldr	r3, [pc, #688]	; (8378 <audioTickSynth+0x2f8>)
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    80c6:	ecaa 0a01 	vstmia	sl!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    80ca:	781b      	ldrb	r3, [r3, #0]
    80cc:	b12b      	cbz	r3, 80da <audioTickSynth+0x5a>
    80ce:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    80d0:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
    80d4:	d001      	beq.n	80da <audioTickSynth+0x5a>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    80d6:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
    80da:	45c2      	cmp	sl, r8
    80dc:	f10b 0b04 	add.w	fp, fp, #4
    80e0:	f104 0408 	add.w	r4, r4, #8
    80e4:	d1eb      	bne.n	80be <audioTickSynth+0x3e>
    80e6:	f8df 830c 	ldr.w	r8, [pc, #780]	; 83f4 <audioTickSynth+0x374>
    80ea:	f8df a30c 	ldr.w	sl, [pc, #780]	; 83f8 <audioTickSynth+0x378>
    80ee:	f108 0428 	add.w	r4, r8, #40	; 0x28
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    80f2:	4650      	mov	r0, sl
    80f4:	f001 fa74 	bl	95e0 <__tExpSmooth_tick_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    80f8:	4b9f      	ldr	r3, [pc, #636]	; (8378 <audioTickSynth+0x2f8>)
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    80fa:	eca8 0a01 	vstmia	r8!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    80fe:	781b      	ldrb	r3, [r3, #0]
    8100:	b12b      	cbz	r3, 810e <audioTickSynth+0x8e>
    8102:	2b01      	cmp	r3, #1
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    8104:	ed85 0a38 	vstr	s0, [r5, #224]	; 0xe0
		for (int v = 0; v < numStringsThisBoard; v++)
    8108:	d001      	beq.n	810e <audioTickSynth+0x8e>
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    810a:	ed85 0a39 	vstr	s0, [r5, #228]	; 0xe4
	for (int i = 0; i < 10; i++)
    810e:	45a0      	cmp	r8, r4
    8110:	f10a 0a04 	add.w	sl, sl, #4
    8114:	f105 0508 	add.w	r5, r5, #8
    8118:	d1eb      	bne.n	80f2 <audioTickSynth+0x72>
	for (int v = 0; v < numStringsThisBoard; v++)
    811a:	2b00      	cmp	r3, #0
    811c:	f000 82a8 	beq.w	8670 <audioTickSynth+0x5f0>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    8120:	4a96      	ldr	r2, [pc, #600]	; (837c <audioTickSynth+0x2fc>)
	for (int v = 0; v < numStringsThisBoard; v++)
    8122:	2b01      	cmp	r3, #1
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    8124:	6812      	ldr	r2, [r2, #0]
    8126:	f8c9 2080 	str.w	r2, [r9, #128]	; 0x80
	for (int v = 0; v < numStringsThisBoard; v++)
    812a:	d001      	beq.n	8130 <audioTickSynth+0xb0>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    812c:	f8c9 2084 	str.w	r2, [r9, #132]	; 0x84
	float note[numStringsThisBoard];
    8130:	009b      	lsls	r3, r3, #2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8132:	f8df a234 	ldr.w	sl, [pc, #564]	; 8368 <audioTickSynth+0x2e8>
	uint32_t tempPerStringTick = DWT->CYCCNT;
    8136:	ed9f 9a92 	vldr	s18, [pc, #584]	; 8380 <audioTickSynth+0x300>
    813a:	2500      	movs	r5, #0
	float note[numStringsThisBoard];
    813c:	3307      	adds	r3, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    813e:	f8da 2004 	ldr.w	r2, [sl, #4]
		float sample = 0.0f;
    8142:	eef0 9a49 	vmov.f32	s19, s18
		if (note[v] > 127.0f)
    8146:	ed9f aa8f 	vldr	s20, [pc, #572]	; 8384 <audioTickSynth+0x304>
	float note[numStringsThisBoard];
    814a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    814e:	1b92      	subs	r2, r2, r6
			note[v] = 64.0f;
    8150:	eddf aa8d 	vldr	s21, [pc, #564]	; 8388 <audioTickSynth+0x308>
	float note[numStringsThisBoard];
    8154:	ebad 0d03 	sub.w	sp, sp, r3
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8158:	4b8c      	ldr	r3, [pc, #560]	; (838c <audioTickSynth+0x30c>)
    815a:	601a      	str	r2, [r3, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    815c:	4b8c      	ldr	r3, [pc, #560]	; (8390 <audioTickSynth+0x310>)
    815e:	623b      	str	r3, [r7, #32]
    8160:	f8da 3004 	ldr.w	r3, [sl, #4]
    8164:	f8c7 d034 	str.w	sp, [r7, #52]	; 0x34
    8168:	60bb      	str	r3, [r7, #8]
	for (int v = 0; v < numStringsThisBoard; v++)
    816a:	4b8a      	ldr	r3, [pc, #552]	; (8394 <audioTickSynth+0x314>)
    816c:	61fb      	str	r3, [r7, #28]
    816e:	4b8a      	ldr	r3, [pc, #552]	; (8398 <audioTickSynth+0x318>)
    8170:	62bb      	str	r3, [r7, #40]	; 0x28
    8172:	4b8a      	ldr	r3, [pc, #552]	; (839c <audioTickSynth+0x31c>)
    8174:	633b      	str	r3, [r7, #48]	; 0x30
    8176:	4b8a      	ldr	r3, [pc, #552]	; (83a0 <audioTickSynth+0x320>)
    8178:	62fb      	str	r3, [r7, #44]	; 0x2c
    817a:	4b8a      	ldr	r3, [pc, #552]	; (83a4 <audioTickSynth+0x324>)
    817c:	61bb      	str	r3, [r7, #24]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    817e:	6a3b      	ldr	r3, [r7, #32]
		float sample = 0.0f;
    8180:	edc7 9a0f 	vstr	s19, [r7, #60]	; 0x3c
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    8184:	ecf3 6a01 	vldmia	r3!, {s13}
    8188:	623b      	str	r3, [r7, #32]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    818a:	4b87      	ldr	r3, [pc, #540]	; (83a8 <audioTickSynth+0x328>)
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    818c:	f8da 2004 	ldr.w	r2, [sl, #4]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    8190:	edd3 7a00 	vldr	s15, [r3]
    8194:	4b85      	ldr	r3, [pc, #532]	; (83ac <audioTickSynth+0x32c>)
    8196:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    819a:	4b85      	ldr	r3, [pc, #532]	; (83b0 <audioTickSynth+0x330>)
    819c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    81a0:	ed93 8a00 	vldr	s16, [r3]
    81a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    81a6:	ee38 8a26 	vadd.f32	s16, s16, s13
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    81aa:	ee78 7a67 	vsub.f32	s15, s16, s15
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    81ae:	eca3 8a01 	vstmia	r3!, {s16}
		if (note[v] < 0.0f)
    81b2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    81b6:	637b      	str	r3, [r7, #52]	; 0x34
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    81b8:	69fb      	ldr	r3, [r7, #28]
    81ba:	ee67 7a87 	vmul.f32	s15, s15, s14
    81be:	4698      	mov	r8, r3
    81c0:	3304      	adds	r3, #4
		if (note[v] < 0.0f)
    81c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    81c6:	ed43 7a01 	vstr	s15, [r3, #-4]
    81ca:	61fb      	str	r3, [r7, #28]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    81cc:	ea4f 0385 	mov.w	r3, r5, lsl #2
    81d0:	627b      	str	r3, [r7, #36]	; 0x24
		if (note[v] < 0.0f)
    81d2:	f100 81ca 	bmi.w	856a <audioTickSynth+0x4ea>
		if (note[v] > 127.0f)
    81d6:	eeb4 8aca 	vcmpe.f32	s16, s20
    81da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    81de:	f340 8278 	ble.w	86d2 <audioTickSynth+0x652>
    81e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
			note[v] = 127.0f;
    81e4:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8384 <audioTickSynth+0x304>
    81e8:	ed03 aa01 	vstr	s20, [r3, #-4]
		if (isnan(note[v]))
    81ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    81ee:	f1a8 0888 	sub.w	r8, r8, #136	; 0x88
    81f2:	4e70      	ldr	r6, [pc, #448]	; (83b4 <audioTickSynth+0x334>)
    81f4:	ed03 8a01 	vstr	s16, [r3, #-4]
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    81f8:	f8da 3004 	ldr.w	r3, [sl, #4]
    81fc:	1a9b      	subs	r3, r3, r2
    81fe:	4a6e      	ldr	r2, [pc, #440]	; (83b8 <audioTickSynth+0x338>)
    8200:	6013      	str	r3, [r2, #0]
		uint32_t tempCountEnv = DWT->CYCCNT;
    8202:	00aa      	lsls	r2, r5, #2
    8204:	4b6d      	ldr	r3, [pc, #436]	; (83bc <audioTickSynth+0x33c>)
    8206:	f8da 4004 	ldr.w	r4, [sl, #4]
	for (int v = 0; v < NUM_ENV; v++)
    820a:	eb03 0902 	add.w	r9, r3, r2
		if (envOn[v])
    820e:	f816 3b01 	ldrb.w	r3, [r6], #1
    8212:	2b00      	cmp	r3, #0
    8214:	f040 81a3 	bne.w	855e <audioTickSynth+0x4de>
	for (int v = 0; v < NUM_ENV; v++)
    8218:	4b69      	ldr	r3, [pc, #420]	; (83c0 <audioTickSynth+0x340>)
    821a:	f109 0908 	add.w	r9, r9, #8
    821e:	f108 0808 	add.w	r8, r8, #8
    8222:	429e      	cmp	r6, r3
    8224:	d1f3      	bne.n	820e <audioTickSynth+0x18e>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    8226:	f8da 3004 	ldr.w	r3, [sl, #4]
		lfo_tick(v);
    822a:	4628      	mov	r0, r5
		timeEnv = DWT->CYCCNT - tempCountEnv;
    822c:	4a65      	ldr	r2, [pc, #404]	; (83c4 <audioTickSynth+0x344>)
    822e:	1b1b      	subs	r3, r3, r4
    8230:	6013      	str	r3, [r2, #0]
		uint32_t tempCountLFO = DWT->CYCCNT;
    8232:	f8da 4004 	ldr.w	r4, [sl, #4]
		lfo_tick(v);
    8236:	f7fe f963 	bl	6500 <lfo_tick>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    823a:	f8da 3004 	ldr.w	r3, [sl, #4]
		oscillator_tick(note[v], v);
    823e:	eeb0 0a48 	vmov.f32	s0, s16
		timeLFO = DWT->CYCCNT - tempCountLFO;
    8242:	4a61      	ldr	r2, [pc, #388]	; (83c8 <audioTickSynth+0x348>)
		oscillator_tick(note[v], v);
    8244:	4628      	mov	r0, r5
		timeLFO = DWT->CYCCNT - tempCountLFO;
    8246:	1b1b      	subs	r3, r3, r4
    8248:	6013      	str	r3, [r2, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    824a:	f8da 4004 	ldr.w	r4, [sl, #4]
		oscillator_tick(note[v], v);
    824e:	f7fd fa87 	bl	5760 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    8252:	f8da 3004 	ldr.w	r3, [sl, #4]
    8256:	4a5d      	ldr	r2, [pc, #372]	; (83cc <audioTickSynth+0x34c>)
    8258:	1b1b      	subs	r3, r3, r4
    825a:	6013      	str	r3, [r2, #0]
		if (noiseOn)
    825c:	4b5c      	ldr	r3, [pc, #368]	; (83d0 <audioTickSynth+0x350>)
		uint32_t tempCountNoise = DWT->CYCCNT;
    825e:	f8da 4004 	ldr.w	r4, [sl, #4]
		if (noiseOn)
    8262:	781b      	ldrb	r3, [r3, #0]
    8264:	2b00      	cmp	r3, #0
    8266:	f040 81d8 	bne.w	861a <audioTickSynth+0x59a>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    826a:	f8da 3004 	ldr.w	r3, [sl, #4]
    826e:	4a59      	ldr	r2, [pc, #356]	; (83d4 <audioTickSynth+0x354>)
    8270:	1b1b      	subs	r3, r3, r4
		for (int i = 0; i < oscToTick; i++)
    8272:	eddf 7a43 	vldr	s15, [pc, #268]	; 8380 <audioTickSynth+0x300>
		float filterSamps[2] = {0.0f, 0.0f};
    8276:	edc7 9a10 	vstr	s19, [r7, #64]	; 0x40
		timeNoise = DWT->CYCCNT - tempCountNoise;
    827a:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < oscToTick; i++)
    827c:	eeb0 7a67 	vmov.f32	s14, s15
    8280:	4b55      	ldr	r3, [pc, #340]	; (83d8 <audioTickSynth+0x358>)
		float filterSamps[2] = {0.0f, 0.0f};
    8282:	edc7 9a11 	vstr	s19, [r7, #68]	; 0x44
		for (int i = 0; i < oscToTick; i++)
    8286:	7819      	ldrb	r1, [r3, #0]
    8288:	b1d9      	cbz	r1, 82c2 <audioTickSynth+0x242>
    828a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    828c:	4b53      	ldr	r3, [pc, #332]	; (83dc <audioTickSynth+0x35c>)
    828e:	4413      	add	r3, r2
    8290:	2200      	movs	r2, #0
			filterSamps[0] += oscOuts[0][i][v];
    8292:	ed93 6a00 	vldr	s12, [r3]
		for (int i = 0; i < oscToTick; i++)
    8296:	3201      	adds	r2, #1
			filterSamps[1] += oscOuts[1][i][v];
    8298:	edd3 6a06 	vldr	s13, [r3, #24]
		for (int i = 0; i < oscToTick; i++)
    829c:	3308      	adds	r3, #8
			filterSamps[0] += oscOuts[0][i][v];
    829e:	ee37 7a06 	vadd.f32	s14, s14, s12
			filterSamps[1] += oscOuts[1][i][v];
    82a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
			if (isnan(filterSamps[0]))
    82a6:	eeb4 7a47 	vcmp.f32	s14, s14
    82aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    82ae:	f180 81bf 	bvs.w	8630 <audioTickSynth+0x5b0>
			if (isnan(filterSamps[1]))
    82b2:	eef4 7a67 	vcmp.f32	s15, s15
    82b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    82ba:	f180 81b2 	bvs.w	8622 <audioTickSynth+0x5a2>
		for (int i = 0; i < oscToTick; i++)
    82be:	428a      	cmp	r2, r1
    82c0:	dbe7      	blt.n	8292 <audioTickSynth+0x212>
		filterSamps[0] += noiseOuts[0][v];
    82c2:	69bb      	ldr	r3, [r7, #24]
    82c4:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
    82c8:	ed93 6a01 	vldr	s12, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
    82cc:	ee36 7a87 	vadd.f32	s14, s13, s14
    82d0:	61bb      	str	r3, [r7, #24]
		filterSamps[1] += noiseOuts[1][v];
    82d2:	ee77 7a86 	vadd.f32	s15, s15, s12
		filterSamps[0] += noiseOuts[0][v];
    82d6:	ed87 7a10 	vstr	s14, [r7, #64]	; 0x40
		if (isnan(filterSamps[1]))
    82da:	eef4 7a67 	vcmp.f32	s15, s15
		filterSamps[1] += noiseOuts[1][v];
    82de:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		if (isnan(filterSamps[1]))
    82e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    82e6:	f180 81ed 	bvs.w	86c4 <audioTickSynth+0x644>
		if (isnan(filterSamps[0]))
    82ea:	eeb4 7a47 	vcmp.f32	s14, s14
		uint32_t tempCountFilt = DWT->CYCCNT;
    82ee:	f8da 4004 	ldr.w	r4, [sl, #4]
		if (isnan(filterSamps[0]))
    82f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    82f6:	f180 81de 	bvs.w	86b6 <audioTickSynth+0x636>
		sample = filter_tick(&filterSamps[0], note[v], v);
    82fa:	eeb0 0a48 	vmov.f32	s0, s16
    82fe:	4629      	mov	r1, r5
    8300:	f107 0040 	add.w	r0, r7, #64	; 0x40
    8304:	f7fd fc0c 	bl	5b20 <filter_tick>
		if (isnan(filterSamps[0]))
    8308:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
		sample = filter_tick(&filterSamps[0], note[v], v);
    830c:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		if (isnan(filterSamps[0]))
    8310:	eef4 7a67 	vcmp.f32	s15, s15
    8314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8318:	f180 81c6 	bvs.w	86a8 <audioTickSynth+0x628>
		timeFilt = DWT->CYCCNT - tempCountFilt;
    831c:	f8da 3004 	ldr.w	r3, [sl, #4]
    8320:	4a2f      	ldr	r2, [pc, #188]	; (83e0 <audioTickSynth+0x360>)
    8322:	1b1b      	subs	r3, r3, r4
    8324:	6013      	str	r3, [r2, #0]
		if (fxPre)
    8326:	4b2f      	ldr	r3, [pc, #188]	; (83e4 <audioTickSynth+0x364>)
    8328:	781b      	ldrb	r3, [r3, #0]
    832a:	b163      	cbz	r3, 8346 <audioTickSynth+0x2c6>
			sample *= amplitude[v];
    832c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    832e:	edd3 7a00 	vldr	s15, [r3]
    8332:	ee20 0a27 	vmul.f32	s0, s0, s15
			if (isnan(sample))
    8336:	eeb4 0a40 	vcmp.f32	s0, s0
			sample *= amplitude[v];
    833a:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
			if (isnan(sample))
    833e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8342:	f180 81d7 	bvs.w	86f4 <audioTickSynth+0x674>
		if (overSampled)
    8346:	4b28      	ldr	r3, [pc, #160]	; (83e8 <audioTickSynth+0x368>)
    8348:	681c      	ldr	r4, [r3, #0]
		uint32_t tempCountOS = DWT->CYCCNT;
    834a:	f8da 3004 	ldr.w	r3, [sl, #4]
    834e:	617b      	str	r3, [r7, #20]
		if (overSampled)
    8350:	2c00      	cmp	r4, #0
    8352:	f040 8110 	bne.w	8576 <audioTickSynth+0x4f6>
					float dry = sample;
    8356:	ed97 8a0f 	vldr	s16, [r7, #60]	; 0x3c
    835a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 83fc <audioTickSynth+0x37c>
					sample = effectTick[i](sample, i, v); //run the effect
    835e:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8400 <audioTickSynth+0x380>
					float dry = sample;
    8362:	e9d7 860b 	ldrd	r8, r6, [r7, #44]	; 0x2c
    8366:	e04d      	b.n	8404 <audioTickSynth+0x384>
    8368:	e0001000 	.word	0xe0001000
    836c:	2001d788 	.word	0x2001d788
    8370:	2001d8e8 	.word	0x2001d8e8
    8374:	2001444c 	.word	0x2001444c
    8378:	20000694 	.word	0x20000694
    837c:	20014444 	.word	0x20014444
    8380:	00000000 	.word	0x00000000
    8384:	42fe0000 	.word	0x42fe0000
    8388:	42800000 	.word	0x42800000
    838c:	2001d8fc 	.word	0x2001d8fc
    8390:	2001441c 	.word	0x2001441c
    8394:	2001d810 	.word	0x2001d810
    8398:	2001cf08 	.word	0x2001cf08
    839c:	2001d1dc 	.word	0x2001d1dc
    83a0:	2001d1fc 	.word	0x2001d1fc
    83a4:	2001d518 	.word	0x2001d518
    83a8:	200190cc 	.word	0x200190cc
    83ac:	200190c8 	.word	0x200190c8
    83b0:	20014414 	.word	0x20014414
    83b4:	2001d148 	.word	0x2001d148
    83b8:	2001d8e0 	.word	0x2001d8e0
    83bc:	2001d14c 	.word	0x2001d14c
    83c0:	2001d14c 	.word	0x2001d14c
    83c4:	2001d8d8 	.word	0x2001d8d8
    83c8:	2001d8e4 	.word	0x2001d8e4
    83cc:	2001d8f4 	.word	0x2001d8f4
    83d0:	2001d514 	.word	0x2001d514
    83d4:	2001d8ec 	.word	0x2001d8ec
    83d8:	20000ae8 	.word	0x20000ae8
    83dc:	2001d56c 	.word	0x2001d56c
    83e0:	2001d8dc 	.word	0x2001d8dc
    83e4:	200166c1 	.word	0x200166c1
    83e8:	20000aec 	.word	0x20000aec
    83ec:	200053e0 	.word	0x200053e0
    83f0:	20005430 	.word	0x20005430
    83f4:	200054f4 	.word	0x200054f4
    83f8:	2000551c 	.word	0x2000551c
    83fc:	20014594 	.word	0x20014594
    8400:	2001d138 	.word	0x2001d138
				if (effectsActive[i])
    8404:	f819 3b01 	ldrb.w	r3, [r9], #1
					sample = effectTick[i](sample, i, v); //run the effect
    8408:	eeb0 0a48 	vmov.f32	s0, s16
    840c:	4620      	mov	r0, r4
    840e:	4629      	mov	r1, r5
				if (effectsActive[i])
    8410:	b1c3      	cbz	r3, 8444 <audioTickSynth+0x3c4>
					sample = effectTick[i](sample, i, v); //run the effect
    8412:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
    8416:	4798      	blx	r3
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    8418:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    841c:	edd6 6a00 	vldr	s13, [r6]
					sample *= fxPostGain[i][v];
    8420:	ed98 6a00 	vldr	s12, [r8]
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    8424:	ee60 7a26 	vmul.f32	s15, s0, s13
    8428:	ee37 7a66 	vsub.f32	s14, s14, s13
    842c:	eee7 7a08 	vfma.f32	s15, s14, s16
					sample *= fxPostGain[i][v];
    8430:	ee27 8a86 	vmul.f32	s16, s15, s12
					if (isnan(sample))
    8434:	eeb4 8a48 	vcmp.f32	s16, s16
					sample *= fxPostGain[i][v];
    8438:	ed87 8a0f 	vstr	s16, [r7, #60]	; 0x3c
					if (isnan(sample))
    843c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8440:	f180 8120 	bvs.w	8684 <audioTickSynth+0x604>
			for (int i = 0; i < NUM_EFFECT; i++)
    8444:	3401      	adds	r4, #1
    8446:	3608      	adds	r6, #8
    8448:	f108 0808 	add.w	r8, r8, #8
    844c:	2c04      	cmp	r4, #4
    844e:	d1d9      	bne.n	8404 <audioTickSynth+0x384>
		timeOS = DWT->CYCCNT - tempCountOS;
    8450:	f8da 3004 	ldr.w	r3, [sl, #4]
    8454:	697a      	ldr	r2, [r7, #20]
    8456:	1a9b      	subs	r3, r3, r2
    8458:	4aaa      	ldr	r2, [pc, #680]	; (8704 <audioTickSynth+0x684>)
    845a:	6013      	str	r3, [r2, #0]
		if (!fxPre)
    845c:	4baa      	ldr	r3, [pc, #680]	; (8708 <audioTickSynth+0x688>)
    845e:	781b      	ldrb	r3, [r3, #0]
    8460:	b933      	cbnz	r3, 8470 <audioTickSynth+0x3f0>
			sample *= amplitude[v];
    8462:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8464:	edd3 7a00 	vldr	s15, [r3]
    8468:	ee28 8a27 	vmul.f32	s16, s16, s15
    846c:	ed87 8a0f 	vstr	s16, [r7, #60]	; 0x3c
		if (isnan(sample))
    8470:	eeb4 8a48 	vcmp.f32	s16, s16
    8474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8478:	f180 810d 	bvs.w	8696 <audioTickSynth+0x616>
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    847c:	4ba3      	ldr	r3, [pc, #652]	; (870c <audioTickSynth+0x68c>)
    847e:	eeb0 0a48 	vmov.f32	s0, s16
    8482:	6a78      	ldr	r0, [r7, #36]	; 0x24
	for (int v = 0; v < numStringsThisBoard; v++)
    8484:	3501      	adds	r5, #1
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    8486:	4418      	add	r0, r3
    8488:	f001 f866 	bl	9558 <__tSVF_tick_veneer>
		masterSample += sample;// * finalMaster[v];
    848c:	4ba0      	ldr	r3, [pc, #640]	; (8710 <audioTickSynth+0x690>)
    848e:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
    8492:	6abb      	ldr	r3, [r7, #40]	; 0x28
		masterSample += sample;// * finalMaster[v];
    8494:	eea0 9a27 	vfma.f32	s18, s0, s15
	for (int v = 0; v < numStringsThisBoard; v++)
    8498:	3304      	adds	r3, #4
    849a:	62bb      	str	r3, [r7, #40]	; 0x28
    849c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    849e:	3304      	adds	r3, #4
    84a0:	633b      	str	r3, [r7, #48]	; 0x30
    84a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    84a4:	3304      	adds	r3, #4
    84a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    84a8:	4b9a      	ldr	r3, [pc, #616]	; (8714 <audioTickSynth+0x694>)
    84aa:	781b      	ldrb	r3, [r3, #0]
    84ac:	42ab      	cmp	r3, r5
    84ae:	f73f ae66 	bgt.w	817e <audioTickSynth+0xfe>
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    84b2:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8718 <audioTickSynth+0x698>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    84b6:	4b99      	ldr	r3, [pc, #612]	; (871c <audioTickSynth+0x69c>)
    84b8:	68b9      	ldr	r1, [r7, #8]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    84ba:	eef0 0a40 	vmov.f32	s1, s0
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    84be:	685b      	ldr	r3, [r3, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    84c0:	eddf 7a97 	vldr	s15, [pc, #604]	; 8720 <audioTickSynth+0x6a0>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    84c4:	1a5b      	subs	r3, r3, r1
    84c6:	4a97      	ldr	r2, [pc, #604]	; (8724 <audioTickSynth+0x6a4>)
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    84c8:	eee8 0aa7 	vfma.f32	s1, s17, s15
    84cc:	ed9f 1a96 	vldr	s2, [pc, #600]	; 8728 <audioTickSynth+0x6a8>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    84d0:	6013      	str	r3, [r2, #0]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    84d2:	f001 f8c1 	bl	9658 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
    84d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	if (pedalControlsMaster)
    84da:	4a94      	ldr	r2, [pc, #592]	; (872c <audioTickSynth+0x6ac>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    84dc:	4b94      	ldr	r3, [pc, #592]	; (8730 <audioTickSynth+0x6b0>)
	if (pedalControlsMaster)
    84de:	7810      	ldrb	r0, [r2, #0]
	int volIdxInt = (int) volIdx;
    84e0:	ee17 2a90 	vmov	r2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    84e4:	1c51      	adds	r1, r2, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    84e6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    84ea:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    84ee:	ed94 6a00 	vldr	s12, [r4]
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    84f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    84f6:	edd3 6a00 	vldr	s13, [r3]
	if (pedalControlsMaster)
    84fa:	b168      	cbz	r0, 8518 <audioTickSynth+0x498>
	float alpha = volIdx-volIdxInt;
    84fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float omAlpha = 1.0f - alpha;
    8500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float alpha = volIdx-volIdxInt;
    8504:	ee30 0a67 	vsub.f32	s0, s0, s15
	float omAlpha = 1.0f - alpha;
    8508:	ee77 7a40 	vsub.f32	s15, s14, s0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    850c:	ee67 7a86 	vmul.f32	s15, s15, s12
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    8510:	eee6 7a80 	vfma.f32	s15, s13, s0
		masterSample *= outVol;
    8514:	ee29 9a27 	vmul.f32	s18, s18, s15
	if (masterSample  > .999999f)
    8518:	eddf 7a86 	vldr	s15, [pc, #536]	; 8734 <audioTickSynth+0x6b4>
    851c:	eeb4 9ae7 	vcmpe.f32	s18, s15
    8520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8524:	f340 808b 	ble.w	863e <audioTickSynth+0x5be>
		masterSample  = .999999f;
    8528:	eeb0 9a67 	vmov.f32	s18, s15
		sampleClippedCountdown = 65535;
    852c:	4b82      	ldr	r3, [pc, #520]	; (8738 <audioTickSynth+0x6b8>)
    852e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8532:	801a      	strh	r2, [r3, #0]
	return masterSample * audioMasterLevel * 0.98f;
    8534:	4981      	ldr	r1, [pc, #516]	; (873c <audioTickSynth+0x6bc>)
	timeTick = DWT->CYCCNT - tempCountTick;
    8536:	4b79      	ldr	r3, [pc, #484]	; (871c <audioTickSynth+0x69c>)
	return masterSample * audioMasterLevel * 0.98f;
    8538:	eddf 7a81 	vldr	s15, [pc, #516]	; 8740 <audioTickSynth+0x6c0>
	timeTick = DWT->CYCCNT - tempCountTick;
    853c:	685b      	ldr	r3, [r3, #4]
	return masterSample * audioMasterLevel * 0.98f;
    853e:	ed91 0a00 	vldr	s0, [r1]
	timeTick = DWT->CYCCNT - tempCountTick;
    8542:	68f9      	ldr	r1, [r7, #12]
}
    8544:	374c      	adds	r7, #76	; 0x4c
	return masterSample * audioMasterLevel * 0.98f;
    8546:	ee20 0a09 	vmul.f32	s0, s0, s18
	timeTick = DWT->CYCCNT - tempCountTick;
    854a:	4a7e      	ldr	r2, [pc, #504]	; (8744 <audioTickSynth+0x6c4>)
    854c:	1a5b      	subs	r3, r3, r1
	return masterSample * audioMasterLevel * 0.98f;
    854e:	ee20 0a27 	vmul.f32	s0, s0, s15
	timeTick = DWT->CYCCNT - tempCountTick;
    8552:	6013      	str	r3, [r2, #0]
}
    8554:	46bd      	mov	sp, r7
    8556:	ecbd 8b08 	vpop	{d8-d11}
    855a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    855e:	4648      	mov	r0, r9
    8560:	f000 ff32 	bl	93c8 <__tADSRT_tickNoInterp_veneer>
    8564:	ed88 0a28 	vstr	s0, [r8, #160]	; 0xa0
    8568:	e656      	b.n	8218 <audioTickSynth+0x198>
    856a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
			note[v] = 0.0f;
    856c:	ed9f 8a76 	vldr	s16, [pc, #472]	; 8748 <audioTickSynth+0x6c8>
    8570:	ed43 9a01 	vstr	s19, [r3, #-4]
		if (isnan(note[v]))
    8574:	e63a      	b.n	81ec <audioTickSynth+0x16c>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    8576:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    857a:	4874      	ldr	r0, [pc, #464]	; (874c <audioTickSynth+0x6cc>)
    857c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
    8580:	4a73      	ldr	r2, [pc, #460]	; (8750 <audioTickSynth+0x6d0>)
    8582:	eb00 0083 	add.w	r0, r0, r3, lsl #2
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    8586:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    858a:	009b      	lsls	r3, r3, #2
    858c:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 876c <audioTickSynth+0x6ec>
			for (int i = 0; i < 4; i++)
    8590:	2400      	movs	r4, #0
    8592:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 8770 <audioTickSynth+0x6f0>
    8596:	607b      	str	r3, [r7, #4]
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    8598:	2301      	movs	r3, #1
    859a:	e9d7 860b 	ldrd	r8, r6, [r7, #44]	; 0x2c
    859e:	f000 ff4f 	bl	9440 <__arm_fir_interpolate_f32_veneer>
    85a2:	4629      	mov	r1, r5
    85a4:	4635      	mov	r5, r6
				if (effectsActive[i])
    85a6:	f819 3b01 	ldrb.w	r3, [r9], #1
    85aa:	b993      	cbnz	r3, 85d2 <audioTickSynth+0x552>
			for (int i = 0; i < 4; i++)
    85ac:	3401      	adds	r4, #1
    85ae:	3508      	adds	r5, #8
    85b0:	f108 0808 	add.w	r8, r8, #8
    85b4:	2c04      	cmp	r4, #4
    85b6:	d1f6      	bne.n	85a6 <audioTickSynth+0x526>
			arm_fir_decimate_f32(&osD[v], (float*)&oversamplerArray, &sample, 2);
    85b8:	687b      	ldr	r3, [r7, #4]
    85ba:	460d      	mov	r5, r1
    85bc:	4865      	ldr	r0, [pc, #404]	; (8754 <audioTickSynth+0x6d4>)
    85be:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    85c2:	4963      	ldr	r1, [pc, #396]	; (8750 <audioTickSynth+0x6d0>)
    85c4:	4418      	add	r0, r3
    85c6:	2302      	movs	r3, #2
    85c8:	f000 fd8e 	bl	90e8 <__arm_fir_decimate_f32_veneer>
			sample *= amplitude[v];
    85cc:	ed97 8a0f 	vldr	s16, [r7, #60]	; 0x3c
    85d0:	e73e      	b.n	8450 <audioTickSynth+0x3d0>
    85d2:	4e5f      	ldr	r6, [pc, #380]	; (8750 <audioTickSynth+0x6d0>)
						float dry = oversamplerArray[j]; //store the dry value to mix later
    85d4:	ed96 8a00 	vldr	s16, [r6]
						oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
    85d8:	4620      	mov	r0, r4
    85da:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
    85de:	eeb0 0a48 	vmov.f32	s0, s16
    85e2:	6139      	str	r1, [r7, #16]
    85e4:	4798      	blx	r3
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    85e6:	edd5 6a00 	vldr	s13, [r5]
						if (isnan(sample))
    85ea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    85ee:	ee3b 6a66 	vsub.f32	s12, s22, s13
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    85f2:	edd8 7a00 	vldr	s15, [r8]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    85f6:	ee20 0a26 	vmul.f32	s0, s0, s13
						if (isnan(sample))
    85fa:	6939      	ldr	r1, [r7, #16]
    85fc:	eeb4 7a47 	vcmp.f32	s14, s14
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    8600:	eea6 0a08 	vfma.f32	s0, s12, s16
						if (isnan(sample))
    8604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    8608:	ee67 7a80 	vmul.f32	s15, s15, s0
    860c:	ece6 7a01 	vstmia	r6!, {s15}
						if (isnan(sample))
    8610:	d669      	bvs.n	86e6 <audioTickSynth+0x666>
					for (int j = 0; j < OVERSAMPLE; j++)
    8612:	4b51      	ldr	r3, [pc, #324]	; (8758 <audioTickSynth+0x6d8>)
    8614:	42b3      	cmp	r3, r6
    8616:	d1dd      	bne.n	85d4 <audioTickSynth+0x554>
    8618:	e7c8      	b.n	85ac <audioTickSynth+0x52c>
			noise_tick(v);
    861a:	4628      	mov	r0, r5
    861c:	f7ff fcb0 	bl	7f80 <noise_tick>
    8620:	e623      	b.n	826a <audioTickSynth+0x1ea>
				nanChuck++;
    8622:	4c4e      	ldr	r4, [pc, #312]	; (875c <audioTickSynth+0x6dc>)
				filterSamps[1] = 0.0f;
    8624:	eddf 7a48 	vldr	s15, [pc, #288]	; 8748 <audioTickSynth+0x6c8>
				nanChuck++;
    8628:	6820      	ldr	r0, [r4, #0]
    862a:	3001      	adds	r0, #1
    862c:	6020      	str	r0, [r4, #0]
    862e:	e646      	b.n	82be <audioTickSynth+0x23e>
				nanChuck++;
    8630:	4c4a      	ldr	r4, [pc, #296]	; (875c <audioTickSynth+0x6dc>)
				filterSamps[0] = 0.0f;
    8632:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8748 <audioTickSynth+0x6c8>
				nanChuck++;
    8636:	6820      	ldr	r0, [r4, #0]
    8638:	3001      	adds	r0, #1
    863a:	6020      	str	r0, [r4, #0]
    863c:	e639      	b.n	82b2 <audioTickSynth+0x232>
	else if (masterSample < -.999999f)
    863e:	eddf 7a48 	vldr	s15, [pc, #288]	; 8760 <audioTickSynth+0x6e0>
    8642:	eeb4 9ae7 	vcmpe.f32	s18, s15
    8646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    864a:	d506      	bpl.n	865a <audioTickSynth+0x5da>
		sampleClippedCountdown = 65535;
    864c:	4b3a      	ldr	r3, [pc, #232]	; (8738 <audioTickSynth+0x6b8>)
    864e:	f64f 72ff 	movw	r2, #65535	; 0xffff
		masterSample = -.9999999f;
    8652:	ed9f 9a44 	vldr	s18, [pc, #272]	; 8764 <audioTickSynth+0x6e4>
		sampleClippedCountdown = 65535;
    8656:	801a      	strh	r2, [r3, #0]
    8658:	e76c      	b.n	8534 <audioTickSynth+0x4b4>
		if (sampleClippedCountdown > 0)
    865a:	4a37      	ldr	r2, [pc, #220]	; (8738 <audioTickSynth+0x6b8>)
    865c:	8813      	ldrh	r3, [r2, #0]
    865e:	b29b      	uxth	r3, r3
    8660:	2b00      	cmp	r3, #0
    8662:	f43f af67 	beq.w	8534 <audioTickSynth+0x4b4>
			sampleClippedCountdown--;
    8666:	8813      	ldrh	r3, [r2, #0]
    8668:	3b01      	subs	r3, #1
    866a:	b29b      	uxth	r3, r3
    866c:	8013      	strh	r3, [r2, #0]
    866e:	e761      	b.n	8534 <audioTickSynth+0x4b4>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8670:	4a2a      	ldr	r2, [pc, #168]	; (871c <audioTickSynth+0x69c>)
    8672:	493d      	ldr	r1, [pc, #244]	; (8768 <audioTickSynth+0x6e8>)
    8674:	6853      	ldr	r3, [r2, #4]
	float masterSample = 0.0f;
    8676:	ed9f 9a34 	vldr	s18, [pc, #208]	; 8748 <audioTickSynth+0x6c8>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    867a:	1b9b      	subs	r3, r3, r6
    867c:	600b      	str	r3, [r1, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    867e:	6853      	ldr	r3, [r2, #4]
    8680:	60bb      	str	r3, [r7, #8]
	for (int v = 0; v < numStringsThisBoard; v++)
    8682:	e716      	b.n	84b2 <audioTickSynth+0x432>
						nanChuck++;
    8684:	4a35      	ldr	r2, [pc, #212]	; (875c <audioTickSynth+0x6dc>)
    8686:	ed9f 8a30 	vldr	s16, [pc, #192]	; 8748 <audioTickSynth+0x6c8>
    868a:	6813      	ldr	r3, [r2, #0]
						sample = 0.0f;
    868c:	edc7 9a0f 	vstr	s19, [r7, #60]	; 0x3c
						nanChuck++;
    8690:	3301      	adds	r3, #1
    8692:	6013      	str	r3, [r2, #0]
    8694:	e6d6      	b.n	8444 <audioTickSynth+0x3c4>
			nanChuck++;
    8696:	4a31      	ldr	r2, [pc, #196]	; (875c <audioTickSynth+0x6dc>)
    8698:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8748 <audioTickSynth+0x6c8>
    869c:	6813      	ldr	r3, [r2, #0]
			sample = 0.0f;
    869e:	edc7 9a0f 	vstr	s19, [r7, #60]	; 0x3c
			nanChuck++;
    86a2:	3301      	adds	r3, #1
    86a4:	6013      	str	r3, [r2, #0]
    86a6:	e6e9      	b.n	847c <audioTickSynth+0x3fc>
			nanChuck++;
    86a8:	4a2c      	ldr	r2, [pc, #176]	; (875c <audioTickSynth+0x6dc>)
			filterSamps[0] = 0.0f;
    86aa:	edc7 9a10 	vstr	s19, [r7, #64]	; 0x40
			nanChuck++;
    86ae:	6813      	ldr	r3, [r2, #0]
    86b0:	3301      	adds	r3, #1
    86b2:	6013      	str	r3, [r2, #0]
    86b4:	e632      	b.n	831c <audioTickSynth+0x29c>
			nanChuck++;
    86b6:	4a29      	ldr	r2, [pc, #164]	; (875c <audioTickSynth+0x6dc>)
			filterSamps[0] = 0.0f;
    86b8:	edc7 9a10 	vstr	s19, [r7, #64]	; 0x40
			nanChuck++;
    86bc:	6813      	ldr	r3, [r2, #0]
    86be:	3301      	adds	r3, #1
    86c0:	6013      	str	r3, [r2, #0]
    86c2:	e61a      	b.n	82fa <audioTickSynth+0x27a>
			nanChuck++;
    86c4:	4a25      	ldr	r2, [pc, #148]	; (875c <audioTickSynth+0x6dc>)
			filterSamps[1] = 0.0f;
    86c6:	edc7 9a11 	vstr	s19, [r7, #68]	; 0x44
			nanChuck++;
    86ca:	6813      	ldr	r3, [r2, #0]
    86cc:	3301      	adds	r3, #1
    86ce:	6013      	str	r3, [r2, #0]
    86d0:	e60b      	b.n	82ea <audioTickSynth+0x26a>
			note[v] = 64.0f;
    86d2:	eeb4 8a48 	vcmp.f32	s16, s16
    86d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    86d8:	ed03 8a01 	vstr	s16, [r3, #-4]
    86dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    86e0:	fe1a 8a88 	vselvs.f32	s16, s21, s16
    86e4:	e582      	b.n	81ec <audioTickSynth+0x16c>
							nanChuck++;
    86e6:	4a1d      	ldr	r2, [pc, #116]	; (875c <audioTickSynth+0x6dc>)
							sample = 0.0f;
    86e8:	edc7 9a0f 	vstr	s19, [r7, #60]	; 0x3c
							nanChuck++;
    86ec:	6813      	ldr	r3, [r2, #0]
    86ee:	3301      	adds	r3, #1
    86f0:	6013      	str	r3, [r2, #0]
    86f2:	e78e      	b.n	8612 <audioTickSynth+0x592>
				nanChuck++;
    86f4:	4a19      	ldr	r2, [pc, #100]	; (875c <audioTickSynth+0x6dc>)
				sample = 0.0f;
    86f6:	edc7 9a0f 	vstr	s19, [r7, #60]	; 0x3c
				nanChuck++;
    86fa:	6813      	ldr	r3, [r2, #0]
    86fc:	3301      	adds	r3, #1
    86fe:	6013      	str	r3, [r2, #0]
    8700:	e621      	b.n	8346 <audioTickSynth+0x2c6>
    8702:	bf00      	nop
    8704:	2001d8f0 	.word	0x2001d8f0
    8708:	200166c1 	.word	0x200166c1
    870c:	2001d1b4 	.word	0x2001d1b4
    8710:	20000690 	.word	0x20000690
    8714:	20000694 	.word	0x20000694
    8718:	423c0000 	.word	0x423c0000
    871c:	e0001000 	.word	0xe0001000
    8720:	42a00000 	.word	0x42a00000
    8724:	2001d8f8 	.word	0x2001d8f8
    8728:	42fe0000 	.word	0x42fe0000
    872c:	2001a1f4 	.word	0x2001a1f4
    8730:	200006a0 	.word	0x200006a0
    8734:	3f7fffef 	.word	0x3f7fffef
    8738:	2000596a 	.word	0x2000596a
    873c:	200008a8 	.word	0x200008a8
    8740:	3f7ae148 	.word	0x3f7ae148
    8744:	2001d900 	.word	0x2001d900
    8748:	00000000 	.word	0x00000000
    874c:	2001d550 	.word	0x2001d550
    8750:	2001d59c 	.word	0x2001d59c
    8754:	2001d538 	.word	0x2001d538
    8758:	2001d5a4 	.word	0x2001d5a4
    875c:	2001d508 	.word	0x2001d508
    8760:	bf7fffef 	.word	0xbf7fffef
    8764:	bf7ffffe 	.word	0xbf7ffffe
    8768:	2001d8fc 	.word	0x2001d8fc
    876c:	20014594 	.word	0x20014594
    8770:	2001d138 	.word	0x2001d138
    8774:	f3af 8000 	nop.w
    8778:	f3af 8000 	nop.w
    877c:	f3af 8000 	nop.w

00008780 <audioFrameSynth>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    8780:	4ba2      	ldr	r3, [pc, #648]	; (8a0c <audioFrameSynth+0x28c>)
{
    8782:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (resetStringInputs)
    8786:	f8df 92e8 	ldr.w	r9, [pc, #744]	; 8a70 <audioFrameSynth+0x2f0>
{
    878a:	4607      	mov	r7, r0
    878c:	ed2d 8b04 	vpush	{d8-d9}
	uint32_t tempCountFrame = DWT->CYCCNT;
    8790:	685b      	ldr	r3, [r3, #4]
{
    8792:	b087      	sub	sp, #28
	uint32_t tempCountFrame = DWT->CYCCNT;
    8794:	9301      	str	r3, [sp, #4]
	if (resetStringInputs)
    8796:	f899 3000 	ldrb.w	r3, [r9]
    879a:	2b00      	cmp	r3, #0
    879c:	f040 8087 	bne.w	88ae <audioFrameSynth+0x12e>
    87a0:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8a74 <audioFrameSynth+0x2f4>
	if (newPluck)
    87a4:	f8d8 3000 	ldr.w	r3, [r8]
    87a8:	2b00      	cmp	r3, #0
    87aa:	d037      	beq.n	881c <audioFrameSynth+0x9c>
		for (int i = 0; i < numStringsThisBoard; i++)
    87ac:	4e98      	ldr	r6, [pc, #608]	; (8a10 <audioFrameSynth+0x290>)
    87ae:	7833      	ldrb	r3, [r6, #0]
    87b0:	2b00      	cmp	r3, #0
    87b2:	d030      	beq.n	8816 <audioFrameSynth+0x96>
    87b4:	4b97      	ldr	r3, [pc, #604]	; (8a14 <audioFrameSynth+0x294>)
    87b6:	2500      	movs	r5, #0
    87b8:	4a97      	ldr	r2, [pc, #604]	; (8a18 <audioFrameSynth+0x298>)
    87ba:	9702      	str	r7, [sp, #8]
    87bc:	461f      	mov	r7, r3
				float amplitz = stringInputs[i] * 0.000015259021897f;
    87be:	eddf 8a97 	vldr	s17, [pc, #604]	; 8a1c <audioFrameSynth+0x29c>
    87c2:	4693      	mov	fp, r2
    87c4:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 8a78 <audioFrameSynth+0x2f8>
    87c8:	4c95      	ldr	r4, [pc, #596]	; (8a20 <audioFrameSynth+0x2a0>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    87ca:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    87ce:	b29b      	uxth	r3, r3
    87d0:	b933      	cbnz	r3, 87e0 <audioFrameSynth+0x60>
    87d2:	4b94      	ldr	r3, [pc, #592]	; (8a24 <audioFrameSynth+0x2a4>)
    87d4:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    87d8:	b29b      	uxth	r3, r3
    87da:	2b00      	cmp	r3, #0
    87dc:	f040 8095 	bne.w	890a <audioFrameSynth+0x18a>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    87e0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    87e4:	b29b      	uxth	r3, r3
    87e6:	b133      	cbz	r3, 87f6 <audioFrameSynth+0x76>
    87e8:	4b8e      	ldr	r3, [pc, #568]	; (8a24 <audioFrameSynth+0x2a4>)
    87ea:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    87ee:	b29b      	uxth	r3, r3
    87f0:	2b00      	cmp	r3, #0
    87f2:	f000 80f6 	beq.w	89e2 <audioFrameSynth+0x262>
			previousStringInputs[i] = stringInputs[i];
    87f6:	4b8b      	ldr	r3, [pc, #556]	; (8a24 <audioFrameSynth+0x2a4>)
		for (int i = 0; i < numStringsThisBoard; i++)
    87f8:	3704      	adds	r7, #4
    87fa:	f10b 0b04 	add.w	fp, fp, #4
    87fe:	f10a 0a04 	add.w	sl, sl, #4
			previousStringInputs[i] = stringInputs[i];
    8802:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    8806:	b29b      	uxth	r3, r3
    8808:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    880c:	3501      	adds	r5, #1
    880e:	7833      	ldrb	r3, [r6, #0]
    8810:	42ab      	cmp	r3, r5
    8812:	dcda      	bgt.n	87ca <audioFrameSynth+0x4a>
    8814:	9f02      	ldr	r7, [sp, #8]
		newPluck = 0;
    8816:	2300      	movs	r3, #0
    8818:	f8c8 3000 	str.w	r3, [r8]
    881c:	4c82      	ldr	r4, [pc, #520]	; (8a28 <audioFrameSynth+0x2a8>)
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    881e:	ed9f 8a83 	vldr	s16, [pc, #524]	; 8a2c <audioFrameSynth+0x2ac>
    8822:	f504 7500 	add.w	r5, r4, #512	; 0x200
    8826:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    882a:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    882e:	f7ff fc27 	bl	8080 <audioTickSynth>
    8832:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    8836:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    8838:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    883c:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    883e:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    8842:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    8846:	d1f2      	bne.n	882e <audioFrameSynth+0xae>
	if (switchStrings)
    8848:	4c79      	ldr	r4, [pc, #484]	; (8a30 <audioFrameSynth+0x2b0>)
    884a:	6823      	ldr	r3, [r4, #0]
    884c:	2b00      	cmp	r3, #0
    884e:	d150      	bne.n	88f2 <audioFrameSynth+0x172>
	switchStrings = 0;
    8850:	2000      	movs	r0, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8852:	4b6e      	ldr	r3, [pc, #440]	; (8a0c <audioFrameSynth+0x28c>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8854:	4a77      	ldr	r2, [pc, #476]	; (8a34 <audioFrameSynth+0x2b4>)
	switchStrings = 0;
    8856:	6020      	str	r0, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8858:	9c01      	ldr	r4, [sp, #4]
    885a:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    885c:	edd2 6a00 	vldr	s13, [r2]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8860:	1b1b      	subs	r3, r3, r4
	if (frameLoadPercentage > .99f)
    8862:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8a38 <audioFrameSynth+0x2b8>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8866:	4975      	ldr	r1, [pc, #468]	; (8a3c <audioFrameSynth+0x2bc>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8868:	ee07 3a90 	vmov	s15, r3
    886c:	4a74      	ldr	r2, [pc, #464]	; (8a40 <audioFrameSynth+0x2c0>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    886e:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8870:	eef8 7a67 	vcvt.f32.u32	s15, s15
    8874:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (frameLoadPercentage > .99f)
    8878:	eef4 7ac7 	vcmpe.f32	s15, s14
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    887c:	edc2 7a00 	vstr	s15, [r2]
	if (frameLoadPercentage > .99f)
    8880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8884:	dd0e      	ble.n	88a4 <audioFrameSynth+0x124>
		frameLoadOverCount++;
    8886:	4a6f      	ldr	r2, [pc, #444]	; (8a44 <audioFrameSynth+0x2c4>)
    8888:	6813      	ldr	r3, [r2, #0]
    888a:	3301      	adds	r3, #1
		if (frameLoadOverCount > 3)
    888c:	2b03      	cmp	r3, #3
		frameLoadOverCount++;
    888e:	6013      	str	r3, [r2, #0]
		if (frameLoadOverCount > 3)
    8890:	d908      	bls.n	88a4 <audioFrameSynth+0x124>
			if (overSampled == 1)
    8892:	4b6d      	ldr	r3, [pc, #436]	; (8a48 <audioFrameSynth+0x2c8>)
    8894:	681a      	ldr	r2, [r3, #0]
    8896:	2a01      	cmp	r2, #1
    8898:	d02f      	beq.n	88fa <audioFrameSynth+0x17a>
			else if (oscToTick > 0)
    889a:	4a6c      	ldr	r2, [pc, #432]	; (8a4c <audioFrameSynth+0x2cc>)
    889c:	7813      	ldrb	r3, [r2, #0]
    889e:	b10b      	cbz	r3, 88a4 <audioFrameSynth+0x124>
				oscToTick--;
    88a0:	3b01      	subs	r3, #1
    88a2:	7013      	strb	r3, [r2, #0]
}
    88a4:	b007      	add	sp, #28
    88a6:	ecbd 8b04 	vpop	{d8-d9}
    88aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    88ae:	4e58      	ldr	r6, [pc, #352]	; (8a10 <audioFrameSynth+0x290>)
    88b0:	7833      	ldrb	r3, [r6, #0]
    88b2:	b1ab      	cbz	r3, 88e0 <audioFrameSynth+0x160>
    88b4:	2500      	movs	r5, #0
    88b6:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8a7c <audioFrameSynth+0x2fc>
    88ba:	4c59      	ldr	r4, [pc, #356]	; (8a20 <audioFrameSynth+0x2a0>)
				previousStringInputs[i] = 0;
    88bc:	46aa      	mov	sl, r5
    88be:	f1a8 0b20 	sub.w	fp, r8, #32
				tADSRT_clear(&envs[v][i]);
    88c2:	4658      	mov	r0, fp
			for (int v = 0; v < NUM_ENV; v++)
    88c4:	f10b 0b08 	add.w	fp, fp, #8
				tADSRT_clear(&envs[v][i]);
    88c8:	f000 fd86 	bl	93d8 <__tADSRT_clear_veneer>
				previousStringInputs[i] = 0;
    88cc:	f824 a015 	strh.w	sl, [r4, r5, lsl #1]
			for (int v = 0; v < NUM_ENV; v++)
    88d0:	45c3      	cmp	fp, r8
    88d2:	d1f6      	bne.n	88c2 <audioFrameSynth+0x142>
		for (int i = 0; i < numStringsThisBoard; i++)
    88d4:	3501      	adds	r5, #1
    88d6:	7833      	ldrb	r3, [r6, #0]
    88d8:	f108 0804 	add.w	r8, r8, #4
    88dc:	42ab      	cmp	r3, r5
    88de:	dcee      	bgt.n	88be <audioFrameSynth+0x13e>
		resetStringInputs = 0;
    88e0:	2300      	movs	r3, #0
		newPluck = 1;
    88e2:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8a74 <audioFrameSynth+0x2f4>
		resetStringInputs = 0;
    88e6:	f889 3000 	strb.w	r3, [r9]
		newPluck = 1;
    88ea:	2301      	movs	r3, #1
    88ec:	f8c8 3000 	str.w	r3, [r8]
    88f0:	e758      	b.n	87a4 <audioFrameSynth+0x24>
		switchStringModel(switchStrings);
    88f2:	6820      	ldr	r0, [r4, #0]
    88f4:	f7f8 fd34 	bl	1360 <switchStringModel>
    88f8:	e7aa      	b.n	8850 <audioFrameSynth+0xd0>
				overSampled = 0;
    88fa:	6018      	str	r0, [r3, #0]
}
    88fc:	b007      	add	sp, #28
    88fe:	ecbd 8b04 	vpop	{d8-d9}
    8902:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				changeOversampling(overSampled);
    8906:	f000 bcdf 	b.w	92c8 <__changeOversampling_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    890a:	4b46      	ldr	r3, [pc, #280]	; (8a24 <audioFrameSynth+0x2a4>)
						if (useVelocity == 0) envVel = 1.f;
    890c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    8910:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8a80 <audioFrameSynth+0x300>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8914:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
						voiceSounding = 1;
    8918:	9504      	str	r5, [sp, #16]
    891a:	f109 0104 	add.w	r1, r9, #4
				float amplitz = stringInputs[i] * 0.000015259021897f;
    891e:	b29b      	uxth	r3, r3
						voiceSounding = 1;
    8920:	9405      	str	r4, [sp, #20]
    8922:	465c      	mov	r4, fp
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8924:	ee08 3a10 	vmov	s16, r3
				stringOctave[i] = octave;
    8928:	4b49      	ldr	r3, [pc, #292]	; (8a50 <audioFrameSynth+0x2d0>)
    892a:	681a      	ldr	r2, [r3, #0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    892c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				stringOctave[i] = octave;
    8930:	4b48      	ldr	r3, [pc, #288]	; (8a54 <audioFrameSynth+0x2d4>)
    8932:	eb03 0385 	add.w	r3, r3, r5, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8936:	ee28 8a28 	vmul.f32	s16, s16, s17
				stringOctave[i] = octave;
    893a:	601a      	str	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    893c:	f5aa 7213 	sub.w	r2, sl, #588	; 0x24c
    8940:	00ab      	lsls	r3, r5, #2
						voiceSounding = 1;
    8942:	4615      	mov	r5, r2
    8944:	9303      	str	r3, [sp, #12]
					if (envOn[v])
    8946:	f819 3b01 	ldrb.w	r3, [r9], #1
						tADSRT_on(&envs[v][i], envVel);
    894a:	4620      	mov	r0, r4
					if (envOn[v])
    894c:	b16b      	cbz	r3, 896a <audioFrameSynth+0x1ea>
						if (useVelocity == 0) envVel = 1.f;
    894e:	edd5 7a00 	vldr	s15, [r5]
    8952:	eef5 7a40 	vcmp.f32	s15, #0.0
    8956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						tADSRT_on(&envs[v][i], envVel);
    895a:	fe09 0a08 	vseleq.f32	s0, s18, s16
    895e:	f000 fc0f 	bl	9180 <__tADSRT_on_veneer>
						voiceSounding = 1;
    8962:	2001      	movs	r0, #1
    8964:	4b3c      	ldr	r3, [pc, #240]	; (8a58 <audioFrameSynth+0x2d8>)
    8966:	493d      	ldr	r1, [pc, #244]	; (8a5c <audioFrameSynth+0x2dc>)
    8968:	7018      	strb	r0, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    896a:	4589      	cmp	r9, r1
    896c:	f104 0408 	add.w	r4, r4, #8
    8970:	f105 05a8 	add.w	r5, r5, #168	; 0xa8
    8974:	d1e7      	bne.n	8946 <audioFrameSynth+0x1c6>
    8976:	9b03      	ldr	r3, [sp, #12]
						if (noteOnSync > 0.5f)
    8978:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				for (int v = 0; v < NUM_ENV; v++)
    897c:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8a60 <audioFrameSynth+0x2e0>
    8980:	f1c3 030c 	rsb	r3, r3, #12
						if (noteOnSync > 0.5f)
    8984:	e9dd 5404 	ldrd	r5, r4, [sp, #16]
    8988:	9303      	str	r3, [sp, #12]
				for (int v = 0; v < NUM_ENV; v++)
    898a:	9404      	str	r4, [sp, #16]
    898c:	4654      	mov	r4, sl
						if (noteOnSync > 0.5f)
    898e:	4b34      	ldr	r3, [pc, #208]	; (8a60 <audioFrameSynth+0x2e0>)
    8990:	eba9 0003 	sub.w	r0, r9, r3
					if (lfoOn[v])
    8994:	f819 3b01 	ldrb.w	r3, [r9], #1
    8998:	b163      	cbz	r3, 89b4 <audioFrameSynth+0x234>
						if (noteOnSync > 0.5f)
    899a:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
    899e:	eef4 7ac9 	vcmpe.f32	s15, s18
    89a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    89a6:	dd05      	ble.n	89b4 <audioFrameSynth+0x234>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    89a8:	9b03      	ldr	r3, [sp, #12]
    89aa:	4629      	mov	r1, r5
    89ac:	ed94 0a00 	vldr	s0, [r4]
    89b0:	58e3      	ldr	r3, [r4, r3]
    89b2:	4798      	blx	r3
				for (int v = 0; v < NUM_LFOS; v++)
    89b4:	4b2b      	ldr	r3, [pc, #172]	; (8a64 <audioFrameSynth+0x2e4>)
    89b6:	348c      	adds	r4, #140	; 0x8c
    89b8:	4599      	cmp	r9, r3
    89ba:	d1e8      	bne.n	898e <audioFrameSynth+0x20e>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    89bc:	492a      	ldr	r1, [pc, #168]	; (8a68 <audioFrameSynth+0x2e8>)
    89be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    89c2:	4a2a      	ldr	r2, [pc, #168]	; (8a6c <audioFrameSynth+0x2ec>)
    89c4:	780b      	ldrb	r3, [r1, #0]
    89c6:	9c04      	ldr	r4, [sp, #16]
    89c8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    89cc:	3301      	adds	r3, #1
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    89ce:	ed87 8a00 	vstr	s16, [r7]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    89d2:	ed92 7a00 	vldr	s14, [r2]
    89d6:	700b      	strb	r3, [r1, #0]
    89d8:	eee7 7a27 	vfma.f32	s15, s14, s15
    89dc:	edc7 7a02 	vstr	s15, [r7, #8]
			{
    89e0:	e709      	b.n	87f6 <audioFrameSynth+0x76>
    89e2:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8a80 <audioFrameSynth+0x300>
    89e6:	9403      	str	r4, [sp, #12]
    89e8:	465c      	mov	r4, fp
    89ea:	f109 0304 	add.w	r3, r9, #4
					if (envOn[v])
    89ee:	f819 2b01 	ldrb.w	r2, [r9], #1
    89f2:	b92a      	cbnz	r2, 8a00 <audioFrameSynth+0x280>
				for (int v = 0; v < NUM_ENV; v++)
    89f4:	4599      	cmp	r9, r3
    89f6:	f104 0408 	add.w	r4, r4, #8
    89fa:	d1f8      	bne.n	89ee <audioFrameSynth+0x26e>
    89fc:	9c03      	ldr	r4, [sp, #12]
    89fe:	e6fa      	b.n	87f6 <audioFrameSynth+0x76>
						tADSRT_off(&envs[v][i]);
    8a00:	4620      	mov	r0, r4
    8a02:	f000 fdf9 	bl	95f8 <__tADSRT_off_veneer>
    8a06:	4b15      	ldr	r3, [pc, #84]	; (8a5c <audioFrameSynth+0x2dc>)
    8a08:	e7f4      	b.n	89f4 <audioFrameSynth+0x274>
    8a0a:	bf00      	nop
    8a0c:	e0001000 	.word	0xe0001000
    8a10:	20000694 	.word	0x20000694
    8a14:	2001d818 	.word	0x2001d818
    8a18:	2001d14c 	.word	0x2001d14c
    8a1c:	37800080 	.word	0x37800080
    8a20:	20005550 	.word	0x20005550
    8a24:	200143fc 	.word	0x200143fc
    8a28:	30000000 	.word	0x30000000
    8a2c:	4b000000 	.word	0x4b000000
    8a30:	20014434 	.word	0x20014434
    8a34:	20000684 	.word	0x20000684
    8a38:	3f7d70a4 	.word	0x3f7d70a4
    8a3c:	20014438 	.word	0x20014438
    8a40:	200053c4 	.word	0x200053c4
    8a44:	200053c0 	.word	0x200053c0
    8a48:	20000aec 	.word	0x20000aec
    8a4c:	20000ae8 	.word	0x20000ae8
    8a50:	200054ec 	.word	0x200054ec
    8a54:	2001441c 	.word	0x2001441c
    8a58:	2001d920 	.word	0x2001d920
    8a5c:	2001d14c 	.word	0x2001d14c
    8a60:	2001d2cc 	.word	0x2001d2cc
    8a64:	2001d2d0 	.word	0x2001d2d0
    8a68:	2001d698 	.word	0x2001d698
    8a6c:	2001a26c 	.word	0x2001a26c
    8a70:	20005968 	.word	0x20005968
    8a74:	200054e0 	.word	0x200054e0
    8a78:	20019f94 	.word	0x20019f94
    8a7c:	2001d16c 	.word	0x2001d16c
    8a80:	2001d148 	.word	0x2001d148
	...

00008aa0 <audioInitVocal>:
tVoc vocal[NUM_STRINGS_PER_BOARD];
int prevTractLength[NUM_STRINGS_PER_BOARD] = {22, 22};
int32_t prevActualTractLength[NUM_STRINGS_PER_BOARD] = {22, 22};
float vocalDefaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};
void __ATTR_ITCMRAM audioInitVocal()
{
    8aa0:	b510      	push	{r4, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{
		tVoc_init(&vocal[v], 22, 65, &leaf);
    8aa2:	4c07      	ldr	r4, [pc, #28]	; (8ac0 <audioInitVocal+0x20>)
    8aa4:	2241      	movs	r2, #65	; 0x41
    8aa6:	4b07      	ldr	r3, [pc, #28]	; (8ac4 <audioInitVocal+0x24>)
    8aa8:	2116      	movs	r1, #22
    8aaa:	4620      	mov	r0, r4
    8aac:	f000 fcdc 	bl	9468 <__tVoc_init_veneer>
    8ab0:	1d20      	adds	r0, r4, #4
    8ab2:	4b04      	ldr	r3, [pc, #16]	; (8ac4 <audioInitVocal+0x24>)
    8ab4:	2241      	movs	r2, #65	; 0x41
    8ab6:	2116      	movs	r1, #22
	}
}
    8ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tVoc_init(&vocal[v], 22, 65, &leaf);
    8abc:	f000 bcd4 	b.w	9468 <__tVoc_init_veneer>
    8ac0:	2001d944 	.word	0x2001d944
    8ac4:	20005484 	.word	0x20005484
    8ac8:	f3af 8000 	nop.w
    8acc:	f3af 8000 	nop.w
    8ad0:	f3af 8000 	nop.w
    8ad4:	f3af 8000 	nop.w
    8ad8:	f3af 8000 	nop.w
    8adc:	f3af 8000 	nop.w

00008ae0 <audioFreeVocal>:

void __ATTR_ITCMRAM audioFreeVocal()
{
	;
}
    8ae0:	4770      	bx	lr
    8ae2:	bf00      	nop
    8ae4:	f3af 8000 	nop.w
    8ae8:	f3af 8000 	nop.w
    8aec:	f3af 8000 	nop.w
    8af0:	f3af 8000 	nop.w
    8af4:	f3af 8000 	nop.w
    8af8:	f3af 8000 	nop.w
    8afc:	f3af 8000 	nop.w

00008b00 <audioSwitchToVocal>:

void __ATTR_ITCMRAM audioSwitchToVocal()
{
    8b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8b04:	4c16      	ldr	r4, [pc, #88]	; (8b60 <audioSwitchToVocal+0x60>)
	for (int i = 0; i < 12; i++)
    8b06:	2500      	movs	r5, #0
    8b08:	4f16      	ldr	r7, [pc, #88]	; (8b64 <audioSwitchToVocal+0x64>)
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}

		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
		knobFrozen[i] = 1;
    8b0a:	f04f 0801 	mov.w	r8, #1
    8b0e:	4e16      	ldr	r6, [pc, #88]	; (8b68 <audioSwitchToVocal+0x68>)
    8b10:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8b70 <audioSwitchToVocal+0x70>
    8b14:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8b74 <audioSwitchToVocal+0x74>
{
    8b18:	ed2d 8b02 	vpush	{d8}
		tExpSmooth_setFactor(&knobSmoothers[i], 0.01f);
    8b1c:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8b6c <audioSwitchToVocal+0x6c>
    8b20:	eeb0 0a48 	vmov.f32	s0, s16
    8b24:	4620      	mov	r0, r4
    8b26:	f000 fc63 	bl	93f0 <__tExpSmooth_setFactor_veneer>
		if (voice == 60)
    8b2a:	f8da 3000 	ldr.w	r3, [sl]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    8b2e:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
    8b30:	3604      	adds	r6, #4
		if (voice == 60)
    8b32:	2b3c      	cmp	r3, #60	; 0x3c
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    8b34:	bf14      	ite	ne
    8b36:	ed16 0a01 	vldrne	s0, [r6, #-4]
			tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    8b3a:	ed97 0a00 	vldreq	s0, [r7]
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    8b3e:	f000 fcdf 	bl	9500 <__tExpSmooth_setValAndDest_veneer>
		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    8b42:	4620      	mov	r0, r4
    8b44:	ecb7 0a01 	vldmia	r7!, {s0}
	for (int i = 0; i < 12; i++)
    8b48:	3404      	adds	r4, #4
		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    8b4a:	f000 fcd9 	bl	9500 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    8b4e:	f809 8005 	strb.w	r8, [r9, r5]
	for (int i = 0; i < 12; i++)
    8b52:	3501      	adds	r5, #1
    8b54:	2d0c      	cmp	r5, #12
    8b56:	d1e3      	bne.n	8b20 <audioSwitchToVocal+0x20>
	}
}
    8b58:	ecbd 8b02 	vpop	{d8}
    8b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8b60:	20005430 	.word	0x20005430
    8b64:	20000b08 	.word	0x20000b08
    8b68:	200186f8 	.word	0x200186f8
    8b6c:	3c23d70a 	.word	0x3c23d70a
    8b70:	20014440 	.word	0x20014440
    8b74:	200053cc 	.word	0x200053cc
    8b78:	f3af 8000 	nop.w
    8b7c:	f3af 8000 	nop.w

00008b80 <audioTickVocal>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickVocal(void)
{
    8b80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b84:	4c40      	ldr	r4, [pc, #256]	; (8c88 <audioTickVocal+0x108>)
    8b86:	4d41      	ldr	r5, [pc, #260]	; (8c8c <audioTickVocal+0x10c>)
    8b88:	f104 0630 	add.w	r6, r4, #48	; 0x30
    8b8c:	ed2d 8b04 	vpush	{d8-d9}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    8b90:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    8b92:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    8b94:	f000 fd24 	bl	95e0 <__tExpSmooth_tick_veneer>
    8b98:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    8b9c:	42b4      	cmp	r4, r6
    8b9e:	d1f7      	bne.n	8b90 <audioTickVocal+0x10>

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);



	for (int i = 0; i < numStringsThisBoard; i++)
    8ba0:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8cb4 <audioTickVocal+0x134>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    8ba4:	483a      	ldr	r0, [pc, #232]	; (8c90 <audioTickVocal+0x110>)
    8ba6:	f000 fd1b 	bl	95e0 <__tExpSmooth_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    8baa:	f899 3000 	ldrb.w	r3, [r9]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    8bae:	eeb0 9a40 	vmov.f32	s18, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    8bb2:	2b00      	cmp	r3, #0
    8bb4:	d064      	beq.n	8c80 <audioTickVocal+0x100>
    8bb6:	4d37      	ldr	r5, [pc, #220]	; (8c94 <audioTickVocal+0x114>)
    8bb8:	2400      	movs	r4, #0
    8bba:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8cb8 <audioTickVocal+0x138>
    8bbe:	4f36      	ldr	r7, [pc, #216]	; (8c98 <audioTickVocal+0x118>)
	float tempSamp = 0.0f;
    8bc0:	eddf 8a36 	vldr	s17, [pc, #216]	; 8c9c <audioTickVocal+0x11c>
    8bc4:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 8cbc <audioTickVocal+0x13c>
    8bc8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8cc0 <audioTickVocal+0x140>
	{
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    8bcc:	4628      	mov	r0, r5
    8bce:	00a6      	lsls	r6, r4, #2
    8bd0:	f000 fc16 	bl	9400 <__tVoc_tick_veneer>
    8bd4:	eeb0 8a40 	vmov.f32	s16, s0
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    8bd8:	4456      	add	r6, sl
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    8bda:	eb0b 0084 	add.w	r0, fp, r4, lsl #2
    8bde:	f000 fbf3 	bl	93c8 <__tADSRT_tickNoInterp_veneer>
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    8be2:	ecf8 7a01 	vldmia	r8!, {s15}
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    8be6:	eee8 8a00 	vfma.f32	s17, s16, s0
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    8bea:	ed96 0a00 	vldr	s0, [r6]
	for (int i = 0; i < numStringsThisBoard; i++)
    8bee:	3401      	adds	r4, #1
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    8bf0:	ee30 0a27 	vadd.f32	s0, s0, s15
    8bf4:	f000 fd08 	bl	9608 <__mtofTableLookup_veneer>
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    8bf8:	4628      	mov	r0, r5
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    8bfa:	eca7 0a01 	vstmia	r7!, {s0}
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    8bfe:	f000 fbab 	bl	9358 <__tVoc_setFreq_veneer>
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    8c02:	4628      	mov	r0, r5
    8c04:	eeb0 0a49 	vmov.f32	s0, s18
    8c08:	f000 fc4e 	bl	94a8 <__tVoc_set_tenseness_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    8c0c:	f899 3000 	ldrb.w	r3, [r9]
    8c10:	3504      	adds	r5, #4
    8c12:	42a3      	cmp	r3, r4
    8c14:	dcda      	bgt.n	8bcc <audioTickVocal+0x4c>
		//Lfloat tongue = 12.0f + (16.0f * knobScaled[0]);
		//tVoc_set_tongue_shape(&vocal[i], tongue, 2.9f * knobScaled[1] + 0.1f);

	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    8c16:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8ca0 <audioTickVocal+0x120>
    8c1a:	eddf 7a22 	vldr	s15, [pc, #136]	; 8ca4 <audioTickVocal+0x124>
    8c1e:	eef0 0a40 	vmov.f32	s1, s0
    8c22:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8ca8 <audioTickVocal+0x128>
    8c26:	eee9 0a27 	vfma.f32	s1, s18, s15
    8c2a:	f000 fd15 	bl	9658 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
    8c2e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
    8c32:	491e      	ldr	r1, [pc, #120]	; (8cac <audioTickVocal+0x12c>)
	float omAlpha = 1.0f - alpha;
    8c34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    8c38:	4a1d      	ldr	r2, [pc, #116]	; (8cb0 <audioTickVocal+0x130>)
	int volIdxInt = (int) volIdx;
    8c3a:	ee17 3a90 	vmov	r3, s15
	tempSamp *= masterVolFromBrain;
    8c3e:	edd1 6a00 	vldr	s13, [r1]
	float alpha = volIdx-volIdxInt;
    8c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    8c46:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    8c48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    8c4c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    8c50:	ee70 7a67 	vsub.f32	s15, s0, s15
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    8c54:	ed93 6a00 	vldr	s12, [r3]
    8c58:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    8c5c:	ee37 7a67 	vsub.f32	s14, s14, s15
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    8c60:	edd2 5a00 	vldr	s11, [r2]
    8c64:	ee67 7aa5 	vmul.f32	s15, s15, s11
    8c68:	eee6 7a07 	vfma.f32	s15, s12, s14
	tempSamp *= outVol;
    8c6c:	ee67 7aa8 	vmul.f32	s15, s15, s17
	return tanhf(tempSamp);
}
    8c70:	ecbd 8b04 	vpop	{d8-d9}
	return tanhf(tempSamp);
    8c74:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    8c78:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return tanhf(tempSamp);
    8c7c:	f000 baa4 	b.w	91c8 <__tanhf_veneer>
	float tempSamp = 0.0f;
    8c80:	eddf 8a06 	vldr	s17, [pc, #24]	; 8c9c <audioTickVocal+0x11c>
    8c84:	e7c7      	b.n	8c16 <audioTickVocal+0x96>
    8c86:	bf00      	nop
    8c88:	200053e0 	.word	0x200053e0
    8c8c:	20005430 	.word	0x20005430
    8c90:	2001444c 	.word	0x2001444c
    8c94:	2001d944 	.word	0x2001d944
    8c98:	200143cc 	.word	0x200143cc
    8c9c:	00000000 	.word	0x00000000
    8ca0:	423c0000 	.word	0x423c0000
    8ca4:	42a00000 	.word	0x42a00000
    8ca8:	42fe0000 	.word	0x42fe0000
    8cac:	2000068c 	.word	0x2000068c
    8cb0:	200006a0 	.word	0x200006a0
    8cb4:	20000694 	.word	0x20000694
    8cb8:	2001441c 	.word	0x2001441c
    8cbc:	200053b4 	.word	0x200053b4
    8cc0:	20014414 	.word	0x20014414
    8cc4:	f3af 8000 	nop.w
    8cc8:	f3af 8000 	nop.w
    8ccc:	f3af 8000 	nop.w
    8cd0:	f3af 8000 	nop.w
    8cd4:	f3af 8000 	nop.w
    8cd8:	f3af 8000 	nop.w
    8cdc:	f3af 8000 	nop.w

00008ce0 <audioFrameVocal>:
{
    8ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
    8ce4:	4bbd      	ldr	r3, [pc, #756]	; (8fdc <audioFrameVocal+0x2fc>)
{
    8ce6:	4607      	mov	r7, r0
	if (resetStringInputs)
    8ce8:	f8df a340 	ldr.w	sl, [pc, #832]	; 902c <audioFrameVocal+0x34c>
		for (int i = 0; i < numStringsThisBoard; i++)
    8cec:	f8df 8340 	ldr.w	r8, [pc, #832]	; 9030 <audioFrameVocal+0x350>
{
    8cf0:	ed2d 8b08 	vpush	{d8-d11}
	uint32_t tempCountFrame = DWT->CYCCNT;
    8cf4:	685e      	ldr	r6, [r3, #4]
{
    8cf6:	b083      	sub	sp, #12
	if (resetStringInputs)
    8cf8:	f89a 3000 	ldrb.w	r3, [sl]
    8cfc:	2b00      	cmp	r3, #0
    8cfe:	f040 80da 	bne.w	8eb6 <audioFrameVocal+0x1d6>
	if (newPluck)
    8d02:	f8df 9330 	ldr.w	r9, [pc, #816]	; 9034 <audioFrameVocal+0x354>
		for (int i = 0; i < numStringsThisBoard; i++)
    8d06:	f898 1000 	ldrb.w	r1, [r8]
	if (newPluck)
    8d0a:	f8d9 3000 	ldr.w	r3, [r9]
    8d0e:	2b00      	cmp	r3, #0
    8d10:	f040 80f4 	bne.w	8efc <audioFrameVocal+0x21c>
	for (int i = 0; i < numStringsThisBoard; i++)
    8d14:	2900      	cmp	r1, #0
    8d16:	f000 809c 	beq.w	8e52 <audioFrameVocal+0x172>
		float doublecompute = knobScaled[1] > 0.5f;
    8d1a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    8d1e:	4db0      	ldr	r5, [pc, #704]	; (8fe0 <audioFrameVocal+0x300>)
    8d20:	f8df 9314 	ldr.w	r9, [pc, #788]	; 9038 <audioFrameVocal+0x358>
	for (int i = 0; i < numStringsThisBoard; i++)
    8d24:	f04f 0b00 	mov.w	fp, #0
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    8d28:	ed9f aaae 	vldr	s20, [pc, #696]	; 8fe4 <audioFrameVocal+0x304>
			int32_t squishedTract = (newTractLength*0.168f) ;
    8d2c:	ed9f baae 	vldr	s22, [pc, #696]	; 8fe8 <audioFrameVocal+0x308>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[3]) + 0.01f);
    8d30:	eddf 9aae 	vldr	s19, [pc, #696]	; 8fec <audioFrameVocal+0x30c>
    8d34:	ed9f 9aae 	vldr	s18, [pc, #696]	; 8ff0 <audioFrameVocal+0x310>
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    8d38:	eddf 8aae 	vldr	s17, [pc, #696]	; 8ff4 <audioFrameVocal+0x314>
    8d3c:	f8df a2fc 	ldr.w	sl, [pc, #764]	; 903c <audioFrameVocal+0x35c>
    8d40:	4cad      	ldr	r4, [pc, #692]	; (8ff8 <audioFrameVocal+0x318>)
    8d42:	e9cd 6700 	strd	r6, r7, [sp]
		float doublecompute = knobScaled[1] > 0.5f;
    8d46:	edd4 7a01 	vldr	s15, [r4, #4]
    8d4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    8d4e:	f8d9 3000 	ldr.w	r3, [r9]
		float doublecompute = knobScaled[1] > 0.5f;
    8d52:	eef0 6a04 	vmov.f32	s13, #4	; 0x40200000  2.5
    8d56:	eef4 7aea 	vcmpe.f32	s15, s21
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    8d5a:	ed94 8a00 	vldr	s16, [r4]
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    8d5e:	f103 020a 	add.w	r2, r3, #10
	for (int i = 0; i < numStringsThisBoard; i++)
    8d62:	f10b 0b01 	add.w	fp, fp, #1
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    8d66:	ee28 8a0a 	vmul.f32	s16, s16, s20
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    8d6a:	3b0a      	subs	r3, #10
		float doublecompute = knobScaled[1] > 0.5f;
    8d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    8d70:	ee07 2a90 	vmov	s15, r2
    8d74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		float doublecompute = knobScaled[1] > 0.5f;
    8d78:	fe37 7a26 	vselgt.f32	s14, s14, s13
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    8d7c:	ee28 8a07 	vmul.f32	s16, s16, s14
		float doublecompute = knobScaled[1] > 0.5f;
    8d80:	bfcc      	ite	gt
    8d82:	2601      	movgt	r6, #1
    8d84:	2600      	movle	r6, #0
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    8d86:	eef4 7ac8 	vcmpe.f32	s15, s16
    8d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8d8e:	d408      	bmi.n	8da2 <audioFrameVocal+0xc2>
    8d90:	ee07 3a90 	vmov	s15, r3
    8d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8d98:	eef4 7ac8 	vcmpe.f32	s15, s16
    8d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8da0:	dd14      	ble.n	8dcc <audioFrameVocal+0xec>
			int32_t squishedTract = (newTractLength*0.168f) ;
    8da2:	ee68 7a0b 	vmul.f32	s15, s16, s22
			if ( squishedTract != prevActualTractLength[i])
    8da6:	f8da 1000 	ldr.w	r1, [sl]
				tVoc_set_tractLength(&vocal[i],squishedTract   + 2);
    8daa:	4628      	mov	r0, r5
			int32_t squishedTract = (newTractLength*0.168f) ;
    8dac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    8db0:	ee17 7a90 	vmov	r7, s15
			if ( squishedTract != prevActualTractLength[i])
    8db4:	42b9      	cmp	r1, r7
				tVoc_set_tractLength(&vocal[i],squishedTract   + 2);
    8db6:	f107 0102 	add.w	r1, r7, #2
			if ( squishedTract != prevActualTractLength[i])
    8dba:	d003      	beq.n	8dc4 <audioFrameVocal+0xe4>
				tVoc_set_tractLength(&vocal[i],squishedTract   + 2);
    8dbc:	f000 fbe4 	bl	9588 <__tVoc_set_tractLength_veneer>
				prevActualTractLength[i] = squishedTract;
    8dc0:	f8ca 7000 	str.w	r7, [sl]
			prevTractLength[i] = newTractLength;
    8dc4:	eebd 8ac8 	vcvt.s32.f32	s16, s16
    8dc8:	ed89 8a00 	vstr	s16, [r9]
		tVoc_setDoubleComputeFlag(&vocal[i], doublecompute);
    8dcc:	4631      	mov	r1, r6
    8dce:	4628      	mov	r0, r5
    8dd0:	f000 f9a2 	bl	9118 <__tVoc_setDoubleComputeFlag_veneer>
		tVoc_setTurbulenceNoiseGain(&vocal[i], knobScaled[4]);
    8dd4:	4628      	mov	r0, r5
    8dd6:	ed94 0a04 	vldr	s0, [r4, #16]
	for (int i = 0; i < numStringsThisBoard; i++)
    8dda:	f109 0904 	add.w	r9, r9, #4
		tVoc_setTurbulenceNoiseGain(&vocal[i], knobScaled[4]);
    8dde:	f000 fbef 	bl	95c0 <__tVoc_setTurbulenceNoiseGain_veneer>
		tVoc_setAspirationNoiseGain(&vocal[i], knobScaled[5]);
    8de2:	4628      	mov	r0, r5
    8de4:	ed94 0a05 	vldr	s0, [r4, #20]
	for (int i = 0; i < numStringsThisBoard; i++)
    8de8:	f10a 0a04 	add.w	sl, sl, #4
		tVoc_setAspirationNoiseGain(&vocal[i], knobScaled[5]);
    8dec:	f000 f934 	bl	9058 <__tVoc_setAspirationNoiseGain_veneer>
		tVoc_setAspirationNoiseFilterFreq(&vocal[i], knobScaled[6]);
    8df0:	4628      	mov	r0, r5
    8df2:	ed94 0a06 	vldr	s0, [r4, #24]
    8df6:	f000 fc27 	bl	9648 <__tVoc_setAspirationNoiseFilterFreq_veneer>
		tVoc_setAspirationNoiseFilterQ(&vocal[i], knobScaled[7]);
    8dfa:	4628      	mov	r0, r5
    8dfc:	ed94 0a07 	vldr	s0, [r4, #28]
    8e00:	f000 fb6e 	bl	94e0 <__tVoc_setAspirationNoiseFilterQ_veneer>
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    8e04:	edd4 1a0b 	vldr	s3, [r4, #44]	; 0x2c
    8e08:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    8e0c:	4628      	mov	r0, r5
    8e0e:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    8e12:	ed94 0a08 	vldr	s0, [r4, #32]
    8e16:	f000 fa3b 	bl	9290 <__tVoc_set_tongue_shape_and_touch_veneer>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[3]) + 0.01f);
    8e1a:	eeb0 0a49 	vmov.f32	s0, s18
    8e1e:	edd4 7a03 	vldr	s15, [r4, #12]
    8e22:	4628      	mov	r0, r5
    8e24:	eea7 0aa9 	vfma.f32	s0, s15, s19
    8e28:	f000 fa52 	bl	92d0 <__tVoc_set_velum_veneer>
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    8e2c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
    8e30:	eeb0 0a68 	vmov.f32	s0, s17
    8e34:	ed94 7a02 	vldr	s14, [r4, #8]
    8e38:	4628      	mov	r0, r5
	for (int i = 0; i < numStringsThisBoard; i++)
    8e3a:	3504      	adds	r5, #4
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    8e3c:	eea7 0a27 	vfma.f32	s0, s14, s15
    8e40:	f000 fb86 	bl	9550 <__tVoc_rescaleDiameter_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    8e44:	f898 3000 	ldrb.w	r3, [r8]
    8e48:	455b      	cmp	r3, fp
    8e4a:	f73f af7c 	bgt.w	8d46 <audioFrameVocal+0x66>
    8e4e:	e9dd 6700 	ldrd	r6, r7, [sp]
    8e52:	4c6a      	ldr	r4, [pc, #424]	; (8ffc <audioFrameVocal+0x31c>)
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    8e54:	ed9f 8a6a 	vldr	s16, [pc, #424]	; 9000 <audioFrameVocal+0x320>
    8e58:	f504 7500 	add.w	r5, r4, #512	; 0x200
    8e5c:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    8e60:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    8e64:	f7ff fe8c 	bl	8b80 <audioTickVocal>
    8e68:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    8e6c:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    8e6e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    8e72:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    8e74:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    8e78:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    8e7c:	d1f2      	bne.n	8e64 <audioFrameVocal+0x184>
	if (switchStrings)
    8e7e:	4c61      	ldr	r4, [pc, #388]	; (9004 <audioFrameVocal+0x324>)
    8e80:	6823      	ldr	r3, [r4, #0]
    8e82:	2b00      	cmp	r3, #0
    8e84:	d16f      	bne.n	8f66 <audioFrameVocal+0x286>
	switchStrings = 0;
    8e86:	2200      	movs	r2, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8e88:	4b54      	ldr	r3, [pc, #336]	; (8fdc <audioFrameVocal+0x2fc>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8e8a:	485f      	ldr	r0, [pc, #380]	; (9008 <audioFrameVocal+0x328>)
	switchStrings = 0;
    8e8c:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8e8e:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8e90:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8e94:	1b9b      	subs	r3, r3, r6
    8e96:	495d      	ldr	r1, [pc, #372]	; (900c <audioFrameVocal+0x32c>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8e98:	4a5d      	ldr	r2, [pc, #372]	; (9010 <audioFrameVocal+0x330>)
    8e9a:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8e9e:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    8ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
    8ea8:	edc2 7a00 	vstr	s15, [r2]
}
    8eac:	b003      	add	sp, #12
    8eae:	ecbd 8b08 	vpop	{d8-d11}
    8eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    8eb6:	f898 1000 	ldrb.w	r1, [r8]
    8eba:	2900      	cmp	r1, #0
    8ebc:	d057      	beq.n	8f6e <audioFrameVocal+0x28e>
    8ebe:	2400      	movs	r4, #0
    8ec0:	f8df b17c 	ldr.w	fp, [pc, #380]	; 9040 <audioFrameVocal+0x360>
    8ec4:	4d53      	ldr	r5, [pc, #332]	; (9014 <audioFrameVocal+0x334>)
			previousStringInputs[i] = 0;
    8ec6:	46a1      	mov	r9, r4
			tADSRT_clear(&fenvelopes[i]);
    8ec8:	4658      	mov	r0, fp
		for (int i = 0; i < numStringsThisBoard; i++)
    8eca:	f10b 0b04 	add.w	fp, fp, #4
			tADSRT_clear(&fenvelopes[i]);
    8ece:	f000 fa83 	bl	93d8 <__tADSRT_clear_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    8ed2:	f898 1000 	ldrb.w	r1, [r8]
			previousStringInputs[i] = 0;
    8ed6:	f825 9014 	strh.w	r9, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    8eda:	3401      	adds	r4, #1
			previousStringInputs[i] = 0;
    8edc:	f04f 0300 	mov.w	r3, #0
		for (int i = 0; i < numStringsThisBoard; i++)
    8ee0:	42a1      	cmp	r1, r4
    8ee2:	dcf1      	bgt.n	8ec8 <audioFrameVocal+0x1e8>
		resetStringInputs = 0;
    8ee4:	f88a 3000 	strb.w	r3, [sl]
		newPluck = 1;
    8ee8:	2301      	movs	r3, #1
    8eea:	f8df 9148 	ldr.w	r9, [pc, #328]	; 9034 <audioFrameVocal+0x354>
    8eee:	f8c9 3000 	str.w	r3, [r9]
	if (newPluck)
    8ef2:	f8d9 3000 	ldr.w	r3, [r9]
    8ef6:	2b00      	cmp	r3, #0
    8ef8:	f43f af0c 	beq.w	8d14 <audioFrameVocal+0x34>
		for (int i = 0; i < numStringsThisBoard; i++)
    8efc:	2900      	cmp	r1, #0
    8efe:	d06a      	beq.n	8fd6 <audioFrameVocal+0x2f6>
    8f00:	f8df a140 	ldr.w	sl, [pc, #320]	; 9044 <audioFrameVocal+0x364>
    8f04:	2400      	movs	r4, #0
    8f06:	f8df b138 	ldr.w	fp, [pc, #312]	; 9040 <audioFrameVocal+0x360>
    8f0a:	4b43      	ldr	r3, [pc, #268]	; (9018 <audioFrameVocal+0x338>)
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8f0c:	9600      	str	r6, [sp, #0]
    8f0e:	465e      	mov	r6, fp
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8f10:	eddf 8a42 	vldr	s17, [pc, #264]	; 901c <audioFrameVocal+0x33c>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8f14:	46d3      	mov	fp, sl
    8f16:	4d3f      	ldr	r5, [pc, #252]	; (9014 <audioFrameVocal+0x334>)
    8f18:	469a      	mov	sl, r3
    8f1a:	4a41      	ldr	r2, [pc, #260]	; (9020 <audioFrameVocal+0x340>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    8f1c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    8f20:	b29b      	uxth	r3, r3
    8f22:	b91b      	cbnz	r3, 8f2c <audioFrameVocal+0x24c>
    8f24:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    8f28:	b29b      	uxth	r3, r3
    8f2a:	bb63      	cbnz	r3, 8f86 <audioFrameVocal+0x2a6>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    8f2c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    8f30:	b29b      	uxth	r3, r3
    8f32:	b123      	cbz	r3, 8f3e <audioFrameVocal+0x25e>
    8f34:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    8f38:	b29b      	uxth	r3, r3
    8f3a:	2b00      	cmp	r3, #0
    8f3c:	d046      	beq.n	8fcc <audioFrameVocal+0x2ec>
			previousStringInputs[i] = stringInputs[i];
    8f3e:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    8f42:	f10a 0a04 	add.w	sl, sl, #4
    8f46:	f10b 0b04 	add.w	fp, fp, #4
    8f4a:	3604      	adds	r6, #4
			previousStringInputs[i] = stringInputs[i];
    8f4c:	b289      	uxth	r1, r1
    8f4e:	f825 1014 	strh.w	r1, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    8f52:	3401      	adds	r4, #1
    8f54:	f898 1000 	ldrb.w	r1, [r8]
    8f58:	42a1      	cmp	r1, r4
    8f5a:	dcdf      	bgt.n	8f1c <audioFrameVocal+0x23c>
    8f5c:	9e00      	ldr	r6, [sp, #0]
		newPluck = 0;
    8f5e:	2300      	movs	r3, #0
    8f60:	f8c9 3000 	str.w	r3, [r9]
    8f64:	e6d6      	b.n	8d14 <audioFrameVocal+0x34>
		switchStringModel(switchStrings);
    8f66:	6820      	ldr	r0, [r4, #0]
    8f68:	f7f8 f9fa 	bl	1360 <switchStringModel>
    8f6c:	e78b      	b.n	8e86 <audioFrameVocal+0x1a6>
		newPluck = 1;
    8f6e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 9034 <audioFrameVocal+0x354>
    8f72:	2301      	movs	r3, #1
		resetStringInputs = 0;
    8f74:	f88a 1000 	strb.w	r1, [sl]
		newPluck = 1;
    8f78:	f8c9 3000 	str.w	r3, [r9]
	if (newPluck)
    8f7c:	f8d9 3000 	ldr.w	r3, [r9]
    8f80:	2b00      	cmp	r3, #0
    8f82:	d1ec      	bne.n	8f5e <audioFrameVocal+0x27e>
    8f84:	e765      	b.n	8e52 <audioFrameVocal+0x172>
				stringOctave[i] = octave;
    8f86:	4b27      	ldr	r3, [pc, #156]	; (9024 <audioFrameVocal+0x344>)
    8f88:	edd3 7a00 	vldr	s15, [r3]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8f8c:	4b26      	ldr	r3, [pc, #152]	; (9028 <audioFrameVocal+0x348>)
				stringOctave[i] = octave;
    8f8e:	edca 7a00 	vstr	s15, [sl]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8f92:	eb03 0184 	add.w	r1, r3, r4, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8f96:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8f9a:	ed91 0a00 	vldr	s0, [r1]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8f9e:	b29b      	uxth	r3, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8fa0:	ee37 0a80 	vadd.f32	s0, s15, s0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8fa4:	ee08 3a10 	vmov	s16, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8fa8:	f000 f896 	bl	90d8 <__mtof_veneer>
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    8fac:	4630      	mov	r0, r6
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8fae:	ed8b 0a00 	vstr	s0, [fp]
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    8fb2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    8fb6:	f000 f997 	bl	92e8 <__tADSRT_setSustain_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8fba:	eeb8 0ac8 	vcvt.f32.s32	s0, s16
				tADSRT_on(&fenvelopes[i], amplitz);
    8fbe:	4630      	mov	r0, r6
    8fc0:	ee20 0a28 	vmul.f32	s0, s0, s17
    8fc4:	f000 f8dc 	bl	9180 <__tADSRT_on_veneer>
			{
    8fc8:	4a15      	ldr	r2, [pc, #84]	; (9020 <audioFrameVocal+0x340>)
    8fca:	e7b8      	b.n	8f3e <audioFrameVocal+0x25e>
				tADSRT_off(&fenvelopes[i]);
    8fcc:	4630      	mov	r0, r6
    8fce:	f000 fb13 	bl	95f8 <__tADSRT_off_veneer>
    8fd2:	4a13      	ldr	r2, [pc, #76]	; (9020 <audioFrameVocal+0x340>)
    8fd4:	e7b3      	b.n	8f3e <audioFrameVocal+0x25e>
		newPluck = 0;
    8fd6:	f8c9 1000 	str.w	r1, [r9]
	for (int i = 0; i < numStringsThisBoard; i++)
    8fda:	e73a      	b.n	8e52 <audioFrameVocal+0x172>
    8fdc:	e0001000 	.word	0xe0001000
    8fe0:	2001d944 	.word	0x2001d944
    8fe4:	42c80000 	.word	0x42c80000
    8fe8:	3e2c0831 	.word	0x3e2c0831
    8fec:	3ecccccd 	.word	0x3ecccccd
    8ff0:	3c23d70a 	.word	0x3c23d70a
    8ff4:	3cc8b439 	.word	0x3cc8b439
    8ff8:	200053e0 	.word	0x200053e0
    8ffc:	30000000 	.word	0x30000000
    9000:	4b000000 	.word	0x4b000000
    9004:	20014434 	.word	0x20014434
    9008:	20000684 	.word	0x20000684
    900c:	20014438 	.word	0x20014438
    9010:	200053c4 	.word	0x200053c4
    9014:	20005550 	.word	0x20005550
    9018:	2001441c 	.word	0x2001441c
    901c:	37800080 	.word	0x37800080
    9020:	200143fc 	.word	0x200143fc
    9024:	200054ec 	.word	0x200054ec
    9028:	20014414 	.word	0x20014414
    902c:	20005968 	.word	0x20005968
    9030:	20000694 	.word	0x20000694
    9034:	200054e0 	.word	0x200054e0
    9038:	20000b00 	.word	0x20000b00
    903c:	20000af8 	.word	0x20000af8
    9040:	200053b4 	.word	0x200053b4
    9044:	200143cc 	.word	0x200143cc

00009048 <__tTString_setPickupModFreq_veneer>:
    9048:	f85f f000 	ldr.w	pc, [pc]	; 904c <__tTString_setPickupModFreq_veneer+0x4>
    904c:	0801484d 	.word	0x0801484d

00009050 <__tVZFilterBell_setGain_veneer>:
    9050:	f85f f000 	ldr.w	pc, [pc]	; 9054 <__tVZFilterBell_setGain_veneer+0x4>
    9054:	080106f5 	.word	0x080106f5

00009058 <__tVoc_setAspirationNoiseGain_veneer>:
    9058:	f85f f000 	ldr.w	pc, [pc]	; 905c <__tVoc_setAspirationNoiseGain_veneer+0x4>
    905c:	0801640d 	.word	0x0801640d

00009060 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    9060:	f85f f000 	ldr.w	pc, [pc]	; 9064 <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    9064:	08013561 	.word	0x08013561

00009068 <__tTString_free_veneer>:
    9068:	f85f f000 	ldr.w	pc, [pc]	; 906c <__tTString_free_veneer+0x4>
    906c:	08013845 	.word	0x08013845

00009070 <__tPBSawSquare_setFreq_veneer>:
    9070:	f85f f000 	ldr.w	pc, [pc]	; 9074 <__tPBSawSquare_setFreq_veneer+0x4>
    9074:	080129fd 	.word	0x080129fd

00009078 <__tSquareLFO_setFreq_veneer>:
    9078:	f85f f000 	ldr.w	pc, [pc]	; 907c <__tSquareLFO_setFreq_veneer+0x4>
    907c:	08012c99 	.word	0x08012c99

00009080 <__tStiffString_updateOscillators_veneer>:
    9080:	f85f f000 	ldr.w	pc, [pc]	; 9084 <__tStiffString_updateOscillators_veneer+0x4>
    9084:	08014d81 	.word	0x08014d81

00009088 <__tPBSaw_setFreq_veneer>:
    9088:	f85f f000 	ldr.w	pc, [pc]	; 908c <__tPBSaw_setFreq_veneer+0x4>
    908c:	08012911 	.word	0x08012911

00009090 <__setLFOShapes_veneer>:
    9090:	f85f f000 	ldr.w	pc, [pc]	; 9094 <__setLFOShapes_veneer+0x4>
    9094:	08001d0d 	.word	0x08001d0d

00009098 <__tCrusher_setQuality_veneer>:
    9098:	f85f f000 	ldr.w	pc, [pc]	; 909c <__tCrusher_setQuality_veneer+0x4>
    909c:	0800de6d 	.word	0x0800de6d

000090a0 <__tSquareLFO_setPulseWidth_veneer>:
    90a0:	f85f f000 	ldr.w	pc, [pc]	; 90a4 <__tSquareLFO_setPulseWidth_veneer+0x4>
    90a4:	08012cc9 	.word	0x08012cc9

000090a8 <__tVZFilterHS_setFreqFast_veneer>:
    90a8:	f85f f000 	ldr.w	pc, [pc]	; 90ac <__tVZFilterHS_setFreqFast_veneer+0x4>
    90ac:	08010155 	.word	0x08010155

000090b0 <__dbToATableLookup_veneer>:
    90b0:	f85f f000 	ldr.w	pc, [pc]	; 90b4 <__dbToATableLookup_veneer+0x4>
    90b4:	08000809 	.word	0x08000809

000090b8 <__tTString_setWindingsPerInch_veneer>:
    90b8:	f85f f000 	ldr.w	pc, [pc]	; 90bc <__tTString_setWindingsPerInch_veneer+0x4>
    90bc:	08014ce5 	.word	0x08014ce5

000090c0 <__tTString_pluck_veneer>:
    90c0:	f85f f000 	ldr.w	pc, [pc]	; 90c4 <__tTString_pluck_veneer+0x4>
    90c4:	08014a55 	.word	0x08014a55

000090c8 <__tADSRT_setLeakFactor_veneer>:
    90c8:	f85f f000 	ldr.w	pc, [pc]	; 90cc <__tADSRT_setLeakFactor_veneer+0x4>
    90cc:	0800e39d 	.word	0x0800e39d

000090d0 <__tStiffString_pluck_veneer>:
    90d0:	f85f f000 	ldr.w	pc, [pc]	; 90d4 <__tStiffString_pluck_veneer+0x4>
    90d4:	080150b1 	.word	0x080150b1

000090d8 <__mtof_veneer>:
    90d8:	f85f f000 	ldr.w	pc, [pc]	; 90dc <__mtof_veneer+0x4>
    90dc:	08011e31 	.word	0x08011e31

000090e0 <__tTriLFO_tick_veneer>:
    90e0:	f85f f000 	ldr.w	pc, [pc]	; 90e4 <__tTriLFO_tick_veneer+0x4>
    90e4:	08012f59 	.word	0x08012f59

000090e8 <__arm_fir_decimate_f32_veneer>:
    90e8:	f85f f000 	ldr.w	pc, [pc]	; 90ec <__arm_fir_decimate_f32_veneer+0x4>
    90ec:	080005b5 	.word	0x080005b5

000090f0 <__tStiffString_setDecayHighFreqNoUpdate_veneer>:
    90f0:	f85f f000 	ldr.w	pc, [pc]	; 90f4 <__tStiffString_setDecayHighFreqNoUpdate_veneer+0x4>
    90f4:	080151cd 	.word	0x080151cd

000090f8 <__tCycle_setFreq_veneer>:
    90f8:	f85f f000 	ldr.w	pc, [pc]	; 90fc <__tCycle_setFreq_veneer+0x4>
    90fc:	0801234d 	.word	0x0801234d

00009100 <__tCycle_init_veneer>:
    9100:	f85f f000 	ldr.w	pc, [pc]	; 9104 <__tCycle_init_veneer+0x4>
    9104:	08012289 	.word	0x08012289

00009108 <__tTString_setOpenStringFrequency_veneer>:
    9108:	f85f f000 	ldr.w	pc, [pc]	; 910c <__tTString_setOpenStringFrequency_veneer+0x4>
    910c:	0801490d 	.word	0x0801490d

00009110 <__tPickupNonLinearity_free_veneer>:
    9110:	f85f f000 	ldr.w	pc, [pc]	; 9114 <__tPickupNonLinearity_free_veneer+0x4>
    9114:	08013161 	.word	0x08013161

00009118 <__tVoc_setDoubleComputeFlag_veneer>:
    9118:	f85f f000 	ldr.w	pc, [pc]	; 911c <__tVoc_setDoubleComputeFlag_veneer+0x4>
    911c:	080163cd 	.word	0x080163cd

00009120 <__tSquareLFO_tick_veneer>:
    9120:	f85f f000 	ldr.w	pc, [pc]	; 9124 <__tSquareLFO_tick_veneer+0x4>
    9124:	08012c4d 	.word	0x08012c4d

00009128 <__tDiodeFilter_tick_veneer>:
    9128:	f85f f000 	ldr.w	pc, [pc]	; 912c <__tDiodeFilter_tick_veneer+0x4>
    912c:	08010865 	.word	0x08010865

00009130 <__tVZFilterBell_setBandwidth_veneer>:
    9130:	f85f f000 	ldr.w	pc, [pc]	; 9134 <__tVZFilterBell_setBandwidth_veneer+0x4>
    9134:	08010491 	.word	0x08010491

00009138 <__memcpy_veneer>:
    9138:	f85f f000 	ldr.w	pc, [pc]	; 913c <__memcpy_veneer+0x4>
    913c:	08016909 	.word	0x08016909

00009140 <__HAL_SPI_Abort_veneer>:
    9140:	f85f f000 	ldr.w	pc, [pc]	; 9144 <__HAL_SPI_Abort_veneer+0x4>
    9144:	0800a661 	.word	0x0800a661

00009148 <__tPBTriangle_setFreq_veneer>:
    9148:	f85f f000 	ldr.w	pc, [pc]	; 914c <__tPBTriangle_setFreq_veneer+0x4>
    914c:	08012525 	.word	0x08012525

00009150 <__tSimpleLivingString3_tick_veneer>:
    9150:	f85f f000 	ldr.w	pc, [pc]	; 9154 <__tSimpleLivingString3_tick_veneer+0x4>
    9154:	0801368d 	.word	0x0801368d

00009158 <__fastPowf_veneer>:
    9158:	f85f f000 	ldr.w	pc, [pc]	; 915c <__fastPowf_veneer+0x4>
    915c:	08011805 	.word	0x08011805

00009160 <__tTString_setPeakFilterQ_veneer>:
    9160:	f85f f000 	ldr.w	pc, [pc]	; 9164 <__tTString_setPeakFilterQ_veneer+0x4>
    9164:	08014d19 	.word	0x08014d19

00009168 <__tPBSawSquare_setShape_veneer>:
    9168:	f85f f000 	ldr.w	pc, [pc]	; 916c <__tPBSawSquare_setShape_veneer+0x4>
    916c:	08012a15 	.word	0x08012a15

00009170 <__tHighpass_tick_veneer>:
    9170:	f85f f000 	ldr.w	pc, [pc]	; 9174 <__tHighpass_tick_veneer+0x4>
    9174:	0800f329 	.word	0x0800f329

00009178 <__tADSRT_tick_veneer>:
    9178:	f85f f000 	ldr.w	pc, [pc]	; 917c <__tADSRT_tick_veneer+0x4>
    917c:	0800e405 	.word	0x0800e405

00009180 <__tADSRT_on_veneer>:
    9180:	f85f f000 	ldr.w	pc, [pc]	; 9184 <__tADSRT_on_veneer+0x4>
    9184:	0800e3c1 	.word	0x0800e3c1

00009188 <__tIntPhasor_tick_veneer>:
    9188:	f85f f000 	ldr.w	pc, [pc]	; 918c <__tIntPhasor_tick_veneer+0x4>
    918c:	08012b45 	.word	0x08012b45

00009190 <__tVZFilterBell_tick_veneer>:
    9190:	f85f f000 	ldr.w	pc, [pc]	; 9194 <__tVZFilterBell_tick_veneer+0x4>
    9194:	08010439 	.word	0x08010439

00009198 <__tLadderFilter_tick_veneer>:
    9198:	f85f f000 	ldr.w	pc, [pc]	; 919c <__tLadderFilter_tick_veneer+0x4>
    919c:	08011249 	.word	0x08011249

000091a0 <__tVZFilter_setGain_veneer>:
    91a0:	f85f f000 	ldr.w	pc, [pc]	; 91a4 <__tVZFilter_setGain_veneer+0x4>
    91a4:	0800f9b9 	.word	0x0800f9b9

000091a8 <__fasterexpf_veneer>:
    91a8:	f85f f000 	ldr.w	pc, [pc]	; 91ac <__fasterexpf_veneer+0x4>
    91ac:	080116b5 	.word	0x080116b5

000091b0 <__tTString_setPhantomHarmonicsGain_veneer>:
    91b0:	f85f f000 	ldr.w	pc, [pc]	; 91b4 <__tTString_setPhantomHarmonicsGain_veneer+0x4>
    91b4:	08014925 	.word	0x08014925

000091b8 <__LEAF_mapToZeroToOneOutput_veneer>:
    91b8:	f85f f000 	ldr.w	pc, [pc]	; 91bc <__LEAF_mapToZeroToOneOutput_veneer+0x4>
    91bc:	080115b5 	.word	0x080115b5

000091c0 <__tStiffString_setPluckPosNoUpdate_veneer>:
    91c0:	f85f f000 	ldr.w	pc, [pc]	; 91c4 <__tStiffString_setPluckPosNoUpdate_veneer+0x4>
    91c4:	08015199 	.word	0x08015199

000091c8 <__tanhf_veneer>:
    91c8:	f85f f000 	ldr.w	pc, [pc]	; 91cc <__tanhf_veneer+0x4>
    91cc:	080172b9 	.word	0x080172b9

000091d0 <__tSimpleLivingString3_initToPool_veneer>:
    91d0:	f85f f000 	ldr.w	pc, [pc]	; 91d4 <__tSimpleLivingString3_initToPool_veneer+0x4>
    91d4:	080132e1 	.word	0x080132e1

000091d8 <__tSimpleLivingString3_setPickupPoint_veneer>:
    91d8:	f85f f000 	ldr.w	pc, [pc]	; 91dc <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    91dc:	0801383d 	.word	0x0801383d

000091e0 <__tDiodeFilter_setFreqFast_veneer>:
    91e0:	f85f f000 	ldr.w	pc, [pc]	; 91e4 <__tDiodeFilter_setFreqFast_veneer+0x4>
    91e4:	08011021 	.word	0x08011021

000091e8 <__tTString_setTensionGain_veneer>:
    91e8:	f85f f000 	ldr.w	pc, [pc]	; 91ec <__tTString_setTensionGain_veneer+0x4>
    91ec:	080148f5 	.word	0x080148f5

000091f0 <__tTString_tick_veneer>:
    91f0:	f85f f000 	ldr.w	pc, [pc]	; 91f4 <__tTString_tick_veneer+0x4>
    91f4:	08013959 	.word	0x08013959

000091f8 <__setFilterTypes_veneer>:
    91f8:	f85f f000 	ldr.w	pc, [pc]	; 91fc <__setFilterTypes_veneer+0x4>
    91fc:	08001b75 	.word	0x08001b75

00009200 <__tTString_setPickupModAmp_veneer>:
    9200:	f85f f000 	ldr.w	pc, [pc]	; 9204 <__tTString_setPickupModAmp_veneer+0x4>
    9204:	08014845 	.word	0x08014845

00009208 <__tExpSmooth_setVal_veneer>:
    9208:	f85f f000 	ldr.w	pc, [pc]	; 920c <__tExpSmooth_setVal_veneer+0x4>
    920c:	0800e9b9 	.word	0x0800e9b9

00009210 <__tExpSmooth_init_veneer>:
    9210:	f85f f000 	ldr.w	pc, [pc]	; 9214 <__tExpSmooth_init_veneer+0x4>
    9214:	0800e871 	.word	0x0800e871

00009218 <__tVZFilter_setFreqFast_veneer>:
    9218:	f85f f000 	ldr.w	pc, [pc]	; 921c <__tVZFilter_setFreqFast_veneer+0x4>
    921c:	0800f6e5 	.word	0x0800f6e5

00009220 <__tVZFilter_setFrequencyAndResonance_veneer>:
    9220:	f85f f000 	ldr.w	pc, [pc]	; 9224 <__tVZFilter_setFrequencyAndResonance_veneer+0x4>
    9224:	0800fa29 	.word	0x0800fa29

00009228 <__audioSwitchToSynth_veneer>:
    9228:	f85f f000 	ldr.w	pc, [pc]	; 922c <__audioSwitchToSynth_veneer+0x4>
    922c:	08003609 	.word	0x08003609

00009230 <__tTriLFO_setPhase_veneer>:
    9230:	f85f f000 	ldr.w	pc, [pc]	; 9234 <__tTriLFO_setPhase_veneer+0x4>
    9234:	08012fa5 	.word	0x08012fa5

00009238 <__tTriLFO_setFreq_veneer>:
    9238:	f85f f000 	ldr.w	pc, [pc]	; 923c <__tTriLFO_setFreq_veneer+0x4>
    923c:	08012f8d 	.word	0x08012f8d

00009240 <__tTString_setPickupAmount_veneer>:
    9240:	f85f f000 	ldr.w	pc, [pc]	; 9244 <__tTString_setPickupAmount_veneer+0x4>
    9244:	0801483d 	.word	0x0801483d

00009248 <__tVZFilterLS_setGain_veneer>:
    9248:	f85f f000 	ldr.w	pc, [pc]	; 924c <__tVZFilterLS_setGain_veneer+0x4>
    924c:	0800fedd 	.word	0x0800fedd

00009250 <__tCrusher_setOperation_veneer>:
    9250:	f85f f000 	ldr.w	pc, [pc]	; 9254 <__tCrusher_setOperation_veneer+0x4>
    9254:	0800de59 	.word	0x0800de59

00009258 <__tPBTriangle_setSkew_veneer>:
    9258:	f85f f000 	ldr.w	pc, [pc]	; 925c <__tPBTriangle_setSkew_veneer+0x4>
    925c:	08012539 	.word	0x08012539

00009260 <__tVZFilter_setResonance_veneer>:
    9260:	f85f f000 	ldr.w	pc, [pc]	; 9264 <__tVZFilter_setResonance_veneer+0x4>
    9264:	0800f9f1 	.word	0x0800f9f1

00009268 <__tCycle_tick_veneer>:
    9268:	f85f f000 	ldr.w	pc, [pc]	; 926c <__tCycle_tick_veneer+0x4>
    926c:	08012301 	.word	0x08012301

00009270 <__tPBTriangle_tick_veneer>:
    9270:	f85f f000 	ldr.w	pc, [pc]	; 9274 <__tPBTriangle_tick_veneer+0x4>
    9274:	080123f1 	.word	0x080123f1

00009278 <__tLinearDelay_setDelay_veneer>:
    9278:	f85f f000 	ldr.w	pc, [pc]	; 927c <__tLinearDelay_setDelay_veneer+0x4>
    927c:	0800d795 	.word	0x0800d795

00009280 <__tExpSmooth_free_veneer>:
    9280:	f85f f000 	ldr.w	pc, [pc]	; 9284 <__tExpSmooth_free_veneer+0x4>
    9284:	0800e959 	.word	0x0800e959

00009288 <__tStiffString_tick_veneer>:
    9288:	f85f f000 	ldr.w	pc, [pc]	; 928c <__tStiffString_tick_veneer+0x4>
    928c:	08015009 	.word	0x08015009

00009290 <__tVoc_set_tongue_shape_and_touch_veneer>:
    9290:	f85f f000 	ldr.w	pc, [pc]	; 9294 <__tVoc_set_tongue_shape_and_touch_veneer+0x4>
    9294:	080166d9 	.word	0x080166d9

00009298 <__tStiffString_mute_veneer>:
    9298:	f85f f000 	ldr.w	pc, [pc]	; 929c <__tStiffString_mute_veneer+0x4>
    929c:	080150a5 	.word	0x080150a5

000092a0 <__tTString_setPeakFilterFreq_veneer>:
    92a0:	f85f f000 	ldr.w	pc, [pc]	; 92a4 <__tTString_setPeakFilterFreq_veneer+0x4>
    92a4:	08014d0d 	.word	0x08014d0d

000092a8 <__tTString_setWoundOrUnwound_veneer>:
    92a8:	f85f f000 	ldr.w	pc, [pc]	; 92ac <__tTString_setWoundOrUnwound_veneer+0x4>
    92ac:	08014c91 	.word	0x08014c91

000092b0 <__tTString_setSlideGain_veneer>:
    92b0:	f85f f000 	ldr.w	pc, [pc]	; 92b4 <__tTString_setSlideGain_veneer+0x4>
    92b4:	0801492d 	.word	0x0801492d

000092b8 <__tSVF_setFreqFast_veneer>:
    92b8:	f85f f000 	ldr.w	pc, [pc]	; 92bc <__tSVF_setFreqFast_veneer+0x4>
    92bc:	0800f1b9 	.word	0x0800f1b9

000092c0 <__tTString_setFilterFreqDirectly_veneer>:
    92c0:	f85f f000 	ldr.w	pc, [pc]	; 92c4 <__tTString_setFilterFreqDirectly_veneer+0x4>
    92c4:	0801489d 	.word	0x0801489d

000092c8 <__changeOversampling_veneer>:
    92c8:	f85f f000 	ldr.w	pc, [pc]	; 92cc <__changeOversampling_veneer+0x4>
    92cc:	08003651 	.word	0x08003651

000092d0 <__tVoc_set_velum_veneer>:
    92d0:	f85f f000 	ldr.w	pc, [pc]	; 92d4 <__tVoc_set_velum_veneer+0x4>
    92d4:	080163f5 	.word	0x080163f5

000092d8 <__tDiodeFilter_tickEfficient_veneer>:
    92d8:	f85f f000 	ldr.w	pc, [pc]	; 92dc <__tDiodeFilter_tickEfficient_veneer+0x4>
    92dc:	08010c41 	.word	0x08010c41

000092e0 <__setEffectsFunctions_veneer>:
    92e0:	f85f f000 	ldr.w	pc, [pc]	; 92e4 <__setEffectsFunctions_veneer+0x4>
    92e4:	08001641 	.word	0x08001641

000092e8 <__tADSRT_setSustain_veneer>:
    92e8:	f85f f000 	ldr.w	pc, [pc]	; 92ec <__tADSRT_setSustain_veneer+0x4>
    92ec:	0800e341 	.word	0x0800e341

000092f0 <__tTString_mute_veneer>:
    92f0:	f85f f000 	ldr.w	pc, [pc]	; 92f4 <__tTString_mute_veneer+0x4>
    92f4:	0801485d 	.word	0x0801485d

000092f8 <__LEAF_map_veneer>:
    92f8:	f85f f000 	ldr.w	pc, [pc]	; 92fc <__LEAF_map_veneer+0x4>
    92fc:	08011589 	.word	0x08011589

00009300 <__tTString_setPickupFilterFreq_veneer>:
    9300:	f85f f000 	ldr.w	pc, [pc]	; 9304 <__tTString_setPickupFilterFreq_veneer+0x4>
    9304:	08014cf5 	.word	0x08014cf5

00009308 <__tCompressor_tick_veneer>:
    9308:	f85f f000 	ldr.w	pc, [pc]	; 930c <__tCompressor_tick_veneer+0x4>
    930c:	0800df9d 	.word	0x0800df9d

00009310 <__LEAF_shaper_veneer>:
    9310:	f85f f000 	ldr.w	pc, [pc]	; 9314 <__LEAF_shaper_veneer+0x4>
    9314:	080118a9 	.word	0x080118a9

00009318 <__tSineTriLFO_tick_veneer>:
    9318:	f85f f000 	ldr.w	pc, [pc]	; 931c <__tSineTriLFO_tick_veneer+0x4>
    931c:	08013011 	.word	0x08013011

00009320 <__tVZFilterLS_setFreqFast_veneer>:
    9320:	f85f f000 	ldr.w	pc, [pc]	; 9324 <__tVZFilterLS_setFreqFast_veneer+0x4>
    9324:	0800fe51 	.word	0x0800fe51

00009328 <__tIntPhasor_setFreq_veneer>:
    9328:	f85f f000 	ldr.w	pc, [pc]	; 932c <__tIntPhasor_setFreq_veneer+0x4>
    932c:	08012b65 	.word	0x08012b65

00009330 <__tLinearDelay_tick_veneer>:
    9330:	f85f f000 	ldr.w	pc, [pc]	; 9334 <__tLinearDelay_tick_veneer+0x4>
    9334:	0800d69d 	.word	0x0800d69d

00009338 <__tStiffString_free_veneer>:
    9338:	f85f f000 	ldr.w	pc, [pc]	; 933c <__tStiffString_free_veneer+0x4>
    933c:	08014d2d 	.word	0x08014d2d

00009340 <__MX_SPI1_Init_veneer>:
    9340:	f85f f000 	ldr.w	pc, [pc]	; 9344 <__MX_SPI1_Init_veneer+0x4>
    9344:	08002b11 	.word	0x08002b11

00009348 <__tStiffString_setPickupPosNoUpdate_veneer>:
    9348:	f85f f000 	ldr.w	pc, [pc]	; 934c <__tStiffString_setPickupPosNoUpdate_veneer+0x4>
    934c:	08015175 	.word	0x08015175

00009350 <__tSimpleLivingString3_setDampFreq_veneer>:
    9350:	f85f f000 	ldr.w	pc, [pc]	; 9354 <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    9354:	080134f9 	.word	0x080134f9

00009358 <__tVoc_setFreq_veneer>:
    9358:	f85f f000 	ldr.w	pc, [pc]	; 935c <__tVoc_setFreq_veneer+0x4>
    935c:	080163d5 	.word	0x080163d5

00009360 <__tTapeDelay_setDelay_veneer>:
    9360:	f85f f000 	ldr.w	pc, [pc]	; 9364 <__tTapeDelay_setDelay_veneer+0x4>
    9364:	0800dd41 	.word	0x0800dd41

00009368 <__LEAF_tanh_veneer>:
    9368:	f85f f000 	ldr.w	pc, [pc]	; 936c <__LEAF_tanh_veneer+0x4>
    936c:	0801199d 	.word	0x0801199d

00009370 <__tSawSquareLFO_setFreq_veneer>:
    9370:	f85f f000 	ldr.w	pc, [pc]	; 9374 <__tSawSquareLFO_setFreq_veneer+0x4>
    9374:	08012dfd 	.word	0x08012dfd

00009378 <__tPickupNonLinearity_tick_veneer>:
    9378:	f85f f000 	ldr.w	pc, [pc]	; 937c <__tPickupNonLinearity_tick_veneer+0x4>
    937c:	08013169 	.word	0x08013169

00009380 <__tSineTriLFO_setShape_veneer>:
    9380:	f85f f000 	ldr.w	pc, [pc]	; 9384 <__tSineTriLFO_setShape_veneer+0x4>
    9384:	080130c9 	.word	0x080130c9

00009388 <__tTString_setRippleDepth_veneer>:
    9388:	f85f f000 	ldr.w	pc, [pc]	; 938c <__tTString_setRippleDepth_veneer+0x4>
    938c:	08014935 	.word	0x08014935

00009390 <__tVZFilterLS_setResonance_veneer>:
    9390:	f85f f000 	ldr.w	pc, [pc]	; 9394 <__tVZFilterLS_setResonance_veneer+0x4>
    9394:	0800ff45 	.word	0x0800ff45

00009398 <__arm_sin_f32_veneer>:
    9398:	f85f f000 	ldr.w	pc, [pc]	; 939c <__arm_sin_f32_veneer+0x4>
    939c:	08000781 	.word	0x08000781

000093a0 <__tSawSquareLFO_setPhase_veneer>:
    93a0:	f85f f000 	ldr.w	pc, [pc]	; 93a4 <__tSawSquareLFO_setPhase_veneer+0x4>
    93a4:	08012e45 	.word	0x08012e45

000093a8 <__tTString_initToPool_veneer>:
    93a8:	f85f f000 	ldr.w	pc, [pc]	; 93ac <__tTString_initToPool_veneer+0x4>
    93ac:	08014249 	.word	0x08014249

000093b0 <__tLadderFilter_setFreqFast_veneer>:
    93b0:	f85f f000 	ldr.w	pc, [pc]	; 93b4 <__tLadderFilter_setFreqFast_veneer+0x4>
    93b4:	080114d5 	.word	0x080114d5

000093b8 <__tSimpleLivingString3_pluck_veneer>:
    93b8:	f85f f000 	ldr.w	pc, [pc]	; 93bc <__tSimpleLivingString3_pluck_veneer+0x4>
    93bc:	08013585 	.word	0x08013585

000093c0 <__tPBSineTriangle_setFreq_veneer>:
    93c0:	f85f f000 	ldr.w	pc, [pc]	; 93c4 <__tPBSineTriangle_setFreq_veneer+0x4>
    93c4:	080126f9 	.word	0x080126f9

000093c8 <__tADSRT_tickNoInterp_veneer>:
    93c8:	f85f f000 	ldr.w	pc, [pc]	; 93cc <__tADSRT_tickNoInterp_veneer+0x4>
    93cc:	0800e6c9 	.word	0x0800e6c9

000093d0 <__tCycle_setPhase_veneer>:
    93d0:	f85f f000 	ldr.w	pc, [pc]	; 93d4 <__tCycle_setPhase_veneer+0x4>
    93d4:	08012365 	.word	0x08012365

000093d8 <__tADSRT_clear_veneer>:
    93d8:	f85f f000 	ldr.w	pc, [pc]	; 93dc <__tADSRT_clear_veneer+0x4>
    93dc:	0800e3f9 	.word	0x0800e3f9

000093e0 <__tTString_setFreq_veneer>:
    93e0:	f85f f000 	ldr.w	pc, [pc]	; 93e4 <__tTString_setFreq_veneer+0x4>
    93e4:	080141c1 	.word	0x080141c1

000093e8 <__MX_SPI5_Init_veneer>:
    93e8:	f85f f000 	ldr.w	pc, [pc]	; 93ec <__MX_SPI5_Init_veneer+0x4>
    93ec:	08002b5d 	.word	0x08002b5d

000093f0 <__tExpSmooth_setFactor_veneer>:
    93f0:	f85f f000 	ldr.w	pc, [pc]	; 93f4 <__tExpSmooth_setFactor_veneer+0x4>
    93f4:	0800e961 	.word	0x0800e961

000093f8 <__tTString_setHarmonicity_veneer>:
    93f8:	f85f f000 	ldr.w	pc, [pc]	; 93fc <__tTString_setHarmonicity_veneer+0x4>
    93fc:	08014c25 	.word	0x08014c25

00009400 <__tVoc_tick_veneer>:
    9400:	f85f f000 	ldr.w	pc, [pc]	; 9404 <__tVoc_tick_veneer+0x4>
    9404:	08016321 	.word	0x08016321

00009408 <__tSineTriLFO_setFreq_veneer>:
    9408:	f85f f000 	ldr.w	pc, [pc]	; 940c <__tSineTriLFO_setFreq_veneer+0x4>
    940c:	08013069 	.word	0x08013069

00009410 <__faster_mtof_veneer>:
    9410:	f85f f000 	ldr.w	pc, [pc]	; 9414 <__faster_mtof_veneer+0x4>
    9414:	08011e85 	.word	0x08011e85

00009418 <__fromAscii_veneer>:
    9418:	f85f f000 	ldr.w	pc, [pc]	; 941c <__fromAscii_veneer+0x4>
    941c:	08001e69 	.word	0x08001e69

00009420 <__tCrusher_tick_veneer>:
    9420:	f85f f000 	ldr.w	pc, [pc]	; 9424 <__tCrusher_tick_veneer+0x4>
    9424:	0800ddd9 	.word	0x0800ddd9

00009428 <__tSawSquareLFO_tick_veneer>:
    9428:	f85f f000 	ldr.w	pc, [pc]	; 942c <__tSawSquareLFO_tick_veneer+0x4>
    942c:	08012db5 	.word	0x08012db5

00009430 <__tPBSawSquare_tick_veneer>:
    9430:	f85f f000 	ldr.w	pc, [pc]	; 9434 <__tPBSawSquare_tick_veneer+0x4>
    9434:	08012961 	.word	0x08012961

00009438 <__tDiodeFilter_setQ_veneer>:
    9438:	f85f f000 	ldr.w	pc, [pc]	; 943c <__tDiodeFilter_setQ_veneer+0x4>
    943c:	08011079 	.word	0x08011079

00009440 <__arm_fir_interpolate_f32_veneer>:
    9440:	f85f f000 	ldr.w	pc, [pc]	; 9444 <__arm_fir_interpolate_f32_veneer+0x4>
    9444:	08000685 	.word	0x08000685

00009448 <__tStiffString_setFreqNoUpdate_veneer>:
    9448:	f85f f000 	ldr.w	pc, [pc]	; 944c <__tStiffString_setFreqNoUpdate_veneer+0x4>
    944c:	080151bd 	.word	0x080151bd

00009450 <__tVZFilterHS_setGain_veneer>:
    9450:	f85f f000 	ldr.w	pc, [pc]	; 9454 <__tVZFilterHS_setGain_veneer+0x4>
    9454:	080101e1 	.word	0x080101e1

00009458 <__tStiffString_init_veneer>:
    9458:	f85f f000 	ldr.w	pc, [pc]	; 945c <__tStiffString_init_veneer+0x4>
    945c:	08015001 	.word	0x08015001

00009460 <__tPBSineTriangle_tick_veneer>:
    9460:	f85f f000 	ldr.w	pc, [pc]	; 9464 <__tPBSineTriangle_tick_veneer+0x4>
    9464:	080125e5 	.word	0x080125e5

00009468 <__tVoc_init_veneer>:
    9468:	f85f f000 	ldr.w	pc, [pc]	; 946c <__tVoc_init_veneer+0x4>
    946c:	080162b1 	.word	0x080162b1

00009470 <__tADSRT_setAttack_veneer>:
    9470:	f85f f000 	ldr.w	pc, [pc]	; 9474 <__tADSRT_setAttack_veneer+0x4>
    9474:	0800e2f1 	.word	0x0800e2f1

00009478 <__tSimpleLivingString3_setDecay_veneer>:
    9478:	f85f f000 	ldr.w	pc, [pc]	; 947c <__tSimpleLivingString3_setDecay_veneer+0x4>
    947c:	08013501 	.word	0x08013501

00009480 <__tSVF_setQ_veneer>:
    9480:	f85f f000 	ldr.w	pc, [pc]	; 9484 <__tSVF_setQ_veneer+0x4>
    9484:	0800f239 	.word	0x0800f239

00009488 <__tNoise_tick_veneer>:
    9488:	f85f f000 	ldr.w	pc, [pc]	; 948c <__tNoise_tick_veneer+0x4>
    948c:	08012a71 	.word	0x08012a71

00009490 <__tVZFilter_tickEfficient_veneer>:
    9490:	f85f f000 	ldr.w	pc, [pc]	; 9494 <__tVZFilter_tickEfficient_veneer+0x4>
    9494:	0800f371 	.word	0x0800f371

00009498 <__tVZFilterLS_tick_veneer>:
    9498:	f85f f000 	ldr.w	pc, [pc]	; 949c <__tVZFilterLS_tick_veneer+0x4>
    949c:	0800fdf5 	.word	0x0800fdf5

000094a0 <__tLadderFilter_setQ_veneer>:
    94a0:	f85f f000 	ldr.w	pc, [pc]	; 94a4 <__tLadderFilter_setQ_veneer+0x4>
    94a4:	08011535 	.word	0x08011535

000094a8 <__tVoc_set_tenseness_veneer>:
    94a8:	f85f f000 	ldr.w	pc, [pc]	; 94ac <__tVoc_set_tenseness_veneer+0x4>
    94ac:	080163e9 	.word	0x080163e9

000094b0 <__tPickupNonLinearity_init_veneer>:
    94b0:	f85f f000 	ldr.w	pc, [pc]	; 94b4 <__tPickupNonLinearity_init_veneer+0x4>
    94b4:	08013149 	.word	0x08013149

000094b8 <__tSimpleLivingString3_free_veneer>:
    94b8:	f85f f000 	ldr.w	pc, [pc]	; 94bc <__tSimpleLivingString3_free_veneer+0x4>
    94bc:	080131e5 	.word	0x080131e5

000094c0 <__tADSRT_init_veneer>:
    94c0:	f85f f000 	ldr.w	pc, [pc]	; 94c4 <__tADSRT_init_veneer+0x4>
    94c4:	0800e2e9 	.word	0x0800e2e9

000094c8 <__tIntPhasor_setPhase_veneer>:
    94c8:	f85f f000 	ldr.w	pc, [pc]	; 94cc <__tIntPhasor_setPhase_veneer+0x4>
    94cc:	08012b7d 	.word	0x08012b7d

000094d0 <__tADSRT_setDecay_veneer>:
    94d0:	f85f f000 	ldr.w	pc, [pc]	; 94d4 <__tADSRT_setDecay_veneer+0x4>
    94d4:	0800e319 	.word	0x0800e319

000094d8 <__memset_veneer>:
    94d8:	f85f f000 	ldr.w	pc, [pc]	; 94dc <__memset_veneer+0x4>
    94dc:	080168b1 	.word	0x080168b1

000094e0 <__tVoc_setAspirationNoiseFilterQ_veneer>:
    94e0:	f85f f000 	ldr.w	pc, [pc]	; 94e4 <__tVoc_setAspirationNoiseFilterQ_veneer+0x4>
    94e4:	08016439 	.word	0x08016439

000094e8 <__tVZFilterBell_setFreq_veneer>:
    94e8:	f85f f000 	ldr.w	pc, [pc]	; 94ec <__tVZFilterBell_setFreq_veneer+0x4>
    94ec:	08010519 	.word	0x08010519

000094f0 <__tTString_setFeedbackStrength_veneer>:
    94f0:	f85f f000 	ldr.w	pc, [pc]	; 94f4 <__tTString_setFeedbackStrength_veneer+0x4>
    94f4:	080149d1 	.word	0x080149d1

000094f8 <__HAL_SPI_Receive_DMA_veneer>:
    94f8:	f85f f000 	ldr.w	pc, [pc]	; 94fc <__HAL_SPI_Receive_DMA_veneer+0x4>
    94fc:	0800a265 	.word	0x0800a265

00009500 <__tExpSmooth_setValAndDest_veneer>:
    9500:	f85f f000 	ldr.w	pc, [pc]	; 9504 <__tExpSmooth_setValAndDest_veneer+0x4>
    9504:	0800e9c1 	.word	0x0800e9c1

00009508 <__tTString_setBarPosition_veneer>:
    9508:	f85f f000 	ldr.w	pc, [pc]	; 950c <__tTString_setBarPosition_veneer+0x4>
    950c:	080148fd 	.word	0x080148fd

00009510 <__tTString_setHarmonic_veneer>:
    9510:	f85f f000 	ldr.w	pc, [pc]	; 9514 <__tTString_setHarmonic_veneer+0x4>
    9514:	080149bd 	.word	0x080149bd

00009518 <__setOscilllatorShapes_veneer>:
    9518:	f85f f000 	ldr.w	pc, [pc]	; 951c <__setOscilllatorShapes_veneer+0x4>
    951c:	08001b0d 	.word	0x08001b0d

00009520 <__tPBPulse_setFreq_veneer>:
    9520:	f85f f000 	ldr.w	pc, [pc]	; 9524 <__tPBPulse_setFreq_veneer+0x4>
    9524:	080127fd 	.word	0x080127fd

00009528 <__tTString_setPickupPos_veneer>:
    9528:	f85f f000 	ldr.w	pc, [pc]	; 952c <__tTString_setPickupPos_veneer+0x4>
    952c:	08014835 	.word	0x08014835

00009530 <__HAL_SPI_TransmitReceive_DMA_veneer>:
    9530:	f85f f000 	ldr.w	pc, [pc]	; 9534 <__HAL_SPI_TransmitReceive_DMA_veneer+0x4>
    9534:	0800a425 	.word	0x0800a425

00009538 <__tCrusher_setSamplingRatio_veneer>:
    9538:	f85f f000 	ldr.w	pc, [pc]	; 953c <__tCrusher_setSamplingRatio_veneer+0x4>
    953c:	0800ded1 	.word	0x0800ded1

00009540 <__tVZFilterHS_tick_veneer>:
    9540:	f85f f000 	ldr.w	pc, [pc]	; 9544 <__tVZFilterHS_tick_veneer+0x4>
    9544:	080100f9 	.word	0x080100f9

00009548 <__tPBPulse_setWidth_veneer>:
    9548:	f85f f000 	ldr.w	pc, [pc]	; 954c <__tPBPulse_setWidth_veneer+0x4>
    954c:	08012815 	.word	0x08012815

00009550 <__tVoc_rescaleDiameter_veneer>:
    9550:	f85f f000 	ldr.w	pc, [pc]	; 9554 <__tVoc_rescaleDiameter_veneer+0x4>
    9554:	08016781 	.word	0x08016781

00009558 <__tSVF_tick_veneer>:
    9558:	f85f f000 	ldr.w	pc, [pc]	; 955c <__tSVF_tick_veneer+0x4>
    955c:	0800f0d5 	.word	0x0800f0d5

00009560 <__tStiffString_setDecayNoUpdate_veneer>:
    9560:	f85f f000 	ldr.w	pc, [pc]	; 9564 <__tStiffString_setDecayNoUpdate_veneer+0x4>
    9564:	080151c5 	.word	0x080151c5

00009568 <__fastSine_veneer>:
    9568:	f85f f000 	ldr.w	pc, [pc]	; 956c <__fastSine_veneer+0x4>
    956c:	08011aad 	.word	0x08011aad

00009570 <__tExpSmooth_setDest_veneer>:
    9570:	f85f f000 	ldr.w	pc, [pc]	; 9574 <__tExpSmooth_setDest_veneer+0x4>
    9574:	0800e9b1 	.word	0x0800e9b1

00009578 <__tTString_setFeedbackReactionSpeed_veneer>:
    9578:	f85f f000 	ldr.w	pc, [pc]	; 957c <__tTString_setFeedbackReactionSpeed_veneer+0x4>
    957c:	08014a19 	.word	0x08014a19

00009580 <__tSimpleLivingString3_setLevMode_veneer>:
    9580:	f85f f000 	ldr.w	pc, [pc]	; 9584 <__tSimpleLivingString3_setLevMode_veneer+0x4>
    9584:	08013571 	.word	0x08013571

00009588 <__tVoc_set_tractLength_veneer>:
    9588:	f85f f000 	ldr.w	pc, [pc]	; 958c <__tVoc_set_tractLength_veneer+0x4>
    958c:	080163e1 	.word	0x080163e1

00009590 <__tTString_setDecayInSeconds_veneer>:
    9590:	f85f f000 	ldr.w	pc, [pc]	; 9594 <__tTString_setDecayInSeconds_veneer+0x4>
    9594:	080147e5 	.word	0x080147e5

00009598 <__tPBSaw_tick_veneer>:
    9598:	f85f f000 	ldr.w	pc, [pc]	; 959c <__tPBSaw_tick_veneer+0x4>
    959c:	080128bd 	.word	0x080128bd

000095a0 <__tEnvelopeFollower_tick_veneer>:
    95a0:	f85f f000 	ldr.w	pc, [pc]	; 95a4 <__tEnvelopeFollower_tick_veneer+0x4>
    95a4:	0800d56d 	.word	0x0800d56d

000095a8 <__tTString_setPickupFilterQ_veneer>:
    95a8:	f85f f000 	ldr.w	pc, [pc]	; 95ac <__tTString_setPickupFilterQ_veneer+0x4>
    95ac:	08014cfd 	.word	0x08014cfd

000095b0 <__tVZFilterHS_setResonance_veneer>:
    95b0:	f85f f000 	ldr.w	pc, [pc]	; 95b4 <__tVZFilterHS_setResonance_veneer+0x4>
    95b4:	08010245 	.word	0x08010245

000095b8 <__tSquareLFO_setPhase_veneer>:
    95b8:	f85f f000 	ldr.w	pc, [pc]	; 95bc <__tSquareLFO_setPhase_veneer+0x4>
    95bc:	08012d09 	.word	0x08012d09

000095c0 <__tVoc_setTurbulenceNoiseGain_veneer>:
    95c0:	f85f f000 	ldr.w	pc, [pc]	; 95c4 <__tVoc_setTurbulenceNoiseGain_veneer+0x4>
    95c4:	08016401 	.word	0x08016401

000095c8 <__tPBPulse_tick_veneer>:
    95c8:	f85f f000 	ldr.w	pc, [pc]	; 95cc <__tPBPulse_tick_veneer+0x4>
    95cc:	0801277d 	.word	0x0801277d

000095d0 <__tADSRT_setRelease_veneer>:
    95d0:	f85f f000 	ldr.w	pc, [pc]	; 95d4 <__tADSRT_setRelease_veneer+0x4>
    95d4:	0800e375 	.word	0x0800e375

000095d8 <__tPBSineTriangle_setShape_veneer>:
    95d8:	f85f f000 	ldr.w	pc, [pc]	; 95dc <__tPBSineTriangle_setShape_veneer+0x4>
    95dc:	08012725 	.word	0x08012725

000095e0 <__tExpSmooth_tick_veneer>:
    95e0:	f85f f000 	ldr.w	pc, [pc]	; 95e4 <__tExpSmooth_tick_veneer+0x4>
    95e4:	0800e9cd 	.word	0x0800e9cd

000095e8 <__tSawSquareLFO_setShape_veneer>:
    95e8:	f85f f000 	ldr.w	pc, [pc]	; 95ec <__tSawSquareLFO_setShape_veneer+0x4>
    95ec:	08012ea9 	.word	0x08012ea9

000095f0 <__tSimpleLivingString3_setTargetLev_veneer>:
    95f0:	f85f f000 	ldr.w	pc, [pc]	; 95f4 <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    95f4:	08013559 	.word	0x08013559

000095f8 <__tADSRT_off_veneer>:
    95f8:	f85f f000 	ldr.w	pc, [pc]	; 95fc <__tADSRT_off_veneer+0x4>
    95fc:	0800e3e9 	.word	0x0800e3e9

00009600 <__tCrusher_setRound_veneer>:
    9600:	f85f f000 	ldr.w	pc, [pc]	; 9604 <__tCrusher_setRound_veneer+0x4>
    9604:	0800dec9 	.word	0x0800dec9

00009608 <__mtofTableLookup_veneer>:
    9608:	f85f f000 	ldr.w	pc, [pc]	; 960c <__mtofTableLookup_veneer+0x4>
    960c:	08000881 	.word	0x08000881

00009610 <__tStiffString_setFreq_veneer>:
    9610:	f85f f000 	ldr.w	pc, [pc]	; 9614 <__tStiffString_setFreq_veneer+0x4>
    9614:	08015099 	.word	0x08015099

00009618 <__tVZFilter_setFreq_veneer>:
    9618:	f85f f000 	ldr.w	pc, [pc]	; 961c <__tVZFilter_setFreq_veneer+0x4>
    961c:	0800f6b5 	.word	0x0800f6b5

00009620 <__tStiffString_setStiffnessNoUpdate_veneer>:
    9620:	f85f f000 	ldr.w	pc, [pc]	; 9624 <__tStiffString_setStiffnessNoUpdate_veneer+0x4>
    9624:	08015155 	.word	0x08015155

00009628 <__tSimpleLivingString3_setFreq_veneer>:
    9628:	f85f f000 	ldr.w	pc, [pc]	; 962c <__tSimpleLivingString3_setFreq_veneer+0x4>
    962c:	08013229 	.word	0x08013229

00009630 <__tStiffString_updateOutputWeights_veneer>:
    9630:	f85f f000 	ldr.w	pc, [pc]	; 9634 <__tStiffString_updateOutputWeights_veneer+0x4>
    9634:	08014e65 	.word	0x08014e65

00009638 <__tSimpleLivingString3_setLevStrength_veneer>:
    9638:	f85f f000 	ldr.w	pc, [pc]	; 963c <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    963c:	08013569 	.word	0x08013569

00009640 <__tSineTriLFO_setPhase_veneer>:
    9640:	f85f f000 	ldr.w	pc, [pc]	; 9644 <__tSineTriLFO_setPhase_veneer+0x4>
    9644:	08013099 	.word	0x08013099

00009648 <__tVoc_setAspirationNoiseFilterFreq_veneer>:
    9648:	f85f f000 	ldr.w	pc, [pc]	; 964c <__tVoc_setAspirationNoiseFilterFreq_veneer+0x4>
    964c:	08016419 	.word	0x08016419

00009650 <__tTString_setInharmonic_veneer>:
    9650:	f85f f000 	ldr.w	pc, [pc]	; 9654 <__tTString_setInharmonic_veneer+0x4>
    9654:	08014c7d 	.word	0x08014c7d

00009658 <__LEAF_clip_veneer>:
    9658:	f85f f000 	ldr.w	pc, [pc]	; 965c <__LEAF_clip_veneer+0x4>
    965c:	08011985 	.word	0x08011985
