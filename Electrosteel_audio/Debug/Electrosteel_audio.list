
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00018c28  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c2c8  08018ec0  08018ec0  00028ec0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025188  08025188  00059720  2**0
                  CONTENTS
  4 .ARM          00000000  08025188  08025188  00059720  2**0
                  CONTENTS
  5 .preinit_array 00000000  08025188  08025188  00059720  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025188  08025188  00035188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802518c  0802518c  0003518c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000ba0  20000000  08025190  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d57c  20000ba0  08025d30  00060ba0  2**2
                  ALLOC
 10 .sram1_bss    00040000  24040000  24040000  00060000  2**5
                  ALLOC
 11 .sram2_dma_bss 00000880  30000000  30000000  00060000  2**5
                  ALLOC
 12 .sram2_bss    00044580  30002000  30002000  00062000  2**5
                  ALLOC
 13 .sram3_bss    00000080  38000000  38000000  00060000  2**5
                  ALLOC
 14 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 15 .itcmram      00009320  00000400  08025d30  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .sdram_bss    02000000  60000000  60000000  00060000  2**5
                  ALLOC
 17 .heap         00000000  2001e11c  2001e11c  00059720  2**0
                  CONTENTS
 18 .reserved_for_stack 00000000  2001e11c  2001e11c  00059720  2**0
                  CONTENTS
 19 .ARM.attributes 0000002e  00000000  00000000  00059720  2**0
                  CONTENTS, READONLY
 20 .comment      00000043  00000000  00000000  0005974e  2**0
                  CONTENTS, READONLY
 21 .debug_info   00087943  00000000  00000000  00059791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 00009e70  00000000  00000000  000e10d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loclists 000389fc  00000000  00000000  000eaf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_aranges 000048a0  00000000  00000000  00123940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_rnglists 00004398  00000000  00000000  001281e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   000512b6  00000000  00000000  0012c578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    0001590b  00000000  00000000  0017d82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_frame  0000ea58  00000000  00000000  0019313c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000ba0 	.word	0x20000ba0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08018e30 	.word	0x08018e30

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000ba4 	.word	0x20000ba4
 80002d4:	08018e30 	.word	0x08018e30

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <arm_atan2_f32>:
                   and compute the right angle.
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
 80002e8:	b410      	push	{r4}
    if (x > 0.0f)
 80002ea:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80002ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002f2:	dc1a      	bgt.n	800032a <arm_atan2_f32+0x42>
    {
        *result=arm_atan_f32(y/x);
        return(ARM_MATH_SUCCESS);
    }
    if (x < 0.0f)
 80002f4:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 80002f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80002fc:	d460      	bmi.n	80003c0 <arm_atan2_f32+0xd8>
               *result= PI;
            }
        }
        return(ARM_MATH_SUCCESS);
    }
    if (x == 0.0f)
 80002fe:	eef5 0a40 	vcmp.f32	s1, #0.0
 8000302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000306:	f040 810c 	bne.w	8000522 <arm_atan2_f32+0x23a>
    {
        if (y > 0.0f)
 800030a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800030e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000312:	f300 8102 	bgt.w	800051a <arm_atan2_f32+0x232>
        {
            *result=PIHALFF32;
            return(ARM_MATH_SUCCESS);
        }
        if (y < 0.0f)
 8000316:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800031a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800031e:	f140 8103 	bpl.w	8000528 <arm_atan2_f32+0x240>
        {
            *result=-PIHALFF32;
 8000322:	4b83      	ldr	r3, [pc, #524]	; (8000530 <arm_atan2_f32+0x248>)
 8000324:	6003      	str	r3, [r0, #0]
            return(ARM_MATH_SUCCESS);
 8000326:	2000      	movs	r0, #0
 8000328:	e030      	b.n	800038c <arm_atan2_f32+0xa4>
        *result=arm_atan_f32(y/x);
 800032a:	ee80 7a20 	vdiv.f32	s14, s0, s1
   if (x < 0.0f)
 800032e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000336:	d40d      	bmi.n	8000354 <arm_atan2_f32+0x6c>
   int sign=0;
 8000338:	2400      	movs	r4, #0
   if (x > 1.0f)
 800033a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800033e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000346:	dd37      	ble.n	80003b8 <arm_atan2_f32+0xd0>
      x = 1.0f / x;
 8000348:	eec7 6a87 	vdiv.f32	s13, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800034c:	2301      	movs	r3, #1
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 800034e:	eddf 7a79 	vldr	s15, [pc, #484]	; 8000534 <arm_atan2_f32+0x24c>
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8000352:	e00f      	b.n	8000374 <arm_atan2_f32+0x8c>
      x=-x;
 8000354:	eeb1 7a47 	vneg.f32	s14, s14
      sign=1;
 8000358:	2401      	movs	r4, #1
 800035a:	e7ee      	b.n	800033a <arm_atan2_f32+0x52>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 800035c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000360:	f1c3 0109 	rsb	r1, r3, #9
 8000364:	4a74      	ldr	r2, [pc, #464]	; (8000538 <arm_atan2_f32+0x250>)
 8000366:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800036a:	ed92 7a00 	vldr	s14, [r2]
 800036e:	ee77 7a87 	vadd.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8000372:	3301      	adds	r3, #1
 8000374:	2b09      	cmp	r3, #9
 8000376:	ddf1      	ble.n	800035c <arm_atan2_f32+0x74>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8000378:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800053c <arm_atan2_f32+0x254>
 800037c:	ee77 7a67 	vsub.f32	s15, s14, s15
   if (sign)
 8000380:	b10c      	cbz	r4, 8000386 <arm_atan2_f32+0x9e>
     res = -res;
 8000382:	eef1 7a67 	vneg.f32	s15, s15
        *result=arm_atan_f32(y/x);
 8000386:	edc0 7a00 	vstr	s15, [r0]
        return(ARM_MATH_SUCCESS);
 800038a:	2000      	movs	r0, #0
    }
    

    return(ARM_MATH_NANINF);

}
 800038c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000390:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000396:	f1c3 0109 	rsb	r1, r3, #9
 800039a:	4a67      	ldr	r2, [pc, #412]	; (8000538 <arm_atan2_f32+0x250>)
 800039c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80003a0:	edd2 6a00 	vldr	s13, [r2]
 80003a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80003a8:	3301      	adds	r3, #1
 80003aa:	2b09      	cmp	r3, #9
 80003ac:	ddf1      	ble.n	8000392 <arm_atan2_f32+0xaa>
     res += arm_atan_limited_f32(x);
 80003ae:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8000540 <arm_atan2_f32+0x258>
 80003b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80003b6:	e7e3      	b.n	8000380 <arm_atan2_f32+0x98>
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80003b8:	2301      	movs	r3, #1
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80003ba:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8000534 <arm_atan2_f32+0x24c>
 80003be:	e7f4      	b.n	80003aa <arm_atan2_f32+0xc2>
        if (y > 0.0f)
 80003c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80003c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003c8:	dd4c      	ble.n	8000464 <arm_atan2_f32+0x17c>
           *result=arm_atan_f32(y/x) + PI;
 80003ca:	ee80 7a20 	vdiv.f32	s14, s0, s1
   if (x < 0.0f)
 80003ce:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80003d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003d6:	d41b      	bmi.n	8000410 <arm_atan2_f32+0x128>
   int sign=0;
 80003d8:	2400      	movs	r4, #0
   if (x > 1.0f)
 80003da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80003de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80003e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003e6:	dd39      	ble.n	800045c <arm_atan2_f32+0x174>
      x = 1.0f / x;
 80003e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80003ec:	2301      	movs	r3, #1
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80003ee:	eddf 7a51 	vldr	s15, [pc, #324]	; 8000534 <arm_atan2_f32+0x24c>
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80003f2:	2b09      	cmp	r3, #9
 80003f4:	dc10      	bgt.n	8000418 <arm_atan2_f32+0x130>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80003f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80003fa:	f1c3 0109 	rsb	r1, r3, #9
 80003fe:	4a4e      	ldr	r2, [pc, #312]	; (8000538 <arm_atan2_f32+0x250>)
 8000400:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000404:	ed92 7a00 	vldr	s14, [r2]
 8000408:	ee77 7a87 	vadd.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800040c:	3301      	adds	r3, #1
 800040e:	e7f0      	b.n	80003f2 <arm_atan2_f32+0x10a>
      x=-x;
 8000410:	eeb1 7a47 	vneg.f32	s14, s14
      sign=1;
 8000414:	2401      	movs	r4, #1
 8000416:	e7e0      	b.n	80003da <arm_atan2_f32+0xf2>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8000418:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800053c <arm_atan2_f32+0x254>
 800041c:	ee77 7a67 	vsub.f32	s15, s14, s15
   if (sign)
 8000420:	b10c      	cbz	r4, 8000426 <arm_atan2_f32+0x13e>
     res = -res;
 8000422:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) + PI;
 8000426:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000544 <arm_atan2_f32+0x25c>
 800042a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800042e:	edc0 7a00 	vstr	s15, [r0]
        return(ARM_MATH_SUCCESS);
 8000432:	2000      	movs	r0, #0
 8000434:	e7aa      	b.n	800038c <arm_atan2_f32+0xa4>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800043a:	f1c3 0109 	rsb	r1, r3, #9
 800043e:	4a3e      	ldr	r2, [pc, #248]	; (8000538 <arm_atan2_f32+0x250>)
 8000440:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000444:	edd2 6a00 	vldr	s13, [r2]
 8000448:	ee77 7aa6 	vadd.f32	s15, s15, s13
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800044c:	3301      	adds	r3, #1
 800044e:	2b09      	cmp	r3, #9
 8000450:	ddf1      	ble.n	8000436 <arm_atan2_f32+0x14e>
     res += arm_atan_limited_f32(x);
 8000452:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000540 <arm_atan2_f32+0x258>
 8000456:	ee77 7a87 	vadd.f32	s15, s15, s14
 800045a:	e7e1      	b.n	8000420 <arm_atan2_f32+0x138>
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800045c:	2301      	movs	r3, #1
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 800045e:	eddf 7a35 	vldr	s15, [pc, #212]	; 8000534 <arm_atan2_f32+0x24c>
 8000462:	e7f4      	b.n	800044e <arm_atan2_f32+0x166>
        else if (y < 0.0f)
 8000464:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800046c:	d406      	bmi.n	800047c <arm_atan2_f32+0x194>
            if (signbit(y))
 800046e:	ee10 3a10 	vmov	r3, s0
 8000472:	2b00      	cmp	r3, #0
 8000474:	da4e      	bge.n	8000514 <arm_atan2_f32+0x22c>
               *result= -PI;
 8000476:	4b34      	ldr	r3, [pc, #208]	; (8000548 <arm_atan2_f32+0x260>)
 8000478:	6003      	str	r3, [r0, #0]
 800047a:	e7da      	b.n	8000432 <arm_atan2_f32+0x14a>
           *result=arm_atan_f32(y/x) - PI;
 800047c:	ee80 7a20 	vdiv.f32	s14, s0, s1
   if (x < 0.0f)
 8000480:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000488:	d40d      	bmi.n	80004a6 <arm_atan2_f32+0x1be>
   int sign=0;
 800048a:	2400      	movs	r4, #0
   if (x > 1.0f)
 800048c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000498:	dd38      	ble.n	800050c <arm_atan2_f32+0x224>
      x = 1.0f / x;
 800049a:	eec7 6a87 	vdiv.f32	s13, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800049e:	2301      	movs	r3, #1
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 80004a0:	eddf 7a24 	vldr	s15, [pc, #144]	; 8000534 <arm_atan2_f32+0x24c>
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80004a4:	e00f      	b.n	80004c6 <arm_atan2_f32+0x1de>
      x=-x;
 80004a6:	eeb1 7a47 	vneg.f32	s14, s14
      sign=1;
 80004aa:	2401      	movs	r4, #1
 80004ac:	e7ee      	b.n	800048c <arm_atan2_f32+0x1a4>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80004ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80004b2:	f1c3 0109 	rsb	r1, r3, #9
 80004b6:	4a20      	ldr	r2, [pc, #128]	; (8000538 <arm_atan2_f32+0x250>)
 80004b8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80004bc:	ed92 7a00 	vldr	s14, [r2]
 80004c0:	ee77 7a87 	vadd.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80004c4:	3301      	adds	r3, #1
 80004c6:	2b09      	cmp	r3, #9
 80004c8:	ddf1      	ble.n	80004ae <arm_atan2_f32+0x1c6>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80004ca:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800053c <arm_atan2_f32+0x254>
 80004ce:	ee77 7a67 	vsub.f32	s15, s14, s15
   if (sign)
 80004d2:	b10c      	cbz	r4, 80004d8 <arm_atan2_f32+0x1f0>
     res = -res;
 80004d4:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) - PI;
 80004d8:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000544 <arm_atan2_f32+0x25c>
 80004dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80004e0:	edc0 7a00 	vstr	s15, [r0]
 80004e4:	e7a5      	b.n	8000432 <arm_atan2_f32+0x14a>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80004e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80004ea:	f1c3 0109 	rsb	r1, r3, #9
 80004ee:	4a12      	ldr	r2, [pc, #72]	; (8000538 <arm_atan2_f32+0x250>)
 80004f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80004f4:	edd2 6a00 	vldr	s13, [r2]
 80004f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80004fc:	3301      	adds	r3, #1
 80004fe:	2b09      	cmp	r3, #9
 8000500:	ddf1      	ble.n	80004e6 <arm_atan2_f32+0x1fe>
     res += arm_atan_limited_f32(x);
 8000502:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000540 <arm_atan2_f32+0x258>
 8000506:	ee77 7a87 	vadd.f32	s15, s15, s14
 800050a:	e7e2      	b.n	80004d2 <arm_atan2_f32+0x1ea>
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 800050c:	2301      	movs	r3, #1
    float32_t res=atan2_coefs_f32[ATAN2_NB_COEFS_F32-1];
 800050e:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000534 <arm_atan2_f32+0x24c>
 8000512:	e7f4      	b.n	80004fe <arm_atan2_f32+0x216>
               *result= PI;
 8000514:	4b0d      	ldr	r3, [pc, #52]	; (800054c <arm_atan2_f32+0x264>)
 8000516:	6003      	str	r3, [r0, #0]
 8000518:	e78b      	b.n	8000432 <arm_atan2_f32+0x14a>
            *result=PIHALFF32;
 800051a:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <arm_atan2_f32+0x268>)
 800051c:	6003      	str	r3, [r0, #0]
            return(ARM_MATH_SUCCESS);
 800051e:	2000      	movs	r0, #0
 8000520:	e734      	b.n	800038c <arm_atan2_f32+0xa4>
    return(ARM_MATH_NANINF);
 8000522:	f06f 0003 	mvn.w	r0, #3
 8000526:	e731      	b.n	800038c <arm_atan2_f32+0xa4>
 8000528:	f06f 0003 	mvn.w	r0, #3
 800052c:	e72e      	b.n	800038c <arm_atan2_f32+0xa4>
 800052e:	bf00      	nop
 8000530:	bfc90fdb 	.word	0xbfc90fdb
 8000534:	bd0492a5 	.word	0xbd0492a5
 8000538:	08018ec0 	.word	0x08018ec0
 800053c:	3fc90fdb 	.word	0x3fc90fdb
 8000540:	00000000 	.word	0x00000000
 8000544:	40490fdb 	.word	0x40490fdb
 8000548:	c0490fdb 	.word	0xc0490fdb
 800054c:	40490fdb 	.word	0x40490fdb
 8000550:	3fc90fdb 	.word	0x3fc90fdb

08000554 <arm_cos_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8000554:	eddf 7a22 	vldr	s15, [pc, #136]	; 80005e0 <arm_cos_f32+0x8c>
 8000558:	ee20 0a27 	vmul.f32	s0, s0, s15
 800055c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8000560:	ee30 0a27 	vadd.f32	s0, s0, s15

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8000564:	eefd 7ac0 	vcvt.s32.f32	s15, s0

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000568:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800056c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000570:	d42f      	bmi.n	80005d2 <arm_cos_f32+0x7e>
  {
    n--;
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000576:	ee30 0a67 	vsub.f32	s0, s0, s15

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 800057a:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80005e4 <arm_cos_f32+0x90>
 800057e:	ee20 0a27 	vmul.f32	s0, s0, s15
  index = (uint16_t)findex;
 8000582:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8000586:	ee17 3a90 	vmov	r3, s15
 800058a:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800058c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000590:	d304      	bcc.n	800059c <arm_cos_f32+0x48>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8000592:	eddf 7a14 	vldr	s15, [pc, #80]	; 80005e4 <arm_cos_f32+0x90>
 8000596:	ee30 0a67 	vsub.f32	s0, s0, s15
    index = 0;
 800059a:	2300      	movs	r3, #0
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 800059c:	ee07 3a90 	vmov	s15, r3
 80005a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005a4:	ee70 7a67 	vsub.f32	s15, s0, s15

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 80005a8:	4a0f      	ldr	r2, [pc, #60]	; (80005e8 <arm_cos_f32+0x94>)
 80005aa:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80005ae:	ed91 6a00 	vldr	s12, [r1]
  b = sinTable_f32[index+1];
 80005b2:	3301      	adds	r3, #1
 80005b4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80005b8:	edd2 6a00 	vldr	s13, [r2]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 80005bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005c4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80005c8:	ee27 0aa6 	vmul.f32	s0, s15, s13

  /* Return output value */
  return (cosVal);
}
 80005cc:	ee37 0a00 	vadd.f32	s0, s14, s0
 80005d0:	4770      	bx	lr
    n--;
 80005d2:	ee17 3a90 	vmov	r3, s15
 80005d6:	3b01      	subs	r3, #1
 80005d8:	ee07 3a90 	vmov	s15, r3
 80005dc:	e7c9      	b.n	8000572 <arm_cos_f32+0x1e>
 80005de:	bf00      	nop
 80005e0:	3e22f983 	.word	0x3e22f983
 80005e4:	44000000 	.word	0x44000000
 80005e8:	08018ee8 	.word	0x08018ee8

080005ec <arm_fir_decimate_f32>:
void arm_fir_decimate_f32(
  const arm_fir_decimate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 80005ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005f0:	4604      	mov	r4, r0
 80005f2:	4610      	mov	r0, r2
        float32_t *pState = S->pState;                 /* State pointer */
 80005f4:	68a2      	ldr	r2, [r4, #8]
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80005f6:	f8d4 9004 	ldr.w	r9, [r4, #4]
        float32_t *pStateCur;                          /* Points to the current sample of the state */
        float32_t *px0;                                /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t x0, c0;                              /* Temporary variables to hold state and coefficient values */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 80005fa:	8865      	ldrh	r5, [r4, #2]
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 80005fc:	f894 c000 	ldrb.w	ip, [r4]
 8000600:	fbb3 f6fc 	udiv	r6, r3, ip
        float32_t acc1, acc2, acc3;
#endif

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (numTaps - 1U);
 8000604:	f06f 4e40 	mvn.w	lr, #3221225472	; 0xc0000000
 8000608:	44ae      	add	lr, r5
 800060a:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
  /* Initialize blkCnt with number of samples */
  blkCnt = outBlockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800060e:	e010      	b.n	8000632 <arm_fir_decimate_f32+0x46>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (tapCnt > 0U)
    {
      /* Read coefficients */
      c0 = *pb++;
 8000610:	ecfc 7a01 	vldmia	ip!, {s15}

      /* Fetch 1 state variable */
      x0 = *px0++;
 8000614:	ecf3 6a01 	vldmia	r3!, {s13}

      /* Perform the multiply-accumulate */
      acc0 += x0 * c0;
 8000618:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800061c:	ee37 7a27 	vadd.f32	s14, s14, s15

      /* Decrement loop counter */
      tapCnt--;
 8000620:	3f01      	subs	r7, #1
    while (tapCnt > 0U)
 8000622:	2f00      	cmp	r7, #0
 8000624:	d1f4      	bne.n	8000610 <arm_fir_decimate_f32+0x24>
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 8000626:	7823      	ldrb	r3, [r4, #0]
 8000628:	eb02 0283 	add.w	r2, r2, r3, lsl #2

    /* The result is in the accumulator, store in the destination buffer. */
    *pDst++ = acc0;
 800062c:	eca0 7a01 	vstmia	r0!, {s14}

    /* Decrement loop counter */
    blkCnt--;
 8000630:	3e01      	subs	r6, #1
  while (blkCnt > 0U)
 8000632:	b18e      	cbz	r6, 8000658 <arm_fir_decimate_f32+0x6c>
    i = S->M;
 8000634:	f894 c000 	ldrb.w	ip, [r4]
      *pStateCur++ = *pSrc++;
 8000638:	46f0      	mov	r8, lr
 800063a:	f10e 0e04 	add.w	lr, lr, #4
 800063e:	680b      	ldr	r3, [r1, #0]
 8000640:	3104      	adds	r1, #4
 8000642:	f8c8 3000 	str.w	r3, [r8]
    } while (--i);
 8000646:	f1bc 0c01 	subs.w	ip, ip, #1
 800064a:	d1f5      	bne.n	8000638 <arm_fir_decimate_f32+0x4c>
    tapCnt = numTaps;
 800064c:	462f      	mov	r7, r5
    pb = pCoeffs;
 800064e:	46cc      	mov	ip, r9
    px0 = pState;
 8000650:	4613      	mov	r3, r2
    acc0 = 0.0f;
 8000652:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000670 <arm_fir_decimate_f32+0x84>
 8000656:	e7e4      	b.n	8000622 <arm_fir_decimate_f32+0x36>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the satrt of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCur = S->pState;
 8000658:	68a3      	ldr	r3, [r4, #8]
  tapCnt = (numTaps - 1U) % 0x04U;

#else

  /* Initialize tapCnt with number of taps */
  tapCnt = (numTaps - 1U);
 800065a:	3d01      	subs	r5, #1

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
 800065c:	e004      	b.n	8000668 <arm_fir_decimate_f32+0x7c>
  {
    *pStateCur++ = *pState++;
 800065e:	f852 1b04 	ldr.w	r1, [r2], #4
 8000662:	f843 1b04 	str.w	r1, [r3], #4

    /* Decrement loop counter */
    tapCnt--;
 8000666:	3d01      	subs	r5, #1
  while (tapCnt > 0U)
 8000668:	2d00      	cmp	r5, #0
 800066a:	d1f8      	bne.n	800065e <arm_fir_decimate_f32+0x72>
  }

}
 800066c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000670:	00000000 	.word	0x00000000

08000674 <arm_fir_decimate_init_f32>:
        uint16_t numTaps,
        uint8_t M,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	4604      	mov	r4, r0
 8000678:	4615      	mov	r5, r2
 800067a:	9e04      	ldr	r6, [sp, #16]
 800067c:	9805      	ldr	r0, [sp, #20]
  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 800067e:	fbb0 f2f2 	udiv	r2, r0, r2
 8000682:	fb05 0212 	mls	r2, r5, r2, r0
 8000686:	b962      	cbnz	r2, 80006a2 <arm_fir_decimate_init_f32+0x2e>
    status = ARM_MATH_LENGTH_ERROR;
  }
  else
  {
    /* Assign filter taps */
    S->numTaps = numTaps;
 8000688:	8061      	strh	r1, [r4, #2]

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 800068a:	6063      	str	r3, [r4, #4]

    /* Clear the state buffer. The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 800068c:	4401      	add	r1, r0
 800068e:	3901      	subs	r1, #1
 8000690:	008a      	lsls	r2, r1, #2
 8000692:	2100      	movs	r1, #0
 8000694:	4630      	mov	r0, r6
 8000696:	f016 f999 	bl	80169cc <memset>

    /* Assign state pointer */
    S->pState = pState;
 800069a:	60a6      	str	r6, [r4, #8]

    /* Assign Decimation Factor */
    S->M = M;
 800069c:	7025      	strb	r5, [r4, #0]

    status = ARM_MATH_SUCCESS;
 800069e:	2000      	movs	r0, #0
  }

  return (status);

}
 80006a0:	bd70      	pop	{r4, r5, r6, pc}
    status = ARM_MATH_LENGTH_ERROR;
 80006a2:	f06f 0001 	mvn.w	r0, #1
 80006a6:	e7fb      	b.n	80006a0 <arm_fir_decimate_init_f32+0x2c>

080006a8 <arm_fir_interpolate_f32>:
void arm_fir_interpolate_f32(
  const arm_fir_interpolate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 80006a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006ac:	4607      	mov	r7, r0
 80006ae:	468a      	mov	sl, r1
 80006b0:	4694      	mov	ip, r2
 80006b2:	469b      	mov	fp, r3
#if (1)
//#if !defined(ARM_MATH_CM0_FAMILY)

        float32_t *pState = S->pState;                 /* State pointer */
 80006b4:	6885      	ldr	r5, [r0, #8]
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 80006b6:	f8d0 8004 	ldr.w	r8, [r0, #4]
        float32_t *pStateCur;                          /* Points to the current sample of the state */
        float32_t *ptr1;                               /* Temporary pointer for state buffer */
  const float32_t *ptr2;                               /* Temporary pointer for coefficient buffer */
        float32_t sum0;                                /* Accumulators */
        uint32_t i, blkCnt, tapCnt;                    /* Loop counters */
        uint32_t phaseLen = S->phaseLength;            /* Length of each polyphase filter component */
 80006ba:	8846      	ldrh	r6, [r0, #2]
        float32_t c0, c1, c2, c3;
#endif

  /* S->pState buffer contains previous frame (phaseLen - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (phaseLen - 1U);
 80006bc:	f06f 4940 	mvn.w	r9, #3221225472	; 0xc0000000
 80006c0:	44b1      	add	r9, r6
 80006c2:	eb05 0989 	add.w	r9, r5, r9, lsl #2
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80006c6:	e01f      	b.n	8000708 <arm_fir_interpolate_f32+0x60>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (tapCnt > 0U)
      {
        /* Perform the multiply-accumulate */
        sum0 += *ptr1++ * *ptr2;
 80006c8:	ecf3 7a01 	vldmia	r3!, {s15}
 80006cc:	edd2 6a00 	vldr	s13, [r2]
 80006d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80006d4:	ee37 7a27 	vadd.f32	s14, s14, s15

        /* Upsampling is done by stuffing L-1 zeros between each sample.
         * So instead of multiplying zeros with coefficients,
         * Increment the coefficient pointer by interpolation factor times. */
        ptr2 += S->L;
 80006d8:	eb02 0280 	add.w	r2, r2, r0, lsl #2

        /* Decrement loop counter */
        tapCnt--;
 80006dc:	3901      	subs	r1, #1
      while (tapCnt > 0U)
 80006de:	2900      	cmp	r1, #0
 80006e0:	d1f2      	bne.n	80006c8 <arm_fir_interpolate_f32+0x20>
      }

      /* The result is in the accumulator, store in the destination buffer. */
      *pDst++ = sum0;
 80006e2:	ecac 7a01 	vstmia	ip!, {s14}

      /* Increment the address modifier index of coefficient buffer */
      j++;
 80006e6:	f10e 0e01 	add.w	lr, lr, #1

      /* Decrement the loop counter */
      i--;
 80006ea:	3c01      	subs	r4, #1
    while (i > 0U)
 80006ec:	b14c      	cbz	r4, 8000702 <arm_fir_interpolate_f32+0x5a>
      ptr2 = pCoeffs + (S->L - j);
 80006ee:	7838      	ldrb	r0, [r7, #0]
 80006f0:	eba0 020e 	sub.w	r2, r0, lr
 80006f4:	eb08 0282 	add.w	r2, r8, r2, lsl #2
      tapCnt = phaseLen;
 80006f8:	4631      	mov	r1, r6
      ptr1 = pState;
 80006fa:	462b      	mov	r3, r5
      sum0 = 0.0f;
 80006fc:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000738 <arm_fir_interpolate_f32+0x90>
      while (tapCnt > 0U)
 8000700:	e7ed      	b.n	80006de <arm_fir_interpolate_f32+0x36>
    }

    /* Advance the state pointer by 1
     * to process the next group of interpolation factor number samples */
    pState = pState + 1;
 8000702:	3504      	adds	r5, #4

    /* Decrement the loop counter */
    blkCnt--;
 8000704:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
  while (blkCnt > 0U)
 8000708:	f1bb 0f00 	cmp.w	fp, #0
 800070c:	d007      	beq.n	800071e <arm_fir_interpolate_f32+0x76>
    *pStateCur++ = *pSrc++;
 800070e:	f85a 3b04 	ldr.w	r3, [sl], #4
 8000712:	f849 3b04 	str.w	r3, [r9], #4
    i = S->L;
 8000716:	783c      	ldrb	r4, [r7, #0]
    j = 1U;
 8000718:	f04f 0e01 	mov.w	lr, #1
    while (i > 0U)
 800071c:	e7e6      	b.n	80006ec <arm_fir_interpolate_f32+0x44>
  /* Processing is complete.
     Now copy the last phaseLen - 1 samples to the satrt of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCur = S->pState;
 800071e:	68bb      	ldr	r3, [r7, #8]
  tapCnt = (phaseLen - 1U) % 0x04U;

#else

    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
 8000720:	3e01      	subs	r6, #1

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
 8000722:	e004      	b.n	800072e <arm_fir_interpolate_f32+0x86>
  {
    *pStateCur++ = *pState++;
 8000724:	f855 2b04 	ldr.w	r2, [r5], #4
 8000728:	f843 2b04 	str.w	r2, [r3], #4

    /* Decrement loop counter */
    tapCnt--;
 800072c:	3e01      	subs	r6, #1
  while (tapCnt > 0U)
 800072e:	2e00      	cmp	r6, #0
 8000730:	d1f8      	bne.n	8000724 <arm_fir_interpolate_f32+0x7c>
    tapCnt--;
  }

#endif /* #if !defined(ARM_MATH_CM0_FAMILY) */

}
 8000732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000736:	bf00      	nop
 8000738:	00000000 	.word	0x00000000

0800073c <arm_fir_interpolate_init_f32>:
        uint8_t L,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 800073c:	b538      	push	{r3, r4, r5, lr}
 800073e:	4604      	mov	r4, r0
 8000740:	9d04      	ldr	r5, [sp, #16]
  arm_status status;

  /* The filter length must be a multiple of the interpolation factor */
  if ((numTaps % L) != 0U)
 8000742:	fb92 f0f1 	sdiv	r0, r2, r1
 8000746:	fb01 2010 	mls	r0, r1, r0, r2
 800074a:	b978      	cbnz	r0, 800076c <arm_fir_interpolate_init_f32+0x30>
    status = ARM_MATH_LENGTH_ERROR;
  }
  else
  {
    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 800074c:	6063      	str	r3, [r4, #4]

    /* Assign Interpolation factor */
    S->L = L;
 800074e:	7021      	strb	r1, [r4, #0]

    /* Assign polyPhaseLength */
    S->phaseLength = numTaps / L;
 8000750:	fb92 f2f1 	sdiv	r2, r2, r1
 8000754:	8062      	strh	r2, [r4, #2]

    /* Clear state buffer and size of buffer is always phaseLength + blockSize - 1 */
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(float32_t));
 8000756:	9b05      	ldr	r3, [sp, #20]
 8000758:	441a      	add	r2, r3
 800075a:	3a01      	subs	r2, #1
 800075c:	0092      	lsls	r2, r2, #2
 800075e:	2100      	movs	r1, #0
 8000760:	4628      	mov	r0, r5
 8000762:	f016 f933 	bl	80169cc <memset>

    /* Assign state pointer */
    S->pState = pState;
 8000766:	60a5      	str	r5, [r4, #8]

    status = ARM_MATH_SUCCESS;
 8000768:	2000      	movs	r0, #0
  }

  return (status);
}
 800076a:	bd38      	pop	{r3, r4, r5, pc}
    status = ARM_MATH_LENGTH_ERROR;
 800076c:	f06f 0001 	mvn.w	r0, #1
 8000770:	e7fb      	b.n	800076a <arm_fir_interpolate_init_f32+0x2e>
	...

08000774 <arm_sin_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8000774:	eddf 7a20 	vldr	s15, [pc, #128]	; 80007f8 <arm_sin_f32+0x84>
 8000778:	ee20 0a27 	vmul.f32	s0, s0, s15

  /* Calculation of floor value of input */
  n = (int32_t) in;
 800077c:	eefd 7ac0 	vcvt.s32.f32	s15, s0

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000780:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000788:	d42f      	bmi.n	80007ea <arm_sin_f32+0x76>
  {
    n--;
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800078a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800078e:	ee30 0a67 	vsub.f32	s0, s0, s15

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8000792:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80007fc <arm_sin_f32+0x88>
 8000796:	ee20 0a27 	vmul.f32	s0, s0, s15
  index = (uint16_t)findex;
 800079a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800079e:	ee17 3a90 	vmov	r3, s15
 80007a2:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 80007a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007a8:	d304      	bcc.n	80007b4 <arm_sin_f32+0x40>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 80007aa:	eddf 7a14 	vldr	s15, [pc, #80]	; 80007fc <arm_sin_f32+0x88>
 80007ae:	ee30 0a67 	vsub.f32	s0, s0, s15
    index = 0;
 80007b2:	2300      	movs	r3, #0
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80007b4:	ee07 3a90 	vmov	s15, r3
 80007b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007bc:	ee70 7a67 	vsub.f32	s15, s0, s15

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
 80007c0:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <arm_sin_f32+0x8c>)
 80007c2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80007c6:	ed91 6a00 	vldr	s12, [r1]
  b = sinTable_f32[index+1];
 80007ca:	3301      	adds	r3, #1
 80007cc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80007d0:	edd2 6a00 	vldr	s13, [r2]

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 80007d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80007d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80007dc:	ee27 7a06 	vmul.f32	s14, s14, s12
 80007e0:	ee27 0aa6 	vmul.f32	s0, s15, s13

  /* Return output value */
  return (sinVal);
}
 80007e4:	ee37 0a00 	vadd.f32	s0, s14, s0
 80007e8:	4770      	bx	lr
    n--;
 80007ea:	ee17 3a90 	vmov	r3, s15
 80007ee:	3b01      	subs	r3, #1
 80007f0:	ee07 3a90 	vmov	s15, r3
 80007f4:	e7c9      	b.n	800078a <arm_sin_f32+0x16>
 80007f6:	bf00      	nop
 80007f8:	3e22f983 	.word	0x3e22f983
 80007fc:	44000000 	.word	0x44000000
 8000800:	08018ee8 	.word	0x08018ee8

08000804 <dbToATableLookup>:
    uint32_t inAmpIndex = LEAF_clip (0, (in * atodbTableScalar) - atodbTableOffset, ATODB_TABLE_SIZE_MINUS_ONE);
    return atoDbTable[inAmpIndex];
}

float FORCE_INLINE dbToATableLookup(float in)
{
 8000804:	b508      	push	{r3, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <dbToATableLookup+0x6c>)
 8000808:	edd3 7a00 	vldr	s15, [r3]
 800080c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <dbToATableLookup+0x70>)
 8000812:	edd3 0a00 	vldr	s1, [r3]
 8000816:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8000878 <dbToATableLookup+0x74>
 800081a:	ee70 0a60 	vsub.f32	s1, s0, s1
 800081e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800087c <dbToATableLookup+0x78>
 8000822:	f011 f9e5 	bl	8011bf0 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
 8000826:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 800082a:	ee17 3a90 	vmov	r3, s15
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
 800082e:	1c59      	adds	r1, r3, #1
    if (inDBIndexPlusOne > DBTOA_TABLE_SIZE_MINUS_ONE)
 8000830:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8000834:	d301      	bcc.n	800083a <dbToATableLookup+0x36>
    {
    	inDBIndexPlusOne = DBTOA_TABLE_SIZE_MINUS_ONE;
 8000836:	f643 71ff 	movw	r1, #16383	; 0x3fff
    }
    float alpha = floatIndex - (float)inDBIndex;
 800083a:	ee07 3a90 	vmov	s15, r3
 800083e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000842:	ee70 7a67 	vsub.f32	s15, s0, s15
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 8000846:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <dbToATableLookup+0x7c>)
 8000848:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800084c:	ed93 0a00 	vldr	s0, [r3]
 8000850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000854:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000858:	ee20 0a07 	vmul.f32	s0, s0, s14
 800085c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000860:	ed92 7a00 	vldr	s14, [r2]
 8000864:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000868:	ee30 0a27 	vadd.f32	s0, s0, s15
 800086c:	bd08      	pop	{r3, pc}
 800086e:	bf00      	nop
 8000870:	200013a4 	.word	0x200013a4
 8000874:	200013a0 	.word	0x200013a0
 8000878:	467ffc00 	.word	0x467ffc00
 800087c:	00000000 	.word	0x00000000
 8000880:	30002000 	.word	0x30002000

08000884 <mtofTableLookup>:
}



float FORCE_INLINE mtofTableLookup(float tempMIDI)
{
 8000884:	b508      	push	{r3, lr}
 8000886:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 800088a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80008e8 <mtofTableLookup+0x64>
 800088e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80008ec <mtofTableLookup+0x68>
 8000892:	f011 f9ad 	bl	8011bf0 <LEAF_clip>
 8000896:	eddf 7a16 	vldr	s15, [pc, #88]	; 80008f0 <mtofTableLookup+0x6c>
 800089a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800089e:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80008f4 <mtofTableLookup+0x70>
 80008a2:	ee77 7a87 	vadd.f32	s15, s15, s14
	int tempIndexI = (int)tempIndexF;
 80008a6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80008aa:	ee17 3a10 	vmov	r3, s14
	tempIndexF = tempIndexF -tempIndexI;
 80008ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80008b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 80008b6:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80008ba:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <mtofTableLookup+0x74>)
 80008bc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80008c0:	edd1 6a00 	vldr	s13, [r1]
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 80008c4:	3301      	adds	r3, #1
 80008c6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80008ce:	ed92 7a00 	vldr	s14, [r2]
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 80008d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80008d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80008da:	ee20 0a26 	vmul.f32	s0, s0, s13
 80008de:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80008e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80008e6:	bd08      	pop	{r3, pc}
 80008e8:	43230000 	.word	0x43230000
 80008ec:	c3230000 	.word	0xc3230000
 80008f0:	42c80000 	.word	0x42c80000
 80008f4:	46800000 	.word	0x46800000
 80008f8:	30022000 	.word	0x30022000

080008fc <audioInit>:


void audioInit()
{
 80008fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 80008fe:	4c87      	ldr	r4, [pc, #540]	; (8000b1c <audioInit+0x220>)
 8000900:	4b87      	ldr	r3, [pc, #540]	; (8000b20 <audioInit+0x224>)
 8000902:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000906:	4987      	ldr	r1, [pc, #540]	; (8000b24 <audioInit+0x228>)
 8000908:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8000b28 <audioInit+0x22c>
 800090c:	4620      	mov	r0, r4
 800090e:	f015 ffc5 	bl	801689c <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8000912:	4623      	mov	r3, r4
 8000914:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000918:	4984      	ldr	r1, [pc, #528]	; (8000b2c <audioInit+0x230>)
 800091a:	4885      	ldr	r0, [pc, #532]	; (8000b30 <audioInit+0x234>)
 800091c:	f011 fe2e 	bl	801257c <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 8000920:	4623      	mov	r3, r4
 8000922:	f04f 72f0 	mov.w	r2, #31457280	; 0x1e00000
 8000926:	4983      	ldr	r1, [pc, #524]	; (8000b34 <audioInit+0x238>)
 8000928:	4883      	ldr	r0, [pc, #524]	; (8000b38 <audioInit+0x23c>)
 800092a:	f011 fe27 	bl	801257c <tMempool_init>

	leaf.clearOnAllocation = 1;
 800092e:	2301      	movs	r3, #1
 8000930:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8000932:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000936:	eddf 1a81 	vldr	s3, [pc, #516]	; 8000b3c <audioInit+0x240>
 800093a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800093e:	eddf 0a80 	vldr	s1, [pc, #512]	; 8000b40 <audioInit+0x244>
 8000942:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8000b44 <audioInit+0x248>
 8000946:	4880      	ldr	r0, [pc, #512]	; (8000b48 <audioInit+0x24c>)
 8000948:	f011 fa0e 	bl	8011d68 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 800094c:	4b7f      	ldr	r3, [pc, #508]	; (8000b4c <audioInit+0x250>)
 800094e:	4a80      	ldr	r2, [pc, #512]	; (8000b50 <audioInit+0x254>)
 8000950:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 12; i++)
 8000952:	2300      	movs	r3, #0
 8000954:	e004      	b.n	8000960 <audioInit+0x64>
	{
		previousStringInputs[i]	= 0;
 8000956:	4a7f      	ldr	r2, [pc, #508]	; (8000b54 <audioInit+0x258>)
 8000958:	2100      	movs	r1, #0
 800095a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 12; i++)
 800095e:	3301      	adds	r3, #1
 8000960:	2b0b      	cmp	r3, #11
 8000962:	ddf8      	ble.n	8000956 <audioInit+0x5a>





	for (int i = 0; i < 256; i++)
 8000964:	2400      	movs	r4, #0
 8000966:	e00f      	b.n	8000988 <audioInit+0x8c>
	{
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 8000968:	f018 fa8a 	bl	8018e80 <__randomNumber_veneer>
 800096c:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8000b58 <audioInit+0x25c>
 8000970:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000974:	eddf 7a79 	vldr	s15, [pc, #484]	; 8000b5c <audioInit+0x260>
 8000978:	ee30 0a27 	vadd.f32	s0, s0, s15
 800097c:	4b78      	ldr	r3, [pc, #480]	; (8000b60 <audioInit+0x264>)
 800097e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000982:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 256; i++)
 8000986:	3401      	adds	r4, #1
 8000988:	2cff      	cmp	r4, #255	; 0xff
 800098a:	dded      	ble.n	8000968 <audioInit+0x6c>
	}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
 800098c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000990:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8000b64 <audioInit+0x268>
 8000994:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000998:	4873      	ldr	r0, [pc, #460]	; (8000b68 <audioInit+0x26c>)
 800099a:	f011 fbc7 	bl	801212c <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 50.0f);
 800099e:	eddf 0a73 	vldr	s1, [pc, #460]	; 8000b6c <audioInit+0x270>
 80009a2:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8000b70 <audioInit+0x274>
 80009a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009aa:	4872      	ldr	r0, [pc, #456]	; (8000b74 <audioInit+0x278>)
 80009ac:	f011 fa42 	bl	8011e34 <LEAF_generate_dbtoa>

	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
 80009b0:	4b71      	ldr	r3, [pc, #452]	; (8000b78 <audioInit+0x27c>)
 80009b2:	4a72      	ldr	r2, [pc, #456]	; (8000b7c <audioInit+0x280>)
 80009b4:	601a      	str	r2, [r3, #0]
	atodbTableOffset = 0.00001f * atodbTableScalar;
 80009b6:	4b72      	ldr	r3, [pc, #456]	; (8000b80 <audioInit+0x284>)
 80009b8:	4a72      	ldr	r2, [pc, #456]	; (8000b84 <audioInit+0x288>)
 80009ba:	601a      	str	r2, [r3, #0]
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 80009bc:	4b72      	ldr	r3, [pc, #456]	; (8000b88 <audioInit+0x28c>)
 80009be:	4a73      	ldr	r2, [pc, #460]	; (8000b8c <audioInit+0x290>)
 80009c0:	601a      	str	r2, [r3, #0]
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 80009c2:	4b73      	ldr	r3, [pc, #460]	; (8000b90 <audioInit+0x294>)
 80009c4:	4a73      	ldr	r2, [pc, #460]	; (8000b94 <audioInit+0x298>)
 80009c6:	601a      	str	r2, [r3, #0]

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 80009c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009cc:	eddf 0a72 	vldr	s1, [pc, #456]	; 8000b98 <audioInit+0x29c>
 80009d0:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8000b9c <audioInit+0x2a0>
 80009d4:	4872      	ldr	r0, [pc, #456]	; (8000ba0 <audioInit+0x2a4>)
 80009d6:	f011 fb35 	bl	8012044 <LEAF_generate_mtof>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 80009da:	4b72      	ldr	r3, [pc, #456]	; (8000ba4 <audioInit+0x2a8>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	4a71      	ldr	r2, [pc, #452]	; (8000ba8 <audioInit+0x2ac>)
 80009e2:	6013      	str	r3, [r2, #0]
		numStringsThisBoard = 2;
 80009e4:	4b71      	ldr	r3, [pc, #452]	; (8000bac <audioInit+0x2b0>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	701a      	strb	r2, [r3, #0]
	}




	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 80009ea:	494c      	ldr	r1, [pc, #304]	; (8000b1c <audioInit+0x220>)
 80009ec:	eddf 0a70 	vldr	s1, [pc, #448]	; 8000bb0 <audioInit+0x2b4>
 80009f0:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8000b40 <audioInit+0x244>
 80009f4:	486f      	ldr	r0, [pc, #444]	; (8000bb4 <audioInit+0x2b8>)
 80009f6:	f00e f9bf 	bl	800ed78 <tExpSmooth_init>
	for (int i = 0; i < 20; i++)
 80009fa:	2400      	movs	r4, #0
 80009fc:	e00a      	b.n	8000a14 <audioInit+0x118>
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 80009fe:	4947      	ldr	r1, [pc, #284]	; (8000b1c <audioInit+0x220>)
 8000a00:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8000bb0 <audioInit+0x2b4>
 8000a04:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8000b40 <audioInit+0x244>
 8000a08:	486b      	ldr	r0, [pc, #428]	; (8000bb8 <audioInit+0x2bc>)
 8000a0a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8000a0e:	f00e f9b3 	bl	800ed78 <tExpSmooth_init>
	for (int i = 0; i < 20; i++)
 8000a12:	3401      	adds	r4, #1
 8000a14:	2c13      	cmp	r4, #19
 8000a16:	ddf2      	ble.n	80009fe <audioInit+0x102>
	}
	for (int i = 0; i < 10; i++)
 8000a18:	2400      	movs	r4, #0
 8000a1a:	e00a      	b.n	8000a32 <audioInit+0x136>
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 8000a1c:	493f      	ldr	r1, [pc, #252]	; (8000b1c <audioInit+0x220>)
 8000a1e:	eddf 0a64 	vldr	s1, [pc, #400]	; 8000bb0 <audioInit+0x2b4>
 8000a22:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8000b40 <audioInit+0x244>
 8000a26:	4865      	ldr	r0, [pc, #404]	; (8000bbc <audioInit+0x2c0>)
 8000a28:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8000a2c:	f00e f9a4 	bl	800ed78 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
 8000a30:	3401      	adds	r4, #1
 8000a32:	2c09      	cmp	r4, #9
 8000a34:	ddf2      	ble.n	8000a1c <audioInit+0x120>
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8000a36:	2400      	movs	r4, #0
 8000a38:	e015      	b.n	8000a66 <audioInit+0x16a>
	{
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 8000a3a:	4d38      	ldr	r5, [pc, #224]	; (8000b1c <audioInit+0x220>)
 8000a3c:	00a6      	lsls	r6, r4, #2
 8000a3e:	4629      	mov	r1, r5
 8000a40:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8000bc0 <audioInit+0x2c4>
 8000a44:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8000b40 <audioInit+0x244>
 8000a48:	485e      	ldr	r0, [pc, #376]	; (8000bc4 <audioInit+0x2c8>)
 8000a4a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8000a4e:	f00e f993 	bl	800ed78 <tExpSmooth_init>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 8000a52:	4629      	mov	r1, r5
 8000a54:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8000bc8 <audioInit+0x2cc>
 8000a58:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8000bcc <audioInit+0x2d0>
 8000a5c:	485c      	ldr	r0, [pc, #368]	; (8000bd0 <audioInit+0x2d4>)
 8000a5e:	4430      	add	r0, r6
 8000a60:	f00c ffe2 	bl	800da28 <tEnvelopeFollower_init>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8000a64:	3401      	adds	r4, #1
 8000a66:	2c01      	cmp	r4, #1
 8000a68:	dde7      	ble.n	8000a3a <audioInit+0x13e>
	}

	audioInitAdditive();
 8000a6a:	f018 fa1d 	bl	8018ea8 <__audioInitAdditive_veneer>
	audioInitString1();
 8000a6e:	f018 f9f7 	bl	8018e60 <__audioInitString1_veneer>
	audioInitVocal();
 8000a72:	f018 f9fd 	bl	8018e70 <__audioInitVocal_veneer>
	audioInitSynth();
 8000a76:	f002 fa3b 	bl	8002ef0 <audioInitSynth>
	audioInitString3();
 8000a7a:	f018 fa1d 	bl	8018eb8 <__audioInitString3_veneer>

	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000a7e:	2400      	movs	r4, #0
 8000a80:	e039      	b.n	8000af6 <audioInit+0x1fa>
	{


		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000a82:	4d26      	ldr	r5, [pc, #152]	; (8000b1c <audioInit+0x220>)
 8000a84:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8000b40 <audioInit+0x244>
 8000a88:	462b      	mov	r3, r5
 8000a8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a8e:	492e      	ldr	r1, [pc, #184]	; (8000b48 <audioInit+0x24c>)
 8000a90:	eddf 1a50 	vldr	s3, [pc, #320]	; 8000bd4 <audioInit+0x2d8>
 8000a94:	eeb0 1a40 	vmov.f32	s2, s0
 8000a98:	eddf 0a34 	vldr	s1, [pc, #208]	; 8000b6c <audioInit+0x270>
 8000a9c:	484e      	ldr	r0, [pc, #312]	; (8000bd8 <audioInit+0x2dc>)
 8000a9e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8000aa2:	f00d fe8d 	bl	800e7c0 <tADSRT_init>


		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 8000aa6:	4f4d      	ldr	r7, [pc, #308]	; (8000bdc <audioInit+0x2e0>)
 8000aa8:	462a      	mov	r2, r5
 8000aaa:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000aae:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8000be0 <audioInit+0x2e4>
 8000ab2:	2103      	movs	r1, #3
 8000ab4:	4638      	mov	r0, r7
 8000ab6:	f00f fab3 	bl	8010020 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 8000aba:	4e4a      	ldr	r6, [pc, #296]	; (8000be4 <audioInit+0x2e8>)
 8000abc:	462a      	mov	r2, r5
 8000abe:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8000be8 <audioInit+0x2ec>
 8000ac2:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8000bec <audioInit+0x2f0>
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4630      	mov	r0, r6
 8000aca:	f00f faa9 	bl	8010020 <tVZFilter_init>
		//tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values


		tVZFilter_setFreq(&noiseFilt, faster_mtof(0.9f * 128.0f));
 8000ace:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8000bf0 <audioInit+0x2f4>
 8000ad2:	f011 fae1 	bl	8012098 <faster_mtof>
 8000ad6:	4638      	mov	r0, r7
 8000ad8:	f00e fff2 	bl	800fac0 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
 8000adc:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8000bf4 <audioInit+0x2f8>
 8000ae0:	f011 fada 	bl	8012098 <faster_mtof>
 8000ae4:	4630      	mov	r0, r6
 8000ae6:	f00e ffeb 	bl	800fac0 <tVZFilter_setFreq>

		tNoise_init(&myNoise, WhiteNoise, &leaf);
 8000aea:	462a      	mov	r2, r5
 8000aec:	2100      	movs	r1, #0
 8000aee:	4842      	ldr	r0, [pc, #264]	; (8000bf8 <audioInit+0x2fc>)
 8000af0:	f012 f8fb 	bl	8012cea <tNoise_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000af4:	3401      	adds	r4, #1
 8000af6:	2c01      	cmp	r4, #1
 8000af8:	ddc3      	ble.n	8000a82 <audioInit+0x186>

	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	e004      	b.n	8000b08 <audioInit+0x20c>
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
 8000afe:	4a3f      	ldr	r2, [pc, #252]	; (8000bfc <audioInit+0x300>)
 8000b00:	2100      	movs	r1, #0
 8000b02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 8000b06:	3301      	adds	r3, #1
 8000b08:	2bff      	cmp	r3, #255	; 0xff
 8000b0a:	ddf8      	ble.n	8000afe <audioInit+0x202>
	}

	audioFrameFunction = audioFrameSynth;
 8000b0c:	4b3c      	ldr	r3, [pc, #240]	; (8000c00 <audioInit+0x304>)
 8000b0e:	4a3d      	ldr	r2, [pc, #244]	; (8000c04 <audioInit+0x308>)
 8000b10:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f002 ffd4 	bl	8003ac0 <HAL_Delay>

}
 8000b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20005484 	.word	0x20005484
 8000b20:	00001be1 	.word	0x00001be1
 8000b24:	2000596c 	.word	0x2000596c
 8000b28:	473b8000 	.word	0x473b8000
 8000b2c:	24040000 	.word	0x24040000
 8000b30:	200054d8 	.word	0x200054d8
 8000b34:	60000000 	.word	0x60000000
 8000b38:	20005480 	.word	0x20005480
 8000b3c:	ba51b717 	.word	0xba51b717
 8000b40:	00000000 	.word	0x00000000
 8000b44:	3a83126f 	.word	0x3a83126f
 8000b48:	200013a8 	.word	0x200013a8
 8000b4c:	200053a8 	.word	0x200053a8
 8000b50:	457ff000 	.word	0x457ff000
 8000b54:	20005550 	.word	0x20005550
 8000b58:	3ecccccd 	.word	0x3ecccccd
 8000b5c:	3f4ccccd 	.word	0x3f4ccccd
 8000b60:	20005568 	.word	0x20005568
 8000b64:	3727c5ac 	.word	0x3727c5ac
 8000b68:	30012000 	.word	0x30012000
 8000b6c:	42480000 	.word	0x42480000
 8000b70:	c2b40000 	.word	0xc2b40000
 8000b74:	30002000 	.word	0x30002000
 8000b78:	2000137c 	.word	0x2000137c
 8000b7c:	467ffca8 	.word	0x467ffca8
 8000b80:	20001378 	.word	0x20001378
 8000b84:	3e27c37b 	.word	0x3e27c37b
 8000b88:	200013a4 	.word	0x200013a4
 8000b8c:	42ea0af9 	.word	0x42ea0af9
 8000b90:	200013a0 	.word	0x200013a0
 8000b94:	c6248fb7 	.word	0xc6248fb7
 8000b98:	4323d666 	.word	0x4323d666
 8000b9c:	c323d666 	.word	0xc323d666
 8000ba0:	30022000 	.word	0x30022000
 8000ba4:	200144e5 	.word	0x200144e5
 8000ba8:	200053bc 	.word	0x200053bc
 8000bac:	20000694 	.word	0x20000694
 8000bb0:	3a03126f 	.word	0x3a03126f
 8000bb4:	2001444c 	.word	0x2001444c
 8000bb8:	20005430 	.word	0x20005430
 8000bbc:	2000551c 	.word	0x2000551c
 8000bc0:	3c23d70a 	.word	0x3c23d70a
 8000bc4:	20001394 	.word	0x20001394
 8000bc8:	3f7fd220 	.word	0x3f7fd220
 8000bcc:	38d1b717 	.word	0x38d1b717
 8000bd0:	2000138c 	.word	0x2000138c
 8000bd4:	43480000 	.word	0x43480000
 8000bd8:	200053b4 	.word	0x200053b4
 8000bdc:	200054e4 	.word	0x200054e4
 8000be0:	44bb8000 	.word	0x44bb8000
 8000be4:	200054e8 	.word	0x200054e8
 8000be8:	3f666666 	.word	0x3f666666
 8000bec:	44480000 	.word	0x44480000
 8000bf0:	42e66666 	.word	0x42e66666
 8000bf4:	42cccccd 	.word	0x42cccccd
 8000bf8:	200054dc 	.word	0x200054dc
 8000bfc:	30000000 	.word	0x30000000
 8000c00:	20001380 	.word	0x20001380
 8000c04:	000088e1 	.word	0x000088e1

08000c08 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	4604      	mov	r4, r0
	HAL_Delay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f002 ff57 	bl	8003ac0 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8000c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c16:	4903      	ldr	r1, [pc, #12]	; (8000c24 <audioStart+0x1c>)
 8000c18:	4620      	mov	r0, r4
 8000c1a:	f008 f9d5 	bl	8008fc8 <HAL_SAI_Transmit_DMA>
 8000c1e:	4b02      	ldr	r3, [pc, #8]	; (8000c28 <audioStart+0x20>)
 8000c20:	7018      	strb	r0, [r3, #0]
	//receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
}
 8000c22:	bd10      	pop	{r4, pc}
 8000c24:	30000000 	.word	0x30000000
 8000c28:	2001443c 	.word	0x2001443c

08000c2c <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8000c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c30:	b083      	sub	sp, #12
 8000c32:	4605      	mov	r5, r0

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c3a:	4843      	ldr	r0, [pc, #268]	; (8000d48 <AudioCodec_init+0x11c>)
 8000c3c:	f004 fcdd 	bl	80055fa <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8000c40:	2002      	movs	r0, #2
 8000c42:	f002 ff3d 	bl	8003ac0 <HAL_Delay>
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8000c46:	4c41      	ldr	r4, [pc, #260]	; (8000d4c <AudioCodec_init+0x120>)
 8000c48:	f04f 0a07 	mov.w	sl, #7
 8000c4c:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x03;
 8000c50:	f04f 0b03 	mov.w	fp, #3
 8000c54:	f884 b001 	strb.w	fp, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c58:	4e3d      	ldr	r6, [pc, #244]	; (8000d50 <AudioCodec_init+0x124>)
 8000c5a:	4f3e      	ldr	r7, [pc, #248]	; (8000d54 <AudioCodec_init+0x128>)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	8833      	ldrh	r3, [r6, #0]
 8000c62:	4622      	mov	r2, r4
 8000c64:	2120      	movs	r1, #32
 8000c66:	4628      	mov	r0, r5
 8000c68:	f004 feb2 	bl	80059d0 <HAL_I2C_Master_Transmit>
 8000c6c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8000d5c <AudioCodec_init+0x130>
 8000c70:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(2);

	myI2cData[0] = 0x01;
 8000c74:	f04f 0901 	mov.w	r9, #1
 8000c78:	f884 9000 	strb.w	r9, [r4]
	myI2cData[1] = 0x41;
 8000c7c:	2341      	movs	r3, #65	; 0x41
 8000c7e:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	9300      	str	r3, [sp, #0]
 8000c84:	8833      	ldrh	r3, [r6, #0]
 8000c86:	4622      	mov	r2, r4
 8000c88:	2120      	movs	r1, #32
 8000c8a:	4628      	mov	r0, r5
 8000c8c:	f004 fea0 	bl	80059d0 <HAL_I2C_Master_Transmit>
 8000c90:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
 8000c94:	f04f 0302 	mov.w	r3, #2
 8000c98:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x00;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	8833      	ldrh	r3, [r6, #0]
 8000ca4:	4622      	mov	r2, r4
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	4628      	mov	r0, r5
 8000caa:	f004 fe91 	bl	80059d0 <HAL_I2C_Master_Transmit>
 8000cae:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
 8000cb2:	f884 b000 	strb.w	fp, [r4]
	myI2cData[1] = 0x79;
 8000cb6:	2379      	movs	r3, #121	; 0x79
 8000cb8:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	8833      	ldrh	r3, [r6, #0]
 8000cc0:	4622      	mov	r2, r4
 8000cc2:	2120      	movs	r1, #32
 8000cc4:	4628      	mov	r0, r5
 8000cc6:	f004 fe83 	bl	80059d0 <HAL_I2C_Master_Transmit>
 8000cca:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 8000cd2:	f884 9001 	strb.w	r9, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	8833      	ldrh	r3, [r6, #0]
 8000cdc:	4622      	mov	r2, r4
 8000cde:	2120      	movs	r1, #32
 8000ce0:	4628      	mov	r0, r5
 8000ce2:	f004 fe75 	bl	80059d0 <HAL_I2C_Master_Transmit>
 8000ce6:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
 8000cea:	2305      	movs	r3, #5
 8000cec:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x01;
 8000cee:	f884 9001 	strb.w	r9, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	8833      	ldrh	r3, [r6, #0]
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	4628      	mov	r0, r5
 8000cfe:	f004 fe67 	bl	80059d0 <HAL_I2C_Master_Transmit>
 8000d02:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
 8000d06:	2306      	movs	r3, #6
 8000d08:	7023      	strb	r3, [r4, #0]
	myI2cData[1] = 0x10;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	7063      	strb	r3, [r4, #1]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	8833      	ldrh	r3, [r6, #0]
 8000d14:	4622      	mov	r2, r4
 8000d16:	2120      	movs	r1, #32
 8000d18:	4628      	mov	r0, r5
 8000d1a:	f004 fe59 	bl	80059d0 <HAL_I2C_Master_Transmit>
 8000d1e:	f888 0000 	strb.w	r0, [r8]

	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
 8000d22:	f884 a000 	strb.w	sl, [r4]
	myI2cData[1] = 0x02;
 8000d26:	f04f 0302 	mov.w	r3, #2
 8000d2a:	7063      	strb	r3, [r4, #1]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	8833      	ldrh	r3, [r6, #0]
 8000d32:	4622      	mov	r2, r4
 8000d34:	2120      	movs	r1, #32
 8000d36:	4628      	mov	r0, r5
 8000d38:	f004 fe4a 	bl	80059d0 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <AudioCodec_init+0x12c>)
 8000d3e:	f8c3 9000 	str.w	r9, [r3]

}
 8000d42:	b003      	add	sp, #12
 8000d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d48:	58020800 	.word	0x58020800
 8000d4c:	20014454 	.word	0x20014454
 8000d50:	200008a4 	.word	0x200008a4
 8000d54:	200008a0 	.word	0x200008a0
 8000d58:	2000139c 	.word	0x2000139c
 8000d5c:	20014456 	.word	0x20014456

08000d60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d60:	b500      	push	{lr}
 8000d62:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <MX_DMA_Init+0x74>)
 8000d66:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000d6a:	f042 0201 	orr.w	r2, r2, #1
 8000d6e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000d72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	210a      	movs	r1, #10
 8000d82:	200c      	movs	r0, #12
 8000d84:	f002 fed2 	bl	8003b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d88:	200c      	movs	r0, #12
 8000d8a:	f002 ff05 	bl	8003b98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 9, 0);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	2109      	movs	r1, #9
 8000d92:	200d      	movs	r0, #13
 8000d94:	f002 feca 	bl	8003b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d98:	200d      	movs	r0, #13
 8000d9a:	f002 fefd 	bl	8003b98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 8, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2108      	movs	r1, #8
 8000da2:	200e      	movs	r0, #14
 8000da4:	f002 fec2 	bl	8003b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000da8:	200e      	movs	r0, #14
 8000daa:	f002 fef5 	bl	8003b98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2107      	movs	r1, #7
 8000db2:	200f      	movs	r0, #15
 8000db4:	f002 feba 	bl	8003b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000db8:	200f      	movs	r0, #15
 8000dba:	f002 feed 	bl	8003b98 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	2010      	movs	r0, #16
 8000dc4:	f002 feb2 	bl	8003b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000dc8:	2010      	movs	r0, #16
 8000dca:	f002 fee5 	bl	8003b98 <HAL_NVIC_EnableIRQ>

}
 8000dce:	b003      	add	sp, #12
 8000dd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000dd4:	58024400 	.word	0x58024400

08000dd8 <HAL_FMC_MspInit>:
  /* USER CODE END FMC_Init 2 */
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dda:	b0b9      	sub	sp, #228	; 0xe4
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	2300      	movs	r3, #0
 8000dde:	9333      	str	r3, [sp, #204]	; 0xcc
 8000de0:	9334      	str	r3, [sp, #208]	; 0xd0
 8000de2:	9335      	str	r3, [sp, #212]	; 0xd4
 8000de4:	9336      	str	r3, [sp, #216]	; 0xd8
 8000de6:	9337      	str	r3, [sp, #220]	; 0xdc
  if (FMC_Initialized) {
 8000de8:	4b30      	ldr	r3, [pc, #192]	; (8000eac <HAL_FMC_MspInit+0xd4>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	b10b      	cbz	r3, 8000df2 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000dee:	b039      	add	sp, #228	; 0xe4
 8000df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8000df2:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <HAL_FMC_MspInit+0xd4>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df8:	22c0      	movs	r2, #192	; 0xc0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	a802      	add	r0, sp, #8
 8000dfe:	f015 fde5 	bl	80169cc <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8000e02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000e06:	2300      	movs	r3, #0
 8000e08:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0c:	a802      	add	r0, sp, #8
 8000e0e:	f006 f98b 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	2800      	cmp	r0, #0
 8000e14:	d147      	bne.n	8000ea6 <HAL_FMC_MspInit+0xce>
  __HAL_RCC_FMC_CLK_ENABLE();
 8000e16:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <HAL_FMC_MspInit+0xd8>)
 8000e18:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000e1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e20:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8000e24:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000e30:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000e34:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2702      	movs	r7, #2
 8000e38:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2503      	movs	r5, #3
 8000e40:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e42:	240c      	movs	r4, #12
 8000e44:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e46:	a933      	add	r1, sp, #204	; 0xcc
 8000e48:	481a      	ldr	r0, [pc, #104]	; (8000eb4 <HAL_FMC_MspInit+0xdc>)
 8000e4a:	f004 fabf 	bl	80053cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8000e4e:	2319      	movs	r3, #25
 8000e50:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e58:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5a:	a933      	add	r1, sp, #204	; 0xcc
 8000e5c:	4816      	ldr	r0, [pc, #88]	; (8000eb8 <HAL_FMC_MspInit+0xe0>)
 8000e5e:	f004 fab5 	bl	80053cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000e62:	f248 1337 	movw	r3, #33079	; 0x8137
 8000e66:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e6e:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e70:	a933      	add	r1, sp, #204	; 0xcc
 8000e72:	4812      	ldr	r0, [pc, #72]	; (8000ebc <HAL_FMC_MspInit+0xe4>)
 8000e74:	f004 faaa 	bl	80053cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000e78:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000e7c:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e84:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e86:	a933      	add	r1, sp, #204	; 0xcc
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <HAL_FMC_MspInit+0xe8>)
 8000e8a:	f004 fa9f 	bl	80053cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000e8e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000e92:	9333      	str	r3, [sp, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	9734      	str	r7, [sp, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	9635      	str	r6, [sp, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	9536      	str	r5, [sp, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e9a:	9437      	str	r4, [sp, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9c:	a933      	add	r1, sp, #204	; 0xcc
 8000e9e:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <HAL_FMC_MspInit+0xec>)
 8000ea0:	f004 fa94 	bl	80053cc <HAL_GPIO_Init>
 8000ea4:	e7a3      	b.n	8000dee <HAL_FMC_MspInit+0x16>
      Error_Handler();
 8000ea6:	f001 fc8f 	bl	80027c8 <Error_Handler>
 8000eaa:	e7b4      	b.n	8000e16 <HAL_FMC_MspInit+0x3e>
 8000eac:	20014458 	.word	0x20014458
 8000eb0:	58024400 	.word	0x58024400
 8000eb4:	58021400 	.word	0x58021400
 8000eb8:	58020800 	.word	0x58020800
 8000ebc:	58021800 	.word	0x58021800
 8000ec0:	58021000 	.word	0x58021000
 8000ec4:	58020c00 	.word	0x58020c00

08000ec8 <MX_FMC_Init>:
{
 8000ec8:	b500      	push	{lr}
 8000eca:	b089      	sub	sp, #36	; 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000ecc:	2300      	movs	r3, #0
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	9302      	str	r3, [sp, #8]
 8000ed2:	9303      	str	r3, [sp, #12]
 8000ed4:	9304      	str	r3, [sp, #16]
 8000ed6:	9305      	str	r3, [sp, #20]
 8000ed8:	9306      	str	r3, [sp, #24]
 8000eda:	9307      	str	r3, [sp, #28]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000edc:	4817      	ldr	r0, [pc, #92]	; (8000f3c <MX_FMC_Init+0x74>)
 8000ede:	4a18      	ldr	r2, [pc, #96]	; (8000f40 <MX_FMC_Init+0x78>)
 8000ee0:	6002      	str	r2, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000ee2:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	6082      	str	r2, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000ee8:	2208      	movs	r2, #8
 8000eea:	60c2      	str	r2, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000eec:	2210      	movs	r2, #16
 8000eee:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ef0:	2240      	movs	r2, #64	; 0x40
 8000ef2:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef8:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000efa:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8000efc:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000f00:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000f02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f06:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000f08:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000f0e:	2206      	movs	r2, #6
 8000f10:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000f12:	2104      	movs	r1, #4
 8000f14:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 6;
 8000f16:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000f18:	9305      	str	r3, [sp, #20]
  SdramTiming.RPDelay = 2;
 8000f1a:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 8000f1c:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000f1e:	4469      	add	r1, sp
 8000f20:	f009 f9a4 	bl	800a26c <HAL_SDRAM_Init>
 8000f24:	b930      	cbnz	r0, 8000f34 <MX_FMC_Init+0x6c>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8000f26:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000f2a:	f002 fde3 	bl	8003af4 <HAL_SetFMCMemorySwappingConfig>
}
 8000f2e:	b009      	add	sp, #36	; 0x24
 8000f30:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8000f34:	f001 fc48 	bl	80027c8 <Error_Handler>
 8000f38:	e7f5      	b.n	8000f26 <MX_FMC_Init+0x5e>
 8000f3a:	bf00      	nop
 8000f3c:	2001445c 	.word	0x2001445c
 8000f40:	52004140 	.word	0x52004140

08000f44 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000f44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000f46:	f7ff ff47 	bl	8000dd8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000f4a:	bd08      	pop	{r3, pc}

08000f4c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f50:	b08f      	sub	sp, #60	; 0x3c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	2400      	movs	r4, #0
 8000f54:	9409      	str	r4, [sp, #36]	; 0x24
 8000f56:	940a      	str	r4, [sp, #40]	; 0x28
 8000f58:	940b      	str	r4, [sp, #44]	; 0x2c
 8000f5a:	940c      	str	r4, [sp, #48]	; 0x30
 8000f5c:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f5e:	4b73      	ldr	r3, [pc, #460]	; (800112c <MX_GPIO_Init+0x1e0>)
 8000f60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f64:	f042 0210 	orr.w	r2, r2, #16
 8000f68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f70:	f002 0210 	and.w	r2, r2, #16
 8000f74:	9201      	str	r2, [sp, #4]
 8000f76:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f7c:	f042 0204 	orr.w	r2, r2, #4
 8000f80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f88:	f002 0204 	and.w	r2, r2, #4
 8000f8c:	9202      	str	r2, [sp, #8]
 8000f8e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f94:	f042 0220 	orr.w	r2, r2, #32
 8000f98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fa0:	f002 0220 	and.w	r2, r2, #32
 8000fa4:	9203      	str	r2, [sp, #12]
 8000fa6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fb0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fb8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000fbc:	9204      	str	r2, [sp, #16]
 8000fbe:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fc4:	f042 0201 	orr.w	r2, r2, #1
 8000fc8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fd0:	f002 0201 	and.w	r2, r2, #1
 8000fd4:	9205      	str	r2, [sp, #20]
 8000fd6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fdc:	f042 0202 	orr.w	r2, r2, #2
 8000fe0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fe4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000fe8:	f002 0202 	and.w	r2, r2, #2
 8000fec:	9206      	str	r2, [sp, #24]
 8000fee:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ff8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ffc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001000:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001004:	9207      	str	r2, [sp, #28]
 8001006:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001008:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800100c:	f042 0208 	orr.w	r2, r2, #8
 8001010:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	9308      	str	r3, [sp, #32]
 800101e:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001020:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8001140 <MX_GPIO_Init+0x1f4>
 8001024:	4622      	mov	r2, r4
 8001026:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800102a:	4648      	mov	r0, r9
 800102c:	f004 fae5 	bl	80055fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001030:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8001144 <MX_GPIO_Init+0x1f8>
 8001034:	4622      	mov	r2, r4
 8001036:	2102      	movs	r1, #2
 8001038:	4640      	mov	r0, r8
 800103a:	f004 fade 	bl	80055fa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800103e:	4f3c      	ldr	r7, [pc, #240]	; (8001130 <MX_GPIO_Init+0x1e4>)
 8001040:	4622      	mov	r2, r4
 8001042:	2110      	movs	r1, #16
 8001044:	4638      	mov	r0, r7
 8001046:	f004 fad8 	bl	80055fa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 800104a:	f242 0320 	movw	r3, #8224	; 0x2020
 800104e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001050:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001052:	2501      	movs	r5, #1
 8001054:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001056:	a909      	add	r1, sp, #36	; 0x24
 8001058:	4648      	mov	r0, r9
 800105a:	f004 f9b7 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800105e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001062:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106a:	a909      	add	r1, sp, #36	; 0x24
 800106c:	4648      	mov	r0, r9
 800106e:	f004 f9ad 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8001072:	f248 03c6 	movw	r3, #32966	; 0x80c6
 8001076:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001078:	2603      	movs	r6, #3
 800107a:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107e:	a909      	add	r1, sp, #36	; 0x24
 8001080:	4648      	mov	r0, r9
 8001082:	f004 f9a3 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108c:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001090:	a909      	add	r1, sp, #36	; 0x24
 8001092:	4828      	ldr	r0, [pc, #160]	; (8001134 <MX_GPIO_Init+0x1e8>)
 8001094:	f004 f99a 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001098:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109c:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	a909      	add	r1, sp, #36	; 0x24
 80010a0:	4640      	mov	r0, r8
 80010a2:	f004 f993 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010a6:	f04f 0902 	mov.w	r9, #2
 80010aa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ae:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b4:	a909      	add	r1, sp, #36	; 0x24
 80010b6:	4640      	mov	r0, r8
 80010b8:	f004 f988 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 80010bc:	f649 730c 	movw	r3, #40716	; 0x9f0c
 80010c0:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c2:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c6:	a909      	add	r1, sp, #36	; 0x24
 80010c8:	4640      	mov	r0, r8
 80010ca:	f004 f97f 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB12 PB13
                           PB14 PB15 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80010ce:	f24f 33e5 	movw	r3, #62437	; 0xf3e5
 80010d2:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d4:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	a909      	add	r1, sp, #36	; 0x24
 80010da:	4638      	mov	r0, r7
 80010dc:	f004 f976 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010e0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e6:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	a909      	add	r1, sp, #36	; 0x24
 80010ea:	4638      	mov	r0, r7
 80010ec:	f004 f96e 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 80010f0:	f643 03f8 	movw	r3, #14584	; 0x38f8
 80010f4:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fa:	a909      	add	r1, sp, #36	; 0x24
 80010fc:	480e      	ldr	r0, [pc, #56]	; (8001138 <MX_GPIO_Init+0x1ec>)
 80010fe:	f004 f965 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8001102:	f647 63c8 	movw	r3, #32456	; 0x7ec8
 8001106:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001108:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110c:	a909      	add	r1, sp, #36	; 0x24
 800110e:	480b      	ldr	r0, [pc, #44]	; (800113c <MX_GPIO_Init+0x1f0>)
 8001110:	f004 f95c 	bl	80053cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001114:	2310      	movs	r3, #16
 8001116:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	a909      	add	r1, sp, #36	; 0x24
 8001120:	4638      	mov	r0, r7
 8001122:	f004 f953 	bl	80053cc <HAL_GPIO_Init>

}
 8001126:	b00f      	add	sp, #60	; 0x3c
 8001128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800112c:	58024400 	.word	0x58024400
 8001130:	58020400 	.word	0x58020400
 8001134:	58021400 	.word	0x58021400
 8001138:	58020c00 	.word	0x58020c00
 800113c:	58021800 	.word	0x58021800
 8001140:	58020800 	.word	0x58020800
 8001144:	58020000 	.word	0x58020000

08001148 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001148:	b508      	push	{r3, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800114a:	4812      	ldr	r0, [pc, #72]	; (8001194 <MX_I2C2_Init+0x4c>)
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_I2C2_Init+0x50>)
 800114e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00B03FDB;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_I2C2_Init+0x54>)
 8001152:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001158:	2201      	movs	r2, #1
 800115a:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800115e:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001160:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001162:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001164:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001166:	f004 fbd5 	bl	8005914 <HAL_I2C_Init>
 800116a:	b950      	cbnz	r0, 8001182 <MX_I2C2_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800116c:	2100      	movs	r1, #0
 800116e:	4809      	ldr	r0, [pc, #36]	; (8001194 <MX_I2C2_Init+0x4c>)
 8001170:	f005 f878 	bl	8006264 <HAL_I2CEx_ConfigAnalogFilter>
 8001174:	b940      	cbnz	r0, 8001188 <MX_I2C2_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <MX_I2C2_Init+0x4c>)
 800117a:	f005 f8a1 	bl	80062c0 <HAL_I2CEx_ConfigDigitalFilter>
 800117e:	b930      	cbnz	r0, 800118e <MX_I2C2_Init+0x46>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001180:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001182:	f001 fb21 	bl	80027c8 <Error_Handler>
 8001186:	e7f1      	b.n	800116c <MX_I2C2_Init+0x24>
    Error_Handler();
 8001188:	f001 fb1e 	bl	80027c8 <Error_Handler>
 800118c:	e7f3      	b.n	8001176 <MX_I2C2_Init+0x2e>
    Error_Handler();
 800118e:	f001 fb1b 	bl	80027c8 <Error_Handler>
}
 8001192:	e7f5      	b.n	8001180 <MX_I2C2_Init+0x38>
 8001194:	20014490 	.word	0x20014490
 8001198:	40005800 	.word	0x40005800
 800119c:	00b03fdb 	.word	0x00b03fdb

080011a0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011a0:	b530      	push	{r4, r5, lr}
 80011a2:	b0b9      	sub	sp, #228	; 0xe4
 80011a4:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	2100      	movs	r1, #0
 80011a8:	9133      	str	r1, [sp, #204]	; 0xcc
 80011aa:	9134      	str	r1, [sp, #208]	; 0xd0
 80011ac:	9135      	str	r1, [sp, #212]	; 0xd4
 80011ae:	9136      	str	r1, [sp, #216]	; 0xd8
 80011b0:	9137      	str	r1, [sp, #220]	; 0xdc
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b2:	22c0      	movs	r2, #192	; 0xc0
 80011b4:	a802      	add	r0, sp, #8
 80011b6:	f015 fc09 	bl	80169cc <memset>
  if(i2cHandle->Instance==I2C2)
 80011ba:	6822      	ldr	r2, [r4, #0]
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <HAL_I2C_MspInit+0xb0>)
 80011be:	429a      	cmp	r2, r3
 80011c0:	d001      	beq.n	80011c6 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80011c2:	b039      	add	sp, #228	; 0xe4
 80011c4:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011c6:	2208      	movs	r2, #8
 80011c8:	2300      	movs	r3, #0
 80011ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ce:	a802      	add	r0, sp, #8
 80011d0:	f005 ffaa 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	d138      	bne.n	800124a <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d8:	4c1e      	ldr	r4, [pc, #120]	; (8001254 <HAL_I2C_MspInit+0xb4>)
 80011da:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80011de:	f043 0302 	orr.w	r3, r3, #2
 80011e2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80011e6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80011f6:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f8:	2312      	movs	r3, #18
 80011fa:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011fc:	2501      	movs	r5, #1
 80011fe:	9535      	str	r5, [sp, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001200:	2303      	movs	r3, #3
 8001202:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001204:	2304      	movs	r3, #4
 8001206:	9337      	str	r3, [sp, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001208:	a933      	add	r1, sp, #204	; 0xcc
 800120a:	4813      	ldr	r0, [pc, #76]	; (8001258 <HAL_I2C_MspInit+0xb8>)
 800120c:	f004 f8de 	bl	80053cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001210:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001214:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001218:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800121c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001224:	9301      	str	r3, [sp, #4]
 8001226:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	4629      	mov	r1, r5
 800122c:	2021      	movs	r0, #33	; 0x21
 800122e:	f002 fc7d 	bl	8003b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001232:	2021      	movs	r0, #33	; 0x21
 8001234:	f002 fcb0 	bl	8003b98 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	4629      	mov	r1, r5
 800123c:	2022      	movs	r0, #34	; 0x22
 800123e:	f002 fc75 	bl	8003b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001242:	2022      	movs	r0, #34	; 0x22
 8001244:	f002 fca8 	bl	8003b98 <HAL_NVIC_EnableIRQ>
}
 8001248:	e7bb      	b.n	80011c2 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800124a:	f001 fabd 	bl	80027c8 <Error_Handler>
 800124e:	e7c3      	b.n	80011d8 <HAL_I2C_MspInit+0x38>
 8001250:	40005800 	.word	0x40005800
 8001254:	58024400 	.word	0x58024400
 8001258:	58020400 	.word	0x58020400

0800125c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	b084      	sub	sp, #16
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001260:	2400      	movs	r4, #0
 8001262:	9400      	str	r4, [sp, #0]
 8001264:	9401      	str	r4, [sp, #4]
 8001266:	9402      	str	r4, [sp, #8]
 8001268:	9403      	str	r4, [sp, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800126a:	f002 fcb7 	bl	8003bdc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800126e:	2501      	movs	r5, #1
 8001270:	f88d 5000 	strb.w	r5, [sp]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001274:	f88d 4001 	strb.w	r4, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001278:	9401      	str	r4, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800127a:	231f      	movs	r3, #31
 800127c:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001280:	2387      	movs	r3, #135	; 0x87
 8001282:	f88d 3009 	strb.w	r3, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001286:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800128a:	f88d 400b 	strb.w	r4, [sp, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800128e:	f88d 500c 	strb.w	r5, [sp, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001292:	f88d 500d 	strb.w	r5, [sp, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001296:	f88d 400e 	strb.w	r4, [sp, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800129a:	f88d 400f 	strb.w	r4, [sp, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800129e:	4668      	mov	r0, sp
 80012a0:	f002 fcba 	bl	8003c18 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80012a4:	f88d 5001 	strb.w	r5, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80012a8:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80012ac:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80012ae:	2311      	movs	r3, #17
 80012b0:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80012b4:	f88d 4009 	strb.w	r4, [sp, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80012b8:	f88d 500a 	strb.w	r5, [sp, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80012bc:	2603      	movs	r6, #3
 80012be:	f88d 600b 	strb.w	r6, [sp, #11]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012c2:	4668      	mov	r0, sp
 80012c4:	f002 fca8 	bl	8003c18 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	f88d 3001 	strb.w	r3, [sp, #1]
  MPU_InitStruct.BaseAddress = 0xc0000000;
 80012ce:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80012d2:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 80012d4:	230f      	movs	r3, #15
 80012d6:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012da:	f88d 400a 	strb.w	r4, [sp, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80012de:	f88d 400d 	strb.w	r4, [sp, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012e2:	4668      	mov	r0, sp
 80012e4:	f002 fc98 	bl	8003c18 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80012e8:	f88d 6001 	strb.w	r6, [sp, #1]
  MPU_InitStruct.BaseAddress = 0x60000000;
 80012ec:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80012f0:	9301      	str	r3, [sp, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 80012f2:	2318      	movs	r3, #24
 80012f4:	f88d 3008 	strb.w	r3, [sp, #8]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80012f8:	f88d 500d 	strb.w	r5, [sp, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012fc:	4668      	mov	r0, sp
 80012fe:	f002 fc8b 	bl	8003c18 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001302:	2004      	movs	r0, #4
 8001304:	f002 fc78 	bl	8003bf8 <HAL_MPU_Enable>

}
 8001308:	b004      	add	sp, #16
 800130a:	bd70      	pop	{r4, r5, r6, pc}

0800130c <SystemClock_Config>:
{
 800130c:	b530      	push	{r4, r5, lr}
 800130e:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001310:	224c      	movs	r2, #76	; 0x4c
 8001312:	2100      	movs	r1, #0
 8001314:	a80b      	add	r0, sp, #44	; 0x2c
 8001316:	f015 fb59 	bl	80169cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800131a:	2220      	movs	r2, #32
 800131c:	2100      	movs	r1, #0
 800131e:	a803      	add	r0, sp, #12
 8001320:	f015 fb54 	bl	80169cc <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001324:	2002      	movs	r0, #2
 8001326:	f004 fff7 	bl	8006318 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800132a:	2300      	movs	r3, #0
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	4b35      	ldr	r3, [pc, #212]	; (8001404 <SystemClock_Config+0xf8>)
 8001330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001332:	f022 0201 	bic.w	r2, r2, #1
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
 8001338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	4b31      	ldr	r3, [pc, #196]	; (8001408 <SystemClock_Config+0xfc>)
 8001342:	699a      	ldr	r2, [r3, #24]
 8001344:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001348:	619a      	str	r2, [r3, #24]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001354:	4b2c      	ldr	r3, [pc, #176]	; (8001408 <SystemClock_Config+0xfc>)
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800135c:	d0fa      	beq.n	8001354 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b2b      	ldr	r3, [pc, #172]	; (800140c <SystemClock_Config+0x100>)
 8001360:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001364:	f042 0202 	orr.w	r2, r2, #2
 8001368:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800136c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001370:	f003 0302 	and.w	r3, r3, #2
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001378:	2300      	movs	r3, #0
 800137a:	9302      	str	r3, [sp, #8]
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <SystemClock_Config+0xfc>)
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001384:	619a      	str	r2, [r3, #24]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800138c:	9302      	str	r3, [sp, #8]
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <SystemClock_Config+0xf8>)
 8001390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001392:	f042 0201 	orr.w	r2, r2, #1
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	9302      	str	r3, [sp, #8]
 80013a0:	9b02      	ldr	r3, [sp, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013a2:	4b19      	ldr	r3, [pc, #100]	; (8001408 <SystemClock_Config+0xfc>)
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80013aa:	d0fa      	beq.n	80013a2 <SystemClock_Config+0x96>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80013ac:	2321      	movs	r3, #33	; 0x21
 80013ae:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80013b6:	2301      	movs	r3, #1
 80013b8:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ba:	2302      	movs	r3, #2
 80013bc:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013be:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 5;
 80013c0:	2205      	movs	r2, #5
 80013c2:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 192;
 80013c4:	22c0      	movs	r2, #192	; 0xc0
 80013c6:	9217      	str	r2, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013c8:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013ca:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013cc:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80013ce:	2508      	movs	r5, #8
 80013d0:	951b      	str	r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013d2:	2400      	movs	r4, #0
 80013d4:	941c      	str	r4, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013d6:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	a80b      	add	r0, sp, #44	; 0x2c
 80013da:	f004 ffc7 	bl	800636c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013de:	233f      	movs	r3, #63	; 0x3f
 80013e0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e2:	2303      	movs	r3, #3
 80013e4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013e6:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013e8:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013ea:	2340      	movs	r3, #64	; 0x40
 80013ec:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013ee:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013f4:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013f6:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013f8:	2104      	movs	r1, #4
 80013fa:	a803      	add	r0, sp, #12
 80013fc:	f005 fc0a 	bl	8006c14 <HAL_RCC_ClockConfig>
}
 8001400:	b01f      	add	sp, #124	; 0x7c
 8001402:	bd30      	pop	{r4, r5, pc}
 8001404:	58000400 	.word	0x58000400
 8001408:	58024800 	.word	0x58024800
 800140c:	58024400 	.word	0x58024400

08001410 <PeriphCommonClock_Config>:
{
 8001410:	b500      	push	{lr}
 8001412:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001414:	22c0      	movs	r2, #192	; 0xc0
 8001416:	2100      	movs	r1, #0
 8001418:	4668      	mov	r0, sp
 800141a:	f015 fad7 	bl	80169cc <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <PeriphCommonClock_Config+0x48>)
 8001420:	2300      	movs	r3, #0
 8001422:	e9cd 2300 	strd	r2, r3, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8001426:	2319      	movs	r3, #25
 8001428:	9302      	str	r3, [sp, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 344;
 800142a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800142e:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 7;
 8001430:	2307      	movs	r3, #7
 8001432:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001434:	2302      	movs	r3, #2
 8001436:	9305      	str	r3, [sp, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001438:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800143a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800143e:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001440:	2301      	movs	r3, #1
 8001442:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001448:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144a:	4668      	mov	r0, sp
 800144c:	f005 fe6c 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
}
 8001450:	b031      	add	sp, #196	; 0xc4
 8001452:	f85d fb04 	ldr.w	pc, [sp], #4
 8001456:	bf00      	nop
 8001458:	00011100 	.word	0x00011100

0800145c <BSP_SD_IsDetected>:
{
 800145c:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 800145e:	2301      	movs	r3, #1
 8001460:	f88d 3007 	strb.w	r3, [sp, #7]
  return status;
 8001464:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8001468:	b002      	add	sp, #8
 800146a:	4770      	bx	lr

0800146c <checkForSDCardPreset>:
{
 800146c:	b570      	push	{r4, r5, r6, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	4604      	mov	r4, r0
	prevVoice = numberToLoad;
 8001472:	4b41      	ldr	r3, [pc, #260]	; (8001578 <checkForSDCardPreset+0x10c>)
 8001474:	6018      	str	r0, [r3, #0]
	voice = numberToLoad;
 8001476:	4b41      	ldr	r3, [pc, #260]	; (800157c <checkForSDCardPreset+0x110>)
 8001478:	6018      	str	r0, [r3, #0]
	if(BSP_SD_IsDetected())
 800147a:	f7ff ffef 	bl	800145c <BSP_SD_IsDetected>
 800147e:	2800      	cmp	r0, #0
 8001480:	d161      	bne.n	8001546 <checkForSDCardPreset+0xda>
		loadFailed = 1;
 8001482:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <checkForSDCardPreset+0x114>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
 8001488:	2000      	movs	r0, #0
	diskBusy = 0;
 800148a:	4b3e      	ldr	r3, [pc, #248]	; (8001584 <checkForSDCardPreset+0x118>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
}
 8001490:	b008      	add	sp, #32
 8001492:	bd70      	pop	{r4, r5, r6, pc}
			audioOutBuffer[i] = 0;
 8001494:	4a3c      	ldr	r2, [pc, #240]	; (8001588 <checkForSDCardPreset+0x11c>)
 8001496:	2100      	movs	r1, #0
 8001498:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			audioOutBuffer[i + 1] = 0;
 800149c:	f103 0c01 	add.w	ip, r3, #1
 80014a0:	f842 102c 	str.w	r1, [r2, ip, lsl #2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80014a4:	3302      	adds	r3, #2
 80014a6:	2bff      	cmp	r3, #255	; 0xff
 80014a8:	ddf4      	ble.n	8001494 <checkForSDCardPreset+0x28>
		diskBusy = 1;
 80014aa:	2601      	movs	r6, #1
 80014ac:	4b35      	ldr	r3, [pc, #212]	; (8001584 <checkForSDCardPreset+0x118>)
 80014ae:	701e      	strb	r6, [r3, #0]
		loadFailed = 0;
 80014b0:	2500      	movs	r5, #0
 80014b2:	4b33      	ldr	r3, [pc, #204]	; (8001580 <checkForSDCardPreset+0x114>)
 80014b4:	701d      	strb	r5, [r3, #0]
		presetWaitingToLoad = 0;
 80014b6:	4b35      	ldr	r3, [pc, #212]	; (800158c <checkForSDCardPreset+0x120>)
 80014b8:	601d      	str	r5, [r3, #0]
		disk_initialize(0);
 80014ba:	4628      	mov	r0, r5
 80014bc:	f00a fa38 	bl	800b930 <disk_initialize>
	    disk_status(0);
 80014c0:	4628      	mov	r0, r5
 80014c2:	f00a fa29 	bl	800b918 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 80014c6:	4632      	mov	r2, r6
 80014c8:	4931      	ldr	r1, [pc, #196]	; (8001590 <checkForSDCardPreset+0x124>)
 80014ca:	4832      	ldr	r0, [pc, #200]	; (8001594 <checkForSDCardPreset+0x128>)
 80014cc:	f00b fdde 	bl	800d08c <f_mount>
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d1d6      	bne.n	8001482 <checkForSDCardPreset+0x16>
			itoa(numberToLoad, charBuf, 10);
 80014d4:	220a      	movs	r2, #10
 80014d6:	a902      	add	r1, sp, #8
 80014d8:	4620      	mov	r0, r4
 80014da:	f015 fa33 	bl	8016944 <itoa>
			int len = ((strlen(charBuf)));
 80014de:	a802      	add	r0, sp, #8
 80014e0:	f7fe fefa 	bl	80002d8 <strlen>
 80014e4:	4603      	mov	r3, r0
			if (len == 1)
 80014e6:	42b0      	cmp	r0, r6
 80014e8:	d02f      	beq.n	800154a <checkForSDCardPreset+0xde>
				strcat(charBuf, "*.ebp");
 80014ea:	a902      	add	r1, sp, #8
 80014ec:	180c      	adds	r4, r1, r0
 80014ee:	4a2a      	ldr	r2, [pc, #168]	; (8001598 <checkForSDCardPreset+0x12c>)
 80014f0:	6810      	ldr	r0, [r2, #0]
 80014f2:	50c8      	str	r0, [r1, r3]
 80014f4:	8893      	ldrh	r3, [r2, #4]
 80014f6:	80a3      	strh	r3, [r4, #4]
				strcpy(finalString, charBuf);
 80014f8:	a805      	add	r0, sp, #20
 80014fa:	f015 fa93 	bl	8016a24 <strcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 80014fe:	ab05      	add	r3, sp, #20
 8001500:	4a23      	ldr	r2, [pc, #140]	; (8001590 <checkForSDCardPreset+0x124>)
 8001502:	4926      	ldr	r1, [pc, #152]	; (800159c <checkForSDCardPreset+0x130>)
 8001504:	4826      	ldr	r0, [pc, #152]	; (80015a0 <checkForSDCardPreset+0x134>)
 8001506:	f00c f9d0 	bl	800d8aa <f_findfirst>
			if(res == FR_OK)
 800150a:	2800      	cmp	r0, #0
 800150c:	d1b9      	bne.n	8001482 <checkForSDCardPreset+0x16>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 800150e:	2211      	movs	r2, #17
 8001510:	4924      	ldr	r1, [pc, #144]	; (80015a4 <checkForSDCardPreset+0x138>)
 8001512:	4825      	ldr	r0, [pc, #148]	; (80015a8 <checkForSDCardPreset+0x13c>)
 8001514:	f00b fdea 	bl	800d0ec <f_open>
 8001518:	2800      	cmp	r0, #0
 800151a:	d1b2      	bne.n	8001482 <checkForSDCardPreset+0x16>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 800151c:	4c22      	ldr	r4, [pc, #136]	; (80015a8 <checkForSDCardPreset+0x13c>)
 800151e:	ab01      	add	r3, sp, #4
 8001520:	68e2      	ldr	r2, [r4, #12]
 8001522:	4922      	ldr	r1, [pc, #136]	; (80015ac <checkForSDCardPreset+0x140>)
 8001524:	4620      	mov	r0, r4
 8001526:	f00b fef7 	bl	800d318 <f_read>
					presetWaitingToParse = bytesRead;
 800152a:	9a01      	ldr	r2, [sp, #4]
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <checkForSDCardPreset+0x144>)
 800152e:	601a      	str	r2, [r3, #0]
					f_close(&SDFile);
 8001530:	4620      	mov	r0, r4
 8001532:	f00c f91c 	bl	800d76e <f_close>
	  	  i2cSending = 1;
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <checkForSDCardPreset+0x148>)
 8001538:	2001      	movs	r0, #1
 800153a:	7018      	strb	r0, [r3, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 800153e:	b662      	cpsie	i
	  	i2cSending = 0;
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
 8001544:	e7a1      	b.n	800148a <checkForSDCardPreset+0x1e>
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8001546:	2300      	movs	r3, #0
 8001548:	e7ad      	b.n	80014a6 <checkForSDCardPreset+0x3a>
				finalString[2] = charBuf[1];
 800154a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800154e:	f88d 3016 	strb.w	r3, [sp, #22]
				finalString[1] = charBuf[0];
 8001552:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001556:	f88d 3015 	strb.w	r3, [sp, #21]
				finalString[0] = '0';
 800155a:	2330      	movs	r3, #48	; 0x30
 800155c:	f88d 3014 	strb.w	r3, [sp, #20]
				strcat(finalString, "*.ebp");
 8001560:	ac05      	add	r4, sp, #20
 8001562:	4620      	mov	r0, r4
 8001564:	f7fe feb8 	bl	80002d8 <strlen>
 8001568:	4603      	mov	r3, r0
 800156a:	1821      	adds	r1, r4, r0
 800156c:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <checkForSDCardPreset+0x12c>)
 800156e:	6810      	ldr	r0, [r2, #0]
 8001570:	50e0      	str	r0, [r4, r3]
 8001572:	8893      	ldrh	r3, [r2, #4]
 8001574:	808b      	strh	r3, [r1, #4]
 8001576:	e7c2      	b.n	80014fe <checkForSDCardPreset+0x92>
 8001578:	2000069c 	.word	0x2000069c
 800157c:	20014440 	.word	0x20014440
 8001580:	200186ec 	.word	0x200186ec
 8001584:	20014538 	.word	0x20014538
 8001588:	30000000 	.word	0x30000000
 800158c:	2001a208 	.word	0x2001a208
 8001590:	2001dda8 	.word	0x2001dda8
 8001594:	2001d944 	.word	0x2001d944
 8001598:	080196ec 	.word	0x080196ec
 800159c:	200165a0 	.word	0x200165a0
 80015a0:	20014500 	.word	0x20014500
 80015a4:	200165b6 	.word	0x200165b6
 80015a8:	2001db78 	.word	0x2001db78
 80015ac:	30042380 	.word	0x30042380
 80015b0:	2001a20c 	.word	0x2001a20c
 80015b4:	200166ba 	.word	0x200166ba

080015b8 <writePresetToSDCard>:
{
 80015b8:	b530      	push	{r4, r5, lr}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	4605      	mov	r5, r0
  __ASM volatile ("cpsid i" : : : "memory");
 80015be:	b672      	cpsid	i
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 80015c0:	2300      	movs	r3, #0
 80015c2:	e004      	b.n	80015ce <writePresetToSDCard+0x16>
		 audioOutBuffer[i] = 0;
 80015c4:	4a35      	ldr	r2, [pc, #212]	; (800169c <writePresetToSDCard+0xe4>)
 80015c6:	2100      	movs	r1, #0
 80015c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
 80015cc:	3301      	adds	r3, #1
 80015ce:	2bff      	cmp	r3, #255	; 0xff
 80015d0:	ddf8      	ble.n	80015c4 <writePresetToSDCard+0xc>
	if(BSP_SD_IsDetected())
 80015d2:	f7ff ff43 	bl	800145c <BSP_SD_IsDetected>
 80015d6:	b938      	cbnz	r0, 80015e8 <writePresetToSDCard+0x30>
	presetWaitingToWrite = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	4a31      	ldr	r2, [pc, #196]	; (80016a0 <writePresetToSDCard+0xe8>)
 80015dc:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 80015de:	4a31      	ldr	r2, [pc, #196]	; (80016a4 <writePresetToSDCard+0xec>)
 80015e0:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015e2:	b662      	cpsie	i
}
 80015e4:	b009      	add	sp, #36	; 0x24
 80015e6:	bd30      	pop	{r4, r5, pc}
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80015e8:	2300      	movs	r3, #0
 80015ea:	2bff      	cmp	r3, #255	; 0xff
 80015ec:	dc09      	bgt.n	8001602 <writePresetToSDCard+0x4a>
					audioOutBuffer[i] = 0;
 80015ee:	4a2b      	ldr	r2, [pc, #172]	; (800169c <writePresetToSDCard+0xe4>)
 80015f0:	2100      	movs	r1, #0
 80015f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					audioOutBuffer[i + 1] = 0;
 80015f6:	f103 0c01 	add.w	ip, r3, #1
 80015fa:	f842 102c 	str.w	r1, [r2, ip, lsl #2]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80015fe:	3302      	adds	r3, #2
 8001600:	e7f3      	b.n	80015ea <writePresetToSDCard+0x32>
				diskBusy = 1;
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <writePresetToSDCard+0xec>)
 8001604:	2201      	movs	r2, #1
 8001606:	701a      	strb	r2, [r3, #0]
			    if (presetNumberToSave > 99)
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <writePresetToSDCard+0xf0>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b63      	cmp	r3, #99	; 0x63
 8001610:	d902      	bls.n	8001618 <writePresetToSDCard+0x60>
			        presetNumberToSave = 99;
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <writePresetToSDCard+0xf0>)
 8001614:	2263      	movs	r2, #99	; 0x63
 8001616:	701a      	strb	r2, [r3, #0]
				itoa(presetNumberToSave, charBuf, 10);
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <writePresetToSDCard+0xf0>)
 800161a:	7818      	ldrb	r0, [r3, #0]
 800161c:	220a      	movs	r2, #10
 800161e:	a902      	add	r1, sp, #8
 8001620:	f015 f990 	bl	8016944 <itoa>
				int len = ((strlen(charBuf)));
 8001624:	a802      	add	r0, sp, #8
 8001626:	f7fe fe57 	bl	80002d8 <strlen>
 800162a:	4603      	mov	r3, r0
				if (len == 1)
 800162c:	2801      	cmp	r0, #1
 800162e:	d01d      	beq.n	800166c <writePresetToSDCard+0xb4>
					strcat(charBuf, ".ebp");
 8001630:	a902      	add	r1, sp, #8
 8001632:	eb01 0c00 	add.w	ip, r1, r0
 8001636:	4a1d      	ldr	r2, [pc, #116]	; (80016ac <writePresetToSDCard+0xf4>)
 8001638:	6810      	ldr	r0, [r2, #0]
 800163a:	50c8      	str	r0, [r1, r3]
 800163c:	7913      	ldrb	r3, [r2, #4]
 800163e:	f88c 3004 	strb.w	r3, [ip, #4]
					strcpy(finalString, charBuf);
 8001642:	a805      	add	r0, sp, #20
 8001644:	f015 f9ee 	bl	8016a24 <strcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8001648:	220a      	movs	r2, #10
 800164a:	a905      	add	r1, sp, #20
 800164c:	4818      	ldr	r0, [pc, #96]	; (80016b0 <writePresetToSDCard+0xf8>)
 800164e:	f00b fd4d 	bl	800d0ec <f_open>
 8001652:	2800      	cmp	r0, #0
 8001654:	d1c0      	bne.n	80015d8 <writePresetToSDCard+0x20>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 8001656:	4c16      	ldr	r4, [pc, #88]	; (80016b0 <writePresetToSDCard+0xf8>)
 8001658:	ab01      	add	r3, sp, #4
 800165a:	462a      	mov	r2, r5
 800165c:	4915      	ldr	r1, [pc, #84]	; (80016b4 <writePresetToSDCard+0xfc>)
 800165e:	4620      	mov	r0, r4
 8001660:	f00b ff3b 	bl	800d4da <f_write>
					f_close(&SDFile);
 8001664:	4620      	mov	r0, r4
 8001666:	f00c f882 	bl	800d76e <f_close>
 800166a:	e7b5      	b.n	80015d8 <writePresetToSDCard+0x20>
					finalString[2] = charBuf[1];
 800166c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001670:	f88d 3016 	strb.w	r3, [sp, #22]
					finalString[1] = charBuf[0];
 8001674:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8001678:	f88d 3015 	strb.w	r3, [sp, #21]
					finalString[0] = '0';
 800167c:	2330      	movs	r3, #48	; 0x30
 800167e:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
 8001682:	ac05      	add	r4, sp, #20
 8001684:	4620      	mov	r0, r4
 8001686:	f7fe fe27 	bl	80002d8 <strlen>
 800168a:	4603      	mov	r3, r0
 800168c:	1821      	adds	r1, r4, r0
 800168e:	4a07      	ldr	r2, [pc, #28]	; (80016ac <writePresetToSDCard+0xf4>)
 8001690:	6810      	ldr	r0, [r2, #0]
 8001692:	50e0      	str	r0, [r4, r3]
 8001694:	7913      	ldrb	r3, [r2, #4]
 8001696:	710b      	strb	r3, [r1, #4]
 8001698:	e7d6      	b.n	8001648 <writePresetToSDCard+0x90>
 800169a:	bf00      	nop
 800169c:	30000000 	.word	0x30000000
 80016a0:	2001a210 	.word	0x2001a210
 80016a4:	20014538 	.word	0x20014538
 80016a8:	2001a207 	.word	0x2001a207
 80016ac:	080196f4 	.word	0x080196f4
 80016b0:	2001db78 	.word	0x2001db78
 80016b4:	30042380 	.word	0x30042380

080016b8 <getPresetNamesFromSDCard>:
{
 80016b8:	b570      	push	{r4, r5, r6, lr}
 80016ba:	b088      	sub	sp, #32
	if(BSP_SD_IsDetected())
 80016bc:	f7ff fece 	bl	800145c <BSP_SD_IsDetected>
 80016c0:	bb18      	cbnz	r0, 800170a <getPresetNamesFromSDCard+0x52>
	diskBusy = 0;
 80016c2:	4b60      	ldr	r3, [pc, #384]	; (8001844 <getPresetNamesFromSDCard+0x18c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
}
 80016c8:	b008      	add	sp, #32
 80016ca:	bd70      	pop	{r4, r5, r6, pc}
			audioOutBuffer[i] = 0;
 80016cc:	4a5e      	ldr	r2, [pc, #376]	; (8001848 <getPresetNamesFromSDCard+0x190>)
 80016ce:	2100      	movs	r1, #0
 80016d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			audioOutBuffer[i + 1] = 0;
 80016d4:	1c58      	adds	r0, r3, #1
 80016d6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80016da:	3302      	adds	r3, #2
 80016dc:	2bff      	cmp	r3, #255	; 0xff
 80016de:	ddf5      	ble.n	80016cc <getPresetNamesFromSDCard+0x14>
		diskBusy = 1;
 80016e0:	2501      	movs	r5, #1
 80016e2:	4b58      	ldr	r3, [pc, #352]	; (8001844 <getPresetNamesFromSDCard+0x18c>)
 80016e4:	701d      	strb	r5, [r3, #0]
		loadFailed = 0;
 80016e6:	2400      	movs	r4, #0
 80016e8:	4b58      	ldr	r3, [pc, #352]	; (800184c <getPresetNamesFromSDCard+0x194>)
 80016ea:	701c      	strb	r4, [r3, #0]
		disk_initialize(0);
 80016ec:	4620      	mov	r0, r4
 80016ee:	f00a f91f 	bl	800b930 <disk_initialize>
	    disk_status(0);
 80016f2:	4620      	mov	r0, r4
 80016f4:	f00a f910 	bl	800b918 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 80016f8:	462a      	mov	r2, r5
 80016fa:	4955      	ldr	r1, [pc, #340]	; (8001850 <getPresetNamesFromSDCard+0x198>)
 80016fc:	4855      	ldr	r0, [pc, #340]	; (8001854 <getPresetNamesFromSDCard+0x19c>)
 80016fe:	f00b fcc5 	bl	800d08c <f_mount>
 8001702:	2800      	cmp	r0, #0
 8001704:	d1dd      	bne.n	80016c2 <getPresetNamesFromSDCard+0xa>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8001706:	2400      	movs	r4, #0
 8001708:	e01f      	b.n	800174a <getPresetNamesFromSDCard+0x92>
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 800170a:	2300      	movs	r3, #0
 800170c:	e7e6      	b.n	80016dc <getPresetNamesFromSDCard+0x24>
					finalString[2] = charBuf[1];
 800170e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8001712:	f88d 3016 	strb.w	r3, [sp, #22]
					finalString[1] = charBuf[0];
 8001716:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800171a:	f88d 3015 	strb.w	r3, [sp, #21]
					finalString[0] = '0';
 800171e:	2330      	movs	r3, #48	; 0x30
 8001720:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
 8001724:	ad05      	add	r5, sp, #20
 8001726:	4628      	mov	r0, r5
 8001728:	f7fe fdd6 	bl	80002d8 <strlen>
 800172c:	4603      	mov	r3, r0
 800172e:	1829      	adds	r1, r5, r0
 8001730:	4a49      	ldr	r2, [pc, #292]	; (8001858 <getPresetNamesFromSDCard+0x1a0>)
 8001732:	6810      	ldr	r0, [r2, #0]
 8001734:	50e8      	str	r0, [r5, r3]
 8001736:	8893      	ldrh	r3, [r2, #4]
 8001738:	808b      	strh	r3, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 800173a:	ab05      	add	r3, sp, #20
 800173c:	4a44      	ldr	r2, [pc, #272]	; (8001850 <getPresetNamesFromSDCard+0x198>)
 800173e:	4947      	ldr	r1, [pc, #284]	; (800185c <getPresetNamesFromSDCard+0x1a4>)
 8001740:	4847      	ldr	r0, [pc, #284]	; (8001860 <getPresetNamesFromSDCard+0x1a8>)
 8001742:	f00c f8b2 	bl	800d8aa <f_findfirst>
				if(res == FR_OK)
 8001746:	b1c0      	cbz	r0, 800177a <getPresetNamesFromSDCard+0xc2>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8001748:	3401      	adds	r4, #1
 800174a:	2c3f      	cmp	r4, #63	; 0x3f
 800174c:	dcb9      	bgt.n	80016c2 <getPresetNamesFromSDCard+0xa>
				itoa(i, charBuf, 10);
 800174e:	220a      	movs	r2, #10
 8001750:	a902      	add	r1, sp, #8
 8001752:	4620      	mov	r0, r4
 8001754:	f015 f8f6 	bl	8016944 <itoa>
				int len = ((strlen(charBuf)));
 8001758:	a802      	add	r0, sp, #8
 800175a:	f7fe fdbd 	bl	80002d8 <strlen>
 800175e:	4603      	mov	r3, r0
				if (len == 1)
 8001760:	2801      	cmp	r0, #1
 8001762:	d0d4      	beq.n	800170e <getPresetNamesFromSDCard+0x56>
					strcat(charBuf, "*.ebp");
 8001764:	a902      	add	r1, sp, #8
 8001766:	180d      	adds	r5, r1, r0
 8001768:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <getPresetNamesFromSDCard+0x1a0>)
 800176a:	6810      	ldr	r0, [r2, #0]
 800176c:	50c8      	str	r0, [r1, r3]
 800176e:	8893      	ldrh	r3, [r2, #4]
 8001770:	80ab      	strh	r3, [r5, #4]
					strcpy(finalString, charBuf);
 8001772:	a805      	add	r0, sp, #20
 8001774:	f015 f956 	bl	8016a24 <strcpy>
 8001778:	e7df      	b.n	800173a <getPresetNamesFromSDCard+0x82>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 800177a:	2211      	movs	r2, #17
 800177c:	4939      	ldr	r1, [pc, #228]	; (8001864 <getPresetNamesFromSDCard+0x1ac>)
 800177e:	483a      	ldr	r0, [pc, #232]	; (8001868 <getPresetNamesFromSDCard+0x1b0>)
 8001780:	f00b fcb4 	bl	800d0ec <f_open>
 8001784:	2800      	cmp	r0, #0
 8001786:	d1df      	bne.n	8001748 <getPresetNamesFromSDCard+0x90>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8001788:	4d37      	ldr	r5, [pc, #220]	; (8001868 <getPresetNamesFromSDCard+0x1b0>)
 800178a:	4e38      	ldr	r6, [pc, #224]	; (800186c <getPresetNamesFromSDCard+0x1b4>)
 800178c:	ab01      	add	r3, sp, #4
 800178e:	68ea      	ldr	r2, [r5, #12]
 8001790:	4631      	mov	r1, r6
 8001792:	4628      	mov	r0, r5
 8001794:	f00b fdc0 	bl	800d318 <f_read>
						f_close(&SDFile);
 8001798:	4628      	mov	r0, r5
 800179a:	f00b ffe8 	bl	800d76e <f_close>
						if (buffer[bufferIndex] == 17)
 800179e:	7833      	ldrb	r3, [r6, #0]
 80017a0:	2b11      	cmp	r3, #17
 80017a2:	d014      	beq.n	80017ce <getPresetNamesFromSDCard+0x116>
						uint16_t bufferIndex = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	2200      	movs	r2, #0
 80017a8:	e00c      	b.n	80017c4 <getPresetNamesFromSDCard+0x10c>
							presetNamesArray[i][j] = buffer[bufferIndex];
 80017aa:	4930      	ldr	r1, [pc, #192]	; (800186c <getPresetNamesFromSDCard+0x1b4>)
 80017ac:	f811 c003 	ldrb.w	ip, [r1, r3]
 80017b0:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 80017b4:	492e      	ldr	r1, [pc, #184]	; (8001870 <getPresetNamesFromSDCard+0x1b8>)
 80017b6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80017ba:	f801 c002 	strb.w	ip, [r1, r2]
							bufferIndex++;
 80017be:	3301      	adds	r3, #1
 80017c0:	b29b      	uxth	r3, r3
						for (int j = 0; j < 14; j++)
 80017c2:	3201      	adds	r2, #1
 80017c4:	2a0d      	cmp	r2, #13
 80017c6:	ddf0      	ble.n	80017aa <getPresetNamesFromSDCard+0xf2>
						for (int j = 0; j < 8; j++)
 80017c8:	f04f 0c00 	mov.w	ip, #0
 80017cc:	e016      	b.n	80017fc <getPresetNamesFromSDCard+0x144>
							bufferIndex = 4;
 80017ce:	2304      	movs	r3, #4
 80017d0:	e7e9      	b.n	80017a6 <getPresetNamesFromSDCard+0xee>
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 80017d2:	4a26      	ldr	r2, [pc, #152]	; (800186c <getPresetNamesFromSDCard+0x1b4>)
 80017d4:	f812 e003 	ldrb.w	lr, [r2, r3]
 80017d8:	eb0c 008c 	add.w	r0, ip, ip, lsl #2
 80017dc:	22c8      	movs	r2, #200	; 0xc8
 80017de:	fb04 f202 	mul.w	r2, r4, r2
 80017e2:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80017e6:	4823      	ldr	r0, [pc, #140]	; (8001874 <getPresetNamesFromSDCard+0x1bc>)
 80017e8:	4402      	add	r2, r0
 80017ea:	f802 e001 	strb.w	lr, [r2, r1]
								bufferIndex++;
 80017ee:	3301      	adds	r3, #1
 80017f0:	b29b      	uxth	r3, r3
							for (int k = 0; k < 9; k++)
 80017f2:	3101      	adds	r1, #1
 80017f4:	2908      	cmp	r1, #8
 80017f6:	ddec      	ble.n	80017d2 <getPresetNamesFromSDCard+0x11a>
						for (int j = 0; j < 8; j++)
 80017f8:	f10c 0c01 	add.w	ip, ip, #1
 80017fc:	f1bc 0f07 	cmp.w	ip, #7
 8001800:	dc01      	bgt.n	8001806 <getPresetNamesFromSDCard+0x14e>
							for (int k = 0; k < 9; k++)
 8001802:	2100      	movs	r1, #0
 8001804:	e7f6      	b.n	80017f4 <getPresetNamesFromSDCard+0x13c>
						for (int j = 0; j < 4; j++)
 8001806:	f04f 0e00 	mov.w	lr, #0
 800180a:	e016      	b.n	800183a <getPresetNamesFromSDCard+0x182>
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
 800180c:	f10e 0208 	add.w	r2, lr, #8
 8001810:	4916      	ldr	r1, [pc, #88]	; (800186c <getPresetNamesFromSDCard+0x1b4>)
 8001812:	f811 c003 	ldrb.w	ip, [r1, r3]
 8001816:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800181a:	21c8      	movs	r1, #200	; 0xc8
 800181c:	fb04 f101 	mul.w	r1, r4, r1
 8001820:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8001824:	4913      	ldr	r1, [pc, #76]	; (8001874 <getPresetNamesFromSDCard+0x1bc>)
 8001826:	440a      	add	r2, r1
 8001828:	f802 c000 	strb.w	ip, [r2, r0]
								bufferIndex++;
 800182c:	3301      	adds	r3, #1
 800182e:	b29b      	uxth	r3, r3
							for (int k = 0; k < 10; k++)
 8001830:	3001      	adds	r0, #1
 8001832:	2809      	cmp	r0, #9
 8001834:	ddea      	ble.n	800180c <getPresetNamesFromSDCard+0x154>
						for (int j = 0; j < 4; j++)
 8001836:	f10e 0e01 	add.w	lr, lr, #1
 800183a:	f1be 0f03 	cmp.w	lr, #3
 800183e:	dc83      	bgt.n	8001748 <getPresetNamesFromSDCard+0x90>
							for (int k = 0; k < 10; k++)
 8001840:	2000      	movs	r0, #0
 8001842:	e7f6      	b.n	8001832 <getPresetNamesFromSDCard+0x17a>
 8001844:	20014538 	.word	0x20014538
 8001848:	30000000 	.word	0x30000000
 800184c:	200186ec 	.word	0x200186ec
 8001850:	2001dda8 	.word	0x2001dda8
 8001854:	2001d944 	.word	0x2001d944
 8001858:	080196ec 	.word	0x080196ec
 800185c:	200165a0 	.word	0x200165a0
 8001860:	20014500 	.word	0x20014500
 8001864:	200165b6 	.word	0x200165b6
 8001868:	2001db78 	.word	0x2001db78
 800186c:	30042380 	.word	0x30042380
 8001870:	30042000 	.word	0x30042000
 8001874:	30043380 	.word	0x30043380

08001878 <SDRAM_init>:
{
 8001878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800187c:	b086      	sub	sp, #24
	        __IO uint32_t tmpmrd = 0;
 800187e:	2700      	movs	r7, #0
 8001880:	9701      	str	r7, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001882:	2501      	movs	r5, #1
 8001884:	9502      	str	r5, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001886:	2610      	movs	r6, #16
 8001888:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 1;
 800188a:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = 0;
 800188c:	9705      	str	r7, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800188e:	4c1d      	ldr	r4, [pc, #116]	; (8001904 <SDRAM_init+0x8c>)
 8001890:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001894:	a902      	add	r1, sp, #8
 8001896:	4620      	mov	r0, r4
 8001898:	f008 fd10 	bl	800a2bc <HAL_SDRAM_SendCommand>
	        HAL_Delay(1);
 800189c:	4628      	mov	r0, r5
 800189e:	f002 f90f 	bl	8003ac0 <HAL_Delay>
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80018a2:	f04f 0802 	mov.w	r8, #2
 80018a6:	f8cd 8008 	str.w	r8, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018aa:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 1;
 80018ac:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = 0;
 80018ae:	9705      	str	r7, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80018b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018b4:	a902      	add	r1, sp, #8
 80018b6:	4620      	mov	r0, r4
 80018b8:	f008 fd00 	bl	800a2bc <HAL_SDRAM_SendCommand>
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80018bc:	2303      	movs	r3, #3
 80018be:	9302      	str	r3, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018c0:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 2;
 80018c2:	f8cd 8010 	str.w	r8, [sp, #16]
	        Command.ModeRegisterDefinition = 0;
 80018c6:	9705      	str	r7, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80018c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018cc:	a902      	add	r1, sp, #8
 80018ce:	4620      	mov	r0, r4
 80018d0:	f008 fcf4 	bl	800a2bc <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 80018d4:	f240 2322 	movw	r3, #546	; 0x222
 80018d8:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80018da:	2304      	movs	r3, #4
 80018dc:	9302      	str	r3, [sp, #8]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018de:	9603      	str	r6, [sp, #12]
	        Command.AutoRefreshNumber      = 1;
 80018e0:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = tmpmrd;
 80018e2:	9b01      	ldr	r3, [sp, #4]
 80018e4:	9305      	str	r3, [sp, #20]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80018e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018ea:	a902      	add	r1, sp, #8
 80018ec:	4620      	mov	r0, r4
 80018ee:	f008 fce5 	bl	800a2bc <HAL_SDRAM_SendCommand>
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
 80018f2:	f240 21fa 	movw	r1, #762	; 0x2fa
 80018f6:	4620      	mov	r0, r4
 80018f8:	f008 fd01 	bl	800a2fe <HAL_SDRAM_ProgramRefreshRate>
}
 80018fc:	b006      	add	sp, #24
 80018fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001902:	bf00      	nop
 8001904:	2001445c 	.word	0x2001445c

08001908 <setEffectsFunctions>:
{
 8001908:	b410      	push	{r4}
	effectsActive[i] = 1;
 800190a:	4b96      	ldr	r3, [pc, #600]	; (8001b64 <setEffectsFunctions+0x25c>)
 800190c:	2201      	movs	r2, #1
 800190e:	545a      	strb	r2, [r3, r1]
	switch (effectType)
 8001910:	2815      	cmp	r0, #21
 8001912:	d82a      	bhi.n	800196a <setEffectsFunctions+0x62>
 8001914:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001918:	002c0016 	.word	0x002c0016
 800191c:	00540040 	.word	0x00540040
 8001920:	007b0068 	.word	0x007b0068
 8001924:	00a2008e 	.word	0x00a2008e
 8001928:	00ce00b8 	.word	0x00ce00b8
 800192c:	00fa00e4 	.word	0x00fa00e4
 8001930:	01840110 	.word	0x01840110
 8001934:	01aa0197 	.word	0x01aa0197
 8001938:	01d001bd 	.word	0x01d001bd
 800193c:	01f801e4 	.word	0x01f801e4
 8001940:	0220020c 	.word	0x0220020c
			  effectTick[i] = &blankTick;
 8001944:	4b88      	ldr	r3, [pc, #544]	; (8001b68 <setEffectsFunctions+0x260>)
 8001946:	4a89      	ldr	r2, [pc, #548]	; (8001b6c <setEffectsFunctions+0x264>)
 8001948:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &blankFunction;
 800194c:	4888      	ldr	r0, [pc, #544]	; (8001b70 <setEffectsFunctions+0x268>)
 800194e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8001952:	eb00 028c 	add.w	r2, r0, ip, lsl #2
 8001956:	4b87      	ldr	r3, [pc, #540]	; (8001b74 <setEffectsFunctions+0x26c>)
 8001958:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 800195c:	6053      	str	r3, [r2, #4]
			  effectSetters[i].setParam3 = &blankFunction;
 800195e:	6093      	str	r3, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001960:	60d3      	str	r3, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001962:	6113      	str	r3, [r2, #16]
			  effectsActive[i] = 0;
 8001964:	4b7f      	ldr	r3, [pc, #508]	; (8001b64 <setEffectsFunctions+0x25c>)
 8001966:	2200      	movs	r2, #0
 8001968:	545a      	strb	r2, [r3, r1]
}
 800196a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800196e:	4770      	bx	lr
			  effectTick[i] = &softClipTick;
 8001970:	4b7d      	ldr	r3, [pc, #500]	; (8001b68 <setEffectsFunctions+0x260>)
 8001972:	4a81      	ldr	r2, [pc, #516]	; (8001b78 <setEffectsFunctions+0x270>)
 8001974:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001978:	4b7d      	ldr	r3, [pc, #500]	; (8001b70 <setEffectsFunctions+0x268>)
 800197a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 800197e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001982:	4c7e      	ldr	r4, [pc, #504]	; (8001b7c <setEffectsFunctions+0x274>)
 8001984:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001988:	487d      	ldr	r0, [pc, #500]	; (8001b80 <setEffectsFunctions+0x278>)
 800198a:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Soft;
 800198c:	487d      	ldr	r0, [pc, #500]	; (8001b84 <setEffectsFunctions+0x27c>)
 800198e:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001990:	4878      	ldr	r0, [pc, #480]	; (8001b74 <setEffectsFunctions+0x26c>)
 8001992:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001994:	6110      	str	r0, [r2, #16]
			  break;
 8001996:	e7e8      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &hardClipTick;
 8001998:	4b73      	ldr	r3, [pc, #460]	; (8001b68 <setEffectsFunctions+0x260>)
 800199a:	4a7b      	ldr	r2, [pc, #492]	; (8001b88 <setEffectsFunctions+0x280>)
 800199c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 80019a0:	4b73      	ldr	r3, [pc, #460]	; (8001b70 <setEffectsFunctions+0x268>)
 80019a2:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 80019a6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80019aa:	4c74      	ldr	r4, [pc, #464]	; (8001b7c <setEffectsFunctions+0x274>)
 80019ac:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 80019b0:	4873      	ldr	r0, [pc, #460]	; (8001b80 <setEffectsFunctions+0x278>)
 80019b2:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Hard;
 80019b4:	4875      	ldr	r0, [pc, #468]	; (8001b8c <setEffectsFunctions+0x284>)
 80019b6:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 80019b8:	486e      	ldr	r0, [pc, #440]	; (8001b74 <setEffectsFunctions+0x26c>)
 80019ba:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 80019bc:	6110      	str	r0, [r2, #16]
			  break;
 80019be:	e7d4      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &polynomialShaperTick;
 80019c0:	4b69      	ldr	r3, [pc, #420]	; (8001b68 <setEffectsFunctions+0x260>)
 80019c2:	4a73      	ldr	r2, [pc, #460]	; (8001b90 <setEffectsFunctions+0x288>)
 80019c4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 80019c8:	4b69      	ldr	r3, [pc, #420]	; (8001b70 <setEffectsFunctions+0x268>)
 80019ca:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 80019ce:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80019d2:	4c6a      	ldr	r4, [pc, #424]	; (8001b7c <setEffectsFunctions+0x274>)
 80019d4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 80019d8:	4869      	ldr	r0, [pc, #420]	; (8001b80 <setEffectsFunctions+0x278>)
 80019da:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Poly;
 80019dc:	486d      	ldr	r0, [pc, #436]	; (8001b94 <setEffectsFunctions+0x28c>)
 80019de:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 80019e0:	4864      	ldr	r0, [pc, #400]	; (8001b74 <setEffectsFunctions+0x26c>)
 80019e2:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 80019e4:	6110      	str	r0, [r2, #16]
			  break;
 80019e6:	e7c0      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &satTick;
 80019e8:	4b5f      	ldr	r3, [pc, #380]	; (8001b68 <setEffectsFunctions+0x260>)
 80019ea:	4a6b      	ldr	r2, [pc, #428]	; (8001b98 <setEffectsFunctions+0x290>)
 80019ec:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 80019f0:	4b5f      	ldr	r3, [pc, #380]	; (8001b70 <setEffectsFunctions+0x268>)
 80019f2:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 80019f6:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80019fa:	4c60      	ldr	r4, [pc, #384]	; (8001b7c <setEffectsFunctions+0x274>)
 80019fc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001a00:	4a5f      	ldr	r2, [pc, #380]	; (8001b80 <setEffectsFunctions+0x278>)
 8001a02:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &blankFunction;
 8001a04:	4a5b      	ldr	r2, [pc, #364]	; (8001b74 <setEffectsFunctions+0x26c>)
 8001a06:	6082      	str	r2, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001a08:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001a0a:	6102      	str	r2, [r0, #16]
			  break;
 8001a0c:	e7ad      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &tanhTick;
 8001a0e:	4b56      	ldr	r3, [pc, #344]	; (8001b68 <setEffectsFunctions+0x260>)
 8001a10:	4a62      	ldr	r2, [pc, #392]	; (8001b9c <setEffectsFunctions+0x294>)
 8001a12:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a16:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <setEffectsFunctions+0x268>)
 8001a18:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001a1c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001a20:	4c56      	ldr	r4, [pc, #344]	; (8001b7c <setEffectsFunctions+0x274>)
 8001a22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001a26:	4a56      	ldr	r2, [pc, #344]	; (8001b80 <setEffectsFunctions+0x278>)
 8001a28:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &blankFunction;
 8001a2a:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <setEffectsFunctions+0x26c>)
 8001a2c:	6082      	str	r2, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001a2e:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001a30:	6102      	str	r2, [r0, #16]
			  break;
 8001a32:	e79a      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &shaperTick;
 8001a34:	4b4c      	ldr	r3, [pc, #304]	; (8001b68 <setEffectsFunctions+0x260>)
 8001a36:	4a5a      	ldr	r2, [pc, #360]	; (8001ba0 <setEffectsFunctions+0x298>)
 8001a38:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001a3c:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <setEffectsFunctions+0x268>)
 8001a3e:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001a42:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001a46:	4c4d      	ldr	r4, [pc, #308]	; (8001b7c <setEffectsFunctions+0x274>)
 8001a48:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001a4c:	484c      	ldr	r0, [pc, #304]	; (8001b80 <setEffectsFunctions+0x278>)
 8001a4e:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3Linear;
 8001a50:	4854      	ldr	r0, [pc, #336]	; (8001ba4 <setEffectsFunctions+0x29c>)
 8001a52:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001a54:	4847      	ldr	r0, [pc, #284]	; (8001b74 <setEffectsFunctions+0x26c>)
 8001a56:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001a58:	6110      	str	r0, [r2, #16]
			  break;
 8001a5a:	e786      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &compressorTick;
 8001a5c:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <setEffectsFunctions+0x260>)
 8001a5e:	4a52      	ldr	r2, [pc, #328]	; (8001ba8 <setEffectsFunctions+0x2a0>)
 8001a60:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
 8001a64:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <setEffectsFunctions+0x268>)
 8001a66:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001a6a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001a6e:	4c4f      	ldr	r4, [pc, #316]	; (8001bac <setEffectsFunctions+0x2a4>)
 8001a70:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &compressorParam2;
 8001a74:	484e      	ldr	r0, [pc, #312]	; (8001bb0 <setEffectsFunctions+0x2a8>)
 8001a76:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &compressorParam3;
 8001a78:	484e      	ldr	r0, [pc, #312]	; (8001bb4 <setEffectsFunctions+0x2ac>)
 8001a7a:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &compressorParam4;
 8001a7c:	484e      	ldr	r0, [pc, #312]	; (8001bb8 <setEffectsFunctions+0x2b0>)
 8001a7e:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &compressorParam5;
 8001a80:	4613      	mov	r3, r2
 8001a82:	4a4e      	ldr	r2, [pc, #312]	; (8001bbc <setEffectsFunctions+0x2b4>)
 8001a84:	611a      	str	r2, [r3, #16]
			  break;
 8001a86:	e770      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &chorusTick;
 8001a88:	4b37      	ldr	r3, [pc, #220]	; (8001b68 <setEffectsFunctions+0x260>)
 8001a8a:	4a4d      	ldr	r2, [pc, #308]	; (8001bc0 <setEffectsFunctions+0x2b8>)
 8001a8c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
 8001a90:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <setEffectsFunctions+0x268>)
 8001a92:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001a96:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001a9a:	4c4a      	ldr	r4, [pc, #296]	; (8001bc4 <setEffectsFunctions+0x2bc>)
 8001a9c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &chorusParam2;
 8001aa0:	4849      	ldr	r0, [pc, #292]	; (8001bc8 <setEffectsFunctions+0x2c0>)
 8001aa2:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &chorusParam3;
 8001aa4:	4849      	ldr	r0, [pc, #292]	; (8001bcc <setEffectsFunctions+0x2c4>)
 8001aa6:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &chorusParam4;
 8001aa8:	4849      	ldr	r0, [pc, #292]	; (8001bd0 <setEffectsFunctions+0x2c8>)
 8001aaa:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001aac:	4613      	mov	r3, r2
 8001aae:	4a31      	ldr	r2, [pc, #196]	; (8001b74 <setEffectsFunctions+0x26c>)
 8001ab0:	611a      	str	r2, [r3, #16]
			  break;
 8001ab2:	e75a      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &bcTick;
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <setEffectsFunctions+0x260>)
 8001ab6:	4a47      	ldr	r2, [pc, #284]	; (8001bd4 <setEffectsFunctions+0x2cc>)
 8001ab8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8001abc:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <setEffectsFunctions+0x268>)
 8001abe:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001ac2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001ac6:	4c2d      	ldr	r4, [pc, #180]	; (8001b7c <setEffectsFunctions+0x274>)
 8001ac8:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &param2Linear;
 8001acc:	4842      	ldr	r0, [pc, #264]	; (8001bd8 <setEffectsFunctions+0x2d0>)
 8001ace:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &param3BC;
 8001ad0:	4842      	ldr	r0, [pc, #264]	; (8001bdc <setEffectsFunctions+0x2d4>)
 8001ad2:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &param4Linear;
 8001ad4:	4842      	ldr	r0, [pc, #264]	; (8001be0 <setEffectsFunctions+0x2d8>)
 8001ad6:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &param5Linear;
 8001ad8:	4613      	mov	r3, r2
 8001ada:	4a42      	ldr	r2, [pc, #264]	; (8001be4 <setEffectsFunctions+0x2dc>)
 8001adc:	611a      	str	r2, [r3, #16]
			  break;
 8001ade:	e744      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &tiltFilterTick;
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <setEffectsFunctions+0x260>)
 8001ae2:	4a41      	ldr	r2, [pc, #260]	; (8001be8 <setEffectsFunctions+0x2e0>)
 8001ae4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <setEffectsFunctions+0x268>)
 8001aea:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001aee:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001af2:	4c3e      	ldr	r4, [pc, #248]	; (8001bec <setEffectsFunctions+0x2e4>)
 8001af4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &tiltParam2;
 8001af8:	483d      	ldr	r0, [pc, #244]	; (8001bf0 <setEffectsFunctions+0x2e8>)
 8001afa:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &tiltParam3;
 8001afc:	483d      	ldr	r0, [pc, #244]	; (8001bf4 <setEffectsFunctions+0x2ec>)
 8001afe:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &tiltParam4;
 8001b00:	483d      	ldr	r0, [pc, #244]	; (8001bf8 <setEffectsFunctions+0x2f0>)
 8001b02:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &param5Linear;
 8001b04:	4613      	mov	r3, r2
 8001b06:	4a37      	ldr	r2, [pc, #220]	; (8001be4 <setEffectsFunctions+0x2dc>)
 8001b08:	611a      	str	r2, [r3, #16]
			  break;
 8001b0a:	e72e      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &wavefolderTick;
 8001b0c:	4b16      	ldr	r3, [pc, #88]	; (8001b68 <setEffectsFunctions+0x260>)
 8001b0e:	4a3b      	ldr	r2, [pc, #236]	; (8001bfc <setEffectsFunctions+0x2f4>)
 8001b10:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <setEffectsFunctions+0x268>)
 8001b16:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001b1a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001b1e:	4c38      	ldr	r4, [pc, #224]	; (8001c00 <setEffectsFunctions+0x2f8>)
 8001b20:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8001b24:	4816      	ldr	r0, [pc, #88]	; (8001b80 <setEffectsFunctions+0x278>)
 8001b26:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &wavefolderParam3;
 8001b28:	4836      	ldr	r0, [pc, #216]	; (8001c04 <setEffectsFunctions+0x2fc>)
 8001b2a:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &param4Linear;
 8001b2c:	482c      	ldr	r0, [pc, #176]	; (8001be0 <setEffectsFunctions+0x2d8>)
 8001b2e:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &param5Linear;
 8001b30:	4613      	mov	r3, r2
 8001b32:	4a2c      	ldr	r2, [pc, #176]	; (8001be4 <setEffectsFunctions+0x2dc>)
 8001b34:	611a      	str	r2, [r3, #16]
			  break;
 8001b36:	e718      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &delayTick;
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <setEffectsFunctions+0x260>)
 8001b3a:	4a33      	ldr	r2, [pc, #204]	; (8001c08 <setEffectsFunctions+0x300>)
 8001b3c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &delayParam1;
 8001b40:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <setEffectsFunctions+0x268>)
 8001b42:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001b46:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001b4a:	4c30      	ldr	r4, [pc, #192]	; (8001c0c <setEffectsFunctions+0x304>)
 8001b4c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &delayParam2;
 8001b50:	482f      	ldr	r0, [pc, #188]	; (8001c10 <setEffectsFunctions+0x308>)
 8001b52:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &delayParam3;
 8001b54:	482f      	ldr	r0, [pc, #188]	; (8001c14 <setEffectsFunctions+0x30c>)
 8001b56:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &delayParam4;
 8001b58:	482f      	ldr	r0, [pc, #188]	; (8001c18 <setEffectsFunctions+0x310>)
 8001b5a:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &delayParam5;
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	4a2f      	ldr	r2, [pc, #188]	; (8001c1c <setEffectsFunctions+0x314>)
 8001b60:	611a      	str	r2, [r3, #16]
			  break;
 8001b62:	e702      	b.n	800196a <setEffectsFunctions+0x62>
 8001b64:	2001458c 	.word	0x2001458c
 8001b68:	2001d130 	.word	0x2001d130
 8001b6c:	00007861 	.word	0x00007861
 8001b70:	2001453c 	.word	0x2001453c
 8001b74:	000019c1 	.word	0x000019c1
 8001b78:	00007921 	.word	0x00007921
 8001b7c:	00006d81 	.word	0x00006d81
 8001b80:	00007081 	.word	0x00007081
 8001b84:	000070e1 	.word	0x000070e1
 8001b88:	000079a1 	.word	0x000079a1
 8001b8c:	00007141 	.word	0x00007141
 8001b90:	00007a41 	.word	0x00007a41
 8001b94:	000071c1 	.word	0x000071c1
 8001b98:	00007ae1 	.word	0x00007ae1
 8001b9c:	000078c1 	.word	0x000078c1
 8001ba0:	00007801 	.word	0x00007801
 8001ba4:	000070c1 	.word	0x000070c1
 8001ba8:	00007ba1 	.word	0x00007ba1
 8001bac:	00006f81 	.word	0x00006f81
 8001bb0:	00006fa1 	.word	0x00006fa1
 8001bb4:	00006fe1 	.word	0x00006fe1
 8001bb8:	00007001 	.word	0x00007001
 8001bbc:	00007041 	.word	0x00007041
 8001bc0:	00007721 	.word	0x00007721
 8001bc4:	00007501 	.word	0x00007501
 8001bc8:	00007541 	.word	0x00007541
 8001bcc:	00007561 	.word	0x00007561
 8001bd0:	000075a1 	.word	0x000075a1
 8001bd4:	00007b61 	.word	0x00007b61
 8001bd8:	000070a1 	.word	0x000070a1
 8001bdc:	000072a1 	.word	0x000072a1
 8001be0:	00007241 	.word	0x00007241
 8001be4:	00007261 	.word	0x00007261
 8001be8:	00007881 	.word	0x00007881
 8001bec:	00006e41 	.word	0x00006e41
 8001bf0:	00006ea1 	.word	0x00006ea1
 8001bf4:	00006f01 	.word	0x00006f01
 8001bf8:	00006f41 	.word	0x00006f41
 8001bfc:	00007381 	.word	0x00007381
 8001c00:	00006dc1 	.word	0x00006dc1
 8001c04:	00006e01 	.word	0x00006e01
 8001c08:	080038a1 	.word	0x080038a1
 8001c0c:	000075e1 	.word	0x000075e1
 8001c10:	00007621 	.word	0x00007621
 8001c14:	00007661 	.word	0x00007661
 8001c18:	000076a1 	.word	0x000076a1
 8001c1c:	000076e1 	.word	0x000076e1
			  effectTick[i] = &FXlowpassTick;
 8001c20:	4b57      	ldr	r3, [pc, #348]	; (8001d80 <setEffectsFunctions+0x478>)
 8001c22:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <setEffectsFunctions+0x47c>)
 8001c24:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8001c28:	4b57      	ldr	r3, [pc, #348]	; (8001d88 <setEffectsFunctions+0x480>)
 8001c2a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001c2e:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001c32:	4c56      	ldr	r4, [pc, #344]	; (8001d8c <setEffectsFunctions+0x484>)
 8001c34:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 8001c38:	4a55      	ldr	r2, [pc, #340]	; (8001d90 <setEffectsFunctions+0x488>)
 8001c3a:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
 8001c3c:	4c55      	ldr	r4, [pc, #340]	; (8001d94 <setEffectsFunctions+0x48c>)
 8001c3e:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
 8001c40:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001c42:	6102      	str	r2, [r0, #16]
			  break;
 8001c44:	e691      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &FXhighpassTick;
 8001c46:	4b4e      	ldr	r3, [pc, #312]	; (8001d80 <setEffectsFunctions+0x478>)
 8001c48:	4a53      	ldr	r2, [pc, #332]	; (8001d98 <setEffectsFunctions+0x490>)
 8001c4a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8001c4e:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <setEffectsFunctions+0x480>)
 8001c50:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001c54:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001c58:	4c50      	ldr	r4, [pc, #320]	; (8001d9c <setEffectsFunctions+0x494>)
 8001c5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 8001c5e:	4a4c      	ldr	r2, [pc, #304]	; (8001d90 <setEffectsFunctions+0x488>)
 8001c60:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
 8001c62:	4c4f      	ldr	r4, [pc, #316]	; (8001da0 <setEffectsFunctions+0x498>)
 8001c64:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001c66:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001c68:	6102      	str	r2, [r0, #16]
			  break;
 8001c6a:	e67e      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &FXbandpassTick;
 8001c6c:	4b44      	ldr	r3, [pc, #272]	; (8001d80 <setEffectsFunctions+0x478>)
 8001c6e:	4a4d      	ldr	r2, [pc, #308]	; (8001da4 <setEffectsFunctions+0x49c>)
 8001c70:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 8001c74:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <setEffectsFunctions+0x480>)
 8001c76:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001c7a:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001c7e:	4c4a      	ldr	r4, [pc, #296]	; (8001da8 <setEffectsFunctions+0x4a0>)
 8001c80:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 8001c84:	4a42      	ldr	r2, [pc, #264]	; (8001d90 <setEffectsFunctions+0x488>)
 8001c86:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
 8001c88:	4c48      	ldr	r4, [pc, #288]	; (8001dac <setEffectsFunctions+0x4a4>)
 8001c8a:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001c8c:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001c8e:	6102      	str	r2, [r0, #16]
			  break;
 8001c90:	e66b      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &FXdiodeLowpassTick;
 8001c92:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <setEffectsFunctions+0x478>)
 8001c94:	4a46      	ldr	r2, [pc, #280]	; (8001db0 <setEffectsFunctions+0x4a8>)
 8001c96:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <setEffectsFunctions+0x480>)
 8001c9c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001ca0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001ca4:	4c43      	ldr	r4, [pc, #268]	; (8001db4 <setEffectsFunctions+0x4ac>)
 8001ca6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;
 8001caa:	4a39      	ldr	r2, [pc, #228]	; (8001d90 <setEffectsFunctions+0x488>)
 8001cac:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
 8001cae:	4c42      	ldr	r4, [pc, #264]	; (8001db8 <setEffectsFunctions+0x4b0>)
 8001cb0:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001cb2:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001cb4:	6102      	str	r2, [r0, #16]
			  break;
 8001cb6:	e658      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &FXVZpeakTick;
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <setEffectsFunctions+0x478>)
 8001cba:	4a40      	ldr	r2, [pc, #256]	; (8001dbc <setEffectsFunctions+0x4b4>)
 8001cbc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8001cc0:	4b31      	ldr	r3, [pc, #196]	; (8001d88 <setEffectsFunctions+0x480>)
 8001cc2:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001cc6:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001cca:	4c3d      	ldr	r4, [pc, #244]	; (8001dc0 <setEffectsFunctions+0x4b8>)
 8001ccc:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
 8001cd0:	483c      	ldr	r0, [pc, #240]	; (8001dc4 <setEffectsFunctions+0x4bc>)
 8001cd2:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXPeakParam3;
 8001cd4:	483c      	ldr	r0, [pc, #240]	; (8001dc8 <setEffectsFunctions+0x4c0>)
 8001cd6:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001cd8:	482d      	ldr	r0, [pc, #180]	; (8001d90 <setEffectsFunctions+0x488>)
 8001cda:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001cdc:	6110      	str	r0, [r2, #16]
			  break;
 8001cde:	e644      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &FXVZlowshelfTick;
 8001ce0:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <setEffectsFunctions+0x478>)
 8001ce2:	4a3a      	ldr	r2, [pc, #232]	; (8001dcc <setEffectsFunctions+0x4c4>)
 8001ce4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8001ce8:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <setEffectsFunctions+0x480>)
 8001cea:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001cee:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001cf2:	4c37      	ldr	r4, [pc, #220]	; (8001dd0 <setEffectsFunctions+0x4c8>)
 8001cf4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
 8001cf8:	4836      	ldr	r0, [pc, #216]	; (8001dd4 <setEffectsFunctions+0x4cc>)
 8001cfa:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8001cfc:	4836      	ldr	r0, [pc, #216]	; (8001dd8 <setEffectsFunctions+0x4d0>)
 8001cfe:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;
 8001d00:	4823      	ldr	r0, [pc, #140]	; (8001d90 <setEffectsFunctions+0x488>)
 8001d02:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8001d04:	6110      	str	r0, [r2, #16]
			  break;
 8001d06:	e630      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = FXVZhighshelfTick;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <setEffectsFunctions+0x478>)
 8001d0a:	4a34      	ldr	r2, [pc, #208]	; (8001ddc <setEffectsFunctions+0x4d4>)
 8001d0c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8001d10:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <setEffectsFunctions+0x480>)
 8001d12:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001d16:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001d1a:	4c31      	ldr	r4, [pc, #196]	; (8001de0 <setEffectsFunctions+0x4d8>)
 8001d1c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 8001d20:	4830      	ldr	r0, [pc, #192]	; (8001de4 <setEffectsFunctions+0x4dc>)
 8001d22:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8001d24:	4830      	ldr	r0, [pc, #192]	; (8001de8 <setEffectsFunctions+0x4e0>)
 8001d26:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
 8001d28:	4819      	ldr	r0, [pc, #100]	; (8001d90 <setEffectsFunctions+0x488>)
 8001d2a:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001d2c:	6110      	str	r0, [r2, #16]
			  break;
 8001d2e:	e61c      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = FXVZbandrejectTick;
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <setEffectsFunctions+0x478>)
 8001d32:	4a2e      	ldr	r2, [pc, #184]	; (8001dec <setEffectsFunctions+0x4e4>)
 8001d34:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <setEffectsFunctions+0x480>)
 8001d3a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
 8001d3e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8001d42:	4c2b      	ldr	r4, [pc, #172]	; (8001df0 <setEffectsFunctions+0x4e8>)
 8001d44:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
 8001d48:	482a      	ldr	r0, [pc, #168]	; (8001df4 <setEffectsFunctions+0x4ec>)
 8001d4a:	6050      	str	r0, [r2, #4]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
 8001d4c:	482a      	ldr	r0, [pc, #168]	; (8001df8 <setEffectsFunctions+0x4f0>)
 8001d4e:	6090      	str	r0, [r2, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
 8001d50:	480f      	ldr	r0, [pc, #60]	; (8001d90 <setEffectsFunctions+0x488>)
 8001d52:	60d0      	str	r0, [r2, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001d54:	6110      	str	r0, [r2, #16]
			  break;
 8001d56:	e608      	b.n	800196a <setEffectsFunctions+0x62>
			  effectTick[i] = &FXLadderLowpassTick;
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <setEffectsFunctions+0x478>)
 8001d5a:	4a28      	ldr	r2, [pc, #160]	; (8001dfc <setEffectsFunctions+0x4f4>)
 8001d5c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 8001d60:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <setEffectsFunctions+0x480>)
 8001d62:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8001d66:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001d6a:	4c25      	ldr	r4, [pc, #148]	; (8001e00 <setEffectsFunctions+0x4f8>)
 8001d6c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			  effectSetters[i].setParam2 = &blankFunction;;
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <setEffectsFunctions+0x488>)
 8001d72:	6042      	str	r2, [r0, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
 8001d74:	4c23      	ldr	r4, [pc, #140]	; (8001e04 <setEffectsFunctions+0x4fc>)
 8001d76:	6084      	str	r4, [r0, #8]
			  effectSetters[i].setParam4 = &blankFunction;;
 8001d78:	60c2      	str	r2, [r0, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8001d7a:	6102      	str	r2, [r0, #16]
}
 8001d7c:	e5f5      	b.n	800196a <setEffectsFunctions+0x62>
 8001d7e:	bf00      	nop
 8001d80:	2001d130 	.word	0x2001d130
 8001d84:	00007bc1 	.word	0x00007bc1
 8001d88:	2001453c 	.word	0x2001453c
 8001d8c:	00007ce1 	.word	0x00007ce1
 8001d90:	000019c1 	.word	0x000019c1
 8001d94:	00008021 	.word	0x00008021
 8001d98:	00007be1 	.word	0x00007be1
 8001d9c:	00007d21 	.word	0x00007d21
 8001da0:	00008041 	.word	0x00008041
 8001da4:	00007c01 	.word	0x00007c01
 8001da8:	00007d61 	.word	0x00007d61
 8001dac:	00008061 	.word	0x00008061
 8001db0:	00007c21 	.word	0x00007c21
 8001db4:	00007da1 	.word	0x00007da1
 8001db8:	00008081 	.word	0x00008081
 8001dbc:	00007c41 	.word	0x00007c41
 8001dc0:	00007de1 	.word	0x00007de1
 8001dc4:	00007f21 	.word	0x00007f21
 8001dc8:	000080a1 	.word	0x000080a1
 8001dcc:	00007c61 	.word	0x00007c61
 8001dd0:	00007e21 	.word	0x00007e21
 8001dd4:	00007f61 	.word	0x00007f61
 8001dd8:	000080c1 	.word	0x000080c1
 8001ddc:	00007c81 	.word	0x00007c81
 8001de0:	00007e61 	.word	0x00007e61
 8001de4:	00007fa1 	.word	0x00007fa1
 8001de8:	000080e1 	.word	0x000080e1
 8001dec:	00007ca1 	.word	0x00007ca1
 8001df0:	00007ea1 	.word	0x00007ea1
 8001df4:	00007fe1 	.word	0x00007fe1
 8001df8:	00008101 	.word	0x00008101
 8001dfc:	00007cc1 	.word	0x00007cc1
 8001e00:	00007ee1 	.word	0x00007ee1
 8001e04:	00008121 	.word	0x00008121

08001e08 <setOscilllatorShapes>:
	switch (oscshape)
 8001e08:	2805      	cmp	r0, #5
 8001e0a:	d821      	bhi.n	8001e50 <setOscilllatorShapes+0x48>
 8001e0c:	e8df f000 	tbb	[pc, r0]
 8001e10:	120d0803 	.word	0x120d0803
 8001e14:	1c17      	.short	0x1c17
			  shapeTick[i] = &sawSquareTick;
 8001e16:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <setOscilllatorShapes+0x4c>)
 8001e18:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <setOscilllatorShapes+0x50>)
 8001e1a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001e1e:	4770      	bx	lr
			  shapeTick[i] = &sineTriTick;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <setOscilllatorShapes+0x4c>)
 8001e22:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <setOscilllatorShapes+0x54>)
 8001e24:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001e28:	4770      	bx	lr
			  shapeTick[i] = &sawTick;
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <setOscilllatorShapes+0x4c>)
 8001e2c:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <setOscilllatorShapes+0x58>)
 8001e2e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001e32:	4770      	bx	lr
			  shapeTick[i] = &pulseTick;
 8001e34:	4b07      	ldr	r3, [pc, #28]	; (8001e54 <setOscilllatorShapes+0x4c>)
 8001e36:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <setOscilllatorShapes+0x5c>)
 8001e38:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001e3c:	4770      	bx	lr
			  shapeTick[i] = &sineTick;
 8001e3e:	4b05      	ldr	r3, [pc, #20]	; (8001e54 <setOscilllatorShapes+0x4c>)
 8001e40:	4a09      	ldr	r2, [pc, #36]	; (8001e68 <setOscilllatorShapes+0x60>)
 8001e42:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  break;
 8001e46:	4770      	bx	lr
			  shapeTick[i] = &triTick;
 8001e48:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <setOscilllatorShapes+0x4c>)
 8001e4a:	4a08      	ldr	r2, [pc, #32]	; (8001e6c <setOscilllatorShapes+0x64>)
 8001e4c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	2001d700 	.word	0x2001d700
 8001e58:	00005ce1 	.word	0x00005ce1
 8001e5c:	00005d41 	.word	0x00005d41
 8001e60:	00005da1 	.word	0x00005da1
 8001e64:	00005de1 	.word	0x00005de1
 8001e68:	00005e41 	.word	0x00005e41
 8001e6c:	00005e81 	.word	0x00005e81

08001e70 <setFilterTypes>:
	switch (filterType)
 8001e70:	2808      	cmp	r0, #8
 8001e72:	d87a      	bhi.n	8001f6a <setFilterTypes+0xfa>
 8001e74:	e8df f000 	tbb	[pc, r0]
 8001e78:	2c1f1205 	.word	0x2c1f1205
 8001e7c:	60534639 	.word	0x60534639
 8001e80:	6d          	.byte	0x6d
 8001e81:	00          	.byte	0x00
				  filterTick[i] = &lowpassTick;
 8001e82:	4b3a      	ldr	r3, [pc, #232]	; (8001f6c <setFilterTypes+0xfc>)
 8001e84:	4a3a      	ldr	r2, [pc, #232]	; (8001f70 <setFilterTypes+0x100>)
 8001e86:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &lowpassSetQ;
 8001e8a:	4b3a      	ldr	r3, [pc, #232]	; (8001f74 <setFilterTypes+0x104>)
 8001e8c:	4a3a      	ldr	r2, [pc, #232]	; (8001f78 <setFilterTypes+0x108>)
 8001e8e:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
 8001e92:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001e96:	4a39      	ldr	r2, [pc, #228]	; (8001f7c <setFilterTypes+0x10c>)
 8001e98:	605a      	str	r2, [r3, #4]
				  break;
 8001e9a:	4770      	bx	lr
				  filterTick[i] = &highpassTick;
 8001e9c:	4b33      	ldr	r3, [pc, #204]	; (8001f6c <setFilterTypes+0xfc>)
 8001e9e:	4a38      	ldr	r2, [pc, #224]	; (8001f80 <setFilterTypes+0x110>)
 8001ea0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &highpassSetQ;
 8001ea4:	4b33      	ldr	r3, [pc, #204]	; (8001f74 <setFilterTypes+0x104>)
 8001ea6:	4a37      	ldr	r2, [pc, #220]	; (8001f84 <setFilterTypes+0x114>)
 8001ea8:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
 8001eac:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001eb0:	4a35      	ldr	r2, [pc, #212]	; (8001f88 <setFilterTypes+0x118>)
 8001eb2:	605a      	str	r2, [r3, #4]
				  break;
 8001eb4:	4770      	bx	lr
				  filterTick[i] = &bandpassTick;
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <setFilterTypes+0xfc>)
 8001eb8:	4a34      	ldr	r2, [pc, #208]	; (8001f8c <setFilterTypes+0x11c>)
 8001eba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &bandpassSetQ;
 8001ebe:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <setFilterTypes+0x104>)
 8001ec0:	4a33      	ldr	r2, [pc, #204]	; (8001f90 <setFilterTypes+0x120>)
 8001ec2:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
 8001ec6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001eca:	4a32      	ldr	r2, [pc, #200]	; (8001f94 <setFilterTypes+0x124>)
 8001ecc:	605a      	str	r2, [r3, #4]
				  break;
 8001ece:	4770      	bx	lr
				  filterTick[i] = &diodeLowpassTick;
 8001ed0:	4b26      	ldr	r3, [pc, #152]	; (8001f6c <setFilterTypes+0xfc>)
 8001ed2:	4a31      	ldr	r2, [pc, #196]	; (8001f98 <setFilterTypes+0x128>)
 8001ed4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8001ed8:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <setFilterTypes+0x104>)
 8001eda:	4a30      	ldr	r2, [pc, #192]	; (8001f9c <setFilterTypes+0x12c>)
 8001edc:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8001ee0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001ee4:	4a2e      	ldr	r2, [pc, #184]	; (8001fa0 <setFilterTypes+0x130>)
 8001ee6:	605a      	str	r2, [r3, #4]
				  break;
 8001ee8:	4770      	bx	lr
				  filterTick[i] = &VZpeakTick;
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <setFilterTypes+0xfc>)
 8001eec:	4a2d      	ldr	r2, [pc, #180]	; (8001fa4 <setFilterTypes+0x134>)
 8001eee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZpeakSetQ;
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <setFilterTypes+0x104>)
 8001ef4:	4a2c      	ldr	r2, [pc, #176]	; (8001fa8 <setFilterTypes+0x138>)
 8001ef6:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8001efa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001efe:	4a2b      	ldr	r2, [pc, #172]	; (8001fac <setFilterTypes+0x13c>)
 8001f00:	605a      	str	r2, [r3, #4]
				  break;
 8001f02:	4770      	bx	lr
				  filterTick[i] = &VZlowshelfTick;
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <setFilterTypes+0xfc>)
 8001f06:	4a2a      	ldr	r2, [pc, #168]	; (8001fb0 <setFilterTypes+0x140>)
 8001f08:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	; (8001f74 <setFilterTypes+0x104>)
 8001f0e:	4a29      	ldr	r2, [pc, #164]	; (8001fb4 <setFilterTypes+0x144>)
 8001f10:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8001f14:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001f18:	4a27      	ldr	r2, [pc, #156]	; (8001fb8 <setFilterTypes+0x148>)
 8001f1a:	605a      	str	r2, [r3, #4]
				  break;
 8001f1c:	4770      	bx	lr
				  filterTick[i] = &VZhighshelfTick;
 8001f1e:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <setFilterTypes+0xfc>)
 8001f20:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <setFilterTypes+0x14c>)
 8001f22:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <setFilterTypes+0x104>)
 8001f28:	4a25      	ldr	r2, [pc, #148]	; (8001fc0 <setFilterTypes+0x150>)
 8001f2a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8001f2e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001f32:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <setFilterTypes+0x154>)
 8001f34:	605a      	str	r2, [r3, #4]
				  break;
 8001f36:	4770      	bx	lr
				  filterTick[i] = &VZbandrejectTick;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <setFilterTypes+0xfc>)
 8001f3a:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <setFilterTypes+0x158>)
 8001f3c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <setFilterTypes+0x104>)
 8001f42:	4a22      	ldr	r2, [pc, #136]	; (8001fcc <setFilterTypes+0x15c>)
 8001f44:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8001f48:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001f4c:	4a20      	ldr	r2, [pc, #128]	; (8001fd0 <setFilterTypes+0x160>)
 8001f4e:	605a      	str	r2, [r3, #4]
				  break;
 8001f50:	4770      	bx	lr
				  filterTick[i] = &LadderLowpassTick;
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <setFilterTypes+0xfc>)
 8001f54:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <setFilterTypes+0x164>)
 8001f56:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <setFilterTypes+0x104>)
 8001f5c:	4a1e      	ldr	r2, [pc, #120]	; (8001fd8 <setFilterTypes+0x168>)
 8001f5e:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8001f62:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001f66:	4a1d      	ldr	r2, [pc, #116]	; (8001fdc <setFilterTypes+0x16c>)
 8001f68:	605a      	str	r2, [r3, #4]
}
 8001f6a:	4770      	bx	lr
 8001f6c:	2001d1a4 	.word	0x2001d1a4
 8001f70:	00006021 	.word	0x00006021
 8001f74:	20016590 	.word	0x20016590
 8001f78:	00006341 	.word	0x00006341
 8001f7c:	00006461 	.word	0x00006461
 8001f80:	00006061 	.word	0x00006061
 8001f84:	00006361 	.word	0x00006361
 8001f88:	000064a1 	.word	0x000064a1
 8001f8c:	000060a1 	.word	0x000060a1
 8001f90:	00006381 	.word	0x00006381
 8001f94:	000064e1 	.word	0x000064e1
 8001f98:	000060e1 	.word	0x000060e1
 8001f9c:	000063a1 	.word	0x000063a1
 8001fa0:	00006521 	.word	0x00006521
 8001fa4:	00006121 	.word	0x00006121
 8001fa8:	000063c1 	.word	0x000063c1
 8001fac:	00006561 	.word	0x00006561
 8001fb0:	00006161 	.word	0x00006161
 8001fb4:	000063e1 	.word	0x000063e1
 8001fb8:	000065a1 	.word	0x000065a1
 8001fbc:	000061a1 	.word	0x000061a1
 8001fc0:	00006401 	.word	0x00006401
 8001fc4:	000065e1 	.word	0x000065e1
 8001fc8:	000061e1 	.word	0x000061e1
 8001fcc:	00006421 	.word	0x00006421
 8001fd0:	00006621 	.word	0x00006621
 8001fd4:	00006221 	.word	0x00006221
 8001fd8:	00006441 	.word	0x00006441
 8001fdc:	00006661 	.word	0x00006661

08001fe0 <setLFOShapes>:
{
 8001fe0:	b410      	push	{r4}
	switch(LFOShape)
 8001fe2:	2805      	cmp	r0, #5
 8001fe4:	d814      	bhi.n	8002010 <setLFOShapes+0x30>
 8001fe6:	e8df f000 	tbb	[pc, r0]
 8001fea:	1603      	.short	0x1603
 8001fec:	5a493827 	.word	0x5a493827
			lfoShapeTick[i] = &lfoSineTriTick;
 8001ff0:	4b33      	ldr	r3, [pc, #204]	; (80020c0 <setLFOShapes+0xe0>)
 8001ff2:	4a34      	ldr	r2, [pc, #208]	; (80020c4 <setLFOShapes+0xe4>)
 8001ff4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 8001ff8:	4b33      	ldr	r3, [pc, #204]	; (80020c8 <setLFOShapes+0xe8>)
 8001ffa:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8001ffe:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8002002:	4c32      	ldr	r4, [pc, #200]	; (80020cc <setLFOShapes+0xec>)
 8002004:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSineTriSetShape;
 8002008:	4a31      	ldr	r2, [pc, #196]	; (80020d0 <setLFOShapes+0xf0>)
 800200a:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 800200c:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <setLFOShapes+0xf4>)
 800200e:	6082      	str	r2, [r0, #8]
}
 8002010:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002014:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
 8002016:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <setLFOShapes+0xe0>)
 8002018:	4a2f      	ldr	r2, [pc, #188]	; (80020d8 <setLFOShapes+0xf8>)
 800201a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 800201e:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <setLFOShapes+0xe8>)
 8002020:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8002024:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8002028:	4c2c      	ldr	r4, [pc, #176]	; (80020dc <setLFOShapes+0xfc>)
 800202a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
 800202e:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <setLFOShapes+0x100>)
 8002030:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8002032:	4a2c      	ldr	r2, [pc, #176]	; (80020e4 <setLFOShapes+0x104>)
 8002034:	6082      	str	r2, [r0, #8]
			break;
 8002036:	e7eb      	b.n	8002010 <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoSineTick;
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <setLFOShapes+0xe0>)
 800203a:	4a2b      	ldr	r2, [pc, #172]	; (80020e8 <setLFOShapes+0x108>)
 800203c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
 8002040:	4b21      	ldr	r3, [pc, #132]	; (80020c8 <setLFOShapes+0xe8>)
 8002042:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8002046:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800204a:	4c28      	ldr	r4, [pc, #160]	; (80020ec <setLFOShapes+0x10c>)
 800204c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSineSetShape;
 8002050:	4a27      	ldr	r2, [pc, #156]	; (80020f0 <setLFOShapes+0x110>)
 8002052:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
 8002054:	4a27      	ldr	r2, [pc, #156]	; (80020f4 <setLFOShapes+0x114>)
 8002056:	6082      	str	r2, [r0, #8]
			break;
 8002058:	e7da      	b.n	8002010 <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoTriTick;
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <setLFOShapes+0xe0>)
 800205c:	4a26      	ldr	r2, [pc, #152]	; (80020f8 <setLFOShapes+0x118>)
 800205e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <setLFOShapes+0xe8>)
 8002064:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8002068:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800206c:	4c23      	ldr	r4, [pc, #140]	; (80020fc <setLFOShapes+0x11c>)
 800206e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoTriSetShape;
 8002072:	4a23      	ldr	r2, [pc, #140]	; (8002100 <setLFOShapes+0x120>)
 8002074:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
 8002076:	4a23      	ldr	r2, [pc, #140]	; (8002104 <setLFOShapes+0x124>)
 8002078:	6082      	str	r2, [r0, #8]
			break;
 800207a:	e7c9      	b.n	8002010 <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoSawTick;
 800207c:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <setLFOShapes+0xe0>)
 800207e:	4a22      	ldr	r2, [pc, #136]	; (8002108 <setLFOShapes+0x128>)
 8002080:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <setLFOShapes+0xe8>)
 8002086:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800208a:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800208e:	4c1f      	ldr	r4, [pc, #124]	; (800210c <setLFOShapes+0x12c>)
 8002090:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoSawSetShape;
 8002094:	4a1e      	ldr	r2, [pc, #120]	; (8002110 <setLFOShapes+0x130>)
 8002096:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
 8002098:	4a1e      	ldr	r2, [pc, #120]	; (8002114 <setLFOShapes+0x134>)
 800209a:	6082      	str	r2, [r0, #8]
			break;
 800209c:	e7b8      	b.n	8002010 <setLFOShapes+0x30>
			lfoShapeTick[i] = &lfoPulseTick;
 800209e:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <setLFOShapes+0xe0>)
 80020a0:	4a1d      	ldr	r2, [pc, #116]	; (8002118 <setLFOShapes+0x138>)
 80020a2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
 80020a6:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <setLFOShapes+0xe8>)
 80020a8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80020ac:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80020b0:	4c1a      	ldr	r4, [pc, #104]	; (800211c <setLFOShapes+0x13c>)
 80020b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
			lfoSetters[i].setShape = &lfoPulseSetShape;
 80020b6:	4a1a      	ldr	r2, [pc, #104]	; (8002120 <setLFOShapes+0x140>)
 80020b8:	6042      	str	r2, [r0, #4]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
 80020ba:	4a1a      	ldr	r2, [pc, #104]	; (8002124 <setLFOShapes+0x144>)
 80020bc:	6082      	str	r2, [r0, #8]
}
 80020be:	e7a7      	b.n	8002010 <setLFOShapes+0x30>
 80020c0:	2001d328 	.word	0x2001d328
 80020c4:	00006a81 	.word	0x00006a81
 80020c8:	200186bc 	.word	0x200186bc
 80020cc:	00006b61 	.word	0x00006b61
 80020d0:	00006ce1 	.word	0x00006ce1
 80020d4:	00006c21 	.word	0x00006c21
 80020d8:	00006a61 	.word	0x00006a61
 80020dc:	00006b41 	.word	0x00006b41
 80020e0:	00006cc1 	.word	0x00006cc1
 80020e4:	00006c01 	.word	0x00006c01
 80020e8:	00006aa1 	.word	0x00006aa1
 80020ec:	00006b81 	.word	0x00006b81
 80020f0:	00006d01 	.word	0x00006d01
 80020f4:	00006c41 	.word	0x00006c41
 80020f8:	00006ac1 	.word	0x00006ac1
 80020fc:	00006ba1 	.word	0x00006ba1
 8002100:	00006d21 	.word	0x00006d21
 8002104:	00006c61 	.word	0x00006c61
 8002108:	00006ae1 	.word	0x00006ae1
 800210c:	00006bc1 	.word	0x00006bc1
 8002110:	00006d41 	.word	0x00006d41
 8002114:	00006c81 	.word	0x00006c81
 8002118:	00006b21 	.word	0x00006b21
 800211c:	00006be1 	.word	0x00006be1
 8002120:	00006d61 	.word	0x00006d61
 8002124:	00006ca1 	.word	0x00006ca1

08002128 <fromHex>:
{
 8002128:	4603      	mov	r3, r0
	if (('0' <= value) && (value <= '9'))
 800212a:	3830      	subs	r0, #48	; 0x30
 800212c:	b2c0      	uxtb	r0, r0
 800212e:	2809      	cmp	r0, #9
 8002130:	d90a      	bls.n	8002148 <fromHex+0x20>
	if (('a' <= value) && (value <= 'f'))
 8002132:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	2a05      	cmp	r2, #5
 800213a:	d906      	bls.n	800214a <fromHex+0x22>
	if (('A' <= value) && (value <= 'F'))
 800213c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8002140:	b2d2      	uxtb	r2, r2
 8002142:	2a05      	cmp	r2, #5
 8002144:	d904      	bls.n	8002150 <fromHex+0x28>
	return 0;
 8002146:	2000      	movs	r0, #0
}
 8002148:	4770      	bx	lr
		return (uint8_t) (10 + value - 'a');
 800214a:	3b57      	subs	r3, #87	; 0x57
 800214c:	b2d8      	uxtb	r0, r3
 800214e:	4770      	bx	lr
		return (uint8_t) (10 + value - 'A');
 8002150:	3b37      	subs	r3, #55	; 0x37
 8002152:	b2d8      	uxtb	r0, r3
 8002154:	4770      	bx	lr

08002156 <fromAscii>:
{
 8002156:	b538      	push	{r3, r4, r5, lr}
 8002158:	460d      	mov	r5, r1
	return ((fromHex(input1)<<4) | (fromHex(input2)));
 800215a:	f7ff ffe5 	bl	8002128 <fromHex>
 800215e:	0104      	lsls	r4, r0, #4
 8002160:	4628      	mov	r0, r5
 8002162:	f7ff ffe1 	bl	8002128 <fromHex>
 8002166:	4320      	orrs	r0, r4
}
 8002168:	b2c0      	uxtb	r0, r0
 800216a:	bd38      	pop	{r3, r4, r5, pc}

0800216c <CycleCounterInit>:
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800216c:	4a0b      	ldr	r2, [pc, #44]	; (800219c <CycleCounterInit+0x30>)
 800216e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8002172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002176:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <CycleCounterInit+0x34>)
 800217c:	f8d3 3fb4 	ldr.w	r3, [r3, #4020]	; 0xfb4
 8002180:	f013 0f01 	tst.w	r3, #1
 8002184:	d003      	beq.n	800218e <CycleCounterInit+0x22>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <CycleCounterInit+0x34>)
 8002188:	4a06      	ldr	r2, [pc, #24]	; (80021a4 <CycleCounterInit+0x38>)
 800218a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <CycleCounterInit+0x34>)
 8002190:	2200      	movs	r2, #0
 8002192:	605a      	str	r2, [r3, #4]
  DWT->CTRL = 0x40000001;
 8002194:	4a04      	ldr	r2, [pc, #16]	; (80021a8 <CycleCounterInit+0x3c>)
 8002196:	601a      	str	r2, [r3, #0]
}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00
 80021a0:	e0001000 	.word	0xe0001000
 80021a4:	c5acce55 	.word	0xc5acce55
 80021a8:	40000001 	.word	0x40000001

080021ac <main>:
{
 80021ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ae:	ed2d 8b02 	vpush	{d8}
 80021b2:	b083      	sub	sp, #12
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80021b4:	4b73      	ldr	r3, [pc, #460]	; (8002384 <main+0x1d8>)
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021bc:	d113      	bne.n	80021e6 <main+0x3a>
  __ASM volatile ("dsb 0xF":::"memory");
 80021be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021c2:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80021c6:	4b6f      	ldr	r3, [pc, #444]	; (8002384 <main+0x1d8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80021ce:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021d2:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021dc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80021de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021e2:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80021e6:	4b67      	ldr	r3, [pc, #412]	; (8002384 <main+0x1d8>)
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80021ee:	d127      	bne.n	8002240 <main+0x94>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80021f0:	4b64      	ldr	r3, [pc, #400]	; (8002384 <main+0x1d8>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80021f8:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80021fc:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002200:	f3c4 304e 	ubfx	r0, r4, #13, #15
 8002204:	e000      	b.n	8002208 <main+0x5c>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 8002206:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002208:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800220c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002210:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 8002214:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 8002218:	495a      	ldr	r1, [pc, #360]	; (8002384 <main+0x1d8>)
 800221a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800221e:	4613      	mov	r3, r2
 8002220:	3a01      	subs	r2, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f2      	bne.n	800220c <main+0x60>
    } while(sets-- != 0U);
 8002226:	1e43      	subs	r3, r0, #1
 8002228:	2800      	cmp	r0, #0
 800222a:	d1ec      	bne.n	8002206 <main+0x5a>
 800222c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002230:	694b      	ldr	r3, [r1, #20]
 8002232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002236:	614b      	str	r3, [r1, #20]
 8002238:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800223c:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8002240:	f001 fbfe 	bl	8003a40 <HAL_Init>
  MPU_Config();
 8002244:	f7ff f80a 	bl	800125c <MPU_Config>
  __ASM volatile ("cpsie i" : : : "memory");
 8002248:	b662      	cpsie	i
  SystemClock_Config();
 800224a:	f7ff f85f 	bl	800130c <SystemClock_Config>
  PeriphCommonClock_Config();
 800224e:	f7ff f8df 	bl	8001410 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8002252:	f7fe fe7b 	bl	8000f4c <MX_GPIO_Init>
  MX_DMA_Init();
 8002256:	f7fe fd83 	bl	8000d60 <MX_DMA_Init>
  MX_FMC_Init();
 800225a:	f7fe fe35 	bl	8000ec8 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 800225e:	f000 fbdf 	bl	8002a20 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8002262:	f009 fa79 	bl	800b758 <MX_FATFS_Init>
  MX_SAI1_Init();
 8002266:	f000 faef 	bl	8002848 <MX_SAI1_Init>
  MX_RNG_Init();
 800226a:	f000 faaf 	bl	80027cc <MX_RNG_Init>
  MX_I2C2_Init();
 800226e:	f7fe ff6b 	bl	8001148 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002272:	f000 fc45 	bl	8002b00 <MX_SPI1_Init>
  MX_SPI5_Init();
 8002276:	f000 fc69 	bl	8002b4c <MX_SPI5_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 800227a:	4d43      	ldr	r5, [pc, #268]	; (8002388 <main+0x1dc>)
 800227c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002280:	4628      	mov	r0, r5
 8002282:	f003 f9b3 	bl	80055ec <HAL_GPIO_ReadPin>
 8002286:	4604      	mov	r4, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8002288:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800228c:	4628      	mov	r0, r5
 800228e:	f003 f9ad 	bl	80055ec <HAL_GPIO_ReadPin>
 8002292:	4605      	mov	r5, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8002294:	2104      	movs	r1, #4
 8002296:	483d      	ldr	r0, [pc, #244]	; (800238c <main+0x1e0>)
 8002298:	f003 f9a8 	bl	80055ec <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 800229c:	0063      	lsls	r3, r4, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	00aa      	lsls	r2, r5, #2
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	4413      	add	r3, r2
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4403      	add	r3, r0
 80022aa:	4a39      	ldr	r2, [pc, #228]	; (8002390 <main+0x1e4>)
 80022ac:	7013      	strb	r3, [r2, #0]
	HAL_Delay(500);
 80022ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022b2:	f001 fc05 	bl	8003ac0 <HAL_Delay>
   PWR->CR1 |= PWR_CR1_DBP;
 80022b6:	4a37      	ldr	r2, [pc, #220]	; (8002394 <main+0x1e8>)
 80022b8:	6813      	ldr	r3, [r2, #0]
 80022ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022be:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022c0:	4b34      	ldr	r3, [pc, #208]	; (8002394 <main+0x1e8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022c8:	d0fa      	beq.n	80022c0 <main+0x114>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
 80022ca:	4b33      	ldr	r3, [pc, #204]	; (8002398 <main+0x1ec>)
 80022cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80022d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80022d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	9300      	str	r3, [sp, #0]
 80022e2:	9b00      	ldr	r3, [sp, #0]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 80022e4:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 80022e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 80022ec:	eee1 3a10 	vmsr	fpscr, r3
  CycleCounterInit();
 80022f0:	f7ff ff3c 	bl	800216c <CycleCounterInit>
  for (int i = 0; i < PLUCK_BUFFER_SIZE_TIMES_TWO; i++)
 80022f4:	2300      	movs	r3, #0
 80022f6:	e003      	b.n	8002300 <main+0x154>
	  SPI_PLUCK_TX[i] = 0;
 80022f8:	4a28      	ldr	r2, [pc, #160]	; (800239c <main+0x1f0>)
 80022fa:	2100      	movs	r1, #0
 80022fc:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < PLUCK_BUFFER_SIZE_TIMES_TWO; i++)
 80022fe:	3301      	adds	r3, #1
 8002300:	2b3f      	cmp	r3, #63	; 0x3f
 8002302:	ddf9      	ble.n	80022f8 <main+0x14c>
  for (int i = 0; i < 4096; i++)
 8002304:	2300      	movs	r3, #0
 8002306:	e003      	b.n	8002310 <main+0x164>
	  buffer[i] = 0;
 8002308:	4a25      	ldr	r2, [pc, #148]	; (80023a0 <main+0x1f4>)
 800230a:	2100      	movs	r1, #0
 800230c:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < 4096; i++)
 800230e:	3301      	adds	r3, #1
 8002310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002314:	dbf8      	blt.n	8002308 <main+0x15c>
  buffer[15+112] = NUM_PARAMS;
 8002316:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <main+0x1f4>)
 8002318:	229c      	movs	r2, #156	; 0x9c
 800231a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
  buffer[NUM_PARAMS*2+16+112] = 0xef;
 800231e:	22ef      	movs	r2, #239	; 0xef
 8002320:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
  buffer[NUM_PARAMS*2+17+112] = 0xef;
 8002324:	f883 21b9 	strb.w	r2, [r3, #441]	; 0x1b9
  buffer[NUM_PARAMS*2+19+112] = 1;
 8002328:	2201      	movs	r2, #1
 800232a:	f883 21bb 	strb.w	r2, [r3, #443]	; 0x1bb
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
 800232e:	22fe      	movs	r2, #254	; 0xfe
 8002330:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
  buffer[NUM_PARAMS*2+26+112] = 0xfe;
 8002334:	f883 21c2 	strb.w	r2, [r3, #450]	; 0x1c2
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8002338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800233c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8002340:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8002344:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80023a4 <main+0x1f8>
 8002348:	4817      	ldr	r0, [pc, #92]	; (80023a8 <main+0x1fc>)
 800234a:	f00f fd37 	bl	8011dbc <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 800234e:	ed9f 8a17 	vldr	s16, [pc, #92]	; 80023ac <main+0x200>
 8002352:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002356:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80023b0 <main+0x204>
 800235a:	eddf 0a16 	vldr	s1, [pc, #88]	; 80023b4 <main+0x208>
 800235e:	eeb0 0a48 	vmov.f32	s0, s16
 8002362:	4815      	ldr	r0, [pc, #84]	; (80023b8 <main+0x20c>)
 8002364:	f00f fd2a 	bl	8011dbc <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 8002368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800236c:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8002370:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8002374:	eeb0 0a48 	vmov.f32	s0, s16
 8002378:	4810      	ldr	r0, [pc, #64]	; (80023bc <main+0x210>)
 800237a:	f00f fd1f 	bl	8011dbc <LEAF_generate_table_skew_non_sym>
  for (int i = 0; i < 3; i++)
 800237e:	2300      	movs	r3, #0
 8002380:	e01f      	b.n	80023c2 <main+0x216>
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00
 8002388:	58020400 	.word	0x58020400
 800238c:	58020000 	.word	0x58020000
 8002390:	200144e5 	.word	0x200144e5
 8002394:	58024800 	.word	0x58024800
 8002398:	58024400 	.word	0x58024400
 800239c:	38000000 	.word	0x38000000
 80023a0:	30042380 	.word	0x30042380
 80023a4:	3c23d70a 	.word	0x3c23d70a
 80023a8:	2001a668 	.word	0x2001a668
 80023ac:	00000000 	.word	0x00000000
 80023b0:	457a0000 	.word	0x457a0000
 80023b4:	469c4000 	.word	0x469c4000
 80023b8:	20014590 	.word	0x20014590
 80023bc:	200166bc 	.word	0x200166bc
 80023c0:	3301      	adds	r3, #1
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	ddfc      	ble.n	80023c0 <main+0x214>
  if (boardNumber == 0)
 80023c6:	4bab      	ldr	r3, [pc, #684]	; (8002674 <main+0x4c8>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 80b7 	beq.w	800253e <main+0x392>
	  diskBusy = 1;
 80023d0:	4ba9      	ldr	r3, [pc, #676]	; (8002678 <main+0x4cc>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
  SDRAM_init();
 80023d6:	f7ff fa4f 	bl	8001878 <SDRAM_init>
  audioInit();
 80023da:	f7fe fa8f 	bl	80008fc <audioInit>
  specialModeNames[0] = "PHYS STR1     ";
 80023de:	49a7      	ldr	r1, [pc, #668]	; (800267c <main+0x4d0>)
 80023e0:	4ba7      	ldr	r3, [pc, #668]	; (8002680 <main+0x4d4>)
 80023e2:	600b      	str	r3, [r1, #0]
  specialModeMacroNames[0][0] = "Feedback  ";
 80023e4:	4ba7      	ldr	r3, [pc, #668]	; (8002684 <main+0x4d8>)
 80023e6:	4aa8      	ldr	r2, [pc, #672]	; (8002688 <main+0x4dc>)
 80023e8:	601a      	str	r2, [r3, #0]
  specialModeMacroNames[0][1] = "SlideNois ";
 80023ea:	4ca8      	ldr	r4, [pc, #672]	; (800268c <main+0x4e0>)
 80023ec:	605c      	str	r4, [r3, #4]
  specialModeMacroNames[0][2] = "PluckWidt ";
 80023ee:	4aa8      	ldr	r2, [pc, #672]	; (8002690 <main+0x4e4>)
 80023f0:	609a      	str	r2, [r3, #8]
  specialModeMacroNames[0][3] = "PickNoise ";
 80023f2:	4aa8      	ldr	r2, [pc, #672]	; (8002694 <main+0x4e8>)
 80023f4:	60da      	str	r2, [r3, #12]
  specialModeMacroNames[0][4] = "PickupSim ";
 80023f6:	4aa8      	ldr	r2, [pc, #672]	; (8002698 <main+0x4ec>)
 80023f8:	611a      	str	r2, [r3, #16]
  specialModeMacroNames[0][5] = "          ";
 80023fa:	4aa8      	ldr	r2, [pc, #672]	; (800269c <main+0x4f0>)
 80023fc:	615a      	str	r2, [r3, #20]
  specialModeMacroNames[0][6] = "          ";
 80023fe:	619a      	str	r2, [r3, #24]
  specialModeMacroNames[0][7] = "          ";
 8002400:	61da      	str	r2, [r3, #28]
  specialModeMacroNames[0][8] = "          ";
 8002402:	621a      	str	r2, [r3, #32]
  specialModeMacroNames[0][9] = "          ";
 8002404:	625a      	str	r2, [r3, #36]	; 0x24
  specialModeMacroNames[0][10] = "          ";
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
  specialModeMacroNames[0][11] = "          ";
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c
  specialModeNames[1] = "PHYS STR2     ";
 800240a:	48a5      	ldr	r0, [pc, #660]	; (80026a0 <main+0x4f4>)
 800240c:	6048      	str	r0, [r1, #4]
  specialModeMacroNames[1][0] = "DecayTime ";
 800240e:	48a5      	ldr	r0, [pc, #660]	; (80026a4 <main+0x4f8>)
 8002410:	6518      	str	r0, [r3, #80]	; 0x50
  specialModeMacroNames[1][1] = "Tone      ";
 8002412:	48a5      	ldr	r0, [pc, #660]	; (80026a8 <main+0x4fc>)
 8002414:	6558      	str	r0, [r3, #84]	; 0x54
  specialModeMacroNames[1][2] = "PluckPos  ";
 8002416:	4da5      	ldr	r5, [pc, #660]	; (80026ac <main+0x500>)
 8002418:	659d      	str	r5, [r3, #88]	; 0x58
  specialModeMacroNames[1][3] = "PickupPos ";
 800241a:	4fa5      	ldr	r7, [pc, #660]	; (80026b0 <main+0x504>)
 800241c:	65df      	str	r7, [r3, #92]	; 0x5c
  specialModeMacroNames[1][4] = "SlideNois ";
 800241e:	661c      	str	r4, [r3, #96]	; 0x60
  specialModeMacroNames[1][5] = "Stiffness ";
 8002420:	4ea4      	ldr	r6, [pc, #656]	; (80026b4 <main+0x508>)
 8002422:	665e      	str	r6, [r3, #100]	; 0x64
  specialModeMacroNames[1][6] = "FB Amp    ";
 8002424:	4ca4      	ldr	r4, [pc, #656]	; (80026b8 <main+0x50c>)
 8002426:	669c      	str	r4, [r3, #104]	; 0x68
  specialModeMacroNames[1][7] = "FB Speed  ";
 8002428:	4ca4      	ldr	r4, [pc, #656]	; (80026bc <main+0x510>)
 800242a:	66dc      	str	r4, [r3, #108]	; 0x6c
  specialModeMacroNames[1][8] = "PU Filter ";
 800242c:	4ca4      	ldr	r4, [pc, #656]	; (80026c0 <main+0x514>)
 800242e:	671c      	str	r4, [r3, #112]	; 0x70
  specialModeMacroNames[1][9] = "Harmonic  ";
 8002430:	4da4      	ldr	r5, [pc, #656]	; (80026c4 <main+0x518>)
 8002432:	675d      	str	r5, [r3, #116]	; 0x74
  specialModeMacroNames[1][10] = "HarmPosX  ";
 8002434:	4da4      	ldr	r5, [pc, #656]	; (80026c8 <main+0x51c>)
 8002436:	679d      	str	r5, [r3, #120]	; 0x78
  specialModeMacroNames[1][11] = "HarmPosY  ";
 8002438:	4da4      	ldr	r5, [pc, #656]	; (80026cc <main+0x520>)
 800243a:	67dd      	str	r5, [r3, #124]	; 0x7c
  specialModeMacroNames[1][12] = "PUModRate ";
 800243c:	4da4      	ldr	r5, [pc, #656]	; (80026d0 <main+0x524>)
 800243e:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  specialModeMacroNames[1][13] = "PUModAmp  ";
 8002442:	4da4      	ldr	r5, [pc, #656]	; (80026d4 <main+0x528>)
 8002444:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
  specialModeMacroNames[1][14] = "Ph Harm G ";
 8002448:	4da3      	ldr	r5, [pc, #652]	; (80026d8 <main+0x52c>)
 800244a:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  specialModeMacroNames[1][15] = "PUFilterQ ";
 800244e:	4da3      	ldr	r5, [pc, #652]	; (80026dc <main+0x530>)
 8002450:	f8c3 508c 	str.w	r5, [r3, #140]	; 0x8c
  specialModeMacroNames[1][16] = "PeakF Q   ";
 8002454:	4da2      	ldr	r5, [pc, #648]	; (80026e0 <main+0x534>)
 8002456:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
  specialModeMacroNames[1][17] = "PeakF Frq ";
 800245a:	4da2      	ldr	r5, [pc, #648]	; (80026e4 <main+0x538>)
 800245c:	f8c3 5094 	str.w	r5, [r3, #148]	; 0x94
  specialModeMacroNames[1][18] = "Tension G ";
 8002460:	4da1      	ldr	r5, [pc, #644]	; (80026e8 <main+0x53c>)
 8002462:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  specialModeMacroNames[1][19] = "Acoustic  ";
 8002466:	4da1      	ldr	r5, [pc, #644]	; (80026ec <main+0x540>)
 8002468:	f8c3 509c 	str.w	r5, [r3, #156]	; 0x9c
  specialModeNames[2] = "ADDITIVE      ";
 800246c:	4da0      	ldr	r5, [pc, #640]	; (80026f0 <main+0x544>)
 800246e:	608d      	str	r5, [r1, #8]
  specialModeMacroNames[2][0] = "Stretch   ";
 8002470:	4da0      	ldr	r5, [pc, #640]	; (80026f4 <main+0x548>)
 8002472:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  specialModeMacroNames[2][1] = "Tilt      ";
 8002476:	4da0      	ldr	r5, [pc, #640]	; (80026f8 <main+0x54c>)
 8002478:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
  specialModeMacroNames[2][2] = "NoiseAmp  ";
 800247c:	4d9f      	ldr	r5, [pc, #636]	; (80026fc <main+0x550>)
 800247e:	f8c3 50a8 	str.w	r5, [r3, #168]	; 0xa8
  specialModeMacroNames[2][3] = "PickupPos ";
 8002482:	f8c3 70ac 	str.w	r7, [r3, #172]	; 0xac
  specialModeMacroNames[2][4] = "PickupAmp ";
 8002486:	4d9e      	ldr	r5, [pc, #632]	; (8002700 <main+0x554>)
 8002488:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
  specialModeMacroNames[2][5] = "DiveAmp   ";
 800248c:	4d9d      	ldr	r5, [pc, #628]	; (8002704 <main+0x558>)
 800248e:	f8c3 50b4 	str.w	r5, [r3, #180]	; 0xb4
  specialModeMacroNames[2][6] = "DiveRate  ";
 8002492:	4d9d      	ldr	r5, [pc, #628]	; (8002708 <main+0x55c>)
 8002494:	f8c3 50b8 	str.w	r5, [r3, #184]	; 0xb8
  specialModeMacroNames[2][7] = "          ";
 8002498:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  specialModeMacroNames[2][8] = "          ";
 800249c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  specialModeMacroNames[2][9] = "          ";
 80024a0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  specialModeMacroNames[2][10] = "Tone      ";
 80024a4:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  specialModeMacroNames[2][11] = "Decay     ";
 80024a8:	4898      	ldr	r0, [pc, #608]	; (800270c <main+0x560>)
 80024aa:	f8c3 00cc 	str.w	r0, [r3, #204]	; 0xcc
  specialModeNames[3] = "VOCAL        ";
 80024ae:	4d98      	ldr	r5, [pc, #608]	; (8002710 <main+0x564>)
 80024b0:	60cd      	str	r5, [r1, #12]
  specialModeMacroNames[3][0] = "Size      ";
 80024b2:	4d98      	ldr	r5, [pc, #608]	; (8002714 <main+0x568>)
 80024b4:	f8c3 50f0 	str.w	r5, [r3, #240]	; 0xf0
  specialModeMacroNames[3][1] = "Chipmunk  ";
 80024b8:	4d97      	ldr	r5, [pc, #604]	; (8002718 <main+0x56c>)
 80024ba:	f8c3 50f4 	str.w	r5, [r3, #244]	; 0xf4
  specialModeMacroNames[3][2] = "Diameter  ";
 80024be:	4d97      	ldr	r5, [pc, #604]	; (800271c <main+0x570>)
 80024c0:	f8c3 50f8 	str.w	r5, [r3, #248]	; 0xf8
  specialModeMacroNames[3][3] = "Nasal     ";
 80024c4:	4d96      	ldr	r5, [pc, #600]	; (8002720 <main+0x574>)
 80024c6:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
  specialModeMacroNames[3][4] = "Turb Nois ";
 80024ca:	4d96      	ldr	r5, [pc, #600]	; (8002724 <main+0x578>)
 80024cc:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
  specialModeMacroNames[3][5] = "Unvoiced  ";
 80024d0:	4d95      	ldr	r5, [pc, #596]	; (8002728 <main+0x57c>)
 80024d2:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
  specialModeMacroNames[3][6] = "          ";
 80024d6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  specialModeMacroNames[3][7] = "          ";
 80024da:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  specialModeMacroNames[3][8] = "BackPos   ";
 80024de:	4d93      	ldr	r5, [pc, #588]	; (800272c <main+0x580>)
 80024e0:	f8c3 5110 	str.w	r5, [r3, #272]	; 0x110
  specialModeMacroNames[3][9] = "BackDiam  ";
 80024e4:	4d92      	ldr	r5, [pc, #584]	; (8002730 <main+0x584>)
 80024e6:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
  specialModeMacroNames[3][10] = "ToungePos  ";
 80024ea:	4d92      	ldr	r5, [pc, #584]	; (8002734 <main+0x588>)
 80024ec:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
  specialModeMacroNames[3][11] = "ToungeDia  ";
 80024f0:	4d91      	ldr	r5, [pc, #580]	; (8002738 <main+0x58c>)
 80024f2:	f8c3 511c 	str.w	r5, [r3, #284]	; 0x11c
  specialModeNames[4] = "STRING3      ";
 80024f6:	4d91      	ldr	r5, [pc, #580]	; (800273c <main+0x590>)
 80024f8:	610d      	str	r5, [r1, #16]
  specialModeMacroNames[4][0] = "Stiffness ";
 80024fa:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
  specialModeMacroNames[4][1] = "PU Prop   ";
 80024fe:	4990      	ldr	r1, [pc, #576]	; (8002740 <main+0x594>)
 8002500:	f8c3 1144 	str.w	r1, [r3, #324]	; 0x144
  specialModeMacroNames[4][2] = "Plck Prop ";
 8002504:	498f      	ldr	r1, [pc, #572]	; (8002744 <main+0x598>)
 8002506:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
  specialModeMacroNames[4][3] = "PU Filter ";
 800250a:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
  specialModeMacroNames[4][4] = "NoiseFilt ";
 800250e:	498e      	ldr	r1, [pc, #568]	; (8002748 <main+0x59c>)
 8002510:	f8c3 1150 	str.w	r1, [r3, #336]	; 0x150
  specialModeMacroNames[4][5] = "NoiseGain ";
 8002514:	498d      	ldr	r1, [pc, #564]	; (800274c <main+0x5a0>)
 8002516:	f8c3 1154 	str.w	r1, [r3, #340]	; 0x154
  specialModeMacroNames[4][6] = "          ";
 800251a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  specialModeMacroNames[4][7] = "          ";
 800251e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  specialModeMacroNames[4][8] = "Decay     ";
 8002522:	f8c3 0160 	str.w	r0, [r3, #352]	; 0x160
  specialModeMacroNames[4][9] = "Damping   ";
 8002526:	4a8a      	ldr	r2, [pc, #552]	; (8002750 <main+0x5a4>)
 8002528:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
  specialModeMacroNames[4][10] = "PluckPos ";
 800252c:	4a89      	ldr	r2, [pc, #548]	; (8002754 <main+0x5a8>)
 800252e:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
  specialModeMacroNames[4][11] = "PU Pos   ";
 8002532:	4a89      	ldr	r2, [pc, #548]	; (8002758 <main+0x5ac>)
 8002534:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  for (int i = 0; i < 5; i++)
 8002538:	f04f 0c00 	mov.w	ip, #0
 800253c:	e036      	b.n	80025ac <main+0x400>
	  getPresetNamesFromSDCard();
 800253e:	f7ff f8bb 	bl	80016b8 <getPresetNamesFromSDCard>
	  diskBusy = 1;
 8002542:	4b4d      	ldr	r3, [pc, #308]	; (8002678 <main+0x4cc>)
 8002544:	2201      	movs	r2, #1
 8002546:	701a      	strb	r2, [r3, #0]
 8002548:	e745      	b.n	80023d6 <main+0x22a>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 800254a:	4b4c      	ldr	r3, [pc, #304]	; (800267c <main+0x4d0>)
 800254c:	f853 102c 	ldr.w	r1, [r3, ip, lsl #2]
 8002550:	f1cc 033f 	rsb	r3, ip, #63	; 0x3f
 8002554:	5c88      	ldrb	r0, [r1, r2]
 8002556:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800255a:	4980      	ldr	r1, [pc, #512]	; (800275c <main+0x5b0>)
 800255c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8002560:	5498      	strb	r0, [r3, r2]
	  for (int j = 0; j < 14; j++)
 8002562:	3201      	adds	r2, #1
 8002564:	2a0d      	cmp	r2, #13
 8002566:	ddf0      	ble.n	800254a <main+0x39e>
	  for (int k = 0; k < 20; k++)
 8002568:	2000      	movs	r0, #0
 800256a:	e019      	b.n	80025a0 <main+0x3f4>
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 800256c:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
 8002570:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002574:	4943      	ldr	r1, [pc, #268]	; (8002684 <main+0x4d8>)
 8002576:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800257a:	f1cc 033f 	rsb	r3, ip, #63	; 0x3f
 800257e:	f811 e002 	ldrb.w	lr, [r1, r2]
 8002582:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8002586:	24c8      	movs	r4, #200	; 0xc8
 8002588:	fb04 f303 	mul.w	r3, r4, r3
 800258c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8002590:	4973      	ldr	r1, [pc, #460]	; (8002760 <main+0x5b4>)
 8002592:	440b      	add	r3, r1
 8002594:	f803 e002 	strb.w	lr, [r3, r2]
		  for (int j = 0; j < 10; j++)
 8002598:	3201      	adds	r2, #1
 800259a:	2a09      	cmp	r2, #9
 800259c:	dde6      	ble.n	800256c <main+0x3c0>
	  for (int k = 0; k < 20; k++)
 800259e:	3001      	adds	r0, #1
 80025a0:	2813      	cmp	r0, #19
 80025a2:	dc01      	bgt.n	80025a8 <main+0x3fc>
		  for (int j = 0; j < 10; j++)
 80025a4:	2200      	movs	r2, #0
 80025a6:	e7f8      	b.n	800259a <main+0x3ee>
  for (int i = 0; i < 5; i++)
 80025a8:	f10c 0c01 	add.w	ip, ip, #1
 80025ac:	f1bc 0f04 	cmp.w	ip, #4
 80025b0:	dc01      	bgt.n	80025b6 <main+0x40a>
	  for (int j = 0; j < 14; j++)
 80025b2:	2200      	movs	r2, #0
 80025b4:	e7d6      	b.n	8002564 <main+0x3b8>
  HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 80025b6:	2240      	movs	r2, #64	; 0x40
 80025b8:	496a      	ldr	r1, [pc, #424]	; (8002764 <main+0x5b8>)
 80025ba:	486b      	ldr	r0, [pc, #428]	; (8002768 <main+0x5bc>)
 80025bc:	f008 f82a 	bl	800a614 <HAL_SPI_Receive_DMA>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 80025c0:	496a      	ldr	r1, [pc, #424]	; (800276c <main+0x5c0>)
 80025c2:	2340      	movs	r3, #64	; 0x40
 80025c4:	18ca      	adds	r2, r1, r3
 80025c6:	486a      	ldr	r0, [pc, #424]	; (8002770 <main+0x5c4>)
 80025c8:	f008 f908 	bl	800a7dc <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockA1, &hsai_BlockB1);
 80025cc:	4969      	ldr	r1, [pc, #420]	; (8002774 <main+0x5c8>)
 80025ce:	486a      	ldr	r0, [pc, #424]	; (8002778 <main+0x5cc>)
 80025d0:	f7fe fb1a 	bl	8000c08 <audioStart>
	AudioCodec_init(&hi2c2);
 80025d4:	4869      	ldr	r0, [pc, #420]	; (800277c <main+0x5d0>)
 80025d6:	f7fe fb29 	bl	8000c2c <AudioCodec_init>
 80025da:	e034      	b.n	8002646 <main+0x49a>
		  else if (presetWaitingToWrite > 0)
 80025dc:	4b68      	ldr	r3, [pc, #416]	; (8002780 <main+0x5d4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d141      	bne.n	8002668 <main+0x4bc>
	  if (presetWaitingToParse > 0)
 80025e4:	4b67      	ldr	r3, [pc, #412]	; (8002784 <main+0x5d8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f040 80e1 	bne.w	80027b0 <main+0x604>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
 80025ee:	4b66      	ldr	r3, [pc, #408]	; (8002788 <main+0x5dc>)
 80025f0:	881b      	ldrh	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	b90b      	cbnz	r3, 80025fa <main+0x44e>
 80025f6:	4b64      	ldr	r3, [pc, #400]	; (8002788 <main+0x5dc>)
 80025f8:	885b      	ldrh	r3, [r3, #2]
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 80025fa:	a901      	add	r1, sp, #4
 80025fc:	4863      	ldr	r0, [pc, #396]	; (800278c <main+0x5e0>)
 80025fe:	f006 f98d 	bl	800891c <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
 8002602:	eddd 7a01 	vldr	s15, [sp, #4]
 8002606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800260a:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8002790 <main+0x5e4>
 800260e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002616:	dd03      	ble.n	8002620 <main+0x474>
		  myTestInt++;
 8002618:	4a5e      	ldr	r2, [pc, #376]	; (8002794 <main+0x5e8>)
 800261a:	6813      	ldr	r3, [r2, #0]
 800261c:	3301      	adds	r3, #1
 800261e:	6013      	str	r3, [r2, #0]
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
 8002620:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002798 <main+0x5ec>
 8002624:	ee67 7a87 	vmul.f32	s15, s15, s14
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8002628:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800262c:	4b5b      	ldr	r3, [pc, #364]	; (800279c <main+0x5f0>)
 800262e:	781a      	ldrb	r2, [r3, #0]
 8002630:	1c51      	adds	r1, r2, #1
 8002632:	7019      	strb	r1, [r3, #0]
 8002634:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002638:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800263c:	4b58      	ldr	r3, [pc, #352]	; (80027a0 <main+0x5f4>)
 800263e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8002642:	edc3 7a00 	vstr	s15, [r3]
	  if (boardNumber == 0)
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <main+0x4c8>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ca      	bne.n	80025e4 <main+0x438>
		  if (presetWaitingToLoad > 0)
 800264e:	4b55      	ldr	r3, [pc, #340]	; (80027a4 <main+0x5f8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0c2      	beq.n	80025dc <main+0x430>
			  if (!i2cSending)
 8002656:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <main+0x5fc>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1c2      	bne.n	80025e4 <main+0x438>
				  checkForSDCardPreset(presetNumberToLoad);
 800265e:	4b53      	ldr	r3, [pc, #332]	; (80027ac <main+0x600>)
 8002660:	7818      	ldrb	r0, [r3, #0]
 8002662:	f7fe ff03 	bl	800146c <checkForSDCardPreset>
 8002666:	e7bd      	b.n	80025e4 <main+0x438>
				  writePresetToSDCard(presetWaitingToWrite);
 8002668:	4b45      	ldr	r3, [pc, #276]	; (8002780 <main+0x5d4>)
 800266a:	6818      	ldr	r0, [r3, #0]
 800266c:	f7fe ffa4 	bl	80015b8 <writePresetToSDCard>
 8002670:	e7b8      	b.n	80025e4 <main+0x438>
 8002672:	bf00      	nop
 8002674:	200144e5 	.word	0x200144e5
 8002678:	20014538 	.word	0x20014538
 800267c:	2001c7f8 	.word	0x2001c7f8
 8002680:	080196fc 	.word	0x080196fc
 8002684:	2001c668 	.word	0x2001c668
 8002688:	0801970c 	.word	0x0801970c
 800268c:	08019718 	.word	0x08019718
 8002690:	08019724 	.word	0x08019724
 8002694:	08019730 	.word	0x08019730
 8002698:	0801973c 	.word	0x0801973c
 800269c:	08019748 	.word	0x08019748
 80026a0:	08019754 	.word	0x08019754
 80026a4:	08019764 	.word	0x08019764
 80026a8:	08019770 	.word	0x08019770
 80026ac:	0801977c 	.word	0x0801977c
 80026b0:	08019788 	.word	0x08019788
 80026b4:	08019794 	.word	0x08019794
 80026b8:	080197a0 	.word	0x080197a0
 80026bc:	080197ac 	.word	0x080197ac
 80026c0:	080197b8 	.word	0x080197b8
 80026c4:	080197c4 	.word	0x080197c4
 80026c8:	080197d0 	.word	0x080197d0
 80026cc:	080197dc 	.word	0x080197dc
 80026d0:	080197e8 	.word	0x080197e8
 80026d4:	080197f4 	.word	0x080197f4
 80026d8:	08019800 	.word	0x08019800
 80026dc:	0801980c 	.word	0x0801980c
 80026e0:	08019818 	.word	0x08019818
 80026e4:	08019824 	.word	0x08019824
 80026e8:	08019830 	.word	0x08019830
 80026ec:	0801983c 	.word	0x0801983c
 80026f0:	08019848 	.word	0x08019848
 80026f4:	08019858 	.word	0x08019858
 80026f8:	08019864 	.word	0x08019864
 80026fc:	08019870 	.word	0x08019870
 8002700:	0801987c 	.word	0x0801987c
 8002704:	08019888 	.word	0x08019888
 8002708:	08019894 	.word	0x08019894
 800270c:	080198a0 	.word	0x080198a0
 8002710:	080198ac 	.word	0x080198ac
 8002714:	080198bc 	.word	0x080198bc
 8002718:	080198c8 	.word	0x080198c8
 800271c:	080198d4 	.word	0x080198d4
 8002720:	080198e0 	.word	0x080198e0
 8002724:	080198ec 	.word	0x080198ec
 8002728:	080198f8 	.word	0x080198f8
 800272c:	08019904 	.word	0x08019904
 8002730:	08019910 	.word	0x08019910
 8002734:	0801991c 	.word	0x0801991c
 8002738:	08019928 	.word	0x08019928
 800273c:	08019934 	.word	0x08019934
 8002740:	08019944 	.word	0x08019944
 8002744:	08019950 	.word	0x08019950
 8002748:	0801995c 	.word	0x0801995c
 800274c:	08019968 	.word	0x08019968
 8002750:	08019974 	.word	0x08019974
 8002754:	08019980 	.word	0x08019980
 8002758:	0801998c 	.word	0x0801998c
 800275c:	30042000 	.word	0x30042000
 8002760:	30043380 	.word	0x30043380
 8002764:	38000040 	.word	0x38000040
 8002768:	2001ccb4 	.word	0x2001ccb4
 800276c:	30000800 	.word	0x30000800
 8002770:	2001cc2c 	.word	0x2001cc2c
 8002774:	2001c9b0 	.word	0x2001c9b0
 8002778:	2001c918 	.word	0x2001c918
 800277c:	20014490 	.word	0x20014490
 8002780:	2001a210 	.word	0x2001a210
 8002784:	2001a20c 	.word	0x2001a20c
 8002788:	200143fc 	.word	0x200143fc
 800278c:	2001c810 	.word	0x2001c810
 8002790:	4f000000 	.word	0x4f000000
 8002794:	200190c8 	.word	0x200190c8
 8002798:	2f80000d 	.word	0x2f80000d
 800279c:	200144fe 	.word	0x200144fe
 80027a0:	2001a264 	.word	0x2001a264
 80027a4:	2001a208 	.word	0x2001a208
 80027a8:	200166ba 	.word	0x200166ba
 80027ac:	2001a206 	.word	0x2001a206
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <main+0x614>)
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <main+0x618>)
 80027b6:	7819      	ldrb	r1, [r3, #0]
 80027b8:	f016 fb5e 	bl	8018e78 <__parsePreset_veneer>
 80027bc:	e717      	b.n	80025ee <main+0x442>
 80027be:	bf00      	nop
 80027c0:	2001a20c 	.word	0x2001a20c
 80027c4:	2001a206 	.word	0x2001a206

080027c8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027c8:	4770      	bx	lr
	...

080027cc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80027cc:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80027ce:	4806      	ldr	r0, [pc, #24]	; (80027e8 <MX_RNG_Init+0x1c>)
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <MX_RNG_Init+0x20>)
 80027d2:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80027d8:	f006 f860 	bl	800889c <HAL_RNG_Init>
 80027dc:	b900      	cbnz	r0, 80027e0 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80027de:	bd08      	pop	{r3, pc}
    Error_Handler();
 80027e0:	f7ff fff2 	bl	80027c8 <Error_Handler>
}
 80027e4:	e7fb      	b.n	80027de <MX_RNG_Init+0x12>
 80027e6:	bf00      	nop
 80027e8:	2001c810 	.word	0x2001c810
 80027ec:	48021800 	.word	0x48021800

080027f0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80027f0:	b510      	push	{r4, lr}
 80027f2:	b0b2      	sub	sp, #200	; 0xc8
 80027f4:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027f6:	22c0      	movs	r2, #192	; 0xc0
 80027f8:	2100      	movs	r1, #0
 80027fa:	a802      	add	r0, sp, #8
 80027fc:	f014 f8e6 	bl	80169cc <memset>
  if(rngHandle->Instance==RNG)
 8002800:	6822      	ldr	r2, [r4, #0]
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <HAL_RNG_MspInit+0x50>)
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002808:	b032      	add	sp, #200	; 0xc8
 800280a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800280c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002810:	2300      	movs	r3, #0
 8002812:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002816:	a802      	add	r0, sp, #8
 8002818:	f004 fc86 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 800281c:	b968      	cbnz	r0, 800283a <HAL_RNG_MspInit+0x4a>
    __HAL_RCC_RNG_CLK_ENABLE();
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_RNG_MspInit+0x54>)
 8002820:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8002824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002828:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800282c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002834:	9301      	str	r3, [sp, #4]
 8002836:	9b01      	ldr	r3, [sp, #4]
}
 8002838:	e7e6      	b.n	8002808 <HAL_RNG_MspInit+0x18>
      Error_Handler();
 800283a:	f7ff ffc5 	bl	80027c8 <Error_Handler>
 800283e:	e7ee      	b.n	800281e <HAL_RNG_MspInit+0x2e>
 8002840:	48021800 	.word	0x48021800
 8002844:	58024400 	.word	0x58024400

08002848 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002848:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800284a:	4818      	ldr	r0, [pc, #96]	; (80028ac <MX_SAI1_Init+0x64>)
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <MX_SAI1_Init+0x68>)
 800284e:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002850:	2100      	movs	r1, #0
 8002852:	6041      	str	r1, [r0, #4]
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002854:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002856:	6141      	str	r1, [r0, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002858:	6181      	str	r1, [r0, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800285a:	2301      	movs	r3, #1
 800285c:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800285e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002862:	6203      	str	r3, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002864:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8002866:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002868:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800286a:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800286c:	2302      	movs	r3, #2
 800286e:	461a      	mov	r2, r3
 8002870:	f006 fb94 	bl	8008f9c <HAL_SAI_InitProtocol>
 8002874:	b998      	cbnz	r0, 800289e <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002876:	480f      	ldr	r0, [pc, #60]	; (80028b4 <MX_SAI1_Init+0x6c>)
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <MX_SAI1_Init+0x70>)
 800287a:	6003      	str	r3, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800287c:	2303      	movs	r3, #3
 800287e:	6043      	str	r3, [r0, #4]
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8002880:	2301      	movs	r3, #1
 8002882:	6083      	str	r3, [r0, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002884:	2100      	movs	r1, #0
 8002886:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002888:	61c3      	str	r3, [r0, #28]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800288a:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800288c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800288e:	6301      	str	r1, [r0, #48]	; 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002890:	6341      	str	r1, [r0, #52]	; 0x34
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8002892:	2302      	movs	r3, #2
 8002894:	461a      	mov	r2, r3
 8002896:	f006 fb81 	bl	8008f9c <HAL_SAI_InitProtocol>
 800289a:	b918      	cbnz	r0, 80028a4 <MX_SAI1_Init+0x5c>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800289c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800289e:	f7ff ff93 	bl	80027c8 <Error_Handler>
 80028a2:	e7e8      	b.n	8002876 <MX_SAI1_Init+0x2e>
    Error_Handler();
 80028a4:	f7ff ff90 	bl	80027c8 <Error_Handler>
}
 80028a8:	e7f8      	b.n	800289c <MX_SAI1_Init+0x54>
 80028aa:	bf00      	nop
 80028ac:	2001c918 	.word	0x2001c918
 80028b0:	40015804 	.word	0x40015804
 80028b4:	2001c9b0 	.word	0x2001c9b0
 80028b8:	40015824 	.word	0x40015824

080028bc <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80028bc:	b530      	push	{r4, r5, lr}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80028c2:	6802      	ldr	r2, [r0, #0]
 80028c4:	4b4d      	ldr	r3, [pc, #308]	; (80029fc <HAL_SAI_MspInit+0x140>)
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d005      	beq.n	80028d6 <HAL_SAI_MspInit+0x1a>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80028ca:	6822      	ldr	r2, [r4, #0]
 80028cc:	4b4c      	ldr	r3, [pc, #304]	; (8002a00 <HAL_SAI_MspInit+0x144>)
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d04b      	beq.n	800296a <HAL_SAI_MspInit+0xae>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 80028d2:	b009      	add	sp, #36	; 0x24
 80028d4:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 80028d6:	4b4b      	ldr	r3, [pc, #300]	; (8002a04 <HAL_SAI_MspInit+0x148>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	b963      	cbnz	r3, 80028f6 <HAL_SAI_MspInit+0x3a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 80028dc:	4a4a      	ldr	r2, [pc, #296]	; (8002a08 <HAL_SAI_MspInit+0x14c>)
 80028de:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 80028e2:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80028e6:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 80028ea:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 80028ee:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80028f2:	9201      	str	r2, [sp, #4]
 80028f4:	9a01      	ldr	r2, [sp, #4]
    SAI1_client ++;
 80028f6:	3301      	adds	r3, #1
 80028f8:	4a42      	ldr	r2, [pc, #264]	; (8002a04 <HAL_SAI_MspInit+0x148>)
 80028fa:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80028fc:	2374      	movs	r3, #116	; 0x74
 80028fe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002904:	2500      	movs	r5, #0
 8002906:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002908:	2303      	movs	r3, #3
 800290a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800290c:	2306      	movs	r3, #6
 800290e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002910:	a903      	add	r1, sp, #12
 8002912:	483e      	ldr	r0, [pc, #248]	; (8002a0c <HAL_SAI_MspInit+0x150>)
 8002914:	f002 fd5a 	bl	80053cc <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 8002918:	483d      	ldr	r0, [pc, #244]	; (8002a10 <HAL_SAI_MspInit+0x154>)
 800291a:	4b3e      	ldr	r3, [pc, #248]	; (8002a14 <HAL_SAI_MspInit+0x158>)
 800291c:	6003      	str	r3, [r0, #0]
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800291e:	2357      	movs	r3, #87	; 0x57
 8002920:	6043      	str	r3, [r0, #4]
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002922:	2340      	movs	r3, #64	; 0x40
 8002924:	6083      	str	r3, [r0, #8]
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8002926:	60c5      	str	r5, [r0, #12]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8002928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800292c:	6103      	str	r3, [r0, #16]
    hdma_sai1_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800292e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002932:	6143      	str	r3, [r0, #20]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002938:	6183      	str	r3, [r0, #24]
    hdma_sai1_a.Init.Mode = DMA_CIRCULAR;
 800293a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800293e:	61c3      	str	r3, [r0, #28]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002940:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002944:	6203      	str	r3, [r0, #32]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002946:	2304      	movs	r3, #4
 8002948:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800294a:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_a.Init.MemBurst = DMA_MBURST_SINGLE;
 800294c:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800294e:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8002950:	f001 fba4 	bl	800409c <HAL_DMA_Init>
 8002954:	b930      	cbnz	r0, 8002964 <HAL_SAI_MspInit+0xa8>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8002956:	4b2e      	ldr	r3, [pc, #184]	; (8002a10 <HAL_SAI_MspInit+0x154>)
 8002958:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800295c:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 800295e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8002962:	e7b2      	b.n	80028ca <HAL_SAI_MspInit+0xe>
      Error_Handler();
 8002964:	f7ff ff30 	bl	80027c8 <Error_Handler>
 8002968:	e7f5      	b.n	8002956 <HAL_SAI_MspInit+0x9a>
      if (SAI1_client == 0)
 800296a:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <HAL_SAI_MspInit+0x148>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	b963      	cbnz	r3, 800298a <HAL_SAI_MspInit+0xce>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002970:	4a25      	ldr	r2, [pc, #148]	; (8002a08 <HAL_SAI_MspInit+0x14c>)
 8002972:	f8d2 10f0 	ldr.w	r1, [r2, #240]	; 0xf0
 8002976:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800297a:	f8c2 10f0 	str.w	r1, [r2, #240]	; 0xf0
 800297e:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8002982:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8002986:	9202      	str	r2, [sp, #8]
 8002988:	9a02      	ldr	r2, [sp, #8]
    SAI1_client ++;
 800298a:	3301      	adds	r3, #1
 800298c:	4a1d      	ldr	r2, [pc, #116]	; (8002a04 <HAL_SAI_MspInit+0x148>)
 800298e:	6013      	str	r3, [r2, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002990:	2308      	movs	r3, #8
 8002992:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2500      	movs	r5, #0
 800299a:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80029a0:	2306      	movs	r3, #6
 80029a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029a4:	a903      	add	r1, sp, #12
 80029a6:	4819      	ldr	r0, [pc, #100]	; (8002a0c <HAL_SAI_MspInit+0x150>)
 80029a8:	f002 fd10 	bl	80053cc <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 80029ac:	481a      	ldr	r0, [pc, #104]	; (8002a18 <HAL_SAI_MspInit+0x15c>)
 80029ae:	4b1b      	ldr	r3, [pc, #108]	; (8002a1c <HAL_SAI_MspInit+0x160>)
 80029b0:	6003      	str	r3, [r0, #0]
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 80029b2:	2358      	movs	r3, #88	; 0x58
 80029b4:	6043      	str	r3, [r0, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029b6:	6085      	str	r5, [r0, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80029b8:	60c5      	str	r5, [r0, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 80029ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029be:	6103      	str	r3, [r0, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029c4:	6143      	str	r3, [r0, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029ca:	6183      	str	r3, [r0, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80029cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029d0:	61c3      	str	r3, [r0, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029d2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80029d6:	6203      	str	r3, [r0, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80029d8:	2304      	movs	r3, #4
 80029da:	6243      	str	r3, [r0, #36]	; 0x24
    hdma_sai1_b.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80029dc:	6285      	str	r5, [r0, #40]	; 0x28
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 80029de:	62c5      	str	r5, [r0, #44]	; 0x2c
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80029e0:	6305      	str	r5, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80029e2:	f001 fb5b 	bl	800409c <HAL_DMA_Init>
 80029e6:	b930      	cbnz	r0, 80029f6 <HAL_SAI_MspInit+0x13a>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_SAI_MspInit+0x15c>)
 80029ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80029ee:	639c      	str	r4, [r3, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 80029f0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80029f4:	e76d      	b.n	80028d2 <HAL_SAI_MspInit+0x16>
      Error_Handler();
 80029f6:	f7ff fee7 	bl	80027c8 <Error_Handler>
 80029fa:	e7f5      	b.n	80029e8 <HAL_SAI_MspInit+0x12c>
 80029fc:	40015804 	.word	0x40015804
 8002a00:	40015824 	.word	0x40015824
 8002a04:	2001c824 	.word	0x2001c824
 8002a08:	58024400 	.word	0x58024400
 8002a0c:	58021000 	.word	0x58021000
 8002a10:	2001c828 	.word	0x2001c828
 8002a14:	40020028 	.word	0x40020028
 8002a18:	2001c8a0 	.word	0x2001c8a0
 8002a1c:	40020040 	.word	0x40020040

08002a20 <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <MX_SDMMC1_SD_Init+0x1c>)
 8002a22:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <MX_SDMMC1_SD_Init+0x20>)
 8002a24:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002a26:	2200      	movs	r2, #0
 8002a28:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002a2a:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8002a2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a30:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002a32:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 25;
 8002a34:	2219      	movs	r2, #25
 8002a36:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	2001ca48 	.word	0x2001ca48
 8002a40:	52007000 	.word	0x52007000

08002a44 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002a44:	b570      	push	{r4, r5, r6, lr}
 8002a46:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	2300      	movs	r3, #0
 8002a4a:	9303      	str	r3, [sp, #12]
 8002a4c:	9304      	str	r3, [sp, #16]
 8002a4e:	9305      	str	r3, [sp, #20]
 8002a50:	9306      	str	r3, [sp, #24]
 8002a52:	9307      	str	r3, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 8002a54:	6802      	ldr	r2, [r0, #0]
 8002a56:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <HAL_SD_MspInit+0xac>)
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d001      	beq.n	8002a60 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002a5c:	b008      	add	sp, #32
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002a60:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_SD_MspInit+0xb0>)
 8002a62:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002a66:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a6a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8002a6e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8002a72:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8002a76:	9200      	str	r2, [sp, #0]
 8002a78:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a7e:	f042 0204 	orr.w	r2, r2, #4
 8002a82:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002a86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a8a:	f002 0204 	and.w	r2, r2, #4
 8002a8e:	9201      	str	r2, [sp, #4]
 8002a90:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002a96:	f042 0208 	orr.w	r2, r2, #8
 8002a9a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	9302      	str	r3, [sp, #8]
 8002aa8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002aaa:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002aae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab0:	2402      	movs	r4, #2
 8002ab2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ab4:	2601      	movs	r6, #1
 8002ab6:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ab8:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002aba:	250c      	movs	r5, #12
 8002abc:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abe:	eb0d 0105 	add.w	r1, sp, r5
 8002ac2:	480d      	ldr	r0, [pc, #52]	; (8002af8 <HAL_SD_MspInit+0xb4>)
 8002ac4:	f002 fc82 	bl	80053cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ac8:	2304      	movs	r3, #4
 8002aca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002acc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ace:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ad0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8002ad2:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ad4:	eb0d 0105 	add.w	r1, sp, r5
 8002ad8:	4808      	ldr	r0, [pc, #32]	; (8002afc <HAL_SD_MspInit+0xb8>)
 8002ada:	f002 fc77 	bl	80053cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	2031      	movs	r0, #49	; 0x31
 8002ae4:	f001 f822 	bl	8003b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002ae8:	2031      	movs	r0, #49	; 0x31
 8002aea:	f001 f855 	bl	8003b98 <HAL_NVIC_EnableIRQ>
}
 8002aee:	e7b5      	b.n	8002a5c <HAL_SD_MspInit+0x18>
 8002af0:	52007000 	.word	0x52007000
 8002af4:	58024400 	.word	0x58024400
 8002af8:	58020800 	.word	0x58020800
 8002afc:	58020c00 	.word	0x58020c00

08002b00 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_tx;
DMA_HandleTypeDef hdma_spi5_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002b00:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002b02:	4810      	ldr	r0, [pc, #64]	; (8002b44 <MX_SPI1_Init+0x44>)
 8002b04:	4b10      	ldr	r3, [pc, #64]	; (8002b48 <MX_SPI1_Init+0x48>)
 8002b06:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b0c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b0e:	2207      	movs	r2, #7
 8002b10:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b12:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b14:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002b16:	6183      	str	r3, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b18:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b1a:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002b1e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002b20:	6343      	str	r3, [r0, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b22:	6383      	str	r3, [r0, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002b24:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b26:	6403      	str	r3, [r0, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b28:	6443      	str	r3, [r0, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b2a:	6483      	str	r3, [r0, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b2c:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b2e:	6503      	str	r3, [r0, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b30:	6543      	str	r3, [r0, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b32:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b34:	f007 fca6 	bl	800a484 <HAL_SPI_Init>
 8002b38:	b900      	cbnz	r0, 8002b3c <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b3a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002b3c:	f7ff fe44 	bl	80027c8 <Error_Handler>
}
 8002b40:	e7fb      	b.n	8002b3a <MX_SPI1_Init+0x3a>
 8002b42:	bf00      	nop
 8002b44:	2001cc2c 	.word	0x2001cc2c
 8002b48:	40013000 	.word	0x40013000

08002b4c <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002b4c:	b508      	push	{r3, lr}
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002b4e:	4810      	ldr	r0, [pc, #64]	; (8002b90 <MX_SPI5_Init+0x44>)
 8002b50:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <MX_SPI5_Init+0x48>)
 8002b52:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002b58:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b5a:	2207      	movs	r2, #7
 8002b5c:	60c2      	str	r2, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b5e:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b60:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8002b62:	6183      	str	r3, [r0, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b64:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b66:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b68:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8002b6a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002b6c:	6343      	str	r3, [r0, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002b6e:	6383      	str	r3, [r0, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002b70:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b72:	6403      	str	r3, [r0, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002b74:	6443      	str	r3, [r0, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002b76:	6483      	str	r3, [r0, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002b78:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002b7a:	6503      	str	r3, [r0, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002b7c:	6543      	str	r3, [r0, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002b7e:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002b80:	f007 fc80 	bl	800a484 <HAL_SPI_Init>
 8002b84:	b900      	cbnz	r0, 8002b88 <MX_SPI5_Init+0x3c>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002b86:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002b88:	f7ff fe1e 	bl	80027c8 <Error_Handler>
}
 8002b8c:	e7fb      	b.n	8002b86 <MX_SPI5_Init+0x3a>
 8002b8e:	bf00      	nop
 8002b90:	2001ccb4 	.word	0x2001ccb4
 8002b94:	40015000 	.word	0x40015000

08002b98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b9c:	b0ba      	sub	sp, #232	; 0xe8
 8002b9e:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	9135      	str	r1, [sp, #212]	; 0xd4
 8002ba4:	9136      	str	r1, [sp, #216]	; 0xd8
 8002ba6:	9137      	str	r1, [sp, #220]	; 0xdc
 8002ba8:	9138      	str	r1, [sp, #224]	; 0xe0
 8002baa:	9139      	str	r1, [sp, #228]	; 0xe4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bac:	22c0      	movs	r2, #192	; 0xc0
 8002bae:	a804      	add	r0, sp, #16
 8002bb0:	f013 ff0c 	bl	80169cc <memset>
  if(spiHandle->Instance==SPI1)
 8002bb4:	6823      	ldr	r3, [r4, #0]
 8002bb6:	4a71      	ldr	r2, [pc, #452]	; (8002d7c <HAL_SPI_MspInit+0x1e4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d005      	beq.n	8002bc8 <HAL_SPI_MspInit+0x30>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 8002bbc:	4a70      	ldr	r2, [pc, #448]	; (8002d80 <HAL_SPI_MspInit+0x1e8>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d076      	beq.n	8002cb0 <HAL_SPI_MspInit+0x118>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002bc2:	b03a      	add	sp, #232	; 0xe8
 8002bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bc8:	4b6e      	ldr	r3, [pc, #440]	; (8002d84 <HAL_SPI_MspInit+0x1ec>)
 8002bca:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002bce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002bd2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002bd6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002bda:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002bde:	9200      	str	r2, [sp, #0]
 8002be0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	9301      	str	r3, [sp, #4]
 8002bf8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002bfa:	23f0      	movs	r3, #240	; 0xf0
 8002bfc:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	9336      	str	r3, [sp, #216]	; 0xd8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c02:	2303      	movs	r3, #3
 8002c04:	9338      	str	r3, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c06:	2305      	movs	r3, #5
 8002c08:	9339      	str	r3, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0a:	a935      	add	r1, sp, #212	; 0xd4
 8002c0c:	485e      	ldr	r0, [pc, #376]	; (8002d88 <HAL_SPI_MspInit+0x1f0>)
 8002c0e:	f002 fbdd 	bl	80053cc <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8002c12:	485e      	ldr	r0, [pc, #376]	; (8002d8c <HAL_SPI_MspInit+0x1f4>)
 8002c14:	4b5e      	ldr	r3, [pc, #376]	; (8002d90 <HAL_SPI_MspInit+0x1f8>)
 8002c16:	6003      	str	r3, [r0, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002c18:	2325      	movs	r3, #37	; 0x25
 8002c1a:	6043      	str	r3, [r0, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	6083      	str	r3, [r0, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c20:	60c3      	str	r3, [r0, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c26:	6102      	str	r2, [r0, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c28:	6143      	str	r3, [r0, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c2a:	6183      	str	r3, [r0, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c30:	61c2      	str	r2, [r0, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c32:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c36:	6202      	str	r2, [r0, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002c38:	2204      	movs	r2, #4
 8002c3a:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002c40:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002c42:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002c44:	f001 fa2a 	bl	800409c <HAL_DMA_Init>
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	d12b      	bne.n	8002ca4 <HAL_SPI_MspInit+0x10c>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8002c4c:	4b4f      	ldr	r3, [pc, #316]	; (8002d8c <HAL_SPI_MspInit+0x1f4>)
 8002c4e:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002c50:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8002c52:	4850      	ldr	r0, [pc, #320]	; (8002d94 <HAL_SPI_MspInit+0x1fc>)
 8002c54:	4b50      	ldr	r3, [pc, #320]	; (8002d98 <HAL_SPI_MspInit+0x200>)
 8002c56:	6003      	str	r3, [r0, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8002c58:	2326      	movs	r3, #38	; 0x26
 8002c5a:	6043      	str	r3, [r0, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c5c:	2340      	movs	r3, #64	; 0x40
 8002c5e:	6083      	str	r3, [r0, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60c3      	str	r3, [r0, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c68:	6102      	str	r2, [r0, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c6a:	6143      	str	r3, [r0, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c6c:	6183      	str	r3, [r0, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c72:	61c2      	str	r2, [r0, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002c74:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c78:	6202      	str	r2, [r0, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002c7a:	2204      	movs	r2, #4
 8002c7c:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8002c7e:	2201      	movs	r2, #1
 8002c80:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002c82:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002c84:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002c86:	f001 fa09 	bl	800409c <HAL_DMA_Init>
 8002c8a:	b970      	cbnz	r0, 8002caa <HAL_SPI_MspInit+0x112>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8002c8c:	4b41      	ldr	r3, [pc, #260]	; (8002d94 <HAL_SPI_MspInit+0x1fc>)
 8002c8e:	67a3      	str	r3, [r4, #120]	; 0x78
 8002c90:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	2102      	movs	r1, #2
 8002c96:	2023      	movs	r0, #35	; 0x23
 8002c98:	f000 ff48 	bl	8003b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002c9c:	2023      	movs	r0, #35	; 0x23
 8002c9e:	f000 ff7b 	bl	8003b98 <HAL_NVIC_EnableIRQ>
 8002ca2:	e78e      	b.n	8002bc2 <HAL_SPI_MspInit+0x2a>
      Error_Handler();
 8002ca4:	f7ff fd90 	bl	80027c8 <Error_Handler>
 8002ca8:	e7d0      	b.n	8002c4c <HAL_SPI_MspInit+0xb4>
      Error_Handler();
 8002caa:	f7ff fd8d 	bl	80027c8 <Error_Handler>
 8002cae:	e7ed      	b.n	8002c8c <HAL_SPI_MspInit+0xf4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8002cb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cba:	a804      	add	r0, sp, #16
 8002cbc:	f004 fa34 	bl	8007128 <HAL_RCCEx_PeriphCLKConfig>
 8002cc0:	2800      	cmp	r0, #0
 8002cc2:	d155      	bne.n	8002d70 <HAL_SPI_MspInit+0x1d8>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002cc4:	4b2f      	ldr	r3, [pc, #188]	; (8002d84 <HAL_SPI_MspInit+0x1ec>)
 8002cc6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002cca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002cce:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002cd2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002cd6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cda:	9202      	str	r2, [sp, #8]
 8002cdc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cde:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002ce2:	f042 0220 	orr.w	r2, r2, #32
 8002ce6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	9303      	str	r3, [sp, #12]
 8002cf4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8002cf6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8002cfa:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2602      	movs	r6, #2
 8002cfe:	9636      	str	r6, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2500      	movs	r5, #0
 8002d02:	9537      	str	r5, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d04:	9638      	str	r6, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d06:	f04f 0805 	mov.w	r8, #5
 8002d0a:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d0e:	4f23      	ldr	r7, [pc, #140]	; (8002d9c <HAL_SPI_MspInit+0x204>)
 8002d10:	a935      	add	r1, sp, #212	; 0xd4
 8002d12:	4638      	mov	r0, r7
 8002d14:	f002 fb5a 	bl	80053cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d1c:	9335      	str	r3, [sp, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1e:	9636      	str	r6, [sp, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	9537      	str	r5, [sp, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	9538      	str	r5, [sp, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002d24:	f8cd 80e4 	str.w	r8, [sp, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002d28:	a935      	add	r1, sp, #212	; 0xd4
 8002d2a:	4638      	mov	r0, r7
 8002d2c:	f002 fb4e 	bl	80053cc <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8002d30:	481b      	ldr	r0, [pc, #108]	; (8002da0 <HAL_SPI_MspInit+0x208>)
 8002d32:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <HAL_SPI_MspInit+0x20c>)
 8002d34:	6003      	str	r3, [r0, #0]
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8002d36:	2355      	movs	r3, #85	; 0x55
 8002d38:	6043      	str	r3, [r0, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d3a:	6085      	str	r5, [r0, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d3c:	60c5      	str	r5, [r0, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d42:	6103      	str	r3, [r0, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d44:	6145      	str	r5, [r0, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d46:	6185      	str	r5, [r0, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 8002d48:	61c5      	str	r5, [r0, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002d4a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002d4e:	6203      	str	r3, [r0, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d50:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8002d52:	f001 f9a3 	bl	800409c <HAL_DMA_Init>
 8002d56:	b970      	cbnz	r0, 8002d76 <HAL_SPI_MspInit+0x1de>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8002d58:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_SPI_MspInit+0x208>)
 8002d5a:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002d5c:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2104      	movs	r1, #4
 8002d62:	2055      	movs	r0, #85	; 0x55
 8002d64:	f000 fee2 	bl	8003b2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8002d68:	2055      	movs	r0, #85	; 0x55
 8002d6a:	f000 ff15 	bl	8003b98 <HAL_NVIC_EnableIRQ>
}
 8002d6e:	e728      	b.n	8002bc2 <HAL_SPI_MspInit+0x2a>
      Error_Handler();
 8002d70:	f7ff fd2a 	bl	80027c8 <Error_Handler>
 8002d74:	e7a6      	b.n	8002cc4 <HAL_SPI_MspInit+0x12c>
      Error_Handler();
 8002d76:	f7ff fd27 	bl	80027c8 <Error_Handler>
 8002d7a:	e7ed      	b.n	8002d58 <HAL_SPI_MspInit+0x1c0>
 8002d7c:	40013000 	.word	0x40013000
 8002d80:	40015000 	.word	0x40015000
 8002d84:	58024400 	.word	0x58024400
 8002d88:	58020000 	.word	0x58020000
 8002d8c:	2001cac4 	.word	0x2001cac4
 8002d90:	40020070 	.word	0x40020070
 8002d94:	2001cb3c 	.word	0x2001cb3c
 8002d98:	40020088 	.word	0x40020088
 8002d9c:	58021400 	.word	0x58021400
 8002da0:	2001cbb4 	.word	0x2001cbb4
 8002da4:	40020058 	.word	0x40020058

08002da8 <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 8002da8:	e7fe      	b.n	8002da8 <Default_Handler>
	...

08002dac <Reset_Handler>:
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <Reset_Handler+0x48>)
 8002dae:	4912      	ldr	r1, [pc, #72]	; (8002df8 <Reset_Handler+0x4c>)
 8002db0:	e003      	b.n	8002dba <Reset_Handler+0xe>
		*pDest = *pSource;
 8002db2:	f851 2b04 	ldr.w	r2, [r1], #4
 8002db6:	f843 2b04 	str.w	r2, [r3], #4
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 8002dba:	4a10      	ldr	r2, [pc, #64]	; (8002dfc <Reset_Handler+0x50>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d1f8      	bne.n	8002db2 <Reset_Handler+0x6>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <Reset_Handler+0x54>)
 8002dc2:	e002      	b.n	8002dca <Reset_Handler+0x1e>
		*pDest = 0;
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f843 2b04 	str.w	r2, [r3], #4
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 8002dca:	4a0e      	ldr	r2, [pc, #56]	; (8002e04 <Reset_Handler+0x58>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d1f9      	bne.n	8002dc4 <Reset_Handler+0x18>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
 8002dd0:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <Reset_Handler+0x5c>)
 8002dd2:	490e      	ldr	r1, [pc, #56]	; (8002e0c <Reset_Handler+0x60>)
 8002dd4:	e003      	b.n	8002dde <Reset_Handler+0x32>
		*pDest = *pSource;
 8002dd6:	f851 2b04 	ldr.w	r2, [r1], #4
 8002dda:	f843 2b04 	str.w	r2, [r3], #4
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
 8002dde:	4a0c      	ldr	r2, [pc, #48]	; (8002e10 <Reset_Handler+0x64>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d1f8      	bne.n	8002dd6 <Reset_Handler+0x2a>
	SystemInit();
 8002de4:	f000 fd9e 	bl	8003924 <SystemInit>
	__libc_init_array();
 8002de8:	f013 fdf8 	bl	80169dc <__libc_init_array>
	(void)main();
 8002dec:	f7ff f9de 	bl	80021ac <main>
	for (;;) ;
 8002df0:	e7fe      	b.n	8002df0 <Reset_Handler+0x44>
 8002df2:	bf00      	nop
 8002df4:	20000000 	.word	0x20000000
 8002df8:	08025190 	.word	0x08025190
 8002dfc:	20000ba0 	.word	0x20000ba0
 8002e00:	20000ba0 	.word	0x20000ba0
 8002e04:	2001e11c 	.word	0x2001e11c
 8002e08:	00000400 	.word	0x00000400
 8002e0c:	08025d30 	.word	0x08025d30
 8002e10:	00009720 	.word	0x00009720

08002e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e14:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e16:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <HAL_MspInit+0x20>)
 8002e18:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002e1c:	f042 0202 	orr.w	r2, r2, #2
 8002e20:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8002e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	9301      	str	r3, [sp, #4]
 8002e2e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e30:	b002      	add	sp, #8
 8002e32:	4770      	bx	lr
 8002e34:	58024400 	.word	0x58024400

08002e38 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <NMI_Handler>

08002e3a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e3a:	e7fe      	b.n	8002e3a <HardFault_Handler>

08002e3c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e3c:	e7fe      	b.n	8002e3c <MemManage_Handler>

08002e3e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <BusFault_Handler>

08002e40 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <UsageFault_Handler>

08002e42 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e42:	4770      	bx	lr

08002e44 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e44:	4770      	bx	lr

08002e46 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e46:	4770      	bx	lr

08002e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e4a:	f000 fe27 	bl	8003a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e4e:	bd08      	pop	{r3, pc}

08002e50 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8002e52:	4802      	ldr	r0, [pc, #8]	; (8002e5c <DMA1_Stream1_IRQHandler+0xc>)
 8002e54:	f001 ff18 	bl	8004c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e58:	bd08      	pop	{r3, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2001c828 	.word	0x2001c828

08002e60 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002e60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8002e62:	4802      	ldr	r0, [pc, #8]	; (8002e6c <DMA1_Stream2_IRQHandler+0xc>)
 8002e64:	f001 ff10 	bl	8004c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e68:	bd08      	pop	{r3, pc}
 8002e6a:	bf00      	nop
 8002e6c:	2001c8a0 	.word	0x2001c8a0

08002e70 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002e70:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8002e72:	4802      	ldr	r0, [pc, #8]	; (8002e7c <DMA1_Stream3_IRQHandler+0xc>)
 8002e74:	f001 ff08 	bl	8004c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002e78:	bd08      	pop	{r3, pc}
 8002e7a:	bf00      	nop
 8002e7c:	2001cbb4 	.word	0x2001cbb4

08002e80 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002e80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002e82:	4802      	ldr	r0, [pc, #8]	; (8002e8c <DMA1_Stream4_IRQHandler+0xc>)
 8002e84:	f001 ff00 	bl	8004c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002e88:	bd08      	pop	{r3, pc}
 8002e8a:	bf00      	nop
 8002e8c:	2001cac4 	.word	0x2001cac4

08002e90 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e90:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002e92:	4802      	ldr	r0, [pc, #8]	; (8002e9c <DMA1_Stream5_IRQHandler+0xc>)
 8002e94:	f001 fef8 	bl	8004c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e98:	bd08      	pop	{r3, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2001cb3c 	.word	0x2001cb3c

08002ea0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002ea0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002ea2:	4802      	ldr	r0, [pc, #8]	; (8002eac <I2C2_EV_IRQHandler+0xc>)
 8002ea4:	f002 fe52 	bl	8005b4c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002ea8:	bd08      	pop	{r3, pc}
 8002eaa:	bf00      	nop
 8002eac:	20014490 	.word	0x20014490

08002eb0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002eb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002eb2:	4802      	ldr	r0, [pc, #8]	; (8002ebc <I2C2_ER_IRQHandler+0xc>)
 8002eb4:	f003 f994 	bl	80061e0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002eb8:	bd08      	pop	{r3, pc}
 8002eba:	bf00      	nop
 8002ebc:	20014490 	.word	0x20014490

08002ec0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ec0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002ec2:	4802      	ldr	r0, [pc, #8]	; (8002ecc <SPI1_IRQHandler+0xc>)
 8002ec4:	f007 feb2 	bl	800ac2c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002ec8:	bd08      	pop	{r3, pc}
 8002eca:	bf00      	nop
 8002ecc:	2001cc2c 	.word	0x2001cc2c

08002ed0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8002ed0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8002ed2:	4802      	ldr	r0, [pc, #8]	; (8002edc <SDMMC1_IRQHandler+0xc>)
 8002ed4:	f007 f8b4 	bl	800a040 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8002ed8:	bd08      	pop	{r3, pc}
 8002eda:	bf00      	nop
 8002edc:	2001ca48 	.word	0x2001ca48

08002ee0 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8002ee0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8002ee2:	4802      	ldr	r0, [pc, #8]	; (8002eec <SPI5_IRQHandler+0xc>)
 8002ee4:	f007 fea2 	bl	800ac2c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8002ee8:	bd08      	pop	{r3, pc}
 8002eea:	bf00      	nop
 8002eec:	2001ccb4 	.word	0x2001ccb4

08002ef0 <audioInitSynth>:
 float polyDivider[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void audioInitSynth()
{
 8002ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef4:	ed2d 8b04 	vpush	{d8-d9}
 8002ef8:	b082      	sub	sp, #8
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8002efa:	2600      	movs	r6, #0
 8002efc:	e30d      	b.n	800351a <audioInitSynth+0x62a>
	{

		for(int i = 0; i < NUM_OSC; i++)
		{
			tPBSaw_init(&saw[i][v], &leaf);
 8002efe:	4d8c      	ldr	r5, [pc, #560]	; (8003130 <audioInitSynth+0x240>)
 8002f00:	eb06 0347 	add.w	r3, r6, r7, lsl #1
 8002f04:	009c      	lsls	r4, r3, #2
 8002f06:	4629      	mov	r1, r5
 8002f08:	488a      	ldr	r0, [pc, #552]	; (8003134 <audioInitSynth+0x244>)
 8002f0a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002f0e:	f00f fe13 	bl	8012b38 <tPBSaw_init>

			tPBPulse_init(&pulse[i][v], &leaf);
 8002f12:	4629      	mov	r1, r5
 8002f14:	4888      	ldr	r0, [pc, #544]	; (8003138 <audioInitSynth+0x248>)
 8002f16:	4420      	add	r0, r4
 8002f18:	f00f fd72 	bl	8012a00 <tPBPulse_init>

			tCycle_init(&sine[i][v],  &leaf);
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	4887      	ldr	r0, [pc, #540]	; (800313c <audioInitSynth+0x24c>)
 8002f20:	4420      	add	r0, r4
 8002f22:	f00f fb4d 	bl	80125c0 <tCycle_init>

			tPBTriangle_init(&tri[i][v],  &leaf);
 8002f26:	4629      	mov	r1, r5
 8002f28:	4885      	ldr	r0, [pc, #532]	; (8003140 <audioInitSynth+0x250>)
 8002f2a:	4420      	add	r0, r4
 8002f2c:	f00f fbc5 	bl	80126ba <tPBTriangle_init>

			tPBSawSquare_init(&sawPaired[i][v], &leaf);
 8002f30:	4629      	mov	r1, r5
 8002f32:	4884      	ldr	r0, [pc, #528]	; (8003144 <audioInitSynth+0x254>)
 8002f34:	4420      	add	r0, r4
 8002f36:	f00f fe59 	bl	8012bec <tPBSawSquare_init>

			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
 8002f3a:	4629      	mov	r1, r5
 8002f3c:	4882      	ldr	r0, [pc, #520]	; (8003148 <audioInitSynth+0x258>)
 8002f3e:	4420      	add	r0, r4
 8002f40:	f00f fc9c 	bl	801287c <tPBSineTriangle_init>

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);
 8002f44:	4629      	mov	r1, r5
 8002f46:	eddf 0a81 	vldr	s1, [pc, #516]	; 800314c <audioInitSynth+0x25c>
 8002f4a:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8003150 <audioInitSynth+0x260>
 8002f4e:	4881      	ldr	r0, [pc, #516]	; (8003154 <audioInitSynth+0x264>)
 8002f50:	4420      	add	r0, r4
 8002f52:	f00b ff11 	bl	800ed78 <tExpSmooth_init>

			freqMult[i][v] = 1.0f;
 8002f56:	4b80      	ldr	r3, [pc, #512]	; (8003158 <audioInitSynth+0x268>)
 8002f58:	4423      	add	r3, r4
 8002f5a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002f5e:	601a      	str	r2, [r3, #0]
			midiAdd[i][v] = 0.0f;
 8002f60:	4b7e      	ldr	r3, [pc, #504]	; (800315c <audioInitSynth+0x26c>)
 8002f62:	4423      	add	r3, r4
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < NUM_OSC; i++)
 8002f68:	3701      	adds	r7, #1
 8002f6a:	2f02      	cmp	r7, #2
 8002f6c:	ddc7      	ble.n	8002efe <audioInitSynth+0xe>

		}
		for (int i = 0; i < NUM_FILT; i++)
 8002f6e:	2700      	movs	r7, #0
 8002f70:	e06f      	b.n	8003052 <audioInitSynth+0x162>
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8002f72:	4c6f      	ldr	r4, [pc, #444]	; (8003130 <audioInitSynth+0x240>)
 8002f74:	eddf 8a7a 	vldr	s17, [pc, #488]	; 8003160 <audioInitSynth+0x270>
 8002f78:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 8003164 <audioInitSynth+0x274>
 8002f7c:	eb06 0347 	add.w	r3, r6, r7, lsl #1
 8002f80:	009d      	lsls	r5, r3, #2
 8002f82:	4622      	mov	r2, r4
 8002f84:	eef0 0a68 	vmov.f32	s1, s17
 8002f88:	eeb0 0a48 	vmov.f32	s0, s16
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4876      	ldr	r0, [pc, #472]	; (8003168 <audioInitSynth+0x278>)
 8002f90:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8002f94:	f00c fad0 	bl	800f538 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8002f98:	4622      	mov	r2, r4
 8002f9a:	eef0 0a68 	vmov.f32	s1, s17
 8002f9e:	eeb0 0a48 	vmov.f32	s0, s16
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4871      	ldr	r0, [pc, #452]	; (800316c <audioInitSynth+0x27c>)
 8002fa6:	4428      	add	r0, r5
 8002fa8:	f00c fac6 	bl	800f538 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8002fac:	4622      	mov	r2, r4
 8002fae:	eef0 0a68 	vmov.f32	s1, s17
 8002fb2:	eeb0 0a48 	vmov.f32	s0, s16
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	486d      	ldr	r0, [pc, #436]	; (8003170 <audioInitSynth+0x280>)
 8002fba:	4428      	add	r0, r5
 8002fbc:	f00c fabc 	bl	800f538 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002fc6:	eeb0 0a48 	vmov.f32	s0, s16
 8002fca:	486a      	ldr	r0, [pc, #424]	; (8003174 <audioInitSynth+0x284>)
 8002fcc:	4428      	add	r0, r5
 8002fce:	f00d fe79 	bl	8010cc4 <tDiodeFilter_init>
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002fd8:	eddf 0a67 	vldr	s1, [pc, #412]	; 8003178 <audioInitSynth+0x288>
 8002fdc:	eeb0 0a48 	vmov.f32	s0, s16
 8002fe0:	4866      	ldr	r0, [pc, #408]	; (800317c <audioInitSynth+0x28c>)
 8002fe2:	4428      	add	r0, r5
 8002fe4:	f00d fc14 	bl	8010810 <tVZFilterBell_init>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8002fe8:	eddf 8a65 	vldr	s17, [pc, #404]	; 8003180 <audioInitSynth+0x290>
 8002fec:	4621      	mov	r1, r4
 8002fee:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002ff2:	eef0 0a68 	vmov.f32	s1, s17
 8002ff6:	eeb0 0a48 	vmov.f32	s0, s16
 8002ffa:	4862      	ldr	r0, [pc, #392]	; (8003184 <audioInitSynth+0x294>)
 8002ffc:	4428      	add	r0, r5
 8002ffe:	f00d f8c7 	bl	8010190 <tVZFilterLS_init>
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003002:	4621      	mov	r1, r4
 8003004:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003008:	eef0 0a68 	vmov.f32	s1, s17
 800300c:	eeb0 0a48 	vmov.f32	s0, s16
 8003010:	485d      	ldr	r0, [pc, #372]	; (8003188 <audioInitSynth+0x298>)
 8003012:	4428      	add	r0, r5
 8003014:	f00d fa4c 	bl	80104b0 <tVZFilterHS_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8003018:	4622      	mov	r2, r4
 800301a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800301e:	eeb0 0a48 	vmov.f32	s0, s16
 8003022:	2104      	movs	r1, #4
 8003024:	4859      	ldr	r0, [pc, #356]	; (800318c <audioInitSynth+0x29c>)
 8003026:	4428      	add	r0, r5
 8003028:	f00c fffa 	bl	8010020 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
 800302c:	4621      	mov	r1, r4
 800302e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003032:	eeb0 0a48 	vmov.f32	s0, s16
 8003036:	4856      	ldr	r0, [pc, #344]	; (8003190 <audioInitSynth+0x2a0>)
 8003038:	4428      	add	r0, r5
 800303a:	f00e fa07 	bl	801144c <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 800303e:	4621      	mov	r1, r4
 8003040:	eddf 0a54 	vldr	s1, [pc, #336]	; 8003194 <audioInitSynth+0x2a4>
 8003044:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8003150 <audioInitSynth+0x260>
 8003048:	4853      	ldr	r0, [pc, #332]	; (8003198 <audioInitSynth+0x2a8>)
 800304a:	4428      	add	r0, r5
 800304c:	f00b fe94 	bl	800ed78 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
 8003050:	3701      	adds	r7, #1
 8003052:	2f01      	cmp	r7, #1
 8003054:	dd8d      	ble.n	8002f72 <audioInitSynth+0x82>
		}

		for (int i = 0; i < NUM_LFOS; i++)
 8003056:	2700      	movs	r7, #0
 8003058:	e023      	b.n	80030a2 <audioInitSynth+0x1b2>
		{
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 800305a:	4c35      	ldr	r4, [pc, #212]	; (8003130 <audioInitSynth+0x240>)
 800305c:	eb06 0347 	add.w	r3, r6, r7, lsl #1
 8003060:	009d      	lsls	r5, r3, #2
 8003062:	4621      	mov	r1, r4
 8003064:	484d      	ldr	r0, [pc, #308]	; (800319c <audioInitSynth+0x2ac>)
 8003066:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800306a:	f00f feb9 	bl	8012de0 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 800306e:	4621      	mov	r1, r4
 8003070:	484b      	ldr	r0, [pc, #300]	; (80031a0 <audioInitSynth+0x2b0>)
 8003072:	4428      	add	r0, r5
 8003074:	f00f ff48 	bl	8012f08 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
 8003078:	4621      	mov	r1, r4
 800307a:	484a      	ldr	r0, [pc, #296]	; (80031a4 <audioInitSynth+0x2b4>)
 800307c:	4428      	add	r0, r5
 800307e:	f00f fa9f 	bl	80125c0 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
 8003082:	4621      	mov	r1, r4
 8003084:	4848      	ldr	r0, [pc, #288]	; (80031a8 <audioInitSynth+0x2b8>)
 8003086:	4428      	add	r0, r5
 8003088:	f010 f80e 	bl	80130a8 <tTriLFO_init>

			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
 800308c:	4621      	mov	r1, r4
 800308e:	4847      	ldr	r0, [pc, #284]	; (80031ac <audioInitSynth+0x2bc>)
 8003090:	4428      	add	r0, r5
 8003092:	f010 f82f 	bl	80130f4 <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 8003096:	4621      	mov	r1, r4
 8003098:	4845      	ldr	r0, [pc, #276]	; (80031b0 <audioInitSynth+0x2c0>)
 800309a:	4428      	add	r0, r5
 800309c:	f00f ff69 	bl	8012f72 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
 80030a0:	3701      	adds	r7, #1
 80030a2:	2f03      	cmp	r7, #3
 80030a4:	ddd9      	ble.n	800305a <audioInitSynth+0x16a>
		}


		for (int i = 0; i < NUM_ENV; i++)
 80030a6:	2500      	movs	r5, #0
 80030a8:	e019      	b.n	80030de <audioInitSynth+0x1ee>
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80030aa:	eb06 0345 	add.w	r3, r6, r5, lsl #1
 80030ae:	4c41      	ldr	r4, [pc, #260]	; (80031b4 <audioInitSynth+0x2c4>)
 80030b0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80030b4:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <audioInitSynth+0x240>)
 80030b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030ba:	493f      	ldr	r1, [pc, #252]	; (80031b8 <audioInitSynth+0x2c8>)
 80030bc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80030c0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80030c4:	eddf 0a3d 	vldr	s1, [pc, #244]	; 80031bc <audioInitSynth+0x2cc>
 80030c8:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80031c0 <audioInitSynth+0x2d0>
 80030cc:	4620      	mov	r0, r4
 80030ce:	f00b fb77 	bl	800e7c0 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80030d2:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80031c4 <audioInitSynth+0x2d4>
 80030d6:	4620      	mov	r0, r4
 80030d8:	f00b fbca 	bl	800e870 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
 80030dc:	3501      	adds	r5, #1
 80030de:	2d03      	cmp	r5, #3
 80030e0:	dde3      	ble.n	80030aa <audioInitSynth+0x1ba>
		}

		//noise
		tVZFilterLS_init(&noiseShelf1[v], 80.0f, 0.5f, 1.0f, &leaf);
 80030e2:	4d13      	ldr	r5, [pc, #76]	; (8003130 <audioInitSynth+0x240>)
 80030e4:	00b4      	lsls	r4, r6, #2
 80030e6:	4629      	mov	r1, r5
 80030e8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80030ec:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80030f0:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80031c8 <audioInitSynth+0x2d8>
 80030f4:	4835      	ldr	r0, [pc, #212]	; (80031cc <audioInitSynth+0x2dc>)
 80030f6:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 80030fa:	f00d f849 	bl	8010190 <tVZFilterLS_init>
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
 80030fe:	4629      	mov	r1, r5
 8003100:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003104:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8003108:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80031d0 <audioInitSynth+0x2e0>
 800310c:	4831      	ldr	r0, [pc, #196]	; (80031d4 <audioInitSynth+0x2e4>)
 800310e:	4420      	add	r0, r4
 8003110:	f00d f9ce 	bl	80104b0 <tVZFilterHS_init>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 8003114:	4629      	mov	r1, r5
 8003116:	ed9f 1a30 	vldr	s2, [pc, #192]	; 80031d8 <audioInitSynth+0x2e8>
 800311a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8003178 <audioInitSynth+0x288>
 800311e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80031bc <audioInitSynth+0x2cc>
 8003122:	482e      	ldr	r0, [pc, #184]	; (80031dc <audioInitSynth+0x2ec>)
 8003124:	4420      	add	r0, r4
 8003126:	f00d fb73 	bl	8010810 <tVZFilterBell_init>

		for (int i = 0; i < NUM_EFFECT; i++)
 800312a:	f04f 0900 	mov.w	r9, #0
 800312e:	e1b0      	b.n	8003492 <audioInitSynth+0x5a2>
 8003130:	20005484 	.word	0x20005484
 8003134:	2001d690 	.word	0x2001d690
 8003138:	2001d674 	.word	0x2001d674
 800313c:	2001d74c 	.word	0x2001d74c
 8003140:	2001d8fc 	.word	0x2001d8fc
 8003144:	2001d6a8 	.word	0x2001d6a8
 8003148:	2001d764 	.word	0x2001d764
 800314c:	3ba3d70a 	.word	0x3ba3d70a
 8003150:	42800000 	.word	0x42800000
 8003154:	2001d638 	.word	0x2001d638
 8003158:	2001d1bc 	.word	0x2001d1bc
 800315c:	2001d4a8 	.word	0x2001d4a8
 8003160:	3f333333 	.word	0x3f333333
 8003164:	44fa0000 	.word	0x44fa0000
 8003168:	2001d398 	.word	0x2001d398
 800316c:	2001d214 	.word	0x2001d214
 8003170:	2001cf08 	.word	0x2001cf08
 8003174:	2001d120 	.word	0x2001d120
 8003178:	3ff33333 	.word	0x3ff33333
 800317c:	2001cef0 	.word	0x2001cef0
 8003180:	3f19999a 	.word	0x3f19999a
 8003184:	2001cee0 	.word	0x2001cee0
 8003188:	2001ced0 	.word	0x2001ced0
 800318c:	2001cec0 	.word	0x2001cec0
 8003190:	2001ceb0 	.word	0x2001ceb0
 8003194:	3c23d70a 	.word	0x3c23d70a
 8003198:	2001d184 	.word	0x2001d184
 800319c:	2001d2e8 	.word	0x2001d2e8
 80031a0:	2001d2c8 	.word	0x2001d2c8
 80031a4:	2001d338 	.word	0x2001d338
 80031a8:	2001d378 	.word	0x2001d378
 80031ac:	2001d358 	.word	0x2001d358
 80031b0:	2001d308 	.word	0x2001d308
 80031b4:	2001d144 	.word	0x2001d144
 80031b8:	200013a8 	.word	0x200013a8
 80031bc:	447a0000 	.word	0x447a0000
 80031c0:	3dcccccd 	.word	0x3dcccccd
 80031c4:	3f7fffac 	.word	0x3f7fffac
 80031c8:	42a00000 	.word	0x42a00000
 80031cc:	2001d51c 	.word	0x2001d51c
 80031d0:	463b8000 	.word	0x463b8000
 80031d4:	2001d524 	.word	0x2001d524
 80031d8:	3f8b851f 	.word	0x3f8b851f
 80031dc:	2001d500 	.word	0x2001d500
		{
			tCrusher_init(&bc[i][v],&leaf);
 80031e0:	4dd2      	ldr	r5, [pc, #840]	; (800352c <audioInitSynth+0x63c>)
 80031e2:	eb06 0349 	add.w	r3, r6, r9, lsl #1
 80031e6:	009c      	lsls	r4, r3, #2
 80031e8:	4629      	mov	r1, r5
 80031ea:	48d1      	ldr	r0, [pc, #836]	; (8003530 <audioInitSynth+0x640>)
 80031ec:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80031f0:	f00b f880 	bl	800e2f4 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
 80031f4:	4fcf      	ldr	r7, [pc, #828]	; (8003534 <audioInitSynth+0x644>)
 80031f6:	4427      	add	r7, r4
 80031f8:	4629      	mov	r1, r5
 80031fa:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80031fe:	4638      	mov	r0, r7
 8003200:	f00c fab2 	bl	800f768 <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003204:	ed9f 8acc 	vldr	s16, [pc, #816]	; 8003538 <audioInitSynth+0x648>
 8003208:	eeb0 0a48 	vmov.f32	s0, s16
 800320c:	4638      	mov	r0, r7
 800320e:	f00c fad9 	bl	800f7c4 <tHighpass_setSampleRate>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 8003212:	4fca      	ldr	r7, [pc, #808]	; (800353c <audioInitSynth+0x64c>)
 8003214:	4427      	add	r7, r4
 8003216:	4629      	mov	r1, r5
 8003218:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800321c:	4638      	mov	r0, r7
 800321e:	f00c faa3 	bl	800f768 <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003222:	eeb0 0a48 	vmov.f32	s0, s16
 8003226:	4638      	mov	r0, r7
 8003228:	f00c facc 	bl	800f7c4 <tHighpass_setSampleRate>
			tVZFilterLS_init(&shelf1[i][v], 80.0f, 0.5f, 1.0f,&leaf);
 800322c:	4fc4      	ldr	r7, [pc, #784]	; (8003540 <audioInitSynth+0x650>)
 800322e:	4427      	add	r7, r4
 8003230:	4629      	mov	r1, r5
 8003232:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003236:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800323a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8003544 <audioInitSynth+0x654>
 800323e:	4638      	mov	r0, r7
 8003240:	f00c ffa6 	bl	8010190 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003244:	eeb0 0a48 	vmov.f32	s0, s16
 8003248:	4638      	mov	r0, r7
 800324a:	f00c ffa7 	bl	801019c <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&shelf2[i][v], 12000.0f, 0.5f, 1.0f, &leaf);
 800324e:	4fbe      	ldr	r7, [pc, #760]	; (8003548 <audioInitSynth+0x658>)
 8003250:	4427      	add	r7, r4
 8003252:	4629      	mov	r1, r5
 8003254:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003258:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800325c:	ed9f 0abb 	vldr	s0, [pc, #748]	; 800354c <audioInitSynth+0x65c>
 8003260:	4638      	mov	r0, r7
 8003262:	f00d f925 	bl	80104b0 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003266:	eeb0 0a48 	vmov.f32	s0, s16
 800326a:	4638      	mov	r0, r7
 800326c:	f00d f926 	bl	80104bc <tVZFilterHS_setSampleRate>
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
 8003270:	4fb7      	ldr	r7, [pc, #732]	; (8003550 <audioInitSynth+0x660>)
 8003272:	4427      	add	r7, r4
 8003274:	4629      	mov	r1, r5
 8003276:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800327a:	eddf 0ab6 	vldr	s1, [pc, #728]	; 8003554 <audioInitSynth+0x664>
 800327e:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8003558 <audioInitSynth+0x668>
 8003282:	4638      	mov	r0, r7
 8003284:	f00d fac4 	bl	8010810 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003288:	eeb0 0a48 	vmov.f32	s0, s16
 800328c:	4638      	mov	r0, r7
 800328e:	f00d fac5 	bl	801081c <tVZFilterBell_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
 8003292:	4fb2      	ldr	r7, [pc, #712]	; (800355c <audioInitSynth+0x66c>)
 8003294:	4427      	add	r7, r4
 8003296:	4629      	mov	r1, r5
 8003298:	4638      	mov	r0, r7
 800329a:	f00b f8ed 	bl	800e478 <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
 800329e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 80032a8:	ed9f 1aad 	vldr	s2, [pc, #692]	; 8003560 <audioInitSynth+0x670>
 80032ac:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80032b0:	ed9f 0aac 	vldr	s0, [pc, #688]	; 8003564 <audioInitSynth+0x674>
 80032b4:	4aac      	ldr	r2, [pc, #688]	; (8003568 <audioInitSynth+0x678>)
 80032b6:	49ad      	ldr	r1, [pc, #692]	; (800356c <audioInitSynth+0x67c>)
 80032b8:	4638      	mov	r0, r7
 80032ba:	f00b f967 	bl	800e58c <tCompressor_setTables>
			tCompressor_setSampleRate(&comp[i][v], SAMPLE_RATE * OVERSAMPLE);
 80032be:	eeb0 0a48 	vmov.f32	s0, s16
 80032c2:	4638      	mov	r0, r7
 80032c4:	f00b f987 	bl	800e5d6 <tCompressor_setSampleRate>
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &largePool);
 80032c8:	f8df a330 	ldr.w	sl, [pc, #816]	; 80035fc <audioInitSynth+0x70c>
 80032cc:	eddf 8aa8 	vldr	s17, [pc, #672]	; 8003570 <audioInitSynth+0x680>
 80032d0:	4652      	mov	r2, sl
 80032d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032d6:	eeb0 0a68 	vmov.f32	s0, s17
 80032da:	48a6      	ldr	r0, [pc, #664]	; (8003574 <audioInitSynth+0x684>)
 80032dc:	4420      	add	r0, r4
 80032de:	f00a fcff 	bl	800dce0 <tLinearDelay_initToPool>
			tLinearDelay_initToPool(&delay2[i][v], 4000.0f, 4096, &largePool);
 80032e2:	4652      	mov	r2, sl
 80032e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032e8:	eeb0 0a68 	vmov.f32	s0, s17
 80032ec:	48a2      	ldr	r0, [pc, #648]	; (8003578 <audioInitSynth+0x688>)
 80032ee:	4420      	add	r0, r4
 80032f0:	f00a fcf6 	bl	800dce0 <tLinearDelay_initToPool>
			tCycle_init(&mod1[i][v], &leaf);
 80032f4:	4ba1      	ldr	r3, [pc, #644]	; (800357c <audioInitSynth+0x68c>)
 80032f6:	eb03 0804 	add.w	r8, r3, r4
 80032fa:	4629      	mov	r1, r5
 80032fc:	4640      	mov	r0, r8
 80032fe:	f00f f95f 	bl	80125c0 <tCycle_init>
			tCycle_setSampleRate(&mod1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003302:	eeb0 0a48 	vmov.f32	s0, s16
 8003306:	4640      	mov	r0, r8
 8003308:	f00f f9ac 	bl	8012664 <tCycle_setSampleRate>
			tCycle_init(&mod2[i][v], &leaf);
 800330c:	4f9c      	ldr	r7, [pc, #624]	; (8003580 <audioInitSynth+0x690>)
 800330e:	4427      	add	r7, r4
 8003310:	4629      	mov	r1, r5
 8003312:	4638      	mov	r0, r7
 8003314:	f00f f954 	bl	80125c0 <tCycle_init>
			tCycle_setSampleRate(&mod2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003318:	eeb0 0a48 	vmov.f32	s0, s16
 800331c:	4638      	mov	r0, r7
 800331e:	f00f f9a1 	bl	8012664 <tCycle_setSampleRate>
			tCycle_setFreq(&mod1[i][v], 0.2f);
 8003322:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8003584 <audioInitSynth+0x694>
 8003326:	4640      	mov	r0, r8
 8003328:	f00f f97e 	bl	8012628 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
 800332c:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8003588 <audioInitSynth+0x698>
 8003330:	4638      	mov	r0, r7
 8003332:	f00f f979 	bl	8012628 <tCycle_setFreq>

	        tTapeDelay_initToPool(&tapeDelay[i][v], 15000.0f, 30000, &largePool);
 8003336:	4652      	mov	r2, sl
 8003338:	f247 5130 	movw	r1, #30000	; 0x7530
 800333c:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800358c <audioInitSynth+0x69c>
 8003340:	4893      	ldr	r0, [pc, #588]	; (8003590 <audioInitSynth+0x6a0>)
 8003342:	4420      	add	r0, r4
 8003344:	f00a ff43 	bl	800e1ce <tTapeDelay_initToPool>
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);
 8003348:	462a      	mov	r2, r5
 800334a:	2100      	movs	r1, #0
 800334c:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 8003350:	eddf 0a90 	vldr	s1, [pc, #576]	; 8003594 <audioInitSynth+0x6a4>
 8003354:	ed9f 0a90 	vldr	s0, [pc, #576]	; 8003598 <audioInitSynth+0x6a8>
 8003358:	4890      	ldr	r0, [pc, #576]	; (800359c <audioInitSynth+0x6ac>)
 800335a:	4420      	add	r0, r4
 800335c:	f00b f967 	bl	800e62e <tFeedbackLeveler_init>

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8003360:	4f8f      	ldr	r7, [pc, #572]	; (80035a0 <audioInitSynth+0x6b0>)
 8003362:	4427      	add	r7, r4
 8003364:	ed9f 9a8f 	vldr	s18, [pc, #572]	; 80035a4 <audioInitSynth+0x6b4>
 8003368:	eddf 8a8f 	vldr	s17, [pc, #572]	; 80035a8 <audioInitSynth+0x6b8>
 800336c:	462a      	mov	r2, r5
 800336e:	eef0 0a49 	vmov.f32	s1, s18
 8003372:	eeb0 0a68 	vmov.f32	s0, s17
 8003376:	2101      	movs	r1, #1
 8003378:	4638      	mov	r0, r7
 800337a:	f00c f8dd 	bl	800f538 <tSVF_init>
			tSVF_setSampleRate(&FXlowpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 800337e:	eeb0 0a48 	vmov.f32	s0, s16
 8003382:	4638      	mov	r0, r7
 8003384:	f00c f9c4 	bl	800f710 <tSVF_setSampleRate>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8003388:	4f88      	ldr	r7, [pc, #544]	; (80035ac <audioInitSynth+0x6bc>)
 800338a:	4427      	add	r7, r4
 800338c:	462a      	mov	r2, r5
 800338e:	eef0 0a49 	vmov.f32	s1, s18
 8003392:	eeb0 0a68 	vmov.f32	s0, s17
 8003396:	2100      	movs	r1, #0
 8003398:	4638      	mov	r0, r7
 800339a:	f00c f8cd 	bl	800f538 <tSVF_init>
			tSVF_setSampleRate(&FXhighpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 800339e:	eeb0 0a48 	vmov.f32	s0, s16
 80033a2:	4638      	mov	r0, r7
 80033a4:	f00c f9b4 	bl	800f710 <tSVF_setSampleRate>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 80033a8:	4f81      	ldr	r7, [pc, #516]	; (80035b0 <audioInitSynth+0x6c0>)
 80033aa:	4427      	add	r7, r4
 80033ac:	462a      	mov	r2, r5
 80033ae:	eef0 0a49 	vmov.f32	s1, s18
 80033b2:	eeb0 0a68 	vmov.f32	s0, s17
 80033b6:	2102      	movs	r1, #2
 80033b8:	4638      	mov	r0, r7
 80033ba:	f00c f8bd 	bl	800f538 <tSVF_init>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 80033be:	eeb0 0a48 	vmov.f32	s0, s16
 80033c2:	4638      	mov	r0, r7
 80033c4:	f00c f9a4 	bl	800f710 <tSVF_setSampleRate>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
 80033c8:	4f7a      	ldr	r7, [pc, #488]	; (80035b4 <audioInitSynth+0x6c4>)
 80033ca:	4427      	add	r7, r4
 80033cc:	4629      	mov	r1, r5
 80033ce:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80033d2:	eeb0 0a68 	vmov.f32	s0, s17
 80033d6:	4638      	mov	r0, r7
 80033d8:	f00d fc74 	bl	8010cc4 <tDiodeFilter_init>
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
 80033dc:	eeb0 0a48 	vmov.f32	s0, s16
 80033e0:	4638      	mov	r0, r7
 80033e2:	f00d ffaf 	bl	8011344 <tDiodeFilter_setSampleRate>
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
 80033e6:	4f74      	ldr	r7, [pc, #464]	; (80035b8 <audioInitSynth+0x6c8>)
 80033e8:	4427      	add	r7, r4
 80033ea:	4629      	mov	r1, r5
 80033ec:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80033f0:	eddf 0a72 	vldr	s1, [pc, #456]	; 80035bc <audioInitSynth+0x6cc>
 80033f4:	eeb0 0a68 	vmov.f32	s0, s17
 80033f8:	4638      	mov	r0, r7
 80033fa:	f00d fa09 	bl	8010810 <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
 80033fe:	eeb0 0a48 	vmov.f32	s0, s16
 8003402:	4638      	mov	r0, r7
 8003404:	f00d fa0a 	bl	801081c <tVZFilterBell_setSampleRate>
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003408:	4f6d      	ldr	r7, [pc, #436]	; (80035c0 <audioInitSynth+0x6d0>)
 800340a:	4427      	add	r7, r4
 800340c:	ed9f 9a6d 	vldr	s18, [pc, #436]	; 80035c4 <audioInitSynth+0x6d4>
 8003410:	4629      	mov	r1, r5
 8003412:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003416:	eef0 0a49 	vmov.f32	s1, s18
 800341a:	eeb0 0a68 	vmov.f32	s0, s17
 800341e:	4638      	mov	r0, r7
 8003420:	f00c feb6 	bl	8010190 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003424:	eeb0 0a48 	vmov.f32	s0, s16
 8003428:	4638      	mov	r0, r7
 800342a:	f00c feb7 	bl	801019c <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&FXVZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 800342e:	4f66      	ldr	r7, [pc, #408]	; (80035c8 <audioInitSynth+0x6d8>)
 8003430:	4427      	add	r7, r4
 8003432:	4629      	mov	r1, r5
 8003434:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003438:	eef0 0a49 	vmov.f32	s1, s18
 800343c:	eeb0 0a68 	vmov.f32	s0, s17
 8003440:	4638      	mov	r0, r7
 8003442:	f00d f835 	bl	80104b0 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003446:	eeb0 0a48 	vmov.f32	s0, s16
 800344a:	4638      	mov	r0, r7
 800344c:	f00d f836 	bl	80104bc <tVZFilterHS_setSampleRate>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8003450:	4f5e      	ldr	r7, [pc, #376]	; (80035cc <audioInitSynth+0x6dc>)
 8003452:	4427      	add	r7, r4
 8003454:	462a      	mov	r2, r5
 8003456:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800345a:	eeb0 0a68 	vmov.f32	s0, s17
 800345e:	2104      	movs	r1, #4
 8003460:	4638      	mov	r0, r7
 8003462:	f00c fddd 	bl	8010020 <tVZFilter_init>
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003466:	eeb0 0a48 	vmov.f32	s0, s16
 800346a:	4638      	mov	r0, r7
 800346c:	f00c fdde 	bl	801002c <tVZFilter_setSampleRate>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 8003470:	4b57      	ldr	r3, [pc, #348]	; (80035d0 <audioInitSynth+0x6e0>)
 8003472:	441c      	add	r4, r3
 8003474:	4629      	mov	r1, r5
 8003476:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800347a:	eeb0 0a68 	vmov.f32	s0, s17
 800347e:	4620      	mov	r0, r4
 8003480:	f00d ffe4 	bl	801144c <tLadderFilter_init>
			tLadderFilter_setSampleRate(&FXLadderfilter[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003484:	eeb0 0a48 	vmov.f32	s0, s16
 8003488:	4620      	mov	r0, r4
 800348a:	f00e f9a5 	bl	80117d8 <tLadderFilter_setSampleRate>
		for (int i = 0; i < NUM_EFFECT; i++)
 800348e:	f109 0901 	add.w	r9, r9, #1
 8003492:	f1b9 0f03 	cmp.w	r9, #3
 8003496:	f77f aea3 	ble.w	80031e0 <audioInitSynth+0x2f0>
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 800349a:	2400      	movs	r4, #0
 800349c:	e00c      	b.n	80034b8 <audioInitSynth+0x5c8>
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.005f, &leaf);
 800349e:	eb06 0044 	add.w	r0, r6, r4, lsl #1
 80034a2:	4922      	ldr	r1, [pc, #136]	; (800352c <audioInitSynth+0x63c>)
 80034a4:	eddf 0a4b 	vldr	s1, [pc, #300]	; 80035d4 <audioInitSynth+0x6e4>
 80034a8:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80035d8 <audioInitSynth+0x6e8>
 80034ac:	4b4b      	ldr	r3, [pc, #300]	; (80035dc <audioInitSynth+0x6ec>)
 80034ae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80034b2:	f00b fc61 	bl	800ed78 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 80034b6:	3401      	adds	r4, #1
 80034b8:	2c1f      	cmp	r4, #31
 80034ba:	ddf0      	ble.n	800349e <audioInitSynth+0x5ae>
		}

		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 80034bc:	4b48      	ldr	r3, [pc, #288]	; (80035e0 <audioInitSynth+0x6f0>)
 80034be:	eb03 1386 	add.w	r3, r3, r6, lsl #6
 80034c2:	4f48      	ldr	r7, [pc, #288]	; (80035e4 <audioInitSynth+0x6f4>)
 80034c4:	0074      	lsls	r4, r6, #1
 80034c6:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80034ca:	0090      	lsls	r0, r2, #2
 80034cc:	2501      	movs	r5, #1
 80034ce:	9501      	str	r5, [sp, #4]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	463b      	mov	r3, r7
 80034d4:	2220      	movs	r2, #32
 80034d6:	2102      	movs	r1, #2
 80034d8:	f8df c124 	ldr.w	ip, [pc, #292]	; 8003600 <audioInitSynth+0x710>
 80034dc:	4460      	add	r0, ip
 80034de:	f7fd f92d 	bl	800073c <arm_fir_interpolate_init_f32>
		arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);
 80034e2:	eb06 1246 	add.w	r2, r6, r6, lsl #5
 80034e6:	0093      	lsls	r3, r2, #2
 80034e8:	493f      	ldr	r1, [pc, #252]	; (80035e8 <audioInitSynth+0x6f8>)
 80034ea:	4419      	add	r1, r3
 80034ec:	19a3      	adds	r3, r4, r6
 80034ee:	0098      	lsls	r0, r3, #2
 80034f0:	2202      	movs	r2, #2
 80034f2:	9201      	str	r2, [sp, #4]
 80034f4:	9100      	str	r1, [sp, #0]
 80034f6:	463b      	mov	r3, r7
 80034f8:	2120      	movs	r1, #32
 80034fa:	4c3c      	ldr	r4, [pc, #240]	; (80035ec <audioInitSynth+0x6fc>)
 80034fc:	4420      	add	r0, r4
 80034fe:	f7fd f8b9 	bl	8000674 <arm_fir_decimate_init_f32>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8003502:	4a0a      	ldr	r2, [pc, #40]	; (800352c <audioInitSynth+0x63c>)
 8003504:	eddf 0a3a 	vldr	s1, [pc, #232]	; 80035f0 <audioInitSynth+0x700>
 8003508:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80035f4 <audioInitSynth+0x704>
 800350c:	4629      	mov	r1, r5
 800350e:	483a      	ldr	r0, [pc, #232]	; (80035f8 <audioInitSynth+0x708>)
 8003510:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8003514:	f00c f810 	bl	800f538 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003518:	442e      	add	r6, r5
 800351a:	2e01      	cmp	r6, #1
 800351c:	dc01      	bgt.n	8003522 <audioInitSynth+0x632>
		for(int i = 0; i < NUM_OSC; i++)
 800351e:	2700      	movs	r7, #0
 8003520:	e523      	b.n	8002f6a <audioInitSynth+0x7a>
	}

}
 8003522:	b002      	add	sp, #8
 8003524:	ecbd 8b04 	vpop	{d8-d9}
 8003528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800352c:	20005484 	.word	0x20005484
 8003530:	2001cf18 	.word	0x2001cf18
 8003534:	2001cf78 	.word	0x2001cf78
 8003538:	47bb8000 	.word	0x47bb8000
 800353c:	2001cf98 	.word	0x2001cf98
 8003540:	2001d70c 	.word	0x2001d70c
 8003544:	42a00000 	.word	0x42a00000
 8003548:	2001d72c 	.word	0x2001d72c
 800354c:	463b8000 	.word	0x463b8000
 8003550:	2001cf38 	.word	0x2001cf38
 8003554:	3ff33333 	.word	0x3ff33333
 8003558:	447a0000 	.word	0x447a0000
 800355c:	2001cf58 	.word	0x2001cf58
 8003560:	c2b40000 	.word	0xc2b40000
 8003564:	3727c5ac 	.word	0x3727c5ac
 8003568:	30002000 	.word	0x30002000
 800356c:	30012000 	.word	0x30012000
 8003570:	457a0000 	.word	0x457a0000
 8003574:	2001d0c0 	.word	0x2001d0c0
 8003578:	2001d0e0 	.word	0x2001d0e0
 800357c:	2001d4c0 	.word	0x2001d4c0
 8003580:	2001d4e0 	.word	0x2001d4e0
 8003584:	3e4ccccd 	.word	0x3e4ccccd
 8003588:	3e638e39 	.word	0x3e638e39
 800358c:	466a6000 	.word	0x466a6000
 8003590:	2001d8ac 	.word	0x2001d8ac
 8003594:	3c23d70a 	.word	0x3c23d70a
 8003598:	3f7d70a4 	.word	0x3f7d70a4
 800359c:	2001d164 	.word	0x2001d164
 80035a0:	2001ce90 	.word	0x2001ce90
 80035a4:	3f333333 	.word	0x3f333333
 80035a8:	44fa0000 	.word	0x44fa0000
 80035ac:	2001ce70 	.word	0x2001ce70
 80035b0:	2001ce30 	.word	0x2001ce30
 80035b4:	2001ce50 	.word	0x2001ce50
 80035b8:	2001ce10 	.word	0x2001ce10
 80035bc:	3fcccccd 	.word	0x3fcccccd
 80035c0:	2001cdf0 	.word	0x2001cdf0
 80035c4:	3f19999a 	.word	0x3f19999a
 80035c8:	2001cdd0 	.word	0x2001cdd0
 80035cc:	2001cdb0 	.word	0x2001cdb0
 80035d0:	2001cd90 	.word	0x2001cd90
 80035d4:	3ba3d70a 	.word	0x3ba3d70a
 80035d8:	00000000 	.word	0x00000000
 80035dc:	2001d3a8 	.word	0x2001d3a8
 80035e0:	2001d224 	.word	0x2001d224
 80035e4:	08021e18 	.word	0x08021e18
 80035e8:	2001cfb8 	.word	0x2001cfb8
 80035ec:	2001d52c 	.word	0x2001d52c
 80035f0:	3e99999a 	.word	0x3e99999a
 80035f4:	46947000 	.word	0x46947000
 80035f8:	2001d1ac 	.word	0x2001d1ac
 80035fc:	20005480 	.word	0x20005480
 8003600:	2001d544 	.word	0x2001d544

08003604 <audioSwitchToSynth>:
{

}

void  audioSwitchToSynth()
{
 8003604:	b510      	push	{r4, lr}
	for (int i = 0; i < 20; i++)
 8003606:	2400      	movs	r4, #0
 8003608:	e00a      	b.n	8003620 <audioSwitchToSynth+0x1c>
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
 800360a:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8003628 <audioSwitchToSynth+0x24>
 800360e:	4807      	ldr	r0, [pc, #28]	; (800362c <audioSwitchToSynth+0x28>)
 8003610:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8003614:	f00b fbbc 	bl	800ed90 <tExpSmooth_setFactor>
		//tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
		knobFrozen[i] = 1;
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <audioSwitchToSynth+0x2c>)
 800361a:	2201      	movs	r2, #1
 800361c:	551a      	strb	r2, [r3, r4]
	for (int i = 0; i < 20; i++)
 800361e:	4414      	add	r4, r2
 8003620:	2c13      	cmp	r4, #19
 8003622:	ddf2      	ble.n	800360a <audioSwitchToSynth+0x6>
	}
}
 8003624:	bd10      	pop	{r4, pc}
 8003626:	bf00      	nop
 8003628:	3a83126f 	.word	0x3a83126f
 800362c:	20005430 	.word	0x20005430
 8003630:	200053cc 	.word	0x200053cc

08003634 <changeOversampling>:
}



void changeOversampling(uint32_t newOS)
{
 8003634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003638:	ed2d 8b02 	vpush	{d8}
 800363c:	4681      	mov	r9, r0
	if (newOS != prevOversample)
 800363e:	4b84      	ldr	r3, [pc, #528]	; (8003850 <changeOversampling+0x21c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4283      	cmp	r3, r0
 8003644:	f000 80fc 	beq.w	8003840 <changeOversampling+0x20c>
	{
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003648:	1c43      	adds	r3, r0, #1
 800364a:	ee08 3a90 	vmov	s17, r3
 800364e:	eef8 8a68 	vcvt.f32.u32	s17, s17
 8003652:	eddf 7a80 	vldr	s15, [pc, #512]	; 8003854 <changeOversampling+0x220>
 8003656:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800365a:	eefc 8ae8 	vcvt.u32.f32	s17, s17
		for (int v = 0; v < numStringsThisBoard; v++)
 800365e:	f04f 0800 	mov.w	r8, #0
 8003662:	e0e7      	b.n	8003834 <changeOversampling+0x200>
		{
			for (int i = 0; i < NUM_EFFECT; i++)
			{
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003664:	eeb8 8a68 	vcvt.f32.u32	s16, s17
 8003668:	eb08 0546 	add.w	r5, r8, r6, lsl #1
 800366c:	00ac      	lsls	r4, r5, #2
 800366e:	eeb0 0a48 	vmov.f32	s0, s16
 8003672:	4879      	ldr	r0, [pc, #484]	; (8003858 <changeOversampling+0x224>)
 8003674:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8003678:	f00c f8a4 	bl	800f7c4 <tHighpass_setSampleRate>
				tHighpass_setSampleRate(&dcBlock2[i][v], osMult);
 800367c:	eeb0 0a48 	vmov.f32	s0, s16
 8003680:	4876      	ldr	r0, [pc, #472]	; (800385c <changeOversampling+0x228>)
 8003682:	4420      	add	r0, r4
 8003684:	f00c f89e 	bl	800f7c4 <tHighpass_setSampleRate>
				tVZFilterLS_setSampleRate(&shelf1[i][v], osMult);
 8003688:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 8003874 <changeOversampling+0x240>
 800368c:	eb0a 0704 	add.w	r7, sl, r4
 8003690:	eeb0 0a48 	vmov.f32	s0, s16
 8003694:	4638      	mov	r0, r7
 8003696:	f00c fd81 	bl	801019c <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
 800369a:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 800369e:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 80036a2:	4638      	mov	r0, r7
 80036a4:	f00c fdd0 	bl	8010248 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&shelf2[i][v], osMult);
 80036a8:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 8003878 <changeOversampling+0x244>
 80036ac:	eb0a 0704 	add.w	r7, sl, r4
 80036b0:	eeb0 0a48 	vmov.f32	s0, s16
 80036b4:	4638      	mov	r0, r7
 80036b6:	f00c ff01 	bl	80104bc <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
 80036ba:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80036be:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 80036c2:	4638      	mov	r0, r7
 80036c4:	f00c ff50 	bl	8010568 <tVZFilterHS_setFreqFast>
				tVZFilterBell_setSampleRate(&bell1[i][v], osMult);
 80036c8:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800387c <changeOversampling+0x248>
 80036cc:	eb0a 0704 	add.w	r7, sl, r4
 80036d0:	eeb0 0a48 	vmov.f32	s0, s16
 80036d4:	4638      	mov	r0, r7
 80036d6:	f00d f8a1 	bl	801081c <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
 80036da:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80036de:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 80036e2:	4638      	mov	r0, r7
 80036e4:	f00d f994 	bl	8010a10 <tVZFilterBell_setFreqFast>
				tCompressor_setSampleRate(&comp[i][v], osMult);
 80036e8:	eeb0 0a48 	vmov.f32	s0, s16
 80036ec:	485c      	ldr	r0, [pc, #368]	; (8003860 <changeOversampling+0x22c>)
 80036ee:	4420      	add	r0, r4
 80036f0:	f00a ff71 	bl	800e5d6 <tCompressor_setSampleRate>
				tCycle_setSampleRate(&mod1[i][v], osMult);
 80036f4:	eeb0 0a48 	vmov.f32	s0, s16
 80036f8:	485a      	ldr	r0, [pc, #360]	; (8003864 <changeOversampling+0x230>)
 80036fa:	4420      	add	r0, r4
 80036fc:	f00e ffb2 	bl	8012664 <tCycle_setSampleRate>
				tCycle_setSampleRate(&mod2[i][v], osMult);
 8003700:	eeb0 0a48 	vmov.f32	s0, s16
 8003704:	4858      	ldr	r0, [pc, #352]	; (8003868 <changeOversampling+0x234>)
 8003706:	4420      	add	r0, r4
 8003708:	f00e ffac 	bl	8012664 <tCycle_setSampleRate>
				tSVF_setSampleRate(&FXlowpass[i][v],osMult);
 800370c:	f8df a170 	ldr.w	sl, [pc, #368]	; 8003880 <changeOversampling+0x24c>
 8003710:	eb0a 0704 	add.w	r7, sl, r4
 8003714:	eeb0 0a48 	vmov.f32	s0, s16
 8003718:	4638      	mov	r0, r7
 800371a:	f00b fff9 	bl	800f710 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
 800371e:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003722:	ed93 0a04 	vldr	s0, [r3, #16]
 8003726:	4638      	mov	r0, r7
 8003728:	f00b ff8c 	bl	800f644 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXhighpass[i][v],osMult);
 800372c:	f8df a154 	ldr.w	sl, [pc, #340]	; 8003884 <changeOversampling+0x250>
 8003730:	eb0a 0704 	add.w	r7, sl, r4
 8003734:	eeb0 0a48 	vmov.f32	s0, s16
 8003738:	4638      	mov	r0, r7
 800373a:	f00b ffe9 	bl	800f710 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
 800373e:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003742:	ed93 0a04 	vldr	s0, [r3, #16]
 8003746:	4638      	mov	r0, r7
 8003748:	f00b ff7c 	bl	800f644 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXbandpass[i][v],osMult);
 800374c:	f8df a138 	ldr.w	sl, [pc, #312]	; 8003888 <changeOversampling+0x254>
 8003750:	eb0a 0704 	add.w	r7, sl, r4
 8003754:	eeb0 0a48 	vmov.f32	s0, s16
 8003758:	4638      	mov	r0, r7
 800375a:	f00b ffd9 	bl	800f710 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
 800375e:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003762:	ed93 0a04 	vldr	s0, [r3, #16]
 8003766:	4638      	mov	r0, r7
 8003768:	f00b ff6c 	bl	800f644 <tSVF_setFreqFast>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], osMult);
 800376c:	f8df a11c 	ldr.w	sl, [pc, #284]	; 800388c <changeOversampling+0x258>
 8003770:	eb0a 0704 	add.w	r7, sl, r4
 8003774:	eeb0 0a48 	vmov.f32	s0, s16
 8003778:	4638      	mov	r0, r7
 800377a:	f00d fde3 	bl	8011344 <tDiodeFilter_setSampleRate>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
 800377e:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003782:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8003786:	4638      	mov	r0, r7
 8003788:	f00d fddc 	bl	8011344 <tDiodeFilter_setSampleRate>
				tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], osMult);
 800378c:	f8df a100 	ldr.w	sl, [pc, #256]	; 8003890 <changeOversampling+0x25c>
 8003790:	eb0a 0704 	add.w	r7, sl, r4
 8003794:	eeb0 0a48 	vmov.f32	s0, s16
 8003798:	4638      	mov	r0, r7
 800379a:	f00d f83f 	bl	801081c <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&FXVZfilterPeak[i][v], FXVZfilterPeak[i][v]->cutoffMIDI);
 800379e:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80037a2:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 80037a6:	4638      	mov	r0, r7
 80037a8:	f00d f932 	bl	8010a10 <tVZFilterBell_setFreqFast>
				tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], osMult);
 80037ac:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003894 <changeOversampling+0x260>
 80037b0:	eb0a 0704 	add.w	r7, sl, r4
 80037b4:	eeb0 0a48 	vmov.f32	s0, s16
 80037b8:	4638      	mov	r0, r7
 80037ba:	f00c fcef 	bl	801019c <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&FXVZfilterLS[i][v], FXVZfilterLS[i][v]->cutoffMIDI);
 80037be:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80037c2:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 80037c6:	4638      	mov	r0, r7
 80037c8:	f00c fd3e 	bl	8010248 <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], osMult);
 80037cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003898 <changeOversampling+0x264>
 80037d0:	eb0a 0704 	add.w	r7, sl, r4
 80037d4:	eeb0 0a48 	vmov.f32	s0, s16
 80037d8:	4638      	mov	r0, r7
 80037da:	f00c fe6f 	bl	80104bc <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&FXVZfilterHS[i][v], FXVZfilterHS[i][v]->cutoffMIDI);
 80037de:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 80037e2:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 80037e6:	4638      	mov	r0, r7
 80037e8:	f00c febe 	bl	8010568 <tVZFilterHS_setFreqFast>
				tVZFilter_setSampleRate(&FXVZfilterBR[i][v], osMult);
 80037ec:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800389c <changeOversampling+0x268>
 80037f0:	eb0a 0704 	add.w	r7, sl, r4
 80037f4:	eeb0 0a48 	vmov.f32	s0, s16
 80037f8:	4638      	mov	r0, r7
 80037fa:	f00c fc17 	bl	801002c <tVZFilter_setSampleRate>
				tVZFilter_setFreq(&FXVZfilterBR[i][v], FXVZfilterBR[i][v]->fc);
 80037fe:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
 8003802:	ed93 0a0a 	vldr	s0, [r3, #40]	; 0x28
 8003806:	4638      	mov	r0, r7
 8003808:	f00c f95a 	bl	800fac0 <tVZFilter_setFreq>
				tLadderFilter_setSampleRate(&FXLadderfilter[i][v], osMult);
 800380c:	4f17      	ldr	r7, [pc, #92]	; (800386c <changeOversampling+0x238>)
 800380e:	443c      	add	r4, r7
 8003810:	eeb0 0a48 	vmov.f32	s0, s16
 8003814:	4620      	mov	r0, r4
 8003816:	f00d ffdf 	bl	80117d8 <tLadderFilter_setSampleRate>
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
 800381a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
 800381e:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8003822:	4620      	mov	r0, r4
 8003824:	f00d ff90 	bl	8011748 <tLadderFilter_setFreqFast>
			for (int i = 0; i < NUM_EFFECT; i++)
 8003828:	3601      	adds	r6, #1
 800382a:	2e03      	cmp	r6, #3
 800382c:	f77f af1a 	ble.w	8003664 <changeOversampling+0x30>
		for (int v = 0; v < numStringsThisBoard; v++)
 8003830:	f108 0801 	add.w	r8, r8, #1
 8003834:	4b0e      	ldr	r3, [pc, #56]	; (8003870 <changeOversampling+0x23c>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	4543      	cmp	r3, r8
 800383a:	dd01      	ble.n	8003840 <changeOversampling+0x20c>
			for (int i = 0; i < NUM_EFFECT; i++)
 800383c:	2600      	movs	r6, #0
 800383e:	e7f4      	b.n	800382a <changeOversampling+0x1f6>
			}
		}
	}
	prevOversample = newOS;
 8003840:	4b03      	ldr	r3, [pc, #12]	; (8003850 <changeOversampling+0x21c>)
 8003842:	f8c3 9000 	str.w	r9, [r3]
}
 8003846:	ecbd 8b02 	vpop	{d8}
 800384a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800384e:	bf00      	nop
 8003850:	2001d670 	.word	0x2001d670
 8003854:	473b8000 	.word	0x473b8000
 8003858:	2001cf78 	.word	0x2001cf78
 800385c:	2001cf98 	.word	0x2001cf98
 8003860:	2001cf58 	.word	0x2001cf58
 8003864:	2001d4c0 	.word	0x2001d4c0
 8003868:	2001d4e0 	.word	0x2001d4e0
 800386c:	2001cd90 	.word	0x2001cd90
 8003870:	20000694 	.word	0x20000694
 8003874:	2001d70c 	.word	0x2001d70c
 8003878:	2001d72c 	.word	0x2001d72c
 800387c:	2001cf38 	.word	0x2001cf38
 8003880:	2001ce90 	.word	0x2001ce90
 8003884:	2001ce70 	.word	0x2001ce70
 8003888:	2001ce30 	.word	0x2001ce30
 800388c:	2001ce50 	.word	0x2001ce50
 8003890:	2001ce10 	.word	0x2001ce10
 8003894:	2001cdf0 	.word	0x2001cdf0
 8003898:	2001cdd0 	.word	0x2001cdd0
 800389c:	2001cdb0 	.word	0x2001cdb0

080038a0 <delayTick>:
{
	param5[v][string] = (value * 1.5f) + 1.0f;
}

float delayTick(float sample, int v, int string)
{
 80038a0:	b538      	push	{r3, r4, r5, lr}
    sample *= param5[v][string];
 80038a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80038a6:	008d      	lsls	r5, r1, #2
 80038a8:	4b17      	ldr	r3, [pc, #92]	; (8003908 <delayTick+0x68>)
 80038aa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80038ae:	edd3 7a00 	vldr	s15, [r3]
 80038b2:	ee67 7a80 	vmul.f32	s15, s15, s0

    sample = sample + (delayFB[v][string] * param2[v][string]);
 80038b6:	4c15      	ldr	r4, [pc, #84]	; (800390c <delayTick+0x6c>)
 80038b8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80038bc:	ed94 0a00 	vldr	s0, [r4]
 80038c0:	4b13      	ldr	r3, [pc, #76]	; (8003910 <delayTick+0x70>)
 80038c2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80038c6:	ed93 7a00 	vldr	s14, [r3]
 80038ca:	ee20 0a07 	vmul.f32	s0, s0, s14

    sample = fast_tanh5(sample);
 80038ce:	ee30 0a27 	vadd.f32	s0, s0, s15
 80038d2:	f00e f9fd 	bl	8011cd0 <fast_tanh5>

    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
 80038d6:	480f      	ldr	r0, [pc, #60]	; (8003914 <delayTick+0x74>)
 80038d8:	4428      	add	r0, r5
 80038da:	f00a fec5 	bl	800e668 <tFeedbackLeveler_tick>

    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[v][string], sample);
 80038de:	480e      	ldr	r0, [pc, #56]	; (8003918 <delayTick+0x78>)
 80038e0:	4428      	add	r0, r5
 80038e2:	f00a fbe3 	bl	800e0ac <tTapeDelay_tick>
 80038e6:	ed84 0a00 	vstr	s0, [r4]
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 80038ea:	480c      	ldr	r0, [pc, #48]	; (800391c <delayTick+0x7c>)
 80038ec:	4428      	add	r0, r5
 80038ee:	f00b fe2e 	bl	800f54e <tSVF_tick>
 80038f2:	ed84 0a00 	vstr	s0, [r4]
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
 80038f6:	480a      	ldr	r0, [pc, #40]	; (8003920 <delayTick+0x80>)
 80038f8:	4428      	add	r0, r5
 80038fa:	f00b fe28 	bl	800f54e <tSVF_tick>
    sample = fast_tanh5(sample);
 80038fe:	f00e f9e7 	bl	8011cd0 <fast_tanh5>
    delayFB[v][string] = sample;
 8003902:	ed84 0a00 	vstr	s0, [r4]
    return sample;
}
 8003906:	bd38      	pop	{r3, r4, r5, pc}
 8003908:	2001d618 	.word	0x2001d618
 800390c:	2001d100 	.word	0x2001d100
 8003910:	2001d5b8 	.word	0x2001d5b8
 8003914:	2001d164 	.word	0x2001d164
 8003918:	2001d8ac 	.word	0x2001d8ac
 800391c:	2001ce90 	.word	0x2001ce90
 8003920:	2001ce70 	.word	0x2001ce70

08003924 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003924:	4a27      	ldr	r2, [pc, #156]	; (80039c4 <SystemInit+0xa0>)
 8003926:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800392a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800392e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003932:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <SystemInit+0xa4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 030f 	and.w	r3, r3, #15
 800393a:	2b06      	cmp	r3, #6
 800393c:	d806      	bhi.n	800394c <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800393e:	4a22      	ldr	r2, [pc, #136]	; (80039c8 <SystemInit+0xa4>)
 8003940:	6813      	ldr	r3, [r2, #0]
 8003942:	f023 030f 	bic.w	r3, r3, #15
 8003946:	f043 0307 	orr.w	r3, r3, #7
 800394a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800394c:	4b1f      	ldr	r3, [pc, #124]	; (80039cc <SystemInit+0xa8>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	f042 0201 	orr.w	r2, r2, #1
 8003954:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003956:	2200      	movs	r2, #0
 8003958:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800395a:	6819      	ldr	r1, [r3, #0]
 800395c:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <SystemInit+0xac>)
 800395e:	400a      	ands	r2, r1
 8003960:	601a      	str	r2, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003962:	4b19      	ldr	r3, [pc, #100]	; (80039c8 <SystemInit+0xa4>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f013 0f08 	tst.w	r3, #8
 800396a:	d006      	beq.n	800397a <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800396c:	4a16      	ldr	r2, [pc, #88]	; (80039c8 <SystemInit+0xa4>)
 800396e:	6813      	ldr	r3, [r2, #0]
 8003970:	f023 030f 	bic.w	r3, r3, #15
 8003974:	f043 0307 	orr.w	r3, r3, #7
 8003978:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800397a:	4b14      	ldr	r3, [pc, #80]	; (80039cc <SystemInit+0xa8>)
 800397c:	2200      	movs	r2, #0
 800397e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003980:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003982:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003984:	4913      	ldr	r1, [pc, #76]	; (80039d4 <SystemInit+0xb0>)
 8003986:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003988:	4913      	ldr	r1, [pc, #76]	; (80039d8 <SystemInit+0xb4>)
 800398a:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800398c:	4913      	ldr	r1, [pc, #76]	; (80039dc <SystemInit+0xb8>)
 800398e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003990:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003992:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003994:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003996:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003998:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800399a:	6819      	ldr	r1, [r3, #0]
 800399c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80039a0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80039a2:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80039a4:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <SystemInit+0xbc>)
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <SystemInit+0xc0>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039b0:	d203      	bcs.n	80039ba <SystemInit+0x96>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80039b2:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <SystemInit+0xc4>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80039ba:	4b0c      	ldr	r3, [pc, #48]	; (80039ec <SystemInit+0xc8>)
 80039bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80039c0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80039c2:	4770      	bx	lr
 80039c4:	e000ed00 	.word	0xe000ed00
 80039c8:	52002000 	.word	0x52002000
 80039cc:	58024400 	.word	0x58024400
 80039d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80039d4:	02020200 	.word	0x02020200
 80039d8:	01ff0000 	.word	0x01ff0000
 80039dc:	01010280 	.word	0x01010280
 80039e0:	5c001000 	.word	0x5c001000
 80039e4:	ffff0000 	.word	0xffff0000
 80039e8:	51008000 	.word	0x51008000
 80039ec:	52004000 	.word	0x52004000

080039f0 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80039f0:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <HAL_InitTick+0x44>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	b90b      	cbnz	r3, 80039fa <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80039f6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80039f8:	4770      	bx	lr
{
 80039fa:	b510      	push	{r4, lr}
 80039fc:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80039fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a06:	4a0c      	ldr	r2, [pc, #48]	; (8003a38 <HAL_InitTick+0x48>)
 8003a08:	6810      	ldr	r0, [r2, #0]
 8003a0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a0e:	f000 f8d1 	bl	8003bb4 <HAL_SYSTICK_Config>
 8003a12:	b968      	cbnz	r0, 8003a30 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a14:	2c0f      	cmp	r4, #15
 8003a16:	d901      	bls.n	8003a1c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8003a18:	2001      	movs	r0, #1
 8003a1a:	e00a      	b.n	8003a32 <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	4621      	mov	r1, r4
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a24:	f000 f882 	bl	8003b2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a28:	4b04      	ldr	r3, [pc, #16]	; (8003a3c <HAL_InitTick+0x4c>)
 8003a2a:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	e000      	b.n	8003a32 <HAL_InitTick+0x42>
      return HAL_ERROR;
 8003a30:	2001      	movs	r0, #1
}
 8003a32:	bd10      	pop	{r4, pc}
 8003a34:	20000b38 	.word	0x20000b38
 8003a38:	20000af0 	.word	0x20000af0
 8003a3c:	20000b3c 	.word	0x20000b3c

08003a40 <HAL_Init>:
{
 8003a40:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a42:	2003      	movs	r0, #3
 8003a44:	f000 f860 	bl	8003b08 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003a48:	f002 ffea 	bl	8006a20 <HAL_RCC_GetSysClockFreq>
 8003a4c:	490f      	ldr	r1, [pc, #60]	; (8003a8c <HAL_Init+0x4c>)
 8003a4e:	698b      	ldr	r3, [r1, #24]
 8003a50:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003a54:	4a0e      	ldr	r2, [pc, #56]	; (8003a90 <HAL_Init+0x50>)
 8003a56:	5cd3      	ldrb	r3, [r2, r3]
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a5e:	698b      	ldr	r3, [r1, #24]
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	5cd3      	ldrb	r3, [r2, r3]
 8003a66:	f003 031f 	and.w	r3, r3, #31
 8003a6a:	fa20 f303 	lsr.w	r3, r0, r3
 8003a6e:	4a09      	ldr	r2, [pc, #36]	; (8003a94 <HAL_Init+0x54>)
 8003a70:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8003a72:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <HAL_Init+0x58>)
 8003a74:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a76:	2000      	movs	r0, #0
 8003a78:	f7ff ffba 	bl	80039f0 <HAL_InitTick>
 8003a7c:	b110      	cbz	r0, 8003a84 <HAL_Init+0x44>
    return HAL_ERROR;
 8003a7e:	2401      	movs	r4, #1
}
 8003a80:	4620      	mov	r0, r4
 8003a82:	bd10      	pop	{r4, pc}
 8003a84:	4604      	mov	r4, r0
  HAL_MspInit();
 8003a86:	f7ff f9c5 	bl	8002e14 <HAL_MspInit>
  return HAL_OK;
 8003a8a:	e7f9      	b.n	8003a80 <HAL_Init+0x40>
 8003a8c:	58024400 	.word	0x58024400
 8003a90:	08019998 	.word	0x08019998
 8003a94:	20000af4 	.word	0x20000af4
 8003a98:	20000af0 	.word	0x20000af0

08003a9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HAL_IncTick+0x10>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	4a03      	ldr	r2, [pc, #12]	; (8003ab0 <HAL_IncTick+0x14>)
 8003aa2:	6811      	ldr	r1, [r2, #0]
 8003aa4:	440b      	add	r3, r1
 8003aa6:	6013      	str	r3, [r2, #0]
}
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20000b38 	.word	0x20000b38
 8003ab0:	2001d940 	.word	0x2001d940

08003ab4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003ab4:	4b01      	ldr	r3, [pc, #4]	; (8003abc <HAL_GetTick+0x8>)
 8003ab6:	6818      	ldr	r0, [r3, #0]
}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	2001d940 	.word	0x2001d940

08003ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ac0:	b538      	push	{r3, r4, r5, lr}
 8003ac2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003ac4:	f7ff fff6 	bl	8003ab4 <HAL_GetTick>
 8003ac8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aca:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8003ace:	d002      	beq.n	8003ad6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <HAL_Delay+0x24>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ad6:	f7ff ffed 	bl	8003ab4 <HAL_GetTick>
 8003ada:	1b40      	subs	r0, r0, r5
 8003adc:	42a0      	cmp	r0, r4
 8003ade:	d3fa      	bcc.n	8003ad6 <HAL_Delay+0x16>
  {
  }
}
 8003ae0:	bd38      	pop	{r3, r4, r5, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000b38 	.word	0x20000b38

08003ae8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8003ae8:	4b01      	ldr	r3, [pc, #4]	; (8003af0 <HAL_GetREVID+0x8>)
 8003aea:	6818      	ldr	r0, [r3, #0]
}
 8003aec:	0c00      	lsrs	r0, r0, #16
 8003aee:	4770      	bx	lr
 8003af0:	5c001000 	.word	0x5c001000

08003af4 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8003af4:	4a03      	ldr	r2, [pc, #12]	; (8003b04 <HAL_SetFMCMemorySwappingConfig+0x10>)
 8003af6:	6813      	ldr	r3, [r2, #0]
 8003af8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003afc:	4303      	orrs	r3, r0
 8003afe:	6013      	str	r3, [r2, #0]
}
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	52004000 	.word	0x52004000

08003b08 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b08:	4906      	ldr	r1, [pc, #24]	; (8003b24 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8003b0a:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b0c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b14:	0200      	lsls	r0, r0, #8
 8003b16:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b1a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003b1c:	4a02      	ldr	r2, [pc, #8]	; (8003b28 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003b1e:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8003b20:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003b22:	4770      	bx	lr
 8003b24:	e000ed00 	.word	0xe000ed00
 8003b28:	05fa0000 	.word	0x05fa0000

08003b2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b2c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b2e:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <HAL_NVIC_SetPriority+0x60>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b36:	f1c3 0c07 	rsb	ip, r3, #7
 8003b3a:	f1bc 0f04 	cmp.w	ip, #4
 8003b3e:	bf28      	it	cs
 8003b40:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b44:	f103 0e04 	add.w	lr, r3, #4
 8003b48:	f1be 0f06 	cmp.w	lr, #6
 8003b4c:	d914      	bls.n	8003b78 <HAL_NVIC_SetPriority+0x4c>
 8003b4e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b50:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8003b54:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003b58:	ea21 010c 	bic.w	r1, r1, ip
 8003b5c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b5e:	fa0e fe03 	lsl.w	lr, lr, r3
 8003b62:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b66:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	db07      	blt.n	8003b7c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6c:	0112      	lsls	r2, r2, #4
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	4b07      	ldr	r3, [pc, #28]	; (8003b90 <HAL_NVIC_SetPriority+0x64>)
 8003b72:	541a      	strb	r2, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003b74:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e7e9      	b.n	8003b50 <HAL_NVIC_SetPriority+0x24>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b7c:	f000 000f 	and.w	r0, r0, #15
 8003b80:	0112      	lsls	r2, r2, #4
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <HAL_NVIC_SetPriority+0x68>)
 8003b86:	541a      	strb	r2, [r3, r0]
 8003b88:	e7f4      	b.n	8003b74 <HAL_NVIC_SetPriority+0x48>
 8003b8a:	bf00      	nop
 8003b8c:	e000ed00 	.word	0xe000ed00
 8003b90:	e000e400 	.word	0xe000e400
 8003b94:	e000ed14 	.word	0xe000ed14

08003b98 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003b98:	2800      	cmp	r0, #0
 8003b9a:	db07      	blt.n	8003bac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b9c:	f000 021f 	and.w	r2, r0, #31
 8003ba0:	0940      	lsrs	r0, r0, #5
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	4093      	lsls	r3, r2
 8003ba6:	4a02      	ldr	r2, [pc, #8]	; (8003bb0 <HAL_NVIC_EnableIRQ+0x18>)
 8003ba8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	e000e100 	.word	0xe000e100

08003bb4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bb4:	3801      	subs	r0, #1
 8003bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003bba:	d20b      	bcs.n	8003bd4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bbc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003bc0:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc2:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <HAL_SYSTICK_Config+0x24>)
 8003bc4:	21f0      	movs	r1, #240	; 0xf0
 8003bc6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bca:	2000      	movs	r0, #0
 8003bcc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bce:	2207      	movs	r2, #7
 8003bd0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bd2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003bd4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003bd6:	4770      	bx	lr
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8003bdc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8003be0:	4b04      	ldr	r3, [pc, #16]	; (8003bf4 <HAL_MPU_Disable+0x18>)
 8003be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003be4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8003bea:	2200      	movs	r2, #0
 8003bec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003bf8:	f040 0001 	orr.w	r0, r0, #1
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <HAL_MPU_Enable+0x1c>)
 8003bfe:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c04:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003c0a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c0e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003c12:	4770      	bx	lr
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003c18:	7842      	ldrb	r2, [r0, #1]
 8003c1a:	4b16      	ldr	r3, [pc, #88]	; (8003c74 <HAL_MPU_ConfigRegion+0x5c>)
 8003c1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8003c20:	7803      	ldrb	r3, [r0, #0]
 8003c22:	b1fb      	cbz	r3, 8003c64 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003c24:	6843      	ldr	r3, [r0, #4]
 8003c26:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <HAL_MPU_ConfigRegion+0x5c>)
 8003c28:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c2c:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c2e:	7ac3      	ldrb	r3, [r0, #11]
 8003c30:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c32:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c36:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003c38:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c3c:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003c3e:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c42:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003c44:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c48:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003c4e:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003c50:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c54:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003c56:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003c5a:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003c5c:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003c5e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8003c62:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <HAL_MPU_ConfigRegion+0x5c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    MPU->RASR = 0x00;
 8003c6c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c78:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c7a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c7c:	6804      	ldr	r4, [r0, #0]
 8003c7e:	4e66      	ldr	r6, [pc, #408]	; (8003e18 <DMA_SetConfig+0x1a0>)
 8003c80:	4d66      	ldr	r5, [pc, #408]	; (8003e1c <DMA_SetConfig+0x1a4>)
 8003c82:	42ac      	cmp	r4, r5
 8003c84:	bf18      	it	ne
 8003c86:	42b4      	cmpne	r4, r6
 8003c88:	d042      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003c8a:	3518      	adds	r5, #24
 8003c8c:	42ac      	cmp	r4, r5
 8003c8e:	d03f      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003c90:	3518      	adds	r5, #24
 8003c92:	42ac      	cmp	r4, r5
 8003c94:	d03c      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003c96:	3518      	adds	r5, #24
 8003c98:	42ac      	cmp	r4, r5
 8003c9a:	d039      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003c9c:	3518      	adds	r5, #24
 8003c9e:	42ac      	cmp	r4, r5
 8003ca0:	d036      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003ca2:	3518      	adds	r5, #24
 8003ca4:	42ac      	cmp	r4, r5
 8003ca6:	d033      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003ca8:	3518      	adds	r5, #24
 8003caa:	42ac      	cmp	r4, r5
 8003cac:	d030      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003cae:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8003cb2:	42ac      	cmp	r4, r5
 8003cb4:	d02c      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003cb6:	3518      	adds	r5, #24
 8003cb8:	42ac      	cmp	r4, r5
 8003cba:	d029      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003cbc:	3518      	adds	r5, #24
 8003cbe:	42ac      	cmp	r4, r5
 8003cc0:	d026      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003cc2:	3518      	adds	r5, #24
 8003cc4:	42ac      	cmp	r4, r5
 8003cc6:	d023      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003cc8:	3518      	adds	r5, #24
 8003cca:	42ac      	cmp	r4, r5
 8003ccc:	d020      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003cce:	3518      	adds	r5, #24
 8003cd0:	42ac      	cmp	r4, r5
 8003cd2:	d01d      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003cd4:	3518      	adds	r5, #24
 8003cd6:	42ac      	cmp	r4, r5
 8003cd8:	d01a      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003cda:	3518      	adds	r5, #24
 8003cdc:	42ac      	cmp	r4, r5
 8003cde:	d017      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003ce0:	4d4f      	ldr	r5, [pc, #316]	; (8003e20 <DMA_SetConfig+0x1a8>)
 8003ce2:	42ac      	cmp	r4, r5
 8003ce4:	d014      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003ce6:	3514      	adds	r5, #20
 8003ce8:	42ac      	cmp	r4, r5
 8003cea:	d011      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003cec:	3514      	adds	r5, #20
 8003cee:	42ac      	cmp	r4, r5
 8003cf0:	d00e      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003cf2:	3514      	adds	r5, #20
 8003cf4:	42ac      	cmp	r4, r5
 8003cf6:	d00b      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003cf8:	3514      	adds	r5, #20
 8003cfa:	42ac      	cmp	r4, r5
 8003cfc:	d008      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003cfe:	3514      	adds	r5, #20
 8003d00:	42ac      	cmp	r4, r5
 8003d02:	d005      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003d04:	3514      	adds	r5, #20
 8003d06:	42ac      	cmp	r4, r5
 8003d08:	d002      	beq.n	8003d10 <DMA_SetConfig+0x98>
 8003d0a:	3514      	adds	r5, #20
 8003d0c:	42ac      	cmp	r4, r5
 8003d0e:	d107      	bne.n	8003d20 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d10:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8003d12:	6e85      	ldr	r5, [r0, #104]	; 0x68
 8003d14:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003d16:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8003d18:	b114      	cbz	r4, 8003d20 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d1a:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8003d1c:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8003d1e:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d20:	6804      	ldr	r4, [r0, #0]
 8003d22:	4e3d      	ldr	r6, [pc, #244]	; (8003e18 <DMA_SetConfig+0x1a0>)
 8003d24:	4d3d      	ldr	r5, [pc, #244]	; (8003e1c <DMA_SetConfig+0x1a4>)
 8003d26:	42ac      	cmp	r4, r5
 8003d28:	bf18      	it	ne
 8003d2a:	42b4      	cmpne	r4, r6
 8003d2c:	d052      	beq.n	8003dd4 <DMA_SetConfig+0x15c>
 8003d2e:	3518      	adds	r5, #24
 8003d30:	42ac      	cmp	r4, r5
 8003d32:	d04f      	beq.n	8003dd4 <DMA_SetConfig+0x15c>
 8003d34:	3518      	adds	r5, #24
 8003d36:	42ac      	cmp	r4, r5
 8003d38:	d04c      	beq.n	8003dd4 <DMA_SetConfig+0x15c>
 8003d3a:	3518      	adds	r5, #24
 8003d3c:	42ac      	cmp	r4, r5
 8003d3e:	d049      	beq.n	8003dd4 <DMA_SetConfig+0x15c>
 8003d40:	3518      	adds	r5, #24
 8003d42:	42ac      	cmp	r4, r5
 8003d44:	d046      	beq.n	8003dd4 <DMA_SetConfig+0x15c>
 8003d46:	3518      	adds	r5, #24
 8003d48:	42ac      	cmp	r4, r5
 8003d4a:	d043      	beq.n	8003dd4 <DMA_SetConfig+0x15c>
 8003d4c:	3518      	adds	r5, #24
 8003d4e:	42ac      	cmp	r4, r5
 8003d50:	d040      	beq.n	8003dd4 <DMA_SetConfig+0x15c>
 8003d52:	f505 7556 	add.w	r5, r5, #856	; 0x358
 8003d56:	42ac      	cmp	r4, r5
 8003d58:	d03c      	beq.n	8003dd4 <DMA_SetConfig+0x15c>
 8003d5a:	3518      	adds	r5, #24
 8003d5c:	42ac      	cmp	r4, r5
 8003d5e:	d039      	beq.n	8003dd4 <DMA_SetConfig+0x15c>
 8003d60:	3518      	adds	r5, #24
 8003d62:	42ac      	cmp	r4, r5
 8003d64:	d036      	beq.n	8003dd4 <DMA_SetConfig+0x15c>
 8003d66:	3518      	adds	r5, #24
 8003d68:	42ac      	cmp	r4, r5
 8003d6a:	d033      	beq.n	8003dd4 <DMA_SetConfig+0x15c>
 8003d6c:	3518      	adds	r5, #24
 8003d6e:	42ac      	cmp	r4, r5
 8003d70:	d030      	beq.n	8003dd4 <DMA_SetConfig+0x15c>
 8003d72:	3518      	adds	r5, #24
 8003d74:	42ac      	cmp	r4, r5
 8003d76:	d02d      	beq.n	8003dd4 <DMA_SetConfig+0x15c>
 8003d78:	3518      	adds	r5, #24
 8003d7a:	42ac      	cmp	r4, r5
 8003d7c:	d02a      	beq.n	8003dd4 <DMA_SetConfig+0x15c>
 8003d7e:	3518      	adds	r5, #24
 8003d80:	42ac      	cmp	r4, r5
 8003d82:	d027      	beq.n	8003dd4 <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003d84:	4e26      	ldr	r6, [pc, #152]	; (8003e20 <DMA_SetConfig+0x1a8>)
 8003d86:	4d27      	ldr	r5, [pc, #156]	; (8003e24 <DMA_SetConfig+0x1ac>)
 8003d88:	42ac      	cmp	r4, r5
 8003d8a:	bf18      	it	ne
 8003d8c:	42b4      	cmpne	r4, r6
 8003d8e:	d011      	beq.n	8003db4 <DMA_SetConfig+0x13c>
 8003d90:	4d25      	ldr	r5, [pc, #148]	; (8003e28 <DMA_SetConfig+0x1b0>)
 8003d92:	42ac      	cmp	r4, r5
 8003d94:	d00e      	beq.n	8003db4 <DMA_SetConfig+0x13c>
 8003d96:	3514      	adds	r5, #20
 8003d98:	42ac      	cmp	r4, r5
 8003d9a:	d00b      	beq.n	8003db4 <DMA_SetConfig+0x13c>
 8003d9c:	3514      	adds	r5, #20
 8003d9e:	42ac      	cmp	r4, r5
 8003da0:	d008      	beq.n	8003db4 <DMA_SetConfig+0x13c>
 8003da2:	3514      	adds	r5, #20
 8003da4:	42ac      	cmp	r4, r5
 8003da6:	d005      	beq.n	8003db4 <DMA_SetConfig+0x13c>
 8003da8:	3514      	adds	r5, #20
 8003daa:	42ac      	cmp	r4, r5
 8003dac:	d002      	beq.n	8003db4 <DMA_SetConfig+0x13c>
 8003dae:	3514      	adds	r5, #20
 8003db0:	42ac      	cmp	r4, r5
 8003db2:	d124      	bne.n	8003dfe <DMA_SetConfig+0x186>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003db4:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8003db6:	f004 051f 	and.w	r5, r4, #31
 8003dba:	2401      	movs	r4, #1
 8003dbc:	40ac      	lsls	r4, r5
 8003dbe:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003dc0:	6804      	ldr	r4, [r0, #0]
 8003dc2:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dc4:	6883      	ldr	r3, [r0, #8]
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d020      	beq.n	8003e0c <DMA_SetConfig+0x194>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003dca:	6803      	ldr	r3, [r0, #0]
 8003dcc:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003dce:	6803      	ldr	r3, [r0, #0]
 8003dd0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003dd2:	e014      	b.n	8003dfe <DMA_SetConfig+0x186>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003dd4:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8003dd6:	f004 0c1f 	and.w	ip, r4, #31
 8003dda:	243f      	movs	r4, #63	; 0x3f
 8003ddc:	fa04 f40c 	lsl.w	r4, r4, ip
 8003de0:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003de2:	6805      	ldr	r5, [r0, #0]
 8003de4:	682c      	ldr	r4, [r5, #0]
 8003de6:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8003dea:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003dec:	6804      	ldr	r4, [r0, #0]
 8003dee:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003df0:	6883      	ldr	r3, [r0, #8]
 8003df2:	2b40      	cmp	r3, #64	; 0x40
 8003df4:	d005      	beq.n	8003e02 <DMA_SetConfig+0x18a>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003df6:	6803      	ldr	r3, [r0, #0]
 8003df8:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003dfa:	6803      	ldr	r3, [r0, #0]
 8003dfc:	60da      	str	r2, [r3, #12]
}
 8003dfe:	bcf0      	pop	{r4, r5, r6, r7}
 8003e00:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003e02:	6803      	ldr	r3, [r0, #0]
 8003e04:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003e06:	6803      	ldr	r3, [r0, #0]
 8003e08:	60d9      	str	r1, [r3, #12]
 8003e0a:	e7f8      	b.n	8003dfe <DMA_SetConfig+0x186>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003e0c:	6803      	ldr	r3, [r0, #0]
 8003e0e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003e10:	6803      	ldr	r3, [r0, #0]
 8003e12:	60d9      	str	r1, [r3, #12]
 8003e14:	e7f3      	b.n	8003dfe <DMA_SetConfig+0x186>
 8003e16:	bf00      	nop
 8003e18:	40020010 	.word	0x40020010
 8003e1c:	40020028 	.word	0x40020028
 8003e20:	58025408 	.word	0x58025408
 8003e24:	5802541c 	.word	0x5802541c
 8003e28:	58025430 	.word	0x58025430

08003e2c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e2c:	6803      	ldr	r3, [r0, #0]
 8003e2e:	4927      	ldr	r1, [pc, #156]	; (8003ecc <DMA_CalcBaseAndBitshift+0xa0>)
 8003e30:	4a27      	ldr	r2, [pc, #156]	; (8003ed0 <DMA_CalcBaseAndBitshift+0xa4>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	bf18      	it	ne
 8003e36:	428b      	cmpne	r3, r1
 8003e38:	d02f      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
 8003e3a:	3218      	adds	r2, #24
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d02c      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
 8003e40:	3218      	adds	r2, #24
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d029      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
 8003e46:	3218      	adds	r2, #24
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d026      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
 8003e4c:	3218      	adds	r2, #24
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d023      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
 8003e52:	3218      	adds	r2, #24
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d020      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
 8003e58:	3218      	adds	r2, #24
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d01d      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
 8003e5e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d019      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
 8003e66:	3218      	adds	r2, #24
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d016      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
 8003e6c:	3218      	adds	r2, #24
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
 8003e72:	3218      	adds	r2, #24
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d010      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
 8003e78:	3218      	adds	r2, #24
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00d      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
 8003e7e:	3218      	adds	r2, #24
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d00a      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
 8003e84:	3218      	adds	r2, #24
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d007      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
 8003e8a:	3218      	adds	r2, #24
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d004      	beq.n	8003e9a <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e90:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e94:	6583      	str	r3, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8003e96:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003e98:	4770      	bx	lr
{
 8003e9a:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e9c:	b2d9      	uxtb	r1, r3
 8003e9e:	3910      	subs	r1, #16
 8003ea0:	4a0c      	ldr	r2, [pc, #48]	; (8003ed4 <DMA_CalcBaseAndBitshift+0xa8>)
 8003ea2:	fba2 4201 	umull	r4, r2, r2, r1
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ea6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8003eaa:	4c0b      	ldr	r4, [pc, #44]	; (8003ed8 <DMA_CalcBaseAndBitshift+0xac>)
 8003eac:	5ca2      	ldrb	r2, [r4, r2]
 8003eae:	65c2      	str	r2, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 8003eb0:	295f      	cmp	r1, #95	; 0x5f
 8003eb2:	d907      	bls.n	8003ec4 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003eb4:	4a09      	ldr	r2, [pc, #36]	; (8003edc <DMA_CalcBaseAndBitshift+0xb0>)
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	3204      	adds	r2, #4
 8003eba:	6582      	str	r2, [r0, #88]	; 0x58
}
 8003ebc:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8003ebe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ec2:	4770      	bx	lr
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ec4:	4a05      	ldr	r2, [pc, #20]	; (8003edc <DMA_CalcBaseAndBitshift+0xb0>)
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	6582      	str	r2, [r0, #88]	; 0x58
 8003eca:	e7f7      	b.n	8003ebc <DMA_CalcBaseAndBitshift+0x90>
 8003ecc:	40020010 	.word	0x40020010
 8003ed0:	40020028 	.word	0x40020028
 8003ed4:	aaaaaaab 	.word	0xaaaaaaab
 8003ed8:	080199a8 	.word	0x080199a8
 8003edc:	fffffc00 	.word	0xfffffc00

08003ee0 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ee0:	6983      	ldr	r3, [r0, #24]
 8003ee2:	b99b      	cbnz	r3, 8003f0c <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ee4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d00a      	beq.n	8003f00 <DMA_CheckFifoParam+0x20>
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d002      	beq.n	8003ef4 <DMA_CheckFifoParam+0x14>
 8003eee:	b10b      	cbz	r3, 8003ef4 <DMA_CheckFifoParam+0x14>
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003ef6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003efa:	d12a      	bne.n	8003f52 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 8003efc:	2000      	movs	r0, #0
 8003efe:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f00:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003f02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f06:	d026      	beq.n	8003f56 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2000      	movs	r0, #0
 8003f0a:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f10:	d00a      	beq.n	8003f28 <DMA_CheckFifoParam+0x48>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f12:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d926      	bls.n	8003f66 <DMA_CheckFifoParam+0x86>
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d126      	bne.n	8003f6a <DMA_CheckFifoParam+0x8a>
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f1c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003f1e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003f22:	d124      	bne.n	8003f6e <DMA_CheckFifoParam+0x8e>
  HAL_StatusTypeDef status = HAL_OK;
 8003f24:	2000      	movs	r0, #0
 8003f26:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8003f28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d803      	bhi.n	8003f36 <DMA_CheckFifoParam+0x56>
 8003f2e:	e8df f003 	tbb	[pc, r3]
 8003f32:	0414      	.short	0x0414
 8003f34:	0a14      	.short	0x0a14
 8003f36:	2000      	movs	r0, #0
 8003f38:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f3a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003f3c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8003f40:	d10d      	bne.n	8003f5e <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8003f42:	2000      	movs	r0, #0
 8003f44:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f46:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003f48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f4c:	d009      	beq.n	8003f62 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2000      	movs	r0, #0
 8003f50:	4770      	bx	lr
          status = HAL_ERROR;
 8003f52:	2001      	movs	r0, #1
 8003f54:	4770      	bx	lr
          status = HAL_ERROR;
 8003f56:	2001      	movs	r0, #1
 8003f58:	4770      	bx	lr
        status = HAL_ERROR;
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	4770      	bx	lr
          status = HAL_ERROR;
 8003f5e:	2001      	movs	r0, #1
 8003f60:	4770      	bx	lr
          status = HAL_ERROR;
 8003f62:	2001      	movs	r0, #1
 8003f64:	4770      	bx	lr
        status = HAL_ERROR;
 8003f66:	2001      	movs	r0, #1
 8003f68:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	4770      	bx	lr
        {
          status = HAL_ERROR;
 8003f6e:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8003f70:	4770      	bx	lr
	...

08003f74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f74:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f76:	4921      	ldr	r1, [pc, #132]	; (8003ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003f78:	4a21      	ldr	r2, [pc, #132]	; (8004000 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	bf18      	it	ne
 8003f7e:	428b      	cmpne	r3, r1
 8003f80:	d027      	beq.n	8003fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f82:	3214      	adds	r2, #20
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d024      	beq.n	8003fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f88:	3214      	adds	r2, #20
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d021      	beq.n	8003fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f8e:	3214      	adds	r2, #20
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d01e      	beq.n	8003fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f94:	3214      	adds	r2, #20
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d01b      	beq.n	8003fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f9a:	3214      	adds	r2, #20
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d018      	beq.n	8003fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fa0:	3214      	adds	r2, #20
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d015      	beq.n	8003fd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	3a10      	subs	r2, #16
 8003faa:	4916      	ldr	r1, [pc, #88]	; (8004004 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8003fac:	fba1 1202 	umull	r1, r2, r1, r2
 8003fb0:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003fb2:	4915      	ldr	r1, [pc, #84]	; (8004008 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8003fb4:	4419      	add	r1, r3
 8003fb6:	29a8      	cmp	r1, #168	; 0xa8
 8003fb8:	d91e      	bls.n	8003ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003fba:	4b14      	ldr	r3, [pc, #80]	; (800400c <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8003fbc:	4413      	add	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003fc2:	4b13      	ldr	r3, [pc, #76]	; (8004010 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8003fc4:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fc6:	f002 021f 	and.w	r2, r2, #31
 8003fca:	2301      	movs	r3, #1
 8003fcc:	4093      	lsls	r3, r2
 8003fce:	6683      	str	r3, [r0, #104]	; 0x68
  }
}
 8003fd0:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	3b08      	subs	r3, #8
 8003fd6:	4a0f      	ldr	r2, [pc, #60]	; (8004014 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003fdc:	4a0e      	ldr	r2, [pc, #56]	; (8004018 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8003fde:	eb02 1213 	add.w	r2, r2, r3, lsr #4
 8003fe2:	0092      	lsls	r2, r2, #2
 8003fe4:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003fe6:	4a0d      	ldr	r2, [pc, #52]	; (800401c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8003fe8:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fea:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8003fee:	2201      	movs	r2, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	6683      	str	r3, [r0, #104]	; 0x68
 8003ff6:	4770      	bx	lr
      stream_number += 8U;
 8003ff8:	3208      	adds	r2, #8
 8003ffa:	e7de      	b.n	8003fba <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8003ffc:	58025408 	.word	0x58025408
 8004000:	5802541c 	.word	0x5802541c
 8004004:	aaaaaaab 	.word	0xaaaaaaab
 8004008:	bffdfbf0 	.word	0xbffdfbf0
 800400c:	10008200 	.word	0x10008200
 8004010:	40020880 	.word	0x40020880
 8004014:	cccccccd 	.word	0xcccccccd
 8004018:	16009600 	.word	0x16009600
 800401c:	58025880 	.word	0x58025880

08004020 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004020:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004022:	1e4a      	subs	r2, r1, #1
 8004024:	2a07      	cmp	r2, #7
 8004026:	d82b      	bhi.n	8004080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x60>
{
 8004028:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800402a:	6803      	ldr	r3, [r0, #0]
 800402c:	4d15      	ldr	r5, [pc, #84]	; (8004084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 800402e:	4c16      	ldr	r4, [pc, #88]	; (8004088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8004030:	42a3      	cmp	r3, r4
 8004032:	bf18      	it	ne
 8004034:	42ab      	cmpne	r3, r5
 8004036:	d018      	beq.n	800406a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004038:	3414      	adds	r4, #20
 800403a:	42a3      	cmp	r3, r4
 800403c:	d015      	beq.n	800406a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800403e:	3414      	adds	r4, #20
 8004040:	42a3      	cmp	r3, r4
 8004042:	d012      	beq.n	800406a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004044:	3414      	adds	r4, #20
 8004046:	42a3      	cmp	r3, r4
 8004048:	d00f      	beq.n	800406a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 800404a:	3414      	adds	r4, #20
 800404c:	42a3      	cmp	r3, r4
 800404e:	d00c      	beq.n	800406a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004050:	3414      	adds	r4, #20
 8004052:	42a3      	cmp	r3, r4
 8004054:	d009      	beq.n	800406a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8004056:	3414      	adds	r4, #20
 8004058:	42a3      	cmp	r3, r4
 800405a:	d006      	beq.n	800406a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 800405e:	440b      	add	r3, r1
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8004066:	6703      	str	r3, [r0, #112]	; 0x70
 8004068:	e005      	b.n	8004076 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800406a:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 800406c:	440b      	add	r3, r1
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004072:	4b09      	ldr	r3, [pc, #36]	; (8004098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8004074:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004076:	2301      	movs	r3, #1
 8004078:	4093      	lsls	r3, r2
 800407a:	6743      	str	r3, [r0, #116]	; 0x74
  }
}
 800407c:	bc30      	pop	{r4, r5}
 800407e:	4770      	bx	lr
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	58025408 	.word	0x58025408
 8004088:	5802541c 	.word	0x5802541c
 800408c:	1000823f 	.word	0x1000823f
 8004090:	40020940 	.word	0x40020940
 8004094:	1600963f 	.word	0x1600963f
 8004098:	58025940 	.word	0x58025940

0800409c <HAL_DMA_Init>:
{
 800409c:	b570      	push	{r4, r5, r6, lr}
 800409e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80040a0:	f7ff fd08 	bl	8003ab4 <HAL_GetTick>
  if(hdma == NULL)
 80040a4:	2c00      	cmp	r4, #0
 80040a6:	f000 81b6 	beq.w	8004416 <HAL_DMA_Init+0x37a>
 80040aa:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	4953      	ldr	r1, [pc, #332]	; (80041fc <HAL_DMA_Init+0x160>)
 80040b0:	4a53      	ldr	r2, [pc, #332]	; (8004200 <HAL_DMA_Init+0x164>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	bf18      	it	ne
 80040b6:	428b      	cmpne	r3, r1
 80040b8:	bf0c      	ite	eq
 80040ba:	2101      	moveq	r1, #1
 80040bc:	2100      	movne	r1, #0
 80040be:	d050      	beq.n	8004162 <HAL_DMA_Init+0xc6>
 80040c0:	3218      	adds	r2, #24
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d04d      	beq.n	8004162 <HAL_DMA_Init+0xc6>
 80040c6:	3218      	adds	r2, #24
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d04a      	beq.n	8004162 <HAL_DMA_Init+0xc6>
 80040cc:	3218      	adds	r2, #24
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d047      	beq.n	8004162 <HAL_DMA_Init+0xc6>
 80040d2:	3218      	adds	r2, #24
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d044      	beq.n	8004162 <HAL_DMA_Init+0xc6>
 80040d8:	3218      	adds	r2, #24
 80040da:	4293      	cmp	r3, r2
 80040dc:	d041      	beq.n	8004162 <HAL_DMA_Init+0xc6>
 80040de:	3218      	adds	r2, #24
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d03e      	beq.n	8004162 <HAL_DMA_Init+0xc6>
 80040e4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d03a      	beq.n	8004162 <HAL_DMA_Init+0xc6>
 80040ec:	3218      	adds	r2, #24
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d037      	beq.n	8004162 <HAL_DMA_Init+0xc6>
 80040f2:	3218      	adds	r2, #24
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d034      	beq.n	8004162 <HAL_DMA_Init+0xc6>
 80040f8:	3218      	adds	r2, #24
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d031      	beq.n	8004162 <HAL_DMA_Init+0xc6>
 80040fe:	3218      	adds	r2, #24
 8004100:	4293      	cmp	r3, r2
 8004102:	d02e      	beq.n	8004162 <HAL_DMA_Init+0xc6>
 8004104:	3218      	adds	r2, #24
 8004106:	4293      	cmp	r3, r2
 8004108:	d02b      	beq.n	8004162 <HAL_DMA_Init+0xc6>
 800410a:	3218      	adds	r2, #24
 800410c:	4293      	cmp	r3, r2
 800410e:	d028      	beq.n	8004162 <HAL_DMA_Init+0xc6>
 8004110:	3218      	adds	r2, #24
 8004112:	4293      	cmp	r3, r2
 8004114:	d025      	beq.n	8004162 <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004116:	493b      	ldr	r1, [pc, #236]	; (8004204 <HAL_DMA_Init+0x168>)
 8004118:	4a3b      	ldr	r2, [pc, #236]	; (8004208 <HAL_DMA_Init+0x16c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	bf18      	it	ne
 800411e:	428b      	cmpne	r3, r1
 8004120:	f000 8131 	beq.w	8004386 <HAL_DMA_Init+0x2ea>
 8004124:	4a39      	ldr	r2, [pc, #228]	; (800420c <HAL_DMA_Init+0x170>)
 8004126:	4293      	cmp	r3, r2
 8004128:	f000 812d 	beq.w	8004386 <HAL_DMA_Init+0x2ea>
 800412c:	3214      	adds	r2, #20
 800412e:	4293      	cmp	r3, r2
 8004130:	f000 8129 	beq.w	8004386 <HAL_DMA_Init+0x2ea>
 8004134:	3214      	adds	r2, #20
 8004136:	4293      	cmp	r3, r2
 8004138:	f000 8125 	beq.w	8004386 <HAL_DMA_Init+0x2ea>
 800413c:	3214      	adds	r2, #20
 800413e:	4293      	cmp	r3, r2
 8004140:	f000 8121 	beq.w	8004386 <HAL_DMA_Init+0x2ea>
 8004144:	3214      	adds	r2, #20
 8004146:	4293      	cmp	r3, r2
 8004148:	f000 811d 	beq.w	8004386 <HAL_DMA_Init+0x2ea>
 800414c:	3214      	adds	r2, #20
 800414e:	4293      	cmp	r3, r2
 8004150:	f000 8119 	beq.w	8004386 <HAL_DMA_Init+0x2ea>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004154:	2340      	movs	r3, #64	; 0x40
 8004156:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004158:	2303      	movs	r3, #3
 800415a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 800415e:	2001      	movs	r0, #1
 8004160:	e04a      	b.n	80041f8 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004162:	2202      	movs	r2, #2
 8004164:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004168:	2200      	movs	r2, #0
 800416a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 800416e:	bb79      	cbnz	r1, 80041d0 <HAL_DMA_Init+0x134>
 8004170:	4a27      	ldr	r2, [pc, #156]	; (8004210 <HAL_DMA_Init+0x174>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d02c      	beq.n	80041d0 <HAL_DMA_Init+0x134>
 8004176:	3218      	adds	r2, #24
 8004178:	4293      	cmp	r3, r2
 800417a:	d029      	beq.n	80041d0 <HAL_DMA_Init+0x134>
 800417c:	3218      	adds	r2, #24
 800417e:	4293      	cmp	r3, r2
 8004180:	d026      	beq.n	80041d0 <HAL_DMA_Init+0x134>
 8004182:	3218      	adds	r2, #24
 8004184:	4293      	cmp	r3, r2
 8004186:	d023      	beq.n	80041d0 <HAL_DMA_Init+0x134>
 8004188:	3218      	adds	r2, #24
 800418a:	4293      	cmp	r3, r2
 800418c:	d020      	beq.n	80041d0 <HAL_DMA_Init+0x134>
 800418e:	3218      	adds	r2, #24
 8004190:	4293      	cmp	r3, r2
 8004192:	d01d      	beq.n	80041d0 <HAL_DMA_Init+0x134>
 8004194:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004198:	4293      	cmp	r3, r2
 800419a:	d019      	beq.n	80041d0 <HAL_DMA_Init+0x134>
 800419c:	3218      	adds	r2, #24
 800419e:	4293      	cmp	r3, r2
 80041a0:	d016      	beq.n	80041d0 <HAL_DMA_Init+0x134>
 80041a2:	3218      	adds	r2, #24
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d013      	beq.n	80041d0 <HAL_DMA_Init+0x134>
 80041a8:	3218      	adds	r2, #24
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d010      	beq.n	80041d0 <HAL_DMA_Init+0x134>
 80041ae:	3218      	adds	r2, #24
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00d      	beq.n	80041d0 <HAL_DMA_Init+0x134>
 80041b4:	3218      	adds	r2, #24
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d00a      	beq.n	80041d0 <HAL_DMA_Init+0x134>
 80041ba:	3218      	adds	r2, #24
 80041bc:	4293      	cmp	r3, r2
 80041be:	d007      	beq.n	80041d0 <HAL_DMA_Init+0x134>
 80041c0:	3218      	adds	r2, #24
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d004      	beq.n	80041d0 <HAL_DMA_Init+0x134>
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	f022 0201 	bic.w	r2, r2, #1
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e003      	b.n	80041d8 <HAL_DMA_Init+0x13c>
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	f022 0201 	bic.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	f012 0f01 	tst.w	r2, #1
 80041e0:	d018      	beq.n	8004214 <HAL_DMA_Init+0x178>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041e2:	f7ff fc67 	bl	8003ab4 <HAL_GetTick>
 80041e6:	1b43      	subs	r3, r0, r5
 80041e8:	2b05      	cmp	r3, #5
 80041ea:	d9f5      	bls.n	80041d8 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041ec:	2320      	movs	r3, #32
 80041ee:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80041f0:	2303      	movs	r3, #3
 80041f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 80041f6:	2001      	movs	r0, #1
}
 80041f8:	bd70      	pop	{r4, r5, r6, pc}
 80041fa:	bf00      	nop
 80041fc:	40020010 	.word	0x40020010
 8004200:	40020028 	.word	0x40020028
 8004204:	58025408 	.word	0x58025408
 8004208:	5802541c 	.word	0x5802541c
 800420c:	58025430 	.word	0x58025430
 8004210:	40020040 	.word	0x40020040
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004214:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004216:	4981      	ldr	r1, [pc, #516]	; (800441c <HAL_DMA_Init+0x380>)
 8004218:	4011      	ands	r1, r2
    registerValue |=  hdma->Init.Direction           |
 800421a:	68a2      	ldr	r2, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800421c:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 800421e:	4302      	orrs	r2, r0
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004220:	6920      	ldr	r0, [r4, #16]
 8004222:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004224:	6960      	ldr	r0, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004226:	4302      	orrs	r2, r0
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004228:	69a0      	ldr	r0, [r4, #24]
 800422a:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 800422c:	69e0      	ldr	r0, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800422e:	4302      	orrs	r2, r0
            hdma->Init.Mode                | hdma->Init.Priority;
 8004230:	6a20      	ldr	r0, [r4, #32]
 8004232:	4302      	orrs	r2, r0
    registerValue |=  hdma->Init.Direction           |
 8004234:	430a      	orrs	r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004236:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004238:	2904      	cmp	r1, #4
 800423a:	f000 8099 	beq.w	8004370 <HAL_DMA_Init+0x2d4>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800423e:	4978      	ldr	r1, [pc, #480]	; (8004420 <HAL_DMA_Init+0x384>)
 8004240:	6808      	ldr	r0, [r1, #0]
 8004242:	4978      	ldr	r1, [pc, #480]	; (8004424 <HAL_DMA_Init+0x388>)
 8004244:	4001      	ands	r1, r0
 8004246:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800424a:	d311      	bcc.n	8004270 <HAL_DMA_Init+0x1d4>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800424c:	6861      	ldr	r1, [r4, #4]
 800424e:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 8004252:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 8004256:	2803      	cmp	r0, #3
 8004258:	bf88      	it	hi
 800425a:	2d05      	cmphi	r5, #5
 800425c:	d906      	bls.n	800426c <HAL_DMA_Init+0x1d0>
 800425e:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 8004262:	2801      	cmp	r0, #1
 8004264:	d902      	bls.n	800426c <HAL_DMA_Init+0x1d0>
 8004266:	394f      	subs	r1, #79	; 0x4f
 8004268:	2903      	cmp	r1, #3
 800426a:	d801      	bhi.n	8004270 <HAL_DMA_Init+0x1d4>
        registerValue |= DMA_SxCR_TRBUFF;
 800426c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004270:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004272:	6826      	ldr	r6, [r4, #0]
 8004274:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004276:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 800427a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800427c:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800427e:	2b04      	cmp	r3, #4
 8004280:	d108      	bne.n	8004294 <HAL_DMA_Init+0x1f8>
      registerValue |= hdma->Init.FIFOThreshold;
 8004282:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004284:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004286:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004288:	b123      	cbz	r3, 8004294 <HAL_DMA_Init+0x1f8>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800428a:	4620      	mov	r0, r4
 800428c:	f7ff fe28 	bl	8003ee0 <DMA_CheckFifoParam>
 8004290:	2800      	cmp	r0, #0
 8004292:	d172      	bne.n	800437a <HAL_DMA_Init+0x2de>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004294:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004296:	4620      	mov	r0, r4
 8004298:	f7ff fdc8 	bl	8003e2c <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800429c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800429e:	f003 021f 	and.w	r2, r3, #31
 80042a2:	233f      	movs	r3, #63	; 0x3f
 80042a4:	4093      	lsls	r3, r2
 80042a6:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	495f      	ldr	r1, [pc, #380]	; (8004428 <HAL_DMA_Init+0x38c>)
 80042ac:	4a5f      	ldr	r2, [pc, #380]	; (800442c <HAL_DMA_Init+0x390>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	bf18      	it	ne
 80042b2:	428b      	cmpne	r3, r1
 80042b4:	d042      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 80042b6:	3218      	adds	r2, #24
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d03f      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 80042bc:	3218      	adds	r2, #24
 80042be:	4293      	cmp	r3, r2
 80042c0:	d03c      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 80042c2:	3218      	adds	r2, #24
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d039      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 80042c8:	3218      	adds	r2, #24
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d036      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 80042ce:	3218      	adds	r2, #24
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d033      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 80042d4:	3218      	adds	r2, #24
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d030      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 80042da:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80042de:	4293      	cmp	r3, r2
 80042e0:	d02c      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 80042e2:	3218      	adds	r2, #24
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d029      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 80042e8:	3218      	adds	r2, #24
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d026      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 80042ee:	3218      	adds	r2, #24
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d023      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 80042f4:	3218      	adds	r2, #24
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d020      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 80042fa:	3218      	adds	r2, #24
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d01d      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 8004300:	3218      	adds	r2, #24
 8004302:	4293      	cmp	r3, r2
 8004304:	d01a      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 8004306:	3218      	adds	r2, #24
 8004308:	4293      	cmp	r3, r2
 800430a:	d017      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 800430c:	4a48      	ldr	r2, [pc, #288]	; (8004430 <HAL_DMA_Init+0x394>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d014      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 8004312:	3214      	adds	r2, #20
 8004314:	4293      	cmp	r3, r2
 8004316:	d011      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 8004318:	3214      	adds	r2, #20
 800431a:	4293      	cmp	r3, r2
 800431c:	d00e      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 800431e:	3214      	adds	r2, #20
 8004320:	4293      	cmp	r3, r2
 8004322:	d00b      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 8004324:	3214      	adds	r2, #20
 8004326:	4293      	cmp	r3, r2
 8004328:	d008      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 800432a:	3214      	adds	r2, #20
 800432c:	4293      	cmp	r3, r2
 800432e:	d005      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 8004330:	3214      	adds	r2, #20
 8004332:	4293      	cmp	r3, r2
 8004334:	d002      	beq.n	800433c <HAL_DMA_Init+0x2a0>
 8004336:	3214      	adds	r2, #20
 8004338:	4293      	cmp	r3, r2
 800433a:	d113      	bne.n	8004364 <HAL_DMA_Init+0x2c8>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800433c:	4620      	mov	r0, r4
 800433e:	f7ff fe19 	bl	8003f74 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004342:	68a3      	ldr	r3, [r4, #8]
 8004344:	2b80      	cmp	r3, #128	; 0x80
 8004346:	d059      	beq.n	80043fc <HAL_DMA_Init+0x360>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004348:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800434a:	7922      	ldrb	r2, [r4, #4]
 800434c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800434e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004350:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004352:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004354:	6863      	ldr	r3, [r4, #4]
 8004356:	3b01      	subs	r3, #1
 8004358:	2b07      	cmp	r3, #7
 800435a:	d952      	bls.n	8004402 <HAL_DMA_Init+0x366>
      hdma->DMAmuxRequestGen = 0U;
 800435c:	2300      	movs	r3, #0
 800435e:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004360:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004362:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004364:	2000      	movs	r0, #0
 8004366:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004368:	2301      	movs	r3, #1
 800436a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800436e:	e743      	b.n	80041f8 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004370:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004372:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004374:	4301      	orrs	r1, r0
 8004376:	430a      	orrs	r2, r1
 8004378:	e761      	b.n	800423e <HAL_DMA_Init+0x1a2>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800437a:	2340      	movs	r3, #64	; 0x40
 800437c:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 800437e:	2001      	movs	r0, #1
 8004380:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8004384:	e738      	b.n	80041f8 <HAL_DMA_Init+0x15c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004386:	2202      	movs	r2, #2
 8004388:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800438c:	2200      	movs	r2, #0
 800438e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004392:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004394:	4927      	ldr	r1, [pc, #156]	; (8004434 <HAL_DMA_Init+0x398>)
 8004396:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004398:	68a2      	ldr	r2, [r4, #8]
 800439a:	2a40      	cmp	r2, #64	; 0x40
 800439c:	d02c      	beq.n	80043f8 <HAL_DMA_Init+0x35c>
 800439e:	2a80      	cmp	r2, #128	; 0x80
 80043a0:	d027      	beq.n	80043f2 <HAL_DMA_Init+0x356>
 80043a2:	2200      	movs	r2, #0
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043a4:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043a6:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043aa:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80043ac:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043b0:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80043b2:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043b6:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80043b8:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80043bc:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80043be:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80043c2:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80043c4:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043c8:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80043ca:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80043cc:	6822      	ldr	r2, [r4, #0]
 80043ce:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <HAL_DMA_Init+0x39c>)
 80043d0:	4413      	add	r3, r2
 80043d2:	4a1a      	ldr	r2, [pc, #104]	; (800443c <HAL_DMA_Init+0x3a0>)
 80043d4:	fba2 2303 	umull	r2, r3, r2, r3
 80043d8:	091b      	lsrs	r3, r3, #4
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043de:	4620      	mov	r0, r4
 80043e0:	f7ff fd24 	bl	8003e2c <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80043e4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80043e6:	f002 011f 	and.w	r1, r2, #31
 80043ea:	2201      	movs	r2, #1
 80043ec:	408a      	lsls	r2, r1
 80043ee:	6042      	str	r2, [r0, #4]
 80043f0:	e75a      	b.n	80042a8 <HAL_DMA_Init+0x20c>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80043f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80043f6:	e7d5      	b.n	80043a4 <HAL_DMA_Init+0x308>
 80043f8:	2210      	movs	r2, #16
 80043fa:	e7d3      	b.n	80043a4 <HAL_DMA_Init+0x308>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043fc:	2300      	movs	r3, #0
 80043fe:	6063      	str	r3, [r4, #4]
 8004400:	e7a2      	b.n	8004348 <HAL_DMA_Init+0x2ac>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004402:	4620      	mov	r0, r4
 8004404:	f7ff fe0c 	bl	8004020 <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004408:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800440a:	2200      	movs	r2, #0
 800440c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800440e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004410:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8004412:	605a      	str	r2, [r3, #4]
 8004414:	e7a6      	b.n	8004364 <HAL_DMA_Init+0x2c8>
    return HAL_ERROR;
 8004416:	2001      	movs	r0, #1
 8004418:	e6ee      	b.n	80041f8 <HAL_DMA_Init+0x15c>
 800441a:	bf00      	nop
 800441c:	fe10803f 	.word	0xfe10803f
 8004420:	5c001000 	.word	0x5c001000
 8004424:	ffff0000 	.word	0xffff0000
 8004428:	40020010 	.word	0x40020010
 800442c:	40020028 	.word	0x40020028
 8004430:	58025408 	.word	0x58025408
 8004434:	fffe000f 	.word	0xfffe000f
 8004438:	a7fdabf8 	.word	0xa7fdabf8
 800443c:	cccccccd 	.word	0xcccccccd

08004440 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004440:	2800      	cmp	r0, #0
 8004442:	f000 813e 	beq.w	80046c2 <HAL_DMA_Start_IT+0x282>
{
 8004446:	b570      	push	{r4, r5, r6, lr}
 8004448:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 800444a:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800444e:	2801      	cmp	r0, #1
 8004450:	f000 8139 	beq.w	80046c6 <HAL_DMA_Start_IT+0x286>
 8004454:	2001      	movs	r0, #1
 8004456:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800445a:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 800445e:	b2c0      	uxtb	r0, r0
 8004460:	2801      	cmp	r0, #1
 8004462:	d007      	beq.n	8004474 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004464:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004468:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800446a:	2300      	movs	r3, #0
 800446c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 8004470:	2001      	movs	r0, #1
}
 8004472:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8004474:	2002      	movs	r0, #2
 8004476:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800447a:	2000      	movs	r0, #0
 800447c:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800447e:	6820      	ldr	r0, [r4, #0]
 8004480:	4e92      	ldr	r6, [pc, #584]	; (80046cc <HAL_DMA_Start_IT+0x28c>)
 8004482:	4d93      	ldr	r5, [pc, #588]	; (80046d0 <HAL_DMA_Start_IT+0x290>)
 8004484:	42a8      	cmp	r0, r5
 8004486:	bf18      	it	ne
 8004488:	42b0      	cmpne	r0, r6
 800448a:	d02f      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 800448c:	3518      	adds	r5, #24
 800448e:	42a8      	cmp	r0, r5
 8004490:	d02c      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 8004492:	3518      	adds	r5, #24
 8004494:	42a8      	cmp	r0, r5
 8004496:	d029      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 8004498:	3518      	adds	r5, #24
 800449a:	42a8      	cmp	r0, r5
 800449c:	d026      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 800449e:	3518      	adds	r5, #24
 80044a0:	42a8      	cmp	r0, r5
 80044a2:	d023      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 80044a4:	3518      	adds	r5, #24
 80044a6:	42a8      	cmp	r0, r5
 80044a8:	d020      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 80044aa:	3518      	adds	r5, #24
 80044ac:	42a8      	cmp	r0, r5
 80044ae:	d01d      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 80044b0:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80044b4:	42a8      	cmp	r0, r5
 80044b6:	d019      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 80044b8:	3518      	adds	r5, #24
 80044ba:	42a8      	cmp	r0, r5
 80044bc:	d016      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 80044be:	3518      	adds	r5, #24
 80044c0:	42a8      	cmp	r0, r5
 80044c2:	d013      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 80044c4:	3518      	adds	r5, #24
 80044c6:	42a8      	cmp	r0, r5
 80044c8:	d010      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 80044ca:	3518      	adds	r5, #24
 80044cc:	42a8      	cmp	r0, r5
 80044ce:	d00d      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 80044d0:	3518      	adds	r5, #24
 80044d2:	42a8      	cmp	r0, r5
 80044d4:	d00a      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 80044d6:	3518      	adds	r5, #24
 80044d8:	42a8      	cmp	r0, r5
 80044da:	d007      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 80044dc:	3518      	adds	r5, #24
 80044de:	42a8      	cmp	r0, r5
 80044e0:	d004      	beq.n	80044ec <HAL_DMA_Start_IT+0xac>
 80044e2:	6805      	ldr	r5, [r0, #0]
 80044e4:	f025 0501 	bic.w	r5, r5, #1
 80044e8:	6005      	str	r5, [r0, #0]
 80044ea:	e003      	b.n	80044f4 <HAL_DMA_Start_IT+0xb4>
 80044ec:	6805      	ldr	r5, [r0, #0]
 80044ee:	f025 0501 	bic.w	r5, r5, #1
 80044f2:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044f4:	4620      	mov	r0, r4
 80044f6:	f7ff fbbf 	bl	8003c78 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	4973      	ldr	r1, [pc, #460]	; (80046cc <HAL_DMA_Start_IT+0x28c>)
 80044fe:	4a74      	ldr	r2, [pc, #464]	; (80046d0 <HAL_DMA_Start_IT+0x290>)
 8004500:	4293      	cmp	r3, r2
 8004502:	bf18      	it	ne
 8004504:	428b      	cmpne	r3, r1
 8004506:	d038      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
 8004508:	3218      	adds	r2, #24
 800450a:	4293      	cmp	r3, r2
 800450c:	d035      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
 800450e:	3218      	adds	r2, #24
 8004510:	4293      	cmp	r3, r2
 8004512:	d032      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
 8004514:	3218      	adds	r2, #24
 8004516:	4293      	cmp	r3, r2
 8004518:	d02f      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
 800451a:	3218      	adds	r2, #24
 800451c:	4293      	cmp	r3, r2
 800451e:	d02c      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
 8004520:	3218      	adds	r2, #24
 8004522:	4293      	cmp	r3, r2
 8004524:	d029      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
 8004526:	3218      	adds	r2, #24
 8004528:	4293      	cmp	r3, r2
 800452a:	d026      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
 800452c:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004530:	4293      	cmp	r3, r2
 8004532:	d022      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
 8004534:	3218      	adds	r2, #24
 8004536:	4293      	cmp	r3, r2
 8004538:	d01f      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
 800453a:	3218      	adds	r2, #24
 800453c:	4293      	cmp	r3, r2
 800453e:	d01c      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
 8004540:	3218      	adds	r2, #24
 8004542:	4293      	cmp	r3, r2
 8004544:	d019      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
 8004546:	3218      	adds	r2, #24
 8004548:	4293      	cmp	r3, r2
 800454a:	d016      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
 800454c:	3218      	adds	r2, #24
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
 8004552:	3218      	adds	r2, #24
 8004554:	4293      	cmp	r3, r2
 8004556:	d010      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
 8004558:	3218      	adds	r2, #24
 800455a:	4293      	cmp	r3, r2
 800455c:	d00d      	beq.n	800457a <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	f022 020e 	bic.w	r2, r2, #14
 8004564:	f042 020a 	orr.w	r2, r2, #10
 8004568:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800456a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800456c:	b193      	cbz	r3, 8004594 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800456e:	6822      	ldr	r2, [r4, #0]
 8004570:	6813      	ldr	r3, [r2, #0]
 8004572:	f043 0304 	orr.w	r3, r3, #4
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	e00c      	b.n	8004594 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	f022 021e 	bic.w	r2, r2, #30
 8004580:	f042 0216 	orr.w	r2, r2, #22
 8004584:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004588:	b123      	cbz	r3, 8004594 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800458a:	6822      	ldr	r2, [r4, #0]
 800458c:	6813      	ldr	r3, [r2, #0]
 800458e:	f043 0308 	orr.w	r3, r3, #8
 8004592:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004594:	6823      	ldr	r3, [r4, #0]
 8004596:	494d      	ldr	r1, [pc, #308]	; (80046cc <HAL_DMA_Start_IT+0x28c>)
 8004598:	4a4d      	ldr	r2, [pc, #308]	; (80046d0 <HAL_DMA_Start_IT+0x290>)
 800459a:	4293      	cmp	r3, r2
 800459c:	bf18      	it	ne
 800459e:	428b      	cmpne	r3, r1
 80045a0:	d042      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045a2:	3218      	adds	r2, #24
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d03f      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045a8:	3218      	adds	r2, #24
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d03c      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045ae:	3218      	adds	r2, #24
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d039      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045b4:	3218      	adds	r2, #24
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d036      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045ba:	3218      	adds	r2, #24
 80045bc:	4293      	cmp	r3, r2
 80045be:	d033      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045c0:	3218      	adds	r2, #24
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d030      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045c6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d02c      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045ce:	3218      	adds	r2, #24
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d029      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045d4:	3218      	adds	r2, #24
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d026      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045da:	3218      	adds	r2, #24
 80045dc:	4293      	cmp	r3, r2
 80045de:	d023      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045e0:	3218      	adds	r2, #24
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d020      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045e6:	3218      	adds	r2, #24
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d01d      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045ec:	3218      	adds	r2, #24
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d01a      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045f2:	3218      	adds	r2, #24
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d017      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045f8:	4a36      	ldr	r2, [pc, #216]	; (80046d4 <HAL_DMA_Start_IT+0x294>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d014      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 80045fe:	3214      	adds	r2, #20
 8004600:	4293      	cmp	r3, r2
 8004602:	d011      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 8004604:	3214      	adds	r2, #20
 8004606:	4293      	cmp	r3, r2
 8004608:	d00e      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 800460a:	3214      	adds	r2, #20
 800460c:	4293      	cmp	r3, r2
 800460e:	d00b      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 8004610:	3214      	adds	r2, #20
 8004612:	4293      	cmp	r3, r2
 8004614:	d008      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 8004616:	3214      	adds	r2, #20
 8004618:	4293      	cmp	r3, r2
 800461a:	d005      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 800461c:	3214      	adds	r2, #20
 800461e:	4293      	cmp	r3, r2
 8004620:	d002      	beq.n	8004628 <HAL_DMA_Start_IT+0x1e8>
 8004622:	3214      	adds	r2, #20
 8004624:	4293      	cmp	r3, r2
 8004626:	d10e      	bne.n	8004646 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004628:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004630:	d003      	beq.n	800463a <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004638:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800463a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800463c:	b11b      	cbz	r3, 8004646 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004644:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	4920      	ldr	r1, [pc, #128]	; (80046cc <HAL_DMA_Start_IT+0x28c>)
 800464a:	4a21      	ldr	r2, [pc, #132]	; (80046d0 <HAL_DMA_Start_IT+0x290>)
 800464c:	4293      	cmp	r3, r2
 800464e:	bf18      	it	ne
 8004650:	428b      	cmpne	r3, r1
 8004652:	d030      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 8004654:	3218      	adds	r2, #24
 8004656:	4293      	cmp	r3, r2
 8004658:	d02d      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 800465a:	3218      	adds	r2, #24
 800465c:	4293      	cmp	r3, r2
 800465e:	d02a      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 8004660:	3218      	adds	r2, #24
 8004662:	4293      	cmp	r3, r2
 8004664:	d027      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 8004666:	3218      	adds	r2, #24
 8004668:	4293      	cmp	r3, r2
 800466a:	d024      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 800466c:	3218      	adds	r2, #24
 800466e:	4293      	cmp	r3, r2
 8004670:	d021      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 8004672:	3218      	adds	r2, #24
 8004674:	4293      	cmp	r3, r2
 8004676:	d01e      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 8004678:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800467c:	4293      	cmp	r3, r2
 800467e:	d01a      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 8004680:	3218      	adds	r2, #24
 8004682:	4293      	cmp	r3, r2
 8004684:	d017      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 8004686:	3218      	adds	r2, #24
 8004688:	4293      	cmp	r3, r2
 800468a:	d014      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 800468c:	3218      	adds	r2, #24
 800468e:	4293      	cmp	r3, r2
 8004690:	d011      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 8004692:	3218      	adds	r2, #24
 8004694:	4293      	cmp	r3, r2
 8004696:	d00e      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 8004698:	3218      	adds	r2, #24
 800469a:	4293      	cmp	r3, r2
 800469c:	d00b      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 800469e:	3218      	adds	r2, #24
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d008      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 80046a4:	3218      	adds	r2, #24
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d005      	beq.n	80046b6 <HAL_DMA_Start_IT+0x276>
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046b2:	2000      	movs	r0, #0
 80046b4:	e6dd      	b.n	8004472 <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	f042 0201 	orr.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80046be:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80046c0:	e6d7      	b.n	8004472 <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 80046c2:	2001      	movs	r0, #1
}
 80046c4:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80046c6:	2002      	movs	r0, #2
 80046c8:	e6d3      	b.n	8004472 <HAL_DMA_Start_IT+0x32>
 80046ca:	bf00      	nop
 80046cc:	40020010 	.word	0x40020010
 80046d0:	40020028 	.word	0x40020028
 80046d4:	58025408 	.word	0x58025408

080046d8 <HAL_DMA_Abort>:
{
 80046d8:	b570      	push	{r4, r5, r6, lr}
 80046da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80046dc:	f7ff f9ea 	bl	8003ab4 <HAL_GetTick>
  if(hdma == NULL)
 80046e0:	2c00      	cmp	r4, #0
 80046e2:	f000 8191 	beq.w	8004a08 <HAL_DMA_Abort+0x330>
 80046e6:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046e8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d006      	beq.n	8004700 <HAL_DMA_Abort+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80046f6:	2300      	movs	r3, #0
 80046f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80046fc:	2001      	movs	r0, #1
}
 80046fe:	bd70      	pop	{r4, r5, r6, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004700:	6823      	ldr	r3, [r4, #0]
 8004702:	498c      	ldr	r1, [pc, #560]	; (8004934 <HAL_DMA_Abort+0x25c>)
 8004704:	4a8c      	ldr	r2, [pc, #560]	; (8004938 <HAL_DMA_Abort+0x260>)
 8004706:	4293      	cmp	r3, r2
 8004708:	bf18      	it	ne
 800470a:	428b      	cmpne	r3, r1
 800470c:	d030      	beq.n	8004770 <HAL_DMA_Abort+0x98>
 800470e:	3218      	adds	r2, #24
 8004710:	4293      	cmp	r3, r2
 8004712:	d02d      	beq.n	8004770 <HAL_DMA_Abort+0x98>
 8004714:	3218      	adds	r2, #24
 8004716:	4293      	cmp	r3, r2
 8004718:	d02a      	beq.n	8004770 <HAL_DMA_Abort+0x98>
 800471a:	3218      	adds	r2, #24
 800471c:	4293      	cmp	r3, r2
 800471e:	d027      	beq.n	8004770 <HAL_DMA_Abort+0x98>
 8004720:	3218      	adds	r2, #24
 8004722:	4293      	cmp	r3, r2
 8004724:	d024      	beq.n	8004770 <HAL_DMA_Abort+0x98>
 8004726:	3218      	adds	r2, #24
 8004728:	4293      	cmp	r3, r2
 800472a:	d021      	beq.n	8004770 <HAL_DMA_Abort+0x98>
 800472c:	3218      	adds	r2, #24
 800472e:	4293      	cmp	r3, r2
 8004730:	d01e      	beq.n	8004770 <HAL_DMA_Abort+0x98>
 8004732:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004736:	4293      	cmp	r3, r2
 8004738:	d01a      	beq.n	8004770 <HAL_DMA_Abort+0x98>
 800473a:	3218      	adds	r2, #24
 800473c:	4293      	cmp	r3, r2
 800473e:	d017      	beq.n	8004770 <HAL_DMA_Abort+0x98>
 8004740:	3218      	adds	r2, #24
 8004742:	4293      	cmp	r3, r2
 8004744:	d014      	beq.n	8004770 <HAL_DMA_Abort+0x98>
 8004746:	3218      	adds	r2, #24
 8004748:	4293      	cmp	r3, r2
 800474a:	d011      	beq.n	8004770 <HAL_DMA_Abort+0x98>
 800474c:	3218      	adds	r2, #24
 800474e:	4293      	cmp	r3, r2
 8004750:	d00e      	beq.n	8004770 <HAL_DMA_Abort+0x98>
 8004752:	3218      	adds	r2, #24
 8004754:	4293      	cmp	r3, r2
 8004756:	d00b      	beq.n	8004770 <HAL_DMA_Abort+0x98>
 8004758:	3218      	adds	r2, #24
 800475a:	4293      	cmp	r3, r2
 800475c:	d008      	beq.n	8004770 <HAL_DMA_Abort+0x98>
 800475e:	3218      	adds	r2, #24
 8004760:	4293      	cmp	r3, r2
 8004762:	d005      	beq.n	8004770 <HAL_DMA_Abort+0x98>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	f022 020e 	bic.w	r2, r2, #14
 800476a:	601a      	str	r2, [r3, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800476c:	6826      	ldr	r6, [r4, #0]
 800476e:	e009      	b.n	8004784 <HAL_DMA_Abort+0xac>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	f022 021e 	bic.w	r2, r2, #30
 8004776:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004778:	6822      	ldr	r2, [r4, #0]
 800477a:	6953      	ldr	r3, [r2, #20]
 800477c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004780:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004782:	6826      	ldr	r6, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	496b      	ldr	r1, [pc, #428]	; (8004934 <HAL_DMA_Abort+0x25c>)
 8004788:	4a6b      	ldr	r2, [pc, #428]	; (8004938 <HAL_DMA_Abort+0x260>)
 800478a:	4293      	cmp	r3, r2
 800478c:	bf18      	it	ne
 800478e:	428b      	cmpne	r3, r1
 8004790:	d042      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 8004792:	3218      	adds	r2, #24
 8004794:	4293      	cmp	r3, r2
 8004796:	d03f      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 8004798:	3218      	adds	r2, #24
 800479a:	4293      	cmp	r3, r2
 800479c:	d03c      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 800479e:	3218      	adds	r2, #24
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d039      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047a4:	3218      	adds	r2, #24
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d036      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047aa:	3218      	adds	r2, #24
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d033      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047b0:	3218      	adds	r2, #24
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d030      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047b6:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d02c      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047be:	3218      	adds	r2, #24
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d029      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047c4:	3218      	adds	r2, #24
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d026      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047ca:	3218      	adds	r2, #24
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d023      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047d0:	3218      	adds	r2, #24
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d020      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047d6:	3218      	adds	r2, #24
 80047d8:	4293      	cmp	r3, r2
 80047da:	d01d      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047dc:	3218      	adds	r2, #24
 80047de:	4293      	cmp	r3, r2
 80047e0:	d01a      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047e2:	3218      	adds	r2, #24
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d017      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047e8:	4a54      	ldr	r2, [pc, #336]	; (800493c <HAL_DMA_Abort+0x264>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d014      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047ee:	3214      	adds	r2, #20
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d011      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047f4:	3214      	adds	r2, #20
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00e      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 80047fa:	3214      	adds	r2, #20
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d00b      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 8004800:	3214      	adds	r2, #20
 8004802:	4293      	cmp	r3, r2
 8004804:	d008      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 8004806:	3214      	adds	r2, #20
 8004808:	4293      	cmp	r3, r2
 800480a:	d005      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 800480c:	3214      	adds	r2, #20
 800480e:	4293      	cmp	r3, r2
 8004810:	d002      	beq.n	8004818 <HAL_DMA_Abort+0x140>
 8004812:	3214      	adds	r2, #20
 8004814:	4293      	cmp	r3, r2
 8004816:	d104      	bne.n	8004822 <HAL_DMA_Abort+0x14a>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004818:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800481a:	6813      	ldr	r3, [r2, #0]
 800481c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004820:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	4943      	ldr	r1, [pc, #268]	; (8004934 <HAL_DMA_Abort+0x25c>)
 8004826:	4a44      	ldr	r2, [pc, #272]	; (8004938 <HAL_DMA_Abort+0x260>)
 8004828:	4293      	cmp	r3, r2
 800482a:	bf18      	it	ne
 800482c:	428b      	cmpne	r3, r1
 800482e:	d02f      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 8004830:	3218      	adds	r2, #24
 8004832:	4293      	cmp	r3, r2
 8004834:	d02c      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 8004836:	3218      	adds	r2, #24
 8004838:	4293      	cmp	r3, r2
 800483a:	d029      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 800483c:	3218      	adds	r2, #24
 800483e:	4293      	cmp	r3, r2
 8004840:	d026      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 8004842:	3218      	adds	r2, #24
 8004844:	4293      	cmp	r3, r2
 8004846:	d023      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 8004848:	3218      	adds	r2, #24
 800484a:	4293      	cmp	r3, r2
 800484c:	d020      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 800484e:	3218      	adds	r2, #24
 8004850:	4293      	cmp	r3, r2
 8004852:	d01d      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 8004854:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004858:	4293      	cmp	r3, r2
 800485a:	d019      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 800485c:	3218      	adds	r2, #24
 800485e:	4293      	cmp	r3, r2
 8004860:	d016      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 8004862:	3218      	adds	r2, #24
 8004864:	4293      	cmp	r3, r2
 8004866:	d013      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 8004868:	3218      	adds	r2, #24
 800486a:	4293      	cmp	r3, r2
 800486c:	d010      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 800486e:	3218      	adds	r2, #24
 8004870:	4293      	cmp	r3, r2
 8004872:	d00d      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 8004874:	3218      	adds	r2, #24
 8004876:	4293      	cmp	r3, r2
 8004878:	d00a      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 800487a:	3218      	adds	r2, #24
 800487c:	4293      	cmp	r3, r2
 800487e:	d007      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 8004880:	3218      	adds	r2, #24
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <HAL_DMA_Abort+0x1b8>
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e003      	b.n	8004898 <HAL_DMA_Abort+0x1c0>
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	f022 0201 	bic.w	r2, r2, #1
 8004896:	601a      	str	r2, [r3, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004898:	6833      	ldr	r3, [r6, #0]
 800489a:	f013 0f01 	tst.w	r3, #1
 800489e:	d00e      	beq.n	80048be <HAL_DMA_Abort+0x1e6>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048a0:	f7ff f908 	bl	8003ab4 <HAL_GetTick>
 80048a4:	1b43      	subs	r3, r0, r5
 80048a6:	2b05      	cmp	r3, #5
 80048a8:	d9f6      	bls.n	8004898 <HAL_DMA_Abort+0x1c0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048aa:	2320      	movs	r3, #32
 80048ac:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80048ae:	2303      	movs	r3, #3
 80048b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80048b4:	2300      	movs	r3, #0
 80048b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_ERROR;
 80048ba:	2001      	movs	r0, #1
 80048bc:	e71f      	b.n	80046fe <HAL_DMA_Abort+0x26>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	491c      	ldr	r1, [pc, #112]	; (8004934 <HAL_DMA_Abort+0x25c>)
 80048c2:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <HAL_DMA_Abort+0x260>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	bf18      	it	ne
 80048c8:	428b      	cmpne	r3, r1
 80048ca:	d039      	beq.n	8004940 <HAL_DMA_Abort+0x268>
 80048cc:	3218      	adds	r2, #24
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d036      	beq.n	8004940 <HAL_DMA_Abort+0x268>
 80048d2:	3218      	adds	r2, #24
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d033      	beq.n	8004940 <HAL_DMA_Abort+0x268>
 80048d8:	3218      	adds	r2, #24
 80048da:	4293      	cmp	r3, r2
 80048dc:	d030      	beq.n	8004940 <HAL_DMA_Abort+0x268>
 80048de:	3218      	adds	r2, #24
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d02d      	beq.n	8004940 <HAL_DMA_Abort+0x268>
 80048e4:	3218      	adds	r2, #24
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d02a      	beq.n	8004940 <HAL_DMA_Abort+0x268>
 80048ea:	3218      	adds	r2, #24
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d027      	beq.n	8004940 <HAL_DMA_Abort+0x268>
 80048f0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d023      	beq.n	8004940 <HAL_DMA_Abort+0x268>
 80048f8:	3218      	adds	r2, #24
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d020      	beq.n	8004940 <HAL_DMA_Abort+0x268>
 80048fe:	3218      	adds	r2, #24
 8004900:	4293      	cmp	r3, r2
 8004902:	d01d      	beq.n	8004940 <HAL_DMA_Abort+0x268>
 8004904:	3218      	adds	r2, #24
 8004906:	4293      	cmp	r3, r2
 8004908:	d01a      	beq.n	8004940 <HAL_DMA_Abort+0x268>
 800490a:	3218      	adds	r2, #24
 800490c:	4293      	cmp	r3, r2
 800490e:	d017      	beq.n	8004940 <HAL_DMA_Abort+0x268>
 8004910:	3218      	adds	r2, #24
 8004912:	4293      	cmp	r3, r2
 8004914:	d014      	beq.n	8004940 <HAL_DMA_Abort+0x268>
 8004916:	3218      	adds	r2, #24
 8004918:	4293      	cmp	r3, r2
 800491a:	d011      	beq.n	8004940 <HAL_DMA_Abort+0x268>
 800491c:	3218      	adds	r2, #24
 800491e:	4293      	cmp	r3, r2
 8004920:	d00e      	beq.n	8004940 <HAL_DMA_Abort+0x268>
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004922:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004924:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004926:	f003 021f 	and.w	r2, r3, #31
 800492a:	2301      	movs	r3, #1
 800492c:	4093      	lsls	r3, r2
 800492e:	604b      	str	r3, [r1, #4]
 8004930:	e00d      	b.n	800494e <HAL_DMA_Abort+0x276>
 8004932:	bf00      	nop
 8004934:	40020010 	.word	0x40020010
 8004938:	40020028 	.word	0x40020028
 800493c:	58025408 	.word	0x58025408
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004940:	6da1      	ldr	r1, [r4, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004942:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004944:	f003 021f 	and.w	r2, r3, #31
 8004948:	233f      	movs	r3, #63	; 0x3f
 800494a:	4093      	lsls	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	492e      	ldr	r1, [pc, #184]	; (8004a0c <HAL_DMA_Abort+0x334>)
 8004952:	4a2f      	ldr	r2, [pc, #188]	; (8004a10 <HAL_DMA_Abort+0x338>)
 8004954:	4293      	cmp	r3, r2
 8004956:	bf18      	it	ne
 8004958:	428b      	cmpne	r3, r1
 800495a:	d042      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 800495c:	3218      	adds	r2, #24
 800495e:	4293      	cmp	r3, r2
 8004960:	d03f      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 8004962:	3218      	adds	r2, #24
 8004964:	4293      	cmp	r3, r2
 8004966:	d03c      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 8004968:	3218      	adds	r2, #24
 800496a:	4293      	cmp	r3, r2
 800496c:	d039      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 800496e:	3218      	adds	r2, #24
 8004970:	4293      	cmp	r3, r2
 8004972:	d036      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 8004974:	3218      	adds	r2, #24
 8004976:	4293      	cmp	r3, r2
 8004978:	d033      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 800497a:	3218      	adds	r2, #24
 800497c:	4293      	cmp	r3, r2
 800497e:	d030      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 8004980:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004984:	4293      	cmp	r3, r2
 8004986:	d02c      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 8004988:	3218      	adds	r2, #24
 800498a:	4293      	cmp	r3, r2
 800498c:	d029      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 800498e:	3218      	adds	r2, #24
 8004990:	4293      	cmp	r3, r2
 8004992:	d026      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 8004994:	3218      	adds	r2, #24
 8004996:	4293      	cmp	r3, r2
 8004998:	d023      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 800499a:	3218      	adds	r2, #24
 800499c:	4293      	cmp	r3, r2
 800499e:	d020      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 80049a0:	3218      	adds	r2, #24
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01d      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 80049a6:	3218      	adds	r2, #24
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d01a      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 80049ac:	3218      	adds	r2, #24
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d017      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 80049b2:	4a18      	ldr	r2, [pc, #96]	; (8004a14 <HAL_DMA_Abort+0x33c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d014      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 80049b8:	3214      	adds	r2, #20
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d011      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 80049be:	3214      	adds	r2, #20
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 80049c4:	3214      	adds	r2, #20
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 80049ca:	3214      	adds	r2, #20
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d008      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 80049d0:	3214      	adds	r2, #20
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d005      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 80049d6:	3214      	adds	r2, #20
 80049d8:	4293      	cmp	r3, r2
 80049da:	d002      	beq.n	80049e2 <HAL_DMA_Abort+0x30a>
 80049dc:	3214      	adds	r2, #20
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10b      	bne.n	80049fa <HAL_DMA_Abort+0x322>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049e4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80049e6:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80049e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80049ea:	b133      	cbz	r3, 80049fa <HAL_DMA_Abort+0x322>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049f2:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80049f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80049f6:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80049f8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004a00:	2000      	movs	r0, #0
 8004a02:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8004a06:	e67a      	b.n	80046fe <HAL_DMA_Abort+0x26>
    return HAL_ERROR;
 8004a08:	2001      	movs	r0, #1
 8004a0a:	e678      	b.n	80046fe <HAL_DMA_Abort+0x26>
 8004a0c:	40020010 	.word	0x40020010
 8004a10:	40020028 	.word	0x40020028
 8004a14:	58025408 	.word	0x58025408

08004a18 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8004a18:	2800      	cmp	r0, #0
 8004a1a:	f000 8128 	beq.w	8004c6e <HAL_DMA_Abort_IT+0x256>
{
 8004a1e:	b508      	push	{r3, lr}
 8004a20:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a22:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d003      	beq.n	8004a34 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8004a30:	2001      	movs	r0, #1
}
 8004a32:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a34:	6803      	ldr	r3, [r0, #0]
 8004a36:	4890      	ldr	r0, [pc, #576]	; (8004c78 <HAL_DMA_Abort_IT+0x260>)
 8004a38:	4990      	ldr	r1, [pc, #576]	; (8004c7c <HAL_DMA_Abort_IT+0x264>)
 8004a3a:	428b      	cmp	r3, r1
 8004a3c:	bf18      	it	ne
 8004a3e:	4283      	cmpne	r3, r0
 8004a40:	bf0c      	ite	eq
 8004a42:	2001      	moveq	r0, #1
 8004a44:	2000      	movne	r0, #0
 8004a46:	d065      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
 8004a48:	3118      	adds	r1, #24
 8004a4a:	428b      	cmp	r3, r1
 8004a4c:	d062      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
 8004a4e:	3118      	adds	r1, #24
 8004a50:	428b      	cmp	r3, r1
 8004a52:	d05f      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
 8004a54:	3118      	adds	r1, #24
 8004a56:	428b      	cmp	r3, r1
 8004a58:	d05c      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
 8004a5a:	3118      	adds	r1, #24
 8004a5c:	428b      	cmp	r3, r1
 8004a5e:	d059      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
 8004a60:	3118      	adds	r1, #24
 8004a62:	428b      	cmp	r3, r1
 8004a64:	d056      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
 8004a66:	3118      	adds	r1, #24
 8004a68:	428b      	cmp	r3, r1
 8004a6a:	d053      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
 8004a6c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004a70:	428b      	cmp	r3, r1
 8004a72:	d04f      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
 8004a74:	3118      	adds	r1, #24
 8004a76:	428b      	cmp	r3, r1
 8004a78:	d04c      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
 8004a7a:	3118      	adds	r1, #24
 8004a7c:	428b      	cmp	r3, r1
 8004a7e:	d049      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
 8004a80:	3118      	adds	r1, #24
 8004a82:	428b      	cmp	r3, r1
 8004a84:	d046      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
 8004a86:	3118      	adds	r1, #24
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	d043      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
 8004a8c:	3118      	adds	r1, #24
 8004a8e:	428b      	cmp	r3, r1
 8004a90:	d040      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
 8004a92:	3118      	adds	r1, #24
 8004a94:	428b      	cmp	r3, r1
 8004a96:	d03d      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
 8004a98:	3118      	adds	r1, #24
 8004a9a:	428b      	cmp	r3, r1
 8004a9c:	d03a      	beq.n	8004b14 <HAL_DMA_Abort_IT+0xfc>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004a9e:	6819      	ldr	r1, [r3, #0]
 8004aa0:	f021 010e 	bic.w	r1, r1, #14
 8004aa4:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8004aa6:	6813      	ldr	r3, [r2, #0]
 8004aa8:	4873      	ldr	r0, [pc, #460]	; (8004c78 <HAL_DMA_Abort_IT+0x260>)
 8004aaa:	4974      	ldr	r1, [pc, #464]	; (8004c7c <HAL_DMA_Abort_IT+0x264>)
 8004aac:	428b      	cmp	r3, r1
 8004aae:	bf18      	it	ne
 8004ab0:	4283      	cmpne	r3, r0
 8004ab2:	d06a      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004ab4:	4972      	ldr	r1, [pc, #456]	; (8004c80 <HAL_DMA_Abort_IT+0x268>)
 8004ab6:	428b      	cmp	r3, r1
 8004ab8:	d067      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004aba:	3118      	adds	r1, #24
 8004abc:	428b      	cmp	r3, r1
 8004abe:	d064      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004ac0:	3118      	adds	r1, #24
 8004ac2:	428b      	cmp	r3, r1
 8004ac4:	d061      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004ac6:	3118      	adds	r1, #24
 8004ac8:	428b      	cmp	r3, r1
 8004aca:	d05e      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004acc:	3118      	adds	r1, #24
 8004ace:	428b      	cmp	r3, r1
 8004ad0:	d05b      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004ad2:	3118      	adds	r1, #24
 8004ad4:	428b      	cmp	r3, r1
 8004ad6:	d058      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004ad8:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004adc:	428b      	cmp	r3, r1
 8004ade:	d054      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004ae0:	3118      	adds	r1, #24
 8004ae2:	428b      	cmp	r3, r1
 8004ae4:	d051      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004ae6:	3118      	adds	r1, #24
 8004ae8:	428b      	cmp	r3, r1
 8004aea:	d04e      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004aec:	3118      	adds	r1, #24
 8004aee:	428b      	cmp	r3, r1
 8004af0:	d04b      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004af2:	3118      	adds	r1, #24
 8004af4:	428b      	cmp	r3, r1
 8004af6:	d048      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004af8:	3118      	adds	r1, #24
 8004afa:	428b      	cmp	r3, r1
 8004afc:	d045      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004afe:	3118      	adds	r1, #24
 8004b00:	428b      	cmp	r3, r1
 8004b02:	d042      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004b04:	3118      	adds	r1, #24
 8004b06:	428b      	cmp	r3, r1
 8004b08:	d03f      	beq.n	8004b8a <HAL_DMA_Abort_IT+0x172>
 8004b0a:	6819      	ldr	r1, [r3, #0]
 8004b0c:	f021 0101 	bic.w	r1, r1, #1
 8004b10:	6019      	str	r1, [r3, #0]
 8004b12:	e03e      	b.n	8004b92 <HAL_DMA_Abort_IT+0x17a>
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b14:	2104      	movs	r1, #4
 8004b16:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8004b1a:	bb80      	cbnz	r0, 8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b1c:	4a58      	ldr	r2, [pc, #352]	; (8004c80 <HAL_DMA_Abort_IT+0x268>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d02d      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b22:	3218      	adds	r2, #24
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d02a      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b28:	3218      	adds	r2, #24
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d027      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b2e:	3218      	adds	r2, #24
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d024      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b34:	3218      	adds	r2, #24
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d021      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b3a:	3218      	adds	r2, #24
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d01e      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b40:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d01a      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b48:	3218      	adds	r2, #24
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d017      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b4e:	3218      	adds	r2, #24
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d014      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b54:	3218      	adds	r2, #24
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d011      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b5a:	3218      	adds	r2, #24
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00e      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b60:	3218      	adds	r2, #24
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00b      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b66:	3218      	adds	r2, #24
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d008      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b6c:	3218      	adds	r2, #24
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d005      	beq.n	8004b7e <HAL_DMA_Abort_IT+0x166>
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	f022 0201 	bic.w	r2, r2, #1
 8004b78:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	e759      	b.n	8004a32 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	f022 0201 	bic.w	r2, r2, #1
 8004b84:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004b86:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8004b88:	e753      	b.n	8004a32 <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8004b8a:	6819      	ldr	r1, [r3, #0]
 8004b8c:	f021 0101 	bic.w	r1, r1, #1
 8004b90:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b92:	6813      	ldr	r3, [r2, #0]
 8004b94:	4838      	ldr	r0, [pc, #224]	; (8004c78 <HAL_DMA_Abort_IT+0x260>)
 8004b96:	4939      	ldr	r1, [pc, #228]	; (8004c7c <HAL_DMA_Abort_IT+0x264>)
 8004b98:	428b      	cmp	r3, r1
 8004b9a:	bf18      	it	ne
 8004b9c:	4283      	cmpne	r3, r0
 8004b9e:	d042      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004ba0:	3118      	adds	r1, #24
 8004ba2:	428b      	cmp	r3, r1
 8004ba4:	d03f      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004ba6:	3118      	adds	r1, #24
 8004ba8:	428b      	cmp	r3, r1
 8004baa:	d03c      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004bac:	3118      	adds	r1, #24
 8004bae:	428b      	cmp	r3, r1
 8004bb0:	d039      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004bb2:	3118      	adds	r1, #24
 8004bb4:	428b      	cmp	r3, r1
 8004bb6:	d036      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004bb8:	3118      	adds	r1, #24
 8004bba:	428b      	cmp	r3, r1
 8004bbc:	d033      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004bbe:	3118      	adds	r1, #24
 8004bc0:	428b      	cmp	r3, r1
 8004bc2:	d030      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004bc4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004bc8:	428b      	cmp	r3, r1
 8004bca:	d02c      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004bcc:	3118      	adds	r1, #24
 8004bce:	428b      	cmp	r3, r1
 8004bd0:	d029      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004bd2:	3118      	adds	r1, #24
 8004bd4:	428b      	cmp	r3, r1
 8004bd6:	d026      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004bd8:	3118      	adds	r1, #24
 8004bda:	428b      	cmp	r3, r1
 8004bdc:	d023      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004bde:	3118      	adds	r1, #24
 8004be0:	428b      	cmp	r3, r1
 8004be2:	d020      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004be4:	3118      	adds	r1, #24
 8004be6:	428b      	cmp	r3, r1
 8004be8:	d01d      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004bea:	3118      	adds	r1, #24
 8004bec:	428b      	cmp	r3, r1
 8004bee:	d01a      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004bf0:	3118      	adds	r1, #24
 8004bf2:	428b      	cmp	r3, r1
 8004bf4:	d017      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004bf6:	4923      	ldr	r1, [pc, #140]	; (8004c84 <HAL_DMA_Abort_IT+0x26c>)
 8004bf8:	428b      	cmp	r3, r1
 8004bfa:	d014      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004bfc:	3114      	adds	r1, #20
 8004bfe:	428b      	cmp	r3, r1
 8004c00:	d011      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004c02:	3114      	adds	r1, #20
 8004c04:	428b      	cmp	r3, r1
 8004c06:	d00e      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004c08:	3114      	adds	r1, #20
 8004c0a:	428b      	cmp	r3, r1
 8004c0c:	d00b      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004c0e:	3114      	adds	r1, #20
 8004c10:	428b      	cmp	r3, r1
 8004c12:	d008      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004c14:	3114      	adds	r1, #20
 8004c16:	428b      	cmp	r3, r1
 8004c18:	d005      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004c1a:	3114      	adds	r1, #20
 8004c1c:	428b      	cmp	r3, r1
 8004c1e:	d002      	beq.n	8004c26 <HAL_DMA_Abort_IT+0x20e>
 8004c20:	3114      	adds	r1, #20
 8004c22:	428b      	cmp	r3, r1
 8004c24:	d117      	bne.n	8004c56 <HAL_DMA_Abort_IT+0x23e>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c26:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8004c28:	680b      	ldr	r3, [r1, #0]
 8004c2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c2e:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c30:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c32:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8004c34:	f003 011f 	and.w	r1, r3, #31
 8004c38:	2301      	movs	r3, #1
 8004c3a:	408b      	lsls	r3, r1
 8004c3c:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c3e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8004c40:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8004c42:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8004c44:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8004c46:	b133      	cbz	r3, 8004c56 <HAL_DMA_Abort_IT+0x23e>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004c48:	6819      	ldr	r1, [r3, #0]
 8004c4a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004c4e:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c50:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004c52:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8004c54:	6059      	str	r1, [r3, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8004c62:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004c64:	b12b      	cbz	r3, 8004c72 <HAL_DMA_Abort_IT+0x25a>
        hdma->XferAbortCallback(hdma);
 8004c66:	4610      	mov	r0, r2
 8004c68:	4798      	blx	r3
  return HAL_OK;
 8004c6a:	2000      	movs	r0, #0
 8004c6c:	e6e1      	b.n	8004a32 <HAL_DMA_Abort_IT+0x1a>
    return HAL_ERROR;
 8004c6e:	2001      	movs	r0, #1
}
 8004c70:	4770      	bx	lr
  return HAL_OK;
 8004c72:	2000      	movs	r0, #0
 8004c74:	e6dd      	b.n	8004a32 <HAL_DMA_Abort_IT+0x1a>
 8004c76:	bf00      	nop
 8004c78:	40020010 	.word	0x40020010
 8004c7c:	40020028 	.word	0x40020028
 8004c80:	40020040 	.word	0x40020040
 8004c84:	58025408 	.word	0x58025408

08004c88 <HAL_DMA_IRQHandler>:
{
 8004c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c92:	4b7d      	ldr	r3, [pc, #500]	; (8004e88 <HAL_DMA_IRQHandler+0x200>)
 8004c94:	681d      	ldr	r5, [r3, #0]
 8004c96:	4b7d      	ldr	r3, [pc, #500]	; (8004e8c <HAL_DMA_IRQHandler+0x204>)
 8004c98:	fba3 3505 	umull	r3, r5, r3, r5
 8004c9c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c9e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8004ca0:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8004ca2:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004ca6:	6803      	ldr	r3, [r0, #0]
 8004ca8:	4979      	ldr	r1, [pc, #484]	; (8004e90 <HAL_DMA_IRQHandler+0x208>)
 8004caa:	487a      	ldr	r0, [pc, #488]	; (8004e94 <HAL_DMA_IRQHandler+0x20c>)
 8004cac:	4283      	cmp	r3, r0
 8004cae:	bf18      	it	ne
 8004cb0:	428b      	cmpne	r3, r1
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2001      	moveq	r0, #1
 8004cb6:	2000      	movne	r0, #0
 8004cb8:	d061      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
 8004cba:	4a77      	ldr	r2, [pc, #476]	; (8004e98 <HAL_DMA_IRQHandler+0x210>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d05e      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
 8004cc0:	3218      	adds	r2, #24
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d05b      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
 8004cc6:	3218      	adds	r2, #24
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d058      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
 8004ccc:	3218      	adds	r2, #24
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d055      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
 8004cd2:	3218      	adds	r2, #24
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d052      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
 8004cd8:	3218      	adds	r2, #24
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d04f      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
 8004cde:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d04b      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
 8004ce6:	3218      	adds	r2, #24
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d048      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
 8004cec:	3218      	adds	r2, #24
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d045      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
 8004cf2:	3218      	adds	r2, #24
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d042      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
 8004cf8:	3218      	adds	r2, #24
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d03f      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
 8004cfe:	3218      	adds	r2, #24
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d03c      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
 8004d04:	3218      	adds	r2, #24
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d039      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
 8004d0a:	3218      	adds	r2, #24
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d036      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004d10:	4962      	ldr	r1, [pc, #392]	; (8004e9c <HAL_DMA_IRQHandler+0x214>)
 8004d12:	4a63      	ldr	r2, [pc, #396]	; (8004ea0 <HAL_DMA_IRQHandler+0x218>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	bf18      	it	ne
 8004d18:	428b      	cmpne	r3, r1
 8004d1a:	d012      	beq.n	8004d42 <HAL_DMA_IRQHandler+0xba>
 8004d1c:	4a61      	ldr	r2, [pc, #388]	; (8004ea4 <HAL_DMA_IRQHandler+0x21c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00f      	beq.n	8004d42 <HAL_DMA_IRQHandler+0xba>
 8004d22:	3214      	adds	r2, #20
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00c      	beq.n	8004d42 <HAL_DMA_IRQHandler+0xba>
 8004d28:	3214      	adds	r2, #20
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d009      	beq.n	8004d42 <HAL_DMA_IRQHandler+0xba>
 8004d2e:	3214      	adds	r2, #20
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d006      	beq.n	8004d42 <HAL_DMA_IRQHandler+0xba>
 8004d34:	3214      	adds	r2, #20
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <HAL_DMA_IRQHandler+0xba>
 8004d3a:	3214      	adds	r2, #20
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	f040 8261 	bne.w	8005204 <HAL_DMA_IRQHandler+0x57c>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d42:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004d46:	f001 011f 	and.w	r1, r1, #31
 8004d4a:	2004      	movs	r0, #4
 8004d4c:	4088      	lsls	r0, r1
 8004d4e:	ea10 0f0c 	tst.w	r0, ip
 8004d52:	f000 82a7 	beq.w	80052a4 <HAL_DMA_IRQHandler+0x61c>
 8004d56:	f012 0f04 	tst.w	r2, #4
 8004d5a:	f000 82a3 	beq.w	80052a4 <HAL_DMA_IRQHandler+0x61c>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d5e:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d60:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004d64:	f000 825a 	beq.w	800521c <HAL_DMA_IRQHandler+0x594>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d68:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8004d6c:	f040 8250 	bne.w	8005210 <HAL_DMA_IRQHandler+0x588>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004d70:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 8246 	beq.w	8005204 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1HalfCpltCallback(hdma);
 8004d78:	4620      	mov	r0, r4
 8004d7a:	4798      	blx	r3
 8004d7c:	e242      	b.n	8005204 <HAL_DMA_IRQHandler+0x57c>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d7e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004d80:	f002 011f 	and.w	r1, r2, #31
 8004d84:	2208      	movs	r2, #8
 8004d86:	408a      	lsls	r2, r1
 8004d88:	4232      	tst	r2, r6
 8004d8a:	d041      	beq.n	8004e10 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004d8c:	bb70      	cbnz	r0, 8004dec <HAL_DMA_IRQHandler+0x164>
 8004d8e:	4a42      	ldr	r2, [pc, #264]	; (8004e98 <HAL_DMA_IRQHandler+0x210>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d02b      	beq.n	8004dec <HAL_DMA_IRQHandler+0x164>
 8004d94:	3218      	adds	r2, #24
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d028      	beq.n	8004dec <HAL_DMA_IRQHandler+0x164>
 8004d9a:	3218      	adds	r2, #24
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d025      	beq.n	8004dec <HAL_DMA_IRQHandler+0x164>
 8004da0:	3218      	adds	r2, #24
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d022      	beq.n	8004dec <HAL_DMA_IRQHandler+0x164>
 8004da6:	3218      	adds	r2, #24
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d01f      	beq.n	8004dec <HAL_DMA_IRQHandler+0x164>
 8004dac:	3218      	adds	r2, #24
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d01c      	beq.n	8004dec <HAL_DMA_IRQHandler+0x164>
 8004db2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d018      	beq.n	8004dec <HAL_DMA_IRQHandler+0x164>
 8004dba:	3218      	adds	r2, #24
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d015      	beq.n	8004dec <HAL_DMA_IRQHandler+0x164>
 8004dc0:	3218      	adds	r2, #24
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d012      	beq.n	8004dec <HAL_DMA_IRQHandler+0x164>
 8004dc6:	3218      	adds	r2, #24
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00f      	beq.n	8004dec <HAL_DMA_IRQHandler+0x164>
 8004dcc:	3218      	adds	r2, #24
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d00c      	beq.n	8004dec <HAL_DMA_IRQHandler+0x164>
 8004dd2:	3218      	adds	r2, #24
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d009      	beq.n	8004dec <HAL_DMA_IRQHandler+0x164>
 8004dd8:	3218      	adds	r2, #24
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d006      	beq.n	8004dec <HAL_DMA_IRQHandler+0x164>
 8004dde:	3218      	adds	r2, #24
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d003      	beq.n	8004dec <HAL_DMA_IRQHandler+0x164>
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8004dea:	e002      	b.n	8004df2 <HAL_DMA_IRQHandler+0x16a>
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8004df2:	b16a      	cbz	r2, 8004e10 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	f022 0204 	bic.w	r2, r2, #4
 8004dfa:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004dfc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004dfe:	f003 021f 	and.w	r2, r3, #31
 8004e02:	2308      	movs	r3, #8
 8004e04:	4093      	lsls	r3, r2
 8004e06:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e08:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e10:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004e12:	f002 021f 	and.w	r2, r2, #31
 8004e16:	fa26 f302 	lsr.w	r3, r6, r2
 8004e1a:	f013 0f01 	tst.w	r3, #1
 8004e1e:	d047      	beq.n	8004eb0 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	481b      	ldr	r0, [pc, #108]	; (8004e90 <HAL_DMA_IRQHandler+0x208>)
 8004e24:	491b      	ldr	r1, [pc, #108]	; (8004e94 <HAL_DMA_IRQHandler+0x20c>)
 8004e26:	428b      	cmp	r3, r1
 8004e28:	bf18      	it	ne
 8004e2a:	4283      	cmpne	r3, r0
 8004e2c:	d03c      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e2e:	3118      	adds	r1, #24
 8004e30:	428b      	cmp	r3, r1
 8004e32:	d039      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e34:	3118      	adds	r1, #24
 8004e36:	428b      	cmp	r3, r1
 8004e38:	d036      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e3a:	3118      	adds	r1, #24
 8004e3c:	428b      	cmp	r3, r1
 8004e3e:	d033      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e40:	3118      	adds	r1, #24
 8004e42:	428b      	cmp	r3, r1
 8004e44:	d030      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e46:	3118      	adds	r1, #24
 8004e48:	428b      	cmp	r3, r1
 8004e4a:	d02d      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e4c:	3118      	adds	r1, #24
 8004e4e:	428b      	cmp	r3, r1
 8004e50:	d02a      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e52:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004e56:	428b      	cmp	r3, r1
 8004e58:	d026      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e5a:	3118      	adds	r1, #24
 8004e5c:	428b      	cmp	r3, r1
 8004e5e:	d023      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e60:	3118      	adds	r1, #24
 8004e62:	428b      	cmp	r3, r1
 8004e64:	d020      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e66:	3118      	adds	r1, #24
 8004e68:	428b      	cmp	r3, r1
 8004e6a:	d01d      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e6c:	3118      	adds	r1, #24
 8004e6e:	428b      	cmp	r3, r1
 8004e70:	d01a      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e72:	3118      	adds	r1, #24
 8004e74:	428b      	cmp	r3, r1
 8004e76:	d017      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e78:	3118      	adds	r1, #24
 8004e7a:	428b      	cmp	r3, r1
 8004e7c:	d014      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e7e:	3118      	adds	r1, #24
 8004e80:	428b      	cmp	r3, r1
 8004e82:	d011      	beq.n	8004ea8 <HAL_DMA_IRQHandler+0x220>
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	e013      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x228>
 8004e88:	20000af0 	.word	0x20000af0
 8004e8c:	1b4e81b5 	.word	0x1b4e81b5
 8004e90:	40020010 	.word	0x40020010
 8004e94:	40020028 	.word	0x40020028
 8004e98:	40020040 	.word	0x40020040
 8004e9c:	58025408 	.word	0x58025408
 8004ea0:	5802541c 	.word	0x5802541c
 8004ea4:	58025430 	.word	0x58025430
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004eae:	d13b      	bne.n	8004f28 <HAL_DMA_IRQHandler+0x2a0>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004eb0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004eb2:	f003 031f 	and.w	r3, r3, #31
 8004eb6:	2204      	movs	r2, #4
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	4233      	tst	r3, r6
 8004ebe:	d03f      	beq.n	8004f40 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004ec0:	6822      	ldr	r2, [r4, #0]
 8004ec2:	4896      	ldr	r0, [pc, #600]	; (800511c <HAL_DMA_IRQHandler+0x494>)
 8004ec4:	4996      	ldr	r1, [pc, #600]	; (8005120 <HAL_DMA_IRQHandler+0x498>)
 8004ec6:	428a      	cmp	r2, r1
 8004ec8:	bf18      	it	ne
 8004eca:	4282      	cmpne	r2, r0
 8004ecc:	d034      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004ece:	3118      	adds	r1, #24
 8004ed0:	428a      	cmp	r2, r1
 8004ed2:	d031      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004ed4:	3118      	adds	r1, #24
 8004ed6:	428a      	cmp	r2, r1
 8004ed8:	d02e      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004eda:	3118      	adds	r1, #24
 8004edc:	428a      	cmp	r2, r1
 8004ede:	d02b      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004ee0:	3118      	adds	r1, #24
 8004ee2:	428a      	cmp	r2, r1
 8004ee4:	d028      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004ee6:	3118      	adds	r1, #24
 8004ee8:	428a      	cmp	r2, r1
 8004eea:	d025      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004eec:	3118      	adds	r1, #24
 8004eee:	428a      	cmp	r2, r1
 8004ef0:	d022      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004ef2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004ef6:	428a      	cmp	r2, r1
 8004ef8:	d01e      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004efa:	3118      	adds	r1, #24
 8004efc:	428a      	cmp	r2, r1
 8004efe:	d01b      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004f00:	3118      	adds	r1, #24
 8004f02:	428a      	cmp	r2, r1
 8004f04:	d018      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004f06:	3118      	adds	r1, #24
 8004f08:	428a      	cmp	r2, r1
 8004f0a:	d015      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004f0c:	3118      	adds	r1, #24
 8004f0e:	428a      	cmp	r2, r1
 8004f10:	d012      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004f12:	3118      	adds	r1, #24
 8004f14:	428a      	cmp	r2, r1
 8004f16:	d00f      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004f18:	3118      	adds	r1, #24
 8004f1a:	428a      	cmp	r2, r1
 8004f1c:	d00c      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004f1e:	3118      	adds	r1, #24
 8004f20:	428a      	cmp	r2, r1
 8004f22:	d009      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x2b0>
 8004f24:	6813      	ldr	r3, [r2, #0]
 8004f26:	e00b      	b.n	8004f40 <HAL_DMA_IRQHandler+0x2b8>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f28:	2301      	movs	r3, #1
 8004f2a:	4093      	lsls	r3, r2
 8004f2c:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f30:	f043 0302 	orr.w	r3, r3, #2
 8004f34:	6563      	str	r3, [r4, #84]	; 0x54
 8004f36:	e7bb      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x228>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	f012 0f02 	tst.w	r2, #2
 8004f3e:	d13d      	bne.n	8004fbc <HAL_DMA_IRQHandler+0x334>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f40:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004f42:	f003 031f 	and.w	r3, r3, #31
 8004f46:	2210      	movs	r2, #16
 8004f48:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4c:	4233      	tst	r3, r6
 8004f4e:	d05f      	beq.n	8005010 <HAL_DMA_IRQHandler+0x388>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004f50:	6822      	ldr	r2, [r4, #0]
 8004f52:	4872      	ldr	r0, [pc, #456]	; (800511c <HAL_DMA_IRQHandler+0x494>)
 8004f54:	4972      	ldr	r1, [pc, #456]	; (8005120 <HAL_DMA_IRQHandler+0x498>)
 8004f56:	428a      	cmp	r2, r1
 8004f58:	bf18      	it	ne
 8004f5a:	4282      	cmpne	r2, r0
 8004f5c:	d034      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004f5e:	3118      	adds	r1, #24
 8004f60:	428a      	cmp	r2, r1
 8004f62:	d031      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004f64:	3118      	adds	r1, #24
 8004f66:	428a      	cmp	r2, r1
 8004f68:	d02e      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004f6a:	3118      	adds	r1, #24
 8004f6c:	428a      	cmp	r2, r1
 8004f6e:	d02b      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004f70:	3118      	adds	r1, #24
 8004f72:	428a      	cmp	r2, r1
 8004f74:	d028      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004f76:	3118      	adds	r1, #24
 8004f78:	428a      	cmp	r2, r1
 8004f7a:	d025      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004f7c:	3118      	adds	r1, #24
 8004f7e:	428a      	cmp	r2, r1
 8004f80:	d022      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004f82:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004f86:	428a      	cmp	r2, r1
 8004f88:	d01e      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004f8a:	3118      	adds	r1, #24
 8004f8c:	428a      	cmp	r2, r1
 8004f8e:	d01b      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004f90:	3118      	adds	r1, #24
 8004f92:	428a      	cmp	r2, r1
 8004f94:	d018      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004f96:	3118      	adds	r1, #24
 8004f98:	428a      	cmp	r2, r1
 8004f9a:	d015      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004f9c:	3118      	adds	r1, #24
 8004f9e:	428a      	cmp	r2, r1
 8004fa0:	d012      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004fa2:	3118      	adds	r1, #24
 8004fa4:	428a      	cmp	r2, r1
 8004fa6:	d00f      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004fa8:	3118      	adds	r1, #24
 8004faa:	428a      	cmp	r2, r1
 8004fac:	d00c      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004fae:	3118      	adds	r1, #24
 8004fb0:	428a      	cmp	r2, r1
 8004fb2:	d009      	beq.n	8004fc8 <HAL_DMA_IRQHandler+0x340>
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8004fba:	e008      	b.n	8004fce <HAL_DMA_IRQHandler+0x346>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fbc:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004fbe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004fc0:	f043 0304 	orr.w	r3, r3, #4
 8004fc4:	6563      	str	r3, [r4, #84]	; 0x54
 8004fc6:	e7bb      	b.n	8004f40 <HAL_DMA_IRQHandler+0x2b8>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004fc8:	6812      	ldr	r2, [r2, #0]
 8004fca:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8004fce:	b1fa      	cbz	r2, 8005010 <HAL_DMA_IRQHandler+0x388>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fd0:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8004fda:	d00d      	beq.n	8004ff8 <HAL_DMA_IRQHandler+0x370>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8004fe2:	d104      	bne.n	8004fee <HAL_DMA_IRQHandler+0x366>
            if(hdma->XferHalfCpltCallback != NULL)
 8004fe4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fe6:	b19b      	cbz	r3, 8005010 <HAL_DMA_IRQHandler+0x388>
              hdma->XferHalfCpltCallback(hdma);
 8004fe8:	4620      	mov	r0, r4
 8004fea:	4798      	blx	r3
 8004fec:	e010      	b.n	8005010 <HAL_DMA_IRQHandler+0x388>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004fee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004ff0:	b173      	cbz	r3, 8005010 <HAL_DMA_IRQHandler+0x388>
              hdma->XferM1HalfCpltCallback(hdma);
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4798      	blx	r3
 8004ff6:	e00b      	b.n	8005010 <HAL_DMA_IRQHandler+0x388>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	f412 7f80 	tst.w	r2, #256	; 0x100
 8004ffe:	d103      	bne.n	8005008 <HAL_DMA_IRQHandler+0x380>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	f022 0208 	bic.w	r2, r2, #8
 8005006:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8005008:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800500a:	b10b      	cbz	r3, 8005010 <HAL_DMA_IRQHandler+0x388>
            hdma->XferHalfCpltCallback(hdma);
 800500c:	4620      	mov	r0, r4
 800500e:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005010:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005012:	f003 031f 	and.w	r3, r3, #31
 8005016:	2220      	movs	r2, #32
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	4233      	tst	r3, r6
 800501e:	f000 8093 	beq.w	8005148 <HAL_DMA_IRQHandler+0x4c0>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005022:	6822      	ldr	r2, [r4, #0]
 8005024:	483d      	ldr	r0, [pc, #244]	; (800511c <HAL_DMA_IRQHandler+0x494>)
 8005026:	493e      	ldr	r1, [pc, #248]	; (8005120 <HAL_DMA_IRQHandler+0x498>)
 8005028:	428a      	cmp	r2, r1
 800502a:	bf18      	it	ne
 800502c:	4282      	cmpne	r2, r0
 800502e:	d02e      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 8005030:	3118      	adds	r1, #24
 8005032:	428a      	cmp	r2, r1
 8005034:	d02b      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 8005036:	3118      	adds	r1, #24
 8005038:	428a      	cmp	r2, r1
 800503a:	d028      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 800503c:	3118      	adds	r1, #24
 800503e:	428a      	cmp	r2, r1
 8005040:	d025      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 8005042:	3118      	adds	r1, #24
 8005044:	428a      	cmp	r2, r1
 8005046:	d022      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 8005048:	3118      	adds	r1, #24
 800504a:	428a      	cmp	r2, r1
 800504c:	d01f      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 800504e:	3118      	adds	r1, #24
 8005050:	428a      	cmp	r2, r1
 8005052:	d01c      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 8005054:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8005058:	428a      	cmp	r2, r1
 800505a:	d018      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 800505c:	3118      	adds	r1, #24
 800505e:	428a      	cmp	r2, r1
 8005060:	d015      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 8005062:	3118      	adds	r1, #24
 8005064:	428a      	cmp	r2, r1
 8005066:	d012      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 8005068:	3118      	adds	r1, #24
 800506a:	428a      	cmp	r2, r1
 800506c:	d00f      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 800506e:	3118      	adds	r1, #24
 8005070:	428a      	cmp	r2, r1
 8005072:	d00c      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 8005074:	3118      	adds	r1, #24
 8005076:	428a      	cmp	r2, r1
 8005078:	d009      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 800507a:	3118      	adds	r1, #24
 800507c:	428a      	cmp	r2, r1
 800507e:	d006      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 8005080:	3118      	adds	r1, #24
 8005082:	428a      	cmp	r2, r1
 8005084:	d003      	beq.n	800508e <HAL_DMA_IRQHandler+0x406>
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800508c:	e002      	b.n	8005094 <HAL_DMA_IRQHandler+0x40c>
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8005094:	2a00      	cmp	r2, #0
 8005096:	d057      	beq.n	8005148 <HAL_DMA_IRQHandler+0x4c0>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005098:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800509a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d00e      	beq.n	80050c2 <HAL_DMA_IRQHandler+0x43a>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80050ac:	d03a      	beq.n	8005124 <HAL_DMA_IRQHandler+0x49c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80050b4:	d12d      	bne.n	8005112 <HAL_DMA_IRQHandler+0x48a>
            if(hdma->XferM1CpltCallback != NULL)
 80050b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d045      	beq.n	8005148 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferM1CpltCallback(hdma);
 80050bc:	4620      	mov	r0, r4
 80050be:	4798      	blx	r3
 80050c0:	e042      	b.n	8005148 <HAL_DMA_IRQHandler+0x4c0>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	6813      	ldr	r3, [r2, #0]
 80050c6:	f023 0316 	bic.w	r3, r3, #22
 80050ca:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80050cc:	6822      	ldr	r2, [r4, #0]
 80050ce:	6953      	ldr	r3, [r2, #20]
 80050d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d4:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80050d8:	b1bb      	cbz	r3, 800510a <HAL_DMA_IRQHandler+0x482>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80050da:	6822      	ldr	r2, [r4, #0]
 80050dc:	6813      	ldr	r3, [r2, #0]
 80050de:	f023 0308 	bic.w	r3, r3, #8
 80050e2:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80050e6:	f003 021f 	and.w	r2, r3, #31
 80050ea:	233f      	movs	r3, #63	; 0x3f
 80050ec:	4093      	lsls	r3, r2
 80050ee:	60bb      	str	r3, [r7, #8]
          hdma->State = HAL_DMA_STATE_READY;
 80050f0:	2301      	movs	r3, #1
 80050f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80050f6:	2300      	movs	r3, #0
 80050f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 80050fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 8080 	beq.w	8005204 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferAbortCallback(hdma);
 8005104:	4620      	mov	r0, r4
 8005106:	4798      	blx	r3
          return;
 8005108:	e07c      	b.n	8005204 <HAL_DMA_IRQHandler+0x57c>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800510a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e4      	bne.n	80050da <HAL_DMA_IRQHandler+0x452>
 8005110:	e7e8      	b.n	80050e4 <HAL_DMA_IRQHandler+0x45c>
            if(hdma->XferCpltCallback != NULL)
 8005112:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005114:	b1c3      	cbz	r3, 8005148 <HAL_DMA_IRQHandler+0x4c0>
              hdma->XferCpltCallback(hdma);
 8005116:	4620      	mov	r0, r4
 8005118:	4798      	blx	r3
 800511a:	e015      	b.n	8005148 <HAL_DMA_IRQHandler+0x4c0>
 800511c:	40020010 	.word	0x40020010
 8005120:	40020028 	.word	0x40020028
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	f412 7f80 	tst.w	r2, #256	; 0x100
 800512a:	d109      	bne.n	8005140 <HAL_DMA_IRQHandler+0x4b8>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	f022 0210 	bic.w	r2, r2, #16
 8005132:	601a      	str	r2, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005134:	2301      	movs	r3, #1
 8005136:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 800513a:	2300      	movs	r3, #0
 800513c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          if(hdma->XferCpltCallback != NULL)
 8005140:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005142:	b10b      	cbz	r3, 8005148 <HAL_DMA_IRQHandler+0x4c0>
            hdma->XferCpltCallback(hdma);
 8005144:	4620      	mov	r0, r4
 8005146:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005148:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800514a:	2b00      	cmp	r3, #0
 800514c:	d05a      	beq.n	8005204 <HAL_DMA_IRQHandler+0x57c>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800514e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005150:	f013 0f01 	tst.w	r3, #1
 8005154:	d052      	beq.n	80051fc <HAL_DMA_IRQHandler+0x574>
        hdma->State = HAL_DMA_STATE_ABORT;
 8005156:	2304      	movs	r3, #4
 8005158:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	4996      	ldr	r1, [pc, #600]	; (80053b8 <HAL_DMA_IRQHandler+0x730>)
 8005160:	4a96      	ldr	r2, [pc, #600]	; (80053bc <HAL_DMA_IRQHandler+0x734>)
 8005162:	4293      	cmp	r3, r2
 8005164:	bf18      	it	ne
 8005166:	428b      	cmpne	r3, r1
 8005168:	d02f      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 800516a:	3218      	adds	r2, #24
 800516c:	4293      	cmp	r3, r2
 800516e:	d02c      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 8005170:	3218      	adds	r2, #24
 8005172:	4293      	cmp	r3, r2
 8005174:	d029      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 8005176:	3218      	adds	r2, #24
 8005178:	4293      	cmp	r3, r2
 800517a:	d026      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 800517c:	3218      	adds	r2, #24
 800517e:	4293      	cmp	r3, r2
 8005180:	d023      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 8005182:	3218      	adds	r2, #24
 8005184:	4293      	cmp	r3, r2
 8005186:	d020      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 8005188:	3218      	adds	r2, #24
 800518a:	4293      	cmp	r3, r2
 800518c:	d01d      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 800518e:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005192:	4293      	cmp	r3, r2
 8005194:	d019      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 8005196:	3218      	adds	r2, #24
 8005198:	4293      	cmp	r3, r2
 800519a:	d016      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 800519c:	3218      	adds	r2, #24
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 80051a2:	3218      	adds	r2, #24
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d010      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 80051a8:	3218      	adds	r2, #24
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00d      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 80051ae:	3218      	adds	r2, #24
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00a      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 80051b4:	3218      	adds	r2, #24
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d007      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 80051ba:	3218      	adds	r2, #24
 80051bc:	4293      	cmp	r3, r2
 80051be:	d004      	beq.n	80051ca <HAL_DMA_IRQHandler+0x542>
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	f022 0201 	bic.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	e003      	b.n	80051d2 <HAL_DMA_IRQHandler+0x54a>
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	f022 0201 	bic.w	r2, r2, #1
 80051d0:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 80051d2:	9b01      	ldr	r3, [sp, #4]
 80051d4:	3301      	adds	r3, #1
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	42ab      	cmp	r3, r5
 80051da:	d804      	bhi.n	80051e6 <HAL_DMA_IRQHandler+0x55e>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f013 0f01 	tst.w	r3, #1
 80051e4:	d1f5      	bne.n	80051d2 <HAL_DMA_IRQHandler+0x54a>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f013 0f01 	tst.w	r3, #1
 80051ee:	d00b      	beq.n	8005208 <HAL_DMA_IRQHandler+0x580>
          hdma->State = HAL_DMA_STATE_ERROR;
 80051f0:	2303      	movs	r3, #3
 80051f2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80051f6:	2300      	movs	r3, #0
 80051f8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 80051fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80051fe:	b10b      	cbz	r3, 8005204 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 8005200:	4620      	mov	r0, r4
 8005202:	4798      	blx	r3
}
 8005204:	b003      	add	sp, #12
 8005206:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 8005208:	2301      	movs	r3, #1
 800520a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 800520e:	e7f2      	b.n	80051f6 <HAL_DMA_IRQHandler+0x56e>
          if(hdma->XferHalfCpltCallback != NULL)
 8005210:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f6      	beq.n	8005204 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferHalfCpltCallback(hdma);
 8005216:	4620      	mov	r0, r4
 8005218:	4798      	blx	r3
 800521a:	e7f3      	b.n	8005204 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800521c:	f012 0f20 	tst.w	r2, #32
 8005220:	d13a      	bne.n	8005298 <HAL_DMA_IRQHandler+0x610>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	4964      	ldr	r1, [pc, #400]	; (80053b8 <HAL_DMA_IRQHandler+0x730>)
 8005226:	4a65      	ldr	r2, [pc, #404]	; (80053bc <HAL_DMA_IRQHandler+0x734>)
 8005228:	4293      	cmp	r3, r2
 800522a:	bf18      	it	ne
 800522c:	428b      	cmpne	r3, r1
 800522e:	d02f      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 8005230:	3218      	adds	r2, #24
 8005232:	4293      	cmp	r3, r2
 8005234:	d02c      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 8005236:	3218      	adds	r2, #24
 8005238:	4293      	cmp	r3, r2
 800523a:	d029      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 800523c:	3218      	adds	r2, #24
 800523e:	4293      	cmp	r3, r2
 8005240:	d026      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 8005242:	3218      	adds	r2, #24
 8005244:	4293      	cmp	r3, r2
 8005246:	d023      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 8005248:	3218      	adds	r2, #24
 800524a:	4293      	cmp	r3, r2
 800524c:	d020      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 800524e:	3218      	adds	r2, #24
 8005250:	4293      	cmp	r3, r2
 8005252:	d01d      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 8005254:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005258:	4293      	cmp	r3, r2
 800525a:	d019      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 800525c:	3218      	adds	r2, #24
 800525e:	4293      	cmp	r3, r2
 8005260:	d016      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 8005262:	3218      	adds	r2, #24
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 8005268:	3218      	adds	r2, #24
 800526a:	4293      	cmp	r3, r2
 800526c:	d010      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 800526e:	3218      	adds	r2, #24
 8005270:	4293      	cmp	r3, r2
 8005272:	d00d      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 8005274:	3218      	adds	r2, #24
 8005276:	4293      	cmp	r3, r2
 8005278:	d00a      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 800527a:	3218      	adds	r2, #24
 800527c:	4293      	cmp	r3, r2
 800527e:	d007      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 8005280:	3218      	adds	r2, #24
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <HAL_DMA_IRQHandler+0x608>
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	f022 0204 	bic.w	r2, r2, #4
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	e003      	b.n	8005298 <HAL_DMA_IRQHandler+0x610>
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	f022 0208 	bic.w	r2, r2, #8
 8005296:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8005298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0b2      	beq.n	8005204 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferHalfCpltCallback(hdma);
 800529e:	4620      	mov	r0, r4
 80052a0:	4798      	blx	r3
 80052a2:	e7af      	b.n	8005204 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80052a4:	2002      	movs	r0, #2
 80052a6:	4088      	lsls	r0, r1
 80052a8:	ea10 0f0c 	tst.w	r0, ip
 80052ac:	d060      	beq.n	8005370 <HAL_DMA_IRQHandler+0x6e8>
 80052ae:	f012 0f02 	tst.w	r2, #2
 80052b2:	d05d      	beq.n	8005370 <HAL_DMA_IRQHandler+0x6e8>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80052b4:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052b6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80052ba:	d00e      	beq.n	80052da <HAL_DMA_IRQHandler+0x652>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80052bc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80052c0:	d105      	bne.n	80052ce <HAL_DMA_IRQHandler+0x646>
          if(hdma->XferM1CpltCallback != NULL)
 80052c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d09d      	beq.n	8005204 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferM1CpltCallback(hdma);
 80052c8:	4620      	mov	r0, r4
 80052ca:	4798      	blx	r3
 80052cc:	e79a      	b.n	8005204 <HAL_DMA_IRQHandler+0x57c>
          if(hdma->XferCpltCallback != NULL)
 80052ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d097      	beq.n	8005204 <HAL_DMA_IRQHandler+0x57c>
            hdma->XferCpltCallback(hdma);
 80052d4:	4620      	mov	r0, r4
 80052d6:	4798      	blx	r3
 80052d8:	e794      	b.n	8005204 <HAL_DMA_IRQHandler+0x57c>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052da:	f012 0f20 	tst.w	r2, #32
 80052de:	d140      	bne.n	8005362 <HAL_DMA_IRQHandler+0x6da>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	4935      	ldr	r1, [pc, #212]	; (80053b8 <HAL_DMA_IRQHandler+0x730>)
 80052e4:	4a35      	ldr	r2, [pc, #212]	; (80053bc <HAL_DMA_IRQHandler+0x734>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	bf18      	it	ne
 80052ea:	428b      	cmpne	r3, r1
 80052ec:	d02f      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 80052ee:	3218      	adds	r2, #24
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d02c      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 80052f4:	3218      	adds	r2, #24
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d029      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 80052fa:	3218      	adds	r2, #24
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d026      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 8005300:	3218      	adds	r2, #24
 8005302:	4293      	cmp	r3, r2
 8005304:	d023      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 8005306:	3218      	adds	r2, #24
 8005308:	4293      	cmp	r3, r2
 800530a:	d020      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 800530c:	3218      	adds	r2, #24
 800530e:	4293      	cmp	r3, r2
 8005310:	d01d      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 8005312:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005316:	4293      	cmp	r3, r2
 8005318:	d019      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 800531a:	3218      	adds	r2, #24
 800531c:	4293      	cmp	r3, r2
 800531e:	d016      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 8005320:	3218      	adds	r2, #24
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 8005326:	3218      	adds	r2, #24
 8005328:	4293      	cmp	r3, r2
 800532a:	d010      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 800532c:	3218      	adds	r2, #24
 800532e:	4293      	cmp	r3, r2
 8005330:	d00d      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 8005332:	3218      	adds	r2, #24
 8005334:	4293      	cmp	r3, r2
 8005336:	d00a      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 8005338:	3218      	adds	r2, #24
 800533a:	4293      	cmp	r3, r2
 800533c:	d007      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 800533e:	3218      	adds	r2, #24
 8005340:	4293      	cmp	r3, r2
 8005342:	d004      	beq.n	800534e <HAL_DMA_IRQHandler+0x6c6>
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	f022 020a 	bic.w	r2, r2, #10
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	e003      	b.n	8005356 <HAL_DMA_IRQHandler+0x6ce>
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	f022 0214 	bic.w	r2, r2, #20
 8005354:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8005356:	2301      	movs	r3, #1
 8005358:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800535c:	2300      	movs	r3, #0
 800535e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8005362:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005364:	2b00      	cmp	r3, #0
 8005366:	f43f af4d 	beq.w	8005204 <HAL_DMA_IRQHandler+0x57c>
          hdma->XferCpltCallback(hdma);
 800536a:	4620      	mov	r0, r4
 800536c:	4798      	blx	r3
 800536e:	e749      	b.n	8005204 <HAL_DMA_IRQHandler+0x57c>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005370:	2008      	movs	r0, #8
 8005372:	fa00 f101 	lsl.w	r1, r0, r1
 8005376:	ea11 0f0c 	tst.w	r1, ip
 800537a:	f43f af43 	beq.w	8005204 <HAL_DMA_IRQHandler+0x57c>
 800537e:	f012 0f08 	tst.w	r2, #8
 8005382:	f43f af3f 	beq.w	8005204 <HAL_DMA_IRQHandler+0x57c>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	f022 020e 	bic.w	r2, r2, #14
 800538c:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800538e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	2201      	movs	r2, #1
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800539c:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_READY;
 800539e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80053a2:	2300      	movs	r3, #0
 80053a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if (hdma->XferErrorCallback != NULL)
 80053a8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f43f af2a 	beq.w	8005204 <HAL_DMA_IRQHandler+0x57c>
        hdma->XferErrorCallback(hdma);
 80053b0:	4620      	mov	r0, r4
 80053b2:	4798      	blx	r3
  }
 80053b4:	e726      	b.n	8005204 <HAL_DMA_IRQHandler+0x57c>
 80053b6:	bf00      	nop
 80053b8:	40020010 	.word	0x40020010
 80053bc:	40020028 	.word	0x40020028

080053c0 <HAL_DMA_GetState>:
  return hdma->State;
 80053c0:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 80053c4:	4770      	bx	lr

080053c6 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80053c6:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80053c8:	4770      	bx	lr
	...

080053cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ce:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80053d0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053d2:	e06b      	b.n	80054ac <HAL_GPIO_Init+0xe0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053d4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053d6:	005e      	lsls	r6, r3, #1
 80053d8:	2403      	movs	r4, #3
 80053da:	40b4      	lsls	r4, r6
 80053dc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053e0:	68cc      	ldr	r4, [r1, #12]
 80053e2:	40b4      	lsls	r4, r6
 80053e4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80053e6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80053e8:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80053ea:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80053ee:	684c      	ldr	r4, [r1, #4]
 80053f0:	f3c4 1400 	ubfx	r4, r4, #4, #1
 80053f4:	409c      	lsls	r4, r3
 80053f6:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 80053f8:	6044      	str	r4, [r0, #4]
 80053fa:	e069      	b.n	80054d0 <HAL_GPIO_Init+0x104>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053fc:	08dd      	lsrs	r5, r3, #3
 80053fe:	3508      	adds	r5, #8
 8005400:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005404:	f003 0c07 	and.w	ip, r3, #7
 8005408:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800540c:	f04f 0e0f 	mov.w	lr, #15
 8005410:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005414:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005418:	690c      	ldr	r4, [r1, #16]
 800541a:	fa04 f40c 	lsl.w	r4, r4, ip
 800541e:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8005422:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8005426:	e06b      	b.n	8005500 <HAL_GPIO_Init+0x134>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005428:	2409      	movs	r4, #9
 800542a:	e000      	b.n	800542e <HAL_GPIO_Init+0x62>
 800542c:	2400      	movs	r4, #0
 800542e:	fa04 f40e 	lsl.w	r4, r4, lr
 8005432:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005434:	f10c 0c02 	add.w	ip, ip, #2
 8005438:	4d69      	ldr	r5, [pc, #420]	; (80055e0 <HAL_GPIO_Init+0x214>)
 800543a:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800543e:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8005442:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8005444:	43d4      	mvns	r4, r2
 8005446:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800544a:	684f      	ldr	r7, [r1, #4]
 800544c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8005450:	d001      	beq.n	8005456 <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8005452:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8005456:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800545a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 800545c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 800545e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005462:	684f      	ldr	r7, [r1, #4]
 8005464:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8005468:	d001      	beq.n	800546e <HAL_GPIO_Init+0xa2>
        {
          temp |= iocurrent;
 800546a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 800546e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8005472:	606e      	str	r6, [r5, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005474:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8005478:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800547c:	684f      	ldr	r7, [r1, #4]
 800547e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8005482:	d001      	beq.n	8005488 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8005484:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005488:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800548c:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005490:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
        temp &= ~(iocurrent);
 8005494:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005496:	684e      	ldr	r6, [r1, #4]
 8005498:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 800549c:	d001      	beq.n	80054a2 <HAL_GPIO_Init+0xd6>
        {
          temp |= iocurrent;
 800549e:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80054a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054a6:	f8c2 4080 	str.w	r4, [r2, #128]	; 0x80
      }
    }

    position++;
 80054aa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80054ac:	680a      	ldr	r2, [r1, #0]
 80054ae:	fa32 f403 	lsrs.w	r4, r2, r3
 80054b2:	f000 8092 	beq.w	80055da <HAL_GPIO_Init+0x20e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80054b6:	f04f 0c01 	mov.w	ip, #1
 80054ba:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00U)
 80054be:	ea1c 0202 	ands.w	r2, ip, r2
 80054c2:	d0f2      	beq.n	80054aa <HAL_GPIO_Init+0xde>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054c4:	684c      	ldr	r4, [r1, #4]
 80054c6:	f004 0403 	and.w	r4, r4, #3
 80054ca:	3c01      	subs	r4, #1
 80054cc:	2c01      	cmp	r4, #1
 80054ce:	d981      	bls.n	80053d4 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054d0:	684c      	ldr	r4, [r1, #4]
 80054d2:	f004 0403 	and.w	r4, r4, #3
 80054d6:	2c03      	cmp	r4, #3
 80054d8:	d00c      	beq.n	80054f4 <HAL_GPIO_Init+0x128>
      temp = GPIOx->PUPDR;
 80054da:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80054dc:	005d      	lsls	r5, r3, #1
 80054de:	f04f 0c03 	mov.w	ip, #3
 80054e2:	fa0c fc05 	lsl.w	ip, ip, r5
 80054e6:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80054ea:	688c      	ldr	r4, [r1, #8]
 80054ec:	40ac      	lsls	r4, r5
 80054ee:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->PUPDR = temp;
 80054f2:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054f4:	684c      	ldr	r4, [r1, #4]
 80054f6:	f004 0403 	and.w	r4, r4, #3
 80054fa:	2c02      	cmp	r4, #2
 80054fc:	f43f af7e 	beq.w	80053fc <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 8005500:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005502:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8005506:	f04f 0c03 	mov.w	ip, #3
 800550a:	fa0c fc0e 	lsl.w	ip, ip, lr
 800550e:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005512:	684c      	ldr	r4, [r1, #4]
 8005514:	f004 0403 	and.w	r4, r4, #3
 8005518:	fa04 f40e 	lsl.w	r4, r4, lr
 800551c:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8005520:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005522:	684c      	ldr	r4, [r1, #4]
 8005524:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8005528:	d0bf      	beq.n	80054aa <HAL_GPIO_Init+0xde>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800552a:	4c2e      	ldr	r4, [pc, #184]	; (80055e4 <HAL_GPIO_Init+0x218>)
 800552c:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8005530:	f045 0502 	orr.w	r5, r5, #2
 8005534:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8005538:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 800553c:	f004 0402 	and.w	r4, r4, #2
 8005540:	9401      	str	r4, [sp, #4]
 8005542:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005544:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8005548:	f10c 0502 	add.w	r5, ip, #2
 800554c:	4c24      	ldr	r4, [pc, #144]	; (80055e0 <HAL_GPIO_Init+0x214>)
 800554e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005552:	f003 0e03 	and.w	lr, r3, #3
 8005556:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800555a:	240f      	movs	r4, #15
 800555c:	fa04 f40e 	lsl.w	r4, r4, lr
 8005560:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005564:	4c20      	ldr	r4, [pc, #128]	; (80055e8 <HAL_GPIO_Init+0x21c>)
 8005566:	42a0      	cmp	r0, r4
 8005568:	f43f af60 	beq.w	800542c <HAL_GPIO_Init+0x60>
 800556c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005570:	42a0      	cmp	r0, r4
 8005572:	d022      	beq.n	80055ba <HAL_GPIO_Init+0x1ee>
 8005574:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005578:	42a0      	cmp	r0, r4
 800557a:	d020      	beq.n	80055be <HAL_GPIO_Init+0x1f2>
 800557c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005580:	42a0      	cmp	r0, r4
 8005582:	d01e      	beq.n	80055c2 <HAL_GPIO_Init+0x1f6>
 8005584:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005588:	42a0      	cmp	r0, r4
 800558a:	d01c      	beq.n	80055c6 <HAL_GPIO_Init+0x1fa>
 800558c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005590:	42a0      	cmp	r0, r4
 8005592:	d01a      	beq.n	80055ca <HAL_GPIO_Init+0x1fe>
 8005594:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005598:	42a0      	cmp	r0, r4
 800559a:	d018      	beq.n	80055ce <HAL_GPIO_Init+0x202>
 800559c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80055a0:	42a0      	cmp	r0, r4
 80055a2:	d016      	beq.n	80055d2 <HAL_GPIO_Init+0x206>
 80055a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80055a8:	42a0      	cmp	r0, r4
 80055aa:	d014      	beq.n	80055d6 <HAL_GPIO_Init+0x20a>
 80055ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80055b0:	42a0      	cmp	r0, r4
 80055b2:	f43f af39 	beq.w	8005428 <HAL_GPIO_Init+0x5c>
 80055b6:	240a      	movs	r4, #10
 80055b8:	e739      	b.n	800542e <HAL_GPIO_Init+0x62>
 80055ba:	2401      	movs	r4, #1
 80055bc:	e737      	b.n	800542e <HAL_GPIO_Init+0x62>
 80055be:	2402      	movs	r4, #2
 80055c0:	e735      	b.n	800542e <HAL_GPIO_Init+0x62>
 80055c2:	2403      	movs	r4, #3
 80055c4:	e733      	b.n	800542e <HAL_GPIO_Init+0x62>
 80055c6:	2404      	movs	r4, #4
 80055c8:	e731      	b.n	800542e <HAL_GPIO_Init+0x62>
 80055ca:	2405      	movs	r4, #5
 80055cc:	e72f      	b.n	800542e <HAL_GPIO_Init+0x62>
 80055ce:	2406      	movs	r4, #6
 80055d0:	e72d      	b.n	800542e <HAL_GPIO_Init+0x62>
 80055d2:	2407      	movs	r4, #7
 80055d4:	e72b      	b.n	800542e <HAL_GPIO_Init+0x62>
 80055d6:	2408      	movs	r4, #8
 80055d8:	e729      	b.n	800542e <HAL_GPIO_Init+0x62>
  }
}
 80055da:	b003      	add	sp, #12
 80055dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055de:	bf00      	nop
 80055e0:	58000400 	.word	0x58000400
 80055e4:	58024400 	.word	0x58024400
 80055e8:	58020000 	.word	0x58020000

080055ec <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80055ec:	6903      	ldr	r3, [r0, #16]
 80055ee:	4219      	tst	r1, r3
 80055f0:	d001      	beq.n	80055f6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80055f2:	2001      	movs	r0, #1
 80055f4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80055f6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80055f8:	4770      	bx	lr

080055fa <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055fa:	b10a      	cbz	r2, 8005600 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055fc:	6181      	str	r1, [r0, #24]
 80055fe:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005600:	0409      	lsls	r1, r1, #16
 8005602:	6181      	str	r1, [r0, #24]
  }
}
 8005604:	4770      	bx	lr

08005606 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005606:	6803      	ldr	r3, [r0, #0]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	f012 0f02 	tst.w	r2, #2
 800560e:	d001      	beq.n	8005614 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005610:	2200      	movs	r2, #0
 8005612:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005614:	6803      	ldr	r3, [r0, #0]
 8005616:	699a      	ldr	r2, [r3, #24]
 8005618:	f012 0f01 	tst.w	r2, #1
 800561c:	d103      	bne.n	8005626 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800561e:	699a      	ldr	r2, [r3, #24]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	619a      	str	r2, [r3, #24]
  }
}
 8005626:	4770      	bx	lr

08005628 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005628:	b410      	push	{r4}
 800562a:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800562c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8005630:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005634:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005636:	4321      	orrs	r1, r4
 8005638:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800563c:	6802      	ldr	r2, [r0, #0]
 800563e:	6853      	ldr	r3, [r2, #4]
 8005640:	0d64      	lsrs	r4, r4, #21
 8005642:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8005646:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800564a:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800564e:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8005652:	f044 0403 	orr.w	r4, r4, #3
 8005656:	ea23 0304 	bic.w	r3, r3, r4
 800565a:	430b      	orrs	r3, r1
 800565c:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800565e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005662:	4770      	bx	lr

08005664 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005664:	f011 0f01 	tst.w	r1, #1
 8005668:	d009      	beq.n	800567e <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800566a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800566e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005672:	2b28      	cmp	r3, #40	; 0x28
 8005674:	d001      	beq.n	800567a <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005676:	23f2      	movs	r3, #242	; 0xf2
 8005678:	e002      	b.n	8005680 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800567a:	2342      	movs	r3, #66	; 0x42
 800567c:	e000      	b.n	8005680 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 800567e:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005680:	f011 0f02 	tst.w	r1, #2
 8005684:	d009      	beq.n	800569a <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005686:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800568a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800568e:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8005692:	2a28      	cmp	r2, #40	; 0x28
 8005694:	d010      	beq.n	80056b8 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005696:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800569a:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 800569e:	d10d      	bne.n	80056bc <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80056a0:	2910      	cmp	r1, #16
 80056a2:	d00e      	beq.n	80056c2 <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80056a4:	2920      	cmp	r1, #32
 80056a6:	d00f      	beq.n	80056c8 <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80056a8:	2940      	cmp	r1, #64	; 0x40
 80056aa:	d010      	beq.n	80056ce <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80056ac:	6801      	ldr	r1, [r0, #0]
 80056ae:	680a      	ldr	r2, [r1, #0]
 80056b0:	ea22 0303 	bic.w	r3, r2, r3
 80056b4:	600b      	str	r3, [r1, #0]
}
 80056b6:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80056b8:	4663      	mov	r3, ip
 80056ba:	e7ee      	b.n	800569a <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80056bc:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80056c0:	e7ee      	b.n	80056a0 <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80056c2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80056c6:	e7ed      	b.n	80056a4 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 80056c8:	f043 0320 	orr.w	r3, r3, #32
 80056cc:	e7ec      	b.n	80056a8 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 80056ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d2:	e7eb      	b.n	80056ac <I2C_Disable_IRQ+0x48>

080056d4 <I2C_IsErrorOccurred>:
{
 80056d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d8:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 80056da:	6803      	ldr	r3, [r0, #0]
 80056dc:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80056de:	f016 0610 	ands.w	r6, r6, #16
 80056e2:	d07e      	beq.n	80057e2 <I2C_IsErrorOccurred+0x10e>
 80056e4:	460d      	mov	r5, r1
 80056e6:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056e8:	2210      	movs	r2, #16
 80056ea:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 80056ec:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 80056ee:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056f0:	6823      	ldr	r3, [r4, #0]
 80056f2:	6998      	ldr	r0, [r3, #24]
 80056f4:	f010 0f20 	tst.w	r0, #32
 80056f8:	d132      	bne.n	8005760 <I2C_IsErrorOccurred+0x8c>
 80056fa:	bb8f      	cbnz	r7, 8005760 <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 80056fc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8005700:	d0f6      	beq.n	80056f0 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005702:	f7fe f9d7 	bl	8003ab4 <HAL_GetTick>
 8005706:	eba0 0008 	sub.w	r0, r0, r8
 800570a:	42a8      	cmp	r0, r5
 800570c:	d801      	bhi.n	8005712 <I2C_IsErrorOccurred+0x3e>
 800570e:	2d00      	cmp	r5, #0
 8005710:	d1ee      	bne.n	80056f0 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005712:	6821      	ldr	r1, [r4, #0]
 8005714:	684a      	ldr	r2, [r1, #4]
 8005716:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 800571a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800571e:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005720:	6988      	ldr	r0, [r1, #24]
 8005722:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8005726:	d004      	beq.n	8005732 <I2C_IsErrorOccurred+0x5e>
              (tmp2 != HAL_I2C_MODE_SLAVE))
 8005728:	3b20      	subs	r3, #32
 800572a:	bf18      	it	ne
 800572c:	2301      	movne	r3, #1
              (tmp1 != I2C_CR2_STOP) && \
 800572e:	b902      	cbnz	r2, 8005732 <I2C_IsErrorOccurred+0x5e>
 8005730:	b973      	cbnz	r3, 8005750 <I2C_IsErrorOccurred+0x7c>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	f013 0f20 	tst.w	r3, #32
 800573a:	d1d9      	bne.n	80056f0 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800573c:	f7fe f9ba 	bl	8003ab4 <HAL_GetTick>
 8005740:	eba0 0008 	sub.w	r0, r0, r8
 8005744:	2819      	cmp	r0, #25
 8005746:	d9f4      	bls.n	8005732 <I2C_IsErrorOccurred+0x5e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005748:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 800574c:	2701      	movs	r7, #1
              break;
 800574e:	e7cf      	b.n	80056f0 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005750:	684b      	ldr	r3, [r1, #4]
 8005752:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005756:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 8005758:	f7fe f9ac 	bl	8003ab4 <HAL_GetTick>
 800575c:	4680      	mov	r8, r0
 800575e:	e7e8      	b.n	8005732 <I2C_IsErrorOccurred+0x5e>
    if (status == HAL_OK)
 8005760:	b90f      	cbnz	r7, 8005766 <I2C_IsErrorOccurred+0x92>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005762:	2220      	movs	r2, #32
 8005764:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8005766:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 800576a:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 800576c:	6822      	ldr	r2, [r4, #0]
 800576e:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005770:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005774:	d005      	beq.n	8005782 <I2C_IsErrorOccurred+0xae>
    error_code |= HAL_I2C_ERROR_BERR;
 8005776:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800577a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800577e:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005780:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005782:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005786:	d006      	beq.n	8005796 <I2C_IsErrorOccurred+0xc2>
    error_code |= HAL_I2C_ERROR_OVR;
 8005788:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800578c:	6822      	ldr	r2, [r4, #0]
 800578e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005792:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8005794:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005796:	f413 7f00 	tst.w	r3, #512	; 0x200
 800579a:	d024      	beq.n	80057e6 <I2C_IsErrorOccurred+0x112>
    error_code |= HAL_I2C_ERROR_ARLO;
 800579c:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80057a0:	6823      	ldr	r3, [r4, #0]
 80057a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057a6:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 80057a8:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 80057aa:	4620      	mov	r0, r4
 80057ac:	f7ff ff2b 	bl	8005606 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80057b0:	6822      	ldr	r2, [r4, #0]
 80057b2:	6853      	ldr	r3, [r2, #4]
 80057b4:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80057b8:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80057bc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80057c0:	f023 0301 	bic.w	r3, r3, #1
 80057c4:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 80057c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80057c8:	4333      	orrs	r3, r6
 80057ca:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80057cc:	2320      	movs	r3, #32
 80057ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d2:	2300      	movs	r3, #0
 80057d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 80057d8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80057dc:	4628      	mov	r0, r5
 80057de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80057e2:	2500      	movs	r5, #0
 80057e4:	e7c2      	b.n	800576c <I2C_IsErrorOccurred+0x98>
  if (status != HAL_OK)
 80057e6:	2d00      	cmp	r5, #0
 80057e8:	d0f8      	beq.n	80057dc <I2C_IsErrorOccurred+0x108>
 80057ea:	e7de      	b.n	80057aa <I2C_IsErrorOccurred+0xd6>

080057ec <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	4604      	mov	r4, r0
 80057f0:	460d      	mov	r5, r1
 80057f2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057f4:	6823      	ldr	r3, [r4, #0]
 80057f6:	699b      	ldr	r3, [r3, #24]
 80057f8:	f013 0f02 	tst.w	r3, #2
 80057fc:	d122      	bne.n	8005844 <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057fe:	4632      	mov	r2, r6
 8005800:	4629      	mov	r1, r5
 8005802:	4620      	mov	r0, r4
 8005804:	f7ff ff66 	bl	80056d4 <I2C_IsErrorOccurred>
 8005808:	b9f0      	cbnz	r0, 8005848 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800580a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800580e:	d0f1      	beq.n	80057f4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005810:	f7fe f950 	bl	8003ab4 <HAL_GetTick>
 8005814:	1b80      	subs	r0, r0, r6
 8005816:	42a8      	cmp	r0, r5
 8005818:	d801      	bhi.n	800581e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800581a:	2d00      	cmp	r5, #0
 800581c:	d1ea      	bne.n	80057f4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	f013 0f02 	tst.w	r3, #2
 8005826:	d1e5      	bne.n	80057f4 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005828:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800582a:	f043 0320 	orr.w	r3, r3, #32
 800582e:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005830:	2320      	movs	r3, #32
 8005832:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005836:	2300      	movs	r3, #0
 8005838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 800583c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          return HAL_ERROR;
 8005840:	2001      	movs	r0, #1
 8005842:	e000      	b.n	8005846 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 8005844:	2000      	movs	r0, #0
}
 8005846:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005848:	2001      	movs	r0, #1
 800584a:	e7fc      	b.n	8005846 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

0800584c <I2C_WaitOnFlagUntilTimeout>:
{
 800584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005850:	4605      	mov	r5, r0
 8005852:	460f      	mov	r7, r1
 8005854:	4616      	mov	r6, r2
 8005856:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005858:	682c      	ldr	r4, [r5, #0]
 800585a:	69a4      	ldr	r4, [r4, #24]
 800585c:	ea37 0404 	bics.w	r4, r7, r4
 8005860:	bf0c      	ite	eq
 8005862:	2401      	moveq	r4, #1
 8005864:	2400      	movne	r4, #0
 8005866:	42b4      	cmp	r4, r6
 8005868:	d122      	bne.n	80058b0 <I2C_WaitOnFlagUntilTimeout+0x64>
    if (Timeout != HAL_MAX_DELAY)
 800586a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800586e:	d0f3      	beq.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005870:	f7fe f920 	bl	8003ab4 <HAL_GetTick>
 8005874:	9b06      	ldr	r3, [sp, #24]
 8005876:	1ac0      	subs	r0, r0, r3
 8005878:	4540      	cmp	r0, r8
 800587a:	d802      	bhi.n	8005882 <I2C_WaitOnFlagUntilTimeout+0x36>
 800587c:	f1b8 0f00 	cmp.w	r8, #0
 8005880:	d1ea      	bne.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005882:	682b      	ldr	r3, [r5, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	ea37 0303 	bics.w	r3, r7, r3
 800588a:	bf0c      	ite	eq
 800588c:	2301      	moveq	r3, #1
 800588e:	2300      	movne	r3, #0
 8005890:	42b3      	cmp	r3, r6
 8005892:	d1e1      	bne.n	8005858 <I2C_WaitOnFlagUntilTimeout+0xc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005894:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005896:	f043 0320 	orr.w	r3, r3, #32
 800589a:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800589c:	2320      	movs	r3, #32
 800589e:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058a2:	2300      	movs	r3, #0
 80058a4:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 80058a8:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 80058ac:	2001      	movs	r0, #1
 80058ae:	e000      	b.n	80058b2 <I2C_WaitOnFlagUntilTimeout+0x66>
  return HAL_OK;
 80058b0:	2000      	movs	r0, #0
}
 80058b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080058b6 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80058b6:	b570      	push	{r4, r5, r6, lr}
 80058b8:	4604      	mov	r4, r0
 80058ba:	460d      	mov	r5, r1
 80058bc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058be:	e004      	b.n	80058ca <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	f013 0f20 	tst.w	r3, #32
 80058c8:	d012      	beq.n	80058f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f013 0f20 	tst.w	r3, #32
 80058d2:	d11b      	bne.n	800590c <I2C_WaitOnSTOPFlagUntilTimeout+0x56>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80058d4:	4632      	mov	r2, r6
 80058d6:	4629      	mov	r1, r5
 80058d8:	4620      	mov	r0, r4
 80058da:	f7ff fefb 	bl	80056d4 <I2C_IsErrorOccurred>
 80058de:	b9b8      	cbnz	r0, 8005910 <I2C_WaitOnSTOPFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e0:	f7fe f8e8 	bl	8003ab4 <HAL_GetTick>
 80058e4:	1b80      	subs	r0, r0, r6
 80058e6:	42a8      	cmp	r0, r5
 80058e8:	d8ea      	bhi.n	80058c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 80058ea:	2d00      	cmp	r5, #0
 80058ec:	d1ed      	bne.n	80058ca <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
 80058ee:	e7e7      	b.n	80058c0 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058f0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80058f2:	f043 0320 	orr.w	r3, r3, #32
 80058f6:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80058f8:	2320      	movs	r3, #32
 80058fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058fe:	2300      	movs	r3, #0
 8005900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8005904:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8005908:	2001      	movs	r0, #1
 800590a:	e000      	b.n	800590e <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
  return HAL_OK;
 800590c:	2000      	movs	r0, #0
}
 800590e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005910:	2001      	movs	r0, #1
 8005912:	e7fc      	b.n	800590e <I2C_WaitOnSTOPFlagUntilTimeout+0x58>

08005914 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8005914:	2800      	cmp	r0, #0
 8005916:	d057      	beq.n	80059c8 <HAL_I2C_Init+0xb4>
{
 8005918:	b510      	push	{r4, lr}
 800591a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800591c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005920:	2b00      	cmp	r3, #0
 8005922:	d041      	beq.n	80059a8 <HAL_I2C_Init+0x94>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005924:	2324      	movs	r3, #36	; 0x24
 8005926:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800592a:	6822      	ldr	r2, [r4, #0]
 800592c:	6813      	ldr	r3, [r2, #0]
 800592e:	f023 0301 	bic.w	r3, r3, #1
 8005932:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005934:	6863      	ldr	r3, [r4, #4]
 8005936:	6822      	ldr	r2, [r4, #0]
 8005938:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800593c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	6893      	ldr	r3, [r2, #8]
 8005942:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005946:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005948:	68e3      	ldr	r3, [r4, #12]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d031      	beq.n	80059b2 <HAL_I2C_Init+0x9e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800594e:	68a3      	ldr	r3, [r4, #8]
 8005950:	6822      	ldr	r2, [r4, #0]
 8005952:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8005956:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005958:	68e3      	ldr	r3, [r4, #12]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d02f      	beq.n	80059be <HAL_I2C_Init+0xaa>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800595e:	6822      	ldr	r2, [r4, #0]
 8005960:	6851      	ldr	r1, [r2, #4]
 8005962:	4b1a      	ldr	r3, [pc, #104]	; (80059cc <HAL_I2C_Init+0xb8>)
 8005964:	430b      	orrs	r3, r1
 8005966:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005968:	6822      	ldr	r2, [r4, #0]
 800596a:	68d3      	ldr	r3, [r2, #12]
 800596c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005970:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	6962      	ldr	r2, [r4, #20]
 8005976:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005978:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800597a:	6822      	ldr	r2, [r4, #0]
 800597c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005980:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005982:	69e3      	ldr	r3, [r4, #28]
 8005984:	6a21      	ldr	r1, [r4, #32]
 8005986:	6822      	ldr	r2, [r4, #0]
 8005988:	430b      	orrs	r3, r1
 800598a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800598c:	6822      	ldr	r2, [r4, #0]
 800598e:	6813      	ldr	r3, [r2, #0]
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005996:	2000      	movs	r0, #0
 8005998:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800599a:	2320      	movs	r3, #32
 800599c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80059a0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80059a6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80059a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80059ac:	f7fb fbf8 	bl	80011a0 <HAL_I2C_MspInit>
 80059b0:	e7b8      	b.n	8005924 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059b2:	68a3      	ldr	r3, [r4, #8]
 80059b4:	6822      	ldr	r2, [r4, #0]
 80059b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ba:	6093      	str	r3, [r2, #8]
 80059bc:	e7cc      	b.n	8005958 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059c4:	605a      	str	r2, [r3, #4]
 80059c6:	e7ca      	b.n	800595e <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 80059c8:	2001      	movs	r0, #1
}
 80059ca:	4770      	bx	lr
 80059cc:	02008000 	.word	0x02008000

080059d0 <HAL_I2C_Master_Transmit>:
{
 80059d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	460f      	mov	r7, r1
 80059d8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80059da:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80059de:	b2c9      	uxtb	r1, r1
 80059e0:	2920      	cmp	r1, #32
 80059e2:	f040 80a3 	bne.w	8005b2c <HAL_I2C_Master_Transmit+0x15c>
 80059e6:	4604      	mov	r4, r0
 80059e8:	4690      	mov	r8, r2
 80059ea:	4699      	mov	r9, r3
    __HAL_LOCK(hi2c);
 80059ec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	f000 809f 	beq.w	8005b34 <HAL_I2C_Master_Transmit+0x164>
 80059f6:	f04f 0a01 	mov.w	sl, #1
 80059fa:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80059fe:	f7fe f859 	bl	8003ab4 <HAL_GetTick>
 8005a02:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a04:	9000      	str	r0, [sp, #0]
 8005a06:	2319      	movs	r3, #25
 8005a08:	4652      	mov	r2, sl
 8005a0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f7ff ff1c 	bl	800584c <I2C_WaitOnFlagUntilTimeout>
 8005a14:	2800      	cmp	r0, #0
 8005a16:	f040 808f 	bne.w	8005b38 <HAL_I2C_Master_Transmit+0x168>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005a1a:	2321      	movs	r3, #33	; 0x21
 8005a1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005a20:	2310      	movs	r3, #16
 8005a22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005a2a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a2e:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a32:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	2bff      	cmp	r3, #255	; 0xff
 8005a3a:	d90a      	bls.n	8005a52 <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a3c:	22ff      	movs	r2, #255	; 0xff
 8005a3e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a40:	4b41      	ldr	r3, [pc, #260]	; (8005b48 <HAL_I2C_Master_Transmit+0x178>)
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a48:	4639      	mov	r1, r7
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	f7ff fdec 	bl	8005628 <I2C_TransferConfig>
 8005a50:	e018      	b.n	8005a84 <HAL_I2C_Master_Transmit+0xb4>
      hi2c->XferSize = hi2c->XferCount;
 8005a52:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005a54:	b292      	uxth	r2, r2
 8005a56:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a58:	4b3b      	ldr	r3, [pc, #236]	; (8005b48 <HAL_I2C_Master_Transmit+0x178>)
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	4639      	mov	r1, r7
 8005a64:	4620      	mov	r0, r4
 8005a66:	f7ff fddf 	bl	8005628 <I2C_TransferConfig>
 8005a6a:	e00b      	b.n	8005a84 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8005a6c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005a6e:	b292      	uxth	r2, r2
 8005a70:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a72:	2300      	movs	r3, #0
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	4639      	mov	r1, r7
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f7ff fdd2 	bl	8005628 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005a84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d033      	beq.n	8005af4 <HAL_I2C_Master_Transmit+0x124>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a8c:	462a      	mov	r2, r5
 8005a8e:	4631      	mov	r1, r6
 8005a90:	4620      	mov	r0, r4
 8005a92:	f7ff feab 	bl	80057ec <I2C_WaitOnTXISFlagUntilTimeout>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d150      	bne.n	8005b3c <HAL_I2C_Master_Transmit+0x16c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	7812      	ldrb	r2, [r2, #0]
 8005aa0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005aa8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	3b01      	subs	r3, #1
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005ab2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005aba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005abc:	b292      	uxth	r2, r2
 8005abe:	2a00      	cmp	r2, #0
 8005ac0:	d0e0      	beq.n	8005a84 <HAL_I2C_Master_Transmit+0xb4>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1de      	bne.n	8005a84 <HAL_I2C_Master_Transmit+0xb4>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ac6:	9500      	str	r5, [sp, #0]
 8005ac8:	4633      	mov	r3, r6
 8005aca:	2200      	movs	r2, #0
 8005acc:	2180      	movs	r1, #128	; 0x80
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f7ff febc 	bl	800584c <I2C_WaitOnFlagUntilTimeout>
 8005ad4:	bba0      	cbnz	r0, 8005b40 <HAL_I2C_Master_Transmit+0x170>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ad6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	2bff      	cmp	r3, #255	; 0xff
 8005adc:	d9c6      	bls.n	8005a6c <HAL_I2C_Master_Transmit+0x9c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ade:	22ff      	movs	r2, #255	; 0xff
 8005ae0:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005aea:	4639      	mov	r1, r7
 8005aec:	4620      	mov	r0, r4
 8005aee:	f7ff fd9b 	bl	8005628 <I2C_TransferConfig>
 8005af2:	e7c7      	b.n	8005a84 <HAL_I2C_Master_Transmit+0xb4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005af4:	462a      	mov	r2, r5
 8005af6:	4631      	mov	r1, r6
 8005af8:	4620      	mov	r0, r4
 8005afa:	f7ff fedc 	bl	80058b6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005afe:	bb08      	cbnz	r0, 8005b44 <HAL_I2C_Master_Transmit+0x174>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	2220      	movs	r2, #32
 8005b04:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005b06:	6821      	ldr	r1, [r4, #0]
 8005b08:	684b      	ldr	r3, [r1, #4]
 8005b0a:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005b0e:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005b12:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005b16:	f023 0301 	bic.w	r3, r3, #1
 8005b1a:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b1c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b20:	2300      	movs	r3, #0
 8005b22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8005b26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8005b2a:	e000      	b.n	8005b2e <HAL_I2C_Master_Transmit+0x15e>
    return HAL_BUSY;
 8005b2c:	2002      	movs	r0, #2
}
 8005b2e:	b002      	add	sp, #8
 8005b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 8005b34:	2002      	movs	r0, #2
 8005b36:	e7fa      	b.n	8005b2e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005b38:	2001      	movs	r0, #1
 8005b3a:	e7f8      	b.n	8005b2e <HAL_I2C_Master_Transmit+0x15e>
        return HAL_ERROR;
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	e7f6      	b.n	8005b2e <HAL_I2C_Master_Transmit+0x15e>
          return HAL_ERROR;
 8005b40:	2001      	movs	r0, #1
 8005b42:	e7f4      	b.n	8005b2e <HAL_I2C_Master_Transmit+0x15e>
      return HAL_ERROR;
 8005b44:	2001      	movs	r0, #1
 8005b46:	e7f2      	b.n	8005b2e <HAL_I2C_Master_Transmit+0x15e>
 8005b48:	80002000 	.word	0x80002000

08005b4c <HAL_I2C_EV_IRQHandler>:
{
 8005b4c:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005b4e:	6803      	ldr	r3, [r0, #0]
 8005b50:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005b52:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8005b54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005b56:	b103      	cbz	r3, 8005b5a <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8005b58:	4798      	blx	r3
}
 8005b5a:	bd08      	pop	{r3, pc}

08005b5c <HAL_I2C_SlaveTxCpltCallback>:
}
 8005b5c:	4770      	bx	lr

08005b5e <I2C_ITSlaveSeqCplt>:
{
 8005b5e:	b510      	push	{r4, lr}
 8005b60:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005b62:	6803      	ldr	r3, [r0, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b66:	2100      	movs	r1, #0
 8005b68:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005b6c:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005b70:	d00e      	beq.n	8005b90 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b78:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005b7a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b29      	cmp	r3, #41	; 0x29
 8005b82:	d00d      	beq.n	8005ba0 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b84:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b8c:	d018      	beq.n	8005bc0 <I2C_ITSlaveSeqCplt+0x62>
}
 8005b8e:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005b90:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005b94:	d0f1      	beq.n	8005b7a <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	e7ec      	b.n	8005b7a <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ba0:	2328      	movs	r3, #40	; 0x28
 8005ba2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ba6:	2321      	movs	r3, #33	; 0x21
 8005ba8:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005baa:	2101      	movs	r1, #1
 8005bac:	4620      	mov	r0, r4
 8005bae:	f7ff fd59 	bl	8005664 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f7ff ffcf 	bl	8005b5c <HAL_I2C_SlaveTxCpltCallback>
 8005bbe:	e7e6      	b.n	8005b8e <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005bc0:	2328      	movs	r3, #40	; 0x28
 8005bc2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005bc6:	2322      	movs	r3, #34	; 0x22
 8005bc8:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005bca:	2102      	movs	r1, #2
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f7ff fd49 	bl	8005664 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bd8:	4620      	mov	r0, r4
 8005bda:	f013 f955 	bl	8018e88 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
 8005bde:	e7d6      	b.n	8005b8e <I2C_ITSlaveSeqCplt+0x30>

08005be0 <HAL_I2C_AddrCallback>:
}
 8005be0:	4770      	bx	lr

08005be2 <I2C_ITAddrCplt>:
{
 8005be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005be4:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005be6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005bea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bee:	2b28      	cmp	r3, #40	; 0x28
 8005bf0:	d006      	beq.n	8005c00 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005bf2:	6803      	ldr	r3, [r0, #0]
 8005bf4:	2208      	movs	r2, #8
 8005bf6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8005bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8005c00:	6803      	ldr	r3, [r0, #0]
 8005c02:	699e      	ldr	r6, [r3, #24]
 8005c04:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	0c12      	lsrs	r2, r2, #16
 8005c0c:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005c16:	68df      	ldr	r7, [r3, #12]
 8005c18:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005c1c:	68c1      	ldr	r1, [r0, #12]
 8005c1e:	2902      	cmp	r1, #2
 8005c20:	d122      	bne.n	8005c68 <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005c22:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8005c26:	f015 0f06 	tst.w	r5, #6
 8005c2a:	d110      	bne.n	8005c4e <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8005c2c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005c2e:	3101      	adds	r1, #1
 8005c30:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005c32:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005c34:	2902      	cmp	r1, #2
 8005c36:	d1e2      	bne.n	8005bfe <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8005c38:	2100      	movs	r1, #0
 8005c3a:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005c3c:	2008      	movs	r0, #8
 8005c3e:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8005c40:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c44:	4631      	mov	r1, r6
 8005c46:	4620      	mov	r0, r4
 8005c48:	f7ff ffca 	bl	8005be0 <HAL_I2C_AddrCallback>
 8005c4c:	e7d7      	b.n	8005bfe <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c52:	f7ff fd07 	bl	8005664 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005c56:	2300      	movs	r3, #0
 8005c58:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c5c:	463a      	mov	r2, r7
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4620      	mov	r0, r4
 8005c62:	f7ff ffbd 	bl	8005be0 <HAL_I2C_AddrCallback>
 8005c66:	e7ca      	b.n	8005bfe <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c6c:	f7ff fcfa 	bl	8005664 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005c70:	2300      	movs	r3, #0
 8005c72:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005c76:	462a      	mov	r2, r5
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f7ff ffb0 	bl	8005be0 <HAL_I2C_AddrCallback>
 8005c80:	e7bd      	b.n	8005bfe <I2C_ITAddrCplt+0x1c>

08005c82 <HAL_I2C_ListenCpltCallback>:
}
 8005c82:	4770      	bx	lr

08005c84 <I2C_ITListenCplt>:
{
 8005c84:	b510      	push	{r4, lr}
 8005c86:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c88:	4b17      	ldr	r3, [pc, #92]	; (8005ce8 <I2C_ITListenCplt+0x64>)
 8005c8a:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005c90:	2220      	movs	r2, #32
 8005c92:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c96:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005c9a:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005c9c:	f011 0f04 	tst.w	r1, #4
 8005ca0:	d013      	beq.n	8005cca <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ca2:	6803      	ldr	r3, [r0, #0]
 8005ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ca6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005ca8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005caa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005cac:	3301      	adds	r3, #1
 8005cae:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8005cb0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8005cb2:	b153      	cbz	r3, 8005cca <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8005cb8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cc2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005cc4:	f043 0304 	orr.w	r3, r3, #4
 8005cc8:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005cca:	f248 0103 	movw	r1, #32771	; 0x8003
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f7ff fcc8 	bl	8005664 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	2210      	movs	r2, #16
 8005cd8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8005ce0:	4620      	mov	r0, r4
 8005ce2:	f7ff ffce 	bl	8005c82 <HAL_I2C_ListenCpltCallback>
}
 8005ce6:	bd10      	pop	{r4, pc}
 8005ce8:	ffff0000 	.word	0xffff0000

08005cec <HAL_I2C_AbortCpltCallback>:
}
 8005cec:	4770      	bx	lr

08005cee <I2C_TreatErrorCallback>:
{
 8005cee:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005cf0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b60      	cmp	r3, #96	; 0x60
 8005cf8:	d006      	beq.n	8005d08 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005cfe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005d02:	f013 f8c5 	bl	8018e90 <__HAL_I2C_ErrorCallback_veneer>
}
 8005d06:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8005d08:	2320      	movs	r3, #32
 8005d0a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005d12:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d16:	f7ff ffe9 	bl	8005cec <HAL_I2C_AbortCpltCallback>
 8005d1a:	e7f4      	b.n	8005d06 <I2C_TreatErrorCallback+0x18>

08005d1c <I2C_ITError>:
{
 8005d1c:	b510      	push	{r4, lr}
 8005d1e:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005d20:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d24:	2200      	movs	r2, #0
 8005d26:	f880 2042 	strb.w	r2, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005d2a:	4845      	ldr	r0, [pc, #276]	; (8005e40 <I2C_ITError+0x124>)
 8005d2c:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005d2e:	8562      	strh	r2, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8005d30:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005d32:	430a      	orrs	r2, r1
 8005d34:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005d36:	3b28      	subs	r3, #40	; 0x28
 8005d38:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d82d      	bhi.n	8005d9a <I2C_ITError+0x7e>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005d3e:	2103      	movs	r1, #3
 8005d40:	4620      	mov	r0, r4
 8005d42:	f7ff fc8f 	bl	8005664 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005d46:	2328      	movs	r3, #40	; 0x28
 8005d48:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005d4c:	4b3d      	ldr	r3, [pc, #244]	; (8005e44 <I2C_ITError+0x128>)
 8005d4e:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8005d50:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005d52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d54:	2a00      	cmp	r2, #0
 8005d56:	d049      	beq.n	8005dec <I2C_ITError+0xd0>
 8005d58:	2b21      	cmp	r3, #33	; 0x21
 8005d5a:	bf18      	it	ne
 8005d5c:	2b11      	cmpne	r3, #17
 8005d5e:	d145      	bne.n	8005dec <I2C_ITError+0xd0>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8005d68:	d003      	beq.n	8005d72 <I2C_ITError+0x56>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d70:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d72:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005d74:	f7ff fb24 	bl	80053c0 <HAL_DMA_GetState>
 8005d78:	2801      	cmp	r0, #1
 8005d7a:	d033      	beq.n	8005de4 <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d7c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d7e:	4a32      	ldr	r2, [pc, #200]	; (8005e48 <I2C_ITError+0x12c>)
 8005d80:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8005d82:	2300      	movs	r3, #0
 8005d84:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d88:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005d8a:	f7fe fe45 	bl	8004a18 <HAL_DMA_Abort_IT>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	d055      	beq.n	8005e3e <I2C_ITError+0x122>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d92:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005d94:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005d96:	4798      	blx	r3
 8005d98:	e051      	b.n	8005e3e <I2C_ITError+0x122>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005d9a:	f248 0103 	movw	r1, #32771	; 0x8003
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f7ff fc60 	bl	8005664 <I2C_Disable_IRQ>
    I2C_Flush_TXDR(hi2c);
 8005da4:	4620      	mov	r0, r4
 8005da6:	f7ff fc2e 	bl	8005606 <I2C_Flush_TXDR>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005daa:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b60      	cmp	r3, #96	; 0x60
 8005db2:	d014      	beq.n	8005dde <I2C_ITError+0xc2>
      hi2c->State         = HAL_I2C_STATE_READY;
 8005db4:	2320      	movs	r3, #32
 8005db6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	f012 0f20 	tst.w	r2, #32
 8005dc2:	d00c      	beq.n	8005dde <I2C_ITError+0xc2>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	f012 0f10 	tst.w	r2, #16
 8005dca:	d005      	beq.n	8005dd8 <I2C_ITError+0xbc>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dcc:	2210      	movs	r2, #16
 8005dce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005dd2:	f043 0304 	orr.w	r3, r3, #4
 8005dd6:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 8005dde:	2300      	movs	r3, #0
 8005de0:	6363      	str	r3, [r4, #52]	; 0x34
 8005de2:	e7b5      	b.n	8005d50 <I2C_ITError+0x34>
      I2C_TreatErrorCallback(hi2c);
 8005de4:	4620      	mov	r0, r4
 8005de6:	f7ff ff82 	bl	8005cee <I2C_TreatErrorCallback>
 8005dea:	e028      	b.n	8005e3e <I2C_ITError+0x122>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005dec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8005dee:	b31a      	cbz	r2, 8005e38 <I2C_ITError+0x11c>
 8005df0:	2b22      	cmp	r3, #34	; 0x22
 8005df2:	bf18      	it	ne
 8005df4:	2b12      	cmpne	r3, #18
 8005df6:	d11f      	bne.n	8005e38 <I2C_ITError+0x11c>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8005e00:	d003      	beq.n	8005e0a <I2C_ITError+0xee>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e08:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e0a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005e0c:	f7ff fad8 	bl	80053c0 <HAL_DMA_GetState>
 8005e10:	2801      	cmp	r0, #1
 8005e12:	d00d      	beq.n	8005e30 <I2C_ITError+0x114>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005e14:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005e16:	4a0c      	ldr	r2, [pc, #48]	; (8005e48 <I2C_ITError+0x12c>)
 8005e18:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005e20:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005e22:	f7fe fdf9 	bl	8004a18 <HAL_DMA_Abort_IT>
 8005e26:	b150      	cbz	r0, 8005e3e <I2C_ITError+0x122>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e28:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005e2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005e2c:	4798      	blx	r3
 8005e2e:	e006      	b.n	8005e3e <I2C_ITError+0x122>
      I2C_TreatErrorCallback(hi2c);
 8005e30:	4620      	mov	r0, r4
 8005e32:	f7ff ff5c 	bl	8005cee <I2C_TreatErrorCallback>
 8005e36:	e002      	b.n	8005e3e <I2C_ITError+0x122>
    I2C_TreatErrorCallback(hi2c);
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f7ff ff58 	bl	8005cee <I2C_TreatErrorCallback>
}
 8005e3e:	bd10      	pop	{r4, pc}
 8005e40:	ffff0000 	.word	0xffff0000
 8005e44:	08006091 	.word	0x08006091
 8005e48:	0800624b 	.word	0x0800624b

08005e4c <I2C_ITSlaveCplt>:
{
 8005e4c:	b570      	push	{r4, r5, r6, lr}
 8005e4e:	4604      	mov	r4, r0
 8005e50:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e52:	6802      	ldr	r2, [r0, #0]
 8005e54:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e56:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005e5a:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e5c:	2120      	movs	r1, #32
 8005e5e:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e60:	2b29      	cmp	r3, #41	; 0x29
 8005e62:	bf18      	it	ne
 8005e64:	2b21      	cmpne	r3, #33	; 0x21
 8005e66:	d057      	beq.n	8005f18 <I2C_ITSlaveCplt+0xcc>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e68:	2b2a      	cmp	r3, #42	; 0x2a
 8005e6a:	bf18      	it	ne
 8005e6c:	2b22      	cmpne	r3, #34	; 0x22
 8005e6e:	d05a      	beq.n	8005f26 <I2C_ITSlaveCplt+0xda>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005e70:	6822      	ldr	r2, [r4, #0]
 8005e72:	6853      	ldr	r3, [r2, #4]
 8005e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e78:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8005e7a:	6822      	ldr	r2, [r4, #0]
 8005e7c:	6853      	ldr	r3, [r2, #4]
 8005e7e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8005e82:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8005e86:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8005e8a:	f023 0301 	bic.w	r3, r3, #1
 8005e8e:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8005e90:	4620      	mov	r0, r4
 8005e92:	f7ff fbb8 	bl	8005606 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005e96:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8005e9a:	f000 8085 	beq.w	8005fa8 <I2C_ITSlaveCplt+0x15c>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005e9e:	6822      	ldr	r2, [r4, #0]
 8005ea0:	6813      	ldr	r3, [r2, #0]
 8005ea2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ea6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8005ea8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d045      	beq.n	8005f3a <I2C_ITSlaveCplt+0xee>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4974      	ldr	r1, [pc, #464]	; (8006084 <I2C_ITSlaveCplt+0x238>)
 8005eb2:	4a75      	ldr	r2, [pc, #468]	; (8006088 <I2C_ITSlaveCplt+0x23c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	bf18      	it	ne
 8005eb8:	428b      	cmpne	r3, r1
 8005eba:	d03b      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005ebc:	3218      	adds	r2, #24
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d038      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005ec2:	3218      	adds	r2, #24
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d035      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005ec8:	3218      	adds	r2, #24
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d032      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005ece:	3218      	adds	r2, #24
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d02f      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005ed4:	3218      	adds	r2, #24
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d02c      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005eda:	3218      	adds	r2, #24
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d029      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005ee0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d025      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005ee8:	3218      	adds	r2, #24
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d022      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005eee:	3218      	adds	r2, #24
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d01f      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005ef4:	3218      	adds	r2, #24
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d01c      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005efa:	3218      	adds	r2, #24
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d019      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005f00:	3218      	adds	r2, #24
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d016      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005f06:	3218      	adds	r2, #24
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d013      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005f0c:	3218      	adds	r2, #24
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d010      	beq.n	8005f34 <I2C_ITSlaveCplt+0xe8>
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	e00f      	b.n	8005f38 <I2C_ITSlaveCplt+0xec>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005f18:	f248 0101 	movw	r1, #32769	; 0x8001
 8005f1c:	f7ff fba2 	bl	8005664 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f20:	2321      	movs	r3, #33	; 0x21
 8005f22:	6323      	str	r3, [r4, #48]	; 0x30
 8005f24:	e7a4      	b.n	8005e70 <I2C_ITSlaveCplt+0x24>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005f26:	f248 0102 	movw	r1, #32770	; 0x8002
 8005f2a:	f7ff fb9b 	bl	8005664 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f2e:	2322      	movs	r3, #34	; 0x22
 8005f30:	6323      	str	r3, [r4, #48]	; 0x30
 8005f32:	e79d      	b.n	8005e70 <I2C_ITSlaveCplt+0x24>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005f3a:	f015 0f04 	tst.w	r5, #4
 8005f3e:	d011      	beq.n	8005f64 <I2C_ITSlaveCplt+0x118>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005f40:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005f4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f4e:	3301      	adds	r3, #1
 8005f50:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8005f52:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005f54:	b133      	cbz	r3, 8005f64 <I2C_ITSlaveCplt+0x118>
      hi2c->XferSize--;
 8005f56:	3b01      	subs	r3, #1
 8005f58:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005f5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8005f64:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	b11b      	cbz	r3, 8005f72 <I2C_ITSlaveCplt+0x126>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f6c:	f043 0304 	orr.w	r3, r3, #4
 8005f70:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f72:	2300      	movs	r3, #0
 8005f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005f78:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d157      	bne.n	8006030 <I2C_ITSlaveCplt+0x1e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f86:	d161      	bne.n	800604c <I2C_ITSlaveCplt+0x200>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005f88:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b22      	cmp	r3, #34	; 0x22
 8005f90:	d06c      	beq.n	800606c <I2C_ITSlaveCplt+0x220>
    hi2c->State = HAL_I2C_STATE_READY;
 8005f92:	2320      	movs	r3, #32
 8005f94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005f9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f7ff fddb 	bl	8005b5c <HAL_I2C_SlaveTxCpltCallback>
}
 8005fa6:	e060      	b.n	800606a <I2C_ITSlaveCplt+0x21e>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005fa8:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8005fac:	d0c5      	beq.n	8005f3a <I2C_ITSlaveCplt+0xee>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005fae:	6822      	ldr	r2, [r4, #0]
 8005fb0:	6813      	ldr	r3, [r2, #0]
 8005fb2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fb6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8005fb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0bd      	beq.n	8005f3a <I2C_ITSlaveCplt+0xee>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4930      	ldr	r1, [pc, #192]	; (8006084 <I2C_ITSlaveCplt+0x238>)
 8005fc2:	4a31      	ldr	r2, [pc, #196]	; (8006088 <I2C_ITSlaveCplt+0x23c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	bf18      	it	ne
 8005fc8:	428b      	cmpne	r3, r1
 8005fca:	d02d      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 8005fcc:	3218      	adds	r2, #24
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d02a      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 8005fd2:	3218      	adds	r2, #24
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d027      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 8005fd8:	3218      	adds	r2, #24
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d024      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 8005fde:	3218      	adds	r2, #24
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d021      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 8005fe4:	3218      	adds	r2, #24
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d01e      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 8005fea:	3218      	adds	r2, #24
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d01b      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 8005ff0:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d017      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 8005ff8:	3218      	adds	r2, #24
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d014      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 8005ffe:	3218      	adds	r2, #24
 8006000:	4293      	cmp	r3, r2
 8006002:	d011      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 8006004:	3218      	adds	r2, #24
 8006006:	4293      	cmp	r3, r2
 8006008:	d00e      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 800600a:	3218      	adds	r2, #24
 800600c:	4293      	cmp	r3, r2
 800600e:	d00b      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 8006010:	3218      	adds	r2, #24
 8006012:	4293      	cmp	r3, r2
 8006014:	d008      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 8006016:	3218      	adds	r2, #24
 8006018:	4293      	cmp	r3, r2
 800601a:	d005      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 800601c:	3218      	adds	r2, #24
 800601e:	4293      	cmp	r3, r2
 8006020:	d002      	beq.n	8006028 <I2C_ITSlaveCplt+0x1dc>
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	b29b      	uxth	r3, r3
 8006026:	e001      	b.n	800602c <I2C_ITSlaveCplt+0x1e0>
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	b29b      	uxth	r3, r3
 800602c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800602e:	e784      	b.n	8005f3a <I2C_ITSlaveCplt+0xee>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006030:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006032:	4620      	mov	r0, r4
 8006034:	f7ff fe72 	bl	8005d1c <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006038:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b28      	cmp	r3, #40	; 0x28
 8006040:	d113      	bne.n	800606a <I2C_ITSlaveCplt+0x21e>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006042:	4629      	mov	r1, r5
 8006044:	4620      	mov	r0, r4
 8006046:	f7ff fe1d 	bl	8005c84 <I2C_ITListenCplt>
 800604a:	e00e      	b.n	800606a <I2C_ITSlaveCplt+0x21e>
    I2C_ITSlaveSeqCplt(hi2c);
 800604c:	4620      	mov	r0, r4
 800604e:	f7ff fd86 	bl	8005b5e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006052:	4b0e      	ldr	r3, [pc, #56]	; (800608c <I2C_ITSlaveCplt+0x240>)
 8006054:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006056:	2320      	movs	r3, #32
 8006058:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800605c:	2300      	movs	r3, #0
 800605e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006060:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006064:	4620      	mov	r0, r4
 8006066:	f7ff fe0c 	bl	8005c82 <HAL_I2C_ListenCpltCallback>
}
 800606a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800606c:	2320      	movs	r3, #32
 800606e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006072:	2300      	movs	r3, #0
 8006074:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006076:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800607a:	4620      	mov	r0, r4
 800607c:	f012 ff04 	bl	8018e88 <__HAL_I2C_SlaveRxCpltCallback_veneer>
 8006080:	e7f3      	b.n	800606a <I2C_ITSlaveCplt+0x21e>
 8006082:	bf00      	nop
 8006084:	40020010 	.word	0x40020010
 8006088:	40020028 	.word	0x40020028
 800608c:	ffff0000 	.word	0xffff0000

08006090 <I2C_Slave_ISR_IT>:
{
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8006092:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8006094:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006098:	2b01      	cmp	r3, #1
 800609a:	f000 809f 	beq.w	80061dc <I2C_Slave_ISR_IT+0x14c>
 800609e:	4604      	mov	r4, r0
 80060a0:	460d      	mov	r5, r1
 80060a2:	4616      	mov	r6, r2
 80060a4:	2301      	movs	r3, #1
 80060a6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060aa:	f011 0f20 	tst.w	r1, #32
 80060ae:	d002      	beq.n	80060b6 <I2C_Slave_ISR_IT+0x26>
 80060b0:	f012 0f20 	tst.w	r2, #32
 80060b4:	d119      	bne.n	80060ea <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060b6:	f015 0f10 	tst.w	r5, #16
 80060ba:	d03f      	beq.n	800613c <I2C_Slave_ISR_IT+0xac>
 80060bc:	f016 0f10 	tst.w	r6, #16
 80060c0:	d03c      	beq.n	800613c <I2C_Slave_ISR_IT+0xac>
    if (hi2c->XferCount == 0U)
 80060c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	bb43      	cbnz	r3, 800611a <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060c8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80060cc:	b2db      	uxtb	r3, r3
 80060ce:	2b28      	cmp	r3, #40	; 0x28
 80060d0:	d00e      	beq.n	80060f0 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80060d2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b29      	cmp	r3, #41	; 0x29
 80060da:	d011      	beq.n	8006100 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	2210      	movs	r2, #16
 80060e0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 80060e2:	2000      	movs	r0, #0
 80060e4:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 80060e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80060ea:	f7ff feaf 	bl	8005e4c <I2C_ITSlaveCplt>
 80060ee:	e7e2      	b.n	80060b6 <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060f0:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 80060f4:	d1ed      	bne.n	80060d2 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80060f6:	4629      	mov	r1, r5
 80060f8:	4620      	mov	r0, r4
 80060fa:	f7ff fdc3 	bl	8005c84 <I2C_ITListenCplt>
 80060fe:	e7f0      	b.n	80060e2 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006100:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8006104:	d0ea      	beq.n	80060dc <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	2210      	movs	r2, #16
 800610a:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 800610c:	4620      	mov	r0, r4
 800610e:	f7ff fa7a 	bl	8005606 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8006112:	4620      	mov	r0, r4
 8006114:	f7ff fd23 	bl	8005b5e <I2C_ITSlaveSeqCplt>
 8006118:	e7e3      	b.n	80060e2 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	2210      	movs	r2, #16
 800611e:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006120:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006122:	f043 0304 	orr.w	r3, r3, #4
 8006126:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006128:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 800612c:	bf18      	it	ne
 800612e:	2f00      	cmpne	r7, #0
 8006130:	d1d7      	bne.n	80060e2 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006132:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006134:	4620      	mov	r0, r4
 8006136:	f7ff fdf1 	bl	8005d1c <I2C_ITError>
 800613a:	e7d2      	b.n	80060e2 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800613c:	f015 0f04 	tst.w	r5, #4
 8006140:	d01f      	beq.n	8006182 <I2C_Slave_ISR_IT+0xf2>
 8006142:	f016 0f04 	tst.w	r6, #4
 8006146:	d01c      	beq.n	8006182 <I2C_Slave_ISR_IT+0xf2>
    if (hi2c->XferCount > 0U)
 8006148:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800614a:	b29b      	uxth	r3, r3
 800614c:	b173      	cbz	r3, 800616c <I2C_Slave_ISR_IT+0xdc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006154:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8006156:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006158:	3301      	adds	r3, #1
 800615a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800615c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800615e:	3b01      	subs	r3, #1
 8006160:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006162:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	b29b      	uxth	r3, r3
 800616a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800616c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1b6      	bne.n	80060e2 <I2C_Slave_ISR_IT+0x52>
 8006174:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8006178:	d0b3      	beq.n	80060e2 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 800617a:	4620      	mov	r0, r4
 800617c:	f7ff fcef 	bl	8005b5e <I2C_ITSlaveSeqCplt>
 8006180:	e7af      	b.n	80060e2 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006182:	f015 0f08 	tst.w	r5, #8
 8006186:	d002      	beq.n	800618e <I2C_Slave_ISR_IT+0xfe>
 8006188:	f016 0f08 	tst.w	r6, #8
 800618c:	d118      	bne.n	80061c0 <I2C_Slave_ISR_IT+0x130>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800618e:	f015 0f02 	tst.w	r5, #2
 8006192:	d0a6      	beq.n	80060e2 <I2C_Slave_ISR_IT+0x52>
 8006194:	f016 0f02 	tst.w	r6, #2
 8006198:	d0a3      	beq.n	80060e2 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 800619a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	b1a3      	cbz	r3, 80061ca <I2C_Slave_ISR_IT+0x13a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	7812      	ldrb	r2, [r2, #0]
 80061a6:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80061a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061aa:	3301      	adds	r3, #1
 80061ac:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80061ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	3b01      	subs	r3, #1
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80061b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80061ba:	3b01      	subs	r3, #1
 80061bc:	8523      	strh	r3, [r4, #40]	; 0x28
 80061be:	e790      	b.n	80060e2 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80061c0:	4629      	mov	r1, r5
 80061c2:	4620      	mov	r0, r4
 80061c4:	f7ff fd0d 	bl	8005be2 <I2C_ITAddrCplt>
 80061c8:	e78b      	b.n	80060e2 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80061ca:	2f00      	cmp	r7, #0
 80061cc:	bf18      	it	ne
 80061ce:	f1b7 7f80 	cmpne.w	r7, #16777216	; 0x1000000
 80061d2:	d186      	bne.n	80060e2 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 80061d4:	4620      	mov	r0, r4
 80061d6:	f7ff fcc2 	bl	8005b5e <I2C_ITSlaveSeqCplt>
 80061da:	e782      	b.n	80060e2 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 80061dc:	2002      	movs	r0, #2
 80061de:	e783      	b.n	80060e8 <I2C_Slave_ISR_IT+0x58>

080061e0 <HAL_I2C_ER_IRQHandler>:
{
 80061e0:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80061e2:	6802      	ldr	r2, [r0, #0]
 80061e4:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80061e6:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80061e8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80061ec:	d009      	beq.n	8006202 <HAL_I2C_ER_IRQHandler+0x22>
 80061ee:	f011 0f80 	tst.w	r1, #128	; 0x80
 80061f2:	d006      	beq.n	8006202 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80061f4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80061f6:	f044 0401 	orr.w	r4, r4, #1
 80061fa:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061fc:	f44f 7480 	mov.w	r4, #256	; 0x100
 8006200:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006202:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8006206:	d00a      	beq.n	800621e <HAL_I2C_ER_IRQHandler+0x3e>
 8006208:	f011 0f80 	tst.w	r1, #128	; 0x80
 800620c:	d007      	beq.n	800621e <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800620e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006210:	f042 0208 	orr.w	r2, r2, #8
 8006214:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006216:	6802      	ldr	r2, [r0, #0]
 8006218:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800621c:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800621e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006222:	d00a      	beq.n	800623a <HAL_I2C_ER_IRQHandler+0x5a>
 8006224:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006228:	d007      	beq.n	800623a <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800622a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800622c:	f043 0302 	orr.w	r3, r3, #2
 8006230:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006232:	6803      	ldr	r3, [r0, #0]
 8006234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006238:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 800623a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800623c:	f011 0f0b 	tst.w	r1, #11
 8006240:	d100      	bne.n	8006244 <HAL_I2C_ER_IRQHandler+0x64>
}
 8006242:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 8006244:	f7ff fd6a 	bl	8005d1c <I2C_ITError>
}
 8006248:	e7fb      	b.n	8006242 <HAL_I2C_ER_IRQHandler+0x62>

0800624a <I2C_DMAAbort>:
{
 800624a:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800624c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 800624e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006250:	b10b      	cbz	r3, 8006256 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006252:	2200      	movs	r2, #0
 8006254:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8006256:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006258:	b10b      	cbz	r3, 800625e <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800625a:	2200      	movs	r2, #0
 800625c:	651a      	str	r2, [r3, #80]	; 0x50
  I2C_TreatErrorCallback(hi2c);
 800625e:	f7ff fd46 	bl	8005cee <I2C_TreatErrorCallback>
}
 8006262:	bd08      	pop	{r3, pc}

08006264 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006264:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006266:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800626a:	b2d2      	uxtb	r2, r2
 800626c:	2a20      	cmp	r2, #32
 800626e:	d123      	bne.n	80062b8 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006270:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8006274:	2a01      	cmp	r2, #1
 8006276:	d021      	beq.n	80062bc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8006278:	2201      	movs	r2, #1
 800627a:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800627e:	2224      	movs	r2, #36	; 0x24
 8006280:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006284:	6800      	ldr	r0, [r0, #0]
 8006286:	6802      	ldr	r2, [r0, #0]
 8006288:	f022 0201 	bic.w	r2, r2, #1
 800628c:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800628e:	6818      	ldr	r0, [r3, #0]
 8006290:	6802      	ldr	r2, [r0, #0]
 8006292:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006296:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	6802      	ldr	r2, [r0, #0]
 800629c:	4311      	orrs	r1, r2
 800629e:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062a0:	6819      	ldr	r1, [r3, #0]
 80062a2:	680a      	ldr	r2, [r1, #0]
 80062a4:	f042 0201 	orr.w	r2, r2, #1
 80062a8:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b0:	2000      	movs	r0, #0
 80062b2:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80062b6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80062b8:	2002      	movs	r0, #2
 80062ba:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80062bc:	2002      	movs	r0, #2
  }
}
 80062be:	4770      	bx	lr

080062c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062c0:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062c2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	2a20      	cmp	r2, #32
 80062ca:	d121      	bne.n	8006310 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062cc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80062d0:	2a01      	cmp	r2, #1
 80062d2:	d01f      	beq.n	8006314 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80062d4:	2201      	movs	r2, #1
 80062d6:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062da:	2224      	movs	r2, #36	; 0x24
 80062dc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062e0:	6800      	ldr	r0, [r0, #0]
 80062e2:	6802      	ldr	r2, [r0, #0]
 80062e4:	f022 0201 	bic.w	r2, r2, #1
 80062e8:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80062ea:	6818      	ldr	r0, [r3, #0]
 80062ec:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80062ee:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80062f2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80062f6:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062f8:	6819      	ldr	r1, [r3, #0]
 80062fa:	680a      	ldr	r2, [r1, #0]
 80062fc:	f042 0201 	orr.w	r2, r2, #1
 8006300:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006302:	2220      	movs	r2, #32
 8006304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006308:	2000      	movs	r0, #0
 800630a:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 800630e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8006310:	2002      	movs	r0, #2
 8006312:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8006314:	2002      	movs	r0, #2
  }
}
 8006316:	4770      	bx	lr

08006318 <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006318:	4b13      	ldr	r3, [pc, #76]	; (8006368 <HAL_PWREx_ConfigSupply+0x50>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f013 0f04 	tst.w	r3, #4
 8006320:	d107      	bne.n	8006332 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006322:	4b11      	ldr	r3, [pc, #68]	; (8006368 <HAL_PWREx_ConfigSupply+0x50>)
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	f003 0307 	and.w	r3, r3, #7
 800632a:	4283      	cmp	r3, r0
 800632c:	d01a      	beq.n	8006364 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800632e:	2001      	movs	r0, #1
 8006330:	4770      	bx	lr
{
 8006332:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006334:	4a0c      	ldr	r2, [pc, #48]	; (8006368 <HAL_PWREx_ConfigSupply+0x50>)
 8006336:	68d3      	ldr	r3, [r2, #12]
 8006338:	f023 0307 	bic.w	r3, r3, #7
 800633c:	4303      	orrs	r3, r0
 800633e:	60d3      	str	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006340:	f7fd fbb8 	bl	8003ab4 <HAL_GetTick>
 8006344:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006346:	4b08      	ldr	r3, [pc, #32]	; (8006368 <HAL_PWREx_ConfigSupply+0x50>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800634e:	d107      	bne.n	8006360 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006350:	f7fd fbb0 	bl	8003ab4 <HAL_GetTick>
 8006354:	1b00      	subs	r0, r0, r4
 8006356:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800635a:	d9f4      	bls.n	8006346 <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 800635c:	2001      	movs	r0, #1
 800635e:	e000      	b.n	8006362 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006360:	2000      	movs	r0, #0
}
 8006362:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8006364:	2000      	movs	r0, #0
}
 8006366:	4770      	bx	lr
 8006368:	58024800 	.word	0x58024800

0800636c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800636c:	2800      	cmp	r0, #0
 800636e:	f000 8339 	beq.w	80069e4 <HAL_RCC_OscConfig+0x678>
{
 8006372:	b538      	push	{r3, r4, r5, lr}
 8006374:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006376:	6803      	ldr	r3, [r0, #0]
 8006378:	f013 0f01 	tst.w	r3, #1
 800637c:	d025      	beq.n	80063ca <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800637e:	4a94      	ldr	r2, [pc, #592]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 8006380:	6913      	ldr	r3, [r2, #16]
 8006382:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006386:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006388:	2b10      	cmp	r3, #16
 800638a:	d015      	beq.n	80063b8 <HAL_RCC_OscConfig+0x4c>
 800638c:	2b18      	cmp	r3, #24
 800638e:	d00f      	beq.n	80063b0 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006390:	6863      	ldr	r3, [r4, #4]
 8006392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006396:	d03f      	beq.n	8006418 <HAL_RCC_OscConfig+0xac>
 8006398:	2b00      	cmp	r3, #0
 800639a:	d153      	bne.n	8006444 <HAL_RCC_OscConfig+0xd8>
 800639c:	4b8c      	ldr	r3, [pc, #560]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	e038      	b.n	8006422 <HAL_RCC_OscConfig+0xb6>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80063b0:	f002 0203 	and.w	r2, r2, #3
 80063b4:	2a02      	cmp	r2, #2
 80063b6:	d1eb      	bne.n	8006390 <HAL_RCC_OscConfig+0x24>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b8:	4b85      	ldr	r3, [pc, #532]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80063c0:	d003      	beq.n	80063ca <HAL_RCC_OscConfig+0x5e>
 80063c2:	6863      	ldr	r3, [r4, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 830f 	beq.w	80069e8 <HAL_RCC_OscConfig+0x67c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	f013 0f02 	tst.w	r3, #2
 80063d0:	f000 80a1 	beq.w	8006516 <HAL_RCC_OscConfig+0x1aa>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063d4:	4a7e      	ldr	r2, [pc, #504]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 80063d6:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80063da:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80063de:	d05a      	beq.n	8006496 <HAL_RCC_OscConfig+0x12a>
 80063e0:	2b18      	cmp	r3, #24
 80063e2:	d055      	beq.n	8006490 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063e4:	68e3      	ldr	r3, [r4, #12]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 80de 	beq.w	80065a8 <HAL_RCC_OscConfig+0x23c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063ec:	4978      	ldr	r1, [pc, #480]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 80063ee:	680a      	ldr	r2, [r1, #0]
 80063f0:	f022 0219 	bic.w	r2, r2, #25
 80063f4:	4313      	orrs	r3, r2
 80063f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f8:	f7fd fb5c 	bl	8003ab4 <HAL_GetTick>
 80063fc:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063fe:	4b74      	ldr	r3, [pc, #464]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f013 0f04 	tst.w	r3, #4
 8006406:	f040 80ad 	bne.w	8006564 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800640a:	f7fd fb53 	bl	8003ab4 <HAL_GetTick>
 800640e:	1b40      	subs	r0, r0, r5
 8006410:	2802      	cmp	r0, #2
 8006412:	d9f4      	bls.n	80063fe <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8006414:	2003      	movs	r0, #3
 8006416:	e2ee      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006418:	4a6d      	ldr	r2, [pc, #436]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 800641a:	6813      	ldr	r3, [r2, #0]
 800641c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006420:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006422:	6863      	ldr	r3, [r4, #4]
 8006424:	b32b      	cbz	r3, 8006472 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8006426:	f7fd fb45 	bl	8003ab4 <HAL_GetTick>
 800642a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800642c:	4b68      	ldr	r3, [pc, #416]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006434:	d1c9      	bne.n	80063ca <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006436:	f7fd fb3d 	bl	8003ab4 <HAL_GetTick>
 800643a:	1b40      	subs	r0, r0, r5
 800643c:	2864      	cmp	r0, #100	; 0x64
 800643e:	d9f5      	bls.n	800642c <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8006440:	2003      	movs	r0, #3
 8006442:	e2d8      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006448:	d009      	beq.n	800645e <HAL_RCC_OscConfig+0xf2>
 800644a:	4b61      	ldr	r3, [pc, #388]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006452:	601a      	str	r2, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800645a:	601a      	str	r2, [r3, #0]
 800645c:	e7e1      	b.n	8006422 <HAL_RCC_OscConfig+0xb6>
 800645e:	4b5c      	ldr	r3, [pc, #368]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800646e:	601a      	str	r2, [r3, #0]
 8006470:	e7d7      	b.n	8006422 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8006472:	f7fd fb1f 	bl	8003ab4 <HAL_GetTick>
 8006476:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006478:	4b55      	ldr	r3, [pc, #340]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006480:	d0a3      	beq.n	80063ca <HAL_RCC_OscConfig+0x5e>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006482:	f7fd fb17 	bl	8003ab4 <HAL_GetTick>
 8006486:	1b40      	subs	r0, r0, r5
 8006488:	2864      	cmp	r0, #100	; 0x64
 800648a:	d9f5      	bls.n	8006478 <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 800648c:	2003      	movs	r0, #3
 800648e:	e2b2      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006490:	f012 0f03 	tst.w	r2, #3
 8006494:	d1a6      	bne.n	80063e4 <HAL_RCC_OscConfig+0x78>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006496:	4b4e      	ldr	r3, [pc, #312]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f013 0f04 	tst.w	r3, #4
 800649e:	d003      	beq.n	80064a8 <HAL_RCC_OscConfig+0x13c>
 80064a0:	68e3      	ldr	r3, [r4, #12]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 82a2 	beq.w	80069ec <HAL_RCC_OscConfig+0x680>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064a8:	4a49      	ldr	r2, [pc, #292]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 80064aa:	6813      	ldr	r3, [r2, #0]
 80064ac:	f023 0319 	bic.w	r3, r3, #25
 80064b0:	68e1      	ldr	r1, [r4, #12]
 80064b2:	430b      	orrs	r3, r1
 80064b4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80064b6:	f7fd fafd 	bl	8003ab4 <HAL_GetTick>
 80064ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064bc:	4b44      	ldr	r3, [pc, #272]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f013 0f04 	tst.w	r3, #4
 80064c4:	d106      	bne.n	80064d4 <HAL_RCC_OscConfig+0x168>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064c6:	f7fd faf5 	bl	8003ab4 <HAL_GetTick>
 80064ca:	1b40      	subs	r0, r0, r5
 80064cc:	2802      	cmp	r0, #2
 80064ce:	d9f5      	bls.n	80064bc <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 80064d0:	2003      	movs	r0, #3
 80064d2:	e290      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d4:	f7fd fb08 	bl	8003ae8 <HAL_GetREVID>
 80064d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80064dc:	4298      	cmp	r0, r3
 80064de:	d812      	bhi.n	8006506 <HAL_RCC_OscConfig+0x19a>
 80064e0:	6922      	ldr	r2, [r4, #16]
 80064e2:	2a40      	cmp	r2, #64	; 0x40
 80064e4:	d007      	beq.n	80064f6 <HAL_RCC_OscConfig+0x18a>
 80064e6:	493a      	ldr	r1, [pc, #232]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 80064e8:	684b      	ldr	r3, [r1, #4]
 80064ea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80064ee:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 80064f2:	604b      	str	r3, [r1, #4]
 80064f4:	e00f      	b.n	8006516 <HAL_RCC_OscConfig+0x1aa>
 80064f6:	4a36      	ldr	r2, [pc, #216]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 80064f8:	6853      	ldr	r3, [r2, #4]
 80064fa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80064fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006502:	6053      	str	r3, [r2, #4]
 8006504:	e007      	b.n	8006516 <HAL_RCC_OscConfig+0x1aa>
 8006506:	4a32      	ldr	r2, [pc, #200]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 8006508:	6853      	ldr	r3, [r2, #4]
 800650a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800650e:	6921      	ldr	r1, [r4, #16]
 8006510:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006514:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	f013 0f10 	tst.w	r3, #16
 800651c:	f000 8088 	beq.w	8006630 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006520:	4a2b      	ldr	r2, [pc, #172]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 8006522:	6913      	ldr	r3, [r2, #16]
 8006524:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006528:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800652a:	2b08      	cmp	r3, #8
 800652c:	d056      	beq.n	80065dc <HAL_RCC_OscConfig+0x270>
 800652e:	2b18      	cmp	r3, #24
 8006530:	d050      	beq.n	80065d4 <HAL_RCC_OscConfig+0x268>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006532:	69e3      	ldr	r3, [r4, #28]
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 80b8 	beq.w	80066aa <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800653a:	4a25      	ldr	r2, [pc, #148]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 800653c:	6813      	ldr	r3, [r2, #0]
 800653e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006544:	f7fd fab6 	bl	8003ab4 <HAL_GetTick>
 8006548:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800654a:	4b21      	ldr	r3, [pc, #132]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006552:	f040 8088 	bne.w	8006666 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006556:	f7fd faad 	bl	8003ab4 <HAL_GetTick>
 800655a:	1b40      	subs	r0, r0, r5
 800655c:	2802      	cmp	r0, #2
 800655e:	d9f4      	bls.n	800654a <HAL_RCC_OscConfig+0x1de>
          {
            return HAL_TIMEOUT;
 8006560:	2003      	movs	r0, #3
 8006562:	e248      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006564:	f7fd fac0 	bl	8003ae8 <HAL_GetREVID>
 8006568:	f241 0303 	movw	r3, #4099	; 0x1003
 800656c:	4298      	cmp	r0, r3
 800656e:	d812      	bhi.n	8006596 <HAL_RCC_OscConfig+0x22a>
 8006570:	6922      	ldr	r2, [r4, #16]
 8006572:	2a40      	cmp	r2, #64	; 0x40
 8006574:	d007      	beq.n	8006586 <HAL_RCC_OscConfig+0x21a>
 8006576:	4916      	ldr	r1, [pc, #88]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 8006578:	684b      	ldr	r3, [r1, #4]
 800657a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800657e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8006582:	604b      	str	r3, [r1, #4]
 8006584:	e7c7      	b.n	8006516 <HAL_RCC_OscConfig+0x1aa>
 8006586:	4a12      	ldr	r2, [pc, #72]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 8006588:	6853      	ldr	r3, [r2, #4]
 800658a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800658e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006592:	6053      	str	r3, [r2, #4]
 8006594:	e7bf      	b.n	8006516 <HAL_RCC_OscConfig+0x1aa>
 8006596:	4a0e      	ldr	r2, [pc, #56]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 8006598:	6853      	ldr	r3, [r2, #4]
 800659a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800659e:	6921      	ldr	r1, [r4, #16]
 80065a0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80065a4:	6053      	str	r3, [r2, #4]
 80065a6:	e7b6      	b.n	8006516 <HAL_RCC_OscConfig+0x1aa>
        __HAL_RCC_HSI_DISABLE();
 80065a8:	4a09      	ldr	r2, [pc, #36]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	f023 0301 	bic.w	r3, r3, #1
 80065b0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80065b2:	f7fd fa7f 	bl	8003ab4 <HAL_GetTick>
 80065b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80065b8:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <HAL_RCC_OscConfig+0x264>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f013 0f04 	tst.w	r3, #4
 80065c0:	d0a9      	beq.n	8006516 <HAL_RCC_OscConfig+0x1aa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065c2:	f7fd fa77 	bl	8003ab4 <HAL_GetTick>
 80065c6:	1b40      	subs	r0, r0, r5
 80065c8:	2802      	cmp	r0, #2
 80065ca:	d9f5      	bls.n	80065b8 <HAL_RCC_OscConfig+0x24c>
            return HAL_TIMEOUT;
 80065cc:	2003      	movs	r0, #3
 80065ce:	e212      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
 80065d0:	58024400 	.word	0x58024400
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80065d4:	f002 0203 	and.w	r2, r2, #3
 80065d8:	2a01      	cmp	r2, #1
 80065da:	d1aa      	bne.n	8006532 <HAL_RCC_OscConfig+0x1c6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80065dc:	4ba1      	ldr	r3, [pc, #644]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80065e4:	d003      	beq.n	80065ee <HAL_RCC_OscConfig+0x282>
 80065e6:	69e3      	ldr	r3, [r4, #28]
 80065e8:	2b80      	cmp	r3, #128	; 0x80
 80065ea:	f040 8201 	bne.w	80069f0 <HAL_RCC_OscConfig+0x684>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80065ee:	f7fd fa7b 	bl	8003ae8 <HAL_GetREVID>
 80065f2:	f241 0303 	movw	r3, #4099	; 0x1003
 80065f6:	4298      	cmp	r0, r3
 80065f8:	d812      	bhi.n	8006620 <HAL_RCC_OscConfig+0x2b4>
 80065fa:	6a22      	ldr	r2, [r4, #32]
 80065fc:	2a20      	cmp	r2, #32
 80065fe:	d007      	beq.n	8006610 <HAL_RCC_OscConfig+0x2a4>
 8006600:	4998      	ldr	r1, [pc, #608]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 8006602:	684b      	ldr	r3, [r1, #4]
 8006604:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006608:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800660c:	604b      	str	r3, [r1, #4]
 800660e:	e00f      	b.n	8006630 <HAL_RCC_OscConfig+0x2c4>
 8006610:	4a94      	ldr	r2, [pc, #592]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 8006612:	6853      	ldr	r3, [r2, #4]
 8006614:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006618:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800661c:	6053      	str	r3, [r2, #4]
 800661e:	e007      	b.n	8006630 <HAL_RCC_OscConfig+0x2c4>
 8006620:	4a90      	ldr	r2, [pc, #576]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 8006622:	68d3      	ldr	r3, [r2, #12]
 8006624:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8006628:	6a21      	ldr	r1, [r4, #32]
 800662a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800662e:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	f013 0f08 	tst.w	r3, #8
 8006636:	d060      	beq.n	80066fa <HAL_RCC_OscConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006638:	6963      	ldr	r3, [r4, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d049      	beq.n	80066d2 <HAL_RCC_OscConfig+0x366>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800663e:	4a89      	ldr	r2, [pc, #548]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 8006640:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8006642:	f043 0301 	orr.w	r3, r3, #1
 8006646:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006648:	f7fd fa34 	bl	8003ab4 <HAL_GetTick>
 800664c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800664e:	4b85      	ldr	r3, [pc, #532]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 8006650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006652:	f013 0f02 	tst.w	r3, #2
 8006656:	d150      	bne.n	80066fa <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006658:	f7fd fa2c 	bl	8003ab4 <HAL_GetTick>
 800665c:	1b40      	subs	r0, r0, r5
 800665e:	2802      	cmp	r0, #2
 8006660:	d9f5      	bls.n	800664e <HAL_RCC_OscConfig+0x2e2>
        {
          return HAL_TIMEOUT;
 8006662:	2003      	movs	r0, #3
 8006664:	e1c7      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006666:	f7fd fa3f 	bl	8003ae8 <HAL_GetREVID>
 800666a:	f241 0303 	movw	r3, #4099	; 0x1003
 800666e:	4298      	cmp	r0, r3
 8006670:	d812      	bhi.n	8006698 <HAL_RCC_OscConfig+0x32c>
 8006672:	6a22      	ldr	r2, [r4, #32]
 8006674:	2a20      	cmp	r2, #32
 8006676:	d007      	beq.n	8006688 <HAL_RCC_OscConfig+0x31c>
 8006678:	497a      	ldr	r1, [pc, #488]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 800667a:	684b      	ldr	r3, [r1, #4]
 800667c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006680:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8006684:	604b      	str	r3, [r1, #4]
 8006686:	e7d3      	b.n	8006630 <HAL_RCC_OscConfig+0x2c4>
 8006688:	4a76      	ldr	r2, [pc, #472]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 800668a:	6853      	ldr	r3, [r2, #4]
 800668c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006694:	6053      	str	r3, [r2, #4]
 8006696:	e7cb      	b.n	8006630 <HAL_RCC_OscConfig+0x2c4>
 8006698:	4a72      	ldr	r2, [pc, #456]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 800669a:	68d3      	ldr	r3, [r2, #12]
 800669c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80066a0:	6a21      	ldr	r1, [r4, #32]
 80066a2:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80066a6:	60d3      	str	r3, [r2, #12]
 80066a8:	e7c2      	b.n	8006630 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_CSI_DISABLE();
 80066aa:	4a6e      	ldr	r2, [pc, #440]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 80066ac:	6813      	ldr	r3, [r2, #0]
 80066ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80066b4:	f7fd f9fe 	bl	8003ab4 <HAL_GetTick>
 80066b8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80066ba:	4b6a      	ldr	r3, [pc, #424]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f413 7f80 	tst.w	r3, #256	; 0x100
 80066c2:	d0b5      	beq.n	8006630 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066c4:	f7fd f9f6 	bl	8003ab4 <HAL_GetTick>
 80066c8:	1b40      	subs	r0, r0, r5
 80066ca:	2802      	cmp	r0, #2
 80066cc:	d9f5      	bls.n	80066ba <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 80066ce:	2003      	movs	r0, #3
 80066d0:	e191      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066d2:	4a64      	ldr	r2, [pc, #400]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 80066d4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80066d6:	f023 0301 	bic.w	r3, r3, #1
 80066da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066dc:	f7fd f9ea 	bl	8003ab4 <HAL_GetTick>
 80066e0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80066e2:	4b60      	ldr	r3, [pc, #384]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 80066e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e6:	f013 0f02 	tst.w	r3, #2
 80066ea:	d006      	beq.n	80066fa <HAL_RCC_OscConfig+0x38e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066ec:	f7fd f9e2 	bl	8003ab4 <HAL_GetTick>
 80066f0:	1b40      	subs	r0, r0, r5
 80066f2:	2802      	cmp	r0, #2
 80066f4:	d9f5      	bls.n	80066e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066f6:	2003      	movs	r0, #3
 80066f8:	e17d      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	f013 0f20 	tst.w	r3, #32
 8006700:	d029      	beq.n	8006756 <HAL_RCC_OscConfig+0x3ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006702:	69a3      	ldr	r3, [r4, #24]
 8006704:	b19b      	cbz	r3, 800672e <HAL_RCC_OscConfig+0x3c2>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006706:	4a57      	ldr	r2, [pc, #348]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 8006708:	6813      	ldr	r3, [r2, #0]
 800670a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800670e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006710:	f7fd f9d0 	bl	8003ab4 <HAL_GetTick>
 8006714:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006716:	4b53      	ldr	r3, [pc, #332]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800671e:	d11a      	bne.n	8006756 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006720:	f7fd f9c8 	bl	8003ab4 <HAL_GetTick>
 8006724:	1b40      	subs	r0, r0, r5
 8006726:	2802      	cmp	r0, #2
 8006728:	d9f5      	bls.n	8006716 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800672a:	2003      	movs	r0, #3
 800672c:	e163      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800672e:	4a4d      	ldr	r2, [pc, #308]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 8006730:	6813      	ldr	r3, [r2, #0]
 8006732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006736:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006738:	f7fd f9bc 	bl	8003ab4 <HAL_GetTick>
 800673c:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800673e:	4b49      	ldr	r3, [pc, #292]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006746:	d006      	beq.n	8006756 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006748:	f7fd f9b4 	bl	8003ab4 <HAL_GetTick>
 800674c:	1b40      	subs	r0, r0, r5
 800674e:	2802      	cmp	r0, #2
 8006750:	d9f5      	bls.n	800673e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006752:	2003      	movs	r0, #3
 8006754:	e14f      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006756:	6823      	ldr	r3, [r4, #0]
 8006758:	f013 0f04 	tst.w	r3, #4
 800675c:	d121      	bne.n	80067a2 <HAL_RCC_OscConfig+0x436>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800675e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 8147 	beq.w	80069f4 <HAL_RCC_OscConfig+0x688>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006766:	4a3f      	ldr	r2, [pc, #252]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 8006768:	6912      	ldr	r2, [r2, #16]
 800676a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800676e:	2a18      	cmp	r2, #24
 8006770:	f000 80ee 	beq.w	8006950 <HAL_RCC_OscConfig+0x5e4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006774:	2b02      	cmp	r3, #2
 8006776:	d079      	beq.n	800686c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006778:	4a3a      	ldr	r2, [pc, #232]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 800677a:	6813      	ldr	r3, [r2, #0]
 800677c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006780:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006782:	f7fd f997 	bl	8003ab4 <HAL_GetTick>
 8006786:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006788:	4b36      	ldr	r3, [pc, #216]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006790:	f000 80dc 	beq.w	800694c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006794:	f7fd f98e 	bl	8003ab4 <HAL_GetTick>
 8006798:	1b00      	subs	r0, r0, r4
 800679a:	2802      	cmp	r0, #2
 800679c:	d9f4      	bls.n	8006788 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800679e:	2003      	movs	r0, #3
 80067a0:	e129      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
    PWR->CR1 |= PWR_CR1_DBP;
 80067a2:	4a31      	ldr	r2, [pc, #196]	; (8006868 <HAL_RCC_OscConfig+0x4fc>)
 80067a4:	6813      	ldr	r3, [r2, #0]
 80067a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067aa:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80067ac:	f7fd f982 	bl	8003ab4 <HAL_GetTick>
 80067b0:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067b2:	4b2d      	ldr	r3, [pc, #180]	; (8006868 <HAL_RCC_OscConfig+0x4fc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80067ba:	d106      	bne.n	80067ca <HAL_RCC_OscConfig+0x45e>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067bc:	f7fd f97a 	bl	8003ab4 <HAL_GetTick>
 80067c0:	1b40      	subs	r0, r0, r5
 80067c2:	2864      	cmp	r0, #100	; 0x64
 80067c4:	d9f5      	bls.n	80067b2 <HAL_RCC_OscConfig+0x446>
        return HAL_TIMEOUT;
 80067c6:	2003      	movs	r0, #3
 80067c8:	e115      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067ca:	68a3      	ldr	r3, [r4, #8]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d00a      	beq.n	80067e6 <HAL_RCC_OscConfig+0x47a>
 80067d0:	bb0b      	cbnz	r3, 8006816 <HAL_RCC_OscConfig+0x4aa>
 80067d2:	4b24      	ldr	r3, [pc, #144]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 80067d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067d6:	f022 0201 	bic.w	r2, r2, #1
 80067da:	671a      	str	r2, [r3, #112]	; 0x70
 80067dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067de:	f022 0204 	bic.w	r2, r2, #4
 80067e2:	671a      	str	r2, [r3, #112]	; 0x70
 80067e4:	e004      	b.n	80067f0 <HAL_RCC_OscConfig+0x484>
 80067e6:	4a1f      	ldr	r2, [pc, #124]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 80067e8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80067ea:	f043 0301 	orr.w	r3, r3, #1
 80067ee:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80067f0:	68a3      	ldr	r3, [r4, #8]
 80067f2:	b333      	cbz	r3, 8006842 <HAL_RCC_OscConfig+0x4d6>
      tickstart = HAL_GetTick();
 80067f4:	f7fd f95e 	bl	8003ab4 <HAL_GetTick>
 80067f8:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067fa:	4b1a      	ldr	r3, [pc, #104]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	f013 0f02 	tst.w	r3, #2
 8006802:	d1ac      	bne.n	800675e <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006804:	f7fd f956 	bl	8003ab4 <HAL_GetTick>
 8006808:	1b40      	subs	r0, r0, r5
 800680a:	f241 3388 	movw	r3, #5000	; 0x1388
 800680e:	4298      	cmp	r0, r3
 8006810:	d9f3      	bls.n	80067fa <HAL_RCC_OscConfig+0x48e>
          return HAL_TIMEOUT;
 8006812:	2003      	movs	r0, #3
 8006814:	e0ef      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006816:	2b05      	cmp	r3, #5
 8006818:	d009      	beq.n	800682e <HAL_RCC_OscConfig+0x4c2>
 800681a:	4b12      	ldr	r3, [pc, #72]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 800681c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800681e:	f022 0201 	bic.w	r2, r2, #1
 8006822:	671a      	str	r2, [r3, #112]	; 0x70
 8006824:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006826:	f022 0204 	bic.w	r2, r2, #4
 800682a:	671a      	str	r2, [r3, #112]	; 0x70
 800682c:	e7e0      	b.n	80067f0 <HAL_RCC_OscConfig+0x484>
 800682e:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 8006830:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006832:	f042 0204 	orr.w	r2, r2, #4
 8006836:	671a      	str	r2, [r3, #112]	; 0x70
 8006838:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800683a:	f042 0201 	orr.w	r2, r2, #1
 800683e:	671a      	str	r2, [r3, #112]	; 0x70
 8006840:	e7d6      	b.n	80067f0 <HAL_RCC_OscConfig+0x484>
      tickstart = HAL_GetTick();
 8006842:	f7fd f937 	bl	8003ab4 <HAL_GetTick>
 8006846:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006848:	4b06      	ldr	r3, [pc, #24]	; (8006864 <HAL_RCC_OscConfig+0x4f8>)
 800684a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684c:	f013 0f02 	tst.w	r3, #2
 8006850:	d085      	beq.n	800675e <HAL_RCC_OscConfig+0x3f2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006852:	f7fd f92f 	bl	8003ab4 <HAL_GetTick>
 8006856:	1b40      	subs	r0, r0, r5
 8006858:	f241 3388 	movw	r3, #5000	; 0x1388
 800685c:	4298      	cmp	r0, r3
 800685e:	d9f3      	bls.n	8006848 <HAL_RCC_OscConfig+0x4dc>
          return HAL_TIMEOUT;
 8006860:	2003      	movs	r0, #3
 8006862:	e0c8      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
 8006864:	58024400 	.word	0x58024400
 8006868:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_DISABLE();
 800686c:	4a69      	ldr	r2, [pc, #420]	; (8006a14 <HAL_RCC_OscConfig+0x6a8>)
 800686e:	6813      	ldr	r3, [r2, #0]
 8006870:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006874:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006876:	f7fd f91d 	bl	8003ab4 <HAL_GetTick>
 800687a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800687c:	4b65      	ldr	r3, [pc, #404]	; (8006a14 <HAL_RCC_OscConfig+0x6a8>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006884:	d006      	beq.n	8006894 <HAL_RCC_OscConfig+0x528>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006886:	f7fd f915 	bl	8003ab4 <HAL_GetTick>
 800688a:	1b40      	subs	r0, r0, r5
 800688c:	2802      	cmp	r0, #2
 800688e:	d9f5      	bls.n	800687c <HAL_RCC_OscConfig+0x510>
            return HAL_TIMEOUT;
 8006890:	2003      	movs	r0, #3
 8006892:	e0b0      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006894:	4b5f      	ldr	r3, [pc, #380]	; (8006a14 <HAL_RCC_OscConfig+0x6a8>)
 8006896:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006898:	4a5f      	ldr	r2, [pc, #380]	; (8006a18 <HAL_RCC_OscConfig+0x6ac>)
 800689a:	400a      	ands	r2, r1
 800689c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800689e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80068a0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 80068a4:	430a      	orrs	r2, r1
 80068a6:	629a      	str	r2, [r3, #40]	; 0x28
 80068a8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80068aa:	3a01      	subs	r2, #1
 80068ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068b2:	3901      	subs	r1, #1
 80068b4:	0249      	lsls	r1, r1, #9
 80068b6:	b289      	uxth	r1, r1
 80068b8:	430a      	orrs	r2, r1
 80068ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80068bc:	3901      	subs	r1, #1
 80068be:	0409      	lsls	r1, r1, #16
 80068c0:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 80068c4:	430a      	orrs	r2, r1
 80068c6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80068c8:	3901      	subs	r1, #1
 80068ca:	0609      	lsls	r1, r1, #24
 80068cc:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 80068d0:	430a      	orrs	r2, r1
 80068d2:	631a      	str	r2, [r3, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80068d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d6:	f022 0201 	bic.w	r2, r2, #1
 80068da:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80068dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80068de:	4a4f      	ldr	r2, [pc, #316]	; (8006a1c <HAL_RCC_OscConfig+0x6b0>)
 80068e0:	400a      	ands	r2, r1
 80068e2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80068e4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80068e8:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80068ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ec:	f022 020c 	bic.w	r2, r2, #12
 80068f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80068f2:	430a      	orrs	r2, r1
 80068f4:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80068f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f8:	f022 0202 	bic.w	r2, r2, #2
 80068fc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80068fe:	430a      	orrs	r2, r1
 8006900:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006904:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006908:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800690a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800690c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8006910:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006914:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006918:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800691a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800691c:	f042 0201 	orr.w	r2, r2, #1
 8006920:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006928:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800692a:	f7fd f8c3 	bl	8003ab4 <HAL_GetTick>
 800692e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006930:	4b38      	ldr	r3, [pc, #224]	; (8006a14 <HAL_RCC_OscConfig+0x6a8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8006938:	d106      	bne.n	8006948 <HAL_RCC_OscConfig+0x5dc>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800693a:	f7fd f8bb 	bl	8003ab4 <HAL_GetTick>
 800693e:	1b00      	subs	r0, r0, r4
 8006940:	2802      	cmp	r0, #2
 8006942:	d9f5      	bls.n	8006930 <HAL_RCC_OscConfig+0x5c4>
            return HAL_TIMEOUT;
 8006944:	2003      	movs	r0, #3
 8006946:	e056      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8006948:	2000      	movs	r0, #0
 800694a:	e054      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
 800694c:	2000      	movs	r0, #0
 800694e:	e052      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006950:	4a30      	ldr	r2, [pc, #192]	; (8006a14 <HAL_RCC_OscConfig+0x6a8>)
 8006952:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006954:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006956:	2b01      	cmp	r3, #1
 8006958:	d04e      	beq.n	80069f8 <HAL_RCC_OscConfig+0x68c>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800695a:	f001 0303 	and.w	r3, r1, #3
 800695e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006960:	4293      	cmp	r3, r2
 8006962:	d14b      	bne.n	80069fc <HAL_RCC_OscConfig+0x690>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006964:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8006968:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800696a:	4299      	cmp	r1, r3
 800696c:	d148      	bne.n	8006a00 <HAL_RCC_OscConfig+0x694>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800696e:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8006972:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006974:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006976:	429a      	cmp	r2, r3
 8006978:	d144      	bne.n	8006a04 <HAL_RCC_OscConfig+0x698>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800697a:	f3c0 2246 	ubfx	r2, r0, #9, #7
 800697e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006980:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006982:	429a      	cmp	r2, r3
 8006984:	d140      	bne.n	8006a08 <HAL_RCC_OscConfig+0x69c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006986:	f3c0 4206 	ubfx	r2, r0, #16, #7
 800698a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800698c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800698e:	429a      	cmp	r2, r3
 8006990:	d13c      	bne.n	8006a0c <HAL_RCC_OscConfig+0x6a0>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006992:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8006996:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006998:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800699a:	4298      	cmp	r0, r3
 800699c:	d138      	bne.n	8006a10 <HAL_RCC_OscConfig+0x6a4>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800699e:	4b1d      	ldr	r3, [pc, #116]	; (8006a14 <HAL_RCC_OscConfig+0x6a8>)
 80069a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069a2:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80069a6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d101      	bne.n	80069b0 <HAL_RCC_OscConfig+0x644>
  return HAL_OK;
 80069ac:	2000      	movs	r0, #0
 80069ae:	e022      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
          __HAL_RCC_PLLFRACN_DISABLE();
 80069b0:	4a18      	ldr	r2, [pc, #96]	; (8006a14 <HAL_RCC_OscConfig+0x6a8>)
 80069b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80069b4:	f023 0301 	bic.w	r3, r3, #1
 80069b8:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 80069ba:	f7fd f87b 	bl	8003ab4 <HAL_GetTick>
 80069be:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80069c0:	f7fd f878 	bl	8003ab4 <HAL_GetTick>
 80069c4:	42a8      	cmp	r0, r5
 80069c6:	d0fb      	beq.n	80069c0 <HAL_RCC_OscConfig+0x654>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80069c8:	4a12      	ldr	r2, [pc, #72]	; (8006a14 <HAL_RCC_OscConfig+0x6a8>)
 80069ca:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80069cc:	4b13      	ldr	r3, [pc, #76]	; (8006a1c <HAL_RCC_OscConfig+0x6b0>)
 80069ce:	400b      	ands	r3, r1
 80069d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80069d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80069d6:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80069d8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80069da:	f043 0301 	orr.w	r3, r3, #1
 80069de:	62d3      	str	r3, [r2, #44]	; 0x2c
  return HAL_OK;
 80069e0:	2000      	movs	r0, #0
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
    return HAL_ERROR;
 80069e4:	2001      	movs	r0, #1
}
 80069e6:	4770      	bx	lr
        return HAL_ERROR;
 80069e8:	2001      	movs	r0, #1
 80069ea:	e004      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 80069ec:	2001      	movs	r0, #1
 80069ee:	e002      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
        return HAL_ERROR;
 80069f0:	2001      	movs	r0, #1
 80069f2:	e000      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
  return HAL_OK;
 80069f4:	2000      	movs	r0, #0
}
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 80069f8:	2001      	movs	r0, #1
 80069fa:	e7fc      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
 80069fc:	2001      	movs	r0, #1
 80069fe:	e7fa      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
 8006a00:	2001      	movs	r0, #1
 8006a02:	e7f8      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
 8006a04:	2001      	movs	r0, #1
 8006a06:	e7f6      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
 8006a08:	2001      	movs	r0, #1
 8006a0a:	e7f4      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
 8006a0c:	2001      	movs	r0, #1
 8006a0e:	e7f2      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
 8006a10:	2001      	movs	r0, #1
 8006a12:	e7f0      	b.n	80069f6 <HAL_RCC_OscConfig+0x68a>
 8006a14:	58024400 	.word	0x58024400
 8006a18:	fffffc0c 	.word	0xfffffc0c
 8006a1c:	ffff0007 	.word	0xffff0007

08006a20 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a20:	4b74      	ldr	r3, [pc, #464]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a28:	2b10      	cmp	r3, #16
 8006a2a:	f000 80de 	beq.w	8006bea <HAL_RCC_GetSysClockFreq+0x1ca>
 8006a2e:	2b18      	cmp	r3, #24
 8006a30:	d00f      	beq.n	8006a52 <HAL_RCC_GetSysClockFreq+0x32>
 8006a32:	b10b      	cbz	r3, 8006a38 <HAL_RCC_GetSysClockFreq+0x18>
 8006a34:	4870      	ldr	r0, [pc, #448]	; (8006bf8 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8006a36:	4770      	bx	lr
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a38:	4b6e      	ldr	r3, [pc, #440]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f013 0f20 	tst.w	r3, #32
 8006a40:	f000 80d5 	beq.w	8006bee <HAL_RCC_GetSysClockFreq+0x1ce>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a44:	4b6b      	ldr	r3, [pc, #428]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006a4c:	486b      	ldr	r0, [pc, #428]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x1dc>)
 8006a4e:	40d8      	lsrs	r0, r3
 8006a50:	4770      	bx	lr
{
 8006a52:	b410      	push	{r4}
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a54:	4b67      	ldr	r3, [pc, #412]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a58:	f002 0203 	and.w	r2, r2, #3
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006a5c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8006a5e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006a62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a64:	f001 0101 	and.w	r1, r1, #1
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a6a:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8006a6e:	fb01 f303 	mul.w	r3, r1, r3
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 7a67 	vcvt.f32.u32	s15, s15

      if (pllm != 0U)
 8006a7a:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8006a7e:	f000 8094 	beq.w	8006baa <HAL_RCC_GetSysClockFreq+0x18a>
      {
        switch (pllsource)
 8006a82:	2a01      	cmp	r2, #1
 8006a84:	d066      	beq.n	8006b54 <HAL_RCC_GetSysClockFreq+0x134>
 8006a86:	2a02      	cmp	r2, #2
 8006a88:	f000 8092 	beq.w	8006bb0 <HAL_RCC_GetSysClockFreq+0x190>
 8006a8c:	b1e2      	cbz	r2, 8006ac8 <HAL_RCC_GetSysClockFreq+0xa8>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a8e:	ee07 0a10 	vmov	s14, r0
 8006a92:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006a96:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8006c00 <HAL_RCC_GetSysClockFreq+0x1e0>
 8006a9a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006a9e:	4b55      	ldr	r3, [pc, #340]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa6:	ee06 3a90 	vmov	s13, r3
 8006aaa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006aae:	ed9f 6a55 	vldr	s12, [pc, #340]	; 8006c04 <HAL_RCC_GetSysClockFreq+0x1e4>
 8006ab2:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac2:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8006ac6:	e061      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x16c>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ac8:	4b4a      	ldr	r3, [pc, #296]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f013 0f20 	tst.w	r3, #32
 8006ad0:	d023      	beq.n	8006b1a <HAL_RCC_GetSysClockFreq+0xfa>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ad2:	4948      	ldr	r1, [pc, #288]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006ad4:	680a      	ldr	r2, [r1, #0]
 8006ad6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006ada:	4b48      	ldr	r3, [pc, #288]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x1dc>)
 8006adc:	40d3      	lsrs	r3, r2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ade:	ee07 3a10 	vmov	s14, r3
 8006ae2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006ae6:	ee07 0a10 	vmov	s14, r0
 8006aea:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8006aee:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8006af2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8006af4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af8:	ee06 3a90 	vmov	s13, r3
 8006afc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006b00:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8006c04 <HAL_RCC_GetSysClockFreq+0x1e4>
 8006b04:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b18:	e038      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x16c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b1a:	ee07 0a10 	vmov	s14, r0
 8006b1e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006b22:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8006c08 <HAL_RCC_GetSysClockFreq+0x1e8>
 8006b26:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006b2a:	4b32      	ldr	r3, [pc, #200]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b32:	ee06 3a90 	vmov	s13, r3
 8006b36:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006b3a:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8006c04 <HAL_RCC_GetSysClockFreq+0x1e4>
 8006b3e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006b42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b52:	e01b      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x16c>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b54:	ee07 0a10 	vmov	s14, r0
 8006b58:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006b5c:	ed9f 6a28 	vldr	s12, [pc, #160]	; 8006c00 <HAL_RCC_GetSysClockFreq+0x1e0>
 8006b60:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006b64:	4b23      	ldr	r3, [pc, #140]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6c:	ee06 3a90 	vmov	s13, r3
 8006b70:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006b74:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8006c04 <HAL_RCC_GetSysClockFreq+0x1e4>
 8006b78:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006b7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b88:	ee27 7a27 	vmul.f32	s14, s14, s15
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006b8c:	4b19      	ldr	r3, [pc, #100]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b90:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006b94:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006ba2:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8006ba6:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 8006baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bae:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bb0:	ee07 0a10 	vmov	s14, r0
 8006bb4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006bb8:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8006c0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006bbc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006bc0:	4b0c      	ldr	r3, [pc, #48]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc8:	ee06 3a90 	vmov	s13, r3
 8006bcc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8006bd0:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8006c04 <HAL_RCC_GetSysClockFreq+0x1e4>
 8006bd4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006bd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006be4:	ee27 7a27 	vmul.f32	s14, s14, s15
            break;
 8006be8:	e7d0      	b.n	8006b8c <HAL_RCC_GetSysClockFreq+0x16c>
      sysclockfreq = HSE_VALUE;
 8006bea:	4809      	ldr	r0, [pc, #36]	; (8006c10 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8006bec:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006bee:	4803      	ldr	r0, [pc, #12]	; (8006bfc <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 8006bf0:	4770      	bx	lr
 8006bf2:	bf00      	nop
 8006bf4:	58024400 	.word	0x58024400
 8006bf8:	003d0900 	.word	0x003d0900
 8006bfc:	03d09000 	.word	0x03d09000
 8006c00:	4a742400 	.word	0x4a742400
 8006c04:	39000000 	.word	0x39000000
 8006c08:	4c742400 	.word	0x4c742400
 8006c0c:	4bbebc20 	.word	0x4bbebc20
 8006c10:	017d7840 	.word	0x017d7840

08006c14 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8006c14:	2800      	cmp	r0, #0
 8006c16:	f000 8132 	beq.w	8006e7e <HAL_RCC_ClockConfig+0x26a>
{
 8006c1a:	b570      	push	{r4, r5, r6, lr}
 8006c1c:	460d      	mov	r5, r1
 8006c1e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c20:	4b9b      	ldr	r3, [pc, #620]	; (8006e90 <HAL_RCC_ClockConfig+0x27c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 030f 	and.w	r3, r3, #15
 8006c28:	428b      	cmp	r3, r1
 8006c2a:	d20b      	bcs.n	8006c44 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c2c:	4a98      	ldr	r2, [pc, #608]	; (8006e90 <HAL_RCC_ClockConfig+0x27c>)
 8006c2e:	6813      	ldr	r3, [r2, #0]
 8006c30:	f023 030f 	bic.w	r3, r3, #15
 8006c34:	430b      	orrs	r3, r1
 8006c36:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c38:	6813      	ldr	r3, [r2, #0]
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	428b      	cmp	r3, r1
 8006c40:	f040 811f 	bne.w	8006e82 <HAL_RCC_ClockConfig+0x26e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	f013 0f04 	tst.w	r3, #4
 8006c4a:	d00c      	beq.n	8006c66 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c4c:	6922      	ldr	r2, [r4, #16]
 8006c4e:	4b91      	ldr	r3, [pc, #580]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d905      	bls.n	8006c66 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c5a:	498e      	ldr	r1, [pc, #568]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006c5c:	698b      	ldr	r3, [r1, #24]
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	431a      	orrs	r2, r3
 8006c64:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	f013 0f08 	tst.w	r3, #8
 8006c6c:	d00c      	beq.n	8006c88 <HAL_RCC_ClockConfig+0x74>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c6e:	6962      	ldr	r2, [r4, #20]
 8006c70:	4b88      	ldr	r3, [pc, #544]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d905      	bls.n	8006c88 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c7c:	4985      	ldr	r1, [pc, #532]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006c7e:	69cb      	ldr	r3, [r1, #28]
 8006c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c84:	431a      	orrs	r2, r3
 8006c86:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	f013 0f10 	tst.w	r3, #16
 8006c8e:	d00c      	beq.n	8006caa <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c90:	69a2      	ldr	r2, [r4, #24]
 8006c92:	4b80      	ldr	r3, [pc, #512]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d905      	bls.n	8006caa <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c9e:	497d      	ldr	r1, [pc, #500]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006ca0:	69cb      	ldr	r3, [r1, #28]
 8006ca2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	f013 0f20 	tst.w	r3, #32
 8006cb0:	d00c      	beq.n	8006ccc <HAL_RCC_ClockConfig+0xb8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cb2:	69e2      	ldr	r2, [r4, #28]
 8006cb4:	4b77      	ldr	r3, [pc, #476]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d905      	bls.n	8006ccc <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006cc0:	4974      	ldr	r1, [pc, #464]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006cc2:	6a0b      	ldr	r3, [r1, #32]
 8006cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc8:	431a      	orrs	r2, r3
 8006cca:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	f013 0f02 	tst.w	r3, #2
 8006cd2:	d00c      	beq.n	8006cee <HAL_RCC_ClockConfig+0xda>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cd4:	68e2      	ldr	r2, [r4, #12]
 8006cd6:	4b6f      	ldr	r3, [pc, #444]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	f003 030f 	and.w	r3, r3, #15
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d905      	bls.n	8006cee <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ce2:	496c      	ldr	r1, [pc, #432]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006ce4:	698b      	ldr	r3, [r1, #24]
 8006ce6:	f023 030f 	bic.w	r3, r3, #15
 8006cea:	431a      	orrs	r2, r3
 8006cec:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	f013 0f01 	tst.w	r3, #1
 8006cf4:	d041      	beq.n	8006d7a <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006cf6:	4a67      	ldr	r2, [pc, #412]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006cf8:	6993      	ldr	r3, [r2, #24]
 8006cfa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006cfe:	68a1      	ldr	r1, [r4, #8]
 8006d00:	430b      	orrs	r3, r1
 8006d02:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d04:	6863      	ldr	r3, [r4, #4]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d00a      	beq.n	8006d20 <HAL_RCC_ClockConfig+0x10c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d0a:	2b03      	cmp	r3, #3
 8006d0c:	d027      	beq.n	8006d5e <HAL_RCC_ClockConfig+0x14a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d02c      	beq.n	8006d6c <HAL_RCC_ClockConfig+0x158>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d12:	4a60      	ldr	r2, [pc, #384]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006d14:	6812      	ldr	r2, [r2, #0]
 8006d16:	f012 0f04 	tst.w	r2, #4
 8006d1a:	d106      	bne.n	8006d2a <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8006d1c:	2001      	movs	r0, #1
 8006d1e:	e0ad      	b.n	8006e7c <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8006d26:	f000 80ae 	beq.w	8006e86 <HAL_RCC_ClockConfig+0x272>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d2a:	495a      	ldr	r1, [pc, #360]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006d2c:	690a      	ldr	r2, [r1, #16]
 8006d2e:	f022 0207 	bic.w	r2, r2, #7
 8006d32:	4313      	orrs	r3, r2
 8006d34:	610b      	str	r3, [r1, #16]
    tickstart = HAL_GetTick();
 8006d36:	f7fc febd 	bl	8003ab4 <HAL_GetTick>
 8006d3a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d3c:	4b55      	ldr	r3, [pc, #340]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006d3e:	691b      	ldr	r3, [r3, #16]
 8006d40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d44:	6862      	ldr	r2, [r4, #4]
 8006d46:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8006d4a:	d016      	beq.n	8006d7a <HAL_RCC_ClockConfig+0x166>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d4c:	f7fc feb2 	bl	8003ab4 <HAL_GetTick>
 8006d50:	1b80      	subs	r0, r0, r6
 8006d52:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d56:	4298      	cmp	r0, r3
 8006d58:	d9f0      	bls.n	8006d3c <HAL_RCC_ClockConfig+0x128>
        return HAL_TIMEOUT;
 8006d5a:	2003      	movs	r0, #3
 8006d5c:	e08e      	b.n	8006e7c <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d5e:	4a4d      	ldr	r2, [pc, #308]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006d60:	6812      	ldr	r2, [r2, #0]
 8006d62:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8006d66:	d1e0      	bne.n	8006d2a <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8006d68:	2001      	movs	r0, #1
 8006d6a:	e087      	b.n	8006e7c <HAL_RCC_ClockConfig+0x268>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d6c:	4a49      	ldr	r2, [pc, #292]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006d6e:	6812      	ldr	r2, [r2, #0]
 8006d70:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006d74:	d1d9      	bne.n	8006d2a <HAL_RCC_ClockConfig+0x116>
        return HAL_ERROR;
 8006d76:	2001      	movs	r0, #1
 8006d78:	e080      	b.n	8006e7c <HAL_RCC_ClockConfig+0x268>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	f013 0f02 	tst.w	r3, #2
 8006d80:	d00c      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x188>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d82:	68e2      	ldr	r2, [r4, #12]
 8006d84:	4b43      	ldr	r3, [pc, #268]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006d86:	699b      	ldr	r3, [r3, #24]
 8006d88:	f003 030f 	and.w	r3, r3, #15
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d205      	bcs.n	8006d9c <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d90:	4940      	ldr	r1, [pc, #256]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006d92:	698b      	ldr	r3, [r1, #24]
 8006d94:	f023 030f 	bic.w	r3, r3, #15
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	618a      	str	r2, [r1, #24]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006d9c:	4b3c      	ldr	r3, [pc, #240]	; (8006e90 <HAL_RCC_ClockConfig+0x27c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 030f 	and.w	r3, r3, #15
 8006da4:	42ab      	cmp	r3, r5
 8006da6:	d90a      	bls.n	8006dbe <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da8:	4a39      	ldr	r2, [pc, #228]	; (8006e90 <HAL_RCC_ClockConfig+0x27c>)
 8006daa:	6813      	ldr	r3, [r2, #0]
 8006dac:	f023 030f 	bic.w	r3, r3, #15
 8006db0:	432b      	orrs	r3, r5
 8006db2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006db4:	6813      	ldr	r3, [r2, #0]
 8006db6:	f003 030f 	and.w	r3, r3, #15
 8006dba:	42ab      	cmp	r3, r5
 8006dbc:	d165      	bne.n	8006e8a <HAL_RCC_ClockConfig+0x276>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	f013 0f04 	tst.w	r3, #4
 8006dc4:	d00c      	beq.n	8006de0 <HAL_RCC_ClockConfig+0x1cc>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006dc6:	6922      	ldr	r2, [r4, #16]
 8006dc8:	4b32      	ldr	r3, [pc, #200]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d205      	bcs.n	8006de0 <HAL_RCC_ClockConfig+0x1cc>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006dd4:	492f      	ldr	r1, [pc, #188]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006dd6:	698b      	ldr	r3, [r1, #24]
 8006dd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ddc:	431a      	orrs	r2, r3
 8006dde:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	f013 0f08 	tst.w	r3, #8
 8006de6:	d00c      	beq.n	8006e02 <HAL_RCC_ClockConfig+0x1ee>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006de8:	6962      	ldr	r2, [r4, #20]
 8006dea:	4b2a      	ldr	r3, [pc, #168]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d205      	bcs.n	8006e02 <HAL_RCC_ClockConfig+0x1ee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006df6:	4927      	ldr	r1, [pc, #156]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006df8:	69cb      	ldr	r3, [r1, #28]
 8006dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e02:	6823      	ldr	r3, [r4, #0]
 8006e04:	f013 0f10 	tst.w	r3, #16
 8006e08:	d00c      	beq.n	8006e24 <HAL_RCC_ClockConfig+0x210>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e0a:	69a2      	ldr	r2, [r4, #24]
 8006e0c:	4b21      	ldr	r3, [pc, #132]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d205      	bcs.n	8006e24 <HAL_RCC_ClockConfig+0x210>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e18:	491e      	ldr	r1, [pc, #120]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006e1a:	69cb      	ldr	r3, [r1, #28]
 8006e1c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006e20:	431a      	orrs	r2, r3
 8006e22:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	f013 0f20 	tst.w	r3, #32
 8006e2a:	d00c      	beq.n	8006e46 <HAL_RCC_ClockConfig+0x232>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e2c:	69e2      	ldr	r2, [r4, #28]
 8006e2e:	4b19      	ldr	r3, [pc, #100]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d205      	bcs.n	8006e46 <HAL_RCC_ClockConfig+0x232>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006e3a:	4916      	ldr	r1, [pc, #88]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006e3c:	6a0b      	ldr	r3, [r1, #32]
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e42:	431a      	orrs	r2, r3
 8006e44:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006e46:	f7ff fdeb 	bl	8006a20 <HAL_RCC_GetSysClockFreq>
 8006e4a:	4912      	ldr	r1, [pc, #72]	; (8006e94 <HAL_RCC_ClockConfig+0x280>)
 8006e4c:	698b      	ldr	r3, [r1, #24]
 8006e4e:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006e52:	4a11      	ldr	r2, [pc, #68]	; (8006e98 <HAL_RCC_ClockConfig+0x284>)
 8006e54:	5cd3      	ldrb	r3, [r2, r3]
 8006e56:	f003 031f 	and.w	r3, r3, #31
 8006e5a:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006e5c:	698b      	ldr	r3, [r1, #24]
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	5cd3      	ldrb	r3, [r2, r3]
 8006e64:	f003 031f 	and.w	r3, r3, #31
 8006e68:	fa20 f303 	lsr.w	r3, r0, r3
 8006e6c:	4a0b      	ldr	r2, [pc, #44]	; (8006e9c <HAL_RCC_ClockConfig+0x288>)
 8006e6e:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8006e70:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <HAL_RCC_ClockConfig+0x28c>)
 8006e72:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8006e74:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <HAL_RCC_ClockConfig+0x290>)
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	f7fc fdba 	bl	80039f0 <HAL_InitTick>
}
 8006e7c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006e7e:	2001      	movs	r0, #1
}
 8006e80:	4770      	bx	lr
      return HAL_ERROR;
 8006e82:	2001      	movs	r0, #1
 8006e84:	e7fa      	b.n	8006e7c <HAL_RCC_ClockConfig+0x268>
        return HAL_ERROR;
 8006e86:	2001      	movs	r0, #1
 8006e88:	e7f8      	b.n	8006e7c <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 8006e8a:	2001      	movs	r0, #1
 8006e8c:	e7f6      	b.n	8006e7c <HAL_RCC_ClockConfig+0x268>
 8006e8e:	bf00      	nop
 8006e90:	52002000 	.word	0x52002000
 8006e94:	58024400 	.word	0x58024400
 8006e98:	08019998 	.word	0x08019998
 8006e9c:	20000af4 	.word	0x20000af4
 8006ea0:	20000af0 	.word	0x20000af0
 8006ea4:	20000b3c 	.word	0x20000b3c

08006ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ea8:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006eaa:	f7ff fdb9 	bl	8006a20 <HAL_RCC_GetSysClockFreq>
 8006eae:	4a0b      	ldr	r2, [pc, #44]	; (8006edc <HAL_RCC_GetHCLKFreq+0x34>)
 8006eb0:	6993      	ldr	r3, [r2, #24]
 8006eb2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8006eb6:	490a      	ldr	r1, [pc, #40]	; (8006ee0 <HAL_RCC_GetHCLKFreq+0x38>)
 8006eb8:	5ccb      	ldrb	r3, [r1, r3]
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ec2:	6992      	ldr	r2, [r2, #24]
 8006ec4:	f002 020f 	and.w	r2, r2, #15
 8006ec8:	5c88      	ldrb	r0, [r1, r2]
 8006eca:	f000 001f 	and.w	r0, r0, #31
 8006ece:	fa23 f000 	lsr.w	r0, r3, r0
 8006ed2:	4a04      	ldr	r2, [pc, #16]	; (8006ee4 <HAL_RCC_GetHCLKFreq+0x3c>)
 8006ed4:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ed6:	4a04      	ldr	r2, [pc, #16]	; (8006ee8 <HAL_RCC_GetHCLKFreq+0x40>)
 8006ed8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8006eda:	bd08      	pop	{r3, pc}
 8006edc:	58024400 	.word	0x58024400
 8006ee0:	08019998 	.word	0x08019998
 8006ee4:	20000af4 	.word	0x20000af4
 8006ee8:	20000af0 	.word	0x20000af0

08006eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006eec:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006eee:	f7ff ffdb 	bl	8006ea8 <HAL_RCC_GetHCLKFreq>
 8006ef2:	4b05      	ldr	r3, [pc, #20]	; (8006f08 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006efa:	4a04      	ldr	r2, [pc, #16]	; (8006f0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006efc:	5cd3      	ldrb	r3, [r2, r3]
 8006efe:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006f02:	40d8      	lsrs	r0, r3
 8006f04:	bd08      	pop	{r3, pc}
 8006f06:	bf00      	nop
 8006f08:	58024400 	.word	0x58024400
 8006f0c:	08019998 	.word	0x08019998

08006f10 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f10:	4b40      	ldr	r3, [pc, #256]	; (8007014 <RCCEx_PLL2_Config+0x104>)
 8006f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f14:	f003 0303 	and.w	r3, r3, #3
 8006f18:	2b03      	cmp	r3, #3
 8006f1a:	d079      	beq.n	8007010 <RCCEx_PLL2_Config+0x100>
{
 8006f1c:	b570      	push	{r4, r5, r6, lr}
 8006f1e:	4605      	mov	r5, r0
 8006f20:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f22:	4a3c      	ldr	r2, [pc, #240]	; (8007014 <RCCEx_PLL2_Config+0x104>)
 8006f24:	6813      	ldr	r3, [r2, #0]
 8006f26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f2c:	f7fc fdc2 	bl	8003ab4 <HAL_GetTick>
 8006f30:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f32:	4b38      	ldr	r3, [pc, #224]	; (8007014 <RCCEx_PLL2_Config+0x104>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006f3a:	d006      	beq.n	8006f4a <RCCEx_PLL2_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f3c:	f7fc fdba 	bl	8003ab4 <HAL_GetTick>
 8006f40:	1b03      	subs	r3, r0, r4
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d9f5      	bls.n	8006f32 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8006f46:	2003      	movs	r0, #3

  }


  return status;
}
 8006f48:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006f4a:	4b32      	ldr	r3, [pc, #200]	; (8007014 <RCCEx_PLL2_Config+0x104>)
 8006f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f4e:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8006f52:	6829      	ldr	r1, [r5, #0]
 8006f54:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8006f58:	629a      	str	r2, [r3, #40]	; 0x28
 8006f5a:	686a      	ldr	r2, [r5, #4]
 8006f5c:	3a01      	subs	r2, #1
 8006f5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f62:	68a9      	ldr	r1, [r5, #8]
 8006f64:	3901      	subs	r1, #1
 8006f66:	0249      	lsls	r1, r1, #9
 8006f68:	b289      	uxth	r1, r1
 8006f6a:	430a      	orrs	r2, r1
 8006f6c:	68e9      	ldr	r1, [r5, #12]
 8006f6e:	3901      	subs	r1, #1
 8006f70:	0409      	lsls	r1, r1, #16
 8006f72:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8006f76:	430a      	orrs	r2, r1
 8006f78:	6929      	ldr	r1, [r5, #16]
 8006f7a:	3901      	subs	r1, #1
 8006f7c:	0609      	lsls	r1, r1, #24
 8006f7e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8006f82:	430a      	orrs	r2, r1
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f88:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006f8c:	6969      	ldr	r1, [r5, #20]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f94:	f022 0220 	bic.w	r2, r2, #32
 8006f98:	69a9      	ldr	r1, [r5, #24]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa0:	f022 0210 	bic.w	r2, r2, #16
 8006fa4:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006fa6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8006fa8:	4a1b      	ldr	r2, [pc, #108]	; (8007018 <RCCEx_PLL2_Config+0x108>)
 8006faa:	400a      	ands	r2, r1
 8006fac:	69e9      	ldr	r1, [r5, #28]
 8006fae:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8006fb2:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb6:	f042 0210 	orr.w	r2, r2, #16
 8006fba:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8006fbc:	b9c6      	cbnz	r6, 8006ff0 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006fc6:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8006fc8:	4a12      	ldr	r2, [pc, #72]	; (8007014 <RCCEx_PLL2_Config+0x104>)
 8006fca:	6813      	ldr	r3, [r2, #0]
 8006fcc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006fd0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006fd2:	f7fc fd6f 	bl	8003ab4 <HAL_GetTick>
 8006fd6:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fd8:	4b0e      	ldr	r3, [pc, #56]	; (8007014 <RCCEx_PLL2_Config+0x104>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8006fe0:	d114      	bne.n	800700c <RCCEx_PLL2_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fe2:	f7fc fd67 	bl	8003ab4 <HAL_GetTick>
 8006fe6:	1b00      	subs	r0, r0, r4
 8006fe8:	2802      	cmp	r0, #2
 8006fea:	d9f5      	bls.n	8006fd8 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8006fec:	2003      	movs	r0, #3
 8006fee:	e7ab      	b.n	8006f48 <RCCEx_PLL2_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ff0:	2e01      	cmp	r6, #1
 8006ff2:	d005      	beq.n	8007000 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006ff4:	4a07      	ldr	r2, [pc, #28]	; (8007014 <RCCEx_PLL2_Config+0x104>)
 8006ff6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006ff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ffc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006ffe:	e7e3      	b.n	8006fc8 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007000:	4a04      	ldr	r2, [pc, #16]	; (8007014 <RCCEx_PLL2_Config+0x104>)
 8007002:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007008:	62d3      	str	r3, [r2, #44]	; 0x2c
 800700a:	e7dd      	b.n	8006fc8 <RCCEx_PLL2_Config+0xb8>
  return status;
 800700c:	2000      	movs	r0, #0
 800700e:	e79b      	b.n	8006f48 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8007010:	2001      	movs	r0, #1
}
 8007012:	4770      	bx	lr
 8007014:	58024400 	.word	0x58024400
 8007018:	ffff0007 	.word	0xffff0007

0800701c <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800701c:	4b40      	ldr	r3, [pc, #256]	; (8007120 <RCCEx_PLL3_Config+0x104>)
 800701e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007020:	f003 0303 	and.w	r3, r3, #3
 8007024:	2b03      	cmp	r3, #3
 8007026:	d079      	beq.n	800711c <RCCEx_PLL3_Config+0x100>
{
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	4605      	mov	r5, r0
 800702c:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800702e:	4a3c      	ldr	r2, [pc, #240]	; (8007120 <RCCEx_PLL3_Config+0x104>)
 8007030:	6813      	ldr	r3, [r2, #0]
 8007032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007036:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007038:	f7fc fd3c 	bl	8003ab4 <HAL_GetTick>
 800703c:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800703e:	4b38      	ldr	r3, [pc, #224]	; (8007120 <RCCEx_PLL3_Config+0x104>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007046:	d006      	beq.n	8007056 <RCCEx_PLL3_Config+0x3a>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007048:	f7fc fd34 	bl	8003ab4 <HAL_GetTick>
 800704c:	1b03      	subs	r3, r0, r4
 800704e:	2b02      	cmp	r3, #2
 8007050:	d9f5      	bls.n	800703e <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8007052:	2003      	movs	r0, #3

  }


  return status;
}
 8007054:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007056:	4b32      	ldr	r3, [pc, #200]	; (8007120 <RCCEx_PLL3_Config+0x104>)
 8007058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800705a:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 800705e:	6829      	ldr	r1, [r5, #0]
 8007060:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8007064:	629a      	str	r2, [r3, #40]	; 0x28
 8007066:	686a      	ldr	r2, [r5, #4]
 8007068:	3a01      	subs	r2, #1
 800706a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800706e:	68a9      	ldr	r1, [r5, #8]
 8007070:	3901      	subs	r1, #1
 8007072:	0249      	lsls	r1, r1, #9
 8007074:	b289      	uxth	r1, r1
 8007076:	430a      	orrs	r2, r1
 8007078:	68e9      	ldr	r1, [r5, #12]
 800707a:	3901      	subs	r1, #1
 800707c:	0409      	lsls	r1, r1, #16
 800707e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8007082:	430a      	orrs	r2, r1
 8007084:	6929      	ldr	r1, [r5, #16]
 8007086:	3901      	subs	r1, #1
 8007088:	0609      	lsls	r1, r1, #24
 800708a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800708e:	430a      	orrs	r2, r1
 8007090:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007094:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007098:	6969      	ldr	r1, [r5, #20]
 800709a:	430a      	orrs	r2, r1
 800709c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800709e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80070a4:	69a9      	ldr	r1, [r5, #24]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80070aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070b0:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80070b2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80070b4:	4a1b      	ldr	r2, [pc, #108]	; (8007124 <RCCEx_PLL3_Config+0x108>)
 80070b6:	400a      	ands	r2, r1
 80070b8:	69e9      	ldr	r1, [r5, #28]
 80070ba:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80070be:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 80070c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070c6:	62da      	str	r2, [r3, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 80070c8:	b9c6      	cbnz	r6, 80070fc <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80070ca:	461a      	mov	r2, r3
 80070cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80070d2:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 80070d4:	4a12      	ldr	r2, [pc, #72]	; (8007120 <RCCEx_PLL3_Config+0x104>)
 80070d6:	6813      	ldr	r3, [r2, #0]
 80070d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070dc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80070de:	f7fc fce9 	bl	8003ab4 <HAL_GetTick>
 80070e2:	4604      	mov	r4, r0
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070e4:	4b0e      	ldr	r3, [pc, #56]	; (8007120 <RCCEx_PLL3_Config+0x104>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80070ec:	d114      	bne.n	8007118 <RCCEx_PLL3_Config+0xfc>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070ee:	f7fc fce1 	bl	8003ab4 <HAL_GetTick>
 80070f2:	1b00      	subs	r0, r0, r4
 80070f4:	2802      	cmp	r0, #2
 80070f6:	d9f5      	bls.n	80070e4 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 80070f8:	2003      	movs	r0, #3
 80070fa:	e7ab      	b.n	8007054 <RCCEx_PLL3_Config+0x38>
    else if (Divider == DIVIDER_Q_UPDATE)
 80070fc:	2e01      	cmp	r6, #1
 80070fe:	d005      	beq.n	800710c <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007100:	4a07      	ldr	r2, [pc, #28]	; (8007120 <RCCEx_PLL3_Config+0x104>)
 8007102:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007104:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007108:	62d3      	str	r3, [r2, #44]	; 0x2c
 800710a:	e7e3      	b.n	80070d4 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800710c:	4a04      	ldr	r2, [pc, #16]	; (8007120 <RCCEx_PLL3_Config+0x104>)
 800710e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007110:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007114:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007116:	e7dd      	b.n	80070d4 <RCCEx_PLL3_Config+0xb8>
  return status;
 8007118:	2000      	movs	r0, #0
 800711a:	e79b      	b.n	8007054 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 800711c:	2001      	movs	r0, #1
}
 800711e:	4770      	bx	lr
 8007120:	58024400 	.word	0x58024400
 8007124:	ffff0007 	.word	0xffff0007

08007128 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800712c:	6803      	ldr	r3, [r0, #0]
 800712e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8007132:	d030      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007134:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8007136:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800713a:	d026      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x62>
 800713c:	d80e      	bhi.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800713e:	b1eb      	cbz	r3, 800717c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007140:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007144:	d107      	bne.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x2e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007146:	2102      	movs	r1, #2
 8007148:	3008      	adds	r0, #8
 800714a:	f7ff fee1 	bl	8006f10 <RCCEx_PLL2_Config>
 800714e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007150:	b145      	cbz	r5, 8007164 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007152:	462e      	mov	r6, r5
 8007154:	e021      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007156:	2601      	movs	r6, #1
 8007158:	4635      	mov	r5, r6
 800715a:	e01e      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800715c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007160:	d109      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8007162:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007164:	4a98      	ldr	r2, [pc, #608]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007166:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007168:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800716c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800716e:	430b      	orrs	r3, r1
 8007170:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007172:	2600      	movs	r6, #0
 8007174:	e011      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007176:	2601      	movs	r6, #1
 8007178:	4635      	mov	r5, r6
 800717a:	e00e      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0x72>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800717c:	4a92      	ldr	r2, [pc, #584]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800717e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007184:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007186:	2500      	movs	r5, #0
 8007188:	e7ec      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800718a:	2102      	movs	r1, #2
 800718c:	3028      	adds	r0, #40	; 0x28
 800718e:	f7ff ff45 	bl	800701c <RCCEx_PLL3_Config>
 8007192:	4605      	mov	r5, r0
        break;
 8007194:	e7dc      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007196:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007198:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	f413 7f80 	tst.w	r3, #256	; 0x100
 80071a0:	d014      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch (PeriphClkInit->Sai1ClockSelection)
 80071a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d832      	bhi.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xe6>
 80071a8:	e8df f003 	tbb	[pc, r3]
 80071ac:	082a2303 	.word	0x082a2303
 80071b0:	08          	.byte	0x08
 80071b1:	00          	.byte	0x00
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071b2:	4a85      	ldr	r2, [pc, #532]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80071b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80071b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ba:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80071bc:	bb55      	cbnz	r5, 8007214 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071be:	4a82      	ldr	r2, [pc, #520]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80071c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80071c2:	f023 0307 	bic.w	r3, r3, #7
 80071c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80071c8:	430b      	orrs	r3, r1
 80071ca:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	f413 7f00 	tst.w	r3, #512	; 0x200
 80071d2:	d031      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch (PeriphClkInit->Sai23ClockSelection)
 80071d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80071d6:	2b80      	cmp	r3, #128	; 0x80
 80071d8:	d04c      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80071da:	d820      	bhi.n	800721e <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d043      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80071e0:	2b40      	cmp	r3, #64	; 0x40
 80071e2:	d119      	bne.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071e4:	2100      	movs	r1, #0
 80071e6:	f104 0008 	add.w	r0, r4, #8
 80071ea:	f7ff fe91 	bl	8006f10 <RCCEx_PLL2_Config>
 80071ee:	4605      	mov	r5, r0
        break;
 80071f0:	e01a      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x100>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071f2:	2100      	movs	r1, #0
 80071f4:	f104 0008 	add.w	r0, r4, #8
 80071f8:	f7ff fe8a 	bl	8006f10 <RCCEx_PLL2_Config>
 80071fc:	4605      	mov	r5, r0
        break;
 80071fe:	e7dd      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x94>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007200:	2100      	movs	r1, #0
 8007202:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007206:	f7ff ff09 	bl	800701c <RCCEx_PLL3_Config>
 800720a:	4605      	mov	r5, r0
        break;
 800720c:	e7d6      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch (PeriphClkInit->Sai1ClockSelection)
 800720e:	2601      	movs	r6, #1
 8007210:	4635      	mov	r5, r6
 8007212:	e7db      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007214:	462e      	mov	r6, r5
 8007216:	e7d9      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch (PeriphClkInit->Sai23ClockSelection)
 8007218:	2601      	movs	r6, #1
 800721a:	4635      	mov	r5, r6
 800721c:	e00c      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800721e:	2bc0      	cmp	r3, #192	; 0xc0
 8007220:	d002      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8007222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007226:	d11c      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    if (ret == HAL_OK)
 8007228:	bb5d      	cbnz	r5, 8007282 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800722a:	4a67      	ldr	r2, [pc, #412]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800722c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800722e:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8007232:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007234:	430b      	orrs	r3, r1
 8007236:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007238:	6823      	ldr	r3, [r4, #0]
 800723a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800723e:	d046      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007240:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8007244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007248:	d039      	beq.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800724a:	d81f      	bhi.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x164>
 800724c:	b38b      	cbz	r3, 80072b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800724e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007252:	d118      	bne.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x15e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007254:	2100      	movs	r1, #0
 8007256:	f104 0008 	add.w	r0, r4, #8
 800725a:	f7ff fe59 	bl	8006f10 <RCCEx_PLL2_Config>
 800725e:	4605      	mov	r5, r0
        break;
 8007260:	e01a      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x170>
    switch (PeriphClkInit->Sai23ClockSelection)
 8007262:	2601      	movs	r6, #1
 8007264:	4635      	mov	r5, r6
 8007266:	e7e7      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x110>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007268:	4a57      	ldr	r2, [pc, #348]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800726a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800726c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007270:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007272:	e7d9      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x100>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007274:	2100      	movs	r1, #0
 8007276:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800727a:	f7ff fecf 	bl	800701c <RCCEx_PLL3_Config>
 800727e:	4605      	mov	r5, r0
        break;
 8007280:	e7d2      	b.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8007282:	462e      	mov	r6, r5
 8007284:	e7d8      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007286:	2601      	movs	r6, #1
 8007288:	4635      	mov	r5, r6
 800728a:	e020      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800728c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007290:	d002      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x170>
 8007292:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007296:	d109      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0x184>
    if (ret == HAL_OK)
 8007298:	b9c5      	cbnz	r5, 80072cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800729a:	4a4b      	ldr	r2, [pc, #300]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800729c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800729e:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80072a2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80072a6:	430b      	orrs	r3, r1
 80072a8:	6593      	str	r3, [r2, #88]	; 0x58
 80072aa:	e010      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    switch (PeriphClkInit->Sai4AClockSelection)
 80072ac:	2601      	movs	r6, #1
 80072ae:	4635      	mov	r5, r6
 80072b0:	e00d      	b.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072b2:	4a45      	ldr	r2, [pc, #276]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80072b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80072b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ba:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 80072bc:	e7ec      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x170>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072be:	2100      	movs	r1, #0
 80072c0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80072c4:	f7ff feaa 	bl	800701c <RCCEx_PLL3_Config>
 80072c8:	4605      	mov	r5, r0
        break;
 80072ca:	e7e5      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x170>
 80072cc:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80072d4:	d024      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch (PeriphClkInit->Sai4BClockSelection)
 80072d6:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80072da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072de:	d042      	beq.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80072e0:	d80e      	bhi.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d039      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x232>
 80072e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072ea:	d106      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072ec:	2100      	movs	r1, #0
 80072ee:	f104 0008 	add.w	r0, r4, #8
 80072f2:	f7ff fe0d 	bl	8006f10 <RCCEx_PLL2_Config>
 80072f6:	4605      	mov	r5, r0
        break;
 80072f8:	e008      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    switch (PeriphClkInit->Sai4BClockSelection)
 80072fa:	2601      	movs	r6, #1
 80072fc:	4635      	mov	r5, r6
 80072fe:	e00f      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007300:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007304:	d002      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007306:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800730a:	d123      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    if (ret == HAL_OK)
 800730c:	2d00      	cmp	r5, #0
 800730e:	d131      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007310:	4a2d      	ldr	r2, [pc, #180]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007312:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007314:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007318:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800731c:	430b      	orrs	r3, r1
 800731e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8007326:	d02e      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->QspiClockSelection)
 8007328:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800732a:	2b20      	cmp	r3, #32
 800732c:	d040      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800732e:	d826      	bhi.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x256>
 8007330:	b133      	cbz	r3, 8007340 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007332:	2b10      	cmp	r3, #16
 8007334:	d120      	bne.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x250>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007336:	4a24      	ldr	r2, [pc, #144]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007338:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800733a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800733e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007340:	2d00      	cmp	r5, #0
 8007342:	d13c      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x296>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007344:	4a20      	ldr	r2, [pc, #128]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8007346:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007348:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800734c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800734e:	430b      	orrs	r3, r1
 8007350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007352:	e018      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->Sai4BClockSelection)
 8007354:	2601      	movs	r6, #1
 8007356:	4635      	mov	r5, r6
 8007358:	e7e2      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800735a:	4a1b      	ldr	r2, [pc, #108]	; (80073c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800735c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800735e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007362:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007364:	e7d2      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007366:	2100      	movs	r1, #0
 8007368:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800736c:	f7ff fe56 	bl	800701c <RCCEx_PLL3_Config>
 8007370:	4605      	mov	r5, r0
        break;
 8007372:	e7cb      	b.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007374:	462e      	mov	r6, r5
 8007376:	e7d3      	b.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    switch (PeriphClkInit->QspiClockSelection)
 8007378:	2601      	movs	r6, #1
 800737a:	4635      	mov	r5, r6
 800737c:	e003      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800737e:	2b30      	cmp	r3, #48	; 0x30
 8007380:	d0de      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007382:	2601      	movs	r6, #1
 8007384:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800738c:	d02d      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi123ClockSelection)
 800738e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007394:	d04f      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8007396:	d819      	bhi.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x2a4>
 8007398:	2b00      	cmp	r3, #0
 800739a:	d046      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x302>
 800739c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073a0:	d10f      	bne.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073a2:	2100      	movs	r1, #0
 80073a4:	f104 0008 	add.w	r0, r4, #8
 80073a8:	f7ff fdb2 	bl	8006f10 <RCCEx_PLL2_Config>
 80073ac:	4605      	mov	r5, r0
        break;
 80073ae:	e013      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80073b0:	2102      	movs	r1, #2
 80073b2:	f104 0008 	add.w	r0, r4, #8
 80073b6:	f7ff fdab 	bl	8006f10 <RCCEx_PLL2_Config>
 80073ba:	4605      	mov	r5, r0
        break;
 80073bc:	e7c0      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80073be:	462e      	mov	r6, r5
 80073c0:	e7e1      	b.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    switch (PeriphClkInit->Spi123ClockSelection)
 80073c2:	2601      	movs	r6, #1
 80073c4:	4635      	mov	r5, r6
 80073c6:	e010      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80073c8:	58024400 	.word	0x58024400
 80073cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073d0:	d002      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80073d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073d6:	d125      	bne.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    if (ret == HAL_OK)
 80073d8:	2d00      	cmp	r5, #0
 80073da:	d133      	bne.n	8007444 <HAL_RCCEx_PeriphCLKConfig+0x31c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80073dc:	4a77      	ldr	r2, [pc, #476]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80073de:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80073e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073e4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80073e6:	430b      	orrs	r3, r1
 80073e8:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80073f0:	d038      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi45ClockSelection)
 80073f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073f8:	d053      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80073fa:	d828      	bhi.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x326>
 80073fc:	b143      	cbz	r3, 8007410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80073fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007402:	d121      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x320>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007404:	2101      	movs	r1, #1
 8007406:	f104 0008 	add.w	r0, r4, #8
 800740a:	f7ff fd81 	bl	8006f10 <RCCEx_PLL2_Config>
 800740e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007410:	2d00      	cmp	r5, #0
 8007412:	d14d      	bne.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x388>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007414:	4a69      	ldr	r2, [pc, #420]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007416:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007418:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800741c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800741e:	430b      	orrs	r3, r1
 8007420:	6513      	str	r3, [r2, #80]	; 0x50
 8007422:	e01f      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8007424:	2601      	movs	r6, #1
 8007426:	4635      	mov	r5, r6
 8007428:	e7df      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800742a:	4a64      	ldr	r2, [pc, #400]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800742c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800742e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007432:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007434:	e7d0      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007436:	2100      	movs	r1, #0
 8007438:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800743c:	f7ff fdee 	bl	800701c <RCCEx_PLL3_Config>
 8007440:	4605      	mov	r5, r0
        break;
 8007442:	e7c9      	b.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007444:	462e      	mov	r6, r5
 8007446:	e7d0      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    switch (PeriphClkInit->Spi45ClockSelection)
 8007448:	2601      	movs	r6, #1
 800744a:	4635      	mov	r5, r6
 800744c:	e00a      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800744e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007452:	d0dd      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007458:	d0da      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 800745a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800745e:	d0d7      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8007460:	2601      	movs	r6, #1
 8007462:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800746a:	d031      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    switch (PeriphClkInit->Spi6ClockSelection)
 800746c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8007470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007474:	d045      	beq.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x3da>
 8007476:	d820      	bhi.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x392>
 8007478:	b143      	cbz	r3, 800748c <HAL_RCCEx_PeriphCLKConfig+0x364>
 800747a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800747e:	d119      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007480:	2101      	movs	r1, #1
 8007482:	f104 0008 	add.w	r0, r4, #8
 8007486:	f7ff fd43 	bl	8006f10 <RCCEx_PLL2_Config>
 800748a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800748c:	2d00      	cmp	r5, #0
 800748e:	d13f      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007490:	4a4a      	ldr	r2, [pc, #296]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007492:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007494:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007498:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800749c:	430b      	orrs	r3, r1
 800749e:	6593      	str	r3, [r2, #88]	; 0x58
 80074a0:	e016      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074a2:	2101      	movs	r1, #1
 80074a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80074a8:	f7ff fdb8 	bl	800701c <RCCEx_PLL3_Config>
 80074ac:	4605      	mov	r5, r0
        break;
 80074ae:	e7af      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 80074b0:	462e      	mov	r6, r5
 80074b2:	e7d7      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    switch (PeriphClkInit->Spi6ClockSelection)
 80074b4:	2601      	movs	r6, #1
 80074b6:	4635      	mov	r5, r6
 80074b8:	e00a      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80074ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074be:	d0e5      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x364>
 80074c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074c4:	d0e2      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x364>
 80074c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074ca:	d0df      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x364>
 80074cc:	2601      	movs	r6, #1
 80074ce:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80074d6:	d009      	beq.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->FdcanClockSelection)
 80074d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80074da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074de:	d019      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80074e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074e4:	d024      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80074e6:	b1d3      	cbz	r3, 800751e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80074e8:	2601      	movs	r6, #1
 80074ea:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80074f2:	d033      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x434>
    switch (PeriphClkInit->FmcClockSelection)
 80074f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d85b      	bhi.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80074fa:	e8df f003 	tbb	[pc, r3]
 80074fe:	2227      	.short	0x2227
 8007500:	2753      	.short	0x2753
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007502:	2101      	movs	r1, #1
 8007504:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007508:	f7ff fd88 	bl	800701c <RCCEx_PLL3_Config>
 800750c:	4605      	mov	r5, r0
        break;
 800750e:	e7bd      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x364>
 8007510:	462e      	mov	r6, r5
 8007512:	e7dd      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007514:	4a29      	ldr	r2, [pc, #164]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007516:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800751c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800751e:	b975      	cbnz	r5, 800753e <HAL_RCCEx_PeriphCLKConfig+0x416>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007520:	4a26      	ldr	r2, [pc, #152]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007522:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007524:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007528:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800752a:	430b      	orrs	r3, r1
 800752c:	6513      	str	r3, [r2, #80]	; 0x50
 800752e:	e7dd      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007530:	2101      	movs	r1, #1
 8007532:	f104 0008 	add.w	r0, r4, #8
 8007536:	f7ff fceb 	bl	8006f10 <RCCEx_PLL2_Config>
 800753a:	4605      	mov	r5, r0
        break;
 800753c:	e7ef      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 800753e:	462e      	mov	r6, r5
 8007540:	e7d4      	b.n	80074ec <HAL_RCCEx_PeriphCLKConfig+0x3c4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007542:	4a1e      	ldr	r2, [pc, #120]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007544:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800754a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800754c:	bba5      	cbnz	r5, 80075b8 <HAL_RCCEx_PeriphCLKConfig+0x490>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800754e:	4a1b      	ldr	r2, [pc, #108]	; (80075bc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8007550:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007552:	f023 0303 	bic.w	r3, r3, #3
 8007556:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007558:	430b      	orrs	r3, r1
 800755a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8007562:	d12d      	bne.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	f013 0f01 	tst.w	r3, #1
 800756a:	f000 80a5 	beq.w	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    switch (PeriphClkInit->Usart16ClockSelection)
 800756e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8007570:	2b28      	cmp	r3, #40	; 0x28
 8007572:	f200 809f 	bhi.w	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x58c>
 8007576:	e8df f003 	tbb	[pc, r3]
 800757a:	9d8d      	.short	0x9d8d
 800757c:	9d9d9d9d 	.word	0x9d9d9d9d
 8007580:	9d879d9d 	.word	0x9d879d9d
 8007584:	9d9d9d9d 	.word	0x9d9d9d9d
 8007588:	9d969d9d 	.word	0x9d969d9d
 800758c:	9d9d9d9d 	.word	0x9d9d9d9d
 8007590:	9d8d9d9d 	.word	0x9d8d9d9d
 8007594:	9d9d9d9d 	.word	0x9d9d9d9d
 8007598:	9d8d9d9d 	.word	0x9d8d9d9d
 800759c:	9d9d9d9d 	.word	0x9d9d9d9d
 80075a0:	9d9d      	.short	0x9d9d
 80075a2:	8d          	.byte	0x8d
 80075a3:	00          	.byte	0x00
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075a4:	2102      	movs	r1, #2
 80075a6:	f104 0008 	add.w	r0, r4, #8
 80075aa:	f7ff fcb1 	bl	8006f10 <RCCEx_PLL2_Config>
 80075ae:	4605      	mov	r5, r0
        break;
 80075b0:	e7cc      	b.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (PeriphClkInit->FmcClockSelection)
 80075b2:	2601      	movs	r6, #1
 80075b4:	4635      	mov	r5, r6
 80075b6:	e7d1      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x434>
 80075b8:	462e      	mov	r6, r5
 80075ba:	e7cf      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x434>
 80075bc:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075c0:	4a91      	ldr	r2, [pc, #580]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x6e0>)
 80075c2:	6813      	ldr	r3, [r2, #0]
 80075c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075c8:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80075ca:	f7fc fa73 	bl	8003ab4 <HAL_GetTick>
 80075ce:	4607      	mov	r7, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80075d0:	4b8d      	ldr	r3, [pc, #564]	; (8007808 <HAL_RCCEx_PeriphCLKConfig+0x6e0>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80075d8:	d105      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075da:	f7fc fa6b 	bl	8003ab4 <HAL_GetTick>
 80075de:	1bc0      	subs	r0, r0, r7
 80075e0:	2864      	cmp	r0, #100	; 0x64
 80075e2:	d9f5      	bls.n	80075d0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        ret = HAL_TIMEOUT;
 80075e4:	2503      	movs	r5, #3
    if (ret == HAL_OK)
 80075e6:	2d00      	cmp	r5, #0
 80075e8:	d14a      	bne.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x558>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80075ea:	4b88      	ldr	r3, [pc, #544]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80075ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ee:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80075f2:	4053      	eors	r3, r2
 80075f4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80075f8:	d00c      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075fa:	4b84      	ldr	r3, [pc, #528]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80075fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075fe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8007602:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007604:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8007608:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800760a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800760c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007610:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8007612:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007614:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8007618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800761c:	d015      	beq.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x522>
      if (ret == HAL_OK)
 800761e:	bb8d      	cbnz	r5, 8007684 <HAL_RCCEx_PeriphCLKConfig+0x55c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007620:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8007624:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007628:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800762c:	d01e      	beq.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x544>
 800762e:	4a77      	ldr	r2, [pc, #476]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007630:	6913      	ldr	r3, [r2, #16]
 8007632:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007636:	6113      	str	r3, [r2, #16]
 8007638:	4974      	ldr	r1, [pc, #464]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 800763a:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800763c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8007640:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8007644:	4313      	orrs	r3, r2
 8007646:	670b      	str	r3, [r1, #112]	; 0x70
 8007648:	e78c      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        tickstart = HAL_GetTick();
 800764a:	f7fc fa33 	bl	8003ab4 <HAL_GetTick>
 800764e:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007650:	4b6e      	ldr	r3, [pc, #440]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007654:	f013 0f02 	tst.w	r3, #2
 8007658:	d1e1      	bne.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800765a:	f7fc fa2b 	bl	8003ab4 <HAL_GetTick>
 800765e:	1bc0      	subs	r0, r0, r7
 8007660:	f241 3388 	movw	r3, #5000	; 0x1388
 8007664:	4298      	cmp	r0, r3
 8007666:	d9f3      	bls.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x528>
            ret = HAL_TIMEOUT;
 8007668:	2503      	movs	r5, #3
 800766a:	e7d8      	b.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800766c:	4867      	ldr	r0, [pc, #412]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 800766e:	6902      	ldr	r2, [r0, #16]
 8007670:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8007674:	4966      	ldr	r1, [pc, #408]	; (8007810 <HAL_RCCEx_PeriphCLKConfig+0x6e8>)
 8007676:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 800767a:	4313      	orrs	r3, r2
 800767c:	6103      	str	r3, [r0, #16]
 800767e:	e7db      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x510>
      status = ret;
 8007680:	462e      	mov	r6, r5
 8007682:	e76f      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        status = ret;
 8007684:	462e      	mov	r6, r5
 8007686:	e76d      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x43c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007688:	2101      	movs	r1, #1
 800768a:	f104 0008 	add.w	r0, r4, #8
 800768e:	f7ff fc3f 	bl	8006f10 <RCCEx_PLL2_Config>
 8007692:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007694:	b9e5      	cbnz	r5, 80076d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007696:	4a5d      	ldr	r2, [pc, #372]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007698:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800769a:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800769e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80076a0:	430b      	orrs	r3, r1
 80076a2:	6553      	str	r3, [r2, #84]	; 0x54
 80076a4:	e008      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076a6:	2101      	movs	r1, #1
 80076a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80076ac:	f7ff fcb6 	bl	800701c <RCCEx_PLL3_Config>
 80076b0:	4605      	mov	r5, r0
        break;
 80076b2:	e7ef      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    switch (PeriphClkInit->Usart16ClockSelection)
 80076b4:	2601      	movs	r6, #1
 80076b6:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	f013 0f02 	tst.w	r3, #2
 80076be:	d017      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 80076c0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80076c2:	2b05      	cmp	r3, #5
 80076c4:	d828      	bhi.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 80076c6:	e8df f003 	tbb	[pc, r3]
 80076ca:	050b      	.short	0x050b
 80076cc:	0b0b0b20 	.word	0x0b0b0b20
 80076d0:	462e      	mov	r6, r5
 80076d2:	e7f1      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x590>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076d4:	2101      	movs	r1, #1
 80076d6:	f104 0008 	add.w	r0, r4, #8
 80076da:	f7ff fc19 	bl	8006f10 <RCCEx_PLL2_Config>
 80076de:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80076e0:	b9ed      	cbnz	r5, 800771e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80076e2:	4a4a      	ldr	r2, [pc, #296]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80076e4:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80076e6:	f023 0307 	bic.w	r3, r3, #7
 80076ea:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80076ec:	430b      	orrs	r3, r1
 80076ee:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	f013 0f04 	tst.w	r3, #4
 80076f6:	d023      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80076f8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80076fc:	2b05      	cmp	r3, #5
 80076fe:	d845      	bhi.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8007700:	e8df f003 	tbb	[pc, r3]
 8007704:	153d0f15 	.word	0x153d0f15
 8007708:	1515      	.short	0x1515
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800770a:	2101      	movs	r1, #1
 800770c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007710:	f7ff fc84 	bl	800701c <RCCEx_PLL3_Config>
 8007714:	4605      	mov	r5, r0
        break;
 8007716:	e7e3      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007718:	2601      	movs	r6, #1
 800771a:	4635      	mov	r5, r6
 800771c:	e7e8      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800771e:	462e      	mov	r6, r5
 8007720:	e7e6      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007722:	2101      	movs	r1, #1
 8007724:	f104 0008 	add.w	r0, r4, #8
 8007728:	f7ff fbf2 	bl	8006f10 <RCCEx_PLL2_Config>
 800772c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800772e:	bb85      	cbnz	r5, 8007792 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007730:	4a36      	ldr	r2, [pc, #216]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8007732:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8007734:	f023 0307 	bic.w	r3, r3, #7
 8007738:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800773c:	430b      	orrs	r3, r1
 800773e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007740:	6823      	ldr	r3, [r4, #0]
 8007742:	f013 0f20 	tst.w	r3, #32
 8007746:	d034      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007748:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800774c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007750:	d04e      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 8007752:	d823      	bhi.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x674>
 8007754:	b143      	cbz	r3, 8007768 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8007756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800775a:	d11c      	bne.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800775c:	2100      	movs	r1, #0
 800775e:	f104 0008 	add.w	r0, r4, #8
 8007762:	f7ff fbd5 	bl	8006f10 <RCCEx_PLL2_Config>
 8007766:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007768:	2d00      	cmp	r5, #0
 800776a:	d148      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800776c:	4a27      	ldr	r2, [pc, #156]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 800776e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007770:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8007774:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007778:	430b      	orrs	r3, r1
 800777a:	6553      	str	r3, [r2, #84]	; 0x54
 800777c:	e019      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800777e:	2101      	movs	r1, #1
 8007780:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007784:	f7ff fc4a 	bl	800701c <RCCEx_PLL3_Config>
 8007788:	4605      	mov	r5, r0
        break;
 800778a:	e7d0      	b.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x606>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800778c:	2601      	movs	r6, #1
 800778e:	4635      	mov	r5, r6
 8007790:	e7d6      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8007792:	462e      	mov	r6, r5
 8007794:	e7d4      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x618>
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007796:	2601      	movs	r6, #1
 8007798:	4635      	mov	r5, r6
 800779a:	e00a      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
 800779c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077a0:	d0e2      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80077a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077a6:	d0df      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80077a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077ac:	d0dc      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80077ae:	2601      	movs	r6, #1
 80077b0:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80077b8:	d037      	beq.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch (PeriphClkInit->Lptim2ClockSelection)
 80077ba:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80077be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077c2:	d053      	beq.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x744>
 80077c4:	d826      	bhi.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
 80077c6:	b143      	cbz	r3, 80077da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 80077c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077cc:	d119      	bne.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x6da>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077ce:	2100      	movs	r1, #0
 80077d0:	f104 0008 	add.w	r0, r4, #8
 80077d4:	f7ff fb9c 	bl	8006f10 <RCCEx_PLL2_Config>
 80077d8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80077da:	2d00      	cmp	r5, #0
 80077dc:	d14d      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x752>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077de:	4a0b      	ldr	r2, [pc, #44]	; (800780c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80077e0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80077e2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80077e6:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80077ea:	430b      	orrs	r3, r1
 80077ec:	6593      	str	r3, [r2, #88]	; 0x58
 80077ee:	e01c      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x702>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077f0:	2102      	movs	r1, #2
 80077f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80077f6:	f7ff fc11 	bl	800701c <RCCEx_PLL3_Config>
 80077fa:	4605      	mov	r5, r0
        break;
 80077fc:	e7b4      	b.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x640>
 80077fe:	462e      	mov	r6, r5
 8007800:	e7d7      	b.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x68a>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007802:	2601      	movs	r6, #1
 8007804:	4635      	mov	r5, r6
 8007806:	e010      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x702>
 8007808:	58024800 	.word	0x58024800
 800780c:	58024400 	.word	0x58024400
 8007810:	00ffffcf 	.word	0x00ffffcf
 8007814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007818:	d0df      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800781a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800781e:	d0dc      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8007820:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007824:	d0d9      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8007826:	2601      	movs	r6, #1
 8007828:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007830:	d033      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x772>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007832:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8007836:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800783a:	f000 80a3 	beq.w	8007984 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 800783e:	d821      	bhi.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x75c>
 8007840:	b143      	cbz	r3, 8007854 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007846:	d11a      	bne.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x756>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007848:	2100      	movs	r1, #0
 800784a:	f104 0008 	add.w	r0, r4, #8
 800784e:	f7ff fb5f 	bl	8006f10 <RCCEx_PLL2_Config>
 8007852:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007854:	2d00      	cmp	r5, #0
 8007856:	f040 809c 	bne.w	8007992 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800785a:	4a81      	ldr	r2, [pc, #516]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 800785c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800785e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007862:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8007866:	430b      	orrs	r3, r1
 8007868:	6593      	str	r3, [r2, #88]	; 0x58
 800786a:	e016      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x772>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800786c:	2102      	movs	r1, #2
 800786e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007872:	f7ff fbd3 	bl	800701c <RCCEx_PLL3_Config>
 8007876:	4605      	mov	r5, r0
        break;
 8007878:	e7af      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 800787a:	462e      	mov	r6, r5
 800787c:	e7d5      	b.n	800782a <HAL_RCCEx_PeriphCLKConfig+0x702>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800787e:	2601      	movs	r6, #1
 8007880:	4635      	mov	r5, r6
 8007882:	e00a      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x772>
 8007884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007888:	d0e4      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800788a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800788e:	d0e1      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007890:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007894:	d0de      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007896:	2601      	movs	r6, #1
 8007898:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800789a:	6823      	ldr	r3, [r4, #0]
 800789c:	f013 0f08 	tst.w	r3, #8
 80078a0:	d00c      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x794>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80078a2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80078a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078aa:	d074      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80078ac:	4a6c      	ldr	r2, [pc, #432]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80078ae:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80078b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80078b4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80078b8:	430b      	orrs	r3, r1
 80078ba:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	f013 0f10 	tst.w	r3, #16
 80078c2:	d00c      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x7b6>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80078c4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80078c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078cc:	d06c      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x880>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80078ce:	4a64      	ldr	r2, [pc, #400]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80078d0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80078d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078d6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80078da:	430b      	orrs	r3, r1
 80078dc:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80078e4:	d00b      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x7d6>
    switch (PeriphClkInit->AdcClockSelection)
 80078e6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80078ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ee:	d074      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 80078f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078f4:	d067      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d05f      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x892>
 80078fa:	2601      	movs	r6, #1
 80078fc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8007904:	d00c      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    switch (PeriphClkInit->UsbClockSelection)
 8007906:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800790a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800790e:	d07c      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007910:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007914:	d06f      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8007916:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800791a:	d067      	beq.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800791c:	2601      	movs	r6, #1
 800791e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8007926:	d008      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x812>
    switch (PeriphClkInit->SdmmcClockSelection)
 8007928:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800792a:	2b00      	cmp	r3, #0
 800792c:	d076      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800792e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007932:	f000 8081 	beq.w	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8007936:	2601      	movs	r6, #1
 8007938:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8007940:	f040 8083 	bne.w	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x922>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007944:	6823      	ldr	r3, [r4, #0]
 8007946:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800794a:	f000 808e 	beq.w	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x942>
    switch (PeriphClkInit->RngClockSelection)
 800794e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007956:	f000 80ec 	beq.w	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800795a:	f240 8083 	bls.w	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
 800795e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007962:	d003      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x844>
 8007964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007968:	f040 80e1 	bne.w	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xa06>
    if (ret == HAL_OK)
 800796c:	2d00      	cmp	r5, #0
 800796e:	f040 80e6 	bne.w	8007b3e <HAL_RCCEx_PeriphCLKConfig+0xa16>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007972:	4a3b      	ldr	r2, [pc, #236]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8007974:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800797a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800797e:	430b      	orrs	r3, r1
 8007980:	6553      	str	r3, [r2, #84]	; 0x54
 8007982:	e072      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x942>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007984:	2102      	movs	r1, #2
 8007986:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800798a:	f7ff fb47 	bl	800701c <RCCEx_PLL3_Config>
 800798e:	4605      	mov	r5, r0
        break;
 8007990:	e760      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8007992:	462e      	mov	r6, r5
 8007994:	e781      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x772>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007996:	2102      	movs	r1, #2
 8007998:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800799c:	f7ff fb3e 	bl	800701c <RCCEx_PLL3_Config>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d083      	beq.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x784>
        status = HAL_ERROR;
 80079a4:	2601      	movs	r6, #1
 80079a6:	e781      	b.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x784>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80079a8:	2102      	movs	r1, #2
 80079aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80079ae:	f7ff fb35 	bl	800701c <RCCEx_PLL3_Config>
 80079b2:	2800      	cmp	r0, #0
 80079b4:	d08b      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x7a6>
        status = HAL_ERROR;
 80079b6:	2601      	movs	r6, #1
 80079b8:	e789      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x7a6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079ba:	2100      	movs	r1, #0
 80079bc:	f104 0008 	add.w	r0, r4, #8
 80079c0:	f7ff faa6 	bl	8006f10 <RCCEx_PLL2_Config>
 80079c4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80079c6:	b97d      	cbnz	r5, 80079e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80079c8:	4a25      	ldr	r2, [pc, #148]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80079ca:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80079cc:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80079d0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80079d4:	430b      	orrs	r3, r1
 80079d6:	6593      	str	r3, [r2, #88]	; 0x58
 80079d8:	e791      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x7d6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079da:	2102      	movs	r1, #2
 80079dc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80079e0:	f7ff fb1c 	bl	800701c <RCCEx_PLL3_Config>
 80079e4:	4605      	mov	r5, r0
        break;
 80079e6:	e7ee      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
 80079e8:	462e      	mov	r6, r5
 80079ea:	e788      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x7d6>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079ec:	4a1c      	ldr	r2, [pc, #112]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80079ee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80079f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80079f6:	b97d      	cbnz	r5, 8007a18 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079f8:	4a19      	ldr	r2, [pc, #100]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 80079fa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80079fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007a00:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007a04:	430b      	orrs	r3, r1
 8007a06:	6553      	str	r3, [r2, #84]	; 0x54
 8007a08:	e78a      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a0a:	2101      	movs	r1, #1
 8007a0c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007a10:	f7ff fb04 	bl	800701c <RCCEx_PLL3_Config>
 8007a14:	4605      	mov	r5, r0
        break;
 8007a16:	e7ee      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x8ce>
 8007a18:	462e      	mov	r6, r5
 8007a1a:	e781      	b.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a1c:	4a10      	ldr	r2, [pc, #64]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8007a1e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a24:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 8007a26:	b975      	cbnz	r5, 8007a46 <HAL_RCCEx_PeriphCLKConfig+0x91e>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007a28:	4a0d      	ldr	r2, [pc, #52]	; (8007a60 <HAL_RCCEx_PeriphCLKConfig+0x938>)
 8007a2a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a30:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8007a32:	430b      	orrs	r3, r1
 8007a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a36:	e780      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x812>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a38:	2102      	movs	r1, #2
 8007a3a:	f104 0008 	add.w	r0, r4, #8
 8007a3e:	f7ff fa67 	bl	8006f10 <RCCEx_PLL2_Config>
 8007a42:	4605      	mov	r5, r0
        break;
 8007a44:	e7ef      	b.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8007a46:	462e      	mov	r6, r5
 8007a48:	e777      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x812>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a4a:	2102      	movs	r1, #2
 8007a4c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007a50:	f7ff fae4 	bl	800701c <RCCEx_PLL3_Config>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	f43f af75 	beq.w	8007944 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      status = HAL_ERROR;
 8007a5a:	2601      	movs	r6, #1
 8007a5c:	e772      	b.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8007a5e:	bf00      	nop
 8007a60:	58024400 	.word	0x58024400
    switch (PeriphClkInit->RngClockSelection)
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d081      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x844>
 8007a68:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007a70:	d006      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x958>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a72:	4a4f      	ldr	r2, [pc, #316]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007a74:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007a76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a7a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8007a7c:	430b      	orrs	r3, r1
 8007a7e:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007a86:	d007      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x970>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007a88:	4a49      	ldr	r2, [pc, #292]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007a8a:	6913      	ldr	r3, [r2, #16]
 8007a8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a90:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8007a94:	430b      	orrs	r3, r1
 8007a96:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a98:	6823      	ldr	r3, [r4, #0]
 8007a9a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8007a9e:	d006      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x986>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007aa0:	4a43      	ldr	r2, [pc, #268]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007aa2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007aa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007aa8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8007aaa:	430b      	orrs	r3, r1
 8007aac:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007ab4:	d009      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x9a2>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ab6:	4b3e      	ldr	r3, [pc, #248]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007ab8:	691a      	ldr	r2, [r3, #16]
 8007aba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007abe:	611a      	str	r2, [r3, #16]
 8007ac0:	691a      	ldr	r2, [r3, #16]
 8007ac2:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	da06      	bge.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ad0:	4a37      	ldr	r2, [pc, #220]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007ad2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007ad4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8007ad8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8007ada:	430b      	orrs	r3, r1
 8007adc:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ade:	6823      	ldr	r3, [r4, #0]
 8007ae0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007ae4:	d007      	beq.n	8007af6 <HAL_RCCEx_PeriphCLKConfig+0x9ce>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ae6:	4a32      	ldr	r2, [pc, #200]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007ae8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8007aea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007aee:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007af2:	430b      	orrs	r3, r1
 8007af4:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007af6:	6863      	ldr	r3, [r4, #4]
 8007af8:	f013 0f01 	tst.w	r3, #1
 8007afc:	d121      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007afe:	6863      	ldr	r3, [r4, #4]
 8007b00:	f013 0f02 	tst.w	r3, #2
 8007b04:	d126      	bne.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007b06:	6863      	ldr	r3, [r4, #4]
 8007b08:	f013 0f04 	tst.w	r3, #4
 8007b0c:	d12b      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0xa3e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007b0e:	6863      	ldr	r3, [r4, #4]
 8007b10:	f013 0f08 	tst.w	r3, #8
 8007b14:	d130      	bne.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xa50>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007b16:	6863      	ldr	r3, [r4, #4]
 8007b18:	f013 0f10 	tst.w	r3, #16
 8007b1c:	d135      	bne.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0xa62>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007b1e:	6863      	ldr	r3, [r4, #4]
 8007b20:	f013 0f20 	tst.w	r3, #32
 8007b24:	d13a      	bne.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xa74>
  if (status == HAL_OK)
 8007b26:	b106      	cbz	r6, 8007b2a <HAL_RCCEx_PeriphCLKConfig+0xa02>
  return HAL_ERROR;
 8007b28:	2601      	movs	r6, #1
}
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (PeriphClkInit->RngClockSelection)
 8007b2e:	2601      	movs	r6, #1
 8007b30:	e79b      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x942>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b32:	4a1f      	ldr	r2, [pc, #124]	; (8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007b34:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007b36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b3a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8007b3c:	e716      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x844>
 8007b3e:	462e      	mov	r6, r5
 8007b40:	e793      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x942>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b42:	2100      	movs	r1, #0
 8007b44:	f104 0008 	add.w	r0, r4, #8
 8007b48:	f7ff f9e2 	bl	8006f10 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d0d6      	beq.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
      status = ret;
 8007b50:	4606      	mov	r6, r0
 8007b52:	e7d4      	b.n	8007afe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007b54:	2101      	movs	r1, #1
 8007b56:	f104 0008 	add.w	r0, r4, #8
 8007b5a:	f7ff f9d9 	bl	8006f10 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8007b5e:	2800      	cmp	r0, #0
 8007b60:	d0d1      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x9de>
      status = ret;
 8007b62:	4606      	mov	r6, r0
 8007b64:	e7cf      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x9de>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b66:	2102      	movs	r1, #2
 8007b68:	f104 0008 	add.w	r0, r4, #8
 8007b6c:	f7ff f9d0 	bl	8006f10 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 8007b70:	2800      	cmp	r0, #0
 8007b72:	d0cc      	beq.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
      status = ret;
 8007b74:	4606      	mov	r6, r0
 8007b76:	e7ca      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007b78:	2100      	movs	r1, #0
 8007b7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007b7e:	f7ff fa4d 	bl	800701c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8007b82:	2800      	cmp	r0, #0
 8007b84:	d0c7      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
      status = ret;
 8007b86:	4606      	mov	r6, r0
 8007b88:	e7c5      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007b90:	f7ff fa44 	bl	800701c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8007b94:	2800      	cmp	r0, #0
 8007b96:	d0c2      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x9f6>
      status = ret;
 8007b98:	4606      	mov	r6, r0
 8007b9a:	e7c0      	b.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x9f6>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b9c:	2102      	movs	r1, #2
 8007b9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8007ba2:	f7ff fa3b 	bl	800701c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d0bd      	beq.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
      status = ret;
 8007baa:	4606      	mov	r6, r0
 8007bac:	e7bb      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x9fe>
 8007bae:	bf00      	nop
 8007bb0:	58024400 	.word	0x58024400

08007bb4 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8007bb4:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007bb6:	f7ff f977 	bl	8006ea8 <HAL_RCC_GetHCLKFreq>
 8007bba:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
 8007bbe:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8007bc2:	4a04      	ldr	r2, [pc, #16]	; (8007bd4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8007bc4:	5cd3      	ldrb	r3, [r2, r3]
 8007bc6:	f003 031f 	and.w	r3, r3, #31
}
 8007bca:	40d8      	lsrs	r0, r3
 8007bcc:	bd08      	pop	{r3, pc}
 8007bce:	bf00      	nop
 8007bd0:	58024400 	.word	0x58024400
 8007bd4:	08019998 	.word	0x08019998

08007bd8 <HAL_RCCEx_GetPLL2ClockFreq>:
{
 8007bd8:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007bda:	4b78      	ldr	r3, [pc, #480]	; (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8007bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007bde:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007be0:	f3c4 3c05 	ubfx	ip, r4, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007be4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007be6:	f3c1 1100 	ubfx	r1, r1, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bec:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8007bf0:	fb01 f303 	mul.w	r3, r1, r3
  if (pll2m != 0U)
 8007bf4:	f414 3f7c 	tst.w	r4, #258048	; 0x3f000
 8007bf8:	f000 80db 	beq.w	8007db2 <HAL_RCCEx_GetPLL2ClockFreq+0x1da>
 8007bfc:	f002 0203 	and.w	r2, r2, #3
 8007c00:	ee07 3a90 	vmov	s15, r3
 8007c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8007c08:	2a01      	cmp	r2, #1
 8007c0a:	d066      	beq.n	8007cda <HAL_RCCEx_GetPLL2ClockFreq+0x102>
 8007c0c:	2a02      	cmp	r2, #2
 8007c0e:	f000 80b3 	beq.w	8007d78 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007c12:	b1e2      	cbz	r2, 8007c4e <HAL_RCCEx_GetPLL2ClockFreq+0x76>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c14:	ee07 ca10 	vmov	s14, ip
 8007c18:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007c1c:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8007c20:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007c24:	4b65      	ldr	r3, [pc, #404]	; (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8007c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2c:	ee06 3a90 	vmov	s13, r3
 8007c30:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007c34:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8007c38:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007c3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c48:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007c4c:	e061      	b.n	8007d12 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c4e:	4b5b      	ldr	r3, [pc, #364]	; (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f013 0f20 	tst.w	r3, #32
 8007c56:	d023      	beq.n	8007ca0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c58:	4958      	ldr	r1, [pc, #352]	; (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8007c5a:	680a      	ldr	r2, [r1, #0]
 8007c5c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8007c60:	4b59      	ldr	r3, [pc, #356]	; (8007dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8007c62:	40d3      	lsrs	r3, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c64:	ee07 3a10 	vmov	s14, r3
 8007c68:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007c6c:	ee07 ca10 	vmov	s14, ip
 8007c70:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8007c74:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8007c78:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8007c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c7e:	ee06 3a90 	vmov	s13, r3
 8007c82:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007c86:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8007c8a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007c9e:	e038      	b.n	8007d12 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ca0:	ee07 ca10 	vmov	s14, ip
 8007ca4:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007ca8:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8007dcc <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8007cac:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007cb0:	4b42      	ldr	r3, [pc, #264]	; (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8007cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb8:	ee06 3a90 	vmov	s13, r3
 8007cbc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007cc0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8007cc4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007cc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ccc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007cd8:	e01b      	b.n	8007d12 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cda:	ee07 ca10 	vmov	s14, ip
 8007cde:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007ce2:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8007ce6:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007cea:	4b34      	ldr	r3, [pc, #208]	; (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8007cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cf2:	ee06 3a90 	vmov	s13, r3
 8007cf6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007cfa:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8007cfe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d0e:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007d12:	4a2a      	ldr	r2, [pc, #168]	; (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8007d14:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007d16:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007d1a:	ee07 3a90 	vmov	s15, r3
 8007d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d2a:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007d2e:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8007d32:	ed80 6a00 	vstr	s12, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007d36:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007d38:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007d3c:	ee07 3a90 	vmov	s15, r3
 8007d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d48:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007d4c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8007d50:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007d54:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8007d56:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007d6a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007d6e:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8007d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d76:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007d78:	ee07 ca10 	vmov	s14, ip
 8007d7c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007d80:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8007d84:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007d88:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d90:	ee06 3a90 	vmov	s13, r3
 8007d94:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007d98:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8007d9c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007da0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007da8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dac:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007db0:	e7af      	b.n	8007d12 <HAL_RCCEx_GetPLL2ClockFreq+0x13a>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007db6:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007db8:	6083      	str	r3, [r0, #8]
}
 8007dba:	e7da      	b.n	8007d72 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>
 8007dbc:	58024400 	.word	0x58024400
 8007dc0:	4a742400 	.word	0x4a742400
 8007dc4:	39000000 	.word	0x39000000
 8007dc8:	03d09000 	.word	0x03d09000
 8007dcc:	4c742400 	.word	0x4c742400
 8007dd0:	4bbebc20 	.word	0x4bbebc20

08007dd4 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8007dd4:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dd6:	4b78      	ldr	r3, [pc, #480]	; (8007fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007dda:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007ddc:	f3c4 5c05 	ubfx	ip, r4, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007de0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007de2:	f3c1 2100 	ubfx	r1, r1, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de8:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8007dec:	fb01 f303 	mul.w	r3, r1, r3
  if (pll3m != 0U)
 8007df0:	f014 7f7c 	tst.w	r4, #66060288	; 0x3f00000
 8007df4:	f000 80db 	beq.w	8007fae <HAL_RCCEx_GetPLL3ClockFreq+0x1da>
 8007df8:	f002 0203 	and.w	r2, r2, #3
 8007dfc:	ee07 3a90 	vmov	s15, r3
 8007e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8007e04:	2a01      	cmp	r2, #1
 8007e06:	d066      	beq.n	8007ed6 <HAL_RCCEx_GetPLL3ClockFreq+0x102>
 8007e08:	2a02      	cmp	r2, #2
 8007e0a:	f000 80b3 	beq.w	8007f74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007e0e:	b1e2      	cbz	r2, 8007e4a <HAL_RCCEx_GetPLL3ClockFreq+0x76>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e10:	ee07 ca10 	vmov	s14, ip
 8007e14:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007e18:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8007e1c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007e20:	4b65      	ldr	r3, [pc, #404]	; (8007fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e28:	ee06 3a90 	vmov	s13, r3
 8007e2c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007e30:	ed9f 6a63 	vldr	s12, [pc, #396]	; 8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8007e34:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007e38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e44:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007e48:	e061      	b.n	8007f0e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e4a:	4b5b      	ldr	r3, [pc, #364]	; (8007fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f013 0f20 	tst.w	r3, #32
 8007e52:	d023      	beq.n	8007e9c <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e54:	4958      	ldr	r1, [pc, #352]	; (8007fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007e56:	680a      	ldr	r2, [r1, #0]
 8007e58:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8007e5c:	4b59      	ldr	r3, [pc, #356]	; (8007fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8007e5e:	40d3      	lsrs	r3, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e60:	ee07 3a10 	vmov	s14, r3
 8007e64:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007e68:	ee07 ca10 	vmov	s14, ip
 8007e6c:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8007e70:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8007e74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e7a:	ee06 3a90 	vmov	s13, r3
 8007e7e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007e82:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8007e86:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007e9a:	e038      	b.n	8007f0e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e9c:	ee07 ca10 	vmov	s14, ip
 8007ea0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007ea4:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8007ea8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007eac:	4b42      	ldr	r3, [pc, #264]	; (8007fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eb4:	ee06 3a90 	vmov	s13, r3
 8007eb8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007ebc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8007ec0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ed0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007ed4:	e01b      	b.n	8007f0e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ed6:	ee07 ca10 	vmov	s14, ip
 8007eda:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007ede:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8007ee2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007ee6:	4b34      	ldr	r3, [pc, #208]	; (8007fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eee:	ee06 3a90 	vmov	s13, r3
 8007ef2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007ef6:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8007efa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f0a:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007f0e:	4a2a      	ldr	r2, [pc, #168]	; (8007fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007f10:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007f12:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f26:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007f2a:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8007f2e:	ed80 6a00 	vstr	s12, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007f32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007f34:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007f38:	ee07 3a90 	vmov	s15, r3
 8007f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f44:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8007f48:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8007f4c:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007f50:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007f52:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007f56:	ee07 3a90 	vmov	s15, r3
 8007f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f62:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007f66:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007f6a:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8007f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f72:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f74:	ee07 ca10 	vmov	s14, ip
 8007f78:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8007f7c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8007f80:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8007f84:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f8c:	ee06 3a90 	vmov	s13, r3
 8007f90:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8007f94:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8007f98:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007f9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007fa0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007fa4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fa8:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8007fac:	e7af      	b.n	8007f0e <HAL_RCCEx_GetPLL3ClockFreq+0x13a>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fb2:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007fb4:	6083      	str	r3, [r0, #8]
}
 8007fb6:	e7da      	b.n	8007f6e <HAL_RCCEx_GetPLL3ClockFreq+0x19a>
 8007fb8:	58024400 	.word	0x58024400
 8007fbc:	4a742400 	.word	0x4a742400
 8007fc0:	39000000 	.word	0x39000000
 8007fc4:	03d09000 	.word	0x03d09000
 8007fc8:	4c742400 	.word	0x4c742400
 8007fcc:	4bbebc20 	.word	0x4bbebc20

08007fd0 <HAL_RCCEx_GetPLL1ClockFreq>:
{
 8007fd0:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fd2:	4b78      	ldr	r3, [pc, #480]	; (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8007fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007fd6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8007fd8:	f3c4 1c05 	ubfx	ip, r4, #4, #6
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007fdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007fde:	f001 0101 	and.w	r1, r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
  if (pll1m != 0U)
 8007fec:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 8007ff0:	f000 80db 	beq.w	80081aa <HAL_RCCEx_GetPLL1ClockFreq+0x1da>
 8007ff4:	f002 0203 	and.w	r2, r2, #3
 8007ff8:	ee07 3a90 	vmov	s15, r3
 8007ffc:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8008000:	2a01      	cmp	r2, #1
 8008002:	d066      	beq.n	80080d2 <HAL_RCCEx_GetPLL1ClockFreq+0x102>
 8008004:	2a02      	cmp	r2, #2
 8008006:	f000 80b3 	beq.w	8008170 <HAL_RCCEx_GetPLL1ClockFreq+0x1a0>
 800800a:	b1e2      	cbz	r2, 8008046 <HAL_RCCEx_GetPLL1ClockFreq+0x76>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800800c:	ee07 ca10 	vmov	s14, ip
 8008010:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008014:	ed9f 6a68 	vldr	s12, [pc, #416]	; 80081b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 8008018:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800801c:	4b65      	ldr	r3, [pc, #404]	; (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800801e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008024:	ee06 3a90 	vmov	s13, r3
 8008028:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800802c:	ed9f 6a63 	vldr	s12, [pc, #396]	; 80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008030:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800803c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008040:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8008044:	e061      	b.n	800810a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008046:	4b5b      	ldr	r3, [pc, #364]	; (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f013 0f20 	tst.w	r3, #32
 800804e:	d023      	beq.n	8008098 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008050:	4958      	ldr	r1, [pc, #352]	; (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008052:	680a      	ldr	r2, [r1, #0]
 8008054:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008058:	4b59      	ldr	r3, [pc, #356]	; (80081c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1f0>)
 800805a:	40d3      	lsrs	r3, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800805c:	ee07 3a10 	vmov	s14, r3
 8008060:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008064:	ee07 ca10 	vmov	s14, ip
 8008068:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800806c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8008070:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8008072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008076:	ee06 3a90 	vmov	s13, r3
 800807a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800807e:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008082:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800808a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800808e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008092:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008096:	e038      	b.n	800810a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008098:	ee07 ca10 	vmov	s14, ip
 800809c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80080a0:	ed9f 6a45 	vldr	s12, [pc, #276]	; 80081b8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e8>
 80080a4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80080a8:	4b42      	ldr	r3, [pc, #264]	; (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80080aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b0:	ee06 3a90 	vmov	s13, r3
 80080b4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80080b8:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80080bc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80080c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80080d0:	e01b      	b.n	800810a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80080d2:	ee07 ca10 	vmov	s14, ip
 80080d6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80080da:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 80081c4 <HAL_RCCEx_GetPLL1ClockFreq+0x1f4>
 80080de:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80080e2:	4b34      	ldr	r3, [pc, #208]	; (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 80080e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ea:	ee06 3a90 	vmov	s13, r3
 80080ee:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80080f2:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 80080f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80080fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008106:	ee27 7a27 	vmul.f32	s14, s14, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800810a:	4a2a      	ldr	r2, [pc, #168]	; (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 800810c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800810e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800811e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008122:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008126:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 800812a:	ed80 6a00 	vstr	s12, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800812e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008130:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008134:	ee07 3a90 	vmov	s15, r3
 8008138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800813c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008140:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8008144:	eebc 6ac6 	vcvt.u32.f32	s12, s12
 8008148:	ed80 6a01 	vstr	s12, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800814c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800814e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008152:	ee07 3a90 	vmov	s15, r3
 8008156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800815e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008162:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008166:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800816a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800816e:	4770      	bx	lr
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008170:	ee07 ca10 	vmov	s14, ip
 8008174:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8008178:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80081c8 <HAL_RCCEx_GetPLL1ClockFreq+0x1f8>
 800817c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008180:	4b0c      	ldr	r3, [pc, #48]	; (80081b4 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>)
 8008182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008188:	ee06 3a90 	vmov	s13, r3
 800818c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8008190:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 80081bc <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
 8008194:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800819c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80081a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081a4:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80081a8:	e7af      	b.n	800810a <HAL_RCCEx_GetPLL1ClockFreq+0x13a>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	6003      	str	r3, [r0, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80081ae:	6043      	str	r3, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80081b0:	6083      	str	r3, [r0, #8]
}
 80081b2:	e7da      	b.n	800816a <HAL_RCCEx_GetPLL1ClockFreq+0x19a>
 80081b4:	58024400 	.word	0x58024400
 80081b8:	4c742400 	.word	0x4c742400
 80081bc:	39000000 	.word	0x39000000
 80081c0:	03d09000 	.word	0x03d09000
 80081c4:	4a742400 	.word	0x4a742400
 80081c8:	4bbebc20 	.word	0x4bbebc20

080081cc <HAL_RCCEx_GetPeriphCLKFreq>:
{
 80081cc:	b500      	push	{lr}
 80081ce:	b08b      	sub	sp, #44	; 0x2c
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80081d0:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 80081d4:	430b      	orrs	r3, r1
 80081d6:	d02d      	beq.n	8008234 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80081d8:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 80081dc:	430b      	orrs	r3, r1
 80081de:	d07d      	beq.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80081e0:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 80081e4:	430b      	orrs	r3, r1
 80081e6:	f000 80d3 	beq.w	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80081ea:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 80081ee:	430b      	orrs	r3, r1
 80081f0:	f000 812b 	beq.w	800844a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80081f4:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 80081f8:	430b      	orrs	r3, r1
 80081fa:	f000 818b 	beq.w	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80081fe:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8008202:	430b      	orrs	r3, r1
 8008204:	f000 81e3 	beq.w	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x402>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008208:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800820c:	430b      	orrs	r3, r1
 800820e:	f000 822c 	beq.w	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008212:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8008216:	430b      	orrs	r3, r1
 8008218:	f000 826f 	beq.w	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800821c:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8008220:	430b      	orrs	r3, r1
 8008222:	f000 8290 	beq.w	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008226:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800822a:	4308      	orrs	r0, r1
 800822c:	f000 82d4 	beq.w	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
    frequency = 0;
 8008230:	2000      	movs	r0, #0
 8008232:	e302      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008234:	4b95      	ldr	r3, [pc, #596]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008238:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800823c:	2b04      	cmp	r3, #4
 800823e:	f200 82f3 	bhi.w	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8008242:	e8df f003 	tbb	[pc, r3]
 8008246:	1005      	.short	0x1005
 8008248:	031b      	.short	0x031b
 800824a:	26          	.byte	0x26
 800824b:	00          	.byte	0x00
 800824c:	4890      	ldr	r0, [pc, #576]	; (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800824e:	e2f4      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008250:	4b8e      	ldr	r3, [pc, #568]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008252:	6818      	ldr	r0, [r3, #0]
 8008254:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008258:	f000 82ef 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800825c:	a807      	add	r0, sp, #28
 800825e:	f7ff feb7 	bl	8007fd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008262:	9808      	ldr	r0, [sp, #32]
 8008264:	e2e9      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008266:	4b89      	ldr	r3, [pc, #548]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008268:	6818      	ldr	r0, [r3, #0]
 800826a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800826e:	f000 82e4 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008272:	a804      	add	r0, sp, #16
 8008274:	f7ff fcb0 	bl	8007bd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008278:	9804      	ldr	r0, [sp, #16]
 800827a:	e2de      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800827c:	4b83      	ldr	r3, [pc, #524]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800827e:	6818      	ldr	r0, [r3, #0]
 8008280:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008284:	f000 82d9 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008288:	a801      	add	r0, sp, #4
 800828a:	f7ff fda3 	bl	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800828e:	9801      	ldr	r0, [sp, #4]
 8008290:	e2d3      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008292:	4a7e      	ldr	r2, [pc, #504]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008294:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008296:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800829a:	6812      	ldr	r2, [r2, #0]
 800829c:	f012 0f04 	tst.w	r2, #4
 80082a0:	d007      	beq.n	80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80082a2:	b933      	cbnz	r3, 80082b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082a4:	4b79      	ldr	r3, [pc, #484]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80082ac:	4879      	ldr	r0, [pc, #484]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80082ae:	40d8      	lsrs	r0, r3
 80082b0:	e2c3      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082b2:	4a76      	ldr	r2, [pc, #472]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80082b4:	6812      	ldr	r2, [r2, #0]
 80082b6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80082ba:	d003      	beq.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
 80082bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082c0:	f000 82b4 	beq.w	800882c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80082c4:	4a71      	ldr	r2, [pc, #452]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80082c6:	6812      	ldr	r2, [r2, #0]
 80082c8:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80082cc:	f000 82b0 	beq.w	8008830 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 80082d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082d4:	f000 82ae 	beq.w	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          frequency = 0;
 80082d8:	2000      	movs	r0, #0
 80082da:	e2ae      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80082dc:	4b6b      	ldr	r3, [pc, #428]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80082de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 80082e4:	2b80      	cmp	r3, #128	; 0x80
 80082e6:	d033      	beq.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80082e8:	d915      	bls.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80082ea:	2bc0      	cmp	r3, #192	; 0xc0
 80082ec:	f000 82a4 	beq.w	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 80082f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082f4:	d11f      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082f6:	4a65      	ldr	r2, [pc, #404]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80082f8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80082fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082fe:	6812      	ldr	r2, [r2, #0]
 8008300:	f012 0f04 	tst.w	r2, #4
 8008304:	d02f      	beq.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8008306:	bb73      	cbnz	r3, 8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008308:	4b60      	ldr	r3, [pc, #384]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008310:	4860      	ldr	r0, [pc, #384]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008312:	40d8      	lsrs	r0, r3
 8008314:	e291      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8008316:	b183      	cbz	r3, 800833a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8008318:	2b40      	cmp	r3, #64	; 0x40
 800831a:	d10a      	bne.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800831c:	4b5b      	ldr	r3, [pc, #364]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800831e:	6818      	ldr	r0, [r3, #0]
 8008320:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008324:	f000 8289 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008328:	a804      	add	r0, sp, #16
 800832a:	f7ff fc55 	bl	8007bd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800832e:	9804      	ldr	r0, [sp, #16]
 8008330:	e283      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8008332:	2000      	movs	r0, #0
 8008334:	e281      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008336:	2000      	movs	r0, #0
 8008338:	e27f      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800833a:	4b54      	ldr	r3, [pc, #336]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800833c:	6818      	ldr	r0, [r3, #0]
 800833e:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008342:	f000 827a 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008346:	a807      	add	r0, sp, #28
 8008348:	f7ff fe42 	bl	8007fd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800834c:	9808      	ldr	r0, [sp, #32]
 800834e:	e274      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008350:	4b4e      	ldr	r3, [pc, #312]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008352:	6818      	ldr	r0, [r3, #0]
 8008354:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008358:	f000 826f 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800835c:	a801      	add	r0, sp, #4
 800835e:	f7ff fd39 	bl	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008362:	9801      	ldr	r0, [sp, #4]
 8008364:	e269      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008366:	4a49      	ldr	r2, [pc, #292]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008368:	6812      	ldr	r2, [r2, #0]
 800836a:	f412 7f80 	tst.w	r2, #256	; 0x100
 800836e:	d003      	beq.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8008370:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008374:	f000 8264 	beq.w	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008378:	4a44      	ldr	r2, [pc, #272]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800837a:	6812      	ldr	r2, [r2, #0]
 800837c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008380:	f000 8260 	beq.w	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
 8008384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008388:	f000 825e 	beq.w	8008848 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
          frequency = 0;
 800838c:	2000      	movs	r0, #0
 800838e:	e254      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008390:	4b3e      	ldr	r3, [pc, #248]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008394:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 8008398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800839c:	d035      	beq.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800839e:	d916      	bls.n	80083ce <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80083a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80083a4:	f000 8252 	beq.w	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80083a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083ac:	d120      	bne.n	80083f0 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80083ae:	4a37      	ldr	r2, [pc, #220]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80083b0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80083b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80083b6:	6812      	ldr	r2, [r2, #0]
 80083b8:	f012 0f04 	tst.w	r2, #4
 80083bc:	d030      	beq.n	8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80083be:	bb7b      	cbnz	r3, 8008420 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083c0:	4b32      	ldr	r3, [pc, #200]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80083c8:	4832      	ldr	r0, [pc, #200]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80083ca:	40d8      	lsrs	r0, r3
 80083cc:	e235      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 80083ce:	b18b      	cbz	r3, 80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
 80083d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083d4:	d10a      	bne.n	80083ec <HAL_RCCEx_GetPeriphCLKFreq+0x220>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083d6:	4b2d      	ldr	r3, [pc, #180]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80083d8:	6818      	ldr	r0, [r3, #0]
 80083da:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80083de:	f000 822c 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083e2:	a804      	add	r0, sp, #16
 80083e4:	f7ff fbf8 	bl	8007bd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083e8:	9804      	ldr	r0, [sp, #16]
 80083ea:	e226      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 80083ec:	2000      	movs	r0, #0
 80083ee:	e224      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80083f0:	2000      	movs	r0, #0
 80083f2:	e222      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80083f4:	4b25      	ldr	r3, [pc, #148]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80083f6:	6818      	ldr	r0, [r3, #0]
 80083f8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80083fc:	f000 821d 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008400:	a807      	add	r0, sp, #28
 8008402:	f7ff fde5 	bl	8007fd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008406:	9808      	ldr	r0, [sp, #32]
 8008408:	e217      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800840a:	4b20      	ldr	r3, [pc, #128]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008412:	f000 8212 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008416:	a801      	add	r0, sp, #4
 8008418:	f7ff fcdc 	bl	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800841c:	9801      	ldr	r0, [sp, #4]
 800841e:	e20c      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008420:	4a1a      	ldr	r2, [pc, #104]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008422:	6812      	ldr	r2, [r2, #0]
 8008424:	f412 7f80 	tst.w	r2, #256	; 0x100
 8008428:	d003      	beq.n	8008432 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 800842a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800842e:	f000 820f 	beq.w	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008432:	4a16      	ldr	r2, [pc, #88]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008434:	6812      	ldr	r2, [r2, #0]
 8008436:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800843a:	f000 820b 	beq.w	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 800843e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008442:	f000 8209 	beq.w	8008858 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
          frequency = 0;
 8008446:	2000      	movs	r0, #0
 8008448:	e1f7      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800844a:	4b10      	ldr	r3, [pc, #64]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800844c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 8008452:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008456:	d03d      	beq.n	80084d4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8008458:	d91e      	bls.n	8008498 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 800845a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800845e:	f000 81fd 	beq.w	800885c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
 8008462:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008466:	d128      	bne.n	80084ba <HAL_RCCEx_GetPeriphCLKFreq+0x2ee>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008468:	4a08      	ldr	r2, [pc, #32]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800846a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800846c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008470:	6812      	ldr	r2, [r2, #0]
 8008472:	f012 0f04 	tst.w	r2, #4
 8008476:	d038      	beq.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8008478:	2b00      	cmp	r3, #0
 800847a:	d136      	bne.n	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800847c:	4b03      	ldr	r3, [pc, #12]	; (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008484:	4803      	ldr	r0, [pc, #12]	; (8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8008486:	40d8      	lsrs	r0, r3
 8008488:	e1d7      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800848a:	bf00      	nop
 800848c:	58024400 	.word	0x58024400
 8008490:	00bb8000 	.word	0x00bb8000
 8008494:	03d09000 	.word	0x03d09000
    switch (saiclocksource)
 8008498:	b18b      	cbz	r3, 80084be <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800849a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800849e:	d10a      	bne.n	80084b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80084a0:	4b9a      	ldr	r3, [pc, #616]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80084a8:	f000 81c7 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ac:	a804      	add	r0, sp, #16
 80084ae:	f7ff fb93 	bl	8007bd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80084b2:	9804      	ldr	r0, [sp, #16]
 80084b4:	e1c1      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 80084b6:	2000      	movs	r0, #0
 80084b8:	e1bf      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80084ba:	2000      	movs	r0, #0
 80084bc:	e1bd      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084be:	4b93      	ldr	r3, [pc, #588]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80084c0:	6818      	ldr	r0, [r3, #0]
 80084c2:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80084c6:	f000 81b8 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80084ca:	a807      	add	r0, sp, #28
 80084cc:	f7ff fd80 	bl	8007fd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80084d0:	9808      	ldr	r0, [sp, #32]
 80084d2:	e1b2      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084d4:	4b8d      	ldr	r3, [pc, #564]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80084d6:	6818      	ldr	r0, [r3, #0]
 80084d8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80084dc:	f000 81ad 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084e0:	a801      	add	r0, sp, #4
 80084e2:	f7ff fc77 	bl	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80084e6:	9801      	ldr	r0, [sp, #4]
 80084e8:	e1a7      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80084ea:	4a88      	ldr	r2, [pc, #544]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80084ec:	6812      	ldr	r2, [r2, #0]
 80084ee:	f412 7f80 	tst.w	r2, #256	; 0x100
 80084f2:	d003      	beq.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0x330>
 80084f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084f8:	f000 81b2 	beq.w	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x694>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80084fc:	4a83      	ldr	r2, [pc, #524]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80084fe:	6812      	ldr	r2, [r2, #0]
 8008500:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8008504:	f000 81ae 	beq.w	8008864 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8008508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800850c:	f000 81ac 	beq.w	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          frequency = 0;
 8008510:	2000      	movs	r0, #0
 8008512:	e192      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008514:	4b7d      	ldr	r3, [pc, #500]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008518:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800851c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008520:	d035      	beq.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8008522:	d916      	bls.n	8008552 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8008524:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008528:	f000 81a0 	beq.w	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800852c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008530:	d120      	bne.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008532:	4a76      	ldr	r2, [pc, #472]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008534:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008536:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800853a:	6812      	ldr	r2, [r2, #0]
 800853c:	f012 0f04 	tst.w	r2, #4
 8008540:	d030      	beq.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
 8008542:	bb7b      	cbnz	r3, 80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008544:	4b71      	ldr	r3, [pc, #452]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800854c:	4870      	ldr	r0, [pc, #448]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 800854e:	40d8      	lsrs	r0, r3
 8008550:	e173      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008552:	b18b      	cbz	r3, 8008578 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8008554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008558:	d10a      	bne.n	8008570 <HAL_RCCEx_GetPeriphCLKFreq+0x3a4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800855a:	4b6c      	ldr	r3, [pc, #432]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800855c:	6818      	ldr	r0, [r3, #0]
 800855e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008562:	f000 816a 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008566:	a804      	add	r0, sp, #16
 8008568:	f7ff fb36 	bl	8007bd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800856c:	9804      	ldr	r0, [sp, #16]
 800856e:	e164      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8008570:	2000      	movs	r0, #0
 8008572:	e162      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008574:	2000      	movs	r0, #0
 8008576:	e160      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008578:	4b64      	ldr	r3, [pc, #400]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800857a:	6818      	ldr	r0, [r3, #0]
 800857c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008580:	f000 815b 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008584:	a807      	add	r0, sp, #28
 8008586:	f7ff fd23 	bl	8007fd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800858a:	9808      	ldr	r0, [sp, #32]
 800858c:	e155      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800858e:	4b5f      	ldr	r3, [pc, #380]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8008596:	f000 8150 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800859a:	a801      	add	r0, sp, #4
 800859c:	f7ff fc1a 	bl	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80085a0:	9801      	ldr	r0, [sp, #4]
 80085a2:	e14a      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085a4:	4a59      	ldr	r2, [pc, #356]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80085a6:	6812      	ldr	r2, [r2, #0]
 80085a8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80085ac:	d003      	beq.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 80085ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80085b2:	f000 815d 	beq.w	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085b6:	4a55      	ldr	r2, [pc, #340]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80085b8:	6812      	ldr	r2, [r2, #0]
 80085ba:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80085be:	f000 8159 	beq.w	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x6a8>
 80085c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80085c6:	f000 8157 	beq.w	8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
          frequency = 0;
 80085ca:	2000      	movs	r0, #0
 80085cc:	e135      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80085ce:	4b4f      	ldr	r3, [pc, #316]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80085d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085d2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 80085d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80085da:	d032      	beq.n	8008642 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80085dc:	d816      	bhi.n	800860c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 80085de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085e2:	d023      	beq.n	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 80085e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80085e8:	d10a      	bne.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x434>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085ea:	4b48      	ldr	r3, [pc, #288]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80085ec:	6818      	ldr	r0, [r3, #0]
 80085ee:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80085f2:	f000 8122 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085f6:	a801      	add	r0, sp, #4
 80085f8:	f7ff fbec 	bl	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085fc:	9802      	ldr	r0, [sp, #8]
 80085fe:	e11c      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008600:	b913      	cbnz	r3, 8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
        frequency = HAL_RCC_GetPCLK1Freq();
 8008602:	f7fe fc73 	bl	8006eec <HAL_RCC_GetPCLK1Freq>
        break;
 8008606:	e118      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008608:	2000      	movs	r0, #0
 800860a:	e116      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800860c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008610:	d023      	beq.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8008612:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008616:	d107      	bne.n	8008628 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008618:	4b3c      	ldr	r3, [pc, #240]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800861a:	6818      	ldr	r0, [r3, #0]
 800861c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008620:	f000 810b 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008624:	483b      	ldr	r0, [pc, #236]	; (8008714 <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 8008626:	e108      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008628:	2000      	movs	r0, #0
 800862a:	e106      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800862c:	4b37      	ldr	r3, [pc, #220]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800862e:	6818      	ldr	r0, [r3, #0]
 8008630:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008634:	f000 8101 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008638:	a804      	add	r0, sp, #16
 800863a:	f7ff facd 	bl	8007bd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800863e:	9805      	ldr	r0, [sp, #20]
 8008640:	e0fb      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008642:	4b32      	ldr	r3, [pc, #200]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008644:	6818      	ldr	r0, [r3, #0]
 8008646:	f010 0004 	ands.w	r0, r0, #4
 800864a:	f000 80f6 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008654:	482e      	ldr	r0, [pc, #184]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 8008656:	40d8      	lsrs	r0, r3
 8008658:	e0ef      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800865a:	4b2c      	ldr	r3, [pc, #176]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800865c:	6818      	ldr	r0, [r3, #0]
 800865e:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8008662:	f000 80ea 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008666:	482c      	ldr	r0, [pc, #176]	; (8008718 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8008668:	e0e7      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800866a:	4b28      	ldr	r3, [pc, #160]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800866c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800866e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 8008672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008676:	d010      	beq.n	800869a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8008678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800867c:	d018      	beq.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>
 800867e:	b10b      	cbz	r3, 8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8008680:	2000      	movs	r0, #0
 8008682:	e0da      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008684:	4b21      	ldr	r3, [pc, #132]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008686:	6818      	ldr	r0, [r3, #0]
 8008688:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800868c:	f000 80d5 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008690:	a804      	add	r0, sp, #16
 8008692:	f7ff faa1 	bl	8007bd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008696:	9804      	ldr	r0, [sp, #16]
 8008698:	e0cf      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800869a:	4b1c      	ldr	r3, [pc, #112]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80086a2:	f000 80ca 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086a6:	a801      	add	r0, sp, #4
 80086a8:	f7ff fb94 	bl	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80086ac:	9803      	ldr	r0, [sp, #12]
 80086ae:	e0c4      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80086b0:	4a16      	ldr	r2, [pc, #88]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80086b2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80086b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80086b8:	6812      	ldr	r2, [r2, #0]
 80086ba:	f012 0f04 	tst.w	r2, #4
 80086be:	d007      	beq.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 80086c0:	b933      	cbnz	r3, 80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086c2:	4b12      	ldr	r3, [pc, #72]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80086ca:	4811      	ldr	r0, [pc, #68]	; (8008710 <HAL_RCCEx_GetPeriphCLKFreq+0x544>)
 80086cc:	40d8      	lsrs	r0, r3
 80086ce:	e0b4      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086d0:	4a0e      	ldr	r2, [pc, #56]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80086d2:	6812      	ldr	r2, [r2, #0]
 80086d4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80086d8:	d003      	beq.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80086da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086de:	f000 80cd 	beq.w	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086e2:	4a0a      	ldr	r2, [pc, #40]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80086e4:	6812      	ldr	r2, [r2, #0]
 80086e6:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80086ea:	f000 80c9 	beq.w	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80086ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086f2:	f000 80c7 	beq.w	8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
          frequency = 0;
 80086f6:	2000      	movs	r0, #0
 80086f8:	e09f      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80086fa:	4b04      	ldr	r3, [pc, #16]	; (800870c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80086fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    switch (srcclk)
 80086fe:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8008702:	d00b      	beq.n	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x550>
 8008704:	b9ab      	cbnz	r3, 8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8008706:	2000      	movs	r0, #0
 8008708:	e097      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 800870a:	bf00      	nop
 800870c:	58024400 	.word	0x58024400
 8008710:	03d09000 	.word	0x03d09000
 8008714:	017d7840 	.word	0x017d7840
 8008718:	003d0900 	.word	0x003d0900
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800871c:	4b5a      	ldr	r3, [pc, #360]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800871e:	6818      	ldr	r0, [r3, #0]
 8008720:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008724:	f000 8089 	beq.w	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008728:	a807      	add	r0, sp, #28
 800872a:	f7ff fc51 	bl	8007fd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800872e:	9808      	ldr	r0, [sp, #32]
 8008730:	e083      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008732:	4b55      	ldr	r3, [pc, #340]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800873a:	d07e      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800873c:	a804      	add	r0, sp, #16
 800873e:	f7ff fa4b 	bl	8007bd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008742:	9806      	ldr	r0, [sp, #24]
 8008744:	e079      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008746:	4b50      	ldr	r3, [pc, #320]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800874a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800874e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008752:	d02f      	beq.n	80087b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 8008754:	d815      	bhi.n	8008782 <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
 8008756:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800875a:	d021      	beq.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 800875c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008760:	d109      	bne.n	8008776 <HAL_RCCEx_GetPeriphCLKFreq+0x5aa>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008762:	4b49      	ldr	r3, [pc, #292]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008764:	6818      	ldr	r0, [r3, #0]
 8008766:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800876a:	d066      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800876c:	a801      	add	r0, sp, #4
 800876e:	f7ff fb31 	bl	8007dd4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008772:	9802      	ldr	r0, [sp, #8]
 8008774:	e061      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 8008776:	b913      	cbnz	r3, 800877e <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008778:	f7ff fa1c 	bl	8007bb4 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800877c:	e05d      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800877e:	2000      	movs	r0, #0
 8008780:	e05b      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008786:	d020      	beq.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8008788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800878c:	d106      	bne.n	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800878e:	4b3e      	ldr	r3, [pc, #248]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008790:	6818      	ldr	r0, [r3, #0]
 8008792:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008796:	d050      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008798:	483c      	ldr	r0, [pc, #240]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800879a:	e04e      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800879c:	2000      	movs	r0, #0
 800879e:	e04c      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087a0:	4b39      	ldr	r3, [pc, #228]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80087a2:	6818      	ldr	r0, [r3, #0]
 80087a4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80087a8:	d047      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087aa:	a804      	add	r0, sp, #16
 80087ac:	f7ff fa14 	bl	8007bd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80087b0:	9805      	ldr	r0, [sp, #20]
 80087b2:	e042      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087b4:	4b34      	ldr	r3, [pc, #208]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80087b6:	6818      	ldr	r0, [r3, #0]
 80087b8:	f010 0004 	ands.w	r0, r0, #4
 80087bc:	d03d      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80087c4:	4832      	ldr	r0, [pc, #200]	; (8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>)
 80087c6:	40d8      	lsrs	r0, r3
 80087c8:	e037      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80087ca:	4b2f      	ldr	r3, [pc, #188]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80087cc:	6818      	ldr	r0, [r3, #0]
 80087ce:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80087d2:	d032      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 80087d4:	482f      	ldr	r0, [pc, #188]	; (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80087d6:	e030      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80087d8:	4b2b      	ldr	r3, [pc, #172]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80087da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 80087e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087e4:	d00c      	beq.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 80087e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087ea:	d013      	beq.n	8008814 <HAL_RCCEx_GetPeriphCLKFreq+0x648>
 80087ec:	b10b      	cbz	r3, 80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80087ee:	2000      	movs	r0, #0
  return frequency;
 80087f0:	e023      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80087f2:	4b25      	ldr	r3, [pc, #148]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 80087f4:	6818      	ldr	r0, [r3, #0]
 80087f6:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80087fa:	d01e      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 80087fc:	4823      	ldr	r0, [pc, #140]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 80087fe:	e01c      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008800:	4b21      	ldr	r3, [pc, #132]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008802:	6818      	ldr	r0, [r3, #0]
 8008804:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8008808:	d017      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800880a:	a807      	add	r0, sp, #28
 800880c:	f7ff fbe0 	bl	8007fd0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008810:	9808      	ldr	r0, [sp, #32]
 8008812:	e012      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008814:	4b1c      	ldr	r3, [pc, #112]	; (8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8008816:	6818      	ldr	r0, [r3, #0]
 8008818:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800881c:	d00d      	beq.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800881e:	a804      	add	r0, sp, #16
 8008820:	f7ff f9da 	bl	8007bd8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008824:	9805      	ldr	r0, [sp, #20]
 8008826:	e008      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
        frequency = 0;
 8008828:	2000      	movs	r0, #0
 800882a:	e006      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800882c:	4819      	ldr	r0, [pc, #100]	; (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800882e:	e004      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008830:	2000      	movs	r0, #0
 8008832:	e002      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008834:	4815      	ldr	r0, [pc, #84]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8008836:	e000      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 8008838:	4817      	ldr	r0, [pc, #92]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
}
 800883a:	b00b      	add	sp, #44	; 0x2c
 800883c:	f85d fb04 	ldr.w	pc, [sp], #4
          frequency = CSI_VALUE;
 8008840:	4814      	ldr	r0, [pc, #80]	; (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008842:	e7fa      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008844:	2000      	movs	r0, #0
 8008846:	e7f8      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008848:	4810      	ldr	r0, [pc, #64]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800884a:	e7f6      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 800884c:	4812      	ldr	r0, [pc, #72]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 800884e:	e7f4      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008850:	4810      	ldr	r0, [pc, #64]	; (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008852:	e7f2      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008854:	2000      	movs	r0, #0
 8008856:	e7f0      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008858:	480c      	ldr	r0, [pc, #48]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800885a:	e7ee      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (saiclocksource)
 800885c:	480e      	ldr	r0, [pc, #56]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 800885e:	e7ec      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008860:	480c      	ldr	r0, [pc, #48]	; (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008862:	e7ea      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008864:	2000      	movs	r0, #0
 8008866:	e7e8      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008868:	4808      	ldr	r0, [pc, #32]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800886a:	e7e6      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
    switch (srcclk)
 800886c:	480a      	ldr	r0, [pc, #40]	; (8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 800886e:	e7e4      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 8008870:	4808      	ldr	r0, [pc, #32]	; (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8008872:	e7e2      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008874:	2000      	movs	r0, #0
 8008876:	e7e0      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008878:	4804      	ldr	r0, [pc, #16]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 800887a:	e7de      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = CSI_VALUE;
 800887c:	4805      	ldr	r0, [pc, #20]	; (8008894 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800887e:	e7dc      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = 0;
 8008880:	2000      	movs	r0, #0
 8008882:	e7da      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
          frequency = HSE_VALUE;
 8008884:	4801      	ldr	r0, [pc, #4]	; (800888c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>)
 8008886:	e7d8      	b.n	800883a <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008888:	58024400 	.word	0x58024400
 800888c:	017d7840 	.word	0x017d7840
 8008890:	03d09000 	.word	0x03d09000
 8008894:	003d0900 	.word	0x003d0900
 8008898:	00bb8000 	.word	0x00bb8000

0800889c <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800889c:	2800      	cmp	r0, #0
 800889e:	d03b      	beq.n	8008918 <HAL_RNG_Init+0x7c>
{
 80088a0:	b538      	push	{r3, r4, r5, lr}
 80088a2:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80088a4:	7a43      	ldrb	r3, [r0, #9]
 80088a6:	b1b3      	cbz	r3, 80088d6 <HAL_RNG_Init+0x3a>
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80088a8:	2302      	movs	r3, #2
 80088aa:	7263      	strb	r3, [r4, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80088ac:	6822      	ldr	r2, [r4, #0]
 80088ae:	6813      	ldr	r3, [r2, #0]
 80088b0:	f023 0320 	bic.w	r3, r3, #32
 80088b4:	6861      	ldr	r1, [r4, #4]
 80088b6:	430b      	orrs	r3, r1
 80088b8:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80088ba:	6822      	ldr	r2, [r4, #0]
 80088bc:	6813      	ldr	r3, [r2, #0]
 80088be:	f043 0304 	orr.w	r3, r3, #4
 80088c2:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80088cc:	d007      	beq.n	80088de <HAL_RNG_Init+0x42>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80088ce:	2304      	movs	r3, #4
 80088d0:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 80088d2:	2001      	movs	r0, #1
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 80088d6:	7203      	strb	r3, [r0, #8]
    HAL_RNG_MspInit(hrng);
 80088d8:	f7f9 ff8a 	bl	80027f0 <HAL_RNG_MspInit>
 80088dc:	e7e4      	b.n	80088a8 <HAL_RNG_Init+0xc>
  tickstart = HAL_GetTick();
 80088de:	f7fb f8e9 	bl	8003ab4 <HAL_GetTick>
 80088e2:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	f013 0f04 	tst.w	r3, #4
 80088ec:	d00f      	beq.n	800890e <HAL_RNG_Init+0x72>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80088ee:	f7fb f8e1 	bl	8003ab4 <HAL_GetTick>
 80088f2:	1b40      	subs	r0, r0, r5
 80088f4:	2802      	cmp	r0, #2
 80088f6:	d9f5      	bls.n	80088e4 <HAL_RNG_Init+0x48>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	f013 0f04 	tst.w	r3, #4
 8008900:	d0f0      	beq.n	80088e4 <HAL_RNG_Init+0x48>
        hrng->State = HAL_RNG_STATE_ERROR;
 8008902:	2304      	movs	r3, #4
 8008904:	7263      	strb	r3, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008906:	2302      	movs	r3, #2
 8008908:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 800890a:	2001      	movs	r0, #1
 800890c:	e7e2      	b.n	80088d4 <HAL_RNG_Init+0x38>
  hrng->State = HAL_RNG_STATE_READY;
 800890e:	2301      	movs	r3, #1
 8008910:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008912:	2000      	movs	r0, #0
 8008914:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 8008916:	e7dd      	b.n	80088d4 <HAL_RNG_Init+0x38>
    return HAL_ERROR;
 8008918:	2001      	movs	r0, #1
}
 800891a:	4770      	bx	lr

0800891c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800891e:	7a03      	ldrb	r3, [r0, #8]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d030      	beq.n	8008986 <HAL_RNG_GenerateRandomNumber+0x6a>
 8008924:	4604      	mov	r4, r0
 8008926:	460e      	mov	r6, r1
 8008928:	2301      	movs	r3, #1
 800892a:	7203      	strb	r3, [r0, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800892c:	7a45      	ldrb	r5, [r0, #9]
 800892e:	b2ed      	uxtb	r5, r5
 8008930:	429d      	cmp	r5, r3
 8008932:	d006      	beq.n	8008942 <HAL_RNG_GenerateRandomNumber+0x26>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008934:	2304      	movs	r3, #4
 8008936:	60c3      	str	r3, [r0, #12]
    status = HAL_ERROR;
 8008938:	2501      	movs	r5, #1
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800893a:	2300      	movs	r3, #0
 800893c:	7223      	strb	r3, [r4, #8]

  return status;
}
 800893e:	4628      	mov	r0, r5
 8008940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8008942:	2302      	movs	r3, #2
 8008944:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8008946:	f7fb f8b5 	bl	8003ab4 <HAL_GetTick>
 800894a:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	f012 0f01 	tst.w	r2, #1
 8008954:	d110      	bne.n	8008978 <HAL_RNG_GenerateRandomNumber+0x5c>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008956:	f7fb f8ad 	bl	8003ab4 <HAL_GetTick>
 800895a:	1bc0      	subs	r0, r0, r7
 800895c:	2802      	cmp	r0, #2
 800895e:	d9f5      	bls.n	800894c <HAL_RNG_GenerateRandomNumber+0x30>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	f013 0f01 	tst.w	r3, #1
 8008968:	d1f0      	bne.n	800894c <HAL_RNG_GenerateRandomNumber+0x30>
          hrng->State = HAL_RNG_STATE_READY;
 800896a:	2301      	movs	r3, #1
 800896c:	7263      	strb	r3, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800896e:	2302      	movs	r3, #2
 8008970:	60e3      	str	r3, [r4, #12]
          __HAL_UNLOCK(hrng);
 8008972:	2300      	movs	r3, #0
 8008974:	7223      	strb	r3, [r4, #8]
          return HAL_ERROR;
 8008976:	e7e2      	b.n	800893e <HAL_RNG_GenerateRandomNumber+0x22>
    hrng->RandomNumber = hrng->Instance->DR;
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800897c:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800897e:	2301      	movs	r3, #1
 8008980:	7263      	strb	r3, [r4, #9]
  HAL_StatusTypeDef status = HAL_OK;
 8008982:	2500      	movs	r5, #0
 8008984:	e7d9      	b.n	800893a <HAL_RNG_GenerateRandomNumber+0x1e>
  __HAL_LOCK(hrng);
 8008986:	2502      	movs	r5, #2
 8008988:	e7d9      	b.n	800893e <HAL_RNG_GenerateRandomNumber+0x22>

0800898a <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800898a:	4684      	mov	ip, r0
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800898c:	2000      	movs	r0, #0
 800898e:	f8cc 0044 	str.w	r0, [ip, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008992:	f8cc 004c 	str.w	r0, [ip, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008996:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800899a:	2802      	cmp	r0, #2
 800899c:	bf18      	it	ne
 800899e:	2800      	cmpne	r0, #0
 80089a0:	d11f      	bne.n	80089e2 <SAI_InitI2S+0x58>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80089a2:	2000      	movs	r0, #0
 80089a4:	f8cc 0050 	str.w	r0, [ip, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 80089a8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80089ac:	f8cc 005c 	str.w	r0, [ip, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80089b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80089b4:	f8cc 0074 	str.w	r0, [ip, #116]	; 0x74
  hsai->SlotInit.FirstBitOffset  = 0;
 80089b8:	2000      	movs	r0, #0
 80089ba:	f8cc 0068 	str.w	r0, [ip, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 80089be:	f8cc 3070 	str.w	r3, [ip, #112]	; 0x70

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80089c2:	f013 0f01 	tst.w	r3, #1
 80089c6:	d168      	bne.n	8008a9a <SAI_InitI2S+0x110>
  {
    return HAL_ERROR;
  }

  if (protocol == SAI_I2S_STANDARD)
 80089c8:	b979      	cbnz	r1, 80089ea <SAI_InitI2S+0x60>
  {
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80089ca:	f8cc 0060 	str.w	r0, [ip, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80089ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80089d2:	f8cc 0064 	str.w	r0, [ip, #100]	; 0x64
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
  }

  /* Frame definition */
  switch (datasize)
 80089d6:	2a03      	cmp	r2, #3
 80089d8:	d83e      	bhi.n	8008a58 <SAI_InitI2S+0xce>
 80089da:	e8df f002 	tbb	[pc, r2]
 80089de:	3f0e      	.short	0x3f0e
 80089e0:	2e1f      	.short	0x2e1f
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80089e2:	2001      	movs	r0, #1
 80089e4:	f8cc 0050 	str.w	r0, [ip, #80]	; 0x50
 80089e8:	e7de      	b.n	80089a8 <SAI_InitI2S+0x1e>
      hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80089ea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80089ee:	f8cc 0060 	str.w	r0, [ip, #96]	; 0x60
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80089f2:	2000      	movs	r0, #0
 80089f4:	f8cc 0064 	str.w	r0, [ip, #100]	; 0x64
 80089f8:	e7ed      	b.n	80089d6 <SAI_InitI2S+0x4c>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80089fa:	2080      	movs	r0, #128	; 0x80
 80089fc:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8008a00:	085b      	lsrs	r3, r3, #1
 8008a02:	0158      	lsls	r0, r3, #5
 8008a04:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8008a08:	011b      	lsls	r3, r3, #4
 8008a0a:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008a0e:	2340      	movs	r3, #64	; 0x40
 8008a10:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008a14:	2000      	movs	r0, #0
      break;
    default :
      status = HAL_ERROR;
      break;
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008a16:	2902      	cmp	r1, #2
 8008a18:	d041      	beq.n	8008a9e <SAI_InitI2S+0x114>
    {
      hsai->SlotInit.FirstBitOffset = 8;
    }
  }
  return status;
}
 8008a1a:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008a1c:	20c0      	movs	r0, #192	; 0xc0
 8008a1e:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008a22:	085b      	lsrs	r3, r3, #1
 8008a24:	0198      	lsls	r0, r3, #6
 8008a26:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008a2a:	015b      	lsls	r3, r3, #5
 8008a2c:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008a30:	2380      	movs	r3, #128	; 0x80
 8008a32:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008a36:	2000      	movs	r0, #0
      break;
 8008a38:	e7ed      	b.n	8008a16 <SAI_InitI2S+0x8c>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008a3a:	20e0      	movs	r0, #224	; 0xe0
 8008a3c:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008a40:	085b      	lsrs	r3, r3, #1
 8008a42:	0198      	lsls	r0, r3, #6
 8008a44:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008a48:	015b      	lsls	r3, r3, #5
 8008a4a:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008a4e:	2380      	movs	r3, #128	; 0x80
 8008a50:	f8cc 306c 	str.w	r3, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008a54:	2000      	movs	r0, #0
      break;
 8008a56:	e7de      	b.n	8008a16 <SAI_InitI2S+0x8c>
  switch (datasize)
 8008a58:	2001      	movs	r0, #1
 8008a5a:	e7dc      	b.n	8008a16 <SAI_InitI2S+0x8c>
{
 8008a5c:	b410      	push	{r4}
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008a5e:	2080      	movs	r0, #128	; 0x80
 8008a60:	f8cc 0048 	str.w	r0, [ip, #72]	; 0x48
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8008a64:	085b      	lsrs	r3, r3, #1
 8008a66:	019c      	lsls	r4, r3, #6
 8008a68:	f8cc 4054 	str.w	r4, [ip, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8008a6c:	015b      	lsls	r3, r3, #5
 8008a6e:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008a72:	f8cc 006c 	str.w	r0, [ip, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008a76:	2000      	movs	r0, #0
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8008a78:	2902      	cmp	r1, #2
 8008a7a:	d002      	beq.n	8008a82 <SAI_InitI2S+0xf8>
}
 8008a7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a80:	4770      	bx	lr
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008a82:	2a01      	cmp	r2, #1
 8008a84:	d005      	beq.n	8008a92 <SAI_InitI2S+0x108>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008a86:	2a02      	cmp	r2, #2
 8008a88:	d1f8      	bne.n	8008a7c <SAI_InitI2S+0xf2>
      hsai->SlotInit.FirstBitOffset = 8;
 8008a8a:	2308      	movs	r3, #8
 8008a8c:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
 8008a90:	e7f4      	b.n	8008a7c <SAI_InitI2S+0xf2>
      hsai->SlotInit.FirstBitOffset = 16;
 8008a92:	2310      	movs	r3, #16
 8008a94:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
 8008a98:	e7f5      	b.n	8008a86 <SAI_InitI2S+0xfc>
    return HAL_ERROR;
 8008a9a:	2001      	movs	r0, #1
 8008a9c:	4770      	bx	lr
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8008a9e:	2a01      	cmp	r2, #1
 8008aa0:	d005      	beq.n	8008aae <SAI_InitI2S+0x124>
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8008aa2:	2a02      	cmp	r2, #2
 8008aa4:	d1b9      	bne.n	8008a1a <SAI_InitI2S+0x90>
      hsai->SlotInit.FirstBitOffset = 8;
 8008aa6:	2308      	movs	r3, #8
 8008aa8:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
 8008aac:	e7b5      	b.n	8008a1a <SAI_InitI2S+0x90>
      hsai->SlotInit.FirstBitOffset = 16;
 8008aae:	2310      	movs	r3, #16
 8008ab0:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
 8008ab4:	e7f5      	b.n	8008aa2 <SAI_InitI2S+0x118>

08008ab6 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008ab6:	b430      	push	{r4, r5}
  HAL_StatusTypeDef status = HAL_OK;

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8008ab8:	2400      	movs	r4, #0
 8008aba:	6444      	str	r4, [r0, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8008abc:	64c4      	str	r4, [r0, #76]	; 0x4c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008abe:	6844      	ldr	r4, [r0, #4]
 8008ac0:	2c02      	cmp	r4, #2
 8008ac2:	bf18      	it	ne
 8008ac4:	2c00      	cmpne	r4, #0
 8008ac6:	d118      	bne.n	8008afa <SAI_InitPCM+0x44>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8008ac8:	2401      	movs	r4, #1
 8008aca:	6504      	str	r4, [r0, #80]	; 0x50
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8008acc:	2400      	movs	r4, #0
 8008ace:	65c4      	str	r4, [r0, #92]	; 0x5c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8008ad0:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8008ad4:	6605      	str	r5, [r0, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8008ad6:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8008ada:	6645      	str	r5, [r0, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0;
 8008adc:	6684      	str	r4, [r0, #104]	; 0x68
  hsai->SlotInit.SlotNumber      = nbslot;
 8008ade:	6703      	str	r3, [r0, #112]	; 0x70
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8008ae0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8008ae4:	6744      	str	r4, [r0, #116]	; 0x74

  if (protocol == SAI_PCM_SHORT)
 8008ae6:	2904      	cmp	r1, #4
 8008ae8:	d00a      	beq.n	8008b00 <SAI_InitPCM+0x4a>
      hsai->FrameInit.ActiveFrameLength = 1;
  }
  else
  {
    /* SAI_PCM_LONG */
      hsai->FrameInit.ActiveFrameLength = 13;
 8008aea:	210d      	movs	r1, #13
 8008aec:	6581      	str	r1, [r0, #88]	; 0x58
  }

  switch (datasize)
 8008aee:	2a03      	cmp	r2, #3
 8008af0:	d829      	bhi.n	8008b46 <SAI_InitPCM+0x90>
 8008af2:	e8df f002 	tbb	[pc, r2]
 8008af6:	1108      	.short	0x1108
 8008af8:	2018      	.short	0x2018
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8008afa:	2400      	movs	r4, #0
 8008afc:	6504      	str	r4, [r0, #80]	; 0x50
 8008afe:	e7e5      	b.n	8008acc <SAI_InitPCM+0x16>
      hsai->FrameInit.ActiveFrameLength = 1;
 8008b00:	2101      	movs	r1, #1
 8008b02:	6581      	str	r1, [r0, #88]	; 0x58
 8008b04:	e7f3      	b.n	8008aee <SAI_InitPCM+0x38>
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008b06:	2280      	movs	r2, #128	; 0x80
 8008b08:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8008b0a:	011b      	lsls	r3, r3, #4
 8008b0c:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8008b0e:	2340      	movs	r3, #64	; 0x40
 8008b10:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008b12:	2000      	movs	r0, #0
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8008b14:	bc30      	pop	{r4, r5}
 8008b16:	4770      	bx	lr
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8008b18:	2280      	movs	r2, #128	; 0x80
 8008b1a:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008b1c:	015b      	lsls	r3, r3, #5
 8008b1e:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008b20:	66c2      	str	r2, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008b22:	2000      	movs	r0, #0
      break;
 8008b24:	e7f6      	b.n	8008b14 <SAI_InitPCM+0x5e>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8008b26:	22c0      	movs	r2, #192	; 0xc0
 8008b28:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008b2a:	015b      	lsls	r3, r3, #5
 8008b2c:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008b2e:	2380      	movs	r3, #128	; 0x80
 8008b30:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008b32:	2000      	movs	r0, #0
      break;
 8008b34:	e7ee      	b.n	8008b14 <SAI_InitPCM+0x5e>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8008b36:	22e0      	movs	r2, #224	; 0xe0
 8008b38:	6482      	str	r2, [r0, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8008b3a:	015b      	lsls	r3, r3, #5
 8008b3c:	6543      	str	r3, [r0, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8008b3e:	2380      	movs	r3, #128	; 0x80
 8008b40:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 8008b42:	2000      	movs	r0, #0
      break;
 8008b44:	e7e6      	b.n	8008b14 <SAI_InitPCM+0x5e>
  switch (datasize)
 8008b46:	2001      	movs	r0, #1
 8008b48:	e7e4      	b.n	8008b14 <SAI_InitPCM+0x5e>

08008b4a <SAI_InterruptFlag>:
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
  uint32_t tmpIT = SAI_IT_OVRUDR;

  if (mode == SAI_MODE_IT)
 8008b4a:	2901      	cmp	r1, #1
 8008b4c:	d00a      	beq.n	8008b64 <SAI_InterruptFlag+0x1a>
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8008b4e:	2301      	movs	r3, #1
  {
    tmpIT |= SAI_IT_FREQ;
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008b50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008b52:	2a08      	cmp	r2, #8
 8008b54:	d008      	beq.n	8008b68 <SAI_InterruptFlag+0x1e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
  {
    tmpIT |= SAI_IT_CNRDY;
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008b56:	6842      	ldr	r2, [r0, #4]
 8008b58:	3a02      	subs	r2, #2
 8008b5a:	2a01      	cmp	r2, #1
 8008b5c:	d90c      	bls.n	8008b78 <SAI_InterruptFlag+0x2e>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8008b5e:	f043 0004 	orr.w	r0, r3, #4
  }
  return tmpIT;
}
 8008b62:	4770      	bx	lr
    tmpIT |= SAI_IT_FREQ;
 8008b64:	2309      	movs	r3, #9
 8008b66:	e7f3      	b.n	8008b50 <SAI_InterruptFlag+0x6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8008b68:	6842      	ldr	r2, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8008b6a:	2a01      	cmp	r2, #1
 8008b6c:	bf18      	it	ne
 8008b6e:	2a03      	cmpne	r2, #3
 8008b70:	d1f1      	bne.n	8008b56 <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_CNRDY;
 8008b72:	f043 0310 	orr.w	r3, r3, #16
 8008b76:	e7ee      	b.n	8008b56 <SAI_InterruptFlag+0xc>
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8008b78:	f043 0060 	orr.w	r0, r3, #96	; 0x60
 8008b7c:	4770      	bx	lr
	...

08008b80 <SAI_Disable>:
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8008b80:	4b0e      	ldr	r3, [pc, #56]	; (8008bbc <SAI_Disable+0x3c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a0e      	ldr	r2, [pc, #56]	; (8008bc0 <SAI_Disable+0x40>)
 8008b86:	fba2 2303 	umull	r2, r3, r2, r3
 8008b8a:	0b1b      	lsrs	r3, r3, #12
 8008b8c:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008b8e:	6801      	ldr	r1, [r0, #0]
 8008b90:	680a      	ldr	r2, [r1, #0]
 8008b92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008b96:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8008b98:	b13b      	cbz	r3, 8008baa <SAI_Disable+0x2a>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
    count--;
 8008b9a:	3b01      	subs	r3, #1
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8008b9c:	6802      	ldr	r2, [r0, #0]
 8008b9e:	6812      	ldr	r2, [r2, #0]
 8008ba0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8008ba4:	d1f8      	bne.n	8008b98 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8008ba6:	2000      	movs	r0, #0

  return status;
}
 8008ba8:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008baa:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8008bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bb2:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
      status = HAL_TIMEOUT;
 8008bb6:	2003      	movs	r0, #3
      break;
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	20000af0 	.word	0x20000af0
 8008bc0:	95cbec1b 	.word	0x95cbec1b

08008bc4 <HAL_SAI_Init>:
{
 8008bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hsai == NULL)
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	f000 81df 	beq.w	8008f8c <HAL_SAI_Init+0x3c8>
 8008bce:	4604      	mov	r4, r0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008bd0:	f7fa ff8a 	bl	8003ae8 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8008bd4:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
 8008bd8:	2d01      	cmp	r5, #1
 8008bda:	d025      	beq.n	8008c28 <HAL_SAI_Init+0x64>
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	49ad      	ldr	r1, [pc, #692]	; (8008e94 <HAL_SAI_Init+0x2d0>)
 8008be0:	4aad      	ldr	r2, [pc, #692]	; (8008e98 <HAL_SAI_Init+0x2d4>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	bf18      	it	ne
 8008be6:	428b      	cmpne	r3, r1
 8008be8:	d02e      	beq.n	8008c48 <HAL_SAI_Init+0x84>
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008bea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008bee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	bf18      	it	ne
 8008bf6:	428b      	cmpne	r3, r1
 8008bf8:	d043      	beq.n	8008c82 <HAL_SAI_Init+0xbe>
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008bfa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008bfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c02:	4293      	cmp	r3, r2
 8008c04:	bf18      	it	ne
 8008c06:	428b      	cmpne	r3, r1
 8008c08:	d03d      	beq.n	8008c86 <HAL_SAI_Init+0xc2>
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 8008c0a:	f101 51c0 	add.w	r1, r1, #402653184	; 0x18000000
 8008c0e:	f5a1 3186 	sub.w	r1, r1, #68608	; 0x10c00
 8008c12:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8008c16:	f5a2 3286 	sub.w	r2, r2, #68608	; 0x10c00
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	bf18      	it	ne
 8008c1e:	428b      	cmpne	r3, r1
 8008c20:	f040 81b6 	bne.w	8008f90 <HAL_SAI_Init+0x3cc>
    SaiBaseAddress = SAI4;
 8008c24:	4e9d      	ldr	r6, [pc, #628]	; (8008e9c <HAL_SAI_Init+0x2d8>)
 8008c26:	e010      	b.n	8008c4a <HAL_SAI_Init+0x86>
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	499a      	ldr	r1, [pc, #616]	; (8008e94 <HAL_SAI_Init+0x2d0>)
 8008c2c:	4a9c      	ldr	r2, [pc, #624]	; (8008ea0 <HAL_SAI_Init+0x2dc>)
 8008c2e:	428b      	cmp	r3, r1
 8008c30:	bf18      	it	ne
 8008c32:	4293      	cmpne	r3, r2
 8008c34:	f040 8119 	bne.w	8008e6a <HAL_SAI_Init+0x2a6>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008c38:	6863      	ldr	r3, [r4, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8008c3a:	2b01      	cmp	r3, #1
 8008c3c:	f040 8115 	bne.w	8008e6a <HAL_SAI_Init+0x2a6>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8008c40:	6c63      	ldr	r3, [r4, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d0ca      	beq.n	8008bdc <HAL_SAI_Init+0x18>
 8008c46:	e110      	b.n	8008e6a <HAL_SAI_Init+0x2a6>
    SaiBaseAddress = SAI1;
 8008c48:	4e96      	ldr	r6, [pc, #600]	; (8008ea4 <HAL_SAI_Init+0x2e0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8008c4a:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8008c4e:	b1e3      	cbz	r3, 8008c8a <HAL_SAI_Init+0xc6>
  if(SAI_Disable(hsai) != HAL_OK)
 8008c50:	4620      	mov	r0, r4
 8008c52:	f7ff ff95 	bl	8008b80 <SAI_Disable>
 8008c56:	4605      	mov	r5, r0
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	f040 819b 	bne.w	8008f94 <HAL_SAI_Init+0x3d0>
  hsai->State = HAL_SAI_STATE_BUSY;
 8008c5e:	2302      	movs	r3, #2
 8008c60:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 8008c64:	68e3      	ldr	r3, [r4, #12]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d015      	beq.n	8008c96 <HAL_SAI_Init+0xd2>
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d115      	bne.n	8008c9a <HAL_SAI_Init+0xd6>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8008c6e:	2220      	movs	r2, #32
  switch (hsai->Init.Synchro)
 8008c70:	68a3      	ldr	r3, [r4, #8]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	2b04      	cmp	r3, #4
 8008c76:	d812      	bhi.n	8008c9e <HAL_SAI_Init+0xda>
 8008c78:	e8df f003 	tbb	[pc, r3]
 8008c7c:	1b161325 	.word	0x1b161325
 8008c80:	20          	.byte	0x20
 8008c81:	00          	.byte	0x00
    SaiBaseAddress = SAI2;
 8008c82:	4e89      	ldr	r6, [pc, #548]	; (8008ea8 <HAL_SAI_Init+0x2e4>)
 8008c84:	e7e1      	b.n	8008c4a <HAL_SAI_Init+0x86>
    SaiBaseAddress = SAI3;
 8008c86:	4e89      	ldr	r6, [pc, #548]	; (8008eac <HAL_SAI_Init+0x2e8>)
 8008c88:	e7df      	b.n	8008c4a <HAL_SAI_Init+0x86>
    hsai->Lock = HAL_UNLOCKED;
 8008c8a:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f7f9 fe14 	bl	80028bc <HAL_SAI_MspInit>
 8008c94:	e7dc      	b.n	8008c50 <HAL_SAI_Init+0x8c>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8008c96:	2210      	movs	r2, #16
 8008c98:	e7ea      	b.n	8008c70 <HAL_SAI_Init+0xac>
  switch (hsai->Init.SynchroExt)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	e7e8      	b.n	8008c70 <HAL_SAI_Init+0xac>
  switch (hsai->Init.Synchro)
 8008c9e:	2700      	movs	r7, #0
 8008ca0:	e013      	b.n	8008cca <HAL_SAI_Init+0x106>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008ca2:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8008ca6:	e010      	b.n	8008cca <HAL_SAI_Init+0x106>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008ca8:	f042 0201 	orr.w	r2, r2, #1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008cac:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8008cb0:	e00b      	b.n	8008cca <HAL_SAI_Init+0x106>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8008cb2:	f042 0202 	orr.w	r2, r2, #2
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008cb6:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8008cba:	e006      	b.n	8008cca <HAL_SAI_Init+0x106>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8008cbc:	f042 0203 	orr.w	r2, r2, #3
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008cc0:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8008cc4:	e001      	b.n	8008cca <HAL_SAI_Init+0x106>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008cc6:	f44f 6780 	mov.w	r7, #1024	; 0x400
  SaiBaseAddress->GCR = tmpregisterGCR;
 8008cca:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008ccc:	6a23      	ldr	r3, [r4, #32]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d047      	beq.n	8008d62 <HAL_SAI_Init+0x19e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	496f      	ldr	r1, [pc, #444]	; (8008e94 <HAL_SAI_Init+0x2d0>)
 8008cd6:	4a70      	ldr	r2, [pc, #448]	; (8008e98 <HAL_SAI_Init+0x2d4>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	bf18      	it	ne
 8008cdc:	428b      	cmpne	r3, r1
 8008cde:	f000 80c7 	beq.w	8008e70 <HAL_SAI_Init+0x2ac>
    uint32_t freq = 0;
 8008ce2:	2000      	movs	r0, #0
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	4972      	ldr	r1, [pc, #456]	; (8008eb0 <HAL_SAI_Init+0x2ec>)
 8008ce8:	4a72      	ldr	r2, [pc, #456]	; (8008eb4 <HAL_SAI_Init+0x2f0>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	bf18      	it	ne
 8008cee:	428b      	cmpne	r3, r1
 8008cf0:	f000 80c4 	beq.w	8008e7c <HAL_SAI_Init+0x2b8>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	4970      	ldr	r1, [pc, #448]	; (8008eb8 <HAL_SAI_Init+0x2f4>)
 8008cf8:	4a70      	ldr	r2, [pc, #448]	; (8008ebc <HAL_SAI_Init+0x2f8>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	bf18      	it	ne
 8008cfe:	428b      	cmpne	r3, r1
 8008d00:	f000 80c2 	beq.w	8008e88 <HAL_SAI_Init+0x2c4>
    if (hsai->Instance == SAI4_Block_A)
 8008d04:	6822      	ldr	r2, [r4, #0]
 8008d06:	4b66      	ldr	r3, [pc, #408]	; (8008ea0 <HAL_SAI_Init+0x2dc>)
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	f000 80e3 	beq.w	8008ed4 <HAL_SAI_Init+0x310>
    if (hsai->Instance == SAI4_Block_B)
 8008d0e:	6822      	ldr	r2, [r4, #0]
 8008d10:	4b6b      	ldr	r3, [pc, #428]	; (8008ec0 <HAL_SAI_Init+0x2fc>)
 8008d12:	429a      	cmp	r2, r3
 8008d14:	f000 80e4 	beq.w	8008ee0 <HAL_SAI_Init+0x31c>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8008d18:	69a3      	ldr	r3, [r4, #24]
 8008d1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d1e:	f000 80e5 	beq.w	8008eec <HAL_SAI_Init+0x328>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008d22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d28:	f000 80f4 	beq.w	8008f14 <HAL_SAI_Init+0x350>
 8008d2c:	2201      	movs	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8008d2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008d32:	0040      	lsls	r0, r0, #1
 8008d34:	6a23      	ldr	r3, [r4, #32]
 8008d36:	fb02 f303 	mul.w	r3, r2, r3
 8008d3a:	021b      	lsls	r3, r3, #8
 8008d3c:	fbb0 f0f3 	udiv	r0, r0, r3
    hsai->Init.Mckdiv = tmpval / 10U;
 8008d40:	4b60      	ldr	r3, [pc, #384]	; (8008ec4 <HAL_SAI_Init+0x300>)
 8008d42:	fba3 2300 	umull	r2, r3, r3, r0
 8008d46:	08db      	lsrs	r3, r3, #3
 8008d48:	6263      	str	r3, [r4, #36]	; 0x24
    if ((tmpval % 10U) > 8U)
 8008d4a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8008d4e:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8008d52:	2808      	cmp	r0, #8
 8008d54:	d901      	bls.n	8008d5a <HAL_SAI_Init+0x196>
      hsai->Init.Mckdiv += 1U;
 8008d56:	3301      	adds	r3, #1
 8008d58:	6263      	str	r3, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008d5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008d5c:	2b04      	cmp	r3, #4
 8008d5e:	f000 80db 	beq.w	8008f18 <HAL_SAI_Init+0x354>
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008d62:	6863      	ldr	r3, [r4, #4]
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	bf18      	it	ne
 8008d68:	2b00      	cmpne	r3, #0
 8008d6a:	f040 80dc 	bne.w	8008f26 <HAL_SAI_Init+0x362>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008d6e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	f000 80d5 	beq.w	8008f20 <HAL_SAI_Init+0x35c>
 8008d76:	f44f 7800 	mov.w	r8, #512	; 0x200
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8008d7a:	f7fa feb5 	bl	8003ae8 <HAL_GetREVID>
 8008d7e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8008d82:	f0c0 80d9 	bcc.w	8008f38 <HAL_SAI_Init+0x374>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008d86:	6822      	ldr	r2, [r4, #0]
 8008d88:	6811      	ldr	r1, [r2, #0]
 8008d8a:	4b4f      	ldr	r3, [pc, #316]	; (8008ec8 <HAL_SAI_Init+0x304>)
 8008d8c:	400b      	ands	r3, r1
 8008d8e:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d90:	6821      	ldr	r1, [r4, #0]
 8008d92:	680a      	ldr	r2, [r1, #0]
 8008d94:	6863      	ldr	r3, [r4, #4]
 8008d96:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008d98:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008d9a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008d9c:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008d9e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008da0:	4303      	orrs	r3, r0
 8008da2:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8008da6:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008da8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008daa:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008dac:	6960      	ldr	r0, [r4, #20]
 8008dae:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008db0:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008db2:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008db4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008db6:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008dba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008dbc:	4303      	orrs	r3, r0
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8008dbe:	6920      	ldr	r0, [r4, #16]
 8008dc0:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008dc2:	431a      	orrs	r2, r3
 8008dc4:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8008dc6:	6822      	ldr	r2, [r4, #0]
 8008dc8:	6851      	ldr	r1, [r2, #4]
 8008dca:	4b40      	ldr	r3, [pc, #256]	; (8008ecc <HAL_SAI_Init+0x308>)
 8008dcc:	400b      	ands	r3, r1
 8008dce:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8008dd0:	6821      	ldr	r1, [r4, #0]
 8008dd2:	684a      	ldr	r2, [r1, #4]
 8008dd4:	69e3      	ldr	r3, [r4, #28]
 8008dd6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008dd8:	4303      	orrs	r3, r0
 8008dda:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008ddc:	4303      	orrs	r3, r0
 8008dde:	4313      	orrs	r3, r2
 8008de0:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008de2:	6822      	ldr	r2, [r4, #0]
 8008de4:	6891      	ldr	r1, [r2, #8]
 8008de6:	4b3a      	ldr	r3, [pc, #232]	; (8008ed0 <HAL_SAI_Init+0x30c>)
 8008de8:	400b      	ands	r3, r1
 8008dea:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008dec:	6820      	ldr	r0, [r4, #0]
 8008dee:	6882      	ldr	r2, [r0, #8]
 8008df0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008df2:	3b01      	subs	r3, #1
                           hsai->FrameInit.FSOffset |
 8008df4:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008df6:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSDefinition |
 8008df8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8008dfa:	430b      	orrs	r3, r1
                           hsai->FrameInit.FSPolarity   |
 8008dfc:	6e21      	ldr	r1, [r4, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8008dfe:	430b      	orrs	r3, r1
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8008e00:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008e02:	3901      	subs	r1, #1
                           hsai->FrameInit.FSPolarity   |
 8008e04:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8008e0c:	6822      	ldr	r2, [r4, #0]
 8008e0e:	68d3      	ldr	r3, [r2, #12]
 8008e10:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 8008e14:	f023 030f 	bic.w	r3, r3, #15
 8008e18:	041b      	lsls	r3, r3, #16
 8008e1a:	0c1b      	lsrs	r3, r3, #16
 8008e1c:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008e1e:	6820      	ldr	r0, [r4, #0]
 8008e20:	68c2      	ldr	r2, [r0, #12]
 8008e22:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008e24:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008e26:	430b      	orrs	r3, r1
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008e28:	6f61      	ldr	r1, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008e2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8008e2e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8008e30:	3901      	subs	r1, #1
 8008e32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8008e36:	4313      	orrs	r3, r2
 8008e38:	60c3      	str	r3, [r0, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8008e3a:	6823      	ldr	r3, [r4, #0]
 8008e3c:	4915      	ldr	r1, [pc, #84]	; (8008e94 <HAL_SAI_Init+0x2d0>)
 8008e3e:	4a18      	ldr	r2, [pc, #96]	; (8008ea0 <HAL_SAI_Init+0x2dc>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	bf18      	it	ne
 8008e44:	428b      	cmpne	r3, r1
 8008e46:	d108      	bne.n	8008e5a <HAL_SAI_Init+0x296>
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8008e48:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8008e4a:	f023 0301 	bic.w	r3, r3, #1
 8008e4e:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8008e50:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	f000 808e 	beq.w	8008f76 <HAL_SAI_Init+0x3b2>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  hsai->State = HAL_SAI_STATE_READY;
 8008e60:	2201      	movs	r2, #1
 8008e62:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 8008e66:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8008e70:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008e74:	2100      	movs	r1, #0
 8008e76:	f7ff f9a9 	bl	80081cc <HAL_RCCEx_GetPeriphCLKFreq>
 8008e7a:	e733      	b.n	8008ce4 <HAL_SAI_Init+0x120>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8008e7c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008e80:	2100      	movs	r1, #0
 8008e82:	f7ff f9a3 	bl	80081cc <HAL_RCCEx_GetPeriphCLKFreq>
 8008e86:	e735      	b.n	8008cf4 <HAL_SAI_Init+0x130>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8008e88:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008e8c:	2100      	movs	r1, #0
 8008e8e:	f7ff f99d 	bl	80081cc <HAL_RCCEx_GetPeriphCLKFreq>
 8008e92:	e737      	b.n	8008d04 <HAL_SAI_Init+0x140>
 8008e94:	40015804 	.word	0x40015804
 8008e98:	40015824 	.word	0x40015824
 8008e9c:	58005400 	.word	0x58005400
 8008ea0:	58005404 	.word	0x58005404
 8008ea4:	40015800 	.word	0x40015800
 8008ea8:	40015c00 	.word	0x40015c00
 8008eac:	40016000 	.word	0x40016000
 8008eb0:	40015c04 	.word	0x40015c04
 8008eb4:	40015c24 	.word	0x40015c24
 8008eb8:	40016004 	.word	0x40016004
 8008ebc:	40016024 	.word	0x40016024
 8008ec0:	58005424 	.word	0x58005424
 8008ec4:	cccccccd 	.word	0xcccccccd
 8008ec8:	f005c010 	.word	0xf005c010
 8008ecc:	ffff1ff0 	.word	0xffff1ff0
 8008ed0:	fff88000 	.word	0xfff88000
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8008ed4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8008ed8:	2100      	movs	r1, #0
 8008eda:	f7ff f977 	bl	80081cc <HAL_RCCEx_GetPeriphCLKFreq>
 8008ede:	e716      	b.n	8008d0e <HAL_SAI_Init+0x14a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8008ee0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008ee4:	2100      	movs	r1, #0
 8008ee6:	f7ff f971 	bl	80081cc <HAL_RCCEx_GetPeriphCLKFreq>
 8008eea:	e715      	b.n	8008d18 <HAL_SAI_Init+0x154>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008eec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008eee:	2b04      	cmp	r3, #4
 8008ef0:	d00b      	beq.n	8008f0a <HAL_SAI_Init+0x346>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8008ef2:	2b08      	cmp	r3, #8
 8008ef4:	d00b      	beq.n	8008f0e <HAL_SAI_Init+0x34a>
        tmpframelength = hsai->FrameInit.FrameLength;
 8008ef6:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8008ef8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008efc:	0040      	lsls	r0, r0, #1
 8008efe:	6a23      	ldr	r3, [r4, #32]
 8008f00:	fb02 f303 	mul.w	r3, r2, r3
 8008f04:	fbb0 f0f3 	udiv	r0, r0, r3
 8008f08:	e71a      	b.n	8008d40 <HAL_SAI_Init+0x17c>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8008f0a:	2240      	movs	r2, #64	; 0x40
 8008f0c:	e7f4      	b.n	8008ef8 <HAL_SAI_Init+0x334>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8008f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f12:	e7f1      	b.n	8008ef8 <HAL_SAI_Init+0x334>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8008f14:	2202      	movs	r2, #2
 8008f16:	e70a      	b.n	8008d2e <HAL_SAI_Init+0x16a>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008f18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f1a:	085b      	lsrs	r3, r3, #1
 8008f1c:	6263      	str	r3, [r4, #36]	; 0x24
 8008f1e:	e720      	b.n	8008d62 <HAL_SAI_Init+0x19e>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008f20:	f04f 0800 	mov.w	r8, #0
 8008f24:	e729      	b.n	8008d7a <HAL_SAI_Init+0x1b6>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008f26:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008f28:	2b01      	cmp	r3, #1
 8008f2a:	d002      	beq.n	8008f32 <HAL_SAI_Init+0x36e>
 8008f2c:	f04f 0800 	mov.w	r8, #0
 8008f30:	e723      	b.n	8008d7a <HAL_SAI_Init+0x1b6>
 8008f32:	f44f 7800 	mov.w	r8, #512	; 0x200
 8008f36:	e720      	b.n	8008d7a <HAL_SAI_Init+0x1b6>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8008f38:	6822      	ldr	r2, [r4, #0]
 8008f3a:	6811      	ldr	r1, [r2, #0]
 8008f3c:	4b16      	ldr	r3, [pc, #88]	; (8008f98 <HAL_SAI_Init+0x3d4>)
 8008f3e:	400b      	ands	r3, r1
 8008f40:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f42:	6821      	ldr	r1, [r4, #0]
 8008f44:	680a      	ldr	r2, [r1, #0]
 8008f46:	6863      	ldr	r3, [r4, #4]
 8008f48:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8008f4a:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008f4c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f4e:	4303      	orrs	r3, r0
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008f50:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8008f52:	4303      	orrs	r3, r0
 8008f54:	ea43 0308 	orr.w	r3, r3, r8
                            ckstr_bits | syncen_bits |                             \
 8008f58:	433b      	orrs	r3, r7
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f5a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 8008f5c:	4303      	orrs	r3, r0
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f5e:	6960      	ldr	r0, [r4, #20]
 8008f60:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008f62:	69a0      	ldr	r0, [r4, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008f64:	4303      	orrs	r3, r0
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008f66:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008f68:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
                            hsai->Init.MckOverSampling);
 8008f6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8008f6e:	4303      	orrs	r3, r0
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008f70:	431a      	orrs	r2, r3
 8008f72:	600a      	str	r2, [r1, #0]
 8008f74:	e727      	b.n	8008dc6 <HAL_SAI_Init+0x202>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008f76:	6c23      	ldr	r3, [r4, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8008f78:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008f7a:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8008f7c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8008f80:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8008f82:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8008f84:	f043 0301 	orr.w	r3, r3, #1
 8008f88:	6473      	str	r3, [r6, #68]	; 0x44
 8008f8a:	e766      	b.n	8008e5a <HAL_SAI_Init+0x296>
    return HAL_ERROR;
 8008f8c:	2501      	movs	r5, #1
 8008f8e:	e76c      	b.n	8008e6a <HAL_SAI_Init+0x2a6>
    return HAL_ERROR;
 8008f90:	2501      	movs	r5, #1
 8008f92:	e76a      	b.n	8008e6a <HAL_SAI_Init+0x2a6>
    return HAL_ERROR;
 8008f94:	2501      	movs	r5, #1
 8008f96:	e768      	b.n	8008e6a <HAL_SAI_Init+0x2a6>
 8008f98:	f805c010 	.word	0xf805c010

08008f9c <HAL_SAI_InitProtocol>:
{
 8008f9c:	b510      	push	{r4, lr}
 8008f9e:	4604      	mov	r4, r0
  switch (protocol)
 8008fa0:	2902      	cmp	r1, #2
 8008fa2:	d906      	bls.n	8008fb2 <HAL_SAI_InitProtocol+0x16>
 8008fa4:	1ec8      	subs	r0, r1, #3
 8008fa6:	2801      	cmp	r0, #1
 8008fa8:	d80b      	bhi.n	8008fc2 <HAL_SAI_InitProtocol+0x26>
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8008faa:	4620      	mov	r0, r4
 8008fac:	f7ff fd83 	bl	8008ab6 <SAI_InitPCM>
      break;
 8008fb0:	e001      	b.n	8008fb6 <HAL_SAI_InitProtocol+0x1a>
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8008fb2:	f7ff fcea 	bl	800898a <SAI_InitI2S>
  if (status == HAL_OK)
 8008fb6:	b100      	cbz	r0, 8008fba <HAL_SAI_InitProtocol+0x1e>
}
 8008fb8:	bd10      	pop	{r4, pc}
    status = HAL_SAI_Init(hsai);
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f7ff fe02 	bl	8008bc4 <HAL_SAI_Init>
 8008fc0:	e7fa      	b.n	8008fb8 <HAL_SAI_InitProtocol+0x1c>
  switch (protocol)
 8008fc2:	2001      	movs	r0, #1
 8008fc4:	e7f8      	b.n	8008fb8 <HAL_SAI_InitProtocol+0x1c>
	...

08008fc8 <HAL_SAI_Transmit_DMA>:
{
 8008fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fcc:	4604      	mov	r4, r0
 8008fce:	4688      	mov	r8, r1
 8008fd0:	4616      	mov	r6, r2
  uint32_t tickstart = HAL_GetTick();
 8008fd2:	f7fa fd6f 	bl	8003ab4 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8008fd6:	2e00      	cmp	r6, #0
 8008fd8:	bf18      	it	ne
 8008fda:	f1b8 0f00 	cmpne.w	r8, #0
 8008fde:	d066      	beq.n	80090ae <HAL_SAI_Transmit_DMA+0xe6>
 8008fe0:	4605      	mov	r5, r0
  if (hsai->State == HAL_SAI_STATE_READY)
 8008fe2:	f894 7091 	ldrb.w	r7, [r4, #145]	; 0x91
 8008fe6:	b2ff      	uxtb	r7, r7
 8008fe8:	2f01      	cmp	r7, #1
 8008fea:	d164      	bne.n	80090b6 <HAL_SAI_Transmit_DMA+0xee>
    __HAL_LOCK(hsai);
 8008fec:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d062      	beq.n	80090ba <HAL_SAI_Transmit_DMA+0xf2>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    hsai->pBuffPtr = pData;
 8008ffa:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
    hsai->XferSize = Size;
 8008ffe:	f8a4 607c 	strh.w	r6, [r4, #124]	; 0x7c
    hsai->XferCount = Size;
 8009002:	f8a4 607e 	strh.w	r6, [r4, #126]	; 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009006:	2300      	movs	r3, #0
 8009008:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800900c:	2212      	movs	r2, #18
 800900e:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009012:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009016:	492a      	ldr	r1, [pc, #168]	; (80090c0 <HAL_SAI_Transmit_DMA+0xf8>)
 8009018:	6411      	str	r1, [r2, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800901a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800901e:	4929      	ldr	r1, [pc, #164]	; (80090c4 <HAL_SAI_Transmit_DMA+0xfc>)
 8009020:	63d1      	str	r1, [r2, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8009022:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8009026:	4928      	ldr	r1, [pc, #160]	; (80090c8 <HAL_SAI_Transmit_DMA+0x100>)
 8009028:	64d1      	str	r1, [r2, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800902a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800902e:	6513      	str	r3, [r2, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8009030:	6822      	ldr	r2, [r4, #0]
 8009032:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8009036:	321c      	adds	r2, #28
 8009038:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800903a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800903e:	f7fb f9ff 	bl	8004440 <HAL_DMA_Start_IT>
 8009042:	4606      	mov	r6, r0
 8009044:	bb10      	cbnz	r0, 800908c <HAL_SAI_Transmit_DMA+0xc4>
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009046:	2100      	movs	r1, #0
 8009048:	4620      	mov	r0, r4
 800904a:	f7ff fd7e 	bl	8008b4a <SAI_InterruptFlag>
 800904e:	6822      	ldr	r2, [r4, #0]
 8009050:	6913      	ldr	r3, [r2, #16]
 8009052:	4303      	orrs	r3, r0
 8009054:	6113      	str	r3, [r2, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009056:	6822      	ldr	r2, [r4, #0]
 8009058:	6813      	ldr	r3, [r2, #0]
 800905a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800905e:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	695a      	ldr	r2, [r3, #20]
 8009064:	f412 2fe0 	tst.w	r2, #458752	; 0x70000
 8009068:	d114      	bne.n	8009094 <HAL_SAI_Transmit_DMA+0xcc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800906a:	f7fa fd23 	bl	8003ab4 <HAL_GetTick>
 800906e:	1b43      	subs	r3, r0, r5
 8009070:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009074:	d9f4      	bls.n	8009060 <HAL_SAI_Transmit_DMA+0x98>
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009076:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800907a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800907e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
        __HAL_UNLOCK(hsai);
 8009082:	2300      	movs	r3, #0
 8009084:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
        return HAL_TIMEOUT;
 8009088:	2703      	movs	r7, #3
 800908a:	e011      	b.n	80090b0 <HAL_SAI_Transmit_DMA+0xe8>
      __HAL_UNLOCK(hsai);
 800908c:	2300      	movs	r3, #0
 800908e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
      return  HAL_ERROR;
 8009092:	e00d      	b.n	80090b0 <HAL_SAI_Transmit_DMA+0xe8>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800909a:	d103      	bne.n	80090a4 <HAL_SAI_Transmit_DMA+0xdc>
      __HAL_SAI_ENABLE(hsai);
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80090a2:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 80090a4:	2300      	movs	r3, #0
 80090a6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return HAL_OK;
 80090aa:	4637      	mov	r7, r6
 80090ac:	e000      	b.n	80090b0 <HAL_SAI_Transmit_DMA+0xe8>
    return  HAL_ERROR;
 80090ae:	2701      	movs	r7, #1
}
 80090b0:	4638      	mov	r0, r7
 80090b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80090b6:	2702      	movs	r7, #2
 80090b8:	e7fa      	b.n	80090b0 <HAL_SAI_Transmit_DMA+0xe8>
    __HAL_LOCK(hsai);
 80090ba:	2702      	movs	r7, #2
 80090bc:	e7f8      	b.n	80090b0 <HAL_SAI_Transmit_DMA+0xe8>
 80090be:	bf00      	nop
 80090c0:	08009107 	.word	0x08009107
 80090c4:	080090cd 	.word	0x080090cd
 80090c8:	08009111 	.word	0x08009111

080090cc <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80090cc:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090ce:	6b84      	ldr	r4, [r0, #56]	; 0x38

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80090d0:	69c3      	ldr	r3, [r0, #28]
 80090d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090d6:	d012      	beq.n	80090fe <SAI_DMATxCplt+0x32>
  {
    hsai->XferCount = 0;
 80090d8:	2100      	movs	r1, #0
 80090da:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80090de:	6822      	ldr	r2, [r4, #0]
 80090e0:	6813      	ldr	r3, [r2, #0]
 80090e2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80090e6:	6013      	str	r3, [r2, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80090e8:	4620      	mov	r0, r4
 80090ea:	f7ff fd2e 	bl	8008b4a <SAI_InterruptFlag>
 80090ee:	6822      	ldr	r2, [r4, #0]
 80090f0:	6913      	ldr	r3, [r2, #16]
 80090f2:	ea23 0300 	bic.w	r3, r3, r0
 80090f6:	6113      	str	r3, [r2, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80090f8:	2301      	movs	r3, #1
 80090fa:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 80090fe:	4620      	mov	r0, r4
 8009100:	f00f feca 	bl	8018e98 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
 8009104:	bd10      	pop	{r4, pc}

08009106 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009106:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8009108:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800910a:	f00f fe9d 	bl	8018e48 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
 800910e:	bd08      	pop	{r3, pc}

08009110 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009110:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009112:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009114:	f7fc f957 	bl	80053c6 <HAL_DMA_GetError>
 8009118:	2802      	cmp	r0, #2
 800911a:	d100      	bne.n	800911e <SAI_DMAError+0xe>
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
#endif
  }
}
 800911c:	bd10      	pop	{r4, pc}
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800911e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009126:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800912a:	6822      	ldr	r2, [r4, #0]
 800912c:	6813      	ldr	r3, [r2, #0]
 800912e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009132:	6013      	str	r3, [r2, #0]
    (void) SAI_Disable(hsai);
 8009134:	4620      	mov	r0, r4
 8009136:	f7ff fd23 	bl	8008b80 <SAI_Disable>
    hsai->State = HAL_SAI_STATE_READY;
 800913a:	2301      	movs	r3, #1
 800913c:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 8009146:	4620      	mov	r0, r4
 8009148:	f00f fe86 	bl	8018e58 <__HAL_SAI_ErrorCallback_veneer>
}
 800914c:	e7e6      	b.n	800911c <SAI_DMAError+0xc>
	...

08009150 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009150:	b570      	push	{r4, r5, r6, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8009156:	2300      	movs	r3, #0
 8009158:	9301      	str	r3, [sp, #4]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800915a:	6800      	ldr	r0, [r0, #0]
 800915c:	f001 ffa8 	bl	800b0b0 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009160:	4605      	mov	r5, r0
 8009162:	b110      	cbz	r0, 800916a <SD_PowerON+0x1a>
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
}
 8009164:	4628      	mov	r0, r5
 8009166:	b002      	add	sp, #8
 8009168:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800916a:	6820      	ldr	r0, [r4, #0]
 800916c:	f002 fadc 	bl	800b728 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009170:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8009174:	d007      	beq.n	8009186 <SD_PowerON+0x36>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009176:	2301      	movs	r3, #1
 8009178:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800917a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800917c:	2b01      	cmp	r3, #1
 800917e:	d00b      	beq.n	8009198 <SD_PowerON+0x48>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009180:	462e      	mov	r6, r5
 8009182:	4628      	mov	r0, r5
 8009184:	e014      	b.n	80091b0 <SD_PowerON+0x60>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009186:	2300      	movs	r3, #0
 8009188:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800918a:	6820      	ldr	r0, [r4, #0]
 800918c:	f001 ff90 	bl	800b0b0 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009190:	2800      	cmp	r0, #0
 8009192:	d0f2      	beq.n	800917a <SD_PowerON+0x2a>
      return errorstate;
 8009194:	4605      	mov	r5, r0
 8009196:	e7e5      	b.n	8009164 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009198:	2100      	movs	r1, #0
 800919a:	6820      	ldr	r0, [r4, #0]
 800919c:	f002 f90f 	bl	800b3be <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d0ed      	beq.n	8009180 <SD_PowerON+0x30>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80091a8:	e7dc      	b.n	8009164 <SD_PowerON+0x14>
    count++;
 80091aa:	9b01      	ldr	r3, [sp, #4]
 80091ac:	3301      	adds	r3, #1
 80091ae:	9301      	str	r3, [sp, #4]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80091b0:	9a01      	ldr	r2, [sp, #4]
 80091b2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d813      	bhi.n	80091e2 <SD_PowerON+0x92>
 80091ba:	b996      	cbnz	r6, 80091e2 <SD_PowerON+0x92>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091bc:	2100      	movs	r1, #0
 80091be:	6820      	ldr	r0, [r4, #0]
 80091c0:	f002 f8fd 	bl	800b3be <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091c4:	b9d0      	cbnz	r0, 80091fc <SD_PowerON+0xac>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80091c6:	4912      	ldr	r1, [pc, #72]	; (8009210 <SD_PowerON+0xc0>)
 80091c8:	6820      	ldr	r0, [r4, #0]
 80091ca:	f002 f9f9 	bl	800b5c0 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80091ce:	4606      	mov	r6, r0
 80091d0:	b9b0      	cbnz	r0, 8009200 <SD_PowerON+0xb0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091d2:	2100      	movs	r1, #0
 80091d4:	6820      	ldr	r0, [r4, #0]
 80091d6:	f001 ff56 	bl	800b086 <SDMMC_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80091da:	0fc3      	lsrs	r3, r0, #31
 80091dc:	d0e5      	beq.n	80091aa <SD_PowerON+0x5a>
 80091de:	461e      	mov	r6, r3
 80091e0:	e7e3      	b.n	80091aa <SD_PowerON+0x5a>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80091e2:	9a01      	ldr	r2, [sp, #4]
 80091e4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d80c      	bhi.n	8009206 <SD_PowerON+0xb6>
  hsd->SdCard.CardType = CARD_SDSC;
 80091ec:	2300      	movs	r3, #0
 80091ee:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80091f0:	f010 4380 	ands.w	r3, r0, #1073741824	; 0x40000000
 80091f4:	d00a      	beq.n	800920c <SD_PowerON+0xbc>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80091f6:	2301      	movs	r3, #1
 80091f8:	63a3      	str	r3, [r4, #56]	; 0x38
 80091fa:	e7b3      	b.n	8009164 <SD_PowerON+0x14>
      return errorstate;
 80091fc:	4605      	mov	r5, r0
 80091fe:	e7b1      	b.n	8009164 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009200:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8009204:	e7ae      	b.n	8009164 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009206:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800920a:	e7ab      	b.n	8009164 <SD_PowerON+0x14>
  return HAL_SD_ERROR_NONE;
 800920c:	461d      	mov	r5, r3
 800920e:	e7a9      	b.n	8009164 <SD_PowerON+0x14>
 8009210:	c1100000 	.word	0xc1100000

08009214 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009214:	b570      	push	{r4, r5, r6, lr}
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8009216:	6a44      	ldr	r4, [r0, #36]	; 0x24

  if (hsd->RxXferSize >= 32U)
 8009218:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800921a:	2b1f      	cmp	r3, #31
 800921c:	d815      	bhi.n	800924a <SD_Read_IT+0x36>
    }

    hsd->pRxBuffPtr = tmp;
    hsd->RxXferSize -= 32U;
  }
}
 800921e:	bd70      	pop	{r4, r5, r6, pc}
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009220:	6830      	ldr	r0, [r6, #0]
 8009222:	f001 ff09 	bl	800b038 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 8009226:	7020      	strb	r0, [r4, #0]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009228:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800922c:	7063      	strb	r3, [r4, #1]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800922e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009232:	70a3      	strb	r3, [r4, #2]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009234:	0e00      	lsrs	r0, r0, #24
 8009236:	70e0      	strb	r0, [r4, #3]
      tmp++;
 8009238:	3404      	adds	r4, #4
    for (count = 0U; count < 8U; count++)
 800923a:	3501      	adds	r5, #1
 800923c:	2d07      	cmp	r5, #7
 800923e:	d9ef      	bls.n	8009220 <SD_Read_IT+0xc>
    hsd->pRxBuffPtr = tmp;
 8009240:	6274      	str	r4, [r6, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8009242:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8009244:	3b20      	subs	r3, #32
 8009246:	62b3      	str	r3, [r6, #40]	; 0x28
}
 8009248:	e7e9      	b.n	800921e <SD_Read_IT+0xa>
 800924a:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 800924c:	2500      	movs	r5, #0
 800924e:	e7f5      	b.n	800923c <SD_Read_IT+0x28>

08009250 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	b082      	sub	sp, #8
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8009254:	69c4      	ldr	r4, [r0, #28]

  if (hsd->TxXferSize >= 32U)
 8009256:	6a03      	ldr	r3, [r0, #32]
 8009258:	2b1f      	cmp	r3, #31
 800925a:	d81c      	bhi.n	8009296 <SD_Write_IT+0x46>
    }

    hsd->pTxBuffPtr = tmp;
    hsd->TxXferSize -= 32U;
  }
}
 800925c:	b002      	add	sp, #8
 800925e:	bd70      	pop	{r4, r5, r6, pc}
      data = (uint32_t)(*tmp);
 8009260:	7823      	ldrb	r3, [r4, #0]
 8009262:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 8009264:	7862      	ldrb	r2, [r4, #1]
 8009266:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800926a:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800926c:	78a2      	ldrb	r2, [r4, #2]
 800926e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009272:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 8009274:	78e2      	ldrb	r2, [r4, #3]
 8009276:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800927a:	9301      	str	r3, [sp, #4]
      tmp++;
 800927c:	3404      	adds	r4, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800927e:	a901      	add	r1, sp, #4
 8009280:	6830      	ldr	r0, [r6, #0]
 8009282:	f001 fedc 	bl	800b03e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009286:	3501      	adds	r5, #1
 8009288:	2d07      	cmp	r5, #7
 800928a:	d9e9      	bls.n	8009260 <SD_Write_IT+0x10>
    hsd->pTxBuffPtr = tmp;
 800928c:	61f4      	str	r4, [r6, #28]
    hsd->TxXferSize -= 32U;
 800928e:	6a33      	ldr	r3, [r6, #32]
 8009290:	3b20      	subs	r3, #32
 8009292:	6233      	str	r3, [r6, #32]
}
 8009294:	e7e2      	b.n	800925c <SD_Write_IT+0xc>
 8009296:	4606      	mov	r6, r0
    for (count = 0U; count < 8U; count++)
 8009298:	2500      	movs	r5, #0
 800929a:	e7f5      	b.n	8009288 <SD_Write_IT+0x38>

0800929c <SD_SendSDStatus>:
{
 800929c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800929e:	b087      	sub	sp, #28
 80092a0:	4605      	mov	r5, r0
 80092a2:	460e      	mov	r6, r1
  uint32_t tickstart = HAL_GetTick();
 80092a4:	f7fa fc06 	bl	8003ab4 <HAL_GetTick>
 80092a8:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092aa:	2100      	movs	r1, #0
 80092ac:	6828      	ldr	r0, [r5, #0]
 80092ae:	f001 feea 	bl	800b086 <SDMMC_GetResponse>
 80092b2:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80092b6:	d164      	bne.n	8009382 <SD_SendSDStatus+0xe6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80092b8:	2140      	movs	r1, #64	; 0x40
 80092ba:	6828      	ldr	r0, [r5, #0]
 80092bc:	f001 ffbc 	bl	800b238 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80092c0:	4603      	mov	r3, r0
 80092c2:	b110      	cbz	r0, 80092ca <SD_SendSDStatus+0x2e>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80092c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80092c6:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 80092c8:	e05d      	b.n	8009386 <SD_SendSDStatus+0xea>
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092ca:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80092cc:	0409      	lsls	r1, r1, #16
 80092ce:	6828      	ldr	r0, [r5, #0]
 80092d0:	f002 f875 	bl	800b3be <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 80092d4:	4603      	mov	r3, r0
 80092d6:	b110      	cbz	r0, 80092de <SD_SendSDStatus+0x42>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80092d8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80092da:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 80092dc:	e053      	b.n	8009386 <SD_SendSDStatus+0xea>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80092de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092e2:	9300      	str	r3, [sp, #0]
  config.DataLength    = 64U;
 80092e4:	2340      	movs	r3, #64	; 0x40
 80092e6:	9301      	str	r3, [sp, #4]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80092e8:	2360      	movs	r3, #96	; 0x60
 80092ea:	9302      	str	r3, [sp, #8]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80092ec:	2302      	movs	r3, #2
 80092ee:	9303      	str	r3, [sp, #12]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	9304      	str	r3, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80092f4:	2301      	movs	r3, #1
 80092f6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80092f8:	4669      	mov	r1, sp
 80092fa:	6828      	ldr	r0, [r5, #0]
 80092fc:	f001 fec6 	bl	800b08c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009300:	6828      	ldr	r0, [r5, #0]
 8009302:	f002 f8c0 	bl	800b486 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009306:	4603      	mov	r3, r0
 8009308:	b180      	cbz	r0, 800932c <SD_SendSDStatus+0x90>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800930a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800930c:	636a      	str	r2, [r5, #52]	; 0x34
    return errorstate;
 800930e:	e03a      	b.n	8009386 <SD_SendSDStatus+0xea>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009310:	6828      	ldr	r0, [r5, #0]
 8009312:	f001 fe91 	bl	800b038 <SDMMC_ReadFIFO>
 8009316:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 800931a:	3401      	adds	r4, #1
 800931c:	2c07      	cmp	r4, #7
 800931e:	d9f7      	bls.n	8009310 <SD_SendSDStatus+0x74>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009320:	f7fa fbc8 	bl	8003ab4 <HAL_GetTick>
 8009324:	1bc0      	subs	r0, r0, r7
 8009326:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800932a:	d02f      	beq.n	800938c <SD_SendSDStatus+0xf0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800932c:	682b      	ldr	r3, [r5, #0]
 800932e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8009330:	f414 7495 	ands.w	r4, r4, #298	; 0x12a
 8009334:	d104      	bne.n	8009340 <SD_SendSDStatus+0xa4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009338:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800933c:	d0f0      	beq.n	8009320 <SD_SendSDStatus+0x84>
 800933e:	e7ed      	b.n	800931c <SD_SendSDStatus+0x80>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009342:	f012 0f08 	tst.w	r2, #8
 8009346:	d124      	bne.n	8009392 <SD_SendSDStatus+0xf6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009348:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800934a:	f012 0f02 	tst.w	r2, #2
 800934e:	d122      	bne.n	8009396 <SD_SendSDStatus+0xfa>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009352:	f013 0f20 	tst.w	r3, #32
 8009356:	d120      	bne.n	800939a <SD_SendSDStatus+0xfe>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009358:	6828      	ldr	r0, [r5, #0]
 800935a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800935c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8009360:	d00c      	beq.n	800937c <SD_SendSDStatus+0xe0>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009362:	f001 fe69 	bl	800b038 <SDMMC_ReadFIFO>
 8009366:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800936a:	f7fa fba3 	bl	8003ab4 <HAL_GetTick>
 800936e:	1bc0      	subs	r0, r0, r7
 8009370:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009374:	d1f0      	bne.n	8009358 <SD_SendSDStatus+0xbc>
      return HAL_SD_ERROR_TIMEOUT;
 8009376:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800937a:	e004      	b.n	8009386 <SD_SendSDStatus+0xea>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800937c:	4a08      	ldr	r2, [pc, #32]	; (80093a0 <SD_SendSDStatus+0x104>)
 800937e:	6382      	str	r2, [r0, #56]	; 0x38
  return HAL_SD_ERROR_NONE;
 8009380:	e001      	b.n	8009386 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009382:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8009386:	4618      	mov	r0, r3
 8009388:	b007      	add	sp, #28
 800938a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_SD_ERROR_TIMEOUT;
 800938c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009390:	e7f9      	b.n	8009386 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009392:	2308      	movs	r3, #8
 8009394:	e7f7      	b.n	8009386 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009396:	2302      	movs	r3, #2
 8009398:	e7f5      	b.n	8009386 <SD_SendSDStatus+0xea>
    return HAL_SD_ERROR_RX_OVERRUN;
 800939a:	2320      	movs	r3, #32
 800939c:	e7f3      	b.n	8009386 <SD_SendSDStatus+0xea>
 800939e:	bf00      	nop
 80093a0:	18000f3a 	.word	0x18000f3a

080093a4 <SD_FindSCR>:
{
 80093a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093a6:	b089      	sub	sp, #36	; 0x24
 80093a8:	4604      	mov	r4, r0
 80093aa:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80093ac:	f7fa fb82 	bl	8003ab4 <HAL_GetTick>
 80093b0:	4605      	mov	r5, r0
  uint32_t tempscr[2U] = {0UL, 0UL};
 80093b2:	2300      	movs	r3, #0
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	9301      	str	r3, [sp, #4]
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80093b8:	2108      	movs	r1, #8
 80093ba:	6820      	ldr	r0, [r4, #0]
 80093bc:	f001 ff3c 	bl	800b238 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80093c0:	4606      	mov	r6, r0
 80093c2:	b110      	cbz	r0, 80093ca <SD_FindSCR+0x26>
}
 80093c4:	4630      	mov	r0, r6
 80093c6:	b009      	add	sp, #36	; 0x24
 80093c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80093ca:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80093cc:	0409      	lsls	r1, r1, #16
 80093ce:	6820      	ldr	r0, [r4, #0]
 80093d0:	f001 fff5 	bl	800b3be <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 80093d4:	4606      	mov	r6, r0
 80093d6:	2800      	cmp	r0, #0
 80093d8:	d1f4      	bne.n	80093c4 <SD_FindSCR+0x20>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80093da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093de:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 80093e0:	2308      	movs	r3, #8
 80093e2:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80093e4:	2330      	movs	r3, #48	; 0x30
 80093e6:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80093e8:	2302      	movs	r3, #2
 80093ea:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80093f0:	2301      	movs	r3, #1
 80093f2:	9307      	str	r3, [sp, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80093f4:	a902      	add	r1, sp, #8
 80093f6:	6820      	ldr	r0, [r4, #0]
 80093f8:	f001 fe48 	bl	800b08c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80093fc:	6820      	ldr	r0, [r4, #0]
 80093fe:	f002 f810 	bl	800b422 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009402:	4606      	mov	r6, r0
 8009404:	b130      	cbz	r0, 8009414 <SD_FindSCR+0x70>
 8009406:	e7dd      	b.n	80093c4 <SD_FindSCR+0x20>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009408:	f7fa fb54 	bl	8003ab4 <HAL_GetTick>
 800940c:	1b43      	subs	r3, r0, r5
 800940e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009412:	d046      	beq.n	80094a2 <SD_FindSCR+0xfe>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009414:	6820      	ldr	r0, [r4, #0]
 8009416:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009418:	f240 532a 	movw	r3, #1322	; 0x52a
 800941c:	421a      	tst	r2, r3
 800941e:	d10e      	bne.n	800943e <SD_FindSCR+0x9a>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009420:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009422:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8009426:	d1ef      	bne.n	8009408 <SD_FindSCR+0x64>
 8009428:	2e00      	cmp	r6, #0
 800942a:	d1ed      	bne.n	8009408 <SD_FindSCR+0x64>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800942c:	f001 fe04 	bl	800b038 <SDMMC_ReadFIFO>
 8009430:	9000      	str	r0, [sp, #0]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009432:	6820      	ldr	r0, [r4, #0]
 8009434:	f001 fe00 	bl	800b038 <SDMMC_ReadFIFO>
 8009438:	9001      	str	r0, [sp, #4]
      index++;
 800943a:	3601      	adds	r6, #1
 800943c:	e7e4      	b.n	8009408 <SD_FindSCR+0x64>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800943e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009440:	f013 0f08 	tst.w	r3, #8
 8009444:	d124      	bne.n	8009490 <SD_FindSCR+0xec>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009446:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009448:	f013 0f02 	tst.w	r3, #2
 800944c:	d123      	bne.n	8009496 <SD_FindSCR+0xf2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800944e:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8009450:	f016 0620 	ands.w	r6, r6, #32
 8009454:	d122      	bne.n	800949c <SD_FindSCR+0xf8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009456:	4b14      	ldr	r3, [pc, #80]	; (80094a8 <SD_FindSCR+0x104>)
 8009458:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800945a:	9a01      	ldr	r2, [sp, #4]
 800945c:	0213      	lsls	r3, r2, #8
 800945e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009462:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009466:	0a11      	lsrs	r1, r2, #8
 8009468:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800946c:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800946e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009472:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009474:	9a00      	ldr	r2, [sp, #0]
 8009476:	0213      	lsls	r3, r2, #8
 8009478:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800947c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009480:	0a11      	lsrs	r1, r2, #8
 8009482:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009486:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009488:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800948c:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 800948e:	e799      	b.n	80093c4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009490:	2608      	movs	r6, #8
 8009492:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009494:	e796      	b.n	80093c4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009496:	2602      	movs	r6, #2
 8009498:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800949a:	e793      	b.n	80093c4 <SD_FindSCR+0x20>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800949c:	2620      	movs	r6, #32
 800949e:	6386      	str	r6, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80094a0:	e790      	b.n	80093c4 <SD_FindSCR+0x20>
      return HAL_SD_ERROR_TIMEOUT;
 80094a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80094a6:	e78d      	b.n	80093c4 <SD_FindSCR+0x20>
 80094a8:	18000f3a 	.word	0x18000f3a

080094ac <SD_WideBus_Enable>:
{
 80094ac:	b510      	push	{r4, lr}
 80094ae:	b082      	sub	sp, #8
 80094b0:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 80094b2:	2100      	movs	r1, #0
 80094b4:	9100      	str	r1, [sp, #0]
 80094b6:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80094b8:	6800      	ldr	r0, [r0, #0]
 80094ba:	f001 fde4 	bl	800b086 <SDMMC_GetResponse>
 80094be:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 80094c2:	d113      	bne.n	80094ec <SD_WideBus_Enable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 80094c4:	4669      	mov	r1, sp
 80094c6:	4620      	mov	r0, r4
 80094c8:	f7ff ff6c 	bl	80093a4 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80094cc:	b980      	cbnz	r0, 80094f0 <SD_WideBus_Enable+0x44>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80094ce:	9b01      	ldr	r3, [sp, #4]
 80094d0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80094d4:	d00e      	beq.n	80094f4 <SD_WideBus_Enable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094d6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80094d8:	0409      	lsls	r1, r1, #16
 80094da:	6820      	ldr	r0, [r4, #0]
 80094dc:	f001 ff6f 	bl	800b3be <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80094e0:	b930      	cbnz	r0, 80094f0 <SD_WideBus_Enable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80094e2:	2102      	movs	r1, #2
 80094e4:	6820      	ldr	r0, [r4, #0]
 80094e6:	f001 ff83 	bl	800b3f0 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 80094ea:	e001      	b.n	80094f0 <SD_WideBus_Enable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80094ec:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 80094f0:	b002      	add	sp, #8
 80094f2:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80094f4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80094f8:	e7fa      	b.n	80094f0 <SD_WideBus_Enable+0x44>

080094fa <SD_WideBus_Disable>:
{
 80094fa:	b510      	push	{r4, lr}
 80094fc:	b082      	sub	sp, #8
 80094fe:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0UL, 0UL};
 8009500:	2100      	movs	r1, #0
 8009502:	9100      	str	r1, [sp, #0]
 8009504:	9101      	str	r1, [sp, #4]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009506:	6800      	ldr	r0, [r0, #0]
 8009508:	f001 fdbd 	bl	800b086 <SDMMC_GetResponse>
 800950c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8009510:	d113      	bne.n	800953a <SD_WideBus_Disable+0x40>
  errorstate = SD_FindSCR(hsd, scr);
 8009512:	4669      	mov	r1, sp
 8009514:	4620      	mov	r0, r4
 8009516:	f7ff ff45 	bl	80093a4 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800951a:	b980      	cbnz	r0, 800953e <SD_WideBus_Disable+0x44>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800951c:	9b01      	ldr	r3, [sp, #4]
 800951e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8009522:	d00e      	beq.n	8009542 <SD_WideBus_Disable+0x48>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009524:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009526:	0409      	lsls	r1, r1, #16
 8009528:	6820      	ldr	r0, [r4, #0]
 800952a:	f001 ff48 	bl	800b3be <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800952e:	b930      	cbnz	r0, 800953e <SD_WideBus_Disable+0x44>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009530:	2100      	movs	r1, #0
 8009532:	6820      	ldr	r0, [r4, #0]
 8009534:	f001 ff5c 	bl	800b3f0 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009538:	e001      	b.n	800953e <SD_WideBus_Disable+0x44>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800953a:	f44f 6000 	mov.w	r0, #2048	; 0x800
}
 800953e:	b002      	add	sp, #8
 8009540:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009542:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8009546:	e7fa      	b.n	800953e <SD_WideBus_Disable+0x44>

08009548 <SD_SendStatus>:
{
 8009548:	b570      	push	{r4, r5, r6, lr}
  if (pCardStatus == NULL)
 800954a:	b181      	cbz	r1, 800956e <SD_SendStatus+0x26>
 800954c:	4604      	mov	r4, r0
 800954e:	460e      	mov	r6, r1
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009550:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8009552:	0409      	lsls	r1, r1, #16
 8009554:	6800      	ldr	r0, [r0, #0]
 8009556:	f001 ff7d 	bl	800b454 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800955a:	4605      	mov	r5, r0
 800955c:	b108      	cbz	r0, 8009562 <SD_SendStatus+0x1a>
}
 800955e:	4628      	mov	r0, r5
 8009560:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009562:	2100      	movs	r1, #0
 8009564:	6820      	ldr	r0, [r4, #0]
 8009566:	f001 fd8e 	bl	800b086 <SDMMC_GetResponse>
 800956a:	6030      	str	r0, [r6, #0]
  return HAL_SD_ERROR_NONE;
 800956c:	e7f7      	b.n	800955e <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 800956e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8009572:	e7f4      	b.n	800955e <SD_SendStatus+0x16>

08009574 <HAL_SD_ReadBlocks>:
{
 8009574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009578:	b087      	sub	sp, #28
 800957a:	4605      	mov	r5, r0
 800957c:	460c      	mov	r4, r1
 800957e:	4616      	mov	r6, r2
 8009580:	469a      	mov	sl, r3
 8009582:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8009586:	f7fa fa95 	bl	8003ab4 <HAL_GetTick>
  if (NULL == pData)
 800958a:	2c00      	cmp	r4, #0
 800958c:	d03a      	beq.n	8009604 <HAL_SD_ReadBlocks+0x90>
 800958e:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
 8009590:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
 8009594:	b2ff      	uxtb	r7, r7
 8009596:	2f01      	cmp	r7, #1
 8009598:	f040 80e0 	bne.w	800975c <HAL_SD_ReadBlocks+0x1e8>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800959c:	2300      	movs	r3, #0
 800959e:	636b      	str	r3, [r5, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80095a0:	eb06 030a 	add.w	r3, r6, sl
 80095a4:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d832      	bhi.n	8009610 <HAL_SD_ReadBlocks+0x9c>
    hsd->State = HAL_SD_STATE_BUSY;
 80095aa:	2303      	movs	r3, #3
 80095ac:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 80095b0:	682b      	ldr	r3, [r5, #0]
 80095b2:	2200      	movs	r2, #0
 80095b4:	62da      	str	r2, [r3, #44]	; 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80095b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d000      	beq.n	80095be <HAL_SD_ReadBlocks+0x4a>
      add *= 512U;
 80095bc:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80095be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095c2:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80095c4:	ea4f 234a 	mov.w	r3, sl, lsl #9
 80095c8:	9301      	str	r3, [sp, #4]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80095ca:	2390      	movs	r3, #144	; 0x90
 80095cc:	9302      	str	r3, [sp, #8]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80095ce:	2302      	movs	r3, #2
 80095d0:	9303      	str	r3, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80095d2:	2300      	movs	r3, #0
 80095d4:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80095d6:	9305      	str	r3, [sp, #20]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80095d8:	4669      	mov	r1, sp
 80095da:	6828      	ldr	r0, [r5, #0]
 80095dc:	f001 fd56 	bl	800b08c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80095e0:	682a      	ldr	r2, [r5, #0]
 80095e2:	68d3      	ldr	r3, [r2, #12]
 80095e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095e8:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 80095ea:	f1ba 0f01 	cmp.w	sl, #1
 80095ee:	d914      	bls.n	800961a <HAL_SD_ReadBlocks+0xa6>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80095f0:	2302      	movs	r3, #2
 80095f2:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80095f4:	4631      	mov	r1, r6
 80095f6:	6828      	ldr	r0, [r5, #0]
 80095f8:	f001 fe50 	bl	800b29c <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 80095fc:	b9a0      	cbnz	r0, 8009628 <HAL_SD_ReadBlocks+0xb4>
    dataremaining = config.DataLength;
 80095fe:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009602:	e038      	b.n	8009676 <HAL_SD_ReadBlocks+0x102>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009604:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009606:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800960a:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 800960c:	2701      	movs	r7, #1
 800960e:	e0aa      	b.n	8009766 <HAL_SD_ReadBlocks+0x1f2>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009610:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009612:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009616:	636b      	str	r3, [r5, #52]	; 0x34
      return HAL_ERROR;
 8009618:	e0a5      	b.n	8009766 <HAL_SD_ReadBlocks+0x1f2>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800961a:	2301      	movs	r3, #1
 800961c:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800961e:	4631      	mov	r1, r6
 8009620:	6828      	ldr	r0, [r5, #0]
 8009622:	f001 fe22 	bl	800b26a <SDMMC_CmdReadSingleBlock>
 8009626:	e7e9      	b.n	80095fc <HAL_SD_ReadBlocks+0x88>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009628:	682b      	ldr	r3, [r5, #0]
 800962a:	4a51      	ldr	r2, [pc, #324]	; (8009770 <HAL_SD_ReadBlocks+0x1fc>)
 800962c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800962e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009630:	4303      	orrs	r3, r0
 8009632:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009634:	2301      	movs	r3, #1
 8009636:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800963a:	2300      	movs	r3, #0
 800963c:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 800963e:	e092      	b.n	8009766 <HAL_SD_ReadBlocks+0x1f2>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009640:	6828      	ldr	r0, [r5, #0]
 8009642:	f001 fcf9 	bl	800b038 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009646:	7020      	strb	r0, [r4, #0]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8009648:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800964c:	7063      	strb	r3, [r4, #1]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800964e:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8009652:	70a3      	strb	r3, [r4, #2]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8009654:	0e00      	lsrs	r0, r0, #24
 8009656:	70e0      	strb	r0, [r4, #3]
          tempbuff++;
 8009658:	3404      	adds	r4, #4
        for (count = 0U; count < 8U; count++)
 800965a:	3601      	adds	r6, #1
 800965c:	2e07      	cmp	r6, #7
 800965e:	d9ef      	bls.n	8009640 <HAL_SD_ReadBlocks+0xcc>
        dataremaining -= 32U;
 8009660:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009664:	f7fa fa26 	bl	8003ab4 <HAL_GetTick>
 8009668:	eba0 0008 	sub.w	r0, r0, r8
 800966c:	4548      	cmp	r0, r9
 800966e:	d20f      	bcs.n	8009690 <HAL_SD_ReadBlocks+0x11c>
 8009670:	f1b9 0f00 	cmp.w	r9, #0
 8009674:	d00c      	beq.n	8009690 <HAL_SD_ReadBlocks+0x11c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009676:	682b      	ldr	r3, [r5, #0]
 8009678:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 800967a:	f416 7695 	ands.w	r6, r6, #298	; 0x12a
 800967e:	d115      	bne.n	80096ac <HAL_SD_ReadBlocks+0x138>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009682:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8009686:	d0ed      	beq.n	8009664 <HAL_SD_ReadBlocks+0xf0>
 8009688:	f1bb 0f1f 	cmp.w	fp, #31
 800968c:	d9ea      	bls.n	8009664 <HAL_SD_ReadBlocks+0xf0>
 800968e:	e7e5      	b.n	800965c <HAL_SD_ReadBlocks+0xe8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	4a37      	ldr	r2, [pc, #220]	; (8009770 <HAL_SD_ReadBlocks+0x1fc>)
 8009694:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009696:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009698:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800969c:	636b      	str	r3, [r5, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800969e:	2301      	movs	r3, #1
 80096a0:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80096a4:	2300      	movs	r3, #0
 80096a6:	62eb      	str	r3, [r5, #44]	; 0x2c
        return HAL_TIMEOUT;
 80096a8:	2703      	movs	r7, #3
 80096aa:	e05c      	b.n	8009766 <HAL_SD_ReadBlocks+0x1f2>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80096ac:	68da      	ldr	r2, [r3, #12]
 80096ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096b2:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80096b4:	6828      	ldr	r0, [r5, #0]
 80096b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80096b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80096bc:	d005      	beq.n	80096ca <HAL_SD_ReadBlocks+0x156>
 80096be:	f1ba 0f01 	cmp.w	sl, #1
 80096c2:	d902      	bls.n	80096ca <HAL_SD_ReadBlocks+0x156>
      if (hsd->SdCard.CardType != CARD_SECURED)
 80096c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d118      	bne.n	80096fc <HAL_SD_ReadBlocks+0x188>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80096ca:	682b      	ldr	r3, [r5, #0]
 80096cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096ce:	f012 0f08 	tst.w	r2, #8
 80096d2:	d124      	bne.n	800971e <HAL_SD_ReadBlocks+0x1aa>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80096d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096d6:	f012 0f02 	tst.w	r2, #2
 80096da:	d12c      	bne.n	8009736 <HAL_SD_ReadBlocks+0x1c2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80096dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096de:	f012 0f20 	tst.w	r2, #32
 80096e2:	d034      	beq.n	800974e <HAL_SD_ReadBlocks+0x1da>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80096e4:	4a22      	ldr	r2, [pc, #136]	; (8009770 <HAL_SD_ReadBlocks+0x1fc>)
 80096e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80096e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80096ea:	f043 0320 	orr.w	r3, r3, #32
 80096ee:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80096f0:	2301      	movs	r3, #1
 80096f2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80096f6:	2300      	movs	r3, #0
 80096f8:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 80096fa:	e034      	b.n	8009766 <HAL_SD_ReadBlocks+0x1f2>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80096fc:	f001 fe1a 	bl	800b334 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009700:	4603      	mov	r3, r0
 8009702:	2800      	cmp	r0, #0
 8009704:	d0e1      	beq.n	80096ca <HAL_SD_ReadBlocks+0x156>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009706:	682a      	ldr	r2, [r5, #0]
 8009708:	4919      	ldr	r1, [pc, #100]	; (8009770 <HAL_SD_ReadBlocks+0x1fc>)
 800970a:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800970c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800970e:	4313      	orrs	r3, r2
 8009710:	636b      	str	r3, [r5, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009712:	2301      	movs	r3, #1
 8009714:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009718:	2300      	movs	r3, #0
 800971a:	62eb      	str	r3, [r5, #44]	; 0x2c
          return HAL_ERROR;
 800971c:	e023      	b.n	8009766 <HAL_SD_ReadBlocks+0x1f2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800971e:	4a14      	ldr	r2, [pc, #80]	; (8009770 <HAL_SD_ReadBlocks+0x1fc>)
 8009720:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009722:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009724:	f043 0308 	orr.w	r3, r3, #8
 8009728:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800972a:	2301      	movs	r3, #1
 800972c:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009730:	2300      	movs	r3, #0
 8009732:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009734:	e017      	b.n	8009766 <HAL_SD_ReadBlocks+0x1f2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009736:	4a0e      	ldr	r2, [pc, #56]	; (8009770 <HAL_SD_ReadBlocks+0x1fc>)
 8009738:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800973a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800973c:	f043 0302 	orr.w	r3, r3, #2
 8009740:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009742:	2301      	movs	r3, #1
 8009744:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009748:	2300      	movs	r3, #0
 800974a:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 800974c:	e00b      	b.n	8009766 <HAL_SD_ReadBlocks+0x1f2>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800974e:	4a09      	ldr	r2, [pc, #36]	; (8009774 <HAL_SD_ReadBlocks+0x200>)
 8009750:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009752:	2301      	movs	r3, #1
 8009754:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    return HAL_OK;
 8009758:	2700      	movs	r7, #0
 800975a:	e004      	b.n	8009766 <HAL_SD_ReadBlocks+0x1f2>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800975c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800975e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009762:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8009764:	2701      	movs	r7, #1
}
 8009766:	4638      	mov	r0, r7
 8009768:	b007      	add	sp, #28
 800976a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800976e:	bf00      	nop
 8009770:	1fe00fff 	.word	0x1fe00fff
 8009774:	18000f3a 	.word	0x18000f3a

08009778 <HAL_SD_WriteBlocks>:
{
 8009778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800977c:	b08b      	sub	sp, #44	; 0x2c
 800977e:	4605      	mov	r5, r0
 8009780:	460c      	mov	r4, r1
 8009782:	4616      	mov	r6, r2
 8009784:	469a      	mov	sl, r3
 8009786:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
  uint32_t tickstart = HAL_GetTick();
 800978a:	f7fa f993 	bl	8003ab4 <HAL_GetTick>
  if (NULL == pData)
 800978e:	2c00      	cmp	r4, #0
 8009790:	d03b      	beq.n	800980a <HAL_SD_WriteBlocks+0x92>
 8009792:	4680      	mov	r8, r0
  if (hsd->State == HAL_SD_STATE_READY)
 8009794:	f895 7030 	ldrb.w	r7, [r5, #48]	; 0x30
 8009798:	b2ff      	uxtb	r7, r7
 800979a:	2f01      	cmp	r7, #1
 800979c:	f040 80e9 	bne.w	8009972 <HAL_SD_WriteBlocks+0x1fa>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097a0:	2300      	movs	r3, #0
 80097a2:	636b      	str	r3, [r5, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80097a4:	eb06 030a 	add.w	r3, r6, sl
 80097a8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d833      	bhi.n	8009816 <HAL_SD_WriteBlocks+0x9e>
    hsd->State = HAL_SD_STATE_BUSY;
 80097ae:	2303      	movs	r3, #3
 80097b0:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	2200      	movs	r2, #0
 80097b8:	62da      	str	r2, [r3, #44]	; 0x2c
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80097ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d000      	beq.n	80097c2 <HAL_SD_WriteBlocks+0x4a>
      add *= 512U;
 80097c0:	0276      	lsls	r6, r6, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80097c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097c6:	9304      	str	r3, [sp, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80097c8:	ea4f 234a 	mov.w	r3, sl, lsl #9
 80097cc:	9305      	str	r3, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80097ce:	2390      	movs	r3, #144	; 0x90
 80097d0:	9306      	str	r3, [sp, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80097d2:	2300      	movs	r3, #0
 80097d4:	9307      	str	r3, [sp, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80097d6:	9308      	str	r3, [sp, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80097d8:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80097da:	a904      	add	r1, sp, #16
 80097dc:	6828      	ldr	r0, [r5, #0]
 80097de:	f001 fc55 	bl	800b08c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80097e2:	682a      	ldr	r2, [r5, #0]
 80097e4:	68d3      	ldr	r3, [r2, #12]
 80097e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ea:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 80097ec:	f1ba 0f01 	cmp.w	sl, #1
 80097f0:	d916      	bls.n	8009820 <HAL_SD_WriteBlocks+0xa8>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80097f2:	2320      	movs	r3, #32
 80097f4:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80097f6:	4631      	mov	r1, r6
 80097f8:	6828      	ldr	r0, [r5, #0]
 80097fa:	f001 fd81 	bl	800b300 <SDMMC_CmdWriteMultiBlock>
 80097fe:	9001      	str	r0, [sp, #4]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009800:	9b01      	ldr	r3, [sp, #4]
 8009802:	b9ab      	cbnz	r3, 8009830 <HAL_SD_WriteBlocks+0xb8>
    dataremaining = config.DataLength;
 8009804:	f8dd b014 	ldr.w	fp, [sp, #20]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009808:	e040      	b.n	800988c <HAL_SD_WriteBlocks+0x114>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800980a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800980c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009810:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 8009812:	2701      	movs	r7, #1
 8009814:	e0b2      	b.n	800997c <HAL_SD_WriteBlocks+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009816:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009818:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800981c:	636b      	str	r3, [r5, #52]	; 0x34
      return HAL_ERROR;
 800981e:	e0ad      	b.n	800997c <HAL_SD_WriteBlocks+0x204>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009820:	2310      	movs	r3, #16
 8009822:	62eb      	str	r3, [r5, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009824:	4631      	mov	r1, r6
 8009826:	6828      	ldr	r0, [r5, #0]
 8009828:	f001 fd51 	bl	800b2ce <SDMMC_CmdWriteSingleBlock>
 800982c:	9001      	str	r0, [sp, #4]
 800982e:	e7e7      	b.n	8009800 <HAL_SD_WriteBlocks+0x88>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009830:	682b      	ldr	r3, [r5, #0]
 8009832:	4a54      	ldr	r2, [pc, #336]	; (8009984 <HAL_SD_WriteBlocks+0x20c>)
 8009834:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009836:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009838:	9a01      	ldr	r2, [sp, #4]
 800983a:	4313      	orrs	r3, r2
 800983c:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800983e:	2301      	movs	r3, #1
 8009840:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009844:	2300      	movs	r3, #0
 8009846:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009848:	e098      	b.n	800997c <HAL_SD_WriteBlocks+0x204>
          data = (uint32_t)(*tempbuff);
 800984a:	7823      	ldrb	r3, [r4, #0]
 800984c:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 8U);
 800984e:	7862      	ldrb	r2, [r4, #1]
 8009850:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009854:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009856:	78a2      	ldrb	r2, [r4, #2]
 8009858:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800985c:	9303      	str	r3, [sp, #12]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800985e:	78e2      	ldrb	r2, [r4, #3]
 8009860:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009864:	9303      	str	r3, [sp, #12]
          tempbuff++;
 8009866:	3404      	adds	r4, #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009868:	a903      	add	r1, sp, #12
 800986a:	6828      	ldr	r0, [r5, #0]
 800986c:	f001 fbe7 	bl	800b03e <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 8009870:	3601      	adds	r6, #1
 8009872:	2e07      	cmp	r6, #7
 8009874:	d9e9      	bls.n	800984a <HAL_SD_WriteBlocks+0xd2>
        dataremaining -= 32U;
 8009876:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800987a:	f7fa f91b 	bl	8003ab4 <HAL_GetTick>
 800987e:	eba0 0008 	sub.w	r0, r0, r8
 8009882:	4548      	cmp	r0, r9
 8009884:	d20f      	bcs.n	80098a6 <HAL_SD_WriteBlocks+0x12e>
 8009886:	f1b9 0f00 	cmp.w	r9, #0
 800988a:	d00c      	beq.n	80098a6 <HAL_SD_WriteBlocks+0x12e>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800988c:	682b      	ldr	r3, [r5, #0]
 800988e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8009890:	f416 768d 	ands.w	r6, r6, #282	; 0x11a
 8009894:	d115      	bne.n	80098c2 <HAL_SD_WriteBlocks+0x14a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 8009896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009898:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800989c:	d0ed      	beq.n	800987a <HAL_SD_WriteBlocks+0x102>
 800989e:	f1bb 0f1f 	cmp.w	fp, #31
 80098a2:	d9ea      	bls.n	800987a <HAL_SD_WriteBlocks+0x102>
 80098a4:	e7e5      	b.n	8009872 <HAL_SD_WriteBlocks+0xfa>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098a6:	682b      	ldr	r3, [r5, #0]
 80098a8:	4a36      	ldr	r2, [pc, #216]	; (8009984 <HAL_SD_WriteBlocks+0x20c>)
 80098aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80098ac:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80098ae:	9a01      	ldr	r2, [sp, #4]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	636b      	str	r3, [r5, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 80098b4:	2301      	movs	r3, #1
 80098b6:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 80098ba:	2300      	movs	r3, #0
 80098bc:	62eb      	str	r3, [r5, #44]	; 0x2c
        return HAL_TIMEOUT;
 80098be:	2703      	movs	r7, #3
 80098c0:	e05c      	b.n	800997c <HAL_SD_WriteBlocks+0x204>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80098c2:	68da      	ldr	r2, [r3, #12]
 80098c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098c8:	60da      	str	r2, [r3, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80098ca:	6828      	ldr	r0, [r5, #0]
 80098cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80098ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 80098d2:	d005      	beq.n	80098e0 <HAL_SD_WriteBlocks+0x168>
 80098d4:	f1ba 0f01 	cmp.w	sl, #1
 80098d8:	d902      	bls.n	80098e0 <HAL_SD_WriteBlocks+0x168>
      if (hsd->SdCard.CardType != CARD_SECURED)
 80098da:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80098dc:	2b03      	cmp	r3, #3
 80098de:	d118      	bne.n	8009912 <HAL_SD_WriteBlocks+0x19a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80098e0:	682b      	ldr	r3, [r5, #0]
 80098e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098e4:	f012 0f08 	tst.w	r2, #8
 80098e8:	d124      	bne.n	8009934 <HAL_SD_WriteBlocks+0x1bc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80098ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098ec:	f012 0f02 	tst.w	r2, #2
 80098f0:	d12c      	bne.n	800994c <HAL_SD_WriteBlocks+0x1d4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80098f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098f4:	f012 0f10 	tst.w	r2, #16
 80098f8:	d034      	beq.n	8009964 <HAL_SD_WriteBlocks+0x1ec>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80098fa:	4a22      	ldr	r2, [pc, #136]	; (8009984 <HAL_SD_WriteBlocks+0x20c>)
 80098fc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80098fe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009900:	f043 0310 	orr.w	r3, r3, #16
 8009904:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009906:	2301      	movs	r3, #1
 8009908:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800990c:	2300      	movs	r3, #0
 800990e:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009910:	e034      	b.n	800997c <HAL_SD_WriteBlocks+0x204>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009912:	f001 fd0f 	bl	800b334 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009916:	4603      	mov	r3, r0
 8009918:	2800      	cmp	r0, #0
 800991a:	d0e1      	beq.n	80098e0 <HAL_SD_WriteBlocks+0x168>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800991c:	682a      	ldr	r2, [r5, #0]
 800991e:	4919      	ldr	r1, [pc, #100]	; (8009984 <HAL_SD_WriteBlocks+0x20c>)
 8009920:	6391      	str	r1, [r2, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8009922:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8009924:	4313      	orrs	r3, r2
 8009926:	636b      	str	r3, [r5, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009928:	2301      	movs	r3, #1
 800992a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800992e:	2300      	movs	r3, #0
 8009930:	62eb      	str	r3, [r5, #44]	; 0x2c
          return HAL_ERROR;
 8009932:	e023      	b.n	800997c <HAL_SD_WriteBlocks+0x204>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009934:	4a13      	ldr	r2, [pc, #76]	; (8009984 <HAL_SD_WriteBlocks+0x20c>)
 8009936:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009938:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800993a:	f043 0308 	orr.w	r3, r3, #8
 800993e:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009940:	2301      	movs	r3, #1
 8009942:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009946:	2300      	movs	r3, #0
 8009948:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 800994a:	e017      	b.n	800997c <HAL_SD_WriteBlocks+0x204>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800994c:	4a0d      	ldr	r2, [pc, #52]	; (8009984 <HAL_SD_WriteBlocks+0x20c>)
 800994e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009950:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009952:	f043 0302 	orr.w	r3, r3, #2
 8009956:	636b      	str	r3, [r5, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009958:	2301      	movs	r3, #1
 800995a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800995e:	2300      	movs	r3, #0
 8009960:	62eb      	str	r3, [r5, #44]	; 0x2c
      return HAL_ERROR;
 8009962:	e00b      	b.n	800997c <HAL_SD_WriteBlocks+0x204>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009964:	4a08      	ldr	r2, [pc, #32]	; (8009988 <HAL_SD_WriteBlocks+0x210>)
 8009966:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009968:	2301      	movs	r3, #1
 800996a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    return HAL_OK;
 800996e:	2700      	movs	r7, #0
 8009970:	e004      	b.n	800997c <HAL_SD_WriteBlocks+0x204>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009972:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009974:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009978:	636b      	str	r3, [r5, #52]	; 0x34
    return HAL_ERROR;
 800997a:	2701      	movs	r7, #1
}
 800997c:	4638      	mov	r0, r7
 800997e:	b00b      	add	sp, #44	; 0x2c
 8009980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009984:	1fe00fff 	.word	0x1fe00fff
 8009988:	18000f3a 	.word	0x18000f3a

0800998c <HAL_SD_ErrorCallback>:
}
 800998c:	4770      	bx	lr
	...

08009990 <HAL_SD_GetCardCSD>:
{
 8009990:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009992:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8009994:	0f92      	lsrs	r2, r2, #30
 8009996:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009998:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800999a:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800999e:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80099a0:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
 80099a4:	f002 0203 	and.w	r2, r2, #3
 80099a8:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80099aa:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
 80099ae:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80099b0:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 80099b4:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80099b6:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 80099ba:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80099bc:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80099be:	0d12      	lsrs	r2, r2, #20
 80099c0:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80099c2:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 80099c6:	f002 020f 	and.w	r2, r2, #15
 80099ca:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80099cc:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80099ce:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80099d2:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80099d4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80099d6:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80099da:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80099dc:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80099de:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80099e2:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80099e4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80099e6:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80099ea:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80099ec:	2200      	movs	r2, #0
 80099ee:	734a      	strb	r2, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 80099f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80099f2:	2a00      	cmp	r2, #0
 80099f4:	f040 8086 	bne.w	8009b04 <HAL_SD_GetCardCSD+0x174>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80099f8:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80099fa:	f640 72fc 	movw	r2, #4092	; 0xffc
 80099fe:	ea02 0280 	and.w	r2, r2, r0, lsl #2
 8009a02:	6e58      	ldr	r0, [r3, #100]	; 0x64
 8009a04:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 8009a08:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009a0a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009a0c:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 8009a10:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009a12:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 8009a16:	f002 0207 	and.w	r2, r2, #7
 8009a1a:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009a1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009a1e:	f3c2 5242 	ubfx	r2, r2, #21, #3
 8009a22:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009a24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009a26:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8009a2a:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009a2c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009a2e:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 8009a32:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009a34:	690a      	ldr	r2, [r1, #16]
 8009a36:	3201      	adds	r2, #1
 8009a38:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009a3a:	7e08      	ldrb	r0, [r1, #24]
 8009a3c:	f000 0007 	and.w	r0, r0, #7
 8009a40:	3002      	adds	r0, #2
 8009a42:	4082      	lsls	r2, r0
 8009a44:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009a46:	f891 c008 	ldrb.w	ip, [r1, #8]
 8009a4a:	f00c 0c0f 	and.w	ip, ip, #15
 8009a4e:	2001      	movs	r0, #1
 8009a50:	fa00 f00c 	lsl.w	r0, r0, ip
 8009a54:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009a56:	0a40      	lsrs	r0, r0, #9
 8009a58:	fb00 f202 	mul.w	r2, r0, r2
 8009a5c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8009a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a62:	655a      	str	r2, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009a64:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009a66:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009a6a:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009a6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009a6e:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8009a72:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009a74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009a76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a7a:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009a7c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009a7e:	0fd2      	lsrs	r2, r2, #31
 8009a80:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009a82:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009a84:	f3c2 7241 	ubfx	r2, r2, #29, #2
 8009a88:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009a8a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009a8c:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8009a90:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009a92:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009a94:	f3c2 5283 	ubfx	r2, r2, #22, #4
 8009a98:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009a9a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009a9c:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8009aa0:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009aaa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009aae:	f002 0201 	and.w	r2, r2, #1
 8009ab2:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009ab6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ab8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8009abc:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009ac0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ac2:	f3c2 3280 	ubfx	r2, r2, #14, #1
 8009ac6:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009aca:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009acc:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8009ad0:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009ad4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ad6:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8009ada:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009ade:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ae0:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8009ae4:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009ae8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009aea:	f3c2 2201 	ubfx	r2, r2, #8, #2
 8009aee:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009af2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009af4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8009af8:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8009afc:	2301      	movs	r3, #1
 8009afe:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8009b02:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009b04:	2a01      	cmp	r2, #1
 8009b06:	d111      	bne.n	8009b2c <HAL_SD_GetCardCSD+0x19c>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009b08:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8009b0a:	0412      	lsls	r2, r2, #16
 8009b0c:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 8009b10:	f8b0 0066 	ldrh.w	r0, [r0, #102]	; 0x66
 8009b14:	4302      	orrs	r2, r0
 8009b16:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009b18:	690a      	ldr	r2, [r1, #16]
 8009b1a:	3201      	adds	r2, #1
 8009b1c:	0292      	lsls	r2, r2, #10
 8009b1e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009b20:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8009b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b26:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009b28:	655a      	str	r2, [r3, #84]	; 0x54
 8009b2a:	e79b      	b.n	8009a64 <HAL_SD_GetCardCSD+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b2c:	6802      	ldr	r2, [r0, #0]
 8009b2e:	4905      	ldr	r1, [pc, #20]	; (8009b44 <HAL_SD_GetCardCSD+0x1b4>)
 8009b30:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b32:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009b34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009b38:	6342      	str	r2, [r0, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009b3a:	2001      	movs	r0, #1
 8009b3c:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	1fe00fff 	.word	0x1fe00fff

08009b48 <SD_InitCard>:
{
 8009b48:	b530      	push	{r4, r5, lr}
 8009b4a:	b08d      	sub	sp, #52	; 0x34
 8009b4c:	4604      	mov	r4, r0
  uint16_t sd_rca = 0U;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	f8ad 3002 	strh.w	r3, [sp, #2]
  uint32_t tickstart = HAL_GetTick();
 8009b54:	f7f9 ffae 	bl	8003ab4 <HAL_GetTick>
 8009b58:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009b5a:	6820      	ldr	r0, [r4, #0]
 8009b5c:	f001 fa7a 	bl	800b054 <SDMMC_GetPowerState>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d067      	beq.n	8009c34 <SD_InitCard+0xec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b64:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b66:	2b03      	cmp	r3, #3
 8009b68:	d117      	bne.n	8009b9a <SD_InitCard+0x52>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009b6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b6c:	2b03      	cmp	r3, #3
 8009b6e:	d02f      	beq.n	8009bd0 <SD_InitCard+0x88>
    while (sd_rca == 0U)
 8009b70:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8009b74:	bb63      	cbnz	r3, 8009bd0 <SD_InitCard+0x88>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009b76:	f10d 0102 	add.w	r1, sp, #2
 8009b7a:	6820      	ldr	r0, [r4, #0]
 8009b7c:	f001 fd88 	bl	800b690 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 8009b80:	4603      	mov	r3, r0
 8009b82:	2800      	cmp	r0, #0
 8009b84:	d158      	bne.n	8009c38 <SD_InitCard+0xf0>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009b86:	f7f9 ff95 	bl	8003ab4 <HAL_GetTick>
 8009b8a:	1b43      	subs	r3, r0, r5
 8009b8c:	f241 3287 	movw	r2, #4999	; 0x1387
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d9ed      	bls.n	8009b70 <SD_InitCard+0x28>
        return HAL_SD_ERROR_TIMEOUT;
 8009b94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b98:	e04e      	b.n	8009c38 <SD_InitCard+0xf0>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009b9a:	6820      	ldr	r0, [r4, #0]
 8009b9c:	f001 fcbc 	bl	800b518 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	d148      	bne.n	8009c38 <SD_InitCard+0xf0>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	6820      	ldr	r0, [r4, #0]
 8009baa:	f001 fa6c 	bl	800b086 <SDMMC_GetResponse>
 8009bae:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009bb0:	2104      	movs	r1, #4
 8009bb2:	6820      	ldr	r0, [r4, #0]
 8009bb4:	f001 fa67 	bl	800b086 <SDMMC_GetResponse>
 8009bb8:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009bba:	2108      	movs	r1, #8
 8009bbc:	6820      	ldr	r0, [r4, #0]
 8009bbe:	f001 fa62 	bl	800b086 <SDMMC_GetResponse>
 8009bc2:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009bc4:	210c      	movs	r1, #12
 8009bc6:	6820      	ldr	r0, [r4, #0]
 8009bc8:	f001 fa5d 	bl	800b086 <SDMMC_GetResponse>
 8009bcc:	67a0      	str	r0, [r4, #120]	; 0x78
 8009bce:	e7cc      	b.n	8009b6a <SD_InitCard+0x22>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009bd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009bd2:	2b03      	cmp	r3, #3
 8009bd4:	d01c      	beq.n	8009c10 <SD_InitCard+0xc8>
    hsd->SdCard.RelCardAdd = sd_rca;
 8009bd6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8009bda:	6461      	str	r1, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bdc:	0409      	lsls	r1, r1, #16
 8009bde:	6820      	ldr	r0, [r4, #0]
 8009be0:	f001 fcb0 	bl	800b544 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009be4:	4603      	mov	r3, r0
 8009be6:	bb38      	cbnz	r0, 8009c38 <SD_InitCard+0xf0>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009be8:	2100      	movs	r1, #0
 8009bea:	6820      	ldr	r0, [r4, #0]
 8009bec:	f001 fa4b 	bl	800b086 <SDMMC_GetResponse>
 8009bf0:	65e0      	str	r0, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009bf2:	2104      	movs	r1, #4
 8009bf4:	6820      	ldr	r0, [r4, #0]
 8009bf6:	f001 fa46 	bl	800b086 <SDMMC_GetResponse>
 8009bfa:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009bfc:	2108      	movs	r1, #8
 8009bfe:	6820      	ldr	r0, [r4, #0]
 8009c00:	f001 fa41 	bl	800b086 <SDMMC_GetResponse>
 8009c04:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009c06:	210c      	movs	r1, #12
 8009c08:	6820      	ldr	r0, [r4, #0]
 8009c0a:	f001 fa3c 	bl	800b086 <SDMMC_GetResponse>
 8009c0e:	66a0      	str	r0, [r4, #104]	; 0x68
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009c10:	2104      	movs	r1, #4
 8009c12:	6820      	ldr	r0, [r4, #0]
 8009c14:	f001 fa37 	bl	800b086 <SDMMC_GetResponse>
 8009c18:	0d00      	lsrs	r0, r0, #20
 8009c1a:	6420      	str	r0, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009c1c:	a901      	add	r1, sp, #4
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f7ff feb6 	bl	8009990 <HAL_SD_GetCardCSD>
 8009c24:	b958      	cbnz	r0, 8009c3e <SD_InitCard+0xf6>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009c26:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009c28:	0409      	lsls	r1, r1, #16
 8009c2a:	6820      	ldr	r0, [r4, #0]
 8009c2c:	f001 fbae 	bl	800b38c <SDMMC_CmdSelDesel>
 8009c30:	4603      	mov	r3, r0
  if (errorstate != HAL_SD_ERROR_NONE)
 8009c32:	e001      	b.n	8009c38 <SD_InitCard+0xf0>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	b00d      	add	sp, #52	; 0x34
 8009c3c:	bd30      	pop	{r4, r5, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009c42:	e7f9      	b.n	8009c38 <SD_InitCard+0xf0>

08009c44 <HAL_SD_InitCard>:
{
 8009c44:	b570      	push	{r4, r5, r6, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	4604      	mov	r4, r0
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	9303      	str	r3, [sp, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009c4e:	9304      	str	r3, [sp, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009c50:	9305      	str	r3, [sp, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009c52:	9306      	str	r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009c54:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009c58:	2100      	movs	r1, #0
 8009c5a:	f7fe fab7 	bl	80081cc <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 8009c5e:	b938      	cbnz	r0, 8009c70 <HAL_SD_InitCard+0x2c>
    hsd->State = HAL_SD_STATE_READY;
 8009c60:	2001      	movs	r0, #1
 8009c62:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009c66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c6a:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009c6c:	b008      	add	sp, #32
 8009c6e:	bd70      	pop	{r4, r5, r6, pc}
 8009c70:	4606      	mov	r6, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009c72:	0a05      	lsrs	r5, r0, #8
 8009c74:	4b23      	ldr	r3, [pc, #140]	; (8009d04 <HAL_SD_InitCard+0xc0>)
 8009c76:	fba3 3505 	umull	r3, r5, r3, r5
 8009c7a:	092d      	lsrs	r5, r5, #4
 8009c7c:	9507      	str	r5, [sp, #28]
  (void)SDMMC_Init(hsd->Instance, Init);
 8009c7e:	ab08      	add	r3, sp, #32
 8009c80:	e913 0003 	ldmdb	r3, {r0, r1}
 8009c84:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009c88:	ab03      	add	r3, sp, #12
 8009c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009c8c:	6820      	ldr	r0, [r4, #0]
 8009c8e:	f001 f9bb 	bl	800b008 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009c92:	6820      	ldr	r0, [r4, #0]
 8009c94:	f001 f9d8 	bl	800b048 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 8009c98:	b115      	cbz	r5, 8009ca0 <HAL_SD_InitCard+0x5c>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009c9a:	006d      	lsls	r5, r5, #1
 8009c9c:	fbb6 f6f5 	udiv	r6, r6, r5
  if (sdmmc_clk != 0U)
 8009ca0:	b95e      	cbnz	r6, 8009cba <HAL_SD_InitCard+0x76>
  errorstate = SD_PowerON(hsd);
 8009ca2:	4620      	mov	r0, r4
 8009ca4:	f7ff fa54 	bl	8009150 <SD_PowerON>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009ca8:	4602      	mov	r2, r0
 8009caa:	b168      	cbz	r0, 8009cc8 <HAL_SD_InitCard+0x84>
    hsd->State = HAL_SD_STATE_READY;
 8009cac:	2001      	movs	r0, #1
 8009cae:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009cb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009cb8:	e7d8      	b.n	8009c6c <HAL_SD_InitCard+0x28>
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009cba:	4813      	ldr	r0, [pc, #76]	; (8009d08 <HAL_SD_InitCard+0xc4>)
 8009cbc:	fbb0 f0f6 	udiv	r0, r0, r6
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	f7f9 fefd 	bl	8003ac0 <HAL_Delay>
 8009cc6:	e7ec      	b.n	8009ca2 <HAL_SD_InitCard+0x5e>
  errorstate = SD_InitCard(hsd);
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f7ff ff3d 	bl	8009b48 <SD_InitCard>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cce:	4602      	mov	r2, r0
 8009cd0:	b130      	cbz	r0, 8009ce0 <HAL_SD_InitCard+0x9c>
    hsd->State = HAL_SD_STATE_READY;
 8009cd2:	2001      	movs	r0, #1
 8009cd4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8009cd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	6363      	str	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009cde:	e7c5      	b.n	8009c6c <HAL_SD_InitCard+0x28>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009ce0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ce4:	6820      	ldr	r0, [r4, #0]
 8009ce6:	f001 faa7 	bl	800b238 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cea:	b908      	cbnz	r0, 8009cf0 <HAL_SD_InitCard+0xac>
  return HAL_OK;
 8009cec:	2000      	movs	r0, #0
 8009cee:	e7bd      	b.n	8009c6c <HAL_SD_InitCard+0x28>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	4906      	ldr	r1, [pc, #24]	; (8009d0c <HAL_SD_InitCard+0xc8>)
 8009cf4:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009cf8:	4303      	orrs	r3, r0
 8009cfa:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009cfc:	2001      	movs	r0, #1
 8009cfe:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    return HAL_ERROR;
 8009d02:	e7b3      	b.n	8009c6c <HAL_SD_InitCard+0x28>
 8009d04:	014f8b59 	.word	0x014f8b59
 8009d08:	00012110 	.word	0x00012110
 8009d0c:	1fe00fff 	.word	0x1fe00fff

08009d10 <HAL_SD_GetCardStatus>:
{
 8009d10:	b530      	push	{r4, r5, lr}
 8009d12:	b091      	sub	sp, #68	; 0x44
  if (hsd->State == HAL_SD_STATE_BUSY)
 8009d14:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d059      	beq.n	8009dd2 <HAL_SD_GetCardStatus+0xc2>
 8009d1e:	4604      	mov	r4, r0
 8009d20:	460d      	mov	r5, r1
  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009d22:	4669      	mov	r1, sp
 8009d24:	f7ff faba 	bl	800929c <SD_SendSDStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d28:	b1b8      	cbz	r0, 8009d5a <HAL_SD_GetCardStatus+0x4a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d2a:	6823      	ldr	r3, [r4, #0]
 8009d2c:	492b      	ldr	r1, [pc, #172]	; (8009ddc <HAL_SD_GetCardStatus+0xcc>)
 8009d2e:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d32:	4303      	orrs	r3, r0
 8009d34:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009d36:	2501      	movs	r5, #1
 8009d38:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009d3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009d40:	6820      	ldr	r0, [r4, #0]
 8009d42:	f001 fa79 	bl	800b238 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d044      	beq.n	8009dd4 <HAL_SD_GetCardStatus+0xc4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d4a:	6822      	ldr	r2, [r4, #0]
 8009d4c:	4923      	ldr	r1, [pc, #140]	; (8009ddc <HAL_SD_GetCardStatus+0xcc>)
 8009d4e:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009d50:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009d52:	2501      	movs	r5, #1
 8009d54:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    status = HAL_ERROR;
 8009d58:	e03c      	b.n	8009dd4 <HAL_SD_GetCardStatus+0xc4>
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009d5a:	9a00      	ldr	r2, [sp, #0]
 8009d5c:	f3c2 1381 	ubfx	r3, r2, #6, #2
 8009d60:	702b      	strb	r3, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009d62:	f3c2 1340 	ubfx	r3, r2, #5, #1
 8009d66:	706b      	strb	r3, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009d68:	0a13      	lsrs	r3, r2, #8
 8009d6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009d6e:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	806b      	strh	r3, [r5, #2]
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009d76:	9a01      	ldr	r2, [sp, #4]
 8009d78:	0213      	lsls	r3, r2, #8
 8009d7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009d7e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009d82:	0a11      	lsrs	r1, r2, #8
 8009d84:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009d88:	430b      	orrs	r3, r1
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8009d8a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009d8e:	606b      	str	r3, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009d90:	9b02      	ldr	r3, [sp, #8]
 8009d92:	b2da      	uxtb	r2, r3
 8009d94:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009d96:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009d9a:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009d9c:	f3c3 5203 	ubfx	r2, r3, #20, #4
 8009da0:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009da2:	0c1b      	lsrs	r3, r3, #16
 8009da4:	9a03      	ldr	r2, [sp, #12]
 8009da6:	b2d1      	uxtb	r1, r2
 8009da8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009dac:	430b      	orrs	r3, r1
 8009dae:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009db0:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8009db4:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009db6:	f3c2 2301 	ubfx	r3, r2, #8, #2
 8009dba:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009dbc:	f3c2 1303 	ubfx	r3, r2, #4, #4
 8009dc0:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009dc2:	f002 020f 	and.w	r2, r2, #15
 8009dc6:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009dc8:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8009dcc:	74ab      	strb	r3, [r5, #18]
  HAL_StatusTypeDef status = HAL_OK;
 8009dce:	2500      	movs	r5, #0
 8009dd0:	e7b4      	b.n	8009d3c <HAL_SD_GetCardStatus+0x2c>
    return HAL_ERROR;
 8009dd2:	2501      	movs	r5, #1
}
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	b011      	add	sp, #68	; 0x44
 8009dd8:	bd30      	pop	{r4, r5, pc}
 8009dda:	bf00      	nop
 8009ddc:	1fe00fff 	.word	0x1fe00fff

08009de0 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009de0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009de2:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009de4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8009de6:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009de8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8009dea:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009dec:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009dee:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009df0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8009df2:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009df4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009df6:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009df8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009dfa:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009dfc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8009dfe:	61cb      	str	r3, [r1, #28]
}
 8009e00:	2000      	movs	r0, #0
 8009e02:	4770      	bx	lr

08009e04 <HAL_SD_ConfigWideBusOperation>:
{
 8009e04:	b530      	push	{r4, r5, lr}
 8009e06:	b089      	sub	sp, #36	; 0x24
 8009e08:	4604      	mov	r4, r0
 8009e0a:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009e12:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8009e14:	2b03      	cmp	r3, #3
 8009e16:	d01c      	beq.n	8009e52 <HAL_SD_ConfigWideBusOperation+0x4e>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8009e18:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8009e1c:	d008      	beq.n	8009e30 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8009e1e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8009e22:	d00a      	beq.n	8009e3a <HAL_SD_ConfigWideBusOperation+0x36>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8009e24:	b179      	cbz	r1, 8009e46 <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009e26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009e28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e2c:	6343      	str	r3, [r0, #52]	; 0x34
 8009e2e:	e014      	b.n	8009e5a <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e36:	6343      	str	r3, [r0, #52]	; 0x34
 8009e38:	e00f      	b.n	8009e5a <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8009e3a:	f7ff fb37 	bl	80094ac <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8009e3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e40:	4303      	orrs	r3, r0
 8009e42:	6363      	str	r3, [r4, #52]	; 0x34
 8009e44:	e009      	b.n	8009e5a <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8009e46:	f7ff fb58 	bl	80094fa <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8009e4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e4c:	4303      	orrs	r3, r0
 8009e4e:	6363      	str	r3, [r4, #52]	; 0x34
 8009e50:	e003      	b.n	8009e5a <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e52:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e58:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009e5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e5c:	b1b3      	cbz	r3, 8009e8c <HAL_SD_ConfigWideBusOperation+0x88>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	4a3a      	ldr	r2, [pc, #232]	; (8009f4c <HAL_SD_ConfigWideBusOperation+0x148>)
 8009e62:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009e64:	2501      	movs	r5, #1
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009e6a:	6820      	ldr	r0, [r4, #0]
 8009e6c:	f001 f9e4 	bl	800b238 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009e70:	b130      	cbz	r0, 8009e80 <HAL_SD_ConfigWideBusOperation+0x7c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e72:	6823      	ldr	r3, [r4, #0]
 8009e74:	4935      	ldr	r1, [pc, #212]	; (8009f4c <HAL_SD_ConfigWideBusOperation+0x148>)
 8009e76:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009e78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e7a:	4303      	orrs	r3, r0
 8009e7c:	6363      	str	r3, [r4, #52]	; 0x34
    status = HAL_ERROR;
 8009e7e:	2501      	movs	r5, #1
  hsd->State = HAL_SD_STATE_READY;
 8009e80:	2301      	movs	r3, #1
 8009e82:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8009e86:	4628      	mov	r0, r5
 8009e88:	b009      	add	sp, #36	; 0x24
 8009e8a:	bd30      	pop	{r4, r5, pc}
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009e8c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009e90:	2100      	movs	r1, #0
 8009e92:	f7fe f99b 	bl	80081cc <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8009e96:	4602      	mov	r2, r0
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d050      	beq.n	8009f3e <HAL_SD_ConfigWideBusOperation+0x13a>
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8009e9c:	6863      	ldr	r3, [r4, #4]
 8009e9e:	9303      	str	r3, [sp, #12]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009ea0:	68a3      	ldr	r3, [r4, #8]
 8009ea2:	9304      	str	r3, [sp, #16]
      Init.BusWide             = WideMode;
 8009ea4:	9505      	str	r5, [sp, #20]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009ea6:	6923      	ldr	r3, [r4, #16]
 8009ea8:	9306      	str	r3, [sp, #24]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8009eaa:	6961      	ldr	r1, [r4, #20]
 8009eac:	4b28      	ldr	r3, [pc, #160]	; (8009f50 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8009eae:	fba3 0302 	umull	r0, r3, r3, r2
 8009eb2:	0e18      	lsrs	r0, r3, #24
 8009eb4:	ebb1 6f13 	cmp.w	r1, r3, lsr #24
 8009eb8:	d30c      	bcc.n	8009ed4 <HAL_SD_ConfigWideBusOperation+0xd0>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009eba:	9107      	str	r1, [sp, #28]
      (void)SDMMC_Init(hsd->Instance, Init);
 8009ebc:	ab08      	add	r3, sp, #32
 8009ebe:	e913 0003 	ldmdb	r3, {r0, r1}
 8009ec2:	e88d 0003 	stmia.w	sp, {r0, r1}
 8009ec6:	ab03      	add	r3, sp, #12
 8009ec8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009eca:	6820      	ldr	r0, [r4, #0]
 8009ecc:	f001 f89c 	bl	800b008 <SDMMC_Init>
  HAL_StatusTypeDef status = HAL_OK;
 8009ed0:	2500      	movs	r5, #0
 8009ed2:	e7c8      	b.n	8009e66 <HAL_SD_ConfigWideBusOperation+0x62>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009ed4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eda:	d008      	beq.n	8009eee <HAL_SD_ConfigWideBusOperation+0xea>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009edc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ee0:	d007      	beq.n	8009ef2 <HAL_SD_ConfigWideBusOperation+0xee>
        if (hsd->Init.ClockDiv == 0U)
 8009ee2:	bb11      	cbnz	r1, 8009f2a <HAL_SD_ConfigWideBusOperation+0x126>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8009ee4:	4b1b      	ldr	r3, [pc, #108]	; (8009f54 <HAL_SD_ConfigWideBusOperation+0x150>)
 8009ee6:	429a      	cmp	r2, r3
 8009ee8:	d91d      	bls.n	8009f26 <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009eea:	9007      	str	r0, [sp, #28]
 8009eec:	e7e6      	b.n	8009ebc <HAL_SD_ConfigWideBusOperation+0xb8>
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009eee:	9107      	str	r1, [sp, #28]
 8009ef0:	e7e4      	b.n	8009ebc <HAL_SD_ConfigWideBusOperation+0xb8>
        if (hsd->Init.ClockDiv == 0U)
 8009ef2:	b951      	cbnz	r1, 8009f0a <HAL_SD_ConfigWideBusOperation+0x106>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8009ef4:	4b18      	ldr	r3, [pc, #96]	; (8009f58 <HAL_SD_ConfigWideBusOperation+0x154>)
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d905      	bls.n	8009f06 <HAL_SD_ConfigWideBusOperation+0x102>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009efa:	4b15      	ldr	r3, [pc, #84]	; (8009f50 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8009efc:	fba3 2302 	umull	r2, r3, r3, r2
 8009f00:	0e5b      	lsrs	r3, r3, #25
 8009f02:	9307      	str	r3, [sp, #28]
 8009f04:	e7da      	b.n	8009ebc <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009f06:	9107      	str	r1, [sp, #28]
 8009f08:	e7d8      	b.n	8009ebc <HAL_SD_ConfigWideBusOperation+0xb8>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8009f0a:	004b      	lsls	r3, r1, #1
 8009f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f10:	4811      	ldr	r0, [pc, #68]	; (8009f58 <HAL_SD_ConfigWideBusOperation+0x154>)
 8009f12:	4283      	cmp	r3, r0
 8009f14:	d905      	bls.n	8009f22 <HAL_SD_ConfigWideBusOperation+0x11e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009f16:	4b0e      	ldr	r3, [pc, #56]	; (8009f50 <HAL_SD_ConfigWideBusOperation+0x14c>)
 8009f18:	fba3 2302 	umull	r2, r3, r3, r2
 8009f1c:	0e5b      	lsrs	r3, r3, #25
 8009f1e:	9307      	str	r3, [sp, #28]
 8009f20:	e7cc      	b.n	8009ebc <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009f22:	9107      	str	r1, [sp, #28]
 8009f24:	e7ca      	b.n	8009ebc <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009f26:	9107      	str	r1, [sp, #28]
 8009f28:	e7c8      	b.n	8009ebc <HAL_SD_ConfigWideBusOperation+0xb8>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8009f2a:	004b      	lsls	r3, r1, #1
 8009f2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009f30:	4b08      	ldr	r3, [pc, #32]	; (8009f54 <HAL_SD_ConfigWideBusOperation+0x150>)
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d901      	bls.n	8009f3a <HAL_SD_ConfigWideBusOperation+0x136>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8009f36:	9007      	str	r0, [sp, #28]
 8009f38:	e7c0      	b.n	8009ebc <HAL_SD_ConfigWideBusOperation+0xb8>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009f3a:	9107      	str	r1, [sp, #28]
 8009f3c:	e7be      	b.n	8009ebc <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8009f3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f44:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 8009f46:	2501      	movs	r5, #1
 8009f48:	e78d      	b.n	8009e66 <HAL_SD_ConfigWideBusOperation+0x62>
 8009f4a:	bf00      	nop
 8009f4c:	1fe00fff 	.word	0x1fe00fff
 8009f50:	55e63b89 	.word	0x55e63b89
 8009f54:	017d7840 	.word	0x017d7840
 8009f58:	02faf080 	.word	0x02faf080

08009f5c <HAL_SD_GetCardState>:
{
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8009f62:	2300      	movs	r3, #0
 8009f64:	9301      	str	r3, [sp, #4]
  errorstate = SD_SendStatus(hsd, &resp1);
 8009f66:	a901      	add	r1, sp, #4
 8009f68:	f7ff faee 	bl	8009548 <SD_SendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009f6c:	b110      	cbz	r0, 8009f74 <HAL_SD_GetCardState+0x18>
    hsd->ErrorCode |= errorstate;
 8009f6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f70:	4303      	orrs	r3, r0
 8009f72:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009f74:	9801      	ldr	r0, [sp, #4]
 8009f76:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8009f7a:	b002      	add	sp, #8
 8009f7c:	bd10      	pop	{r4, pc}

08009f7e <HAL_SD_Init>:
{
 8009f7e:	b570      	push	{r4, r5, r6, lr}
 8009f80:	b086      	sub	sp, #24
  if (hsd == NULL)
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d054      	beq.n	800a030 <HAL_SD_Init+0xb2>
 8009f86:	4604      	mov	r4, r0
  if (hsd->State == HAL_SD_STATE_RESET)
 8009f88:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8009f8c:	b153      	cbz	r3, 8009fa4 <HAL_SD_Init+0x26>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009f8e:	2304      	movs	r3, #4
 8009f90:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009f94:	4620      	mov	r0, r4
 8009f96:	f7ff fe55 	bl	8009c44 <HAL_SD_InitCard>
 8009f9a:	b138      	cbz	r0, 8009fac <HAL_SD_Init+0x2e>
    return HAL_ERROR;
 8009f9c:	2501      	movs	r5, #1
}
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	b006      	add	sp, #24
 8009fa2:	bd70      	pop	{r4, r5, r6, pc}
    hsd->Lock = HAL_UNLOCKED;
 8009fa4:	7603      	strb	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 8009fa6:	f7f8 fd4d 	bl	8002a44 <HAL_SD_MspInit>
 8009faa:	e7f0      	b.n	8009f8e <HAL_SD_Init+0x10>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8009fac:	a901      	add	r1, sp, #4
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f7ff feae 	bl	8009d10 <HAL_SD_GetCardStatus>
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	d13d      	bne.n	800a034 <HAL_SD_Init+0xb6>
  speedgrade = CardStatus.UhsSpeedGrade;
 8009fb8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009fbc:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009fbe:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009fc2:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009fc4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009fc6:	2901      	cmp	r1, #1
 8009fc8:	d00b      	beq.n	8009fe2 <HAL_SD_Init+0x64>
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009fca:	2901      	cmp	r1, #1
 8009fcc:	d00f      	beq.n	8009fee <HAL_SD_Init+0x70>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8009fd2:	68e1      	ldr	r1, [r4, #12]
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f7ff ff15 	bl	8009e04 <HAL_SD_ConfigWideBusOperation>
 8009fda:	4605      	mov	r5, r0
 8009fdc:	b158      	cbz	r0, 8009ff6 <HAL_SD_Init+0x78>
    return HAL_ERROR;
 8009fde:	2501      	movs	r5, #1
 8009fe0:	e7dd      	b.n	8009f9e <HAL_SD_Init+0x20>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	d0f1      	beq.n	8009fca <HAL_SD_Init+0x4c>
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fea:	65a3      	str	r3, [r4, #88]	; 0x58
 8009fec:	e7f1      	b.n	8009fd2 <HAL_SD_Init+0x54>
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8009fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ff2:	65a3      	str	r3, [r4, #88]	; 0x58
 8009ff4:	e7ed      	b.n	8009fd2 <HAL_SD_Init+0x54>
  tickstart = HAL_GetTick();
 8009ff6:	f7f9 fd5d 	bl	8003ab4 <HAL_GetTick>
 8009ffa:	4606      	mov	r6, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f7ff ffad 	bl	8009f5c <HAL_SD_GetCardState>
 800a002:	2804      	cmp	r0, #4
 800a004:	d00d      	beq.n	800a022 <HAL_SD_Init+0xa4>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a006:	f7f9 fd55 	bl	8003ab4 <HAL_GetTick>
 800a00a:	1b80      	subs	r0, r0, r6
 800a00c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a010:	d1f4      	bne.n	8009ffc <HAL_SD_Init+0x7e>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a012:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a016:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a018:	2301      	movs	r3, #1
 800a01a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800a01e:	2503      	movs	r5, #3
 800a020:	e7bd      	b.n	8009f9e <HAL_SD_Init+0x20>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a022:	2300      	movs	r3, #0
 800a024:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a026:	62e3      	str	r3, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800a028:	2301      	movs	r3, #1
 800a02a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800a02e:	e7b6      	b.n	8009f9e <HAL_SD_Init+0x20>
    return HAL_ERROR;
 800a030:	2501      	movs	r5, #1
 800a032:	e7b4      	b.n	8009f9e <HAL_SD_Init+0x20>
    return HAL_ERROR;
 800a034:	2501      	movs	r5, #1
 800a036:	e7b2      	b.n	8009f9e <HAL_SD_Init+0x20>

0800a038 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a038:	4770      	bx	lr

0800a03a <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a03a:	4770      	bx	lr

0800a03c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a03c:	4770      	bx	lr

0800a03e <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800a03e:	4770      	bx	lr

0800a040 <HAL_SD_IRQHandler>:
{
 800a040:	b538      	push	{r3, r4, r5, lr}
 800a042:	4604      	mov	r4, r0
  uint32_t context = hsd->Context;
 800a044:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a046:	6803      	ldr	r3, [r0, #0]
 800a048:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a04a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800a04e:	d002      	beq.n	800a056 <HAL_SD_IRQHandler+0x16>
 800a050:	f015 0f08 	tst.w	r5, #8
 800a054:	d12a      	bne.n	800a0ac <HAL_SD_IRQHandler+0x6c>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a058:	f412 7f80 	tst.w	r2, #256	; 0x100
 800a05c:	d067      	beq.n	800a12e <HAL_SD_IRQHandler+0xee>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a05e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a062:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a064:	6822      	ldr	r2, [r4, #0]
 800a066:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a068:	4b7e      	ldr	r3, [pc, #504]	; (800a264 <HAL_SD_IRQHandler+0x224>)
 800a06a:	400b      	ands	r3, r1
 800a06c:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a06e:	6822      	ldr	r2, [r4, #0]
 800a070:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a072:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a076:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a078:	6822      	ldr	r2, [r4, #0]
 800a07a:	68d3      	ldr	r3, [r2, #12]
 800a07c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a080:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 800a082:	f015 0f08 	tst.w	r5, #8
 800a086:	d025      	beq.n	800a0d4 <HAL_SD_IRQHandler+0x94>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a088:	f015 0f22 	tst.w	r5, #34	; 0x22
 800a08c:	d111      	bne.n	800a0b2 <HAL_SD_IRQHandler+0x72>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a08e:	6823      	ldr	r3, [r4, #0]
 800a090:	4a75      	ldr	r2, [pc, #468]	; (800a268 <HAL_SD_IRQHandler+0x228>)
 800a092:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a094:	2301      	movs	r3, #1
 800a096:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a09a:	2300      	movs	r3, #0
 800a09c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a09e:	f015 0f03 	tst.w	r5, #3
 800a0a2:	d013      	beq.n	800a0cc <HAL_SD_IRQHandler+0x8c>
        HAL_SD_RxCpltCallback(hsd);
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f001 fb9f 	bl	800b7e8 <HAL_SD_RxCpltCallback>
 800a0aa:	e001      	b.n	800a0b0 <HAL_SD_IRQHandler+0x70>
    SD_Read_IT(hsd);
 800a0ac:	f7ff f8b2 	bl	8009214 <SD_Read_IT>
}
 800a0b0:	bd38      	pop	{r3, r4, r5, pc}
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a0b2:	6820      	ldr	r0, [r4, #0]
 800a0b4:	f001 f93e 	bl	800b334 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	d0e7      	beq.n	800a08e <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800a0be:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	f7ff fc61 	bl	800998c <HAL_SD_ErrorCallback>
 800a0ca:	e7e0      	b.n	800a08e <HAL_SD_IRQHandler+0x4e>
        HAL_SD_TxCpltCallback(hsd);
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f001 fb86 	bl	800b7de <HAL_SD_TxCpltCallback>
 800a0d2:	e7ed      	b.n	800a0b0 <HAL_SD_IRQHandler+0x70>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a0d4:	f015 0f80 	tst.w	r5, #128	; 0x80
 800a0d8:	d0ea      	beq.n	800a0b0 <HAL_SD_IRQHandler+0x70>
      hsd->Instance->DLEN = 0;
 800a0da:	6822      	ldr	r2, [r4, #0]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a0e0:	6822      	ldr	r2, [r4, #0]
 800a0e2:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a0e4:	6822      	ldr	r2, [r4, #0]
 800a0e6:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a0e8:	f015 0f22 	tst.w	r5, #34	; 0x22
 800a0ec:	d10e      	bne.n	800a10c <HAL_SD_IRQHandler+0xcc>
      hsd->State = HAL_SD_STATE_READY;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a0f8:	f015 0f30 	tst.w	r5, #48	; 0x30
 800a0fc:	d113      	bne.n	800a126 <HAL_SD_IRQHandler+0xe6>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a0fe:	f015 0f03 	tst.w	r5, #3
 800a102:	d0d5      	beq.n	800a0b0 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 800a104:	4620      	mov	r0, r4
 800a106:	f001 fb6f 	bl	800b7e8 <HAL_SD_RxCpltCallback>
 800a10a:	e7d1      	b.n	800a0b0 <HAL_SD_IRQHandler+0x70>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a10c:	6820      	ldr	r0, [r4, #0]
 800a10e:	f001 f911 	bl	800b334 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a112:	4603      	mov	r3, r0
 800a114:	2800      	cmp	r0, #0
 800a116:	d0ea      	beq.n	800a0ee <HAL_SD_IRQHandler+0xae>
          hsd->ErrorCode |= errorstate;
 800a118:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a11a:	4313      	orrs	r3, r2
 800a11c:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800a11e:	4620      	mov	r0, r4
 800a120:	f7ff fc34 	bl	800998c <HAL_SD_ErrorCallback>
 800a124:	e7e3      	b.n	800a0ee <HAL_SD_IRQHandler+0xae>
        HAL_SD_TxCpltCallback(hsd);
 800a126:	4620      	mov	r0, r4
 800a128:	f001 fb59 	bl	800b7de <HAL_SD_TxCpltCallback>
 800a12c:	e7e7      	b.n	800a0fe <HAL_SD_IRQHandler+0xbe>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a12e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a130:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 800a134:	d002      	beq.n	800a13c <HAL_SD_IRQHandler+0xfc>
 800a136:	f015 0f08 	tst.w	r5, #8
 800a13a:	d162      	bne.n	800a202 <HAL_SD_IRQHandler+0x1c2>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a13c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a13e:	f012 0f3a 	tst.w	r2, #58	; 0x3a
 800a142:	d06b      	beq.n	800a21c <HAL_SD_IRQHandler+0x1dc>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a146:	f012 0f02 	tst.w	r2, #2
 800a14a:	d003      	beq.n	800a154 <HAL_SD_IRQHandler+0x114>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a14c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a14e:	f042 0202 	orr.w	r2, r2, #2
 800a152:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a156:	f012 0f08 	tst.w	r2, #8
 800a15a:	d003      	beq.n	800a164 <HAL_SD_IRQHandler+0x124>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a15c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a15e:	f042 0208 	orr.w	r2, r2, #8
 800a162:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a166:	f012 0f20 	tst.w	r2, #32
 800a16a:	d003      	beq.n	800a174 <HAL_SD_IRQHandler+0x134>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a16c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a16e:	f042 0220 	orr.w	r2, r2, #32
 800a172:	6362      	str	r2, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a176:	f012 0f10 	tst.w	r2, #16
 800a17a:	d003      	beq.n	800a184 <HAL_SD_IRQHandler+0x144>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a17c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a17e:	f042 0210 	orr.w	r2, r2, #16
 800a182:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a184:	4a38      	ldr	r2, [pc, #224]	; (800a268 <HAL_SD_IRQHandler+0x228>)
 800a186:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a188:	6822      	ldr	r2, [r4, #0]
 800a18a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a18c:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800a190:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a192:	6822      	ldr	r2, [r4, #0]
 800a194:	68d3      	ldr	r3, [r2, #12]
 800a196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a19a:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a19c:	6822      	ldr	r2, [r4, #0]
 800a19e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a1a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a1a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a1a6:	6822      	ldr	r2, [r4, #0]
 800a1a8:	68d3      	ldr	r3, [r2, #12]
 800a1aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1ae:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a1b0:	6820      	ldr	r0, [r4, #0]
 800a1b2:	f001 f8bf 	bl	800b334 <SDMMC_CmdStopTransfer>
 800a1b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1b8:	4303      	orrs	r3, r0
 800a1ba:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a1bc:	6822      	ldr	r2, [r4, #0]
 800a1be:	68d3      	ldr	r3, [r2, #12]
 800a1c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1c4:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a1c6:	6823      	ldr	r3, [r4, #0]
 800a1c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1cc:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a1ce:	f015 0f08 	tst.w	r5, #8
 800a1d2:	d11a      	bne.n	800a20a <HAL_SD_IRQHandler+0x1ca>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a1d4:	f015 0f80 	tst.w	r5, #128	; 0x80
 800a1d8:	f43f af6a 	beq.w	800a0b0 <HAL_SD_IRQHandler+0x70>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a1dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	f43f af66 	beq.w	800a0b0 <HAL_SD_IRQHandler+0x70>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a1e4:	6822      	ldr	r2, [r4, #0]
 800a1e6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a1e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1ec:	63d3      	str	r3, [r2, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f7ff fbc6 	bl	800998c <HAL_SD_ErrorCallback>
 800a200:	e756      	b.n	800a0b0 <HAL_SD_IRQHandler+0x70>
    SD_Write_IT(hsd);
 800a202:	4620      	mov	r0, r4
 800a204:	f7ff f824 	bl	8009250 <SD_Write_IT>
 800a208:	e752      	b.n	800a0b0 <HAL_SD_IRQHandler+0x70>
      hsd->State = HAL_SD_STATE_READY;
 800a20a:	2301      	movs	r3, #1
 800a20c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a210:	2300      	movs	r3, #0
 800a212:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800a214:	4620      	mov	r0, r4
 800a216:	f7ff fbb9 	bl	800998c <HAL_SD_ErrorCallback>
 800a21a:	e749      	b.n	800a0b0 <HAL_SD_IRQHandler+0x70>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a21c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a21e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800a222:	f43f af45 	beq.w	800a0b0 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a22a:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a230:	f013 0f04 	tst.w	r3, #4
 800a234:	d10a      	bne.n	800a24c <HAL_SD_IRQHandler+0x20c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a236:	f015 0f20 	tst.w	r5, #32
 800a23a:	d003      	beq.n	800a244 <HAL_SD_IRQHandler+0x204>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a23c:	4620      	mov	r0, r4
 800a23e:	f7ff fefe 	bl	800a03e <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800a242:	e735      	b.n	800a0b0 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800a244:	4620      	mov	r0, r4
 800a246:	f7ff fef8 	bl	800a03a <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800a24a:	e731      	b.n	800a0b0 <HAL_SD_IRQHandler+0x70>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a24c:	f015 0f20 	tst.w	r5, #32
 800a250:	d003      	beq.n	800a25a <HAL_SD_IRQHandler+0x21a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800a252:	4620      	mov	r0, r4
 800a254:	f7ff fef2 	bl	800a03c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800a258:	e72a      	b.n	800a0b0 <HAL_SD_IRQHandler+0x70>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800a25a:	4620      	mov	r0, r4
 800a25c:	f7ff feec 	bl	800a038 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800a260:	e726      	b.n	800a0b0 <HAL_SD_IRQHandler+0x70>
 800a262:	bf00      	nop
 800a264:	ffff3ec5 	.word	0xffff3ec5
 800a268:	18000f3a 	.word	0x18000f3a

0800a26c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a26c:	b308      	cbz	r0, 800a2b2 <HAL_SDRAM_Init+0x46>
{
 800a26e:	b538      	push	{r3, r4, r5, lr}
 800a270:	460d      	mov	r5, r1
 800a272:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a274:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a278:	b1b3      	cbz	r3, 800a2a8 <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a27a:	2302      	movs	r3, #2
 800a27c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a280:	4621      	mov	r1, r4
 800a282:	f851 0b04 	ldr.w	r0, [r1], #4
 800a286:	f000 fdf1 	bl	800ae6c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a28a:	6862      	ldr	r2, [r4, #4]
 800a28c:	4629      	mov	r1, r5
 800a28e:	6820      	ldr	r0, [r4, #0]
 800a290:	f000 fe26 	bl	800aee0 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a294:	4a08      	ldr	r2, [pc, #32]	; (800a2b8 <HAL_SDRAM_Init+0x4c>)
 800a296:	6813      	ldr	r3, [r2, #0]
 800a298:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a29c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 800a2a4:	2000      	movs	r0, #0
}
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800a2a8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800a2ac:	f7f6 fe4a 	bl	8000f44 <HAL_SDRAM_MspInit>
 800a2b0:	e7e3      	b.n	800a27a <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 800a2b2:	2001      	movs	r0, #1
}
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	52004000 	.word	0x52004000

0800a2bc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a2bc:	b538      	push	{r3, r4, r5, lr}
 800a2be:	4604      	mov	r4, r0
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a2c0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a2c4:	b2d8      	uxtb	r0, r3

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a2c6:	2802      	cmp	r0, #2
 800a2c8:	d005      	beq.n	800a2d6 <HAL_SDRAM_SendCommand+0x1a>
 800a2ca:	460d      	mov	r5, r1
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a2cc:	2805      	cmp	r0, #5
 800a2ce:	bf18      	it	ne
 800a2d0:	2801      	cmpne	r0, #1
 800a2d2:	d001      	beq.n	800a2d8 <HAL_SDRAM_SendCommand+0x1c>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800a2d4:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a2d6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a2d8:	2302      	movs	r3, #2
 800a2da:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a2de:	6820      	ldr	r0, [r4, #0]
 800a2e0:	f000 fe52 	bl	800af88 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a2e4:	682b      	ldr	r3, [r5, #0]
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d004      	beq.n	800a2f4 <HAL_SDRAM_SendCommand+0x38>
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	e7f0      	b.n	800a2d6 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a2f4:	2305      	movs	r3, #5
 800a2f6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	e7eb      	b.n	800a2d6 <HAL_SDRAM_SendCommand+0x1a>

0800a2fe <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a2fe:	b510      	push	{r4, lr}
 800a300:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a302:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800a306:	b2d8      	uxtb	r0, r3
 800a308:	2802      	cmp	r0, #2
 800a30a:	d005      	beq.n	800a318 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a30c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b01      	cmp	r3, #1
 800a314:	d001      	beq.n	800a31a <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800a316:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800a318:	bd10      	pop	{r4, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a31a:	2302      	movs	r3, #2
 800a31c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a320:	6820      	ldr	r0, [r4, #0]
 800a322:	f000 fe49 	bl	800afb8 <FMC_SDRAM_ProgramRefreshRate>
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a326:	2301      	movs	r3, #1
 800a328:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800a32c:	2000      	movs	r0, #0
 800a32e:	e7f3      	b.n	800a318 <HAL_SDRAM_ProgramRefreshRate+0x1a>

0800a330 <SPI_AbortTransfer>:
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a330:	6802      	ldr	r2, [r0, #0]
 800a332:	6813      	ldr	r3, [r2, #0]
 800a334:	f023 0301 	bic.w	r3, r3, #1
 800a338:	6013      	str	r3, [r2, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a33a:	6802      	ldr	r2, [r0, #0]
 800a33c:	6911      	ldr	r1, [r2, #16]
 800a33e:	4b18      	ldr	r3, [pc, #96]	; (800a3a0 <SPI_AbortTransfer+0x70>)
 800a340:	400b      	ands	r3, r1
 800a342:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a344:	6802      	ldr	r2, [r0, #0]
 800a346:	6993      	ldr	r3, [r2, #24]
 800a348:	f043 0308 	orr.w	r3, r3, #8
 800a34c:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a34e:	6802      	ldr	r2, [r0, #0]
 800a350:	6993      	ldr	r3, [r2, #24]
 800a352:	f043 0310 	orr.w	r3, r3, #16
 800a356:	6193      	str	r3, [r2, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a358:	6802      	ldr	r2, [r0, #0]
 800a35a:	6893      	ldr	r3, [r2, #8]
 800a35c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a360:	6093      	str	r3, [r2, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a362:	6802      	ldr	r2, [r0, #0]
 800a364:	6993      	ldr	r3, [r2, #24]
 800a366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a36a:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a36c:	6802      	ldr	r2, [r0, #0]
 800a36e:	6993      	ldr	r3, [r2, #24]
 800a370:	f043 0320 	orr.w	r3, r3, #32
 800a374:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a376:	6802      	ldr	r2, [r0, #0]
 800a378:	6993      	ldr	r3, [r2, #24]
 800a37a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a37e:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a380:	6802      	ldr	r2, [r0, #0]
 800a382:	6993      	ldr	r3, [r2, #24]
 800a384:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a388:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a38a:	6802      	ldr	r2, [r0, #0]
 800a38c:	6993      	ldr	r3, [r2, #24]
 800a38e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a392:	6193      	str	r3, [r2, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800a394:	2300      	movs	r3, #0
 800a396:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a39a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800a39e:	4770      	bx	lr
 800a3a0:	fffffc90 	.word	0xfffffc90

0800a3a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a3a4:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800a3a6:	6802      	ldr	r2, [r0, #0]
 800a3a8:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a3aa:	6991      	ldr	r1, [r2, #24]
 800a3ac:	f041 0108 	orr.w	r1, r1, #8
 800a3b0:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a3b2:	6801      	ldr	r1, [r0, #0]
 800a3b4:	698a      	ldr	r2, [r1, #24]
 800a3b6:	f042 0210 	orr.w	r2, r2, #16
 800a3ba:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a3bc:	6801      	ldr	r1, [r0, #0]
 800a3be:	680a      	ldr	r2, [r1, #0]
 800a3c0:	f022 0201 	bic.w	r2, r2, #1
 800a3c4:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a3c6:	6801      	ldr	r1, [r0, #0]
 800a3c8:	690c      	ldr	r4, [r1, #16]
 800a3ca:	4a29      	ldr	r2, [pc, #164]	; (800a470 <SPI_CloseTransfer+0xcc>)
 800a3cc:	4022      	ands	r2, r4
 800a3ce:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a3d0:	6801      	ldr	r1, [r0, #0]
 800a3d2:	688a      	ldr	r2, [r1, #8]
 800a3d4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a3d8:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a3da:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a3de:	b2d2      	uxtb	r2, r2
 800a3e0:	2a04      	cmp	r2, #4
 800a3e2:	d00d      	beq.n	800a400 <SPI_CloseTransfer+0x5c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a3e4:	f013 0f20 	tst.w	r3, #32
 800a3e8:	d00a      	beq.n	800a400 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a3ea:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a3ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a3f2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a3f6:	6801      	ldr	r1, [r0, #0]
 800a3f8:	698a      	ldr	r2, [r1, #24]
 800a3fa:	f042 0220 	orr.w	r2, r2, #32
 800a3fe:	618a      	str	r2, [r1, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a400:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800a404:	b2d2      	uxtb	r2, r2
 800a406:	2a03      	cmp	r2, #3
 800a408:	d00d      	beq.n	800a426 <SPI_CloseTransfer+0x82>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a40a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a40e:	d00a      	beq.n	800a426 <SPI_CloseTransfer+0x82>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a410:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a414:	f042 0204 	orr.w	r2, r2, #4
 800a418:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a41c:	6801      	ldr	r1, [r0, #0]
 800a41e:	698a      	ldr	r2, [r1, #24]
 800a420:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a424:	618a      	str	r2, [r1, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a426:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a42a:	d00a      	beq.n	800a442 <SPI_CloseTransfer+0x9e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a42c:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800a430:	f042 0201 	orr.w	r2, r2, #1
 800a434:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a438:	6801      	ldr	r1, [r0, #0]
 800a43a:	698a      	ldr	r2, [r1, #24]
 800a43c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a440:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a442:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a446:	d00a      	beq.n	800a45e <SPI_CloseTransfer+0xba>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a448:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800a44c:	f043 0308 	orr.w	r3, r3, #8
 800a450:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a454:	6802      	ldr	r2, [r0, #0]
 800a456:	6993      	ldr	r3, [r2, #24]
 800a458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a45c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a45e:	2300      	movs	r3, #0
 800a460:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a464:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800a468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a46c:	4770      	bx	lr
 800a46e:	bf00      	nop
 800a470:	fffffc90 	.word	0xfffffc90

0800a474 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a474:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800a476:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a478:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a47a:	3008      	adds	r0, #8
 800a47c:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 800a47e:	fb03 0000 	mla	r0, r3, r0, r0
 800a482:	4770      	bx	lr

0800a484 <HAL_SPI_Init>:
  if (hspi == NULL)
 800a484:	2800      	cmp	r0, #0
 800a486:	f000 80b7 	beq.w	800a5f8 <HAL_SPI_Init+0x174>
{
 800a48a:	b570      	push	{r4, r5, r6, lr}
 800a48c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a48e:	2300      	movs	r3, #0
 800a490:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a492:	6805      	ldr	r5, [r0, #0]
 800a494:	4b5c      	ldr	r3, [pc, #368]	; (800a608 <HAL_SPI_Init+0x184>)
 800a496:	4e5d      	ldr	r6, [pc, #372]	; (800a60c <HAL_SPI_Init+0x188>)
 800a498:	429d      	cmp	r5, r3
 800a49a:	bf18      	it	ne
 800a49c:	42b5      	cmpne	r5, r6
 800a49e:	bf14      	ite	ne
 800a4a0:	2601      	movne	r6, #1
 800a4a2:	2600      	moveq	r6, #0
 800a4a4:	d007      	beq.n	800a4b6 <HAL_SPI_Init+0x32>
 800a4a6:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 800a4aa:	429d      	cmp	r5, r3
 800a4ac:	d003      	beq.n	800a4b6 <HAL_SPI_Init+0x32>
 800a4ae:	68c3      	ldr	r3, [r0, #12]
 800a4b0:	2b0f      	cmp	r3, #15
 800a4b2:	f200 80a3 	bhi.w	800a5fc <HAL_SPI_Init+0x178>
  packet_length = SPI_GetPacketSize(hspi);
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	f7ff ffdc 	bl	800a474 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a4bc:	b12e      	cbz	r6, 800a4ca <HAL_SPI_Init+0x46>
 800a4be:	4b54      	ldr	r3, [pc, #336]	; (800a610 <HAL_SPI_Init+0x18c>)
 800a4c0:	429d      	cmp	r5, r3
 800a4c2:	d002      	beq.n	800a4ca <HAL_SPI_Init+0x46>
 800a4c4:	2808      	cmp	r0, #8
 800a4c6:	f200 809b 	bhi.w	800a600 <HAL_SPI_Init+0x17c>
 800a4ca:	4a4f      	ldr	r2, [pc, #316]	; (800a608 <HAL_SPI_Init+0x184>)
 800a4cc:	4b4f      	ldr	r3, [pc, #316]	; (800a60c <HAL_SPI_Init+0x188>)
 800a4ce:	429d      	cmp	r5, r3
 800a4d0:	bf18      	it	ne
 800a4d2:	4295      	cmpne	r5, r2
 800a4d4:	d003      	beq.n	800a4de <HAL_SPI_Init+0x5a>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a4d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4da:	429d      	cmp	r5, r3
 800a4dc:	d102      	bne.n	800a4e4 <HAL_SPI_Init+0x60>
 800a4de:	2810      	cmp	r0, #16
 800a4e0:	f200 8090 	bhi.w	800a604 <HAL_SPI_Init+0x180>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800a4e4:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 800a4e8:	b1f3      	cbz	r3, 800a528 <HAL_SPI_Init+0xa4>
  hspi->State = HAL_SPI_STATE_BUSY;
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800a4f0:	6822      	ldr	r2, [r4, #0]
 800a4f2:	6813      	ldr	r3, [r2, #0]
 800a4f4:	f023 0301 	bic.w	r3, r3, #1
 800a4f8:	6013      	str	r3, [r2, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	689a      	ldr	r2, [r3, #8]
 800a4fe:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a502:	69a1      	ldr	r1, [r4, #24]
 800a504:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800a508:	d014      	beq.n	800a534 <HAL_SPI_Init+0xb0>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a50a:	6863      	ldr	r3, [r4, #4]
 800a50c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800a510:	d023      	beq.n	800a55a <HAL_SPI_Init+0xd6>
 800a512:	68e3      	ldr	r3, [r4, #12]
 800a514:	2b06      	cmp	r3, #6
 800a516:	d920      	bls.n	800a55a <HAL_SPI_Init+0xd6>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a518:	6821      	ldr	r1, [r4, #0]
 800a51a:	680b      	ldr	r3, [r1, #0]
 800a51c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a520:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800a522:	4303      	orrs	r3, r0
 800a524:	600b      	str	r3, [r1, #0]
 800a526:	e01d      	b.n	800a564 <HAL_SPI_Init+0xe0>
    hspi->Lock = HAL_UNLOCKED;
 800a528:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800a52c:	4620      	mov	r0, r4
 800a52e:	f7f8 fb33 	bl	8002b98 <HAL_SPI_MspInit>
 800a532:	e7da      	b.n	800a4ea <HAL_SPI_Init+0x66>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a534:	6861      	ldr	r1, [r4, #4]
 800a536:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800a53a:	d006      	beq.n	800a54a <HAL_SPI_Init+0xc6>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a53c:	2900      	cmp	r1, #0
 800a53e:	d1e4      	bne.n	800a50a <HAL_SPI_Init+0x86>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a540:	6ba1      	ldr	r1, [r4, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a542:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800a546:	d1e0      	bne.n	800a50a <HAL_SPI_Init+0x86>
 800a548:	e002      	b.n	800a550 <HAL_SPI_Init+0xcc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a54a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d1f5      	bne.n	800a53c <HAL_SPI_Init+0xb8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a550:	6819      	ldr	r1, [r3, #0]
 800a552:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800a556:	6019      	str	r1, [r3, #0]
 800a558:	e7d7      	b.n	800a50a <HAL_SPI_Init+0x86>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a55a:	6821      	ldr	r1, [r4, #0]
 800a55c:	680b      	ldr	r3, [r1, #0]
 800a55e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a562:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a564:	69e3      	ldr	r3, [r4, #28]
 800a566:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a568:	430b      	orrs	r3, r1
 800a56a:	4313      	orrs	r3, r2
 800a56c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a56e:	4313      	orrs	r3, r2
 800a570:	68e1      	ldr	r1, [r4, #12]
 800a572:	6822      	ldr	r2, [r4, #0]
 800a574:	430b      	orrs	r3, r1
 800a576:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a578:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a57a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a57c:	4313      	orrs	r3, r2
 800a57e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a580:	4313      	orrs	r3, r2
 800a582:	69a2      	ldr	r2, [r4, #24]
 800a584:	4313      	orrs	r3, r2
 800a586:	6922      	ldr	r2, [r4, #16]
 800a588:	4313      	orrs	r3, r2
 800a58a:	6962      	ldr	r2, [r4, #20]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	6a22      	ldr	r2, [r4, #32]
 800a590:	4313      	orrs	r3, r2
 800a592:	6862      	ldr	r2, [r4, #4]
 800a594:	4313      	orrs	r3, r2
 800a596:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800a598:	4313      	orrs	r3, r2
 800a59a:	68a2      	ldr	r2, [r4, #8]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a5a4:	6822      	ldr	r2, [r4, #0]
 800a5a6:	430b      	orrs	r3, r1
 800a5a8:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a5aa:	6863      	ldr	r3, [r4, #4]
 800a5ac:	b96b      	cbnz	r3, 800a5ca <HAL_SPI_Init+0x146>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a5ae:	6822      	ldr	r2, [r4, #0]
 800a5b0:	6893      	ldr	r3, [r2, #8]
 800a5b2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800a5b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a5ba:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a5bc:	6822      	ldr	r2, [r4, #0]
 800a5be:	6893      	ldr	r3, [r2, #8]
 800a5c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a5c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a5c8:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a5ca:	6822      	ldr	r2, [r4, #0]
 800a5cc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800a5ce:	f023 0301 	bic.w	r3, r3, #1
 800a5d2:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a5d4:	6863      	ldr	r3, [r4, #4]
 800a5d6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800a5da:	d006      	beq.n	800a5ea <HAL_SPI_Init+0x166>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a5dc:	6822      	ldr	r2, [r4, #0]
 800a5de:	68d3      	ldr	r3, [r2, #12]
 800a5e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a5e4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a5e6:	430b      	orrs	r3, r1
 800a5e8:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a5ea:	2000      	movs	r0, #0
 800a5ec:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800a5f6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800a5f8:	2001      	movs	r0, #1
}
 800a5fa:	4770      	bx	lr
    return HAL_ERROR;
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	e7fa      	b.n	800a5f6 <HAL_SPI_Init+0x172>
    return HAL_ERROR;
 800a600:	2001      	movs	r0, #1
 800a602:	e7f8      	b.n	800a5f6 <HAL_SPI_Init+0x172>
 800a604:	2001      	movs	r0, #1
 800a606:	e7f6      	b.n	800a5f6 <HAL_SPI_Init+0x172>
 800a608:	40013000 	.word	0x40013000
 800a60c:	40003800 	.word	0x40003800
 800a610:	40003c00 	.word	0x40003c00

0800a614 <HAL_SPI_Receive_DMA>:
{
 800a614:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hspi);
 800a616:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	f000 80d4 	beq.w	800a7c8 <HAL_SPI_Receive_DMA+0x1b4>
 800a620:	4604      	mov	r4, r0
 800a622:	4616      	mov	r6, r2
 800a624:	2301      	movs	r3, #1
 800a626:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800a62a:	f890 5081 	ldrb.w	r5, [r0, #129]	; 0x81
 800a62e:	b2ed      	uxtb	r5, r5
 800a630:	429d      	cmp	r5, r3
 800a632:	d17d      	bne.n	800a730 <HAL_SPI_Receive_DMA+0x11c>
  if ((pData == NULL) || (Size == 0UL))
 800a634:	2a00      	cmp	r2, #0
 800a636:	bf18      	it	ne
 800a638:	2900      	cmpne	r1, #0
 800a63a:	d07f      	beq.n	800a73c <HAL_SPI_Receive_DMA+0x128>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a63c:	2304      	movs	r3, #4
 800a63e:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a642:	2300      	movs	r3, #0
 800a644:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a648:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800a64a:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
  hspi->RxXferCount = Size;
 800a64e:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800a652:	6703      	str	r3, [r0, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a654:	6743      	str	r3, [r0, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a656:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a65a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a65e:	6883      	ldr	r3, [r0, #8]
 800a660:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a664:	d06e      	beq.n	800a744 <HAL_SPI_Receive_DMA+0x130>
    SPI_2LINES_RX(hspi);
 800a666:	6802      	ldr	r2, [r0, #0]
 800a668:	68d3      	ldr	r3, [r2, #12]
 800a66a:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a66e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a672:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a674:	68e3      	ldr	r3, [r4, #12]
 800a676:	2b0f      	cmp	r3, #15
 800a678:	d904      	bls.n	800a684 <HAL_SPI_Receive_DMA+0x70>
 800a67a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a67c:	6992      	ldr	r2, [r2, #24]
 800a67e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a682:	d165      	bne.n	800a750 <HAL_SPI_Receive_DMA+0x13c>
 800a684:	2b07      	cmp	r3, #7
 800a686:	d907      	bls.n	800a698 <HAL_SPI_Receive_DMA+0x84>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a688:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a68a:	699b      	ldr	r3, [r3, #24]
 800a68c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a690:	bf18      	it	ne
 800a692:	f5b3 4f80 	cmpne.w	r3, #16384	; 0x4000
 800a696:	d15b      	bne.n	800a750 <HAL_SPI_Receive_DMA+0x13c>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a698:	6822      	ldr	r2, [r4, #0]
 800a69a:	6893      	ldr	r3, [r2, #8]
 800a69c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a6a0:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a6a2:	68e3      	ldr	r3, [r4, #12]
 800a6a4:	2b07      	cmp	r3, #7
 800a6a6:	d867      	bhi.n	800a778 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a6a8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a6aa:	699a      	ldr	r2, [r3, #24]
 800a6ac:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a6b0:	d052      	beq.n	800a758 <HAL_SPI_Receive_DMA+0x144>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6b8:	d056      	beq.n	800a768 <HAL_SPI_Receive_DMA+0x154>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a6ba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a6bc:	4a43      	ldr	r2, [pc, #268]	; (800a7cc <HAL_SPI_Receive_DMA+0x1b8>)
 800a6be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a6c0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a6c2:	4a43      	ldr	r2, [pc, #268]	; (800a7d0 <HAL_SPI_Receive_DMA+0x1bc>)
 800a6c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a6c6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a6c8:	4a42      	ldr	r2, [pc, #264]	; (800a7d4 <HAL_SPI_Receive_DMA+0x1c0>)
 800a6ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800a6cc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a6d2:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 800a6d4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6dc:	3130      	adds	r1, #48	; 0x30
 800a6de:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a6e0:	f7f9 feae 	bl	8004440 <HAL_DMA_Start_IT>
 800a6e4:	4601      	mov	r1, r0
 800a6e6:	2800      	cmp	r0, #0
 800a6e8:	d155      	bne.n	800a796 <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a6ea:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a6ec:	69db      	ldr	r3, [r3, #28]
 800a6ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6f2:	d05d      	beq.n	800a7b0 <HAL_SPI_Receive_DMA+0x19c>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a6f4:	6820      	ldr	r0, [r4, #0]
 800a6f6:	6842      	ldr	r2, [r0, #4]
 800a6f8:	4b37      	ldr	r3, [pc, #220]	; (800a7d8 <HAL_SPI_Receive_DMA+0x1c4>)
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	4333      	orrs	r3, r6
 800a6fe:	6043      	str	r3, [r0, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a700:	6822      	ldr	r2, [r4, #0]
 800a702:	6893      	ldr	r3, [r2, #8]
 800a704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a708:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800a70a:	6822      	ldr	r2, [r4, #0]
 800a70c:	6913      	ldr	r3, [r2, #16]
 800a70e:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800a712:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800a714:	6822      	ldr	r2, [r4, #0]
 800a716:	6813      	ldr	r3, [r2, #0]
 800a718:	f043 0301 	orr.w	r3, r3, #1
 800a71c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a71e:	6863      	ldr	r3, [r4, #4]
 800a720:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a724:	d04a      	beq.n	800a7bc <HAL_SPI_Receive_DMA+0x1a8>
  __HAL_UNLOCK(hspi);
 800a726:	2300      	movs	r3, #0
 800a728:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800a72c:	460d      	mov	r5, r1
 800a72e:	e003      	b.n	800a738 <HAL_SPI_Receive_DMA+0x124>
    __HAL_UNLOCK(hspi);
 800a730:	2300      	movs	r3, #0
 800a732:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800a736:	2502      	movs	r5, #2
}
 800a738:	4628      	mov	r0, r5
 800a73a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 800a73c:	2300      	movs	r3, #0
 800a73e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    return errorcode;
 800a742:	e7f9      	b.n	800a738 <HAL_SPI_Receive_DMA+0x124>
    SPI_1LINE_RX(hspi);
 800a744:	6802      	ldr	r2, [r0, #0]
 800a746:	6813      	ldr	r3, [r2, #0]
 800a748:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a74c:	6013      	str	r3, [r2, #0]
 800a74e:	e791      	b.n	800a674 <HAL_SPI_Receive_DMA+0x60>
    __HAL_UNLOCK(hspi);
 800a750:	2300      	movs	r3, #0
 800a752:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800a756:	e7ef      	b.n	800a738 <HAL_SPI_Receive_DMA+0x124>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a758:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a75c:	b292      	uxth	r2, r2
 800a75e:	3201      	adds	r2, #1
 800a760:	0852      	lsrs	r2, r2, #1
 800a762:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800a766:	e7a4      	b.n	800a6b2 <HAL_SPI_Receive_DMA+0x9e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a768:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	3303      	adds	r3, #3
 800a770:	089b      	lsrs	r3, r3, #2
 800a772:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800a776:	e7a0      	b.n	800a6ba <HAL_SPI_Receive_DMA+0xa6>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a778:	2b0f      	cmp	r3, #15
 800a77a:	d89e      	bhi.n	800a6ba <HAL_SPI_Receive_DMA+0xa6>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a77c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a784:	d199      	bne.n	800a6ba <HAL_SPI_Receive_DMA+0xa6>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a786:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	3301      	adds	r3, #1
 800a78e:	085b      	lsrs	r3, r3, #1
 800a790:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800a794:	e791      	b.n	800a6ba <HAL_SPI_Receive_DMA+0xa6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a796:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a79a:	f043 0310 	orr.w	r3, r3, #16
 800a79e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_UNLOCK(hspi);
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hspi->State = HAL_SPI_STATE_READY;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return errorcode;
 800a7ae:	e7c3      	b.n	800a738 <HAL_SPI_Receive_DMA+0x124>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a7b0:	6822      	ldr	r2, [r4, #0]
 800a7b2:	6850      	ldr	r0, [r2, #4]
 800a7b4:	4b08      	ldr	r3, [pc, #32]	; (800a7d8 <HAL_SPI_Receive_DMA+0x1c4>)
 800a7b6:	4003      	ands	r3, r0
 800a7b8:	6053      	str	r3, [r2, #4]
 800a7ba:	e7a1      	b.n	800a700 <HAL_SPI_Receive_DMA+0xec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a7bc:	6822      	ldr	r2, [r4, #0]
 800a7be:	6813      	ldr	r3, [r2, #0]
 800a7c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a7c4:	6013      	str	r3, [r2, #0]
 800a7c6:	e7ae      	b.n	800a726 <HAL_SPI_Receive_DMA+0x112>
  __HAL_LOCK(hspi);
 800a7c8:	2502      	movs	r5, #2
 800a7ca:	e7b5      	b.n	800a738 <HAL_SPI_Receive_DMA+0x124>
 800a7cc:	0800abcb 	.word	0x0800abcb
 800a7d0:	0800ab77 	.word	0x0800ab77
 800a7d4:	0800abe1 	.word	0x0800abe1
 800a7d8:	ffff0000 	.word	0xffff0000

0800a7dc <HAL_SPI_TransmitReceive_DMA>:
{
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800a7e0:	f890 0080 	ldrb.w	r0, [r0, #128]	; 0x80
 800a7e4:	2801      	cmp	r0, #1
 800a7e6:	f000 8115 	beq.w	800aa14 <HAL_SPI_TransmitReceive_DMA+0x238>
 800a7ea:	461e      	mov	r6, r3
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800a7f2:	f894 5081 	ldrb.w	r5, [r4, #129]	; 0x81
 800a7f6:	b2ed      	uxtb	r5, r5
 800a7f8:	429d      	cmp	r5, r3
 800a7fa:	d16b      	bne.n	800a8d4 <HAL_SPI_TransmitReceive_DMA+0xf8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800a7fc:	2a00      	cmp	r2, #0
 800a7fe:	bf18      	it	ne
 800a800:	2900      	cmpne	r1, #0
 800a802:	d06c      	beq.n	800a8de <HAL_SPI_TransmitReceive_DMA+0x102>
 800a804:	2e00      	cmp	r6, #0
 800a806:	d06a      	beq.n	800a8de <HAL_SPI_TransmitReceive_DMA+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800a808:	2305      	movs	r3, #5
 800a80a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a80e:	2300      	movs	r3, #0
 800a810:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a814:	65e1      	str	r1, [r4, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a816:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a81a:	f8a4 6062 	strh.w	r6, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a81e:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800a820:	f8a4 6068 	strh.w	r6, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 800a824:	f8a4 606a 	strh.w	r6, [r4, #106]	; 0x6a
  hspi->RxISR       = NULL;
 800a828:	6723      	str	r3, [r4, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a82a:	6763      	str	r3, [r4, #116]	; 0x74
  SPI_2LINES(hspi);
 800a82c:	6822      	ldr	r2, [r4, #0]
 800a82e:	68d3      	ldr	r3, [r2, #12]
 800a830:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a834:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a836:	6822      	ldr	r2, [r4, #0]
 800a838:	6893      	ldr	r3, [r2, #8]
 800a83a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a83e:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800a840:	68e3      	ldr	r3, [r4, #12]
 800a842:	2b0f      	cmp	r3, #15
 800a844:	d904      	bls.n	800a850 <HAL_SPI_TransmitReceive_DMA+0x74>
 800a846:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a848:	6992      	ldr	r2, [r2, #24]
 800a84a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800a84e:	d14b      	bne.n	800a8e8 <HAL_SPI_TransmitReceive_DMA+0x10c>
 800a850:	2b07      	cmp	r3, #7
 800a852:	d907      	bls.n	800a864 <HAL_SPI_TransmitReceive_DMA+0x88>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800a854:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800a856:	6992      	ldr	r2, [r2, #24]
 800a858:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a85c:	bf18      	it	ne
 800a85e:	f5b2 4f80 	cmpne.w	r2, #16384	; 0x4000
 800a862:	d141      	bne.n	800a8e8 <HAL_SPI_TransmitReceive_DMA+0x10c>
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800a864:	2b07      	cmp	r3, #7
 800a866:	d863      	bhi.n	800a930 <HAL_SPI_TransmitReceive_DMA+0x154>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a868:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a86a:	699a      	ldr	r2, [r3, #24]
 800a86c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a870:	d03e      	beq.n	800a8f0 <HAL_SPI_TransmitReceive_DMA+0x114>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a872:	699b      	ldr	r3, [r3, #24]
 800a874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a878:	d042      	beq.n	800a900 <HAL_SPI_TransmitReceive_DMA+0x124>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a87a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a87c:	699a      	ldr	r2, [r3, #24]
 800a87e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800a882:	d045      	beq.n	800a910 <HAL_SPI_TransmitReceive_DMA+0x134>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a884:	699b      	ldr	r3, [r3, #24]
 800a886:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a88a:	d049      	beq.n	800a920 <HAL_SPI_TransmitReceive_DMA+0x144>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a88c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a88e:	4a62      	ldr	r2, [pc, #392]	; (800aa18 <HAL_SPI_TransmitReceive_DMA+0x23c>)
 800a890:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a892:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a894:	4a61      	ldr	r2, [pc, #388]	; (800aa1c <HAL_SPI_TransmitReceive_DMA+0x240>)
 800a896:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a898:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a89a:	4a61      	ldr	r2, [pc, #388]	; (800aa20 <HAL_SPI_TransmitReceive_DMA+0x244>)
 800a89c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800a89e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a8a4:	6821      	ldr	r1, [r4, #0]
                                 hspi->RxXferCount))
 800a8a6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8ae:	3130      	adds	r1, #48	; 0x30
 800a8b0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800a8b2:	f7f9 fdc5 	bl	8004440 <HAL_DMA_Start_IT>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d056      	beq.n	800a968 <HAL_SPI_TransmitReceive_DMA+0x18c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a8ba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a8be:	f043 0310 	orr.w	r3, r3, #16
 800a8c2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_UNLOCK(hspi);
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hspi->State = HAL_SPI_STATE_READY;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return errorcode;
 800a8d2:	e007      	b.n	800a8e4 <HAL_SPI_TransmitReceive_DMA+0x108>
    __HAL_UNLOCK(hspi);
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800a8da:	2502      	movs	r5, #2
 800a8dc:	e002      	b.n	800a8e4 <HAL_SPI_TransmitReceive_DMA+0x108>
    __HAL_UNLOCK(hspi);
 800a8de:	2300      	movs	r3, #0
 800a8e0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800a8e4:	4628      	mov	r0, r5
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hspi);
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    return errorcode;
 800a8ee:	e7f9      	b.n	800a8e4 <HAL_SPI_TransmitReceive_DMA+0x108>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a8f0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800a8f4:	b292      	uxth	r2, r2
 800a8f6:	3201      	adds	r2, #1
 800a8f8:	0852      	lsrs	r2, r2, #1
 800a8fa:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
 800a8fe:	e7b8      	b.n	800a872 <HAL_SPI_TransmitReceive_DMA+0x96>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800a900:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a904:	b29b      	uxth	r3, r3
 800a906:	3303      	adds	r3, #3
 800a908:	089b      	lsrs	r3, r3, #2
 800a90a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800a90e:	e7b4      	b.n	800a87a <HAL_SPI_TransmitReceive_DMA+0x9e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a910:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800a914:	b292      	uxth	r2, r2
 800a916:	3201      	adds	r2, #1
 800a918:	0852      	lsrs	r2, r2, #1
 800a91a:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800a91e:	e7b1      	b.n	800a884 <HAL_SPI_TransmitReceive_DMA+0xa8>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800a920:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a924:	b29b      	uxth	r3, r3
 800a926:	3303      	adds	r3, #3
 800a928:	089b      	lsrs	r3, r3, #2
 800a92a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800a92e:	e7ad      	b.n	800a88c <HAL_SPI_TransmitReceive_DMA+0xb0>
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800a930:	2b0f      	cmp	r3, #15
 800a932:	d8ab      	bhi.n	800a88c <HAL_SPI_TransmitReceive_DMA+0xb0>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a934:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a93c:	d00c      	beq.n	800a958 <HAL_SPI_TransmitReceive_DMA+0x17c>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800a93e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a946:	d1a1      	bne.n	800a88c <HAL_SPI_TransmitReceive_DMA+0xb0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800a948:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	3301      	adds	r3, #1
 800a950:	085b      	lsrs	r3, r3, #1
 800a952:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800a956:	e799      	b.n	800a88c <HAL_SPI_TransmitReceive_DMA+0xb0>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800a958:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	3301      	adds	r3, #1
 800a960:	085b      	lsrs	r3, r3, #1
 800a962:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 800a966:	e7ea      	b.n	800a93e <HAL_SPI_TransmitReceive_DMA+0x162>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800a968:	6822      	ldr	r2, [r4, #0]
 800a96a:	6893      	ldr	r3, [r2, #8]
 800a96c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a970:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a972:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a974:	2300      	movs	r3, #0
 800a976:	6413      	str	r3, [r2, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a978:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a97a:	63d3      	str	r3, [r2, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a97c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 800a97e:	6513      	str	r3, [r2, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800a980:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a982:	4a27      	ldr	r2, [pc, #156]	; (800aa20 <HAL_SPI_TransmitReceive_DMA+0x244>)
 800a984:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a986:	6822      	ldr	r2, [r4, #0]
                                 hspi->TxXferCount))
 800a988:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	3220      	adds	r2, #32
 800a990:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a992:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800a994:	f7f9 fd54 	bl	8004440 <HAL_DMA_Start_IT>
 800a998:	4601      	mov	r1, r0
 800a99a:	bb10      	cbnz	r0, 800a9e2 <HAL_SPI_TransmitReceive_DMA+0x206>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800a99c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a99e:	69db      	ldr	r3, [r3, #28]
 800a9a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9a4:	d02a      	beq.n	800a9fc <HAL_SPI_TransmitReceive_DMA+0x220>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a9a6:	6822      	ldr	r2, [r4, #0]
 800a9a8:	6850      	ldr	r0, [r2, #4]
 800a9aa:	4b1e      	ldr	r3, [pc, #120]	; (800aa24 <HAL_SPI_TransmitReceive_DMA+0x248>)
 800a9ac:	4003      	ands	r3, r0
 800a9ae:	4333      	orrs	r3, r6
 800a9b0:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800a9b2:	6822      	ldr	r2, [r4, #0]
 800a9b4:	6893      	ldr	r3, [r2, #8]
 800a9b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9ba:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800a9bc:	6822      	ldr	r2, [r4, #0]
 800a9be:	6913      	ldr	r3, [r2, #16]
 800a9c0:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800a9c4:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800a9c6:	6822      	ldr	r2, [r4, #0]
 800a9c8:	6813      	ldr	r3, [r2, #0]
 800a9ca:	f043 0301 	orr.w	r3, r3, #1
 800a9ce:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9d0:	6863      	ldr	r3, [r4, #4]
 800a9d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9d6:	d017      	beq.n	800aa08 <HAL_SPI_TransmitReceive_DMA+0x22c>
  __HAL_UNLOCK(hspi);
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800a9de:	460d      	mov	r5, r1
 800a9e0:	e780      	b.n	800a8e4 <HAL_SPI_TransmitReceive_DMA+0x108>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a9e2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a9e6:	f043 0310 	orr.w	r3, r3, #16
 800a9ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_UNLOCK(hspi);
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    hspi->State = HAL_SPI_STATE_READY;
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    return errorcode;
 800a9fa:	e773      	b.n	800a8e4 <HAL_SPI_TransmitReceive_DMA+0x108>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800a9fc:	6822      	ldr	r2, [r4, #0]
 800a9fe:	6850      	ldr	r0, [r2, #4]
 800aa00:	4b08      	ldr	r3, [pc, #32]	; (800aa24 <HAL_SPI_TransmitReceive_DMA+0x248>)
 800aa02:	4003      	ands	r3, r0
 800aa04:	6053      	str	r3, [r2, #4]
 800aa06:	e7d4      	b.n	800a9b2 <HAL_SPI_TransmitReceive_DMA+0x1d6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800aa08:	6822      	ldr	r2, [r4, #0]
 800aa0a:	6813      	ldr	r3, [r2, #0]
 800aa0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa10:	6013      	str	r3, [r2, #0]
 800aa12:	e7e1      	b.n	800a9d8 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  __HAL_LOCK(hspi);
 800aa14:	2502      	movs	r5, #2
 800aa16:	e765      	b.n	800a8e4 <HAL_SPI_TransmitReceive_DMA+0x108>
 800aa18:	0800abd5 	.word	0x0800abd5
 800aa1c:	0800aba1 	.word	0x0800aba1
 800aa20:	0800abe1 	.word	0x0800abe1
 800aa24:	ffff0000 	.word	0xffff0000

0800aa28 <HAL_SPI_Abort>:
  __HAL_LOCK(hspi);
 800aa28:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	f000 809a 	beq.w	800ab66 <HAL_SPI_Abort+0x13e>
{
 800aa32:	b510      	push	{r4, lr}
 800aa34:	b082      	sub	sp, #8
 800aa36:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800aa38:	2301      	movs	r3, #1
 800aa3a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_ABORT;
 800aa3e:	2307      	movs	r3, #7
 800aa40:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800aa44:	4b49      	ldr	r3, [pc, #292]	; (800ab6c <HAL_SPI_Abort+0x144>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	4a49      	ldr	r2, [pc, #292]	; (800ab70 <HAL_SPI_Abort+0x148>)
 800aa4a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa4e:	0a5b      	lsrs	r3, r3, #9
 800aa50:	2264      	movs	r2, #100	; 0x64
 800aa52:	fb02 f303 	mul.w	r3, r2, r3
 800aa56:	9301      	str	r3, [sp, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800aa58:	6803      	ldr	r3, [r0, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	f412 7f00 	tst.w	r2, #512	; 0x200
 800aa60:	d040      	beq.n	800aae4 <HAL_SPI_Abort+0xbc>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800aa62:	691a      	ldr	r2, [r3, #16]
 800aa64:	f022 0208 	bic.w	r2, r2, #8
 800aa68:	611a      	str	r2, [r3, #16]
      count--;
 800aa6a:	9b01      	ldr	r3, [sp, #4]
 800aa6c:	3b01      	subs	r3, #1
 800aa6e:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800aa70:	9b01      	ldr	r3, [sp, #4]
 800aa72:	b12b      	cbz	r3, 800aa80 <HAL_SPI_Abort+0x58>
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800aa74:	6823      	ldr	r3, [r4, #0]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	f013 0f08 	tst.w	r3, #8
 800aa7c:	d1f5      	bne.n	800aa6a <HAL_SPI_Abort+0x42>
 800aa7e:	e005      	b.n	800aa8c <HAL_SPI_Abort+0x64>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aa80:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aa84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa88:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800aa8c:	6822      	ldr	r2, [r4, #0]
 800aa8e:	6813      	ldr	r3, [r2, #0]
 800aa90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aa94:	6013      	str	r3, [r2, #0]
      count--;
 800aa96:	9b01      	ldr	r3, [sp, #4]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800aa9c:	9b01      	ldr	r3, [sp, #4]
 800aa9e:	b12b      	cbz	r3, 800aaac <HAL_SPI_Abort+0x84>
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800aaa0:	6823      	ldr	r3, [r4, #0]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f413 7f00 	tst.w	r3, #512	; 0x200
 800aaa8:	d1f5      	bne.n	800aa96 <HAL_SPI_Abort+0x6e>
 800aaaa:	e005      	b.n	800aab8 <HAL_SPI_Abort+0x90>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aaac:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aab0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aab4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aab8:	6822      	ldr	r2, [r4, #0]
 800aaba:	6993      	ldr	r3, [r2, #24]
 800aabc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800aac0:	6193      	str	r3, [r2, #24]
      count--;
 800aac2:	9b01      	ldr	r3, [sp, #4]
 800aac4:	3b01      	subs	r3, #1
 800aac6:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800aac8:	9b01      	ldr	r3, [sp, #4]
 800aaca:	b12b      	cbz	r3, 800aad8 <HAL_SPI_Abort+0xb0>
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800aacc:	6823      	ldr	r3, [r4, #0]
 800aace:	695b      	ldr	r3, [r3, #20]
 800aad0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800aad4:	d1f5      	bne.n	800aac2 <HAL_SPI_Abort+0x9a>
 800aad6:	e005      	b.n	800aae4 <HAL_SPI_Abort+0xbc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aad8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800aadc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aae0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800aae4:	6823      	ldr	r3, [r4, #0]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800aaec:	d007      	beq.n	800aafe <HAL_SPI_Abort+0xd6>
    if (hspi->hdmatx != NULL)
 800aaee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800aaf0:	b12b      	cbz	r3, 800aafe <HAL_SPI_Abort+0xd6>
      hspi->hdmatx->XferAbortCallback = NULL;
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800aaf6:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800aaf8:	f7f9 fdee 	bl	80046d8 <HAL_DMA_Abort>
 800aafc:	b9f8      	cbnz	r0, 800ab3e <HAL_SPI_Abort+0x116>
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800ab06:	d007      	beq.n	800ab18 <HAL_SPI_Abort+0xf0>
    if (hspi->hdmarx != NULL)
 800ab08:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ab0a:	b12b      	cbz	r3, 800ab18 <HAL_SPI_Abort+0xf0>
      hspi->hdmarx->XferAbortCallback = NULL;
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800ab10:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ab12:	f7f9 fde1 	bl	80046d8 <HAL_DMA_Abort>
 800ab16:	b9d8      	cbnz	r0, 800ab50 <HAL_SPI_Abort+0x128>
  SPI_AbortTransfer(hspi);
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f7ff fc09 	bl	800a330 <SPI_AbortTransfer>
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800ab1e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ab22:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ab26:	d11c      	bne.n	800ab62 <HAL_SPI_Abort+0x13a>
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab28:	2000      	movs	r0, #0
 800ab2a:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 800ab2e:	2300      	movs	r3, #0
 800ab30:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800ab34:	2301      	movs	r3, #1
 800ab36:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800ab3a:	b002      	add	sp, #8
 800ab3c:	bd10      	pop	{r4, pc}
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ab3e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ab40:	f7fa fc41 	bl	80053c6 <HAL_DMA_GetError>
 800ab44:	2820      	cmp	r0, #32
 800ab46:	d1da      	bne.n	800aafe <HAL_SPI_Abort+0xd6>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab48:	2340      	movs	r3, #64	; 0x40
 800ab4a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800ab4e:	e7d6      	b.n	800aafe <HAL_SPI_Abort+0xd6>
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ab50:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ab52:	f7fa fc38 	bl	80053c6 <HAL_DMA_GetError>
 800ab56:	2820      	cmp	r0, #32
 800ab58:	d1de      	bne.n	800ab18 <HAL_SPI_Abort+0xf0>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab5a:	2340      	movs	r3, #64	; 0x40
 800ab5c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800ab60:	e7da      	b.n	800ab18 <HAL_SPI_Abort+0xf0>
    errorcode = HAL_ERROR;
 800ab62:	2001      	movs	r0, #1
 800ab64:	e7e3      	b.n	800ab2e <HAL_SPI_Abort+0x106>
  __HAL_LOCK(hspi);
 800ab66:	2002      	movs	r0, #2
}
 800ab68:	4770      	bx	lr
 800ab6a:	bf00      	nop
 800ab6c:	20000af0 	.word	0x20000af0
 800ab70:	057619f1 	.word	0x057619f1

0800ab74 <HAL_SPI_TxCpltCallback>:
}
 800ab74:	4770      	bx	lr

0800ab76 <SPI_DMAReceiveCplt>:
{
 800ab76:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab78:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800ab7a:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	2b07      	cmp	r3, #7
 800ab82:	d009      	beq.n	800ab98 <SPI_DMAReceiveCplt+0x22>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ab84:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800ab86:	69db      	ldr	r3, [r3, #28]
 800ab88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab8c:	d005      	beq.n	800ab9a <SPI_DMAReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800ab8e:	6802      	ldr	r2, [r0, #0]
 800ab90:	6913      	ldr	r3, [r2, #16]
 800ab92:	f043 0308 	orr.w	r3, r3, #8
 800ab96:	6113      	str	r3, [r2, #16]
}
 800ab98:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800ab9a:	f00e f959 	bl	8018e50 <__HAL_SPI_RxCpltCallback_veneer>
 800ab9e:	e7fb      	b.n	800ab98 <SPI_DMAReceiveCplt+0x22>

0800aba0 <SPI_DMATransmitReceiveCplt>:
{
 800aba0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aba2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800aba4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b07      	cmp	r3, #7
 800abac:	d009      	beq.n	800abc2 <SPI_DMATransmitReceiveCplt+0x22>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800abae:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800abb0:	69db      	ldr	r3, [r3, #28]
 800abb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abb6:	d005      	beq.n	800abc4 <SPI_DMATransmitReceiveCplt+0x24>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800abb8:	6802      	ldr	r2, [r0, #0]
 800abba:	6913      	ldr	r3, [r2, #16]
 800abbc:	f043 0308 	orr.w	r3, r3, #8
 800abc0:	6113      	str	r3, [r2, #16]
}
 800abc2:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 800abc4:	f00e f974 	bl	8018eb0 <__HAL_SPI_TxRxCpltCallback_veneer>
 800abc8:	e7fb      	b.n	800abc2 <SPI_DMATransmitReceiveCplt+0x22>

0800abca <SPI_DMAHalfReceiveCplt>:
{
 800abca:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800abcc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800abce:	f00e f967 	bl	8018ea0 <__HAL_SPI_RxHalfCpltCallback_veneer>
}
 800abd2:	bd08      	pop	{r3, pc}

0800abd4 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800abd4:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800abd6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800abd8:	f00e f946 	bl	8018e68 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
 800abdc:	bd08      	pop	{r3, pc}

0800abde <HAL_SPI_ErrorCallback>:
}
 800abde:	4770      	bx	lr

0800abe0 <SPI_DMAError>:
{
 800abe0:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800abe2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800abe4:	f7fa fbef 	bl	80053c6 <HAL_DMA_GetError>
 800abe8:	2802      	cmp	r0, #2
 800abea:	d100      	bne.n	800abee <SPI_DMAError+0xe>
}
 800abec:	bd10      	pop	{r4, pc}
    SPI_CloseTransfer(hspi);
 800abee:	4620      	mov	r0, r4
 800abf0:	f7ff fbd8 	bl	800a3a4 <SPI_CloseTransfer>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800abf4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800abf8:	f043 0310 	orr.w	r3, r3, #16
 800abfc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800ac00:	2301      	movs	r3, #1
 800ac02:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800ac06:	4620      	mov	r0, r4
 800ac08:	f7ff ffe9 	bl	800abde <HAL_SPI_ErrorCallback>
}
 800ac0c:	e7ee      	b.n	800abec <SPI_DMAError+0xc>

0800ac0e <SPI_DMAAbortOnError>:
{
 800ac0e:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac10:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800ac12:	2300      	movs	r3, #0
 800ac14:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ac18:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800ac22:	f7ff ffdc 	bl	800abde <HAL_SPI_ErrorCallback>
}
 800ac26:	bd08      	pop	{r3, pc}

0800ac28 <HAL_SPI_SuspendCallback>:
}
 800ac28:	4770      	bx	lr
	...

0800ac2c <HAL_SPI_IRQHandler>:
{
 800ac2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac30:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800ac32:	6806      	ldr	r6, [r0, #0]
 800ac34:	6932      	ldr	r2, [r6, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800ac36:	6973      	ldr	r3, [r6, #20]
  uint32_t trigger  = itsource & itflag;
 800ac38:	ea02 0503 	and.w	r5, r2, r3
  uint32_t cfg1     = hspi->Instance->CFG1;
 800ac3c:	f8d6 9008 	ldr.w	r9, [r6, #8]
  HAL_SPI_StateTypeDef State = hspi->State;
 800ac40:	f890 7081 	ldrb.w	r7, [r0, #129]	; 0x81
 800ac44:	b2ff      	uxtb	r7, r7
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ac46:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800ac4a:	d002      	beq.n	800ac52 <HAL_SPI_IRQHandler+0x26>
 800ac4c:	f012 0f08 	tst.w	r2, #8
 800ac50:	d13f      	bne.n	800acd2 <HAL_SPI_IRQHandler+0xa6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ac52:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800ac56:	2b04      	cmp	r3, #4
 800ac58:	d042      	beq.n	800ace0 <HAL_SPI_IRQHandler+0xb4>
  uint32_t handled  = 0UL;
 800ac5a:	2300      	movs	r3, #0
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ac5c:	f005 0845 	and.w	r8, r5, #69	; 0x45
 800ac60:	f1b8 0f01 	cmp.w	r8, #1
 800ac64:	d044      	beq.n	800acf0 <HAL_SPI_IRQHandler+0xc4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ac66:	f005 0226 	and.w	r2, r5, #38	; 0x26
 800ac6a:	2a02      	cmp	r2, #2
 800ac6c:	d045      	beq.n	800acfa <HAL_SPI_IRQHandler+0xce>
  if (handled != 0UL)
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d146      	bne.n	800ad00 <HAL_SPI_IRQHandler+0xd4>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ac72:	f015 0f08 	tst.w	r5, #8
 800ac76:	d079      	beq.n	800ad6c <HAL_SPI_IRQHandler+0x140>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ac78:	6822      	ldr	r2, [r4, #0]
 800ac7a:	6993      	ldr	r3, [r2, #24]
 800ac7c:	f043 0308 	orr.w	r3, r3, #8
 800ac80:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ac82:	6822      	ldr	r2, [r4, #0]
 800ac84:	6993      	ldr	r3, [r2, #24]
 800ac86:	f043 0310 	orr.w	r3, r3, #16
 800ac8a:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ac8c:	6822      	ldr	r2, [r4, #0]
 800ac8e:	6993      	ldr	r3, [r2, #24]
 800ac90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ac94:	6193      	str	r3, [r2, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ac96:	6822      	ldr	r2, [r4, #0]
 800ac98:	6913      	ldr	r3, [r2, #16]
 800ac9a:	f023 0308 	bic.w	r3, r3, #8
 800ac9e:	6113      	str	r3, [r2, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800aca0:	6823      	ldr	r3, [r4, #0]
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800aca8:	d03b      	beq.n	800ad22 <HAL_SPI_IRQHandler+0xf6>
    SPI_CloseTransfer(hspi);
 800acaa:	4620      	mov	r0, r4
 800acac:	f7ff fb7a 	bl	800a3a4 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800acb0:	2301      	movs	r3, #1
 800acb2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800acb6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d14a      	bne.n	800ad54 <HAL_SPI_IRQHandler+0x128>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800acbe:	2f05      	cmp	r7, #5
 800acc0:	d04c      	beq.n	800ad5c <HAL_SPI_IRQHandler+0x130>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800acc2:	2f04      	cmp	r7, #4
 800acc4:	d04e      	beq.n	800ad64 <HAL_SPI_IRQHandler+0x138>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800acc6:	2f03      	cmp	r7, #3
 800acc8:	d11a      	bne.n	800ad00 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxCpltCallback(hspi);
 800acca:	4620      	mov	r0, r4
 800accc:	f7ff ff52 	bl	800ab74 <HAL_SPI_TxCpltCallback>
    return;
 800acd0:	e016      	b.n	800ad00 <HAL_SPI_IRQHandler+0xd4>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800acd2:	69b3      	ldr	r3, [r6, #24]
 800acd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800acd8:	61b3      	str	r3, [r6, #24]
    HAL_SPI_SuspendCallback(hspi);
 800acda:	f7ff ffa5 	bl	800ac28 <HAL_SPI_SuspendCallback>
    return;
 800acde:	e00f      	b.n	800ad00 <HAL_SPI_IRQHandler+0xd4>
    hspi->TxISR(hspi);
 800ace0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800ace2:	4620      	mov	r0, r4
 800ace4:	4798      	blx	r3
    hspi->RxISR(hspi);
 800ace6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ace8:	4620      	mov	r0, r4
 800acea:	4798      	blx	r3
    handled = 1UL;
 800acec:	2301      	movs	r3, #1
 800acee:	e7b5      	b.n	800ac5c <HAL_SPI_IRQHandler+0x30>
    hspi->RxISR(hspi);
 800acf0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800acf2:	4620      	mov	r0, r4
 800acf4:	4798      	blx	r3
    handled = 1UL;
 800acf6:	4643      	mov	r3, r8
 800acf8:	e7b5      	b.n	800ac66 <HAL_SPI_IRQHandler+0x3a>
    hspi->TxISR(hspi);
 800acfa:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800acfc:	4620      	mov	r0, r4
 800acfe:	4798      	blx	r3
}
 800ad00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad04:	2b07      	cmp	r3, #7
 800ad06:	d91c      	bls.n	800ad42 <HAL_SPI_IRQHandler+0x116>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ad08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad0a:	8e32      	ldrh	r2, [r6, #48]	; 0x30
 800ad0c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad10:	3302      	adds	r3, #2
 800ad12:	6663      	str	r3, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800ad14:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800ad22:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d0be      	beq.n	800acaa <HAL_SPI_IRQHandler+0x7e>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ad2c:	68e3      	ldr	r3, [r4, #12]
 800ad2e:	2b0f      	cmp	r3, #15
 800ad30:	d9e8      	bls.n	800ad04 <HAL_SPI_IRQHandler+0xd8>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ad32:	6822      	ldr	r2, [r4, #0]
 800ad34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ad38:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ad3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad3c:	3304      	adds	r3, #4
 800ad3e:	6663      	str	r3, [r4, #100]	; 0x64
 800ad40:	e7e8      	b.n	800ad14 <HAL_SPI_IRQHandler+0xe8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ad42:	6822      	ldr	r2, [r4, #0]
 800ad44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad46:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800ad4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ad4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad4e:	3301      	adds	r3, #1
 800ad50:	6663      	str	r3, [r4, #100]	; 0x64
 800ad52:	e7df      	b.n	800ad14 <HAL_SPI_IRQHandler+0xe8>
      HAL_SPI_ErrorCallback(hspi);
 800ad54:	4620      	mov	r0, r4
 800ad56:	f7ff ff42 	bl	800abde <HAL_SPI_ErrorCallback>
      return;
 800ad5a:	e7d1      	b.n	800ad00 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_TxRxCpltCallback(hspi);
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f00e f8a7 	bl	8018eb0 <__HAL_SPI_TxRxCpltCallback_veneer>
 800ad62:	e7cd      	b.n	800ad00 <HAL_SPI_IRQHandler+0xd4>
      HAL_SPI_RxCpltCallback(hspi);
 800ad64:	4620      	mov	r0, r4
 800ad66:	f00e f873 	bl	8018e50 <__HAL_SPI_RxCpltCallback_veneer>
 800ad6a:	e7c9      	b.n	800ad00 <HAL_SPI_IRQHandler+0xd4>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800ad6c:	f415 7f58 	tst.w	r5, #864	; 0x360
 800ad70:	d0c6      	beq.n	800ad00 <HAL_SPI_IRQHandler+0xd4>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800ad72:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ad76:	d00a      	beq.n	800ad8e <HAL_SPI_IRQHandler+0x162>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ad78:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ad7c:	f043 0304 	orr.w	r3, r3, #4
 800ad80:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad84:	6822      	ldr	r2, [r4, #0]
 800ad86:	6993      	ldr	r3, [r2, #24]
 800ad88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad8c:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800ad8e:	f415 7f00 	tst.w	r5, #512	; 0x200
 800ad92:	d00a      	beq.n	800adaa <HAL_SPI_IRQHandler+0x17e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ad94:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ad98:	f043 0301 	orr.w	r3, r3, #1
 800ad9c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ada0:	6822      	ldr	r2, [r4, #0]
 800ada2:	6993      	ldr	r3, [r2, #24]
 800ada4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ada8:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800adaa:	f415 7f80 	tst.w	r5, #256	; 0x100
 800adae:	d00a      	beq.n	800adc6 <HAL_SPI_IRQHandler+0x19a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800adb0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800adb4:	f043 0308 	orr.w	r3, r3, #8
 800adb8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800adbc:	6822      	ldr	r2, [r4, #0]
 800adbe:	6993      	ldr	r3, [r2, #24]
 800adc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adc4:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800adc6:	f015 0f20 	tst.w	r5, #32
 800adca:	d00a      	beq.n	800ade2 <HAL_SPI_IRQHandler+0x1b6>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800adcc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800add0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800add8:	6822      	ldr	r2, [r4, #0]
 800adda:	6993      	ldr	r3, [r2, #24]
 800addc:	f043 0320 	orr.w	r3, r3, #32
 800ade0:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ade2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d08a      	beq.n	800ad00 <HAL_SPI_IRQHandler+0xd4>
      __HAL_SPI_DISABLE(hspi);
 800adea:	6822      	ldr	r2, [r4, #0]
 800adec:	6813      	ldr	r3, [r2, #0]
 800adee:	f023 0301 	bic.w	r3, r3, #1
 800adf2:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800adf4:	6822      	ldr	r2, [r4, #0]
 800adf6:	6911      	ldr	r1, [r2, #16]
 800adf8:	4b1a      	ldr	r3, [pc, #104]	; (800ae64 <HAL_SPI_IRQHandler+0x238>)
 800adfa:	400b      	ands	r3, r1
 800adfc:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800adfe:	f409 4940 	and.w	r9, r9, #49152	; 0xc000
 800ae02:	f5b9 4f40 	cmp.w	r9, #49152	; 0xc000
 800ae06:	d125      	bne.n	800ae54 <HAL_SPI_IRQHandler+0x228>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ae08:	6822      	ldr	r2, [r4, #0]
 800ae0a:	6893      	ldr	r3, [r2, #8]
 800ae0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ae10:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800ae12:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800ae14:	b15b      	cbz	r3, 800ae2e <HAL_SPI_IRQHandler+0x202>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ae16:	4a14      	ldr	r2, [pc, #80]	; (800ae68 <HAL_SPI_IRQHandler+0x23c>)
 800ae18:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ae1a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800ae1c:	f7f9 fdfc 	bl	8004a18 <HAL_DMA_Abort_IT>
 800ae20:	b128      	cbz	r0, 800ae2e <HAL_SPI_IRQHandler+0x202>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ae22:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ae26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae2a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800ae2e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f43f af65 	beq.w	800ad00 <HAL_SPI_IRQHandler+0xd4>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ae36:	4a0c      	ldr	r2, [pc, #48]	; (800ae68 <HAL_SPI_IRQHandler+0x23c>)
 800ae38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ae3a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800ae3c:	f7f9 fdec 	bl	8004a18 <HAL_DMA_Abort_IT>
 800ae40:	2800      	cmp	r0, #0
 800ae42:	f43f af5d 	beq.w	800ad00 <HAL_SPI_IRQHandler+0xd4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ae46:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800ae4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae4e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800ae52:	e755      	b.n	800ad00 <HAL_SPI_IRQHandler+0xd4>
        hspi->State = HAL_SPI_STATE_READY;
 800ae54:	2301      	movs	r3, #1
 800ae56:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	f7ff febf 	bl	800abde <HAL_SPI_ErrorCallback>
    return;
 800ae60:	e74e      	b.n	800ad00 <HAL_SPI_IRQHandler+0xd4>
 800ae62:	bf00      	nop
 800ae64:	fffffc94 	.word	0xfffffc94
 800ae68:	0800ac0f 	.word	0x0800ac0f

0800ae6c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ae6c:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ae6e:	680b      	ldr	r3, [r1, #0]
 800ae70:	b9cb      	cbnz	r3, 800aea6 <FMC_SDRAM_Init+0x3a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ae72:	6803      	ldr	r3, [r0, #0]
 800ae74:	4a19      	ldr	r2, [pc, #100]	; (800aedc <FMC_SDRAM_Init+0x70>)
 800ae76:	401a      	ands	r2, r3
 800ae78:	684b      	ldr	r3, [r1, #4]
 800ae7a:	688c      	ldr	r4, [r1, #8]
 800ae7c:	4323      	orrs	r3, r4
 800ae7e:	68cc      	ldr	r4, [r1, #12]
 800ae80:	4323      	orrs	r3, r4
 800ae82:	690c      	ldr	r4, [r1, #16]
 800ae84:	4323      	orrs	r3, r4
 800ae86:	694c      	ldr	r4, [r1, #20]
 800ae88:	4323      	orrs	r3, r4
 800ae8a:	698c      	ldr	r4, [r1, #24]
 800ae8c:	4323      	orrs	r3, r4
 800ae8e:	69cc      	ldr	r4, [r1, #28]
 800ae90:	4323      	orrs	r3, r4
 800ae92:	6a0c      	ldr	r4, [r1, #32]
 800ae94:	4323      	orrs	r3, r4
 800ae96:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800ae98:	430b      	orrs	r3, r1
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	6002      	str	r2, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800ae9e:	2000      	movs	r0, #0
 800aea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aea4:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800aea6:	6803      	ldr	r3, [r0, #0]
 800aea8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aeac:	69ca      	ldr	r2, [r1, #28]
 800aeae:	6a0c      	ldr	r4, [r1, #32]
 800aeb0:	4322      	orrs	r2, r4
 800aeb2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800aeb4:	4322      	orrs	r2, r4
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800aeba:	6843      	ldr	r3, [r0, #4]
 800aebc:	4a07      	ldr	r2, [pc, #28]	; (800aedc <FMC_SDRAM_Init+0x70>)
 800aebe:	401a      	ands	r2, r3
 800aec0:	684b      	ldr	r3, [r1, #4]
 800aec2:	688c      	ldr	r4, [r1, #8]
 800aec4:	4323      	orrs	r3, r4
 800aec6:	68cc      	ldr	r4, [r1, #12]
 800aec8:	4323      	orrs	r3, r4
 800aeca:	690c      	ldr	r4, [r1, #16]
 800aecc:	4323      	orrs	r3, r4
 800aece:	694c      	ldr	r4, [r1, #20]
 800aed0:	4323      	orrs	r3, r4
 800aed2:	6989      	ldr	r1, [r1, #24]
 800aed4:	430b      	orrs	r3, r1
 800aed6:	431a      	orrs	r2, r3
 800aed8:	6042      	str	r2, [r0, #4]
 800aeda:	e7e0      	b.n	800ae9e <FMC_SDRAM_Init+0x32>
 800aedc:	ffff8000 	.word	0xffff8000

0800aee0 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aee0:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800aee2:	bb3a      	cbnz	r2, 800af34 <FMC_SDRAM_Timing_Init+0x54>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800aee4:	6882      	ldr	r2, [r0, #8]
 800aee6:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800aeea:	680b      	ldr	r3, [r1, #0]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	684c      	ldr	r4, [r1, #4]
 800aef0:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800aef4:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 800aef8:	688c      	ldr	r4, [r1, #8]
 800aefa:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800aefe:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800af02:	68cc      	ldr	r4, [r1, #12]
 800af04:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800af08:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 800af0c:	690c      	ldr	r4, [r1, #16]
 800af0e:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800af12:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800af16:	694c      	ldr	r4, [r1, #20]
 800af18:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800af1c:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 800af20:	6989      	ldr	r1, [r1, #24]
 800af22:	3901      	subs	r1, #1
 800af24:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800af28:	4313      	orrs	r3, r2
 800af2a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800af2c:	2000      	movs	r0, #0
 800af2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af32:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800af34:	6883      	ldr	r3, [r0, #8]
 800af36:	4a13      	ldr	r2, [pc, #76]	; (800af84 <FMC_SDRAM_Timing_Init+0xa4>)
 800af38:	401a      	ands	r2, r3
 800af3a:	68cb      	ldr	r3, [r1, #12]
 800af3c:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800af40:	694b      	ldr	r3, [r1, #20]
 800af42:	3b01      	subs	r3, #1
 800af44:	051b      	lsls	r3, r3, #20
 800af46:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 800af4a:	431a      	orrs	r2, r3
 800af4c:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800af4e:	68c2      	ldr	r2, [r0, #12]
 800af50:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800af54:	680b      	ldr	r3, [r1, #0]
 800af56:	3b01      	subs	r3, #1
 800af58:	684c      	ldr	r4, [r1, #4]
 800af5a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800af5e:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
 800af62:	688c      	ldr	r4, [r1, #8]
 800af64:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800af68:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800af6c:	690c      	ldr	r4, [r1, #16]
 800af6e:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800af72:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800af76:	6989      	ldr	r1, [r1, #24]
 800af78:	3901      	subs	r1, #1
 800af7a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800af7e:	4313      	orrs	r3, r2
 800af80:	60c3      	str	r3, [r0, #12]
 800af82:	e7d3      	b.n	800af2c <FMC_SDRAM_Timing_Init+0x4c>
 800af84:	ff0f0fff 	.word	0xff0f0fff

0800af88 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800af88:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800af8a:	6903      	ldr	r3, [r0, #16]
 800af8c:	4a09      	ldr	r2, [pc, #36]	; (800afb4 <FMC_SDRAM_SendCommand+0x2c>)
 800af8e:	401a      	ands	r2, r3
 800af90:	680b      	ldr	r3, [r1, #0]
 800af92:	684c      	ldr	r4, [r1, #4]
 800af94:	4323      	orrs	r3, r4
 800af96:	688c      	ldr	r4, [r1, #8]
 800af98:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800af9c:	ea43 134c 	orr.w	r3, r3, ip, lsl #5
 800afa0:	68c9      	ldr	r1, [r1, #12]
 800afa2:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800afa6:	431a      	orrs	r2, r3
 800afa8:	6102      	str	r2, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800afaa:	2000      	movs	r0, #0
 800afac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800afb0:	4770      	bx	lr
 800afb2:	bf00      	nop
 800afb4:	ffc00000 	.word	0xffc00000

0800afb8 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800afb8:	6942      	ldr	r2, [r0, #20]
 800afba:	4b03      	ldr	r3, [pc, #12]	; (800afc8 <FMC_SDRAM_ProgramRefreshRate+0x10>)
 800afbc:	4013      	ands	r3, r2
 800afbe:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800afc2:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800afc4:	2000      	movs	r0, #0
 800afc6:	4770      	bx	lr
 800afc8:	ffffc001 	.word	0xffffc001

0800afcc <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800afcc:	4b0b      	ldr	r3, [pc, #44]	; (800affc <SDMMC_GetCmdError+0x30>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a0b      	ldr	r2, [pc, #44]	; (800b000 <SDMMC_GetCmdError+0x34>)
 800afd2:	fba2 2303 	umull	r2, r3, r2, r3
 800afd6:	0a5b      	lsrs	r3, r3, #9
 800afd8:	f241 3288 	movw	r2, #5000	; 0x1388
 800afdc:	fb02 f303 	mul.w	r3, r2, r3

  do
  {
    if (count-- == 0U)
 800afe0:	461a      	mov	r2, r3
 800afe2:	3b01      	subs	r3, #1
 800afe4:	b13a      	cbz	r2, 800aff6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800afe6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800afe8:	f012 0f80 	tst.w	r2, #128	; 0x80
 800afec:	d0f8      	beq.n	800afe0 <SDMMC_GetCmdError+0x14>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800afee:	4b05      	ldr	r3, [pc, #20]	; (800b004 <SDMMC_GetCmdError+0x38>)
 800aff0:	6383      	str	r3, [r0, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800aff2:	2000      	movs	r0, #0
 800aff4:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800aff6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800affa:	4770      	bx	lr
 800affc:	20000af0 	.word	0x20000af0
 800b000:	10624dd3 	.word	0x10624dd3
 800b004:	002000c5 	.word	0x002000c5

0800b008 <SDMMC_Init>:
{
 800b008:	b084      	sub	sp, #16
 800b00a:	f10d 0c04 	add.w	ip, sp, #4
 800b00e:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800b012:	460b      	mov	r3, r1
 800b014:	4313      	orrs	r3, r2
             Init.BusWide             | \
 800b016:	9a03      	ldr	r2, [sp, #12]
             Init.ClockPowerSave      | \
 800b018:	4313      	orrs	r3, r2
             Init.HardwareFlowControl | \
 800b01a:	9a04      	ldr	r2, [sp, #16]
             Init.BusWide             | \
 800b01c:	4313      	orrs	r3, r2
             Init.ClockDiv
 800b01e:	9a05      	ldr	r2, [sp, #20]
             Init.HardwareFlowControl | \
 800b020:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b022:	6841      	ldr	r1, [r0, #4]
 800b024:	4a03      	ldr	r2, [pc, #12]	; (800b034 <SDMMC_Init+0x2c>)
 800b026:	400a      	ands	r2, r1
 800b028:	4313      	orrs	r3, r2
 800b02a:	6043      	str	r3, [r0, #4]
}
 800b02c:	2000      	movs	r0, #0
 800b02e:	b004      	add	sp, #16
 800b030:	4770      	bx	lr
 800b032:	bf00      	nop
 800b034:	ffc02c00 	.word	0xffc02c00

0800b038 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 800b038:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800b03c:	4770      	bx	lr

0800b03e <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 800b03e:	680b      	ldr	r3, [r1, #0]
 800b040:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 800b044:	2000      	movs	r0, #0
 800b046:	4770      	bx	lr

0800b048 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b048:	6803      	ldr	r3, [r0, #0]
 800b04a:	f043 0303 	orr.w	r3, r3, #3
 800b04e:	6003      	str	r3, [r0, #0]
}
 800b050:	2000      	movs	r0, #0
 800b052:	4770      	bx	lr

0800b054 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b054:	6800      	ldr	r0, [r0, #0]
}
 800b056:	f000 0003 	and.w	r0, r0, #3
 800b05a:	4770      	bx	lr

0800b05c <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 800b05c:	680b      	ldr	r3, [r1, #0]
 800b05e:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b060:	684b      	ldr	r3, [r1, #4]
                       Command->Response         | \
 800b062:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b064:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt | \
 800b066:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         | \
 800b068:	4313      	orrs	r3, r2
                       Command->CPSM);
 800b06a:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt | \
 800b06c:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b06e:	68c1      	ldr	r1, [r0, #12]
 800b070:	4a02      	ldr	r2, [pc, #8]	; (800b07c <SDMMC_SendCommand+0x20>)
 800b072:	400a      	ands	r2, r1
 800b074:	4313      	orrs	r3, r2
 800b076:	60c3      	str	r3, [r0, #12]
}
 800b078:	2000      	movs	r0, #0
 800b07a:	4770      	bx	lr
 800b07c:	fffee0c0 	.word	0xfffee0c0

0800b080 <SDMMC_GetCommandResponse>:
  return (uint8_t)(SDMMCx->RESPCMD);
 800b080:	6900      	ldr	r0, [r0, #16]
}
 800b082:	b2c0      	uxtb	r0, r0
 800b084:	4770      	bx	lr

0800b086 <SDMMC_GetResponse>:
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b086:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 800b088:	5840      	ldr	r0, [r0, r1]
}
 800b08a:	4770      	bx	lr

0800b08c <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b08c:	680b      	ldr	r3, [r1, #0]
 800b08e:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 800b090:	684b      	ldr	r3, [r1, #4]
 800b092:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b094:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   | \
 800b096:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b098:	4313      	orrs	r3, r2
                       Data->TransferMode  | \
 800b09a:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   | \
 800b09c:	4313      	orrs	r3, r2
                       Data->DPSM);
 800b09e:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  | \
 800b0a0:	4313      	orrs	r3, r2
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b0a2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b0a4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	4770      	bx	lr

0800b0b0 <SDMMC_CmdGoIdleState>:
{
 800b0b0:	b510      	push	{r4, lr}
 800b0b2:	b086      	sub	sp, #24
 800b0b4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b0ba:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b0bc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0be:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0c4:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0c6:	a901      	add	r1, sp, #4
 800b0c8:	f7ff ffc8 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	f7ff ff7d 	bl	800afcc <SDMMC_GetCmdError>
}
 800b0d2:	b006      	add	sp, #24
 800b0d4:	bd10      	pop	{r4, pc}
	...

0800b0d8 <SDMMC_GetCmdResp1>:
{
 800b0d8:	b570      	push	{r4, r5, r6, lr}
 800b0da:	4605      	mov	r5, r0
 800b0dc:	460e      	mov	r6, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b0de:	4b51      	ldr	r3, [pc, #324]	; (800b224 <SDMMC_GetCmdResp1+0x14c>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4951      	ldr	r1, [pc, #324]	; (800b228 <SDMMC_GetCmdResp1+0x150>)
 800b0e4:	fba1 1303 	umull	r1, r3, r1, r3
 800b0e8:	0a5b      	lsrs	r3, r3, #9
 800b0ea:	fb03 f202 	mul.w	r2, r3, r2
    if (count-- == 0U)
 800b0ee:	4613      	mov	r3, r2
 800b0f0:	3a01      	subs	r2, #1
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d05e      	beq.n	800b1b4 <SDMMC_GetCmdResp1+0xdc>
    sta_reg = SDMMCx->STA;
 800b0f6:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b0f8:	4b4c      	ldr	r3, [pc, #304]	; (800b22c <SDMMC_GetCmdResp1+0x154>)
 800b0fa:	4023      	ands	r3, r4
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d0f6      	beq.n	800b0ee <SDMMC_GetCmdResp1+0x16>
 800b100:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 800b104:	d1f3      	bne.n	800b0ee <SDMMC_GetCmdResp1+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b106:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b108:	f013 0f04 	tst.w	r3, #4
 800b10c:	d106      	bne.n	800b11c <SDMMC_GetCmdResp1+0x44>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b10e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b110:	f013 0f01 	tst.w	r3, #1
 800b114:	d005      	beq.n	800b122 <SDMMC_GetCmdResp1+0x4a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b116:	2001      	movs	r0, #1
 800b118:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b11a:	e04d      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b11c:	2004      	movs	r0, #4
 800b11e:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b120:	e04a      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b122:	4b43      	ldr	r3, [pc, #268]	; (800b230 <SDMMC_GetCmdResp1+0x158>)
 800b124:	63ab      	str	r3, [r5, #56]	; 0x38
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b126:	4628      	mov	r0, r5
 800b128:	f7ff ffaa 	bl	800b080 <SDMMC_GetCommandResponse>
 800b12c:	42b0      	cmp	r0, r6
 800b12e:	d001      	beq.n	800b134 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b130:	2001      	movs	r0, #1
 800b132:	e041      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b134:	2100      	movs	r1, #0
 800b136:	4628      	mov	r0, r5
 800b138:	f7ff ffa5 	bl	800b086 <SDMMC_GetResponse>
 800b13c:	4603      	mov	r3, r0
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b13e:	483d      	ldr	r0, [pc, #244]	; (800b234 <SDMMC_GetCmdResp1+0x15c>)
 800b140:	4018      	ands	r0, r3
 800b142:	b3c8      	cbz	r0, 800b1b8 <SDMMC_GetCmdResp1+0xe0>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b144:	2b00      	cmp	r3, #0
 800b146:	db38      	blt.n	800b1ba <SDMMC_GetCmdResp1+0xe2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b148:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800b14c:	d138      	bne.n	800b1c0 <SDMMC_GetCmdResp1+0xe8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b14e:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800b152:	d137      	bne.n	800b1c4 <SDMMC_GetCmdResp1+0xec>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b154:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800b158:	d136      	bne.n	800b1c8 <SDMMC_GetCmdResp1+0xf0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b15a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800b15e:	d136      	bne.n	800b1ce <SDMMC_GetCmdResp1+0xf6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b160:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 800b164:	d136      	bne.n	800b1d4 <SDMMC_GetCmdResp1+0xfc>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b166:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800b16a:	d136      	bne.n	800b1da <SDMMC_GetCmdResp1+0x102>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b16c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800b170:	d136      	bne.n	800b1e0 <SDMMC_GetCmdResp1+0x108>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b172:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800b176:	d136      	bne.n	800b1e6 <SDMMC_GetCmdResp1+0x10e>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b178:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800b17c:	d136      	bne.n	800b1ec <SDMMC_GetCmdResp1+0x114>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b17e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b182:	d136      	bne.n	800b1f2 <SDMMC_GetCmdResp1+0x11a>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b184:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800b188:	d136      	bne.n	800b1f8 <SDMMC_GetCmdResp1+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b18a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800b18e:	d136      	bne.n	800b1fe <SDMMC_GetCmdResp1+0x126>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b190:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800b194:	d136      	bne.n	800b204 <SDMMC_GetCmdResp1+0x12c>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b196:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800b19a:	d136      	bne.n	800b20a <SDMMC_GetCmdResp1+0x132>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b19c:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b1a0:	d136      	bne.n	800b210 <SDMMC_GetCmdResp1+0x138>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b1a2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800b1a6:	d136      	bne.n	800b216 <SDMMC_GetCmdResp1+0x13e>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b1a8:	f013 0f08 	tst.w	r3, #8
 800b1ac:	d036      	beq.n	800b21c <SDMMC_GetCmdResp1+0x144>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b1ae:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800b1b2:	e001      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
      return SDMMC_ERROR_TIMEOUT;
 800b1b4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b1b8:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b1ba:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800b1be:	e7fb      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b1c0:	2040      	movs	r0, #64	; 0x40
 800b1c2:	e7f9      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b1c4:	2080      	movs	r0, #128	; 0x80
 800b1c6:	e7f7      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b1c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b1cc:	e7f4      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b1ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b1d2:	e7f1      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b1d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b1d8:	e7ee      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b1da:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b1de:	e7eb      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b1e0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b1e4:	e7e8      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b1e6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b1ea:	e7e5      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b1ec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800b1f0:	e7e2      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CC_ERR;
 800b1f2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800b1f6:	e7df      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b1f8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800b1fc:	e7dc      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b1fe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800b202:	e7d9      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b204:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b208:	e7d6      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b20a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800b20e:	e7d3      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b210:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b214:	e7d0      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_ERASE_RESET;
 800b216:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800b21a:	e7cd      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b21c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b220:	e7ca      	b.n	800b1b8 <SDMMC_GetCmdResp1+0xe0>
 800b222:	bf00      	nop
 800b224:	20000af0 	.word	0x20000af0
 800b228:	10624dd3 	.word	0x10624dd3
 800b22c:	00200045 	.word	0x00200045
 800b230:	002000c5 	.word	0x002000c5
 800b234:	fdffe008 	.word	0xfdffe008

0800b238 <SDMMC_CmdBlockLength>:
{
 800b238:	b530      	push	{r4, r5, lr}
 800b23a:	b087      	sub	sp, #28
 800b23c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b23e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b240:	2510      	movs	r5, #16
 800b242:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b244:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b248:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b24a:	2300      	movs	r3, #0
 800b24c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b24e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b252:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b254:	a901      	add	r1, sp, #4
 800b256:	f7ff ff01 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b25a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b25e:	4629      	mov	r1, r5
 800b260:	4620      	mov	r0, r4
 800b262:	f7ff ff39 	bl	800b0d8 <SDMMC_GetCmdResp1>
}
 800b266:	b007      	add	sp, #28
 800b268:	bd30      	pop	{r4, r5, pc}

0800b26a <SDMMC_CmdReadSingleBlock>:
{
 800b26a:	b530      	push	{r4, r5, lr}
 800b26c:	b087      	sub	sp, #28
 800b26e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b270:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b272:	2511      	movs	r5, #17
 800b274:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b27a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b27c:	2300      	movs	r3, #0
 800b27e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b284:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b286:	a901      	add	r1, sp, #4
 800b288:	f7ff fee8 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b28c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b290:	4629      	mov	r1, r5
 800b292:	4620      	mov	r0, r4
 800b294:	f7ff ff20 	bl	800b0d8 <SDMMC_GetCmdResp1>
}
 800b298:	b007      	add	sp, #28
 800b29a:	bd30      	pop	{r4, r5, pc}

0800b29c <SDMMC_CmdReadMultiBlock>:
{
 800b29c:	b530      	push	{r4, r5, lr}
 800b29e:	b087      	sub	sp, #28
 800b2a0:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b2a2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b2a4:	2512      	movs	r5, #18
 800b2a6:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2ac:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2b6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2b8:	a901      	add	r1, sp, #4
 800b2ba:	f7ff fecf 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b2be:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	f7ff ff07 	bl	800b0d8 <SDMMC_GetCmdResp1>
}
 800b2ca:	b007      	add	sp, #28
 800b2cc:	bd30      	pop	{r4, r5, pc}

0800b2ce <SDMMC_CmdWriteSingleBlock>:
{
 800b2ce:	b530      	push	{r4, r5, lr}
 800b2d0:	b087      	sub	sp, #28
 800b2d2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b2d4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b2d6:	2518      	movs	r5, #24
 800b2d8:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b2da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2de:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b2e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2e8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b2ea:	a901      	add	r1, sp, #4
 800b2ec:	f7ff feb6 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b2f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f7ff feee 	bl	800b0d8 <SDMMC_GetCmdResp1>
}
 800b2fc:	b007      	add	sp, #28
 800b2fe:	bd30      	pop	{r4, r5, pc}

0800b300 <SDMMC_CmdWriteMultiBlock>:
{
 800b300:	b530      	push	{r4, r5, lr}
 800b302:	b087      	sub	sp, #28
 800b304:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b306:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b308:	2519      	movs	r5, #25
 800b30a:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b30c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b310:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b312:	2300      	movs	r3, #0
 800b314:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b31a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b31c:	a901      	add	r1, sp, #4
 800b31e:	f7ff fe9d 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b322:	f241 3288 	movw	r2, #5000	; 0x1388
 800b326:	4629      	mov	r1, r5
 800b328:	4620      	mov	r0, r4
 800b32a:	f7ff fed5 	bl	800b0d8 <SDMMC_GetCmdResp1>
}
 800b32e:	b007      	add	sp, #28
 800b330:	bd30      	pop	{r4, r5, pc}
	...

0800b334 <SDMMC_CmdStopTransfer>:
{
 800b334:	b530      	push	{r4, r5, lr}
 800b336:	b087      	sub	sp, #28
 800b338:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b33a:	2300      	movs	r3, #0
 800b33c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b33e:	250c      	movs	r5, #12
 800b340:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b342:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b346:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b348:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b34a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b34e:	9305      	str	r3, [sp, #20]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b350:	68c3      	ldr	r3, [r0, #12]
 800b352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b356:	60c3      	str	r3, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b358:	68c3      	ldr	r3, [r0, #12]
 800b35a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b35e:	60c3      	str	r3, [r0, #12]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b360:	a901      	add	r1, sp, #4
 800b362:	f7ff fe7b 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b366:	4a08      	ldr	r2, [pc, #32]	; (800b388 <SDMMC_CmdStopTransfer+0x54>)
 800b368:	4629      	mov	r1, r5
 800b36a:	4620      	mov	r0, r4
 800b36c:	f7ff feb4 	bl	800b0d8 <SDMMC_GetCmdResp1>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b370:	68e3      	ldr	r3, [r4, #12]
 800b372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b376:	60e3      	str	r3, [r4, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b378:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800b37c:	d001      	beq.n	800b382 <SDMMC_CmdStopTransfer+0x4e>
}
 800b37e:	b007      	add	sp, #28
 800b380:	bd30      	pop	{r4, r5, pc}
    errorstate = SDMMC_ERROR_NONE;
 800b382:	2000      	movs	r0, #0
  return errorstate;
 800b384:	e7fb      	b.n	800b37e <SDMMC_CmdStopTransfer+0x4a>
 800b386:	bf00      	nop
 800b388:	05f5e100 	.word	0x05f5e100

0800b38c <SDMMC_CmdSelDesel>:
{
 800b38c:	b530      	push	{r4, r5, lr}
 800b38e:	b087      	sub	sp, #28
 800b390:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b392:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b394:	2507      	movs	r5, #7
 800b396:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b39c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3a6:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3a8:	a901      	add	r1, sp, #4
 800b3aa:	f7ff fe57 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b3ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3b2:	4629      	mov	r1, r5
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	f7ff fe8f 	bl	800b0d8 <SDMMC_GetCmdResp1>
}
 800b3ba:	b007      	add	sp, #28
 800b3bc:	bd30      	pop	{r4, r5, pc}

0800b3be <SDMMC_CmdAppCommand>:
{
 800b3be:	b530      	push	{r4, r5, lr}
 800b3c0:	b087      	sub	sp, #28
 800b3c2:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b3c4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b3c6:	2537      	movs	r5, #55	; 0x37
 800b3c8:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b3ce:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b3d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b3d8:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b3da:	a901      	add	r1, sp, #4
 800b3dc:	f7ff fe3e 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b3e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3e4:	4629      	mov	r1, r5
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f7ff fe76 	bl	800b0d8 <SDMMC_GetCmdResp1>
}
 800b3ec:	b007      	add	sp, #28
 800b3ee:	bd30      	pop	{r4, r5, pc}

0800b3f0 <SDMMC_CmdBusWidth>:
{
 800b3f0:	b530      	push	{r4, r5, lr}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b3f6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b3f8:	2506      	movs	r5, #6
 800b3fa:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b3fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b400:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b402:	2300      	movs	r3, #0
 800b404:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b40a:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b40c:	a901      	add	r1, sp, #4
 800b40e:	f7ff fe25 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b412:	f241 3288 	movw	r2, #5000	; 0x1388
 800b416:	4629      	mov	r1, r5
 800b418:	4620      	mov	r0, r4
 800b41a:	f7ff fe5d 	bl	800b0d8 <SDMMC_GetCmdResp1>
}
 800b41e:	b007      	add	sp, #28
 800b420:	bd30      	pop	{r4, r5, pc}

0800b422 <SDMMC_CmdSendSCR>:
{
 800b422:	b530      	push	{r4, r5, lr}
 800b424:	b087      	sub	sp, #28
 800b426:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b428:	2300      	movs	r3, #0
 800b42a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b42c:	2533      	movs	r5, #51	; 0x33
 800b42e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b430:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b434:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b436:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b438:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b43c:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b43e:	a901      	add	r1, sp, #4
 800b440:	f7ff fe0c 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b444:	f241 3288 	movw	r2, #5000	; 0x1388
 800b448:	4629      	mov	r1, r5
 800b44a:	4620      	mov	r0, r4
 800b44c:	f7ff fe44 	bl	800b0d8 <SDMMC_GetCmdResp1>
}
 800b450:	b007      	add	sp, #28
 800b452:	bd30      	pop	{r4, r5, pc}

0800b454 <SDMMC_CmdSendStatus>:
{
 800b454:	b530      	push	{r4, r5, lr}
 800b456:	b087      	sub	sp, #28
 800b458:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800b45a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b45c:	250d      	movs	r5, #13
 800b45e:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b460:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b464:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b466:	2300      	movs	r3, #0
 800b468:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b46a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b46e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b470:	a901      	add	r1, sp, #4
 800b472:	f7ff fdf3 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b476:	f241 3288 	movw	r2, #5000	; 0x1388
 800b47a:	4629      	mov	r1, r5
 800b47c:	4620      	mov	r0, r4
 800b47e:	f7ff fe2b 	bl	800b0d8 <SDMMC_GetCmdResp1>
}
 800b482:	b007      	add	sp, #28
 800b484:	bd30      	pop	{r4, r5, pc}

0800b486 <SDMMC_CmdStatusRegister>:
{
 800b486:	b530      	push	{r4, r5, lr}
 800b488:	b087      	sub	sp, #28
 800b48a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b48c:	2300      	movs	r3, #0
 800b48e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b490:	250d      	movs	r5, #13
 800b492:	9502      	str	r5, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b494:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b498:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b49a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b49c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4a0:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4a2:	a901      	add	r1, sp, #4
 800b4a4:	f7ff fdda 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b4a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	4620      	mov	r0, r4
 800b4b0:	f7ff fe12 	bl	800b0d8 <SDMMC_GetCmdResp1>
}
 800b4b4:	b007      	add	sp, #28
 800b4b6:	bd30      	pop	{r4, r5, pc}

0800b4b8 <SDMMC_GetCmdResp2>:
{
 800b4b8:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b4ba:	4b14      	ldr	r3, [pc, #80]	; (800b50c <SDMMC_GetCmdResp2+0x54>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a14      	ldr	r2, [pc, #80]	; (800b510 <SDMMC_GetCmdResp2+0x58>)
 800b4c0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c4:	0a5b      	lsrs	r3, r3, #9
 800b4c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4ca:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800b4ce:	461a      	mov	r2, r3
 800b4d0:	3b01      	subs	r3, #1
 800b4d2:	b1ba      	cbz	r2, 800b504 <SDMMC_GetCmdResp2+0x4c>
    sta_reg = SDMMCx->STA;
 800b4d4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4d6:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b4da:	d0f8      	beq.n	800b4ce <SDMMC_GetCmdResp2+0x16>
 800b4dc:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800b4e0:	d1f5      	bne.n	800b4ce <SDMMC_GetCmdResp2+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4e2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b4e4:	f013 0f04 	tst.w	r3, #4
 800b4e8:	d106      	bne.n	800b4f8 <SDMMC_GetCmdResp2+0x40>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b4ea:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800b4ec:	f010 0001 	ands.w	r0, r0, #1
 800b4f0:	d105      	bne.n	800b4fe <SDMMC_GetCmdResp2+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4f2:	4b08      	ldr	r3, [pc, #32]	; (800b514 <SDMMC_GetCmdResp2+0x5c>)
 800b4f4:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800b4f6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b4f8:	2004      	movs	r0, #4
 800b4fa:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4fc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b4fe:	2001      	movs	r0, #1
 800b500:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b502:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800b504:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	20000af0 	.word	0x20000af0
 800b510:	10624dd3 	.word	0x10624dd3
 800b514:	002000c5 	.word	0x002000c5

0800b518 <SDMMC_CmdSendCID>:
{
 800b518:	b510      	push	{r4, lr}
 800b51a:	b086      	sub	sp, #24
 800b51c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 800b51e:	2300      	movs	r3, #0
 800b520:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b522:	2202      	movs	r2, #2
 800b524:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b526:	f44f 7240 	mov.w	r2, #768	; 0x300
 800b52a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b52c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b52e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b532:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b534:	a901      	add	r1, sp, #4
 800b536:	f7ff fd91 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b53a:	4620      	mov	r0, r4
 800b53c:	f7ff ffbc 	bl	800b4b8 <SDMMC_GetCmdResp2>
}
 800b540:	b006      	add	sp, #24
 800b542:	bd10      	pop	{r4, pc}

0800b544 <SDMMC_CmdSendCSD>:
{
 800b544:	b510      	push	{r4, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800b54a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b54c:	2309      	movs	r3, #9
 800b54e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b550:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b554:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b556:	2300      	movs	r3, #0
 800b558:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b55a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b55e:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b560:	a901      	add	r1, sp, #4
 800b562:	f7ff fd7b 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b566:	4620      	mov	r0, r4
 800b568:	f7ff ffa6 	bl	800b4b8 <SDMMC_GetCmdResp2>
}
 800b56c:	b006      	add	sp, #24
 800b56e:	bd10      	pop	{r4, pc}

0800b570 <SDMMC_GetCmdResp3>:
{
 800b570:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b572:	4b10      	ldr	r3, [pc, #64]	; (800b5b4 <SDMMC_GetCmdResp3+0x44>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a10      	ldr	r2, [pc, #64]	; (800b5b8 <SDMMC_GetCmdResp3+0x48>)
 800b578:	fba2 2303 	umull	r2, r3, r2, r3
 800b57c:	0a5b      	lsrs	r3, r3, #9
 800b57e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b582:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800b586:	461a      	mov	r2, r3
 800b588:	3b01      	subs	r3, #1
 800b58a:	b182      	cbz	r2, 800b5ae <SDMMC_GetCmdResp3+0x3e>
    sta_reg = SDMMCx->STA;
 800b58c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b58e:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b592:	d0f8      	beq.n	800b586 <SDMMC_GetCmdResp3+0x16>
 800b594:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800b598:	d1f5      	bne.n	800b586 <SDMMC_GetCmdResp3+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b59a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800b59c:	f010 0004 	ands.w	r0, r0, #4
 800b5a0:	d102      	bne.n	800b5a8 <SDMMC_GetCmdResp3+0x38>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b5a2:	4b06      	ldr	r3, [pc, #24]	; (800b5bc <SDMMC_GetCmdResp3+0x4c>)
 800b5a4:	638b      	str	r3, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800b5a6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b5a8:	2004      	movs	r0, #4
 800b5aa:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5ac:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800b5ae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b5b2:	4770      	bx	lr
 800b5b4:	20000af0 	.word	0x20000af0
 800b5b8:	10624dd3 	.word	0x10624dd3
 800b5bc:	002000c5 	.word	0x002000c5

0800b5c0 <SDMMC_CmdAppOperCommand>:
{
 800b5c0:	b510      	push	{r4, lr}
 800b5c2:	b086      	sub	sp, #24
 800b5c4:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800b5c6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b5c8:	2329      	movs	r3, #41	; 0x29
 800b5ca:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5d0:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5da:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5dc:	a901      	add	r1, sp, #4
 800b5de:	f7ff fd3d 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f7ff ffc4 	bl	800b570 <SDMMC_GetCmdResp3>
}
 800b5e8:	b006      	add	sp, #24
 800b5ea:	bd10      	pop	{r4, pc}

0800b5ec <SDMMC_GetCmdResp6>:
{
 800b5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	460e      	mov	r6, r1
 800b5f2:	4617      	mov	r7, r2
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b5f4:	4b23      	ldr	r3, [pc, #140]	; (800b684 <SDMMC_GetCmdResp6+0x98>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a23      	ldr	r2, [pc, #140]	; (800b688 <SDMMC_GetCmdResp6+0x9c>)
 800b5fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b5fe:	0a5b      	lsrs	r3, r3, #9
 800b600:	f241 3288 	movw	r2, #5000	; 0x1388
 800b604:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800b608:	461a      	mov	r2, r3
 800b60a:	3b01      	subs	r3, #1
 800b60c:	b38a      	cbz	r2, 800b672 <SDMMC_GetCmdResp6+0x86>
    sta_reg = SDMMCx->STA;
 800b60e:	6b6c      	ldr	r4, [r5, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b610:	f014 0f45 	tst.w	r4, #69	; 0x45
 800b614:	d0f8      	beq.n	800b608 <SDMMC_GetCmdResp6+0x1c>
 800b616:	f414 5f00 	tst.w	r4, #8192	; 0x2000
 800b61a:	d1f5      	bne.n	800b608 <SDMMC_GetCmdResp6+0x1c>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b61c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b61e:	f013 0f04 	tst.w	r3, #4
 800b622:	d106      	bne.n	800b632 <SDMMC_GetCmdResp6+0x46>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b624:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b626:	f013 0f01 	tst.w	r3, #1
 800b62a:	d005      	beq.n	800b638 <SDMMC_GetCmdResp6+0x4c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b62c:	2001      	movs	r0, #1
 800b62e:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b630:	e021      	b.n	800b676 <SDMMC_GetCmdResp6+0x8a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b632:	2004      	movs	r0, #4
 800b634:	63a8      	str	r0, [r5, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b636:	e01e      	b.n	800b676 <SDMMC_GetCmdResp6+0x8a>
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b638:	4628      	mov	r0, r5
 800b63a:	f7ff fd21 	bl	800b080 <SDMMC_GetCommandResponse>
 800b63e:	42b0      	cmp	r0, r6
 800b640:	d001      	beq.n	800b646 <SDMMC_GetCmdResp6+0x5a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b642:	2001      	movs	r0, #1
 800b644:	e017      	b.n	800b676 <SDMMC_GetCmdResp6+0x8a>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b646:	4b11      	ldr	r3, [pc, #68]	; (800b68c <SDMMC_GetCmdResp6+0xa0>)
 800b648:	63ab      	str	r3, [r5, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b64a:	2100      	movs	r1, #0
 800b64c:	4628      	mov	r0, r5
 800b64e:	f7ff fd1a 	bl	800b086 <SDMMC_GetResponse>
 800b652:	4603      	mov	r3, r0
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b654:	f410 4060 	ands.w	r0, r0, #57344	; 0xe000
 800b658:	d008      	beq.n	800b66c <SDMMC_GetCmdResp6+0x80>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b65a:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800b65e:	d10b      	bne.n	800b678 <SDMMC_GetCmdResp6+0x8c>
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b660:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800b664:	d00b      	beq.n	800b67e <SDMMC_GetCmdResp6+0x92>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b666:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800b66a:	e004      	b.n	800b676 <SDMMC_GetCmdResp6+0x8a>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b66c:	0c1b      	lsrs	r3, r3, #16
 800b66e:	803b      	strh	r3, [r7, #0]
    return SDMMC_ERROR_NONE;
 800b670:	e001      	b.n	800b676 <SDMMC_GetCmdResp6+0x8a>
      return SDMMC_ERROR_TIMEOUT;
 800b672:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b678:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b67c:	e7fb      	b.n	800b676 <SDMMC_GetCmdResp6+0x8a>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b67e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800b682:	e7f8      	b.n	800b676 <SDMMC_GetCmdResp6+0x8a>
 800b684:	20000af0 	.word	0x20000af0
 800b688:	10624dd3 	.word	0x10624dd3
 800b68c:	002000c5 	.word	0x002000c5

0800b690 <SDMMC_CmdSetRelAdd>:
{
 800b690:	b570      	push	{r4, r5, r6, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	4604      	mov	r4, r0
 800b696:	460d      	mov	r5, r1
  sdmmc_cmdinit.Argument         = 0U;
 800b698:	2300      	movs	r3, #0
 800b69a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b69c:	2603      	movs	r6, #3
 800b69e:	9602      	str	r6, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b6a4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6a6:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6ac:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6ae:	a901      	add	r1, sp, #4
 800b6b0:	f7ff fcd4 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b6b4:	462a      	mov	r2, r5
 800b6b6:	4631      	mov	r1, r6
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f7ff ff97 	bl	800b5ec <SDMMC_GetCmdResp6>
}
 800b6be:	b006      	add	sp, #24
 800b6c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b6c4 <SDMMC_GetCmdResp7>:
{
 800b6c4:	4601      	mov	r1, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b6c6:	4b16      	ldr	r3, [pc, #88]	; (800b720 <SDMMC_GetCmdResp7+0x5c>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a16      	ldr	r2, [pc, #88]	; (800b724 <SDMMC_GetCmdResp7+0x60>)
 800b6cc:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d0:	0a5b      	lsrs	r3, r3, #9
 800b6d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6d6:	fb02 f303 	mul.w	r3, r2, r3
    if (count-- == 0U)
 800b6da:	461a      	mov	r2, r3
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	b1e2      	cbz	r2, 800b71a <SDMMC_GetCmdResp7+0x56>
    sta_reg = SDMMCx->STA;
 800b6e0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b6e2:	f012 0f45 	tst.w	r2, #69	; 0x45
 800b6e6:	d0f8      	beq.n	800b6da <SDMMC_GetCmdResp7+0x16>
 800b6e8:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 800b6ec:	d1f5      	bne.n	800b6da <SDMMC_GetCmdResp7+0x16>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b6ee:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b6f0:	f013 0f04 	tst.w	r3, #4
 800b6f4:	d10b      	bne.n	800b70e <SDMMC_GetCmdResp7+0x4a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b6f6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800b6f8:	f013 0301 	ands.w	r3, r3, #1
 800b6fc:	d10a      	bne.n	800b714 <SDMMC_GetCmdResp7+0x50>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b6fe:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800b700:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800b704:	d00b      	beq.n	800b71e <SDMMC_GetCmdResp7+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b706:	2240      	movs	r2, #64	; 0x40
 800b708:	638a      	str	r2, [r1, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800b70a:	4618      	mov	r0, r3
 800b70c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b70e:	2004      	movs	r0, #4
 800b710:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b712:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b714:	2001      	movs	r0, #1
 800b716:	6388      	str	r0, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b718:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 800b71a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800b71e:	4770      	bx	lr
 800b720:	20000af0 	.word	0x20000af0
 800b724:	10624dd3 	.word	0x10624dd3

0800b728 <SDMMC_CmdOperCond>:
{
 800b728:	b510      	push	{r4, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b72e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b732:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b734:	2308      	movs	r3, #8
 800b736:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b738:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b73c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b73e:	2300      	movs	r3, #0
 800b740:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b746:	9305      	str	r3, [sp, #20]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b748:	a901      	add	r1, sp, #4
 800b74a:	f7ff fc87 	bl	800b05c <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b74e:	4620      	mov	r0, r4
 800b750:	f7ff ffb8 	bl	800b6c4 <SDMMC_GetCmdResp7>
}
 800b754:	b006      	add	sp, #24
 800b756:	bd10      	pop	{r4, pc}

0800b758 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b758:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b75a:	4903      	ldr	r1, [pc, #12]	; (800b768 <MX_FATFS_Init+0x10>)
 800b75c:	4803      	ldr	r0, [pc, #12]	; (800b76c <MX_FATFS_Init+0x14>)
 800b75e:	f002 f8dd 	bl	800d91c <FATFS_LinkDriver>
 800b762:	4b03      	ldr	r3, [pc, #12]	; (800b770 <MX_FATFS_Init+0x18>)
 800b764:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b766:	bd08      	pop	{r3, pc}
 800b768:	2001dda8 	.word	0x2001dda8
 800b76c:	080199b0 	.word	0x080199b0
 800b770:	2001ddac 	.word	0x2001ddac

0800b774 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800b774:	2000      	movs	r0, #0
 800b776:	4770      	bx	lr

0800b778 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b778:	b500      	push	{lr}
 800b77a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	4613      	mov	r3, r2
 800b780:	460a      	mov	r2, r1
 800b782:	4601      	mov	r1, r0
 800b784:	4803      	ldr	r0, [pc, #12]	; (800b794 <BSP_SD_ReadBlocks+0x1c>)
 800b786:	f7fd fef5 	bl	8009574 <HAL_SD_ReadBlocks>
 800b78a:	b100      	cbz	r0, 800b78e <BSP_SD_ReadBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 800b78c:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800b78e:	b003      	add	sp, #12
 800b790:	f85d fb04 	ldr.w	pc, [sp], #4
 800b794:	2001ca48 	.word	0x2001ca48

0800b798 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800b798:	b500      	push	{lr}
 800b79a:	b083      	sub	sp, #12
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	4613      	mov	r3, r2
 800b7a0:	460a      	mov	r2, r1
 800b7a2:	4601      	mov	r1, r0
 800b7a4:	4803      	ldr	r0, [pc, #12]	; (800b7b4 <BSP_SD_WriteBlocks+0x1c>)
 800b7a6:	f7fd ffe7 	bl	8009778 <HAL_SD_WriteBlocks>
 800b7aa:	b100      	cbz	r0, 800b7ae <BSP_SD_WriteBlocks+0x16>
  {
    sd_state = MSD_ERROR;
 800b7ac:	2001      	movs	r0, #1
  }

  return sd_state;
}
 800b7ae:	b003      	add	sp, #12
 800b7b0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7b4:	2001ca48 	.word	0x2001ca48

0800b7b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b7b8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b7ba:	4803      	ldr	r0, [pc, #12]	; (800b7c8 <BSP_SD_GetCardState+0x10>)
 800b7bc:	f7fe fbce 	bl	8009f5c <HAL_SD_GetCardState>
}
 800b7c0:	3804      	subs	r0, #4
 800b7c2:	bf18      	it	ne
 800b7c4:	2001      	movne	r0, #1
 800b7c6:	bd08      	pop	{r3, pc}
 800b7c8:	2001ca48 	.word	0x2001ca48

0800b7cc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b7cc:	b508      	push	{r3, lr}
 800b7ce:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b7d0:	4801      	ldr	r0, [pc, #4]	; (800b7d8 <BSP_SD_GetCardInfo+0xc>)
 800b7d2:	f7fe fb05 	bl	8009de0 <HAL_SD_GetCardInfo>
}
 800b7d6:	bd08      	pop	{r3, pc}
 800b7d8:	2001ca48 	.word	0x2001ca48

0800b7dc <BSP_SD_WriteCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{

}
 800b7dc:	4770      	bx	lr

0800b7de <HAL_SD_TxCpltCallback>:
{
 800b7de:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800b7e0:	f7ff fffc 	bl	800b7dc <BSP_SD_WriteCpltCallback>
}
 800b7e4:	bd08      	pop	{r3, pc}

0800b7e6 <BSP_SD_ReadCpltCallback>:
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{

}
 800b7e6:	4770      	bx	lr

0800b7e8 <HAL_SD_RxCpltCallback>:
{
 800b7e8:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800b7ea:	f7ff fffc 	bl	800b7e6 <BSP_SD_ReadCpltCallback>
}
 800b7ee:	bd08      	pop	{r3, pc}

0800b7f0 <BSP_SD_Init>:
{
 800b7f0:	b538      	push	{r3, r4, r5, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b7f2:	f7f5 fe33 	bl	800145c <BSP_SD_IsDetected>
 800b7f6:	2801      	cmp	r0, #1
 800b7f8:	d002      	beq.n	800b800 <BSP_SD_Init+0x10>
    return MSD_ERROR_SD_NOT_PRESENT;
 800b7fa:	2502      	movs	r5, #2
}
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	4604      	mov	r4, r0
  sd_state = HAL_SD_Init(&hsd1);
 800b802:	4807      	ldr	r0, [pc, #28]	; (800b820 <BSP_SD_Init+0x30>)
 800b804:	f7fe fbbb 	bl	8009f7e <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800b808:	4605      	mov	r5, r0
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d1f6      	bne.n	800b7fc <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800b80e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b812:	4803      	ldr	r0, [pc, #12]	; (800b820 <BSP_SD_Init+0x30>)
 800b814:	f7fe faf6 	bl	8009e04 <HAL_SD_ConfigWideBusOperation>
 800b818:	2800      	cmp	r0, #0
 800b81a:	d0ef      	beq.n	800b7fc <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 800b81c:	4625      	mov	r5, r4
 800b81e:	e7ed      	b.n	800b7fc <BSP_SD_Init+0xc>
 800b820:	2001ca48 	.word	0x2001ca48

0800b824 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b824:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 800b826:	4b07      	ldr	r3, [pc, #28]	; (800b844 <SD_CheckStatus+0x20>)
 800b828:	2201      	movs	r2, #1
 800b82a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b82c:	f7ff ffc4 	bl	800b7b8 <BSP_SD_GetCardState>
 800b830:	b920      	cbnz	r0, 800b83c <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 800b832:	4a04      	ldr	r2, [pc, #16]	; (800b844 <SD_CheckStatus+0x20>)
 800b834:	7813      	ldrb	r3, [r2, #0]
 800b836:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b83a:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 800b83c:	4b01      	ldr	r3, [pc, #4]	; (800b844 <SD_CheckStatus+0x20>)
 800b83e:	7818      	ldrb	r0, [r3, #0]
}
 800b840:	bd08      	pop	{r3, pc}
 800b842:	bf00      	nop
 800b844:	20000b40 	.word	0x20000b40

0800b848 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b848:	b510      	push	{r4, lr}
 800b84a:	4604      	mov	r4, r0
Stat = STA_NOINIT;
 800b84c:	4b07      	ldr	r3, [pc, #28]	; (800b86c <SD_initialize+0x24>)
 800b84e:	2201      	movs	r2, #1
 800b850:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b852:	f7ff ffcd 	bl	800b7f0 <BSP_SD_Init>
 800b856:	b110      	cbz	r0, 800b85e <SD_initialize+0x16>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b858:	4b04      	ldr	r3, [pc, #16]	; (800b86c <SD_initialize+0x24>)
 800b85a:	7818      	ldrb	r0, [r3, #0]
}
 800b85c:	bd10      	pop	{r4, pc}
    Stat = SD_CheckStatus(lun);
 800b85e:	4620      	mov	r0, r4
 800b860:	f7ff ffe0 	bl	800b824 <SD_CheckStatus>
 800b864:	4b01      	ldr	r3, [pc, #4]	; (800b86c <SD_initialize+0x24>)
 800b866:	7018      	strb	r0, [r3, #0]
 800b868:	e7f6      	b.n	800b858 <SD_initialize+0x10>
 800b86a:	bf00      	nop
 800b86c:	20000b40 	.word	0x20000b40

0800b870 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b870:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800b872:	f7ff ffd7 	bl	800b824 <SD_CheckStatus>
}
 800b876:	bd08      	pop	{r3, pc}

0800b878 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b878:	b508      	push	{r3, lr}
 800b87a:	4608      	mov	r0, r1
 800b87c:	4611      	mov	r1, r2
 800b87e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800b880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b884:	f7ff ff78 	bl	800b778 <BSP_SD_ReadBlocks>
 800b888:	b930      	cbnz	r0, 800b898 <SD_read+0x20>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800b88a:	f7ff ff95 	bl	800b7b8 <BSP_SD_GetCardState>
 800b88e:	4603      	mov	r3, r0
 800b890:	2800      	cmp	r0, #0
 800b892:	d1fa      	bne.n	800b88a <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800b894:	4618      	mov	r0, r3
 800b896:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e7fb      	b.n	800b894 <SD_read+0x1c>

0800b89c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b89c:	b508      	push	{r3, lr}
 800b89e:	4608      	mov	r0, r1
 800b8a0:	4611      	mov	r1, r2
 800b8a2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800b8a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8a8:	f7ff ff76 	bl	800b798 <BSP_SD_WriteBlocks>
 800b8ac:	b930      	cbnz	r0, 800b8bc <SD_write+0x20>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800b8ae:	f7ff ff83 	bl	800b7b8 <BSP_SD_GetCardState>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d1fa      	bne.n	800b8ae <SD_write+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 800b8bc:	2301      	movs	r3, #1
 800b8be:	e7fb      	b.n	800b8b8 <SD_write+0x1c>

0800b8c0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b8c0:	b530      	push	{r4, r5, lr}
 800b8c2:	b08b      	sub	sp, #44	; 0x2c
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b8c4:	4b13      	ldr	r3, [pc, #76]	; (800b914 <SD_ioctl+0x54>)
 800b8c6:	7818      	ldrb	r0, [r3, #0]
 800b8c8:	f010 0401 	ands.w	r4, r0, #1
 800b8cc:	d11b      	bne.n	800b906 <SD_ioctl+0x46>
 800b8ce:	4615      	mov	r5, r2

  switch (cmd)
 800b8d0:	2903      	cmp	r1, #3
 800b8d2:	d81c      	bhi.n	800b90e <SD_ioctl+0x4e>
 800b8d4:	e8df f001 	tbb	[pc, r1]
 800b8d8:	100a0402 	.word	0x100a0402
 800b8dc:	460c      	mov	r4, r1
 800b8de:	e013      	b.n	800b908 <SD_ioctl+0x48>
    res = RES_OK;
    break;

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b8e0:	a801      	add	r0, sp, #4
 800b8e2:	f7ff ff73 	bl	800b7cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b8e6:	9b07      	ldr	r3, [sp, #28]
 800b8e8:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800b8ea:	e00d      	b.n	800b908 <SD_ioctl+0x48>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b8ec:	a801      	add	r0, sp, #4
 800b8ee:	f7ff ff6d 	bl	800b7cc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b8f2:	9b08      	ldr	r3, [sp, #32]
 800b8f4:	802b      	strh	r3, [r5, #0]
    res = RES_OK;
    break;
 800b8f6:	e007      	b.n	800b908 <SD_ioctl+0x48>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b8f8:	a801      	add	r0, sp, #4
 800b8fa:	f7ff ff67 	bl	800b7cc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b8fe:	9b08      	ldr	r3, [sp, #32]
 800b900:	0a5b      	lsrs	r3, r3, #9
 800b902:	602b      	str	r3, [r5, #0]
    res = RES_OK;
    break;
 800b904:	e000      	b.n	800b908 <SD_ioctl+0x48>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b906:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800b908:	4620      	mov	r0, r4
 800b90a:	b00b      	add	sp, #44	; 0x2c
 800b90c:	bd30      	pop	{r4, r5, pc}
    res = RES_PARERR;
 800b90e:	2404      	movs	r4, #4
 800b910:	e7fa      	b.n	800b908 <SD_ioctl+0x48>
 800b912:	bf00      	nop
 800b914:	20000b40 	.word	0x20000b40

0800b918 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b918:	b508      	push	{r3, lr}
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b91a:	4b04      	ldr	r3, [pc, #16]	; (800b92c <disk_status+0x14>)
 800b91c:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800b920:	6852      	ldr	r2, [r2, #4]
 800b922:	6852      	ldr	r2, [r2, #4]
 800b924:	4403      	add	r3, r0
 800b926:	7a18      	ldrb	r0, [r3, #8]
 800b928:	4790      	blx	r2
  return stat;
}
 800b92a:	bd08      	pop	{r3, pc}
 800b92c:	2001dfd8 	.word	0x2001dfd8

0800b930 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b930:	b508      	push	{r3, lr}
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800b932:	4b08      	ldr	r3, [pc, #32]	; (800b954 <disk_initialize+0x24>)
 800b934:	5c1b      	ldrb	r3, [r3, r0]
 800b936:	b953      	cbnz	r3, 800b94e <disk_initialize+0x1e>
  {
    disk.is_initialized[pdrv] = 1;
 800b938:	4b06      	ldr	r3, [pc, #24]	; (800b954 <disk_initialize+0x24>)
 800b93a:	2201      	movs	r2, #1
 800b93c:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b93e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800b942:	6852      	ldr	r2, [r2, #4]
 800b944:	6812      	ldr	r2, [r2, #0]
 800b946:	4403      	add	r3, r0
 800b948:	7a18      	ldrb	r0, [r3, #8]
 800b94a:	4790      	blx	r2
  }
  return stat;
}
 800b94c:	bd08      	pop	{r3, pc}
  DSTATUS stat = RES_OK;
 800b94e:	2000      	movs	r0, #0
 800b950:	e7fc      	b.n	800b94c <disk_initialize+0x1c>
 800b952:	bf00      	nop
 800b954:	2001dfd8 	.word	0x2001dfd8

0800b958 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b958:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b95a:	4c04      	ldr	r4, [pc, #16]	; (800b96c <disk_read+0x14>)
 800b95c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800b960:	686d      	ldr	r5, [r5, #4]
 800b962:	68ad      	ldr	r5, [r5, #8]
 800b964:	4404      	add	r4, r0
 800b966:	7a20      	ldrb	r0, [r4, #8]
 800b968:	47a8      	blx	r5
  return res;
}
 800b96a:	bd38      	pop	{r3, r4, r5, pc}
 800b96c:	2001dfd8 	.word	0x2001dfd8

0800b970 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b970:	b538      	push	{r3, r4, r5, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b972:	4c04      	ldr	r4, [pc, #16]	; (800b984 <disk_write+0x14>)
 800b974:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800b978:	686d      	ldr	r5, [r5, #4]
 800b97a:	68ed      	ldr	r5, [r5, #12]
 800b97c:	4404      	add	r4, r0
 800b97e:	7a20      	ldrb	r0, [r4, #8]
 800b980:	47a8      	blx	r5
  return res;
}
 800b982:	bd38      	pop	{r3, r4, r5, pc}
 800b984:	2001dfd8 	.word	0x2001dfd8

0800b988 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b988:	b510      	push	{r4, lr}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b98a:	4b04      	ldr	r3, [pc, #16]	; (800b99c <disk_ioctl+0x14>)
 800b98c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800b990:	6864      	ldr	r4, [r4, #4]
 800b992:	6924      	ldr	r4, [r4, #16]
 800b994:	4403      	add	r3, r0
 800b996:	7a18      	ldrb	r0, [r3, #8]
 800b998:	47a0      	blx	r4
  return res;
}
 800b99a:	bd10      	pop	{r4, pc}
 800b99c:	2001dfd8 	.word	0x2001dfd8

0800b9a0 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
 800b9a0:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
 800b9a2:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800b9a4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800b9a8:	4770      	bx	lr

0800b9aa <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
 800b9aa:	78c3      	ldrb	r3, [r0, #3]
	rv = rv << 8 | ptr[2];
 800b9ac:	7882      	ldrb	r2, [r0, #2]
 800b9ae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
	rv = rv << 8 | ptr[1];
 800b9b2:	7843      	ldrb	r3, [r0, #1]
 800b9b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 800b9b8:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
 800b9ba:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800b9be:	4770      	bx	lr

0800b9c0 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800b9c0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
 800b9c2:	0a09      	lsrs	r1, r1, #8
 800b9c4:	7041      	strb	r1, [r0, #1]
}
 800b9c6:	4770      	bx	lr

0800b9c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 800b9c8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9ca:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800b9ce:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9d0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800b9d4:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 800b9d6:	0e09      	lsrs	r1, r1, #24
 800b9d8:	70c1      	strb	r1, [r0, #3]
}
 800b9da:	4770      	bx	lr

0800b9dc <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
 800b9dc:	4694      	mov	ip, r2
 800b9de:	b132      	cbz	r2, 800b9ee <mem_cpy+0x12>
		do {
			*d++ = *s++;
 800b9e0:	780a      	ldrb	r2, [r1, #0]
 800b9e2:	3101      	adds	r1, #1
 800b9e4:	7002      	strb	r2, [r0, #0]
 800b9e6:	3001      	adds	r0, #1
		} while (--cnt);
 800b9e8:	f1bc 0c01 	subs.w	ip, ip, #1
 800b9ec:	d1f8      	bne.n	800b9e0 <mem_cpy+0x4>
	}
}
 800b9ee:	4770      	bx	lr

0800b9f0 <mem_set>:
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 800b9f0:	7001      	strb	r1, [r0, #0]
 800b9f2:	3001      	adds	r0, #1
	} while (--cnt);
 800b9f4:	3a01      	subs	r2, #1
 800b9f6:	d1fb      	bne.n	800b9f0 <mem_set>
}
 800b9f8:	4770      	bx	lr

0800b9fa <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b9fa:	4684      	mov	ip, r0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
 800b9fc:	f89c 0000 	ldrb.w	r0, [ip]
 800ba00:	f10c 0c01 	add.w	ip, ip, #1
 800ba04:	780b      	ldrb	r3, [r1, #0]
 800ba06:	3101      	adds	r1, #1
 800ba08:	1ac0      	subs	r0, r0, r3
	} while (--cnt && r == 0);
 800ba0a:	3a01      	subs	r2, #1
 800ba0c:	d001      	beq.n	800ba12 <mem_cmp+0x18>
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d0f4      	beq.n	800b9fc <mem_cmp+0x2>

	return r;
}
 800ba12:	4770      	bx	lr

0800ba14 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ba14:	4603      	mov	r3, r0
	while (*str && *str != chr) str++;
 800ba16:	e000      	b.n	800ba1a <chk_chr+0x6>
 800ba18:	3301      	adds	r3, #1
 800ba1a:	7818      	ldrb	r0, [r3, #0]
 800ba1c:	b108      	cbz	r0, 800ba22 <chk_chr+0xe>
 800ba1e:	4288      	cmp	r0, r1
 800ba20:	d1fa      	bne.n	800ba18 <chk_chr+0x4>
	return *str;
}
 800ba22:	4770      	bx	lr

0800ba24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ba24:	b410      	push	{r4}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ba26:	f04f 0c00 	mov.w	ip, #0
 800ba2a:	4663      	mov	r3, ip
 800ba2c:	e002      	b.n	800ba34 <chk_lock+0x10>
		if (Files[i].fs) {	/* Existing entry */
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
				Files[i].clu == dp->obj.sclust &&
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 800ba2e:	f04f 0c01 	mov.w	ip, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ba32:	3301      	adds	r3, #1
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d815      	bhi.n	800ba64 <chk_lock+0x40>
		if (Files[i].fs) {	/* Existing entry */
 800ba38:	011a      	lsls	r2, r3, #4
 800ba3a:	4c18      	ldr	r4, [pc, #96]	; (800ba9c <chk_lock+0x78>)
 800ba3c:	58a2      	ldr	r2, [r4, r2]
 800ba3e:	2a00      	cmp	r2, #0
 800ba40:	d0f5      	beq.n	800ba2e <chk_lock+0xa>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ba42:	6804      	ldr	r4, [r0, #0]
 800ba44:	42a2      	cmp	r2, r4
 800ba46:	d1f4      	bne.n	800ba32 <chk_lock+0xe>
				Files[i].clu == dp->obj.sclust &&
 800ba48:	4a14      	ldr	r2, [pc, #80]	; (800ba9c <chk_lock+0x78>)
 800ba4a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800ba4e:	6854      	ldr	r4, [r2, #4]
 800ba50:	6882      	ldr	r2, [r0, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ba52:	4294      	cmp	r4, r2
 800ba54:	d1ed      	bne.n	800ba32 <chk_lock+0xe>
				Files[i].ofs == dp->dptr) break;
 800ba56:	4a11      	ldr	r2, [pc, #68]	; (800ba9c <chk_lock+0x78>)
 800ba58:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800ba5c:	6894      	ldr	r4, [r2, #8]
 800ba5e:	6942      	ldr	r2, [r0, #20]
				Files[i].clu == dp->obj.sclust &&
 800ba60:	4294      	cmp	r4, r2
 800ba62:	d1e6      	bne.n	800ba32 <chk_lock+0xe>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	d00b      	beq.n	800ba80 <chk_lock+0x5c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ba68:	b9b1      	cbnz	r1, 800ba98 <chk_lock+0x74>
 800ba6a:	4a0c      	ldr	r2, [pc, #48]	; (800ba9c <chk_lock+0x78>)
 800ba6c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 800ba70:	899b      	ldrh	r3, [r3, #12]
 800ba72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba76:	d00d      	beq.n	800ba94 <chk_lock+0x70>
 800ba78:	2000      	movs	r0, #0
}
 800ba7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba7e:	4770      	bx	lr
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ba80:	2902      	cmp	r1, #2
 800ba82:	bf14      	ite	ne
 800ba84:	4663      	movne	r3, ip
 800ba86:	f04c 0301 	orreq.w	r3, ip, #1
 800ba8a:	b10b      	cbz	r3, 800ba90 <chk_lock+0x6c>
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	e7f4      	b.n	800ba7a <chk_lock+0x56>
 800ba90:	2012      	movs	r0, #18
 800ba92:	e7f2      	b.n	800ba7a <chk_lock+0x56>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ba94:	2010      	movs	r0, #16
 800ba96:	e7f0      	b.n	800ba7a <chk_lock+0x56>
 800ba98:	2010      	movs	r0, #16
 800ba9a:	e7ee      	b.n	800ba7a <chk_lock+0x56>
 800ba9c:	2001ddb4 	.word	0x2001ddb4

0800baa0 <enq_lock>:
static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800baa0:	2000      	movs	r0, #0
 800baa2:	e000      	b.n	800baa6 <enq_lock+0x6>
 800baa4:	3001      	adds	r0, #1
 800baa6:	2801      	cmp	r0, #1
 800baa8:	d804      	bhi.n	800bab4 <enq_lock+0x14>
 800baaa:	0103      	lsls	r3, r0, #4
 800baac:	4a03      	ldr	r2, [pc, #12]	; (800babc <enq_lock+0x1c>)
 800baae:	58d3      	ldr	r3, [r2, r3]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1f7      	bne.n	800baa4 <enq_lock+0x4>
	return (i == _FS_LOCK) ? 0 : 1;
}
 800bab4:	3802      	subs	r0, #2
 800bab6:	bf18      	it	ne
 800bab8:	2001      	movne	r0, #1
 800baba:	4770      	bx	lr
 800babc:	2001ddb4 	.word	0x2001ddb4

0800bac0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bac0:	b470      	push	{r4, r5, r6}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bac2:	2300      	movs	r3, #0
 800bac4:	e000      	b.n	800bac8 <inc_lock+0x8>
 800bac6:	3301      	adds	r3, #1
 800bac8:	2b01      	cmp	r3, #1
 800baca:	d813      	bhi.n	800baf4 <inc_lock+0x34>
		if (Files[i].fs == dp->obj.fs &&
 800bacc:	011a      	lsls	r2, r3, #4
 800bace:	4c24      	ldr	r4, [pc, #144]	; (800bb60 <inc_lock+0xa0>)
 800bad0:	58a4      	ldr	r4, [r4, r2]
 800bad2:	6802      	ldr	r2, [r0, #0]
 800bad4:	4294      	cmp	r4, r2
 800bad6:	d1f6      	bne.n	800bac6 <inc_lock+0x6>
			Files[i].clu == dp->obj.sclust &&
 800bad8:	4a21      	ldr	r2, [pc, #132]	; (800bb60 <inc_lock+0xa0>)
 800bada:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800bade:	6854      	ldr	r4, [r2, #4]
 800bae0:	6882      	ldr	r2, [r0, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bae2:	4294      	cmp	r4, r2
 800bae4:	d1ef      	bne.n	800bac6 <inc_lock+0x6>
			Files[i].ofs == dp->dptr) break;
 800bae6:	4a1e      	ldr	r2, [pc, #120]	; (800bb60 <inc_lock+0xa0>)
 800bae8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800baec:	6894      	ldr	r4, [r2, #8]
 800baee:	6942      	ldr	r2, [r0, #20]
			Files[i].clu == dp->obj.sclust &&
 800baf0:	4294      	cmp	r4, r2
 800baf2:	d1e8      	bne.n	800bac6 <inc_lock+0x6>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	d00d      	beq.n	800bb14 <inc_lock+0x54>
		Files[i].clu = dp->obj.sclust;
		Files[i].ofs = dp->dptr;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800baf8:	b121      	cbz	r1, 800bb04 <inc_lock+0x44>
 800bafa:	4a19      	ldr	r2, [pc, #100]	; (800bb60 <inc_lock+0xa0>)
 800bafc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800bb00:	8992      	ldrh	r2, [r2, #12]
 800bb02:	bb52      	cbnz	r2, 800bb5a <inc_lock+0x9a>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bb04:	b9f1      	cbnz	r1, 800bb44 <inc_lock+0x84>
 800bb06:	4a16      	ldr	r2, [pc, #88]	; (800bb60 <inc_lock+0xa0>)
 800bb08:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800bb0c:	8991      	ldrh	r1, [r2, #12]
 800bb0e:	3101      	adds	r1, #1
 800bb10:	b289      	uxth	r1, r1
 800bb12:	e019      	b.n	800bb48 <inc_lock+0x88>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bb14:	2300      	movs	r3, #0
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d805      	bhi.n	800bb26 <inc_lock+0x66>
 800bb1a:	011a      	lsls	r2, r3, #4
 800bb1c:	4c10      	ldr	r4, [pc, #64]	; (800bb60 <inc_lock+0xa0>)
 800bb1e:	58a2      	ldr	r2, [r4, r2]
 800bb20:	b10a      	cbz	r2, 800bb26 <inc_lock+0x66>
 800bb22:	3301      	adds	r3, #1
 800bb24:	e7f7      	b.n	800bb16 <inc_lock+0x56>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bb26:	2b02      	cmp	r3, #2
 800bb28:	d015      	beq.n	800bb56 <inc_lock+0x96>
		Files[i].fs = dp->obj.fs;
 800bb2a:	4d0d      	ldr	r5, [pc, #52]	; (800bb60 <inc_lock+0xa0>)
 800bb2c:	011c      	lsls	r4, r3, #4
 800bb2e:	eb05 1203 	add.w	r2, r5, r3, lsl #4
 800bb32:	6806      	ldr	r6, [r0, #0]
 800bb34:	512e      	str	r6, [r5, r4]
		Files[i].clu = dp->obj.sclust;
 800bb36:	6884      	ldr	r4, [r0, #8]
 800bb38:	6054      	str	r4, [r2, #4]
		Files[i].ofs = dp->dptr;
 800bb3a:	6940      	ldr	r0, [r0, #20]
 800bb3c:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 800bb3e:	2000      	movs	r0, #0
 800bb40:	8190      	strh	r0, [r2, #12]
 800bb42:	e7d9      	b.n	800baf8 <inc_lock+0x38>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bb44:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bb48:	4a05      	ldr	r2, [pc, #20]	; (800bb60 <inc_lock+0xa0>)
 800bb4a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 800bb4e:	8191      	strh	r1, [r2, #12]

	return i + 1;
 800bb50:	1c58      	adds	r0, r3, #1
}
 800bb52:	bc70      	pop	{r4, r5, r6}
 800bb54:	4770      	bx	lr
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bb56:	2000      	movs	r0, #0
 800bb58:	e7fb      	b.n	800bb52 <inc_lock+0x92>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	e7f9      	b.n	800bb52 <inc_lock+0x92>
 800bb5e:	bf00      	nop
 800bb60:	2001ddb4 	.word	0x2001ddb4

0800bb64 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bb64:	3801      	subs	r0, #1
 800bb66:	2801      	cmp	r0, #1
 800bb68:	d815      	bhi.n	800bb96 <dec_lock+0x32>
		n = Files[i].ctr;
 800bb6a:	4b0d      	ldr	r3, [pc, #52]	; (800bba0 <dec_lock+0x3c>)
 800bb6c:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800bb70:	899b      	ldrh	r3, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bb72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb76:	d003      	beq.n	800bb80 <dec_lock+0x1c>
		if (n > 0) n--;				/* Decrement read mode open count */
 800bb78:	b11b      	cbz	r3, 800bb82 <dec_lock+0x1e>
 800bb7a:	3b01      	subs	r3, #1
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	e000      	b.n	800bb82 <dec_lock+0x1e>
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bb80:	2300      	movs	r3, #0
		Files[i].ctr = n;
 800bb82:	4a07      	ldr	r2, [pc, #28]	; (800bba0 <dec_lock+0x3c>)
 800bb84:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 800bb88:	8193      	strh	r3, [r2, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bb8a:	b933      	cbnz	r3, 800bb9a <dec_lock+0x36>
 800bb8c:	0103      	lsls	r3, r0, #4
 800bb8e:	2000      	movs	r0, #0
 800bb90:	4a03      	ldr	r2, [pc, #12]	; (800bba0 <dec_lock+0x3c>)
 800bb92:	50d0      	str	r0, [r2, r3]
 800bb94:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bb96:	2002      	movs	r0, #2
 800bb98:	4770      	bx	lr
		res = FR_OK;
 800bb9a:	2000      	movs	r0, #0
	}
	return res;
}
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	2001ddb4 	.word	0x2001ddb4

0800bba4 <clear_lock>:
	FATFS *fs
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bba4:	2300      	movs	r3, #0
 800bba6:	e003      	b.n	800bbb0 <clear_lock+0xc>
		if (Files[i].fs == fs) Files[i].fs = 0;
	}
}
 800bba8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbac:	4770      	bx	lr
	for (i = 0; i < _FS_LOCK; i++) {
 800bbae:	3301      	adds	r3, #1
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d811      	bhi.n	800bbd8 <clear_lock+0x34>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bbb4:	011a      	lsls	r2, r3, #4
 800bbb6:	4909      	ldr	r1, [pc, #36]	; (800bbdc <clear_lock+0x38>)
 800bbb8:	588a      	ldr	r2, [r1, r2]
 800bbba:	4282      	cmp	r2, r0
 800bbbc:	d1f7      	bne.n	800bbae <clear_lock+0xa>
{
 800bbbe:	b410      	push	{r4}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bbc0:	011a      	lsls	r2, r3, #4
 800bbc2:	2400      	movs	r4, #0
 800bbc4:	508c      	str	r4, [r1, r2]
	for (i = 0; i < _FS_LOCK; i++) {
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d8ed      	bhi.n	800bba8 <clear_lock+0x4>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bbcc:	011a      	lsls	r2, r3, #4
 800bbce:	4903      	ldr	r1, [pc, #12]	; (800bbdc <clear_lock+0x38>)
 800bbd0:	588a      	ldr	r2, [r1, r2]
 800bbd2:	4282      	cmp	r2, r0
 800bbd4:	d1f7      	bne.n	800bbc6 <clear_lock+0x22>
 800bbd6:	e7f3      	b.n	800bbc0 <clear_lock+0x1c>
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	2001ddb4 	.word	0x2001ddb4

0800bbe0 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
 800bbe0:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bbe2:	6983      	ldr	r3, [r0, #24]
 800bbe4:	3b02      	subs	r3, #2
 800bbe6:	428b      	cmp	r3, r1
 800bbe8:	d904      	bls.n	800bbf4 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
 800bbea:	8943      	ldrh	r3, [r0, #10]
 800bbec:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800bbee:	fb01 0003 	mla	r0, r1, r3, r0
 800bbf2:	4770      	bx	lr
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bbf4:	2000      	movs	r0, #0
}
 800bbf6:	4770      	bx	lr

0800bbf8 <clmt_clust>:
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bbf8:	6802      	ldr	r2, [r0, #0]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bbfa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800bbfc:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bbfe:	0a49      	lsrs	r1, r1, #9
 800bc00:	8952      	ldrh	r2, [r2, #10]
 800bc02:	fbb1 f1f2 	udiv	r1, r1, r2
 800bc06:	e001      	b.n	800bc0c <clmt_clust+0x14>
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
		if (ncl == 0) return 0;	/* End of table? (error) */
		if (cl < ncl) break;	/* In this fragment? */
		cl -= ncl; tbl++;		/* Next fragment */
 800bc08:	1a09      	subs	r1, r1, r0
 800bc0a:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bc0c:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bc0e:	b118      	cbz	r0, 800bc18 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 800bc10:	4281      	cmp	r1, r0
 800bc12:	d2f9      	bcs.n	800bc08 <clmt_clust+0x10>
	}
	return cl + *tbl;	/* Return the cluster number */
 800bc14:	6858      	ldr	r0, [r3, #4]
 800bc16:	4408      	add	r0, r1
}
 800bc18:	4770      	bx	lr

0800bc1a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bc1a:	b570      	push	{r4, r5, r6, lr}
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bc20:	f101 001a 	add.w	r0, r1, #26
 800bc24:	f7ff febc 	bl	800b9a0 <ld_word>
	if (fs->fs_type == FS_FAT32) {
 800bc28:	7833      	ldrb	r3, [r6, #0]
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d000      	beq.n	800bc30 <ld_clust+0x16>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
	}

	return cl;
}
 800bc2e:	bd70      	pop	{r4, r5, r6, pc}
 800bc30:	4604      	mov	r4, r0
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bc32:	f105 0014 	add.w	r0, r5, #20
 800bc36:	f7ff feb3 	bl	800b9a0 <ld_word>
 800bc3a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	return cl;
 800bc3e:	e7f6      	b.n	800bc2e <ld_clust+0x14>

0800bc40 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bc40:	b570      	push	{r4, r5, r6, lr}
 800bc42:	4606      	mov	r6, r0
 800bc44:	460c      	mov	r4, r1
 800bc46:	4615      	mov	r5, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bc48:	b291      	uxth	r1, r2
 800bc4a:	f104 001a 	add.w	r0, r4, #26
 800bc4e:	f7ff feb7 	bl	800b9c0 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bc52:	7833      	ldrb	r3, [r6, #0]
 800bc54:	2b03      	cmp	r3, #3
 800bc56:	d000      	beq.n	800bc5a <st_clust+0x1a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
	}
}
 800bc58:	bd70      	pop	{r4, r5, r6, pc}
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bc5a:	0c29      	lsrs	r1, r5, #16
 800bc5c:	f104 0014 	add.w	r0, r4, #20
 800bc60:	f7ff feae 	bl	800b9c0 <st_word>
}
 800bc64:	e7f8      	b.n	800bc58 <st_clust+0x18>
	...

0800bc68 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800bc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc6c:	4680      	mov	r8, r0
 800bc6e:	460e      	mov	r6, r1
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800bc70:	f101 001a 	add.w	r0, r1, #26
 800bc74:	f7ff fe94 	bl	800b9a0 <ld_word>
 800bc78:	bb50      	cbnz	r0, 800bcd0 <pick_lfn+0x68>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800bc7a:	7835      	ldrb	r5, [r6, #0]
 800bc7c:	f025 0540 	bic.w	r5, r5, #64	; 0x40
 800bc80:	3d01      	subs	r5, #1
 800bc82:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800bc86:	eb05 0583 	add.w	r5, r5, r3, lsl #2

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bc8a:	2701      	movs	r7, #1
 800bc8c:	2400      	movs	r4, #0
 800bc8e:	e004      	b.n	800bc9a <pick_lfn+0x32>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
		if (wc) {
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
			lfnbuf[i++] = wc = uc;			/* Store it */
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bc90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bc94:	4298      	cmp	r0, r3
 800bc96:	d120      	bne.n	800bcda <pick_lfn+0x72>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800bc98:	3401      	adds	r4, #1
 800bc9a:	2c0c      	cmp	r4, #12
 800bc9c:	d80d      	bhi.n	800bcba <pick_lfn+0x52>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800bc9e:	4b12      	ldr	r3, [pc, #72]	; (800bce8 <pick_lfn+0x80>)
 800bca0:	5d18      	ldrb	r0, [r3, r4]
 800bca2:	4430      	add	r0, r6
 800bca4:	f7ff fe7c 	bl	800b9a0 <ld_word>
		if (wc) {
 800bca8:	2f00      	cmp	r7, #0
 800bcaa:	d0f1      	beq.n	800bc90 <pick_lfn+0x28>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800bcac:	2dfe      	cmp	r5, #254	; 0xfe
 800bcae:	d812      	bhi.n	800bcd6 <pick_lfn+0x6e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800bcb0:	f828 0015 	strh.w	r0, [r8, r5, lsl #1]
 800bcb4:	4607      	mov	r7, r0
 800bcb6:	3501      	adds	r5, #1
 800bcb8:	e7ee      	b.n	800bc98 <pick_lfn+0x30>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800bcba:	7833      	ldrb	r3, [r6, #0]
 800bcbc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bcc0:	d00d      	beq.n	800bcde <pick_lfn+0x76>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800bcc2:	2dfe      	cmp	r5, #254	; 0xfe
 800bcc4:	d80d      	bhi.n	800bce2 <pick_lfn+0x7a>
		lfnbuf[i] = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f828 3015 	strh.w	r3, [r8, r5, lsl #1]
	}

	return 1;		/* The part of LFN is valid */
 800bccc:	2001      	movs	r0, #1
 800bcce:	e000      	b.n	800bcd2 <pick_lfn+0x6a>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800bcd0:	2000      	movs	r0, #0
}
 800bcd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800bcd6:	2000      	movs	r0, #0
 800bcd8:	e7fb      	b.n	800bcd2 <pick_lfn+0x6a>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800bcda:	2000      	movs	r0, #0
 800bcdc:	e7f9      	b.n	800bcd2 <pick_lfn+0x6a>
	return 1;		/* The part of LFN is valid */
 800bcde:	2001      	movs	r0, #1
 800bce0:	e7f7      	b.n	800bcd2 <pick_lfn+0x6a>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800bce2:	2000      	movs	r0, #0
 800bce4:	e7f5      	b.n	800bcd2 <pick_lfn+0x6a>
 800bce6:	bf00      	nop
 800bce8:	08019a58 	.word	0x08019a58

0800bcec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800bcec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcf0:	4680      	mov	r8, r0
 800bcf2:	460f      	mov	r7, r1
 800bcf4:	4691      	mov	r9, r2
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800bcf6:	734b      	strb	r3, [r1, #13]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800bcf8:	230f      	movs	r3, #15
 800bcfa:	72cb      	strb	r3, [r1, #11]
	dir[LDIR_Type] = 0;
 800bcfc:	2400      	movs	r4, #0
 800bcfe:	730c      	strb	r4, [r1, #12]
	st_word(dir + LDIR_FstClusLO, 0);
 800bd00:	4621      	mov	r1, r4
 800bd02:	f107 001a 	add.w	r0, r7, #26
 800bd06:	f7ff fe5b 	bl	800b9c0 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800bd0a:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 800bd0e:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800bd12:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	s = wc = 0;
 800bd16:	4625      	mov	r5, r4
 800bd18:	e002      	b.n	800bd20 <put_lfn+0x34>
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
		st_word(dir + LfnOfs[s], wc);		/* Put it */
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
	} while (++s < 13);
 800bd1a:	3401      	adds	r4, #1
 800bd1c:	2c0c      	cmp	r4, #12
 800bd1e:	d811      	bhi.n	800bd44 <put_lfn+0x58>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800bd20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd24:	429d      	cmp	r5, r3
 800bd26:	d002      	beq.n	800bd2e <put_lfn+0x42>
 800bd28:	f838 5016 	ldrh.w	r5, [r8, r6, lsl #1]
 800bd2c:	3601      	adds	r6, #1
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800bd2e:	4b0c      	ldr	r3, [pc, #48]	; (800bd60 <put_lfn+0x74>)
 800bd30:	5d18      	ldrb	r0, [r3, r4]
 800bd32:	4629      	mov	r1, r5
 800bd34:	4438      	add	r0, r7
 800bd36:	f7ff fe43 	bl	800b9c0 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800bd3a:	2d00      	cmp	r5, #0
 800bd3c:	d1ed      	bne.n	800bd1a <put_lfn+0x2e>
 800bd3e:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800bd42:	e7ea      	b.n	800bd1a <put_lfn+0x2e>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800bd44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bd48:	429d      	cmp	r5, r3
 800bd4a:	d002      	beq.n	800bd52 <put_lfn+0x66>
 800bd4c:	f838 3016 	ldrh.w	r3, [r8, r6, lsl #1]
 800bd50:	b90b      	cbnz	r3, 800bd56 <put_lfn+0x6a>
 800bd52:	f049 0940 	orr.w	r9, r9, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800bd56:	f887 9000 	strb.w	r9, [r7]
}
 800bd5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd5e:	bf00      	nop
 800bd60:	08019a58 	.word	0x08019a58

0800bd64 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800bd64:	b570      	push	{r4, r5, r6, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	4605      	mov	r5, r0
 800bd6a:	4616      	mov	r6, r2
 800bd6c:	461c      	mov	r4, r3
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800bd6e:	220b      	movs	r2, #11
 800bd70:	f7ff fe34 	bl	800b9dc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800bd74:	2c05      	cmp	r4, #5
 800bd76:	d811      	bhi.n	800bd9c <gen_numname+0x38>
		sr = seq;
		while (*lfn) {	/* Create a CRC */
			wc = *lfn++;
			for (i = 0; i < 16; i++) {
 800bd78:	2307      	movs	r3, #7
 800bd7a:	e01f      	b.n	800bdbc <gen_numname+0x58>
 800bd7c:	3101      	adds	r1, #1
 800bd7e:	290f      	cmp	r1, #15
 800bd80:	d80c      	bhi.n	800bd9c <gen_numname+0x38>
				sr = (sr << 1) + (wc & 1);
 800bd82:	f003 0c01 	and.w	ip, r3, #1
 800bd86:	eb0c 0444 	add.w	r4, ip, r4, lsl #1
				wc >>= 1;
 800bd8a:	085b      	lsrs	r3, r3, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800bd8c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
 800bd90:	d0f4      	beq.n	800bd7c <gen_numname+0x18>
 800bd92:	f484 3488 	eor.w	r4, r4, #69632	; 0x11000
 800bd96:	f084 0421 	eor.w	r4, r4, #33	; 0x21
 800bd9a:	e7ef      	b.n	800bd7c <gen_numname+0x18>
		while (*lfn) {	/* Create a CRC */
 800bd9c:	8833      	ldrh	r3, [r6, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0ea      	beq.n	800bd78 <gen_numname+0x14>
			wc = *lfn++;
 800bda2:	3602      	adds	r6, #2
			for (i = 0; i < 16; i++) {
 800bda4:	2100      	movs	r1, #0
 800bda6:	e7ea      	b.n	800bd7e <gen_numname+0x1a>
	/* itoa (hexdecimal) */
	i = 7;
	do {
		c = (BYTE)((seq % 16) + '0');
		if (c > '9') c += 7;
		ns[i--] = c;
 800bda8:	1e5a      	subs	r2, r3, #1
 800bdaa:	3308      	adds	r3, #8
 800bdac:	446b      	add	r3, sp
 800bdae:	f803 1c08 	strb.w	r1, [r3, #-8]
		seq /= 16;
 800bdb2:	0921      	lsrs	r1, r4, #4
	} while (seq);
 800bdb4:	2c0f      	cmp	r4, #15
 800bdb6:	d90a      	bls.n	800bdce <gen_numname+0x6a>
		ns[i--] = c;
 800bdb8:	4613      	mov	r3, r2
		seq /= 16;
 800bdba:	460c      	mov	r4, r1
		c = (BYTE)((seq % 16) + '0');
 800bdbc:	f004 020f 	and.w	r2, r4, #15
 800bdc0:	f102 0130 	add.w	r1, r2, #48	; 0x30
		if (c > '9') c += 7;
 800bdc4:	2939      	cmp	r1, #57	; 0x39
 800bdc6:	d9ef      	bls.n	800bda8 <gen_numname+0x44>
 800bdc8:	f102 0137 	add.w	r1, r2, #55	; 0x37
 800bdcc:	e7ec      	b.n	800bda8 <gen_numname+0x44>
	ns[i] = '~';
 800bdce:	217e      	movs	r1, #126	; 0x7e
 800bdd0:	f102 0308 	add.w	r3, r2, #8
 800bdd4:	446b      	add	r3, sp
 800bdd6:	f803 1c08 	strb.w	r1, [r3, #-8]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800bdda:	2300      	movs	r3, #0
 800bddc:	e000      	b.n	800bde0 <gen_numname+0x7c>
 800bdde:	3301      	adds	r3, #1
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d209      	bcs.n	800bdf8 <gen_numname+0x94>
 800bde4:	5ce9      	ldrb	r1, [r5, r3]
 800bde6:	2920      	cmp	r1, #32
 800bde8:	d1f9      	bne.n	800bdde <gen_numname+0x7a>
 800bdea:	e005      	b.n	800bdf8 <gen_numname+0x94>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bdec:	2020      	movs	r0, #32
 800bdee:	1c59      	adds	r1, r3, #1
 800bdf0:	54e8      	strb	r0, [r5, r3]
	} while (j < 8);
 800bdf2:	2907      	cmp	r1, #7
 800bdf4:	d809      	bhi.n	800be0a <gen_numname+0xa6>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	2a07      	cmp	r2, #7
 800bdfa:	d8f7      	bhi.n	800bdec <gen_numname+0x88>
 800bdfc:	f102 0108 	add.w	r1, r2, #8
 800be00:	4469      	add	r1, sp
 800be02:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 800be06:	3201      	adds	r2, #1
 800be08:	e7f1      	b.n	800bdee <gen_numname+0x8a>
}
 800be0a:	b002      	add	sp, #8
 800be0c:	bd70      	pop	{r4, r5, r6, pc}

0800be0e <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800be0e:	4601      	mov	r1, r0
	BYTE sum = 0;
	UINT n = 11;
 800be10:	f04f 0c0b 	mov.w	ip, #11
	BYTE sum = 0;
 800be14:	2000      	movs	r0, #0

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800be16:	01c3      	lsls	r3, r0, #7
 800be18:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
 800be1c:	780a      	ldrb	r2, [r1, #0]
 800be1e:	3101      	adds	r1, #1
 800be20:	fa52 f383 	uxtab	r3, r2, r3
 800be24:	b2d8      	uxtb	r0, r3
	} while (--n);
 800be26:	f1bc 0c01 	subs.w	ip, ip, #1
 800be2a:	d1f4      	bne.n	800be16 <sum_sfn+0x8>
	return sum;
}
 800be2c:	4770      	bx	lr
	...

0800be30 <get_achar>:
)
{
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800be30:	6803      	ldr	r3, [r0, #0]
 800be32:	1c5a      	adds	r2, r3, #1
 800be34:	6002      	str	r2, [r0, #0]
 800be36:	7818      	ldrb	r0, [r3, #0]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800be38:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800be3c:	b29b      	uxth	r3, r3
 800be3e:	2b19      	cmp	r3, #25
 800be40:	d801      	bhi.n	800be46 <get_achar+0x16>
 800be42:	3820      	subs	r0, #32
 800be44:	b280      	uxth	r0, r0
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800be46:	287f      	cmp	r0, #127	; 0x7f
 800be48:	d902      	bls.n	800be50 <get_achar+0x20>
 800be4a:	3880      	subs	r0, #128	; 0x80
 800be4c:	4b01      	ldr	r3, [pc, #4]	; (800be54 <get_achar+0x24>)
 800be4e:	5c18      	ldrb	r0, [r3, r0]
#endif
	return chr;
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 800be50:	4770      	bx	lr
 800be52:	bf00      	nop
 800be54:	080199d8 	.word	0x080199d8

0800be58 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800be58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5c:	b084      	sub	sp, #16
 800be5e:	4607      	mov	r7, r0
 800be60:	9101      	str	r1, [sp, #4]
 800be62:	4614      	mov	r4, r2
 800be64:	4698      	mov	r8, r3
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800be66:	4626      	mov	r6, r4
 800be68:	3c01      	subs	r4, #1
 800be6a:	b14e      	cbz	r6, 800be80 <pattern_matching+0x28>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800be6c:	a801      	add	r0, sp, #4
 800be6e:	f7ff ffdf 	bl	800be30 <get_achar>
 800be72:	2800      	cmp	r0, #0
 800be74:	d1f7      	bne.n	800be66 <pattern_matching+0xe>
 800be76:	2600      	movs	r6, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800be78:	4630      	mov	r0, r6
 800be7a:	b004      	add	sp, #16
 800be7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800be80:	783b      	ldrb	r3, [r7, #0]
 800be82:	bb1b      	cbnz	r3, 800becc <pattern_matching+0x74>
 800be84:	f1b8 0f00 	cmp.w	r8, #0
 800be88:	d020      	beq.n	800becc <pattern_matching+0x74>
 800be8a:	2601      	movs	r6, #1
 800be8c:	e7f4      	b.n	800be78 <pattern_matching+0x20>
				nm = nx = 0;
 800be8e:	4633      	mov	r3, r6
 800be90:	4632      	mov	r2, r6
					if (*pp++ == '?') nm++; else nx = 1;
 800be92:	9903      	ldr	r1, [sp, #12]
 800be94:	1c48      	adds	r0, r1, #1
 800be96:	9003      	str	r0, [sp, #12]
 800be98:	780c      	ldrb	r4, [r1, #0]
 800be9a:	2c3f      	cmp	r4, #63	; 0x3f
 800be9c:	d02d      	beq.n	800befa <pattern_matching+0xa2>
 800be9e:	2301      	movs	r3, #1
				} while (*pp == '?' || *pp == '*');
 800bea0:	7849      	ldrb	r1, [r1, #1]
 800bea2:	293f      	cmp	r1, #63	; 0x3f
 800bea4:	d0f5      	beq.n	800be92 <pattern_matching+0x3a>
 800bea6:	292a      	cmp	r1, #42	; 0x2a
 800bea8:	d0f3      	beq.n	800be92 <pattern_matching+0x3a>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800beaa:	9902      	ldr	r1, [sp, #8]
 800beac:	f7ff ffd4 	bl	800be58 <pattern_matching>
 800beb0:	bb28      	cbnz	r0, 800befe <pattern_matching+0xa6>
				nc = *np; break;	/* Branch mismatched */
 800beb2:	9b02      	ldr	r3, [sp, #8]
 800beb4:	781d      	ldrb	r5, [r3, #0]
		get_achar(&nam);			/* nam++ */
 800beb6:	a801      	add	r0, sp, #4
 800beb8:	f7ff ffba 	bl	800be30 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800bebc:	f1b8 0300 	subs.w	r3, r8, #0
 800bec0:	bf18      	it	ne
 800bec2:	2301      	movne	r3, #1
 800bec4:	2d00      	cmp	r5, #0
 800bec6:	d0d7      	beq.n	800be78 <pattern_matching+0x20>
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d0d5      	beq.n	800be78 <pattern_matching+0x20>
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800becc:	9703      	str	r7, [sp, #12]
 800bece:	9b01      	ldr	r3, [sp, #4]
 800bed0:	9302      	str	r3, [sp, #8]
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800bed2:	9b03      	ldr	r3, [sp, #12]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	2b2a      	cmp	r3, #42	; 0x2a
 800bed8:	bf18      	it	ne
 800beda:	2b3f      	cmpne	r3, #63	; 0x3f
 800bedc:	d0d7      	beq.n	800be8e <pattern_matching+0x36>
			pc = get_achar(&pp);	/* Get a pattern char */
 800bede:	a803      	add	r0, sp, #12
 800bee0:	f7ff ffa6 	bl	800be30 <get_achar>
 800bee4:	4604      	mov	r4, r0
			nc = get_achar(&np);	/* Get a name char */
 800bee6:	a802      	add	r0, sp, #8
 800bee8:	f7ff ffa2 	bl	800be30 <get_achar>
 800beec:	4605      	mov	r5, r0
			if (pc != nc) break;	/* Branch mismatched? */
 800beee:	4284      	cmp	r4, r0
 800bef0:	d1e1      	bne.n	800beb6 <pattern_matching+0x5e>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800bef2:	2c00      	cmp	r4, #0
 800bef4:	d1ed      	bne.n	800bed2 <pattern_matching+0x7a>
 800bef6:	2601      	movs	r6, #1
 800bef8:	e7be      	b.n	800be78 <pattern_matching+0x20>
					if (*pp++ == '?') nm++; else nx = 1;
 800befa:	3201      	adds	r2, #1
 800befc:	e7d0      	b.n	800bea0 <pattern_matching+0x48>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800befe:	2601      	movs	r6, #1
 800bf00:	e7ba      	b.n	800be78 <pattern_matching+0x20>

0800bf02 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bf02:	4601      	mov	r1, r0
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bf04:	6800      	ldr	r0, [r0, #0]
 800bf06:	b108      	cbz	r0, 800bf0c <get_ldnumber+0xa>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bf08:	4602      	mov	r2, r0
 800bf0a:	e003      	b.n	800bf14 <get_ldnumber+0x12>
	int vol = -1;
 800bf0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf10:	4770      	bx	lr
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bf12:	3201      	adds	r2, #1
 800bf14:	7813      	ldrb	r3, [r2, #0]
 800bf16:	2b1f      	cmp	r3, #31
 800bf18:	d901      	bls.n	800bf1e <get_ldnumber+0x1c>
 800bf1a:	2b3a      	cmp	r3, #58	; 0x3a
 800bf1c:	d1f9      	bne.n	800bf12 <get_ldnumber+0x10>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800bf1e:	2b3a      	cmp	r3, #58	; 0x3a
 800bf20:	d001      	beq.n	800bf26 <get_ldnumber+0x24>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bf22:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 800bf24:	4770      	bx	lr
			i = *tp++ - '0';
 800bf26:	4603      	mov	r3, r0
 800bf28:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bf2c:	3830      	subs	r0, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bf2e:	2809      	cmp	r0, #9
 800bf30:	bf98      	it	ls
 800bf32:	429a      	cmpls	r2, r3
 800bf34:	d103      	bne.n	800bf3e <get_ldnumber+0x3c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bf36:	b928      	cbnz	r0, 800bf44 <get_ldnumber+0x42>
					*path = ++tt;
 800bf38:	3201      	adds	r2, #1
 800bf3a:	600a      	str	r2, [r1, #0]
 800bf3c:	4770      	bx	lr
	int vol = -1;
 800bf3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf42:	4770      	bx	lr
 800bf44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
			return vol;
 800bf48:	4770      	bx	lr

0800bf4a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bf4a:	b538      	push	{r3, r4, r5, lr}
 800bf4c:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bf4e:	4604      	mov	r4, r0
 800bf50:	b198      	cbz	r0, 800bf7a <validate+0x30>
 800bf52:	6803      	ldr	r3, [r0, #0]
 800bf54:	b19b      	cbz	r3, 800bf7e <validate+0x34>
 800bf56:	781a      	ldrb	r2, [r3, #0]
 800bf58:	b1a2      	cbz	r2, 800bf84 <validate+0x3a>
 800bf5a:	8881      	ldrh	r1, [r0, #4]
 800bf5c:	88da      	ldrh	r2, [r3, #6]
 800bf5e:	4291      	cmp	r1, r2
 800bf60:	d003      	beq.n	800bf6a <validate+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 800bf62:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bf64:	2400      	movs	r4, #0
 800bf66:	602c      	str	r4, [r5, #0]
	return res;
}
 800bf68:	bd38      	pop	{r3, r4, r5, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bf6a:	7858      	ldrb	r0, [r3, #1]
 800bf6c:	f7ff fcd4 	bl	800b918 <disk_status>
 800bf70:	f010 0001 	ands.w	r0, r0, #1
 800bf74:	d109      	bne.n	800bf8a <validate+0x40>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bf76:	6824      	ldr	r4, [r4, #0]
 800bf78:	e7f5      	b.n	800bf66 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800bf7a:	2009      	movs	r0, #9
 800bf7c:	e7f3      	b.n	800bf66 <validate+0x1c>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bf7e:	461c      	mov	r4, r3
	FRESULT res = FR_INVALID_OBJECT;
 800bf80:	2009      	movs	r0, #9
 800bf82:	e7f0      	b.n	800bf66 <validate+0x1c>
 800bf84:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bf86:	2400      	movs	r4, #0
 800bf88:	e7ed      	b.n	800bf66 <validate+0x1c>
	FRESULT res = FR_INVALID_OBJECT;
 800bf8a:	2009      	movs	r0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bf8c:	2400      	movs	r4, #0
 800bf8e:	e7ea      	b.n	800bf66 <validate+0x1c>

0800bf90 <sync_window>:
{
 800bf90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bf94:	78c5      	ldrb	r5, [r0, #3]
 800bf96:	b915      	cbnz	r5, 800bf9e <sync_window+0xe>
}
 800bf98:	4628      	mov	r0, r5
 800bf9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf9e:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
 800bfa0:	6b07      	ldr	r7, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bfa2:	f100 0834 	add.w	r8, r0, #52	; 0x34
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	463a      	mov	r2, r7
 800bfaa:	4641      	mov	r1, r8
 800bfac:	7840      	ldrb	r0, [r0, #1]
 800bfae:	f7ff fcdf 	bl	800b970 <disk_write>
 800bfb2:	4605      	mov	r5, r0
 800bfb4:	b9a0      	cbnz	r0, 800bfe0 <sync_window+0x50>
			fs->wflag = 0;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bfba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfbc:	1afb      	subs	r3, r7, r3
 800bfbe:	69e2      	ldr	r2, [r4, #28]
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d2e9      	bcs.n	800bf98 <sync_window+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bfc4:	78a6      	ldrb	r6, [r4, #2]
 800bfc6:	e008      	b.n	800bfda <sync_window+0x4a>
					wsect += fs->fsize;
 800bfc8:	69e3      	ldr	r3, [r4, #28]
 800bfca:	441f      	add	r7, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 800bfcc:	2301      	movs	r3, #1
 800bfce:	463a      	mov	r2, r7
 800bfd0:	4641      	mov	r1, r8
 800bfd2:	7860      	ldrb	r0, [r4, #1]
 800bfd4:	f7ff fccc 	bl	800b970 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bfd8:	3e01      	subs	r6, #1
 800bfda:	2e01      	cmp	r6, #1
 800bfdc:	d8f4      	bhi.n	800bfc8 <sync_window+0x38>
 800bfde:	e7db      	b.n	800bf98 <sync_window+0x8>
			res = FR_DISK_ERR;
 800bfe0:	2501      	movs	r5, #1
 800bfe2:	e7d9      	b.n	800bf98 <sync_window+0x8>

0800bfe4 <move_window>:
{
 800bfe4:	b570      	push	{r4, r5, r6, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800bfe6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800bfe8:	428b      	cmp	r3, r1
 800bfea:	d102      	bne.n	800bff2 <move_window+0xe>
	FRESULT res = FR_OK;
 800bfec:	2600      	movs	r6, #0
}
 800bfee:	4630      	mov	r0, r6
 800bff0:	bd70      	pop	{r4, r5, r6, pc}
 800bff2:	4604      	mov	r4, r0
 800bff4:	460d      	mov	r5, r1
		res = sync_window(fs);		/* Write-back changes */
 800bff6:	f7ff ffcb 	bl	800bf90 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bffa:	4606      	mov	r6, r0
 800bffc:	2800      	cmp	r0, #0
 800bffe:	d1f6      	bne.n	800bfee <move_window+0xa>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c000:	2301      	movs	r3, #1
 800c002:	462a      	mov	r2, r5
 800c004:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800c008:	7860      	ldrb	r0, [r4, #1]
 800c00a:	f7ff fca5 	bl	800b958 <disk_read>
 800c00e:	b110      	cbz	r0, 800c016 <move_window+0x32>
				res = FR_DISK_ERR;
 800c010:	2601      	movs	r6, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c012:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
			fs->winsect = sector;
 800c016:	6325      	str	r5, [r4, #48]	; 0x30
 800c018:	e7e9      	b.n	800bfee <move_window+0xa>
	...

0800c01c <check_fs>:
{
 800c01c:	b538      	push	{r3, r4, r5, lr}
 800c01e:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c020:	2300      	movs	r3, #0
 800c022:	70c3      	strb	r3, [r0, #3]
 800c024:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c028:	6303      	str	r3, [r0, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c02a:	f7ff ffdb 	bl	800bfe4 <move_window>
 800c02e:	bb30      	cbnz	r0, 800c07e <check_fs+0x62>
 800c030:	4605      	mov	r5, r0
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c032:	f204 2032 	addw	r0, r4, #562	; 0x232
 800c036:	f7ff fcb3 	bl	800b9a0 <ld_word>
 800c03a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c03e:	4298      	cmp	r0, r3
 800c040:	d11f      	bne.n	800c082 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c042:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800c046:	2be9      	cmp	r3, #233	; 0xe9
 800c048:	d007      	beq.n	800c05a <check_fs+0x3e>
 800c04a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c04c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800c050:	4a0d      	ldr	r2, [pc, #52]	; (800c088 <check_fs+0x6c>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d001      	beq.n	800c05a <check_fs+0x3e>
	return 2;
 800c056:	2502      	movs	r5, #2
 800c058:	e014      	b.n	800c084 <check_fs+0x68>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c05a:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 800c05e:	f7ff fca4 	bl	800b9aa <ld_dword>
 800c062:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800c066:	4b09      	ldr	r3, [pc, #36]	; (800c08c <check_fs+0x70>)
 800c068:	4298      	cmp	r0, r3
 800c06a:	d00b      	beq.n	800c084 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c06c:	f104 0086 	add.w	r0, r4, #134	; 0x86
 800c070:	f7ff fc9b 	bl	800b9aa <ld_dword>
 800c074:	4b06      	ldr	r3, [pc, #24]	; (800c090 <check_fs+0x74>)
 800c076:	4298      	cmp	r0, r3
 800c078:	d004      	beq.n	800c084 <check_fs+0x68>
	return 2;
 800c07a:	2502      	movs	r5, #2
 800c07c:	e002      	b.n	800c084 <check_fs+0x68>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c07e:	2504      	movs	r5, #4
 800c080:	e000      	b.n	800c084 <check_fs+0x68>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c082:	2503      	movs	r5, #3
}
 800c084:	4628      	mov	r0, r5
 800c086:	bd38      	pop	{r3, r4, r5, pc}
 800c088:	009000eb 	.word	0x009000eb
 800c08c:	00544146 	.word	0x00544146
 800c090:	33544146 	.word	0x33544146

0800c094 <find_volume>:
{
 800c094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c098:	b085      	sub	sp, #20
 800c09a:	460d      	mov	r5, r1
 800c09c:	4616      	mov	r6, r2
	*rfs = 0;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
 800c0a2:	f7ff ff2e 	bl	800bf02 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800c0a6:	1e07      	subs	r7, r0, #0
 800c0a8:	f2c0 8146 	blt.w	800c338 <find_volume+0x2a4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c0ac:	4bb6      	ldr	r3, [pc, #728]	; (800c388 <find_volume+0x2f4>)
 800c0ae:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c0b2:	2c00      	cmp	r4, #0
 800c0b4:	f000 8145 	beq.w	800c342 <find_volume+0x2ae>
	*rfs = fs;							/* Return pointer to the file system object */
 800c0b8:	602c      	str	r4, [r5, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c0ba:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c0be:	7823      	ldrb	r3, [r4, #0]
 800c0c0:	b173      	cbz	r3, 800c0e0 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 800c0c2:	7860      	ldrb	r0, [r4, #1]
 800c0c4:	f7ff fc28 	bl	800b918 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c0c8:	f010 0501 	ands.w	r5, r0, #1
 800c0cc:	d108      	bne.n	800c0e0 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c0ce:	2e00      	cmp	r6, #0
 800c0d0:	f000 8133 	beq.w	800c33a <find_volume+0x2a6>
 800c0d4:	f010 0f04 	tst.w	r0, #4
 800c0d8:	f000 812f 	beq.w	800c33a <find_volume+0x2a6>
				return FR_WRITE_PROTECTED;
 800c0dc:	250a      	movs	r5, #10
 800c0de:	e12c      	b.n	800c33a <find_volume+0x2a6>
	fs->fs_type = 0;					/* Clear the file system object */
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c0e4:	b2f8      	uxtb	r0, r7
 800c0e6:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c0e8:	f7ff fc22 	bl	800b930 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c0ec:	f010 0501 	ands.w	r5, r0, #1
 800c0f0:	f040 8129 	bne.w	800c346 <find_volume+0x2b2>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c0f4:	b11e      	cbz	r6, 800c0fe <find_volume+0x6a>
 800c0f6:	f010 0f04 	tst.w	r0, #4
 800c0fa:	f040 8126 	bne.w	800c34a <find_volume+0x2b6>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c0fe:	2100      	movs	r1, #0
 800c100:	4620      	mov	r0, r4
 800c102:	f7ff ff8b 	bl	800c01c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c106:	2802      	cmp	r0, #2
 800c108:	f000 80b8 	beq.w	800c27c <find_volume+0x1e8>
	bsect = 0;
 800c10c:	2700      	movs	r7, #0
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c10e:	2804      	cmp	r0, #4
 800c110:	f000 811d 	beq.w	800c34e <find_volume+0x2ba>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c114:	2801      	cmp	r0, #1
 800c116:	f200 811c 	bhi.w	800c352 <find_volume+0x2be>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c11a:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 800c11e:	f7ff fc3f 	bl	800b9a0 <ld_word>
 800c122:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800c126:	f040 8116 	bne.w	800c356 <find_volume+0x2c2>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c12a:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 800c12e:	f7ff fc37 	bl	800b9a0 <ld_word>
 800c132:	4606      	mov	r6, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c134:	b920      	cbnz	r0, 800c140 <find_volume+0xac>
 800c136:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c13a:	f7ff fc36 	bl	800b9aa <ld_dword>
 800c13e:	4606      	mov	r6, r0
		fs->fsize = fasize;
 800c140:	61e6      	str	r6, [r4, #28]
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c142:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800c146:	70a2      	strb	r2, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c148:	1e53      	subs	r3, r2, #1
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	f200 8104 	bhi.w	800c35a <find_volume+0x2c6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c152:	fb06 f802 	mul.w	r8, r6, r2
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c156:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 800c15a:	f8a4 900a 	strh.w	r9, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c15e:	f1b9 0f00 	cmp.w	r9, #0
 800c162:	f000 80fc 	beq.w	800c35e <find_volume+0x2ca>
 800c166:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800c16a:	ea19 0f03 	tst.w	r9, r3
 800c16e:	f040 80f8 	bne.w	800c362 <find_volume+0x2ce>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c172:	f104 0045 	add.w	r0, r4, #69	; 0x45
 800c176:	f7ff fc13 	bl	800b9a0 <ld_word>
 800c17a:	4682      	mov	sl, r0
 800c17c:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c17e:	f010 0f0f 	tst.w	r0, #15
 800c182:	f040 80f0 	bne.w	800c366 <find_volume+0x2d2>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c186:	f104 0047 	add.w	r0, r4, #71	; 0x47
 800c18a:	f7ff fc09 	bl	800b9a0 <ld_word>
 800c18e:	4683      	mov	fp, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c190:	b920      	cbnz	r0, 800c19c <find_volume+0x108>
 800c192:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800c196:	f7ff fc08 	bl	800b9aa <ld_dword>
 800c19a:	4683      	mov	fp, r0
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c19c:	f104 0042 	add.w	r0, r4, #66	; 0x42
 800c1a0:	f7ff fbfe 	bl	800b9a0 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	f000 80df 	beq.w	800c36a <find_volume+0x2d6>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c1ac:	eb00 0308 	add.w	r3, r0, r8
 800c1b0:	eb03 131a 	add.w	r3, r3, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c1b4:	459b      	cmp	fp, r3
 800c1b6:	f0c0 80da 	bcc.w	800c36e <find_volume+0x2da>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c1ba:	ebab 0b03 	sub.w	fp, fp, r3
 800c1be:	fbbb f1f9 	udiv	r1, fp, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c1c2:	45cb      	cmp	fp, r9
 800c1c4:	f0c0 80d5 	bcc.w	800c372 <find_volume+0x2de>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c1c8:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 800c1cc:	4281      	cmp	r1, r0
 800c1ce:	d96d      	bls.n	800c2ac <find_volume+0x218>
		fmt = FS_FAT32;
 800c1d0:	f04f 0b03 	mov.w	fp, #3
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c1d4:	f640 70f5 	movw	r0, #4085	; 0xff5
 800c1d8:	4281      	cmp	r1, r0
 800c1da:	d801      	bhi.n	800c1e0 <find_volume+0x14c>
 800c1dc:	f04f 0b01 	mov.w	fp, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c1e0:	f101 0902 	add.w	r9, r1, #2
 800c1e4:	f8c4 9018 	str.w	r9, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800c1e8:	6227      	str	r7, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c1ea:	443a      	add	r2, r7
 800c1ec:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800c1ee:	443b      	add	r3, r7
 800c1f0:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800c1f2:	f1bb 0f03 	cmp.w	fp, #3
 800c1f6:	d05c      	beq.n	800c2b2 <find_volume+0x21e>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c1f8:	f1ba 0f00 	cmp.w	sl, #0
 800c1fc:	f000 80bf 	beq.w	800c37e <find_volume+0x2ea>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c200:	4442      	add	r2, r8
 800c202:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c204:	f1bb 0f02 	cmp.w	fp, #2
 800c208:	d064      	beq.n	800c2d4 <find_volume+0x240>
 800c20a:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800c20e:	f009 0901 	and.w	r9, r9, #1
 800c212:	eb09 0953 	add.w	r9, r9, r3, lsr #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c216:	f209 19ff 	addw	r9, r9, #511	; 0x1ff
 800c21a:	ebb6 2f59 	cmp.w	r6, r9, lsr #9
 800c21e:	f0c0 80b0 	bcc.w	800c382 <find_volume+0x2ee>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c226:	6163      	str	r3, [r4, #20]
 800c228:	6123      	str	r3, [r4, #16]
		fs->fsi_flag = 0x80;
 800c22a:	2380      	movs	r3, #128	; 0x80
 800c22c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c22e:	f1bb 0f03 	cmp.w	fp, #3
 800c232:	d052      	beq.n	800c2da <find_volume+0x246>
	fs->fs_type = fmt;		/* FAT sub-type */
 800c234:	f884 b000 	strb.w	fp, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 800c238:	4a54      	ldr	r2, [pc, #336]	; (800c38c <find_volume+0x2f8>)
 800c23a:	8813      	ldrh	r3, [r2, #0]
 800c23c:	3301      	adds	r3, #1
 800c23e:	b29b      	uxth	r3, r3
 800c240:	8013      	strh	r3, [r2, #0]
 800c242:	80e3      	strh	r3, [r4, #6]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c244:	4b52      	ldr	r3, [pc, #328]	; (800c390 <find_volume+0x2fc>)
 800c246:	60e3      	str	r3, [r4, #12]
	clear_lock(fs);
 800c248:	4620      	mov	r0, r4
 800c24a:	f7ff fcab 	bl	800bba4 <clear_lock>
	return FR_OK;
 800c24e:	e074      	b.n	800c33a <find_volume+0x2a6>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c250:	2000      	movs	r0, #0
 800c252:	ab04      	add	r3, sp, #16
 800c254:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c258:	f843 0c10 	str.w	r0, [r3, #-16]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c25c:	3601      	adds	r6, #1
 800c25e:	2e03      	cmp	r6, #3
 800c260:	d80e      	bhi.n	800c280 <find_volume+0x1ec>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c262:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800c266:	0133      	lsls	r3, r6, #4
 800c268:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c26c:	4418      	add	r0, r3
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c26e:	7903      	ldrb	r3, [r0, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d0ed      	beq.n	800c250 <find_volume+0x1bc>
 800c274:	3008      	adds	r0, #8
 800c276:	f7ff fb98 	bl	800b9aa <ld_dword>
 800c27a:	e7ea      	b.n	800c252 <find_volume+0x1be>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c27c:	2600      	movs	r6, #0
 800c27e:	e7ee      	b.n	800c25e <find_volume+0x1ca>
 800c280:	2600      	movs	r6, #0
 800c282:	e00a      	b.n	800c29a <find_volume+0x206>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c284:	4639      	mov	r1, r7
 800c286:	4620      	mov	r0, r4
 800c288:	f7ff fec8 	bl	800c01c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c28c:	2801      	cmp	r0, #1
 800c28e:	f67f af3e 	bls.w	800c10e <find_volume+0x7a>
 800c292:	3601      	adds	r6, #1
 800c294:	2e03      	cmp	r6, #3
 800c296:	f63f af3a 	bhi.w	800c10e <find_volume+0x7a>
			bsect = br[i];
 800c29a:	ab04      	add	r3, sp, #16
 800c29c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c2a0:	f853 7c10 	ldr.w	r7, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c2a4:	2f00      	cmp	r7, #0
 800c2a6:	d1ed      	bne.n	800c284 <find_volume+0x1f0>
 800c2a8:	2003      	movs	r0, #3
 800c2aa:	e7f2      	b.n	800c292 <find_volume+0x1fe>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c2ac:	f04f 0b02 	mov.w	fp, #2
 800c2b0:	e790      	b.n	800c1d4 <find_volume+0x140>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c2b2:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 800c2b6:	f7ff fb73 	bl	800b9a0 <ld_word>
 800c2ba:	2800      	cmp	r0, #0
 800c2bc:	d15b      	bne.n	800c376 <find_volume+0x2e2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c2be:	f1ba 0f00 	cmp.w	sl, #0
 800c2c2:	d15a      	bne.n	800c37a <find_volume+0x2e6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c2c4:	f104 0060 	add.w	r0, r4, #96	; 0x60
 800c2c8:	f7ff fb6f 	bl	800b9aa <ld_dword>
 800c2cc:	62a0      	str	r0, [r4, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c2ce:	ea4f 0989 	mov.w	r9, r9, lsl #2
 800c2d2:	e7a0      	b.n	800c216 <find_volume+0x182>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c2d4:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800c2d8:	e79d      	b.n	800c216 <find_volume+0x182>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c2da:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800c2de:	f7ff fb5f 	bl	800b9a0 <ld_word>
 800c2e2:	2801      	cmp	r0, #1
 800c2e4:	d1a6      	bne.n	800c234 <find_volume+0x1a0>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c2e6:	1c79      	adds	r1, r7, #1
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f7ff fe7b 	bl	800bfe4 <move_window>
 800c2ee:	2800      	cmp	r0, #0
 800c2f0:	d1a0      	bne.n	800c234 <find_volume+0x1a0>
			fs->fsi_flag = 0;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c2f6:	f204 2032 	addw	r0, r4, #562	; 0x232
 800c2fa:	f7ff fb51 	bl	800b9a0 <ld_word>
 800c2fe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c302:	4298      	cmp	r0, r3
 800c304:	d196      	bne.n	800c234 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c306:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800c30a:	f7ff fb4e 	bl	800b9aa <ld_dword>
 800c30e:	4b21      	ldr	r3, [pc, #132]	; (800c394 <find_volume+0x300>)
 800c310:	4298      	cmp	r0, r3
 800c312:	d18f      	bne.n	800c234 <find_volume+0x1a0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c314:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800c318:	f7ff fb47 	bl	800b9aa <ld_dword>
 800c31c:	4b1e      	ldr	r3, [pc, #120]	; (800c398 <find_volume+0x304>)
 800c31e:	4298      	cmp	r0, r3
 800c320:	d188      	bne.n	800c234 <find_volume+0x1a0>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c322:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800c326:	f7ff fb40 	bl	800b9aa <ld_dword>
 800c32a:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c32c:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800c330:	f7ff fb3b 	bl	800b9aa <ld_dword>
 800c334:	6120      	str	r0, [r4, #16]
 800c336:	e77d      	b.n	800c234 <find_volume+0x1a0>
	if (vol < 0) return FR_INVALID_DRIVE;
 800c338:	250b      	movs	r5, #11
}
 800c33a:	4628      	mov	r0, r5
 800c33c:	b005      	add	sp, #20
 800c33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c342:	250c      	movs	r5, #12
 800c344:	e7f9      	b.n	800c33a <find_volume+0x2a6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c346:	2503      	movs	r5, #3
 800c348:	e7f7      	b.n	800c33a <find_volume+0x2a6>
		return FR_WRITE_PROTECTED;
 800c34a:	250a      	movs	r5, #10
 800c34c:	e7f5      	b.n	800c33a <find_volume+0x2a6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c34e:	2501      	movs	r5, #1
 800c350:	e7f3      	b.n	800c33a <find_volume+0x2a6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c352:	250d      	movs	r5, #13
 800c354:	e7f1      	b.n	800c33a <find_volume+0x2a6>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c356:	250d      	movs	r5, #13
 800c358:	e7ef      	b.n	800c33a <find_volume+0x2a6>
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c35a:	250d      	movs	r5, #13
 800c35c:	e7ed      	b.n	800c33a <find_volume+0x2a6>
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c35e:	250d      	movs	r5, #13
 800c360:	e7eb      	b.n	800c33a <find_volume+0x2a6>
 800c362:	250d      	movs	r5, #13
 800c364:	e7e9      	b.n	800c33a <find_volume+0x2a6>
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c366:	250d      	movs	r5, #13
 800c368:	e7e7      	b.n	800c33a <find_volume+0x2a6>
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c36a:	250d      	movs	r5, #13
 800c36c:	e7e5      	b.n	800c33a <find_volume+0x2a6>
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c36e:	250d      	movs	r5, #13
 800c370:	e7e3      	b.n	800c33a <find_volume+0x2a6>
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c372:	250d      	movs	r5, #13
 800c374:	e7e1      	b.n	800c33a <find_volume+0x2a6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c376:	250d      	movs	r5, #13
 800c378:	e7df      	b.n	800c33a <find_volume+0x2a6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c37a:	250d      	movs	r5, #13
 800c37c:	e7dd      	b.n	800c33a <find_volume+0x2a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c37e:	250d      	movs	r5, #13
 800c380:	e7db      	b.n	800c33a <find_volume+0x2a6>
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c382:	250d      	movs	r5, #13
 800c384:	e7d9      	b.n	800c33a <find_volume+0x2a6>
 800c386:	bf00      	nop
 800c388:	2001ddb0 	.word	0x2001ddb0
 800c38c:	2001ddd4 	.word	0x2001ddd4
 800c390:	2001ddd8 	.word	0x2001ddd8
 800c394:	41615252 	.word	0x41615252
 800c398:	61417272 	.word	0x61417272

0800c39c <put_fat>:
{
 800c39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c3a0:	2901      	cmp	r1, #1
 800c3a2:	d97e      	bls.n	800c4a2 <put_fat+0x106>
 800c3a4:	4607      	mov	r7, r0
 800c3a6:	460c      	mov	r4, r1
 800c3a8:	4616      	mov	r6, r2
 800c3aa:	6983      	ldr	r3, [r0, #24]
 800c3ac:	428b      	cmp	r3, r1
 800c3ae:	d97a      	bls.n	800c4a6 <put_fat+0x10a>
		switch (fs->fs_type) {
 800c3b0:	7803      	ldrb	r3, [r0, #0]
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	d045      	beq.n	800c442 <put_fat+0xa6>
 800c3b6:	2b03      	cmp	r3, #3
 800c3b8:	d057      	beq.n	800c46a <put_fat+0xce>
 800c3ba:	2b01      	cmp	r3, #1
 800c3bc:	d003      	beq.n	800c3c6 <put_fat+0x2a>
 800c3be:	2502      	movs	r5, #2
}
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			bc = (UINT)clst; bc += bc / 2;
 800c3c6:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c3ca:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800c3cc:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 800c3d0:	f7ff fe08 	bl	800bfe4 <move_window>
			if (res != FR_OK) break;
 800c3d4:	4605      	mov	r5, r0
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d1f2      	bne.n	800c3c0 <put_fat+0x24>
			p = fs->win + bc++ % SS(fs);
 800c3da:	f107 0a34 	add.w	sl, r7, #52	; 0x34
 800c3de:	f108 0901 	add.w	r9, r8, #1
 800c3e2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c3e6:	f014 0401 	ands.w	r4, r4, #1
 800c3ea:	d01f      	beq.n	800c42c <put_fat+0x90>
 800c3ec:	f91a 3008 	ldrsb.w	r3, [sl, r8]
 800c3f0:	f003 030f 	and.w	r3, r3, #15
 800c3f4:	0132      	lsls	r2, r6, #4
 800c3f6:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	f80a 3008 	strb.w	r3, [sl, r8]
			fs->wflag = 1;
 800c402:	2301      	movs	r3, #1
 800c404:	70fb      	strb	r3, [r7, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c406:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c408:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800c40c:	4638      	mov	r0, r7
 800c40e:	f7ff fde9 	bl	800bfe4 <move_window>
			if (res != FR_OK) break;
 800c412:	4605      	mov	r5, r0
 800c414:	2800      	cmp	r0, #0
 800c416:	d1d3      	bne.n	800c3c0 <put_fat+0x24>
			p = fs->win + bc % SS(fs);
 800c418:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c41c:	b144      	cbz	r4, 800c430 <put_fat+0x94>
 800c41e:	f3c6 1307 	ubfx	r3, r6, #4, #8
 800c422:	f80a 3009 	strb.w	r3, [sl, r9]
			fs->wflag = 1;
 800c426:	2301      	movs	r3, #1
 800c428:	70fb      	strb	r3, [r7, #3]
			break;
 800c42a:	e7c9      	b.n	800c3c0 <put_fat+0x24>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c42c:	b2f3      	uxtb	r3, r6
 800c42e:	e7e6      	b.n	800c3fe <put_fat+0x62>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c430:	f91a 3009 	ldrsb.w	r3, [sl, r9]
 800c434:	f023 030f 	bic.w	r3, r3, #15
 800c438:	f3c6 2203 	ubfx	r2, r6, #8, #4
 800c43c:	4313      	orrs	r3, r2
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	e7ef      	b.n	800c422 <put_fat+0x86>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c442:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800c444:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800c448:	f7ff fdcc 	bl	800bfe4 <move_window>
			if (res != FR_OK) break;
 800c44c:	4605      	mov	r5, r0
 800c44e:	2800      	cmp	r0, #0
 800c450:	d1b6      	bne.n	800c3c0 <put_fat+0x24>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c452:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800c456:	0064      	lsls	r4, r4, #1
 800c458:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800c45c:	b2b1      	uxth	r1, r6
 800c45e:	4420      	add	r0, r4
 800c460:	f7ff faae 	bl	800b9c0 <st_word>
			fs->wflag = 1;
 800c464:	2301      	movs	r3, #1
 800c466:	70fb      	strb	r3, [r7, #3]
			break;
 800c468:	e7aa      	b.n	800c3c0 <put_fat+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c46a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800c46c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800c470:	f7ff fdb8 	bl	800bfe4 <move_window>
			if (res != FR_OK) break;
 800c474:	4605      	mov	r5, r0
 800c476:	2800      	cmp	r0, #0
 800c478:	d1a2      	bne.n	800c3c0 <put_fat+0x24>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c47a:	f026 4670 	bic.w	r6, r6, #4026531840	; 0xf0000000
 800c47e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c482:	00a4      	lsls	r4, r4, #2
 800c484:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800c488:	441c      	add	r4, r3
 800c48a:	4620      	mov	r0, r4
 800c48c:	f7ff fa8d 	bl	800b9aa <ld_dword>
 800c490:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c494:	4331      	orrs	r1, r6
 800c496:	4620      	mov	r0, r4
 800c498:	f7ff fa96 	bl	800b9c8 <st_dword>
			fs->wflag = 1;
 800c49c:	2301      	movs	r3, #1
 800c49e:	70fb      	strb	r3, [r7, #3]
			break;
 800c4a0:	e78e      	b.n	800c3c0 <put_fat+0x24>
	FRESULT res = FR_INT_ERR;
 800c4a2:	2502      	movs	r5, #2
 800c4a4:	e78c      	b.n	800c3c0 <put_fat+0x24>
 800c4a6:	2502      	movs	r5, #2
 800c4a8:	e78a      	b.n	800c3c0 <put_fat+0x24>

0800c4aa <get_fat>:
{
 800c4aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	FATFS *fs = obj->fs;
 800c4ac:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c4ae:	2901      	cmp	r1, #1
 800c4b0:	d956      	bls.n	800c560 <get_fat+0xb6>
 800c4b2:	460c      	mov	r4, r1
 800c4b4:	69ab      	ldr	r3, [r5, #24]
 800c4b6:	428b      	cmp	r3, r1
 800c4b8:	d954      	bls.n	800c564 <get_fat+0xba>
		switch (fs->fs_type) {
 800c4ba:	782b      	ldrb	r3, [r5, #0]
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d02d      	beq.n	800c51c <get_fat+0x72>
 800c4c0:	2b03      	cmp	r3, #3
 800c4c2:	d03b      	beq.n	800c53c <get_fat+0x92>
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d001      	beq.n	800c4cc <get_fat+0x22>
 800c4c8:	2001      	movs	r0, #1
 800c4ca:	e04a      	b.n	800c562 <get_fat+0xb8>
			bc = (UINT)clst; bc += bc / 2;
 800c4cc:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c4d0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c4d2:	eb01 2156 	add.w	r1, r1, r6, lsr #9
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	f7ff fd84 	bl	800bfe4 <move_window>
 800c4dc:	b110      	cbz	r0, 800c4e4 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c4de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4e2:	e03e      	b.n	800c562 <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
 800c4e4:	1c77      	adds	r7, r6, #1
 800c4e6:	f3c6 0608 	ubfx	r6, r6, #0, #9
 800c4ea:	442e      	add	r6, r5
 800c4ec:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c4f0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c4f2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f7ff fd74 	bl	800bfe4 <move_window>
 800c4fc:	bba0      	cbnz	r0, 800c568 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c4fe:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800c502:	442f      	add	r7, r5
 800c504:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800c508:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c50c:	f014 0f01 	tst.w	r4, #1
 800c510:	d001      	beq.n	800c516 <get_fat+0x6c>
 800c512:	0900      	lsrs	r0, r0, #4
 800c514:	e025      	b.n	800c562 <get_fat+0xb8>
 800c516:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800c51a:	e022      	b.n	800c562 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c51c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c51e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800c522:	4628      	mov	r0, r5
 800c524:	f7ff fd5e 	bl	800bfe4 <move_window>
 800c528:	bb08      	cbnz	r0, 800c56e <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c52a:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800c52e:	0064      	lsls	r4, r4, #1
 800c530:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 800c534:	4420      	add	r0, r4
 800c536:	f7ff fa33 	bl	800b9a0 <ld_word>
			break;
 800c53a:	e012      	b.n	800c562 <get_fat+0xb8>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c53c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800c53e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800c542:	4628      	mov	r0, r5
 800c544:	f7ff fd4e 	bl	800bfe4 <move_window>
 800c548:	b9a0      	cbnz	r0, 800c574 <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c54a:	f105 0034 	add.w	r0, r5, #52	; 0x34
 800c54e:	00a4      	lsls	r4, r4, #2
 800c550:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 800c554:	4420      	add	r0, r4
 800c556:	f7ff fa28 	bl	800b9aa <ld_dword>
 800c55a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 800c55e:	e000      	b.n	800c562 <get_fat+0xb8>
		val = 1;	/* Internal error */
 800c560:	2001      	movs	r0, #1
}
 800c562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800c564:	2001      	movs	r0, #1
 800c566:	e7fc      	b.n	800c562 <get_fat+0xb8>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c56c:	e7f9      	b.n	800c562 <get_fat+0xb8>
 800c56e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c572:	e7f6      	b.n	800c562 <get_fat+0xb8>
 800c574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return val;
 800c578:	e7f3      	b.n	800c562 <get_fat+0xb8>

0800c57a <dir_sdi>:
{
 800c57a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800c57e:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c582:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c586:	d240      	bcs.n	800c60a <dir_sdi+0x90>
 800c588:	4606      	mov	r6, r0
 800c58a:	460f      	mov	r7, r1
 800c58c:	f011 0f1f 	tst.w	r1, #31
 800c590:	d13d      	bne.n	800c60e <dir_sdi+0x94>
	dp->dptr = ofs;				/* Set current offset */
 800c592:	6141      	str	r1, [r0, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c594:	6884      	ldr	r4, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c596:	b92c      	cbnz	r4, 800c5a4 <dir_sdi+0x2a>
 800c598:	f898 3000 	ldrb.w	r3, [r8]
 800c59c:	2b02      	cmp	r3, #2
 800c59e:	d901      	bls.n	800c5a4 <dir_sdi+0x2a>
		clst = fs->dirbase;
 800c5a0:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c5a4:	b9b4      	cbnz	r4, 800c5d4 <dir_sdi+0x5a>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c5a6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800c5aa:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 800c5ae:	d930      	bls.n	800c612 <dir_sdi+0x98>
		dp->sect = fs->dirbase;
 800c5b0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
 800c5b4:	61f3      	str	r3, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 800c5b6:	61b4      	str	r4, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c5b8:	69f3      	ldr	r3, [r6, #28]
 800c5ba:	b393      	cbz	r3, 800c622 <dir_sdi+0xa8>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c5bc:	eb03 2357 	add.w	r3, r3, r7, lsr #9
 800c5c0:	61f3      	str	r3, [r6, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c5c2:	f108 0334 	add.w	r3, r8, #52	; 0x34
 800c5c6:	f3c7 0108 	ubfx	r1, r7, #0, #9
 800c5ca:	440b      	add	r3, r1
 800c5cc:	6233      	str	r3, [r6, #32]
	return FR_OK;
 800c5ce:	2000      	movs	r0, #0
}
 800c5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c5d4:	f8b8 500a 	ldrh.w	r5, [r8, #10]
 800c5d8:	026d      	lsls	r5, r5, #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800c5da:	42af      	cmp	r7, r5
 800c5dc:	d30f      	bcc.n	800c5fe <dir_sdi+0x84>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c5de:	4621      	mov	r1, r4
 800c5e0:	4630      	mov	r0, r6
 800c5e2:	f7ff ff62 	bl	800c4aa <get_fat>
 800c5e6:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c5e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c5ec:	d013      	beq.n	800c616 <dir_sdi+0x9c>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c5ee:	2801      	cmp	r0, #1
 800c5f0:	d913      	bls.n	800c61a <dir_sdi+0xa0>
 800c5f2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c5f6:	4283      	cmp	r3, r0
 800c5f8:	d911      	bls.n	800c61e <dir_sdi+0xa4>
			ofs -= csz;
 800c5fa:	1b7f      	subs	r7, r7, r5
 800c5fc:	e7ed      	b.n	800c5da <dir_sdi+0x60>
		dp->sect = clust2sect(fs, clst);
 800c5fe:	4621      	mov	r1, r4
 800c600:	4640      	mov	r0, r8
 800c602:	f7ff faed 	bl	800bbe0 <clust2sect>
 800c606:	61f0      	str	r0, [r6, #28]
 800c608:	e7d5      	b.n	800c5b6 <dir_sdi+0x3c>
		return FR_INT_ERR;
 800c60a:	2002      	movs	r0, #2
 800c60c:	e7e0      	b.n	800c5d0 <dir_sdi+0x56>
 800c60e:	2002      	movs	r0, #2
 800c610:	e7de      	b.n	800c5d0 <dir_sdi+0x56>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c612:	2002      	movs	r0, #2
 800c614:	e7dc      	b.n	800c5d0 <dir_sdi+0x56>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c616:	2001      	movs	r0, #1
 800c618:	e7da      	b.n	800c5d0 <dir_sdi+0x56>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c61a:	2002      	movs	r0, #2
 800c61c:	e7d8      	b.n	800c5d0 <dir_sdi+0x56>
 800c61e:	2002      	movs	r0, #2
 800c620:	e7d6      	b.n	800c5d0 <dir_sdi+0x56>
	if (!dp->sect) return FR_INT_ERR;
 800c622:	2002      	movs	r0, #2
 800c624:	e7d4      	b.n	800c5d0 <dir_sdi+0x56>

0800c626 <create_chain>:
{
 800c626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c62a:	4605      	mov	r5, r0
	FATFS *fs = obj->fs;
 800c62c:	6806      	ldr	r6, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800c62e:	460f      	mov	r7, r1
 800c630:	b951      	cbnz	r1, 800c648 <create_chain+0x22>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c632:	f8d6 8010 	ldr.w	r8, [r6, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c636:	f1b8 0f00 	cmp.w	r8, #0
 800c63a:	d012      	beq.n	800c662 <create_chain+0x3c>
 800c63c:	69b3      	ldr	r3, [r6, #24]
 800c63e:	4543      	cmp	r3, r8
 800c640:	d811      	bhi.n	800c666 <create_chain+0x40>
 800c642:	f04f 0801 	mov.w	r8, #1
 800c646:	e00e      	b.n	800c666 <create_chain+0x40>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c648:	f7ff ff2f 	bl	800c4aa <get_fat>
 800c64c:	4603      	mov	r3, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c64e:	2801      	cmp	r0, #1
 800c650:	d94c      	bls.n	800c6ec <create_chain+0xc6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c652:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c656:	d04e      	beq.n	800c6f6 <create_chain+0xd0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c658:	69b2      	ldr	r2, [r6, #24]
 800c65a:	4282      	cmp	r2, r0
 800c65c:	d84b      	bhi.n	800c6f6 <create_chain+0xd0>
		scl = clst;
 800c65e:	46b8      	mov	r8, r7
 800c660:	e001      	b.n	800c666 <create_chain+0x40>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c662:	f04f 0801 	mov.w	r8, #1
		ncl = scl;	/* Start cluster */
 800c666:	4644      	mov	r4, r8
 800c668:	e00c      	b.n	800c684 <create_chain+0x5e>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c66a:	4621      	mov	r1, r4
 800c66c:	4628      	mov	r0, r5
 800c66e:	f7ff ff1c 	bl	800c4aa <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
 800c672:	4603      	mov	r3, r0
 800c674:	b178      	cbz	r0, 800c696 <create_chain+0x70>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c676:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c67a:	bf18      	it	ne
 800c67c:	2801      	cmpne	r0, #1
 800c67e:	d03a      	beq.n	800c6f6 <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 800c680:	4544      	cmp	r4, r8
 800c682:	d037      	beq.n	800c6f4 <create_chain+0xce>
			ncl++;							/* Next cluster */
 800c684:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c686:	69b3      	ldr	r3, [r6, #24]
 800c688:	42a3      	cmp	r3, r4
 800c68a:	d8ee      	bhi.n	800c66a <create_chain+0x44>
				if (ncl > scl) return 0;	/* No free cluster */
 800c68c:	f1b8 0f01 	cmp.w	r8, #1
 800c690:	d92e      	bls.n	800c6f0 <create_chain+0xca>
				ncl = 2;
 800c692:	2402      	movs	r4, #2
 800c694:	e7e9      	b.n	800c66a <create_chain+0x44>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c69a:	4621      	mov	r1, r4
 800c69c:	4630      	mov	r0, r6
 800c69e:	f7ff fe7d 	bl	800c39c <put_fat>
		if (res == FR_OK && clst != 0) {
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	fab0 f080 	clz	r0, r0
 800c6a8:	0940      	lsrs	r0, r0, #5
 800c6aa:	2f00      	cmp	r7, #0
 800c6ac:	bf08      	it	eq
 800c6ae:	2000      	moveq	r0, #0
 800c6b0:	b970      	cbnz	r0, 800c6d0 <create_chain+0xaa>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c6b2:	b9a2      	cbnz	r2, 800c6de <create_chain+0xb8>
		fs->last_clst = ncl;
 800c6b4:	6134      	str	r4, [r6, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c6b6:	6972      	ldr	r2, [r6, #20]
 800c6b8:	69b3      	ldr	r3, [r6, #24]
 800c6ba:	3b02      	subs	r3, #2
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d801      	bhi.n	800c6c4 <create_chain+0x9e>
 800c6c0:	3a01      	subs	r2, #1
 800c6c2:	6172      	str	r2, [r6, #20]
		fs->fsi_flag |= 1;
 800c6c4:	7933      	ldrb	r3, [r6, #4]
 800c6c6:	f043 0301 	orr.w	r3, r3, #1
 800c6ca:	7133      	strb	r3, [r6, #4]
 800c6cc:	4623      	mov	r3, r4
 800c6ce:	e012      	b.n	800c6f6 <create_chain+0xd0>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c6d0:	4622      	mov	r2, r4
 800c6d2:	4639      	mov	r1, r7
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	f7ff fe61 	bl	800c39c <put_fat>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	e7e9      	b.n	800c6b2 <create_chain+0x8c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c6de:	2a01      	cmp	r2, #1
 800c6e0:	d001      	beq.n	800c6e6 <create_chain+0xc0>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	e007      	b.n	800c6f6 <create_chain+0xd0>
 800c6e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6ea:	e004      	b.n	800c6f6 <create_chain+0xd0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	e002      	b.n	800c6f6 <create_chain+0xd0>
				if (ncl > scl) return 0;	/* No free cluster */
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	e000      	b.n	800c6f6 <create_chain+0xd0>
			if (ncl == scl) return 0;		/* No free cluster */
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c6fc <remove_chain>:
{
 800c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fe:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 800c700:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c702:	2901      	cmp	r1, #1
 800c704:	d92e      	bls.n	800c764 <remove_chain+0x68>
 800c706:	4606      	mov	r6, r0
 800c708:	4611      	mov	r1, r2
 800c70a:	69ab      	ldr	r3, [r5, #24]
 800c70c:	42a3      	cmp	r3, r4
 800c70e:	d92b      	bls.n	800c768 <remove_chain+0x6c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c710:	b14a      	cbz	r2, 800c726 <remove_chain+0x2a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c712:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c716:	4628      	mov	r0, r5
 800c718:	f7ff fe40 	bl	800c39c <put_fat>
		if (res != FR_OK) return res;
 800c71c:	4607      	mov	r7, r0
 800c71e:	b110      	cbz	r0, 800c726 <remove_chain+0x2a>
 800c720:	e023      	b.n	800c76a <remove_chain+0x6e>
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c722:	42a2      	cmp	r2, r4
 800c724:	d921      	bls.n	800c76a <remove_chain+0x6e>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c726:	4627      	mov	r7, r4
 800c728:	4621      	mov	r1, r4
 800c72a:	4630      	mov	r0, r6
 800c72c:	f7ff febd 	bl	800c4aa <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
 800c730:	4604      	mov	r4, r0
 800c732:	b1e0      	cbz	r0, 800c76e <remove_chain+0x72>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c734:	2801      	cmp	r0, #1
 800c736:	d01c      	beq.n	800c772 <remove_chain+0x76>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c738:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c73c:	d01b      	beq.n	800c776 <remove_chain+0x7a>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c73e:	2200      	movs	r2, #0
 800c740:	4639      	mov	r1, r7
 800c742:	4628      	mov	r0, r5
 800c744:	f7ff fe2a 	bl	800c39c <put_fat>
			if (res != FR_OK) return res;
 800c748:	4607      	mov	r7, r0
 800c74a:	b970      	cbnz	r0, 800c76a <remove_chain+0x6e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c74c:	696b      	ldr	r3, [r5, #20]
 800c74e:	69aa      	ldr	r2, [r5, #24]
 800c750:	1e91      	subs	r1, r2, #2
 800c752:	428b      	cmp	r3, r1
 800c754:	d2e5      	bcs.n	800c722 <remove_chain+0x26>
			fs->free_clst++;
 800c756:	3301      	adds	r3, #1
 800c758:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 800c75a:	792b      	ldrb	r3, [r5, #4]
 800c75c:	f043 0301 	orr.w	r3, r3, #1
 800c760:	712b      	strb	r3, [r5, #4]
 800c762:	e7de      	b.n	800c722 <remove_chain+0x26>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c764:	2702      	movs	r7, #2
 800c766:	e000      	b.n	800c76a <remove_chain+0x6e>
 800c768:	2702      	movs	r7, #2
}
 800c76a:	4638      	mov	r0, r7
 800c76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return FR_OK;
 800c76e:	2700      	movs	r7, #0
 800c770:	e7fb      	b.n	800c76a <remove_chain+0x6e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c772:	2702      	movs	r7, #2
 800c774:	e7f9      	b.n	800c76a <remove_chain+0x6e>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c776:	2701      	movs	r7, #1
 800c778:	e7f7      	b.n	800c76a <remove_chain+0x6e>

0800c77a <dir_next>:
{
 800c77a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	FATFS *fs = dp->obj.fs;
 800c77e:	6806      	ldr	r6, [r0, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c780:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c782:	69c3      	ldr	r3, [r0, #28]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d06c      	beq.n	800c862 <dir_next+0xe8>
 800c788:	4604      	mov	r4, r0
 800c78a:	4688      	mov	r8, r1
 800c78c:	3520      	adds	r5, #32
 800c78e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800c792:	d268      	bcs.n	800c866 <dir_next+0xec>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c794:	f3c5 0708 	ubfx	r7, r5, #0, #9
 800c798:	b93f      	cbnz	r7, 800c7aa <dir_next+0x30>
		dp->sect++;				/* Next sector */
 800c79a:	3301      	adds	r3, #1
 800c79c:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800c79e:	6981      	ldr	r1, [r0, #24]
 800c7a0:	b979      	cbnz	r1, 800c7c2 <dir_next+0x48>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c7a2:	8933      	ldrh	r3, [r6, #8]
 800c7a4:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800c7a8:	d907      	bls.n	800c7ba <dir_next+0x40>
	dp->dptr = ofs;						/* Current entry */
 800c7aa:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c7ac:	f106 0334 	add.w	r3, r6, #52	; 0x34
 800c7b0:	443b      	add	r3, r7
 800c7b2:	6223      	str	r3, [r4, #32]
	return FR_OK;
 800c7b4:	2000      	movs	r0, #0
}
 800c7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp->sect = 0; return FR_NO_FILE;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	61c3      	str	r3, [r0, #28]
 800c7be:	2004      	movs	r0, #4
 800c7c0:	e7f9      	b.n	800c7b6 <dir_next+0x3c>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c7c2:	8973      	ldrh	r3, [r6, #10]
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	ea13 2955 	ands.w	r9, r3, r5, lsr #9
 800c7ca:	d1ee      	bne.n	800c7aa <dir_next+0x30>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c7cc:	f7ff fe6d 	bl	800c4aa <get_fat>
 800c7d0:	4682      	mov	sl, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c7d2:	2801      	cmp	r0, #1
 800c7d4:	d949      	bls.n	800c86a <dir_next+0xf0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c7d6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c7da:	d048      	beq.n	800c86e <dir_next+0xf4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c7dc:	69b3      	ldr	r3, [r6, #24]
 800c7de:	4283      	cmp	r3, r0
 800c7e0:	d837      	bhi.n	800c852 <dir_next+0xd8>
					if (!stretch) {								/* If no stretch, report EOT */
 800c7e2:	f1b8 0f00 	cmp.w	r8, #0
 800c7e6:	d011      	beq.n	800c80c <dir_next+0x92>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c7e8:	69a1      	ldr	r1, [r4, #24]
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f7ff ff1b 	bl	800c626 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c7f0:	4682      	mov	sl, r0
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	d03d      	beq.n	800c872 <dir_next+0xf8>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c7f6:	2801      	cmp	r0, #1
 800c7f8:	d03d      	beq.n	800c876 <dir_next+0xfc>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c7fa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c7fe:	d03c      	beq.n	800c87a <dir_next+0x100>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c800:	4630      	mov	r0, r6
 800c802:	f7ff fbc5 	bl	800bf90 <sync_window>
 800c806:	b128      	cbz	r0, 800c814 <dir_next+0x9a>
 800c808:	2001      	movs	r0, #1
 800c80a:	e7d4      	b.n	800c7b6 <dir_next+0x3c>
						dp->sect = 0; return FR_NO_FILE;
 800c80c:	2300      	movs	r3, #0
 800c80e:	61e3      	str	r3, [r4, #28]
 800c810:	2004      	movs	r0, #4
 800c812:	e7d0      	b.n	800c7b6 <dir_next+0x3c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c814:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c818:	2100      	movs	r1, #0
 800c81a:	f106 0034 	add.w	r0, r6, #52	; 0x34
 800c81e:	f7ff f8e7 	bl	800b9f0 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c822:	4651      	mov	r1, sl
 800c824:	4630      	mov	r0, r6
 800c826:	f7ff f9db 	bl	800bbe0 <clust2sect>
 800c82a:	6330      	str	r0, [r6, #48]	; 0x30
 800c82c:	8973      	ldrh	r3, [r6, #10]
 800c82e:	4599      	cmp	r9, r3
 800c830:	d20b      	bcs.n	800c84a <dir_next+0xd0>
						fs->wflag = 1;
 800c832:	2301      	movs	r3, #1
 800c834:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c836:	4630      	mov	r0, r6
 800c838:	f7ff fbaa 	bl	800bf90 <sync_window>
 800c83c:	b9f8      	cbnz	r0, 800c87e <dir_next+0x104>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c83e:	f109 0901 	add.w	r9, r9, #1
 800c842:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800c844:	3301      	adds	r3, #1
 800c846:	6333      	str	r3, [r6, #48]	; 0x30
 800c848:	e7f0      	b.n	800c82c <dir_next+0xb2>
					fs->winsect -= n;							/* Restore window offset */
 800c84a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800c84c:	eba3 0309 	sub.w	r3, r3, r9
 800c850:	6333      	str	r3, [r6, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800c852:	f8c4 a018 	str.w	sl, [r4, #24]
				dp->sect = clust2sect(fs, clst);
 800c856:	4651      	mov	r1, sl
 800c858:	4630      	mov	r0, r6
 800c85a:	f7ff f9c1 	bl	800bbe0 <clust2sect>
 800c85e:	61e0      	str	r0, [r4, #28]
 800c860:	e7a3      	b.n	800c7aa <dir_next+0x30>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c862:	2004      	movs	r0, #4
 800c864:	e7a7      	b.n	800c7b6 <dir_next+0x3c>
 800c866:	2004      	movs	r0, #4
 800c868:	e7a5      	b.n	800c7b6 <dir_next+0x3c>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c86a:	2002      	movs	r0, #2
 800c86c:	e7a3      	b.n	800c7b6 <dir_next+0x3c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c86e:	2001      	movs	r0, #1
 800c870:	e7a1      	b.n	800c7b6 <dir_next+0x3c>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c872:	2007      	movs	r0, #7
 800c874:	e79f      	b.n	800c7b6 <dir_next+0x3c>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c876:	2002      	movs	r0, #2
 800c878:	e79d      	b.n	800c7b6 <dir_next+0x3c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c87a:	2001      	movs	r0, #1
 800c87c:	e79b      	b.n	800c7b6 <dir_next+0x3c>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c87e:	2001      	movs	r0, #1
 800c880:	e799      	b.n	800c7b6 <dir_next+0x3c>

0800c882 <dir_alloc>:
{
 800c882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c884:	4604      	mov	r4, r0
 800c886:	460e      	mov	r6, r1
	FATFS *fs = dp->obj.fs;
 800c888:	6807      	ldr	r7, [r0, #0]
	res = dir_sdi(dp, 0);
 800c88a:	2100      	movs	r1, #0
 800c88c:	f7ff fe75 	bl	800c57a <dir_sdi>
	if (res == FR_OK) {
 800c890:	4602      	mov	r2, r0
 800c892:	b9b8      	cbnz	r0, 800c8c4 <dir_alloc+0x42>
		n = 0;
 800c894:	2500      	movs	r5, #0
 800c896:	e006      	b.n	800c8a6 <dir_alloc+0x24>
				n = 0;					/* Not a blank entry. Restart to search */
 800c898:	2500      	movs	r5, #0
			res = dir_next(dp, 1);
 800c89a:	2101      	movs	r1, #1
 800c89c:	4620      	mov	r0, r4
 800c89e:	f7ff ff6c 	bl	800c77a <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	b970      	cbnz	r0, 800c8c4 <dir_alloc+0x42>
			res = move_window(fs, dp->sect);
 800c8a6:	69e1      	ldr	r1, [r4, #28]
 800c8a8:	4638      	mov	r0, r7
 800c8aa:	f7ff fb9b 	bl	800bfe4 <move_window>
			if (res != FR_OK) break;
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	b940      	cbnz	r0, 800c8c4 <dir_alloc+0x42>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c8b2:	6a23      	ldr	r3, [r4, #32]
 800c8b4:	781b      	ldrb	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	bf18      	it	ne
 800c8ba:	2be5      	cmpne	r3, #229	; 0xe5
 800c8bc:	d1ec      	bne.n	800c898 <dir_alloc+0x16>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c8be:	3501      	adds	r5, #1
 800c8c0:	42b5      	cmp	r5, r6
 800c8c2:	d1ea      	bne.n	800c89a <dir_alloc+0x18>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c8c4:	2a04      	cmp	r2, #4
 800c8c6:	d001      	beq.n	800c8cc <dir_alloc+0x4a>
}
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c8cc:	2207      	movs	r2, #7
 800c8ce:	e7fb      	b.n	800c8c8 <dir_alloc+0x46>

0800c8d0 <dir_read>:
{
 800c8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	4688      	mov	r8, r1
	FATFS *fs = dp->obj.fs;
 800c8d8:	6807      	ldr	r7, [r0, #0]
	BYTE ord = 0xFF, sum = 0xFF;
 800c8da:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800c8de:	464e      	mov	r6, r9
	FRESULT res = FR_NO_FILE;
 800c8e0:	2504      	movs	r5, #4
	while (dp->sect) {
 800c8e2:	e02c      	b.n	800c93e <dir_read+0x6e>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800c8e4:	2b0f      	cmp	r3, #15
 800c8e6:	d119      	bne.n	800c91c <dir_read+0x4c>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800c8e8:	f012 0f40 	tst.w	r2, #64	; 0x40
 800c8ec:	d006      	beq.n	800c8fc <dir_read+0x2c>
						sum = dp->dir[LDIR_Chksum];
 800c8ee:	f891 900d 	ldrb.w	r9, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800c8f2:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						dp->blk_ofs = dp->dptr;
 800c8f6:	6963      	ldr	r3, [r4, #20]
 800c8f8:	6323      	str	r3, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;
 800c8fa:	4616      	mov	r6, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c8fc:	42b2      	cmp	r2, r6
 800c8fe:	d001      	beq.n	800c904 <dir_read+0x34>
 800c900:	26ff      	movs	r6, #255	; 0xff
 800c902:	e016      	b.n	800c932 <dir_read+0x62>
 800c904:	7b4b      	ldrb	r3, [r1, #13]
 800c906:	454b      	cmp	r3, r9
 800c908:	d001      	beq.n	800c90e <dir_read+0x3e>
 800c90a:	26ff      	movs	r6, #255	; 0xff
 800c90c:	e011      	b.n	800c932 <dir_read+0x62>
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	f7ff f9aa 	bl	800bc68 <pick_lfn>
 800c914:	b378      	cbz	r0, 800c976 <dir_read+0xa6>
 800c916:	3e01      	subs	r6, #1
 800c918:	b2f6      	uxtb	r6, r6
 800c91a:	e00a      	b.n	800c932 <dir_read+0x62>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c91c:	b926      	cbnz	r6, 800c928 <dir_read+0x58>
 800c91e:	4608      	mov	r0, r1
 800c920:	f7ff fa75 	bl	800be0e <sum_sfn>
 800c924:	4548      	cmp	r0, r9
 800c926:	d029      	beq.n	800c97c <dir_read+0xac>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c92c:	6323      	str	r3, [r4, #48]	; 0x30
 800c92e:	e025      	b.n	800c97c <dir_read+0xac>
				ord = 0xFF;
 800c930:	26ff      	movs	r6, #255	; 0xff
		res = dir_next(dp, 0);		/* Next entry */
 800c932:	2100      	movs	r1, #0
 800c934:	4620      	mov	r0, r4
 800c936:	f7ff ff20 	bl	800c77a <dir_next>
		if (res != FR_OK) break;
 800c93a:	4605      	mov	r5, r0
 800c93c:	b9f0      	cbnz	r0, 800c97c <dir_read+0xac>
	while (dp->sect) {
 800c93e:	69e1      	ldr	r1, [r4, #28]
 800c940:	b1e1      	cbz	r1, 800c97c <dir_read+0xac>
		res = move_window(fs, dp->sect);
 800c942:	4638      	mov	r0, r7
 800c944:	f7ff fb4e 	bl	800bfe4 <move_window>
		if (res != FR_OK) break;
 800c948:	4605      	mov	r5, r0
 800c94a:	b9b8      	cbnz	r0, 800c97c <dir_read+0xac>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c94c:	6a21      	ldr	r1, [r4, #32]
 800c94e:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 800c950:	b19a      	cbz	r2, 800c97a <dir_read+0xaa>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c952:	7acb      	ldrb	r3, [r1, #11]
 800c954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c958:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c95a:	2a2e      	cmp	r2, #46	; 0x2e
 800c95c:	bf18      	it	ne
 800c95e:	2ae5      	cmpne	r2, #229	; 0xe5
 800c960:	d0e6      	beq.n	800c930 <dir_read+0x60>
 800c962:	f023 0020 	bic.w	r0, r3, #32
 800c966:	2808      	cmp	r0, #8
 800c968:	bf14      	ite	ne
 800c96a:	2000      	movne	r0, #0
 800c96c:	2001      	moveq	r0, #1
 800c96e:	4540      	cmp	r0, r8
 800c970:	d0b8      	beq.n	800c8e4 <dir_read+0x14>
				ord = 0xFF;
 800c972:	26ff      	movs	r6, #255	; 0xff
 800c974:	e7dd      	b.n	800c932 <dir_read+0x62>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c976:	26ff      	movs	r6, #255	; 0xff
 800c978:	e7db      	b.n	800c932 <dir_read+0x62>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c97a:	2504      	movs	r5, #4
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c97c:	b10d      	cbz	r5, 800c982 <dir_read+0xb2>
 800c97e:	2300      	movs	r3, #0
 800c980:	61e3      	str	r3, [r4, #28]
}
 800c982:	4628      	mov	r0, r5
 800c984:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c988 <create_name>:
{
 800c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98c:	b083      	sub	sp, #12
 800c98e:	4680      	mov	r8, r0
 800c990:	468a      	mov	sl, r1
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c992:	f8d1 9000 	ldr.w	r9, [r1]
 800c996:	6803      	ldr	r3, [r0, #0]
 800c998:	68dd      	ldr	r5, [r3, #12]
 800c99a:	2400      	movs	r4, #0
 800c99c:	4623      	mov	r3, r4
 800c99e:	e01d      	b.n	800c9dc <create_name+0x54>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c9a0:	3701      	adds	r7, #1
 800c9a2:	f819 3007 	ldrb.w	r3, [r9, r7]
 800c9a6:	2b2f      	cmp	r3, #47	; 0x2f
 800c9a8:	d0fa      	beq.n	800c9a0 <create_name+0x18>
 800c9aa:	2b5c      	cmp	r3, #92	; 0x5c
 800c9ac:	d0f8      	beq.n	800c9a0 <create_name+0x18>
	*path = &p[si];						/* Return pointer to the next segment */
 800c9ae:	444f      	add	r7, r9
 800c9b0:	f8ca 7000 	str.w	r7, [sl]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c9b4:	281f      	cmp	r0, #31
 800c9b6:	d82e      	bhi.n	800ca16 <create_name+0x8e>
 800c9b8:	f04f 0904 	mov.w	r9, #4
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c9bc:	b374      	cbz	r4, 800ca1c <create_name+0x94>
		w = lfn[di - 1];
 800c9be:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c9c2:	4423      	add	r3, r4
 800c9c4:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
		if (w != ' ' && w != '.') break;
 800c9c8:	2b20      	cmp	r3, #32
 800c9ca:	bf18      	it	ne
 800c9cc:	2b2e      	cmpne	r3, #46	; 0x2e
 800c9ce:	d125      	bne.n	800ca1c <create_name+0x94>
		di--;
 800c9d0:	3c01      	subs	r4, #1
 800c9d2:	e7f3      	b.n	800c9bc <create_name+0x34>
		lfn[di++] = w;					/* Store the Unicode character */
 800c9d4:	f825 6014 	strh.w	r6, [r5, r4, lsl #1]
 800c9d8:	3401      	adds	r4, #1
		w = p[si++];					/* Get a character */
 800c9da:	463b      	mov	r3, r7
 800c9dc:	1c5f      	adds	r7, r3, #1
 800c9de:	f819 0003 	ldrb.w	r0, [r9, r3]
		if (w < ' ') break;				/* Break if end of the path name */
 800c9e2:	281f      	cmp	r0, #31
 800c9e4:	d9e3      	bls.n	800c9ae <create_name+0x26>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c9e6:	285c      	cmp	r0, #92	; 0x5c
 800c9e8:	bf18      	it	ne
 800c9ea:	282f      	cmpne	r0, #47	; 0x2f
 800c9ec:	d0d9      	beq.n	800c9a2 <create_name+0x1a>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c9ee:	2cfe      	cmp	r4, #254	; 0xfe
 800c9f0:	f200 80d7 	bhi.w	800cba2 <create_name+0x21a>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c9f4:	2101      	movs	r1, #1
 800c9f6:	f000 ff97 	bl	800d928 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c9fa:	4606      	mov	r6, r0
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	f000 80d2 	beq.w	800cba6 <create_name+0x21e>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ca02:	287f      	cmp	r0, #127	; 0x7f
 800ca04:	d8e6      	bhi.n	800c9d4 <create_name+0x4c>
 800ca06:	4601      	mov	r1, r0
 800ca08:	4869      	ldr	r0, [pc, #420]	; (800cbb0 <create_name+0x228>)
 800ca0a:	f7ff f803 	bl	800ba14 <chk_chr>
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	d0e0      	beq.n	800c9d4 <create_name+0x4c>
 800ca12:	2006      	movs	r0, #6
 800ca14:	e06f      	b.n	800caf6 <create_name+0x16e>
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ca16:	f04f 0900 	mov.w	r9, #0
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ca1a:	e7cf      	b.n	800c9bc <create_name+0x34>
	lfn[di] = 0;						/* LFN is created */
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ca22:	2c00      	cmp	r4, #0
 800ca24:	f000 80c1 	beq.w	800cbaa <create_name+0x222>
	mem_set(dp->fn, ' ', 11);
 800ca28:	220b      	movs	r2, #11
 800ca2a:	2120      	movs	r1, #32
 800ca2c:	f108 0024 	add.w	r0, r8, #36	; 0x24
 800ca30:	f7fe ffde 	bl	800b9f0 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ca34:	2300      	movs	r3, #0
 800ca36:	e000      	b.n	800ca3a <create_name+0xb2>
 800ca38:	3301      	adds	r3, #1
 800ca3a:	f835 2013 	ldrh.w	r2, [r5, r3, lsl #1]
 800ca3e:	2a20      	cmp	r2, #32
 800ca40:	d0fa      	beq.n	800ca38 <create_name+0xb0>
 800ca42:	2a2e      	cmp	r2, #46	; 0x2e
 800ca44:	d0f8      	beq.n	800ca38 <create_name+0xb0>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ca46:	b11b      	cbz	r3, 800ca50 <create_name+0xc8>
 800ca48:	f049 0903 	orr.w	r9, r9, #3
 800ca4c:	e000      	b.n	800ca50 <create_name+0xc8>
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ca4e:	3c01      	subs	r4, #1
 800ca50:	b16c      	cbz	r4, 800ca6e <create_name+0xe6>
 800ca52:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ca56:	4422      	add	r2, r4
 800ca58:	f835 2012 	ldrh.w	r2, [r5, r2, lsl #1]
 800ca5c:	2a2e      	cmp	r2, #46	; 0x2e
 800ca5e:	d1f6      	bne.n	800ca4e <create_name+0xc6>
 800ca60:	f04f 0b08 	mov.w	fp, #8
 800ca64:	f04f 0a00 	mov.w	sl, #0
 800ca68:	f8cd a004 	str.w	sl, [sp, #4]
 800ca6c:	e008      	b.n	800ca80 <create_name+0xf8>
 800ca6e:	46a2      	mov	sl, r4
 800ca70:	f04f 0b08 	mov.w	fp, #8
 800ca74:	2200      	movs	r2, #0
 800ca76:	9201      	str	r2, [sp, #4]
 800ca78:	e002      	b.n	800ca80 <create_name+0xf8>
			cf |= NS_LOSS | NS_LFN; continue;
 800ca7a:	f049 0903 	orr.w	r9, r9, #3
		w = lfn[si++];					/* Get an LFN character */
 800ca7e:	463b      	mov	r3, r7
 800ca80:	1c5f      	adds	r7, r3, #1
 800ca82:	f835 6013 	ldrh.w	r6, [r5, r3, lsl #1]
		if (!w) break;					/* Break on end of the LFN */
 800ca86:	b1be      	cbz	r6, 800cab8 <create_name+0x130>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ca88:	2e20      	cmp	r6, #32
 800ca8a:	d0f6      	beq.n	800ca7a <create_name+0xf2>
 800ca8c:	2e2e      	cmp	r6, #46	; 0x2e
 800ca8e:	bf14      	ite	ne
 800ca90:	2300      	movne	r3, #0
 800ca92:	2301      	moveq	r3, #1
 800ca94:	42bc      	cmp	r4, r7
 800ca96:	bf08      	it	eq
 800ca98:	2300      	moveq	r3, #0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d1ed      	bne.n	800ca7a <create_name+0xf2>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ca9e:	42bc      	cmp	r4, r7
 800caa0:	bf18      	it	ne
 800caa2:	45da      	cmpne	sl, fp
 800caa4:	d337      	bcc.n	800cb16 <create_name+0x18e>
			if (ni == 11) {				/* Long extension */
 800caa6:	f1bb 0f0b 	cmp.w	fp, #11
 800caaa:	d027      	beq.n	800cafc <create_name+0x174>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800caac:	42bc      	cmp	r4, r7
 800caae:	d001      	beq.n	800cab4 <create_name+0x12c>
 800cab0:	f049 0903 	orr.w	r9, r9, #3
			if (si > di) break;			/* No extension */
 800cab4:	42bc      	cmp	r4, r7
 800cab6:	d224      	bcs.n	800cb02 <create_name+0x17a>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cab8:	f898 3024 	ldrb.w	r3, [r8, #36]	; 0x24
 800cabc:	2be5      	cmp	r3, #229	; 0xe5
 800cabe:	d061      	beq.n	800cb84 <create_name+0x1fc>
	if (ni == 8) b <<= 2;
 800cac0:	f1bb 0f08 	cmp.w	fp, #8
 800cac4:	d062      	beq.n	800cb8c <create_name+0x204>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cac6:	9b01      	ldr	r3, [sp, #4]
 800cac8:	f003 020c 	and.w	r2, r3, #12
 800cacc:	2a0c      	cmp	r2, #12
 800cace:	d003      	beq.n	800cad8 <create_name+0x150>
 800cad0:	f003 0303 	and.w	r3, r3, #3
 800cad4:	2b03      	cmp	r3, #3
 800cad6:	d101      	bne.n	800cadc <create_name+0x154>
 800cad8:	f049 0902 	orr.w	r9, r9, #2
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cadc:	f019 0f02 	tst.w	r9, #2
 800cae0:	d106      	bne.n	800caf0 <create_name+0x168>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cae2:	9b01      	ldr	r3, [sp, #4]
 800cae4:	f003 0303 	and.w	r3, r3, #3
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d054      	beq.n	800cb96 <create_name+0x20e>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800caec:	2a04      	cmp	r2, #4
 800caee:	d055      	beq.n	800cb9c <create_name+0x214>
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800caf0:	f888 902f 	strb.w	r9, [r8, #47]	; 0x2f
	return FR_OK;
 800caf4:	2000      	movs	r0, #0
}
 800caf6:	b003      	add	sp, #12
 800caf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cf |= NS_LOSS | NS_LFN; break;
 800cafc:	f049 0903 	orr.w	r9, r9, #3
 800cb00:	e7da      	b.n	800cab8 <create_name+0x130>
			b <<= 2; continue;
 800cb02:	9b01      	ldr	r3, [sp, #4]
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	9301      	str	r3, [sp, #4]
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800cb0a:	4623      	mov	r3, r4
 800cb0c:	f04f 0b0b 	mov.w	fp, #11
 800cb10:	f04f 0a08 	mov.w	sl, #8
			b <<= 2; continue;
 800cb14:	e7b4      	b.n	800ca80 <create_name+0xf8>
		if (w >= 0x80) {				/* Non ASCII character */
 800cb16:	2e7f      	cmp	r6, #127	; 0x7f
 800cb18:	d80b      	bhi.n	800cb32 <create_name+0x1aa>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cb1a:	b9be      	cbnz	r6, 800cb4c <create_name+0x1c4>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800cb1c:	f049 0903 	orr.w	r9, r9, #3
 800cb20:	265f      	movs	r6, #95	; 0x5f
		dp->fn[i++] = (BYTE)w;
 800cb22:	eb08 030a 	add.w	r3, r8, sl
 800cb26:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800cb2a:	463b      	mov	r3, r7
		dp->fn[i++] = (BYTE)w;
 800cb2c:	f10a 0a01 	add.w	sl, sl, #1
 800cb30:	e7a6      	b.n	800ca80 <create_name+0xf8>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800cb32:	2100      	movs	r1, #0
 800cb34:	4630      	mov	r0, r6
 800cb36:	f000 fef7 	bl	800d928 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800cb3a:	4606      	mov	r6, r0
 800cb3c:	b118      	cbz	r0, 800cb46 <create_name+0x1be>
 800cb3e:	f1a0 0680 	sub.w	r6, r0, #128	; 0x80
 800cb42:	4b1c      	ldr	r3, [pc, #112]	; (800cbb4 <create_name+0x22c>)
 800cb44:	5d9e      	ldrb	r6, [r3, r6]
			cf |= NS_LFN;				/* Force create LFN entry */
 800cb46:	f049 0902 	orr.w	r9, r9, #2
 800cb4a:	e7e6      	b.n	800cb1a <create_name+0x192>
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800cb4c:	4631      	mov	r1, r6
 800cb4e:	481a      	ldr	r0, [pc, #104]	; (800cbb8 <create_name+0x230>)
 800cb50:	f7fe ff60 	bl	800ba14 <chk_chr>
 800cb54:	2800      	cmp	r0, #0
 800cb56:	d1e1      	bne.n	800cb1c <create_name+0x194>
				if (IsUpper(w)) {		/* ASCII large capital */
 800cb58:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	2b19      	cmp	r3, #25
 800cb60:	d804      	bhi.n	800cb6c <create_name+0x1e4>
					b |= 2;
 800cb62:	9b01      	ldr	r3, [sp, #4]
 800cb64:	f043 0302 	orr.w	r3, r3, #2
 800cb68:	9301      	str	r3, [sp, #4]
 800cb6a:	e7da      	b.n	800cb22 <create_name+0x19a>
					if (IsLower(w)) {	/* ASCII small capital */
 800cb6c:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
 800cb70:	b29b      	uxth	r3, r3
 800cb72:	2b19      	cmp	r3, #25
 800cb74:	d8d5      	bhi.n	800cb22 <create_name+0x19a>
						b |= 1; w -= 0x20;
 800cb76:	9b01      	ldr	r3, [sp, #4]
 800cb78:	f043 0301 	orr.w	r3, r3, #1
 800cb7c:	9301      	str	r3, [sp, #4]
 800cb7e:	3e20      	subs	r6, #32
 800cb80:	b2b6      	uxth	r6, r6
 800cb82:	e7ce      	b.n	800cb22 <create_name+0x19a>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cb84:	2305      	movs	r3, #5
 800cb86:	f888 3024 	strb.w	r3, [r8, #36]	; 0x24
 800cb8a:	e799      	b.n	800cac0 <create_name+0x138>
	if (ni == 8) b <<= 2;
 800cb8c:	9b01      	ldr	r3, [sp, #4]
 800cb8e:	009b      	lsls	r3, r3, #2
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	9301      	str	r3, [sp, #4]
 800cb94:	e797      	b.n	800cac6 <create_name+0x13e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cb96:	f049 0910 	orr.w	r9, r9, #16
 800cb9a:	e7a7      	b.n	800caec <create_name+0x164>
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cb9c:	f049 0908 	orr.w	r9, r9, #8
 800cba0:	e7a6      	b.n	800caf0 <create_name+0x168>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800cba2:	2006      	movs	r0, #6
 800cba4:	e7a7      	b.n	800caf6 <create_name+0x16e>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800cba6:	2006      	movs	r0, #6
 800cba8:	e7a5      	b.n	800caf6 <create_name+0x16e>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800cbaa:	2006      	movs	r0, #6
 800cbac:	e7a3      	b.n	800caf6 <create_name+0x16e>
 800cbae:	bf00      	nop
 800cbb0:	080199c4 	.word	0x080199c4
 800cbb4:	080199d8 	.word	0x080199d8
 800cbb8:	080199d0 	.word	0x080199d0

0800cbbc <get_fileinfo>:
{
 800cbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800cbc0:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cbc8:	69c3      	ldr	r3, [r0, #28]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d06b      	beq.n	800cca6 <get_fileinfo+0xea>
 800cbce:	4606      	mov	r6, r0
 800cbd0:	460c      	mov	r4, r1
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800cbd2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800cbd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbd8:	d016      	beq.n	800cc08 <get_fileinfo+0x4c>
			i = j = 0;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	461d      	mov	r5, r3
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cbde:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800cbe2:	1c5f      	adds	r7, r3, #1
 800cbe4:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800cbe8:	b158      	cbz	r0, 800cc02 <get_fileinfo+0x46>
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800cbea:	2100      	movs	r1, #0
 800cbec:	f000 fe9c 	bl	800d928 <ff_convert>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800cbf0:	b130      	cbz	r0, 800cc00 <get_fileinfo+0x44>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800cbf2:	2dfe      	cmp	r5, #254	; 0xfe
 800cbf4:	d80c      	bhi.n	800cc10 <get_fileinfo+0x54>
				fno->fname[i++] = (TCHAR)w;
 800cbf6:	1962      	adds	r2, r4, r5
 800cbf8:	7590      	strb	r0, [r2, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800cbfa:	463b      	mov	r3, r7
				fno->fname[i++] = (TCHAR)w;
 800cbfc:	3501      	adds	r5, #1
 800cbfe:	e7ee      	b.n	800cbde <get_fileinfo+0x22>
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800cc00:	2500      	movs	r5, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800cc02:	4425      	add	r5, r4
 800cc04:	2300      	movs	r3, #0
 800cc06:	75ab      	strb	r3, [r5, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800cc08:	7da5      	ldrb	r5, [r4, #22]
	i = j = 0;
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	4613      	mov	r3, r2
	while (i < 11) {		/* Copy name body and extension */
 800cc0e:	e012      	b.n	800cc36 <get_fileinfo+0x7a>
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800cc10:	2500      	movs	r5, #0
 800cc12:	e7f6      	b.n	800cc02 <get_fileinfo+0x46>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cc14:	23e5      	movs	r3, #229	; 0xe5
 800cc16:	e017      	b.n	800cc48 <get_fileinfo+0x8c>
			if (!lfv) fno->fname[j] = '.';
 800cc18:	b915      	cbnz	r5, 800cc20 <get_fileinfo+0x64>
 800cc1a:	18a0      	adds	r0, r4, r2
 800cc1c:	272e      	movs	r7, #46	; 0x2e
 800cc1e:	7587      	strb	r7, [r0, #22]
			fno->altname[j++] = '.';
 800cc20:	18a0      	adds	r0, r4, r2
 800cc22:	272e      	movs	r7, #46	; 0x2e
 800cc24:	7247      	strb	r7, [r0, #9]
 800cc26:	3201      	adds	r2, #1
 800cc28:	e010      	b.n	800cc4c <get_fileinfo+0x90>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cc2a:	2010      	movs	r0, #16
 800cc2c:	e01c      	b.n	800cc68 <get_fileinfo+0xac>
			fno->fname[j] = c;
 800cc2e:	18a0      	adds	r0, r4, r2
 800cc30:	7583      	strb	r3, [r0, #22]
		j++;
 800cc32:	3201      	adds	r2, #1
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cc34:	460b      	mov	r3, r1
	while (i < 11) {		/* Copy name body and extension */
 800cc36:	2b0a      	cmp	r3, #10
 800cc38:	d81b      	bhi.n	800cc72 <get_fileinfo+0xb6>
		c = (TCHAR)dp->dir[i++];
 800cc3a:	6a30      	ldr	r0, [r6, #32]
 800cc3c:	1c59      	adds	r1, r3, #1
 800cc3e:	5cc3      	ldrb	r3, [r0, r3]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cc40:	2b20      	cmp	r3, #32
 800cc42:	d0f7      	beq.n	800cc34 <get_fileinfo+0x78>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cc44:	2b05      	cmp	r3, #5
 800cc46:	d0e5      	beq.n	800cc14 <get_fileinfo+0x58>
		if (i == 9) {						/* Insert a . if extension is exist */
 800cc48:	2909      	cmp	r1, #9
 800cc4a:	d0e5      	beq.n	800cc18 <get_fileinfo+0x5c>
		fno->altname[j] = c;
 800cc4c:	18a0      	adds	r0, r4, r2
 800cc4e:	7243      	strb	r3, [r0, #9]
		if (!lfv) {
 800cc50:	2d00      	cmp	r5, #0
 800cc52:	d1ee      	bne.n	800cc32 <get_fileinfo+0x76>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800cc54:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
 800cc58:	b2c0      	uxtb	r0, r0
 800cc5a:	2819      	cmp	r0, #25
 800cc5c:	d8e7      	bhi.n	800cc2e <get_fileinfo+0x72>
 800cc5e:	6a30      	ldr	r0, [r6, #32]
 800cc60:	7b07      	ldrb	r7, [r0, #12]
 800cc62:	2908      	cmp	r1, #8
 800cc64:	d8e1      	bhi.n	800cc2a <get_fileinfo+0x6e>
 800cc66:	2008      	movs	r0, #8
 800cc68:	4207      	tst	r7, r0
 800cc6a:	d0e0      	beq.n	800cc2e <get_fileinfo+0x72>
				c += 0x20;			/* To lower */
 800cc6c:	3320      	adds	r3, #32
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	e7dd      	b.n	800cc2e <get_fileinfo+0x72>
	if (!lfv) {
 800cc72:	b935      	cbnz	r5, 800cc82 <get_fileinfo+0xc6>
		fno->fname[j] = 0;
 800cc74:	18a3      	adds	r3, r4, r2
 800cc76:	2100      	movs	r1, #0
 800cc78:	7599      	strb	r1, [r3, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800cc7a:	6a33      	ldr	r3, [r6, #32]
 800cc7c:	7b1b      	ldrb	r3, [r3, #12]
 800cc7e:	b903      	cbnz	r3, 800cc82 <get_fileinfo+0xc6>
 800cc80:	460a      	mov	r2, r1
	fno->altname[j] = 0;	/* Terminate the SFN */
 800cc82:	4422      	add	r2, r4
 800cc84:	2300      	movs	r3, #0
 800cc86:	7253      	strb	r3, [r2, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cc88:	6a33      	ldr	r3, [r6, #32]
 800cc8a:	7adb      	ldrb	r3, [r3, #11]
 800cc8c:	7223      	strb	r3, [r4, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cc8e:	6a30      	ldr	r0, [r6, #32]
 800cc90:	301c      	adds	r0, #28
 800cc92:	f7fe fe8a 	bl	800b9aa <ld_dword>
 800cc96:	6020      	str	r0, [r4, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cc98:	6a30      	ldr	r0, [r6, #32]
 800cc9a:	3016      	adds	r0, #22
 800cc9c:	f7fe fe85 	bl	800b9aa <ld_dword>
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cca0:	80e0      	strh	r0, [r4, #6]
 800cca2:	0c00      	lsrs	r0, r0, #16
 800cca4:	80a0      	strh	r0, [r4, #4]
}
 800cca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ccac <cmp_lfn>:
{
 800ccac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb0:	4681      	mov	r9, r0
 800ccb2:	460f      	mov	r7, r1
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ccb4:	f101 001a 	add.w	r0, r1, #26
 800ccb8:	f7fe fe72 	bl	800b9a0 <ld_word>
 800ccbc:	bbc8      	cbnz	r0, 800cd32 <cmp_lfn+0x86>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ccbe:	783e      	ldrb	r6, [r7, #0]
 800ccc0:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800ccc4:	3e01      	subs	r6, #1
 800ccc6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800ccca:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ccce:	f04f 0801 	mov.w	r8, #1
 800ccd2:	2500      	movs	r5, #0
 800ccd4:	e006      	b.n	800cce4 <cmp_lfn+0x38>
				return 0;					/* Not matched */
 800ccd6:	2000      	movs	r0, #0
 800ccd8:	e02c      	b.n	800cd34 <cmp_lfn+0x88>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ccda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ccde:	4298      	cmp	r0, r3
 800cce0:	d12a      	bne.n	800cd38 <cmp_lfn+0x8c>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cce2:	3501      	adds	r5, #1
 800cce4:	2d0c      	cmp	r5, #12
 800cce6:	d818      	bhi.n	800cd1a <cmp_lfn+0x6e>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cce8:	4b17      	ldr	r3, [pc, #92]	; (800cd48 <cmp_lfn+0x9c>)
 800ccea:	5d58      	ldrb	r0, [r3, r5]
 800ccec:	4438      	add	r0, r7
 800ccee:	f7fe fe57 	bl	800b9a0 <ld_word>
 800ccf2:	4604      	mov	r4, r0
		if (wc) {
 800ccf4:	f1b8 0f00 	cmp.w	r8, #0
 800ccf8:	d0ef      	beq.n	800ccda <cmp_lfn+0x2e>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ccfa:	2efe      	cmp	r6, #254	; 0xfe
 800ccfc:	d8eb      	bhi.n	800ccd6 <cmp_lfn+0x2a>
 800ccfe:	f000 fe31 	bl	800d964 <ff_wtoupper>
 800cd02:	4680      	mov	r8, r0
 800cd04:	f106 0a01 	add.w	sl, r6, #1
 800cd08:	f839 0016 	ldrh.w	r0, [r9, r6, lsl #1]
 800cd0c:	f000 fe2a 	bl	800d964 <ff_wtoupper>
 800cd10:	4580      	cmp	r8, r0
 800cd12:	d1e0      	bne.n	800ccd6 <cmp_lfn+0x2a>
			wc = uc;
 800cd14:	46a0      	mov	r8, r4
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cd16:	4656      	mov	r6, sl
 800cd18:	e7e3      	b.n	800cce2 <cmp_lfn+0x36>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800cd1a:	783b      	ldrb	r3, [r7, #0]
 800cd1c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cd20:	d00c      	beq.n	800cd3c <cmp_lfn+0x90>
 800cd22:	f1b8 0f00 	cmp.w	r8, #0
 800cd26:	d00b      	beq.n	800cd40 <cmp_lfn+0x94>
 800cd28:	f839 3016 	ldrh.w	r3, [r9, r6, lsl #1]
 800cd2c:	b953      	cbnz	r3, 800cd44 <cmp_lfn+0x98>
	return 1;		/* The part of LFN matched */
 800cd2e:	2001      	movs	r0, #1
 800cd30:	e000      	b.n	800cd34 <cmp_lfn+0x88>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800cd32:	2000      	movs	r0, #0
}
 800cd34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cd38:	2000      	movs	r0, #0
 800cd3a:	e7fb      	b.n	800cd34 <cmp_lfn+0x88>
	return 1;		/* The part of LFN matched */
 800cd3c:	2001      	movs	r0, #1
 800cd3e:	e7f9      	b.n	800cd34 <cmp_lfn+0x88>
 800cd40:	2001      	movs	r0, #1
 800cd42:	e7f7      	b.n	800cd34 <cmp_lfn+0x88>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800cd44:	2000      	movs	r0, #0
 800cd46:	e7f5      	b.n	800cd34 <cmp_lfn+0x88>
 800cd48:	08019a58 	.word	0x08019a58

0800cd4c <dir_find>:
{
 800cd4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd50:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800cd52:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cd56:	2100      	movs	r1, #0
 800cd58:	f7ff fc0f 	bl	800c57a <dir_sdi>
	if (res != FR_OK) return res;
 800cd5c:	4606      	mov	r6, r0
 800cd5e:	2800      	cmp	r0, #0
 800cd60:	d164      	bne.n	800ce2c <dir_find+0xe0>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cd62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd66:	6323      	str	r3, [r4, #48]	; 0x30
 800cd68:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800cd6c:	464f      	mov	r7, r9
 800cd6e:	e00a      	b.n	800cd86 <dir_find+0x3a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cd70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd74:	6323      	str	r3, [r4, #48]	; 0x30
 800cd76:	27ff      	movs	r7, #255	; 0xff
		res = dir_next(dp, 0);	/* Next entry */
 800cd78:	2100      	movs	r1, #0
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	f7ff fcfd 	bl	800c77a <dir_next>
	} while (res == FR_OK);
 800cd80:	4606      	mov	r6, r0
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d152      	bne.n	800ce2c <dir_find+0xe0>
		res = move_window(fs, dp->sect);
 800cd86:	69e1      	ldr	r1, [r4, #28]
 800cd88:	4640      	mov	r0, r8
 800cd8a:	f7ff f92b 	bl	800bfe4 <move_window>
		if (res != FR_OK) break;
 800cd8e:	4606      	mov	r6, r0
 800cd90:	2800      	cmp	r0, #0
 800cd92:	d14b      	bne.n	800ce2c <dir_find+0xe0>
		c = dp->dir[DIR_Name];
 800cd94:	6a25      	ldr	r5, [r4, #32]
 800cd96:	782b      	ldrb	r3, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d046      	beq.n	800ce2a <dir_find+0xde>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cd9c:	7ae9      	ldrb	r1, [r5, #11]
 800cd9e:	f001 023f 	and.w	r2, r1, #63	; 0x3f
 800cda2:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cda4:	2be5      	cmp	r3, #229	; 0xe5
 800cda6:	d0e3      	beq.n	800cd70 <dir_find+0x24>
 800cda8:	f011 0f08 	tst.w	r1, #8
 800cdac:	d001      	beq.n	800cdb2 <dir_find+0x66>
 800cdae:	2a0f      	cmp	r2, #15
 800cdb0:	d1de      	bne.n	800cd70 <dir_find+0x24>
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cdb2:	2a0f      	cmp	r2, #15
 800cdb4:	d016      	beq.n	800cde4 <dir_find+0x98>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cdb6:	b927      	cbnz	r7, 800cdc2 <dir_find+0x76>
 800cdb8:	4628      	mov	r0, r5
 800cdba:	f7ff f828 	bl	800be0e <sum_sfn>
 800cdbe:	4548      	cmp	r0, r9
 800cdc0:	d034      	beq.n	800ce2c <dir_find+0xe0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cdc2:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800cdc6:	f013 0f01 	tst.w	r3, #1
 800cdca:	d106      	bne.n	800cdda <dir_find+0x8e>
 800cdcc:	220b      	movs	r2, #11
 800cdce:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800cdd2:	4628      	mov	r0, r5
 800cdd4:	f7fe fe11 	bl	800b9fa <mem_cmp>
 800cdd8:	b340      	cbz	r0, 800ce2c <dir_find+0xe0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cdda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cdde:	6323      	str	r3, [r4, #48]	; 0x30
 800cde0:	27ff      	movs	r7, #255	; 0xff
 800cde2:	e7c9      	b.n	800cd78 <dir_find+0x2c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cde4:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 800cde8:	f012 0f40 	tst.w	r2, #64	; 0x40
 800cdec:	d1c4      	bne.n	800cd78 <dir_find+0x2c>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cdee:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cdf2:	d006      	beq.n	800ce02 <dir_find+0xb6>
						sum = dp->dir[LDIR_Chksum];
 800cdf4:	f895 900d 	ldrb.w	r9, [r5, #13]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cdf8:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cdfc:	6962      	ldr	r2, [r4, #20]
 800cdfe:	6322      	str	r2, [r4, #48]	; 0x30
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800ce00:	461f      	mov	r7, r3
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ce02:	42bb      	cmp	r3, r7
 800ce04:	d001      	beq.n	800ce0a <dir_find+0xbe>
 800ce06:	27ff      	movs	r7, #255	; 0xff
 800ce08:	e7b6      	b.n	800cd78 <dir_find+0x2c>
 800ce0a:	7b6b      	ldrb	r3, [r5, #13]
 800ce0c:	454b      	cmp	r3, r9
 800ce0e:	d001      	beq.n	800ce14 <dir_find+0xc8>
 800ce10:	27ff      	movs	r7, #255	; 0xff
 800ce12:	e7b1      	b.n	800cd78 <dir_find+0x2c>
 800ce14:	4629      	mov	r1, r5
 800ce16:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800ce1a:	f7ff ff47 	bl	800ccac <cmp_lfn>
 800ce1e:	b110      	cbz	r0, 800ce26 <dir_find+0xda>
 800ce20:	3f01      	subs	r7, #1
 800ce22:	b2ff      	uxtb	r7, r7
 800ce24:	e7a8      	b.n	800cd78 <dir_find+0x2c>
 800ce26:	27ff      	movs	r7, #255	; 0xff
 800ce28:	e7a6      	b.n	800cd78 <dir_find+0x2c>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ce2a:	2604      	movs	r6, #4
}
 800ce2c:	4630      	mov	r0, r6
 800ce2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ce32 <follow_path>:
{
 800ce32:	b530      	push	{r4, r5, lr}
 800ce34:	b083      	sub	sp, #12
 800ce36:	4604      	mov	r4, r0
 800ce38:	9101      	str	r1, [sp, #4]
	FATFS *fs = obj->fs;
 800ce3a:	6805      	ldr	r5, [r0, #0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ce3c:	e001      	b.n	800ce42 <follow_path+0x10>
 800ce3e:	3301      	adds	r3, #1
 800ce40:	9301      	str	r3, [sp, #4]
 800ce42:	9b01      	ldr	r3, [sp, #4]
 800ce44:	781a      	ldrb	r2, [r3, #0]
 800ce46:	2a2f      	cmp	r2, #47	; 0x2f
 800ce48:	d0f9      	beq.n	800ce3e <follow_path+0xc>
 800ce4a:	2a5c      	cmp	r2, #92	; 0x5c
 800ce4c:	d0f7      	beq.n	800ce3e <follow_path+0xc>
		obj->sclust = 0;					/* Start from root directory */
 800ce4e:	2200      	movs	r2, #0
 800ce50:	60a2      	str	r2, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	2b1f      	cmp	r3, #31
 800ce56:	d91e      	bls.n	800ce96 <follow_path+0x64>
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce58:	a901      	add	r1, sp, #4
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	f7ff fd94 	bl	800c988 <create_name>
			if (res != FR_OK) break;
 800ce60:	4603      	mov	r3, r0
 800ce62:	bb00      	cbnz	r0, 800cea6 <follow_path+0x74>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ce64:	4620      	mov	r0, r4
 800ce66:	f7ff ff71 	bl	800cd4c <dir_find>
			ns = dp->fn[NSFLAG];
 800ce6a:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800ce6e:	4603      	mov	r3, r0
 800ce70:	b9e0      	cbnz	r0, 800ceac <follow_path+0x7a>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ce72:	f012 0f04 	tst.w	r2, #4
 800ce76:	d116      	bne.n	800cea6 <follow_path+0x74>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ce78:	79a3      	ldrb	r3, [r4, #6]
 800ce7a:	f013 0f10 	tst.w	r3, #16
 800ce7e:	d01c      	beq.n	800ceba <follow_path+0x88>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ce80:	f105 0134 	add.w	r1, r5, #52	; 0x34
 800ce84:	6963      	ldr	r3, [r4, #20]
 800ce86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce8a:	4419      	add	r1, r3
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	f7fe fec4 	bl	800bc1a <ld_clust>
 800ce92:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce94:	e7e0      	b.n	800ce58 <follow_path+0x26>
		dp->fn[NSFLAG] = NS_NONAME;
 800ce96:	2380      	movs	r3, #128	; 0x80
 800ce98:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ce9c:	4611      	mov	r1, r2
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f7ff fb6b 	bl	800c57a <dir_sdi>
 800cea4:	4603      	mov	r3, r0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	b003      	add	sp, #12
 800ceaa:	bd30      	pop	{r4, r5, pc}
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ceac:	2804      	cmp	r0, #4
 800ceae:	d1fa      	bne.n	800cea6 <follow_path+0x74>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ceb0:	f012 0f04 	tst.w	r2, #4
 800ceb4:	d1f7      	bne.n	800cea6 <follow_path+0x74>
 800ceb6:	2305      	movs	r3, #5
 800ceb8:	e7f5      	b.n	800cea6 <follow_path+0x74>
				res = FR_NO_PATH; break;
 800ceba:	2305      	movs	r3, #5
 800cebc:	e7f3      	b.n	800cea6 <follow_path+0x74>
	...

0800cec0 <dir_register>:
{
 800cec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cec4:	b085      	sub	sp, #20
	FATFS *fs = dp->obj.fs;
 800cec6:	6806      	ldr	r6, [r0, #0]
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cec8:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800cecc:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800ced0:	f040 808e 	bne.w	800cff0 <dir_register+0x130>
 800ced4:	4607      	mov	r7, r0
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ced6:	2400      	movs	r4, #0
 800ced8:	e000      	b.n	800cedc <dir_register+0x1c>
 800ceda:	3401      	adds	r4, #1
 800cedc:	68f3      	ldr	r3, [r6, #12]
 800cede:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d1f9      	bne.n	800ceda <dir_register+0x1a>
	mem_cpy(sn, dp->fn, 12);
 800cee6:	f107 0824 	add.w	r8, r7, #36	; 0x24
 800ceea:	220c      	movs	r2, #12
 800ceec:	4641      	mov	r1, r8
 800ceee:	a801      	add	r0, sp, #4
 800cef0:	f7fe fd74 	bl	800b9dc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cef4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800cef8:	f013 0f01 	tst.w	r3, #1
 800cefc:	d01c      	beq.n	800cf38 <dir_register+0x78>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800cefe:	2340      	movs	r3, #64	; 0x40
 800cf00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800cf04:	2501      	movs	r5, #1
 800cf06:	e000      	b.n	800cf0a <dir_register+0x4a>
 800cf08:	3501      	adds	r5, #1
 800cf0a:	2d63      	cmp	r5, #99	; 0x63
 800cf0c:	d80b      	bhi.n	800cf26 <dir_register+0x66>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cf0e:	462b      	mov	r3, r5
 800cf10:	68f2      	ldr	r2, [r6, #12]
 800cf12:	a901      	add	r1, sp, #4
 800cf14:	4640      	mov	r0, r8
 800cf16:	f7fe ff25 	bl	800bd64 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cf1a:	4638      	mov	r0, r7
 800cf1c:	f7ff ff16 	bl	800cd4c <dir_find>
			if (res != FR_OK) break;
 800cf20:	4681      	mov	r9, r0
 800cf22:	2800      	cmp	r0, #0
 800cf24:	d0f0      	beq.n	800cf08 <dir_register+0x48>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cf26:	2d64      	cmp	r5, #100	; 0x64
 800cf28:	d065      	beq.n	800cff6 <dir_register+0x136>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cf2a:	f1b9 0f04 	cmp.w	r9, #4
 800cf2e:	d11b      	bne.n	800cf68 <dir_register+0xa8>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cf30:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800cf34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cf38:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800cf3c:	f013 0f02 	tst.w	r3, #2
 800cf40:	d006      	beq.n	800cf50 <dir_register+0x90>
 800cf42:	340c      	adds	r4, #12
 800cf44:	4b2d      	ldr	r3, [pc, #180]	; (800cffc <dir_register+0x13c>)
 800cf46:	fba3 3404 	umull	r3, r4, r3, r4
 800cf4a:	08a4      	lsrs	r4, r4, #2
 800cf4c:	3401      	adds	r4, #1
 800cf4e:	e000      	b.n	800cf52 <dir_register+0x92>
 800cf50:	2401      	movs	r4, #1
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cf52:	4621      	mov	r1, r4
 800cf54:	4638      	mov	r0, r7
 800cf56:	f7ff fc94 	bl	800c882 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cf5a:	4681      	mov	r9, r0
 800cf5c:	b908      	cbnz	r0, 800cf62 <dir_register+0xa2>
 800cf5e:	3c01      	subs	r4, #1
 800cf60:	d106      	bne.n	800cf70 <dir_register+0xb0>
	if (res == FR_OK) {
 800cf62:	f1b9 0f00 	cmp.w	r9, #0
 800cf66:	d029      	beq.n	800cfbc <dir_register+0xfc>
}
 800cf68:	4648      	mov	r0, r9
 800cf6a:	b005      	add	sp, #20
 800cf6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cf70:	6979      	ldr	r1, [r7, #20]
 800cf72:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 800cf76:	4638      	mov	r0, r7
 800cf78:	f7ff faff 	bl	800c57a <dir_sdi>
		if (res == FR_OK) {
 800cf7c:	4681      	mov	r9, r0
 800cf7e:	2800      	cmp	r0, #0
 800cf80:	d1ef      	bne.n	800cf62 <dir_register+0xa2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cf82:	4640      	mov	r0, r8
 800cf84:	f7fe ff43 	bl	800be0e <sum_sfn>
 800cf88:	4605      	mov	r5, r0
				res = move_window(fs, dp->sect);
 800cf8a:	69f9      	ldr	r1, [r7, #28]
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	f7ff f829 	bl	800bfe4 <move_window>
				if (res != FR_OK) break;
 800cf92:	4681      	mov	r9, r0
 800cf94:	2800      	cmp	r0, #0
 800cf96:	d1e4      	bne.n	800cf62 <dir_register+0xa2>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cf98:	462b      	mov	r3, r5
 800cf9a:	b2e2      	uxtb	r2, r4
 800cf9c:	6a39      	ldr	r1, [r7, #32]
 800cf9e:	68f0      	ldr	r0, [r6, #12]
 800cfa0:	f7fe fea4 	bl	800bcec <put_lfn>
				fs->wflag = 1;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	70f3      	strb	r3, [r6, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	4638      	mov	r0, r7
 800cfac:	f7ff fbe5 	bl	800c77a <dir_next>
			} while (res == FR_OK && --nent);
 800cfb0:	4681      	mov	r9, r0
 800cfb2:	2800      	cmp	r0, #0
 800cfb4:	d1d5      	bne.n	800cf62 <dir_register+0xa2>
 800cfb6:	3c01      	subs	r4, #1
 800cfb8:	d1e7      	bne.n	800cf8a <dir_register+0xca>
 800cfba:	e7d2      	b.n	800cf62 <dir_register+0xa2>
		res = move_window(fs, dp->sect);
 800cfbc:	69f9      	ldr	r1, [r7, #28]
 800cfbe:	4630      	mov	r0, r6
 800cfc0:	f7ff f810 	bl	800bfe4 <move_window>
		if (res == FR_OK) {
 800cfc4:	4681      	mov	r9, r0
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	d1ce      	bne.n	800cf68 <dir_register+0xa8>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cfca:	2220      	movs	r2, #32
 800cfcc:	2100      	movs	r1, #0
 800cfce:	6a38      	ldr	r0, [r7, #32]
 800cfd0:	f7fe fd0e 	bl	800b9f0 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cfd4:	220b      	movs	r2, #11
 800cfd6:	4641      	mov	r1, r8
 800cfd8:	6a38      	ldr	r0, [r7, #32]
 800cfda:	f7fe fcff 	bl	800b9dc <mem_cpy>
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800cfde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfe2:	6a3a      	ldr	r2, [r7, #32]
 800cfe4:	f003 0318 	and.w	r3, r3, #24
 800cfe8:	7313      	strb	r3, [r2, #12]
			fs->wflag = 1;
 800cfea:	2301      	movs	r3, #1
 800cfec:	70f3      	strb	r3, [r6, #3]
 800cfee:	e7bb      	b.n	800cf68 <dir_register+0xa8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cff0:	f04f 0906 	mov.w	r9, #6
 800cff4:	e7b8      	b.n	800cf68 <dir_register+0xa8>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cff6:	f04f 0907 	mov.w	r9, #7
 800cffa:	e7b5      	b.n	800cf68 <dir_register+0xa8>
 800cffc:	4ec4ec4f 	.word	0x4ec4ec4f

0800d000 <sync_fs>:
{
 800d000:	b570      	push	{r4, r5, r6, lr}
 800d002:	4604      	mov	r4, r0
	res = sync_window(fs);
 800d004:	f7fe ffc4 	bl	800bf90 <sync_window>
	if (res == FR_OK) {
 800d008:	4605      	mov	r5, r0
 800d00a:	b948      	cbnz	r0, 800d020 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d00c:	7823      	ldrb	r3, [r4, #0]
 800d00e:	2b03      	cmp	r3, #3
 800d010:	d008      	beq.n	800d024 <sync_fs+0x24>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d012:	2200      	movs	r2, #0
 800d014:	4611      	mov	r1, r2
 800d016:	7860      	ldrb	r0, [r4, #1]
 800d018:	f7fe fcb6 	bl	800b988 <disk_ioctl>
 800d01c:	b100      	cbz	r0, 800d020 <sync_fs+0x20>
 800d01e:	2501      	movs	r5, #1
}
 800d020:	4628      	mov	r0, r5
 800d022:	bd70      	pop	{r4, r5, r6, pc}
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d024:	7923      	ldrb	r3, [r4, #4]
 800d026:	2b01      	cmp	r3, #1
 800d028:	d1f3      	bne.n	800d012 <sync_fs+0x12>
			mem_set(fs->win, 0, SS(fs));
 800d02a:	f104 0634 	add.w	r6, r4, #52	; 0x34
 800d02e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d032:	2100      	movs	r1, #0
 800d034:	4630      	mov	r0, r6
 800d036:	f7fe fcdb 	bl	800b9f0 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d03a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d03e:	f204 2032 	addw	r0, r4, #562	; 0x232
 800d042:	f7fe fcbd 	bl	800b9c0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d046:	490f      	ldr	r1, [pc, #60]	; (800d084 <sync_fs+0x84>)
 800d048:	4630      	mov	r0, r6
 800d04a:	f7fe fcbd 	bl	800b9c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d04e:	490e      	ldr	r1, [pc, #56]	; (800d088 <sync_fs+0x88>)
 800d050:	f504 7006 	add.w	r0, r4, #536	; 0x218
 800d054:	f7fe fcb8 	bl	800b9c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d058:	6961      	ldr	r1, [r4, #20]
 800d05a:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800d05e:	f7fe fcb3 	bl	800b9c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d062:	6921      	ldr	r1, [r4, #16]
 800d064:	f504 7008 	add.w	r0, r4, #544	; 0x220
 800d068:	f7fe fcae 	bl	800b9c8 <st_dword>
			fs->winsect = fs->volbase + 1;
 800d06c:	6a22      	ldr	r2, [r4, #32]
 800d06e:	3201      	adds	r2, #1
 800d070:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d072:	2301      	movs	r3, #1
 800d074:	4631      	mov	r1, r6
 800d076:	7860      	ldrb	r0, [r4, #1]
 800d078:	f7fe fc7a 	bl	800b970 <disk_write>
			fs->fsi_flag = 0;
 800d07c:	2300      	movs	r3, #0
 800d07e:	7123      	strb	r3, [r4, #4]
 800d080:	e7c7      	b.n	800d012 <sync_fs+0x12>
 800d082:	bf00      	nop
 800d084:	41615252 	.word	0x41615252
 800d088:	61417272 	.word	0x61417272

0800d08c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d08c:	b570      	push	{r4, r5, r6, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	9001      	str	r0, [sp, #4]
 800d092:	9100      	str	r1, [sp, #0]
 800d094:	4616      	mov	r6, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d096:	9103      	str	r1, [sp, #12]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d098:	a803      	add	r0, sp, #12
 800d09a:	f7fe ff32 	bl	800bf02 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d09e:	1e04      	subs	r4, r0, #0
 800d0a0:	db20      	blt.n	800d0e4 <f_mount+0x58>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d0a2:	4b11      	ldr	r3, [pc, #68]	; (800d0e8 <f_mount+0x5c>)
 800d0a4:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]

	if (cfs) {
 800d0a8:	b125      	cbz	r5, 800d0b4 <f_mount+0x28>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d0aa:	4628      	mov	r0, r5
 800d0ac:	f7fe fd7a 	bl	800bba4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	702b      	strb	r3, [r5, #0]
	}

	if (fs) {
 800d0b4:	9b01      	ldr	r3, [sp, #4]
 800d0b6:	b10b      	cbz	r3, 800d0bc <f_mount+0x30>
		fs->fs_type = 0;				/* Clear new fs object */
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d0bc:	9b01      	ldr	r3, [sp, #4]
 800d0be:	4a0a      	ldr	r2, [pc, #40]	; (800d0e8 <f_mount+0x5c>)
 800d0c0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d0c4:	1e72      	subs	r2, r6, #1
 800d0c6:	bf18      	it	ne
 800d0c8:	2201      	movne	r2, #1
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	bf08      	it	eq
 800d0ce:	f042 0201 	orreq.w	r2, r2, #1
 800d0d2:	b112      	cbz	r2, 800d0da <f_mount+0x4e>
 800d0d4:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800d0d6:	b004      	add	sp, #16
 800d0d8:	bd70      	pop	{r4, r5, r6, pc}
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d0da:	a901      	add	r1, sp, #4
 800d0dc:	4668      	mov	r0, sp
 800d0de:	f7fe ffd9 	bl	800c094 <find_volume>
	LEAVE_FF(fs, res);
 800d0e2:	e7f8      	b.n	800d0d6 <f_mount+0x4a>
	if (vol < 0) return FR_INVALID_DRIVE;
 800d0e4:	200b      	movs	r0, #11
 800d0e6:	e7f6      	b.n	800d0d6 <f_mount+0x4a>
 800d0e8:	2001ddb0 	.word	0x2001ddb0

0800d0ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d0ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0f0:	b093      	sub	sp, #76	; 0x4c
 800d0f2:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	f000 810d 	beq.w	800d314 <f_open+0x228>
 800d0fa:	4615      	mov	r5, r2
 800d0fc:	4606      	mov	r6, r0

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d0fe:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800d102:	463a      	mov	r2, r7
 800d104:	a903      	add	r1, sp, #12
 800d106:	a801      	add	r0, sp, #4
 800d108:	f7fe ffc4 	bl	800c094 <find_volume>
	if (res == FR_OK) {
 800d10c:	4604      	mov	r4, r0
 800d10e:	b130      	cbz	r0, 800d11e <f_open+0x32>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d110:	b10c      	cbz	r4, 800d116 <f_open+0x2a>
 800d112:	2300      	movs	r3, #0
 800d114:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
}
 800d116:	4620      	mov	r0, r4
 800d118:	b013      	add	sp, #76	; 0x4c
 800d11a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		dj.obj.fs = fs;
 800d11e:	9b03      	ldr	r3, [sp, #12]
 800d120:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d122:	9901      	ldr	r1, [sp, #4]
 800d124:	a804      	add	r0, sp, #16
 800d126:	f7ff fe84 	bl	800ce32 <follow_path>
		if (res == FR_OK) {
 800d12a:	4604      	mov	r4, r0
 800d12c:	b960      	cbnz	r0, 800d148 <f_open+0x5c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d12e:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800d132:	2b00      	cmp	r3, #0
 800d134:	db50      	blt.n	800d1d8 <f_open+0xec>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d136:	f037 0301 	bics.w	r3, r7, #1
 800d13a:	bf14      	ite	ne
 800d13c:	2101      	movne	r1, #1
 800d13e:	2100      	moveq	r1, #0
 800d140:	a804      	add	r0, sp, #16
 800d142:	f7fe fc6f 	bl	800ba24 <chk_lock>
 800d146:	4604      	mov	r4, r0
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d148:	f015 0f1c 	tst.w	r5, #28
 800d14c:	d05a      	beq.n	800d204 <f_open+0x118>
			if (res != FR_OK) {					/* No file, create new */
 800d14e:	2c00      	cmp	r4, #0
 800d150:	d04e      	beq.n	800d1f0 <f_open+0x104>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d152:	2c04      	cmp	r4, #4
 800d154:	d042      	beq.n	800d1dc <f_open+0xf0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d156:	f047 0708 	orr.w	r7, r7, #8
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d15a:	2c00      	cmp	r4, #0
 800d15c:	d161      	bne.n	800d222 <f_open+0x136>
 800d15e:	f017 0f08 	tst.w	r7, #8
 800d162:	d05e      	beq.n	800d222 <f_open+0x136>
				dw = GET_FATTIME();
 800d164:	f7fe fb06 	bl	800b774 <get_fattime>
 800d168:	4605      	mov	r5, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d16a:	4601      	mov	r1, r0
 800d16c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d16e:	300e      	adds	r0, #14
 800d170:	f7fe fc2a 	bl	800b9c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d174:	4629      	mov	r1, r5
 800d176:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d178:	3016      	adds	r0, #22
 800d17a:	f7fe fc25 	bl	800b9c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d17e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d180:	2220      	movs	r2, #32
 800d182:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d184:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d188:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800d18c:	4649      	mov	r1, r9
 800d18e:	4640      	mov	r0, r8
 800d190:	f7fe fd43 	bl	800bc1a <ld_clust>
 800d194:	4605      	mov	r5, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d196:	2200      	movs	r2, #0
 800d198:	4649      	mov	r1, r9
 800d19a:	4640      	mov	r0, r8
 800d19c:	f7fe fd50 	bl	800bc40 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d1a0:	2100      	movs	r1, #0
 800d1a2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d1a4:	301c      	adds	r0, #28
 800d1a6:	f7fe fc0f 	bl	800b9c8 <st_dword>
					fs->wflag = 1;
 800d1aa:	9b03      	ldr	r3, [sp, #12]
 800d1ac:	2201      	movs	r2, #1
 800d1ae:	70da      	strb	r2, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800d1b0:	b3bd      	cbz	r5, 800d222 <f_open+0x136>
						dw = fs->winsect;
 800d1b2:	9b03      	ldr	r3, [sp, #12]
 800d1b4:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	4629      	mov	r1, r5
 800d1bc:	a804      	add	r0, sp, #16
 800d1be:	f7ff fa9d 	bl	800c6fc <remove_chain>
						if (res == FR_OK) {
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	bb68      	cbnz	r0, 800d222 <f_open+0x136>
							res = move_window(fs, dw);
 800d1c6:	4641      	mov	r1, r8
 800d1c8:	9803      	ldr	r0, [sp, #12]
 800d1ca:	f7fe ff0b 	bl	800bfe4 <move_window>
 800d1ce:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d1d0:	3d01      	subs	r5, #1
 800d1d2:	9b03      	ldr	r3, [sp, #12]
 800d1d4:	611d      	str	r5, [r3, #16]
 800d1d6:	e024      	b.n	800d222 <f_open+0x136>
				res = FR_INVALID_NAME;
 800d1d8:	2406      	movs	r4, #6
 800d1da:	e7b5      	b.n	800d148 <f_open+0x5c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d1dc:	f7fe fc60 	bl	800baa0 <enq_lock>
 800d1e0:	b908      	cbnz	r0, 800d1e6 <f_open+0xfa>
 800d1e2:	2412      	movs	r4, #18
 800d1e4:	e7b7      	b.n	800d156 <f_open+0x6a>
 800d1e6:	a804      	add	r0, sp, #16
 800d1e8:	f7ff fe6a 	bl	800cec0 <dir_register>
 800d1ec:	4604      	mov	r4, r0
 800d1ee:	e7b2      	b.n	800d156 <f_open+0x6a>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d1f0:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800d1f4:	f013 0f11 	tst.w	r3, #17
 800d1f8:	d112      	bne.n	800d220 <f_open+0x134>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d1fa:	f015 0f04 	tst.w	r5, #4
 800d1fe:	d0ac      	beq.n	800d15a <f_open+0x6e>
 800d200:	2408      	movs	r4, #8
 800d202:	e00e      	b.n	800d222 <f_open+0x136>
			if (res == FR_OK) {					/* Following succeeded */
 800d204:	b96c      	cbnz	r4, 800d222 <f_open+0x136>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d206:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800d20a:	f013 0f10 	tst.w	r3, #16
 800d20e:	d14c      	bne.n	800d2aa <f_open+0x1be>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d210:	f015 0f02 	tst.w	r5, #2
 800d214:	d005      	beq.n	800d222 <f_open+0x136>
 800d216:	f013 0f01 	tst.w	r3, #1
 800d21a:	d002      	beq.n	800d222 <f_open+0x136>
						res = FR_DENIED;
 800d21c:	2407      	movs	r4, #7
 800d21e:	e016      	b.n	800d24e <f_open+0x162>
					res = FR_DENIED;
 800d220:	2407      	movs	r4, #7
		if (res == FR_OK) {
 800d222:	b9a4      	cbnz	r4, 800d24e <f_open+0x162>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d224:	f017 0f08 	tst.w	r7, #8
 800d228:	d001      	beq.n	800d22e <f_open+0x142>
				mode |= FA_MODIFIED;
 800d22a:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d22e:	9b03      	ldr	r3, [sp, #12]
 800d230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d232:	6273      	str	r3, [r6, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d234:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d236:	62b3      	str	r3, [r6, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d238:	f037 0301 	bics.w	r3, r7, #1
 800d23c:	bf14      	ite	ne
 800d23e:	2101      	movne	r1, #1
 800d240:	2100      	moveq	r1, #0
 800d242:	a804      	add	r0, sp, #16
 800d244:	f7fe fc3c 	bl	800bac0 <inc_lock>
 800d248:	6130      	str	r0, [r6, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d060      	beq.n	800d310 <f_open+0x224>
		if (res == FR_OK) {
 800d24e:	2c00      	cmp	r4, #0
 800d250:	f47f af5e 	bne.w	800d110 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d254:	9d03      	ldr	r5, [sp, #12]
 800d256:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800d25a:	4641      	mov	r1, r8
 800d25c:	4628      	mov	r0, r5
 800d25e:	f7fe fcdc 	bl	800bc1a <ld_clust>
 800d262:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d264:	f108 001c 	add.w	r0, r8, #28
 800d268:	f7fe fb9f 	bl	800b9aa <ld_dword>
 800d26c:	60f0      	str	r0, [r6, #12]
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d26e:	2100      	movs	r1, #0
 800d270:	62f1      	str	r1, [r6, #44]	; 0x2c
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d272:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
 800d274:	88eb      	ldrh	r3, [r5, #6]
 800d276:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
 800d278:	7537      	strb	r7, [r6, #20]
			fp->err = 0;			/* Clear error flag */
 800d27a:	7571      	strb	r1, [r6, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d27c:	6231      	str	r1, [r6, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d27e:	61b1      	str	r1, [r6, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d280:	f106 0830 	add.w	r8, r6, #48	; 0x30
 800d284:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d288:	4640      	mov	r0, r8
 800d28a:	f7fe fbb1 	bl	800b9f0 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d28e:	f017 0f20 	tst.w	r7, #32
 800d292:	f43f af3d 	beq.w	800d110 <f_open+0x24>
 800d296:	68f5      	ldr	r5, [r6, #12]
 800d298:	2d00      	cmp	r5, #0
 800d29a:	f43f af39 	beq.w	800d110 <f_open+0x24>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d29e:	61b5      	str	r5, [r6, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d2a0:	9b03      	ldr	r3, [sp, #12]
 800d2a2:	895f      	ldrh	r7, [r3, #10]
 800d2a4:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d2a6:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d2a8:	e005      	b.n	800d2b6 <f_open+0x1ca>
					res = FR_NO_FILE;
 800d2aa:	2404      	movs	r4, #4
 800d2ac:	e7cf      	b.n	800d24e <f_open+0x162>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d2ae:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 800d2b2:	d00e      	beq.n	800d2d2 <f_open+0x1e6>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d2b4:	1bed      	subs	r5, r5, r7
 800d2b6:	42bd      	cmp	r5, r7
 800d2b8:	bf94      	ite	ls
 800d2ba:	2300      	movls	r3, #0
 800d2bc:	2301      	movhi	r3, #1
 800d2be:	b954      	cbnz	r4, 800d2d6 <f_open+0x1ea>
 800d2c0:	b14b      	cbz	r3, 800d2d6 <f_open+0x1ea>
					clst = get_fat(&fp->obj, clst);
 800d2c2:	4630      	mov	r0, r6
 800d2c4:	f7ff f8f1 	bl	800c4aa <get_fat>
 800d2c8:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800d2ca:	2801      	cmp	r0, #1
 800d2cc:	d8ef      	bhi.n	800d2ae <f_open+0x1c2>
 800d2ce:	2402      	movs	r4, #2
 800d2d0:	e7ed      	b.n	800d2ae <f_open+0x1c2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d2d2:	2401      	movs	r4, #1
 800d2d4:	e7ee      	b.n	800d2b4 <f_open+0x1c8>
				fp->clust = clst;
 800d2d6:	61f1      	str	r1, [r6, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d2d8:	2c00      	cmp	r4, #0
 800d2da:	f47f af19 	bne.w	800d110 <f_open+0x24>
 800d2de:	f3c5 0308 	ubfx	r3, r5, #0, #9
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f43f af14 	beq.w	800d110 <f_open+0x24>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d2e8:	9f03      	ldr	r7, [sp, #12]
 800d2ea:	4638      	mov	r0, r7
 800d2ec:	f7fe fc78 	bl	800bbe0 <clust2sect>
 800d2f0:	b908      	cbnz	r0, 800d2f6 <f_open+0x20a>
						res = FR_INT_ERR;
 800d2f2:	2402      	movs	r4, #2
 800d2f4:	e70d      	b.n	800d112 <f_open+0x26>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d2f6:	eb00 2255 	add.w	r2, r0, r5, lsr #9
 800d2fa:	6232      	str	r2, [r6, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	4641      	mov	r1, r8
 800d300:	7878      	ldrb	r0, [r7, #1]
 800d302:	f7fe fb29 	bl	800b958 <disk_read>
 800d306:	2800      	cmp	r0, #0
 800d308:	f43f af02 	beq.w	800d110 <f_open+0x24>
 800d30c:	2401      	movs	r4, #1
 800d30e:	e700      	b.n	800d112 <f_open+0x26>
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d310:	2402      	movs	r4, #2
 800d312:	e6fd      	b.n	800d110 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800d314:	2409      	movs	r4, #9
 800d316:	e6fe      	b.n	800d116 <f_open+0x2a>

0800d318 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d31c:	b085      	sub	sp, #20
 800d31e:	4604      	mov	r4, r0
 800d320:	460e      	mov	r6, r1
 800d322:	4617      	mov	r7, r2
 800d324:	4698      	mov	r8, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800d326:	2300      	movs	r3, #0
 800d328:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d32c:	a903      	add	r1, sp, #12
 800d32e:	f7fe fe0c 	bl	800bf4a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d332:	9001      	str	r0, [sp, #4]
 800d334:	2800      	cmp	r0, #0
 800d336:	f040 80ae 	bne.w	800d496 <f_read+0x17e>
 800d33a:	7d63      	ldrb	r3, [r4, #21]
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f040 80a9 	bne.w	800d496 <f_read+0x17e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d344:	7d23      	ldrb	r3, [r4, #20]
 800d346:	f013 0f01 	tst.w	r3, #1
 800d34a:	f000 80c3 	beq.w	800d4d4 <f_read+0x1bc>
	remain = fp->obj.objsize - fp->fptr;
 800d34e:	68e5      	ldr	r5, [r4, #12]
 800d350:	69a3      	ldr	r3, [r4, #24]
 800d352:	1aed      	subs	r5, r5, r3
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d354:	42bd      	cmp	r5, r7
 800d356:	d362      	bcc.n	800d41e <f_read+0x106>
 800d358:	463d      	mov	r5, r7
 800d35a:	e060      	b.n	800d41e <f_read+0x106>
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d35c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d35e:	b11b      	cbz	r3, 800d368 <f_read+0x50>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d360:	4620      	mov	r0, r4
 800d362:	f7fe fc49 	bl	800bbf8 <clmt_clust>
 800d366:	e06a      	b.n	800d43e <f_read+0x126>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d368:	69e1      	ldr	r1, [r4, #28]
 800d36a:	4620      	mov	r0, r4
 800d36c:	f7ff f89d 	bl	800c4aa <get_fat>
 800d370:	e065      	b.n	800d43e <f_read+0x126>
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d372:	f04f 0a02 	mov.w	sl, #2
 800d376:	f884 a015 	strb.w	sl, [r4, #21]
 800d37a:	f8cd a004 	str.w	sl, [sp, #4]
 800d37e:	e08a      	b.n	800d496 <f_read+0x17e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d380:	f04f 0a01 	mov.w	sl, #1
 800d384:	f884 a015 	strb.w	sl, [r4, #21]
 800d388:	f8cd a004 	str.w	sl, [sp, #4]
 800d38c:	e083      	b.n	800d496 <f_read+0x17e>
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d38e:	f04f 0a02 	mov.w	sl, #2
 800d392:	f884 a015 	strb.w	sl, [r4, #21]
 800d396:	f8cd a004 	str.w	sl, [sp, #4]
 800d39a:	e07c      	b.n	800d496 <f_read+0x17e>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d39c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	db02      	blt.n	800d3aa <f_read+0x92>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d3a4:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 800d3a8:	e02f      	b.n	800d40a <f_read+0xf2>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d3aa:	6a20      	ldr	r0, [r4, #32]
 800d3ac:	eba0 0009 	sub.w	r0, r0, r9
 800d3b0:	4550      	cmp	r0, sl
 800d3b2:	d2f7      	bcs.n	800d3a4 <f_read+0x8c>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d3b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3b8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d3bc:	eb06 2040 	add.w	r0, r6, r0, lsl #9
 800d3c0:	f7fe fb0c 	bl	800b9dc <mem_cpy>
 800d3c4:	e7ee      	b.n	800d3a4 <f_read+0x8c>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d3c6:	6a22      	ldr	r2, [r4, #32]
 800d3c8:	454a      	cmp	r2, r9
 800d3ca:	d00d      	beq.n	800d3e8 <f_read+0xd0>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d3cc:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	db64      	blt.n	800d49e <f_read+0x186>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	464a      	mov	r2, r9
 800d3d8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d3dc:	9803      	ldr	r0, [sp, #12]
 800d3de:	7840      	ldrb	r0, [r0, #1]
 800d3e0:	f7fe faba 	bl	800b958 <disk_read>
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	d16e      	bne.n	800d4c6 <f_read+0x1ae>
			}
#endif
			fp->sect = sect;
 800d3e8:	f8c4 9020 	str.w	r9, [r4, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d3ec:	69a3      	ldr	r3, [r4, #24]
 800d3ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3f2:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d3f6:	42bd      	cmp	r5, r7
 800d3f8:	d200      	bcs.n	800d3fc <f_read+0xe4>
 800d3fa:	462f      	mov	r7, r5
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d3fc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d400:	463a      	mov	r2, r7
 800d402:	4419      	add	r1, r3
 800d404:	4630      	mov	r0, r6
 800d406:	f7fe fae9 	bl	800b9dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d40a:	443e      	add	r6, r7
 800d40c:	69a3      	ldr	r3, [r4, #24]
 800d40e:	443b      	add	r3, r7
 800d410:	61a3      	str	r3, [r4, #24]
 800d412:	f8d8 3000 	ldr.w	r3, [r8]
 800d416:	443b      	add	r3, r7
 800d418:	f8c8 3000 	str.w	r3, [r8]
 800d41c:	1bed      	subs	r5, r5, r7
	for ( ;  btr;								/* Repeat until all data read */
 800d41e:	2d00      	cmp	r5, #0
 800d420:	d039      	beq.n	800d496 <f_read+0x17e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d422:	69a1      	ldr	r1, [r4, #24]
 800d424:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d1df      	bne.n	800d3ec <f_read+0xd4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d42c:	9b03      	ldr	r3, [sp, #12]
 800d42e:	895f      	ldrh	r7, [r3, #10]
 800d430:	3f01      	subs	r7, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800d432:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 800d436:	d108      	bne.n	800d44a <f_read+0x132>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d438:	2900      	cmp	r1, #0
 800d43a:	d18f      	bne.n	800d35c <f_read+0x44>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d43c:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d43e:	2801      	cmp	r0, #1
 800d440:	d997      	bls.n	800d372 <f_read+0x5a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d442:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d446:	d09b      	beq.n	800d380 <f_read+0x68>
				fp->clust = clst;				/* Update current cluster */
 800d448:	61e0      	str	r0, [r4, #28]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d44a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d44e:	69e1      	ldr	r1, [r4, #28]
 800d450:	4658      	mov	r0, fp
 800d452:	f7fe fbc5 	bl	800bbe0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d456:	4681      	mov	r9, r0
 800d458:	2800      	cmp	r0, #0
 800d45a:	d098      	beq.n	800d38e <f_read+0x76>
			sect += csect;
 800d45c:	44b9      	add	r9, r7
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d45e:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d462:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d466:	d3ae      	bcc.n	800d3c6 <f_read+0xae>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d468:	eb07 030a 	add.w	r3, r7, sl
 800d46c:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 800d470:	4293      	cmp	r3, r2
 800d472:	d901      	bls.n	800d478 <f_read+0x160>
					cc = fs->csize - csect;
 800d474:	eba2 0a07 	sub.w	sl, r2, r7
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d478:	4653      	mov	r3, sl
 800d47a:	464a      	mov	r2, r9
 800d47c:	4631      	mov	r1, r6
 800d47e:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800d482:	f7fe fa69 	bl	800b958 <disk_read>
 800d486:	2800      	cmp	r0, #0
 800d488:	d088      	beq.n	800d39c <f_read+0x84>
 800d48a:	f04f 0a01 	mov.w	sl, #1
 800d48e:	f884 a015 	strb.w	sl, [r4, #21]
 800d492:	f8cd a004 	str.w	sl, [sp, #4]
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800d496:	9801      	ldr	r0, [sp, #4]
 800d498:	b005      	add	sp, #20
 800d49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d49e:	2301      	movs	r3, #1
 800d4a0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d4a4:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800d4a8:	f7fe fa62 	bl	800b970 <disk_write>
 800d4ac:	b920      	cbnz	r0, 800d4b8 <f_read+0x1a0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d4ae:	7d23      	ldrb	r3, [r4, #20]
 800d4b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4b4:	7523      	strb	r3, [r4, #20]
 800d4b6:	e78d      	b.n	800d3d4 <f_read+0xbc>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d4b8:	f04f 0a01 	mov.w	sl, #1
 800d4bc:	f884 a015 	strb.w	sl, [r4, #21]
 800d4c0:	f8cd a004 	str.w	sl, [sp, #4]
 800d4c4:	e7e7      	b.n	800d496 <f_read+0x17e>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d4c6:	f04f 0a01 	mov.w	sl, #1
 800d4ca:	f884 a015 	strb.w	sl, [r4, #21]
 800d4ce:	f8cd a004 	str.w	sl, [sp, #4]
 800d4d2:	e7e0      	b.n	800d496 <f_read+0x17e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d4d4:	2307      	movs	r3, #7
 800d4d6:	9301      	str	r3, [sp, #4]
 800d4d8:	e7dd      	b.n	800d496 <f_read+0x17e>

0800d4da <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d4da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	4604      	mov	r4, r0
 800d4e2:	460e      	mov	r6, r1
 800d4e4:	4615      	mov	r5, r2
 800d4e6:	4698      	mov	r8, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	f8c8 3000 	str.w	r3, [r8]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d4ee:	a903      	add	r1, sp, #12
 800d4f0:	f7fe fd2b 	bl	800bf4a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d4f4:	9001      	str	r0, [sp, #4]
 800d4f6:	2800      	cmp	r0, #0
 800d4f8:	d149      	bne.n	800d58e <f_write+0xb4>
 800d4fa:	7d63      	ldrb	r3, [r4, #21]
 800d4fc:	9301      	str	r3, [sp, #4]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d145      	bne.n	800d58e <f_write+0xb4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d502:	7d23      	ldrb	r3, [r4, #20]
 800d504:	f013 0f02 	tst.w	r3, #2
 800d508:	f000 80e2 	beq.w	800d6d0 <f_write+0x1f6>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d50c:	69a3      	ldr	r3, [r4, #24]
 800d50e:	42eb      	cmn	r3, r5
 800d510:	f0c0 80b0 	bcc.w	800d674 <f_write+0x19a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d514:	43dd      	mvns	r5, r3
 800d516:	e0ad      	b.n	800d674 <f_write+0x19a>
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d518:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d03b      	beq.n	800d596 <f_write+0xbc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d51e:	4620      	mov	r0, r4
 800d520:	f7fe fb6a 	bl	800bbf8 <clmt_clust>
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d524:	2800      	cmp	r0, #0
 800d526:	f000 80ce 	beq.w	800d6c6 <f_write+0x1ec>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d52a:	2801      	cmp	r0, #1
 800d52c:	d038      	beq.n	800d5a0 <f_write+0xc6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d52e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d532:	d03c      	beq.n	800d5ae <f_write+0xd4>
				fp->clust = clst;			/* Update current cluster */
 800d534:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d536:	68a3      	ldr	r3, [r4, #8]
 800d538:	b903      	cbnz	r3, 800d53c <f_write+0x62>
 800d53a:	60a0      	str	r0, [r4, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d53c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800d540:	2b00      	cmp	r3, #0
 800d542:	db3b      	blt.n	800d5bc <f_write+0xe2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d544:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d548:	69e1      	ldr	r1, [r4, #28]
 800d54a:	4658      	mov	r0, fp
 800d54c:	f7fe fb48 	bl	800bbe0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d550:	4681      	mov	r9, r0
 800d552:	2800      	cmp	r0, #0
 800d554:	d047      	beq.n	800d5e6 <f_write+0x10c>
			sect += csect;
 800d556:	44b9      	add	r9, r7
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d558:	ea4f 2a55 	mov.w	sl, r5, lsr #9
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d55c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800d560:	d35d      	bcc.n	800d61e <f_write+0x144>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d562:	eb07 030a 	add.w	r3, r7, sl
 800d566:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d901      	bls.n	800d572 <f_write+0x98>
					cc = fs->csize - csect;
 800d56e:	eba2 0a07 	sub.w	sl, r2, r7
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d572:	4653      	mov	r3, sl
 800d574:	464a      	mov	r2, r9
 800d576:	4631      	mov	r1, r6
 800d578:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800d57c:	f7fe f9f8 	bl	800b970 <disk_write>
 800d580:	b3c0      	cbz	r0, 800d5f4 <f_write+0x11a>
 800d582:	f04f 0a01 	mov.w	sl, #1
 800d586:	f884 a015 	strb.w	sl, [r4, #21]
 800d58a:	f8cd a004 	str.w	sl, [sp, #4]
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800d58e:	9801      	ldr	r0, [sp, #4]
 800d590:	b005      	add	sp, #20
 800d592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d596:	69e1      	ldr	r1, [r4, #28]
 800d598:	4620      	mov	r0, r4
 800d59a:	f7ff f844 	bl	800c626 <create_chain>
 800d59e:	e7c1      	b.n	800d524 <f_write+0x4a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d5a0:	f04f 0a02 	mov.w	sl, #2
 800d5a4:	f884 a015 	strb.w	sl, [r4, #21]
 800d5a8:	f8cd a004 	str.w	sl, [sp, #4]
 800d5ac:	e7ef      	b.n	800d58e <f_write+0xb4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d5ae:	f04f 0a01 	mov.w	sl, #1
 800d5b2:	f884 a015 	strb.w	sl, [r4, #21]
 800d5b6:	f8cd a004 	str.w	sl, [sp, #4]
 800d5ba:	e7e8      	b.n	800d58e <f_write+0xb4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5bc:	2301      	movs	r3, #1
 800d5be:	6a22      	ldr	r2, [r4, #32]
 800d5c0:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d5c4:	9803      	ldr	r0, [sp, #12]
 800d5c6:	7840      	ldrb	r0, [r0, #1]
 800d5c8:	f7fe f9d2 	bl	800b970 <disk_write>
 800d5cc:	b920      	cbnz	r0, 800d5d8 <f_write+0xfe>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d5ce:	7d23      	ldrb	r3, [r4, #20]
 800d5d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5d4:	7523      	strb	r3, [r4, #20]
 800d5d6:	e7b5      	b.n	800d544 <f_write+0x6a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5d8:	f04f 0a01 	mov.w	sl, #1
 800d5dc:	f884 a015 	strb.w	sl, [r4, #21]
 800d5e0:	f8cd a004 	str.w	sl, [sp, #4]
 800d5e4:	e7d3      	b.n	800d58e <f_write+0xb4>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d5e6:	f04f 0a02 	mov.w	sl, #2
 800d5ea:	f884 a015 	strb.w	sl, [r4, #21]
 800d5ee:	f8cd a004 	str.w	sl, [sp, #4]
 800d5f2:	e7cc      	b.n	800d58e <f_write+0xb4>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d5f4:	6a21      	ldr	r1, [r4, #32]
 800d5f6:	eba1 0109 	sub.w	r1, r1, r9
 800d5fa:	4551      	cmp	r1, sl
 800d5fc:	d302      	bcc.n	800d604 <f_write+0x12a>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d5fe:	ea4f 274a 	mov.w	r7, sl, lsl #9
				continue;
 800d602:	e028      	b.n	800d656 <f_write+0x17c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d604:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d608:	eb06 2141 	add.w	r1, r6, r1, lsl #9
 800d60c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800d610:	f7fe f9e4 	bl	800b9dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d614:	7d23      	ldrb	r3, [r4, #20]
 800d616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d61a:	7523      	strb	r3, [r4, #20]
 800d61c:	e7ef      	b.n	800d5fe <f_write+0x124>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d61e:	6a23      	ldr	r3, [r4, #32]
 800d620:	454b      	cmp	r3, r9
 800d622:	d003      	beq.n	800d62c <f_write+0x152>
				fp->fptr < fp->obj.objsize &&
 800d624:	69a2      	ldr	r2, [r4, #24]
 800d626:	68e3      	ldr	r3, [r4, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d628:	429a      	cmp	r2, r3
 800d62a:	d33b      	bcc.n	800d6a4 <f_write+0x1ca>
			fp->sect = sect;
 800d62c:	f8c4 9020 	str.w	r9, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d630:	69a3      	ldr	r3, [r4, #24]
 800d632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d636:	f5c3 7700 	rsb	r7, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d63a:	42bd      	cmp	r5, r7
 800d63c:	d200      	bcs.n	800d640 <f_write+0x166>
 800d63e:	462f      	mov	r7, r5
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d640:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800d644:	463a      	mov	r2, r7
 800d646:	4631      	mov	r1, r6
 800d648:	4418      	add	r0, r3
 800d64a:	f7fe f9c7 	bl	800b9dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d64e:	7d23      	ldrb	r3, [r4, #20]
 800d650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d654:	7523      	strb	r3, [r4, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d656:	443e      	add	r6, r7
 800d658:	69a3      	ldr	r3, [r4, #24]
 800d65a:	443b      	add	r3, r7
 800d65c:	61a3      	str	r3, [r4, #24]
 800d65e:	68e2      	ldr	r2, [r4, #12]
 800d660:	4293      	cmp	r3, r2
 800d662:	bf38      	it	cc
 800d664:	4613      	movcc	r3, r2
 800d666:	60e3      	str	r3, [r4, #12]
 800d668:	f8d8 3000 	ldr.w	r3, [r8]
 800d66c:	443b      	add	r3, r7
 800d66e:	f8c8 3000 	str.w	r3, [r8]
 800d672:	1bed      	subs	r5, r5, r7
	for ( ;  btw;							/* Repeat until all data written */
 800d674:	b33d      	cbz	r5, 800d6c6 <f_write+0x1ec>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d676:	69a1      	ldr	r1, [r4, #24]
 800d678:	f3c1 0308 	ubfx	r3, r1, #0, #9
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1d7      	bne.n	800d630 <f_write+0x156>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d680:	9b03      	ldr	r3, [sp, #12]
 800d682:	895f      	ldrh	r7, [r3, #10]
 800d684:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 800d686:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 800d68a:	f47f af57 	bne.w	800d53c <f_write+0x62>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d68e:	2900      	cmp	r1, #0
 800d690:	f47f af42 	bne.w	800d518 <f_write+0x3e>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d694:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800d696:	2800      	cmp	r0, #0
 800d698:	f47f af44 	bne.w	800d524 <f_write+0x4a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d69c:	4620      	mov	r0, r4
 800d69e:	f7fe ffc2 	bl	800c626 <create_chain>
 800d6a2:	e73f      	b.n	800d524 <f_write+0x4a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	464a      	mov	r2, r9
 800d6a8:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d6ac:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800d6b0:	f7fe f952 	bl	800b958 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d0b9      	beq.n	800d62c <f_write+0x152>
					ABORT(fs, FR_DISK_ERR);
 800d6b8:	f04f 0a01 	mov.w	sl, #1
 800d6bc:	f884 a015 	strb.w	sl, [r4, #21]
 800d6c0:	f8cd a004 	str.w	sl, [sp, #4]
 800d6c4:	e763      	b.n	800d58e <f_write+0xb4>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d6c6:	7d23      	ldrb	r3, [r4, #20]
 800d6c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6cc:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800d6ce:	e75e      	b.n	800d58e <f_write+0xb4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d6d0:	2307      	movs	r3, #7
 800d6d2:	9301      	str	r3, [sp, #4]
 800d6d4:	e75b      	b.n	800d58e <f_write+0xb4>

0800d6d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d6d6:	b570      	push	{r4, r5, r6, lr}
 800d6d8:	b082      	sub	sp, #8
 800d6da:	4604      	mov	r4, r0
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d6dc:	a901      	add	r1, sp, #4
 800d6de:	f7fe fc34 	bl	800bf4a <validate>
	if (res == FR_OK) {
 800d6e2:	b970      	cbnz	r0, 800d702 <f_sync+0x2c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d6e4:	7d23      	ldrb	r3, [r4, #20]
 800d6e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d6ea:	d00a      	beq.n	800d702 <f_sync+0x2c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d6ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d6f0:	d109      	bne.n	800d706 <f_sync+0x30>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
				fp->flag &= (BYTE)~FA_DIRTY;
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d6f2:	f7fe f83f 	bl	800b774 <get_fattime>
 800d6f6:	4605      	mov	r5, r0
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d6f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d6fa:	9801      	ldr	r0, [sp, #4]
 800d6fc:	f7fe fc72 	bl	800bfe4 <move_window>
				if (res == FR_OK) {
 800d700:	b178      	cbz	r0, 800d722 <f_sync+0x4c>
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800d702:	b002      	add	sp, #8
 800d704:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d706:	2301      	movs	r3, #1
 800d708:	6a22      	ldr	r2, [r4, #32]
 800d70a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800d70e:	9801      	ldr	r0, [sp, #4]
 800d710:	7840      	ldrb	r0, [r0, #1]
 800d712:	f7fe f92d 	bl	800b970 <disk_write>
 800d716:	bb40      	cbnz	r0, 800d76a <f_sync+0x94>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d718:	7d23      	ldrb	r3, [r4, #20]
 800d71a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d71e:	7523      	strb	r3, [r4, #20]
 800d720:	e7e7      	b.n	800d6f2 <f_sync+0x1c>
					dir = fp->dir_ptr;
 800d722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d724:	7af3      	ldrb	r3, [r6, #11]
 800d726:	f043 0320 	orr.w	r3, r3, #32
 800d72a:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d72c:	68a2      	ldr	r2, [r4, #8]
 800d72e:	4631      	mov	r1, r6
 800d730:	6820      	ldr	r0, [r4, #0]
 800d732:	f7fe fa85 	bl	800bc40 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d736:	68e1      	ldr	r1, [r4, #12]
 800d738:	f106 001c 	add.w	r0, r6, #28
 800d73c:	f7fe f944 	bl	800b9c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d740:	4629      	mov	r1, r5
 800d742:	f106 0016 	add.w	r0, r6, #22
 800d746:	f7fe f93f 	bl	800b9c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d74a:	2100      	movs	r1, #0
 800d74c:	f106 0012 	add.w	r0, r6, #18
 800d750:	f7fe f936 	bl	800b9c0 <st_word>
					fs->wflag = 1;
 800d754:	9b01      	ldr	r3, [sp, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d75a:	9801      	ldr	r0, [sp, #4]
 800d75c:	f7ff fc50 	bl	800d000 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d760:	7d23      	ldrb	r3, [r4, #20]
 800d762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d766:	7523      	strb	r3, [r4, #20]
 800d768:	e7cb      	b.n	800d702 <f_sync+0x2c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d76a:	2001      	movs	r0, #1
 800d76c:	e7c9      	b.n	800d702 <f_sync+0x2c>

0800d76e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d76e:	b510      	push	{r4, lr}
 800d770:	b082      	sub	sp, #8
 800d772:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d774:	f7ff ffaf 	bl	800d6d6 <f_sync>
	if (res == FR_OK)
 800d778:	b108      	cbz	r0, 800d77e <f_close+0x10>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800d77a:	b002      	add	sp, #8
 800d77c:	bd10      	pop	{r4, pc}
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d77e:	a901      	add	r1, sp, #4
 800d780:	4620      	mov	r0, r4
 800d782:	f7fe fbe2 	bl	800bf4a <validate>
		if (res == FR_OK) {
 800d786:	2800      	cmp	r0, #0
 800d788:	d1f7      	bne.n	800d77a <f_close+0xc>
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d78a:	6920      	ldr	r0, [r4, #16]
 800d78c:	f7fe f9ea 	bl	800bb64 <dec_lock>
			if (res == FR_OK)
 800d790:	2800      	cmp	r0, #0
 800d792:	d1f2      	bne.n	800d77a <f_close+0xc>
				fp->obj.fs = 0;			/* Invalidate file object */
 800d794:	6020      	str	r0, [r4, #0]
 800d796:	e7f0      	b.n	800d77a <f_close+0xc>

0800d798 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d798:	b530      	push	{r4, r5, lr}
 800d79a:	b085      	sub	sp, #20
 800d79c:	9101      	str	r1, [sp, #4]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	d03d      	beq.n	800d81e <f_opendir+0x86>
 800d7a2:	4605      	mov	r5, r0

	/* Get logical drive */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	a903      	add	r1, sp, #12
 800d7a8:	a801      	add	r0, sp, #4
 800d7aa:	f7fe fc73 	bl	800c094 <find_volume>
	if (res == FR_OK) {
 800d7ae:	4604      	mov	r4, r0
 800d7b0:	b128      	cbz	r0, 800d7be <f_opendir+0x26>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d7b2:	b10c      	cbz	r4, 800d7b8 <f_opendir+0x20>
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	602b      	str	r3, [r5, #0]

	LEAVE_FF(fs, res);
}
 800d7b8:	4620      	mov	r0, r4
 800d7ba:	b005      	add	sp, #20
 800d7bc:	bd30      	pop	{r4, r5, pc}
		obj->fs = fs;
 800d7be:	9b03      	ldr	r3, [sp, #12]
 800d7c0:	602b      	str	r3, [r5, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d7c2:	9901      	ldr	r1, [sp, #4]
 800d7c4:	4628      	mov	r0, r5
 800d7c6:	f7ff fb34 	bl	800ce32 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800d7ca:	4604      	mov	r4, r0
 800d7cc:	bb18      	cbnz	r0, 800d816 <f_opendir+0x7e>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d7ce:	f995 302f 	ldrsb.w	r3, [r5, #47]	; 0x2f
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	db08      	blt.n	800d7e8 <f_opendir+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d7d6:	79ab      	ldrb	r3, [r5, #6]
 800d7d8:	f013 0f10 	tst.w	r3, #16
 800d7dc:	d01a      	beq.n	800d814 <f_opendir+0x7c>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d7de:	6a29      	ldr	r1, [r5, #32]
 800d7e0:	9803      	ldr	r0, [sp, #12]
 800d7e2:	f7fe fa1a 	bl	800bc1a <ld_clust>
 800d7e6:	60a8      	str	r0, [r5, #8]
				obj->id = fs->id;
 800d7e8:	9b03      	ldr	r3, [sp, #12]
 800d7ea:	88db      	ldrh	r3, [r3, #6]
 800d7ec:	80ab      	strh	r3, [r5, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	f7fe fec2 	bl	800c57a <dir_sdi>
				if (res == FR_OK) {
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	b968      	cbnz	r0, 800d816 <f_opendir+0x7e>
					if (obj->sclust) {
 800d7fa:	68ab      	ldr	r3, [r5, #8]
 800d7fc:	b913      	cbnz	r3, 800d804 <f_opendir+0x6c>
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d7fe:	2300      	movs	r3, #0
 800d800:	612b      	str	r3, [r5, #16]
 800d802:	e008      	b.n	800d816 <f_opendir+0x7e>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d804:	2100      	movs	r1, #0
 800d806:	4628      	mov	r0, r5
 800d808:	f7fe f95a 	bl	800bac0 <inc_lock>
 800d80c:	6128      	str	r0, [r5, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d80e:	b910      	cbnz	r0, 800d816 <f_opendir+0x7e>
 800d810:	2412      	movs	r4, #18
 800d812:	e7ce      	b.n	800d7b2 <f_opendir+0x1a>
					res = FR_NO_PATH;
 800d814:	2405      	movs	r4, #5
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d816:	2c04      	cmp	r4, #4
 800d818:	d1cb      	bne.n	800d7b2 <f_opendir+0x1a>
 800d81a:	2405      	movs	r4, #5
 800d81c:	e7ca      	b.n	800d7b4 <f_opendir+0x1c>
	if (!dp) return FR_INVALID_OBJECT;
 800d81e:	2409      	movs	r4, #9
 800d820:	e7ca      	b.n	800d7b8 <f_opendir+0x20>

0800d822 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d822:	b570      	push	{r4, r5, r6, lr}
 800d824:	b082      	sub	sp, #8
 800d826:	4604      	mov	r4, r0
 800d828:	460d      	mov	r5, r1
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d82a:	a901      	add	r1, sp, #4
 800d82c:	f7fe fb8d 	bl	800bf4a <validate>
	if (res == FR_OK) {
 800d830:	4606      	mov	r6, r0
 800d832:	b9c0      	cbnz	r0, 800d866 <f_readdir+0x44>
		if (!fno) {
 800d834:	b195      	cbz	r5, 800d85c <f_readdir+0x3a>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 800d836:	2100      	movs	r1, #0
 800d838:	4620      	mov	r0, r4
 800d83a:	f7ff f849 	bl	800c8d0 <dir_read>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d83e:	2804      	cmp	r0, #4
 800d840:	d000      	beq.n	800d844 <f_readdir+0x22>
			if (res == FR_OK) {				/* A valid entry is found */
 800d842:	b998      	cbnz	r0, 800d86c <f_readdir+0x4a>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d844:	4629      	mov	r1, r5
 800d846:	4620      	mov	r0, r4
 800d848:	f7ff f9b8 	bl	800cbbc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d84c:	2100      	movs	r1, #0
 800d84e:	4620      	mov	r0, r4
 800d850:	f7fe ff93 	bl	800c77a <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d854:	2804      	cmp	r0, #4
 800d856:	d006      	beq.n	800d866 <f_readdir+0x44>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d858:	4606      	mov	r6, r0
 800d85a:	e004      	b.n	800d866 <f_readdir+0x44>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d85c:	2100      	movs	r1, #0
 800d85e:	4620      	mov	r0, r4
 800d860:	f7fe fe8b 	bl	800c57a <dir_sdi>
 800d864:	4606      	mov	r6, r0
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
 800d866:	4630      	mov	r0, r6
 800d868:	b002      	add	sp, #8
 800d86a:	bd70      	pop	{r4, r5, r6, pc}
			res = dir_read(dp, 0);			/* Read an item */
 800d86c:	4606      	mov	r6, r0
 800d86e:	e7fa      	b.n	800d866 <f_readdir+0x44>

0800d870 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800d870:	b570      	push	{r4, r5, r6, lr}
 800d872:	4605      	mov	r5, r0
 800d874:	460c      	mov	r4, r1
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 800d876:	4621      	mov	r1, r4
 800d878:	4628      	mov	r0, r5
 800d87a:	f7ff ffd2 	bl	800d822 <f_readdir>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800d87e:	4606      	mov	r6, r0
 800d880:	fab4 f384 	clz	r3, r4
 800d884:	095b      	lsrs	r3, r3, #5
 800d886:	2800      	cmp	r0, #0
 800d888:	bf18      	it	ne
 800d88a:	f043 0301 	orrne.w	r3, r3, #1
 800d88e:	b953      	cbnz	r3, 800d8a6 <f_findnext+0x36>
 800d890:	7da3      	ldrb	r3, [r4, #22]
 800d892:	b143      	cbz	r3, 800d8a6 <f_findnext+0x36>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800d894:	2300      	movs	r3, #0
 800d896:	461a      	mov	r2, r3
 800d898:	f104 0116 	add.w	r1, r4, #22
 800d89c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 800d89e:	f7fe fadb 	bl	800be58 <pattern_matching>
 800d8a2:	2800      	cmp	r0, #0
 800d8a4:	d0e7      	beq.n	800d876 <f_findnext+0x6>
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	bd70      	pop	{r4, r5, r6, pc}

0800d8aa <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800d8aa:	b538      	push	{r3, r4, r5, lr}
 800d8ac:	4604      	mov	r4, r0
 800d8ae:	460d      	mov	r5, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800d8b0:	6343      	str	r3, [r0, #52]	; 0x34
	res = f_opendir(dp, path);		/* Open the target directory */
 800d8b2:	4611      	mov	r1, r2
 800d8b4:	f7ff ff70 	bl	800d798 <f_opendir>
	if (res == FR_OK) {
 800d8b8:	b100      	cbz	r0, 800d8bc <f_findfirst+0x12>
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 800d8ba:	bd38      	pop	{r3, r4, r5, pc}
		res = f_findnext(dp, fno);	/* Find the first item */
 800d8bc:	4629      	mov	r1, r5
 800d8be:	4620      	mov	r0, r4
 800d8c0:	f7ff ffd6 	bl	800d870 <f_findnext>
 800d8c4:	e7f9      	b.n	800d8ba <f_findfirst+0x10>
	...

0800d8c8 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800d8c8:	4b13      	ldr	r3, [pc, #76]	; (800d918 <FATFS_LinkDriverEx+0x50>)
 800d8ca:	7a5b      	ldrb	r3, [r3, #9]
 800d8cc:	bb13      	cbnz	r3, 800d914 <FATFS_LinkDriverEx+0x4c>
{
 800d8ce:	b510      	push	{r4, lr}
 800d8d0:	4604      	mov	r4, r0
 800d8d2:	f003 00ff 	and.w	r0, r3, #255	; 0xff
  {
    disk.is_initialized[disk.nbr] = 0;
 800d8d6:	4b10      	ldr	r3, [pc, #64]	; (800d918 <FATFS_LinkDriverEx+0x50>)
 800d8d8:	f893 c009 	ldrb.w	ip, [r3, #9]
 800d8dc:	fa5f fc8c 	uxtb.w	ip, ip
 800d8e0:	f04f 0e00 	mov.w	lr, #0
 800d8e4:	f803 e00c 	strb.w	lr, [r3, ip]
    disk.drv[disk.nbr] = drv;
 800d8e8:	f893 c009 	ldrb.w	ip, [r3, #9]
 800d8ec:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800d8f0:	f8cc 4004 	str.w	r4, [ip, #4]
    disk.lun[disk.nbr] = lun;
 800d8f4:	7a5c      	ldrb	r4, [r3, #9]
 800d8f6:	441c      	add	r4, r3
 800d8f8:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800d8fa:	7a5a      	ldrb	r2, [r3, #9]
 800d8fc:	1c54      	adds	r4, r2, #1
 800d8fe:	b2e4      	uxtb	r4, r4
 800d900:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
 800d902:	3230      	adds	r2, #48	; 0x30
 800d904:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 800d906:	233a      	movs	r3, #58	; 0x3a
 800d908:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800d90a:	232f      	movs	r3, #47	; 0x2f
 800d90c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800d90e:	f881 e003 	strb.w	lr, [r1, #3]
    ret = 0;
  }

  return ret;
}
 800d912:	bd10      	pop	{r4, pc}
  uint8_t ret = 1;
 800d914:	2001      	movs	r0, #1
}
 800d916:	4770      	bx	lr
 800d918:	2001dfd8 	.word	0x2001dfd8

0800d91c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d91c:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 800d91e:	2200      	movs	r2, #0
 800d920:	f7ff ffd2 	bl	800d8c8 <FATFS_LinkDriverEx>
}
 800d924:	bd08      	pop	{r3, pc}
	...

0800d928 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d928:	287f      	cmp	r0, #127	; 0x7f
 800d92a:	d917      	bls.n	800d95c <ff_convert+0x34>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d92c:	b131      	cbz	r1, 800d93c <ff_convert+0x14>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d92e:	28ff      	cmp	r0, #255	; 0xff
 800d930:	d813      	bhi.n	800d95a <ff_convert+0x32>
 800d932:	3880      	subs	r0, #128	; 0x80
 800d934:	4b0a      	ldr	r3, [pc, #40]	; (800d960 <ff_convert+0x38>)
 800d936:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800d93a:	4770      	bx	lr

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d93c:	2300      	movs	r3, #0
 800d93e:	2b7f      	cmp	r3, #127	; 0x7f
 800d940:	d807      	bhi.n	800d952 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800d942:	4a07      	ldr	r2, [pc, #28]	; (800d960 <ff_convert+0x38>)
 800d944:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800d948:	4282      	cmp	r2, r0
 800d94a:	d002      	beq.n	800d952 <ff_convert+0x2a>
			for (c = 0; c < 0x80; c++) {
 800d94c:	3301      	adds	r3, #1
 800d94e:	b29b      	uxth	r3, r3
 800d950:	e7f5      	b.n	800d93e <ff_convert+0x16>
			}
			c = (c + 0x80) & 0xFF;
 800d952:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800d956:	b2c0      	uxtb	r0, r0
 800d958:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d95a:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800d95c:	4770      	bx	lr
 800d95e:	bf00      	nop
 800d960:	08019a68 	.word	0x08019a68

0800d964 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d964:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800d968:	d207      	bcs.n	800d97a <ff_wtoupper+0x16>
 800d96a:	4b24      	ldr	r3, [pc, #144]	; (800d9fc <ff_wtoupper+0x98>)
	for (;;) {
		bc = *p++;								/* Get block base */
 800d96c:	8819      	ldrh	r1, [r3, #0]
		if (!bc || chr < bc) break;
 800d96e:	1e4a      	subs	r2, r1, #1
 800d970:	b292      	uxth	r2, r2
 800d972:	4290      	cmp	r0, r2
 800d974:	d940      	bls.n	800d9f8 <ff_wtoupper+0x94>
{
 800d976:	b510      	push	{r4, lr}
 800d978:	e007      	b.n	800d98a <ff_wtoupper+0x26>
	p = chr < 0x1000 ? cvt1 : cvt2;
 800d97a:	4b21      	ldr	r3, [pc, #132]	; (800da00 <ff_wtoupper+0x9c>)
 800d97c:	e7f6      	b.n	800d96c <ff_wtoupper+0x8>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d97e:	4673      	mov	r3, lr
		bc = *p++;								/* Get block base */
 800d980:	8819      	ldrh	r1, [r3, #0]
		if (!bc || chr < bc) break;
 800d982:	1e4a      	subs	r2, r1, #1
 800d984:	b292      	uxth	r2, r2
 800d986:	4290      	cmp	r0, r2
 800d988:	d919      	bls.n	800d9be <ff_wtoupper+0x5a>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d98a:	f103 0e04 	add.w	lr, r3, #4
 800d98e:	885b      	ldrh	r3, [r3, #2]
 800d990:	0a1a      	lsrs	r2, r3, #8
 800d992:	b2db      	uxtb	r3, r3
		if (chr < bc + nc) {	/* In the block? */
 800d994:	eb03 0c01 	add.w	ip, r3, r1
 800d998:	4560      	cmp	r0, ip
 800d99a:	db04      	blt.n	800d9a6 <ff_wtoupper+0x42>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800d99c:	2a00      	cmp	r2, #0
 800d99e:	d1ee      	bne.n	800d97e <ff_wtoupper+0x1a>
 800d9a0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800d9a4:	e7ec      	b.n	800d980 <ff_wtoupper+0x1c>
			switch (cmd) {
 800d9a6:	2a08      	cmp	r2, #8
 800d9a8:	d809      	bhi.n	800d9be <ff_wtoupper+0x5a>
 800d9aa:	e8df f002 	tbb	[pc, r2]
 800d9ae:	0905      	.short	0x0905
 800d9b0:	1815120f 	.word	0x1815120f
 800d9b4:	1e1b      	.short	0x1e1b
 800d9b6:	21          	.byte	0x21
 800d9b7:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d9b8:	1a44      	subs	r4, r0, r1
 800d9ba:	f83e 0014 	ldrh.w	r0, [lr, r4, lsl #1]
	}

	return chr;
}
 800d9be:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d9c0:	1a43      	subs	r3, r0, r1
 800d9c2:	f003 0301 	and.w	r3, r3, #1
 800d9c6:	1ac0      	subs	r0, r0, r3
 800d9c8:	b280      	uxth	r0, r0
 800d9ca:	e7f8      	b.n	800d9be <ff_wtoupper+0x5a>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d9cc:	3810      	subs	r0, #16
 800d9ce:	b280      	uxth	r0, r0
 800d9d0:	e7f5      	b.n	800d9be <ff_wtoupper+0x5a>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d9d2:	3820      	subs	r0, #32
 800d9d4:	b280      	uxth	r0, r0
 800d9d6:	e7f2      	b.n	800d9be <ff_wtoupper+0x5a>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d9d8:	3830      	subs	r0, #48	; 0x30
 800d9da:	b280      	uxth	r0, r0
 800d9dc:	e7ef      	b.n	800d9be <ff_wtoupper+0x5a>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d9de:	381a      	subs	r0, #26
 800d9e0:	b280      	uxth	r0, r0
 800d9e2:	e7ec      	b.n	800d9be <ff_wtoupper+0x5a>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d9e4:	3008      	adds	r0, #8
 800d9e6:	b280      	uxth	r0, r0
 800d9e8:	e7e9      	b.n	800d9be <ff_wtoupper+0x5a>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d9ea:	3850      	subs	r0, #80	; 0x50
 800d9ec:	b280      	uxth	r0, r0
 800d9ee:	e7e6      	b.n	800d9be <ff_wtoupper+0x5a>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d9f0:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800d9f4:	b280      	uxth	r0, r0
 800d9f6:	e7e2      	b.n	800d9be <ff_wtoupper+0x5a>
}
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	08019b68 	.word	0x08019b68
 800da00:	08019d5c 	.word	0x08019d5c

0800da04 <tEnvelopeFollower_initToPool>:
{
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
}

void    tEnvelopeFollower_initToPool    (tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, tMempool* const mp)
{
 800da04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da06:	4606      	mov	r6, r0
 800da08:	ee10 5a10 	vmov	r5, s0
 800da0c:	ee10 4a90 	vmov	r4, s1
    _tMempool* m = *mp;
 800da10:	680f      	ldr	r7, [r1, #0]
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 800da12:	4639      	mov	r1, r7
 800da14:	2010      	movs	r0, #16
 800da16:	f004 fc3f 	bl	8012298 <mpool_alloc>
 800da1a:	6030      	str	r0, [r6, #0]
    e->mempool = m;
 800da1c:	6007      	str	r7, [r0, #0]
    
    e->y = 0.0f;
 800da1e:	2300      	movs	r3, #0
 800da20:	6043      	str	r3, [r0, #4]
    e->a_thresh = attackThreshold;
 800da22:	6085      	str	r5, [r0, #8]
    e->d_coeff = decayCoeff;
 800da24:	60c4      	str	r4, [r0, #12]
}
 800da26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da28 <tEnvelopeFollower_init>:
{
 800da28:	b508      	push	{r3, lr}
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
 800da2a:	3118      	adds	r1, #24
 800da2c:	f7ff ffea 	bl	800da04 <tEnvelopeFollower_initToPool>
}
 800da30:	bd08      	pop	{r3, pc}
	...

0800da34 <tEnvelopeFollower_tick>:
    mpool_free((char*)e, e->mempool);
}

Lfloat   tEnvelopeFollower_tick(tEnvelopeFollower* const ef, Lfloat x)
{
    _tEnvelopeFollower* e = *ef;
 800da34:	6803      	ldr	r3, [r0, #0]
    
    if (x < 0.0f ) x = -x;  /* Absolute value. */
 800da36:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800da3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da3e:	d415      	bmi.n	800da6c <tEnvelopeFollower_tick+0x38>
    
    if (isnan(x)) return 0.0f;
 800da40:	eeb4 0a40 	vcmp.f32	s0, s0
 800da44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da48:	d61c      	bvs.n	800da84 <tEnvelopeFollower_tick+0x50>
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x; /* If we hit a peak, ride the peak to the top. */
 800da4a:	edd3 7a01 	vldr	s15, [r3, #4]
 800da4e:	eef4 7ac0 	vcmpe.f32	s15, s0
 800da52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da56:	d80c      	bhi.n	800da72 <tEnvelopeFollower_tick+0x3e>
 800da58:	ed93 7a02 	vldr	s14, [r3, #8]
 800da5c:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800da60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da64:	d505      	bpl.n	800da72 <tEnvelopeFollower_tick+0x3e>
 800da66:	ed83 0a01 	vstr	s0, [r3, #4]
 800da6a:	e008      	b.n	800da7e <tEnvelopeFollower_tick+0x4a>
    if (x < 0.0f ) x = -x;  /* Absolute value. */
 800da6c:	eeb1 0a40 	vneg.f32	s0, s0
 800da70:	e7e6      	b.n	800da40 <tEnvelopeFollower_tick+0xc>
    else e->y = e->y * e->d_coeff; /* Else, exponential decay of output. */
 800da72:	ed93 7a03 	vldr	s14, [r3, #12]
 800da76:	ee67 7a87 	vmul.f32	s15, s15, s14
 800da7a:	edc3 7a01 	vstr	s15, [r3, #4]
    
#ifdef NO_DENORMAL_CHECK
#else
    if( e->y < VSF)   e->y = 0.0f;
#endif
    return e->y;
 800da7e:	ed93 0a01 	vldr	s0, [r3, #4]
 800da82:	4770      	bx	lr
    if (isnan(x)) return 0.0f;
 800da84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800da8c <tEnvelopeFollower_tick+0x58>
}
 800da88:	4770      	bx	lr
 800da8a:	bf00      	nop
 800da8c:	00000000 	.word	0x00000000

0800da90 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
 800da90:	b538      	push	{r3, r4, r5, lr}
 800da92:	ed2d 8b02 	vpush	{d8}
 800da96:	4604      	mov	r4, r0
 800da98:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
 800da9c:	680d      	ldr	r5, [r1, #0]
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800da9e:	4629      	mov	r1, r5
 800daa0:	2010      	movs	r0, #16
 800daa2:	f004 fbf9 	bl	8012298 <mpool_alloc>
 800daa6:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 800daa8:	6005      	str	r5, [r0, #0]
    
    p->curr=0.0f;
 800daaa:	2300      	movs	r3, #0
 800daac:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
 800daae:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
 800dab2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dab6:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800daba:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800dabe:	ecbd 8b02 	vpop	{d8}
 800dac2:	bd38      	pop	{r3, r4, r5, pc}

0800dac4 <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
 800dac4:	b508      	push	{r3, lr}
    _tPowerFollower* p = *pf;
 800dac6:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
 800dac8:	6801      	ldr	r1, [r0, #0]
 800daca:	f004 fcd1 	bl	8012470 <mpool_free>
}
 800dace:	bd08      	pop	{r3, pc}

0800dad0 <tPowerFollower_setFactor>:

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
 800dad0:	6803      	ldr	r3, [r0, #0]
    
    if (factor<0.0f) factor=0.0f;
 800dad2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800dad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dada:	d411      	bmi.n	800db00 <tPowerFollower_setFactor+0x30>
    if (factor>1.0f) factor=1.0f;
 800dadc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dae0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800dae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae8:	dd01      	ble.n	800daee <tPowerFollower_setFactor+0x1e>
 800daea:	eeb0 0a67 	vmov.f32	s0, s15
    p->factor=factor;
 800daee:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
 800daf2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800daf6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800dafa:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800dafe:	4770      	bx	lr
    if (factor<0.0f) factor=0.0f;
 800db00:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800db08 <tPowerFollower_setFactor+0x38>
 800db04:	e7ea      	b.n	800dadc <tPowerFollower_setFactor+0xc>
 800db06:	bf00      	nop
 800db08:	00000000 	.word	0x00000000

0800db0c <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
 800db0c:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
 800db0e:	edd3 7a01 	vldr	s15, [r3, #4]
 800db12:	ee67 7a80 	vmul.f32	s15, s15, s0
 800db16:	ee27 0a80 	vmul.f32	s0, s15, s0
 800db1a:	edd3 7a02 	vldr	s15, [r3, #8]
 800db1e:	ed93 7a03 	vldr	s14, [r3, #12]
 800db22:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db26:	ee30 0a27 	vadd.f32	s0, s0, s15
 800db2a:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
 800db2e:	4770      	bx	lr

0800db30 <tLinearDelay_free>:
    
    tLinearDelay_setDelay(dl, d->delay);
}

void tLinearDelay_free (tLinearDelay* const dl)
{
 800db30:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 800db32:	6804      	ldr	r4, [r0, #0]
    
    mpool_free((char*)d->buff, d->mempool);
 800db34:	6821      	ldr	r1, [r4, #0]
 800db36:	68a0      	ldr	r0, [r4, #8]
 800db38:	f004 fc9a 	bl	8012470 <mpool_free>
    mpool_free((char*)d, d->mempool);
 800db3c:	6821      	ldr	r1, [r4, #0]
 800db3e:	4620      	mov	r0, r4
 800db40:	f004 fc96 	bl	8012470 <mpool_free>
}
 800db44:	bd10      	pop	{r4, pc}

0800db46 <tLinearDelay_clear>:

void    tLinearDelay_clear(tLinearDelay* const dl)
{
    _tLinearDelay* d = *dl;
 800db46:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800db48:	2300      	movs	r3, #0
 800db4a:	e005      	b.n	800db58 <tLinearDelay_clear+0x12>
    {
        d->buff[i] = 0;
 800db4c:	688a      	ldr	r2, [r1, #8]
 800db4e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800db52:	2000      	movs	r0, #0
 800db54:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800db56:	3301      	adds	r3, #1
 800db58:	69ca      	ldr	r2, [r1, #28]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d8f6      	bhi.n	800db4c <tLinearDelay_clear+0x6>
    }
}
 800db5e:	4770      	bx	lr

0800db60 <tLinearDelay_tick>:

Lfloat   tLinearDelay_tick (tLinearDelay* const dl, Lfloat input)
{
    _tLinearDelay* d = *dl;
 800db60:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 800db62:	edd3 7a01 	vldr	s15, [r3, #4]
 800db66:	689a      	ldr	r2, [r3, #8]
 800db68:	6959      	ldr	r1, [r3, #20]
 800db6a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800db6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800db72:	edc2 7a00 	vstr	s15, [r2]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800db76:	695a      	ldr	r2, [r3, #20]
 800db78:	3201      	adds	r2, #1
 800db7a:	615a      	str	r2, [r3, #20]
 800db7c:	69d9      	ldr	r1, [r3, #28]
 800db7e:	428a      	cmp	r2, r1
 800db80:	d022      	beq.n	800dbc8 <tLinearDelay_tick+0x68>

    uint32_t idx = (uint32_t) d->outPoint;
 800db82:	699a      	ldr	r2, [r3, #24]
    // First 1/2 of interpolation
    d->lastOut = d->buff[idx] * d->omAlpha;
 800db84:	6898      	ldr	r0, [r3, #8]
 800db86:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 800db8a:	eddc 7a00 	vldr	s15, [ip]
 800db8e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800db92:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db96:	edc3 7a03 	vstr	s15, [r3, #12]
        // Second 1/2 of interpolation
    if ((idx + 1) < d->maxDelay)
 800db9a:	3201      	adds	r2, #1
 800db9c:	4291      	cmp	r1, r2
 800db9e:	d916      	bls.n	800dbce <tLinearDelay_tick+0x6e>
        d->lastOut += d->buff[idx+1] * d->alpha;
 800dba0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800dba4:	ed90 7a00 	vldr	s14, [r0]
 800dba8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800dbac:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dbb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dbb4:	edc3 7a03 	vstr	s15, [r3, #12]
    else
        d->lastOut += d->buff[0] * d->alpha;

    // Increment output pointer modulo length
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800dbb8:	619a      	str	r2, [r3, #24]
 800dbba:	4291      	cmp	r1, r2
 800dbbc:	d801      	bhi.n	800dbc2 <tLinearDelay_tick+0x62>
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	619a      	str	r2, [r3, #24]

    return d->lastOut;
}
 800dbc2:	ed93 0a03 	vldr	s0, [r3, #12]
 800dbc6:	4770      	bx	lr
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800dbc8:	2200      	movs	r2, #0
 800dbca:	615a      	str	r2, [r3, #20]
 800dbcc:	e7d9      	b.n	800db82 <tLinearDelay_tick+0x22>
        d->lastOut += d->buff[0] * d->alpha;
 800dbce:	ed90 7a00 	vldr	s14, [r0]
 800dbd2:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800dbd6:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dbda:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dbde:	edc3 7a03 	vstr	s15, [r3, #12]
 800dbe2:	e7e9      	b.n	800dbb8 <tLinearDelay_tick+0x58>

0800dbe4 <tLinearDelay_tickIn>:

void   tLinearDelay_tickIn (tLinearDelay* const dl, Lfloat input)
{
    _tLinearDelay* d = *dl;
 800dbe4:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 800dbe6:	edd3 7a01 	vldr	s15, [r3, #4]
 800dbea:	689a      	ldr	r2, [r3, #8]
 800dbec:	6959      	ldr	r1, [r3, #20]
 800dbee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800dbf2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dbf6:	edc2 7a00 	vstr	s15, [r2]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800dbfa:	695a      	ldr	r2, [r3, #20]
 800dbfc:	3201      	adds	r2, #1
 800dbfe:	615a      	str	r2, [r3, #20]
 800dc00:	69d9      	ldr	r1, [r3, #28]
 800dc02:	428a      	cmp	r2, r1
 800dc04:	d000      	beq.n	800dc08 <tLinearDelay_tickIn+0x24>
}
 800dc06:	4770      	bx	lr
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800dc08:	2200      	movs	r2, #0
 800dc0a:	615a      	str	r2, [r3, #20]
}
 800dc0c:	e7fb      	b.n	800dc06 <tLinearDelay_tickIn+0x22>

0800dc0e <tLinearDelay_tickOut>:

Lfloat   tLinearDelay_tickOut (tLinearDelay* const dl)
{
    _tLinearDelay* d = *dl;
 800dc0e:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
 800dc10:	699a      	ldr	r2, [r3, #24]
    // First 1/2 of interpolation
    d->lastOut = d->buff[idx] * d->omAlpha;
 800dc12:	6899      	ldr	r1, [r3, #8]
 800dc14:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 800dc18:	edd0 7a00 	vldr	s15, [r0]
 800dc1c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800dc20:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc24:	edc3 7a03 	vstr	s15, [r3, #12]
        // Second 1/2 of interpolation
        
    if ((idx + 1) < d->maxDelay)
 800dc28:	3201      	adds	r2, #1
 800dc2a:	69d8      	ldr	r0, [r3, #28]
 800dc2c:	4282      	cmp	r2, r0
 800dc2e:	d213      	bcs.n	800dc58 <tLinearDelay_tickOut+0x4a>
        d->lastOut += d->buff[idx+1] * d->alpha;
 800dc30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dc34:	ed91 7a00 	vldr	s14, [r1]
 800dc38:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800dc3c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dc40:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc44:	edc3 7a03 	vstr	s15, [r3, #12]
    else
        d->lastOut += d->buff[0] * d->alpha;

    // Increment output pointer modulo length
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 800dc48:	619a      	str	r2, [r3, #24]
 800dc4a:	4282      	cmp	r2, r0
 800dc4c:	d301      	bcc.n	800dc52 <tLinearDelay_tickOut+0x44>
 800dc4e:	2200      	movs	r2, #0
 800dc50:	619a      	str	r2, [r3, #24]

    return d->lastOut;
}
 800dc52:	ed93 0a03 	vldr	s0, [r3, #12]
 800dc56:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 800dc58:	ed91 7a00 	vldr	s14, [r1]
 800dc5c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800dc60:	ee27 7a26 	vmul.f32	s14, s14, s13
 800dc64:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc68:	edc3 7a03 	vstr	s15, [r3, #12]
 800dc6c:	e7ec      	b.n	800dc48 <tLinearDelay_tickOut+0x3a>

0800dc6e <tLinearDelay_setDelay>:

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
 800dc6e:	b510      	push	{r4, lr}
 800dc70:	eef0 0a40 	vmov.f32	s1, s0
    _tLinearDelay* d = *dl;
 800dc74:	6804      	ldr	r4, [r0, #0]

    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800dc76:	edd4 7a07 	vldr	s15, [r4, #28]
 800dc7a:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800dc7e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800dc82:	f003 ffb5 	bl	8011bf0 <LEAF_clip>
 800dc86:	ed84 0a08 	vstr	s0, [r4, #32]

    Lfloat outPointer = d->inPoint - d->delay;
 800dc8a:	edd4 7a05 	vldr	s15, [r4, #20]
 800dc8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc92:	ee77 7ac0 	vsub.f32	s15, s15, s0

    while ( outPointer < 0 )
 800dc96:	e005      	b.n	800dca4 <tLinearDelay_setDelay+0x36>
        outPointer += d->maxDelay; // modulo maximum length
 800dc98:	ed94 7a07 	vldr	s14, [r4, #28]
 800dc9c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800dca0:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800dca4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcac:	d4f4      	bmi.n	800dc98 <tLinearDelay_setDelay+0x2a>

    d->outPoint = (uint32_t) outPointer;   // integer part
 800dcae:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800dcb2:	ee17 3a10 	vmov	r3, s14
 800dcb6:	ed84 7a06 	vstr	s14, [r4, #24]

    d->alpha = outPointer - d->outPoint; // fractional part
 800dcba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800dcbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dcc2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 800dcc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dcca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dcce:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800dcd2:	69e2      	ldr	r2, [r4, #28]
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d000      	beq.n	800dcda <tLinearDelay_setDelay+0x6c>
}
 800dcd8:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	61a3      	str	r3, [r4, #24]
}
 800dcde:	e7fb      	b.n	800dcd8 <tLinearDelay_setDelay+0x6a>

0800dce0 <tLinearDelay_initToPool>:
{
 800dce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce2:	ed2d 8b02 	vpush	{d8}
 800dce6:	4606      	mov	r6, r0
 800dce8:	eeb0 8a40 	vmov.f32	s16, s0
 800dcec:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 800dcee:	6817      	ldr	r7, [r2, #0]
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800dcf0:	4639      	mov	r1, r7
 800dcf2:	202c      	movs	r0, #44	; 0x2c
 800dcf4:	f004 fad0 	bl	8012298 <mpool_alloc>
 800dcf8:	4604      	mov	r4, r0
 800dcfa:	6030      	str	r0, [r6, #0]
    d->mempool = m;
 800dcfc:	6007      	str	r7, [r0, #0]
    d->maxDelay = maxDelay;
 800dcfe:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 800dd00:	ee07 5a90 	vmov	s15, r5
 800dd04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd08:	eef4 7ac8 	vcmpe.f32	s15, s16
 800dd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd10:	d517      	bpl.n	800dd42 <tLinearDelay_initToPool+0x62>
 800dd12:	edc0 7a08 	vstr	s15, [r0, #32]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800dd16:	4639      	mov	r1, r7
 800dd18:	00a8      	lsls	r0, r5, #2
 800dd1a:	f004 fabd 	bl	8012298 <mpool_alloc>
 800dd1e:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
 800dd20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800dd24:	6063      	str	r3, [r4, #4]
    d->lastIn = 0.0f;
 800dd26:	2300      	movs	r3, #0
 800dd28:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 800dd2a:	60e3      	str	r3, [r4, #12]
    d->inPoint = 0;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
 800dd30:	61a3      	str	r3, [r4, #24]
    tLinearDelay_setDelay(dl, d->delay);
 800dd32:	ed94 0a08 	vldr	s0, [r4, #32]
 800dd36:	4630      	mov	r0, r6
 800dd38:	f7ff ff99 	bl	800dc6e <tLinearDelay_setDelay>
}
 800dd3c:	ecbd 8b02 	vpop	{d8}
 800dd40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (delay < 0.0f)  d->delay = 0.0f;
 800dd42:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800dd46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd4a:	d402      	bmi.n	800dd52 <tLinearDelay_initToPool+0x72>
    else                    d->delay = delay;
 800dd4c:	ed80 8a08 	vstr	s16, [r0, #32]
 800dd50:	e7e1      	b.n	800dd16 <tLinearDelay_initToPool+0x36>
    else if (delay < 0.0f)  d->delay = 0.0f;
 800dd52:	2300      	movs	r3, #0
 800dd54:	6203      	str	r3, [r0, #32]
 800dd56:	e7de      	b.n	800dd16 <tLinearDelay_initToPool+0x36>

0800dd58 <tLinearDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tLinearDelay_addTo (tLinearDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tLinearDelay* d = *dl;
 800dd58:	6802      	ldr	r2, [r0, #0]

    int32_t tap = d->inPoint - tapDelay - 1;
 800dd5a:	6953      	ldr	r3, [r2, #20]
 800dd5c:	1a59      	subs	r1, r3, r1
 800dd5e:	3901      	subs	r1, #1

    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
 800dd60:	e001      	b.n	800dd66 <tLinearDelay_addTo+0xe>
 800dd62:	69d3      	ldr	r3, [r2, #28]
 800dd64:	4419      	add	r1, r3
 800dd66:	2900      	cmp	r1, #0
 800dd68:	dbfb      	blt.n	800dd62 <tLinearDelay_addTo+0xa>
    
    return (d->buff[tap] += value);
 800dd6a:	6893      	ldr	r3, [r2, #8]
 800dd6c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800dd70:	edd3 7a00 	vldr	s15, [r3]
 800dd74:	ee30 0a27 	vadd.f32	s0, s0, s15
 800dd78:	ed83 0a00 	vstr	s0, [r3]
}
 800dd7c:	4770      	bx	lr

0800dd7e <tLagrangeDelay_free>:

    tLagrangeDelay_setDelay(dl, d->delay);
}

void tLagrangeDelay_free (tLagrangeDelay* const dl)
{
 800dd7e:	b510      	push	{r4, lr}
    _tLagrangeDelay* d = *dl;
 800dd80:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)d->buff, d->mempool);
 800dd82:	6821      	ldr	r1, [r4, #0]
 800dd84:	6860      	ldr	r0, [r4, #4]
 800dd86:	f004 fb73 	bl	8012470 <mpool_free>
    mpool_free((char*)d, d->mempool);
 800dd8a:	6821      	ldr	r1, [r4, #0]
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	f004 fb6f 	bl	8012470 <mpool_free>
}
 800dd92:	bd10      	pop	{r4, pc}

0800dd94 <tLagrangeDelay_clear>:


void    tLagrangeDelay_clear(tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
 800dd94:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800dd96:	2300      	movs	r3, #0
 800dd98:	e005      	b.n	800dda6 <tLagrangeDelay_clear+0x12>
    {
        d->buff[i] = 0.0f;
 800dd9a:	684a      	ldr	r2, [r1, #4]
 800dd9c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800dda0:	2000      	movs	r0, #0
 800dda2:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 800dda4:	3301      	adds	r3, #1
 800dda6:	69ca      	ldr	r2, [r1, #28]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d8f6      	bhi.n	800dd9a <tLagrangeDelay_clear+0x6>
    }
}
 800ddac:	4770      	bx	lr

0800ddae <tLagrangeDelay_tickIn>:
    return d->lastOut;
}

void   tLagrangeDelay_tickIn (tLagrangeDelay* const dl, Lfloat input)
{
	_tLagrangeDelay* d = *dl;
 800ddae:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input;
 800ddb0:	685a      	ldr	r2, [r3, #4]
 800ddb2:	6959      	ldr	r1, [r3, #20]
 800ddb4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ddb8:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
 800ddbc:	695a      	ldr	r2, [r3, #20]
 800ddbe:	3201      	adds	r2, #1
 800ddc0:	6899      	ldr	r1, [r3, #8]
 800ddc2:	400a      	ands	r2, r1
 800ddc4:	615a      	str	r2, [r3, #20]
}
 800ddc6:	4770      	bx	lr

0800ddc8 <tLagrangeDelay_tickOut>:

Lfloat   tLagrangeDelay_tickOut (tLagrangeDelay* const dl)
{
 800ddc8:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;
 800ddca:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
 800ddcc:	6998      	ldr	r0, [r3, #24]

   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
 800ddce:	69da      	ldr	r2, [r3, #28]
 800ddd0:	4402      	add	r2, r0
 800ddd2:	3a01      	subs	r2, #1
 800ddd4:	689c      	ldr	r4, [r3, #8]
 800ddd6:	4022      	ands	r2, r4

    d->lastOut =    (d->buff[previdx] * d->h0) +
 800ddd8:	6859      	ldr	r1, [r3, #4]
 800ddda:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800ddde:	ed92 0a00 	vldr	s0, [r2]
 800dde2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800dde6:	ee20 0a27 	vmul.f32	s0, s0, s15
    		(d->buff[idx] * d->h1) +
 800ddea:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800ddee:	edd2 7a00 	vldr	s15, [r2]
 800ddf2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800ddf6:	ee67 7a87 	vmul.f32	s15, s15, s14
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800ddfa:	ee30 0a27 	vadd.f32	s0, s0, s15
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800ddfe:	1c42      	adds	r2, r0, #1
 800de00:	4022      	ands	r2, r4
 800de02:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800de06:	eddc 7a00 	vldr	s15, [ip]
 800de0a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800de0e:	ee67 7a87 	vmul.f32	s15, s15, s14
    		(d->buff[idx] * d->h1) +
 800de12:	ee30 0a27 	vadd.f32	s0, s0, s15
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 800de16:	3002      	adds	r0, #2
 800de18:	4004      	ands	r4, r0
 800de1a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800de1e:	edd1 7a00 	vldr	s15, [r1]
 800de22:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800de26:	ee67 7a87 	vmul.f32	s15, s15, s14
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 800de2a:	ee30 0a27 	vadd.f32	s0, s0, s15
    d->lastOut =    (d->buff[previdx] * d->h0) +
 800de2e:	ed83 0a03 	vstr	s0, [r3, #12]

    //d->buff[previdx] = 0.0f;
    // Increment output pointer modulo length
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 800de32:	619a      	str	r2, [r3, #24]

    return d->lastOut;
}
 800de34:	f85d 4b04 	ldr.w	r4, [sp], #4
 800de38:	4770      	bx	lr
	...

0800de3c <tLagrangeDelay_setDelay>:

void tLagrangeDelay_setDelay (tLagrangeDelay* const dl, Lfloat delay)
{
	_tLagrangeDelay* d = *dl;
 800de3c:	6803      	ldr	r3, [r0, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
 800de3e:	ed83 0a08 	vstr	s0, [r3, #32]
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
 800de42:	edd3 7a05 	vldr	s15, [r3, #20]
 800de46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de4a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800de4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de52:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while ( outPointer < 0 )
 800de56:	e005      	b.n	800de64 <tLagrangeDelay_setDelay+0x28>
        outPointer += d->maxDelay; // modulo maximum length
 800de58:	ed93 7a07 	vldr	s14, [r3, #28]
 800de5c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800de60:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 800de64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800de68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de6c:	d4f4      	bmi.n	800de58 <tLagrangeDelay_setDelay+0x1c>

    d->outPoint = (uint32_t) outPointer;   // integer part
 800de6e:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 800de72:	ee17 2a10 	vmov	r2, s14
 800de76:	ed83 7a06 	vstr	s14, [r3, #24]

    //Lfloat alpha = 1.0f - (outPointer - d->outPoint); // fractional part
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
 800de7a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800de7e:	ee77 7ac7 	vsub.f32	s15, s15, s14

	Lfloat dp1 = alpha+1.0f;
 800de82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800de86:	ee37 6a87 	vadd.f32	s12, s15, s14
	Lfloat dm1 = alpha-1.0f;
 800de8a:	ee37 7ac7 	vsub.f32	s14, s15, s14
	Lfloat dm2 = alpha-2.0f;
 800de8e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800de92:	ee77 6ae6 	vsub.f32	s13, s15, s13

	Lfloat pdp1d = dp1*alpha;
 800de96:	ee67 5a86 	vmul.f32	s11, s15, s12
	Lfloat pddm1 = alpha*dm1;
 800de9a:	ee67 7a87 	vmul.f32	s15, s15, s14
	Lfloat pdm1dm2 = dm1*dm2;
 800de9e:	ee27 5a26 	vmul.f32	s10, s14, s13

	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 800dea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dea6:	eddf 4a11 	vldr	s9, [pc, #68]	; 800deec <tLagrangeDelay_setDelay+0xb0>
 800deaa:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800deae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 800deb2:	ee26 6a05 	vmul.f32	s12, s12, s10
 800deb6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800deba:	ee26 6a27 	vmul.f32	s12, s12, s15
 800debe:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
	d->h2 = -0.5f * (pdp1d * dm2);
 800dec2:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800dec6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800deca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800dece:	edc3 6a0b 	vstr	s13, [r3, #44]	; 0x2c
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 800ded2:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ded6:	eddf 7a06 	vldr	s15, [pc, #24]	; 800def0 <tLagrangeDelay_setDelay+0xb4>
 800deda:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dede:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30

    d->outPoint &= d->bufferMask;
 800dee2:	6899      	ldr	r1, [r3, #8]
 800dee4:	400a      	ands	r2, r1
 800dee6:	619a      	str	r2, [r3, #24]
}
 800dee8:	4770      	bx	lr
 800deea:	bf00      	nop
 800deec:	be2aaaab 	.word	0xbe2aaaab
 800def0:	3e2aaaab 	.word	0x3e2aaaab

0800def4 <tLagrangeDelay_initToPool>:
{
 800def4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800def6:	ed2d 8b02 	vpush	{d8}
 800defa:	4605      	mov	r5, r0
 800defc:	eeb0 8a40 	vmov.f32	s16, s0
 800df00:	460f      	mov	r7, r1
    _tMempool* m = *mp;
 800df02:	6816      	ldr	r6, [r2, #0]
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 800df04:	4631      	mov	r1, r6
 800df06:	2034      	movs	r0, #52	; 0x34
 800df08:	f004 f9c6 	bl	8012298 <mpool_alloc>
 800df0c:	4604      	mov	r4, r0
 800df0e:	6028      	str	r0, [r5, #0]
    d->mempool = m;
 800df10:	6006      	str	r6, [r0, #0]
    d->maxDelay = maxDelay;
 800df12:	61c7      	str	r7, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 800df14:	ee07 7a90 	vmov	s15, r7
 800df18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df1c:	eef4 7ac8 	vcmpe.f32	s15, s16
 800df20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df24:	d507      	bpl.n	800df36 <tLagrangeDelay_initToPool+0x42>
 800df26:	edc0 7a08 	vstr	s15, [r0, #32]
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 800df2a:	b17f      	cbz	r7, 800df4c <tLagrangeDelay_initToPool+0x58>
 800df2c:	1e7b      	subs	r3, r7, #1
 800df2e:	423b      	tst	r3, r7
 800df30:	d10c      	bne.n	800df4c <tLagrangeDelay_initToPool+0x58>
        d->bufferMask = maxDelay - 1;
 800df32:	60a3      	str	r3, [r4, #8]
 800df34:	e018      	b.n	800df68 <tLagrangeDelay_initToPool+0x74>
    else if (delay < 0.0f)  d->delay = 0.0f;
 800df36:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800df3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df3e:	d402      	bmi.n	800df46 <tLagrangeDelay_initToPool+0x52>
    else                    d->delay = delay;
 800df40:	ed80 8a08 	vstr	s16, [r0, #32]
 800df44:	e7f1      	b.n	800df2a <tLagrangeDelay_initToPool+0x36>
    else if (delay < 0.0f)  d->delay = 0.0f;
 800df46:	2300      	movs	r3, #0
 800df48:	6203      	str	r3, [r0, #32]
 800df4a:	e7ee      	b.n	800df2a <tLagrangeDelay_initToPool+0x36>
        maxDelay--;
 800df4c:	1e7b      	subs	r3, r7, #1
        maxDelay |= maxDelay >> 1;
 800df4e:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
 800df52:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
 800df56:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
 800df5a:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
 800df5e:	ea43 4313 	orr.w	r3, r3, r3, lsr #16
        maxDelay++;
 800df62:	1c5f      	adds	r7, r3, #1
        d->maxDelay = maxDelay;
 800df64:	61e7      	str	r7, [r4, #28]
        d->bufferMask = maxDelay - 1;
 800df66:	60a3      	str	r3, [r4, #8]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800df68:	4631      	mov	r1, r6
 800df6a:	00b8      	lsls	r0, r7, #2
 800df6c:	f004 f994 	bl	8012298 <mpool_alloc>
 800df70:	6060      	str	r0, [r4, #4]
    d->lastIn = 0.0f;
 800df72:	2300      	movs	r3, #0
 800df74:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 800df76:	60e3      	str	r3, [r4, #12]
    d->inPoint = 0;
 800df78:	2300      	movs	r3, #0
 800df7a:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
 800df7c:	61a3      	str	r3, [r4, #24]
    tLagrangeDelay_setDelay(dl, d->delay);
 800df7e:	ed94 0a08 	vldr	s0, [r4, #32]
 800df82:	4628      	mov	r0, r5
 800df84:	f7ff ff5a 	bl	800de3c <tLagrangeDelay_setDelay>
}
 800df88:	ecbd 8b02 	vpop	{d8}
 800df8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df8e <tLagrangeDelay_tapOut>:

Lfloat tLagrangeDelay_tapOut (tLagrangeDelay* const dl, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800df8e:	6802      	ldr	r2, [r0, #0]

    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 800df90:	6953      	ldr	r3, [r2, #20]
 800df92:	1a5b      	subs	r3, r3, r1
 800df94:	3b01      	subs	r3, #1
 800df96:	6891      	ldr	r1, [r2, #8]
 800df98:	400b      	ands	r3, r1

    return d->buff[tap];
 800df9a:	6852      	ldr	r2, [r2, #4]
 800df9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2

}
 800dfa0:	ed93 0a00 	vldr	s0, [r3]
 800dfa4:	4770      	bx	lr
	...

0800dfa8 <tLagrangeDelay_tapOutInterpolated>:

Lfloat   tLagrangeDelay_tapOutInterpolated (tLagrangeDelay* const dl, uint32_t tapDelay, Lfloat alpha)
{
 800dfa8:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;
 800dfaa:	6804      	ldr	r4, [r0, #0]

    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 800dfac:	6963      	ldr	r3, [r4, #20]
 800dfae:	1a59      	subs	r1, r3, r1
 800dfb0:	3902      	subs	r1, #2
 800dfb2:	68a0      	ldr	r0, [r4, #8]
 800dfb4:	4001      	ands	r1, r0

    alpha = 1.0f - alpha;
 800dfb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800dfba:	ee37 0ac0 	vsub.f32	s0, s15, s0
    Lfloat dp1 = alpha+1.0f;
 800dfbe:	ee70 6a27 	vadd.f32	s13, s0, s15
    Lfloat dm1 = alpha-1.0f;
 800dfc2:	ee70 7a67 	vsub.f32	s15, s0, s15
    Lfloat dm2 = alpha-2.0f;
 800dfc6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800dfca:	ee30 7a47 	vsub.f32	s14, s0, s14

    Lfloat pdp1d = dp1*alpha;
 800dfce:	ee60 5a26 	vmul.f32	s11, s0, s13
    Lfloat pddm1 = alpha*dm1;
 800dfd2:	ee20 0a27 	vmul.f32	s0, s0, s15
    Lfloat pdm1dm2 = dm1*dm2;
 800dfd6:	ee27 6a87 	vmul.f32	s12, s15, s14

    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 800dfda:	ee27 0a00 	vmul.f32	s0, s14, s0
 800dfde:	ed9f 5a20 	vldr	s10, [pc, #128]	; 800e060 <tLagrangeDelay_tapOutInterpolated+0xb8>
 800dfe2:	ee20 0a05 	vmul.f32	s0, s0, s10
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 800dfe6:	ee66 6a86 	vmul.f32	s13, s13, s12
 800dfea:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800dfee:	ee26 6a86 	vmul.f32	s12, s13, s12
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 800dff2:	ee27 7a25 	vmul.f32	s14, s14, s11
 800dff6:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800dffa:	ee27 7a26 	vmul.f32	s14, s14, s13
    Lfloat h3 = 0.166666666666667f * (pdp1d * dm1);
 800dffe:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e002:	eddf 6a18 	vldr	s13, [pc, #96]	; 800e064 <tLagrangeDelay_tapOutInterpolated+0xbc>
 800e006:	ee67 7aa6 	vmul.f32	s15, s15, s13
    
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800e00a:	6862      	ldr	r2, [r4, #4]
 800e00c:	69e3      	ldr	r3, [r4, #28]
 800e00e:	440b      	add	r3, r1
 800e010:	3b01      	subs	r3, #1
 800e012:	4003      	ands	r3, r0
 800e014:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e018:	edd3 6a00 	vldr	s13, [r3]
 800e01c:	ee26 0a80 	vmul.f32	s0, s13, s0
    		(d->buff[idx] * h1) +
 800e020:	eb02 0381 	add.w	r3, r2, r1, lsl #2
 800e024:	edd3 6a00 	vldr	s13, [r3]
 800e028:	ee66 6a86 	vmul.f32	s13, s13, s12
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 800e02c:	ee30 0a26 	vadd.f32	s0, s0, s13
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 800e030:	1c4b      	adds	r3, r1, #1
 800e032:	4003      	ands	r3, r0
 800e034:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e038:	edd3 6a00 	vldr	s13, [r3]
 800e03c:	ee26 7a87 	vmul.f32	s14, s13, s14
    		(d->buff[idx] * h1) +
 800e040:	ee30 7a07 	vadd.f32	s14, s0, s14
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 800e044:	3102      	adds	r1, #2
 800e046:	4008      	ands	r0, r1
 800e048:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e04c:	ed92 0a00 	vldr	s0, [r2]
 800e050:	ee20 0a27 	vmul.f32	s0, s0, s15

}
 800e054:	ee37 0a00 	vadd.f32	s0, s14, s0
 800e058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e05c:	4770      	bx	lr
 800e05e:	bf00      	nop
 800e060:	be2aaaab 	.word	0xbe2aaaab
 800e064:	3e2aaaab 	.word	0x3e2aaaab

0800e068 <tLagrangeDelay_tapIn>:

void tLagrangeDelay_tapIn (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800e068:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800e06a:	6953      	ldr	r3, [r2, #20]
 800e06c:	1a5b      	subs	r3, r3, r1
 800e06e:	3b01      	subs	r3, #1
 800e070:	6891      	ldr	r1, [r2, #8]
 800e072:	400b      	ands	r3, r1

    d->buff[tap] = value;
 800e074:	6852      	ldr	r2, [r2, #4]
 800e076:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e07a:	ed83 0a00 	vstr	s0, [r3]
}
 800e07e:	4770      	bx	lr

0800e080 <tLagrangeDelay_addTo>:

Lfloat tLagrangeDelay_addTo (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 800e080:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 800e082:	6953      	ldr	r3, [r2, #20]
 800e084:	1a5b      	subs	r3, r3, r1
 800e086:	3b01      	subs	r3, #1
 800e088:	6891      	ldr	r1, [r2, #8]
 800e08a:	400b      	ands	r3, r1

    return (d->buff[tap] += value);
 800e08c:	6852      	ldr	r2, [r2, #4]
 800e08e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e092:	edd3 7a00 	vldr	s15, [r3]
 800e096:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e09a:	ed83 0a00 	vstr	s0, [r3]
}
 800e09e:	4770      	bx	lr

0800e0a0 <tLagrangeDelay_getMaxDelay>:
}


Lfloat   tLagrangeDelay_getMaxDelay (tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
 800e0a0:	6803      	ldr	r3, [r0, #0]
    return d->maxDelay;
 800e0a2:	ed93 0a07 	vldr	s0, [r3, #28]
}
 800e0a6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800e0aa:	4770      	bx	lr

0800e0ac <tTapeDelay_tick>:
}

//#define SMOOTH_FACTOR 10.f

Lfloat   tTapeDelay_tick (tTapeDelay* const dl, Lfloat input)
{
 800e0ac:	b538      	push	{r3, r4, r5, lr}
    _tTapeDelay* d = *dl;
 800e0ae:	6804      	ldr	r4, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 800e0b0:	edd4 7a01 	vldr	s15, [r4, #4]
 800e0b4:	68a3      	ldr	r3, [r4, #8]
 800e0b6:	6962      	ldr	r2, [r4, #20]
 800e0b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e0bc:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e0c0:	edc3 7a00 	vstr	s15, [r3]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800e0c4:	6963      	ldr	r3, [r4, #20]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	6163      	str	r3, [r4, #20]
 800e0ca:	69a1      	ldr	r1, [r4, #24]
 800e0cc:	428b      	cmp	r3, r1
 800e0ce:	d037      	beq.n	800e140 <tTapeDelay_tick+0x94>

    int idx =  (int) d->idx;
 800e0d0:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800e0d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e0d8:	ee17 3a10 	vmov	r3, s14
    Lfloat alpha = d->idx - idx;
 800e0dc:	eeb8 2ac7 	vcvt.f32.s32	s4, s14

    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800e0e0:	68a5      	ldr	r5, [r4, #8]
 800e0e2:	18ca      	adds	r2, r1, r3
 800e0e4:	3a01      	subs	r2, #1
 800e0e6:	fbb2 f0f1 	udiv	r0, r2, r1
 800e0ea:	fb01 2210 	mls	r2, r1, r0, r2
 800e0ee:	eb05 0282 	add.w	r2, r5, r2, lsl #2
                                              d->buff[idx],
 800e0f2:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
                                              d->buff[(idx + 1) % d->maxDelay],
 800e0f6:	1c58      	adds	r0, r3, #1
 800e0f8:	fbb0 fef1 	udiv	lr, r0, r1
 800e0fc:	fb01 001e 	mls	r0, r1, lr, r0
 800e100:	eb05 0080 	add.w	r0, r5, r0, lsl #2
                                              d->buff[(idx + 2) % d->maxDelay],
 800e104:	3302      	adds	r3, #2
 800e106:	fbb3 fef1 	udiv	lr, r3, r1
 800e10a:	fb01 331e 	mls	r3, r1, lr, r3
 800e10e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 800e112:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800e116:	edd5 1a00 	vldr	s3, [r5]
 800e11a:	ed90 1a00 	vldr	s2, [r0]
 800e11e:	eddc 0a00 	vldr	s1, [ip]
 800e122:	ed92 0a00 	vldr	s0, [r2]
 800e126:	f003 ff1f 	bl	8011f68 <LEAF_interpolate_hermite_x>
 800e12a:	ed84 0a03 	vstr	s0, [r4, #12]
                                              alpha);

    Lfloat diff = (d->inPoint - d->idx);
 800e12e:	edd4 7a05 	vldr	s15, [r4, #20]
 800e132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e136:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 800e13a:	ee77 7ae6 	vsub.f32	s15, s15, s13
    while (diff < 0.f) diff += d->maxDelay;
 800e13e:	e008      	b.n	800e152 <tTapeDelay_tick+0xa6>
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 800e140:	2300      	movs	r3, #0
 800e142:	6163      	str	r3, [r4, #20]
 800e144:	e7c4      	b.n	800e0d0 <tTapeDelay_tick+0x24>
    while (diff < 0.f) diff += d->maxDelay;
 800e146:	ed94 7a06 	vldr	s14, [r4, #24]
 800e14a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e14e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e152:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e156:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e15a:	d4f4      	bmi.n	800e146 <tTapeDelay_tick+0x9a>

    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 800e15c:	ed94 6a07 	vldr	s12, [r4, #28]
 800e160:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e164:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800e168:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e16c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e170:	edc4 7a08 	vstr	s15, [r4, #32]

    d->idx += d->inc;
 800e174:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800e178:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24

    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 800e17c:	e003      	b.n	800e186 <tTapeDelay_tick+0xda>
 800e17e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e182:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 800e186:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 800e18a:	edd4 7a06 	vldr	s15, [r4, #24]
 800e18e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e192:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e19a:	daf0      	bge.n	800e17e <tTapeDelay_tick+0xd2>

    if (d->lastOut)
 800e19c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1a4:	d101      	bne.n	800e1aa <tTapeDelay_tick+0xfe>
        return d->lastOut;
    return 0.0f;
 800e1a6:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e1ac <tTapeDelay_tick+0x100>
}
 800e1aa:	bd38      	pop	{r3, r4, r5, pc}
 800e1ac:	00000000 	.word	0x00000000

0800e1b0 <tTapeDelay_setDelay>:
    _tTapeDelay* d = *dl;
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
 800e1b0:	b510      	push	{r4, lr}
 800e1b2:	eef0 0a40 	vmov.f32	s1, s0
    _tTapeDelay* d = *dl;
 800e1b6:	6804      	ldr	r4, [r0, #0]
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 800e1b8:	edd4 7a06 	vldr	s15, [r4, #24]
 800e1bc:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800e1c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e1c4:	f003 fd14 	bl	8011bf0 <LEAF_clip>
 800e1c8:	ed84 0a07 	vstr	s0, [r4, #28]
}
 800e1cc:	bd10      	pop	{r4, pc}

0800e1ce <tTapeDelay_initToPool>:
{
 800e1ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1d0:	ed2d 8b02 	vpush	{d8}
 800e1d4:	4605      	mov	r5, r0
 800e1d6:	eeb0 8a40 	vmov.f32	s16, s0
 800e1da:	460e      	mov	r6, r1
    _tMempool* m = *mp;
 800e1dc:	6817      	ldr	r7, [r2, #0]
    _tTapeDelay* d = *dl = (_tTapeDelay*) mpool_alloc(sizeof(_tTapeDelay), m);
 800e1de:	4639      	mov	r1, r7
 800e1e0:	202c      	movs	r0, #44	; 0x2c
 800e1e2:	f004 f859 	bl	8012298 <mpool_alloc>
 800e1e6:	4604      	mov	r4, r0
 800e1e8:	6028      	str	r0, [r5, #0]
    d->mempool = m;
 800e1ea:	6007      	str	r7, [r0, #0]
    d->maxDelay = maxDelay;
 800e1ec:	6186      	str	r6, [r0, #24]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800e1ee:	4639      	mov	r1, r7
 800e1f0:	00b0      	lsls	r0, r6, #2
 800e1f2:	f004 f851 	bl	8012298 <mpool_alloc>
 800e1f6:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
 800e1f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e1fc:	6062      	str	r2, [r4, #4]
    d->lastIn = 0.0f;
 800e1fe:	2300      	movs	r3, #0
 800e200:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 800e202:	60e3      	str	r3, [r4, #12]
    d->idx = 0.0f;
 800e204:	6263      	str	r3, [r4, #36]	; 0x24
    d->inc = 1.0f;
 800e206:	6222      	str	r2, [r4, #32]
    d->inPoint = 0;
 800e208:	2300      	movs	r3, #0
 800e20a:	6163      	str	r3, [r4, #20]
    tTapeDelay_setDelay(dl, delay);
 800e20c:	eeb0 0a48 	vmov.f32	s0, s16
 800e210:	4628      	mov	r0, r5
 800e212:	f7ff ffcd 	bl	800e1b0 <tTapeDelay_setDelay>
}
 800e216:	ecbd 8b02 	vpop	{d8}
 800e21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e21c <tSampleReducer_initToPool>:
{
    tSampleReducer_initToPool(sr, &leaf->mempool);
}

void tSampleReducer_initToPool (tSampleReducer* const sr, tMempool* const mp)
{
 800e21c:	b538      	push	{r3, r4, r5, lr}
 800e21e:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 800e220:	680d      	ldr	r5, [r1, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 800e222:	4629      	mov	r1, r5
 800e224:	2010      	movs	r0, #16
 800e226:	f004 f837 	bl	8012298 <mpool_alloc>
 800e22a:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 800e22c:	6005      	str	r5, [r0, #0]
    
    s->invRatio = 1.0f;
 800e22e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800e232:	6043      	str	r3, [r0, #4]
    s->hold = 0.0f;
 800e234:	2300      	movs	r3, #0
 800e236:	6083      	str	r3, [r0, #8]
    s->count = 0;
 800e238:	2300      	movs	r3, #0
 800e23a:	60c3      	str	r3, [r0, #12]
}
 800e23c:	bd38      	pop	{r3, r4, r5, pc}

0800e23e <tSampleReducer_tick>:
    mpool_free((char*)s, s->mempool);
}

Lfloat tSampleReducer_tick(tSampleReducer* const sr, Lfloat input)
{
    _tSampleReducer* s = *sr;
 800e23e:	6803      	ldr	r3, [r0, #0]
    if (s->count > s->invRatio)
 800e240:	edd3 7a03 	vldr	s15, [r3, #12]
 800e244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e248:	ed93 7a01 	vldr	s14, [r3, #4]
 800e24c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e254:	dd03      	ble.n	800e25e <tSampleReducer_tick+0x20>
    {
        s->hold = input;
 800e256:	ed83 0a02 	vstr	s0, [r3, #8]
        s->count = 0;
 800e25a:	2200      	movs	r2, #0
 800e25c:	60da      	str	r2, [r3, #12]
    }
    
    s->count++;
 800e25e:	68da      	ldr	r2, [r3, #12]
 800e260:	3201      	adds	r2, #1
 800e262:	60da      	str	r2, [r3, #12]
    return s->hold;
}
 800e264:	ed93 0a02 	vldr	s0, [r3, #8]
 800e268:	4770      	bx	lr

0800e26a <tSampleReducer_setRatio>:


void tSampleReducer_setRatio(tSampleReducer* const sr, Lfloat ratio)
{
    _tSampleReducer* s = *sr;
 800e26a:	6803      	ldr	r3, [r0, #0]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 800e26c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e270:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e278:	d900      	bls.n	800e27c <tSampleReducer_setRatio+0x12>
        s->invRatio = 1.0f / ratio;
    
}
 800e27a:	4770      	bx	lr
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 800e27c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e284:	dbf9      	blt.n	800e27a <tSampleReducer_setRatio+0x10>
        s->invRatio = 1.0f / ratio;
 800e286:	eeb0 7a67 	vmov.f32	s14, s15
 800e28a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e28e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800e292:	e7f2      	b.n	800e27a <tSampleReducer_setRatio+0x10>

0800e294 <tCrusher_initToPool>:
{
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
 800e294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e296:	4606      	mov	r6, r0
 800e298:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 800e29a:	680f      	ldr	r7, [r1, #0]
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 800e29c:	4639      	mov	r1, r7
 800e29e:	2020      	movs	r0, #32
 800e2a0:	f003 fffa 	bl	8012298 <mpool_alloc>
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 800e2a8:	6007      	str	r7, [r0, #0]
    
    c->op = 4;
 800e2aa:	2304      	movs	r3, #4
 800e2ac:	6143      	str	r3, [r0, #20]
    c->div = 1.0f / SCALAR;
 800e2ae:	4b0d      	ldr	r3, [pc, #52]	; (800e2e4 <tCrusher_initToPool+0x50>)
 800e2b0:	60c3      	str	r3, [r0, #12]
    c->rnd = 0.25f;
 800e2b2:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800e2b6:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
 800e2b8:	6043      	str	r3, [r0, #4]
    tSampleReducer_initToPool(&c->sReducer, mp);
 800e2ba:	4629      	mov	r1, r5
 800e2bc:	301c      	adds	r0, #28
 800e2be:	f7ff ffad 	bl	800e21c <tSampleReducer_initToPool>
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 800e2c2:	edd4 6a03 	vldr	s13, [r4, #12]
 800e2c6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800e2e8 <tCrusher_initToPool+0x54>
 800e2ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e2ce:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800e2ec <tCrusher_initToPool+0x58>
 800e2d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e2d6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800e2f0 <tCrusher_initToPool+0x5c>
 800e2da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2de:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800e2e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2e4:	3951b717 	.word	0x3951b717
 800e2e8:	459c4000 	.word	0x459c4000
 800e2ec:	3f333333 	.word	0x3f333333
 800e2f0:	3e99999a 	.word	0x3e99999a

0800e2f4 <tCrusher_init>:
{
 800e2f4:	b508      	push	{r3, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
 800e2f6:	3118      	adds	r1, #24
 800e2f8:	f7ff ffcc 	bl	800e294 <tCrusher_initToPool>
}
 800e2fc:	bd08      	pop	{r3, pc}
	...

0800e300 <tCrusher_tick>:
    tSampleReducer_free(&c->sReducer);
    mpool_free((char*)c, c->mempool);
}

Lfloat tCrusher_tick (tCrusher* const cr, Lfloat input)
{
 800e300:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
 800e302:	6804      	ldr	r4, [r0, #0]
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 800e304:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e350 <tCrusher_tick+0x50>
 800e308:	ee20 0a27 	vmul.f32	s0, s0, s15
    
    sample = (int32_t) sample;
 800e30c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e310:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample *= c->div;
 800e314:	edd4 7a03 	vldr	s15, [r4, #12]
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 800e318:	6960      	ldr	r0, [r4, #20]
 800e31a:	05c0      	lsls	r0, r0, #23
 800e31c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e320:	f003 fc60 	bl	8011be4 <LEAF_bitwise_xor>
 800e324:	eef0 0a40 	vmov.f32	s1, s0
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 800e328:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800e32c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e330:	f003 fc5e 	bl	8011bf0 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 800e334:	edd4 0a04 	vldr	s1, [r4, #16]
 800e338:	f003 fc3e 	bl	8011bb8 <LEAF_round>
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
 800e33c:	f104 001c 	add.w	r0, r4, #28
 800e340:	f7ff ff7d 	bl	800e23e <tSampleReducer_tick>
    
    return sample * c->gain;
 800e344:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 800e348:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e34c:	bd10      	pop	{r4, pc}
 800e34e:	bf00      	nop
 800e350:	459c4000 	.word	0x459c4000

0800e354 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
 800e354:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
 800e356:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800e35a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e35e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800e362:	ed83 0a05 	vstr	s0, [r3, #20]
}
 800e366:	4770      	bx	lr

0800e368 <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
 800e368:	b510      	push	{r4, lr}
 800e36a:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
 800e36e:	6804      	ldr	r4, [r0, #0]
    
    val = LEAF_clip(0.0f, val, 1.0f);
 800e370:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800e374:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800e3b0 <tCrusher_setQuality+0x48>
 800e378:	f003 fc3a 	bl	8011bf0 <LEAF_clip>
    
    c->div = 0.01f + val * SCALAR;
 800e37c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e3b4 <tCrusher_setQuality+0x4c>
 800e380:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e384:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800e3b8 <tCrusher_setQuality+0x50>
 800e388:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e38c:	ed84 0a03 	vstr	s0, [r4, #12]
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 800e390:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800e3bc <tCrusher_setQuality+0x54>
 800e394:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e398:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e3c0 <tCrusher_setQuality+0x58>
 800e39c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e3a0:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e3c4 <tCrusher_setQuality+0x5c>
 800e3a4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e3a8:	ed84 0a06 	vstr	s0, [r4, #24]
}
 800e3ac:	bd10      	pop	{r4, pc}
 800e3ae:	bf00      	nop
 800e3b0:	00000000 	.word	0x00000000
 800e3b4:	459c4000 	.word	0x459c4000
 800e3b8:	3c23d70a 	.word	0x3c23d70a
 800e3bc:	3951b717 	.word	0x3951b717
 800e3c0:	3f333333 	.word	0x3f333333
 800e3c4:	3e99999a 	.word	0x3e99999a

0800e3c8 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
 800e3c8:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
 800e3ca:	ed83 0a04 	vstr	s0, [r3, #16]
}
 800e3ce:	4770      	bx	lr

0800e3d0 <tCrusher_setSamplingRatio>:

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
 800e3d0:	b508      	push	{r3, lr}
    _tCrusher* c = *cr;
 800e3d2:	6800      	ldr	r0, [r0, #0]
    c->srr = ratio;
 800e3d4:	ed80 0a01 	vstr	s0, [r0, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
 800e3d8:	301c      	adds	r0, #28
 800e3da:	f7ff ff46 	bl	800e26a <tSampleReducer_setRatio>
}
 800e3de:	bd08      	pop	{r3, pc}

0800e3e0 <tCompressor_initToPool>:
{
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
 800e3e0:	b570      	push	{r4, r5, r6, lr}
 800e3e2:	ed2d 8b02 	vpush	{d8}
 800e3e6:	4606      	mov	r6, r0
    _tMempool* m = *mp;
 800e3e8:	680d      	ldr	r5, [r1, #0]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 800e3ea:	4629      	mov	r1, r5
 800e3ec:	206c      	movs	r0, #108	; 0x6c
 800e3ee:	f003 ff53 	bl	8012298 <mpool_alloc>
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 800e3f6:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 800e3f8:	686b      	ldr	r3, [r5, #4]
    c->sampleRate = leaf->sampleRate;
 800e3fa:	ed93 8a00 	vldr	s16, [r3]
 800e3fe:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 800e402:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800e468 <tCompressor_initToPool+0x88>
 800e406:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e40a:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 800e40e:	ee88 0a80 	vdiv.f32	s0, s17, s0
 800e412:	f008 fb35 	bl	8016a80 <expf>
 800e416:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 800e41a:	eddf 7a14 	vldr	s15, [pc, #80]	; 800e46c <tCompressor_initToPool+0x8c>
 800e41e:	ee28 0a27 	vmul.f32	s0, s16, s15
 800e422:	ee88 0a80 	vdiv.f32	s0, s17, s0
 800e426:	f008 fb2b 	bl	8016a80 <expf>
 800e42a:	ed84 0a02 	vstr	s0, [r4, #8]
    
    c->isActive = 0;
 800e42e:	2300      	movs	r3, #0
 800e430:	6463      	str	r3, [r4, #68]	; 0x44
    c->x_G[0] = 0.0f;
 800e432:	2300      	movs	r3, #0
 800e434:	6263      	str	r3, [r4, #36]	; 0x24
    c->x_G[1] = 0.0f;
 800e436:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f;
 800e438:	62e3      	str	r3, [r4, #44]	; 0x2c
    c->y_G[1] = 0.0f;
 800e43a:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f;
 800e43c:	6363      	str	r3, [r4, #52]	; 0x34
    c->x_T[1] = 0.0f;
 800e43e:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f;
 800e440:	63e3      	str	r3, [r4, #60]	; 0x3c
    c->y_T[1] = 0.0f;
 800e442:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
 800e444:	60e3      	str	r3, [r4, #12]
    c->R = 0.5f; // compression Ratio
 800e446:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800e44a:	6123      	str	r3, [r4, #16]
    c->invR = 2.0f; //inverse of ratio
 800e44c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e450:	61e3      	str	r3, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
 800e452:	4b07      	ldr	r3, [pc, #28]	; (800e470 <tCompressor_initToPool+0x90>)
 800e454:	61a3      	str	r3, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
 800e456:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e45a:	6163      	str	r3, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
 800e45c:	4b05      	ldr	r3, [pc, #20]	; (800e474 <tCompressor_initToPool+0x94>)
 800e45e:	6223      	str	r3, [r4, #32]
    

}
 800e460:	ecbd 8b02 	vpop	{d8}
 800e464:	bd70      	pop	{r4, r5, r6, pc}
 800e466:	bf00      	nop
 800e468:	3d4ccccd 	.word	0x3d4ccccd
 800e46c:	3dcccccd 	.word	0x3dcccccd
 800e470:	40400000 	.word	0x40400000
 800e474:	3e2aaaab 	.word	0x3e2aaaab

0800e478 <tCompressor_init>:
{
 800e478:	b508      	push	{r3, lr}
    tCompressor_initToPool(comp, &leaf->mempool);
 800e47a:	3118      	adds	r1, #24
 800e47c:	f7ff ffb0 	bl	800e3e0 <tCompressor_initToPool>
}
 800e480:	bd08      	pop	{r3, pc}
	...

0800e484 <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat tCompressor_tick(tCompressor* const comp, Lfloat in)
{
 800e484:	b510      	push	{r4, lr}
 800e486:	ed2d 8b02 	vpush	{d8}
 800e48a:	eeb0 8a40 	vmov.f32	s16, s0
    _tCompressor* c = *comp;
 800e48e:	6804      	ldr	r4, [r0, #0]
    
    Lfloat slope, overshoot;
    
    Lfloat in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
 800e490:	f003 fa54 	bl	801193c <fastabsf>
 800e494:	f003 fe6c 	bl	8012170 <fasteratodb>
 800e498:	eef0 0a40 	vmov.f32	s1, s0
 800e49c:	ed9f 1a39 	vldr	s2, [pc, #228]	; 800e584 <tCompressor_tick+0x100>
 800e4a0:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800e588 <tCompressor_tick+0x104>
 800e4a4:	f003 fba4 	bl	8011bf0 <LEAF_clip>
    Lfloat out_db = 0.0f;
    
    c->y_T[1] = c->y_T[0];
 800e4a8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800e4ac:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    
    slope = 1.0f - c->invR; // feed-forward topology;
 800e4b0:	edd4 6a07 	vldr	s13, [r4, #28]
 800e4b4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e4b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
    
    overshoot = in_db - c->T;
 800e4bc:	edd4 6a03 	vldr	s13, [r4, #12]
 800e4c0:	ee70 6a66 	vsub.f32	s13, s0, s13
    

    if (overshoot <= -(c->W))
 800e4c4:	ed94 6a05 	vldr	s12, [r4, #20]
 800e4c8:	eef1 5a46 	vneg.f32	s11, s12
 800e4cc:	eef4 5ae6 	vcmpe.f32	s11, s13
 800e4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d4:	db27      	blt.n	800e526 <tCompressor_tick+0xa2>
    {
        out_db = in_db;
        c->isActive = 0;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db;
 800e4da:	eef0 7a40 	vmov.f32	s15, s0
    {
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
 800e4de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e4e2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
 800e4e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4ee:	d53a      	bpl.n	800e566 <tCompressor_tick+0xe2>
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 800e4f0:	ed94 6a01 	vldr	s12, [r4, #4]
 800e4f4:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e4f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e4fc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800e500:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e504:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e508:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
 800e50c:	ed94 0a06 	vldr	s0, [r4, #24]
 800e510:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 800e514:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e518:	f003 fe60 	bl	80121dc <fasterdbtoa>
    return attenuation * in;
}
 800e51c:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e520:	ecbd 8b02 	vpop	{d8}
 800e524:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 800e526:	eef4 5ae6 	vcmpe.f32	s11, s13
 800e52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e52e:	d513      	bpl.n	800e558 <tCompressor_tick+0xd4>
 800e530:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800e534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e538:	dd0e      	ble.n	800e558 <tCompressor_tick+0xd4>
        Lfloat squareit = (overshoot + c->W);
 800e53a:	ee36 6a26 	vadd.f32	s12, s12, s13
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 800e53e:	ee26 6a06 	vmul.f32	s12, s12, s12
 800e542:	edd4 6a08 	vldr	s13, [r4, #32]
 800e546:	ee26 6a26 	vmul.f32	s12, s12, s13
 800e54a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e54e:	ee76 7a00 	vadd.f32	s15, s12, s0
        c->isActive = 1;
 800e552:	2301      	movs	r3, #1
 800e554:	6463      	str	r3, [r4, #68]	; 0x44
    {
 800e556:	e7c2      	b.n	800e4de <tCompressor_tick+0x5a>
        out_db = in_db + slope * overshoot;
 800e558:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e55c:	ee77 7a80 	vadd.f32	s15, s15, s0
        c->isActive = 1;
 800e560:	2301      	movs	r3, #1
 800e562:	6463      	str	r3, [r4, #68]	; 0x44
 800e564:	e7bb      	b.n	800e4de <tCompressor_tick+0x5a>
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 800e566:	ed94 6a02 	vldr	s12, [r4, #8]
 800e56a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e56e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e572:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800e576:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e57a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e57e:	ed84 7a0f 	vstr	s14, [r4, #60]	; 0x3c
 800e582:	e7c3      	b.n	800e50c <tCompressor_tick+0x88>
 800e584:	00000000 	.word	0x00000000
 800e588:	c2b40000 	.word	0xc2b40000

0800e58c <tCompressor_setTables>:
    return attenuation * in;
}

void tCompressor_setTables(tCompressor* const comp, Lfloat* atodb, Lfloat* dbtoa, Lfloat atodbMinIn, Lfloat atodbMaxIn, Lfloat dbtoaMinIn, Lfloat dbtoaMaxIn, int atodbTableSize, int dbtoaTableSize)
{
    _tCompressor* c = *comp;
 800e58c:	6800      	ldr	r0, [r0, #0]
	c->atodbTable = atodb;
 800e58e:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTable = dbtoa;
 800e590:	6502      	str	r2, [r0, #80]	; 0x50

	c->atodbTableSizeMinus1 = atodbTableSize-1;
 800e592:	3b01      	subs	r3, #1
 800e594:	6643      	str	r3, [r0, #100]	; 0x64
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
 800e596:	9a00      	ldr	r2, [sp, #0]
 800e598:	3a01      	subs	r2, #1
 800e59a:	6682      	str	r2, [r0, #104]	; 0x68

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 800e59c:	ee70 0ac0 	vsub.f32	s1, s1, s0
 800e5a0:	ee07 3a90 	vmov	s15, r3
 800e5a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5a8:	ee87 7aa0 	vdiv.f32	s14, s15, s1
 800e5ac:	ed80 7a15 	vstr	s14, [r0, #84]	; 0x54
	c->atodbOffset = atodbMinIn * c->atodbScalar;
 800e5b0:	ee27 7a00 	vmul.f32	s14, s14, s0
 800e5b4:	ed80 7a17 	vstr	s14, [r0, #92]	; 0x5c


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 800e5b8:	ee71 1ac1 	vsub.f32	s3, s3, s2
 800e5bc:	ee07 2a90 	vmov	s15, r2
 800e5c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5c4:	ee87 7aa1 	vdiv.f32	s14, s15, s3
 800e5c8:	ed80 7a16 	vstr	s14, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
 800e5cc:	ee27 7a01 	vmul.f32	s14, s14, s2
 800e5d0:	ed80 7a18 	vstr	s14, [r0, #96]	; 0x60

}
 800e5d4:	4770      	bx	lr

0800e5d6 <tCompressor_setSampleRate>:
    c->tauRelease = fasterexpf(-1.0f/(0.001f * release * c->sampleRate));
}

void tCompressor_setSampleRate(tCompressor* const comp, Lfloat sampleRate)
{
    _tCompressor* c = *comp;
 800e5d6:	6803      	ldr	r3, [r0, #0]
    c->sampleRate = sampleRate;
 800e5d8:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
}
 800e5dc:	4770      	bx	lr

0800e5de <tFeedbackLeveler_initToPool>:
{
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
 800e5de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5e2:	ed2d 8b02 	vpush	{d8}
 800e5e6:	4681      	mov	r9, r0
 800e5e8:	ee10 8a10 	vmov	r8, s0
 800e5ec:	eeb0 8a60 	vmov.f32	s16, s1
 800e5f0:	ee11 6a10 	vmov	r6, s2
 800e5f4:	460f      	mov	r7, r1
 800e5f6:	4615      	mov	r5, r2
    _tMempool* m = *mp;
 800e5f8:	f8d2 a000 	ldr.w	sl, [r2]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800e5fc:	4651      	mov	r1, sl
 800e5fe:	2018      	movs	r0, #24
 800e600:	f003 fe4a 	bl	8012298 <mpool_alloc>
 800e604:	4604      	mov	r4, r0
 800e606:	f8c9 0000 	str.w	r0, [r9]
    p->mempool = m;
 800e60a:	f8c0 a000 	str.w	sl, [r0]
    
    p->curr=0.0f;
 800e60e:	2300      	movs	r3, #0
 800e610:	6103      	str	r3, [r0, #16]
    p->targetLevel=targetLevel;
 800e612:	f8c0 8004 	str.w	r8, [r0, #4]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800e616:	4629      	mov	r1, r5
 800e618:	eeb0 0a48 	vmov.f32	s0, s16
 800e61c:	3014      	adds	r0, #20
 800e61e:	f7ff fa37 	bl	800da90 <tPowerFollower_initToPool>
    p->mode=mode;
 800e622:	60e7      	str	r7, [r4, #12]
    p->strength=strength;
 800e624:	60a6      	str	r6, [r4, #8]
}
 800e626:	ecbd 8b02 	vpop	{d8}
 800e62a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e62e <tFeedbackLeveler_init>:
{
 800e62e:	b508      	push	{r3, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
 800e630:	3218      	adds	r2, #24
 800e632:	f7ff ffd4 	bl	800e5de <tFeedbackLeveler_initToPool>
}
 800e636:	bd08      	pop	{r3, pc}

0800e638 <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
 800e638:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
 800e63a:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
 800e63c:	f104 0014 	add.w	r0, r4, #20
 800e640:	f7ff fa40 	bl	800dac4 <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
 800e644:	6821      	ldr	r1, [r4, #0]
 800e646:	4620      	mov	r0, r4
 800e648:	f003 ff12 	bl	8012470 <mpool_free>
}
 800e64c:	bd10      	pop	{r4, pc}

0800e64e <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
 800e64e:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
 800e650:	ed83 0a02 	vstr	s0, [r3, #8]
}
 800e654:	4770      	bx	lr

0800e656 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
 800e656:	b508      	push	{r3, lr}
    _tFeedbackLeveler* p = *fb;
 800e658:	6800      	ldr	r0, [r0, #0]
    tPowerFollower_setFactor(&p->pwrFlw,factor);
 800e65a:	3014      	adds	r0, #20
 800e65c:	f7ff fa38 	bl	800dad0 <tPowerFollower_setFactor>
}
 800e660:	bd08      	pop	{r3, pc}

0800e662 <tFeedbackLeveler_setMode>:

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
 800e662:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
 800e664:	60d9      	str	r1, [r3, #12]
}
 800e666:	4770      	bx	lr

0800e668 <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
 800e668:	b510      	push	{r4, lr}
 800e66a:	ed2d 8b02 	vpush	{d8}
 800e66e:	eeb0 8a40 	vmov.f32	s16, s0
    _tFeedbackLeveler* p = *fb;
 800e672:	6804      	ldr	r4, [r0, #0]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 800e674:	f104 0014 	add.w	r0, r4, #20
 800e678:	f7ff fa48 	bl	800db0c <tPowerFollower_tick>
 800e67c:	edd4 7a01 	vldr	s15, [r4, #4]
 800e680:	ee70 7a67 	vsub.f32	s15, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 800e684:	68e3      	ldr	r3, [r4, #12]
 800e686:	b923      	cbnz	r3, 800e692 <tFeedbackLeveler_tick+0x2a>
 800e688:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e690:	d40e      	bmi.n	800e6b0 <tFeedbackLeveler_tick+0x48>
    p->curr=input*(1.0f-p->strength*levdiff);
 800e692:	ed94 7a02 	vldr	s14, [r4, #8]
 800e696:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e69a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e69e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e6a2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e6a6:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
 800e6aa:	ecbd 8b02 	vpop	{d8}
 800e6ae:	bd10      	pop	{r4, pc}
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 800e6b0:	eddf 7a01 	vldr	s15, [pc, #4]	; 800e6b8 <tFeedbackLeveler_tick+0x50>
 800e6b4:	e7ed      	b.n	800e692 <tFeedbackLeveler_tick+0x2a>
 800e6b6:	bf00      	nop
 800e6b8:	00000000 	.word	0x00000000

0800e6bc <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
 800e6bc:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
 800e6be:	ed83 0a01 	vstr	s0, [r3, #4]
}
 800e6c2:	4770      	bx	lr

0800e6c4 <tADSRT_initToPool>:
}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
 800e6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6c6:	ed2d 8b04 	vpush	{d8-d9}
 800e6ca:	4607      	mov	r7, r0
 800e6cc:	eef0 9a40 	vmov.f32	s19, s0
 800e6d0:	eeb0 9a60 	vmov.f32	s18, s1
 800e6d4:	eeb0 8a41 	vmov.f32	s16, s2
 800e6d8:	eef0 8a61 	vmov.f32	s17, s3
 800e6dc:	460d      	mov	r5, r1
 800e6de:	4614      	mov	r4, r2
    _tMempool* m = *mp;
 800e6e0:	681e      	ldr	r6, [r3, #0]
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800e6e2:	4631      	mov	r1, r6
 800e6e4:	206c      	movs	r0, #108	; 0x6c
 800e6e6:	f003 fdd7 	bl	8012298 <mpool_alloc>
 800e6ea:	6038      	str	r0, [r7, #0]
    adsr->mempool = m;
 800e6ec:	6006      	str	r6, [r0, #0]
    
    LEAF* leaf = adsr->mempool->leaf;
 800e6ee:	6873      	ldr	r3, [r6, #4]

    adsr->exp_buff = expBuffer;
 800e6f0:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 800e6f2:	6084      	str	r4, [r0, #8]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 800e6f4:	1e62      	subs	r2, r4, #1
 800e6f6:	60c2      	str	r2, [r0, #12]

    adsr->sampleRate = leaf->sampleRate;
 800e6f8:	edd3 7a00 	vldr	s15, [r3]
 800e6fc:	edc0 7a04 	vstr	s15, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800e700:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800e7b8 <tADSRT_initToPool+0xf4>
 800e704:	ee67 6a87 	vmul.f32	s13, s15, s14
 800e708:	ee07 4a90 	vmov	s15, r4
 800e70c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e710:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e714:	edc0 7a05 	vstr	s15, [r0, #20]

    if (attack < 0.0f)
 800e718:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 800e71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e720:	d43e      	bmi.n	800e7a0 <tADSRT_initToPool+0xdc>
        attack = 0.0f;

    if (decay < 0.0f)
 800e722:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800e726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e72a:	d43c      	bmi.n	800e7a6 <tADSRT_initToPool+0xe2>
        decay = 0.0f;

    if (sustain > 1.0f)
 800e72c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e730:	eeb4 8ac7 	vcmpe.f32	s16, s14
 800e734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e738:	dd01      	ble.n	800e73e <tADSRT_initToPool+0x7a>
        sustain = 1.0f;
 800e73a:	eeb0 8a47 	vmov.f32	s16, s14
    if (sustain < 0.0f)
 800e73e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e746:	d431      	bmi.n	800e7ac <tADSRT_initToPool+0xe8>
        sustain = 0.0f;

    if (release < 0.0f)
 800e748:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800e74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e750:	d42f      	bmi.n	800e7b2 <tADSRT_initToPool+0xee>
        release = 0.0f;

    adsr->next = 0.0f;
 800e752:	2200      	movs	r2, #0
 800e754:	6182      	str	r2, [r0, #24]

    adsr->whichStage = env_idle;
 800e756:	2200      	movs	r2, #0
 800e758:	63c2      	str	r2, [r0, #60]	; 0x3c

    adsr->sustain = sustain;
 800e75a:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40

    adsr->attack = attack;
 800e75e:	edc0 9a08 	vstr	s19, [r0, #32]
    adsr->decay = decay;
 800e762:	ed80 9a09 	vstr	s18, [r0, #36]	; 0x24
    adsr->release = release;
 800e766:	edc0 8a0a 	vstr	s17, [r0, #40]	; 0x28
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800e76a:	ee87 7aa9 	vdiv.f32	s14, s15, s19
 800e76e:	ed80 7a0b 	vstr	s14, [r0, #44]	; 0x2c
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800e772:	ee87 7a89 	vdiv.f32	s14, s15, s18
 800e776:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800e77a:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800e77e:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800e782:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800e786:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e78a:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38

    adsr->baseLeakFactor = 1.0f;
 800e78e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e792:	6602      	str	r2, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
 800e794:	6642      	str	r2, [r0, #100]	; 0x64
    adsr->invSampleRate = leaf->invSampleRate;
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	6683      	str	r3, [r0, #104]	; 0x68
}
 800e79a:	ecbd 8b04 	vpop	{d8-d9}
 800e79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        attack = 0.0f;
 800e7a0:	eddf 9a06 	vldr	s19, [pc, #24]	; 800e7bc <tADSRT_initToPool+0xf8>
 800e7a4:	e7bd      	b.n	800e722 <tADSRT_initToPool+0x5e>
        decay = 0.0f;
 800e7a6:	ed9f 9a05 	vldr	s18, [pc, #20]	; 800e7bc <tADSRT_initToPool+0xf8>
 800e7aa:	e7bf      	b.n	800e72c <tADSRT_initToPool+0x68>
        sustain = 0.0f;
 800e7ac:	ed9f 8a03 	vldr	s16, [pc, #12]	; 800e7bc <tADSRT_initToPool+0xf8>
 800e7b0:	e7ca      	b.n	800e748 <tADSRT_initToPool+0x84>
        release = 0.0f;
 800e7b2:	eddf 8a02 	vldr	s17, [pc, #8]	; 800e7bc <tADSRT_initToPool+0xf8>
 800e7b6:	e7cc      	b.n	800e752 <tADSRT_initToPool+0x8e>
 800e7b8:	3a83126f 	.word	0x3a83126f
 800e7bc:	00000000 	.word	0x00000000

0800e7c0 <tADSRT_init>:
{
 800e7c0:	b508      	push	{r3, lr}
    tADSRT_initToPool    (adsrenv, attack, decay, sustain, release, expBuffer, bufferSize, &leaf->mempool);
 800e7c2:	3318      	adds	r3, #24
 800e7c4:	f7ff ff7e 	bl	800e6c4 <tADSRT_initToPool>
}
 800e7c8:	bd08      	pop	{r3, pc}
	...

0800e7cc <tADSRT_setAttack>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
#else
void     tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e7cc:	6803      	ldr	r3, [r0, #0]

    if (attack < 0.0f)
 800e7ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e7d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7d6:	d408      	bmi.n	800e7ea <tADSRT_setAttack+0x1e>
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
 800e7d8:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800e7dc:	ed93 7a05 	vldr	s14, [r3, #20]
 800e7e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e7e4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800e7e8:	4770      	bx	lr
        attack = 0.01f;
 800e7ea:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e7f0 <tADSRT_setAttack+0x24>
 800e7ee:	e7f3      	b.n	800e7d8 <tADSRT_setAttack+0xc>
 800e7f0:	3c23d70a 	.word	0x3c23d70a

0800e7f4 <tADSRT_setDecay>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
#else
void     tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e7f4:	6803      	ldr	r3, [r0, #0]

    if (decay < 0.0f)
 800e7f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7fe:	d408      	bmi.n	800e812 <tADSRT_setDecay+0x1e>
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
 800e800:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800e804:	ed93 7a05 	vldr	s14, [r3, #20]
 800e808:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e80c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800e810:	4770      	bx	lr
        decay = 0.01f;
 800e812:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e818 <tADSRT_setDecay+0x24>
 800e816:	e7f3      	b.n	800e800 <tADSRT_setDecay+0xc>
 800e818:	3c23d70a 	.word	0x3c23d70a

0800e81c <tADSRT_setSustain>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
#else
void     tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e81c:	6803      	ldr	r3, [r0, #0]

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 800e81e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e822:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800e826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e82a:	dd02      	ble.n	800e832 <tADSRT_setSustain+0x16>
 800e82c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 800e830:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 800e832:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e83a:	d402      	bmi.n	800e842 <tADSRT_setSustain+0x26>
    else                     adsr->sustain = sustain;
 800e83c:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
}
 800e840:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 800e842:	2200      	movs	r2, #0
 800e844:	641a      	str	r2, [r3, #64]	; 0x40
 800e846:	4770      	bx	lr

0800e848 <tADSRT_setRelease>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
#else
void     tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e848:	6803      	ldr	r3, [r0, #0]

    if (release < 0.0f)
 800e84a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e852:	d408      	bmi.n	800e866 <tADSRT_setRelease+0x1e>
    {
        release = 0.01f;
    }
    adsr->release = release;
 800e854:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800e858:	ed93 7a05 	vldr	s14, [r3, #20]
 800e85c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800e860:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 800e864:	4770      	bx	lr
        release = 0.01f;
 800e866:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e86c <tADSRT_setRelease+0x24>
 800e86a:	e7f3      	b.n	800e854 <tADSRT_setRelease+0xc>
 800e86c:	3c23d70a 	.word	0x3c23d70a

0800e870 <tADSRT_setLeakFactor>:
#ifdef ITCMRAM
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#else
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#endif
{
 800e870:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 800e872:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
 800e874:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 800e878:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
 800e87c:	eddf 7a04 	vldr	s15, [pc, #16]	; 800e890 <tADSRT_setLeakFactor+0x20>
 800e880:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800e884:	f008 fb74 	bl	8016f70 <powf>
 800e888:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
 800e88c:	bd10      	pop	{r4, pc}
 800e88e:	bf00      	nop
 800e890:	472c4400 	.word	0x472c4400

0800e894 <tADSRT_on>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#else
void tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e894:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 800e896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e898:	b162      	cbz	r2, 800e8b4 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 800e89a:	2200      	movs	r2, #0
 800e89c:	65da      	str	r2, [r3, #92]	; 0x5c
        adsr->whichStage = env_ramp;
 800e89e:	2205      	movs	r2, #5
 800e8a0:	63da      	str	r2, [r3, #60]	; 0x3c
        adsr->rampPeak = adsr->next;
 800e8a2:	699a      	ldr	r2, [r3, #24]
 800e8a4:	649a      	str	r2, [r3, #72]	; 0x48
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
 800e8aa:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
 800e8ac:	659a      	str	r2, [r3, #88]	; 0x58
    adsr->gain = velocity;
 800e8ae:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 800e8b2:	4770      	bx	lr
        adsr->whichStage = env_attack;
 800e8b4:	2201      	movs	r2, #1
 800e8b6:	63da      	str	r2, [r3, #60]	; 0x3c
 800e8b8:	e7f5      	b.n	800e8a6 <tADSRT_on+0x12>

0800e8ba <tADSRT_off>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_off(tADSRT* const adsrenv)
#else
    void tADSRT_off(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e8ba:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 800e8bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e8be:	b11a      	cbz	r2, 800e8c8 <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 800e8c0:	2204      	movs	r2, #4
 800e8c2:	63da      	str	r2, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
 800e8c4:	699a      	ldr	r2, [r3, #24]
 800e8c6:	64da      	str	r2, [r3, #76]	; 0x4c
    }
}
 800e8c8:	4770      	bx	lr

0800e8ca <tADSRT_clear>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_clear(tADSRT* const adsrenv)
#else
	void	tADSRT_clear(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800e8ca:	6803      	ldr	r3, [r0, #0]

    adsr->whichStage = env_idle;
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	63da      	str	r2, [r3, #60]	; 0x3c
    adsr->next = 0.0f;
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	619a      	str	r2, [r3, #24]
}
 800e8d4:	4770      	bx	lr
	...

0800e8d8 <tADSRT_tick>:
#ifdef ITCMRAM
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))   tADSRT_tick(tADSRT* const adsrenv)
#else
		Lfloat  tADSRT_tick(tADSRT* const adsrenv)
#endif
{
 800e8d8:	b510      	push	{r4, lr}
 800e8da:	ed2d 8b02 	vpush	{d8}
    _tADSRT* adsr = *adsrenv;
 800e8de:	6804      	ldr	r4, [r0, #0]

    switch (adsr->whichStage)
 800e8e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e8e2:	3b01      	subs	r3, #1
 800e8e4:	2b04      	cmp	r3, #4
 800e8e6:	d81d      	bhi.n	800e924 <tADSRT_tick+0x4c>
 800e8e8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e8ec:	0093004c 	.word	0x0093004c
 800e8f0:	00fe00ed 	.word	0x00fe00ed
 800e8f4:	0005      	.short	0x0005
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 800e8f6:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 800e8fa:	ed94 7a03 	vldr	s14, [r4, #12]
 800e8fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e902:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e90a:	dd10      	ble.n	800e92e <tADSRT_tick+0x56>
            {
                adsr->whichStage = env_attack;
 800e90c:	2301      	movs	r3, #1
 800e90e:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
 800e910:	2300      	movs	r3, #0
 800e912:	61a3      	str	r3, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 800e914:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 800e918:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 800e91c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e920:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 800e924:	ed94 0a06 	vldr	s0, [r4, #24]
 800e928:	ecbd 8b02 	vpop	{d8}
 800e92c:	bd10      	pop	{r4, pc}
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 800e92e:	eefc 6ae7 	vcvt.u32.f32	s13, s15
                Lfloat LfloatPart = adsr->rampPhase - intPart;
 800e932:	eeb8 1a66 	vcvt.f32.u32	s2, s13
 800e936:	ee37 1ac1 	vsub.f32	s2, s15, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e93a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e93e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e942:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e94a:	d418      	bmi.n	800e97e <tADSRT_tick+0xa6>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800e94c:	6863      	ldr	r3, [r4, #4]
 800e94e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e952:	ee17 2a90 	vmov	r2, s15
 800e956:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e95a:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
 800e95e:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 800e962:	6863      	ldr	r3, [r4, #4]
 800e964:	ee16 2a90 	vmov	r2, s13
 800e968:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e96c:	ed93 0a00 	vldr	s0, [r3]
 800e970:	f003 fb1e 	bl	8011fb0 <LEAF_interpolation_linear>
 800e974:	ee28 8a00 	vmul.f32	s16, s16, s0
 800e978:	ed84 8a06 	vstr	s16, [r4, #24]
 800e97c:	e7ca      	b.n	800e914 <tADSRT_tick+0x3c>
                    secondValue = 0.0f;
 800e97e:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800eb70 <tADSRT_tick+0x298>
 800e982:	e7ec      	b.n	800e95e <tADSRT_tick+0x86>
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 800e984:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 800e988:	ed94 7a03 	vldr	s14, [r4, #12]
 800e98c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e990:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e998:	dd0c      	ble.n	800e9b4 <tADSRT_tick+0xdc>
                adsr->whichStage = env_decay;
 800e99a:	2302      	movs	r3, #2
 800e99c:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain;
 800e99e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e9a0:	61a3      	str	r3, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
 800e9a2:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800e9a6:	edd4 7a14 	vldr	s15, [r4, #80]	; 0x50
 800e9aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e9ae:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
            break;
 800e9b2:	e7b7      	b.n	800e924 <tADSRT_tick+0x4c>
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 800e9b4:	eefc 6ae7 	vcvt.u32.f32	s13, s15
                Lfloat LfloatPart = adsr->attackPhase - intPart;
 800e9b8:	eeb8 1a66 	vcvt.f32.u32	s2, s13
 800e9bc:	ee37 1ac1 	vsub.f32	s2, s15, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800e9c0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e9c4:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e9c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9d0:	d41c      	bmi.n	800ea0c <tADSRT_tick+0x134>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 800e9d2:	6863      	ldr	r3, [r4, #4]
 800e9d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e9d8:	ee17 2a90 	vmov	r2, s15
 800e9dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e9e0:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
 800e9e4:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
 800e9e8:	6863      	ldr	r3, [r4, #4]
 800e9ea:	ee16 2a90 	vmov	r2, s13
 800e9ee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800e9f2:	ed93 0a00 	vldr	s0, [r3]
 800e9f6:	f003 fadb 	bl	8011fb0 <LEAF_interpolation_linear>
 800e9fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e9fe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ea02:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ea06:	ed84 8a06 	vstr	s16, [r4, #24]
 800ea0a:	e7ca      	b.n	800e9a2 <tADSRT_tick+0xca>
                    secondValue = 0.0f;
 800ea0c:	eddf 0a58 	vldr	s1, [pc, #352]	; 800eb70 <tADSRT_tick+0x298>
 800ea10:	e7e8      	b.n	800e9e4 <tADSRT_tick+0x10c>
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 800ea12:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
 800ea16:	ed94 7a03 	vldr	s14, [r4, #12]
 800ea1a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ea1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ea22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea26:	dd15      	ble.n	800ea54 <tADSRT_tick+0x17c>
                adsr->whichStage = env_sustain;
 800ea28:	2303      	movs	r3, #3
 800ea2a:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
 800ea2c:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 800ea30:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 800ea34:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea38:	edc4 7a06 	vstr	s15, [r4, #24]
                adsr->sustainWithLeak = 1.0f;
 800ea3c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ea40:	61e3      	str	r3, [r4, #28]
            adsr->decayPhase += adsr->decayInc;
 800ea42:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800ea46:	edd4 7a15 	vldr	s15, [r4, #84]	; 0x54
 800ea4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ea4e:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
            break;
 800ea52:	e767      	b.n	800e924 <tADSRT_tick+0x4c>
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 800ea54:	eefc 6ae7 	vcvt.u32.f32	s13, s15
                Lfloat LfloatPart = adsr->decayPhase - intPart;
 800ea58:	eeb8 1a66 	vcvt.f32.u32	s2, s13
 800ea5c:	ee37 1ac1 	vsub.f32	s2, s15, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800ea60:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ea64:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ea68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ea6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea70:	d426      	bmi.n	800eac0 <tADSRT_tick+0x1e8>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 800ea72:	6863      	ldr	r3, [r4, #4]
 800ea74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ea78:	ee17 2a90 	vmov	r2, s15
 800ea7c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ea80:	edd3 0a00 	vldr	s1, [r3]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
 800ea84:	6863      	ldr	r3, [r4, #4]
 800ea86:	ee16 2a90 	vmov	r2, s13
 800ea8a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ea8e:	ed93 0a00 	vldr	s0, [r3]
 800ea92:	f003 fa8d 	bl	8011fb0 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 800ea96:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 800ea9a:	edd4 6a10 	vldr	s13, [r4, #64]	; 0x40
 800ea9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eaa2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800eaa6:	ee27 7a00 	vmul.f32	s14, s14, s0
 800eaaa:	ee76 6a87 	vadd.f32	s13, s13, s14
 800eaae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800eab2:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 800eab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eaba:	edc4 7a06 	vstr	s15, [r4, #24]
 800eabe:	e7c0      	b.n	800ea42 <tADSRT_tick+0x16a>
                    secondValue = 0.0f;
 800eac0:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800eb70 <tADSRT_tick+0x298>
 800eac4:	e7de      	b.n	800ea84 <tADSRT_tick+0x1ac>
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
 800eac6:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 800eaca:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
 800eace:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ead2:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 800ead6:	edd4 6a07 	vldr	s13, [r4, #28]
 800eada:	ee27 7a26 	vmul.f32	s14, s14, s13
 800eade:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eae2:	edc4 7a06 	vstr	s15, [r4, #24]
            break;
 800eae6:	e71d      	b.n	800e924 <tADSRT_tick+0x4c>
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 800eae8:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 800eaec:	ed94 7a03 	vldr	s14, [r4, #12]
 800eaf0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800eaf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eaf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eafc:	dd0c      	ble.n	800eb18 <tADSRT_tick+0x240>
                adsr->whichStage = env_idle;
 800eafe:	2300      	movs	r3, #0
 800eb00:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
 800eb02:	2300      	movs	r3, #0
 800eb04:	61a3      	str	r3, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
 800eb06:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 800eb0a:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 800eb0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eb12:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
            break;
 800eb16:	e705      	b.n	800e924 <tADSRT_tick+0x4c>
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 800eb18:	eefc 6ae7 	vcvt.u32.f32	s13, s15
                Lfloat LfloatPart = adsr->releasePhase - intPart;
 800eb1c:	eeb8 1a66 	vcvt.f32.u32	s2, s13
 800eb20:	ee37 1ac1 	vsub.f32	s2, s15, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800eb24:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800eb28:	ee77 7a86 	vadd.f32	s15, s15, s12
 800eb2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eb30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb34:	d418      	bmi.n	800eb68 <tADSRT_tick+0x290>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 800eb36:	6863      	ldr	r3, [r4, #4]
 800eb38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb3c:	ee17 2a90 	vmov	r2, s15
 800eb40:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800eb44:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
 800eb48:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 800eb4c:	6863      	ldr	r3, [r4, #4]
 800eb4e:	ee16 2a90 	vmov	r2, s13
 800eb52:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800eb56:	ed93 0a00 	vldr	s0, [r3]
 800eb5a:	f003 fa29 	bl	8011fb0 <LEAF_interpolation_linear>
 800eb5e:	ee28 8a00 	vmul.f32	s16, s16, s0
 800eb62:	ed84 8a06 	vstr	s16, [r4, #24]
 800eb66:	e7ce      	b.n	800eb06 <tADSRT_tick+0x22e>
                    secondValue = 0.0f;
 800eb68:	eddf 0a01 	vldr	s1, [pc, #4]	; 800eb70 <tADSRT_tick+0x298>
 800eb6c:	e7ec      	b.n	800eb48 <tADSRT_tick+0x270>
 800eb6e:	bf00      	nop
 800eb70:	00000000 	.word	0x00000000

0800eb74 <tADSRT_tickNoInterp>:
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_tickNoInterp(tADSRT* const adsrenv)
#else
Lfloat   tADSRT_tickNoInterp(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 800eb74:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 800eb76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb78:	3a01      	subs	r2, #1
 800eb7a:	2a04      	cmp	r2, #4
 800eb7c:	d819      	bhi.n	800ebb2 <tADSRT_tickNoInterp+0x3e>
 800eb7e:	e8df f002 	tbb	[pc, r2]
 800eb82:	552b      	.short	0x552b
 800eb84:	a592      	.short	0xa592
 800eb86:	03          	.byte	0x03
 800eb87:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 800eb88:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800eb8c:	ed93 7a03 	vldr	s14, [r3, #12]
 800eb90:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800eb94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eb98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb9c:	dd0c      	ble.n	800ebb8 <tADSRT_tickNoInterp+0x44>
            {
                adsr->whichStage = env_attack;
 800eb9e:	2201      	movs	r2, #1
 800eba0:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = 0.0f;
 800eba2:	2200      	movs	r2, #0
 800eba4:	619a      	str	r2, [r3, #24]
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 800eba6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800ebaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ebae:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 800ebb2:	ed93 0a06 	vldr	s0, [r3, #24]
 800ebb6:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 800ebb8:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800ebbc:	685a      	ldr	r2, [r3, #4]
 800ebbe:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800ebc2:	ee16 1a90 	vmov	r1, s13
 800ebc6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ebca:	edd2 6a00 	vldr	s13, [r2]
 800ebce:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ebd2:	ed83 7a06 	vstr	s14, [r3, #24]
 800ebd6:	e7e6      	b.n	800eba6 <tADSRT_tickNoInterp+0x32>
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 800ebd8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800ebdc:	ed93 7a03 	vldr	s14, [r3, #12]
 800ebe0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ebe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ebe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebec:	dd0a      	ble.n	800ec04 <tADSRT_tickNoInterp+0x90>
                adsr->whichStage = env_decay;
 800ebee:	2202      	movs	r2, #2
 800ebf0:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = adsr->gain;
 800ebf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ebf4:	619a      	str	r2, [r3, #24]
            adsr->attackPhase += adsr->attackInc;
 800ebf6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800ebfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ebfe:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 800ec02:	e7d6      	b.n	800ebb2 <tADSRT_tickNoInterp+0x3e>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 800ec04:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800ec08:	685a      	ldr	r2, [r3, #4]
 800ec0a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800ec0e:	ee16 1a90 	vmov	r1, s13
 800ec12:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ec16:	ed92 6a00 	vldr	s12, [r2]
 800ec1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ec1e:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800ec22:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ec26:	ed83 7a06 	vstr	s14, [r3, #24]
 800ec2a:	e7e4      	b.n	800ebf6 <tADSRT_tickNoInterp+0x82>
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 800ec2c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800ec30:	ed93 7a03 	vldr	s14, [r3, #12]
 800ec34:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ec38:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ec3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec40:	dd13      	ble.n	800ec6a <tADSRT_tickNoInterp+0xf6>
                adsr->whichStage = env_sustain;
 800ec42:	2203      	movs	r2, #3
 800ec44:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
 800ec46:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800ec4a:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800ec4e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ec52:	ed83 7a06 	vstr	s14, [r3, #24]
                adsr->sustainWithLeak = 1.0f;
 800ec56:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ec5a:	61da      	str	r2, [r3, #28]
            adsr->decayPhase += adsr->decayInc;
 800ec5c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800ec60:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ec64:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
 800ec68:	e7a3      	b.n	800ebb2 <tADSRT_tickNoInterp+0x3e>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 800ec6a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800ec6e:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
 800ec72:	685a      	ldr	r2, [r3, #4]
 800ec74:	eebc 6ae7 	vcvt.u32.f32	s12, s15
 800ec78:	ee16 1a10 	vmov	r1, s12
 800ec7c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ec80:	ed92 6a00 	vldr	s12, [r2]
 800ec84:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800ec88:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800ec8c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800ec90:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ec94:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ec98:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800ec9c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800eca0:	ed83 7a06 	vstr	s14, [r3, #24]
 800eca4:	e7da      	b.n	800ec5c <tADSRT_tickNoInterp+0xe8>
            adsr->sustainWithLeak *= adsr->leakFactor;
 800eca6:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800ecaa:	ed93 7a07 	vldr	s14, [r3, #28]
 800ecae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ecb2:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 800ecb6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800ecba:	edd3 6a11 	vldr	s13, [r3, #68]	; 0x44
 800ecbe:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ecc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ecc6:	edc3 7a06 	vstr	s15, [r3, #24]
            break;
 800ecca:	e772      	b.n	800ebb2 <tADSRT_tickNoInterp+0x3e>
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 800eccc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800ecd0:	ed93 7a03 	vldr	s14, [r3, #12]
 800ecd4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800ecd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ecdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ece0:	dd0a      	ble.n	800ecf8 <tADSRT_tickNoInterp+0x184>
                adsr->whichStage = env_idle;
 800ece2:	2200      	movs	r2, #0
 800ece4:	63da      	str	r2, [r3, #60]	; 0x3c
                adsr->next = 0.0f;
 800ece6:	2200      	movs	r2, #0
 800ece8:	619a      	str	r2, [r3, #24]
            adsr->releasePhase += adsr->releaseInc;
 800ecea:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800ecee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ecf2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
 800ecf6:	e75c      	b.n	800ebb2 <tADSRT_tickNoInterp+0x3e>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 800ecf8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800ecfc:	685a      	ldr	r2, [r3, #4]
 800ecfe:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 800ed02:	ee16 1a90 	vmov	r1, s13
 800ed06:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800ed0a:	edd2 6a00 	vldr	s13, [r2]
 800ed0e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ed12:	ed83 7a06 	vstr	s14, [r3, #24]
 800ed16:	e7e8      	b.n	800ecea <tADSRT_tickNoInterp+0x176>

0800ed18 <tExpSmooth_initToPool>:
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
 800ed18:	b570      	push	{r4, r5, r6, lr}
 800ed1a:	ed2d 8b02 	vpush	{d8}
 800ed1e:	4605      	mov	r5, r0
 800ed20:	ee10 4a10 	vmov	r4, s0
 800ed24:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800ed28:	680e      	ldr	r6, [r1, #0]
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800ed2a:	4631      	mov	r1, r6
 800ed2c:	2014      	movs	r0, #20
 800ed2e:	f003 fab3 	bl	8012298 <mpool_alloc>
 800ed32:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
 800ed34:	6006      	str	r6, [r0, #0]
    
    smooth->curr = val;
 800ed36:	60c4      	str	r4, [r0, #12]
    smooth->dest = val;
 800ed38:	6104      	str	r4, [r0, #16]
    if (factor < 0.0f) factor = 0.0f;
 800ed3a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ed3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed42:	d413      	bmi.n	800ed6c <tExpSmooth_initToPool+0x54>
    if (factor > 1.0f) factor = 1.0f;
 800ed44:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ed48:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ed4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed50:	dd01      	ble.n	800ed56 <tExpSmooth_initToPool+0x3e>
 800ed52:	eeb0 8a67 	vmov.f32	s16, s15
    //smooth->baseFactor = factor;
    smooth->factor = factor;
 800ed56:	ed80 8a01 	vstr	s16, [r0, #4]
    smooth->oneminusfactor = 1.0f - factor;
 800ed5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ed5e:	ee77 7ac8 	vsub.f32	s15, s15, s16
 800ed62:	edc0 7a02 	vstr	s15, [r0, #8]
    //smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
}
 800ed66:	ecbd 8b02 	vpop	{d8}
 800ed6a:	bd70      	pop	{r4, r5, r6, pc}
    if (factor < 0.0f) factor = 0.0f;
 800ed6c:	ed9f 8a01 	vldr	s16, [pc, #4]	; 800ed74 <tExpSmooth_initToPool+0x5c>
 800ed70:	e7e8      	b.n	800ed44 <tExpSmooth_initToPool+0x2c>
 800ed72:	bf00      	nop
 800ed74:	00000000 	.word	0x00000000

0800ed78 <tExpSmooth_init>:
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800ed78:	b508      	push	{r3, lr}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
 800ed7a:	3118      	adds	r1, #24
 800ed7c:	f7ff ffcc 	bl	800ed18 <tExpSmooth_initToPool>
}
 800ed80:	bd08      	pop	{r3, pc}

0800ed82 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
 800ed82:	b508      	push	{r3, lr}
    _tExpSmooth* smooth = *expsmooth;
 800ed84:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
 800ed86:	6801      	ldr	r1, [r0, #0]
 800ed88:	f003 fb72 	bl	8012470 <mpool_free>
}
 800ed8c:	bd08      	pop	{r3, pc}
	...

0800ed90 <tExpSmooth_setFactor>:

void     tExpSmooth_setFactor(tExpSmooth* const expsmooth, Lfloat factor)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
    _tExpSmooth* smooth = *expsmooth;
 800ed90:	6803      	ldr	r3, [r0, #0]
    
    if (factor < 0.0f)
 800ed92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ed96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed9a:	d409      	bmi.n	800edb0 <tExpSmooth_setFactor+0x20>
        factor = 0.0f;
    else if (factor > 1.0f) factor = 1.0f;
 800ed9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800eda0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800eda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eda8:	dd04      	ble.n	800edb4 <tExpSmooth_setFactor+0x24>
 800edaa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800edae:	e001      	b.n	800edb4 <tExpSmooth_setFactor+0x24>
        factor = 0.0f;
 800edb0:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800edc8 <tExpSmooth_setFactor+0x38>
    //smooth->baseFactor = factor;
    //smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
    smooth->factor = factor;
 800edb4:	ed83 0a01 	vstr	s0, [r3, #4]
    smooth->oneminusfactor = 1.0f - smooth->factor;
 800edb8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800edbc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800edc0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop
 800edc8:	00000000 	.word	0x00000000

0800edcc <tExpSmooth_setDest>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#else
void     tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 800edcc:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 800edce:	ed83 0a04 	vstr	s0, [r3, #16]
}
 800edd2:	4770      	bx	lr

0800edd4 <tExpSmooth_setVal>:

void     tExpSmooth_setVal(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 800edd4:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 800edd6:	ed83 0a03 	vstr	s0, [r3, #12]
}
 800edda:	4770      	bx	lr

0800eddc <tExpSmooth_setValAndDest>:

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 800eddc:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 800edde:	ed83 0a03 	vstr	s0, [r3, #12]
    smooth->dest=val;
 800ede2:	ed83 0a04 	vstr	s0, [r3, #16]
}
 800ede6:	4770      	bx	lr

0800ede8 <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 800ede8:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 800edea:	ed93 0a01 	vldr	s0, [r3, #4]
 800edee:	edd3 7a04 	vldr	s15, [r3, #16]
 800edf2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800edf6:	edd3 7a02 	vldr	s15, [r3, #8]
 800edfa:	ed93 7a03 	vldr	s14, [r3, #12]
 800edfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ee02:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ee06:	ed83 0a03 	vstr	s0, [r3, #12]
    return smooth->curr;
}
 800ee0a:	4770      	bx	lr

0800ee0c <tSlide_initToPool>:
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

//upslide and downslide are in samples
void    tSlide_initToPool    (tSlide* const sl, Lfloat upSlide, Lfloat downSlide, tMempool* const mp)
{
 800ee0c:	b538      	push	{r3, r4, r5, lr}
 800ee0e:	ed2d 8b02 	vpush	{d8}
 800ee12:	4604      	mov	r4, r0
 800ee14:	eef0 8a40 	vmov.f32	s17, s0
 800ee18:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800ee1c:	680d      	ldr	r5, [r1, #0]
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800ee1e:	4629      	mov	r1, r5
 800ee20:	201c      	movs	r0, #28
 800ee22:	f003 fa39 	bl	8012298 <mpool_alloc>
 800ee26:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 800ee28:	6005      	str	r5, [r0, #0]
    
    s->prevIn = 0.0f;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 800ee2e:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 800ee30:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 800ee32:	6183      	str	r3, [r0, #24]
    if (upSlide < 1.0f)
 800ee34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ee38:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ee3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee40:	d413      	bmi.n	800ee6a <tSlide_initToPool+0x5e>
    {
        upSlide = 1.0f;
    }

    if (downSlide < 1.0f)
 800ee42:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ee46:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ee4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee4e:	d40f      	bmi.n	800ee70 <tSlide_initToPool+0x64>
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 800ee50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ee54:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800ee58:	ed80 7a04 	vstr	s14, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 800ee5c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ee60:	ed80 7a05 	vstr	s14, [r0, #20]
}
 800ee64:	ecbd 8b02 	vpop	{d8}
 800ee68:	bd38      	pop	{r3, r4, r5, pc}
        upSlide = 1.0f;
 800ee6a:	eef0 8a67 	vmov.f32	s17, s15
 800ee6e:	e7e8      	b.n	800ee42 <tSlide_initToPool+0x36>
        downSlide = 1.0f;
 800ee70:	eeb0 8a67 	vmov.f32	s16, s15
 800ee74:	e7ec      	b.n	800ee50 <tSlide_initToPool+0x44>

0800ee76 <tSlide_free>:

void    tSlide_free  (tSlide* const sl)
{
 800ee76:	b508      	push	{r3, lr}
    _tSlide* s = *sl;
 800ee78:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)s, s->mempool);
 800ee7a:	6801      	ldr	r1, [r0, #0]
 800ee7c:	f003 faf8 	bl	8012470 <mpool_free>
}
 800ee80:	bd08      	pop	{r3, pc}

0800ee82 <tSlide_setDest>:
    s->invDownSlide = 1.0f / downSlide;
}

void tSlide_setDest(tSlide* const sl, Lfloat dest)
{
    _tSlide* s = *sl;
 800ee82:	6803      	ldr	r3, [r0, #0]
    s->dest = dest;
 800ee84:	ed83 0a06 	vstr	s0, [r3, #24]
}
 800ee88:	4770      	bx	lr

0800ee8a <tSlide_tickNoInput>:

Lfloat tSlide_tickNoInput(tSlide* const sl)
{
    _tSlide* s = *sl;
 800ee8a:	6803      	ldr	r3, [r0, #0]
    Lfloat in = s->dest;
 800ee8c:	ed93 7a06 	vldr	s14, [r3, #24]

    if (in >= s->prevOut)
 800ee90:	edd3 7a01 	vldr	s15, [r3, #4]
 800ee94:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ee98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee9c:	d810      	bhi.n	800eec0 <tSlide_tickNoInput+0x36>
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800ee9e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800eea2:	ed93 6a04 	vldr	s12, [r3, #16]
 800eea6:	ee66 6a86 	vmul.f32	s13, s13, s12
 800eeaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eeae:	edc3 7a02 	vstr	s15, [r3, #8]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 800eeb2:	ed83 7a03 	vstr	s14, [r3, #12]
    s->prevOut = s->currentOut;
 800eeb6:	ed93 0a02 	vldr	s0, [r3, #8]
 800eeba:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 800eebe:	4770      	bx	lr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 800eec0:	ee77 6a67 	vsub.f32	s13, s14, s15
 800eec4:	ed93 6a05 	vldr	s12, [r3, #20]
 800eec8:	ee66 6a86 	vmul.f32	s13, s13, s12
 800eecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eed0:	edc3 7a02 	vstr	s15, [r3, #8]
 800eed4:	e7ed      	b.n	800eeb2 <tSlide_tickNoInput+0x28>

0800eed6 <tSlide_tick>:

Lfloat tSlide_tick(tSlide* const sl, Lfloat in)
{
    _tSlide* s = *sl;
 800eed6:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 800eed8:	edd3 7a01 	vldr	s15, [r3, #4]
 800eedc:	eef4 7ac0 	vcmpe.f32	s15, s0
 800eee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eee4:	d810      	bhi.n	800ef08 <tSlide_tick+0x32>
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800eee6:	ee30 7a67 	vsub.f32	s14, s0, s15
 800eeea:	edd3 6a04 	vldr	s13, [r3, #16]
 800eeee:	ee27 7a26 	vmul.f32	s14, s14, s13
 800eef2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eef6:	edc3 7a02 	vstr	s15, [r3, #8]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 800eefa:	ed83 0a03 	vstr	s0, [r3, #12]
    s->prevOut = s->currentOut;
 800eefe:	ed93 0a02 	vldr	s0, [r3, #8]
 800ef02:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 800ef06:	4770      	bx	lr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 800ef08:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ef0c:	edd3 6a05 	vldr	s13, [r3, #20]
 800ef10:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ef14:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ef18:	edc3 7a02 	vstr	s15, [r3, #8]
 800ef1c:	e7ed      	b.n	800eefa <tSlide_tick+0x24>

0800ef1e <tAllpassSO_initToPool>:
{
    tAllpassSO_initToPool(ft, &leaf->mempool);
}

void    tAllpassSO_initToPool     (tAllpassSO* const ft, tMempool* const mp)
{
 800ef1e:	b538      	push	{r3, r4, r5, lr}
 800ef20:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 800ef22:	680d      	ldr	r5, [r1, #0]
    _tAllpassSO* f = *ft = (_tAllpassSO*) mpool_alloc(sizeof(_tAllpassSO), m);
 800ef24:	4629      	mov	r1, r5
 800ef26:	201c      	movs	r0, #28
 800ef28:	f003 f9b6 	bl	8012298 <mpool_alloc>
 800ef2c:	6020      	str	r0, [r4, #0]
    f->mempool = m;
 800ef2e:	6005      	str	r5, [r0, #0]
    
    f->prevSamp = 0.0f;
 800ef30:	2300      	movs	r3, #0
 800ef32:	6043      	str	r3, [r0, #4]
    f->prevPrevSamp = 0.0f;
 800ef34:	6083      	str	r3, [r0, #8]
    f->a1 = 0.0f;
 800ef36:	6143      	str	r3, [r0, #20]
    f->a2 = 0.0f;
 800ef38:	6183      	str	r3, [r0, #24]
}
 800ef3a:	bd38      	pop	{r3, r4, r5, pc}

0800ef3c <tAllpassSO_free>:

void    tAllpassSO_free  (tAllpassSO* const ft)
{
 800ef3c:	b508      	push	{r3, lr}
    _tAllpassSO* f = *ft;
 800ef3e:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 800ef40:	6801      	ldr	r1, [r0, #0]
 800ef42:	f003 fa95 	bl	8012470 <mpool_free>
}
 800ef46:	bd08      	pop	{r3, pc}

0800ef48 <tAllpassSO_setCoeff>:

void    tAllpassSO_setCoeff(tAllpassSO* const ft, Lfloat a1, Lfloat a2)
{
    _tAllpassSO* f = *ft;
 800ef48:	6803      	ldr	r3, [r0, #0]
    ////if (prevSum != 0.0f)
    //{
    //    ratio = fabsf(newSum / prevSum);
    //}

    f->a1 = a1;
 800ef4a:	ed83 0a05 	vstr	s0, [r3, #20]
    f->a2 = a2;
 800ef4e:	edc3 0a06 	vstr	s1, [r3, #24]
    //f->prevSamp *= ratio;
    //f->prevPrevSamp *= ratio;
}
 800ef52:	4770      	bx	lr

0800ef54 <tAllpassSO_tick>:

Lfloat   tAllpassSO_tick(tAllpassSO* const ft, Lfloat input)
{
 800ef54:	eeb0 7a40 	vmov.f32	s14, s0
    _tAllpassSO* f = *ft;
 800ef58:	6803      	ldr	r3, [r0, #0]
    f->prevPrevSamp = input + (vn * -f->a2);
    return vn;]

*/
    //DFI version
    Lfloat vn = input * f->a2 + (f->prevSamp * f->a1 + f->prevPrevSamp);
 800ef5a:	edd3 6a06 	vldr	s13, [r3, #24]
 800ef5e:	ee26 6a80 	vmul.f32	s12, s13, s0
 800ef62:	ed93 5a01 	vldr	s10, [r3, #4]
 800ef66:	edd3 7a05 	vldr	s15, [r3, #20]
 800ef6a:	ee65 5a27 	vmul.f32	s11, s10, s15
 800ef6e:	edd3 4a02 	vldr	s9, [r3, #8]
 800ef72:	ee75 5aa4 	vadd.f32	s11, s11, s9
 800ef76:	ee36 6a25 	vadd.f32	s12, s12, s11
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
 800ef7a:	edd3 5a03 	vldr	s11, [r3, #12]
 800ef7e:	ee67 7ae5 	vnmul.f32	s15, s15, s11
 800ef82:	ee77 7a86 	vadd.f32	s15, s15, s12
 800ef86:	ed93 6a04 	vldr	s12, [r3, #16]
 800ef8a:	ee66 6ac6 	vnmul.f32	s13, s13, s12
 800ef8e:	ee37 0aa6 	vadd.f32	s0, s15, s13
    f->prevPrevSamp = f->prevSamp;
 800ef92:	ed83 5a02 	vstr	s10, [r3, #8]
    f->prevSamp = input;
 800ef96:	ed83 7a01 	vstr	s14, [r3, #4]
    f->prevPrevSamp2 = f->prevSamp2;
 800ef9a:	edc3 5a04 	vstr	s11, [r3, #16]
    f->prevSamp2 = output;
 800ef9e:	ed83 0a03 	vstr	s0, [r3, #12]

    return output;


}
 800efa2:	4770      	bx	lr

0800efa4 <tThiranAllpassSOCascade_initToPool>:
{
    tThiranAllpassSOCascade_initToPool(ft, numFilts, &leaf->mempool);
}

void    tThiranAllpassSOCascade_initToPool     (tThiranAllpassSOCascade* const ft, int numFilts, tMempool* const mp)
{
 800efa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efa8:	4680      	mov	r8, r0
 800efaa:	460e      	mov	r6, r1
 800efac:	4617      	mov	r7, r2
    _tMempool* m = *mp;
 800efae:	6814      	ldr	r4, [r2, #0]
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 800efb0:	4621      	mov	r1, r4
 800efb2:	2058      	movs	r0, #88	; 0x58
 800efb4:	f003 f970 	bl	8012298 <mpool_alloc>
 800efb8:	4605      	mov	r5, r0
 800efba:	f8c8 0000 	str.w	r0, [r8]
    f->mempool = m;
 800efbe:	6004      	str	r4, [r0, #0]
    f->numFilts = numFilts;
 800efc0:	6046      	str	r6, [r0, #4]
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 800efc2:	4621      	mov	r1, r4
 800efc4:	00b0      	lsls	r0, r6, #2
 800efc6:	f003 f9df 	bl	8012388 <mpool_calloc>
 800efca:	60a8      	str	r0, [r5, #8]
    f->k1[0] = -0.00050469f;
 800efcc:	4b12      	ldr	r3, [pc, #72]	; (800f018 <tThiranAllpassSOCascade_initToPool+0x74>)
 800efce:	61eb      	str	r3, [r5, #28]
    f->k2[0] = -0.0064264f;
 800efd0:	4b12      	ldr	r3, [pc, #72]	; (800f01c <tThiranAllpassSOCascade_initToPool+0x78>)
 800efd2:	626b      	str	r3, [r5, #36]	; 0x24
    f->k3[0] = -2.8743f;
 800efd4:	4b12      	ldr	r3, [pc, #72]	; (800f020 <tThiranAllpassSOCascade_initToPool+0x7c>)
 800efd6:	62eb      	str	r3, [r5, #44]	; 0x2c
    f->C1[0] = 0.069618f;
 800efd8:	4b12      	ldr	r3, [pc, #72]	; (800f024 <tThiranAllpassSOCascade_initToPool+0x80>)
 800efda:	636b      	str	r3, [r5, #52]	; 0x34
    f->C2[0] = 2.0427f;
 800efdc:	4b12      	ldr	r3, [pc, #72]	; (800f028 <tThiranAllpassSOCascade_initToPool+0x84>)
 800efde:	63eb      	str	r3, [r5, #60]	; 0x3c
    f->k1[1] = -0.0026580f;
 800efe0:	4b12      	ldr	r3, [pc, #72]	; (800f02c <tThiranAllpassSOCascade_initToPool+0x88>)
 800efe2:	622b      	str	r3, [r5, #32]
    f->k2[1] = -0.014811f;
 800efe4:	4b12      	ldr	r3, [pc, #72]	; (800f030 <tThiranAllpassSOCascade_initToPool+0x8c>)
 800efe6:	62ab      	str	r3, [r5, #40]	; 0x28
    f->k3[1] = -2.9018f;
 800efe8:	4b12      	ldr	r3, [pc, #72]	; (800f034 <tThiranAllpassSOCascade_initToPool+0x90>)
 800efea:	632b      	str	r3, [r5, #48]	; 0x30
    f->C1[1] = 0.071089f;
 800efec:	4b12      	ldr	r3, [pc, #72]	; (800f038 <tThiranAllpassSOCascade_initToPool+0x94>)
 800efee:	63ab      	str	r3, [r5, #56]	; 0x38
    f->C2[1] = 2.1074f;
 800eff0:	4b12      	ldr	r3, [pc, #72]	; (800f03c <tThiranAllpassSOCascade_initToPool+0x98>)
 800eff2:	642b      	str	r3, [r5, #64]	; 0x40
    f->isHigh = 0;
 800eff4:	2400      	movs	r4, #0
 800eff6:	652c      	str	r4, [r5, #80]	; 0x50
    f->numFiltsMap[0] = numFilts;
 800eff8:	64ae      	str	r6, [r5, #72]	; 0x48
    f->numFiltsMap[1] = 1;
 800effa:	2301      	movs	r3, #1
 800effc:	64eb      	str	r3, [r5, #76]	; 0x4c
    f->numActiveFilters = numFilts;
 800effe:	646e      	str	r6, [r5, #68]	; 0x44
    for (int i = 0; i < numFilts; i++)
 800f000:	e006      	b.n	800f010 <tThiranAllpassSOCascade_initToPool+0x6c>
    {
        tAllpassSO_initToPool(&f->filters[i], mp);
 800f002:	68a8      	ldr	r0, [r5, #8]
 800f004:	4639      	mov	r1, r7
 800f006:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800f00a:	f7ff ff88 	bl	800ef1e <tAllpassSO_initToPool>
    for (int i = 0; i < numFilts; i++)
 800f00e:	3401      	adds	r4, #1
 800f010:	42b4      	cmp	r4, r6
 800f012:	dbf6      	blt.n	800f002 <tThiranAllpassSOCascade_initToPool+0x5e>
    }
}
 800f014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f018:	ba044d2c 	.word	0xba044d2c
 800f01c:	bbd2948d 	.word	0xbbd2948d
 800f020:	c037f488 	.word	0xc037f488
 800f024:	3d8e93e2 	.word	0x3d8e93e2
 800f028:	4002bb99 	.word	0x4002bb99
 800f02c:	bb2e31d7 	.word	0xbb2e31d7
 800f030:	bc72a9d6 	.word	0xbc72a9d6
 800f034:	c039b717 	.word	0xc039b717
 800f038:	3d91971c 	.word	0x3d91971c
 800f03c:	4006dfa4 	.word	0x4006dfa4

0800f040 <tThiranAllpassSOCascade_free>:

void    tThiranAllpassSOCascade_free  (tThiranAllpassSOCascade* const ft)
{
 800f040:	b538      	push	{r3, r4, r5, lr}
    _tThiranAllpassSOCascade* f = *ft;
 800f042:	6805      	ldr	r5, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 800f044:	2400      	movs	r4, #0
 800f046:	e005      	b.n	800f054 <tThiranAllpassSOCascade_free+0x14>
    {
        tAllpassSO_free(&f->filters[i]);
 800f048:	68a8      	ldr	r0, [r5, #8]
 800f04a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800f04e:	f7ff ff75 	bl	800ef3c <tAllpassSO_free>
    for (int i = 0; i < f->numFilts; i++)
 800f052:	3401      	adds	r4, #1
 800f054:	686b      	ldr	r3, [r5, #4]
 800f056:	42a3      	cmp	r3, r4
 800f058:	dcf6      	bgt.n	800f048 <tThiranAllpassSOCascade_free+0x8>
    }
    mpool_free((char*)f->filters, f->mempool); //do I need to free the pointers separately?
 800f05a:	6829      	ldr	r1, [r5, #0]
 800f05c:	68a8      	ldr	r0, [r5, #8]
 800f05e:	f003 fa07 	bl	8012470 <mpool_free>
    mpool_free((char*)f, f->mempool);
 800f062:	6829      	ldr	r1, [r5, #0]
 800f064:	4628      	mov	r0, r5
 800f066:	f003 fa03 	bl	8012470 <mpool_free>
}
 800f06a:	bd38      	pop	{r3, r4, r5, pc}

0800f06c <tThiranAllpassSOCascade_setCoeff>:

volatile Lfloat binTest;
float    tThiranAllpassSOCascade_setCoeff(tThiranAllpassSOCascade* const ft, Lfloat dispersionCoeff, Lfloat freq, Lfloat oversampling)
{
 800f06c:	b538      	push	{r3, r4, r5, lr}
 800f06e:	ed2d 8b08 	vpush	{d8-d11}
 800f072:	eeb0 8a60 	vmov.f32	s16, s1
 800f076:	eef0 8a41 	vmov.f32	s17, s2
    _tThiranAllpassSOCascade* f = *ft;
 800f07a:	6804      	ldr	r4, [r0, #0]

    f->B = dispersionCoeff;
 800f07c:	ed84 0a03 	vstr	s0, [r4, #12]
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 800f080:	ed9f aa67 	vldr	s20, [pc, #412]	; 800f220 <tThiranAllpassSOCascade_setCoeff+0x1b4>
 800f084:	ee20 0a8a 	vmul.f32	s0, s1, s20
 800f088:	f007 fdd4 	bl	8016c34 <log2f>
 800f08c:	eef2 9a08 	vmov.f32	s19, #40	; 0x41400000  12.0
 800f090:	ee20 0a29 	vmul.f32	s0, s0, s19
 800f094:	ed9f 9a63 	vldr	s18, [pc, #396]	; 800f224 <tThiranAllpassSOCascade_setCoeff+0x1b8>
 800f098:	ee30 0a09 	vadd.f32	s0, s0, s18
 800f09c:	ed84 0a04 	vstr	s0, [r4, #16]
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
 800f0a0:	ee28 0a28 	vmul.f32	s0, s16, s17
 800f0a4:	ee20 0a0a 	vmul.f32	s0, s0, s20
 800f0a8:	f007 fdc4 	bl	8016c34 <log2f>
 800f0ac:	ee60 7a29 	vmul.f32	s15, s0, s19
 800f0b0:	ee77 7a89 	vadd.f32	s15, s15, s18
    //f->iKey = logf((110.0f*twelfthRootOf2) / 27.5f)/ logf(twelfthRootOf2);
    //f->isHigh = freq > 400.0f;//switch to different coefficients for higher notes
    //Lfloat howHigh = LEAF_mapToZeroToOneOutput(iKey2, 16.0f, 76.0f);
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
 800f0b4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800f0b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
 800f0bc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800f0c0:	eddf 0a59 	vldr	s1, [pc, #356]	; 800f228 <tThiranAllpassSOCascade_setCoeff+0x1bc>
 800f0c4:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800f0c8:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800f22c <tThiranAllpassSOCascade_setCoeff+0x1c0>
 800f0cc:	f002 fd90 	bl	8011bf0 <LEAF_clip>
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
 800f0d0:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 800f0d4:	ee79 7ac0 	vsub.f32	s15, s19, s0

    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 800f0d8:	ed94 8a07 	vldr	s16, [r4, #28]
 800f0dc:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f0e0:	ed94 7a08 	vldr	s14, [r4, #32]
 800f0e4:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f0e8:	ee38 8a07 	vadd.f32	s16, s16, s14
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 800f0ec:	ed94 9a09 	vldr	s18, [r4, #36]	; 0x24
 800f0f0:	ee29 9a27 	vmul.f32	s18, s18, s15
 800f0f4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 800f0f8:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f0fc:	ee39 9a07 	vadd.f32	s18, s18, s14
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 800f100:	ed94 ba0b 	vldr	s22, [r4, #44]	; 0x2c
 800f104:	ee2b ba27 	vmul.f32	s22, s22, s15
 800f108:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 800f10c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f110:	ee3b ba07 	vadd.f32	s22, s22, s14
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 800f114:	edd4 8a0d 	vldr	s17, [r4, #52]	; 0x34
 800f118:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f11c:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 800f120:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f124:	ee78 8a87 	vadd.f32	s17, s17, s14
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 800f128:	edd4 aa0f 	vldr	s21, [r4, #60]	; 0x3c
 800f12c:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800f130:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 800f134:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f138:	ee7a aaa7 	vadd.f32	s21, s21, s15
    Lfloat logB = logf(f->B);
 800f13c:	ed94 0a03 	vldr	s0, [r4, #12]
 800f140:	f007 fd12 	bl	8016b68 <logf>
 800f144:	eeb0 aa40 	vmov.f32	s20, s0
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
 800f148:	ee28 8a00 	vmul.f32	s16, s16, s0
 800f14c:	ee28 8a00 	vmul.f32	s16, s16, s0
 800f150:	ee29 9a00 	vmul.f32	s18, s18, s0
 800f154:	ee38 8a09 	vadd.f32	s16, s16, s18
    Lfloat kd = fastExp3(temp);
 800f158:	ee38 0a0b 	vadd.f32	s0, s16, s22
 800f15c:	f002 fc12 	bl	8011984 <fastExp3>
 800f160:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat Cd = fastExp3((C1 * logB) + C2);
 800f164:	ee28 0a8a 	vmul.f32	s0, s17, s20
 800f168:	ee30 0a2a 	vadd.f32	s0, s0, s21
 800f16c:	f002 fc0a 	bl	8011984 <fastExp3>
    Lfloat D = fastExp3(Cd-(f->iKey*kd));
 800f170:	edd4 7a04 	vldr	s15, [r4, #16]
 800f174:	ee67 7a88 	vmul.f32	s15, s15, s16
 800f178:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f17c:	f002 fc02 	bl	8011984 <fastExp3>
 800f180:	eeb0 8a40 	vmov.f32	s16, s0
    f->D = D;
 800f184:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54

	Lfloat a_k = -2.0f;

	a_k *= (D - 2.0f);
 800f188:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f18c:	ee70 5a47 	vsub.f32	s11, s0, s14
 800f190:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
 800f194:	ee65 6aa6 	vmul.f32	s13, s11, s13
	a_k /= (D - 1.0f);
 800f198:	ee70 7a69 	vsub.f32	s15, s0, s19
 800f19c:	ee86 6aa7 	vdiv.f32	s12, s13, s15

	a_k *= (D - 1.0f);
 800f1a0:	ee27 6a86 	vmul.f32	s12, s15, s12
	a_k /= D;
 800f1a4:	eec6 6a00 	vdiv.f32	s13, s12, s0

	a_k *= D;
 800f1a8:	ee60 6a26 	vmul.f32	s13, s0, s13
	a_k /= (D + 1.0f);
 800f1ac:	ee70 9a29 	vadd.f32	s19, s0, s19
 800f1b0:	ee86 6aa9 	vdiv.f32	s12, s13, s19

	f->a[0] = a_k;
 800f1b4:	ed84 6a05 	vstr	s12, [r4, #20]

	a_k = 1.0f;

	a_k *= (D - 2.0f);
	a_k /= D;
 800f1b8:	eec5 6a80 	vdiv.f32	s13, s11, s0

	a_k *= (D - 1.0f);
 800f1bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
	a_k /= (D + 1.0f);
 800f1c0:	eec7 6aa9 	vdiv.f32	s13, s15, s19

	a_k *= D;
 800f1c4:	ee60 7a26 	vmul.f32	s15, s0, s13
	a_k /= (D + 2.0f);
 800f1c8:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f1cc:	eec7 6a87 	vdiv.f32	s13, s15, s14

	f->a[1] = a_k;
 800f1d0:	edc4 6a06 	vstr	s13, [r4, #24]

	if (f->a[0] > 0.99f)
 800f1d4:	eddf 7a16 	vldr	s15, [pc, #88]	; 800f230 <tThiranAllpassSOCascade_setCoeff+0x1c4>
 800f1d8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800f1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e0:	dd05      	ble.n	800f1ee <tThiranAllpassSOCascade_setCoeff+0x182>
	{
		f->a[0] = 0.99f;
 800f1e2:	edc4 7a05 	vstr	s15, [r4, #20]
		f->a[1] = 0.01f;
 800f1e6:	4b13      	ldr	r3, [pc, #76]	; (800f234 <tThiranAllpassSOCascade_setCoeff+0x1c8>)
 800f1e8:	61a3      	str	r3, [r4, #24]
		D = 1.0f;
 800f1ea:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	}
	//f->a[0] = LEAF_clip(0.0f, f->a[0], 1.0f);
	//f->a[1] = LEAF_clip(-1.999999f, f->a[1], 2.0f);

    for (int i = 0; i < f->numActiveFilters; i++)
 800f1ee:	2500      	movs	r5, #0
 800f1f0:	e009      	b.n	800f206 <tThiranAllpassSOCascade_setCoeff+0x19a>
    {
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
 800f1f2:	68a0      	ldr	r0, [r4, #8]
 800f1f4:	edd4 0a06 	vldr	s1, [r4, #24]
 800f1f8:	ed94 0a05 	vldr	s0, [r4, #20]
 800f1fc:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 800f200:	f7ff fea2 	bl	800ef48 <tAllpassSO_setCoeff>
    for (int i = 0; i < f->numActiveFilters; i++)
 800f204:	3501      	adds	r5, #1
 800f206:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f208:	42ab      	cmp	r3, r5
 800f20a:	dcf2      	bgt.n	800f1f2 <tThiranAllpassSOCascade_setCoeff+0x186>
        //f->filters[i]->prevSamp = 0.0f;
        //f->filters[i]->prevPrevSamp = 0.0f;
        //probably should adjust the gain of the internal state variables (prevSamp and prevPrevSamp) if the gain total of the two coefficients goes //up, since the internals of the allpass boosts gain and then attenuates it, so leaving super big values in there that won't be //attenuated enough can make it distort or nan.
    }
    return D*f->numActiveFilters;
 800f20c:	ee07 3a90 	vmov	s15, r3
 800f210:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 800f214:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f218:	ecbd 8b08 	vpop	{d8-d11}
 800f21c:	bd38      	pop	{r3, r4, r5, pc}
 800f21e:	bf00      	nop
 800f220:	3b14f209 	.word	0x3b14f209
 800f224:	42440000 	.word	0x42440000
 800f228:	3cf5c28f 	.word	0x3cf5c28f
 800f22c:	00000000 	.word	0x00000000
 800f230:	3f7d70a4 	.word	0x3f7d70a4
 800f234:	3c23d70a 	.word	0x3c23d70a

0800f238 <tThiranAllpassSOCascade_tick>:

Lfloat   tThiranAllpassSOCascade_tick(tThiranAllpassSOCascade* const ft, Lfloat input)
{
 800f238:	b538      	push	{r3, r4, r5, lr}
    _tThiranAllpassSOCascade* f = *ft;
 800f23a:	6805      	ldr	r5, [r0, #0]
    Lfloat sample = input;
    for (int i = 0; i < f->numActiveFilters; i++)
 800f23c:	2400      	movs	r4, #0
 800f23e:	e005      	b.n	800f24c <tThiranAllpassSOCascade_tick+0x14>
    {
        sample = tAllpassSO_tick(&f->filters[i], sample);
 800f240:	68a8      	ldr	r0, [r5, #8]
 800f242:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800f246:	f7ff fe85 	bl	800ef54 <tAllpassSO_tick>
    for (int i = 0; i < f->numActiveFilters; i++)
 800f24a:	3401      	adds	r4, #1
 800f24c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800f24e:	42a3      	cmp	r3, r4
 800f250:	dcf6      	bgt.n	800f240 <tThiranAllpassSOCascade_tick+0x8>
    }
    return sample;
}
 800f252:	bd38      	pop	{r3, r4, r5, pc}

0800f254 <tThiranAllpassSOCascade_clear>:

void   tThiranAllpassSOCascade_clear(tThiranAllpassSOCascade* const ft)
{
    _tThiranAllpassSOCascade* f = *ft;
 800f254:	6802      	ldr	r2, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 800f256:	2300      	movs	r3, #0
 800f258:	e009      	b.n	800f26e <tThiranAllpassSOCascade_clear+0x1a>
    {
        //tAllpassSO_setCoeff(&f->filters[i], f->a[1], f->a[2]);
        f->filters[i]->prevSamp = 0.0f;
 800f25a:	6891      	ldr	r1, [r2, #8]
 800f25c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800f260:	2100      	movs	r1, #0
 800f262:	6041      	str	r1, [r0, #4]
        f->filters[i]->prevPrevSamp = 0.0f;
 800f264:	6890      	ldr	r0, [r2, #8]
 800f266:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800f26a:	6081      	str	r1, [r0, #8]
    for (int i = 0; i < f->numFilts; i++)
 800f26c:	3301      	adds	r3, #1
 800f26e:	6851      	ldr	r1, [r2, #4]
 800f270:	4299      	cmp	r1, r3
 800f272:	dcf2      	bgt.n	800f25a <tThiranAllpassSOCascade_clear+0x6>

    }
}
 800f274:	4770      	bx	lr

0800f276 <tOnePole_free>:
    
    tOnePole_setFreq(ft, freq);
}

void    tOnePole_free   (tOnePole* const ft)
{
 800f276:	b508      	push	{r3, lr}
    _tOnePole* f = *ft;
 800f278:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
 800f27a:	6801      	ldr	r1, [r0, #0]
 800f27c:	f003 f8f8 	bl	8012470 <mpool_free>
}
 800f280:	bd08      	pop	{r3, pc}
	...

0800f284 <tOnePole_setFreq>:
    
    f->a1 = -thePole;
}

void        tOnePole_setFreq        (tOnePole* const ft, Lfloat freq)
{
 800f284:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 800f286:	6804      	ldr	r4, [r0, #0]
    
    f->freq = freq;
 800f288:	ed84 0a01 	vstr	s0, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 800f28c:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
 800f290:	ee60 0a80 	vmul.f32	s1, s1, s0
 800f294:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 800f298:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800f29c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800f2b8 <tOnePole_setFreq+0x34>
 800f2a0:	f002 fca6 	bl	8011bf0 <LEAF_clip>
 800f2a4:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
 800f2a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f2ac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f2b0:	edc4 7a05 	vstr	s15, [r4, #20]
}
 800f2b4:	bd10      	pop	{r4, pc}
 800f2b6:	bf00      	nop
 800f2b8:	00000000 	.word	0x00000000

0800f2bc <tOnePole_initToPool>:
{
 800f2bc:	b538      	push	{r3, r4, r5, lr}
 800f2be:	ed2d 8b02 	vpush	{d8}
 800f2c2:	4604      	mov	r4, r0
 800f2c4:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
 800f2c8:	680d      	ldr	r5, [r1, #0]
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 800f2ca:	4629      	mov	r1, r5
 800f2cc:	2028      	movs	r0, #40	; 0x28
 800f2ce:	f002 ffe3 	bl	8012298 <mpool_alloc>
 800f2d2:	6020      	str	r0, [r4, #0]
    f->mempool = m;
 800f2d4:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 800f2d6:	686a      	ldr	r2, [r5, #4]
    f->gain = 1.0f;
 800f2d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f2dc:	6083      	str	r3, [r0, #8]
    f->a0 = 1.0;
 800f2de:	60c3      	str	r3, [r0, #12]
    f->lastIn = 0.0f;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	61c3      	str	r3, [r0, #28]
    f->lastOut = 0.0f;
 800f2e4:	6203      	str	r3, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800f2e6:	68d3      	ldr	r3, [r2, #12]
 800f2e8:	6243      	str	r3, [r0, #36]	; 0x24
    tOnePole_setFreq(ft, freq);
 800f2ea:	eeb0 0a48 	vmov.f32	s0, s16
 800f2ee:	4620      	mov	r0, r4
 800f2f0:	f7ff ffc8 	bl	800f284 <tOnePole_setFreq>
}
 800f2f4:	ecbd 8b02 	vpop	{d8}
 800f2f8:	bd38      	pop	{r3, r4, r5, pc}

0800f2fa <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
 800f2fa:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
 800f2fc:	edd3 7a02 	vldr	s15, [r3, #8]
 800f300:	ee67 7a80 	vmul.f32	s15, s15, s0
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 800f304:	ed93 0a05 	vldr	s0, [r3, #20]
 800f308:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f30c:	ed93 7a04 	vldr	s14, [r3, #16]
 800f310:	edd3 6a08 	vldr	s13, [r3, #32]
 800f314:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f318:	ee30 0a07 	vadd.f32	s0, s0, s14
    
    f->lastIn = in;
 800f31c:	edc3 7a07 	vstr	s15, [r3, #28]
    f->lastOut = out;
 800f320:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
 800f324:	4770      	bx	lr
	...

0800f328 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
 800f328:	b510      	push	{r4, lr}
 800f32a:	ed2d 8b02 	vpush	{d8}
    _tOnePole* f = *ft;
 800f32e:	6804      	ldr	r4, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 800f330:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f334:	eec8 0a00 	vdiv.f32	s1, s16, s0
 800f338:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800f370 <tOnePole_setSampleRate+0x48>
 800f33c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f340:	edc4 0a09 	vstr	s1, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 800f344:	edd4 7a01 	vldr	s15, [r4, #4]
 800f348:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f34c:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 800f350:	eeb0 1a48 	vmov.f32	s2, s16
 800f354:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800f374 <tOnePole_setSampleRate+0x4c>
 800f358:	f002 fc4a 	bl	8011bf0 <LEAF_clip>
 800f35c:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 800f360:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f364:	ed84 8a04 	vstr	s16, [r4, #16]
}
 800f368:	ecbd 8b02 	vpop	{d8}
 800f36c:	bd10      	pop	{r4, pc}
 800f36e:	bf00      	nop
 800f370:	40c90fdb 	.word	0x40c90fdb
 800f374:	00000000 	.word	0x00000000

0800f378 <tCookOnePole_initToPool>:
{
    tCookOnePole_initToPool(ft, &leaf->mempool);
}

void    tCookOnePole_initToPool     (tCookOnePole* const ft, tMempool* const mp)
{
 800f378:	b538      	push	{r3, r4, r5, lr}
 800f37a:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 800f37c:	680c      	ldr	r4, [r1, #0]
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
 800f37e:	4621      	mov	r1, r4
 800f380:	2018      	movs	r0, #24
 800f382:	f002 ff89 	bl	8012298 <mpool_alloc>
 800f386:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800f388:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 800f38a:	6863      	ldr	r3, [r4, #4]
    
    f->poleCoeff     = 0.9f;
 800f38c:	4a04      	ldr	r2, [pc, #16]	; (800f3a0 <tCookOnePole_initToPool+0x28>)
 800f38e:	6042      	str	r2, [r0, #4]
    f->sgain         = 0.1f;
 800f390:	4a04      	ldr	r2, [pc, #16]	; (800f3a4 <tCookOnePole_initToPool+0x2c>)
 800f392:	6082      	str	r2, [r0, #8]
    f->output         = 0.0f;
 800f394:	2200      	movs	r2, #0
 800f396:	60c2      	str	r2, [r0, #12]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	6103      	str	r3, [r0, #16]
}
 800f39c:	bd38      	pop	{r3, r4, r5, pc}
 800f39e:	bf00      	nop
 800f3a0:	3f666666 	.word	0x3f666666
 800f3a4:	3dcccccd 	.word	0x3dcccccd

0800f3a8 <tCookOnePole_free>:

void    tCookOnePole_free   (tCookOnePole* const ft)
{
 800f3a8:	b508      	push	{r3, lr}
    _tCookOnePole* f = *ft;
 800f3aa:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
 800f3ac:	6801      	ldr	r1, [r0, #0]
 800f3ae:	f003 f85f 	bl	8012470 <mpool_free>
}
 800f3b2:	bd08      	pop	{r3, pc}

0800f3b4 <tCookOnePole_setPole>:


void    tCookOnePole_setPole(tCookOnePole* const ft, Lfloat aValue)
{
    _tCookOnePole* onepole = *ft;
 800f3b4:	6803      	ldr	r3, [r0, #0]
    
    onepole->poleCoeff = aValue;
 800f3b6:	ed83 0a01 	vstr	s0, [r3, #4]
      if (onepole->poleCoeff > 0.0f)                   // Normalize gain to 1.0 max
 800f3ba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c2:	dd06      	ble.n	800f3d2 <tCookOnePole_setPole+0x1e>
        onepole->sgain = (1.0f - onepole->poleCoeff);
 800f3c4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f3c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f3cc:	edc3 7a02 	vstr	s15, [r3, #8]
 800f3d0:	4770      	bx	lr
      else
        onepole->sgain = (1.0f + onepole->poleCoeff);
 800f3d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f3d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f3da:	ed83 0a02 	vstr	s0, [r3, #8]
}
 800f3de:	4770      	bx	lr

0800f3e0 <tCookOnePole_setGainAndPole>:
        onepole->sgain = ((1.0f + onepole->poleCoeff) * gain);
}

void    tCookOnePole_setGainAndPole(tCookOnePole* const ft, Lfloat gain, Lfloat pole)
{
    _tCookOnePole* onepole = *ft;
 800f3e0:	6803      	ldr	r3, [r0, #0]
    
    onepole->poleCoeff = pole;
 800f3e2:	edc3 0a01 	vstr	s1, [r3, #4]

    onepole->sgain = gain;
 800f3e6:	ed83 0a02 	vstr	s0, [r3, #8]
     
}
 800f3ea:	4770      	bx	lr

0800f3ec <tCookOnePole_tick>:
    
Lfloat   tCookOnePole_tick(tCookOnePole* const ft, Lfloat sample)
{
    _tCookOnePole* onepole = *ft;
 800f3ec:	6803      	ldr	r3, [r0, #0]
    
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
 800f3ee:	edd3 7a02 	vldr	s15, [r3, #8]
 800f3f2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f3f6:	edd3 7a01 	vldr	s15, [r3, #4]
 800f3fa:	ed93 7a03 	vldr	s14, [r3, #12]
 800f3fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f402:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f406:	ed83 0a03 	vstr	s0, [r3, #12]
    return onepole->output;
}
 800f40a:	4770      	bx	lr

0800f40c <tCookOnePole_setSampleRate>:

void tCookOnePole_setSampleRate(tCookOnePole* const ft, Lfloat sr)
{
    _tCookOnePole* f = *ft;
 800f40c:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 800f40e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f412:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f416:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800f424 <tCookOnePole_setSampleRate+0x18>
 800f41a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f41e:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800f422:	4770      	bx	lr
 800f424:	40c90fdb 	.word	0x40c90fdb

0800f428 <tSVF_initToPool>:
     * hp=1 bp=A/Q (where A is 10^(G/40) and G is gain in decibels) and lp = 1
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
 800f428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f42a:	ed2d 8b02 	vpush	{d8}
 800f42e:	4606      	mov	r6, r0
 800f430:	460f      	mov	r7, r1
 800f432:	eeb0 8a40 	vmov.f32	s16, s0
 800f436:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
 800f43a:	6815      	ldr	r5, [r2, #0]
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 800f43c:	4629      	mov	r1, r5
 800f43e:	2050      	movs	r0, #80	; 0x50
 800f440:	f002 ff2a 	bl	8012298 <mpool_alloc>
 800f444:	4604      	mov	r4, r0
 800f446:	6030      	str	r0, [r6, #0]
    svf->mempool = m;
 800f448:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 800f44a:	686e      	ldr	r6, [r5, #4]
    
    svf->sampleRate = leaf->sampleRate;
 800f44c:	6833      	ldr	r3, [r6, #0]
 800f44e:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
 800f450:	ed96 0a01 	vldr	s0, [r6, #4]
 800f454:	ed80 0a11 	vstr	s0, [r0, #68]	; 0x44
    
    svf->type = type;
 800f458:	7107      	strb	r7, [r0, #4]
    
    svf->ic1eq = 0;
 800f45a:	2500      	movs	r5, #0
 800f45c:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0;
 800f45e:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
 800f460:	edc0 8a03 	vstr	s17, [r0, #12]
    svf->cutoff = freq;
 800f464:	ed80 8a02 	vstr	s16, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 800f468:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800f524 <tSVF_initToPool+0xfc>
 800f46c:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f470:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f474:	f007 ff7c 	bl	8017370 <tanf>
 800f478:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->k = 1.0f/Q;
 800f47c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f480:	eec6 7aa8 	vdiv.f32	s15, s13, s17
 800f484:	edc4 7a08 	vstr	s15, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f488:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f48c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f494:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f498:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a2 = svf->g*svf->a1;
 800f49c:	ee60 7a07 	vmul.f32	s15, s0, s14
 800f4a0:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
 800f4a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f4a8:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    
    svf->cH = 0.0f;
 800f4ac:	6325      	str	r5, [r4, #48]	; 0x30
    svf->cB = 0.0f;
 800f4ae:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
 800f4b0:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->cL = 1.0f;
 800f4b2:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    
    if (type == SVFTypeLowpass)
 800f4b6:	2f01      	cmp	r7, #1
 800f4b8:	d00b      	beq.n	800f4d2 <tSVF_initToPool+0xaa>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 800f4ba:	2f04      	cmp	r7, #4
 800f4bc:	d809      	bhi.n	800f4d2 <tSVF_initToPool+0xaa>
 800f4be:	e8df f007 	tbb	[pc, r7]
 800f4c2:	0816      	.short	0x0816
 800f4c4:	1d03      	.short	0x1d03
 800f4c6:	25          	.byte	0x25
 800f4c7:	00          	.byte	0x00
    {
        svf->cH = 0.0f;
        svf->cB = 1.0f;
 800f4c8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f4cc:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -2.0f;
    }
    if (leaf->sampleRate > 90000)
 800f4d2:	ed96 7a00 	vldr	s14, [r6]
 800f4d6:	eddf 7a14 	vldr	s15, [pc, #80]	; 800f528 <tSVF_initToPool+0x100>
 800f4da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4e2:	dd1c      	ble.n	800f51e <tSVF_initToPool+0xf6>
    {
    	svf->table = __filterTanhTable_96000;
 800f4e4:	4b11      	ldr	r3, [pc, #68]	; (800f52c <tSVF_initToPool+0x104>)
 800f4e6:	64e3      	str	r3, [r4, #76]	; 0x4c
    }
    else
    {
    	svf->table = __filterTanhTable_48000;
    }
}
 800f4e8:	ecbd 8b02 	vpop	{d8}
 800f4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
 800f4ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f4f2:	6323      	str	r3, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 800f4f4:	4b0e      	ldr	r3, [pc, #56]	; (800f530 <tSVF_initToPool+0x108>)
 800f4f6:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cL = -1.0f;
 800f4f8:	63a3      	str	r3, [r4, #56]	; 0x38
 800f4fa:	e7ea      	b.n	800f4d2 <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 800f4fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f500:	6323      	str	r3, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 800f502:	4b0b      	ldr	r3, [pc, #44]	; (800f530 <tSVF_initToPool+0x108>)
 800f504:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
 800f506:	2300      	movs	r3, #0
 800f508:	63a3      	str	r3, [r4, #56]	; 0x38
 800f50a:	e7e2      	b.n	800f4d2 <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 800f50c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f510:	6323      	str	r3, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 800f512:	4b07      	ldr	r3, [pc, #28]	; (800f530 <tSVF_initToPool+0x108>)
 800f514:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
 800f516:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800f51a:	63a3      	str	r3, [r4, #56]	; 0x38
 800f51c:	e7d9      	b.n	800f4d2 <tSVF_initToPool+0xaa>
    	svf->table = __filterTanhTable_48000;
 800f51e:	4b05      	ldr	r3, [pc, #20]	; (800f534 <tSVF_initToPool+0x10c>)
 800f520:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 800f522:	e7e1      	b.n	800f4e8 <tSVF_initToPool+0xc0>
 800f524:	40490fdb 	.word	0x40490fdb
 800f528:	47afc800 	.word	0x47afc800
 800f52c:	0801de18 	.word	0x0801de18
 800f530:	bf800000 	.word	0xbf800000
 800f534:	08019e18 	.word	0x08019e18

0800f538 <tSVF_init>:
{
 800f538:	b508      	push	{r3, lr}
    tSVF_initToPool     (svff, type, freq, Q, &leaf->mempool);
 800f53a:	3218      	adds	r2, #24
 800f53c:	f7ff ff74 	bl	800f428 <tSVF_initToPool>
}
 800f540:	bd08      	pop	{r3, pc}

0800f542 <tSVF_free>:

void    tSVF_free   (tSVF* const svff)
{
 800f542:	b508      	push	{r3, lr}
    _tSVF* svf = *svff;
 800f544:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)svf, svf->mempool);
 800f546:	6801      	ldr	r1, [r0, #0]
 800f548:	f002 ff92 	bl	8012470 <mpool_free>
}
 800f54c:	bd08      	pop	{r3, pc}

0800f54e <tSVF_tick>:

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
 800f54e:	6803      	ldr	r3, [r0, #0]
    {
        v0 = 0.0f;
    }
#endif
    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
 800f550:	ed93 6a06 	vldr	s12, [r3, #24]
 800f554:	ee30 5a46 	vsub.f32	s10, s0, s12
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 800f558:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f55c:	edd3 5a05 	vldr	s11, [r3, #20]
 800f560:	ee27 7a25 	vmul.f32	s14, s14, s11
 800f564:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800f568:	ee67 6a85 	vmul.f32	s13, s15, s10
 800f56c:	ee37 7a26 	vadd.f32	s14, s14, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 800f570:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800f574:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f578:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 800f57c:	ee66 6a85 	vmul.f32	s13, s13, s10
 800f580:	ee77 7aa6 	vadd.f32	s15, s15, s13
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 800f584:	ee77 6a07 	vadd.f32	s13, s14, s14
 800f588:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800f58c:	edc3 6a05 	vstr	s13, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 800f590:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800f594:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800f598:	edc3 6a06 	vstr	s13, [r3, #24]
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 800f59c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800f5a0:	ee26 0a80 	vmul.f32	s0, s13, s0
 800f5a4:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 800f5a8:	ee66 6a87 	vmul.f32	s13, s13, s14
 800f5ac:	ee30 0a26 	vadd.f32	s0, s0, s13
 800f5b0:	edd3 6a08 	vldr	s13, [r3, #32]
 800f5b4:	ee26 7a87 	vmul.f32	s14, s13, s14
 800f5b8:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800f5bc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f5c0:	ee30 7a07 	vadd.f32	s14, s0, s14
 800f5c4:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
 800f5c8:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800f5cc:	ee37 0a00 	vadd.f32	s0, s14, s0
 800f5d0:	4770      	bx	lr
	...

0800f5d4 <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, Lfloat freq)
{
 800f5d4:	b510      	push	{r4, lr}
 800f5d6:	eef0 0a40 	vmov.f32	s1, s0
    _tSVF* svf = *svff;
 800f5da:	6804      	ldr	r4, [r0, #0]
    
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 800f5dc:	ed94 1a10 	vldr	s2, [r4, #64]	; 0x40
 800f5e0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f5e4:	ee21 1a27 	vmul.f32	s2, s2, s15
 800f5e8:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800f63c <tSVF_setFreq+0x68>
 800f5ec:	f002 fb00 	bl	8011bf0 <LEAF_clip>
 800f5f0:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 800f5f4:	eddf 7a12 	vldr	s15, [pc, #72]	; 800f640 <tSVF_setFreq+0x6c>
 800f5f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f5fc:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 800f600:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f604:	f007 feb4 	bl	8017370 <tanf>
 800f608:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f60c:	edd4 7a08 	vldr	s15, [r4, #32]
 800f610:	ee70 7a27 	vadd.f32	s15, s0, s15
 800f614:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f61c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f620:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f624:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a2 = svf->g * svf->a1;
 800f628:	ee60 7a07 	vmul.f32	s15, s0, s14
 800f62c:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 800f630:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f634:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
}
 800f638:	bd10      	pop	{r4, pc}
 800f63a:	bf00      	nop
 800f63c:	00000000 	.word	0x00000000
 800f640:	40490fdb 	.word	0x40490fdb

0800f644 <tSVF_setFreqFast>:

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
	_tSVF* svf = *vf;
 800f644:	6802      	ldr	r2, [r0, #0]
	svf->cutoffMIDI = cutoff;
 800f646:	ed82 0a04 	vstr	s0, [r2, #16]
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
 800f64a:	eddf 7a21 	vldr	s15, [pc, #132]	; 800f6d0 <tSVF_setFreqFast+0x8c>
 800f64e:	ee20 0a27 	vmul.f32	s0, s0, s15
    int32_t intVer = (int32_t)cutoff;
 800f652:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f656:	ee17 3a90 	vmov	r3, s15
    if (intVer > 4094)
 800f65a:	f640 71fe 	movw	r1, #4094	; 0xffe
 800f65e:	428b      	cmp	r3, r1
 800f660:	dc03      	bgt.n	800f66a <tSVF_setFreqFast+0x26>
    {
    	intVer = 4094;
    }
    if (intVer < 0)
 800f662:	2b00      	cmp	r3, #0
 800f664:	da03      	bge.n	800f66e <tSVF_setFreqFast+0x2a>
    {
    	intVer = 0;
 800f666:	2300      	movs	r3, #0
 800f668:	e001      	b.n	800f66e <tSVF_setFreqFast+0x2a>
    	intVer = 4094;
 800f66a:	f640 73fe 	movw	r3, #4094	; 0xffe
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 800f66e:	ee07 3a90 	vmov	s15, r3
 800f672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f676:	ee30 0a67 	vsub.f32	s0, s0, s15

    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 800f67a:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800f67c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800f680:	edd0 7a00 	vldr	s15, [r0]
 800f684:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f688:	ee36 7a40 	vsub.f32	s14, s12, s0
 800f68c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f690:	3301      	adds	r3, #1
 800f692:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800f696:	ed91 7a00 	vldr	s14, [r1]
 800f69a:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f69e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f6a2:	edc2 7a07 	vstr	s15, [r2, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f6a6:	ed92 7a08 	vldr	s14, [r2, #32]
 800f6aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f6ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f6b2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f6b6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800f6ba:	edc2 6a09 	vstr	s13, [r2, #36]	; 0x24
    svf->a2 = svf->g * svf->a1;
 800f6be:	ee27 7aa6 	vmul.f32	s14, s15, s13
 800f6c2:	ed82 7a0a 	vstr	s14, [r2, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 800f6c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f6ca:	edc2 7a0b 	vstr	s15, [r2, #44]	; 0x2c
}
 800f6ce:	4770      	bx	lr
 800f6d0:	41f4898d 	.word	0x41f4898d

0800f6d4 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
 800f6d4:	6803      	ldr	r3, [r0, #0]
    svf->Q = Q;
 800f6d6:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->k = 1.0f/Q;
 800f6da:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f6de:	eec6 7a00 	vdiv.f32	s15, s12, s0
 800f6e2:	edc3 7a08 	vstr	s15, [r3, #32]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 800f6e6:	ed93 7a07 	vldr	s14, [r3, #28]
 800f6ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800f6f6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800f6fa:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a2 = svf->g * svf->a1;
 800f6fe:	ee67 7a26 	vmul.f32	s15, s14, s13
 800f702:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 800f706:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f70a:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
 800f70e:	4770      	bx	lr

0800f710 <tSVF_setSampleRate>:
    }
}

void    tSVF_setSampleRate  (tSVF* const svff, Lfloat sr)
{
    _tSVF* svf = *svff;
 800f710:	6803      	ldr	r3, [r0, #0]
    svf->sampleRate = sr;
 800f712:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    svf->invSampleRate = 1.0f/svf->sampleRate;
 800f716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f71a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f71e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 800f722:	4770      	bx	lr

0800f724 <tHighpass_initToPool>:
{
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
 800f724:	b538      	push	{r3, r4, r5, lr}
 800f726:	ed2d 8b02 	vpush	{d8}
 800f72a:	4605      	mov	r5, r0
 800f72c:	eeb0 8a40 	vmov.f32	s16, s0
    _tMempool* m = *mp;
 800f730:	680c      	ldr	r4, [r1, #0]
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 800f732:	4621      	mov	r1, r4
 800f734:	2018      	movs	r0, #24
 800f736:	f002 fe27 	bl	8012388 <mpool_calloc>
 800f73a:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800f73c:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 800f73e:	6863      	ldr	r3, [r4, #4]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 800f740:	edd3 7a03 	vldr	s15, [r3, #12]
 800f744:	edc0 7a05 	vstr	s15, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800f748:	ee67 7a88 	vmul.f32	s15, s15, s16
 800f74c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f750:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f754:	edc0 7a03 	vstr	s15, [r0, #12]
    f->ys = 0.0f;
 800f758:	2300      	movs	r3, #0
 800f75a:	6083      	str	r3, [r0, #8]
    f->xs = 0.0f;
 800f75c:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 800f75e:	ed80 8a04 	vstr	s16, [r0, #16]
}
 800f762:	ecbd 8b02 	vpop	{d8}
 800f766:	bd38      	pop	{r3, r4, r5, pc}

0800f768 <tHighpass_init>:
{
 800f768:	b508      	push	{r3, lr}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
 800f76a:	3118      	adds	r1, #24
 800f76c:	f7ff ffda 	bl	800f724 <tHighpass_initToPool>
}
 800f770:	bd08      	pop	{r3, pc}

0800f772 <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
 800f772:	b508      	push	{r3, lr}
    _tHighpass* f = *ft;
 800f774:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 800f776:	6801      	ldr	r1, [r0, #0]
 800f778:	f002 fe7a 	bl	8012470 <mpool_free>
}
 800f77c:	bd08      	pop	{r3, pc}

0800f77e <tHighpass_setFreq>:

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
 800f77e:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
 800f780:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 800f784:	ed93 7a05 	vldr	s14, [r3, #20]
 800f788:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f78c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f790:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f794:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800f798:	4770      	bx	lr

0800f79a <tHighpass_tick>:
    return f->frequency;
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
 800f79a:	eeb0 7a40 	vmov.f32	s14, s0
    _tHighpass* f = *ft;
 800f79e:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 800f7a0:	edd3 7a01 	vldr	s15, [r3, #4]
 800f7a4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f7a8:	edd3 6a03 	vldr	s13, [r3, #12]
 800f7ac:	ed93 6a02 	vldr	s12, [r3, #8]
 800f7b0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f7b4:	ee37 0aa6 	vadd.f32	s0, s15, s13
 800f7b8:	ed83 0a02 	vstr	s0, [r3, #8]
    f->xs = x;
 800f7bc:	ed83 7a01 	vstr	s14, [r3, #4]
    return f->ys;
}
 800f7c0:	4770      	bx	lr
	...

0800f7c4 <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
 800f7c4:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 800f7c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f7ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f7ce:	eddf 6a07 	vldr	s13, [pc, #28]	; 800f7ec <tHighpass_setSampleRate+0x28>
 800f7d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f7d6:	edc3 7a05 	vstr	s15, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 800f7da:	edd3 6a04 	vldr	s13, [r3, #16]
 800f7de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f7e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f7e6:	ed83 7a03 	vstr	s14, [r3, #12]
}
 800f7ea:	4770      	bx	lr
 800f7ec:	40c90fdb 	.word	0x40c90fdb

0800f7f0 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
 800f7f0:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 800f7f2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800f7f6:	edd3 6a02 	vldr	s13, [r3, #8]
 800f7fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f7fe:	ee70 7a67 	vsub.f32	s15, s0, s15
 800f802:	ed93 6a03 	vldr	s12, [r3, #12]
 800f806:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f80a:	ed93 7a06 	vldr	s14, [r3, #24]
 800f80e:	ee67 7a87 	vmul.f32	s15, s15, s14
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 800f812:	ed93 7a04 	vldr	s14, [r3, #16]
 800f816:	ee67 5a27 	vmul.f32	s11, s14, s15
    yB = v1 + f->s1;
 800f81a:	ee76 6aa5 	vadd.f32	s13, s13, s11
    f->s1 = v1 + yB; // state update in 1st integrator
 800f81e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800f822:	edc3 5a02 	vstr	s11, [r3, #8]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 800f826:	ee27 7a26 	vmul.f32	s14, s14, s13
    yL = v2 + f->s2;
 800f82a:	ee36 6a07 	vadd.f32	s12, s12, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 800f82e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800f832:	ed83 7a03 	vstr	s14, [r3, #12]
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 800f836:	ed93 7a07 	vldr	s14, [r3, #28]
 800f83a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f83e:	ed93 6a08 	vldr	s12, [r3, #32]
 800f842:	ee66 6a26 	vmul.f32	s13, s12, s13
 800f846:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f84a:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 800f84e:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800f852:	ee37 0a00 	vadd.f32	s0, s14, s0
 800f856:	4770      	bx	lr

0800f858 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 800f858:	b510      	push	{r4, lr}
 800f85a:	ed2d 8b04 	vpush	{d8-d9}
    _tVZFilter* f = *vf;
 800f85e:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800f860:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 800f864:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800fab8 <tVZFilter_calcCoeffs+0x260>
 800f868:	ee28 0a80 	vmul.f32	s0, s17, s0
 800f86c:	ed94 9a12 	vldr	s18, [r4, #72]	; 0x48
 800f870:	ee20 0a09 	vmul.f32	s0, s0, s18
 800f874:	f007 fd7c 	bl	8017370 <tanf>
 800f878:	eeb0 8a40 	vmov.f32	s16, s0
 800f87c:	ed84 0a04 	vstr	s0, [r4, #16]
    
    switch( f->type )
 800f880:	7923      	ldrb	r3, [r4, #4]
 800f882:	2b0a      	cmp	r3, #10
 800f884:	d80e      	bhi.n	800f8a4 <tVZFilter_calcCoeffs+0x4c>
 800f886:	e8df f003 	tbb	[pc, r3]
 800f88a:	262d      	.short	0x262d
 800f88c:	4e473b34 	.word	0x4e473b34
 800f890:	06c4a189 	.word	0x06c4a189
 800f894:	b9          	.byte	0xb9
 800f895:	00          	.byte	0x00
    {
        case Bypass:
        {
            f->R2 = f->invG;
 800f896:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800f898:	6162      	str	r2, [r4, #20]
            f->cL = 1.0f;
 800f89a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f89e:	61e3      	str	r3, [r4, #28]
            f->cB = f->R2;
 800f8a0:	6222      	str	r2, [r4, #32]
            f->cH = 1.0f;
 800f8a2:	6263      	str	r3, [r4, #36]	; 0x24
            f->cL *= s; f->cB *= s; f->cH *= s;
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
 800f8a4:	edd4 7a05 	vldr	s15, [r4, #20]
 800f8a8:	ed94 7a04 	vldr	s14, [r4, #16]
 800f8ac:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f8b0:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800f8b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f8b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f8bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8c0:	ee27 7a07 	vmul.f32	s14, s14, s14
 800f8c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f8c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8cc:	ed84 7a06 	vstr	s14, [r4, #24]
}
 800f8d0:	ecbd 8b04 	vpop	{d8-d9}
 800f8d4:	bd10      	pop	{r4, pc}
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800f8d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f8da:	61e3      	str	r3, [r4, #28]
 800f8dc:	2300      	movs	r3, #0
 800f8de:	6223      	str	r3, [r4, #32]
 800f8e0:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f8e2:	e7df      	b.n	800f8a4 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	61e3      	str	r3, [r4, #28]
 800f8e8:	6223      	str	r3, [r4, #32]
 800f8ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f8ee:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f8f0:	e7d8      	b.n	800f8a4 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	61e3      	str	r3, [r4, #28]
 800f8f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f8fa:	6222      	str	r2, [r4, #32]
 800f8fc:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f8fe:	e7d1      	b.n	800f8a4 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800f900:	2300      	movs	r3, #0
 800f902:	61e3      	str	r3, [r4, #28]
 800f904:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800f908:	ed94 7a05 	vldr	s14, [r4, #20]
 800f90c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f910:	edc4 7a08 	vstr	s15, [r4, #32]
 800f914:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f916:	e7c5      	b.n	800f8a4 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800f918:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f91c:	61e3      	str	r3, [r4, #28]
 800f91e:	2200      	movs	r2, #0
 800f920:	6222      	str	r2, [r4, #32]
 800f922:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f924:	e7be      	b.n	800f8a4 <tVZFilter_calcCoeffs+0x4c>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800f926:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 800f92a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f92e:	ee60 0ae7 	vnmul.f32	s1, s1, s15
 800f932:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800f936:	f007 fb1b 	bl	8016f70 <powf>
 800f93a:	ee28 0a80 	vmul.f32	s0, s17, s0
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800f93e:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800fab8 <tVZFilter_calcCoeffs+0x260>
 800f942:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f946:	ee29 0a00 	vmul.f32	s0, s18, s0
 800f94a:	f007 fd11 	bl	8017370 <tanf>
            Lfloat r  = f->g/wl;
 800f94e:	eec8 7a00 	vdiv.f32	s15, s16, s0
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800f952:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800f956:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f95a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800f95e:	ee37 7a28 	vadd.f32	s14, s14, s17
 800f962:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f966:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800f96a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f96e:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 800f972:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800f976:	ee68 7a27 	vmul.f32	s15, s16, s15
 800f97a:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800f97e:	f007 fccb 	bl	8017318 <sqrtf>
 800f982:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f986:	ed84 0a05 	vstr	s0, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f98a:	edc4 8a07 	vstr	s17, [r4, #28]
 800f98e:	ee28 8a00 	vmul.f32	s16, s16, s0
 800f992:	ed84 8a08 	vstr	s16, [r4, #32]
 800f996:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            break;
 800f99a:	e783      	b.n	800f8a4 <tVZFilter_calcCoeffs+0x4c>
            Lfloat A = sqrtf(f->G);
 800f99c:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
 800f9a0:	eeb0 0a68 	vmov.f32	s0, s17
 800f9a4:	f007 fcb8 	bl	8017318 <sqrtf>
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f9a8:	f007 fcb6 	bl	8017318 <sqrtf>
 800f9ac:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800f9b0:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 800f9b4:	edc4 8a07 	vstr	s17, [r4, #28]
 800f9b8:	edd4 7a05 	vldr	s15, [r4, #20]
 800f9bc:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f9c0:	edc4 8a08 	vstr	s17, [r4, #32]
 800f9c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f9c8:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800f9ca:	e76b      	b.n	800f8a4 <tVZFilter_calcCoeffs+0x4c>
            Lfloat A = sqrtf(f->G);
 800f9cc:	edd4 8a0b 	vldr	s17, [r4, #44]	; 0x2c
 800f9d0:	eeb0 0a68 	vmov.f32	s0, s17
 800f9d4:	f007 fca0 	bl	8017318 <sqrtf>
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800f9d8:	f007 fc9e 	bl	8017318 <sqrtf>
 800f9dc:	ee28 8a00 	vmul.f32	s16, s16, s0
 800f9e0:	ed84 8a04 	vstr	s16, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800f9e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800f9e8:	61e3      	str	r3, [r4, #28]
 800f9ea:	edd4 7a05 	vldr	s15, [r4, #20]
 800f9ee:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800f9f2:	edc4 7a08 	vstr	s15, [r4, #32]
 800f9f6:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            break;
 800f9fa:	e753      	b.n	800f8a4 <tVZFilter_calcCoeffs+0x4c>
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800f9fc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fa00:	61e3      	str	r3, [r4, #28]
 800fa02:	edd4 7a05 	vldr	s15, [r4, #20]
 800fa06:	eef1 7a67 	vneg.f32	s15, s15
 800fa0a:	edc4 7a08 	vstr	s15, [r4, #32]
 800fa0e:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800fa10:	e748      	b.n	800f8a4 <tVZFilter_calcCoeffs+0x4c>
            Lfloat x  = (2.0f*f->m-1.0f);
 800fa12:	ed94 8a0f 	vldr	s16, [r4, #60]	; 0x3c
 800fa16:	ee38 8a08 	vadd.f32	s16, s16, s16
 800fa1a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800fa1e:	ee38 8a68 	vsub.f32	s16, s16, s17
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800fa22:	ed9f 9a26 	vldr	s18, [pc, #152]	; 800fabc <tVZFilter_calcCoeffs+0x264>
 800fa26:	eef0 0a49 	vmov.f32	s1, s18
 800fa2a:	eeb1 0a48 	vneg.f32	s0, s16
 800fa2e:	f002 fbf7 	bl	8012220 <maximum>
 800fa32:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800fa36:	eef0 0a49 	vmov.f32	s1, s18
 800fa3a:	eeb0 0a48 	vmov.f32	s0, s16
 800fa3e:	f002 fbfb 	bl	8012238 <minimum>
 800fa42:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            f->cB = 1.0f-x*x;
 800fa46:	ee28 8a08 	vmul.f32	s16, s16, s16
 800fa4a:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800fa4e:	edc4 7a08 	vstr	s15, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800fa52:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 800fa56:	ed94 7a05 	vldr	s14, [r4, #20]
 800fa5a:	ee27 6a07 	vmul.f32	s12, s14, s14
 800fa5e:	edd4 6a07 	vldr	s13, [r4, #28]
 800fa62:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fa66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fa6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa6e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fa72:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fa76:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800fa7a:	ee20 0a26 	vmul.f32	s0, s0, s13
 800fa7e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fa82:	ee86 0a00 	vdiv.f32	s0, s12, s0
 800fa86:	f001 ff35 	bl	80118f4 <fastsqrtf>
 800fa8a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fa8e:	ee30 0a00 	vadd.f32	s0, s0, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 800fa92:	edd4 7a07 	vldr	s15, [r4, #28]
 800fa96:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fa9a:	edc4 7a07 	vstr	s15, [r4, #28]
 800fa9e:	edd4 7a08 	vldr	s15, [r4, #32]
 800faa2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800faa6:	edc4 7a08 	vstr	s15, [r4, #32]
 800faaa:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800faae:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fab2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
        break;
 800fab6:	e6f5      	b.n	800f8a4 <tVZFilter_calcCoeffs+0x4c>
 800fab8:	40490fdb 	.word	0x40490fdb
 800fabc:	00000000 	.word	0x00000000

0800fac0 <tVZFilter_setFreq>:
    f->B = LEAF_clip(0.0f, B, 100.0f);
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
    tVZFilter_calcCoeffs(vf);
}
void   tVZFilter_setFreq           (tVZFilter* const vf, Lfloat freq)
{
 800fac0:	b538      	push	{r3, r4, r5, lr}
 800fac2:	4604      	mov	r4, r0
 800fac4:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
 800fac8:	6805      	ldr	r5, [r0, #0]
    
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800faca:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
 800face:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fad2:	ee21 1a27 	vmul.f32	s2, s2, s15
 800fad6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800faec <tVZFilter_setFreq+0x2c>
 800fada:	f002 f889 	bl	8011bf0 <LEAF_clip>
 800fade:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
    tVZFilter_calcCoeffs(vf);
 800fae2:	4620      	mov	r0, r4
 800fae4:	f7ff feb8 	bl	800f858 <tVZFilter_calcCoeffs>
}
 800fae8:	bd38      	pop	{r3, r4, r5, pc}
 800faea:	bf00      	nop
 800faec:	00000000 	.word	0x00000000

0800faf0 <tVZFilter_setFreqFast>:

void    tVZFilter_setFreqFast     (tVZFilter* const vf, Lfloat cutoff)
{
 800faf0:	b510      	push	{r4, lr}
 800faf2:	ed2d 8b04 	vpush	{d8-d9}
	 _tVZFilter* f = *vf;
 800faf6:	6804      	ldr	r4, [r0, #0]
	 f->cutoffMIDI = cutoff;
 800faf8:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
	 cutoff *= 30.567164179104478f;
 800fafc:	eddf 7aaa 	vldr	s15, [pc, #680]	; 800fda8 <tVZFilter_setFreqFast+0x2b8>
 800fb00:	ee20 0a27 	vmul.f32	s0, s0, s15
	    int32_t intVer = (int32_t)cutoff;
 800fb04:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fb08:	ee17 3a90 	vmov	r3, s15
	    if (intVer > 4094)
 800fb0c:	f640 72fe 	movw	r2, #4094	; 0xffe
 800fb10:	4293      	cmp	r3, r2
 800fb12:	dc03      	bgt.n	800fb1c <tVZFilter_setFreqFast+0x2c>
	    {
	    	intVer = 4094;
	    }
	    if (intVer < 0)
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	da03      	bge.n	800fb20 <tVZFilter_setFreqFast+0x30>
	    {
	    	intVer = 0;
 800fb18:	2300      	movs	r3, #0
 800fb1a:	e001      	b.n	800fb20 <tVZFilter_setFreqFast+0x30>
	    	intVer = 4094;
 800fb1c:	f640 73fe 	movw	r3, #4094	; 0xffe
	    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 800fb20:	ee07 3a90 	vmov	s15, r3
 800fb24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb28:	ee30 0a67 	vsub.f32	s0, s0, s15
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 800fb2c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800fb2e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800fb32:	edd1 7a00 	vldr	s15, [r1]
 800fb36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fb3a:	ee37 7a40 	vsub.f32	s14, s14, s0
 800fb3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb42:	3301      	adds	r3, #1
 800fb44:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fb48:	ed92 7a00 	vldr	s14, [r2]
 800fb4c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800fb50:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fb54:	edc4 7a04 	vstr	s15, [r4, #16]
    
    switch( f->type )
 800fb58:	7923      	ldrb	r3, [r4, #4]
 800fb5a:	2b0a      	cmp	r3, #10
 800fb5c:	d80e      	bhi.n	800fb7c <tVZFilter_setFreqFast+0x8c>
 800fb5e:	e8df f003 	tbb	[pc, r3]
 800fb62:	262d      	.short	0x262d
 800fb64:	4e473b34 	.word	0x4e473b34
 800fb68:	06d0ab91 	.word	0x06d0ab91
 800fb6c:	c5          	.byte	0xc5
 800fb6d:	00          	.byte	0x00
    {
        case Bypass:
        {
            f->R2 = f->invG;
 800fb6e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800fb70:	6162      	str	r2, [r4, #20]
            f->cL = 1.0f;
 800fb72:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fb76:	61e3      	str	r3, [r4, #28]
            f->cB = f->R2;
 800fb78:	6222      	str	r2, [r4, #32]
            f->cH = 1.0f;
 800fb7a:	6263      	str	r3, [r4, #36]	; 0x24
            f->cL *= s; f->cB *= s; f->cH *= s;
        }
        break;

    }
    f->R2Plusg = f->R2+f->g;
 800fb7c:	edd4 7a05 	vldr	s15, [r4, #20]
 800fb80:	ed94 7a04 	vldr	s14, [r4, #16]
 800fb84:	ee77 6a87 	vadd.f32	s13, s15, s14
 800fb88:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 800fb8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb98:	ee27 7a07 	vmul.f32	s14, s14, s14
 800fb9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fba0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fba4:	ed84 7a06 	vstr	s14, [r4, #24]
}
 800fba8:	ecbd 8b04 	vpop	{d8-d9}
 800fbac:	bd10      	pop	{r4, pc}
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800fbae:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fbb2:	61e3      	str	r3, [r4, #28]
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	6223      	str	r3, [r4, #32]
 800fbb8:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800fbba:	e7df      	b.n	800fb7c <tVZFilter_setFreqFast+0x8c>
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	61e3      	str	r3, [r4, #28]
 800fbc0:	6223      	str	r3, [r4, #32]
 800fbc2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fbc6:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800fbc8:	e7d8      	b.n	800fb7c <tVZFilter_setFreqFast+0x8c>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800fbca:	2300      	movs	r3, #0
 800fbcc:	61e3      	str	r3, [r4, #28]
 800fbce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fbd2:	6222      	str	r2, [r4, #32]
 800fbd4:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800fbd6:	e7d1      	b.n	800fb7c <tVZFilter_setFreqFast+0x8c>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	61e3      	str	r3, [r4, #28]
 800fbdc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800fbe0:	ed94 7a05 	vldr	s14, [r4, #20]
 800fbe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fbe8:	edc4 7a08 	vstr	s15, [r4, #32]
 800fbec:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800fbee:	e7c5      	b.n	800fb7c <tVZFilter_setFreqFast+0x8c>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800fbf0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fbf4:	61e3      	str	r3, [r4, #28]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	6222      	str	r2, [r4, #32]
 800fbfa:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800fbfc:	e7be      	b.n	800fb7c <tVZFilter_setFreqFast+0x8c>
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800fbfe:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800fc02:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 800fc06:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800fc0a:	ee60 0ae7 	vnmul.f32	s1, s1, s15
 800fc0e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fc12:	f001 ff4b 	bl	8011aac <fastPowf>
 800fc16:	ee28 8a00 	vmul.f32	s16, s16, s0
            Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800fc1a:	eddf 7a64 	vldr	s15, [pc, #400]	; 800fdac <tVZFilter_setFreqFast+0x2bc>
 800fc1e:	ee28 8a27 	vmul.f32	s16, s16, s15
 800fc22:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
 800fc26:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fc2a:	f001 fe0b 	bl	8011844 <fastertanf>
            Lfloat r  = f->g/wl;
 800fc2e:	ed94 7a04 	vldr	s14, [r4, #16]
 800fc32:	eec7 7a00 	vdiv.f32	s15, s14, s0
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800fc36:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800fc3a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800fc3e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800fc42:	ee37 7a08 	vadd.f32	s14, s14, s16
 800fc46:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800fc4a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800fc4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fc52:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800fc56:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800fc5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fc5e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800fc62:	f001 fe47 	bl	80118f4 <fastsqrtf>
 800fc66:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fc6a:	ed84 0a05 	vstr	s0, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800fc6e:	ed84 8a07 	vstr	s16, [r4, #28]
 800fc72:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800fc76:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fc7a:	ed84 0a08 	vstr	s0, [r4, #32]
 800fc7e:	ed84 8a09 	vstr	s16, [r4, #36]	; 0x24
            break;
 800fc82:	e77b      	b.n	800fb7c <tVZFilter_setFreqFast+0x8c>
            Lfloat A = fastsqrtf(f->G);
 800fc84:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800fc88:	f001 fe34 	bl	80118f4 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800fc8c:	f001 fe32 	bl	80118f4 <fastsqrtf>
 800fc90:	ed94 7a04 	vldr	s14, [r4, #16]
 800fc94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fc98:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 800fc9c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800fca0:	edc4 7a07 	vstr	s15, [r4, #28]
 800fca4:	ed94 7a05 	vldr	s14, [r4, #20]
 800fca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fcac:	edc4 7a08 	vstr	s15, [r4, #32]
 800fcb0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fcb4:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800fcb6:	e761      	b.n	800fb7c <tVZFilter_setFreqFast+0x8c>
            Lfloat A = fastsqrtf(f->G);
 800fcb8:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 800fcbc:	f001 fe1a 	bl	80118f4 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800fcc0:	f001 fe18 	bl	80118f4 <fastsqrtf>
 800fcc4:	edd4 7a04 	vldr	s15, [r4, #16]
 800fcc8:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fccc:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 800fcd0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fcd4:	61e3      	str	r3, [r4, #28]
 800fcd6:	edd4 7a05 	vldr	s15, [r4, #20]
 800fcda:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 800fcde:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fce2:	edc4 7a08 	vstr	s15, [r4, #32]
 800fce6:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            break;
 800fcea:	e747      	b.n	800fb7c <tVZFilter_setFreqFast+0x8c>
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800fcec:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800fcf0:	61e3      	str	r3, [r4, #28]
 800fcf2:	edd4 7a05 	vldr	s15, [r4, #20]
 800fcf6:	eef1 7a67 	vneg.f32	s15, s15
 800fcfa:	edc4 7a08 	vstr	s15, [r4, #32]
 800fcfe:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800fd00:	e73c      	b.n	800fb7c <tVZFilter_setFreqFast+0x8c>
            Lfloat x  = (2.0f*f->m-1.0f);
 800fd02:	ed94 8a0f 	vldr	s16, [r4, #60]	; 0x3c
 800fd06:	ee38 8a08 	vadd.f32	s16, s16, s16
 800fd0a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800fd0e:	ee38 8a68 	vsub.f32	s16, s16, s17
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800fd12:	ed9f 9a27 	vldr	s18, [pc, #156]	; 800fdb0 <tVZFilter_setFreqFast+0x2c0>
 800fd16:	eef0 0a49 	vmov.f32	s1, s18
 800fd1a:	eeb1 0a48 	vneg.f32	s0, s16
 800fd1e:	f002 fa7f 	bl	8012220 <maximum>
 800fd22:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800fd26:	eef0 0a49 	vmov.f32	s1, s18
 800fd2a:	eeb0 0a48 	vmov.f32	s0, s16
 800fd2e:	f002 fa83 	bl	8012238 <minimum>
 800fd32:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            f->cB = 1.0f-x*x;
 800fd36:	ee28 8a08 	vmul.f32	s16, s16, s16
 800fd3a:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800fd3e:	edc4 7a08 	vstr	s15, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 800fd42:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 800fd46:	ed94 7a05 	vldr	s14, [r4, #20]
 800fd4a:	ee27 6a07 	vmul.f32	s12, s14, s14
 800fd4e:	edd4 6a07 	vldr	s13, [r4, #28]
 800fd52:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fd56:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fd5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd5e:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fd62:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd66:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800fd6a:	ee20 0a26 	vmul.f32	s0, s0, s13
 800fd6e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800fd72:	ee86 0a00 	vdiv.f32	s0, s12, s0
 800fd76:	f001 fdbd 	bl	80118f4 <fastsqrtf>
 800fd7a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fd7e:	ee30 0a00 	vadd.f32	s0, s0, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 800fd82:	edd4 7a07 	vldr	s15, [r4, #28]
 800fd86:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fd8a:	edc4 7a07 	vstr	s15, [r4, #28]
 800fd8e:	edd4 7a08 	vldr	s15, [r4, #32]
 800fd92:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fd96:	edc4 7a08 	vstr	s15, [r4, #32]
 800fd9a:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 800fd9e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fda2:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
        break;
 800fda6:	e6e9      	b.n	800fb7c <tVZFilter_setFreqFast+0x8c>
 800fda8:	41f4898d 	.word	0x41f4898d
 800fdac:	40490fdb 	.word	0x40490fdb
 800fdb0:	00000000 	.word	0x00000000

0800fdb4 <tVZFilter_setGain>:
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
    tVZFilter_calcCoeffsEfficientBP(vf);
}

void   tVZFilter_setGain                (tVZFilter* const vf, Lfloat gain)
{
 800fdb4:	b538      	push	{r3, r4, r5, lr}
 800fdb6:	4604      	mov	r4, r0
 800fdb8:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
 800fdbc:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 800fdbe:	ed9f 1a09 	vldr	s2, [pc, #36]	; 800fde4 <tVZFilter_setGain+0x30>
 800fdc2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800fde8 <tVZFilter_setGain+0x34>
 800fdc6:	f001 ff13 	bl	8011bf0 <LEAF_clip>
 800fdca:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
 800fdce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fdd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fdd6:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
    tVZFilter_calcCoeffs(vf);
 800fdda:	4620      	mov	r0, r4
 800fddc:	f7ff fd3c 	bl	800f858 <tVZFilter_calcCoeffs>
}
 800fde0:	bd38      	pop	{r3, r4, r5, pc}
 800fde2:	bf00      	nop
 800fde4:	457a0000 	.word	0x457a0000
 800fde8:	358637bd 	.word	0x358637bd

0800fdec <tVZFilter_setResonance>:


void   tVZFilter_setResonance                (tVZFilter* const vf, Lfloat res)
{
 800fdec:	b538      	push	{r3, r4, r5, lr}
 800fdee:	4604      	mov	r4, r0
 800fdf0:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
 800fdf4:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 800fdf6:	ed9f 1a09 	vldr	s2, [pc, #36]	; 800fe1c <tVZFilter_setResonance+0x30>
 800fdfa:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800fe20 <tVZFilter_setResonance+0x34>
 800fdfe:	f001 fef7 	bl	8011bf0 <LEAF_clip>
 800fe02:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 800fe06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fe0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fe0e:	edc5 7a05 	vstr	s15, [r5, #20]
    tVZFilter_calcCoeffs(vf);
 800fe12:	4620      	mov	r0, r4
 800fe14:	f7ff fd20 	bl	800f858 <tVZFilter_calcCoeffs>
}
 800fe18:	bd38      	pop	{r3, r4, r5, pc}
 800fe1a:	bf00      	nop
 800fe1c:	42c80000 	.word	0x42c80000
 800fe20:	3c23d70a 	.word	0x3c23d70a

0800fe24 <tVZFilter_setFrequencyAndResonance>:


void tVZFilter_setFrequencyAndResonance (tVZFilter* const vf, Lfloat freq, Lfloat res)
{
 800fe24:	b538      	push	{r3, r4, r5, lr}
 800fe26:	ed2d 8b02 	vpush	{d8}
 800fe2a:	4604      	mov	r4, r0
 800fe2c:	eeb0 8a60 	vmov.f32	s16, s1
    _tVZFilter* f = *vf;
 800fe30:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.1f, freq, 0.4f * f->sampleRate);
 800fe32:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
 800fe36:	eddf 7a11 	vldr	s15, [pc, #68]	; 800fe7c <tVZFilter_setFrequencyAndResonance+0x58>
 800fe3a:	ee21 1a27 	vmul.f32	s2, s2, s15
 800fe3e:	eef0 0a40 	vmov.f32	s1, s0
 800fe42:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800fe80 <tVZFilter_setFrequencyAndResonance+0x5c>
 800fe46:	f001 fed3 	bl	8011bf0 <LEAF_clip>
 800fe4a:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 800fe4e:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 800fe84 <tVZFilter_setFrequencyAndResonance+0x60>
 800fe52:	eef0 0a48 	vmov.f32	s1, s16
 800fe56:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800fe88 <tVZFilter_setFrequencyAndResonance+0x64>
 800fe5a:	f001 fec9 	bl	8011bf0 <LEAF_clip>
 800fe5e:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 800fe62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fe66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fe6a:	edc5 7a05 	vstr	s15, [r5, #20]
    tVZFilter_calcCoeffs(vf);
 800fe6e:	4620      	mov	r0, r4
 800fe70:	f7ff fcf2 	bl	800f858 <tVZFilter_calcCoeffs>
}
 800fe74:	ecbd 8b02 	vpop	{d8}
 800fe78:	bd38      	pop	{r3, r4, r5, pc}
 800fe7a:	bf00      	nop
 800fe7c:	3ecccccd 	.word	0x3ecccccd
 800fe80:	3dcccccd 	.word	0x3dcccccd
 800fe84:	42c80000 	.word	0x42c80000
 800fe88:	3c23d70a 	.word	0x3c23d70a

0800fe8c <tVZFilter_BandwidthToR>:
    f->type = type;
    tVZFilter_calcCoeffs(vf);
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
 800fe8c:	b510      	push	{r4, lr}
 800fe8e:	ed2d 8b02 	vpush	{d8}
    _tVZFilter* f = *vf;
 800fe92:	6804      	ldr	r4, [r0, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800fe94:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800fe98:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800fe9c:	ee60 0a60 	vnmul.f32	s1, s0, s1
 800fea0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800fea4:	f007 f864 	bl	8016f70 <powf>
 800fea8:	ee28 8a00 	vmul.f32	s16, s16, s0
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800feac:	eddf 7a11 	vldr	s15, [pc, #68]	; 800fef4 <tVZFilter_BandwidthToR+0x68>
 800feb0:	ee28 8a27 	vmul.f32	s16, s16, s15
 800feb4:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
 800feb8:	ee28 0a00 	vmul.f32	s0, s16, s0
 800febc:	f007 fa58 	bl	8017370 <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800fec0:	edd4 7a04 	vldr	s15, [r4, #16]
 800fec4:	ee80 7a27 	vdiv.f32	s14, s0, s15
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800fec8:	ee67 7a07 	vmul.f32	s15, s14, s14
 800fecc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800fed0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fed4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800fed8:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800fedc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fee0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fee4:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800fee8:	f007 fa16 	bl	8017318 <sqrtf>
}
 800feec:	ecbd 8b02 	vpop	{d8}
 800fef0:	bd10      	pop	{r4, pc}
 800fef2:	bf00      	nop
 800fef4:	40490fdb 	.word	0x40490fdb

0800fef8 <tVZFilter_setBandwidth>:
{
 800fef8:	b538      	push	{r3, r4, r5, lr}
 800fefa:	4604      	mov	r4, r0
 800fefc:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilter* f = *vf;
 800ff00:	6805      	ldr	r5, [r0, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 800ff02:	ed9f 1a09 	vldr	s2, [pc, #36]	; 800ff28 <tVZFilter_setBandwidth+0x30>
 800ff06:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800ff2c <tVZFilter_setBandwidth+0x34>
 800ff0a:	f001 fe71 	bl	8011bf0 <LEAF_clip>
 800ff0e:	ed85 0a0e 	vstr	s0, [r5, #56]	; 0x38
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800ff12:	4620      	mov	r0, r4
 800ff14:	f7ff ffba 	bl	800fe8c <tVZFilter_BandwidthToR>
 800ff18:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ff1c:	ed85 0a05 	vstr	s0, [r5, #20]
    tVZFilter_calcCoeffs(vf);
 800ff20:	4620      	mov	r0, r4
 800ff22:	f7ff fc99 	bl	800f858 <tVZFilter_calcCoeffs>
}
 800ff26:	bd38      	pop	{r3, r4, r5, pc}
 800ff28:	42c80000 	.word	0x42c80000
 800ff2c:	00000000 	.word	0x00000000

0800ff30 <tVZFilter_initToPool>:
{
 800ff30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff32:	ed2d 8b04 	vpush	{d8-d9}
 800ff36:	4605      	mov	r5, r0
 800ff38:	460f      	mov	r7, r1
 800ff3a:	eeb0 9a40 	vmov.f32	s18, s0
 800ff3e:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 800ff42:	6816      	ldr	r6, [r2, #0]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800ff44:	4631      	mov	r1, r6
 800ff46:	2054      	movs	r0, #84	; 0x54
 800ff48:	f002 f9a6 	bl	8012298 <mpool_alloc>
 800ff4c:	4604      	mov	r4, r0
 800ff4e:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800ff50:	6006      	str	r6, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 800ff52:	6876      	ldr	r6, [r6, #4]
    f->sampleRate = leaf->sampleRate;
 800ff54:	ed96 1a00 	vldr	s2, [r6]
 800ff58:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->invSampleRate = leaf->invSampleRate;
 800ff5c:	6873      	ldr	r3, [r6, #4]
 800ff5e:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800ff60:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 800ff64:	eddf 8a27 	vldr	s17, [pc, #156]	; 8010004 <tVZFilter_initToPool+0xd4>
 800ff68:	ee21 1a29 	vmul.f32	s2, s2, s19
 800ff6c:	eef0 0a49 	vmov.f32	s1, s18
 800ff70:	eeb0 0a68 	vmov.f32	s0, s17
 800ff74:	f001 fe3c 	bl	8011bf0 <LEAF_clip>
 800ff78:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->cutoffMIDI = ftom(f->fc);
 800ff7c:	f002 f8b4 	bl	80120e8 <ftom>
 800ff80:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->type = type;
 800ff84:	7127      	strb	r7, [r4, #4]
    f->G    = INV_SQRT2;
 800ff86:	4b20      	ldr	r3, [pc, #128]	; (8010008 <tVZFilter_initToPool+0xd8>)
 800ff88:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->invG = 1.414213562373095f;
 800ff8a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801000c <tVZFilter_initToPool+0xdc>
 800ff8e:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->B    = bandWidth;
 800ff92:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
    f->m    = 0.0f;
 800ff96:	edc4 8a0f 	vstr	s17, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 800ff9a:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 800ff9e:	edc4 8a02 	vstr	s17, [r4, #8]
    f->s2   = 0.0f;
 800ffa2:	edc4 8a03 	vstr	s17, [r4, #12]
    f->R2   = f->invG;
 800ffa6:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 800ffaa:	edd4 7a04 	vldr	s15, [r4, #16]
 800ffae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ffb2:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800ffb6:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800ffba:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8010010 <tVZFilter_initToPool+0xe0>
 800ffbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ffc2:	ed94 0a12 	vldr	s0, [r4, #72]	; 0x48
 800ffc6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ffca:	f007 f9d1 	bl	8017370 <tanf>
 800ffce:	ed84 0a04 	vstr	s0, [r4, #16]
    tVZFilter_setBandwidth(vf,f->B);
 800ffd2:	eeb0 0a48 	vmov.f32	s0, s16
 800ffd6:	4628      	mov	r0, r5
 800ffd8:	f7ff ff8e 	bl	800fef8 <tVZFilter_setBandwidth>
    tVZFilter_calcCoeffs(vf);
 800ffdc:	4628      	mov	r0, r5
 800ffde:	f7ff fc3b 	bl	800f858 <tVZFilter_calcCoeffs>
    if (leaf->sampleRate > 90000)
 800ffe2:	ed96 7a00 	vldr	s14, [r6]
 800ffe6:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8010014 <tVZFilter_initToPool+0xe4>
 800ffea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ffee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff2:	dd04      	ble.n	800fffe <tVZFilter_initToPool+0xce>
    	f->table = __filterTanhTable_96000;
 800fff4:	4b08      	ldr	r3, [pc, #32]	; (8010018 <tVZFilter_initToPool+0xe8>)
 800fff6:	6523      	str	r3, [r4, #80]	; 0x50
}
 800fff8:	ecbd 8b04 	vpop	{d8-d9}
 800fffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    	f->table = __filterTanhTable_48000;
 800fffe:	4b07      	ldr	r3, [pc, #28]	; (801001c <tVZFilter_initToPool+0xec>)
 8010000:	6523      	str	r3, [r4, #80]	; 0x50
}
 8010002:	e7f9      	b.n	800fff8 <tVZFilter_initToPool+0xc8>
 8010004:	00000000 	.word	0x00000000
 8010008:	3f3504f3 	.word	0x3f3504f3
 801000c:	3fb504f3 	.word	0x3fb504f3
 8010010:	40490fdb 	.word	0x40490fdb
 8010014:	47afc800 	.word	0x47afc800
 8010018:	0801de18 	.word	0x0801de18
 801001c:	08019e18 	.word	0x08019e18

08010020 <tVZFilter_init>:
{
 8010020:	b508      	push	{r3, lr}
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 8010022:	3218      	adds	r2, #24
 8010024:	f7ff ff84 	bl	800ff30 <tVZFilter_initToPool>
}
 8010028:	bd08      	pop	{r3, pc}
	...

0801002c <tVZFilter_setSampleRate>:
    return fastsqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
}

void    tVZFilter_setSampleRate  (tVZFilter* const vf, Lfloat sr)
{
    _tVZFilter* f = *vf;
 801002c:	6803      	ldr	r3, [r0, #0]
    f->sampleRate = sr;
 801002e:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->invSampleRate = 1.0f/f->sampleRate;
 8010032:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010036:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801003a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    if (sr > 90000)
 801003e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8010058 <tVZFilter_setSampleRate+0x2c>
 8010042:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801004a:	dd02      	ble.n	8010052 <tVZFilter_setSampleRate+0x26>
    {
    	f->table = __filterTanhTable_96000;
 801004c:	4a03      	ldr	r2, [pc, #12]	; (801005c <tVZFilter_setSampleRate+0x30>)
 801004e:	651a      	str	r2, [r3, #80]	; 0x50
 8010050:	4770      	bx	lr
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8010052:	4a03      	ldr	r2, [pc, #12]	; (8010060 <tVZFilter_setSampleRate+0x34>)
 8010054:	651a      	str	r2, [r3, #80]	; 0x50
    }
}
 8010056:	4770      	bx	lr
 8010058:	47afc800 	.word	0x47afc800
 801005c:	0801de18 	.word	0x0801de18
 8010060:	08019e18 	.word	0x08019e18

08010064 <tVZFilterLS_initToPool>:
{
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterLS_initToPool     (tVZFilterLS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 8010064:	b570      	push	{r4, r5, r6, lr}
 8010066:	ed2d 8b04 	vpush	{d8-d9}
 801006a:	4606      	mov	r6, r0
 801006c:	eeb0 8a40 	vmov.f32	s16, s0
 8010070:	eef0 8a60 	vmov.f32	s17, s1
 8010074:	eeb0 9a41 	vmov.f32	s18, s2
    _tMempool* m = *mp;
 8010078:	680d      	ldr	r5, [r1, #0]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 801007a:	4629      	mov	r1, r5
 801007c:	2048      	movs	r0, #72	; 0x48
 801007e:	f002 f90b 	bl	8012298 <mpool_alloc>
 8010082:	4604      	mov	r4, r0
 8010084:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 8010086:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 8010088:	686d      	ldr	r5, [r5, #4]
    
    f->sampleRate = leaf->sampleRate;
 801008a:	edd5 7a00 	vldr	s15, [r5]
 801008e:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 8010092:	eddf 6a37 	vldr	s13, [pc, #220]	; 8010170 <tVZFilterLS_initToPool+0x10c>
 8010096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801009a:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->invSampleRate = leaf->invSampleRate;
 801009e:	686b      	ldr	r3, [r5, #4]
 80100a0:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80100a2:	eddf 9a34 	vldr	s19, [pc, #208]	; 8010174 <tVZFilterLS_initToPool+0x110>
 80100a6:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80100aa:	ee27 1a81 	vmul.f32	s2, s15, s2
 80100ae:	eef0 0a48 	vmov.f32	s1, s16
 80100b2:	eeb0 0a69 	vmov.f32	s0, s19
 80100b6:	f001 fd9b 	bl	8011bf0 <LEAF_clip>
 80100ba:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 80100be:	f002 f813 	bl	80120e8 <ftom>
 80100c2:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->Q    = Q;
 80100c6:	edc4 8a08 	vstr	s17, [r4, #32]
    f->R2 =    1.0f/Q;
 80100ca:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80100ce:	eec8 7a28 	vdiv.f32	s15, s16, s17
 80100d2:	edc4 7a04 	vstr	s15, [r4, #16]
    f->s1    = 0.0f;
 80100d6:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
 80100da:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80100de:	edd4 7a06 	vldr	s15, [r4, #24]
 80100e2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8010178 <tVZFilterLS_initToPool+0x114>
 80100e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80100ea:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80100ee:	ee27 0a80 	vmul.f32	s0, s15, s0
 80100f2:	f007 f93d 	bl	8017370 <tanf>
 80100f6:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80100fa:	ed9f 1a20 	vldr	s2, [pc, #128]	; 801017c <tVZFilterLS_initToPool+0x118>
 80100fe:	eef0 0a49 	vmov.f32	s1, s18
 8010102:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8010180 <tVZFilterLS_initToPool+0x11c>
 8010106:	f001 fd73 	bl	8011bf0 <LEAF_clip>
 801010a:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 801010e:	f001 fbf1 	bl	80118f4 <fastsqrtf>
 8010112:	f001 fbef 	bl	80118f4 <fastsqrtf>
 8010116:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801011a:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 801011e:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 8010122:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010126:	edc4 7a03 	vstr	s15, [r4, #12]
    f->R2Plusg = f->R2+f->g;
 801012a:	ed94 7a04 	vldr	s14, [r4, #16]
 801012e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8010132:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010136:	ee27 7a87 	vmul.f32	s14, s15, s14
 801013a:	ee37 7a08 	vadd.f32	s14, s14, s16
 801013e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010142:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010146:	eec8 7a07 	vdiv.f32	s15, s16, s14
 801014a:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 801014e:	ed95 7a00 	vldr	s14, [r5]
 8010152:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8010184 <tVZFilterLS_initToPool+0x120>
 8010156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801015a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801015e:	dd04      	ble.n	801016a <tVZFilterLS_initToPool+0x106>
    {
    	f->table = __filterTanhTable_96000;
 8010160:	4b09      	ldr	r3, [pc, #36]	; (8010188 <tVZFilterLS_initToPool+0x124>)
 8010162:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 8010164:	ecbd 8b04 	vpop	{d8-d9}
 8010168:	bd70      	pop	{r4, r5, r6, pc}
    	f->table = __filterTanhTable_48000;
 801016a:	4b08      	ldr	r3, [pc, #32]	; (801018c <tVZFilterLS_initToPool+0x128>)
 801016c:	6423      	str	r3, [r4, #64]	; 0x40
}
 801016e:	e7f9      	b.n	8010164 <tVZFilterLS_initToPool+0x100>
 8010170:	473b8000 	.word	0x473b8000
 8010174:	00000000 	.word	0x00000000
 8010178:	40490fdb 	.word	0x40490fdb
 801017c:	457a0000 	.word	0x457a0000
 8010180:	358637bd 	.word	0x358637bd
 8010184:	47afc800 	.word	0x47afc800
 8010188:	0801de18 	.word	0x0801de18
 801018c:	08019e18 	.word	0x08019e18

08010190 <tVZFilterLS_init>:
{
 8010190:	b508      	push	{r3, lr}
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 8010192:	3118      	adds	r1, #24
 8010194:	f7ff ff66 	bl	8010064 <tVZFilterLS_initToPool>
}
 8010198:	bd08      	pop	{r3, pc}
	...

0801019c <tVZFilterLS_setSampleRate>:
    mpool_free((char*)f, f->mempool);
}

void    tVZFilterLS_setSampleRate  (tVZFilterLS* const vf, Lfloat sampleRate)
{
        _tVZFilterLS* f = *vf;
 801019c:	6803      	ldr	r3, [r0, #0]
        f->sampleRate = sampleRate;
 801019e:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->invSampleRate = 1.0f / sampleRate;
 80101a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80101a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80101aa:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 80101ae:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80101d4 <tVZFilterLS_setSampleRate+0x38>
 80101b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80101b6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (sampleRate > 90000)
 80101ba:	eddf 7a07 	vldr	s15, [pc, #28]	; 80101d8 <tVZFilterLS_setSampleRate+0x3c>
 80101be:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80101c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c6:	dd02      	ble.n	80101ce <tVZFilterLS_setSampleRate+0x32>
       {
       	f->table = __filterTanhTable_96000;
 80101c8:	4a04      	ldr	r2, [pc, #16]	; (80101dc <tVZFilterLS_setSampleRate+0x40>)
 80101ca:	641a      	str	r2, [r3, #64]	; 0x40
 80101cc:	4770      	bx	lr
       }
       else
       {
       	f->table = __filterTanhTable_48000;
 80101ce:	4a04      	ldr	r2, [pc, #16]	; (80101e0 <tVZFilterLS_setSampleRate+0x44>)
 80101d0:	641a      	str	r2, [r3, #64]	; 0x40
       }
}
 80101d2:	4770      	bx	lr
 80101d4:	473b8000 	.word	0x473b8000
 80101d8:	47afc800 	.word	0x47afc800
 80101dc:	0801de18 	.word	0x0801de18
 80101e0:	08019e18 	.word	0x08019e18

080101e4 <tVZFilterLS_tick>:
Lfloat   tVZFilterLS_tick               (tVZFilterLS* const vf, Lfloat input)
{
        _tVZFilterLS* f = *vf;
 80101e4:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80101e6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80101ea:	edd3 6a01 	vldr	s13, [r3, #4]
 80101ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80101f2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80101f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80101fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80101fe:	ed93 7a05 	vldr	s14, [r3, #20]
 8010202:	ee20 0a07 	vmul.f32	s0, s0, s14
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8010206:	ed93 7a03 	vldr	s14, [r3, #12]
 801020a:	ee27 6a00 	vmul.f32	s12, s14, s0
    yB = v1 + f->s1;
 801020e:	ee76 6a86 	vadd.f32	s13, s13, s12
    f->s1 = v1 + yB; // state update in 1st integrator
 8010212:	ee36 6a26 	vadd.f32	s12, s12, s13
 8010216:	ed83 6a01 	vstr	s12, [r3, #4]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 801021a:	ee27 7a26 	vmul.f32	s14, s14, s13
    yL = v2 + f->s2;
 801021e:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 8010222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010226:	ed83 7a02 	vstr	s14, [r3, #8]
    
    return f->G*yL + f->R2*f->G*yB + yH;
 801022a:	ed93 7a07 	vldr	s14, [r3, #28]
 801022e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010232:	ed93 6a04 	vldr	s12, [r3, #16]
 8010236:	ee27 7a06 	vmul.f32	s14, s14, s12
 801023a:	ee27 7a26 	vmul.f32	s14, s14, s13
 801023e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8010242:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010246:	4770      	bx	lr

08010248 <tVZFilterLS_setFreqFast>:

void    tVZFilterLS_setFreqFast           (tVZFilterLS* const vf, Lfloat cutoff)
{
        _tVZFilterLS* f = *vf;
 8010248:	6803      	ldr	r3, [r0, #0]
        f->cutoffMIDI = cutoff;
 801024a:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
        cutoff *= 30.567164179104478f;
 801024e:	eddf 7a25 	vldr	s15, [pc, #148]	; 80102e4 <tVZFilterLS_setFreqFast+0x9c>
 8010252:	ee20 0a27 	vmul.f32	s0, s0, s15
        int32_t intVer = (int32_t)cutoff;
 8010256:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801025a:	ee17 2a90 	vmov	r2, s15
        if (intVer > 4094)
 801025e:	f640 71fe 	movw	r1, #4094	; 0xffe
 8010262:	428a      	cmp	r2, r1
 8010264:	dc03      	bgt.n	801026e <tVZFilterLS_setFreqFast+0x26>
        {
        	intVer = 4094;
        }
        if (intVer < 0)
 8010266:	2a00      	cmp	r2, #0
 8010268:	da03      	bge.n	8010272 <tVZFilterLS_setFreqFast+0x2a>
        {
        	intVer = 0;
 801026a:	2200      	movs	r2, #0
 801026c:	e001      	b.n	8010272 <tVZFilterLS_setFreqFast+0x2a>
        	intVer = 4094;
 801026e:	f640 72fe 	movw	r2, #4094	; 0xffe
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8010272:	ee07 2a90 	vmov	s15, r2
 8010276:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801027a:	ee30 0a67 	vsub.f32	s0, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801027e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8010280:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 8010284:	edd0 7a00 	vldr	s15, [r0]
 8010288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801028c:	ee36 7ac0 	vsub.f32	s14, s13, s0
 8010290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010294:	3201      	adds	r2, #1
 8010296:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801029a:	ed91 7a00 	vldr	s14, [r1]
 801029e:	ee27 7a00 	vmul.f32	s14, s14, s0
 80102a2:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 80102a6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80102aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80102ae:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 80102b2:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80102b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102ba:	edc3 7a03 	vstr	s15, [r3, #12]
    f->R2Plusg = f->R2+f->g;
 80102be:	ed93 7a04 	vldr	s14, [r3, #16]
 80102c2:	ee37 6a87 	vadd.f32	s12, s15, s14
 80102c6:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80102ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80102ce:	ee37 7a26 	vadd.f32	s14, s14, s13
 80102d2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80102d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80102da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80102de:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80102e2:	4770      	bx	lr
 80102e4:	41f4898d 	.word	0x41f4898d

080102e8 <tVZFilterLS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterLS_setGain                  (tVZFilterLS* const vf, Lfloat gain)
{
 80102e8:	b510      	push	{r4, lr}
 80102ea:	eef0 0a40 	vmov.f32	s1, s0
        _tVZFilterLS* f = *vf;
 80102ee:	6804      	ldr	r4, [r0, #0]
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80102f0:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8010348 <tVZFilterLS_setGain+0x60>
 80102f4:	ed9f 0a15 	vldr	s0, [pc, #84]	; 801034c <tVZFilterLS_setGain+0x64>
 80102f8:	f001 fc7a 	bl	8011bf0 <LEAF_clip>
 80102fc:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 8010300:	f001 faf8 	bl	80118f4 <fastsqrtf>
 8010304:	f001 faf6 	bl	80118f4 <fastsqrtf>
 8010308:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801030c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8010310:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8010314:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 8010318:	ee67 7a87 	vmul.f32	s15, s15, s14
 801031c:	edc4 7a03 	vstr	s15, [r4, #12]
    f->R2Plusg = f->R2+f->g;
 8010320:	ed94 7a04 	vldr	s14, [r4, #16]
 8010324:	ee37 6a87 	vadd.f32	s12, s15, s14
 8010328:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801032c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010330:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010334:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010338:	ee37 7a27 	vadd.f32	s14, s14, s15
 801033c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010340:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8010344:	bd10      	pop	{r4, pc}
 8010346:	bf00      	nop
 8010348:	457a0000 	.word	0x457a0000
 801034c:	358637bd 	.word	0x358637bd

08010350 <tVZFilterLS_setResonance>:

void    tVZFilterLS_setResonance                (tVZFilterLS* const vf, Lfloat res)
{
        _tVZFilterLS* f = *vf;
 8010350:	6803      	ldr	r3, [r0, #0]
        f->Q = res;
 8010352:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2 = 1.0f/res;
 8010356:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801035a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801035e:	edc3 7a04 	vstr	s15, [r3, #16]
        f->R2Plusg = f->R2+f->g;
 8010362:	ed93 7a03 	vldr	s14, [r3, #12]
 8010366:	ee37 6a87 	vadd.f32	s12, s15, s14
 801036a:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801036e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010376:	ee27 7a07 	vmul.f32	s14, s14, s14
 801037a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801037e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010382:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8010386:	4770      	bx	lr

08010388 <tVZFilterHS_initToPool>:
{
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterHS_initToPool     (tVZFilterHS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 8010388:	b570      	push	{r4, r5, r6, lr}
 801038a:	ed2d 8b04 	vpush	{d8-d9}
 801038e:	4606      	mov	r6, r0
 8010390:	eef0 8a40 	vmov.f32	s17, s0
 8010394:	eeb0 8a60 	vmov.f32	s16, s1
 8010398:	eeb0 9a41 	vmov.f32	s18, s2
    _tMempool* m = *mp;
 801039c:	680d      	ldr	r5, [r1, #0]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 801039e:	4629      	mov	r1, r5
 80103a0:	2048      	movs	r0, #72	; 0x48
 80103a2:	f001 ff79 	bl	8012298 <mpool_alloc>
 80103a6:	4604      	mov	r4, r0
 80103a8:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 80103aa:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 80103ac:	686d      	ldr	r5, [r5, #4]
    
    f->sampleRate = leaf->sampleRate;
 80103ae:	edd5 7a00 	vldr	s15, [r5]
 80103b2:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->invSampleRate = leaf->invSampleRate;
 80103b6:	686b      	ldr	r3, [r5, #4]
 80103b8:	6303      	str	r3, [r0, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 80103ba:	eddf 6a35 	vldr	s13, [pc, #212]	; 8010490 <tVZFilterHS_initToPool+0x108>
 80103be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80103c2:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80103c6:	eddf 9a33 	vldr	s19, [pc, #204]	; 8010494 <tVZFilterHS_initToPool+0x10c>
 80103ca:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80103ce:	ee27 1a81 	vmul.f32	s2, s15, s2
 80103d2:	eef0 0a68 	vmov.f32	s1, s17
 80103d6:	eeb0 0a69 	vmov.f32	s0, s19
 80103da:	f001 fc09 	bl	8011bf0 <LEAF_clip>
 80103de:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 80103e2:	f001 fe81 	bl	80120e8 <ftom>
 80103e6:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->Q    = Q;
 80103ea:	ed84 8a08 	vstr	s16, [r4, #32]
    f->R2 =    1.0f/Q;
 80103ee:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80103f2:	eec8 7a88 	vdiv.f32	s15, s17, s16
 80103f6:	edc4 7a04 	vstr	s15, [r4, #16]
    f->s1    = 0.0f;
 80103fa:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
 80103fe:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8010402:	edd4 7a06 	vldr	s15, [r4, #24]
 8010406:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8010498 <tVZFilterHS_initToPool+0x110>
 801040a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801040e:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8010412:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010416:	f006 ffab 	bl	8017370 <tanf>
 801041a:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 801041e:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 801049c <tVZFilterHS_initToPool+0x114>
 8010422:	eef0 0a49 	vmov.f32	s1, s18
 8010426:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80104a0 <tVZFilterHS_initToPool+0x118>
 801042a:	f001 fbe1 	bl	8011bf0 <LEAF_clip>
 801042e:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
 8010432:	f001 fa5f 	bl	80118f4 <fastsqrtf>
 8010436:	f001 fa5d 	bl	80118f4 <fastsqrtf>
 801043a:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 801043e:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010442:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010446:	ed84 0a03 	vstr	s0, [r4, #12]
    f->R2Plusg = f->R2+f->g;
 801044a:	edd4 7a04 	vldr	s15, [r4, #16]
 801044e:	ee30 7a27 	vadd.f32	s14, s0, s15
 8010452:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010456:	ee60 7a27 	vmul.f32	s15, s0, s15
 801045a:	ee77 7aa8 	vadd.f32	s15, s15, s17
 801045e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010462:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010466:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 801046a:	ed84 7a05 	vstr	s14, [r4, #20]
    if (leaf->sampleRate > 90000)
 801046e:	ed95 7a00 	vldr	s14, [r5]
 8010472:	eddf 7a0c 	vldr	s15, [pc, #48]	; 80104a4 <tVZFilterHS_initToPool+0x11c>
 8010476:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801047a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801047e:	dd04      	ble.n	801048a <tVZFilterHS_initToPool+0x102>
    {
    	f->table = __filterTanhTable_96000;
 8010480:	4b09      	ldr	r3, [pc, #36]	; (80104a8 <tVZFilterHS_initToPool+0x120>)
 8010482:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 8010484:	ecbd 8b04 	vpop	{d8-d9}
 8010488:	bd70      	pop	{r4, r5, r6, pc}
    	f->table = __filterTanhTable_48000;
 801048a:	4b08      	ldr	r3, [pc, #32]	; (80104ac <tVZFilterHS_initToPool+0x124>)
 801048c:	6423      	str	r3, [r4, #64]	; 0x40
}
 801048e:	e7f9      	b.n	8010484 <tVZFilterHS_initToPool+0xfc>
 8010490:	473b8000 	.word	0x473b8000
 8010494:	00000000 	.word	0x00000000
 8010498:	40490fdb 	.word	0x40490fdb
 801049c:	457a0000 	.word	0x457a0000
 80104a0:	358637bd 	.word	0x358637bd
 80104a4:	47afc800 	.word	0x47afc800
 80104a8:	0801de18 	.word	0x0801de18
 80104ac:	08019e18 	.word	0x08019e18

080104b0 <tVZFilterHS_init>:
{
 80104b0:	b508      	push	{r3, lr}
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 80104b2:	3118      	adds	r1, #24
 80104b4:	f7ff ff68 	bl	8010388 <tVZFilterHS_initToPool>
}
 80104b8:	bd08      	pop	{r3, pc}
	...

080104bc <tVZFilterHS_setSampleRate>:
    mpool_free((char*)f, f->mempool);
}

void    tVZFilterHS_setSampleRate  (tVZFilterHS* const vf, Lfloat sampleRate)
{
        _tVZFilterHS* f = *vf;
 80104bc:	6803      	ldr	r3, [r0, #0]
        f->sampleRate = sampleRate;
 80104be:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->invSampleRate = 1.0f / sampleRate;
 80104c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80104c6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80104ca:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 80104ce:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80104f4 <tVZFilterHS_setSampleRate+0x38>
 80104d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80104d6:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (sampleRate > 90000)
 80104da:	eddf 7a07 	vldr	s15, [pc, #28]	; 80104f8 <tVZFilterHS_setSampleRate+0x3c>
 80104de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80104e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e6:	dd02      	ble.n	80104ee <tVZFilterHS_setSampleRate+0x32>
          {
          	f->table = __filterTanhTable_96000;
 80104e8:	4a04      	ldr	r2, [pc, #16]	; (80104fc <tVZFilterHS_setSampleRate+0x40>)
 80104ea:	641a      	str	r2, [r3, #64]	; 0x40
 80104ec:	4770      	bx	lr
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 80104ee:	4a04      	ldr	r2, [pc, #16]	; (8010500 <tVZFilterHS_setSampleRate+0x44>)
 80104f0:	641a      	str	r2, [r3, #64]	; 0x40
          }
}
 80104f2:	4770      	bx	lr
 80104f4:	473b8000 	.word	0x473b8000
 80104f8:	47afc800 	.word	0x47afc800
 80104fc:	0801de18 	.word	0x0801de18
 8010500:	08019e18 	.word	0x08019e18

08010504 <tVZFilterHS_tick>:
Lfloat   tVZFilterHS_tick               (tVZFilterHS* const vf, Lfloat input)
{
        _tVZFilterHS* f = *vf;
 8010504:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8010506:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801050a:	edd3 6a01 	vldr	s13, [r3, #4]
 801050e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010512:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010516:	ed93 6a02 	vldr	s12, [r3, #8]
 801051a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801051e:	ed93 7a05 	vldr	s14, [r3, #20]
 8010522:	ee67 7a87 	vmul.f32	s15, s15, s14
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8010526:	ed93 7a03 	vldr	s14, [r3, #12]
 801052a:	ee67 5a27 	vmul.f32	s11, s14, s15
    yB = v1 + f->s1;
 801052e:	ee76 6aa5 	vadd.f32	s13, s13, s11
    f->s1 = v1 + yB; // state update in 1st integrator
 8010532:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8010536:	edc3 5a01 	vstr	s11, [r3, #4]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 801053a:	ee27 7a26 	vmul.f32	s14, s14, s13
    yL = v2 + f->s2;
 801053e:	ee36 6a07 	vadd.f32	s12, s12, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 8010542:	ee37 7a06 	vadd.f32	s14, s14, s12
 8010546:	ed83 7a02 	vstr	s14, [r3, #8]
    
    return yL + f->R2*f->G*yB + f->G*yH;
 801054a:	ed93 7a04 	vldr	s14, [r3, #16]
 801054e:	ed93 0a07 	vldr	s0, [r3, #28]
 8010552:	ee27 7a00 	vmul.f32	s14, s14, s0
 8010556:	ee27 7a26 	vmul.f32	s14, s14, s13
 801055a:	ee37 7a06 	vadd.f32	s14, s14, s12
 801055e:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8010562:	ee37 0a00 	vadd.f32	s0, s14, s0
 8010566:	4770      	bx	lr

08010568 <tVZFilterHS_setFreqFast>:

void    tVZFilterHS_setFreqFast           (tVZFilterHS* const vf, Lfloat cutoff)
{
        _tVZFilterHS* f = *vf;
 8010568:	6803      	ldr	r3, [r0, #0]
        f->cutoffMIDI = cutoff;
 801056a:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
        cutoff *= 30.567164179104478f;
 801056e:	eddf 7a25 	vldr	s15, [pc, #148]	; 8010604 <tVZFilterHS_setFreqFast+0x9c>
 8010572:	ee20 0a27 	vmul.f32	s0, s0, s15
        int32_t intVer = (int32_t)cutoff;
 8010576:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801057a:	ee17 2a90 	vmov	r2, s15
        if (intVer > 4094)
 801057e:	f640 71fe 	movw	r1, #4094	; 0xffe
 8010582:	428a      	cmp	r2, r1
 8010584:	dc03      	bgt.n	801058e <tVZFilterHS_setFreqFast+0x26>
        {
        	intVer = 4094;
        }
        if (intVer < 0)
 8010586:	2a00      	cmp	r2, #0
 8010588:	da03      	bge.n	8010592 <tVZFilterHS_setFreqFast+0x2a>
        {
        	intVer = 0;
 801058a:	2200      	movs	r2, #0
 801058c:	e001      	b.n	8010592 <tVZFilterHS_setFreqFast+0x2a>
        	intVer = 4094;
 801058e:	f640 72fe 	movw	r2, #4094	; 0xffe
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8010592:	ee07 2a90 	vmov	s15, r2
 8010596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801059a:	ee30 0a67 	vsub.f32	s0, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801059e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80105a0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80105a4:	edd0 7a00 	vldr	s15, [r0]
 80105a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80105ac:	ee36 7ac0 	vsub.f32	s14, s13, s0
 80105b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80105b4:	3201      	adds	r2, #1
 80105b6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80105ba:	ed91 7a00 	vldr	s14, [r1]
 80105be:	ee27 7a00 	vmul.f32	s14, s14, s0
 80105c2:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 80105c6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80105ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80105ce:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80105d2:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80105d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80105da:	edc3 7a03 	vstr	s15, [r3, #12]
    
    f->R2Plusg = f->R2+f->g;
 80105de:	ed93 7a04 	vldr	s14, [r3, #16]
 80105e2:	ee37 6a87 	vadd.f32	s12, s15, s14
 80105e6:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80105ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80105ee:	ee37 7a26 	vadd.f32	s14, s14, s13
 80105f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80105f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80105fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105fe:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8010602:	4770      	bx	lr
 8010604:	41f4898d 	.word	0x41f4898d

08010608 <tVZFilterHS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterHS_setGain                  (tVZFilterHS* const vf, Lfloat gain)
{
 8010608:	b510      	push	{r4, lr}
 801060a:	eef0 0a40 	vmov.f32	s1, s0
        _tVZFilterHS* f = *vf;
 801060e:	6804      	ldr	r4, [r0, #0]
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8010610:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8010664 <tVZFilterHS_setGain+0x5c>
 8010614:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8010668 <tVZFilterHS_setGain+0x60>
 8010618:	f001 faea 	bl	8011bf0 <LEAF_clip>
 801061c:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
 8010620:	f001 f968 	bl	80118f4 <fastsqrtf>
 8010624:	f001 f966 	bl	80118f4 <fastsqrtf>
 8010628:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 801062c:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010630:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010634:	ed84 0a03 	vstr	s0, [r4, #12]
    f->R2Plusg = f->R2+f->g;
 8010638:	edd4 7a04 	vldr	s15, [r4, #16]
 801063c:	ee30 7a27 	vadd.f32	s14, s0, s15
 8010640:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010644:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010648:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801064c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010650:	ee20 0a00 	vmul.f32	s0, s0, s0
 8010654:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010658:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801065c:	edc4 6a05 	vstr	s13, [r4, #20]
}
 8010660:	bd10      	pop	{r4, pc}
 8010662:	bf00      	nop
 8010664:	457a0000 	.word	0x457a0000
 8010668:	358637bd 	.word	0x358637bd

0801066c <tVZFilterHS_setResonance>:

void    tVZFilterHS_setResonance                (tVZFilterHS* const vf, Lfloat res)
{
        _tVZFilterHS* f = *vf;
 801066c:	6803      	ldr	r3, [r0, #0]
        f->Q = res;
 801066e:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2 = 1.0f/res;
 8010672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010676:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801067a:	edc3 7a04 	vstr	s15, [r3, #16]
        f->R2Plusg = f->R2+f->g;
 801067e:	ed93 7a03 	vldr	s14, [r3, #12]
 8010682:	ee37 6a87 	vadd.f32	s12, s15, s14
 8010686:	ed83 6a0a 	vstr	s12, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801068a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801068e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010692:	ee27 7a07 	vmul.f32	s14, s14, s14
 8010696:	ee77 7a87 	vadd.f32	s15, s15, s14
 801069a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801069e:	ed83 7a05 	vstr	s14, [r3, #20]
}
 80106a2:	4770      	bx	lr

080106a4 <tVZFilterBell_initToPool>:
{
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
}

void    tVZFilterBell_initToPool     (tVZFilterBell* const vf, Lfloat freq, Lfloat BW, Lfloat gain, tMempool* const mp)
{
 80106a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106a6:	ed2d 8b04 	vpush	{d8-d9}
 80106aa:	4607      	mov	r7, r0
 80106ac:	eeb0 8a40 	vmov.f32	s16, s0
 80106b0:	ee10 6a90 	vmov	r6, s1
 80106b4:	eef0 8a41 	vmov.f32	s17, s2
    _tMempool* m = *mp;
 80106b8:	680d      	ldr	r5, [r1, #0]
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 80106ba:	4629      	mov	r1, r5
 80106bc:	2040      	movs	r0, #64	; 0x40
 80106be:	f001 fdeb 	bl	8012298 <mpool_alloc>
 80106c2:	4604      	mov	r4, r0
 80106c4:	6038      	str	r0, [r7, #0]
    f->mempool = m;
 80106c6:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 80106c8:	686d      	ldr	r5, [r5, #4]
    
    f->sampleRate = leaf->sampleRate;
 80106ca:	ed95 1a00 	vldr	s2, [r5]
 80106ce:	ed80 1a0a 	vstr	s2, [r0, #40]	; 0x28
    f->invSampleRate = leaf->invSampleRate;
 80106d2:	686b      	ldr	r3, [r5, #4]
 80106d4:	62c3      	str	r3, [r0, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 80106d6:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80107f0 <tVZFilterBell_initToPool+0x14c>
 80106da:	eec7 7a01 	vdiv.f32	s15, s14, s2
 80106de:	edc0 7a0d 	vstr	s15, [r0, #52]	; 0x34
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80106e2:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 80106e6:	ed9f 9a43 	vldr	s18, [pc, #268]	; 80107f4 <tVZFilterBell_initToPool+0x150>
 80106ea:	ee21 1a29 	vmul.f32	s2, s2, s19
 80106ee:	eef0 0a48 	vmov.f32	s1, s16
 80106f2:	eeb0 0a49 	vmov.f32	s0, s18
 80106f6:	f001 fa7b 	bl	8011bf0 <LEAF_clip>
 80106fa:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 80106fe:	f001 fcf3 	bl	80120e8 <ftom>
 8010702:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->B = BW;
 8010706:	6226      	str	r6, [r4, #32]
    f->s1    = 0.0f;
 8010708:	ed84 9a01 	vstr	s18, [r4, #4]
    f->s2   = 0.0f;
 801070c:	ed84 9a02 	vstr	s18, [r4, #8]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8010710:	ed9f 1a39 	vldr	s2, [pc, #228]	; 80107f8 <tVZFilterBell_initToPool+0x154>
 8010714:	eef0 0a68 	vmov.f32	s1, s17
 8010718:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80107fc <tVZFilterBell_initToPool+0x158>
 801071c:	f001 fa68 	bl	8011bf0 <LEAF_clip>
 8010720:	ed84 0a07 	vstr	s0, [r4, #28]
    f->g = tanf(PI * freq * f->invSampleRate);
 8010724:	eddf 8a36 	vldr	s17, [pc, #216]	; 8010800 <tVZFilterBell_initToPool+0x15c>
 8010728:	ee28 8a28 	vmul.f32	s16, s16, s17
 801072c:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8010730:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010734:	f006 fe1c 	bl	8017370 <tanf>
 8010738:	ed84 0a03 	vstr	s0, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 801073c:	ed94 8a06 	vldr	s16, [r4, #24]
 8010740:	edd4 0a08 	vldr	s1, [r4, #32]
 8010744:	ee60 0ae9 	vnmul.f32	s1, s1, s19
 8010748:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801074c:	f001 f9ae 	bl	8011aac <fastPowf>
 8010750:	ee28 8a00 	vmul.f32	s16, s16, s0
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8010754:	ee28 8a28 	vmul.f32	s16, s16, s17
 8010758:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 801075c:	ee28 0a00 	vmul.f32	s0, s16, s0
 8010760:	f001 f870 	bl	8011844 <fastertanf>
    Lfloat r  = f->g/wl;
 8010764:	ed94 7a03 	vldr	s14, [r4, #12]
 8010768:	eec7 7a00 	vdiv.f32	s15, s14, s0
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 801076c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    // warped upper bandedge, wc the center
    f->rToUse = r;
 8010770:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010774:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010778:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801077c:	ee37 7a08 	vadd.f32	s14, s14, s16
 8010780:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010784:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010788:	ee30 0a67 	vsub.f32	s0, s0, s15
 801078c:	edd4 7a07 	vldr	s15, [r4, #28]
 8010790:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8010794:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010798:	ee80 0a27 	vdiv.f32	s0, s0, s15
 801079c:	f001 f8aa 	bl	80118f4 <fastsqrtf>
 80107a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80107a4:	ed84 0a04 	vstr	s0, [r4, #16]
    f->R2Plusg = f->R2+f->g;
 80107a8:	edd4 7a03 	vldr	s15, [r4, #12]
 80107ac:	ee30 7a27 	vadd.f32	s14, s0, s15
 80107b0:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80107b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80107b8:	ee30 0a08 	vadd.f32	s0, s0, s16
 80107bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80107c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80107c4:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80107c8:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 80107cc:	ed95 7a00 	vldr	s14, [r5]
 80107d0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8010804 <tVZFilterBell_initToPool+0x160>
 80107d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80107d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107dc:	dd04      	ble.n	80107e8 <tVZFilterBell_initToPool+0x144>
    {
    	f->table = __filterTanhTable_96000;
 80107de:	4b0a      	ldr	r3, [pc, #40]	; (8010808 <tVZFilterBell_initToPool+0x164>)
 80107e0:	63a3      	str	r3, [r4, #56]	; 0x38
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 80107e2:	ecbd 8b04 	vpop	{d8-d9}
 80107e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    	f->table = __filterTanhTable_48000;
 80107e8:	4b08      	ldr	r3, [pc, #32]	; (801080c <tVZFilterBell_initToPool+0x168>)
 80107ea:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80107ec:	e7f9      	b.n	80107e2 <tVZFilterBell_initToPool+0x13e>
 80107ee:	bf00      	nop
 80107f0:	473b8000 	.word	0x473b8000
 80107f4:	00000000 	.word	0x00000000
 80107f8:	457a0000 	.word	0x457a0000
 80107fc:	358637bd 	.word	0x358637bd
 8010800:	40490fdb 	.word	0x40490fdb
 8010804:	47afc800 	.word	0x47afc800
 8010808:	0801de18 	.word	0x0801de18
 801080c:	08019e18 	.word	0x08019e18

08010810 <tVZFilterBell_init>:
{
 8010810:	b508      	push	{r3, lr}
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
 8010812:	3118      	adds	r1, #24
 8010814:	f7ff ff46 	bl	80106a4 <tVZFilterBell_initToPool>
}
 8010818:	bd08      	pop	{r3, pc}
	...

0801081c <tVZFilterBell_setSampleRate>:
    mpool_free((char*)f, f->mempool);
}

void    tVZFilterBell_setSampleRate  (tVZFilterBell* const vf, Lfloat sampleRate)
{
        _tVZFilterBell* f = *vf;
 801081c:	6803      	ldr	r3, [r0, #0]
        f->sampleRate = sampleRate;
 801081e:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    f->invSampleRate = 1.0f / sampleRate;
 8010822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010826:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801082a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 801082e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8010854 <tVZFilterBell_setSampleRate+0x38>
 8010832:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010836:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    if (sampleRate > 90000)
 801083a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8010858 <tVZFilterBell_setSampleRate+0x3c>
 801083e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010846:	dd02      	ble.n	801084e <tVZFilterBell_setSampleRate+0x32>
          {
          	f->table = __filterTanhTable_96000;
 8010848:	4a04      	ldr	r2, [pc, #16]	; (801085c <tVZFilterBell_setSampleRate+0x40>)
 801084a:	639a      	str	r2, [r3, #56]	; 0x38
 801084c:	4770      	bx	lr
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 801084e:	4a04      	ldr	r2, [pc, #16]	; (8010860 <tVZFilterBell_setSampleRate+0x44>)
 8010850:	639a      	str	r2, [r3, #56]	; 0x38
          }
}
 8010852:	4770      	bx	lr
 8010854:	473b8000 	.word	0x473b8000
 8010858:	47afc800 	.word	0x47afc800
 801085c:	0801de18 	.word	0x0801de18
 8010860:	08019e18 	.word	0x08019e18

08010864 <tVZFilterBell_tick>:
Lfloat   tVZFilterBell_tick               (tVZFilterBell* const vf, Lfloat input)
{
        _tVZFilterBell* f = *vf;
 8010864:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8010866:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 801086a:	edd3 6a01 	vldr	s13, [r3, #4]
 801086e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010872:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010876:	ed93 6a02 	vldr	s12, [r3, #8]
 801087a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801087e:	ed93 7a05 	vldr	s14, [r3, #20]
 8010882:	ee67 7a87 	vmul.f32	s15, s15, s14
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8010886:	ed93 7a03 	vldr	s14, [r3, #12]
 801088a:	ee67 5a27 	vmul.f32	s11, s14, s15
    yB = v1 + f->s1;
 801088e:	ee76 6aa5 	vadd.f32	s13, s13, s11
    f->s1 = v1 + yB; // state update in 1st integrator
 8010892:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8010896:	edc3 5a01 	vstr	s11, [r3, #4]
    
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
 801089a:	ee27 7a26 	vmul.f32	s14, s14, s13
    yL = v2 + f->s2;
 801089e:	ee36 6a07 	vadd.f32	s12, s12, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 80108a2:	ee37 7a06 	vadd.f32	s14, s14, s12
 80108a6:	ed83 7a02 	vstr	s14, [r3, #8]
    
    return yL + f->R2*f->G*yB + yH;
 80108aa:	ed93 0a04 	vldr	s0, [r3, #16]
 80108ae:	ed93 7a07 	vldr	s14, [r3, #28]
 80108b2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80108b6:	ee20 0a26 	vmul.f32	s0, s0, s13
 80108ba:	ee30 0a06 	vadd.f32	s0, s0, s12
}
 80108be:	ee30 0a27 	vadd.f32	s0, s0, s15
 80108c2:	4770      	bx	lr

080108c4 <tVZFilterBell_setBandwidth>:


               
void    tVZFilterBell_setBandwidth           (tVZFilterBell* const vf, Lfloat bandWidth)
{
 80108c4:	b510      	push	{r4, lr}
 80108c6:	ed2d 8b02 	vpush	{d8}
        _tVZFilterBell* f = *vf;
 80108ca:	6804      	ldr	r4, [r0, #0]
    f->B = bandWidth;
 80108cc:	ed84 0a08 	vstr	s0, [r4, #32]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80108d0:	ed94 8a06 	vldr	s16, [r4, #24]
 80108d4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80108d8:	ee60 0a60 	vnmul.f32	s1, s0, s1
 80108dc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80108e0:	f001 f8e4 	bl	8011aac <fastPowf>
 80108e4:	ee28 8a00 	vmul.f32	s16, s16, s0
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80108e8:	eddf 7a17 	vldr	s15, [pc, #92]	; 8010948 <tVZFilterBell_setBandwidth+0x84>
 80108ec:	ee28 8a27 	vmul.f32	s16, s16, s15
 80108f0:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 80108f4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80108f8:	f000 ffa4 	bl	8011844 <fastertanf>
    Lfloat r  = f->g/wl;
 80108fc:	ed94 7a03 	vldr	s14, [r4, #12]
 8010900:	eec7 7a00 	vdiv.f32	s15, s14, s0
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8010904:	ee67 7aa7 	vmul.f32	s15, s15, s15
    // warped upper bandedge, wc the center
    f->rToUse = r;
 8010908:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801090c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010910:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010914:	ee37 7a26 	vadd.f32	s14, s14, s13
 8010918:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801091c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010920:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010924:	edd4 7a07 	vldr	s15, [r4, #28]
 8010928:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 801092c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010930:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8010934:	f000 ffde 	bl	80118f4 <fastsqrtf>
 8010938:	ee30 0a00 	vadd.f32	s0, s0, s0
 801093c:	ed84 0a04 	vstr	s0, [r4, #16]
}
 8010940:	ecbd 8b02 	vpop	{d8}
 8010944:	bd10      	pop	{r4, pc}
 8010946:	bf00      	nop
 8010948:	40490fdb 	.word	0x40490fdb

0801094c <tVZFilterBell_setFreq>:
void    tVZFilterBell_setFreq           (tVZFilterBell* const vf, Lfloat freq)
{
 801094c:	b510      	push	{r4, lr}
 801094e:	ed2d 8b02 	vpush	{d8}
 8010952:	eeb0 8a40 	vmov.f32	s16, s0
    _tVZFilterBell* f = *vf;
 8010956:	6804      	ldr	r4, [r0, #0]
    f->fc = freq;
 8010958:	ed84 0a06 	vstr	s0, [r4, #24]
    //TODO: need to make fast version that uses tables
    f->g = tanf(PI * freq * f->invSampleRate);
 801095c:	eddf 8a2b 	vldr	s17, [pc, #172]	; 8010a0c <tVZFilterBell_setFreq+0xc0>
 8010960:	ee20 0a28 	vmul.f32	s0, s0, s17
 8010964:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010968:	ee20 0a27 	vmul.f32	s0, s0, s15
 801096c:	f006 fd00 	bl	8017370 <tanf>
 8010970:	ed84 0a03 	vstr	s0, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8010974:	edd4 0a08 	vldr	s1, [r4, #32]
 8010978:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801097c:	ee60 0ae7 	vnmul.f32	s1, s1, s15
 8010980:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8010984:	f001 f892 	bl	8011aac <fastPowf>
 8010988:	ee20 0a08 	vmul.f32	s0, s0, s16
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 801098c:	ee20 0a28 	vmul.f32	s0, s0, s17
 8010990:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010994:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010998:	f000 ff54 	bl	8011844 <fastertanf>
    Lfloat r  = f->g/wl;
 801099c:	ed94 7a03 	vldr	s14, [r4, #12]
 80109a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80109a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
    // warped upper bandedge, wc the center
    f->rToUse = r;
 80109a8:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80109ac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80109b0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80109b4:	ee37 7a08 	vadd.f32	s14, s14, s16
 80109b8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80109bc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80109c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80109c4:	edd4 7a07 	vldr	s15, [r4, #28]
 80109c8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80109cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80109d0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80109d4:	f000 ff8e 	bl	80118f4 <fastsqrtf>
 80109d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80109dc:	ed84 0a04 	vstr	s0, [r4, #16]
    f->R2Plusg = f->R2+f->g;
 80109e0:	edd4 7a03 	vldr	s15, [r4, #12]
 80109e4:	ee30 7a27 	vadd.f32	s14, s0, s15
 80109e8:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80109ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 80109f0:	ee30 0a08 	vadd.f32	s0, s0, s16
 80109f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80109f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80109fc:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8010a00:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8010a04:	ecbd 8b02 	vpop	{d8}
 8010a08:	bd10      	pop	{r4, pc}
 8010a0a:	bf00      	nop
 8010a0c:	40490fdb 	.word	0x40490fdb

08010a10 <tVZFilterBell_setFreqFast>:

void    tVZFilterBell_setFreqFast           (tVZFilterBell* const vf, Lfloat cutoff)
{
 8010a10:	b510      	push	{r4, lr}
 8010a12:	ed2d 8b02 	vpush	{d8}
    _tVZFilterBell* f = *vf;
 8010a16:	6804      	ldr	r4, [r0, #0]
    f->cutoffMIDI = cutoff;
 8010a18:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    cutoff *= 30.567164179104478f;
 8010a1c:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8010b50 <tVZFilterBell_setFreqFast+0x140>
 8010a20:	ee20 0a27 	vmul.f32	s0, s0, s15
	int32_t intVer = (int32_t)cutoff;
 8010a24:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010a28:	ee17 3a90 	vmov	r3, s15
	if (intVer > 4094)
 8010a2c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8010a30:	4293      	cmp	r3, r2
 8010a32:	dc03      	bgt.n	8010a3c <tVZFilterBell_setFreqFast+0x2c>
	{
		intVer = 4094;
	}
	if (intVer < 0)
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	da03      	bge.n	8010a40 <tVZFilterBell_setFreqFast+0x30>
	{
		intVer = 0;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	e001      	b.n	8010a40 <tVZFilterBell_setFreqFast+0x30>
		intVer = 4094;
 8010a3c:	f640 73fe 	movw	r3, #4094	; 0xffe
	}
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8010a40:	ee07 3a90 	vmov	s15, r3
 8010a44:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010a48:	ee70 6a66 	vsub.f32	s13, s0, s13
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8010a4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8010a4e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8010a52:	ed91 7a00 	vldr	s14, [r1]
 8010a56:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010a5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010a62:	3301      	adds	r3, #1
 8010a64:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010a68:	edd3 7a00 	vldr	s15, [r3]
 8010a6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010a70:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8010a74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010a78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010a7c:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8010a80:	edd4 7a08 	vldr	s15, [r4, #32]
 8010a84:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8010a88:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010a8c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010a90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010a94:	ee77 7a80 	vadd.f32	s15, s15, s0
	intVer = (int32_t)fl;
 8010a98:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8010a9c:	ee16 3a90 	vmov	r3, s13
	if (intVer > 4094)
 8010aa0:	f640 71fe 	movw	r1, #4094	; 0xffe
 8010aa4:	428b      	cmp	r3, r1
 8010aa6:	dc03      	bgt.n	8010ab0 <tVZFilterBell_setFreqFast+0xa0>
	{
		intVer = 4094;
	}
	if (intVer < 0)
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	da03      	bge.n	8010ab4 <tVZFilterBell_setFreqFast+0xa4>
	{
		intVer = 0;
 8010aac:	2300      	movs	r3, #0
 8010aae:	e001      	b.n	8010ab4 <tVZFilterBell_setFreqFast+0xa4>
		intVer = 4094;
 8010ab0:	f640 73fe 	movw	r3, #4094	; 0xffe
	}
	LfloatVer = fl - (Lfloat)intVer;
 8010ab4:	ee06 3a90 	vmov	s13, r3
 8010ab8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010abc:	ee77 7ae6 	vsub.f32	s15, s15, s13
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8010ac0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8010ac4:	edd1 6a00 	vldr	s13, [r1]
 8010ac8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8010acc:	ee78 5a67 	vsub.f32	s11, s16, s15
 8010ad0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8010ad4:	3301      	adds	r3, #1
 8010ad6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010ada:	edd2 5a00 	vldr	s11, [r2]
 8010ade:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8010ae2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8010ae6:	ee76 6a86 	vadd.f32	s13, s13, s12

    Lfloat r  = f->g/gLower;
 8010aea:	eec7 7a26 	vdiv.f32	s15, s14, s13
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8010aee:	ee67 7aa7 	vmul.f32	s15, s15, s15
    // warped upper bandedge, wc the center
    f->rToUse = r;
 8010af2:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8010af6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010afa:	ee37 7a08 	vadd.f32	s14, s14, s16
 8010afe:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8010b02:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010b06:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010b0a:	edd4 7a07 	vldr	s15, [r4, #28]
 8010b0e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8010b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010b16:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8010b1a:	f000 feeb 	bl	80118f4 <fastsqrtf>
 8010b1e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010b22:	ed84 0a04 	vstr	s0, [r4, #16]
    f->R2Plusg = f->R2+f->g;
 8010b26:	edd4 7a03 	vldr	s15, [r4, #12]
 8010b2a:	ee30 7a27 	vadd.f32	s14, s0, s15
 8010b2e:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010b32:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010b36:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010b3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010b3e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010b42:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8010b46:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8010b4a:	ecbd 8b02 	vpop	{d8}
 8010b4e:	bd10      	pop	{r4, pc}
 8010b50:	41f4898d 	.word	0x41f4898d

08010b54 <tVZFilterBell_setGain>:

void    tVZFilterBell_setGain                  (tVZFilterBell* const vf, Lfloat gain)
{
 8010b54:	b510      	push	{r4, lr}
 8010b56:	ed2d 8b02 	vpush	{d8}
 8010b5a:	eef0 0a40 	vmov.f32	s1, s0
    _tVZFilterBell* f = *vf;
 8010b5e:	6804      	ldr	r4, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8010b60:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8010bd0 <tVZFilterBell_setGain+0x7c>
 8010b64:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8010bd4 <tVZFilterBell_setGain+0x80>
 8010b68:	f001 f842 	bl	8011bf0 <LEAF_clip>
 8010b6c:	ed84 0a07 	vstr	s0, [r4, #28]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8010b70:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8010b74:	ee67 6a07 	vmul.f32	s13, s14, s14
 8010b78:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8010b7c:	ee76 6a88 	vadd.f32	s13, s13, s16
 8010b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b84:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010b88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010b8c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8010b90:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010b94:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8010b98:	f000 feac 	bl	80118f4 <fastsqrtf>
 8010b9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010ba0:	ed84 0a04 	vstr	s0, [r4, #16]
    f->R2Plusg = f->R2+f->g;
 8010ba4:	edd4 7a03 	vldr	s15, [r4, #12]
 8010ba8:	ee30 7a27 	vadd.f32	s14, s0, s15
 8010bac:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8010bb0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010bb4:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010bb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010bbc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010bc0:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8010bc4:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8010bc8:	ecbd 8b02 	vpop	{d8}
 8010bcc:	bd10      	pop	{r4, pc}
 8010bce:	bf00      	nop
 8010bd0:	457a0000 	.word	0x457a0000
 8010bd4:	358637bd 	.word	0x358637bd

08010bd8 <tDiodeFilter_initToPool>:
{
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
 8010bd8:	b570      	push	{r4, r5, r6, lr}
 8010bda:	ed2d 8b02 	vpush	{d8}
 8010bde:	4606      	mov	r6, r0
 8010be0:	eef0 8a40 	vmov.f32	s17, s0
 8010be4:	eeb0 8a60 	vmov.f32	s16, s1
    _tMempool* m = *mp;
 8010be8:	680d      	ldr	r5, [r1, #0]
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8010bea:	4629      	mov	r1, r5
 8010bec:	2048      	movs	r0, #72	; 0x48
 8010bee:	f001 fb53 	bl	8012298 <mpool_alloc>
 8010bf2:	4604      	mov	r4, r0
 8010bf4:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 8010bf6:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 8010bf8:	686d      	ldr	r5, [r5, #4]
    
    f->invSampleRate = leaf->invSampleRate;
 8010bfa:	ed95 0a01 	vldr	s0, [r5, #4]
 8010bfe:	ed80 0a0f 	vstr	s0, [r0, #60]	; 0x3c
    f->cutoff = cutoff;
 8010c02:	edc0 8a01 	vstr	s17, [r0, #4]
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8010c06:	eddf 7a23 	vldr	s15, [pc, #140]	; 8010c94 <tDiodeFilter_initToPool+0xbc>
 8010c0a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8010c0e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010c12:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8010c16:	f006 fc3f 	bl	8017498 <tan>
 8010c1a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8010c1e:	ed84 0a02 	vstr	s0, [r4, #8]
    f->cutoffMIDI = ftom(cutoff);
 8010c22:	eeb0 0a68 	vmov.f32	s0, s17
 8010c26:	f001 fa5f 	bl	80120e8 <ftom>
 8010c2a:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->r = (7.f * resonance + 0.5f);
 8010c2e:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 8010c32:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010c36:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010c3a:	ee38 8a27 	vadd.f32	s16, s16, s15
 8010c3e:	ed84 8a03 	vstr	s16, [r4, #12]
    f->Vt = 0.5f;
 8010c42:	edc4 7a04 	vstr	s15, [r4, #16]
    f->n = 1.836f;
 8010c46:	4b14      	ldr	r3, [pc, #80]	; (8010c98 <tDiodeFilter_initToPool+0xc0>)
 8010c48:	6163      	str	r3, [r4, #20]
    f->zi = 0.0f; //previous input value
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	61e3      	str	r3, [r4, #28]
    f->gamma = f->Vt*f->n;
 8010c4e:	4b13      	ldr	r3, [pc, #76]	; (8010c9c <tDiodeFilter_initToPool+0xc4>)
 8010c50:	61a3      	str	r3, [r4, #24]
    f->s0 = 0.01f;
 8010c52:	4b13      	ldr	r3, [pc, #76]	; (8010ca0 <tDiodeFilter_initToPool+0xc8>)
 8010c54:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->s1 = 0.02f;
 8010c56:	4b13      	ldr	r3, [pc, #76]	; (8010ca4 <tDiodeFilter_initToPool+0xcc>)
 8010c58:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
 8010c5a:	4b13      	ldr	r3, [pc, #76]	; (8010ca8 <tDiodeFilter_initToPool+0xd0>)
 8010c5c:	6363      	str	r3, [r4, #52]	; 0x34
    f->s3 = 0.04f;
 8010c5e:	4b13      	ldr	r3, [pc, #76]	; (8010cac <tDiodeFilter_initToPool+0xd4>)
 8010c60:	63a3      	str	r3, [r4, #56]	; 0x38
    f->g0inv = 1.f/(2.f*f->Vt);
 8010c62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010c66:	6223      	str	r3, [r4, #32]
    f->g1inv = 1.f/(2.f*f->gamma);
 8010c68:	4b11      	ldr	r3, [pc, #68]	; (8010cb0 <tDiodeFilter_initToPool+0xd8>)
 8010c6a:	6263      	str	r3, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 8010c6c:	4b11      	ldr	r3, [pc, #68]	; (8010cb4 <tDiodeFilter_initToPool+0xdc>)
 8010c6e:	62a3      	str	r3, [r4, #40]	; 0x28
    if (leaf->sampleRate > 90000)
 8010c70:	ed95 7a00 	vldr	s14, [r5]
 8010c74:	eddf 7a10 	vldr	s15, [pc, #64]	; 8010cb8 <tDiodeFilter_initToPool+0xe0>
 8010c78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c80:	dd04      	ble.n	8010c8c <tDiodeFilter_initToPool+0xb4>
    {
    	f->table = __filterTanhTable_96000;
 8010c82:	4b0e      	ldr	r3, [pc, #56]	; (8010cbc <tDiodeFilter_initToPool+0xe4>)
 8010c84:	6423      	str	r3, [r4, #64]	; 0x40
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 8010c86:	ecbd 8b02 	vpop	{d8}
 8010c8a:	bd70      	pop	{r4, r5, r6, pc}
    	f->table = __filterTanhTable_48000;
 8010c8c:	4b0c      	ldr	r3, [pc, #48]	; (8010cc0 <tDiodeFilter_initToPool+0xe8>)
 8010c8e:	6423      	str	r3, [r4, #64]	; 0x40
}
 8010c90:	e7f9      	b.n	8010c86 <tDiodeFilter_initToPool+0xae>
 8010c92:	bf00      	nop
 8010c94:	40490fdb 	.word	0x40490fdb
 8010c98:	3feb020c 	.word	0x3feb020c
 8010c9c:	3f6b020c 	.word	0x3f6b020c
 8010ca0:	3c23d70a 	.word	0x3c23d70a
 8010ca4:	3ca3d70a 	.word	0x3ca3d70a
 8010ca8:	3cf5c28f 	.word	0x3cf5c28f
 8010cac:	3d23d70a 	.word	0x3d23d70a
 8010cb0:	3f0b6efd 	.word	0x3f0b6efd
 8010cb4:	3e39e952 	.word	0x3e39e952
 8010cb8:	47afc800 	.word	0x47afc800
 8010cbc:	0801de18 	.word	0x0801de18
 8010cc0:	08019e18 	.word	0x08019e18

08010cc4 <tDiodeFilter_init>:
{
 8010cc4:	b508      	push	{r3, lr}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
 8010cc6:	3118      	adds	r1, #24
 8010cc8:	f7ff ff86 	bl	8010bd8 <tDiodeFilter_initToPool>
}
 8010ccc:	bd08      	pop	{r3, pc}
	...

08010cd0 <tanhXdX>:
    mpool_free((char*)f, f->mempool);
}

Lfloat tanhXdX(Lfloat x)
{
    Lfloat a = x*x;
 8010cd0:	ee20 7a00 	vmul.f32	s14, s0, s0
    // IIRC I got this as Pade-approx for tanh(sqrt(x))/sqrt(x)

    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8010cd4:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8010cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cdc:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8010d18 <tanhXdX+0x48>
 8010ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ce8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8010d1c <tanhXdX+0x4c>
 8010cec:	ee77 7aa6 	vadd.f32	s15, s15, s13

    Lfloat output = 1.0f;
    
    if (testVal!= 0.0f)
 8010cf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cf8:	d101      	bne.n	8010cfe <tanhXdX+0x2e>
    Lfloat output = 1.0f;
 8010cfa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    {
        output = testVal;
        
    }
    return ((a + 105.0f)*a + 945.0f) / output;
 8010cfe:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8010d20 <tanhXdX+0x50>
 8010d02:	ee37 0a00 	vadd.f32	s0, s14, s0
 8010d06:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010d0a:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8010d1c <tanhXdX+0x4c>
 8010d0e:	ee30 0a07 	vadd.f32	s0, s0, s14
}
 8010d12:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8010d16:	4770      	bx	lr
 8010d18:	43d20000 	.word	0x43d20000
 8010d1c:	446c4000 	.word	0x446c4000
 8010d20:	42d20000 	.word	0x42d20000

08010d24 <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
Lfloat   tDiodeFilter_tick               (tDiodeFilter* const vf, Lfloat in)
{
 8010d24:	b510      	push	{r4, lr}
 8010d26:	ed2d 8b0c 	vpush	{d8-d13}
 8010d2a:	eef0 ba40 	vmov.f32	s23, s0
    _tDiodeFilter* f = *vf;
 8010d2e:	6804      	ldr	r4, [r0, #0]
#ifdef SAFE_FILTER
    int errorCheck = 0;
#endif
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
 8010d30:	ed94 0a07 	vldr	s0, [r4, #28]
 8010d34:	ee30 0a2b 	vadd.f32	s0, s0, s23
 8010d38:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010d3c:	ee20 0a27 	vmul.f32	s0, s0, s15
    
    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8010d40:	ed94 da02 	vldr	s26, [r4, #8]
 8010d44:	ed94 ba03 	vldr	s22, [r4, #12]
 8010d48:	ed94 9a0e 	vldr	s18, [r4, #56]	; 0x38
 8010d4c:	ee6b 7a09 	vmul.f32	s15, s22, s18
 8010d50:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010d54:	ed94 aa08 	vldr	s20, [r4, #32]
 8010d58:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8010d5c:	f7ff ffb8 	bl	8010cd0 <tanhXdX>
 8010d60:	ee2d 0a00 	vmul.f32	s0, s26, s0
 8010d64:	ee2a aa00 	vmul.f32	s20, s20, s0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8010d68:	edd4 ca0c 	vldr	s25, [r4, #48]	; 0x30
 8010d6c:	ed94 ca0b 	vldr	s24, [r4, #44]	; 0x2c
 8010d70:	ee3c 0acc 	vsub.f32	s0, s25, s24
 8010d74:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
 8010d78:	ee20 0a28 	vmul.f32	s0, s0, s17
 8010d7c:	f7ff ffa8 	bl	8010cd0 <tanhXdX>
 8010d80:	ee2d 8a00 	vmul.f32	s16, s26, s0
 8010d84:	ee28 8a88 	vmul.f32	s16, s17, s16
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8010d88:	edd4 aa0d 	vldr	s21, [r4, #52]	; 0x34
 8010d8c:	ee3a 0aec 	vsub.f32	s0, s21, s25
 8010d90:	ee28 0a80 	vmul.f32	s0, s17, s0
 8010d94:	f7ff ff9c 	bl	8010cd0 <tanhXdX>
 8010d98:	ee6d 9a00 	vmul.f32	s19, s26, s0
 8010d9c:	ee68 9aa9 	vmul.f32	s19, s17, s19
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8010da0:	ee39 0a6a 	vsub.f32	s0, s18, s21
 8010da4:	ee28 0a80 	vmul.f32	s0, s17, s0
 8010da8:	f7ff ff92 	bl	8010cd0 <tanhXdX>
 8010dac:	ee2d 0a00 	vmul.f32	s0, s26, s0
 8010db0:	ee68 8a80 	vmul.f32	s17, s17, s0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8010db4:	edd4 da0a 	vldr	s27, [r4, #40]	; 0x28
 8010db8:	ee29 0a2d 	vmul.f32	s0, s18, s27
 8010dbc:	f7ff ff88 	bl	8010cd0 <tanhXdX>
 8010dc0:	ee2d da00 	vmul.f32	s26, s26, s0
 8010dc4:	ee2d 7a8d 	vmul.f32	s14, s27, s26
    
    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8010dc8:	ee79 6a2a 	vadd.f32	s13, s18, s21
 8010dcc:	ee7c 7aaa 	vadd.f32	s15, s25, s21
 8010dd0:	ee39 6a27 	vadd.f32	s12, s18, s15
 8010dd4:	ee7c 7a8c 	vadd.f32	s15, s25, s24
 8010dd8:	ee7a 7aa7 	vadd.f32	s15, s21, s15
 8010ddc:	ee79 7a27 	vadd.f32	s15, s18, s15
 8010de0:	ee6b 5a8a 	vmul.f32	s11, s23, s20
 8010de4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010de8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010dec:	ee76 7a27 	vadd.f32	s15, s12, s15
 8010df0:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8010df4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010df8:	ee3a 6aaa 	vadd.f32	s12, s21, s21
 8010dfc:	ee79 7a09 	vadd.f32	s15, s18, s18
 8010e00:	ee36 6a27 	vadd.f32	s12, s12, s15
 8010e04:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010e08:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010e0c:	ee66 6aa8 	vmul.f32	s13, s13, s17
 8010e10:	ee79 6a26 	vadd.f32	s13, s18, s13
 8010e14:	ee27 6a88 	vmul.f32	s12, s15, s16
 8010e18:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010e1c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8010e20:	ee29 6a05 	vmul.f32	s12, s18, s10
 8010e24:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010e28:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010e2c:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8010e30:	ee76 6aa7 	vadd.f32	s13, s13, s15
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8010e34:	ee77 5a07 	vadd.f32	s11, s14, s14
 8010e38:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8010e3c:	ee75 7aa4 	vadd.f32	s15, s11, s9
 8010e40:	ee67 7a88 	vmul.f32	s15, s15, s16
 8010e44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010e48:	ee2b 6a0a 	vmul.f32	s12, s22, s20
 8010e4c:	ee36 6a07 	vadd.f32	s12, s12, s14
 8010e50:	ee36 6a24 	vadd.f32	s12, s12, s9
 8010e54:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010e58:	ee36 6a07 	vadd.f32	s12, s12, s14
 8010e5c:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010e60:	ee26 6a29 	vmul.f32	s12, s12, s19
 8010e64:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010e68:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8010e6c:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8010e70:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8010e74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010e78:	ee35 6aa4 	vadd.f32	s12, s11, s9
 8010e7c:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010e80:	ee77 7a86 	vadd.f32	s15, s15, s12
 8010e84:	ee27 6a05 	vmul.f32	s12, s14, s10
 8010e88:	ee36 6a05 	vadd.f32	s12, s12, s10
 8010e8c:	ee26 6a08 	vmul.f32	s12, s12, s16
 8010e90:	ee75 5a86 	vadd.f32	s11, s11, s12
 8010e94:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8010e98:	ee65 5aa9 	vmul.f32	s11, s11, s19
 8010e9c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010ea0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010ea4:	ee77 7a86 	vadd.f32	s15, s15, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
 8010ea8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eb0:	d101      	bne.n	8010eb6 <tDiodeFilter_tick+0x192>
    {
        tempy3denom = 0.000001f;
 8010eb2:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8010fe8 <tDiodeFilter_tick+0x2c4>
    }
    y3 = y3 / tempy3denom;
 8010eb6:	ee86 6aa7 	vdiv.f32	s12, s13, s15
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8010eba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec2:	d101      	bne.n	8010ec8 <tDiodeFilter_tick+0x1a4>
    {
        t1 = 0.000001f;
 8010ec4:	ed9f 8a48 	vldr	s16, [pc, #288]	; 8010fe8 <tDiodeFilter_tick+0x2c4>
    }
    if (t2 == 0.0f)
 8010ec8:	eef5 9a40 	vcmp.f32	s19, #0.0
 8010ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ed0:	d101      	bne.n	8010ed6 <tDiodeFilter_tick+0x1b2>
    {
        t2 = 0.000001f;
 8010ed2:	eddf 9a45 	vldr	s19, [pc, #276]	; 8010fe8 <tDiodeFilter_tick+0x2c4>
    }
    if (t3 == 0.0f)
 8010ed6:	eef5 8a40 	vcmp.f32	s17, #0.0
 8010eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ede:	d101      	bne.n	8010ee4 <tDiodeFilter_tick+0x1c0>
    {
        t3 = 0.000001f;
 8010ee0:	eddf 8a41 	vldr	s17, [pc, #260]	; 8010fe8 <tDiodeFilter_tick+0x2c4>
    }
    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8010ee4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010ee8:	ee77 6a27 	vadd.f32	s13, s14, s15
 8010eec:	ee76 6aa8 	vadd.f32	s13, s13, s17
 8010ef0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010ef4:	ee79 6a66 	vsub.f32	s13, s18, s13
 8010ef8:	eef1 6a66 	vneg.f32	s13, s13
 8010efc:	ee86 5aa8 	vdiv.f32	s10, s13, s17
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8010f00:	ee78 5aa7 	vadd.f32	s11, s17, s15
 8010f04:	ee75 5aa9 	vadd.f32	s11, s11, s19
 8010f08:	ee65 5a85 	vmul.f32	s11, s11, s10
 8010f0c:	ee7a 5ae5 	vsub.f32	s11, s21, s11
 8010f10:	ee68 6a86 	vmul.f32	s13, s17, s12
 8010f14:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8010f18:	eef1 5a65 	vneg.f32	s11, s11
 8010f1c:	eec5 6aa9 	vdiv.f32	s13, s11, s19
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8010f20:	ee79 7aa7 	vadd.f32	s15, s19, s15
 8010f24:	ee77 7a88 	vadd.f32	s15, s15, s16
 8010f28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010f2c:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 8010f30:	ee69 5a85 	vmul.f32	s11, s19, s10
 8010f34:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8010f38:	eef1 7a67 	vneg.f32	s15, s15
 8010f3c:	eec7 5a88 	vdiv.f32	s11, s15, s16
    Lfloat xx = (in - f->r*y3);
 8010f40:	ee2b ba06 	vmul.f32	s22, s22, s12
 8010f44:	ee7b 7acb 	vsub.f32	s15, s23, s22
    
    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8010f48:	ee2a aa27 	vmul.f32	s20, s20, s15
 8010f4c:	ee76 7ae5 	vsub.f32	s15, s13, s11
 8010f50:	ee27 8a88 	vmul.f32	s16, s15, s16
 8010f54:	ee3a aa08 	vadd.f32	s20, s20, s16
 8010f58:	ee3a aa0a 	vadd.f32	s20, s20, s20
 8010f5c:	ee3c 0a0a 	vadd.f32	s0, s24, s20
 8010f60:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8010f64:	ee75 6a66 	vsub.f32	s13, s10, s13
 8010f68:	ee66 6aa9 	vmul.f32	s13, s13, s19
 8010f6c:	ee36 8ac8 	vsub.f32	s16, s13, s16
 8010f70:	ee38 8a08 	vadd.f32	s16, s16, s16
 8010f74:	ee3c 8a88 	vadd.f32	s16, s25, s16
 8010f78:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8010f7c:	ee36 5a45 	vsub.f32	s10, s12, s10
 8010f80:	ee25 5a28 	vmul.f32	s10, s10, s17
 8010f84:	ee75 6a66 	vsub.f32	s13, s10, s13
 8010f88:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8010f8c:	ee7a aaa6 	vadd.f32	s21, s21, s13
 8010f90:	edc4 aa0d 	vstr	s21, [r4, #52]	; 0x34
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8010f94:	ee27 7a46 	vnmul.f32	s14, s14, s12
 8010f98:	ee37 7a45 	vsub.f32	s14, s14, s10
 8010f9c:	ee37 7a07 	vadd.f32	s14, s14, s14
 8010fa0:	ee39 9a07 	vadd.f32	s18, s18, s14
 8010fa4:	ed84 9a0e 	vstr	s18, [r4, #56]	; 0x38
    
    f->s0 = tanhf(f->s0);
 8010fa8:	f006 fa0e 	bl	80173c8 <tanhf>
 8010fac:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s1 = tanhf(f->s1);
 8010fb0:	eeb0 0a48 	vmov.f32	s0, s16
 8010fb4:	f006 fa08 	bl	80173c8 <tanhf>
 8010fb8:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
    f->s2 = tanhf(f->s2);
 8010fbc:	eeb0 0a6a 	vmov.f32	s0, s21
 8010fc0:	f006 fa02 	bl	80173c8 <tanhf>
 8010fc4:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    f->s3 = tanhf(f->s3);
 8010fc8:	eeb0 0a49 	vmov.f32	s0, s18
 8010fcc:	f006 f9fc 	bl	80173c8 <tanhf>
 8010fd0:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->zi = in;
 8010fd4:	edc4 ba07 	vstr	s23, [r4, #28]
    return tanhf(y3*f->r);
 8010fd8:	eeb0 0a4b 	vmov.f32	s0, s22
 8010fdc:	f006 f9f4 	bl	80173c8 <tanhf>
}
 8010fe0:	ecbd 8b0c 	vpop	{d8-d13}
 8010fe4:	bd10      	pop	{r4, pc}
 8010fe6:	bf00      	nop
 8010fe8:	358637bd 	.word	0x358637bd

08010fec <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
 8010fec:	b510      	push	{r4, lr}
 8010fee:	ed2d 8b0c 	vpush	{d8-d13}
 8010ff2:	eeb0 ca40 	vmov.f32	s24, s0
    _tDiodeFilter* f = *vf;
 8010ff6:	6804      	ldr	r4, [r0, #0]
#ifdef SAFE_FILTER
    int errorCheck = 0;
#endif
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
 8010ff8:	ed94 0a07 	vldr	s0, [r4, #28]
 8010ffc:	ee30 0a0c 	vadd.f32	s0, s0, s24
 8011000:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011004:	ee20 0a27 	vmul.f32	s0, s0, s15

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8011008:	ed94 da02 	vldr	s26, [r4, #8]
 801100c:	edd4 ba03 	vldr	s23, [r4, #12]
 8011010:	edd4 9a0e 	vldr	s19, [r4, #56]	; 0x38
 8011014:	ee6b 7aa9 	vmul.f32	s15, s23, s19
 8011018:	ee30 0a67 	vsub.f32	s0, s0, s15
 801101c:	ed94 aa08 	vldr	s20, [r4, #32]
 8011020:	ee20 0a0a 	vmul.f32	s0, s0, s20
 8011024:	f7ff fe54 	bl	8010cd0 <tanhXdX>
 8011028:	ee2d 0a00 	vmul.f32	s0, s26, s0
 801102c:	ee2a aa00 	vmul.f32	s20, s20, s0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8011030:	ed94 ba0c 	vldr	s22, [r4, #48]	; 0x30
 8011034:	edd4 ca0b 	vldr	s25, [r4, #44]	; 0x2c
 8011038:	ee3b 0a6c 	vsub.f32	s0, s22, s25
 801103c:	edd4 8a09 	vldr	s17, [r4, #36]	; 0x24
 8011040:	ee20 0a28 	vmul.f32	s0, s0, s17
 8011044:	f7ff fe44 	bl	8010cd0 <tanhXdX>
 8011048:	ee2d 8a00 	vmul.f32	s16, s26, s0
 801104c:	ee28 8a88 	vmul.f32	s16, s17, s16
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8011050:	edd4 aa0d 	vldr	s21, [r4, #52]	; 0x34
 8011054:	ee3a 0acb 	vsub.f32	s0, s21, s22
 8011058:	ee28 0a80 	vmul.f32	s0, s17, s0
 801105c:	f7ff fe38 	bl	8010cd0 <tanhXdX>
 8011060:	ee2d 9a00 	vmul.f32	s18, s26, s0
 8011064:	ee28 9a89 	vmul.f32	s18, s17, s18
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8011068:	ee39 0aea 	vsub.f32	s0, s19, s21
 801106c:	ee28 0a80 	vmul.f32	s0, s17, s0
 8011070:	f7ff fe2e 	bl	8010cd0 <tanhXdX>
 8011074:	ee2d 0a00 	vmul.f32	s0, s26, s0
 8011078:	ee68 8a80 	vmul.f32	s17, s17, s0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801107c:	edd4 da0a 	vldr	s27, [r4, #40]	; 0x28
 8011080:	ee29 0aad 	vmul.f32	s0, s19, s27
 8011084:	f7ff fe24 	bl	8010cd0 <tanhXdX>
 8011088:	ee2d da00 	vmul.f32	s26, s26, s0
 801108c:	ee2d 7a8d 	vmul.f32	s14, s27, s26

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8011090:	ee79 6aaa 	vadd.f32	s13, s19, s21
 8011094:	ee7b 7a2a 	vadd.f32	s15, s22, s21
 8011098:	ee39 6aa7 	vadd.f32	s12, s19, s15
 801109c:	ee7b 7a2c 	vadd.f32	s15, s22, s25
 80110a0:	ee7a 7aa7 	vadd.f32	s15, s21, s15
 80110a4:	ee79 7aa7 	vadd.f32	s15, s19, s15
 80110a8:	ee6c 5a0a 	vmul.f32	s11, s24, s20
 80110ac:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80110b0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80110b4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80110b8:	ee67 7a89 	vmul.f32	s15, s15, s18
 80110bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80110c0:	ee3a 6aaa 	vadd.f32	s12, s21, s21
 80110c4:	ee79 7aa9 	vadd.f32	s15, s19, s19
 80110c8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80110cc:	ee26 6a08 	vmul.f32	s12, s12, s16
 80110d0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80110d4:	ee66 6aa8 	vmul.f32	s13, s13, s17
 80110d8:	ee79 6aa6 	vadd.f32	s13, s19, s13
 80110dc:	ee27 6a88 	vmul.f32	s12, s15, s16
 80110e0:	ee76 6a86 	vadd.f32	s13, s13, s12
 80110e4:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 80110e8:	ee29 6a85 	vmul.f32	s12, s19, s10
 80110ec:	ee26 6a08 	vmul.f32	s12, s12, s16
 80110f0:	ee77 7a86 	vadd.f32	s15, s15, s12
 80110f4:	ee67 7a89 	vmul.f32	s15, s15, s18
 80110f8:	ee76 6aa7 	vadd.f32	s13, s13, s15
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80110fc:	ee77 5a07 	vadd.f32	s11, s14, s14
 8011100:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0
 8011104:	ee75 7aa4 	vadd.f32	s15, s11, s9
 8011108:	ee67 7a88 	vmul.f32	s15, s15, s16
 801110c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011110:	ee2b 6a8a 	vmul.f32	s12, s23, s20
 8011114:	ee36 6a07 	vadd.f32	s12, s12, s14
 8011118:	ee36 6a24 	vadd.f32	s12, s12, s9
 801111c:	ee26 6a08 	vmul.f32	s12, s12, s16
 8011120:	ee36 6a07 	vadd.f32	s12, s12, s14
 8011124:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011128:	ee26 6a09 	vmul.f32	s12, s12, s18
 801112c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011130:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8011134:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8011138:	ee67 7aa8 	vmul.f32	s15, s15, s17
 801113c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011140:	ee35 6aa4 	vadd.f32	s12, s11, s9
 8011144:	ee26 6a08 	vmul.f32	s12, s12, s16
 8011148:	ee77 7a86 	vadd.f32	s15, s15, s12
 801114c:	ee27 6a05 	vmul.f32	s12, s14, s10
 8011150:	ee36 6a05 	vadd.f32	s12, s12, s10
 8011154:	ee26 6a08 	vmul.f32	s12, s12, s16
 8011158:	ee75 5a86 	vadd.f32	s11, s11, s12
 801115c:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8011160:	ee65 5a89 	vmul.f32	s11, s11, s18
 8011164:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8011168:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801116c:	ee77 7a86 	vadd.f32	s15, s15, s12
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
 8011170:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011178:	d101      	bne.n	801117e <tDiodeFilter_tickEfficient+0x192>
    {
        tempy3denom = 0.000001f;
 801117a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80112b4 <tDiodeFilter_tickEfficient+0x2c8>
    }

    y3 = y3 / tempy3denom;
 801117e:	ee86 daa7 	vdiv.f32	s26, s13, s15
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8011182:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801118a:	d101      	bne.n	8011190 <tDiodeFilter_tickEfficient+0x1a4>
    {
        t1 = 0.000001f;
 801118c:	ed9f 8a49 	vldr	s16, [pc, #292]	; 80112b4 <tDiodeFilter_tickEfficient+0x2c8>
    }
    if (t2 == 0.0f)
 8011190:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011198:	d101      	bne.n	801119e <tDiodeFilter_tickEfficient+0x1b2>
    {
        t2 = 0.000001f;
 801119a:	ed9f 9a46 	vldr	s18, [pc, #280]	; 80112b4 <tDiodeFilter_tickEfficient+0x2c8>
    }
    if (t3 == 0.0f)
 801119e:	eef5 8a40 	vcmp.f32	s17, #0.0
 80111a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111a6:	d101      	bne.n	80111ac <tDiodeFilter_tickEfficient+0x1c0>
    {
        t3 = 0.000001f;
 80111a8:	eddf 8a42 	vldr	s17, [pc, #264]	; 80112b4 <tDiodeFilter_tickEfficient+0x2c8>
    }

    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80111ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80111b0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80111b4:	ee76 6aa8 	vadd.f32	s13, s13, s17
 80111b8:	ee66 6a8d 	vmul.f32	s13, s13, s26
 80111bc:	ee79 6ae6 	vsub.f32	s13, s19, s13
 80111c0:	eef1 6a66 	vneg.f32	s13, s13
 80111c4:	eec6 5aa8 	vdiv.f32	s11, s13, s17
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 80111c8:	ee38 6aa7 	vadd.f32	s12, s17, s15
 80111cc:	ee36 6a09 	vadd.f32	s12, s12, s18
 80111d0:	ee26 6a25 	vmul.f32	s12, s12, s11
 80111d4:	ee3a 6ac6 	vsub.f32	s12, s21, s12
 80111d8:	ee68 6a8d 	vmul.f32	s13, s17, s26
 80111dc:	ee36 6a26 	vadd.f32	s12, s12, s13
 80111e0:	eeb1 6a46 	vneg.f32	s12, s12
 80111e4:	eec6 6a09 	vdiv.f32	s13, s12, s18
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80111e8:	ee79 7a27 	vadd.f32	s15, s18, s15
 80111ec:	ee77 7a88 	vadd.f32	s15, s15, s16
 80111f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80111f4:	ee7b 7a67 	vsub.f32	s15, s22, s15
 80111f8:	ee29 6a25 	vmul.f32	s12, s18, s11
 80111fc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011200:	eef1 7a67 	vneg.f32	s15, s15
 8011204:	ee87 6a88 	vdiv.f32	s12, s15, s16
    Lfloat xx = (in - f->r*y3);
 8011208:	ee6b ba8d 	vmul.f32	s23, s23, s26
 801120c:	ee7c ba6b 	vsub.f32	s23, s24, s23

    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8011210:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8011214:	ee76 7ac6 	vsub.f32	s15, s13, s12
 8011218:	ee67 7a88 	vmul.f32	s15, s15, s16
 801121c:	ee3a aa27 	vadd.f32	s20, s20, s15
 8011220:	ee3a aa0a 	vadd.f32	s20, s20, s20
 8011224:	ee3c 0a8a 	vadd.f32	s0, s25, s20
 8011228:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 801122c:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8011230:	ee66 6a89 	vmul.f32	s13, s13, s18
 8011234:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011238:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801123c:	ee3b ba27 	vadd.f32	s22, s22, s15
 8011240:	ed84 ba0c 	vstr	s22, [r4, #48]	; 0x30
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8011244:	ee7d 5a65 	vsub.f32	s11, s26, s11
 8011248:	ee65 5aa8 	vmul.f32	s11, s11, s17
 801124c:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8011250:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8011254:	ee7a aaa6 	vadd.f32	s21, s21, s13
 8011258:	edc4 aa0d 	vstr	s21, [r4, #52]	; 0x34
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 801125c:	ee27 7a4d 	vnmul.f32	s14, s14, s26
 8011260:	ee37 7a65 	vsub.f32	s14, s14, s11
 8011264:	ee37 7a07 	vadd.f32	s14, s14, s14
 8011268:	ee79 9a87 	vadd.f32	s19, s19, s14
 801126c:	edc4 9a0e 	vstr	s19, [r4, #56]	; 0x38
    f->s0 = fast_tanh4(f->s0);
 8011270:	f000 fcf6 	bl	8011c60 <fast_tanh4>
 8011274:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s1 = fast_tanh4(f->s1);
 8011278:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 801127c:	f000 fcf0 	bl	8011c60 <fast_tanh4>
 8011280:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
    f->s2 = fast_tanh4(f->s2);
 8011284:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8011288:	f000 fcea 	bl	8011c60 <fast_tanh4>
 801128c:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    f->s3 = fast_tanh4(f->s3);
 8011290:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
 8011294:	f000 fce4 	bl	8011c60 <fast_tanh4>
 8011298:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->zi = in;
 801129c:	ed84 ca07 	vstr	s24, [r4, #28]
    return fast_tanh4(y3*f->r);
 80112a0:	ed94 0a03 	vldr	s0, [r4, #12]
 80112a4:	ee20 0a0d 	vmul.f32	s0, s0, s26
 80112a8:	f000 fcda 	bl	8011c60 <fast_tanh4>
}
 80112ac:	ecbd 8b0c 	vpop	{d8-d13}
 80112b0:	bd10      	pop	{r4, pc}
 80112b2:	bf00      	nop
 80112b4:	358637bd 	.word	0x358637bd

080112b8 <tDiodeFilter_setFreqFast>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
 80112b8:	6801      	ldr	r1, [r0, #0]
	f->cutoffMIDI = cutoff;
 80112ba:	ed81 0a11 	vstr	s0, [r1, #68]	; 0x44
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
 80112be:	eddf 7a17 	vldr	s15, [pc, #92]	; 801131c <tDiodeFilter_setFreqFast+0x64>
 80112c2:	ee20 0a27 	vmul.f32	s0, s0, s15

    int32_t intVer = (int32_t)cutoff;
 80112c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80112ca:	ee17 3a90 	vmov	r3, s15
    if (intVer > 4094)
 80112ce:	f640 72fe 	movw	r2, #4094	; 0xffe
 80112d2:	4293      	cmp	r3, r2
 80112d4:	dc03      	bgt.n	80112de <tDiodeFilter_setFreqFast+0x26>
    {
    	intVer = 4094;
    }
    if (intVer < 0)
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	da03      	bge.n	80112e2 <tDiodeFilter_setFreqFast+0x2a>
    {
    	intVer = 0;
 80112da:	2300      	movs	r3, #0
 80112dc:	e001      	b.n	80112e2 <tDiodeFilter_setFreqFast+0x2a>
    	intVer = 4094;
 80112de:	f640 73fe 	movw	r3, #4094	; 0xffe
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80112e2:	ee07 3a90 	vmov	s15, r3
 80112e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80112ea:	ee30 0a67 	vsub.f32	s0, s0, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80112ee:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80112f0:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 80112f4:	edd0 7a00 	vldr	s15, [r0]
 80112f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112fc:	ee37 7a40 	vsub.f32	s14, s14, s0
 8011300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011304:	3301      	adds	r3, #1
 8011306:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801130a:	ed92 7a00 	vldr	s14, [r2]
 801130e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011312:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011316:	edc1 7a02 	vstr	s15, [r1, #8]
}
 801131a:	4770      	bx	lr
 801131c:	41f4898d 	.word	0x41f4898d

08011320 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
 8011320:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 8011322:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 8011324:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 8011328:	ee60 0a27 	vmul.f32	s1, s0, s15
 801132c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8011330:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8011334:	ee70 0a80 	vadd.f32	s1, s1, s0
 8011338:	f000 fc5a 	bl	8011bf0 <LEAF_clip>
 801133c:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8011340:	bd10      	pop	{r4, pc}
	...

08011344 <tDiodeFilter_setSampleRate>:

void    tDiodeFilter_setSampleRate(tDiodeFilter* const vf, Lfloat sr)
{
    _tDiodeFilter* f = *vf;
 8011344:	6803      	ldr	r3, [r0, #0]
    
    f->invSampleRate = 1.0f/sr;
 8011346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801134a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801134e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    if (sr > 90000)
 8011352:	eddf 7a06 	vldr	s15, [pc, #24]	; 801136c <tDiodeFilter_setSampleRate+0x28>
 8011356:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801135e:	dd02      	ble.n	8011366 <tDiodeFilter_setSampleRate+0x22>
    {
    	f->table = __filterTanhTable_96000;
 8011360:	4a03      	ldr	r2, [pc, #12]	; (8011370 <tDiodeFilter_setSampleRate+0x2c>)
 8011362:	641a      	str	r2, [r3, #64]	; 0x40
 8011364:	4770      	bx	lr
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8011366:	4a03      	ldr	r2, [pc, #12]	; (8011374 <tDiodeFilter_setSampleRate+0x30>)
 8011368:	641a      	str	r2, [r3, #64]	; 0x40
    }
}
 801136a:	4770      	bx	lr
 801136c:	47afc800 	.word	0x47afc800
 8011370:	0801de18 	.word	0x0801de18
 8011374:	08019e18 	.word	0x08019e18

08011378 <tLadderFilter_initToPool>:
{
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
 8011378:	b570      	push	{r4, r5, r6, lr}
 801137a:	ed2d 8b02 	vpush	{d8}
 801137e:	4606      	mov	r6, r0
 8011380:	eeb0 8a40 	vmov.f32	s16, s0
 8011384:	eef0 8a60 	vmov.f32	s17, s1
    _tMempool* m = *mp;
 8011388:	680d      	ldr	r5, [r1, #0]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 801138a:	4629      	mov	r1, r5
 801138c:	2040      	movs	r0, #64	; 0x40
 801138e:	f000 ff83 	bl	8012298 <mpool_alloc>
 8011392:	4604      	mov	r4, r0
 8011394:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 8011396:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
 8011398:	686d      	ldr	r5, [r5, #4]
    
    f->invSampleRate = leaf->invSampleRate;
 801139a:	686b      	ldr	r3, [r5, #4]
 801139c:	6083      	str	r3, [r0, #8]
    f->cutoff = cutoff;
 801139e:	ed80 8a01 	vstr	s16, [r0, #4]
    f->cutoffMIDI = ftom(cutoff);
 80113a2:	eeb0 0a48 	vmov.f32	s0, s16
 80113a6:	f000 fe9f 	bl	80120e8 <ftom>
 80113aa:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->oversampling = 1;
 80113ae:	2301      	movs	r3, #1
 80113b0:	60e3      	str	r3, [r4, #12]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 80113b2:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8011428 <tLadderFilter_initToPool+0xb0>
 80113b6:	ee28 0a27 	vmul.f32	s0, s16, s15
 80113ba:	edd4 7a02 	vldr	s15, [r4, #8]
 80113be:	ee20 0a27 	vmul.f32	s0, s0, s15
 80113c2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80113c6:	f006 f867 	bl	8017498 <tan>
 80113ca:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80113ce:	ed84 0a04 	vstr	s0, [r4, #16]
    f->c2 = 2.0f * f->c;
 80113d2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80113d6:	ed84 0a06 	vstr	s0, [r4, #24]
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 80113da:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80113de:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80113e2:	edc4 8a05 	vstr	s17, [r4, #20]

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 80113e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80113ea:	61e3      	str	r3, [r4, #28]
    f->s = 0.1f;
 80113ec:	4b0f      	ldr	r3, [pc, #60]	; (801142c <tLadderFilter_initToPool+0xb4>)
 80113ee:	6223      	str	r3, [r4, #32]
    f->d = 1.0f;
 80113f0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80113f4:	6263      	str	r3, [r4, #36]	; 0x24
    
    
    f->b[0] = 0.01f;
 80113f6:	4b0e      	ldr	r3, [pc, #56]	; (8011430 <tLadderFilter_initToPool+0xb8>)
 80113f8:	62a3      	str	r3, [r4, #40]	; 0x28
    f->b[0] = 0.02f;
 80113fa:	4b0e      	ldr	r3, [pc, #56]	; (8011434 <tLadderFilter_initToPool+0xbc>)
 80113fc:	62a3      	str	r3, [r4, #40]	; 0x28
    f->b[0] = 0.03f;
 80113fe:	4b0e      	ldr	r3, [pc, #56]	; (8011438 <tLadderFilter_initToPool+0xc0>)
 8011400:	62a3      	str	r3, [r4, #40]	; 0x28
    f->b[0] = 0.04f;
 8011402:	4b0e      	ldr	r3, [pc, #56]	; (801143c <tLadderFilter_initToPool+0xc4>)
 8011404:	62a3      	str	r3, [r4, #40]	; 0x28
    if (leaf->sampleRate > 90000)
 8011406:	ed95 7a00 	vldr	s14, [r5]
 801140a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8011440 <tLadderFilter_initToPool+0xc8>
 801140e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011416:	dd04      	ble.n	8011422 <tLadderFilter_initToPool+0xaa>
    {
    	f->table = __filterTanhTable_96000;
 8011418:	4b0a      	ldr	r3, [pc, #40]	; (8011444 <tLadderFilter_initToPool+0xcc>)
 801141a:	63a3      	str	r3, [r4, #56]	; 0x38
    }
    else
    {
    	f->table = __filterTanhTable_48000;
    }
}
 801141c:	ecbd 8b02 	vpop	{d8}
 8011420:	bd70      	pop	{r4, r5, r6, pc}
    	f->table = __filterTanhTable_48000;
 8011422:	4b09      	ldr	r3, [pc, #36]	; (8011448 <tLadderFilter_initToPool+0xd0>)
 8011424:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8011426:	e7f9      	b.n	801141c <tLadderFilter_initToPool+0xa4>
 8011428:	40490fdb 	.word	0x40490fdb
 801142c:	3dcccccd 	.word	0x3dcccccd
 8011430:	3c23d70a 	.word	0x3c23d70a
 8011434:	3ca3d70a 	.word	0x3ca3d70a
 8011438:	3cf5c28f 	.word	0x3cf5c28f
 801143c:	3d23d70a 	.word	0x3d23d70a
 8011440:	47afc800 	.word	0x47afc800
 8011444:	0801de18 	.word	0x0801de18
 8011448:	08019e18 	.word	0x08019e18

0801144c <tLadderFilter_init>:
{
 801144c:	b508      	push	{r3, lr}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
 801144e:	3118      	adds	r1, #24
 8011450:	f7ff ff92 	bl	8011378 <tLadderFilter_initToPool>
}
 8011454:	bd08      	pop	{r3, pc}

08011456 <smoothABS>:
    _tLadderFilter* f = *vf;
    mpool_free((char*)f, f->mempool);
}

Lfloat smoothABS ( Lfloat x, const Lfloat y) // y controls 'smoothness' usually between 0.002 -> 0.04
{
 8011456:	b508      	push	{r3, lr}
 8011458:	ed2d 8b02 	vpush	{d8}
 801145c:	eeb0 8a60 	vmov.f32	s16, s1
//		Lfloat output2;
//		arm_sqrt_f32((x * x)  + y, &output1);
//		arm_sqrt_f32(y, &output2);
//		return output1 - output2;
//	#else
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8011460:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011464:	ee30 0a20 	vadd.f32	s0, s0, s1
 8011468:	f005 ff56 	bl	8017318 <sqrtf>
 801146c:	eef0 8a40 	vmov.f32	s17, s0
 8011470:	eeb0 0a48 	vmov.f32	s0, s16
 8011474:	f005 ff50 	bl	8017318 <sqrtf>
//	#endif
}
 8011478:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801147c:	ecbd 8b02 	vpop	{d8}
 8011480:	bd08      	pop	{r3, pc}
	...

08011484 <smoothclip>:

Lfloat smoothclip (Lfloat x, const Lfloat a, const Lfloat b) // assuming symmetrical clipping
{
 8011484:	b508      	push	{r3, lr}
 8011486:	ed2d 8b06 	vpush	{d8-d10}
 801148a:	eeb0 9a40 	vmov.f32	s18, s0
 801148e:	eeb0 8a60 	vmov.f32	s16, s1
 8011492:	eef0 8a41 	vmov.f32	s17, s2
    Lfloat  x1 = smoothABS (x-a, 0.01f);
 8011496:	ed9f aa0e 	vldr	s20, [pc, #56]	; 80114d0 <smoothclip+0x4c>
 801149a:	eef0 0a4a 	vmov.f32	s1, s20
 801149e:	ee30 0a48 	vsub.f32	s0, s0, s16
 80114a2:	f7ff ffd8 	bl	8011456 <smoothABS>
 80114a6:	eef0 9a40 	vmov.f32	s19, s0
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 80114aa:	eef0 0a4a 	vmov.f32	s1, s20
 80114ae:	ee39 0a68 	vsub.f32	s0, s18, s17
 80114b2:	f7ff ffd0 	bl	8011456 <smoothABS>
    x = x1 + (a+b);
 80114b6:	ee38 8a28 	vadd.f32	s16, s16, s17
 80114ba:	ee38 8a29 	vadd.f32	s16, s16, s19
    x = x - x2;
 80114be:	ee38 8a40 	vsub.f32	s16, s16, s0
    x = x * 0.5;
    return (x);
}
 80114c2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80114c6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80114ca:	ecbd 8b06 	vpop	{d8-d10}
 80114ce:	bd08      	pop	{r3, pc}
 80114d0:	3c23d70a 	.word	0x3c23d70a

080114d4 <tanhd>:

Lfloat tanhd(const Lfloat x, const Lfloat d, const Lfloat s)
{
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80114d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80114d8:	ee70 7a87 	vadd.f32	s15, s1, s14
 80114dc:	ee67 7a81 	vmul.f32	s15, s15, s2
 80114e0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80114e4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80114e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80114ec:	ee70 0a20 	vadd.f32	s1, s0, s1
 80114f0:	ee87 0aa0 	vdiv.f32	s0, s15, s1
}
 80114f4:	ee37 0a40 	vsub.f32	s0, s14, s0
 80114f8:	4770      	bx	lr
	...

080114fc <tLadderFilter_tick>:

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
 80114fc:	b538      	push	{r3, r4, r5, lr}
 80114fe:	ed2d 8b0e 	vpush	{d8-d14}
    _tLadderFilter* f = *vf;
 8011502:	6804      	ldr	r4, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
 8011504:	eddf 7a8e 	vldr	s15, [pc, #568]	; 8011740 <tLadderFilter_tick+0x244>
 8011508:	ee70 da27 	vadd.f32	s27, s0, s15
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 801150c:	2500      	movs	r5, #0
    Lfloat y3 = 0.0f;
 801150e:	ed9f aa8d 	vldr	s20, [pc, #564]	; 8011744 <tLadderFilter_tick+0x248>
    for (int i = 0; i < f->oversampling; i++) {
 8011512:	e100      	b.n	8011716 <tLadderFilter_tick+0x21a>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8011514:	ed94 ca0a 	vldr	s24, [r4, #40]	; 0x28
 8011518:	ed94 aa07 	vldr	s20, [r4, #28]
 801151c:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
 8011520:	ed94 ba08 	vldr	s22, [r4, #32]
 8011524:	eeb0 1a4b 	vmov.f32	s2, s22
 8011528:	eef0 0a6a 	vmov.f32	s1, s21
 801152c:	ee3c 0a0a 	vadd.f32	s0, s24, s20
 8011530:	f7ff ffd0 	bl	80114d4 <tanhd>
 8011534:	eef0 8a40 	vmov.f32	s17, s0
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 8011538:	edd4 ca0b 	vldr	s25, [r4, #44]	; 0x2c
 801153c:	eeb0 1a4b 	vmov.f32	s2, s22
 8011540:	eef0 0a6a 	vmov.f32	s1, s21
 8011544:	ee3a 0a2c 	vadd.f32	s0, s20, s25
 8011548:	f7ff ffc4 	bl	80114d4 <tanhd>
 801154c:	eeb0 8a40 	vmov.f32	s16, s0
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 8011550:	ed94 ea0c 	vldr	s28, [r4, #48]	; 0x30
 8011554:	eeb0 1a4b 	vmov.f32	s2, s22
 8011558:	eef0 0a6a 	vmov.f32	s1, s21
 801155c:	ee3a 0a0e 	vadd.f32	s0, s20, s28
 8011560:	f7ff ffb8 	bl	80114d4 <tanhd>
 8011564:	eeb0 9a40 	vmov.f32	s18, s0
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 8011568:	edd4 9a0d 	vldr	s19, [r4, #52]	; 0x34
 801156c:	eeb0 1a4b 	vmov.f32	s2, s22
 8011570:	eef0 0a6a 	vmov.f32	s1, s21
 8011574:	ee3a 0a29 	vadd.f32	s0, s20, s19
 8011578:	f7ff ffac 	bl	80114d4 <tanhd>
 801157c:	eeb0 aa40 	vmov.f32	s20, s0
        
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 8011580:	edd4 7a04 	vldr	s15, [r4, #16]
 8011584:	ee27 3aa8 	vmul.f32	s6, s15, s17
 8011588:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801158c:	ee33 5a01 	vadd.f32	s10, s6, s2
 8011590:	ee81 da05 	vdiv.f32	s26, s2, s10
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 8011594:	ee67 3a88 	vmul.f32	s7, s15, s16
 8011598:	ee73 5a81 	vadd.f32	s11, s7, s2
 801159c:	eec1 ba25 	vdiv.f32	s23, s2, s11
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 80115a0:	ee27 4a89 	vmul.f32	s8, s15, s18
 80115a4:	ee34 6a01 	vadd.f32	s12, s8, s2
 80115a8:	ee81 ba06 	vdiv.f32	s22, s2, s12
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 80115ac:	ee67 4a80 	vmul.f32	s9, s15, s0
 80115b0:	ee34 7a81 	vadd.f32	s14, s9, s2
 80115b4:	eec1 aa07 	vdiv.f32	s21, s2, s14
        
        Lfloat z0 = f->c*t0 / (1.0f + f->c*t0);
 80115b8:	eec3 6a05 	vdiv.f32	s13, s6, s10
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
 80115bc:	ee83 5aa5 	vdiv.f32	s10, s7, s11
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
 80115c0:	eec4 5a06 	vdiv.f32	s11, s8, s12
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
 80115c4:	ee84 6a87 	vdiv.f32	s12, s9, s14
        
        Lfloat f3 = f->c       * t2*g3;
 80115c8:	ee24 4a2a 	vmul.f32	s8, s8, s21
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
 80115cc:	ee67 3aa7 	vmul.f32	s7, s15, s15
 80115d0:	ee63 4a88 	vmul.f32	s9, s7, s16
 80115d4:	ee64 4a8b 	vmul.f32	s9, s9, s22
 80115d8:	ee64 4a89 	vmul.f32	s9, s9, s18
 80115dc:	ee64 4aaa 	vmul.f32	s9, s9, s21
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 80115e0:	ee67 3aa3 	vmul.f32	s7, s15, s7
 80115e4:	ee23 7aa8 	vmul.f32	s14, s7, s17
 80115e8:	ee27 7a2b 	vmul.f32	s14, s14, s23
 80115ec:	ee27 7a08 	vmul.f32	s14, s14, s16
 80115f0:	ee27 7a0b 	vmul.f32	s14, s14, s22
 80115f4:	ee27 7a09 	vmul.f32	s14, s14, s18
 80115f8:	ee27 7a2a 	vmul.f32	s14, s14, s21
        Lfloat f0 = f->c*f->c*f->c*f->c *    g0 * t0*g1 * t1*g2 * t2*g3;
 80115fc:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8011600:	ee67 7a8d 	vmul.f32	s15, s15, s26
 8011604:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8011608:	ee67 7aab 	vmul.f32	s15, s15, s23
 801160c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8011610:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8011614:	ee67 7a89 	vmul.f32	s15, s15, s18
 8011618:	ee67 7aaa 	vmul.f32	s15, s15, s21
        
        Lfloat estimate =
        g3 * f->b[3] +
 801161c:	ee29 0aaa 	vmul.f32	s0, s19, s21
        f3 * g2 * f->b[2] +
 8011620:	ee2b 4a04 	vmul.f32	s8, s22, s8
 8011624:	ee2e ea04 	vmul.f32	s28, s28, s8
        g3 * f->b[3] +
 8011628:	ee30 0a0e 	vadd.f32	s0, s0, s28
        f2 * g1 * f->b[1] +
 801162c:	ee6b 4aa4 	vmul.f32	s9, s23, s9
 8011630:	ee6c caa4 	vmul.f32	s25, s25, s9
        f3 * g2 * f->b[2] +
 8011634:	ee30 0a2c 	vadd.f32	s0, s0, s25
        f1 * g0 * f->b[0] +
 8011638:	ee2d 7a07 	vmul.f32	s14, s26, s14
 801163c:	ee2c ca07 	vmul.f32	s24, s24, s14
        f2 * g1 * f->b[1] +
 8011640:	ee30 0a0c 	vadd.f32	s0, s0, s24
        f0 * in;
 8011644:	ee6d 7aa7 	vmul.f32	s15, s27, s15
        Lfloat estimate =
 8011648:	ee70 7a27 	vadd.f32	s15, s0, s15
        
        // feedback gain coefficient, absolutely critical to get this correct
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 801164c:	ed94 0a05 	vldr	s0, [r4, #20]
 8011650:	ee20 7a26 	vmul.f32	s14, s0, s13
 8011654:	ee27 7a05 	vmul.f32	s14, s14, s10
 8011658:	ee27 7a25 	vmul.f32	s14, s14, s11
 801165c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011660:	ee37 7a01 	vadd.f32	s14, s14, s2
 8011664:	eec1 9a07 	vdiv.f32	s19, s2, s14
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8011668:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 801166c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011670:	f7ff ff08 	bl	8011484 <smoothclip>
 8011674:	ee20 0a29 	vmul.f32	s0, s0, s19
 8011678:	ee3d 0ac0 	vsub.f32	s0, s27, s0
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 801167c:	ee68 8a8d 	vmul.f32	s17, s17, s26
 8011680:	edd4 5a0a 	vldr	s11, [r4, #40]	; 0x28
 8011684:	edd4 7a04 	vldr	s15, [r4, #16]
 8011688:	ee27 7a80 	vmul.f32	s14, s15, s0
 801168c:	ee35 7a87 	vadd.f32	s14, s11, s14
 8011690:	ee68 8a87 	vmul.f32	s17, s17, s14
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8011694:	ee28 8a2b 	vmul.f32	s16, s16, s23
 8011698:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 801169c:	ee27 7aa8 	vmul.f32	s14, s15, s17
 80116a0:	ee36 7a07 	vadd.f32	s14, s12, s14
 80116a4:	ee28 8a07 	vmul.f32	s16, s16, s14
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 80116a8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80116ac:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80116b0:	ee27 7a88 	vmul.f32	s14, s15, s16
 80116b4:	ee36 7a87 	vadd.f32	s14, s13, s14
 80116b8:	ee29 9a07 	vmul.f32	s18, s18, s14
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 80116bc:	ee2a aa2a 	vmul.f32	s20, s20, s21
 80116c0:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
 80116c4:	ee67 7a89 	vmul.f32	s15, s15, s18
 80116c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116cc:	ee2a aa27 	vmul.f32	s20, s20, s15
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
 80116d0:	edd4 7a06 	vldr	s15, [r4, #24]
 80116d4:	ee30 0a68 	vsub.f32	s0, s0, s17
 80116d8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80116dc:	ee75 5a80 	vadd.f32	s11, s11, s0
 80116e0:	edc4 5a0a 	vstr	s11, [r4, #40]	; 0x28
        f->b[1] += f->c2 * (y0 - y1);
 80116e4:	ee78 8ac8 	vsub.f32	s17, s17, s16
 80116e8:	ee67 8aa8 	vmul.f32	s17, s15, s17
 80116ec:	ee36 6a28 	vadd.f32	s12, s12, s17
 80116f0:	ed84 6a0b 	vstr	s12, [r4, #44]	; 0x2c
        f->b[2] += f->c2 * (y1 - y2);
 80116f4:	ee38 8a49 	vsub.f32	s16, s16, s18
 80116f8:	ee27 8a88 	vmul.f32	s16, s15, s16
 80116fc:	ee76 6a88 	vadd.f32	s13, s13, s16
 8011700:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
        f->b[3] += f->c2 * (y2 - y3);
 8011704:	ee39 9a4a 	vsub.f32	s18, s18, s20
 8011708:	ee67 7a89 	vmul.f32	s15, s15, s18
 801170c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011710:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    for (int i = 0; i < f->oversampling; i++) {
 8011714:	3501      	adds	r5, #1
 8011716:	68e3      	ldr	r3, [r4, #12]
 8011718:	42ab      	cmp	r3, r5
 801171a:	f73f aefb 	bgt.w	8011514 <tLadderFilter_tick+0x18>
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 801171e:	eeb1 1a00 	vmov.f32	s2, #16	; 0x40800000  4.0
 8011722:	eddf 0a08 	vldr	s1, [pc, #32]	; 8011744 <tLadderFilter_tick+0x248>
 8011726:	ed94 0a05 	vldr	s0, [r4, #20]
 801172a:	f7ff feab 	bl	8011484 <smoothclip>
 801172e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011732:	ee30 0a27 	vadd.f32	s0, s0, s15
    return y3 * compensation;
}
 8011736:	ee2a 0a00 	vmul.f32	s0, s20, s0
 801173a:	ecbd 8b0e 	vpop	{d8-d14}
 801173e:	bd38      	pop	{r3, r4, r5, pc}
 8011740:	3c75c28f 	.word	0x3c75c28f
 8011744:	00000000 	.word	0x00000000

08011748 <tLadderFilter_setFreqFast>:
    f->c2 = 2.0f * f->c;
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
 8011748:	6802      	ldr	r2, [r0, #0]
    f->cutoffMIDI = cutoff;
 801174a:	ed82 0a0f 	vstr	s0, [r2, #60]	; 0x3c
    cutoff *= 30.567164179104478f;
 801174e:	eddf 7a19 	vldr	s15, [pc, #100]	; 80117b4 <tLadderFilter_setFreqFast+0x6c>
 8011752:	ee20 0a27 	vmul.f32	s0, s0, s15
    int32_t intVer = (int32_t)cutoff;
 8011756:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801175a:	ee17 3a90 	vmov	r3, s15
    if (intVer > 4094)
 801175e:	f640 71fe 	movw	r1, #4094	; 0xffe
 8011762:	428b      	cmp	r3, r1
 8011764:	dc03      	bgt.n	801176e <tLadderFilter_setFreqFast+0x26>
    {
    	intVer = 4094;
    }
    if (intVer < 0)
 8011766:	2b00      	cmp	r3, #0
 8011768:	da03      	bge.n	8011772 <tLadderFilter_setFreqFast+0x2a>
    {
    	intVer = 0;
 801176a:	2300      	movs	r3, #0
 801176c:	e001      	b.n	8011772 <tLadderFilter_setFreqFast+0x2a>
    	intVer = 4094;
 801176e:	f640 73fe 	movw	r3, #4094	; 0xffe
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011772:	ee07 3a90 	vmov	s15, r3
 8011776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801177a:	ee30 0a67 	vsub.f32	s0, s0, s15

    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 801177e:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8011780:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8011784:	edd0 7a00 	vldr	s15, [r0]
 8011788:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801178c:	ee37 7a40 	vsub.f32	s14, s14, s0
 8011790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011794:	3301      	adds	r3, #1
 8011796:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801179a:	ed91 7a00 	vldr	s14, [r1]
 801179e:	ee27 7a00 	vmul.f32	s14, s14, s0
 80117a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80117a6:	edc2 7a04 	vstr	s15, [r2, #16]
    f->c2 = 2.0f * f->c;
 80117aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80117ae:	edc2 7a06 	vstr	s15, [r2, #24]
}
 80117b2:	4770      	bx	lr
 80117b4:	41f4898d 	.word	0x41f4898d

080117b8 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
 80117b8:	b510      	push	{r4, lr}
 80117ba:	eef0 0a40 	vmov.f32	s1, s0
    _tLadderFilter* f = *vf;
 80117be:	6804      	ldr	r4, [r0, #0]
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 80117c0:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 80117c4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80117d4 <tLadderFilter_setQ+0x1c>
 80117c8:	f000 fa12 	bl	8011bf0 <LEAF_clip>
 80117cc:	ed84 0a05 	vstr	s0, [r4, #20]
}
 80117d0:	bd10      	pop	{r4, pc}
 80117d2:	bf00      	nop
 80117d4:	3e4ccccd 	.word	0x3e4ccccd

080117d8 <tLadderFilter_setSampleRate>:

void    tLadderFilter_setSampleRate(tLadderFilter* const vf, Lfloat sr)
{
    _tLadderFilter* f = *vf;
 80117d8:	6803      	ldr	r3, [r0, #0]
    
    f->invSampleRate = 1.0f/sr;
 80117da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80117de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80117e2:	edc3 7a02 	vstr	s15, [r3, #8]
    if (sr > 90000)
 80117e6:	eddf 7a06 	vldr	s15, [pc, #24]	; 8011800 <tLadderFilter_setSampleRate+0x28>
 80117ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80117ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117f2:	dd02      	ble.n	80117fa <tLadderFilter_setSampleRate+0x22>
    {
    	f->table = __filterTanhTable_96000;
 80117f4:	4a03      	ldr	r2, [pc, #12]	; (8011804 <tLadderFilter_setSampleRate+0x2c>)
 80117f6:	639a      	str	r2, [r3, #56]	; 0x38
 80117f8:	4770      	bx	lr
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 80117fa:	4a03      	ldr	r2, [pc, #12]	; (8011808 <tLadderFilter_setSampleRate+0x30>)
 80117fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
}
 80117fe:	4770      	bx	lr
 8011800:	47afc800 	.word	0x47afc800
 8011804:	0801de18 	.word	0x0801de18
 8011808:	08019e18 	.word	0x08019e18

0801180c <LEAF_map>:
    return(fraction);
}

inline float LEAF_map(float value, float istart, float istop, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 801180c:	ee32 2a61 	vsub.f32	s4, s4, s3
 8011810:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011814:	ee31 1a60 	vsub.f32	s2, s2, s1
 8011818:	eec0 7a01 	vdiv.f32	s15, s0, s2
 801181c:	ee22 2a27 	vmul.f32	s4, s4, s15
}
 8011820:	ee32 0a21 	vadd.f32	s0, s4, s3
 8011824:	4770      	bx	lr

08011826 <LEAF_mapFromZeroToOneInput>:

inline float LEAF_mapFromZeroToOneInput(float value, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * value;
 8011826:	ee31 1a60 	vsub.f32	s2, s2, s1
 801182a:	ee21 0a00 	vmul.f32	s0, s2, s0
}
 801182e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8011832:	4770      	bx	lr

08011834 <LEAF_mapToZeroToOneOutput>:

inline float LEAF_mapToZeroToOneOutput(float value, float istart, float istop)
{
	return ((value - istart) / (istop - istart));
 8011834:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011838:	ee31 1a60 	vsub.f32	s2, s2, s1
}
 801183c:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8011840:	4770      	bx	lr
	...

08011844 <fastertanf>:
    return fResult;
}

inline Lfloat fastertanf(Lfloat fAngle)
{
    Lfloat fASqr = fAngle*fAngle;
 8011844:	ee60 7a00 	vmul.f32	s15, s0, s0
    Lfloat fResult = 2.033e-01f;
    fResult *= fASqr;
 8011848:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801186c <fastertanf+0x28>
 801184c:	ee27 7a87 	vmul.f32	s14, s15, s14
    fResult += 3.1755e-01f;
 8011850:	eddf 6a07 	vldr	s13, [pc, #28]	; 8011870 <fastertanf+0x2c>
 8011854:	ee37 7a26 	vadd.f32	s14, s14, s13
    fResult *= fASqr;
 8011858:	ee67 7a87 	vmul.f32	s15, s15, s14
    fResult += 1.0f;
 801185c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011860:	ee77 7a87 	vadd.f32	s15, s15, s14
    fResult *= fAngle;
    return fResult;
}
 8011864:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011868:	4770      	bx	lr
 801186a:	bf00      	nop
 801186c:	3e502de0 	.word	0x3e502de0
 8011870:	3ea295ea 	.word	0x3ea295ea

08011874 <my_faster_logf>:
/* natural log on [0x1.f7a5ecp-127, 0x1.fffffep127]. Maximum relative error 9.4529e-5 */
inline Lfloat my_faster_logf (Lfloat a)
{
 8011874:	b082      	sub	sp, #8
 8011876:	ed8d 0a01 	vstr	s0, [sp, #4]
	Lfloat m, r, s, t, i, f;
    int32_t e;
    union unholy_t unholy;
    unholy.f = a;
    e = (unholy.i - 0x3f2aaaab) & 0xff800000;
 801187a:	9b01      	ldr	r3, [sp, #4]
 801187c:	4915      	ldr	r1, [pc, #84]	; (80118d4 <my_faster_logf+0x60>)
 801187e:	4419      	add	r1, r3
 8011880:	4a15      	ldr	r2, [pc, #84]	; (80118d8 <my_faster_logf+0x64>)
 8011882:	400a      	ands	r2, r1
    union unholy_t unholy2;
    unholy2.i = (unholy.i - e);
 8011884:	1a9b      	subs	r3, r3, r2
 8011886:	ee00 3a10 	vmov	s0, r3
    m = unholy2.f;
    i = (Lfloat)e * 1.19209290e-7f; // 0x1.0p-23
 801188a:	ee07 2a90 	vmov	s15, r2
 801188e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011892:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80118dc <my_faster_logf+0x68>
 8011896:	ee67 7a87 	vmul.f32	s15, s15, s14
    /* m in [2/3, 4/3] */
    f = m - 1.0f;
 801189a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801189e:	ee30 0a47 	vsub.f32	s0, s0, s14
    s = f * f;
 80118a2:	ee20 6a00 	vmul.f32	s12, s0, s0
    /* Compute log1p(f) for f in [-1/3, 1/3] */
    r = fmaf (0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 80118a6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80118e0 <my_faster_logf+0x6c>
 80118aa:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80118e4 <my_faster_logf+0x70>
 80118ae:	eee7 6a00 	vfma.f32	s13, s14, s0
    t = fmaf (0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 80118b2:	eddf 5a0d 	vldr	s11, [pc, #52]	; 80118e8 <my_faster_logf+0x74>
 80118b6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80118ec <my_faster_logf+0x78>
 80118ba:	eea5 7a80 	vfma.f32	s14, s11, s0
    r = fmaf (r, s, t);
 80118be:	eea6 7a86 	vfma.f32	s14, s13, s12
    r = fmaf (r, s, f);
 80118c2:	eea7 0a06 	vfma.f32	s0, s14, s12
    r = fmaf (i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
    return r;
}
 80118c6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80118f0 <my_faster_logf+0x7c>
 80118ca:	eea7 0a87 	vfma.f32	s0, s15, s14
 80118ce:	b002      	add	sp, #8
 80118d0:	4770      	bx	lr
 80118d2:	bf00      	nop
 80118d4:	c0d55555 	.word	0xc0d55555
 80118d8:	ff800000 	.word	0xff800000
 80118dc:	34000000 	.word	0x34000000
 80118e0:	3e6c6078 	.word	0x3e6c6078
 80118e4:	be8ef46d 	.word	0xbe8ef46d
 80118e8:	3ea9e51a 	.word	0x3ea9e51a
 80118ec:	beff712d 	.word	0xbeff712d
 80118f0:	3f317218 	.word	0x3f317218

080118f4 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
inline Lfloat fastsqrtf(Lfloat x)
{
	union { Lfloat f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 80118f4:	4b10      	ldr	r3, [pc, #64]	; (8011938 <fastsqrtf+0x44>)
 80118f6:	ee10 2a10 	vmov	r2, s0
 80118fa:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 80118fe:	ee07 3a10 	vmov	s14, r3
 8011902:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011906:	ee20 0a27 	vmul.f32	s0, s0, s15
 801190a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801190e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011912:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011916:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801191a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801191e:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 8011922:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 8011926:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 801192a:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 801192e:	336e      	adds	r3, #110	; 0x6e
}
 8011930:	ee00 3a10 	vmov	s0, r3
 8011934:	4770      	bx	lr
 8011936:	bf00      	nop
 8011938:	5f3759df 	.word	0x5f3759df

0801193c <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 801193c:	ee10 3a10 	vmov	r3, s0
 8011940:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011944:	ee00 3a10 	vmov	s0, r3
}
 8011948:	4770      	bx	lr
	...

0801194c <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline Lfloat fasterexpf(Lfloat x) {
    x = 1.0f + (x * 0.00390625f);
 801194c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8011980 <fasterexpf+0x34>
 8011950:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011954:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011958:	ee30 0a27 	vadd.f32	s0, s0, s15
    x *= x; x *= x; x *= x; x *= x;
 801195c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011960:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011964:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011968:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 801196c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011970:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011974:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
 8011978:	ee20 0a00 	vmul.f32	s0, s0, s0
 801197c:	4770      	bx	lr
 801197e:	bf00      	nop
 8011980:	3b800000 	.word	0x3b800000

08011984 <fastExp3>:

inline Lfloat fastExp3(Lfloat x)  // cubic spline approximation
{
    union { Lfloat f; int32_t i; } reinterpreter;

    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8011984:	eddf 7a10 	vldr	s15, [pc, #64]	; 80119c8 <fastExp3+0x44>
 8011988:	ee20 0a27 	vmul.f32	s0, s0, s15
 801198c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011990:	ee17 3a90 	vmov	r3, s15
 8011994:	f103 507e 	add.w	r0, r3, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 8011998:	f3c3 13cf 	ubfx	r3, r3, #7, #16
    // empirical values for small maximum relative error (8.34e-5):
    reinterpreter.i +=
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 801199c:	f240 42fd 	movw	r2, #1277	; 0x4fd
 80119a0:	fb03 f202 	mul.w	r2, r3, r2
 80119a4:	f643 11e9 	movw	r1, #14825	; 0x39e9
 80119a8:	eb01 31a2 	add.w	r1, r1, r2, asr #14
 80119ac:	fb03 f101 	mul.w	r1, r3, r1
 80119b0:	4a06      	ldr	r2, [pc, #24]	; (80119cc <fastExp3+0x48>)
 80119b2:	eb02 32a1 	add.w	r2, r2, r1, asr #14
 80119b6:	fb02 f303 	mul.w	r3, r2, r3
 80119ba:	12db      	asrs	r3, r3, #11
 80119bc:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    return reinterpreter.f;
 80119c0:	18c3      	adds	r3, r0, r3
 80119c2:	ee00 3a10 	vmov	s0, r3
}
 80119c6:	4770      	bx	lr
 80119c8:	4b38aa3b 	.word	0x4b38aa3b
 80119cc:	fffec87b 	.word	0xfffec87b

080119d0 <fastExp4>:

inline Lfloat fastExp4(Lfloat x)  // quartic spline approximation
{
    union { Lfloat f; int32_t i; } reinterpreter;

    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 80119d0:	eddf 7a12 	vldr	s15, [pc, #72]	; 8011a1c <fastExp4+0x4c>
 80119d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80119d8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80119dc:	ee17 3a90 	vmov	r3, s15
 80119e0:	f103 507e 	add.w	r0, r3, #1065353216	; 0x3f800000
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 80119e4:	f3c3 13cf 	ubfx	r3, r3, #7, #16
    // empirical values for small maximum relative error (1.21e-5):
    reinterpreter.i += (((((((((((3537*m) >> 16)
 80119e8:	f640 51d1 	movw	r1, #3537	; 0xdd1
 80119ec:	fb03 f101 	mul.w	r1, r3, r1
        + 13668)*m) >> 18) + 15817)*m) >> 14) - 80470)*m) >> 11);
 80119f0:	f243 5264 	movw	r2, #13668	; 0x3564
 80119f4:	eb02 4221 	add.w	r2, r2, r1, asr #16
 80119f8:	fb03 f202 	mul.w	r2, r3, r2
 80119fc:	f643 51c9 	movw	r1, #15817	; 0x3dc9
 8011a00:	eb01 41a2 	add.w	r1, r1, r2, asr #18
 8011a04:	fb03 f101 	mul.w	r1, r3, r1
 8011a08:	4a05      	ldr	r2, [pc, #20]	; (8011a20 <fastExp4+0x50>)
 8011a0a:	eb02 32a1 	add.w	r2, r2, r1, asr #14
 8011a0e:	fb02 f303 	mul.w	r3, r2, r3
    return reinterpreter.f;
 8011a12:	eb00 23e3 	add.w	r3, r0, r3, asr #11
 8011a16:	ee00 3a10 	vmov	s0, r3
}
 8011a1a:	4770      	bx	lr
 8011a1c:	4b38aa3b 	.word	0x4b38aa3b
 8011a20:	fffec5aa 	.word	0xfffec5aa
 8011a24:	00000000 	.word	0x00000000

08011a28 <fast_sinf2>:
inline Lfloat fast_sinf2(Lfloat x)
{
	Lfloat invert = 1.0f;
	Lfloat out;

	x = x * INV_TWO_PI_TIMES_SINE_TABLE_SIZE;
 8011a28:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8011a2c:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 8011aa0 <fast_sinf2+0x78>
 8011a30:	ee20 0b07 	vmul.f64	d0, d0, d7
 8011a34:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

	if (x < 0.0f)
 8011a38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a40:	d426      	bmi.n	8011a90 <fast_sinf2+0x68>
	Lfloat invert = 1.0f;
 8011a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	{
		x *= -1.0f;
		invert = -1.0f;
	}
	int intX = ((int)x) & 2047;
 8011a46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011a4a:	ee17 3a90 	vmov	r3, s15
 8011a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
	int intXNext = (intX + 1) & 2047;
 8011a52:	1c59      	adds	r1, r3, #1
 8011a54:	f3c1 010a 	ubfx	r1, r1, #0, #11
	Lfloat LfloatX = x-intX;
 8011a58:	ee07 3a90 	vmov	s15, r3
 8011a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a60:	ee30 0a67 	vsub.f32	s0, s0, s15

	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8011a64:	4a10      	ldr	r2, [pc, #64]	; (8011aa8 <fast_sinf2+0x80>)
 8011a66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a6a:	ed93 7a00 	vldr	s14, [r3]
 8011a6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011a72:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011a76:	ee27 7a27 	vmul.f32	s14, s14, s15
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 8011a7a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011a7e:	edd2 7a00 	vldr	s15, [r2]
 8011a82:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011a86:	ee77 7a87 	vadd.f32	s15, s15, s14
	out *= invert;
	return out;
}
 8011a8a:	ee26 0aa7 	vmul.f32	s0, s13, s15
 8011a8e:	4770      	bx	lr
		x *= -1.0f;
 8011a90:	eeb1 0a40 	vneg.f32	s0, s0
		invert = -1.0f;
 8011a94:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8011a98:	e7d5      	b.n	8011a46 <fast_sinf2+0x1e>
 8011a9a:	bf00      	nop
 8011a9c:	f3af 8000 	nop.w
 8011aa0:	6dc9c883 	.word	0x6dc9c883
 8011aa4:	40745f30 	.word	0x40745f30
 8011aa8:	08021e98 	.word	0x08021e98

08011aac <fastPowf>:
    { 
        Lfloat d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 8011aac:	ee10 3a10 	vmov	r3, s0
 8011ab0:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8011ab4:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
 8011ab8:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8011abc:	330b      	adds	r3, #11
 8011abe:	ee07 3a90 	vmov	s15, r3
 8011ac2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8011ac6:	ee20 0a20 	vmul.f32	s0, s0, s1
 8011aca:	eddf 7a03 	vldr	s15, [pc, #12]	; 8011ad8 <fastPowf+0x2c>
 8011ace:	ee30 0a27 	vadd.f32	s0, s0, s15
    return u.d;
 8011ad2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
}
 8011ad6:	4770      	bx	lr
 8011ad8:	4e7de250 	.word	0x4e7de250

08011adc <LEAF_crossfade>:
 when t is -1, volumes[0] = 0, volumes[1] = 1
 when t = 0, volumes[0] = 0.707, volumes[1] = 0.707 (equal-power cross fade)
 when t = 1, volumes[0] = 1, volumes[1] = 0
 */

inline void LEAF_crossfade(Lfloat fade, Lfloat* volumes) {
 8011adc:	b510      	push	{r4, lr}
 8011ade:	ed2d 8b04 	vpush	{d8-d9}
 8011ae2:	eef0 8a40 	vmov.f32	s17, s0
 8011ae6:	4604      	mov	r4, r0
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8011ae8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8011aec:	ee30 0a08 	vadd.f32	s0, s0, s16
 8011af0:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8011af4:	ee20 0a09 	vmul.f32	s0, s0, s18
 8011af8:	f005 fc0e 	bl	8017318 <sqrtf>
 8011afc:	ed84 0a00 	vstr	s0, [r4]
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8011b00:	ee38 0a68 	vsub.f32	s0, s16, s17
 8011b04:	ee20 0a09 	vmul.f32	s0, s0, s18
 8011b08:	f005 fc06 	bl	8017318 <sqrtf>
 8011b0c:	ed84 0a01 	vstr	s0, [r4, #4]
}
 8011b10:	ecbd 8b04 	vpop	{d8-d9}
 8011b14:	bd10      	pop	{r4, pc}
	...

08011b18 <LEAF_shaper>:
}

// Jones shaper
Lfloat LEAF_shaper(Lfloat input, Lfloat m_drive)
{
    Lfloat fx = input * 2.0f;    // prescale
 8011b18:	ee30 7a00 	vadd.f32	s14, s0, s0
#else
		inline Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
 8011b1c:	eddf 7a21 	vldr	s15, [pc, #132]	; 8011ba4 <LEAF_shaper+0x8c>
 8011b20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b28:	d409      	bmi.n	8011b3e <LEAF_shaper+0x26>
    {
        return min;
    }
    else if (val > max)
 8011b2a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8011ba8 <LEAF_shaper+0x90>
 8011b2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b36:	dc04      	bgt.n	8011b42 <LEAF_shaper+0x2a>
    {
        return max;
    }
    else
    {
        return val;
 8011b38:	eef0 7a47 	vmov.f32	s15, s14
 8011b3c:	e001      	b.n	8011b42 <LEAF_shaper+0x2a>
        return min;
 8011b3e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8011ba4 <LEAF_shaper+0x8c>
    xc2 = xc*xc;
 8011b42:	ee67 7aa7 	vmul.f32	s15, s15, s15
    c = 0.5f*fx*(3.0f - (xc2));
 8011b46:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8011b4a:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011b4e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8011b52:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011b56:	ee27 7a26 	vmul.f32	s14, s14, s13
    xc4 = xc2 * xc2;
 8011b5a:	ee27 6aa7 	vmul.f32	s12, s15, s15
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8011b5e:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
 8011b62:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8011b66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b6a:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8011b6e:	eddf 5a0f 	vldr	s11, [pc, #60]	; 8011bac <LEAF_shaper+0x94>
 8011b72:	ee26 6a25 	vmul.f32	s12, s12, s11
 8011b76:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011b7a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8011bb0 <LEAF_shaper+0x98>
 8011b7e:	ee66 6a86 	vmul.f32	s13, s13, s12
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8011b82:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8011bb4 <LEAF_shaper+0x9c>
 8011b86:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011b8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b8e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011b92:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 8011b96:	ee70 0a87 	vadd.f32	s1, s1, s14
 8011b9a:	ee67 7aa0 	vmul.f32	s15, s15, s1
}
 8011b9e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011ba2:	4770      	bx	lr
 8011ba4:	c03504f3 	.word	0xc03504f3
 8011ba8:	403504f3 	.word	0x403504f3
 8011bac:	3c800000 	.word	0x3c800000
 8011bb0:	3fa72f05 	.word	0x3fa72f05
 8011bb4:	3d4ccccd 	.word	0x3d4ccccd

08011bb8 <LEAF_round>:
    rnd = fabsf(rnd);
 8011bb8:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
 8011bbc:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011be0 <LEAF_round+0x28>
 8011bc0:	eef4 0ae7 	vcmpe.f32	s1, s15
 8011bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bc8:	d909      	bls.n	8011bde <LEAF_round+0x26>
    Lfloat scale = 1.f / rnd;
 8011bca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011bce:	eec7 7a20 	vdiv.f32	s15, s14, s1
    return roundf(input * scale) * rnd;
 8011bd2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011bd6:	fef8 7a67 	vrinta.f32	s15, s15
 8011bda:	ee27 0aa0 	vmul.f32	s0, s15, s1
}
 8011bde:	4770      	bx	lr
 8011be0:	33d6bf95 	.word	0x33d6bf95

08011be4 <LEAF_bitwise_xor>:
    return unholy.f;
 8011be4:	ee10 3a10 	vmov	r3, s0
 8011be8:	4043      	eors	r3, r0
 8011bea:	ee00 3a10 	vmov	s0, r3
}
 8011bee:	4770      	bx	lr

08011bf0 <LEAF_clip>:
    if (val < min)
 8011bf0:	eef4 0ac0 	vcmpe.f32	s1, s0
 8011bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bf8:	d409      	bmi.n	8011c0e <LEAF_clip+0x1e>
    else if (val > max)
 8011bfa:	eef4 0ac1 	vcmpe.f32	s1, s2
 8011bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c02:	dd02      	ble.n	8011c0a <LEAF_clip+0x1a>
        return max;
 8011c04:	eeb0 0a41 	vmov.f32	s0, s2
 8011c08:	4770      	bx	lr
        return val;
 8011c0a:	eeb0 0a60 	vmov.f32	s0, s1
    }
}
 8011c0e:	4770      	bx	lr

08011c10 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
inline Lfloat LEAF_tanh(Lfloat x)
{
    
    if( x < -3.0f )
 8011c10:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 8011c14:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c1c:	d419      	bmi.n	8011c52 <LEAF_tanh+0x42>
        return -1.0f;
    else if( x > 3.0f )
 8011c1e:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8011c22:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c2a:	dc15      	bgt.n	8011c58 <LEAF_tanh+0x48>
        return 1.0f;
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 8011c2c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011c30:	eef3 6a0b 	vmov.f32	s13, #59	; 0x41d80000  27.0
 8011c34:	ee37 7a26 	vadd.f32	s14, s14, s13
 8011c38:	ee27 7a00 	vmul.f32	s14, s14, s0
 8011c3c:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
 8011c40:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011c44:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011c48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c4c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8011c50:	4770      	bx	lr
        return -1.0f;
 8011c52:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8011c56:	4770      	bx	lr
        return 1.0f;
 8011c58:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
 8011c5c:	4770      	bx	lr
	...

08011c60 <fast_tanh4>:
    return(exp2x - 1.0f) / (exp2x + 1.0f);
}

//from antto on KVR forum
inline Lfloat   fast_tanh4 (Lfloat x)
{
 8011c60:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat xa = fabsf(x);
 8011c64:	eef0 7ac0 	vabs.f32	s15, s0
    Lfloat x2 = xa * xa;
 8011c68:	ee60 5a00 	vmul.f32	s11, s0, s0
    Lfloat x3 = xa * x2;
 8011c6c:	ee27 6aa5 	vmul.f32	s12, s15, s11
    Lfloat x4 = x2 * x2;
 8011c70:	ee65 6aa5 	vmul.f32	s13, s11, s11
    Lfloat x7 = x3 * x4;
 8011c74:	ee26 5a26 	vmul.f32	s10, s12, s13
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 8011c78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011c7c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011c80:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8011c84:	eddf 5a0f 	vldr	s11, [pc, #60]	; 8011cc4 <fast_tanh4+0x64>
 8011c88:	ee26 6a25 	vmul.f32	s12, s12, s11
 8011c8c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011c90:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8011cc8 <fast_tanh4+0x68>
 8011c94:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011c98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c9c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8011ccc <fast_tanh4+0x6c>
 8011ca0:	ee65 6a26 	vmul.f32	s13, s10, s13
 8011ca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ca8:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8011cac:	ee30 0a66 	vsub.f32	s0, s0, s13
    Lfloat   result = (x < 0) ? -res : res;
 8011cb0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb8:	d400      	bmi.n	8011cbc <fast_tanh4+0x5c>

    return (result);
}
 8011cba:	4770      	bx	lr
    Lfloat   result = (x < 0) ? -res : res;
 8011cbc:	eeb1 0a40 	vneg.f32	s0, s0
    return (result);
 8011cc0:	e7fb      	b.n	8011cba <fast_tanh4+0x5a>
 8011cc2:	bf00      	nop
 8011cc4:	3f15f4d3 	.word	0x3f15f4d3
 8011cc8:	3f0dee8b 	.word	0x3f0dee8b
 8011ccc:	3d6b71bb 	.word	0x3d6b71bb

08011cd0 <fast_tanh5>:

//from raphx on this post : https://www.kvraudio.com/forum/viewtopic.php?t=332930&start=30
inline Lfloat fast_tanh5(Lfloat x)
{
 8011cd0:	b508      	push	{r3, lr}
 8011cd2:	ed2d 8b02 	vpush	{d8}
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8011cd6:	ed9f 8a12 	vldr	s16, [pc, #72]	; 8011d20 <fast_tanh5+0x50>
 8011cda:	ee20 8a08 	vmul.f32	s16, s0, s16
 8011cde:	ee28 8a00 	vmul.f32	s16, s16, s0
 8011ce2:	ee28 8a00 	vmul.f32	s16, s16, s0
 8011ce6:	ee38 8a00 	vadd.f32	s16, s16, s0
 8011cea:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8011d24 <fast_tanh5+0x54>
 8011cee:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011cf2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011cf6:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011cfa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011cfe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011d02:	ee38 8a00 	vadd.f32	s16, s16, s0
	return a / sqrtf(1.0f + a * a);
 8011d06:	ee28 0a08 	vmul.f32	s0, s16, s16
 8011d0a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011d0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011d12:	f005 fb01 	bl	8017318 <sqrtf>
}
 8011d16:	ee88 0a00 	vdiv.f32	s0, s16, s0
 8011d1a:	ecbd 8b02 	vpop	{d8}
 8011d1e:	bd08      	pop	{r3, pc}
 8011d20:	3e28d927 	.word	0x3e28d927
 8011d24:	3c217586 	.word	0x3c217586

08011d28 <fastSine>:

//from Olli Niemitalo
//https://dsp.stackexchange.com/questions/46629/finding-polynomial-approximations-of-a-sine-wave
Lfloat fastSine(Lfloat x)
{
	Lfloat term1 = x * 1.570034357f;
 8011d28:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8011d5c <fastSine+0x34>
 8011d2c:	ee20 7a07 	vmul.f32	s14, s0, s14
	Lfloat term2 = x * x * x * -0.6425216143f;
 8011d30:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011d34:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011d38:	eddf 6a09 	vldr	s13, [pc, #36]	; 8011d60 <fastSine+0x38>
 8011d3c:	ee67 6aa6 	vmul.f32	s13, s15, s13
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
 8011d40:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011d44:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011d48:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8011d64 <fastSine+0x3c>
 8011d4c:	ee67 7a86 	vmul.f32	s15, s15, s12
	return term1+term2+term3;
 8011d50:	ee37 0a26 	vadd.f32	s0, s14, s13
}
 8011d54:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011d58:	4770      	bx	lr
 8011d5a:	bf00      	nop
 8011d5c:	3fc8f6e3 	.word	0x3fc8f6e3
 8011d60:	bf247c4c 	.word	0xbf247c4c
 8011d64:	3d947433 	.word	0x3d947433

08011d68 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
 8011d68:	b570      	push	{r4, r5, r6, lr}
 8011d6a:	ed2d 8b04 	vpush	{d8-d9}
 8011d6e:	4606      	mov	r6, r0
 8011d70:	eeb0 9a40 	vmov.f32	s18, s0
 8011d74:	eeb0 8a60 	vmov.f32	s16, s1
 8011d78:	eef0 8a61 	vmov.f32	s17, s3
 8011d7c:	460d      	mov	r5, r1
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 8011d7e:	ee31 1a60 	vsub.f32	s2, s2, s1
 8011d82:	1e4b      	subs	r3, r1, #1
 8011d84:	ee07 3a90 	vmov	s15, r3
 8011d88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d8c:	eec1 9a27 	vdiv.f32	s19, s2, s15
    Lfloat x = start;
    for (int i = 0; i < size; i++)
 8011d90:	2400      	movs	r4, #0
 8011d92:	e00e      	b.n	8011db2 <LEAF_generate_exp+0x4a>
    {
        buffer[i] = powf(base, x) + offset;
 8011d94:	eef0 0a48 	vmov.f32	s1, s16
 8011d98:	eeb0 0a49 	vmov.f32	s0, s18
 8011d9c:	f005 f8e8 	bl	8016f70 <powf>
 8011da0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011da4:	ee30 0a28 	vadd.f32	s0, s0, s17
 8011da8:	ed83 0a00 	vstr	s0, [r3]
        x += increment;
 8011dac:	ee38 8a29 	vadd.f32	s16, s16, s19
    for (int i = 0; i < size; i++)
 8011db0:	3401      	adds	r4, #1
 8011db2:	42ac      	cmp	r4, r5
 8011db4:	dbee      	blt.n	8011d94 <LEAF_generate_exp+0x2c>
    }
}
 8011db6:	ecbd 8b04 	vpop	{d8-d9}
 8011dba:	bd70      	pop	{r4, r5, r6, pc}

08011dbc <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
 8011dbc:	b570      	push	{r4, r5, r6, lr}
 8011dbe:	ed2d 8b06 	vpush	{d8-d10}
 8011dc2:	4606      	mov	r6, r0
 8011dc4:	eef0 8a40 	vmov.f32	s17, s0
 8011dc8:	460d      	mov	r5, r1
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8011dca:	ee31 0a40 	vsub.f32	s0, s2, s0
 8011dce:	ee30 9ae8 	vsub.f32	s18, s1, s17
 8011dd2:	ee80 0a09 	vdiv.f32	s0, s0, s18
 8011dd6:	f004 fec7 	bl	8016b68 <logf>
 8011dda:	eddf 7a14 	vldr	s15, [pc, #80]	; 8011e2c <LEAF_generate_table_skew_non_sym+0x70>
 8011dde:	ee87 aa80 	vdiv.f32	s20, s15, s0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8011de2:	1e6b      	subs	r3, r5, #1
 8011de4:	ee07 3a90 	vmov	s15, r3
 8011de8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011dec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011df0:	eec7 9a27 	vdiv.f32	s19, s14, s15
    Lfloat x = 0.0000000001f;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
 8011df4:	2400      	movs	r4, #0
    Lfloat x = 0.0000000001f;
 8011df6:	ed9f 8a0e 	vldr	s16, [pc, #56]	; 8011e30 <LEAF_generate_table_skew_non_sym+0x74>
    for (int i = 0; i < size; i++)
 8011dfa:	e012      	b.n	8011e22 <LEAF_generate_table_skew_non_sym+0x66>
    {
        proportion = expf (logf(x) / skew);
 8011dfc:	eeb0 0a48 	vmov.f32	s0, s16
 8011e00:	f004 feb2 	bl	8016b68 <logf>
 8011e04:	ee80 0a0a 	vdiv.f32	s0, s0, s20
 8011e08:	f004 fe3a 	bl	8016a80 <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 8011e0c:	ee69 7a00 	vmul.f32	s15, s18, s0
 8011e10:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011e14:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8011e18:	edc3 7a00 	vstr	s15, [r3]
        x += increment;
 8011e1c:	ee38 8a29 	vadd.f32	s16, s16, s19
    for (int i = 0; i < size; i++)
 8011e20:	3401      	adds	r4, #1
 8011e22:	42ac      	cmp	r4, r5
 8011e24:	dbea      	blt.n	8011dfc <LEAF_generate_table_skew_non_sym+0x40>
    }
}
 8011e26:	ecbd 8b06 	vpop	{d8-d10}
 8011e2a:	bd70      	pop	{r4, r5, r6, pc}
 8011e2c:	bf317218 	.word	0xbf317218
 8011e30:	2edbe6ff 	.word	0x2edbe6ff

08011e34 <LEAF_generate_dbtoa>:
        x += increment;
    }
}

void LEAF_generate_dbtoa(Lfloat* buffer, int size, Lfloat minDb, Lfloat maxDb)
{
 8011e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e36:	ed2d 8b02 	vpush	{d8}
 8011e3a:	4607      	mov	r7, r0
 8011e3c:	460e      	mov	r6, r1
 8011e3e:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 8011e42:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8011e46:	1e4b      	subs	r3, r1, #1
 8011e48:	ee07 3a90 	vmov	s15, r3
 8011e4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e50:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    Lfloat x = minDb;
    for (int i = 0; i < size; i++)
 8011e54:	2400      	movs	r4, #0
 8011e56:	e00e      	b.n	8011e76 <LEAF_generate_dbtoa+0x42>
    {
        buffer[i] = dbtoa(x);
 8011e58:	eb07 0584 	add.w	r5, r7, r4, lsl #2
	return 20.0f*log10f_fast(a);
}

inline Lfloat dbtoa(Lfloat db)
{
    return powf(10.0f, db * 0.05f);
 8011e5c:	eddf 0a08 	vldr	s1, [pc, #32]	; 8011e80 <LEAF_generate_dbtoa+0x4c>
 8011e60:	ee68 0a20 	vmul.f32	s1, s16, s1
 8011e64:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8011e68:	f005 f882 	bl	8016f70 <powf>
        buffer[i] = dbtoa(x);
 8011e6c:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
 8011e70:	ee38 8a28 	vadd.f32	s16, s16, s17
    for (int i = 0; i < size; i++)
 8011e74:	3401      	adds	r4, #1
 8011e76:	42b4      	cmp	r4, r6
 8011e78:	dbee      	blt.n	8011e58 <LEAF_generate_dbtoa+0x24>
}
 8011e7a:	ecbd 8b02 	vpop	{d8}
 8011e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e80:	3d4ccccd 	.word	0x3d4ccccd

08011e84 <LEAF_poly_blep>:
    if (t < dt) {
 8011e84:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8011e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e8c:	d417      	bmi.n	8011ebe <LEAF_poly_blep+0x3a>
    else if (t > 1.0f - dt) {
 8011e8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011e92:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8011e96:	eef4 7ac0 	vcmpe.f32	s15, s0
 8011e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e9e:	d51b      	bpl.n	8011ed8 <LEAF_poly_blep+0x54>
        t = (t - 1.0f) / dt;
 8011ea0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011ea4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8011ea8:	eec0 7a20 	vdiv.f32	s15, s0, s1
        return t*t + t+t + 1.0f;
 8011eac:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8011eb0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011eb4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011eb8:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011ebc:	4770      	bx	lr
        t /= dt;
 8011ebe:	eec0 7a20 	vdiv.f32	s15, s0, s1
        return t+t - t*t - 1.0f;
 8011ec2:	ee37 0aa7 	vadd.f32	s0, s15, s15
 8011ec6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011eca:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011ece:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011ed2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011ed6:	4770      	bx	lr
    else return 0.0f;
 8011ed8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011ee0 <LEAF_poly_blep+0x5c>
}
 8011edc:	4770      	bx	lr
 8011ede:	bf00      	nop
 8011ee0:	00000000 	.word	0x00000000

08011ee4 <LEAF_poly_blamp>:
    if ((0 <= t) && (t < (2.0f * dt)))
 8011ee4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eec:	db2c      	blt.n	8011f48 <LEAF_poly_blamp+0x64>
 8011eee:	ee70 7aa0 	vadd.f32	s15, s1, s1
 8011ef2:	eef4 7ac0 	vcmpe.f32	s15, s0
 8011ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011efa:	dd2e      	ble.n	8011f5a <LEAF_poly_blamp+0x76>
        Lfloat x = (t / dt);
 8011efc:	ee80 6a20 	vdiv.f32	s12, s0, s1
        Lfloat u = 2.0f - x;
 8011f00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8011f04:	ee37 7a46 	vsub.f32	s14, s14, s12
        Lfloat u2 = u * u;
 8011f08:	ee67 7a07 	vmul.f32	s15, s14, s14
        u *= u2 * u2;
 8011f0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011f10:	ee27 7a87 	vmul.f32	s14, s15, s14
        y -= u;
 8011f14:	eddf 7a12 	vldr	s15, [pc, #72]	; 8011f60 <LEAF_poly_blamp+0x7c>
 8011f18:	ee77 7ac7 	vsub.f32	s15, s15, s14
        if (t < dt)
 8011f1c:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8011f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f24:	d512      	bpl.n	8011f4c <LEAF_poly_blamp+0x68>
        	Lfloat v = 1.0f - x;
 8011f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011f2a:	ee76 6ac6 	vsub.f32	s13, s13, s12
        	Lfloat v2 = v * v;
 8011f2e:	ee26 7aa6 	vmul.f32	s14, s13, s13
            v *= v2 * v2;
 8011f32:	ee27 7a07 	vmul.f32	s14, s14, s14
 8011f36:	ee27 7a26 	vmul.f32	s14, s14, s13
            y += 4.0f * v;
 8011f3a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8011f3e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011f42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011f46:	e001      	b.n	8011f4c <LEAF_poly_blamp+0x68>
    Lfloat y = 0;
 8011f48:	eddf 7a05 	vldr	s15, [pc, #20]	; 8011f60 <LEAF_poly_blamp+0x7c>
    return y * dt / 0.066666666666667f; // divide by 15
 8011f4c:	ee67 7aa0 	vmul.f32	s15, s15, s1
}
 8011f50:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8011f64 <LEAF_poly_blamp+0x80>
 8011f54:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8011f58:	4770      	bx	lr
    Lfloat y = 0;
 8011f5a:	eddf 7a01 	vldr	s15, [pc, #4]	; 8011f60 <LEAF_poly_blamp+0x7c>
 8011f5e:	e7f5      	b.n	8011f4c <LEAF_poly_blamp+0x68>
 8011f60:	00000000 	.word	0x00000000
 8011f64:	3d888889 	.word	0x3d888889

08011f68 <LEAF_interpolate_hermite_x>:
    Lfloat c1 = 0.5f * (yy2 - yy0);
 8011f68:	ee71 6a40 	vsub.f32	s13, s2, s0
 8011f6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011f70:	ee66 6a87 	vmul.f32	s13, s13, s14
    Lfloat y0my1 = yy0 - yy1;
 8011f74:	ee30 0a60 	vsub.f32	s0, s0, s1
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8011f78:	ee70 7ac1 	vsub.f32	s15, s1, s2
 8011f7c:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8011f80:	ee71 1ac1 	vsub.f32	s3, s3, s2
 8011f84:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011f88:	ee77 7aa1 	vadd.f32	s15, s15, s3
    Lfloat c2 = y0my1 + c1 - c3;
 8011f8c:	ee36 0a80 	vadd.f32	s0, s13, s0
 8011f90:	ee30 7a67 	vsub.f32	s14, s0, s15
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 8011f94:	ee67 7a82 	vmul.f32	s15, s15, s4
 8011f98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011f9c:	ee67 7a82 	vmul.f32	s15, s15, s4
 8011fa0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011fa4:	ee27 2a82 	vmul.f32	s4, s15, s4
}
 8011fa8:	ee32 0a20 	vadd.f32	s0, s4, s1
 8011fac:	4770      	bx	lr
	...

08011fb0 <LEAF_interpolation_linear>:
    if (val < min)
 8011fb0:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8011fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fb8:	d409      	bmi.n	8011fce <LEAF_interpolation_linear+0x1e>
    else if (val > max)
 8011fba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011fbe:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8011fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fc6:	dd04      	ble.n	8011fd2 <LEAF_interpolation_linear+0x22>
        return max;
 8011fc8:	eeb0 1a67 	vmov.f32	s2, s15
 8011fcc:	e001      	b.n	8011fd2 <LEAF_interpolation_linear+0x22>
        return min;
 8011fce:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8011fe8 <LEAF_interpolation_linear+0x38>
    Lfloat omAlpha = 1.0f - alpha;
 8011fd2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011fd6:	ee77 7ac1 	vsub.f32	s15, s15, s2
    Lfloat out = A * omAlpha;
 8011fda:	ee27 0a80 	vmul.f32	s0, s15, s0
    out += B * alpha;
 8011fde:	ee21 1a20 	vmul.f32	s2, s2, s1
}
 8011fe2:	ee31 0a00 	vadd.f32	s0, s2, s0
 8011fe6:	4770      	bx	lr
 8011fe8:	00000000 	.word	0x00000000

08011fec <mtof>:
    if (f <= -1500.0f) return(0);
 8011fec:	eddf 7a10 	vldr	s15, [pc, #64]	; 8012030 <mtof+0x44>
 8011ff0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ff8:	d917      	bls.n	801202a <mtof+0x3e>
{
 8011ffa:	b508      	push	{r3, lr}
    else if (f > 1499.0f) return(mtof(1499.0f));
 8011ffc:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012034 <mtof+0x48>
 8012000:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012008:	dd04      	ble.n	8012014 <mtof+0x28>
 801200a:	eeb0 0a67 	vmov.f32	s0, s15
 801200e:	f7ff ffed 	bl	8011fec <mtof>
}
 8012012:	bd08      	pop	{r3, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8012014:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012038 <mtof+0x4c>
 8012018:	ee20 0a27 	vmul.f32	s0, s0, s15
 801201c:	f004 fd30 	bl	8016a80 <expf>
 8012020:	eddf 7a06 	vldr	s15, [pc, #24]	; 801203c <mtof+0x50>
 8012024:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012028:	e7f3      	b.n	8012012 <mtof+0x26>
    if (f <= -1500.0f) return(0);
 801202a:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8012040 <mtof+0x54>
}
 801202e:	4770      	bx	lr
 8012030:	c4bb8000 	.word	0xc4bb8000
 8012034:	44bb6000 	.word	0x44bb6000
 8012038:	3d6c9820 	.word	0x3d6c9820
 801203c:	4102d013 	.word	0x4102d013
 8012040:	00000000 	.word	0x00000000

08012044 <LEAF_generate_mtof>:
{
 8012044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012046:	ed2d 8b04 	vpush	{d8-d9}
 801204a:	4607      	mov	r7, r0
 801204c:	eef0 8a40 	vmov.f32	s17, s0
 8012050:	460e      	mov	r6, r1
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 8012052:	1e4b      	subs	r3, r1, #1
 8012054:	ee07 3a90 	vmov	s15, r3
 8012058:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801205c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012060:	eec7 9a27 	vdiv.f32	s19, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
 8012064:	ee30 9ac0 	vsub.f32	s18, s1, s0
    for (int i = 0; i < size; i++)
 8012068:	2400      	movs	r4, #0
    Lfloat x = 0.0f;
 801206a:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8012094 <LEAF_generate_mtof+0x50>
    for (int i = 0; i < size; i++)
 801206e:	e00c      	b.n	801208a <LEAF_generate_mtof+0x46>
        Lfloat midiVal = (x * scalar) + startMIDI;
 8012070:	ee28 0a09 	vmul.f32	s0, s16, s18
        buffer[i] = mtof(midiVal);
 8012074:	eb07 0584 	add.w	r5, r7, r4, lsl #2
 8012078:	ee30 0a28 	vadd.f32	s0, s0, s17
 801207c:	f7ff ffb6 	bl	8011fec <mtof>
 8012080:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
 8012084:	ee38 8a29 	vadd.f32	s16, s16, s19
    for (int i = 0; i < size; i++)
 8012088:	3401      	adds	r4, #1
 801208a:	42b4      	cmp	r4, r6
 801208c:	dbf0      	blt.n	8012070 <LEAF_generate_mtof+0x2c>
}
 801208e:	ecbd 8b04 	vpop	{d8-d9}
 8012092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012094:	00000000 	.word	0x00000000

08012098 <faster_mtof>:
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 8012098:	eddf 7a10 	vldr	s15, [pc, #64]	; 80120dc <faster_mtof+0x44>
 801209c:	ee20 0a27 	vmul.f32	s0, s0, s15
    x = 1.0f + (x * 0.00390625f);
 80120a0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80120e0 <faster_mtof+0x48>
 80120a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80120a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80120ac:	ee30 0a27 	vadd.f32	s0, s0, s15
    x *= x; x *= x; x *= x; x *= x;
 80120b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80120b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80120b8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80120bc:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 80120c0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80120c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80120c8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80120cc:	ee20 0a00 	vmul.f32	s0, s0, s0
}
 80120d0:	eddf 7a04 	vldr	s15, [pc, #16]	; 80120e4 <faster_mtof+0x4c>
 80120d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80120d8:	4770      	bx	lr
 80120da:	bf00      	nop
 80120dc:	3d6c9820 	.word	0x3d6c9820
 80120e0:	3b800000 	.word	0x3b800000
 80120e4:	4102d013 	.word	0x4102d013

080120e8 <ftom>:
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 80120e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80120ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f0:	dc02      	bgt.n	80120f8 <ftom+0x10>
 80120f2:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8012110 <ftom+0x28>
}
 80120f6:	4770      	bx	lr
{
 80120f8:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 80120fa:	eddf 7a06 	vldr	s15, [pc, #24]	; 8012114 <ftom+0x2c>
 80120fe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012102:	f004 fd31 	bl	8016b68 <logf>
 8012106:	eddf 7a04 	vldr	s15, [pc, #16]	; 8012118 <ftom+0x30>
 801210a:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 801210e:	bd08      	pop	{r3, pc}
 8012110:	c4bb8000 	.word	0xc4bb8000
 8012114:	3dfa7ed2 	.word	0x3dfa7ed2
 8012118:	418a7fac 	.word	0x418a7fac

0801211c <atodb>:
{
 801211c:	b508      	push	{r3, lr}
    return 20.0f*log10f(a);
 801211e:	f005 f8cd 	bl	80172bc <log10f>
}
 8012122:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8012126:	ee20 0a27 	vmul.f32	s0, s0, s15
 801212a:	bd08      	pop	{r3, pc}

0801212c <LEAF_generate_atodb>:
{
 801212c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801212e:	ed2d 8b02 	vpush	{d8}
 8012132:	4607      	mov	r7, r0
 8012134:	460e      	mov	r6, r1
 8012136:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 801213a:	ee70 0ac0 	vsub.f32	s1, s1, s0
 801213e:	1e4b      	subs	r3, r1, #1
 8012140:	ee07 3a90 	vmov	s15, r3
 8012144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012148:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
 801214c:	2400      	movs	r4, #0
 801214e:	e00a      	b.n	8012166 <LEAF_generate_atodb+0x3a>
        buffer[i] = atodb(x);
 8012150:	eb07 0584 	add.w	r5, r7, r4, lsl #2
 8012154:	eeb0 0a48 	vmov.f32	s0, s16
 8012158:	f7ff ffe0 	bl	801211c <atodb>
 801215c:	ed85 0a00 	vstr	s0, [r5]
        x += increment;
 8012160:	ee38 8a28 	vadd.f32	s16, s16, s17
    for (int i = 0; i < size; i++)
 8012164:	3401      	adds	r4, #1
 8012166:	42b4      	cmp	r4, r6
 8012168:	dbf2      	blt.n	8012150 <LEAF_generate_atodb+0x24>
}
 801216a:	ecbd 8b02 	vpop	{d8}
 801216e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012170 <fasteratodb>:
{
 8012170:	b500      	push	{lr}
 8012172:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
 8012174:	a801      	add	r0, sp, #4
 8012176:	eeb0 0ac0 	vabs.f32	s0, s0
 801217a:	f004 fc5b 	bl	8016a34 <frexpf>
    Y *= F;
 801217e:	eddf 7a12 	vldr	s15, [pc, #72]	; 80121c8 <fasteratodb+0x58>
 8012182:	ee60 7a27 	vmul.f32	s15, s0, s15
    Y += -4.11852516267426f;
 8012186:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80121cc <fasteratodb+0x5c>
 801218a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    Y *= F;
 801218e:	ee60 7a27 	vmul.f32	s15, s0, s15
    Y += 6.02197014179219f;
 8012192:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80121d0 <fasteratodb+0x60>
 8012196:	ee77 7a87 	vadd.f32	s15, s15, s14
    Y *= F;
 801219a:	ee20 0a27 	vmul.f32	s0, s0, s15
    Y += -3.13396450166353f;
 801219e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80121d4 <fasteratodb+0x64>
 80121a2:	ee30 0a67 	vsub.f32	s0, s0, s15
    Y += E;
 80121a6:	eddd 7a01 	vldr	s15, [sp, #4]
 80121aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80121ae:	ee77 7a80 	vadd.f32	s15, s15, s0
	return 20.0f*log10f_fast(a);
 80121b2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80121d8 <fasteratodb+0x68>
 80121b6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80121ba:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 80121be:	ee27 0a80 	vmul.f32	s0, s15, s0
 80121c2:	b003      	add	sp, #12
 80121c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80121c8:	3f9da1a8 	.word	0x3f9da1a8
 80121cc:	4083caf5 	.word	0x4083caf5
 80121d0:	40c0b3fb 	.word	0x40c0b3fb
 80121d4:	404892e0 	.word	0x404892e0
 80121d8:	3e9a209b 	.word	0x3e9a209b

080121dc <fasterdbtoa>:
}

inline Lfloat fasterdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 80121dc:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8012218 <fasterdbtoa+0x3c>
 80121e0:	ee20 0a27 	vmul.f32	s0, s0, s15
    x = 1.0f + (x * 0.00390625f);
 80121e4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801221c <fasterdbtoa+0x40>
 80121e8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80121ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80121f0:	ee30 0a27 	vadd.f32	s0, s0, s15
    x *= x; x *= x; x *= x; x *= x;
 80121f4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80121f8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80121fc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012200:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8012204:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012208:	ee20 0a00 	vmul.f32	s0, s0, s0
 801220c:	ee20 0a00 	vmul.f32	s0, s0, s0
}
 8012210:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012214:	4770      	bx	lr
 8012216:	bf00      	nop
 8012218:	3debc8e3 	.word	0x3debc8e3
 801221c:	3b800000 	.word	0x3b800000

08012220 <maximum>:


inline Lfloat maximum (Lfloat num1, Lfloat num2)
{
 8012220:	eef0 7a40 	vmov.f32	s15, s0
 8012224:	eeb0 0a60 	vmov.f32	s0, s1
    return (num1 > num2 ) ? num1 : num2;
 8012228:	eef4 7ae0 	vcmpe.f32	s15, s1
 801222c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012230:	dd01      	ble.n	8012236 <maximum+0x16>
 8012232:	eeb0 0a67 	vmov.f32	s0, s15
}
 8012236:	4770      	bx	lr

08012238 <minimum>:

inline Lfloat minimum (Lfloat num1, Lfloat num2)
{
 8012238:	eef0 7a40 	vmov.f32	s15, s0
 801223c:	eeb0 0a60 	vmov.f32	s0, s1
    return (num1 < num2 ) ? num1 : num2;
 8012240:	eef4 7ae0 	vcmpe.f32	s15, s1
 8012244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012248:	d501      	bpl.n	801224e <minimum+0x16>
 801224a:	eeb0 0a67 	vmov.f32	s0, s15
}
 801224e:	4770      	bx	lr

08012250 <mpool_create>:

/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
 8012250:	b410      	push	{r4}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8012252:	6853      	ldr	r3, [r2, #4]
 8012254:	2410      	movs	r4, #16
 8012256:	635c      	str	r4, [r3, #52]	; 0x34
    
    pool->mpool = (char*)memory;
 8012258:	6090      	str	r0, [r2, #8]
    pool->usize  = 0;
 801225a:	2300      	movs	r3, #0
 801225c:	60d3      	str	r3, [r2, #12]
    if (size < pool->leaf->header_size)
 801225e:	6854      	ldr	r4, [r2, #4]
 8012260:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012262:	428b      	cmp	r3, r1
 8012264:	d800      	bhi.n	8012268 <mpool_create+0x18>
 8012266:	460b      	mov	r3, r1
    {
        size = pool->leaf->header_size;
    }
    pool->msize  = size;
 8012268:	6113      	str	r3, [r2, #16]
    
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 801226a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801226c:	1a5b      	subs	r3, r3, r1
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 801226e:	4401      	add	r1, r0
 8012270:	6001      	str	r1, [r0, #0]
    node->next = next;
 8012272:	2100      	movs	r1, #0
 8012274:	6041      	str	r1, [r0, #4]
    node->prev = prev;
 8012276:	6081      	str	r1, [r0, #8]
    node->size = size;
 8012278:	60c3      	str	r3, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 801227a:	6150      	str	r0, [r2, #20]
}
 801227c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012280:	4770      	bx	lr

08012282 <leaf_pool_init>:
{
 8012282:	b538      	push	{r3, r4, r5, lr}
 8012284:	4604      	mov	r4, r0
 8012286:	4608      	mov	r0, r1
 8012288:	4611      	mov	r1, r2
    mpool_create(memory, size, &leaf->_internal_mempool);
 801228a:	f104 051c 	add.w	r5, r4, #28
 801228e:	462a      	mov	r2, r5
 8012290:	f7ff ffde 	bl	8012250 <mpool_create>
    leaf->mempool = &leaf->_internal_mempool;
 8012294:	61a5      	str	r5, [r4, #24]
}
 8012296:	bd38      	pop	{r3, r4, r5, pc}

08012298 <mpool_alloc>:
{
 8012298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801229a:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 801229c:	684a      	ldr	r2, [r1, #4]
 801229e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80122a0:	3301      	adds	r3, #1
 80122a2:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 80122a4:	694c      	ldr	r4, [r1, #20]
 80122a6:	b1ac      	cbz	r4, 80122d4 <mpool_alloc+0x3c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80122a8:	1dc2      	adds	r2, r0, #7
 80122aa:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
 80122ae:	68e3      	ldr	r3, [r4, #12]
 80122b0:	4293      	cmp	r3, r2
 80122b2:	d226      	bcs.n	8012302 <mpool_alloc+0x6a>
        node_to_alloc = node_to_alloc->next;
 80122b4:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
 80122b6:	2c00      	cmp	r4, #0
 80122b8:	d1f9      	bne.n	80122ae <mpool_alloc+0x16>
            if ((pool->msize - pool->usize) > asize)
 80122ba:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80122be:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80122c2:	1a9b      	subs	r3, r3, r2
 80122c4:	4283      	cmp	r3, r0
 80122c6:	d916      	bls.n	80122f6 <mpool_alloc+0x5e>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80122c8:	2101      	movs	r1, #1
 80122ca:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80122ce:	f004 fb17 	bl	8016900 <LEAF_internalErrorCallback>
 80122d2:	e057      	b.n	8012384 <mpool_alloc+0xec>
        if ((pool->msize - pool->usize) > asize)
 80122d4:	690b      	ldr	r3, [r1, #16]
 80122d6:	68ca      	ldr	r2, [r1, #12]
 80122d8:	1a9b      	subs	r3, r3, r2
 80122da:	4283      	cmp	r3, r0
 80122dc:	d905      	bls.n	80122ea <mpool_alloc+0x52>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80122de:	2101      	movs	r1, #1
 80122e0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80122e4:	f004 fb0c 	bl	8016900 <LEAF_internalErrorCallback>
 80122e8:	e04c      	b.n	8012384 <mpool_alloc+0xec>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80122ea:	2100      	movs	r1, #0
 80122ec:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80122f0:	f004 fb06 	bl	8016900 <LEAF_internalErrorCallback>
        return NULL;
 80122f4:	e046      	b.n	8012384 <mpool_alloc+0xec>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80122f6:	2100      	movs	r1, #0
 80122f8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80122fc:	f004 fb00 	bl	8016900 <LEAF_internalErrorCallback>
            return NULL;
 8012300:	e040      	b.n	8012384 <mpool_alloc+0xec>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8012302:	1a98      	subs	r0, r3, r2
    node_to_alloc->size = size_to_alloc;
 8012304:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
 8012306:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801230a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801230c:	4281      	cmp	r1, r0
 801230e:	d22c      	bcs.n	801236a <mpool_alloc+0xd2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8012310:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8012314:	1b63      	subs	r3, r4, r5
        offset += pool->leaf->header_size + node_to_alloc->size;
 8012316:	440a      	add	r2, r1
 8012318:	441a      	add	r2, r3
        new_node = create_node(&pool->mpool[offset],
 801231a:	18ab      	adds	r3, r5, r2
                               node_to_alloc->next,
 801231c:	6867      	ldr	r7, [r4, #4]
                               node_to_alloc->prev,
 801231e:	68a6      	ldr	r6, [r4, #8]
        new_node = create_node(&pool->mpool[offset],
 8012320:	1a40      	subs	r0, r0, r1
    node->pool = block_location + header_size;
 8012322:	4419      	add	r1, r3
 8012324:	50a9      	str	r1, [r5, r2]
    node->next = next;
 8012326:	605f      	str	r7, [r3, #4]
    node->prev = prev;
 8012328:	609e      	str	r6, [r3, #8]
    node->size = size;
 801232a:	60d8      	str	r0, [r3, #12]
    if (pool->head == node_to_alloc)
 801232c:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8012330:	42a2      	cmp	r2, r4
 8012332:	d01d      	beq.n	8012370 <mpool_alloc+0xd8>
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8012334:	6863      	ldr	r3, [r4, #4]
 8012336:	b10b      	cbz	r3, 801233c <mpool_alloc+0xa4>
    {
        // Close the link
        node->next->prev = node->prev;
 8012338:	68a2      	ldr	r2, [r4, #8]
 801233a:	609a      	str	r2, [r3, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 801233c:	68a3      	ldr	r3, [r4, #8]
 801233e:	b10b      	cbz	r3, 8012344 <mpool_alloc+0xac>
    {
        // Close the link
        node->prev->next = node->next;
 8012340:	6862      	ldr	r2, [r4, #4]
 8012342:	605a      	str	r2, [r3, #4]
    }
    
    node->next = NULL;
 8012344:	2300      	movs	r3, #0
 8012346:	6063      	str	r3, [r4, #4]
    node->prev = NULL;
 8012348:	60a3      	str	r3, [r4, #8]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 801234a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801234e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8012350:	68e2      	ldr	r2, [r4, #12]
 8012352:	441a      	add	r2, r3
 8012354:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8012358:	4413      	add	r3, r2
 801235a:	f8cc 300c 	str.w	r3, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 801235e:	694b      	ldr	r3, [r1, #20]
 8012360:	2b00      	cmp	r3, #0
 8012362:	dd0e      	ble.n	8012382 <mpool_alloc+0xea>
        char* new_pool = (char*)node_to_alloc->pool;
 8012364:	6821      	ldr	r1, [r4, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8012366:	2300      	movs	r3, #0
 8012368:	e008      	b.n	801237c <mpool_alloc+0xe4>
        node_to_alloc->size += leftover;
 801236a:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
 801236c:	6863      	ldr	r3, [r4, #4]
 801236e:	e7dd      	b.n	801232c <mpool_alloc+0x94>
        pool->head = new_node;
 8012370:	f8cc 3014 	str.w	r3, [ip, #20]
 8012374:	e7de      	b.n	8012334 <mpool_alloc+0x9c>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8012376:	2200      	movs	r2, #0
 8012378:	54ca      	strb	r2, [r1, r3]
 801237a:	3301      	adds	r3, #1
 801237c:	68e2      	ldr	r2, [r4, #12]
 801237e:	429a      	cmp	r2, r3
 8012380:	d8f9      	bhi.n	8012376 <mpool_alloc+0xde>
    return node_to_alloc->pool;
 8012382:	6824      	ldr	r4, [r4, #0]
}
 8012384:	4620      	mov	r0, r4
 8012386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012388 <mpool_calloc>:
{
 8012388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801238a:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 801238c:	684a      	ldr	r2, [r1, #4]
 801238e:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8012390:	3301      	adds	r3, #1
 8012392:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8012394:	694c      	ldr	r4, [r1, #20]
 8012396:	b1ac      	cbz	r4, 80123c4 <mpool_calloc+0x3c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8012398:	1dc2      	adds	r2, r0, #7
 801239a:	f022 0207 	bic.w	r2, r2, #7
    while (node_to_alloc->size < size_to_alloc)
 801239e:	68e3      	ldr	r3, [r4, #12]
 80123a0:	4293      	cmp	r3, r2
 80123a2:	d226      	bcs.n	80123f2 <mpool_calloc+0x6a>
        node_to_alloc = node_to_alloc->next;
 80123a4:	6864      	ldr	r4, [r4, #4]
        if (node_to_alloc == NULL)
 80123a6:	2c00      	cmp	r4, #0
 80123a8:	d1f9      	bne.n	801239e <mpool_calloc+0x16>
            if ((pool->msize - pool->usize) > asize)
 80123aa:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80123ae:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80123b2:	1a9b      	subs	r3, r3, r2
 80123b4:	4283      	cmp	r3, r0
 80123b6:	d916      	bls.n	80123e6 <mpool_calloc+0x5e>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80123b8:	2101      	movs	r1, #1
 80123ba:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80123be:	f004 fa9f 	bl	8016900 <LEAF_internalErrorCallback>
 80123c2:	e053      	b.n	801246c <mpool_calloc+0xe4>
        if ((pool->msize - pool->usize) > asize)
 80123c4:	690b      	ldr	r3, [r1, #16]
 80123c6:	68ca      	ldr	r2, [r1, #12]
 80123c8:	1a9b      	subs	r3, r3, r2
 80123ca:	4283      	cmp	r3, r0
 80123cc:	d905      	bls.n	80123da <mpool_calloc+0x52>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80123ce:	2101      	movs	r1, #1
 80123d0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80123d4:	f004 fa94 	bl	8016900 <LEAF_internalErrorCallback>
 80123d8:	e048      	b.n	801246c <mpool_calloc+0xe4>
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80123da:	2100      	movs	r1, #0
 80123dc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80123e0:	f004 fa8e 	bl	8016900 <LEAF_internalErrorCallback>
        return NULL;
 80123e4:	e042      	b.n	801246c <mpool_calloc+0xe4>
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80123e6:	2100      	movs	r1, #0
 80123e8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80123ec:	f004 fa88 	bl	8016900 <LEAF_internalErrorCallback>
            return NULL;
 80123f0:	e03c      	b.n	801246c <mpool_calloc+0xe4>
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80123f2:	1a98      	subs	r0, r3, r2
    node_to_alloc->size = size_to_alloc;
 80123f4:	60e2      	str	r2, [r4, #12]
    if (leftover > pool->leaf->header_size)
 80123f6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80123fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80123fc:	4281      	cmp	r1, r0
 80123fe:	d227      	bcs.n	8012450 <mpool_calloc+0xc8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8012400:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8012404:	1b63      	subs	r3, r4, r5
        offset += pool->leaf->header_size + node_to_alloc->size;
 8012406:	440a      	add	r2, r1
 8012408:	441a      	add	r2, r3
        new_node = create_node(&pool->mpool[offset],
 801240a:	18ab      	adds	r3, r5, r2
                               node_to_alloc->next,
 801240c:	6867      	ldr	r7, [r4, #4]
                               node_to_alloc->prev,
 801240e:	68a6      	ldr	r6, [r4, #8]
        new_node = create_node(&pool->mpool[offset],
 8012410:	1a40      	subs	r0, r0, r1
    node->pool = block_location + header_size;
 8012412:	4419      	add	r1, r3
 8012414:	50a9      	str	r1, [r5, r2]
    node->next = next;
 8012416:	605f      	str	r7, [r3, #4]
    node->prev = prev;
 8012418:	609e      	str	r6, [r3, #8]
    node->size = size;
 801241a:	60d8      	str	r0, [r3, #12]
    if (pool->head == node_to_alloc)
 801241c:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8012420:	42a2      	cmp	r2, r4
 8012422:	d018      	beq.n	8012456 <mpool_calloc+0xce>
    if (node->next != NULL)
 8012424:	6863      	ldr	r3, [r4, #4]
 8012426:	b10b      	cbz	r3, 801242c <mpool_calloc+0xa4>
        node->next->prev = node->prev;
 8012428:	68a2      	ldr	r2, [r4, #8]
 801242a:	609a      	str	r2, [r3, #8]
    if (node->prev != NULL)
 801242c:	68a3      	ldr	r3, [r4, #8]
 801242e:	b10b      	cbz	r3, 8012434 <mpool_calloc+0xac>
        node->prev->next = node->next;
 8012430:	6862      	ldr	r2, [r4, #4]
 8012432:	605a      	str	r2, [r3, #4]
    node->next = NULL;
 8012434:	2300      	movs	r3, #0
 8012436:	6063      	str	r3, [r4, #4]
    node->prev = NULL;
 8012438:	60a3      	str	r3, [r4, #8]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 801243a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801243e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8012440:	68e2      	ldr	r2, [r4, #12]
 8012442:	4411      	add	r1, r2
 8012444:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8012448:	440a      	add	r2, r1
 801244a:	f8cc 200c 	str.w	r2, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 801244e:	e009      	b.n	8012464 <mpool_calloc+0xdc>
        node_to_alloc->size += leftover;
 8012450:	60e3      	str	r3, [r4, #12]
        new_node = node_to_alloc->next;
 8012452:	6863      	ldr	r3, [r4, #4]
 8012454:	e7e2      	b.n	801241c <mpool_calloc+0x94>
        pool->head = new_node;
 8012456:	f8cc 3014 	str.w	r3, [ip, #20]
 801245a:	e7e3      	b.n	8012424 <mpool_calloc+0x9c>
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 801245c:	6822      	ldr	r2, [r4, #0]
 801245e:	2100      	movs	r1, #0
 8012460:	54d1      	strb	r1, [r2, r3]
 8012462:	3301      	adds	r3, #1
 8012464:	68e2      	ldr	r2, [r4, #12]
 8012466:	429a      	cmp	r2, r3
 8012468:	d8f8      	bhi.n	801245c <mpool_calloc+0xd4>
    return node_to_alloc->pool;
 801246a:	6824      	ldr	r4, [r4, #0]
}
 801246c:	4620      	mov	r0, r4
 801246e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012470 <mpool_free>:
{
 8012470:	468c      	mov	ip, r1
    pool->leaf->freeCount++;
 8012472:	684a      	ldr	r2, [r1, #4]
 8012474:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8012476:	3301      	adds	r3, #1
 8012478:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
 801247a:	684b      	ldr	r3, [r1, #4]
 801247c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801247e:	1ac0      	subs	r0, r0, r3
    pool->usize -= pool->leaf->header_size + freed_node->size;
 8012480:	68c2      	ldr	r2, [r0, #12]
 8012482:	4413      	add	r3, r2
 8012484:	68ca      	ldr	r2, [r1, #12]
 8012486:	1ad2      	subs	r2, r2, r3
 8012488:	60ca      	str	r2, [r1, #12]
    mpool_node_t* other_node = pool->head;
 801248a:	694b      	ldr	r3, [r1, #20]
    while (other_node != NULL)
 801248c:	2b00      	cmp	r3, #0
 801248e:	d05c      	beq.n	801254a <mpool_free+0xda>
{
 8012490:	b570      	push	{r4, r5, r6, lr}
 8012492:	e01b      	b.n	80124cc <mpool_free+0x5c>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
 8012494:	2102      	movs	r1, #2
 8012496:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801249a:	f004 fa31 	bl	8016900 <LEAF_internalErrorCallback>
}
 801249e:	bd70      	pop	{r4, r5, r6, pc}
            freed_node->size += pool->leaf->header_size + other_node->size;
 80124a0:	68dc      	ldr	r4, [r3, #12]
 80124a2:	4422      	add	r2, r4
 80124a4:	4411      	add	r1, r2
 80124a6:	60c1      	str	r1, [r0, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
 80124a8:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d03b      	beq.n	8012528 <mpool_free+0xb8>
    if (node->next != NULL)
 80124b0:	685a      	ldr	r2, [r3, #4]
 80124b2:	b10a      	cbz	r2, 80124b8 <mpool_free+0x48>
        node->next->prev = node->prev;
 80124b4:	6899      	ldr	r1, [r3, #8]
 80124b6:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 80124b8:	689a      	ldr	r2, [r3, #8]
 80124ba:	b10a      	cbz	r2, 80124c0 <mpool_free+0x50>
        node->prev->next = node->next;
 80124bc:	6859      	ldr	r1, [r3, #4]
 80124be:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 80124c0:	2200      	movs	r2, #0
 80124c2:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 80124c4:	609a      	str	r2, [r3, #8]
                freed_node = other_node;
 80124c6:	462b      	mov	r3, r5
    while (other_node != NULL)
 80124c8:	2d00      	cmp	r5, #0
 80124ca:	d036      	beq.n	801253a <mpool_free+0xca>
        if ((long) other_node < (long) pool->mpool ||
 80124cc:	f8dc 2008 	ldr.w	r2, [ip, #8]
 80124d0:	429a      	cmp	r2, r3
 80124d2:	dcdf      	bgt.n	8012494 <mpool_free+0x24>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
 80124d4:	f8dc 1010 	ldr.w	r1, [ip, #16]
 80124d8:	440a      	add	r2, r1
 80124da:	469e      	mov	lr, r3
        if ((long) other_node < (long) pool->mpool ||
 80124dc:	429a      	cmp	r2, r3
 80124de:	d9d9      	bls.n	8012494 <mpool_free+0x24>
        next_node = other_node->next;
 80124e0:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 80124e2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80124e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80124e8:	68c1      	ldr	r1, [r0, #12]
 80124ea:	1854      	adds	r4, r2, r1
 80124ec:	1826      	adds	r6, r4, r0
 80124ee:	42b3      	cmp	r3, r6
 80124f0:	d0d6      	beq.n	80124a0 <mpool_free+0x30>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
 80124f2:	68d9      	ldr	r1, [r3, #12]
 80124f4:	440a      	add	r2, r1
 80124f6:	4496      	add	lr, r2
 80124f8:	4570      	cmp	r0, lr
 80124fa:	d1e4      	bne.n	80124c6 <mpool_free+0x56>
            other_node->size += pool->leaf->header_size + freed_node->size;
 80124fc:	440c      	add	r4, r1
 80124fe:	60dc      	str	r4, [r3, #12]
            if (other_node != pool->head)
 8012500:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8012504:	429a      	cmp	r2, r3
 8012506:	d013      	beq.n	8012530 <mpool_free+0xc0>
    if (node->next != NULL)
 8012508:	685a      	ldr	r2, [r3, #4]
 801250a:	b10a      	cbz	r2, 8012510 <mpool_free+0xa0>
        node->next->prev = node->prev;
 801250c:	6899      	ldr	r1, [r3, #8]
 801250e:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 8012510:	689a      	ldr	r2, [r3, #8]
 8012512:	b10a      	cbz	r2, 8012518 <mpool_free+0xa8>
        node->prev->next = node->next;
 8012514:	6859      	ldr	r1, [r3, #4]
 8012516:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8012518:	2200      	movs	r2, #0
 801251a:	605a      	str	r2, [r3, #4]
    node->prev = NULL;
 801251c:	609a      	str	r2, [r3, #8]
                other_node->next = pool->head;
 801251e:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8012522:	605a      	str	r2, [r3, #4]
                freed_node = other_node;
 8012524:	4618      	mov	r0, r3
 8012526:	e7ce      	b.n	80124c6 <mpool_free+0x56>
            if (other_node == pool->head) pool->head = pool->head->next;
 8012528:	6852      	ldr	r2, [r2, #4]
 801252a:	f8cc 2014 	str.w	r2, [ip, #20]
 801252e:	e7bf      	b.n	80124b0 <mpool_free+0x40>
                pool->head = pool->head->next;
 8012530:	6852      	ldr	r2, [r2, #4]
 8012532:	f8cc 2014 	str.w	r2, [ip, #20]
                freed_node = other_node;
 8012536:	4618      	mov	r0, r3
 8012538:	e7c5      	b.n	80124c6 <mpool_free+0x56>
    freed_node->next = pool->head;
 801253a:	f8dc 3014 	ldr.w	r3, [ip, #20]
 801253e:	6043      	str	r3, [r0, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 8012540:	b103      	cbz	r3, 8012544 <mpool_free+0xd4>
 8012542:	6098      	str	r0, [r3, #8]
    pool->head = freed_node;
 8012544:	f8cc 0014 	str.w	r0, [ip, #20]
 8012548:	e7a9      	b.n	801249e <mpool_free+0x2e>
    freed_node->next = pool->head;
 801254a:	694b      	ldr	r3, [r1, #20]
 801254c:	6043      	str	r3, [r0, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 801254e:	b103      	cbz	r3, 8012552 <mpool_free+0xe2>
 8012550:	6098      	str	r0, [r3, #8]
    pool->head = freed_node;
 8012552:	f8cc 0014 	str.w	r0, [ip, #20]
 8012556:	4770      	bx	lr

08012558 <tMempool_initToPool>:

    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
 8012558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801255a:	4606      	mov	r6, r0
 801255c:	460c      	mov	r4, r1
 801255e:	4615      	mov	r5, r2
    _tMempool* mm = *mem;
 8012560:	681f      	ldr	r7, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8012562:	4639      	mov	r1, r7
 8012564:	2018      	movs	r0, #24
 8012566:	f7ff fe97 	bl	8012298 <mpool_alloc>
 801256a:	4602      	mov	r2, r0
 801256c:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6043      	str	r3, [r0, #4]
    
    mpool_create (memory, size, m);
 8012572:	4629      	mov	r1, r5
 8012574:	4620      	mov	r0, r4
 8012576:	f7ff fe6b 	bl	8012250 <mpool_create>
}
 801257a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801257c <tMempool_init>:
{
 801257c:	b508      	push	{r3, lr}
    tMempool_initToPool(mp, memory, size, &leaf->mempool);
 801257e:	3318      	adds	r3, #24
 8012580:	f7ff ffea 	bl	8012558 <tMempool_initToPool>
}
 8012584:	bd08      	pop	{r3, pc}
	...

08012588 <tCycle_initToPool>:
{
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
 8012588:	b538      	push	{r3, r4, r5, lr}
 801258a:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 801258c:	680c      	ldr	r4, [r1, #0]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801258e:	4621      	mov	r1, r4
 8012590:	2018      	movs	r0, #24
 8012592:	f7ff fe81 	bl	8012298 <mpool_alloc>
 8012596:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8012598:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801259a:	6862      	ldr	r2, [r4, #4]
    
    c->inc      =  0;
 801259c:	2300      	movs	r3, #0
 801259e:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 80125a0:	6043      	str	r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80125a2:	edd2 7a01 	vldr	s15, [r2, #4]
 80125a6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80125bc <tCycle_initToPool+0x34>
 80125aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80125ae:	edc0 7a04 	vstr	s15, [r0, #16]
    c->mask = SINE_TABLE_SIZE - 1;
 80125b2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80125b6:	6143      	str	r3, [r0, #20]
}
 80125b8:	bd38      	pop	{r3, r4, r5, pc}
 80125ba:	bf00      	nop
 80125bc:	4f800000 	.word	0x4f800000

080125c0 <tCycle_init>:
{
 80125c0:	b508      	push	{r3, lr}
    tCycle_initToPool(cy, &leaf->mempool);
 80125c2:	3118      	adds	r1, #24
 80125c4:	f7ff ffe0 	bl	8012588 <tCycle_initToPool>
}
 80125c8:	bd08      	pop	{r3, pc}

080125ca <tCycle_free>:

void    tCycle_free (tCycle* const cy)
{
 80125ca:	b508      	push	{r3, lr}
    _tCycle* c = *cy;
 80125cc:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)c, c->mempool);
 80125ce:	6801      	ldr	r1, [r0, #0]
 80125d0:	f7ff ff4e 	bl	8012470 <mpool_free>
}
 80125d4:	bd08      	pop	{r3, pc}
	...

080125d8 <tCycle_tick>:

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 80125d8:	6801      	ldr	r1, [r0, #0]
    uint32_t idx;
    Lfloat samp0;
    Lfloat samp1;
    
    // Phasor increment
    c->phase += c->inc;
 80125da:	688b      	ldr	r3, [r1, #8]
 80125dc:	684a      	ldr	r2, [r1, #4]
 80125de:	4413      	add	r3, r2
 80125e0:	604b      	str	r3, [r1, #4]
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
 80125e2:	0d5a      	lsrs	r2, r3, #21
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 80125e4:	f3c3 0314 	ubfx	r3, r3, #0, #21
 80125e8:	ee07 3a90 	vmov	s15, r3
    
    samp0 = __leaf_table_sinewave[idx];
 80125ec:	4b0c      	ldr	r3, [pc, #48]	; (8012620 <tCycle_tick+0x48>)
 80125ee:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80125f2:	ed90 0a00 	vldr	s0, [r0]
    idx = (idx + 1) & c->mask;
 80125f6:	3201      	adds	r2, #1
 80125f8:	6949      	ldr	r1, [r1, #20]
 80125fa:	400a      	ands	r2, r1
    samp1 = __leaf_table_sinewave[idx];
 80125fc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012600:	ed93 7a00 	vldr	s14, [r3]
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8012604:	ee37 7a40 	vsub.f32	s14, s14, s0
 8012608:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801260c:	eddf 6a05 	vldr	s13, [pc, #20]	; 8012624 <tCycle_tick+0x4c>
 8012610:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012614:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8012618:	ee37 0a80 	vadd.f32	s0, s15, s0
 801261c:	4770      	bx	lr
 801261e:	bf00      	nop
 8012620:	08021e98 	.word	0x08021e98
 8012624:	35000004 	.word	0x35000004

08012628 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
 8012628:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
 801262a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801262e:	edd3 7a04 	vldr	s15, [r3, #16]
 8012632:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012636:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801263a:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801263e:	4770      	bx	lr

08012640 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
 8012640:	6803      	ldr	r3, [r0, #0]
    
    int i = phase;
 8012642:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 8012646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801264a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 801264e:	eddf 7a04 	vldr	s15, [pc, #16]	; 8012660 <tCycle_setPhase+0x20>
 8012652:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012656:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801265a:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801265e:	4770      	bx	lr
 8012660:	4f800000 	.word	0x4f800000

08012664 <tCycle_setSampleRate>:

void     tCycle_setSampleRate (tCycle* const cy, Lfloat sr)
{
 8012664:	b508      	push	{r3, lr}
    _tCycle* c = *cy;
 8012666:	6803      	ldr	r3, [r0, #0]
    
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 8012668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801266c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012670:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8012688 <tCycle_setSampleRate+0x24>
 8012674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012678:	edc3 7a04 	vstr	s15, [r3, #16]
    tCycle_setFreq(cy, c->freq);
 801267c:	ed93 0a03 	vldr	s0, [r3, #12]
 8012680:	f7ff ffd2 	bl	8012628 <tCycle_setFreq>
}
 8012684:	bd08      	pop	{r3, pc}
 8012686:	bf00      	nop
 8012688:	4f800000 	.word	0x4f800000

0801268c <tPBTriangle_initToPool>:
{
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
 801268c:	b538      	push	{r3, r4, r5, lr}
 801268e:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 8012690:	680c      	ldr	r4, [r1, #0]
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
 8012692:	4621      	mov	r1, r4
 8012694:	2020      	movs	r0, #32
 8012696:	f7ff fdff 	bl	8012298 <mpool_alloc>
 801269a:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 801269c:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801269e:	6863      	ldr	r3, [r4, #4]

    c->invSampleRate = leaf->invSampleRate;
 80126a0:	685b      	ldr	r3, [r3, #4]
 80126a2:	61c3      	str	r3, [r0, #28]
    c->inc      =  0.0f;
 80126a4:	2300      	movs	r3, #0
 80126a6:	6083      	str	r3, [r0, #8]
    c->phase    =  0.25f;
 80126a8:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80126ac:	6042      	str	r2, [r0, #4]
    c->skew     =  0.5f;
 80126ae:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80126b2:	6102      	str	r2, [r0, #16]
    c->oneMinusSkew     =  0.5f;
 80126b4:	6142      	str	r2, [r0, #20]
    c->lastOut  =  0.0f;
 80126b6:	6183      	str	r3, [r0, #24]
}
 80126b8:	bd38      	pop	{r3, r4, r5, pc}

080126ba <tPBTriangle_init>:
{
 80126ba:	b508      	push	{r3, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
 80126bc:	3118      	adds	r1, #24
 80126be:	f7ff ffe5 	bl	801268c <tPBTriangle_initToPool>
}
 80126c2:	bd08      	pop	{r3, pc}

080126c4 <tPBTriangle_tick>:
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_tick          (tPBTriangle* const osc)
#else
Lfloat   tPBTriangle_tick          (tPBTriangle* const osc)
#endif

{
 80126c4:	b510      	push	{r4, lr}
 80126c6:	ed2d 8b04 	vpush	{d8-d9}
    _tPBTriangle* c = *osc;
 80126ca:	6804      	ldr	r4, [r0, #0]

    Lfloat t = c->phase;
 80126cc:	ed94 8a01 	vldr	s16, [r4, #4]
    Lfloat dt = 0.0f;
    if (c->inc >=0)
 80126d0:	ed94 9a02 	vldr	s18, [r4, #8]
 80126d4:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 80126d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126dc:	db01      	blt.n	80126e2 <tPBTriangle_tick+0x1e>
    {
        dt = -1.0f * c->inc;
 80126de:	eeb1 9a49 	vneg.f32	s18, s18
    //compute the naive waveform
    
    //Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    Lfloat v = 0.0f;
    
    if (t < c->skew)
 80126e2:	edd4 7a04 	vldr	s15, [r4, #16]
 80126e6:	eef4 7ac8 	vcmpe.f32	s15, s16
 80126ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ee:	dd55      	ble.n	801279c <tPBTriangle_tick+0xd8>
    {
        v = 2.0f * t / c->skew - 1.0f;
 80126f0:	ee38 7a08 	vadd.f32	s14, s16, s16
 80126f4:	eec7 8a27 	vdiv.f32	s17, s14, s15
 80126f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80126fc:	ee78 8ac7 	vsub.f32	s17, s17, s14
    }
    if (t >= c->skew)
 8012700:	eef4 7ac8 	vcmpe.f32	s15, s16
 8012704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012708:	d80d      	bhi.n	8012726 <tPBTriangle_tick+0x62>
    {
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
 801270a:	ee78 7a67 	vsub.f32	s15, s16, s15
 801270e:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8012712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012716:	ed94 7a05 	vldr	s14, [r4, #20]
 801271a:	eec7 8a87 	vdiv.f32	s17, s15, s14
 801271e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012722:	ee78 8aa7 	vadd.f32	s17, s17, s15
    }

    //add the blamps
    v += LEAF_poly_blamp(t,  dt);
 8012726:	eef0 0a49 	vmov.f32	s1, s18
 801272a:	eeb0 0a48 	vmov.f32	s0, s16
 801272e:	f7ff fbd9 	bl	8011ee4 <LEAF_poly_blamp>
 8012732:	ee78 8a80 	vadd.f32	s17, s17, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8012736:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 801273a:	eef0 0a49 	vmov.f32	s1, s18
 801273e:	ee39 0ac8 	vsub.f32	s0, s19, s16
 8012742:	f7ff fbcf 	bl	8011ee4 <LEAF_poly_blamp>
 8012746:	ee78 8a80 	vadd.f32	s17, s17, s0
    t += 0.5f;
 801274a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801274e:	ee38 8a27 	vadd.f32	s16, s16, s15
    t -= (int)(t);
 8012752:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8012756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801275a:	ee38 8a67 	vsub.f32	s16, s16, s15
    v -= LEAF_poly_blamp(t, dt);
 801275e:	eef0 0a49 	vmov.f32	s1, s18
 8012762:	eeb0 0a48 	vmov.f32	s0, s16
 8012766:	f7ff fbbd 	bl	8011ee4 <LEAF_poly_blamp>
 801276a:	ee78 8ac0 	vsub.f32	s17, s17, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 801276e:	eef0 0a49 	vmov.f32	s1, s18
 8012772:	ee39 0ac8 	vsub.f32	s0, s19, s16
 8012776:	f7ff fbb5 	bl	8011ee4 <LEAF_poly_blamp>
 801277a:	ee38 0ac0 	vsub.f32	s0, s17, s0

    //increment phase for next tick
    c->phase += c->inc - (int)c->inc;
 801277e:	edd4 7a02 	vldr	s15, [r4, #8]
 8012782:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012786:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801278a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801278e:	ed94 7a01 	vldr	s14, [r4, #4]
 8012792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012796:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase >= 1.0f) c->phase -= 1.0f;
 801279a:	e008      	b.n	80127ae <tPBTriangle_tick+0xea>
    Lfloat v = 0.0f;
 801279c:	eddf 8a12 	vldr	s17, [pc, #72]	; 80127e8 <tPBTriangle_tick+0x124>
 80127a0:	e7ae      	b.n	8012700 <tPBTriangle_tick+0x3c>
	while (c->phase >= 1.0f) c->phase -= 1.0f;
 80127a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80127aa:	edc4 7a01 	vstr	s15, [r4, #4]
 80127ae:	edd4 7a01 	vldr	s15, [r4, #4]
 80127b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80127ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127be:	daf0      	bge.n	80127a2 <tPBTriangle_tick+0xde>
 80127c0:	e005      	b.n	80127ce <tPBTriangle_tick+0x10a>
	while (c->phase < 0.0f) c->phase += 1.0f;
 80127c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80127ca:	edc4 7a01 	vstr	s15, [r4, #4]
 80127ce:	edd4 7a01 	vldr	s15, [r4, #4]
 80127d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80127d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127da:	d4f2      	bmi.n	80127c2 <tPBTriangle_tick+0xfe>
	return -v;
}
 80127dc:	eeb1 0a40 	vneg.f32	s0, s0
 80127e0:	ecbd 8b04 	vpop	{d8-d9}
 80127e4:	bd10      	pop	{r4, pc}
 80127e6:	bf00      	nop
 80127e8:	00000000 	.word	0x00000000

080127ec <tPBTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#else
void    tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#endif
{
    _tPBTriangle* c = *osc;
 80127ec:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 80127ee:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
 80127f2:	edd3 7a07 	vldr	s15, [r3, #28]
 80127f6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80127fa:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80127fe:	4770      	bx	lr

08012800 <tPBTriangle_setSkew>:

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat mySkew)
{
 8012800:	b510      	push	{r4, lr}
 8012802:	eef0 0a40 	vmov.f32	s1, s0
    _tPBTriangle* c = *osc;
 8012806:	6804      	ldr	r4, [r0, #0]

    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
 8012808:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8012834 <tPBTriangle_setSkew+0x34>
 801280c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8012838 <tPBTriangle_setSkew+0x38>
 8012810:	f7ff f9ee 	bl	8011bf0 <LEAF_clip>
    c->skew = (mySkew + 1.0f) * 0.5f;
 8012814:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012818:	ee30 0a27 	vadd.f32	s0, s0, s15
 801281c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012820:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012824:	ed84 0a04 	vstr	s0, [r4, #16]
    c->oneMinusSkew = 1.0f - c->skew;
 8012828:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801282c:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8012830:	bd10      	pop	{r4, pc}
 8012832:	bf00      	nop
 8012834:	3f7d70a4 	.word	0x3f7d70a4
 8012838:	3c23d70a 	.word	0x3c23d70a

0801283c <tPBSineTriangle_initToPool>:
{
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
 801283c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801283e:	4607      	mov	r7, r0
 8012840:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 8012842:	680e      	ldr	r6, [r1, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
 8012844:	4631      	mov	r1, r6
 8012846:	2028      	movs	r0, #40	; 0x28
 8012848:	f7ff fd26 	bl	8012298 <mpool_alloc>
 801284c:	4604      	mov	r4, r0
 801284e:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8012850:	f840 6b1c 	str.w	r6, [r0], #28
    LEAF* leaf = c->mempool->leaf;
 8012854:	6876      	ldr	r6, [r6, #4]
    tCycle_initToPool(&c->sine, mp);
 8012856:	4629      	mov	r1, r5
 8012858:	f7ff fe96 	bl	8012588 <tCycle_initToPool>
    c->invSampleRate = leaf->invSampleRate;
 801285c:	6873      	ldr	r3, [r6, #4]
 801285e:	61a3      	str	r3, [r4, #24]
    c->inc      =  0.0f;
 8012860:	2300      	movs	r3, #0
 8012862:	60a3      	str	r3, [r4, #8]
    c->phase    =  0.25f;
 8012864:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8012868:	6062      	str	r2, [r4, #4]
    c->shape     =  0.0f;
 801286a:	6123      	str	r3, [r4, #16]
    c->skew 	 = 0.5f;
 801286c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8012870:	6262      	str	r2, [r4, #36]	; 0x24
    c->oneMinusShape = 1.0f;
 8012872:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012876:	6222      	str	r2, [r4, #32]
    c->lastOut  =  0.0f;
 8012878:	6163      	str	r3, [r4, #20]
}
 801287a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801287c <tPBSineTriangle_init>:
{
 801287c:	b508      	push	{r3, lr}
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
 801287e:	3118      	adds	r1, #24
 8012880:	f7ff ffdc 	bl	801283c <tPBSineTriangle_initToPool>
}
 8012884:	bd08      	pop	{r3, pc}

08012886 <tPBSineTriangle_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_tick          (tPBSineTriangle* const osc)
#else
Lfloat   tPBSineTriangle_tick          (tPBSineTriangle* const osc)
#endif
{
 8012886:	b510      	push	{r4, lr}
 8012888:	ed2d 8b04 	vpush	{d8-d9}
    _tPBSineTriangle* c = *osc;
 801288c:	6804      	ldr	r4, [r0, #0]
    Lfloat out = 0.0f;
   
    Lfloat t = c->phase;
 801288e:	edd4 8a01 	vldr	s17, [r4, #4]
    Lfloat dt = 0.0f;
    if (c->inc >=0)
 8012892:	ed94 9a02 	vldr	s18, [r4, #8]
 8012896:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 801289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801289e:	db01      	blt.n	80128a4 <tPBSineTriangle_tick+0x1e>
    {
        dt = -1.0f * c->inc;
 80128a0:	eeb1 9a49 	vneg.f32	s18, s18
    {
        dt = c->inc;
    }

    //compute the naive waveform
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 80128a4:	ee78 7aa8 	vadd.f32	s15, s17, s17
 80128a8:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 80128ac:	ee77 7ae9 	vsub.f32	s15, s15, s19
 80128b0:	eef0 7ae7 	vabs.f32	s15, s15
 80128b4:	ee37 8aa7 	vadd.f32	s16, s15, s15
 80128b8:	ee38 8a69 	vsub.f32	s16, s16, s19

    //add the blamps
    v += LEAF_poly_blamp(t,  dt);
 80128bc:	eef0 0a49 	vmov.f32	s1, s18
 80128c0:	eeb0 0a68 	vmov.f32	s0, s17
 80128c4:	f7ff fb0e 	bl	8011ee4 <LEAF_poly_blamp>
 80128c8:	ee38 8a00 	vadd.f32	s16, s16, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
 80128cc:	eef0 0a49 	vmov.f32	s1, s18
 80128d0:	ee39 0ae8 	vsub.f32	s0, s19, s17
 80128d4:	f7ff fb06 	bl	8011ee4 <LEAF_poly_blamp>
 80128d8:	ee38 8a00 	vadd.f32	s16, s16, s0
    t += 0.5f;
 80128dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80128e0:	ee78 8aa7 	vadd.f32	s17, s17, s15
    t -= (int)(t);
 80128e4:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 80128e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128ec:	ee78 8ae7 	vsub.f32	s17, s17, s15
    v -= LEAF_poly_blamp(t, dt);
 80128f0:	eef0 0a49 	vmov.f32	s1, s18
 80128f4:	eeb0 0a68 	vmov.f32	s0, s17
 80128f8:	f7ff faf4 	bl	8011ee4 <LEAF_poly_blamp>
 80128fc:	ee38 8a40 	vsub.f32	s16, s16, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8012900:	eef0 0a49 	vmov.f32	s1, s18
 8012904:	ee39 0ae8 	vsub.f32	s0, s19, s17
 8012908:	f7ff faec 	bl	8011ee4 <LEAF_poly_blamp>
 801290c:	ee38 8a40 	vsub.f32	s16, s16, s0

    //increment phase for next tick
    c->phase += c->inc - (int)c->inc;
 8012910:	edd4 7a02 	vldr	s15, [r4, #8]
 8012914:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012918:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801291c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012920:	ed94 7a01 	vldr	s14, [r4, #4]
 8012924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012928:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 801292c:	e005      	b.n	801293a <tPBSineTriangle_tick+0xb4>
 801292e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012932:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012936:	edc4 7a01 	vstr	s15, [r4, #4]
 801293a:	edd4 7a01 	vldr	s15, [r4, #4]
 801293e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801294a:	daf0      	bge.n	801292e <tPBSineTriangle_tick+0xa8>
 801294c:	e005      	b.n	801295a <tPBSineTriangle_tick+0xd4>
    while (c->phase < 0.0f) c->phase += 1.0f;
 801294e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012952:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012956:	edc4 7a01 	vstr	s15, [r4, #4]
 801295a:	edd4 7a01 	vldr	s15, [r4, #4]
 801295e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012966:	d4f2      	bmi.n	801294e <tPBSineTriangle_tick+0xc8>
    out = v * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
 8012968:	edd4 7a04 	vldr	s15, [r4, #16]
 801296c:	ee27 8a88 	vmul.f32	s16, s15, s16

    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
 8012970:	f104 001c 	add.w	r0, r4, #28
 8012974:	f7ff fe30 	bl	80125d8 <tCycle_tick>
 8012978:	edd4 7a08 	vldr	s15, [r4, #32]
 801297c:	ee20 0a27 	vmul.f32	s0, s0, s15
    return out;
}
 8012980:	ee30 0a08 	vadd.f32	s0, s0, s16
 8012984:	ecbd 8b04 	vpop	{d8-d9}
 8012988:	bd10      	pop	{r4, pc}

0801298a <tPBSineTriangle_setFreq>:
#ifdef ITCMRAM
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#else
void    tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#endif
{
 801298a:	b508      	push	{r3, lr}
    _tPBSineTriangle* c = *osc;
 801298c:	6800      	ldr	r0, [r0, #0]

    c->freq  = freq;
 801298e:	ed80 0a03 	vstr	s0, [r0, #12]
    c->inc = freq * c->invSampleRate;
 8012992:	ed90 7a06 	vldr	s14, [r0, #24]
 8012996:	ee67 7a00 	vmul.f32	s15, s14, s0
 801299a:	edc0 7a02 	vstr	s15, [r0, #8]
    tCycle_setFreq(&c->sine, freq);
 801299e:	301c      	adds	r0, #28
 80129a0:	f7ff fe42 	bl	8012628 <tCycle_setFreq>
}
 80129a4:	bd08      	pop	{r3, pc}

080129a6 <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
 80129a6:	6803      	ldr	r3, [r0, #0]
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
 80129a8:	eef1 7a40 	vneg.f32	s15, s0
 80129ac:	edc3 7a04 	vstr	s15, [r3, #16]
    c->oneMinusShape = 1.0f - shape;
 80129b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80129b4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80129b8:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80129bc:	4770      	bx	lr
	...

080129c0 <tPBPulse_initToPool>:
{
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
 80129c0:	b538      	push	{r3, r4, r5, lr}
 80129c2:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 80129c4:	680c      	ldr	r4, [r1, #0]
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
 80129c6:	4621      	mov	r1, r4
 80129c8:	2020      	movs	r0, #32
 80129ca:	f7ff fc65 	bl	8012298 <mpool_alloc>
 80129ce:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 80129d0:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80129d2:	6863      	ldr	r3, [r4, #4]
    
    c->invSampleRate = leaf->invSampleRate;
 80129d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80129d8:	edc0 7a06 	vstr	s15, [r0, #24]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 80129dc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80129fc <tPBPulse_initToPool+0x3c>
 80129e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80129e4:	edc0 7a07 	vstr	s15, [r0, #28]
    c->inc      =  0;
 80129e8:	2300      	movs	r3, #0
 80129ea:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 80129ec:	6043      	str	r3, [r0, #4]
    c->width     =  (0.5f * TWO_TO_32);
 80129ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129f2:	6103      	str	r3, [r0, #16]
    c->oneMinusWidth =  c->width;
 80129f4:	6143      	str	r3, [r0, #20]
    c->freq = 0.0f;
 80129f6:	2300      	movs	r3, #0
 80129f8:	60c3      	str	r3, [r0, #12]
}
 80129fa:	bd38      	pop	{r3, r4, r5, pc}
 80129fc:	4f800000 	.word	0x4f800000

08012a00 <tPBPulse_init>:
{
 8012a00:	b508      	push	{r3, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
 8012a02:	3118      	adds	r1, #24
 8012a04:	f7ff ffdc 	bl	80129c0 <tPBPulse_initToPool>
}
 8012a08:	bd08      	pop	{r3, pc}
	...

08012a0c <tPBPulse_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_tick        (tPBPulse* const osc)
#else
Lfloat   tPBPulse_tick        (tPBPulse* const osc)
#endif
{
 8012a0c:	b510      	push	{r4, lr}
 8012a0e:	ed2d 8b04 	vpush	{d8-d9}
    _tPBPulse* c = *osc;
 8012a12:	6804      	ldr	r4, [r0, #0]
    

    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8012a14:	6862      	ldr	r2, [r4, #4]
 8012a16:	ee07 2a90 	vmov	s15, r2
 8012a1a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8012a1e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8012a88 <tPBPulse_tick+0x7c>
 8012a22:	ee20 0a27 	vmul.f32	s0, s0, s15
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 8012a26:	ed94 7a02 	vldr	s14, [r4, #8]
 8012a2a:	eeb8 9ac7 	vcvt.f32.s32	s18, s14
 8012a2e:	ee29 9a27 	vmul.f32	s18, s18, s15
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 8012a32:	6963      	ldr	r3, [r4, #20]
 8012a34:	18d3      	adds	r3, r2, r3
 8012a36:	ee08 3a90 	vmov	s17, r3
 8012a3a:	eef8 8a68 	vcvt.f32.u32	s17, s17
 8012a3e:	ee68 8aa7 	vmul.f32	s17, s17, s15
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 8012a42:	6923      	ldr	r3, [r4, #16]
 8012a44:	429a      	cmp	r2, r3
 8012a46:	d21c      	bcs.n	8012a82 <tPBPulse_tick+0x76>
 8012a48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012a4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012a50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012a54:	ee37 8ac7 	vsub.f32	s16, s15, s14
    out += LEAF_poly_blep(phaseFloat,incFloat);
 8012a58:	eef0 0a49 	vmov.f32	s1, s18
 8012a5c:	f7ff fa12 	bl	8011e84 <LEAF_poly_blep>
 8012a60:	ee38 8a00 	vadd.f32	s16, s16, s0
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 8012a64:	eef0 0a49 	vmov.f32	s1, s18
 8012a68:	eeb0 0a68 	vmov.f32	s0, s17
 8012a6c:	f7ff fa0a 	bl	8011e84 <LEAF_poly_blep>
    c->phase += c->inc;
 8012a70:	68a2      	ldr	r2, [r4, #8]
 8012a72:	6863      	ldr	r3, [r4, #4]
 8012a74:	4413      	add	r3, r2
 8012a76:	6063      	str	r3, [r4, #4]
    return out;
}
 8012a78:	ee38 0a40 	vsub.f32	s0, s16, s0
 8012a7c:	ecbd 8b04 	vpop	{d8-d9}
 8012a80:	bd10      	pop	{r4, pc}
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 8012a82:	eddf 7a02 	vldr	s15, [pc, #8]	; 8012a8c <tPBPulse_tick+0x80>
 8012a86:	e7e1      	b.n	8012a4c <tPBPulse_tick+0x40>
 8012a88:	2f80000d 	.word	0x2f80000d
 8012a8c:	00000000 	.word	0x00000000

08012a90 <tPBPulse_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#else
void    tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#endif
{
    _tPBPulse* c = *osc;
 8012a90:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 8012a92:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012a96:	edd3 7a07 	vldr	s15, [r3, #28]
 8012a9a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012a9e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012aa2:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8012aa6:	4770      	bx	lr

08012aa8 <tPBPulse_setWidth>:

void    tPBPulse_setWidth    (tPBPulse* const osc, Lfloat width)
{
    _tPBPulse* c = *osc;
 8012aa8:	6803      	ldr	r3, [r0, #0]
    //clip width to avoid silence from pulse widths of 0 or 1
    if (width < 0.05f)
 8012aaa:	eddf 7a12 	vldr	s15, [pc, #72]	; 8012af4 <tPBPulse_setWidth+0x4c>
 8012aae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab6:	d501      	bpl.n	8012abc <tPBPulse_setWidth+0x14>
    {
        width = 0.05f;
 8012ab8:	eeb0 0a67 	vmov.f32	s0, s15
    }
    if (width > 0.95f)
 8012abc:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8012af8 <tPBPulse_setWidth+0x50>
 8012ac0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8012ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac8:	dd01      	ble.n	8012ace <tPBPulse_setWidth+0x26>
    {
        width = 0.95f;
 8012aca:	eeb0 0a67 	vmov.f32	s0, s15
    }
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8012ace:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012ad2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012ad6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8012afc <tPBPulse_setWidth+0x54>
 8012ada:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012ae2:	edc3 7a05 	vstr	s15, [r3, #20]
    c->width = width * TWO_TO_32;
 8012ae6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012aea:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012aee:	ed83 0a04 	vstr	s0, [r3, #16]
}
 8012af2:	4770      	bx	lr
 8012af4:	3d4ccccd 	.word	0x3d4ccccd
 8012af8:	3f733333 	.word	0x3f733333
 8012afc:	4f800000 	.word	0x4f800000

08012b00 <tPBSaw_initToPool>:
{
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
 8012b00:	b538      	push	{r3, r4, r5, lr}
 8012b02:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 8012b04:	680c      	ldr	r4, [r1, #0]
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
 8012b06:	4621      	mov	r1, r4
 8012b08:	2020      	movs	r0, #32
 8012b0a:	f7ff fbc5 	bl	8012298 <mpool_alloc>
 8012b0e:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8012b10:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8012b12:	6863      	ldr	r3, [r4, #4]
    
    c->invSampleRate = leaf->invSampleRate;
 8012b14:	edd3 7a01 	vldr	s15, [r3, #4]
 8012b18:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8012b1c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8012b34 <tPBSaw_initToPool+0x34>
 8012b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012b24:	edc0 7a05 	vstr	s15, [r0, #20]
    c->inc      =  0;
 8012b28:	2300      	movs	r3, #0
 8012b2a:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 8012b2c:	6043      	str	r3, [r0, #4]
    c->freq = 0.0f;
 8012b2e:	2300      	movs	r3, #0
 8012b30:	60c3      	str	r3, [r0, #12]
}
 8012b32:	bd38      	pop	{r3, r4, r5, pc}
 8012b34:	4f800000 	.word	0x4f800000

08012b38 <tPBSaw_init>:
{
 8012b38:	b508      	push	{r3, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
 8012b3a:	3118      	adds	r1, #24
 8012b3c:	f7ff ffe0 	bl	8012b00 <tPBSaw_initToPool>
}
 8012b40:	bd08      	pop	{r3, pc}
	...

08012b44 <tPBSaw_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSaw_tick          (tPBSaw* const osc)
#else
Lfloat   tPBSaw_tick          (tPBSaw* const osc)
#endif
{
 8012b44:	b510      	push	{r4, lr}
 8012b46:	ed2d 8b02 	vpush	{d8}
    _tPBSaw* c = *osc;
 8012b4a:	6804      	ldr	r4, [r0, #0]
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
 8012b4c:	edd4 7a01 	vldr	s15, [r4, #4]
 8012b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b54:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 8012b94 <tPBSaw_tick+0x50>
 8012b58:	ee27 8a88 	vmul.f32	s16, s15, s16
 8012b5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012b60:	ee38 8a47 	vsub.f32	s16, s16, s14

    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
 8012b64:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8012b98 <tPBSaw_tick+0x54>
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8012b68:	ed94 7a02 	vldr	s14, [r4, #8]
 8012b6c:	eef8 0ac7 	vcvt.f32.s32	s1, s14
    out -= LEAF_poly_blep(phaseFloat, incFloat);
 8012b70:	ee60 0a80 	vmul.f32	s1, s1, s0
 8012b74:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012b78:	f7ff f984 	bl	8011e84 <LEAF_poly_blep>
 8012b7c:	ee38 0a40 	vsub.f32	s0, s16, s0
    c->phase += c->inc;
 8012b80:	68a2      	ldr	r2, [r4, #8]
 8012b82:	6863      	ldr	r3, [r4, #4]
 8012b84:	4413      	add	r3, r2
 8012b86:	6063      	str	r3, [r4, #4]
    return (-1.0f * out);
}
 8012b88:	eeb1 0a40 	vneg.f32	s0, s0
 8012b8c:	ecbd 8b02 	vpop	{d8}
 8012b90:	bd10      	pop	{r4, pc}
 8012b92:	bf00      	nop
 8012b94:	2ffffff6 	.word	0x2ffffff6
 8012b98:	2f80000d 	.word	0x2f80000d

08012b9c <tPBSaw_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#else
void    tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#endif
{
    _tPBSaw* c = *osc;
 8012b9c:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 8012b9e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012ba2:	edd3 7a05 	vldr	s15, [r3, #20]
 8012ba6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012baa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8012bae:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8012bb2:	4770      	bx	lr

08012bb4 <tPBSawSquare_initToPool>:
{
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
 8012bb4:	b538      	push	{r3, r4, r5, lr}
 8012bb6:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 8012bb8:	680c      	ldr	r4, [r1, #0]
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
 8012bba:	4621      	mov	r1, r4
 8012bbc:	2028      	movs	r0, #40	; 0x28
 8012bbe:	f7ff fb6b 	bl	8012298 <mpool_alloc>
 8012bc2:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8012bc4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8012bc6:	6863      	ldr	r3, [r4, #4]
    
    c->invSampleRate = leaf->invSampleRate;
 8012bc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8012bcc:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8012bd0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8012be8 <tPBSawSquare_initToPool+0x34>
 8012bd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012bd8:	edc0 7a05 	vstr	s15, [r0, #20]
    c->inc      =  0;
 8012bdc:	2300      	movs	r3, #0
 8012bde:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 8012be0:	6043      	str	r3, [r0, #4]
    c->freq = 0.0f;
 8012be2:	2300      	movs	r3, #0
 8012be4:	60c3      	str	r3, [r0, #12]

}
 8012be6:	bd38      	pop	{r3, r4, r5, pc}
 8012be8:	4f800000 	.word	0x4f800000

08012bec <tPBSawSquare_init>:
{
 8012bec:	b508      	push	{r3, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
 8012bee:	3118      	adds	r1, #24
 8012bf0:	f7ff ffe0 	bl	8012bb4 <tPBSawSquare_initToPool>
}
 8012bf4:	bd08      	pop	{r3, pc}
	...

08012bf8 <tPBSawSquare_tick>:
#ifdef ITCMRAM
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_tick          (tPBSawSquare* const osc)
#else
Lfloat   tPBSawSquare_tick          (tPBSawSquare* const osc)
#endif
{
 8012bf8:	b510      	push	{r4, lr}
 8012bfa:	ed2d 8b06 	vpush	{d8-d10}
    _tPBSawSquare* c = *osc;
 8012bfe:	6804      	ldr	r4, [r0, #0]

    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8012c00:	6863      	ldr	r3, [r4, #4]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	db44      	blt.n	8012c90 <tPBSawSquare_tick+0x98>
 8012c06:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012c0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012c0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012c12:	ee37 8ac7 	vsub.f32	s16, s15, s14
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 8012c16:	ee07 3a90 	vmov	s15, r3
 8012c1a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 8012c1e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8012c98 <tPBSawSquare_tick+0xa0>
 8012c22:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012c26:	ee30 9a00 	vadd.f32	s18, s0, s0
 8012c2a:	ee39 9a47 	vsub.f32	s18, s18, s14
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8012c2e:	ed94 7a02 	vldr	s14, [r4, #8]
 8012c32:	eef8 9ac7 	vcvt.f32.s32	s19, s14
 8012c36:	ee69 9aa7 	vmul.f32	s19, s19, s15
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 8012c3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012c3e:	ee08 3a90 	vmov	s17, r3
 8012c42:	eef8 8a68 	vcvt.f32.u32	s17, s17
 8012c46:	ee68 8aa7 	vmul.f32	s17, s17, s15
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
 8012c4a:	eef0 0a69 	vmov.f32	s1, s19
 8012c4e:	f7ff f919 	bl	8011e84 <LEAF_poly_blep>
 8012c52:	eeb0 aa40 	vmov.f32	s20, s0
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 8012c56:	eef0 0a69 	vmov.f32	s1, s19
 8012c5a:	eeb0 0a68 	vmov.f32	s0, s17
 8012c5e:	f7ff f911 	bl	8011e84 <LEAF_poly_blep>
    

    sawOut -= resetBlep;
 8012c62:	ee39 9a4a 	vsub.f32	s18, s18, s20
    
    squareOut += resetBlep;
 8012c66:	ee38 8a0a 	vadd.f32	s16, s16, s20
    squareOut -= midBlep;
 8012c6a:	ee38 8a40 	vsub.f32	s16, s16, s0

    c->phase += c->inc;
 8012c6e:	68a2      	ldr	r2, [r4, #8]
 8012c70:	6863      	ldr	r3, [r4, #4]
 8012c72:	4413      	add	r3, r2
 8012c74:	6063      	str	r3, [r4, #4]
    
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 8012c76:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8012c7a:	ee29 9a67 	vnmul.f32	s18, s18, s15
 8012c7e:	ed94 0a08 	vldr	s0, [r4, #32]
 8012c82:	ee20 0a08 	vmul.f32	s0, s0, s16
}
 8012c86:	ee39 0a00 	vadd.f32	s0, s18, s0
 8012c8a:	ecbd 8b06 	vpop	{d8-d10}
 8012c8e:	bd10      	pop	{r4, pc}
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8012c90:	eddf 7a02 	vldr	s15, [pc, #8]	; 8012c9c <tPBSawSquare_tick+0xa4>
 8012c94:	e7b9      	b.n	8012c0a <tPBSawSquare_tick+0x12>
 8012c96:	bf00      	nop
 8012c98:	2f80000d 	.word	0x2f80000d
 8012c9c:	00000000 	.word	0x00000000

08012ca0 <tPBSawSquare_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#else
void    tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#endif
{
    _tPBSawSquare* c = *osc;
 8012ca0:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 8012ca2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
 8012ca6:	edd3 7a05 	vldr	s15, [r3, #20]
 8012caa:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012cae:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012cb2:	ed83 0a02 	vstr	s0, [r3, #8]

}
 8012cb6:	4770      	bx	lr

08012cb8 <tPBSawSquare_setShape>:

void    tPBSawSquare_setShape      (tPBSawSquare* const osc, Lfloat inputShape)
{
    _tPBSawSquare* c = *osc;
 8012cb8:	6803      	ldr	r3, [r0, #0]
    
    c->shape  = inputShape;
 8012cba:	ed83 0a08 	vstr	s0, [r3, #32]
    c->oneMinusShape = 1.0f - inputShape;
 8012cbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012cc2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8012cc6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8012cca:	4770      	bx	lr

08012ccc <tNoise_initToPool>:
{
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
 8012ccc:	b570      	push	{r4, r5, r6, lr}
 8012cce:	4606      	mov	r6, r0
 8012cd0:	460c      	mov	r4, r1
    _tMempool* m = *mp;
 8012cd2:	6815      	ldr	r5, [r2, #0]
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8012cd4:	4629      	mov	r1, r5
 8012cd6:	2018      	movs	r0, #24
 8012cd8:	f7ff fade 	bl	8012298 <mpool_alloc>
 8012cdc:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 8012cde:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 8012ce0:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
 8012ce2:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 8012ce4:	691b      	ldr	r3, [r3, #16]
 8012ce6:	6143      	str	r3, [r0, #20]
}
 8012ce8:	bd70      	pop	{r4, r5, r6, pc}

08012cea <tNoise_init>:
{
 8012cea:	b508      	push	{r3, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
 8012cec:	3218      	adds	r2, #24
 8012cee:	f7ff ffed 	bl	8012ccc <tNoise_initToPool>
}
 8012cf2:	bd08      	pop	{r3, pc}

08012cf4 <tNoise_free>:

void    tNoise_free (tNoise* const ns)
{
 8012cf4:	b508      	push	{r3, lr}
    _tNoise* n = *ns;
 8012cf6:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)n, n->mempool);
 8012cf8:	6801      	ldr	r1, [r0, #0]
 8012cfa:	f7ff fbb9 	bl	8012470 <mpool_free>
}
 8012cfe:	bd08      	pop	{r3, pc}

08012d00 <tNoise_tick>:

Lfloat   tNoise_tick(tNoise* const ns)
{
 8012d00:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 8012d02:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 8012d04:	6963      	ldr	r3, [r4, #20]
 8012d06:	4798      	blx	r3
 8012d08:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012d0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012d10:	ee30 0a67 	vsub.f32	s0, s0, s15
    
    if (n->type == PinkNoise)
 8012d14:	7923      	ldrb	r3, [r4, #4]
 8012d16:	2b01      	cmp	r3, #1
 8012d18:	d000      	beq.n	8012d1c <tNoise_tick+0x1c>
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 8012d1a:	bd10      	pop	{r4, pc}
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8012d1c:	ed94 7a02 	vldr	s14, [r4, #8]
 8012d20:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8012d90 <tNoise_tick+0x90>
 8012d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d28:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8012d94 <tNoise_tick+0x94>
 8012d2c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012d30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d34:	ed84 7a02 	vstr	s14, [r4, #8]
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8012d38:	edd4 6a03 	vldr	s13, [r4, #12]
 8012d3c:	eddf 7a16 	vldr	s15, [pc, #88]	; 8012d98 <tNoise_tick+0x98>
 8012d40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012d44:	eddf 7a15 	vldr	s15, [pc, #84]	; 8012d9c <tNoise_tick+0x9c>
 8012d48:	ee60 7a27 	vmul.f32	s15, s0, s15
 8012d4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012d50:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8012d54:	edd4 7a04 	vldr	s15, [r4, #16]
 8012d58:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8012da0 <tNoise_tick+0xa0>
 8012d5c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012d60:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8012da4 <tNoise_tick+0xa4>
 8012d64:	ee20 6a06 	vmul.f32	s12, s0, s12
 8012d68:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012d6c:	edc4 7a04 	vstr	s15, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8012d70:	ee37 7a26 	vadd.f32	s14, s14, s13
 8012d74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012d78:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8012da8 <tNoise_tick+0xa8>
 8012d7c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8012d80:	ee77 7a80 	vadd.f32	s15, s15, s0
        return (tmp * 0.05f);
 8012d84:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8012dac <tNoise_tick+0xac>
 8012d88:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012d8c:	e7c5      	b.n	8012d1a <tNoise_tick+0x1a>
 8012d8e:	bf00      	nop
 8012d90:	3f7f65fe 	.word	0x3f7f65fe
 8012d94:	3dcad8a1 	.word	0x3dcad8a1
 8012d98:	3f76872b 	.word	0x3f76872b
 8012d9c:	3e97d0ff 	.word	0x3e97d0ff
 8012da0:	3f11eb85 	.word	0x3f11eb85
 8012da4:	3f86be97 	.word	0x3f86be97
 8012da8:	3e3d3c36 	.word	0x3e3d3c36
 8012dac:	3d4ccccd 	.word	0x3d4ccccd

08012db0 <tIntPhasor_initToPool>:
{
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
 8012db0:	b538      	push	{r3, r4, r5, lr}
 8012db2:	4605      	mov	r5, r0
    _tMempool* m = *mp;
 8012db4:	680c      	ldr	r4, [r1, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8012db6:	4621      	mov	r1, r4
 8012db8:	201c      	movs	r0, #28
 8012dba:	f7ff fa6d 	bl	8012298 <mpool_alloc>
 8012dbe:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8012dc0:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8012dc2:	6862      	ldr	r2, [r4, #4]
    
    c->phase    =  0;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	6043      	str	r3, [r0, #4]
    c->inc  = 0;
 8012dc8:	6083      	str	r3, [r0, #8]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8012dca:	edd2 7a01 	vldr	s15, [r2, #4]
 8012dce:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8012ddc <tIntPhasor_initToPool+0x2c>
 8012dd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012dd6:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8012dda:	bd38      	pop	{r3, r4, r5, pc}
 8012ddc:	4f800000 	.word	0x4f800000

08012de0 <tIntPhasor_init>:
{
 8012de0:	b508      	push	{r3, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
 8012de2:	3118      	adds	r1, #24
 8012de4:	f7ff ffe4 	bl	8012db0 <tIntPhasor_initToPool>
}
 8012de8:	bd08      	pop	{r3, pc}
	...

08012dec <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 8012dec:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
 8012dee:	6853      	ldr	r3, [r2, #4]
 8012df0:	6891      	ldr	r1, [r2, #8]
 8012df2:	440b      	add	r3, r1
 8012df4:	6053      	str	r3, [r2, #4]
    
    return c->phase * INV_TWO_TO_32; 
 8012df6:	ee07 3a90 	vmov	s15, r3
 8012dfa:	eeb8 0a67 	vcvt.f32.u32	s0, s15
}
 8012dfe:	eddf 7a02 	vldr	s15, [pc, #8]	; 8012e08 <tIntPhasor_tick+0x1c>
 8012e02:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012e06:	4770      	bx	lr
 8012e08:	2f80000d 	.word	0x2f80000d

08012e0c <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
 8012e0c:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 8012e0e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8012e12:	edd3 7a06 	vldr	s15, [r3, #24]
 8012e16:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012e1a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012e1e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8012e22:	4770      	bx	lr

08012e24 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
 8012e24:	6803      	ldr	r3, [r0, #0]
    
    int i = phase;
 8012e26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 8012e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012e2e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8012e32:	eddf 7a04 	vldr	s15, [pc, #16]	; 8012e44 <tIntPhasor_setPhase+0x20>
 8012e36:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012e3a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8012e3e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8012e42:	4770      	bx	lr
 8012e44:	4f800000 	.word	0x4f800000

08012e48 <tSquareLFO_tick>:
    mpool_free((char*)c, c->mempool);
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tSquareLFO_tick(tSquareLFO* const cy)
{
 8012e48:	b510      	push	{r4, lr}
 8012e4a:	ed2d 8b02 	vpush	{d8}
    _tSquareLFO* c = *cy;
 8012e4e:	6804      	ldr	r4, [r0, #0]
    // Phasor increment
    Lfloat a = tIntPhasor_tick(&c->phasor);
 8012e50:	f104 0008 	add.w	r0, r4, #8
 8012e54:	f7ff ffca 	bl	8012dec <tIntPhasor_tick>
 8012e58:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat b = tIntPhasor_tick(&c->invPhasor);
 8012e5c:	f104 000c 	add.w	r0, r4, #12
 8012e60:	f7ff ffc4 	bl	8012dec <tIntPhasor_tick>
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8012e64:	ee38 0a40 	vsub.f32	s0, s16, s0
 8012e68:	edd4 7a01 	vldr	s15, [r4, #4]
 8012e6c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012e70:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012e74:	ee30 0a67 	vsub.f32	s0, s0, s15
    return 2 * tmp;
}
 8012e78:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012e7c:	ecbd 8b02 	vpop	{d8}
 8012e80:	bd10      	pop	{r4, pc}

08012e82 <tSquareLFO_setFreq>:

void     tSquareLFO_setFreq(tSquareLFO* const cy, Lfloat freq)
{
 8012e82:	b510      	push	{r4, lr}
 8012e84:	ed2d 8b02 	vpush	{d8}
 8012e88:	eeb0 8a40 	vmov.f32	s16, s0
    _tSquareLFO* c = *cy;
 8012e8c:	6804      	ldr	r4, [r0, #0]
    tIntPhasor_setFreq(&c->phasor,freq);
 8012e8e:	f104 0008 	add.w	r0, r4, #8
 8012e92:	f7ff ffbb 	bl	8012e0c <tIntPhasor_setFreq>
    tIntPhasor_setFreq(&c->invPhasor,freq);
 8012e96:	eeb0 0a48 	vmov.f32	s0, s16
 8012e9a:	f104 000c 	add.w	r0, r4, #12
 8012e9e:	f7ff ffb5 	bl	8012e0c <tIntPhasor_setFreq>
}
 8012ea2:	ecbd 8b02 	vpop	{d8}
 8012ea6:	bd10      	pop	{r4, pc}

08012ea8 <tSquareLFO_setPulseWidth>:
    tIntPhasor_setSampleRate(&c->phasor, sr);
    tIntPhasor_setSampleRate(&c->invPhasor, sr);
}

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
 8012ea8:	b508      	push	{r3, lr}
    _tSquareLFO *c = *cy;
 8012eaa:	6800      	ldr	r0, [r0, #0]

    c->pulsewidth = pw;
 8012eac:	ed80 0a01 	vstr	s0, [r0, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012eb0:	6883      	ldr	r3, [r0, #8]
 8012eb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8012eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012eba:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8012ed0 <tSquareLFO_setPulseWidth+0x28>
 8012ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012ec2:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012ec6:	300c      	adds	r0, #12
 8012ec8:	f7ff ffac 	bl	8012e24 <tIntPhasor_setPhase>
}
 8012ecc:	bd08      	pop	{r3, pc}
 8012ece:	bf00      	nop
 8012ed0:	2f80000d 	.word	0x2f80000d

08012ed4 <tSquareLFO_initToPool>:
{
 8012ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ed6:	4606      	mov	r6, r0
 8012ed8:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 8012eda:	680f      	ldr	r7, [r1, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8012edc:	4639      	mov	r1, r7
 8012ede:	2010      	movs	r0, #16
 8012ee0:	f7ff f9da 	bl	8012298 <mpool_alloc>
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8012ee8:	f840 7b08 	str.w	r7, [r0], #8
    tIntPhasor_initToPool(&c->phasor,mp);
 8012eec:	4629      	mov	r1, r5
 8012eee:	f7ff ff5f 	bl	8012db0 <tIntPhasor_initToPool>
    tIntPhasor_initToPool(&c->invPhasor,mp); 
 8012ef2:	4629      	mov	r1, r5
 8012ef4:	f104 000c 	add.w	r0, r4, #12
 8012ef8:	f7ff ff5a 	bl	8012db0 <tIntPhasor_initToPool>
    tSquareLFO_setPulseWidth(cy, 0.5f);
 8012efc:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8012f00:	4630      	mov	r0, r6
 8012f02:	f7ff ffd1 	bl	8012ea8 <tSquareLFO_setPulseWidth>
}
 8012f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012f08 <tSquareLFO_init>:
{
 8012f08:	b508      	push	{r3, lr}
    tSquareLFO_initToPool(cy, &leaf->mempool);
 8012f0a:	3118      	adds	r1, #24
 8012f0c:	f7ff ffe2 	bl	8012ed4 <tSquareLFO_initToPool>
}
 8012f10:	bd08      	pop	{r3, pc}
	...

08012f14 <tSquareLFO_setPhase>:

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
 8012f14:	b510      	push	{r4, lr}
    _tSquareLFO *c = *cy;
 8012f16:	6804      	ldr	r4, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
 8012f18:	f104 0008 	add.w	r0, r4, #8
 8012f1c:	f7ff ff82 	bl	8012e24 <tIntPhasor_setPhase>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8012f20:	ed94 0a01 	vldr	s0, [r4, #4]
 8012f24:	68a3      	ldr	r3, [r4, #8]
 8012f26:	edd3 7a01 	vldr	s15, [r3, #4]
 8012f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012f2e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8012f44 <tSquareLFO_setPhase+0x30>
 8012f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f36:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012f3a:	f104 000c 	add.w	r0, r4, #12
 8012f3e:	f7ff ff71 	bl	8012e24 <tIntPhasor_setPhase>
}
 8012f42:	bd10      	pop	{r4, pc}
 8012f44:	2f80000d 	.word	0x2f80000d

08012f48 <tSawSquareLFO_initToPool>:
    tSawSquareLFO_initToPool(cy, &leaf->mempool);

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
 8012f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f4a:	4606      	mov	r6, r0
 8012f4c:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 8012f4e:	680f      	ldr	r7, [r1, #0]
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8012f50:	4639      	mov	r1, r7
 8012f52:	2010      	movs	r0, #16
 8012f54:	f7ff f9a0 	bl	8012298 <mpool_alloc>
 8012f58:	4604      	mov	r4, r0
 8012f5a:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8012f5c:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 8012f60:	4629      	mov	r1, r5
 8012f62:	f7ff ffb7 	bl	8012ed4 <tSquareLFO_initToPool>
    tIntPhasor_initToPool(&c->saw,mp); 
 8012f66:	4629      	mov	r1, r5
 8012f68:	f104 0008 	add.w	r0, r4, #8
 8012f6c:	f7ff ff20 	bl	8012db0 <tIntPhasor_initToPool>
}
 8012f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012f72 <tSawSquareLFO_init>:
{
 8012f72:	b508      	push	{r3, lr}
    tSawSquareLFO_initToPool(cy, &leaf->mempool);
 8012f74:	3118      	adds	r1, #24
 8012f76:	f7ff ffe7 	bl	8012f48 <tSawSquareLFO_initToPool>
}
 8012f7a:	bd08      	pop	{r3, pc}

08012f7c <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
 8012f7c:	b510      	push	{r4, lr}
 8012f7e:	ed2d 8b02 	vpush	{d8}
    _tSawSquareLFO* c = *cy;
 8012f82:	6804      	ldr	r4, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8012f84:	f104 0008 	add.w	r0, r4, #8
 8012f88:	f7ff ff30 	bl	8012dec <tIntPhasor_tick>
 8012f8c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012f90:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012f94:	ee30 8a00 	vadd.f32	s16, s0, s0
    Lfloat b = tSquareLFO_tick(&c->square);
 8012f98:	f104 000c 	add.w	r0, r4, #12
 8012f9c:	f7ff ff54 	bl	8012e48 <tSquareLFO_tick>
    return  (1 - c->shape) * a + c->shape * b; 
 8012fa0:	ed94 7a01 	vldr	s14, [r4, #4]
 8012fa4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012fa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012fac:	ee67 7a88 	vmul.f32	s15, s15, s16
 8012fb0:	ee27 0a00 	vmul.f32	s0, s14, s0
}
 8012fb4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8012fb8:	ecbd 8b02 	vpop	{d8}
 8012fbc:	bd10      	pop	{r4, pc}

08012fbe <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
 8012fbe:	b510      	push	{r4, lr}
 8012fc0:	ed2d 8b02 	vpush	{d8}
 8012fc4:	eeb0 8a40 	vmov.f32	s16, s0
    _tSawSquareLFO* c = *cy;
 8012fc8:	6804      	ldr	r4, [r0, #0]
    tSquareLFO_setFreq(&c->square, freq);
 8012fca:	f104 000c 	add.w	r0, r4, #12
 8012fce:	f7ff ff58 	bl	8012e82 <tSquareLFO_setFreq>
    tIntPhasor_setFreq(&c->saw, freq);
 8012fd2:	eeb0 0a48 	vmov.f32	s0, s16
 8012fd6:	f104 0008 	add.w	r0, r4, #8
 8012fda:	f7ff ff17 	bl	8012e0c <tIntPhasor_setFreq>
}
 8012fde:	ecbd 8b02 	vpop	{d8}
 8012fe2:	bd10      	pop	{r4, pc}

08012fe4 <tSawSquareLFO_setPhase>:
    _tSawSquareLFO* c = *cy;
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
 8012fe4:	b510      	push	{r4, lr}
 8012fe6:	ed2d 8b02 	vpush	{d8}
 8012fea:	eeb0 8a40 	vmov.f32	s16, s0
    _tSawSquareLFO* c = *cy;
 8012fee:	6804      	ldr	r4, [r0, #0]
    tSquareLFO_setPhase(&c->square, phase);
 8012ff0:	f104 000c 	add.w	r0, r4, #12
 8012ff4:	f7ff ff8e 	bl	8012f14 <tSquareLFO_setPhase>
    tIntPhasor_setPhase(&c->saw, phase);
 8012ff8:	eeb0 0a48 	vmov.f32	s0, s16
 8012ffc:	f104 0008 	add.w	r0, r4, #8
 8013000:	f7ff ff10 	bl	8012e24 <tIntPhasor_setPhase>
}
 8013004:	ecbd 8b02 	vpop	{d8}
 8013008:	bd10      	pop	{r4, pc}

0801300a <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
 801300a:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
 801300c:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8013010:	4770      	bx	lr
	...

08013014 <tTriLFO_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tTriLFO_tick(tTriLFO* const cy)
{
    _tTriLFO* c = *cy;
 8013014:	6803      	ldr	r3, [r0, #0]
    c->phase += c->inc;
 8013016:	689a      	ldr	r2, [r3, #8]
 8013018:	6859      	ldr	r1, [r3, #4]
 801301a:	440a      	add	r2, r1
 801301c:	605a      	str	r2, [r3, #4]
    
    //bitmask fun
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 801301e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    uint32_t mask = shiftedPhase >> 31; //get the sign bit
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 8013022:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 8013026:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
 801302a:	ee00 3a10 	vmov	s0, r3
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 801302e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013032:	eddf 7a05 	vldr	s15, [pc, #20]	; 8013048 <tTriLFO_tick+0x34>
 8013036:	ee20 0a27 	vmul.f32	s0, s0, s15
 801303a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801303e:	ee30 0a67 	vsub.f32	s0, s0, s15
    return output;

}
 8013042:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013046:	4770      	bx	lr
 8013048:	2ffffff6 	.word	0x2ffffff6

0801304c <tTriLFO_setFreq>:

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
 801304c:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
 801304e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8013052:	edd3 7a05 	vldr	s15, [r3, #20]
 8013056:	ee27 0a80 	vmul.f32	s0, s15, s0
 801305a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801305e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8013062:	4770      	bx	lr

08013064 <tTriLFO_initToPool>:
{
 8013064:	b538      	push	{r3, r4, r5, lr}
 8013066:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8013068:	680d      	ldr	r5, [r1, #0]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801306a:	4629      	mov	r1, r5
 801306c:	2018      	movs	r0, #24
 801306e:	f7ff f913 	bl	8012298 <mpool_alloc>
 8013072:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 8013074:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8013076:	686a      	ldr	r2, [r5, #4]
    c->inc      =  0;
 8013078:	2300      	movs	r3, #0
 801307a:	6083      	str	r3, [r0, #8]
    c->phase    =  0;
 801307c:	6043      	str	r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 801307e:	edd2 7a01 	vldr	s15, [r2, #4]
 8013082:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8013086:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80130a0 <tTriLFO_initToPool+0x3c>
 801308a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801308e:	edc0 7a05 	vstr	s15, [r0, #20]
    tTriLFO_setFreq(cy, 220.0f);
 8013092:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80130a4 <tTriLFO_initToPool+0x40>
 8013096:	4620      	mov	r0, r4
 8013098:	f7ff ffd8 	bl	801304c <tTriLFO_setFreq>
}
 801309c:	bd38      	pop	{r3, r4, r5, pc}
 801309e:	bf00      	nop
 80130a0:	4f800000 	.word	0x4f800000
 80130a4:	435c0000 	.word	0x435c0000

080130a8 <tTriLFO_init>:
{
 80130a8:	b508      	push	{r3, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
 80130aa:	3118      	adds	r1, #24
 80130ac:	f7ff ffda 	bl	8013064 <tTriLFO_initToPool>
}
 80130b0:	bd08      	pop	{r3, pc}

080130b2 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
 80130b2:	6803      	ldr	r3, [r0, #0]
    int i = phase;
 80130b4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 80130b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80130bc:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 80130c0:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 80130c4:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80130c8:	4770      	bx	lr

080130ca <tSineTriLFO_initToPool>:
{
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
 80130ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130cc:	4606      	mov	r6, r0
 80130ce:	460d      	mov	r5, r1
    _tMempool* m = *mp;
 80130d0:	680f      	ldr	r7, [r1, #0]
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 80130d2:	4639      	mov	r1, r7
 80130d4:	2010      	movs	r0, #16
 80130d6:	f7ff f8df 	bl	8012298 <mpool_alloc>
 80130da:	4604      	mov	r4, r0
 80130dc:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 80130de:	f840 7b08 	str.w	r7, [r0], #8
    tTriLFO_initToPool(&c->tri,mp);
 80130e2:	4629      	mov	r1, r5
 80130e4:	f7ff ffbe 	bl	8013064 <tTriLFO_initToPool>
    tCycle_initToPool(&c->sine,mp); 
 80130e8:	4629      	mov	r1, r5
 80130ea:	f104 000c 	add.w	r0, r4, #12
 80130ee:	f7ff fa4b 	bl	8012588 <tCycle_initToPool>
   
}
 80130f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080130f4 <tSineTriLFO_init>:
{
 80130f4:	b508      	push	{r3, lr}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
 80130f6:	3118      	adds	r1, #24
 80130f8:	f7ff ffe7 	bl	80130ca <tSineTriLFO_initToPool>
}
 80130fc:	bd08      	pop	{r3, pc}

080130fe <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
 80130fe:	b510      	push	{r4, lr}
 8013100:	ed2d 8b02 	vpush	{d8}
    _tSineTriLFO* c = *cy;
 8013104:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
 8013106:	f104 000c 	add.w	r0, r4, #12
 801310a:	f7ff fa65 	bl	80125d8 <tCycle_tick>
 801310e:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat b = tTriLFO_tick(&c->tri);
 8013112:	f104 0008 	add.w	r0, r4, #8
 8013116:	f7ff ff7d 	bl	8013014 <tTriLFO_tick>
    return  (1.0f - c->shape) * a + c->shape * b;
 801311a:	ed94 7a01 	vldr	s14, [r4, #4]
 801311e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013122:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013126:	ee67 7a88 	vmul.f32	s15, s15, s16
 801312a:	ee27 0a00 	vmul.f32	s0, s14, s0
}
 801312e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013132:	ecbd 8b02 	vpop	{d8}
 8013136:	bd10      	pop	{r4, pc}

08013138 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
 8013138:	b510      	push	{r4, lr}
 801313a:	ed2d 8b02 	vpush	{d8}
 801313e:	eeb0 8a40 	vmov.f32	s16, s0
    _tSineTriLFO* c = *cy;
 8013142:	6804      	ldr	r4, [r0, #0]
    tTriLFO_setFreq(&c->tri, freq);
 8013144:	f104 0008 	add.w	r0, r4, #8
 8013148:	f7ff ff80 	bl	801304c <tTriLFO_setFreq>
    tCycle_setFreq(&c->sine, freq);
 801314c:	eeb0 0a48 	vmov.f32	s0, s16
 8013150:	f104 000c 	add.w	r0, r4, #12
 8013154:	f7ff fa68 	bl	8012628 <tCycle_setFreq>
}
 8013158:	ecbd 8b02 	vpop	{d8}
 801315c:	bd10      	pop	{r4, pc}

0801315e <tSineTriLFO_setPhase>:
    _tSineTriLFO* c = *cy;
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
 801315e:	b510      	push	{r4, lr}
 8013160:	ed2d 8b02 	vpush	{d8}
 8013164:	eeb0 8a40 	vmov.f32	s16, s0
    _tSineTriLFO* c = *cy;
 8013168:	6804      	ldr	r4, [r0, #0]
    tTriLFO_setPhase(&c->tri, phase);
 801316a:	f104 0008 	add.w	r0, r4, #8
 801316e:	f7ff ffa0 	bl	80130b2 <tTriLFO_setPhase>
    tCycle_setPhase(&c->sine, phase);
 8013172:	eeb0 0a48 	vmov.f32	s0, s16
 8013176:	f104 000c 	add.w	r0, r4, #12
 801317a:	f7ff fa61 	bl	8012640 <tCycle_setPhase>
}
 801317e:	ecbd 8b02 	vpop	{d8}
 8013182:	bd10      	pop	{r4, pc}

08013184 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
 8013184:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 8013186:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 801318a:	4770      	bx	lr

0801318c <pickupNonLinearity>:
#endif

Lfloat   pickupNonLinearity          (Lfloat x)
{

	x = x * 2.0f;
 801318c:	ee30 0a00 	vadd.f32	s0, s0, s0
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8013190:	eddf 7a1a 	vldr	s15, [pc, #104]	; 80131fc <pickupNonLinearity+0x70>
 8013194:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013198:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8013200 <pickupNonLinearity+0x74>
 801319c:	ee20 7a07 	vmul.f32	s14, s0, s14
 80131a0:	ee27 7a00 	vmul.f32	s14, s14, s0
 80131a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80131a8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8013204 <pickupNonLinearity+0x78>
 80131ac:	ee20 7a07 	vmul.f32	s14, s0, s14
 80131b0:	ee27 7a00 	vmul.f32	s14, s14, s0
 80131b4:	ee27 7a00 	vmul.f32	s14, s14, s0
 80131b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80131bc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8013208 <pickupNonLinearity+0x7c>
 80131c0:	ee20 7a07 	vmul.f32	s14, s0, s14
 80131c4:	ee27 7a00 	vmul.f32	s14, s14, s0
 80131c8:	ee27 7a00 	vmul.f32	s14, s14, s0
 80131cc:	ee27 7a00 	vmul.f32	s14, s14, s0
 80131d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80131d4:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801320c <pickupNonLinearity+0x80>
 80131d8:	ee20 7a07 	vmul.f32	s14, s0, s14
 80131dc:	ee27 7a00 	vmul.f32	s14, s14, s0
 80131e0:	ee27 7a00 	vmul.f32	s14, s14, s0
 80131e4:	ee27 7a00 	vmul.f32	s14, s14, s0
 80131e8:	ee27 7a00 	vmul.f32	s14, s14, s0
 80131ec:	ee77 7a87 	vadd.f32	s15, s15, s14
	out *= 4.366812227074236f;
	return out;
}
 80131f0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8013210 <pickupNonLinearity+0x84>
 80131f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80131f8:	4770      	bx	lr
 80131fa:	bf00      	nop
 80131fc:	3d99999a 	.word	0x3d99999a
 8013200:	3bdd2f1b 	.word	0x3bdd2f1b
 8013204:	3b0a47ed 	.word	0x3b0a47ed
 8013208:	39f9096c 	.word	0x39f9096c
 801320c:	3a59d777 	.word	0x3a59d777
 8013210:	408bbced 	.word	0x408bbced

08013214 <tPickupNonLinearity_initToPool>:
void   tPickupNonLinearity_init          (tPickupNonLinearity* const pl, LEAF* const leaf)
{
	tPickupNonLinearity_initToPool(pl, &leaf->mempool);
}
void   tPickupNonLinearity_initToPool          (tPickupNonLinearity* const pl, tMempool* const mp)
{
 8013214:	b538      	push	{r3, r4, r5, lr}
 8013216:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8013218:	680d      	ldr	r5, [r1, #0]
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
 801321a:	4629      	mov	r1, r5
 801321c:	2008      	movs	r0, #8
 801321e:	f7ff f83b 	bl	8012298 <mpool_alloc>
 8013222:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 8013224:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
 8013226:	2300      	movs	r3, #0
 8013228:	6043      	str	r3, [r0, #4]
}
 801322a:	bd38      	pop	{r3, r4, r5, pc}

0801322c <tPickupNonLinearity_init>:
{
 801322c:	b508      	push	{r3, lr}
	tPickupNonLinearity_initToPool(pl, &leaf->mempool);
 801322e:	3118      	adds	r1, #24
 8013230:	f7ff fff0 	bl	8013214 <tPickupNonLinearity_initToPool>
}
 8013234:	bd08      	pop	{r3, pc}

08013236 <tPickupNonLinearity_free>:
void   tPickupNonLinearity_free          (tPickupNonLinearity* const pl)
{
 8013236:	b508      	push	{r3, lr}
	_tPickupNonLinearity* p = *pl;
 8013238:	6800      	ldr	r0, [r0, #0]
	mpool_free((char*)p, p->mempool);
 801323a:	6801      	ldr	r1, [r0, #0]
 801323c:	f7ff f918 	bl	8012470 <mpool_free>
}
 8013240:	bd08      	pop	{r3, pc}
	...

08013244 <tPickupNonLinearity_tick>:
Lfloat   tPickupNonLinearity_tick          (tPickupNonLinearity* const pl, Lfloat x)
{
	_tPickupNonLinearity* p = *pl;
 8013244:	6803      	ldr	r3, [r0, #0]
	x = x * 2.0f;
 8013246:	ee30 0a00 	vadd.f32	s0, s0, s0
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 801324a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80132bc <tPickupNonLinearity_tick+0x78>
 801324e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013252:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80132c0 <tPickupNonLinearity_tick+0x7c>
 8013256:	ee20 7a07 	vmul.f32	s14, s0, s14
 801325a:	ee27 7a00 	vmul.f32	s14, s14, s0
 801325e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013262:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80132c4 <tPickupNonLinearity_tick+0x80>
 8013266:	ee20 7a07 	vmul.f32	s14, s0, s14
 801326a:	ee27 7a00 	vmul.f32	s14, s14, s0
 801326e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013272:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013276:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80132c8 <tPickupNonLinearity_tick+0x84>
 801327a:	ee20 7a07 	vmul.f32	s14, s0, s14
 801327e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013282:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013286:	ee27 7a00 	vmul.f32	s14, s14, s0
 801328a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801328e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80132cc <tPickupNonLinearity_tick+0x88>
 8013292:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013296:	ee27 7a00 	vmul.f32	s14, s14, s0
 801329a:	ee27 7a00 	vmul.f32	s14, s14, s0
 801329e:	ee27 7a00 	vmul.f32	s14, s14, s0
 80132a2:	ee27 7a00 	vmul.f32	s14, s14, s0
 80132a6:	ee77 7a87 	vadd.f32	s15, s15, s14
	out *= 4.366812227074236f;
 80132aa:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80132d0 <tPickupNonLinearity_tick+0x8c>
 80132ae:	ee67 7a87 	vmul.f32	s15, s15, s14
	Lfloat y = out - p->prev;
 80132b2:	ed93 0a01 	vldr	s0, [r3, #4]
	return y;
}
 80132b6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80132ba:	4770      	bx	lr
 80132bc:	3d99999a 	.word	0x3d99999a
 80132c0:	3bdd2f1b 	.word	0x3bdd2f1b
 80132c4:	3b0a47ed 	.word	0x3b0a47ed
 80132c8:	39f9096c 	.word	0x39f9096c
 80132cc:	3a59d777 	.word	0x3a59d777
 80132d0:	408bbced 	.word	0x408bbced

080132d4 <tSimpleLivingString3_free>:


}

void    tSimpleLivingString3_free (tSimpleLivingString3* const pl)
{
 80132d4:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 80132d6:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_free(&p->fbLev);
 80132d8:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80132dc:	f7fb f9ac 	bl	800e638 <tFeedbackLeveler_free>
    tHighpass_free(&p->DCblocker);
 80132e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80132e4:	f7fc fa45 	bl	800f772 <tHighpass_free>
    tOnePole_free(&p->bridgeFilter);
 80132e8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80132ec:	f7fb ffc3 	bl	800f276 <tOnePole_free>
    tLinearDelay_free(&p->delayLineL);
 80132f0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80132f4:	f7fa fc1c 	bl	800db30 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineU);
 80132f8:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80132fc:	f7fa fc18 	bl	800db30 <tLinearDelay_free>

    tExpSmooth_free(&p->wlSmooth);
 8013300:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013304:	f7fb fd3d 	bl	800ed82 <tExpSmooth_free>

    
    mpool_free((char*)p, p->mempool);
 8013308:	6821      	ldr	r1, [r4, #0]
 801330a:	4620      	mov	r0, r4
 801330c:	f7ff f8b0 	bl	8012470 <mpool_free>
}
 8013310:	bd10      	pop	{r4, pc}
 8013312:	0000      	movs	r0, r0
 8013314:	0000      	movs	r0, r0
	...

08013318 <tSimpleLivingString3_setFreq>:

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
 8013318:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 801331a:	6804      	ldr	r4, [r0, #0]
    p->freq = freq;
 801331c:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 8013320:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
 8013324:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
 8013328:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 801332c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80133b8 <tSimpleLivingString3_setFreq+0xa0>
 8013330:	eeb4 5bc6 	vcmpe.f64	d5, d6
 8013334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013338:	d40d      	bmi.n	8013356 <tSimpleLivingString3_setFreq+0x3e>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801333a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801333c:	005b      	lsls	r3, r3, #1
 801333e:	ee00 3a10 	vmov	s0, r3
 8013342:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013346:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801334e:	d404      	bmi.n	801335a <tSimpleLivingString3_setFreq+0x42>
    Lfloat waveLength = (p->sampleRate/freq);
 8013350:	eeb0 0a67 	vmov.f32	s0, s15
 8013354:	e001      	b.n	801335a <tSimpleLivingString3_setFreq+0x42>
    if (waveLength<4.8) waveLength=4.8f;
 8013356:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80133c8 <tSimpleLivingString3_setFreq+0xb0>
    p->waveLengthInSamples =  waveLength * 0.5f;
 801335a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801335e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013362:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8013366:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801336a:	f7fb fd2f 	bl	800edcc <tExpSmooth_setDest>
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801336e:	ed94 7a05 	vldr	s14, [r4, #20]
 8013372:	eddf 7a16 	vldr	s15, [pc, #88]	; 80133cc <tSimpleLivingString3_setFreq+0xb4>
 8013376:	ee27 7a27 	vmul.f32	s14, s14, s15
 801337a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801337e:	eddf 7a14 	vldr	s15, [pc, #80]	; 80133d0 <tSimpleLivingString3_setFreq+0xb8>
 8013382:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8013386:	ed94 6a01 	vldr	s12, [r4, #4]
 801338a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801338e:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8013392:	ee84 5b06 	vdiv.f64	d5, d4, d6
 8013396:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801339a:	ee85 0b07 	vdiv.f64	d0, d5, d7
 801339e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 80133c0 <tSimpleLivingString3_setFreq+0xa8>
 80133a2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80133a6:	f003 fcab 	bl	8016d00 <exp>
 80133aa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80133ae:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
 80133b2:	bd10      	pop	{r4, pc}
 80133b4:	f3af 8000 	nop.w
 80133b8:	33333333 	.word	0x33333333
 80133bc:	40133333 	.word	0x40133333
 80133c0:	0a3d70a4 	.word	0x0a3d70a4
 80133c4:	c01ba3d7 	.word	0xc01ba3d7
 80133c8:	4099999a 	.word	0x4099999a
 80133cc:	3c23d70a 	.word	0x3c23d70a
 80133d0:	40dd0cb3 	.word	0x40dd0cb3
 80133d4:	00000000 	.word	0x00000000

080133d8 <tSimpleLivingString3_initToPool>:
{
 80133d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133dc:	ed2d 8b08 	vpush	{d8-d11}
 80133e0:	4680      	mov	r8, r0
 80133e2:	460e      	mov	r6, r1
 80133e4:	eef0 8a40 	vmov.f32	s17, s0
 80133e8:	eeb0 8a60 	vmov.f32	s16, s1
 80133ec:	ee11 9a10 	vmov	r9, s2
 80133f0:	eeb0 9a61 	vmov.f32	s18, s3
 80133f4:	eef0 9a42 	vmov.f32	s19, s4
 80133f8:	eeb0 aa62 	vmov.f32	s20, s5
 80133fc:	4617      	mov	r7, r2
 80133fe:	461d      	mov	r5, r3
    _tMempool* m = *mp;
 8013400:	f8d3 a000 	ldr.w	sl, [r3]
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 8013404:	4651      	mov	r1, sl
 8013406:	2070      	movs	r0, #112	; 0x70
 8013408:	f7fe ff46 	bl	8012298 <mpool_alloc>
 801340c:	4604      	mov	r4, r0
 801340e:	f8c8 0000 	str.w	r0, [r8]
    p->mempool = m;
 8013412:	f8c0 a000 	str.w	sl, [r0]
    LEAF* leaf = p->mempool->leaf;
 8013416:	f8da 3004 	ldr.w	r3, [sl, #4]
    p->oversampling = oversampling;
 801341a:	65c6      	str	r6, [r0, #92]	; 0x5c
    p->sampleRate = leaf->sampleRate * oversampling;
 801341c:	ed93 7a00 	vldr	s14, [r3]
 8013420:	ee07 6a90 	vmov	s15, r6
 8013424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013428:	ee67 7a87 	vmul.f32	s15, s15, s14
 801342c:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    p->curr=0.0f;
 8013430:	ed9f ba6b 	vldr	s22, [pc, #428]	; 80135e0 <tSimpleLivingString3_initToPool+0x208>
 8013434:	ed80 ba09 	vstr	s22, [r0, #36]	; 0x24
    p->maxLength = 2400 * oversampling;
 8013438:	f44f 6316 	mov.w	r3, #2400	; 0x960
 801343c:	fb03 f606 	mul.w	r6, r3, r6
 8013440:	6306      	str	r6, [r0, #48]	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 8013442:	f100 0658 	add.w	r6, r0, #88	; 0x58
 8013446:	ee87 0aa8 	vdiv.f32	s0, s15, s17
 801344a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801344e:	4629      	mov	r1, r5
 8013450:	eddf 0a64 	vldr	s1, [pc, #400]	; 80135e4 <tSimpleLivingString3_initToPool+0x20c>
 8013454:	ee20 0a2a 	vmul.f32	s0, s0, s21
 8013458:	4630      	mov	r0, r6
 801345a:	f7fb fc5d 	bl	800ed18 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 801345e:	f104 0b34 	add.w	fp, r4, #52	; 0x34
 8013462:	462a      	mov	r2, r5
 8013464:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013466:	ed94 0a02 	vldr	s0, [r4, #8]
 801346a:	4658      	mov	r0, fp
 801346c:	f7fa fc38 	bl	800dce0 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 8013470:	f104 0a38 	add.w	sl, r4, #56	; 0x38
 8013474:	462a      	mov	r2, r5
 8013476:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013478:	ed94 0a02 	vldr	s0, [r4, #8]
 801347c:	4650      	mov	r0, sl
 801347e:	f7fa fc2f 	bl	800dce0 <tLinearDelay_initToPool>
    tSimpleLivingString3_setFreq(pl, freq);
 8013482:	eeb0 0a68 	vmov.f32	s0, s17
 8013486:	4640      	mov	r0, r8
 8013488:	f7ff ff46 	bl	8013318 <tSimpleLivingString3_setFreq>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 801348c:	ed94 0a02 	vldr	s0, [r4, #8]
 8013490:	4658      	mov	r0, fp
 8013492:	f7fa fbec 	bl	800dc6e <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
 8013496:	ed94 0a02 	vldr	s0, [r4, #8]
 801349a:	4650      	mov	r0, sl
 801349c:	f7fa fbe7 	bl	800dc6e <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
 80134a0:	4658      	mov	r0, fp
 80134a2:	f7fa fb50 	bl	800db46 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
 80134a6:	4650      	mov	r0, sl
 80134a8:	f7fa fb4d 	bl	800db46 <tLinearDelay_clear>
    p->dampFreq = dampFreq;
 80134ac:	ed84 8a03 	vstr	s16, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 80134b0:	f104 083c 	add.w	r8, r4, #60	; 0x3c
 80134b4:	4629      	mov	r1, r5
 80134b6:	eeb0 0a48 	vmov.f32	s0, s16
 80134ba:	4640      	mov	r0, r8
 80134bc:	f7fb fefe 	bl	800f2bc <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
 80134c0:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 80134c4:	4640      	mov	r0, r8
 80134c6:	f7fb ff2f 	bl	800f328 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 80134ca:	eeb0 0a48 	vmov.f32	s0, s16
 80134ce:	4640      	mov	r0, r8
 80134d0:	f7fb fed8 	bl	800f284 <tOnePole_setFreq>
    p->rippleGain = 0.0f;
 80134d4:	ed84 ba19 	vstr	s22, [r4, #100]	; 0x64
    p->rippleDelay = 0.5f;
 80134d8:	edc4 aa1a 	vstr	s21, [r4, #104]	; 0x68
    p->invOnePlusr = 1.0f;
 80134dc:	f04f 5a7e 	mov.w	sl, #1065353216	; 0x3f800000
 80134e0:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
    tHighpass_initToPool(&p->DCblocker,13, mp);
 80134e4:	f104 0850 	add.w	r8, r4, #80	; 0x50
 80134e8:	4629      	mov	r1, r5
 80134ea:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 80134ee:	4640      	mov	r0, r8
 80134f0:	f7fc f918 	bl	800f724 <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
 80134f4:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 80134f8:	4640      	mov	r0, r8
 80134fa:	f7fc f963 	bl	800f7c4 <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
 80134fe:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 8013502:	4640      	mov	r0, r8
 8013504:	f7fc f93b 	bl	800f77e <tHighpass_setFreq>
    p->userDecay = decay;
 8013508:	f8c4 9014 	str.w	r9, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801350c:	462a      	mov	r2, r5
 801350e:	4639      	mov	r1, r7
 8013510:	eeb0 1a4a 	vmov.f32	s2, s20
 8013514:	eef0 0a69 	vmov.f32	s1, s19
 8013518:	eeb0 0a49 	vmov.f32	s0, s18
 801351c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8013520:	f7fb f85d 	bl	800e5de <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
 8013524:	6227      	str	r7, [r4, #32]
    p->changeGainCompensator = 1.0f;
 8013526:	f8c4 a01c 	str.w	sl, [r4, #28]
    p->freq = freq;
 801352a:	edc4 8a01 	vstr	s17, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 801352e:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
 8013532:	eec7 7a28 	vdiv.f32	s15, s14, s17
    if (waveLength<4.8) waveLength=4.8f;
 8013536:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 801353a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80135d0 <tSimpleLivingString3_initToPool+0x1f8>
 801353e:	eeb4 5bc6 	vcmpe.f64	d5, d6
 8013542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013546:	d40d      	bmi.n	8013564 <tSimpleLivingString3_initToPool+0x18c>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8013548:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801354a:	005b      	lsls	r3, r3, #1
 801354c:	ee00 3a10 	vmov	s0, r3
 8013550:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013554:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801355c:	d404      	bmi.n	8013568 <tSimpleLivingString3_initToPool+0x190>
    Lfloat waveLength = (p->sampleRate/freq);
 801355e:	eeb0 0a67 	vmov.f32	s0, s15
 8013562:	e001      	b.n	8013568 <tSimpleLivingString3_initToPool+0x190>
    if (waveLength<4.8) waveLength=4.8f;
 8013564:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80135e8 <tSimpleLivingString3_initToPool+0x210>
    p->waveLengthInSamples =  waveLength * 0.5f;
 8013568:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801356c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013570:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8013574:	4630      	mov	r0, r6
 8013576:	f7fb fc29 	bl	800edcc <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801357a:	ed94 7a05 	vldr	s14, [r4, #20]
 801357e:	eddf 7a19 	vldr	s15, [pc, #100]	; 80135e4 <tSimpleLivingString3_initToPool+0x20c>
 8013582:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013586:	ee37 7a27 	vadd.f32	s14, s14, s15
 801358a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80135ec <tSimpleLivingString3_initToPool+0x214>
 801358e:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8013592:	ed94 6a01 	vldr	s12, [r4, #4]
 8013596:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801359a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801359e:	ee84 5b06 	vdiv.f64	d5, d4, d6
 80135a2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80135a6:	ee85 0b07 	vdiv.f64	d0, d5, d7
 80135aa:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 80135d8 <tSimpleLivingString3_initToPool+0x200>
 80135ae:	ee20 0b07 	vmul.f64	d0, d0, d7
 80135b2:	f003 fba5 	bl	8016d00 <exp>
 80135b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80135ba:	ed84 0a04 	vstr	s0, [r4, #16]
    p->pickupPoint = 0.9f;
 80135be:	4b0c      	ldr	r3, [pc, #48]	; (80135f0 <tSimpleLivingString3_initToPool+0x218>)
 80135c0:	64e3      	str	r3, [r4, #76]	; 0x4c
    p->prevDelayLength = p->waveLengthInSamples;
 80135c2:	68a3      	ldr	r3, [r4, #8]
 80135c4:	61a3      	str	r3, [r4, #24]
}
 80135c6:	ecbd 8b08 	vpop	{d8-d11}
 80135ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ce:	bf00      	nop
 80135d0:	33333333 	.word	0x33333333
 80135d4:	40133333 	.word	0x40133333
 80135d8:	0a3d70a4 	.word	0x0a3d70a4
 80135dc:	c01ba3d7 	.word	0xc01ba3d7
 80135e0:	00000000 	.word	0x00000000
 80135e4:	3c23d70a 	.word	0x3c23d70a
 80135e8:	4099999a 	.word	0x4099999a
 80135ec:	40dd0cb3 	.word	0x40dd0cb3
 80135f0:	3f666666 	.word	0x3f666666

080135f4 <tSimpleLivingString3_setDampFreq>:
    p->waveLengthInSamples = waveLength * 0.5f;
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tSimpleLivingString3_setDampFreq(tSimpleLivingString3* const pl, Lfloat dampFreq)
{
 80135f4:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
 80135f6:	6800      	ldr	r0, [r0, #0]
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 80135f8:	303c      	adds	r0, #60	; 0x3c
 80135fa:	f7fb fe43 	bl	800f284 <tOnePole_setFreq>
}
 80135fe:	bd08      	pop	{r3, pc}

08013600 <tSimpleLivingString3_setDecay>:

void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
 8013600:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 8013602:	6804      	ldr	r4, [r0, #0]
    p->userDecay = decay;
 8013604:	ed84 0a05 	vstr	s0, [r4, #20]

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 8013608:	eddf 7a13 	vldr	s15, [pc, #76]	; 8013658 <tSimpleLivingString3_setDecay+0x58>
 801360c:	ee20 7a27 	vmul.f32	s14, s0, s15
 8013610:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013614:	eddf 7a11 	vldr	s15, [pc, #68]	; 801365c <tSimpleLivingString3_setDecay+0x5c>
 8013618:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 801361c:	ed94 6a01 	vldr	s12, [r4, #4]
 8013620:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8013624:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8013628:	ee84 5b06 	vdiv.f64	d5, d4, d6
 801362c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8013630:	ee85 0b07 	vdiv.f64	d0, d5, d7
 8013634:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8013650 <tSimpleLivingString3_setDecay+0x50>
 8013638:	ee20 0b07 	vmul.f64	d0, d0, d7
 801363c:	f003 fb60 	bl	8016d00 <exp>
 8013640:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8013644:	ed84 0a04 	vstr	s0, [r4, #16]


    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
 8013648:	bd10      	pop	{r4, pc}
 801364a:	bf00      	nop
 801364c:	f3af 8000 	nop.w
 8013650:	52bd3c36 	.word	0x52bd3c36
 8013654:	c01ba196 	.word	0xc01ba196
 8013658:	3c23d70a 	.word	0x3c23d70a
 801365c:	40dd0cb3 	.word	0x40dd0cb3

08013660 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
 8013660:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
 8013662:	6800      	ldr	r0, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
 8013664:	3054      	adds	r0, #84	; 0x54
 8013666:	f7fb f829 	bl	800e6bc <tFeedbackLeveler_setTargetLevel>
}
 801366a:	bd08      	pop	{r3, pc}

0801366c <tSimpleLivingString3_setLevSmoothFactor>:

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
 801366c:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
 801366e:	6800      	ldr	r0, [r0, #0]
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
 8013670:	3054      	adds	r0, #84	; 0x54
 8013672:	f7fa fff0 	bl	800e656 <tFeedbackLeveler_setFactor>
}
 8013676:	bd08      	pop	{r3, pc}

08013678 <tSimpleLivingString3_setLevStrength>:

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
 8013678:	b508      	push	{r3, lr}
    _tSimpleLivingString3* p = *pl;
 801367a:	6800      	ldr	r0, [r0, #0]
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
 801367c:	3054      	adds	r0, #84	; 0x54
 801367e:	f7fa ffe6 	bl	800e64e <tFeedbackLeveler_setStrength>
}
 8013682:	bd08      	pop	{r3, pc}

08013684 <tSimpleLivingString3_setLevMode>:

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
 8013684:	b538      	push	{r3, r4, r5, lr}
 8013686:	460c      	mov	r4, r1
    _tSimpleLivingString3* p = *pl;
 8013688:	6805      	ldr	r5, [r0, #0]
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
 801368a:	f105 0054 	add.w	r0, r5, #84	; 0x54
 801368e:	f7fa ffe8 	bl	800e662 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 8013692:	622c      	str	r4, [r5, #32]
}
 8013694:	bd38      	pop	{r3, r4, r5, pc}

08013696 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
 8013696:	b4f0      	push	{r4, r5, r6, r7}
    _tSimpleLivingString3* p = *pl;
 8013698:	6804      	ldr	r4, [r0, #0]
    int length = p->waveLengthInSamples;
 801369a:	edd4 7a02 	vldr	s15, [r4, #8]
 801369e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136a2:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
 80136a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136aa:	ee67 7aa0 	vmul.f32	s15, s15, s1
 80136ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136b2:	ee17 5a90 	vmov	r5, s15
    if (pluckPoint < 1)
 80136b6:	2d00      	cmp	r5, #0
 80136b8:	dd03      	ble.n	80136c2 <tSimpleLivingString3_pluck+0x2c>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
 80136ba:	42a8      	cmp	r0, r5
 80136bc:	dc02      	bgt.n	80136c4 <tSimpleLivingString3_pluck+0x2e>
    {
    	pluckPoint = length-1;
 80136be:	1e45      	subs	r5, r0, #1
 80136c0:	e000      	b.n	80136c4 <tSimpleLivingString3_pluck+0x2e>
    	pluckPoint = 1;
 80136c2:	2501      	movs	r5, #1
    }
    int remainder = length-pluckPoint;
 80136c4:	1b43      	subs	r3, r0, r5
 80136c6:	ee06 3a10 	vmov	s12, r3
    for (int i = 0; i < length; i++)
 80136ca:	2200      	movs	r2, #0
 80136cc:	e021      	b.n	8013712 <tSimpleLivingString3_pluck+0x7c>
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 80136ce:	ee07 2a90 	vmov	s15, r2
 80136d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80136d6:	ee07 5a10 	vmov	s14, r5
 80136da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80136de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136e2:	eef8 6ac6 	vcvt.f32.s32	s13, s12
 80136e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80136ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80136ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80136f2:	ee67 7a80 	vmul.f32	s15, s15, s0
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 80136f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80136f8:	698b      	ldr	r3, [r1, #24]
 80136fa:	4413      	add	r3, r2
 80136fc:	69ce      	ldr	r6, [r1, #28]
 80136fe:	fbb3 f7f6 	udiv	r7, r3, r6
 8013702:	fb06 3317 	mls	r3, r6, r7, r3
        p->delayLineU->buff[bufWritePoint] = val;
 8013706:	6889      	ldr	r1, [r1, #8]
 8013708:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801370c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < length; i++)
 8013710:	3201      	adds	r2, #1
 8013712:	4282      	cmp	r2, r0
 8013714:	da0e      	bge.n	8013734 <tSimpleLivingString3_pluck+0x9e>
        if (i <= pluckPoint)
 8013716:	4295      	cmp	r5, r2
 8013718:	dbd9      	blt.n	80136ce <tSimpleLivingString3_pluck+0x38>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 801371a:	ee07 2a90 	vmov	s15, r2
 801371e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013722:	ee07 5a90 	vmov	s15, r5
 8013726:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801372a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801372e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013732:	e7e0      	b.n	80136f6 <tSimpleLivingString3_pluck+0x60>
    }
    for (int i = 0; i < length; i++)
 8013734:	2100      	movs	r1, #0
 8013736:	e01a      	b.n	801376e <tSimpleLivingString3_pluck+0xd8>
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8013738:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801373a:	69ab      	ldr	r3, [r5, #24]
 801373c:	440b      	add	r3, r1
 801373e:	69ea      	ldr	r2, [r5, #28]
 8013740:	fbb3 f6f2 	udiv	r6, r3, r2
 8013744:	fb02 3216 	mls	r2, r2, r6, r3
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 8013748:	1e43      	subs	r3, r0, #1
 801374a:	1a5b      	subs	r3, r3, r1
 801374c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 801374e:	69b7      	ldr	r7, [r6, #24]
 8013750:	443b      	add	r3, r7
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 8013752:	69f7      	ldr	r7, [r6, #28]
 8013754:	fbb3 fcf7 	udiv	ip, r3, r7
 8013758:	fb07 331c 	mls	r3, r7, ip, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 801375c:	68b6      	ldr	r6, [r6, #8]
 801375e:	68ad      	ldr	r5, [r5, #8]
 8013760:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8013764:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < length; i++)
 801376c:	3101      	adds	r1, #1
 801376e:	4281      	cmp	r1, r0
 8013770:	dbe2      	blt.n	8013738 <tSimpleLivingString3_pluck+0xa2>
    }
}
 8013772:	bcf0      	pop	{r4, r5, r6, r7}
 8013774:	4770      	bx	lr

08013776 <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
 8013776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013778:	ed2d 8b02 	vpush	{d8}
 801377c:	eef0 8a40 	vmov.f32	s17, s0
    _tSimpleLivingString3* p = *pl;
 8013780:	6804      	ldr	r4, [r0, #0]

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
 8013782:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013786:	f7fb fb2f 	bl	800ede8 <tExpSmooth_tick>
 801378a:	eeb0 8a40 	vmov.f32	s16, s0
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
 801378e:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8013792:	4630      	mov	r0, r6
 8013794:	f7fa fa6b 	bl	800dc6e <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
 8013798:	f104 0738 	add.w	r7, r4, #56	; 0x38
 801379c:	eeb0 0a48 	vmov.f32	s0, s16
 80137a0:	4638      	mov	r0, r7
 80137a2:	f7fa fa64 	bl	800dc6e <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
 80137a6:	2500      	movs	r5, #0
 80137a8:	e04d      	b.n	8013846 <tSimpleLivingString3_tick+0xd0>
    {
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 80137aa:	4630      	mov	r0, r6
 80137ac:	f7fa fa2f 	bl	800dc0e <tLinearDelay_tickOut>
 80137b0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80137b4:	f7fb fda1 	bl	800f2fa <tOnePole_tick>
 80137b8:	edd4 7a04 	vldr	s15, [r4, #16]
 80137bc:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
 80137c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80137c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80137c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80137cc:	f7fb ffe5 	bl	800f79a <tHighpass_tick>
 80137d0:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 80137d4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80137d8:	f7fa ff46 	bl	800e668 <tFeedbackLeveler_tick>
 80137dc:	eef0 0a40 	vmov.f32	s1, s0
 80137e0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80137e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80137e8:	f7fe fa02 	bl	8011bf0 <LEAF_clip>
 80137ec:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 80137f0:	4638      	mov	r0, r7
 80137f2:	f7fa fa0c 	bl	800dc0e <tLinearDelay_tickOut>
 80137f6:	eef0 0a40 	vmov.f32	s1, s0
 80137fa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80137fe:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013802:	f7fe f9f5 	bl	8011bf0 <LEAF_clip>
 8013806:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c

		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
 801380a:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801380e:	4630      	mov	r0, r6
 8013810:	f7fa f9e8 	bl	800dbe4 <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
 8013814:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8013818:	eeb1 0a40 	vneg.f32	s0, s0
 801381c:	4638      	mov	r0, r7
 801381e:	f7fa f9e1 	bl	800dbe4 <tLinearDelay_tickIn>
		tLinearDelay_addTo (&p->delayLineU, p->Lout * p->rippleGain, p->rippleDelay*wl);
 8013822:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8013826:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 801382a:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 801382e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013836:	ee17 1a90 	vmov	r1, s15
 801383a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801383e:	4630      	mov	r0, r6
 8013840:	f7fa fa8a 	bl	800dd58 <tLinearDelay_addTo>
    for (int i = 0; i < p->oversampling; i++)
 8013844:	3501      	adds	r5, #1
 8013846:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8013848:	42ab      	cmp	r3, r5
 801384a:	dcae      	bgt.n	80137aa <tSimpleLivingString3_tick+0x34>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
 801384c:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 8013850:	ee27 7a88 	vmul.f32	s14, s15, s16
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 8013854:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013858:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801385c:	ee67 7a88 	vmul.f32	s15, s15, s16
    int32_t whichPoint = ((int32_t)roundf(point));
 8013860:	feb8 6a47 	vrinta.f32	s12, s14
 8013864:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    Lfloat LfloatPart = point - whichPoint;
 8013868:	eef8 5ac6 	vcvt.f32.s32	s11, s12
 801386c:	ee37 7a65 	vsub.f32	s14, s14, s11

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 8013870:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8013872:	6983      	ldr	r3, [r0, #24]
 8013874:	ee16 2a10 	vmov	r2, s12
 8013878:	4413      	add	r3, r2
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 801387a:	69c1      	ldr	r1, [r0, #28]
 801387c:	fb93 f2f1 	sdiv	r2, r3, r1
 8013880:	fb01 3312 	mls	r3, r1, r2, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 8013884:	1c5a      	adds	r2, r3, #1
 8013886:	fb92 f5f1 	sdiv	r5, r2, r1
 801388a:	fb01 2115 	mls	r1, r1, r5, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 801388e:	6882      	ldr	r2, [r0, #8]
 8013890:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013894:	ed93 0a00 	vldr	s0, [r3]
 8013898:	ee36 6ac7 	vsub.f32	s12, s13, s14
 801389c:	ee20 0a06 	vmul.f32	s0, s0, s12
 80138a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80138a4:	ed92 6a00 	vldr	s12, [r2]
 80138a8:	ee26 7a07 	vmul.f32	s14, s12, s14
 80138ac:	ee30 0a07 	vadd.f32	s0, s0, s14


    whichPoint = (int32_t)roundf(reversePoint);
 80138b0:	feb8 7a67 	vrinta.f32	s14, s15
 80138b4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    LfloatPart = reversePoint - whichPoint;
 80138b8:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80138bc:	ee77 7ac6 	vsub.f32	s15, s15, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 80138c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80138c2:	6983      	ldr	r3, [r0, #24]
 80138c4:	ee17 2a10 	vmov	r2, s14
 80138c8:	4413      	add	r3, r2
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 80138ca:	69c1      	ldr	r1, [r0, #28]
 80138cc:	fb93 f2f1 	sdiv	r2, r3, r1
 80138d0:	fb01 3312 	mls	r3, r1, r2, r3
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 80138d4:	1c5a      	adds	r2, r3, #1
 80138d6:	fb92 f5f1 	sdiv	r5, r2, r1
 80138da:	fb01 2115 	mls	r1, r1, r5, r2
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 80138de:	6882      	ldr	r2, [r0, #8]
 80138e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80138e4:	ed93 7a00 	vldr	s14, [r3]
 80138e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80138ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80138f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80138f4:	edd2 6a00 	vldr	s13, [r2]
 80138f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80138fc:	ee77 7a27 	vadd.f32	s15, s14, s15

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 8013900:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013904:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013908:	ee20 0a27 	vmul.f32	s0, s0, s15
 801390c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
 8013910:	68a3      	ldr	r3, [r4, #8]
 8013912:	61a3      	str	r3, [r4, #24]
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
 8013914:	ecbd 8b02 	vpop	{d8}
 8013918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801391a <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
 801391a:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
 801391c:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 8013920:	4770      	bx	lr

08013922 <tTString_free>:
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
    x->pickupAmount = 0.0f;
    tPickupNonLinearity_initToPool(&x->p, mp);
}
void    tTString_free                  (tTString* const bw)
{
 8013922:	b510      	push	{r4, lr}
    _tTString* x = *bw;
 8013924:	6804      	ldr	r4, [r0, #0]
    tPickupNonLinearity_free(&x->p);
 8013926:	f504 70c8 	add.w	r0, r4, #400	; 0x190
 801392a:	f7ff fc84 	bl	8013236 <tPickupNonLinearity_free>
    tNoise_free(&x->pickNoiseSource);
 801392e:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8013932:	f7ff f9df 	bl	8012cf4 <tNoise_free>
    tFeedbackLeveler_free(&x->feedbackP);
 8013936:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 801393a:	f7fa fe7d 	bl	800e638 <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&x->feedback);
 801393e:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8013942:	f7fa fe79 	bl	800e638 <tFeedbackLeveler_free>
    tSVF_free(&x->barLP);
 8013946:	f504 7088 	add.w	r0, r4, #272	; 0x110
 801394a:	f7fb fdfa 	bl	800f542 <tSVF_free>
    tHighpass_free(&x->barHP);
 801394e:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8013952:	f7fb ff0e 	bl	800f772 <tHighpass_free>
    tSVF_free(&x->barResonator);
 8013956:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 801395a:	f7fb fdf2 	bl	800f542 <tSVF_free>
    tExpSmooth_free(&x->barPulse);
 801395e:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 8013962:	f7fb fa0e 	bl	800ed82 <tExpSmooth_free>
    tSlide_free(&x->barPulseSlide);
 8013966:	f504 708a 	add.w	r0, r4, #276	; 0x114
 801396a:	f7fb fa84 	bl	800ee76 <tSlide_free>
    tSlide_free(&x->barSmooth);
 801396e:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8013972:	f7fb fa80 	bl	800ee76 <tSlide_free>
	tExpSmooth_free(&x->barSmoothVol);
 8013976:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 801397a:	f7fb fa02 	bl	800ed82 <tExpSmooth_free>
	tExpSmooth_free(&x->barSmooth2);
 801397e:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8013982:	f7fb f9fe 	bl	800ed82 <tExpSmooth_free>
	tSlide_free(&x->slide);
 8013986:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801398a:	f7fb fa74 	bl	800ee76 <tSlide_free>
    tHighpass_free(&x->dcBlockP);
 801398e:	f104 0020 	add.w	r0, r4, #32
 8013992:	f7fb feee 	bl	800f772 <tHighpass_free>
    tHighpass_free(&x->dcBlock);
 8013996:	f104 001c 	add.w	r0, r4, #28
 801399a:	f7fb feea 	bl	800f772 <tHighpass_free>
    tNoise_free(&x->noise);
 801399e:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 80139a2:	f7ff f9a7 	bl	8012cf4 <tNoise_free>
    tSVF_free(&x->peakFilt);
 80139a6:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 80139aa:	f7fb fdca 	bl	800f542 <tSVF_free>
    tSVF_free(&x->pickupFilter2);
 80139ae:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80139b2:	f7fb fdc6 	bl	800f542 <tSVF_free>
    tSVF_free(&x->pickupFilter);
 80139b6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80139ba:	f7fb fdc2 	bl	800f542 <tSVF_free>
    tCycle_free(&x->pickupModOsc);
 80139be:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80139c2:	f7fe fe02 	bl	80125ca <tCycle_free>
    tCycle_free(&x->tensionModOsc);
 80139c6:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 80139ca:	f7fe fdfe 	bl	80125ca <tCycle_free>
    tSVF_free(&x->highpassP);
 80139ce:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80139d2:	f7fb fdb6 	bl	800f542 <tSVF_free>
    tSVF_free(&x->lowpassP),
 80139d6:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80139da:	f7fb fdb2 	bl	800f542 <tSVF_free>
    tThiranAllpassSOCascade_free(&x->allpassP);
 80139de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80139e2:	f7fb fb2d 	bl	800f040 <tThiranAllpassSOCascade_free>
    tThiranAllpassSOCascade_free(&x->allpass);
 80139e6:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80139ea:	f7fb fb29 	bl	800f040 <tThiranAllpassSOCascade_free>
    tExpSmooth_free(&x->pickNoise);
 80139ee:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 80139f2:	f7fb f9c6 	bl	800ed82 <tExpSmooth_free>
    tExpSmooth_free(&x->pitchSmoother);
 80139f6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80139fa:	f7fb f9c2 	bl	800ed82 <tExpSmooth_free>
    tExpSmooth_free(&x->tensionSmoother);
 80139fe:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8013a02:	f7fb f9be 	bl	800ed82 <tExpSmooth_free>
    tCookOnePole_free(&x->reflFiltP);
 8013a06:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013a0a:	f7fb fccd 	bl	800f3a8 <tCookOnePole_free>
    tCookOnePole_free(&x->reflFilt);
 8013a0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013a12:	f7fb fcc9 	bl	800f3a8 <tCookOnePole_free>
    tLagrangeDelay_free(&x->delayP);
 8013a16:	f104 0018 	add.w	r0, r4, #24
 8013a1a:	f7fa f9b0 	bl	800dd7e <tLagrangeDelay_free>
    tLagrangeDelay_free(&x->delay);
 8013a1e:	f104 0014 	add.w	r0, r4, #20
 8013a22:	f7fa f9ac 	bl	800dd7e <tLagrangeDelay_free>
    mpool_free((char*)x, x->mempool);
 8013a26:	6821      	ldr	r1, [r4, #0]
 8013a28:	4620      	mov	r0, r4
 8013a2a:	f7fe fd21 	bl	8012470 <mpool_free>
}
 8013a2e:	bd10      	pop	{r4, pc}

08013a30 <tTString_tick>:

Lfloat   tTString_tick                  (tTString* const bw)
{
 8013a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a34:	ed2d 8b0a 	vpush	{d8-d12}
 8013a38:	b083      	sub	sp, #12
    _tTString* x = *bw;
 8013a3a:	6804      	ldr	r4, [r0, #0]
    Lfloat theOutput = 0.0f;
    x->feedbackNoise = tNoise_tick(&x->noise);
 8013a3c:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8013a40:	f7ff f95e 	bl	8012d00 <tNoise_tick>
 8013a44:	ed84 0a58 	vstr	s0, [r4, #352]	; 0x160

    Lfloat barPos = x->barPosition;
 8013a48:	edd4 8a3b 	vldr	s17, [r4, #236]	; 0xec
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 8013a4c:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
 8013a50:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013a54:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013a58:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8013a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a60:	d408      	bmi.n	8013a74 <tTString_tick+0x44>
 8013a62:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8013a66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013a6a:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a72:	dd3e      	ble.n	8013af2 <tTString_tick+0xc2>
	{
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 8013a74:	eeb0 0a68 	vmov.f32	s0, s17
 8013a78:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8013a7c:	f7fb f9ae 	bl	800eddc <tExpSmooth_setValAndDest>
    {
    	tExpSmooth_setDest(&x->barSmooth2,barPos);
    }

    //Lfloat currentBumpSmoothed = currentBump;
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
 8013a80:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8013a84:	f7fb f9b0 	bl	800ede8 <tExpSmooth_tick>
 8013a88:	eeb0 8a40 	vmov.f32	s16, s0

    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 8013a8c:	ed94 0a4a 	vldr	s0, [r4, #296]	; 0x128
 8013a90:	ee38 0a40 	vsub.f32	s0, s16, s0
 8013a94:	f7fd ff52 	bl	801193c <fastabsf>
 8013a98:	eeb0 9a40 	vmov.f32	s18, s0


    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 8013a9c:	f504 758e 	add.w	r5, r4, #284	; 0x11c
 8013aa0:	eeb0 0a68 	vmov.f32	s0, s17
 8013aa4:	4628      	mov	r0, r5
 8013aa6:	f7fb f991 	bl	800edcc <tExpSmooth_setDest>
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
 8013aaa:	4628      	mov	r0, r5
 8013aac:	f7fb f99c 	bl	800ede8 <tExpSmooth_tick>
 8013ab0:	eef0 8a40 	vmov.f32	s17, s0
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
 8013ab4:	ed94 0a48 	vldr	s0, [r4, #288]	; 0x120
 8013ab8:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8013abc:	f7fd ff3e 	bl	801193c <fastabsf>
        x->prevBarPosSmoothVol = barPosSmoothVol;
 8013ac0:	edc4 8a48 	vstr	s17, [r4, #288]	; 0x120
        Lfloat volCut = 1.0f;
        if (differenceFastSmooth < 0.0001f)
 8013ac4:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8013dc8 <tTString_tick+0x398>
 8013ac8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ad0:	d516      	bpl.n	8013b00 <tTString_tick+0xd0>
        {
        	//volCut = LEAF_map(differenceFastSmooth, 0.00001f, 0.0001f, 0.0f, 1.0f);
        	volCut = ((differenceFastSmooth - 0.00001f) * 1111.111111111111111f);
 8013ad2:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8013dcc <tTString_tick+0x39c>
 8013ad6:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013ada:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8013dd0 <tTString_tick+0x3a0>
 8013ade:	ee67 8a87 	vmul.f32	s17, s15, s14
        	if (volCut < 0.0f)
 8013ae2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8013ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aea:	d50b      	bpl.n	8013b04 <tTString_tick+0xd4>
        	{
        		volCut = 0.0f;
 8013aec:	eddf 8ab9 	vldr	s17, [pc, #740]	; 8013dd4 <tTString_tick+0x3a4>
 8013af0:	e008      	b.n	8013b04 <tTString_tick+0xd4>
    	tExpSmooth_setDest(&x->barSmooth2,barPos);
 8013af2:	eeb0 0a68 	vmov.f32	s0, s17
 8013af6:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8013afa:	f7fb f967 	bl	800edcc <tExpSmooth_setDest>
 8013afe:	e7bf      	b.n	8013a80 <tTString_tick+0x50>
        Lfloat volCut = 1.0f;
 8013b00:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
        	}
        }
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
 8013b04:	edd4 9a5b 	vldr	s19, [r4, #364]	; 0x16c
 8013b08:	ee69 9a88 	vmul.f32	s19, s19, s16
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 8013b0c:	ed94 0a3f 	vldr	s0, [r4, #252]	; 0xfc
 8013b10:	ee39 0ac0 	vsub.f32	s0, s19, s0
 8013b14:	f7fd ff12 	bl	801193c <fastabsf>
 8013b18:	eeb0 aa40 	vmov.f32	s20, s0

    x->prevBarPosSmoothed = barPosSmoothed;
 8013b1c:	ed84 8a4a 	vstr	s16, [r4, #296]	; 0x128
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 8013b20:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8013b24:	ee79 0a09 	vadd.f32	s1, s18, s18
 8013b28:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8013dd4 <tTString_tick+0x3a4>
 8013b2c:	f7fe f860 	bl	8011bf0 <LEAF_clip>
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
 8013b30:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8013b34:	f7fb f9cf 	bl	800eed6 <tSlide_tick>
 8013b38:	ed84 0a30 	vstr	s0, [r4, #192]	; 0xc0
    if (x->wound)
 8013b3c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	f000 80ff 	beq.w	8013d44 <tTString_tick+0x314>
    {
		if (bumpDifference > 1.0f)
 8013b46:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013b4a:	eeb4 aae7 	vcmpe.f32	s20, s15
 8013b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b52:	f300 8093 	bgt.w	8013c7c <tTString_tick+0x24c>
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
			x->sampleCount = 0;
		}
		else
		{
			x->bumpOsc = 0;
 8013b56:	2300      	movs	r3, #0
 8013b58:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		}

		if (x->bumpOsc)
 8013b5c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8013b60:	b183      	cbz	r3, 8013b84 <tTString_tick+0x154>
		{
			if (x->bumpCount > x->timeSinceLastBump)
 8013b62:	edd4 7a4e 	vldr	s15, [r4, #312]	; 0x138
 8013b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013b6a:	ed94 7a40 	vldr	s14, [r4, #256]	; 0x100
 8013b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b76:	f300 80b9 	bgt.w	8013cec <tTString_tick+0x2bc>
			{
				tExpSmooth_setVal(&x->barPulse, 1.0f);
				tSlide_setDest(&x->barPulseSlide, 1.0f);
				x->bumpCount = 0;
			}
			x->bumpCount++;
 8013b7a:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8013b7e:	3301      	adds	r3, #1
 8013b80:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
		}

		if (x->sampleCount < 3000)
 8013b84:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8013b88:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8013b8c:	4293      	cmp	r3, r2
 8013b8e:	f200 80bd 	bhi.w	8013d0c <tTString_tick+0x2dc>
		{
			x->sampleCount++;
 8013b92:	3301      	adds	r3, #1
 8013b94:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		}
		else
		{
			tSlide_setDest(&x->barSmooth, 5.0f);
		}
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
 8013b98:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8013b9c:	f7fb f975 	bl	800ee8a <tSlide_tickNoInput>
 8013ba0:	eef0 9a40 	vmov.f32	s19, s0
		tSVF_setFreq(&x->barResonator, barFreq);
 8013ba4:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
 8013ba8:	4628      	mov	r0, r5
 8013baa:	f7fb fd13 	bl	800f5d4 <tSVF_setFreq>
		Lfloat filterAmount = 0.5f;
		Lfloat dryAmount = 1.0f;
		x->slideNoise = x->feedbackNoise;
 8013bae:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
 8013bb2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 8013bb6:	f504 768a 	add.w	r6, r4, #276	; 0x114
 8013bba:	4630      	mov	r0, r6
 8013bbc:	f7fb f965 	bl	800ee8a <tSlide_tickNoInput>
 8013bc0:	eeb0 8a40 	vmov.f32	s16, s0

		if (pulseVal > .99f)
 8013bc4:	eddf 7a84 	vldr	s15, [pc, #528]	; 8013dd8 <tTString_tick+0x3a8>
 8013bc8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bd0:	f300 80a3 	bgt.w	8013d1a <tTString_tick+0x2ea>
		{
			tSlide_setDest(&x->barPulseSlide, 0.0f);

		}

		x->slideNoise *= pulseVal;
 8013bd4:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
 8013bd8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013bdc:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
		//x->slideNoise = tExpSmooth_tick(&x->barPulse);
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 8013be0:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 8013be4:	f7fb f900 	bl	800ede8 <tExpSmooth_tick>
 8013be8:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
 8013bec:	ee20 8a27 	vmul.f32	s16, s0, s15
 8013bf0:	ed84 8a34 	vstr	s16, [r4, #208]	; 0xd0
		//x->slideNoise *= x->slideGain;
		Lfloat tempSlideNoise1 = x->slideNoise;
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 8013bf4:	eeb0 0a48 	vmov.f32	s0, s16
 8013bf8:	4628      	mov	r0, r5
 8013bfa:	f7fb fca8 	bl	800f54e <tSVF_tick>
 8013bfe:	edd4 7a4c 	vldr	s15, [r4, #304]	; 0x130
 8013c02:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013c06:	f7fe f863 	bl	8011cd0 <fast_tanh5>
 8013c0a:	eeb0 9a40 	vmov.f32	s18, s0

		Lfloat filterFade = 1.0f;
		if (barFreq < 300.0f)
 8013c0e:	eddf 7a73 	vldr	s15, [pc, #460]	; 8013ddc <tTString_tick+0x3ac>
 8013c12:	eef4 9ae7 	vcmpe.f32	s19, s15
 8013c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c1a:	f100 8084 	bmi.w	8013d26 <tTString_tick+0x2f6>
		Lfloat filterFade = 1.0f;
 8013c1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
			//filterFade = LEAF_map(barFreq, 100.0f, 300.0f, 0.0f, 1.0f);
			filterFade = (barFreq - 100.0f) * 0.005f;
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
		}

		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
 8013c22:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013c26:	ee69 7a27 	vmul.f32	s15, s18, s15
 8013c2a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013c2e:	ee38 0a27 	vadd.f32	s0, s16, s15
 8013c32:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise *= x->muted;
 8013c36:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
 8013c3a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013c3e:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8013c42:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8013c46:	f7fb fda8 	bl	800f79a <tHighpass_tick>
 8013c4a:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * volCut);
 8013c4e:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
 8013c52:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013c56:	ee20 0a28 	vmul.f32	s0, s0, s17
 8013c5a:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8013c5e:	f7fb fc76 	bl	800f54e <tSVF_tick>
 8013c62:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = x->slideNoise * x->slideGain;
 8013c66:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
 8013c6a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013c6e:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
        while (pickupPos < 0.0f)
        {
        	pickupPos = pickupPos + halfCurrentDelay;
        	backwards = !backwards;
        }
        Lfloat pickupPosFinal = pickupPos;
 8013c72:	f04f 0900 	mov.w	r9, #0
 8013c76:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8013dd4 <tTString_tick+0x3a4>
 8013c7a:	e1b7      	b.n	8013fec <tTString_tick+0x5bc>
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8013c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8013c80:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 8013c84:	f7fb f8a6 	bl	800edd4 <tExpSmooth_setVal>
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 8013c88:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013c8c:	f504 708a 	add.w	r0, r4, #276	; 0x114
 8013c90:	f7fb f8f7 	bl	800ee82 <tSlide_setDest>
			x->lastBump = currentBump;
 8013c94:	edc4 9a3f 	vstr	s19, [r4, #252]	; 0xfc
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 8013c98:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013c9c:	ee87 7a8a 	vdiv.f32	s14, s15, s20
 8013ca0:	edd4 7a41 	vldr	s15, [r4, #260]	; 0x104
 8013ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013cac:	edc4 7a40 	vstr	s15, [r4, #256]	; 0x100
			if (x->timeSinceLastBump < 100)
 8013cb0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8013de0 <tTString_tick+0x3b0>
 8013cb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cbc:	d512      	bpl.n	8013ce4 <tTString_tick+0x2b4>
				x->bumpOsc = 1;
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8013cc4:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8013cc8:	ed94 7a02 	vldr	s14, [r4, #8]
 8013ccc:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013cd0:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8013cd4:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8013cd8:	f7fb f8d3 	bl	800ee82 <tSlide_setDest>
			x->sampleCount = 0;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8013ce2:	e73b      	b.n	8013b5c <tTString_tick+0x12c>
				x->bumpOsc = 0;
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
 8013cea:	e7eb      	b.n	8013cc4 <tTString_tick+0x294>
				tExpSmooth_setVal(&x->barPulse, 1.0f);
 8013cec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013cf0:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 8013cf4:	f7fb f86e 	bl	800edd4 <tExpSmooth_setVal>
				tSlide_setDest(&x->barPulseSlide, 1.0f);
 8013cf8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013cfc:	f504 708a 	add.w	r0, r4, #276	; 0x114
 8013d00:	f7fb f8bf 	bl	800ee82 <tSlide_setDest>
				x->bumpCount = 0;
 8013d04:	2300      	movs	r3, #0
 8013d06:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8013d0a:	e736      	b.n	8013b7a <tTString_tick+0x14a>
			tSlide_setDest(&x->barSmooth, 5.0f);
 8013d0c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8013d10:	f504 7084 	add.w	r0, r4, #264	; 0x108
 8013d14:	f7fb f8b5 	bl	800ee82 <tSlide_setDest>
 8013d18:	e73e      	b.n	8013b98 <tTString_tick+0x168>
			tSlide_setDest(&x->barPulseSlide, 0.0f);
 8013d1a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8013dd4 <tTString_tick+0x3a4>
 8013d1e:	4630      	mov	r0, r6
 8013d20:	f7fb f8af 	bl	800ee82 <tSlide_setDest>
 8013d24:	e756      	b.n	8013bd4 <tTString_tick+0x1a4>
			filterFade = (barFreq - 100.0f) * 0.005f;
 8013d26:	eddf 7a2e 	vldr	s15, [pc, #184]	; 8013de0 <tTString_tick+0x3b0>
 8013d2a:	ee79 9ae7 	vsub.f32	s19, s19, s15
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
 8013d2e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8013d32:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8013de4 <tTString_tick+0x3b4>
 8013d36:	ee69 0aa0 	vmul.f32	s1, s19, s1
 8013d3a:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8013dd4 <tTString_tick+0x3a4>
 8013d3e:	f7fd ff57 	bl	8011bf0 <LEAF_clip>
 8013d42:	e76e      	b.n	8013c22 <tTString_tick+0x1f2>
    	x->slideNoise = x->feedbackNoise;
 8013d44:	ed94 0a58 	vldr	s0, [r4, #352]	; 0x160
 8013d48:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise *= x->muted;
 8013d4c:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
 8013d50:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013d54:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8013d58:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8013d5c:	f7fb fd1d 	bl	800f79a <tHighpass_tick>
 8013d60:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
 8013d64:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
 8013d68:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013d6c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013d70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013d74:	ee20 0a28 	vmul.f32	s0, s0, s17
 8013d78:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8013d7c:	f7fb fbe7 	bl	800f54e <tSVF_tick>
 8013d80:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = x->slideNoise * x->slideGain;
 8013d84:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
 8013d88:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013d8c:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
 8013d90:	e76f      	b.n	8013c72 <tTString_tick+0x242>
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
 8013d92:	eeb0 0a4b 	vmov.f32	s0, s22
 8013d96:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8013d9a:	f7fb fa4d 	bl	800f238 <tThiranAllpassSOCascade_tick>
 8013d9e:	eeb0 ba40 	vmov.f32	s22, s0
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
 8013da2:	eeb0 0a49 	vmov.f32	s0, s18
 8013da6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013daa:	f7fb fa45 	bl	800f238 <tThiranAllpassSOCascade_tick>
 8013dae:	eeb0 9a40 	vmov.f32	s18, s0
 8013db2:	e1e8      	b.n	8014186 <tTString_tick+0x756>
        	pickupPos = pickupPos - halfCurrentDelay;
 8013db4:	ee77 7ac8 	vsub.f32	s15, s15, s16
        	backwards = !backwards;
 8013db8:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos > halfCurrentDelay)
 8013dbc:	eef4 7ac8 	vcmpe.f32	s15, s16
 8013dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dc4:	dcf6      	bgt.n	8013db4 <tTString_tick+0x384>
 8013dc6:	e019      	b.n	8013dfc <tTString_tick+0x3cc>
 8013dc8:	38d1b717 	.word	0x38d1b717
 8013dcc:	3727c5ac 	.word	0x3727c5ac
 8013dd0:	448ae38e 	.word	0x448ae38e
 8013dd4:	00000000 	.word	0x00000000
 8013dd8:	3f7d70a4 	.word	0x3f7d70a4
 8013ddc:	43960000 	.word	0x43960000
 8013de0:	42c80000 	.word	0x42c80000
 8013de4:	3ba3d70a 	.word	0x3ba3d70a
 8013de8:	3fa66666 	.word	0x3fa66666
 8013dec:	3c23d70a 	.word	0x3c23d70a
 8013df0:	3e22f983 	.word	0x3e22f983
        	pickupPos = pickupPos + halfCurrentDelay;
 8013df4:	ee77 7a88 	vadd.f32	s15, s15, s16
        	backwards = !backwards;
 8013df8:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos < 0.0f)
 8013dfc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e04:	d4f6      	bmi.n	8013df4 <tTString_tick+0x3c4>
        if (backwards)
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	f000 8205 	beq.w	8014216 <tTString_tick+0x7e6>
        {
        	pickupPosFinal = halfCurrentDelay - pickupPos;
 8013e0c:	ee38 9a67 	vsub.f32	s18, s16, s15
        }

        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
 8013e10:	ee89 7a08 	vdiv.f32	s14, s18, s16
 8013e14:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8013e18:	eebc 7ac9 	vcvt.u32.f32	s14, s18
 8013e1c:	ee17 8a10 	vmov	r8, s14
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
 8013e20:	f108 0a01 	add.w	sl, r8, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8013e24:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8013e28:	ee39 9a47 	vsub.f32	s18, s18, s14
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8013e2c:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8013e30:	ee7b bac9 	vsub.f32	s23, s23, s18
        Lfloat inversePickupPos = currentDelay - pickupPos;
 8013e34:	ee78 8ae7 	vsub.f32	s17, s17, s15
        if (backwards)
 8013e38:	b10b      	cbz	r3, 8013e3e <tTString_tick+0x40e>
        {
        	inversePickupPos = halfCurrentDelay + pickupPos;
 8013e3a:	ee77 8a88 	vadd.f32	s17, s15, s16
        }
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
 8013e3e:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 8013e42:	ee17 7a90 	vmov	r7, s15
        uint32_t inversePickupPosIntPlusOne = inversePickupPosInt + 1;
 8013e46:	f107 0b01 	add.w	fp, r7, #1
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
 8013e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013e4e:	ee78 8ae7 	vsub.f32	s17, s17, s15
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
 8013e52:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8013e56:	ee39 cae8 	vsub.f32	s24, s19, s17

        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 8013e5a:	4641      	mov	r1, r8
 8013e5c:	4630      	mov	r0, r6
 8013e5e:	f7fa f896 	bl	800df8e <tLagrangeDelay_tapOut>
 8013e62:	ee20 8a2b 	vmul.f32	s16, s0, s23
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 8013e66:	4651      	mov	r1, sl
 8013e68:	4630      	mov	r0, r6
 8013e6a:	f7fa f890 	bl	800df8e <tLagrangeDelay_tapOut>
 8013e6e:	ee20 0a09 	vmul.f32	s0, s0, s18
 8013e72:	ee38 8a00 	vadd.f32	s16, s16, s0
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8013e76:	4639      	mov	r1, r7
 8013e78:	4630      	mov	r0, r6
 8013e7a:	f7fa f888 	bl	800df8e <tLagrangeDelay_tapOut>
 8013e7e:	ee20 ba0c 	vmul.f32	s22, s0, s24
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8013e82:	4659      	mov	r1, fp
 8013e84:	4630      	mov	r0, r6
 8013e86:	f7fa f882 	bl	800df8e <tLagrangeDelay_tapOut>
 8013e8a:	ee20 0a28 	vmul.f32	s0, s0, s17
 8013e8e:	ee3b ba00 	vadd.f32	s22, s22, s0

        //x->pickupOut =  (((volumes[1] * pickupNonLinearity(rightgoing)) + (volumes[0] * rightgoing)) - ((volumes[1] * pickupNonLinearity(leftgoing)) + (volumes[0] * leftgoing)));
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8013e92:	eeb0 0a48 	vmov.f32	s0, s16
 8013e96:	f7ff f979 	bl	801318c <pickupNonLinearity>
 8013e9a:	eeb0 8a40 	vmov.f32	s16, s0
 8013e9e:	eeb0 0a4b 	vmov.f32	s0, s22
 8013ea2:	f7ff f973 	bl	801318c <pickupNonLinearity>
 8013ea6:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013eaa:	ed84 8a25 	vstr	s16, [r4, #148]	; 0x94
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8013eae:	4641      	mov	r1, r8
 8013eb0:	4628      	mov	r0, r5
 8013eb2:	f7fa f86c 	bl	800df8e <tLagrangeDelay_tapOut>
 8013eb6:	ee60 ba2b 	vmul.f32	s23, s0, s23
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 8013eba:	4651      	mov	r1, sl
 8013ebc:	4628      	mov	r0, r5
 8013ebe:	f7fa f866 	bl	800df8e <tLagrangeDelay_tapOut>
 8013ec2:	ee20 0a09 	vmul.f32	s0, s0, s18
 8013ec6:	ee3b 9a80 	vadd.f32	s18, s23, s0
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8013eca:	4639      	mov	r1, r7
 8013ecc:	4628      	mov	r0, r5
 8013ece:	f7fa f85e 	bl	800df8e <tLagrangeDelay_tapOut>
 8013ed2:	ee20 ca0c 	vmul.f32	s24, s0, s24
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8013ed6:	4659      	mov	r1, fp
 8013ed8:	4628      	mov	r0, r5
 8013eda:	f7fa f858 	bl	800df8e <tLagrangeDelay_tapOut>
 8013ede:	ee20 0a28 	vmul.f32	s0, s0, s17
 8013ee2:	ee7c 8a00 	vadd.f32	s17, s24, s0

		x->pickupOutP =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8013ee6:	eeb0 0a49 	vmov.f32	s0, s18
 8013eea:	f7ff f94f 	bl	801318c <pickupNonLinearity>
 8013eee:	eeb0 8a40 	vmov.f32	s16, s0
 8013ef2:	eeb0 0a68 	vmov.f32	s0, s17
 8013ef6:	f7ff f949 	bl	801318c <pickupNonLinearity>
 8013efa:	ee38 8a40 	vsub.f32	s16, s16, s0
 8013efe:	ed84 8a26 	vstr	s16, [r4, #152]	; 0x98

		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8013f02:	ed94 0a34 	vldr	s0, [r4, #208]	; 0xd0
 8013f06:	ee30 0a2a 	vadd.f32	s0, s0, s21
 8013f0a:	edd4 7a58 	vldr	s15, [r4, #352]	; 0x160
 8013f0e:	ed94 7a59 	vldr	s14, [r4, #356]	; 0x164
 8013f12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013f16:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013f1a:	f104 001c 	add.w	r0, r4, #28
 8013f1e:	f7fb fc3c 	bl	800f79a <tHighpass_tick>
 8013f22:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8013f26:	f7fa fb9f 	bl	800e668 <tFeedbackLeveler_tick>
 8013f2a:	eef0 8a40 	vmov.f32	s17, s0
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8013f2e:	ed94 0a34 	vldr	s0, [r4, #208]	; 0xd0
 8013f32:	ee30 0a0a 	vadd.f32	s0, s0, s20
 8013f36:	edd4 7a58 	vldr	s15, [r4, #352]	; 0x160
 8013f3a:	ed94 7a59 	vldr	s14, [r4, #356]	; 0x164
 8013f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013f42:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013f46:	f104 0020 	add.w	r0, r4, #32
 8013f4a:	f7fb fc26 	bl	800f79a <tHighpass_tick>
 8013f4e:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 8013f52:	f7fa fb89 	bl	800e668 <tFeedbackLeveler_tick>
 8013f56:	eeb0 8a40 	vmov.f32	s16, s0
        tLagrangeDelay_tickIn(&x->delay, inputSample);
 8013f5a:	eeb0 0a68 	vmov.f32	s0, s17
 8013f5e:	4630      	mov	r0, r6
 8013f60:	f7f9 ff25 	bl	800ddae <tLagrangeDelay_tickIn>
        tLagrangeDelay_tickIn(&x->delayP, inputSampleP);
 8013f64:	eeb0 0a48 	vmov.f32	s0, s16
 8013f68:	4628      	mov	r0, r5
 8013f6a:	f7f9 ff20 	bl	800ddae <tLagrangeDelay_tickIn>
        //tLagrangeDelay_tickIn(&x->delayP, delayOutP + x->slideNoise);
        //Lfloat outputPfilt = 0.0f;
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
 8013f6e:	ed94 0a26 	vldr	s0, [r4, #152]	; 0x98
 8013f72:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013f76:	f7fb faea 	bl	800f54e <tSVF_tick>
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 8013f7a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8013f7e:	f7fb fae6 	bl	800f54e <tSVF_tick>
 8013f82:	eef0 8a40 	vmov.f32	s17, s0
        Lfloat volumes[2];
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
 8013f86:	edd4 7a63 	vldr	s15, [r4, #396]	; 0x18c
 8013f8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013f8e:	4668      	mov	r0, sp
 8013f90:	ee37 0ae9 	vsub.f32	s0, s15, s19
 8013f94:	f7fd fda2 	bl	8011adc <LEAF_crossfade>
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
 8013f98:	ed94 8a25 	vldr	s16, [r4, #148]	; 0x94
 8013f9c:	edd4 7a2a 	vldr	s15, [r4, #168]	; 0xa8
 8013fa0:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8013fa4:	ee38 8a27 	vadd.f32	s16, s16, s15
 8013fa8:	ee38 8a08 	vadd.f32	s16, s16, s16
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 8013fac:	eeb0 0a48 	vmov.f32	s0, s16
 8013fb0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 8013fb4:	f7fb facb 	bl	800f54e <tSVF_tick>
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
 8013fb8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8013fbc:	f7fb fac7 	bl	800f54e <tSVF_tick>
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
 8013fc0:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 8013fc4:	f7fb fac3 	bl	800f54e <tSVF_tick>

        theOutput = (prefilter4 * 1.3f* volumes[1]) + (prefilter * 1.3f * volumes[0]);
 8013fc8:	ed5f 7a79 	vldr	s15, [pc, #-484]	; 8013de8 <tTString_tick+0x3b8>
 8013fcc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013fd0:	ed9d 7a01 	vldr	s14, [sp, #4]
 8013fd4:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013fd8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013fdc:	eddd 7a00 	vldr	s15, [sp]
 8013fe0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013fe4:	ee30 0a08 	vadd.f32	s0, s0, s16
    for (int i = 0; i < x->oversampling; i++)
 8013fe8:	f109 0901 	add.w	r9, r9, #1
 8013fec:	6863      	ldr	r3, [r4, #4]
 8013fee:	454b      	cmp	r3, r9
 8013ff0:	f340 8114 	ble.w	801421c <tTString_tick+0x7ec>
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8013ff4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013ff8:	f7fa fef6 	bl	800ede8 <tExpSmooth_tick>
 8013ffc:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8014000:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8014004:	f7fa fef0 	bl	800ede8 <tExpSmooth_tick>
 8014008:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 801400c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014010:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8014014:	ee20 0a27 	vmul.f32	s0, s0, s15
    	x->tensionAmount = tension * 0.01f;
 8014018:	ed1f 7a8c 	vldr	s14, [pc, #-560]	; 8013dec <tTString_tick+0x3bc>
 801401c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014020:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
        if (currentDelay < 5.0f)
 8014024:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8014028:	eef4 7ac7 	vcmpe.f32	s15, s14
 801402c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014030:	d501      	bpl.n	8014036 <tTString_tick+0x606>
        	currentDelay = 5.0f;
 8014032:	eef0 7a47 	vmov.f32	s15, s14
        if (currentDelay > x->maxDelay)
 8014036:	ed94 7a54 	vldr	s14, [r4, #336]	; 0x150
 801403a:	eef8 8a47 	vcvt.f32.u32	s17, s14
 801403e:	eef4 8ae7 	vcmpe.f32	s17, s15
 8014042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014046:	d401      	bmi.n	801404c <tTString_tick+0x61c>
 8014048:	eef0 8a67 	vmov.f32	s17, s15
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
 801404c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8014050:	ee28 8a88 	vmul.f32	s16, s17, s16
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8014054:	f104 0614 	add.w	r6, r4, #20
 8014058:	ee38 0ac0 	vsub.f32	s0, s17, s0
 801405c:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8014060:	ed94 7a53 	vldr	s14, [r4, #332]	; 0x14c
 8014064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014068:	ee70 7a67 	vsub.f32	s15, s0, s15
 801406c:	ed94 0a4f 	vldr	s0, [r4, #316]	; 0x13c
 8014070:	ed1f 9aa1 	vldr	s18, [pc, #-644]	; 8013df0 <tTString_tick+0x3c0>
 8014074:	ee20 0a09 	vmul.f32	s0, s0, s18
 8014078:	ee20 0a28 	vmul.f32	s0, s0, s17
 801407c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8014080:	4630      	mov	r0, r6
 8014082:	f7f9 fedb 	bl	800de3c <tLagrangeDelay_setDelay>
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8014086:	f104 0518 	add.w	r5, r4, #24
 801408a:	ed94 0a28 	vldr	s0, [r4, #160]	; 0xa0
 801408e:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8014092:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 8014096:	ed94 7a53 	vldr	s14, [r4, #332]	; 0x14c
 801409a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801409e:	ee30 0a67 	vsub.f32	s0, s0, s15
 80140a2:	edd4 7a4f 	vldr	s15, [r4, #316]	; 0x13c
 80140a6:	ee67 7a89 	vmul.f32	s15, s15, s18
 80140aa:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80140ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80140b2:	4628      	mov	r0, r5
 80140b4:	f7f9 fec2 	bl	800de3c <tLagrangeDelay_setDelay>
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 80140b8:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 80140bc:	f7fe fe20 	bl	8012d00 <tNoise_tick>
 80140c0:	eeb0 9a40 	vmov.f32	s18, s0
 80140c4:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 80140c8:	f7fa fe8e 	bl	800ede8 <tExpSmooth_tick>
 80140cc:	ee29 9a00 	vmul.f32	s18, s18, s0
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 80140d0:	ee39 9a09 	vadd.f32	s18, s18, s18
 80140d4:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
 80140d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80140dc:	ee17 1a90 	vmov	r1, s15
 80140e0:	eeb0 0a49 	vmov.f32	s0, s18
 80140e4:	4630      	mov	r0, r6
 80140e6:	f7f9 ffcb 	bl	800e080 <tLagrangeDelay_addTo>
        tLagrangeDelay_addTo(&x->delayP,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 80140ea:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
 80140ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80140f2:	ee17 1a90 	vmov	r1, s15
 80140f6:	eeb0 0a49 	vmov.f32	s0, s18
 80140fa:	4628      	mov	r0, r5
 80140fc:	f7f9 ffc0 	bl	800e080 <tLagrangeDelay_addTo>
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 8014100:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 8014104:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014108:	f7fb f970 	bl	800f3ec <tCookOnePole_tick>
 801410c:	eef0 aa40 	vmov.f32	s21, s0
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 8014110:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8014114:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014118:	f7fb f968 	bl	800f3ec <tCookOnePole_tick>
 801411c:	eeb0 aa40 	vmov.f32	s20, s0
        Lfloat rippleLength = x->rippleRate *  currentDelay;
 8014120:	ed94 9a20 	vldr	s18, [r4, #128]	; 0x80
 8014124:	ee29 9a28 	vmul.f32	s18, s18, s17
        uint32_t rippleLengthInt = (uint32_t) rippleLength;
 8014128:	eebc cac9 	vcvt.u32.f32	s24, s18
        Lfloat rippleLengthAlpha = rippleLength - rippleLengthInt;
 801412c:	eef8 7a4c 	vcvt.f32.u32	s15, s24
 8014130:	ee39 9a67 	vsub.f32	s18, s18, s15
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 8014134:	4630      	mov	r0, r6
 8014136:	f7f9 fe47 	bl	800ddc8 <tLagrangeDelay_tickOut>
 801413a:	eeb0 ba40 	vmov.f32	s22, s0
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 801413e:	4628      	mov	r0, r5
 8014140:	f7f9 fe42 	bl	800ddc8 <tLagrangeDelay_tickOut>
 8014144:	eef0 9a40 	vmov.f32	s19, s0
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
 8014148:	eeb0 0a49 	vmov.f32	s0, s18
 801414c:	ee1c 1a10 	vmov	r1, s24
 8014150:	4630      	mov	r0, r6
 8014152:	f7f9 ff29 	bl	800dfa8 <tLagrangeDelay_tapOutInterpolated>
 8014156:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 801415a:	ee60 ba27 	vmul.f32	s23, s0, s15
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
 801415e:	eeb0 0a49 	vmov.f32	s0, s18
 8014162:	ee1c 1a10 	vmov	r1, s24
 8014166:	4628      	mov	r0, r5
 8014168:	f7f9 ff1e 	bl	800dfa8 <tLagrangeDelay_tapOutInterpolated>
 801416c:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 8014170:	ee20 0a27 	vmul.f32	s0, s0, s15
        Lfloat rippleOut = delayOut + rippleOut1;
 8014174:	ee3b ba2b 	vadd.f32	s22, s22, s23
        Lfloat rippleOutP = delayOutP + rippleOut1P;
 8014178:	ee39 9a80 	vadd.f32	s18, s19, s0
        if (x->inharmonic)
 801417c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8014180:	2b00      	cmp	r3, #0
 8014182:	f47f ae06 	bne.w	8013d92 <tTString_tick+0x362>
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8014186:	edd4 7a1d 	vldr	s15, [r4, #116]	; 0x74
 801418a:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
 801418e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014192:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8014196:	edd4 0a1e 	vldr	s1, [r4, #120]	; 0x78
 801419a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801419e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80141a2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80141a6:	f7fd fd23 	bl	8011bf0 <LEAF_clip>
 80141aa:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 80141ae:	edd4 7a1d 	vldr	s15, [r4, #116]	; 0x74
 80141b2:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
 80141b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80141ba:	ee67 7a89 	vmul.f32	s15, s15, s18
 80141be:	edd4 0a1e 	vldr	s1, [r4, #120]	; 0x78
 80141c2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80141c6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80141ca:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80141ce:	f7fd fd0f 	bl	8011bf0 <LEAF_clip>
 80141d2:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
        Lfloat positionMin = (x->openStringLength * 0.104166666666667f);
 80141d6:	edd4 7a3d 	vldr	s15, [r4, #244]	; 0xf4
 80141da:	eddf 9a13 	vldr	s19, [pc, #76]	; 8014228 <tTString_tick+0x7f8>
 80141de:	ee67 9aa9 	vmul.f32	s19, s15, s19
        Lfloat positionMax = (x->openStringLength * 0.021666666666667f);
 80141e2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 801422c <tTString_tick+0x7fc>
 80141e6:	ee27 9a87 	vmul.f32	s18, s15, s14
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 80141ea:	ed94 ba27 	vldr	s22, [r4, #156]	; 0x9c
 80141ee:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80141f2:	f7fe f9f1 	bl	80125d8 <tCycle_tick>
 80141f6:	edd4 7a2d 	vldr	s15, [r4, #180]	; 0xb4
 80141fa:	ee20 0a27 	vmul.f32	s0, s0, s15
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
 80141fe:	eeb0 1a49 	vmov.f32	s2, s18
 8014202:	eef0 0a69 	vmov.f32	s1, s19
 8014206:	ee3b 0a00 	vadd.f32	s0, s22, s0
 801420a:	f7fd fb0c 	bl	8011826 <LEAF_mapFromZeroToOneInput>
 801420e:	eef0 7a40 	vmov.f32	s15, s0
        uint32_t backwards = 0;
 8014212:	2300      	movs	r3, #0
        while (pickupPos > halfCurrentDelay)
 8014214:	e5d2      	b.n	8013dbc <tTString_tick+0x38c>
        Lfloat pickupPosFinal = pickupPos;
 8014216:	eeb0 9a67 	vmov.f32	s18, s15
 801421a:	e5f9      	b.n	8013e10 <tTString_tick+0x3e0>
    }
    return theOutput;
}
 801421c:	b003      	add	sp, #12
 801421e:	ecbd 8b0a 	vpop	{d8-d12}
 8014222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014226:	bf00      	nop
 8014228:	3dd55555 	.word	0x3dd55555
 801422c:	3cb17e4b 	.word	0x3cb17e4b

08014230 <tTString_setFreq>:

void    tTString_setFreq               (tTString* const bw, Lfloat freq)
{
 8014230:	b510      	push	{r4, lr}
 8014232:	ed2d 8b04 	vpush	{d8-d9}
 8014236:	b082      	sub	sp, #8
    _tTString* x = *bw;
 8014238:	6804      	ldr	r4, [r0, #0]
    if (freq < x->actualLowestFreq)
 801423a:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
 801423e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8014242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014246:	dc01      	bgt.n	801424c <tTString_setFreq+0x1c>
 8014248:	eef0 7a40 	vmov.f32	s15, s0
        freq = x->actualLowestFreq;
    //freq = freq * x->invOversampling;
    x->freq = freq;
 801424c:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64

    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 8014250:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
 8014254:	ee28 8a27 	vmul.f32	s16, s16, s15

    //tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 1.0f);
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8014258:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801425c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8014260:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014264:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014268:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801426c:	f7fa fdae 	bl	800edcc <tExpSmooth_setDest>

    //tCycle_setFreq(&x->tensionModOsc, freq * x->invOversamplingTimesTwo);
#ifdef ARM_MATH_CM7
    Lfloat result = 0.0f;
 8014270:	2300      	movs	r3, #0
 8014272:	9301      	str	r3, [sp, #4]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 8014274:	edd4 8a50 	vldr	s17, [r4, #320]	; 0x140
 8014278:	eeb0 0a48 	vmov.f32	s0, s16
 801427c:	f7ec fa7a 	bl	8000774 <arm_sin_f32>
 8014280:	ee68 8a80 	vmul.f32	s17, s17, s0
 8014284:	ed94 9a50 	vldr	s18, [r4, #320]	; 0x140
 8014288:	eeb0 0a48 	vmov.f32	s0, s16
 801428c:	f7ec f962 	bl	8000554 <arm_cos_f32>
 8014290:	ee29 9a00 	vmul.f32	s18, s18, s0
 8014294:	a801      	add	r0, sp, #4
 8014296:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801429a:	ee70 0ac9 	vsub.f32	s1, s1, s18
 801429e:	eeb0 0a68 	vmov.f32	s0, s17
 80142a2:	f7ec f821 	bl	80002e8 <arm_atan2_f32>
     x->phaseComp = result;
 80142a6:	9b01      	ldr	r3, [sp, #4]
 80142a8:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    //if I can figure out how to use a newer CMSIS DSP pack, the new version 1.15 has an atan2f approximation that's likely faster
#else
    x->phaseComp = atan2f((x->poleCoeff * sinf(Fc)) , (1.0f - (x->poleCoeff * cosf(Fc))));
#endif
}
 80142ac:	b002      	add	sp, #8
 80142ae:	ecbd 8b04 	vpop	{d8-d9}
 80142b2:	bd10      	pop	{r4, pc}

080142b4 <tTString_initToPool>:
{
 80142b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80142b6:	ed2d 8b06 	vpush	{d8-d10}
 80142ba:	b083      	sub	sp, #12
 80142bc:	4606      	mov	r6, r0
 80142be:	460d      	mov	r5, r1
 80142c0:	eef0 9a40 	vmov.f32	s19, s0
 80142c4:	4614      	mov	r4, r2
    _tMempool* m = *mp;
 80142c6:	6817      	ldr	r7, [r2, #0]
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 80142c8:	4639      	mov	r1, r7
 80142ca:	f44f 70ca 	mov.w	r0, #404	; 0x194
 80142ce:	f7fd ffe3 	bl	8012298 <mpool_alloc>
 80142d2:	6030      	str	r0, [r6, #0]
 80142d4:	9001      	str	r0, [sp, #4]
    x->mempool = m;
 80142d6:	6007      	str	r7, [r0, #0]
    LEAF* leaf = x->mempool->leaf;
 80142d8:	9801      	ldr	r0, [sp, #4]
 80142da:	6803      	ldr	r3, [r0, #0]
 80142dc:	685b      	ldr	r3, [r3, #4]
    x->oversampling = oversampling;
 80142de:	6045      	str	r5, [r0, #4]
    x->invOversampling = 1.0f / oversampling;
 80142e0:	ee07 5a90 	vmov	s15, r5
 80142e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142e8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80142ec:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 80142f0:	ed80 7a02 	vstr	s14, [r0, #8]
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
 80142f4:	ee37 7a07 	vadd.f32	s14, s14, s14
 80142f8:	ed80 7a03 	vstr	s14, [r0, #12]
    x->sampleRate          = leaf->sampleRate * oversampling;
 80142fc:	ed93 7a00 	vldr	s14, [r3]
 8014300:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014304:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
    x->invSampleRate = 1.f / x->sampleRate;
 8014308:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 801430c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 8014310:	ed9f aae4 	vldr	s20, [pc, #912]	; 80146a4 <tTString_initToPool+0x3f0>
 8014314:	ee27 7a0a 	vmul.f32	s14, s14, s20
 8014318:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
    x->tensionGain = 0.0f;
 801431c:	ed9f 8ae2 	vldr	s16, [pc, #904]	; 80146a8 <tTString_initToPool+0x3f4>
 8014320:	ed80 8a11 	vstr	s16, [r0, #68]	; 0x44
    x->allpassDelay = 0.f;
 8014324:	ed80 8a17 	vstr	s16, [r0, #92]	; 0x5c
    x->decayCoeff = 1.0f;
 8014328:	edc0 8a1d 	vstr	s17, [r0, #116]	; 0x74
    x->muteCoeff = 1.0f;
 801432c:	edc0 8a1e 	vstr	s17, [r0, #120]	; 0x78
    x->output = 0.0f;
 8014330:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    x->outputP = 0.0f;
 8014334:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    x->rippleRate = 1.0f;
 8014338:	edc0 8a20 	vstr	s17, [r0, #128]	; 0x80
    x->r = 0.0f;
 801433c:	ed80 8a1f 	vstr	s16, [r0, #124]	; 0x7c
    x->invOnePlusr = 1.0f;
 8014340:	edc0 8a23 	vstr	s17, [r0, #140]	; 0x8c
    x->decayInSeconds = 10.0f;
 8014344:	4bd9      	ldr	r3, [pc, #868]	; (80146ac <tTString_initToPool+0x3f8>)
 8014346:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    x->harmonic = 1.0f;
 801434a:	edc0 8a21 	vstr	s17, [r0, #132]	; 0x84
    x->baseDelay = 100.0f;
 801434e:	ed9f 9ad8 	vldr	s18, [pc, #864]	; 80146b0 <tTString_initToPool+0x3fc>
 8014352:	ed80 9a0b 	vstr	s18, [r0, #44]	; 0x2c
    x->tensionAmount = 0.0f;
 8014356:	ed80 8a28 	vstr	s16, [r0, #160]	; 0xa0
    x->pickupPos = 0.0f;
 801435a:	ed80 8a27 	vstr	s16, [r0, #156]	; 0x9c
    x->slideGain = 0.4f;
 801435e:	4bd5      	ldr	r3, [pc, #852]	; (80146b4 <tTString_initToPool+0x400>)
 8014360:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
    x->barDrive = 1.5f;
 8014364:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014368:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    x->wound = 1;
 801436c:	2501      	movs	r5, #1
 801436e:	f8c0 50d8 	str.w	r5, [r0, #216]	; 0xd8
    x->barPulsePhasor = 0;
 8014372:	2700      	movs	r7, #0
 8014374:	f8c0 70e4 	str.w	r7, [r0, #228]	; 0xe4
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
 8014378:	ee87 7aa9 	vdiv.f32	s14, s15, s19
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 801437c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8014380:	ee17 6a90 	vmov	r6, s15
 8014384:	4622      	mov	r2, r4
 8014386:	ee17 1a90 	vmov	r1, s15
 801438a:	eeb0 0a49 	vmov.f32	s0, s18
 801438e:	3014      	adds	r0, #20
 8014390:	f7f9 fdb0 	bl	800def4 <tLagrangeDelay_initToPool>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
 8014394:	9801      	ldr	r0, [sp, #4]
 8014396:	edd0 9a0c 	vldr	s19, [r0, #48]	; 0x30
 801439a:	3014      	adds	r0, #20
 801439c:	f7f9 fe80 	bl	800e0a0 <tLagrangeDelay_getMaxDelay>
 80143a0:	9801      	ldr	r0, [sp, #4]
 80143a2:	eec9 7a80 	vdiv.f32	s15, s19, s0
 80143a6:	edc0 7a24 	vstr	s15, [r0, #144]	; 0x90
    tLagrangeDelay_clear(&x->delay);
 80143aa:	3014      	adds	r0, #20
 80143ac:	f7f9 fcf2 	bl	800dd94 <tLagrangeDelay_clear>
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
 80143b0:	4622      	mov	r2, r4
 80143b2:	4631      	mov	r1, r6
 80143b4:	eeb0 0a49 	vmov.f32	s0, s18
 80143b8:	9801      	ldr	r0, [sp, #4]
 80143ba:	3018      	adds	r0, #24
 80143bc:	f7f9 fd9a 	bl	800def4 <tLagrangeDelay_initToPool>
    tLagrangeDelay_clear(&x->delayP);
 80143c0:	9801      	ldr	r0, [sp, #4]
 80143c2:	3018      	adds	r0, #24
 80143c4:	f7f9 fce6 	bl	800dd94 <tLagrangeDelay_clear>
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
 80143c8:	9801      	ldr	r0, [sp, #4]
 80143ca:	3014      	adds	r0, #20
 80143cc:	f7f9 fe68 	bl	800e0a0 <tLagrangeDelay_getMaxDelay>
 80143d0:	9801      	ldr	r0, [sp, #4]
 80143d2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80143d6:	ed80 0a54 	vstr	s0, [r0, #336]	; 0x150
    tCookOnePole_initToPool(&x->reflFilt, mp);
 80143da:	4621      	mov	r1, r4
 80143dc:	3024      	adds	r0, #36	; 0x24
 80143de:	f7fa ffcb 	bl	800f378 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFilt, x->sampleRate);
 80143e2:	9801      	ldr	r0, [sp, #4]
 80143e4:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 80143e8:	3024      	adds	r0, #36	; 0x24
 80143ea:	f7fb f80f 	bl	800f40c <tCookOnePole_setSampleRate>
    tCookOnePole_initToPool(&x->reflFiltP, mp);
 80143ee:	4621      	mov	r1, r4
 80143f0:	9801      	ldr	r0, [sp, #4]
 80143f2:	3028      	adds	r0, #40	; 0x28
 80143f4:	f7fa ffc0 	bl	800f378 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFiltP, x->sampleRate);
 80143f8:	9801      	ldr	r0, [sp, #4]
 80143fa:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 80143fe:	3028      	adds	r0, #40	; 0x28
 8014400:	f7fb f804 	bl	800f40c <tCookOnePole_setSampleRate>
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
 8014404:	eddf aaac 	vldr	s21, [pc, #688]	; 80146b8 <tTString_initToPool+0x404>
 8014408:	eddf 9aac 	vldr	s19, [pc, #688]	; 80146bc <tTString_initToPool+0x408>
 801440c:	eef0 0a6a 	vmov.f32	s1, s21
 8014410:	eeb0 0a69 	vmov.f32	s0, s19
 8014414:	9801      	ldr	r0, [sp, #4]
 8014416:	3024      	adds	r0, #36	; 0x24
 8014418:	f7fa ffe2 	bl	800f3e0 <tCookOnePole_setGainAndPole>
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
 801441c:	eef0 0a6a 	vmov.f32	s1, s21
 8014420:	eeb0 0a69 	vmov.f32	s0, s19
 8014424:	9801      	ldr	r0, [sp, #4]
 8014426:	3028      	adds	r0, #40	; 0x28
 8014428:	f7fa ffda 	bl	800f3e0 <tCookOnePole_setGainAndPole>
    tTString_setFreq(&x, 440.0f);
 801442c:	eddf 9aa4 	vldr	s19, [pc, #656]	; 80146c0 <tTString_initToPool+0x40c>
 8014430:	eeb0 0a69 	vmov.f32	s0, s19
 8014434:	a801      	add	r0, sp, #4
 8014436:	f7ff fefb 	bl	8014230 <tTString_setFreq>
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 801443a:	9801      	ldr	r0, [sp, #4]
 801443c:	edd0 0a02 	vldr	s1, [r0, #8]
 8014440:	4621      	mov	r1, r4
 8014442:	eddf 7aa0 	vldr	s15, [pc, #640]	; 80146c4 <tTString_initToPool+0x410>
 8014446:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801444a:	eeb0 0a48 	vmov.f32	s0, s16
 801444e:	304c      	adds	r0, #76	; 0x4c
 8014450:	f7fa fc62 	bl	800ed18 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
 8014454:	eeb0 0a48 	vmov.f32	s0, s16
 8014458:	9801      	ldr	r0, [sp, #4]
 801445a:	304c      	adds	r0, #76	; 0x4c
 801445c:	f7fa fcb6 	bl	800edcc <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
 8014460:	9801      	ldr	r0, [sp, #4]
 8014462:	edd0 0a02 	vldr	s1, [r0, #8]
 8014466:	4621      	mov	r1, r4
 8014468:	eddf 7aac 	vldr	s15, [pc, #688]	; 801471c <tTString_initToPool+0x468>
 801446c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014470:	eeb0 0a49 	vmov.f32	s0, s18
 8014474:	3050      	adds	r0, #80	; 0x50
 8014476:	f7fa fc4f 	bl	800ed18 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
 801447a:	eeb0 0a49 	vmov.f32	s0, s18
 801447e:	9801      	ldr	r0, [sp, #4]
 8014480:	3050      	adds	r0, #80	; 0x50
 8014482:	f7fa fca3 	bl	800edcc <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
 8014486:	9801      	ldr	r0, [sp, #4]
 8014488:	edd0 0a02 	vldr	s1, [r0, #8]
 801448c:	4621      	mov	r1, r4
 801448e:	eddf 7a8e 	vldr	s15, [pc, #568]	; 80146c8 <tTString_initToPool+0x414>
 8014492:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014496:	eeb0 0a48 	vmov.f32	s0, s16
 801449a:	f500 70be 	add.w	r0, r0, #380	; 0x17c
 801449e:	f7fa fc3b 	bl	800ed18 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
 80144a2:	eeb0 0a48 	vmov.f32	s0, s16
 80144a6:	9801      	ldr	r0, [sp, #4]
 80144a8:	f500 70be 	add.w	r0, r0, #380	; 0x17c
 80144ac:	f7fa fc8e 	bl	800edcc <tExpSmooth_setDest>
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
 80144b0:	4622      	mov	r2, r4
 80144b2:	2104      	movs	r1, #4
 80144b4:	9801      	ldr	r0, [sp, #4]
 80144b6:	3054      	adds	r0, #84	; 0x54
 80144b8:	f7fa fd74 	bl	800efa4 <tThiranAllpassSOCascade_initToPool>
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
 80144bc:	4622      	mov	r2, r4
 80144be:	2104      	movs	r1, #4
 80144c0:	9801      	ldr	r0, [sp, #4]
 80144c2:	3058      	adds	r0, #88	; 0x58
 80144c4:	f7fa fd6e 	bl	800efa4 <tThiranAllpassSOCascade_initToPool>
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
 80144c8:	9e01      	ldr	r6, [sp, #4]
 80144ca:	ed96 1a02 	vldr	s2, [r6, #8]
 80144ce:	eef0 0a49 	vmov.f32	s1, s18
 80144d2:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80146cc <tTString_initToPool+0x418>
 80144d6:	f106 0054 	add.w	r0, r6, #84	; 0x54
 80144da:	f7fa fdc7 	bl	800f06c <tThiranAllpassSOCascade_setCoeff>
 80144de:	ed86 0a17 	vstr	s0, [r6, #92]	; 0x5c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 80144e2:	9e01      	ldr	r6, [sp, #4]
 80144e4:	ed96 1a02 	vldr	s2, [r6, #8]
 80144e8:	eef0 0a49 	vmov.f32	s1, s18
 80144ec:	ed9f 0a78 	vldr	s0, [pc, #480]	; 80146d0 <tTString_initToPool+0x41c>
 80144f0:	f106 0058 	add.w	r0, r6, #88	; 0x58
 80144f4:	f7fa fdba 	bl	800f06c <tThiranAllpassSOCascade_setCoeff>
 80144f8:	ed86 0a18 	vstr	s0, [r6, #96]	; 0x60
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
 80144fc:	eddf aa75 	vldr	s21, [pc, #468]	; 80146d4 <tTString_initToPool+0x420>
 8014500:	4622      	mov	r2, r4
 8014502:	eef0 0a6a 	vmov.f32	s1, s21
 8014506:	ed9f 0a74 	vldr	s0, [pc, #464]	; 80146d8 <tTString_initToPool+0x424>
 801450a:	4629      	mov	r1, r5
 801450c:	9801      	ldr	r0, [sp, #4]
 801450e:	3068      	adds	r0, #104	; 0x68
 8014510:	f7fa ff8a 	bl	800f428 <tSVF_initToPool>
    tSVF_setSampleRate(&x->lowpassP, x->sampleRate);
 8014514:	9801      	ldr	r0, [sp, #4]
 8014516:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 801451a:	3068      	adds	r0, #104	; 0x68
 801451c:	f7fb f8f8 	bl	800f710 <tSVF_setSampleRate>
    tSVF_setFreq(&x->lowpassP, 6000.0f);
 8014520:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 80146dc <tTString_initToPool+0x428>
 8014524:	9801      	ldr	r0, [sp, #4]
 8014526:	3068      	adds	r0, #104	; 0x68
 8014528:	f7fb f854 	bl	800f5d4 <tSVF_setFreq>
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
 801452c:	ed9f 9a6c 	vldr	s18, [pc, #432]	; 80146e0 <tTString_initToPool+0x42c>
 8014530:	4622      	mov	r2, r4
 8014532:	eef0 0a6a 	vmov.f32	s1, s21
 8014536:	eeb0 0a49 	vmov.f32	s0, s18
 801453a:	4639      	mov	r1, r7
 801453c:	9801      	ldr	r0, [sp, #4]
 801453e:	306c      	adds	r0, #108	; 0x6c
 8014540:	f7fa ff72 	bl	800f428 <tSVF_initToPool>
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
 8014544:	9801      	ldr	r0, [sp, #4]
 8014546:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 801454a:	306c      	adds	r0, #108	; 0x6c
 801454c:	f7fb f8e0 	bl	800f710 <tSVF_setSampleRate>
    tSVF_setFreq(&x->highpassP, 1800.0f);
 8014550:	eeb0 0a49 	vmov.f32	s0, s18
 8014554:	9801      	ldr	r0, [sp, #4]
 8014556:	306c      	adds	r0, #108	; 0x6c
 8014558:	f7fb f83c 	bl	800f5d4 <tSVF_setFreq>
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 801455c:	9801      	ldr	r0, [sp, #4]
 801455e:	edd0 7a0d 	vldr	s15, [r0, #52]	; 0x34
 8014562:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8014566:	edc0 7a04 	vstr	s15, [r0, #16]
    tCycle_initToPool(&x->tensionModOsc, mp);
 801456a:	4621      	mov	r1, r4
 801456c:	30a4      	adds	r0, #164	; 0xa4
 801456e:	f7fe f80b 	bl	8012588 <tCycle_initToPool>
    tCycle_setSampleRate(&x->tensionModOsc, x->sampleRate);
 8014572:	9801      	ldr	r0, [sp, #4]
 8014574:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8014578:	30a4      	adds	r0, #164	; 0xa4
 801457a:	f7fe f873 	bl	8012664 <tCycle_setSampleRate>
    tCycle_initToPool(&x->pickupModOsc, mp);
 801457e:	4621      	mov	r1, r4
 8014580:	9801      	ldr	r0, [sp, #4]
 8014582:	30ac      	adds	r0, #172	; 0xac
 8014584:	f7fe f800 	bl	8012588 <tCycle_initToPool>
    tCycle_setSampleRate(&x->pickupModOsc, x->sampleRate);
 8014588:	9801      	ldr	r0, [sp, #4]
 801458a:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 801458e:	30ac      	adds	r0, #172	; 0xac
 8014590:	f7fe f868 	bl	8012664 <tCycle_setSampleRate>
    x->pickupModOscFreq = 440.0f;
 8014594:	9801      	ldr	r0, [sp, #4]
 8014596:	edc0 9a2c 	vstr	s19, [r0, #176]	; 0xb0
    x->pickupModOscAmp = 1.0f;
 801459a:	edc0 8a2d 	vstr	s17, [r0, #180]	; 0xb4
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
 801459e:	4622      	mov	r2, r4
 80145a0:	eef0 0a68 	vmov.f32	s1, s17
 80145a4:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80146e4 <tTString_initToPool+0x430>
 80145a8:	4629      	mov	r1, r5
 80145aa:	30b8      	adds	r0, #184	; 0xb8
 80145ac:	f7fa ff3c 	bl	800f428 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter, x->sampleRate);
 80145b0:	9801      	ldr	r0, [sp, #4]
 80145b2:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 80145b6:	30b8      	adds	r0, #184	; 0xb8
 80145b8:	f7fb f8aa 	bl	800f710 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
 80145bc:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80146e8 <tTString_initToPool+0x434>
 80145c0:	9801      	ldr	r0, [sp, #4]
 80145c2:	30b8      	adds	r0, #184	; 0xb8
 80145c4:	f7fb f806 	bl	800f5d4 <tSVF_setFreq>
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
 80145c8:	4622      	mov	r2, r4
 80145ca:	eddf 0a48 	vldr	s1, [pc, #288]	; 80146ec <tTString_initToPool+0x438>
 80145ce:	ed9f 0a48 	vldr	s0, [pc, #288]	; 80146f0 <tTString_initToPool+0x43c>
 80145d2:	4629      	mov	r1, r5
 80145d4:	9801      	ldr	r0, [sp, #4]
 80145d6:	30bc      	adds	r0, #188	; 0xbc
 80145d8:	f7fa ff26 	bl	800f428 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter2, x->sampleRate);
 80145dc:	9801      	ldr	r0, [sp, #4]
 80145de:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 80145e2:	30bc      	adds	r0, #188	; 0xbc
 80145e4:	f7fb f894 	bl	800f710 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter2, 4100.0f);
 80145e8:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80146f4 <tTString_initToPool+0x440>
 80145ec:	9801      	ldr	r0, [sp, #4]
 80145ee:	30bc      	adds	r0, #188	; 0xbc
 80145f0:	f7fa fff0 	bl	800f5d4 <tSVF_setFreq>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, .9f, mp);
 80145f4:	ed9f 9a43 	vldr	s18, [pc, #268]	; 8014704 <tTString_initToPool+0x450>
 80145f8:	4622      	mov	r2, r4
 80145fa:	eddf 0a45 	vldr	s1, [pc, #276]	; 8014710 <tTString_initToPool+0x45c>
 80145fe:	eeb0 0a49 	vmov.f32	s0, s18
 8014602:	2104      	movs	r1, #4
 8014604:	9801      	ldr	r0, [sp, #4]
 8014606:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 801460a:	f7fa ff0d 	bl	800f428 <tSVF_initToPool>
    tSVF_setSampleRate(&x->peakFilt, x->sampleRate);
 801460e:	9801      	ldr	r0, [sp, #4]
 8014610:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8014614:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8014618:	f7fb f87a 	bl	800f710 <tSVF_setSampleRate>
    tSVF_setFreq(&x->peakFilt, 1000.0f);
 801461c:	eeb0 0a49 	vmov.f32	s0, s18
 8014620:	9801      	ldr	r0, [sp, #4]
 8014622:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8014626:	f7fa ffd5 	bl	800f5d4 <tSVF_setFreq>
    tNoise_initToPool(&x->noise, PinkNoise, mp);
 801462a:	4622      	mov	r2, r4
 801462c:	4629      	mov	r1, r5
 801462e:	9801      	ldr	r0, [sp, #4]
 8014630:	30cc      	adds	r0, #204	; 0xcc
 8014632:	f7fe fb4b 	bl	8012ccc <tNoise_initToPool>
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
 8014636:	4621      	mov	r1, r4
 8014638:	eeb0 0a68 	vmov.f32	s0, s17
 801463c:	9801      	ldr	r0, [sp, #4]
 801463e:	301c      	adds	r0, #28
 8014640:	f7fb f870 	bl	800f724 <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlock,x->sampleRate);
 8014644:	9801      	ldr	r0, [sp, #4]
 8014646:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 801464a:	301c      	adds	r0, #28
 801464c:	f7fb f8ba 	bl	800f7c4 <tHighpass_setSampleRate>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
 8014650:	4621      	mov	r1, r4
 8014652:	eeb0 0a68 	vmov.f32	s0, s17
 8014656:	9801      	ldr	r0, [sp, #4]
 8014658:	3020      	adds	r0, #32
 801465a:	f7fb f863 	bl	800f724 <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlockP,x->sampleRate);
 801465e:	9801      	ldr	r0, [sp, #4]
 8014660:	ed90 0a0c 	vldr	s0, [r0, #48]	; 0x30
 8014664:	3020      	adds	r0, #32
 8014666:	f7fb f8ad 	bl	800f7c4 <tHighpass_setSampleRate>
    tSlide_initToPool(&x->slide, 0, 3000, mp);//100 1400
 801466a:	4621      	mov	r1, r4
 801466c:	eddf 0a22 	vldr	s1, [pc, #136]	; 80146f8 <tTString_initToPool+0x444>
 8014670:	eeb0 0a48 	vmov.f32	s0, s16
 8014674:	9801      	ldr	r0, [sp, #4]
 8014676:	3048      	adds	r0, #72	; 0x48
 8014678:	f7fa fbc8 	bl	800ee0c <tSlide_initToPool>
    if (x->wound)
 801467c:	9801      	ldr	r0, [sp, #4]
 801467e:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
 8014682:	2b00      	cmp	r3, #0
 8014684:	f000 80ee 	beq.w	8014864 <tTString_initToPool+0x5b0>
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
 8014688:	4621      	mov	r1, r4
 801468a:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80146fc <tTString_initToPool+0x448>
 801468e:	eeb0 0a48 	vmov.f32	s0, s16
 8014692:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8014696:	f7fa fb3f 	bl	800ed18 <tExpSmooth_initToPool>
    	    tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 801469a:	eeb0 0a48 	vmov.f32	s0, s16
 801469e:	9801      	ldr	r0, [sp, #4]
 80146a0:	e040      	b.n	8014724 <tTString_initToPool+0x470>
 80146a2:	bf00      	nop
 80146a4:	40c90fdb 	.word	0x40c90fdb
 80146a8:	00000000 	.word	0x00000000
 80146ac:	41200000 	.word	0x41200000
 80146b0:	42c80000 	.word	0x42c80000
 80146b4:	3ecccccd 	.word	0x3ecccccd
 80146b8:	bab78034 	.word	0xbab78034
 80146bc:	3f7fbe77 	.word	0x3f7fbe77
 80146c0:	43dc0000 	.word	0x43dc0000
 80146c4:	3b83126f 	.word	0x3b83126f
 80146c8:	3db851ec 	.word	0x3db851ec
 80146cc:	38d1b717 	.word	0x38d1b717
 80146d0:	37d1b717 	.word	0x37d1b717
 80146d4:	3f4ccccd 	.word	0x3f4ccccd
 80146d8:	459c4000 	.word	0x459c4000
 80146dc:	45bb8000 	.word	0x45bb8000
 80146e0:	44e10000 	.word	0x44e10000
 80146e4:	45354000 	.word	0x45354000
 80146e8:	4573c000 	.word	0x4573c000
 80146ec:	3f8ccccd 	.word	0x3f8ccccd
 80146f0:	456d8000 	.word	0x456d8000
 80146f4:	45802000 	.word	0x45802000
 80146f8:	453b8000 	.word	0x453b8000
 80146fc:	3a03126f 	.word	0x3a03126f
 8014700:	3a51b717 	.word	0x3a51b717
 8014704:	447a0000 	.word	0x447a0000
 8014708:	00000000 	.word	0x00000000
 801470c:	3d4ccccd 	.word	0x3d4ccccd
 8014710:	3f666666 	.word	0x3f666666
 8014714:	45dac000 	.word	0x45dac000
 8014718:	3dcccccd 	.word	0x3dcccccd
 801471c:	3d23d70a 	.word	0x3d23d70a
 8014720:	3e7ae148 	.word	0x3e7ae148
 8014724:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8014728:	f7fa fb50 	bl	800edcc <tExpSmooth_setDest>
    	    tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.0008f, mp); //was 0.008
 801472c:	4621      	mov	r1, r4
 801472e:	ed5f 0a0c 	vldr	s1, [pc, #-48]	; 8014700 <tTString_initToPool+0x44c>
 8014732:	eeb0 0a48 	vmov.f32	s0, s16
 8014736:	9801      	ldr	r0, [sp, #4]
 8014738:	f500 708e 	add.w	r0, r0, #284	; 0x11c
 801473c:	f7fa faec 	bl	800ed18 <tExpSmooth_initToPool>
    	    tExpSmooth_setDest(&x->barSmoothVol, 0.0f);
 8014740:	eeb0 0a48 	vmov.f32	s0, s16
 8014744:	9801      	ldr	r0, [sp, #4]
 8014746:	f500 708e 	add.w	r0, r0, #284	; 0x11c
 801474a:	f7fa fb3f 	bl	800edcc <tExpSmooth_setDest>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 801474e:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 8014704 <tTString_initToPool+0x450>
 8014752:	4621      	mov	r1, r4
 8014754:	eef0 0a40 	vmov.f32	s1, s0
 8014758:	9801      	ldr	r0, [sp, #4]
 801475a:	f500 7084 	add.w	r0, r0, #264	; 0x108
 801475e:	f7fa fb55 	bl	800ee0c <tSlide_initToPool>
    tSlide_initToPool(&x->barPulseSlide, 2, 30, mp);//100 1400 // 10 3000
 8014762:	4621      	mov	r1, r4
 8014764:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8014768:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801476c:	9801      	ldr	r0, [sp, #4]
 801476e:	f500 708a 	add.w	r0, r0, #276	; 0x114
 8014772:	f7fa fb4b 	bl	800ee0c <tSlide_initToPool>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
 8014776:	ed1f 8a1c 	vldr	s16, [pc, #-112]	; 8014708 <tTString_initToPool+0x454>
 801477a:	4621      	mov	r1, r4
 801477c:	ed5f 0a1d 	vldr	s1, [pc, #-116]	; 801470c <tTString_initToPool+0x458>
 8014780:	eeb0 0a48 	vmov.f32	s0, s16
 8014784:	9801      	ldr	r0, [sp, #4]
 8014786:	30dc      	adds	r0, #220	; 0xdc
 8014788:	f7fa fac6 	bl	800ed18 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->barPulse, 0.0f);
 801478c:	eeb0 0a48 	vmov.f32	s0, s16
 8014790:	9801      	ldr	r0, [sp, #4]
 8014792:	30dc      	adds	r0, #220	; 0xdc
 8014794:	f7fa fb1a 	bl	800edcc <tExpSmooth_setDest>
    tSVF_initToPool(&x->barResonator, SVFTypeBandpass, 5.0f, 15.0f, mp);
 8014798:	4622      	mov	r2, r4
 801479a:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 801479e:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80147a2:	2102      	movs	r1, #2
 80147a4:	9801      	ldr	r0, [sp, #4]
 80147a6:	30e8      	adds	r0, #232	; 0xe8
 80147a8:	f7fa fe3e 	bl	800f428 <tSVF_initToPool>
    x->timeSinceLastBump = 1;
 80147ac:	9801      	ldr	r0, [sp, #4]
 80147ae:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
 80147b2:	f8c0 6100 	str.w	r6, [r0, #256]	; 0x100
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
 80147b6:	4621      	mov	r1, r4
 80147b8:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80147bc:	f500 7086 	add.w	r0, r0, #268	; 0x10c
 80147c0:	f7fa ffb0 	bl	800f724 <tHighpass_initToPool>
    tSVF_initToPool(&x->barLP, SVFTypeLowpass, 7000.0f, 0.9f, mp);
 80147c4:	4622      	mov	r2, r4
 80147c6:	ed5f 0a2e 	vldr	s1, [pc, #-184]	; 8014710 <tTString_initToPool+0x45c>
 80147ca:	ed1f 0a2e 	vldr	s0, [pc, #-184]	; 8014714 <tTString_initToPool+0x460>
 80147ce:	2101      	movs	r1, #1
 80147d0:	9801      	ldr	r0, [sp, #4]
 80147d2:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80147d6:	f7fa fe27 	bl	800f428 <tSVF_initToPool>
    x->inharmonic = 1;
 80147da:	9801      	ldr	r0, [sp, #4]
 80147dc:	2501      	movs	r5, #1
 80147de:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
    x->inharmonicMult = 1.0f;
 80147e2:	f8c0 614c 	str.w	r6, [r0, #332]	; 0x14c
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 80147e6:	edd0 0a02 	vldr	s1, [r0, #8]
 80147ea:	ed1f 9a35 	vldr	s18, [pc, #-212]	; 8014718 <tTString_initToPool+0x464>
 80147ee:	ed5f 8a35 	vldr	s17, [pc, #-212]	; 801471c <tTString_initToPool+0x468>
 80147f2:	4622      	mov	r2, r4
 80147f4:	4629      	mov	r1, r5
 80147f6:	eeb0 1a49 	vmov.f32	s2, s18
 80147fa:	ee60 0aa8 	vmul.f32	s1, s1, s17
 80147fe:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8014802:	f500 70ac 	add.w	r0, r0, #344	; 0x158
 8014806:	f7f9 feea 	bl	800e5de <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&x->feedbackP, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 801480a:	9801      	ldr	r0, [sp, #4]
 801480c:	edd0 0a02 	vldr	s1, [r0, #8]
 8014810:	4622      	mov	r2, r4
 8014812:	4629      	mov	r1, r5
 8014814:	eeb0 1a49 	vmov.f32	s2, s18
 8014818:	ee60 0aa8 	vmul.f32	s1, s1, s17
 801481c:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8014820:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
 8014824:	f7f9 fedb 	bl	800e5de <tFeedbackLeveler_initToPool>
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 8014828:	9801      	ldr	r0, [sp, #4]
 801482a:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 801482e:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8014720 <tTString_initToPool+0x46c>
 8014832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014836:	edc0 7a5a 	vstr	s15, [r0, #360]	; 0x168
    x->windingsPerInch = 70.0f;
 801483a:	4b1c      	ldr	r3, [pc, #112]	; (80148ac <tTString_initToPool+0x5f8>)
 801483c:	f8c0 316c 	str.w	r3, [r0, #364]	; 0x16c
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 8014840:	4622      	mov	r2, r4
 8014842:	4629      	mov	r1, r5
 8014844:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8014848:	f7fe fa40 	bl	8012ccc <tNoise_initToPool>
    x->pickupAmount = 0.0f;
 801484c:	9801      	ldr	r0, [sp, #4]
 801484e:	ed80 8a63 	vstr	s16, [r0, #396]	; 0x18c
    tPickupNonLinearity_initToPool(&x->p, mp);
 8014852:	4621      	mov	r1, r4
 8014854:	f500 70c8 	add.w	r0, r0, #400	; 0x190
 8014858:	f7fe fcdc 	bl	8013214 <tPickupNonLinearity_initToPool>
}
 801485c:	b003      	add	sp, #12
 801485e:	ecbd 8b06 	vpop	{d8-d10}
 8014862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.005f, mp); //was 0.0005
 8014864:	ed9f 8a12 	vldr	s16, [pc, #72]	; 80148b0 <tTString_initToPool+0x5fc>
 8014868:	4621      	mov	r1, r4
 801486a:	eddf 0a12 	vldr	s1, [pc, #72]	; 80148b4 <tTString_initToPool+0x600>
 801486e:	eeb0 0a48 	vmov.f32	s0, s16
 8014872:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8014876:	f7fa fa4f 	bl	800ed18 <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 801487a:	eeb0 0a48 	vmov.f32	s0, s16
 801487e:	9801      	ldr	r0, [sp, #4]
 8014880:	f500 708c 	add.w	r0, r0, #280	; 0x118
 8014884:	f7fa faa2 	bl	800edcc <tExpSmooth_setDest>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
 8014888:	4621      	mov	r1, r4
 801488a:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80148b8 <tTString_initToPool+0x604>
 801488e:	eeb0 0a48 	vmov.f32	s0, s16
 8014892:	9801      	ldr	r0, [sp, #4]
 8014894:	f500 708e 	add.w	r0, r0, #284	; 0x11c
 8014898:	f7fa fa3e 	bl	800ed18 <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmoothVol, 0.0f);
 801489c:	eeb0 0a48 	vmov.f32	s0, s16
 80148a0:	9801      	ldr	r0, [sp, #4]
 80148a2:	f500 708e 	add.w	r0, r0, #284	; 0x11c
 80148a6:	f7fa fa91 	bl	800edcc <tExpSmooth_setDest>
 80148aa:	e750      	b.n	801474e <tTString_initToPool+0x49a>
 80148ac:	428c0000 	.word	0x428c0000
 80148b0:	00000000 	.word	0x00000000
 80148b4:	3ba3d70a 	.word	0x3ba3d70a
 80148b8:	3b83126f 	.word	0x3b83126f

080148bc <tTString_setDecayInSeconds>:
		 x->decayCoeff = decay;
	 }
}

void    tTString_setDecayInSeconds               (tTString* const bw, Lfloat decay)
{
 80148bc:	b510      	push	{r4, lr}
	 _tTString* x = *bw;
 80148be:	6804      	ldr	r4, [r0, #0]
	 x->decayInSeconds = decay;
 80148c0:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
	 if (x->decayInSeconds > 20.0f)
 80148c4:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80148c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80148cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d0:	dd03      	ble.n	80148da <tTString_setDecayInSeconds+0x1e>
	 {
		 x->decayCoeff = 1.0f;
 80148d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80148d6:	6763      	str	r3, [r4, #116]	; 0x74
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
		 //decay = LEAF_map(decay, 0.0f, 1.0f, 0.99f, 1.01f);
		 decay = LEAF_clip(0.1f, decay, 1.0f);
		 x->decayCoeff = decay;
	 }
}
 80148d8:	bd10      	pop	{r4, pc}
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
 80148da:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 80148de:	ee67 7a80 	vmul.f32	s15, s15, s0
 80148e2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80148e6:	ee80 0a27 	vdiv.f32	s0, s0, s15
 80148ea:	f7fd f84b 	bl	8011984 <fastExp3>
 80148ee:	eef0 0a40 	vmov.f32	s1, s0
		 decay = LEAF_clip(0.1f, decay, 1.0f);
 80148f2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80148f6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014904 <tTString_setDecayInSeconds+0x48>
 80148fa:	f7fd f979 	bl	8011bf0 <LEAF_clip>
		 x->decayCoeff = decay;
 80148fe:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
}
 8014902:	e7e9      	b.n	80148d8 <tTString_setDecayInSeconds+0x1c>
 8014904:	3dcccccd 	.word	0x3dcccccd

08014908 <tTString_setPickupPos>:

void    tTString_setPickupPos               (tTString* const bw, Lfloat pos)
{
	_tTString* x = *bw;
 8014908:	6803      	ldr	r3, [r0, #0]
	x->pickupPos = pos;
 801490a:	ed83 0a27 	vstr	s0, [r3, #156]	; 0x9c
}
 801490e:	4770      	bx	lr

08014910 <tTString_setPickupAmount>:

void    tTString_setPickupAmount               (tTString* const bw, Lfloat amount)
{
	_tTString* x = *bw;
 8014910:	6803      	ldr	r3, [r0, #0]
	x->pickupAmount = amount;
 8014912:	ed83 0a63 	vstr	s0, [r3, #396]	; 0x18c
}
 8014916:	4770      	bx	lr

08014918 <tTString_setPickupModAmp>:

void    tTString_setPickupModAmp               (tTString* const bw, Lfloat amp)
{
	_tTString* x = *bw;
 8014918:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscAmp = amp;
 801491a:	ed83 0a2d 	vstr	s0, [r3, #180]	; 0xb4
}
 801491e:	4770      	bx	lr

08014920 <tTString_setPickupModFreq>:


void    tTString_setPickupModFreq               (tTString* const bw, Lfloat freq)
{
 8014920:	b508      	push	{r3, lr}
	_tTString* x = *bw;
 8014922:	6800      	ldr	r0, [r0, #0]
	x->pickupModOscFreq = freq;
 8014924:	ed80 0a2c 	vstr	s0, [r0, #176]	; 0xb0
	tCycle_setFreq(&x->pickupModOsc, freq);
 8014928:	30ac      	adds	r0, #172	; 0xac
 801492a:	f7fd fe7d 	bl	8012628 <tCycle_setFreq>
}
 801492e:	bd08      	pop	{r3, pc}

08014930 <tTString_mute>:



void    tTString_mute              (tTString* const bw)
{
 8014930:	b510      	push	{r4, lr}
	 _tTString* x = *bw;
 8014932:	6804      	ldr	r4, [r0, #0]
	 x->muteCoeff = fastExp3(-1.0f / (x->freq * 0.007f));;
 8014934:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8014938:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801496c <tTString_mute+0x3c>
 801493c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014940:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014944:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8014948:	f7fd f81c 	bl	8011984 <fastExp3>
 801494c:	ed84 0a1e 	vstr	s0, [r4, #120]	; 0x78
	 if (x->muteCoeff < 0.5f)
 8014950:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014954:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8014958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801495c:	d501      	bpl.n	8014962 <tTString_mute+0x32>
	 {
		 x->muteCoeff = 0.5f;
 801495e:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
	 }
	 x->muted = 0.0f;
 8014962:	2300      	movs	r3, #0
 8014964:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
}
 8014968:	bd10      	pop	{r4, pc}
 801496a:	bf00      	nop
 801496c:	3be56042 	.word	0x3be56042

08014970 <tTString_setFilterFreqDirectly>:
	tCookOnePole_setPole(&x->reflFiltP,filter);
	x->poleCoeff = filter;
}

void    tTString_setFilterFreqDirectly              (tTString* const bw, Lfloat freq)
{
 8014970:	b510      	push	{r4, lr}
 8014972:	ed2d 8b02 	vpush	{d8}
 8014976:	eef0 0a40 	vmov.f32	s1, s0
	 _tTString* x = *bw;
 801497a:	6804      	ldr	r4, [r0, #0]
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
 801497c:	ed94 1a5a 	vldr	s2, [r4, #360]	; 0x168
 8014980:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8014984:	f7fd f934 	bl	8011bf0 <LEAF_clip>
	x->filterFreq = freqToUse;
 8014988:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
#ifdef ARM_MATH_CM7
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 801498c:	edd4 7a04 	vldr	s15, [r4, #16]
 8014990:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014994:	f7eb feee 	bl	8000774 <arm_sin_f32>
 8014998:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801499c:	ee38 8a40 	vsub.f32	s16, s16, s0
	freq = 1.0f - sinf(freqToUse * x->twoPiTimesInvSampleRate);
#endif
	//volatile Lfloat normalizedFreq = (overtone * x->freq) * x->twoPiTimesInvSampleRate;
	//filter = 1.0f - normalizedFreq;

	tCookOnePole_setPole(&x->reflFilt,freq);
 80149a0:	eeb0 0a48 	vmov.f32	s0, s16
 80149a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80149a8:	f7fa fd04 	bl	800f3b4 <tCookOnePole_setPole>
	tCookOnePole_setPole(&x->reflFiltP,freq);
 80149ac:	eeb0 0a48 	vmov.f32	s0, s16
 80149b0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80149b4:	f7fa fcfe 	bl	800f3b4 <tCookOnePole_setPole>
	x->poleCoeff = freq;
 80149b8:	ed84 8a50 	vstr	s16, [r4, #320]	; 0x140
}
 80149bc:	ecbd 8b02 	vpop	{d8}
 80149c0:	bd10      	pop	{r4, pc}

080149c2 <tTString_setTensionGain>:

void   tTString_setTensionGain                  (tTString* const bw, Lfloat tensionGain)
{
	_tTString* x = *bw;
 80149c2:	6803      	ldr	r3, [r0, #0]
	x->tensionGain = tensionGain;
 80149c4:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 80149c8:	4770      	bx	lr

080149ca <tTString_setBarPosition>:
	x->barDrive = drive + 1.0f;
}

void   tTString_setBarPosition                  (tTString* const bw, Lfloat barPosition)
{
	_tTString* x = *bw;
 80149ca:	6803      	ldr	r3, [r0, #0]
	x->prevBarPosition = x->barPosition;
 80149cc:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 80149d0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	x->barPosition = barPosition;
 80149d4:	ed83 0a3b 	vstr	s0, [r3, #236]	; 0xec
}
 80149d8:	4770      	bx	lr

080149da <tTString_setOpenStringFrequency>:

void   tTString_setOpenStringFrequency                  (tTString* const bw, Lfloat openStringFrequency)
{
	_tTString* x = *bw;
 80149da:	6803      	ldr	r3, [r0, #0]
	x->openStringLength = ((x->sampleRate / openStringFrequency) - 2.0f);
 80149dc:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80149e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80149e4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80149e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80149ec:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
}
 80149f0:	4770      	bx	lr

080149f2 <tTString_setPhantomHarmonicsGain>:
	x->pickupRatio = ratio;
}

void   tTString_setPhantomHarmonicsGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
 80149f2:	6803      	ldr	r3, [r0, #0]
	x->phantomGain = gain;
 80149f4:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
}
 80149f8:	4770      	bx	lr

080149fa <tTString_setSlideGain>:

void   tTString_setSlideGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
 80149fa:	6803      	ldr	r3, [r0, #0]
	x->slideGain = gain;
 80149fc:	ed83 0a35 	vstr	s0, [r3, #212]	; 0xd4
}
 8014a00:	4770      	bx	lr
	...

08014a04 <tTString_setRippleDepth>:
	tExpSmooth_setFactor(&x->tensionSmoother, 0.00064f * x->invOversampling * (1.0f - tensionSpeed) + 0.00001f); //0.5 is good
}


void   tTString_setRippleDepth                  (tTString* const bw, Lfloat depth)
{
 8014a04:	b510      	push	{r4, lr}
 8014a06:	ed2d 8b02 	vpush	{d8}
 8014a0a:	eeb0 8a40 	vmov.f32	s16, s0
	_tTString* x = *bw;
 8014a0e:	6804      	ldr	r4, [r0, #0]
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 8014a10:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
 8014a14:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
 8014a18:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8014a84 <tTString_setRippleDepth+0x80>
 8014a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014a20:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8014a88 <tTString_setRippleDepth+0x84>
 8014a24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a28:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014a2c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014a30:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8014a34:	f7fc ffa6 	bl	8011984 <fastExp3>
 8014a38:	ee60 7a08 	vmul.f32	s15, s0, s16
 8014a3c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014a40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014a44:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 8014a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014a4c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014a50:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014a54:	edc4 6a23 	vstr	s13, [r4, #140]	; 0x8c
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 8014a58:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8014a5c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014a60:	ee38 8a07 	vadd.f32	s16, s16, s14
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 8014a64:	eeb0 0a48 	vmov.f32	s0, s16
 8014a68:	f104 001c 	add.w	r0, r4, #28
 8014a6c:	f7fa fe87 	bl	800f77e <tHighpass_setFreq>
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
 8014a70:	eeb0 0a48 	vmov.f32	s0, s16
 8014a74:	f104 0020 	add.w	r0, r4, #32
 8014a78:	f7fa fe81 	bl	800f77e <tHighpass_setFreq>
}
 8014a7c:	ecbd 8b02 	vpop	{d8}
 8014a80:	bd10      	pop	{r4, pc}
 8014a82:	bf00      	nop
 8014a84:	3ba3d70a 	.word	0x3ba3d70a
 8014a88:	38d1b717 	.word	0x38d1b717

08014a8c <tTString_setHarmonic>:

void   tTString_setHarmonic                  (tTString* const bw, Lfloat harmonic)
{
	_tTString* x = *bw;
 8014a8c:	6803      	ldr	r3, [r0, #0]
	x->harmonic = harmonic;
 8014a8e:	ed83 0a21 	vstr	s0, [r3, #132]	; 0x84
	x->rippleRate = 1.0f / harmonic;
 8014a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014a96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014a9a:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
 8014a9e:	4770      	bx	lr

08014aa0 <tTString_setFeedbackStrength>:
void   tTString_setFeedbackStrength                  (tTString* const bw, Lfloat strength)
{
 8014aa0:	b510      	push	{r4, lr}
 8014aa2:	ed2d 8b02 	vpush	{d8}
 8014aa6:	eeb0 8a40 	vmov.f32	s16, s0
	_tTString* x = *bw;
 8014aaa:	6804      	ldr	r4, [r0, #0]
	Lfloat strengthVal = 0.5f * strength;
 8014aac:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8014ab0:	ee60 8a28 	vmul.f32	s17, s0, s17
	tFeedbackLeveler_setStrength(&x->feedback, strengthVal);
 8014ab4:	eeb0 0a68 	vmov.f32	s0, s17
 8014ab8:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8014abc:	f7f9 fdc7 	bl	800e64e <tFeedbackLeveler_setStrength>
	tFeedbackLeveler_setStrength(&x->feedbackP, strengthVal);
 8014ac0:	eeb0 0a68 	vmov.f32	s0, s17
 8014ac4:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 8014ac8:	f7f9 fdc1 	bl	800e64e <tFeedbackLeveler_setStrength>
	x->feedbackNoiseLevel = strength * 0.005f;
 8014acc:	eddf 7a04 	vldr	s15, [pc, #16]	; 8014ae0 <tTString_setFeedbackStrength+0x40>
 8014ad0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014ad4:	ed84 8a59 	vstr	s16, [r4, #356]	; 0x164

}
 8014ad8:	ecbd 8b02 	vpop	{d8}
 8014adc:	bd10      	pop	{r4, pc}
 8014ade:	bf00      	nop
 8014ae0:	3ba3d70a 	.word	0x3ba3d70a

08014ae4 <tTString_setFeedbackReactionSpeed>:
void   tTString_setFeedbackReactionSpeed                  (tTString* const bw, Lfloat speed)
{
 8014ae4:	b510      	push	{r4, lr}
 8014ae6:	ed2d 8b02 	vpush	{d8}
	_tTString* x = *bw;
 8014aea:	6804      	ldr	r4, [r0, #0]
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 8014aec:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8014b1c <tTString_setFeedbackReactionSpeed+0x38>
 8014af0:	ee20 8a27 	vmul.f32	s16, s0, s15
 8014af4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8014b20 <tTString_setFeedbackReactionSpeed+0x3c>
 8014af8:	ee38 8a27 	vadd.f32	s16, s16, s15
	tFeedbackLeveler_setFactor(&x->feedback, speedVal);
 8014afc:	eeb0 0a48 	vmov.f32	s0, s16
 8014b00:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8014b04:	f7f9 fda7 	bl	800e656 <tFeedbackLeveler_setFactor>
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
 8014b08:	eeb0 0a48 	vmov.f32	s0, s16
 8014b0c:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 8014b10:	f7f9 fda1 	bl	800e656 <tFeedbackLeveler_setFactor>
}
 8014b14:	ecbd 8b02 	vpop	{d8}
 8014b18:	bd10      	pop	{r4, pc}
 8014b1a:	bf00      	nop
 8014b1c:	3dcccccd 	.word	0x3dcccccd
 8014b20:	3727c5ac 	.word	0x3727c5ac

08014b24 <tTString_pluck>:

void    tTString_pluck               (tTString* const bw, Lfloat position, Lfloat amplitude)
{
 8014b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b28:	ed2d 8b06 	vpush	{d8-d10}
 8014b2c:	b083      	sub	sp, #12
 8014b2e:	eef0 9a40 	vmov.f32	s19, s0
 8014b32:	eeb0 9a60 	vmov.f32	s18, s1
    _tTString* x = *bw;
 8014b36:	6807      	ldr	r7, [r0, #0]

    x->muted = 1.0f;
 8014b38:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014b3c:	edc7 8a51 	vstr	s17, [r7, #324]	; 0x144
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
 8014b40:	eeb0 0a60 	vmov.f32	s0, s1
 8014b44:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8014b48:	f7fa f944 	bl	800edd4 <tExpSmooth_setVal>
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
 8014b4c:	eeb5 8a00 	vmov.f32	s16, #80	; 0x3e800000  0.250
 8014b50:	ee29 8a08 	vmul.f32	s16, s18, s16
 8014b54:	eeb0 0a48 	vmov.f32	s0, s16
 8014b58:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8014b5c:	f7f9 fdae 	bl	800e6bc <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&x->feedbackP, amplitude * 0.25f);
 8014b60:	eeb0 0a48 	vmov.f32	s0, s16
 8014b64:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
 8014b68:	f7f9 fda8 	bl	800e6bc <tFeedbackLeveler_setTargetLevel>
    tExpSmooth_setValAndDest(&x->pitchSmoother, x->pitchSmoother->dest);
 8014b6c:	4638      	mov	r0, r7
 8014b6e:	f850 3f50 	ldr.w	r3, [r0, #80]!
 8014b72:	ed93 0a04 	vldr	s0, [r3, #16]
 8014b76:	f7fa f931 	bl	800eddc <tExpSmooth_setValAndDest>
    x->baseDelay = x->pitchSmoother->dest;
 8014b7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8014b80:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    Lfloat currentDelay = x->baseDelay;// - x->allpassDelay;
    x->muteCoeff = 1.0f;
 8014b84:	edc7 8a1e 	vstr	s17, [r7, #120]	; 0x78
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 8014b88:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014b94:	ee17 aa90 	vmov	sl, s15
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
 8014b98:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8014b9c:	ee78 7a08 	vadd.f32	s15, s16, s16
 8014ba0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014ba4:	ee17 ba90 	vmov	fp, s15
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
 8014ba8:	edd7 7a3d 	vldr	s15, [r7, #244]	; 0xf4
    Lfloat positionMax = (x->openStringLength * 0.001f);
 8014bac:	eddf aa4a 	vldr	s21, [pc, #296]	; 8014cd8 <tTString_pluck+0x1b4>

    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 8014bb0:	ee27 1aaa 	vmul.f32	s2, s15, s21
 8014bb4:	eddf 0a49 	vldr	s1, [pc, #292]	; 8014cdc <tTString_pluck+0x1b8>
 8014bb8:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8014bbc:	eeb0 0a69 	vmov.f32	s0, s19
 8014bc0:	f7fc fe31 	bl	8011826 <LEAF_mapFromZeroToOneInput>
 8014bc4:	ed8d 0a01 	vstr	s0, [sp, #4]
    //0.083335f; * position;//position * halfCurrentDelay;
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
 8014bc8:	eddd 0a01 	vldr	s1, [sp, #4]
 8014bcc:	eeb0 1a48 	vmov.f32	s2, s16
 8014bd0:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8014ce0 <tTString_pluck+0x1bc>
 8014bd4:	f7fd f80c 	bl	8011bf0 <LEAF_clip>
 8014bd8:	ed8d 0a01 	vstr	s0, [sp, #4]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8014bdc:	eddd 7a01 	vldr	s15, [sp, #4]
 8014be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8014be4:	ee17 8a90 	vmov	r8, s15
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
 8014be8:	eef8 9a67 	vcvt.f32.u32	s19, s15
 8014bec:	ee79 7aaa 	vadd.f32	s15, s19, s21
 8014bf0:	ee88 aaa7 	vdiv.f32	s20, s17, s15
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8014bf4:	eddd 7a01 	vldr	s15, [sp, #4]
 8014bf8:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014bfc:	ee77 7aaa 	vadd.f32	s15, s15, s21
 8014c00:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 8014c04:	ed8d 7a00 	vstr	s14, [sp]
    tLagrangeDelay_clear(&x->delay);
 8014c08:	f107 0914 	add.w	r9, r7, #20
 8014c0c:	4648      	mov	r0, r9
 8014c0e:	f7f9 f8c1 	bl	800dd94 <tLagrangeDelay_clear>
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 8014c12:	ed9d 7a01 	vldr	s14, [sp, #4]
 8014c16:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8014c1a:	edc7 7a5d 	vstr	s15, [r7, #372]	; 0x174
    x->pluckPoint_forInput = pluckPoint;
 8014c1e:	9b01      	ldr	r3, [sp, #4]
 8014c20:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8014c24:	2400      	movs	r4, #0
 8014c26:	e034      	b.n	8014c92 <tTString_pluck+0x16e>
        {
            val = ((Lfloat)i * invPluckPointInt);
        }
        else
        {
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 8014c28:	ee07 4a90 	vmov	s15, r4
 8014c2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014c30:	ee37 7a69 	vsub.f32	s14, s14, s19
 8014c34:	eddd 7a00 	vldr	s15, [sp]
 8014c38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014c3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014c40:	ee77 7ac7 	vsub.f32	s15, s15, s14
        }
        val = LEAF_tanh(val* 1.2f) * amplitude;
 8014c44:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8014ce4 <tTString_pluck+0x1c0>
 8014c48:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014c4c:	f7fc ffe0 	bl	8011c10 <LEAF_tanh>
 8014c50:	ee20 8a09 	vmul.f32	s16, s0, s18
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8014c54:	4621      	mov	r1, r4
 8014c56:	eeb0 0a48 	vmov.f32	s0, s16
 8014c5a:	4648      	mov	r0, r9
 8014c5c:	f7f9 fa04 	bl	800e068 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8014c60:	eef1 8a48 	vneg.f32	s17, s16
 8014c64:	ebab 0604 	sub.w	r6, fp, r4
 8014c68:	4631      	mov	r1, r6
 8014c6a:	eeb0 0a68 	vmov.f32	s0, s17
 8014c6e:	4648      	mov	r0, r9
 8014c70:	f7f9 f9fa 	bl	800e068 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8014c74:	f107 0518 	add.w	r5, r7, #24
 8014c78:	4621      	mov	r1, r4
 8014c7a:	eeb0 0a48 	vmov.f32	s0, s16
 8014c7e:	4628      	mov	r0, r5
 8014c80:	f7f9 f9f2 	bl	800e068 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 8014c84:	4631      	mov	r1, r6
 8014c86:	eeb0 0a68 	vmov.f32	s0, s17
 8014c8a:	4628      	mov	r0, r5
 8014c8c:	f7f9 f9ec 	bl	800e068 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8014c90:	3401      	adds	r4, #1
 8014c92:	4554      	cmp	r4, sl
 8014c94:	d20c      	bcs.n	8014cb0 <tTString_pluck+0x18c>
        if (i == pluckPointInt)
 8014c96:	4544      	cmp	r4, r8
 8014c98:	d007      	beq.n	8014caa <tTString_pluck+0x186>
        else if (i < pluckPointInt)
 8014c9a:	d2c5      	bcs.n	8014c28 <tTString_pluck+0x104>
            val = ((Lfloat)i * invPluckPointInt);
 8014c9c:	ee07 4a90 	vmov	s15, r4
 8014ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014ca4:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8014ca8:	e7cc      	b.n	8014c44 <tTString_pluck+0x120>
            val = 1.0f;
 8014caa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014cae:	e7c9      	b.n	8014c44 <tTString_pluck+0x120>

    }
    tThiranAllpassSOCascade_clear(&x->allpass);
 8014cb0:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8014cb4:	f7fa face 	bl	800f254 <tThiranAllpassSOCascade_clear>
    tThiranAllpassSOCascade_clear(&x->allpassP);
 8014cb8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8014cbc:	f7fa faca 	bl	800f254 <tThiranAllpassSOCascade_clear>

    tExpSmooth_setVal(&x->pickNoise, amplitude);
 8014cc0:	eeb0 0a49 	vmov.f32	s0, s18
 8014cc4:	f507 70be 	add.w	r0, r7, #380	; 0x17c
 8014cc8:	f7fa f884 	bl	800edd4 <tExpSmooth_setVal>
}
 8014ccc:	b003      	add	sp, #12
 8014cce:	ecbd 8b06 	vpop	{d8-d10}
 8014cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cd6:	bf00      	nop
 8014cd8:	3a83126f 	.word	0x3a83126f
 8014cdc:	3e511111 	.word	0x3e511111
 8014ce0:	00000000 	.word	0x00000000
 8014ce4:	3f99999a 	.word	0x3f99999a

08014ce8 <tTString_setHarmonicity>:
	x->wavelength = waveLength;
}
void    tTString_setSampleRate         (tTString* const, Lfloat sr);

void    tTString_setHarmonicity         (tTString* const bw, Lfloat B, Lfloat freq)
{
 8014ce8:	b510      	push	{r4, lr}
 8014cea:	ed2d 8b02 	vpush	{d8}
 8014cee:	eef0 8a40 	vmov.f32	s17, s0
 8014cf2:	eeb0 8a60 	vmov.f32	s16, s1
    _tTString* x = *bw;
 8014cf6:	6804      	ldr	r4, [r0, #0]
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
 8014cf8:	edd4 0a02 	vldr	s1, [r4, #8]
 8014cfc:	edd4 7a01 	vldr	s15, [r4, #4]
 8014d00:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 8014d04:	ee60 0a88 	vmul.f32	s1, s1, s16
 8014d08:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8014d0c:	f7fa f9ae 	bl	800f06c <tThiranAllpassSOCascade_setCoeff>
 8014d10:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
 8014d14:	edd4 0a02 	vldr	s1, [r4, #8]
 8014d18:	edd4 7a01 	vldr	s15, [r4, #4]
 8014d1c:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 8014d20:	ee60 0a88 	vmul.f32	s1, s1, s16
 8014d24:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8014d28:	ee28 0a80 	vmul.f32	s0, s17, s0
 8014d2c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014d30:	f7fa f99c 	bl	800f06c <tThiranAllpassSOCascade_setCoeff>
 8014d34:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 8014d38:	ecbd 8b02 	vpop	{d8}
 8014d3c:	bd10      	pop	{r4, pc}

08014d3e <tTString_setInharmonic>:

void    tTString_setInharmonic         (tTString* const bw, uint32_t onOrOff)
{
    _tTString* x = *bw;
 8014d3e:	6803      	ldr	r3, [r0, #0]
    x->inharmonic = onOrOff;
 8014d40:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
    x->inharmonicMult = (Lfloat)onOrOff;
 8014d44:	ee07 1a90 	vmov	s15, r1
 8014d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014d4c:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
}
 8014d50:	4770      	bx	lr
	...

08014d54 <tTString_setWoundOrUnwound>:
void    tTString_setWoundOrUnwound         (tTString* const bw, uint32_t wound)
{
 8014d54:	b510      	push	{r4, lr}
    _tTString* x = *bw;
 8014d56:	6804      	ldr	r4, [r0, #0]
    x->wound = wound;
 8014d58:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
    if (x->wound)
 8014d5c:	b161      	cbz	r1, 8014d78 <tTString_setWoundOrUnwound+0x24>
	{

    	tExpSmooth_setFactor(&x->barSmooth2, 0.0005f);
 8014d5e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8014d94 <tTString_setWoundOrUnwound+0x40>
 8014d62:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8014d66:	f7fa f813 	bl	800ed90 <tExpSmooth_setFactor>
    	tExpSmooth_setFactor(&x->barSmoothVol, 0.0008f);
 8014d6a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8014d98 <tTString_setWoundOrUnwound+0x44>
 8014d6e:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8014d72:	f7fa f80d 	bl	800ed90 <tExpSmooth_setFactor>

		tExpSmooth_setFactor(&x->barSmooth2, 0.005f);
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);

	}
}
 8014d76:	bd10      	pop	{r4, pc}
		tExpSmooth_setFactor(&x->barSmooth2, 0.005f);
 8014d78:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8014d9c <tTString_setWoundOrUnwound+0x48>
 8014d7c:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8014d80:	f7fa f806 	bl	800ed90 <tExpSmooth_setFactor>
		tExpSmooth_setFactor(&x->barSmoothVol, 0.004f);
 8014d84:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8014da0 <tTString_setWoundOrUnwound+0x4c>
 8014d88:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 8014d8c:	f7fa f800 	bl	800ed90 <tExpSmooth_setFactor>
}
 8014d90:	e7f1      	b.n	8014d76 <tTString_setWoundOrUnwound+0x22>
 8014d92:	bf00      	nop
 8014d94:	3a03126f 	.word	0x3a03126f
 8014d98:	3a51b717 	.word	0x3a51b717
 8014d9c:	3ba3d70a 	.word	0x3ba3d70a
 8014da0:	3b83126f 	.word	0x3b83126f

08014da4 <tTString_setWindingsPerInch>:
void    tTString_setWindingsPerInch         (tTString* const bw, uint32_t windings)
{
 8014da4:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
 8014da8:	6803      	ldr	r3, [r0, #0]
    x->windingsPerInch = windings;
 8014daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014dae:	edc3 7a5b 	vstr	s15, [r3, #364]	; 0x16c
}
 8014db2:	4770      	bx	lr

08014db4 <tTString_setPickupFilterFreq>:

void    tTString_setPickupFilterFreq         (tTString* const bw, Lfloat cutoff)
{
 8014db4:	b508      	push	{r3, lr}
    _tTString* x = *bw;
 8014db6:	6800      	ldr	r0, [r0, #0]
    tSVF_setFreq(&x->pickupFilter,cutoff);
 8014db8:	30b8      	adds	r0, #184	; 0xb8
 8014dba:	f7fa fc0b 	bl	800f5d4 <tSVF_setFreq>

}
 8014dbe:	bd08      	pop	{r3, pc}

08014dc0 <tTString_setPickupFilterQ>:
void    tTString_setPickupFilterQ        (tTString* const bw, Lfloat Q)
{
 8014dc0:	b508      	push	{r3, lr}
    _tTString* x = *bw;
 8014dc2:	6800      	ldr	r0, [r0, #0]
    tSVF_setQ(&x->pickupFilter,Q+0.5f);
 8014dc4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014dc8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014dcc:	30b8      	adds	r0, #184	; 0xb8
 8014dce:	f7fa fc81 	bl	800f6d4 <tSVF_setQ>

}
 8014dd2:	bd08      	pop	{r3, pc}

08014dd4 <tTString_setPeakFilterFreq>:

void    tTString_setPeakFilterFreq         (tTString* const bw, Lfloat cutoff)
{
 8014dd4:	b508      	push	{r3, lr}
    _tTString* x = *bw;
 8014dd6:	6800      	ldr	r0, [r0, #0]
    tSVF_setFreq(&x->peakFilt,cutoff);
 8014dd8:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8014ddc:	f7fa fbfa 	bl	800f5d4 <tSVF_setFreq>

}
 8014de0:	bd08      	pop	{r3, pc}

08014de2 <tTString_setPeakFilterQ>:
void    tTString_setPeakFilterQ        (tTString* const bw, Lfloat Q)
{
 8014de2:	b508      	push	{r3, lr}
    _tTString* x = *bw;
 8014de4:	6800      	ldr	r0, [r0, #0]
    tSVF_setQ(&x->peakFilt,Q+0.5f);
 8014de6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014dea:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014dee:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8014df2:	f7fa fc6f 	bl	800f6d4 <tSVF_setQ>

}
 8014df6:	bd08      	pop	{r3, pc}

08014df8 <tStiffString_free>:
}



void    tStiffString_free (tStiffString* const pm)
{
 8014df8:	b538      	push	{r3, r4, r5, lr}
    _tStiffString* p = *pm;
 8014dfa:	6805      	ldr	r5, [r0, #0]

    for (int i = 0; i < p->numModes; ++i) {
 8014dfc:	2400      	movs	r4, #0
 8014dfe:	e005      	b.n	8014e0c <tStiffString_free+0x14>
        //tDampedOscillator_free(&p->osc[i]);
    	tCycle_free(&p->osc[i]);
 8014e00:	68a8      	ldr	r0, [r5, #8]
 8014e02:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8014e06:	f7fd fbe0 	bl	80125ca <tCycle_free>
    for (int i = 0; i < p->numModes; ++i) {
 8014e0a:	3401      	adds	r4, #1
 8014e0c:	686b      	ldr	r3, [r5, #4]
 8014e0e:	42a3      	cmp	r3, r4
 8014e10:	dcf6      	bgt.n	8014e00 <tStiffString_free+0x8>
    	//
    }
    mpool_free((char *) p->nyquistCoeff, p->mempool);
 8014e12:	6829      	ldr	r1, [r5, #0]
 8014e14:	6be8      	ldr	r0, [r5, #60]	; 0x3c
 8014e16:	f7fd fb2b 	bl	8012470 <mpool_free>
    mpool_free((char *) p->decayScalar, p->mempool);
 8014e1a:	6829      	ldr	r1, [r5, #0]
 8014e1c:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8014e1e:	f7fd fb27 	bl	8012470 <mpool_free>
    mpool_free((char *) p->decayVal, p->mempool);
 8014e22:	6829      	ldr	r1, [r5, #0]
 8014e24:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8014e26:	f7fd fb23 	bl	8012470 <mpool_free>
    mpool_free((char *) p->amplitudes, p->mempool);
 8014e2a:	6829      	ldr	r1, [r5, #0]
 8014e2c:	68e8      	ldr	r0, [r5, #12]
 8014e2e:	f7fd fb1f 	bl	8012470 <mpool_free>
    mpool_free((char *) p->outputWeights, p->mempool);
 8014e32:	6829      	ldr	r1, [r5, #0]
 8014e34:	6928      	ldr	r0, [r5, #16]
 8014e36:	f7fd fb1b 	bl	8012470 <mpool_free>
    mpool_free((char *) p, p->mempool);
 8014e3a:	6829      	ldr	r1, [r5, #0]
 8014e3c:	4628      	mov	r0, r5
 8014e3e:	f7fd fb17 	bl	8012470 <mpool_free>
}
 8014e42:	bd38      	pop	{r3, r4, r5, pc}

08014e44 <tStiffString_updateOscillators>:

void tStiffString_updateOscillators(tStiffString* const pm)
{
 8014e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e46:	ed2d 8b04 	vpush	{d8-d9}
	_tStiffString *p = *pm;
 8014e4a:	6804      	ldr	r4, [r0, #0]
	Lfloat kappa_sq = p->stiffness * p->stiffness;
 8014e4c:	ed94 9a06 	vldr	s18, [r4, #24]
 8014e50:	ee29 9a09 	vmul.f32	s18, s18, s18
	Lfloat compensation = 0.0f;
    for (int i = 0; i < p->numModes; ++i) {
 8014e54:	2300      	movs	r3, #0
	Lfloat compensation = 0.0f;
 8014e56:	eddf 8a34 	vldr	s17, [pc, #208]	; 8014f28 <tStiffString_updateOscillators+0xe4>
    for (int i = 0; i < p->numModes; ++i) {
 8014e5a:	e02e      	b.n	8014eba <tStiffString_updateOscillators+0x76>
      else
      {
    	  tDampedOscillator_setDecay(&p->osc[i],0.5f);
      }
      */
      Lfloat	testFreq = (p->freqHz * w);
 8014e5c:	edd4 9a05 	vldr	s19, [r4, #20]
 8014e60:	ee69 9a87 	vmul.f32	s19, s19, s14
      Lfloat nyquistTest = (testFreq - p->nyquist) * p->nyquistScalingFactor;
 8014e64:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8014e68:	ee79 7ae7 	vsub.f32	s15, s19, s15
 8014e6c:	edd4 0a11 	vldr	s1, [r4, #68]	; 0x44
      p->nyquistCoeff[i] = LEAF_clip(0.0f, nyquistTest, 1.0f);
 8014e70:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8014e72:	009f      	lsls	r7, r3, #2
 8014e74:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8014e78:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8014e7c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8014e80:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8014f28 <tStiffString_updateOscillators+0xe4>
 8014e84:	f7fc feb4 	bl	8011bf0 <LEAF_clip>
 8014e88:	ed86 0a00 	vstr	s0, [r6]
	  tCycle_setFreq(&p->osc[i], testFreq * compensation);
 8014e8c:	68a0      	ldr	r0, [r4, #8]
 8014e8e:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8014e92:	4438      	add	r0, r7
 8014e94:	f7fd fbc8 	bl	8012628 <tCycle_setFreq>
	  //tDampedOscillator_setDecay(&p->osc[i],p->freqHz * sig);
	  Lfloat val = p->freqHz * sig;
 8014e98:	edd4 7a05 	vldr	s15, [r4, #20]
	  Lfloat r = fastExp4(-val * p->twoPiTimesInvSampleRate);
 8014e9c:	ee28 8a67 	vnmul.f32	s16, s16, s15
 8014ea0:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8014ea4:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014ea8:	f7fc fd92 	bl	80119d0 <fastExp4>
	  p->decayScalar[i] = r * r;
 8014eac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014eae:	443b      	add	r3, r7
 8014eb0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014eb4:	ed83 0a00 	vstr	s0, [r3]
    for (int i = 0; i < p->numModes; ++i) {
 8014eb8:	462b      	mov	r3, r5
 8014eba:	6862      	ldr	r2, [r4, #4]
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	dd2f      	ble.n	8014f20 <tStiffString_updateOscillators+0xdc>
      int n = i + 1;
 8014ec0:	1c5d      	adds	r5, r3, #1
      int n_sq = n * n;
 8014ec2:	fb05 f205 	mul.w	r2, r5, r5
 8014ec6:	ee07 2a90 	vmov	s15, r2
      Lfloat sig = p->decay + p->decayHighFreq * n_sq;
 8014eca:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
 8014ece:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8014ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014eda:	ee38 8a07 	vadd.f32	s16, s16, s14
       Lfloat w0 = n * (1.0f + 0.5f * kappa_sq * n_sq);
 8014ede:	ee07 5a10 	vmov	s14, r5
 8014ee2:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8014ee6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014eea:	ee29 7a26 	vmul.f32	s14, s18, s13
 8014eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014ef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014ef6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014efa:	ee66 7a27 	vmul.f32	s15, s12, s15
      Lfloat zeta = sig / w0;
 8014efe:	ee88 6a27 	vdiv.f32	s12, s16, s15
       Lfloat w = w0 * (1.0f - 0.5f * zeta * zeta);
 8014f02:	ee66 6a26 	vmul.f32	s13, s12, s13
 8014f06:	ee66 6a86 	vmul.f32	s13, s13, s12
 8014f0a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014f0e:	ee27 7a27 	vmul.f32	s14, s14, s15
      if (i == 0)
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d1a2      	bne.n	8014e5c <tStiffString_updateOscillators+0x18>
    	  compensation = 1.0f / w;
 8014f16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014f1a:	eec7 8a87 	vdiv.f32	s17, s15, s14
 8014f1e:	e79d      	b.n	8014e5c <tStiffString_updateOscillators+0x18>
    }
}
 8014f20:	ecbd 8b04 	vpop	{d8-d9}
 8014f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f26:	bf00      	nop
 8014f28:	00000000 	.word	0x00000000

08014f2c <tStiffString_updateOutputWeights>:
void tStiffString_updateOutputWeights(tStiffString* const pm)
{
 8014f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f2e:	ed2d 8b02 	vpush	{d8}
	_tStiffString *p = *pm;
 8014f32:	6804      	ldr	r4, [r0, #0]
		Lfloat x0 = p->pickupPos * PI;
 8014f34:	edd4 8a08 	vldr	s17, [r4, #32]
 8014f38:	eddf 7a21 	vldr	s15, [pc, #132]	; 8014fc0 <tStiffString_updateOutputWeights+0x94>
 8014f3c:	ee68 8aa7 	vmul.f32	s17, s17, s15
		Lfloat totalGain = 0.0f;
	  for (int i = 0; i < p->numModes; ++i)
 8014f40:	2300      	movs	r3, #0
		Lfloat totalGain = 0.0f;
 8014f42:	ed9f 8a20 	vldr	s16, [pc, #128]	; 8014fc4 <tStiffString_updateOutputWeights+0x98>
	  for (int i = 0; i < p->numModes; ++i)
 8014f46:	e01d      	b.n	8014f84 <tStiffString_updateOutputWeights+0x58>
	  {
#ifdef ARM_MATH_CM7
		  p->outputWeights[i] = arm_sin_f32((i + 1) * x0);
 8014f48:	1c5e      	adds	r6, r3, #1
 8014f4a:	6925      	ldr	r5, [r4, #16]
 8014f4c:	009f      	lsls	r7, r3, #2
 8014f4e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8014f52:	ee07 6a90 	vmov	s15, r6
 8014f56:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8014f5a:	ee20 0a28 	vmul.f32	s0, s0, s17
 8014f5e:	f7eb fc09 	bl	8000774 <arm_sin_f32>
 8014f62:	ed85 0a00 	vstr	s0, [r5]
		  totalGain += fabsf(p->outputWeights[i]) * p->amplitudes[i];;
 8014f66:	6923      	ldr	r3, [r4, #16]
 8014f68:	443b      	add	r3, r7
 8014f6a:	edd3 7a00 	vldr	s15, [r3]
 8014f6e:	eef0 7ae7 	vabs.f32	s15, s15
 8014f72:	68e3      	ldr	r3, [r4, #12]
 8014f74:	443b      	add	r3, r7
 8014f76:	ed93 7a00 	vldr	s14, [r3]
 8014f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f7e:	ee38 8a27 	vadd.f32	s16, s16, s15
	  for (int i = 0; i < p->numModes; ++i)
 8014f82:	4633      	mov	r3, r6
 8014f84:	6862      	ldr	r2, [r4, #4]
 8014f86:	429a      	cmp	r2, r3
 8014f88:	dcde      	bgt.n	8014f48 <tStiffString_updateOutputWeights+0x1c>
#else
		  p->outputWeights[i] = sinf((i + 1) * x0);
		  totalGain += p->outputWeights[i] * p->amplitudes[i];
#endif
	  }
	  if (totalGain < 0.01f)
 8014f8a:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8014fc8 <tStiffString_updateOutputWeights+0x9c>
 8014f8e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f96:	d501      	bpl.n	8014f9c <tStiffString_updateOutputWeights+0x70>
	  {
		  totalGain = 0.01f;
 8014f98:	eeb0 8a67 	vmov.f32	s16, s15
	  }
	  totalGain = LEAF_clip(0.01f, totalGain, 1.0f);
 8014f9c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8014fa0:	eef0 0a48 	vmov.f32	s1, s16
 8014fa4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8014fc8 <tStiffString_updateOutputWeights+0x9c>
 8014fa8:	f7fc fe22 	bl	8011bf0 <LEAF_clip>
	  p->gainComp = 1.0f / totalGain;
 8014fac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014fb0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014fb4:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
}
 8014fb8:	ecbd 8b02 	vpop	{d8}
 8014fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fbe:	bf00      	nop
 8014fc0:	40490fdb 	.word	0x40490fdb
 8014fc4:	00000000 	.word	0x00000000
 8014fc8:	3c23d70a 	.word	0x3c23d70a

08014fcc <tStiffString_initToPool>:
{
 8014fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fd0:	b082      	sub	sp, #8
 8014fd2:	4680      	mov	r8, r0
 8014fd4:	460e      	mov	r6, r1
    _tMempool* m = *mp;
 8014fd6:	6811      	ldr	r1, [r2, #0]
 8014fd8:	9101      	str	r1, [sp, #4]
    _tStiffString* p = *pm = (_tStiffString*) mpool_alloc(sizeof(_tStiffString), m);
 8014fda:	2054      	movs	r0, #84	; 0x54
 8014fdc:	f7fd f95c 	bl	8012298 <mpool_alloc>
 8014fe0:	4605      	mov	r5, r0
 8014fe2:	f8c8 0000 	str.w	r0, [r8]
    p->mempool = m;
 8014fe6:	9901      	ldr	r1, [sp, #4]
 8014fe8:	6001      	str	r1, [r0, #0]
    p->numModes = numModes;
 8014fea:	6046      	str	r6, [r0, #4]
    p->freqHz = 440.0f;
 8014fec:	4b2c      	ldr	r3, [pc, #176]	; (80150a0 <tStiffString_initToPool+0xd4>)
 8014fee:	6143      	str	r3, [r0, #20]
    p->stiffness = 0.001f;
 8014ff0:	4b2c      	ldr	r3, [pc, #176]	; (80150a4 <tStiffString_initToPool+0xd8>)
 8014ff2:	6183      	str	r3, [r0, #24]
    p->pluckPos = 0.2f;
 8014ff4:	4b2c      	ldr	r3, [pc, #176]	; (80150a8 <tStiffString_initToPool+0xdc>)
 8014ff6:	61c3      	str	r3, [r0, #28]
    p->pickupPos = 0.3f;
 8014ff8:	4b2c      	ldr	r3, [pc, #176]	; (80150ac <tStiffString_initToPool+0xe0>)
 8014ffa:	6203      	str	r3, [r0, #32]
    p->decay = 0.0001f;
 8014ffc:	4b2c      	ldr	r3, [pc, #176]	; (80150b0 <tStiffString_initToPool+0xe4>)
 8014ffe:	6243      	str	r3, [r0, #36]	; 0x24
    p->decayHighFreq = 0.0003f;
 8015000:	4b2c      	ldr	r3, [pc, #176]	; (80150b4 <tStiffString_initToPool+0xe8>)
 8015002:	6283      	str	r3, [r0, #40]	; 0x28
    p->muteDecay = 0.4f;
 8015004:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80150b8 <tStiffString_initToPool+0xec>
 8015008:	edc0 6a12 	vstr	s13, [r0, #72]	; 0x48
    p->sampleRate = m->leaf->sampleRate;
 801500c:	684b      	ldr	r3, [r1, #4]
 801500e:	edd3 7a00 	vldr	s15, [r3]
 8015012:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    p->twoPiTimesInvSampleRate = m->leaf->twoPiTimesInvSampleRate;
 8015016:	684b      	ldr	r3, [r1, #4]
 8015018:	68db      	ldr	r3, [r3, #12]
 801501a:	6303      	str	r3, [r0, #48]	; 0x30
    p->nyquist = p->sampleRate * 0.5f;
 801501c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015020:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015024:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
    Lfloat lessThanNyquist = p->sampleRate * 0.4f;
 8015028:	ee67 7aa6 	vmul.f32	s15, s15, s13
    p->nyquistScalingFactor = 1.0f / (lessThanNyquist - p->nyquist);
 801502c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015030:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015034:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015038:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
    p->amp = 0.0f;
 801503c:	2300      	movs	r3, #0
 801503e:	64c3      	str	r3, [r0, #76]	; 0x4c
    p->gainComp = 0.0f;
 8015040:	6503      	str	r3, [r0, #80]	; 0x50
    p->osc = (tCycle *) mpool_alloc(numModes * sizeof(tCycle), m);
 8015042:	00b7      	lsls	r7, r6, #2
 8015044:	4638      	mov	r0, r7
 8015046:	f7fd f927 	bl	8012298 <mpool_alloc>
 801504a:	60a8      	str	r0, [r5, #8]
    for (int i = 0; i < numModes; ++i) {
 801504c:	2400      	movs	r4, #0
 801504e:	e006      	b.n	801505e <tStiffString_initToPool+0x92>
    	tCycle_initToPool(&p->osc[i], &m);
 8015050:	68a8      	ldr	r0, [r5, #8]
 8015052:	a901      	add	r1, sp, #4
 8015054:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8015058:	f7fd fa96 	bl	8012588 <tCycle_initToPool>
    for (int i = 0; i < numModes; ++i) {
 801505c:	3401      	adds	r4, #1
 801505e:	42b4      	cmp	r4, r6
 8015060:	dbf6      	blt.n	8015050 <tStiffString_initToPool+0x84>
    p->amplitudes = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8015062:	9901      	ldr	r1, [sp, #4]
 8015064:	4638      	mov	r0, r7
 8015066:	f7fd f917 	bl	8012298 <mpool_alloc>
 801506a:	60e8      	str	r0, [r5, #12]
    p->outputWeights = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 801506c:	9901      	ldr	r1, [sp, #4]
 801506e:	4638      	mov	r0, r7
 8015070:	f7fd f912 	bl	8012298 <mpool_alloc>
 8015074:	6128      	str	r0, [r5, #16]
    p->decayScalar = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8015076:	9901      	ldr	r1, [sp, #4]
 8015078:	4638      	mov	r0, r7
 801507a:	f7fd f90d 	bl	8012298 <mpool_alloc>
 801507e:	6368      	str	r0, [r5, #52]	; 0x34
    p->decayVal = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 8015080:	9901      	ldr	r1, [sp, #4]
 8015082:	4638      	mov	r0, r7
 8015084:	f7fd f908 	bl	8012298 <mpool_alloc>
 8015088:	63a8      	str	r0, [r5, #56]	; 0x38
    p->nyquistCoeff = (Lfloat *) mpool_alloc(numModes * sizeof(Lfloat), m);
 801508a:	9901      	ldr	r1, [sp, #4]
 801508c:	4638      	mov	r0, r7
 801508e:	f7fd f903 	bl	8012298 <mpool_alloc>
 8015092:	63e8      	str	r0, [r5, #60]	; 0x3c
    tStiffString_updateOutputWeights(pm);
 8015094:	4640      	mov	r0, r8
 8015096:	f7ff ff49 	bl	8014f2c <tStiffString_updateOutputWeights>
}
 801509a:	b002      	add	sp, #8
 801509c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150a0:	43dc0000 	.word	0x43dc0000
 80150a4:	3a83126f 	.word	0x3a83126f
 80150a8:	3e4ccccd 	.word	0x3e4ccccd
 80150ac:	3e99999a 	.word	0x3e99999a
 80150b0:	38d1b717 	.word	0x38d1b717
 80150b4:	399d4952 	.word	0x399d4952
 80150b8:	3ecccccd 	.word	0x3ecccccd

080150bc <tStiffString_init>:
{
 80150bc:	b508      	push	{r3, lr}
    tStiffString_initToPool(pm, numModes, &leaf->mempool);
 80150be:	3218      	adds	r2, #24
 80150c0:	f7ff ff84 	bl	8014fcc <tStiffString_initToPool>
}
 80150c4:	bd08      	pop	{r3, pc}
	...

080150c8 <tStiffString_tick>:

Lfloat   tStiffString_tick                  (tStiffString* const pm)
{
 80150c8:	b570      	push	{r4, r5, r6, lr}
 80150ca:	ed2d 8b02 	vpush	{d8}
    _tStiffString *p = *pm;
 80150ce:	6804      	ldr	r4, [r0, #0]
    Lfloat sample = 0.0f;
    for (int i = 0; i < p->numModes; ++i) {
 80150d0:	2600      	movs	r6, #0
    Lfloat sample = 0.0f;
 80150d2:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8015150 <tStiffString_tick+0x88>
    for (int i = 0; i < p->numModes; ++i) {
 80150d6:	e02c      	b.n	8015132 <tStiffString_tick+0x6a>
      //sample += tDampedOscillator_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i];
      sample += tCycle_tick(&p->osc[i]) * p->amplitudes[i] * p->outputWeights[i] * p->decayVal[i] * p->nyquistCoeff[i];
 80150d8:	68a0      	ldr	r0, [r4, #8]
 80150da:	00b5      	lsls	r5, r6, #2
 80150dc:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 80150e0:	f7fd fa7a 	bl	80125d8 <tCycle_tick>
 80150e4:	68e3      	ldr	r3, [r4, #12]
 80150e6:	442b      	add	r3, r5
 80150e8:	edd3 7a00 	vldr	s15, [r3]
 80150ec:	ee60 7a27 	vmul.f32	s15, s0, s15
 80150f0:	6923      	ldr	r3, [r4, #16]
 80150f2:	442b      	add	r3, r5
 80150f4:	ed93 7a00 	vldr	s14, [r3]
 80150f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80150fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80150fe:	442b      	add	r3, r5
 8015100:	ed93 7a00 	vldr	s14, [r3]
 8015104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015108:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 801510a:	442a      	add	r2, r5
 801510c:	edd2 6a00 	vldr	s13, [r2]
 8015110:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015114:	ee38 8a27 	vadd.f32	s16, s16, s15
      p->decayVal[i] *= p->decayScalar[i] * p->muteDecay;
 8015118:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801511a:	442a      	add	r2, r5
 801511c:	edd2 7a00 	vldr	s15, [r2]
 8015120:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
 8015124:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015128:	ee27 7a27 	vmul.f32	s14, s14, s15
 801512c:	ed83 7a00 	vstr	s14, [r3]
    for (int i = 0; i < p->numModes; ++i) {
 8015130:	3601      	adds	r6, #1
 8015132:	6863      	ldr	r3, [r4, #4]
 8015134:	42b3      	cmp	r3, r6
 8015136:	dccf      	bgt.n	80150d8 <tStiffString_tick+0x10>
    }
    return sample * p->amp * p->gainComp;
 8015138:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 801513c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015140:	ed94 0a14 	vldr	s0, [r4, #80]	; 0x50
}
 8015144:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015148:	ecbd 8b02 	vpop	{d8}
 801514c:	bd70      	pop	{r4, r5, r6, pc}
 801514e:	bf00      	nop
 8015150:	00000000 	.word	0x00000000

08015154 <tStiffString_setFreq>:
    tStiffString_updateOutputWeights(pm);
}


void tStiffString_setFreq(tStiffString* const pm, Lfloat newFreq)
{
 8015154:	b508      	push	{r3, lr}
    _tStiffString *p = *pm;
 8015156:	6803      	ldr	r3, [r0, #0]
    p->freqHz = newFreq;
 8015158:	ed83 0a05 	vstr	s0, [r3, #20]
    tStiffString_updateOscillators(pm);
 801515c:	f7ff fe72 	bl	8014e44 <tStiffString_updateOscillators>
}
 8015160:	bd08      	pop	{r3, pc}
	...

08015164 <tStiffString_mute>:
    tStiffString_updateOscillators(pm);
}

void tStiffString_mute(tStiffString* const pm)
{
    _tStiffString *p = *pm;
 8015164:	6803      	ldr	r3, [r0, #0]
    p->muteDecay = 0.99f;
 8015166:	4a01      	ldr	r2, [pc, #4]	; (801516c <tStiffString_mute+0x8>)
 8015168:	649a      	str	r2, [r3, #72]	; 0x48
}
 801516a:	4770      	bx	lr
 801516c:	3f7d70a4 	.word	0x3f7d70a4

08015170 <tStiffString_pluck>:

void tStiffString_pluck(tStiffString* const mp, Lfloat amp)
{
 8015170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015174:	ed2d 8b02 	vpush	{d8}
 8015178:	4607      	mov	r7, r0
 801517a:	ee10 8a10 	vmov	r8, s0
    _tStiffString* p = *mp;
 801517e:	6806      	ldr	r6, [r0, #0]
    Lfloat x0 = p->pluckPos * PI;
 8015180:	edd6 8a07 	vldr	s17, [r6, #28]
 8015184:	eddf 7a22 	vldr	s15, [pc, #136]	; 8015210 <tStiffString_pluck+0xa0>
 8015188:	ee68 8aa7 	vmul.f32	s17, s17, s15
    p->muteDecay = 1.0f;
 801518c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015190:	64b3      	str	r3, [r6, #72]	; 0x48
    for (int i = 0; i < p->numModes; ++i) {
 8015192:	2400      	movs	r4, #0
 8015194:	e017      	b.n	80151c6 <tStiffString_pluck+0x56>
        if (denom < 0.001f)
        {
        	denom = 0.001f; // to avoid divide by zero
        }
#ifdef ARM_MATH_CM7
		  p->amplitudes[i] = 2.0f * arm_sin_f32(x0 * n) / denom;
 8015196:	ee07 5a90 	vmov	s15, r5
 801519a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801519e:	ee20 0a28 	vmul.f32	s0, s0, s17
 80151a2:	f7eb fae7 	bl	8000774 <arm_sin_f32>
 80151a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80151aa:	68f3      	ldr	r3, [r6, #12]
 80151ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80151b0:	eec0 7a08 	vdiv.f32	s15, s0, s16
 80151b4:	edc3 7a00 	vstr	s15, [r3]
#else
	      p->amplitudes[i] = 2.0f * sinf(x0 * n) / denom;
#endif
        //tDampedOscillator_reset(&p->osc[i]);
        p->decayVal[i] = 1.0f;
 80151b8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80151ba:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80151be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80151c2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < p->numModes; ++i) {
 80151c4:	462c      	mov	r4, r5
 80151c6:	6873      	ldr	r3, [r6, #4]
 80151c8:	42a3      	cmp	r3, r4
 80151ca:	dd18      	ble.n	80151fe <tStiffString_pluck+0x8e>
        int n = i + 1;
 80151cc:	1c65      	adds	r5, r4, #1
        float denom = n * n * x0 * (PI - x0);
 80151ce:	fb05 f305 	mul.w	r3, r5, r5
 80151d2:	ee08 3a10 	vmov	s16, r3
 80151d6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80151da:	ee28 8a28 	vmul.f32	s16, s16, s17
 80151de:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8015210 <tStiffString_pluck+0xa0>
 80151e2:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80151e6:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (denom < 0.001f)
 80151ea:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8015214 <tStiffString_pluck+0xa4>
 80151ee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80151f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151f6:	d5ce      	bpl.n	8015196 <tStiffString_pluck+0x26>
        	denom = 0.001f; // to avoid divide by zero
 80151f8:	eeb0 8a67 	vmov.f32	s16, s15
 80151fc:	e7cb      	b.n	8015196 <tStiffString_pluck+0x26>
    }
    p->amp = amp;
 80151fe:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
    tStiffString_updateOutputWeights(mp);
 8015202:	4638      	mov	r0, r7
 8015204:	f7ff fe92 	bl	8014f2c <tStiffString_updateOutputWeights>
}
 8015208:	ecbd 8b02 	vpop	{d8}
 801520c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015210:	40490fdb 	.word	0x40490fdb
 8015214:	3a83126f 	.word	0x3a83126f

08015218 <tStiffString_setStiffnessNoUpdate>:
    p->sampleRate = sr;
    p->twoPiTimesInvSampleRate = TWO_PI / sr;
}

void tStiffString_setStiffnessNoUpdate(tStiffString* const pm, Lfloat newValue)
{
 8015218:	b510      	push	{r4, lr}
    tStiffString p = *pm;
 801521a:	6804      	ldr	r4, [r0, #0]

    p->stiffness = LEAF_mapFromZeroToOneInput(newValue,0.00f, 0.2f);
 801521c:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8015230 <tStiffString_setStiffnessNoUpdate+0x18>
 8015220:	eddf 0a04 	vldr	s1, [pc, #16]	; 8015234 <tStiffString_setStiffnessNoUpdate+0x1c>
 8015224:	f7fc faff 	bl	8011826 <LEAF_mapFromZeroToOneInput>
 8015228:	ed84 0a06 	vstr	s0, [r4, #24]
}
 801522c:	bd10      	pop	{r4, pc}
 801522e:	bf00      	nop
 8015230:	3e4ccccd 	.word	0x3e4ccccd
 8015234:	00000000 	.word	0x00000000

08015238 <tStiffString_setPickupPosNoUpdate>:

void tStiffString_setPickupPosNoUpdate(tStiffString* const pm, Lfloat newValue)
{
 8015238:	b510      	push	{r4, lr}
 801523a:	eef0 0a40 	vmov.f32	s1, s0
    tStiffString p = *pm;
 801523e:	6804      	ldr	r4, [r0, #0]

    p->pickupPos = LEAF_clip(0.01f, newValue, 0.99f);
 8015240:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8015254 <tStiffString_setPickupPosNoUpdate+0x1c>
 8015244:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8015258 <tStiffString_setPickupPosNoUpdate+0x20>
 8015248:	f7fc fcd2 	bl	8011bf0 <LEAF_clip>
 801524c:	ed84 0a08 	vstr	s0, [r4, #32]
}
 8015250:	bd10      	pop	{r4, pc}
 8015252:	bf00      	nop
 8015254:	3f7d70a4 	.word	0x3f7d70a4
 8015258:	3c23d70a 	.word	0x3c23d70a

0801525c <tStiffString_setPluckPosNoUpdate>:

void tStiffString_setPluckPosNoUpdate(tStiffString* const pm, Lfloat newValue)
{
 801525c:	b510      	push	{r4, lr}
 801525e:	eef0 0a40 	vmov.f32	s1, s0
    tStiffString p = *pm;
 8015262:	6804      	ldr	r4, [r0, #0]

    p->pluckPos = LEAF_clip(0.01f, newValue, 0.99f);
 8015264:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8015278 <tStiffString_setPluckPosNoUpdate+0x1c>
 8015268:	ed9f 0a04 	vldr	s0, [pc, #16]	; 801527c <tStiffString_setPluckPosNoUpdate+0x20>
 801526c:	f7fc fcc0 	bl	8011bf0 <LEAF_clip>
 8015270:	ed84 0a07 	vstr	s0, [r4, #28]
}
 8015274:	bd10      	pop	{r4, pc}
 8015276:	bf00      	nop
 8015278:	3f7d70a4 	.word	0x3f7d70a4
 801527c:	3c23d70a 	.word	0x3c23d70a

08015280 <tStiffString_setFreqNoUpdate>:


void tStiffString_setFreqNoUpdate(tStiffString* const pm, Lfloat newFreq)
{
    _tStiffString *p = *pm;
 8015280:	6803      	ldr	r3, [r0, #0]
    p->freqHz = newFreq;
 8015282:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8015286:	4770      	bx	lr

08015288 <tStiffString_setDecayNoUpdate>:

void tStiffString_setDecayNoUpdate(tStiffString* const pm, Lfloat decay)
{
    _tStiffString *p = *pm;
 8015288:	6803      	ldr	r3, [r0, #0]
    p->decay = decay;
 801528a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
}
 801528e:	4770      	bx	lr

08015290 <tStiffString_setDecayHighFreqNoUpdate>:

void tStiffString_setDecayHighFreqNoUpdate(tStiffString* const pm, Lfloat decayHF)
{
    _tStiffString *p = *pm;
 8015290:	6803      	ldr	r3, [r0, #0]
    p->decayHighFreq = decayHF;
 8015292:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
 8015296:	4770      	bx	lr

08015298 <glottis_setup_waveform>:




void glottis_setup_waveform(glottis* const glo)
{
 8015298:	b510      	push	{r4, lr}
 801529a:	ed2d 8b0a 	vpush	{d8-d12}
	_glottis* glot = *glo;
 801529e:	6804      	ldr	r4, [r0, #0]

    Lfloat alpha;
    Lfloat E0;


    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 80152a0:	edd4 7a02 	vldr	s15, [r4, #8]
 80152a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80152a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80152ac:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80152b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80152b4:	edc4 7a03 	vstr	s15, [r4, #12]
    glot->waveform_length = 1.0f / glot->freq;
 80152b8:	ed94 6a01 	vldr	s12, [r4, #4]
 80152bc:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80152c0:	edc4 6a04 	vstr	s13, [r4, #16]

    Rd = glot->Rd;
    if(Rd < 0.5f) Rd = 0.5f;
 80152c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80152c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80152cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152d0:	d501      	bpl.n	80152d6 <glottis_setup_waveform+0x3e>
 80152d2:	eef0 7a47 	vmov.f32	s15, s14
    if(Rd > 2.7f) Rd = 2.7f;
 80152d6:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8015428 <glottis_setup_waveform+0x190>
 80152da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80152de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152e2:	dd01      	ble.n	80152e8 <glottis_setup_waveform+0x50>
 80152e4:	eef0 7a47 	vmov.f32	s15, s14


    Ra = -0.01f + 0.048f*Rd;
 80152e8:	eddf 6a50 	vldr	s13, [pc, #320]	; 801542c <glottis_setup_waveform+0x194>
 80152ec:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80152f0:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8015430 <glottis_setup_waveform+0x198>
 80152f4:	ee76 6ac7 	vsub.f32	s13, s13, s14
    Rk = 0.224f + 0.118f*Rd;
 80152f8:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 8015434 <glottis_setup_waveform+0x19c>
 80152fc:	ee27 8a88 	vmul.f32	s16, s15, s16
 8015300:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8015438 <glottis_setup_waveform+0x1a0>
 8015304:	ee38 8a07 	vadd.f32	s16, s16, s14
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8015308:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
 801530c:	ee28 6a06 	vmul.f32	s12, s16, s12
 8015310:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801543c <glottis_setup_waveform+0x1a4>
 8015314:	ee28 7a07 	vmul.f32	s14, s16, s14
 8015318:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 801531c:	ee37 7a29 	vadd.f32	s14, s14, s19
 8015320:	ee26 6a07 	vmul.f32	s12, s12, s14
 8015324:	eddf 5a46 	vldr	s11, [pc, #280]	; 8015440 <glottis_setup_waveform+0x1a8>
 8015328:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801532c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015330:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015334:	ee86 7a27 	vdiv.f32	s14, s12, s15


    Ta = Ra;
    Tp = (Lfloat)1.0f / (2.0f*Rg);
 8015338:	ee37 7a07 	vadd.f32	s14, s14, s14
 801533c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015340:	eec9 8a07 	vdiv.f32	s17, s18, s14
    Te = Tp + Tp*Rk;
 8015344:	ee28 8a28 	vmul.f32	s16, s16, s17
 8015348:	ee38 8a28 	vadd.f32	s16, s16, s17



    epsilon = (Lfloat)1.0f / Ta;
 801534c:	eec9 aa26 	vdiv.f32	s21, s18, s13
    shift = fasterexpf(-epsilon * (1.0f - Te));
 8015350:	ee79 ba48 	vsub.f32	s23, s18, s16
 8015354:	ee2a 0aeb 	vnmul.f32	s0, s21, s23
 8015358:	f7fc faf8 	bl	801194c <fasterexpf>
 801535c:	eeb0 aa40 	vmov.f32	s20, s0
    delta = 1.0f - shift;
 8015360:	ee39 ba40 	vsub.f32	s22, s18, s0



    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8015364:	eec9 7a2a 	vdiv.f32	s15, s18, s21
 8015368:	ee30 9a49 	vsub.f32	s18, s0, s18
 801536c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8015370:	ee6b ba80 	vmul.f32	s23, s23, s0
 8015374:	ee77 7aab 	vadd.f32	s15, s15, s23
    rhs_integral = rhs_integral / delta;
 8015378:	eec7 6a8b 	vdiv.f32	s13, s15, s22
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
 801537c:	ee38 7a68 	vsub.f32	s14, s16, s17
 8015380:	ee27 7a69 	vnmul.f32	s14, s14, s19
 8015384:	ee37 7a26 	vadd.f32	s14, s14, s13
    upper_integral = -lower_integral;
 8015388:	eeb1 9a47 	vneg.f32	s18, s14


    omega = M_PI / Tp;
 801538c:	eeb7 6ae8 	vcvt.f64.f32	d6, s17
 8015390:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8015418 <glottis_setup_waveform+0x180>
 8015394:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8015398:	eef7 bbc7 	vcvt.f32.f64	s23, d7
    s = fast_sinf2(omega * Te);
 801539c:	ee28 0a2b 	vmul.f32	s0, s16, s23
 80153a0:	f7fc fb42 	bl	8011a28 <fast_sinf2>
 80153a4:	eeb0 ca40 	vmov.f32	s24, s0

    y = -M_PI * s * upper_integral / (Tp*2.0f);
 80153a8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80153ac:	ed9f 7b1c 	vldr	d7, [pc, #112]	; 8015420 <glottis_setup_waveform+0x188>
 80153b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80153b4:	eeb7 7ac9 	vcvt.f64.f32	d7, s18
 80153b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80153bc:	ee38 6aa8 	vadd.f32	s12, s17, s17
 80153c0:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80153c4:	ee87 0b06 	vdiv.f64	d0, d7, d6
    z = my_faster_logf(y);
 80153c8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80153cc:	f7fc fa52 	bl	8011874 <my_faster_logf>
    alpha = z / (Tp/2.0f - Te);
 80153d0:	ee68 7aa9 	vmul.f32	s15, s17, s19
 80153d4:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80153d8:	eec0 8a27 	vdiv.f32	s17, s0, s15
    E0 = -1.0f / (s * fastExp4(alpha*Te));
 80153dc:	ee28 0a28 	vmul.f32	s0, s16, s17
 80153e0:	f7fc faf6 	bl	80119d0 <fastExp4>
 80153e4:	ee20 0a0c 	vmul.f32	s0, s0, s24
 80153e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80153ec:	eec7 7a00 	vdiv.f32	s15, s14, s0



    glot->alpha = alpha;
 80153f0:	edc4 8a06 	vstr	s17, [r4, #24]
    glot->E0 = E0;
 80153f4:	edc4 7a07 	vstr	s15, [r4, #28]
    glot->epsilon = epsilon;
 80153f8:	edc4 aa08 	vstr	s21, [r4, #32]
    glot->shift = shift;
 80153fc:	ed84 aa09 	vstr	s20, [r4, #36]	; 0x24
    glot->delta = delta;
 8015400:	ed84 ba0a 	vstr	s22, [r4, #40]	; 0x28
    glot->Te = Te;
 8015404:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
    glot->omega = omega;
 8015408:	edc4 ba0c 	vstr	s23, [r4, #48]	; 0x30
}
 801540c:	ecbd 8b0a 	vpop	{d8-d12}
 8015410:	bd10      	pop	{r4, pc}
 8015412:	bf00      	nop
 8015414:	f3af 8000 	nop.w
 8015418:	54442d18 	.word	0x54442d18
 801541c:	400921fb 	.word	0x400921fb
 8015420:	54442d18 	.word	0x54442d18
 8015424:	c00921fb 	.word	0xc00921fb
 8015428:	402ccccd 	.word	0x402ccccd
 801542c:	3d449ba6 	.word	0x3d449ba6
 8015430:	3c23d70a 	.word	0x3c23d70a
 8015434:	3df1a9fc 	.word	0x3df1a9fc
 8015438:	3e656042 	.word	0x3e656042
 801543c:	3f99999a 	.word	0x3f99999a
 8015440:	3de147ae 	.word	0x3de147ae

08015444 <glottis_initToPool>:
{
	glottis_initToPool(glo, &leaf->mempool);
}

void glottis_initToPool(glottis* const glo, tMempool* const mp)
{
 8015444:	b530      	push	{r4, r5, lr}
 8015446:	b083      	sub	sp, #12
 8015448:	4605      	mov	r5, r0

	_tMempool* m = *mp;
 801544a:	680c      	ldr	r4, [r1, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 801544c:	4621      	mov	r1, r4
 801544e:	203c      	movs	r0, #60	; 0x3c
 8015450:	f7fc ff9a 	bl	8012388 <mpool_calloc>
 8015454:	6028      	str	r0, [r5, #0]
 8015456:	9001      	str	r0, [sp, #4]
	glot->mempool = m;
 8015458:	6004      	str	r4, [r0, #0]
	LEAF* leaf = glot->mempool->leaf;
 801545a:	9b01      	ldr	r3, [sp, #4]
 801545c:	681a      	ldr	r2, [r3, #0]
 801545e:	6852      	ldr	r2, [r2, #4]
	glot->mempool = m;
 8015460:	601c      	str	r4, [r3, #0]
	glot->freq = 140.0f; /* 140Hz frequency by default */
 8015462:	9b01      	ldr	r3, [sp, #4]
 8015464:	4909      	ldr	r1, [pc, #36]	; (801548c <glottis_initToPool+0x48>)
 8015466:	6059      	str	r1, [r3, #4]
    glot->tenseness = 0.6f; /* value between 0 and 1 */
 8015468:	4909      	ldr	r1, [pc, #36]	; (8015490 <glottis_initToPool+0x4c>)
 801546a:	6099      	str	r1, [r3, #8]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 801546c:	ed92 7a00 	vldr	s14, [r2]
 8015470:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015474:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015478:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    glot->time_in_waveform = 0;
 801547c:	2200      	movs	r2, #0
 801547e:	615a      	str	r2, [r3, #20]
    glottis_setup_waveform(&glot);
 8015480:	a801      	add	r0, sp, #4
 8015482:	f7ff ff09 	bl	8015298 <glottis_setup_waveform>
}
 8015486:	b003      	add	sp, #12
 8015488:	bd30      	pop	{r4, r5, pc}
 801548a:	bf00      	nop
 801548c:	430c0000 	.word	0x430c0000
 8015490:	3f19999a 	.word	0x3f19999a

08015494 <glottis_compute>:
	mpool_free((char*)glot, glot->mempool);
}


Lfloat glottis_compute(glottis* const glo)
{
 8015494:	b510      	push	{r4, lr}
 8015496:	ed2d 8b02 	vpush	{d8}
 801549a:	b082      	sub	sp, #8
	_glottis* glot = *glo;
 801549c:	6803      	ldr	r3, [r0, #0]
 801549e:	9301      	str	r3, [sp, #4]
	LEAF* leaf = glot->mempool->leaf;
 80154a0:	681a      	ldr	r2, [r3, #0]
 80154a2:	6854      	ldr	r4, [r2, #4]
    Lfloat t;
    Lfloat intensity;

    out = 0.0f;
    intensity = 1.0f;
    glot->time_in_waveform += glot->T;
 80154a4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80154a8:	ed93 7a05 	vldr	s14, [r3, #20]
 80154ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80154b0:	edc3 7a05 	vstr	s15, [r3, #20]

    if(glot->time_in_waveform > glot->waveform_length) {
 80154b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80154b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80154bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154c0:	dc44      	bgt.n	801554c <glottis_compute+0xb8>
        glot->time_in_waveform -= glot->waveform_length;
        glottis_setup_waveform(&glot);

    }

    t = (glot->time_in_waveform * glot->freq);//multiplying by freq same as divide by length since length is 1/f
 80154c2:	9b01      	ldr	r3, [sp, #4]
 80154c4:	ed93 8a05 	vldr	s16, [r3, #20]
 80154c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80154cc:	ee28 8a27 	vmul.f32	s16, s16, s15

    if(t > glot->Te) {
 80154d0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80154d4:	eef4 7ac8 	vcmpe.f32	s15, s16
 80154d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154dc:	d53e      	bpl.n	801555c <glottis_compute+0xc8>
        out = (-fastExp4(-glot->epsilon * (t-glot->Te)) + glot->shift) / glot->delta;
 80154de:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
 80154e2:	ed93 0a08 	vldr	s0, [r3, #32]
 80154e6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80154ea:	ee20 0a48 	vnmul.f32	s0, s0, s16
 80154ee:	f7fc fa6f 	bl	80119d0 <fastExp4>
 80154f2:	ee78 8ac0 	vsub.f32	s17, s17, s0
 80154f6:	9b01      	ldr	r3, [sp, #4]
 80154f8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80154fc:	ee88 8aa7 	vdiv.f32	s16, s17, s15
        out = glot->E0 * fastExp4(glot->alpha * t) * sinf(glot->omega * t);
#endif

    }

    noise = (2.0f * leaf->random()) - 1.0f;
 8015500:	6923      	ldr	r3, [r4, #16]
 8015502:	4798      	blx	r3
 8015504:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015508:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801550c:	ee70 7a67 	vsub.f32	s15, s0, s15

#ifdef ARM_MATH_CM7
    Lfloat sqr = 0.0f;
    arm_sqrt_f32(glot->tenseness, &sqr);
 8015510:	9b01      	ldr	r3, [sp, #4]
 8015512:	ed93 7a02 	vldr	s14, [r3, #8]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8015516:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801551a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801551e:	db31      	blt.n	8015584 <glottis_compute+0xf0>
      *pOut = _sqrtf(in);
#elif defined(__GNUC_PYTHON__)
      *pOut = sqrtf(in);
#elif defined ( __GNUC__ )
  #if defined (__VFP_FP__) && !defined(__SOFTFP__)
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
 8015520:	eeb1 7ac7 	vsqrt.f32	s14, s14
    aspiration = intensity * (1.0f - sqr) * 0.3f * noise;
 8015524:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015528:	ee30 0a47 	vsub.f32	s0, s0, s14
 801552c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801558c <glottis_compute+0xf8>
 8015530:	ee20 0a07 	vmul.f32	s0, s0, s14
 8015534:	ee20 0a27 	vmul.f32	s0, s0, s15
#else
        aspiration = intensity * (1.0f - sqrtf(glot->tenseness)) * 0.3f * noise;
#endif

    aspiration *= 0.2f;
 8015538:	eddf 7a15 	vldr	s15, [pc, #84]	; 8015590 <glottis_compute+0xfc>
 801553c:	ee20 0a27 	vmul.f32	s0, s0, s15

    out += aspiration;

    return out;
}
 8015540:	ee38 0a00 	vadd.f32	s0, s16, s0
 8015544:	b002      	add	sp, #8
 8015546:	ecbd 8b02 	vpop	{d8}
 801554a:	bd10      	pop	{r4, pc}
        glot->time_in_waveform -= glot->waveform_length;
 801554c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015550:	edc3 7a05 	vstr	s15, [r3, #20]
        glottis_setup_waveform(&glot);
 8015554:	a801      	add	r0, sp, #4
 8015556:	f7ff fe9f 	bl	8015298 <glottis_setup_waveform>
 801555a:	e7b2      	b.n	80154c2 <glottis_compute+0x2e>
        out = glot->E0 * fastExp4(glot->alpha * t) * arm_sin_f32(glot->omega * t);
 801555c:	edd3 8a07 	vldr	s17, [r3, #28]
 8015560:	ed93 0a06 	vldr	s0, [r3, #24]
 8015564:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015568:	f7fc fa32 	bl	80119d0 <fastExp4>
 801556c:	ee68 8a80 	vmul.f32	s17, s17, s0
 8015570:	9b01      	ldr	r3, [sp, #4]
 8015572:	ed93 0a0c 	vldr	s0, [r3, #48]	; 0x30
 8015576:	ee20 0a08 	vmul.f32	s0, s0, s16
 801557a:	f7eb f8fb 	bl	8000774 <arm_sin_f32>
 801557e:	ee28 8a80 	vmul.f32	s16, s17, s0
 8015582:	e7bd      	b.n	8015500 <glottis_compute+0x6c>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8015584:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8015594 <glottis_compute+0x100>
 8015588:	e7cc      	b.n	8015524 <glottis_compute+0x90>
 801558a:	bf00      	nop
 801558c:	3e99999a 	.word	0x3e99999a
 8015590:	3e4ccccd 	.word	0x3e4ccccd
 8015594:	00000000 	.word	0x00000000

08015598 <tract_calculate_reflections>:
}


void tract_calculate_reflections(tract* const t)
{
	_tract* tr = *t;
 8015598:	6803      	ldr	r3, [r0, #0]
	int i;
    Lfloat  sum;

    for(i = 0; i < tr->n; i++) {
 801559a:	2200      	movs	r2, #0
 801559c:	e010      	b.n	80155c0 <tract_calculate_reflections+0x28>
    	Lfloat scaledDiameter = tr->diameter[i] * tr->diameterScale;
 801559e:	6959      	ldr	r1, [r3, #20]
 80155a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80155a4:	edd1 7a00 	vldr	s15, [r1]
 80155a8:	ed93 7a2f 	vldr	s14, [r3, #188]	; 0xbc
 80155ac:	ee67 7a87 	vmul.f32	s15, s15, s14
        tr->A[i] = scaledDiameter * scaledDiameter;
 80155b0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80155b2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80155b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80155ba:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
 80155be:	3201      	adds	r2, #1
 80155c0:	6859      	ldr	r1, [r3, #4]
 80155c2:	4291      	cmp	r1, r2
 80155c4:	dceb      	bgt.n	801559e <tract_calculate_reflections+0x6>
        /* Calculate area from diameter squared*/
    }

    for(i = 1; i < tr->n; i++) {
 80155c6:	2201      	movs	r2, #1
 80155c8:	e011      	b.n	80155ee <tract_calculate_reflections+0x56>
        tr->reflection[i] = tr->new_reflection[i];
        if(tr->A[i] == 0) {
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
        } else {
            tr->new_reflection[i] =
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 80155ca:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80155ce:	4410      	add	r0, r2
 80155d0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80155d4:	ed91 7a00 	vldr	s14, [r1]
 80155d8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80155dc:	ee77 7a87 	vadd.f32	s15, s15, s14
            tr->new_reflection[i] =
 80155e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80155e2:	4461      	add	r1, ip
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 80155e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            tr->new_reflection[i] =
 80155e8:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->n; i++) {
 80155ec:	3201      	adds	r2, #1
 80155ee:	6859      	ldr	r1, [r3, #4]
 80155f0:	4291      	cmp	r1, r2
 80155f2:	dd18      	ble.n	8015626 <tract_calculate_reflections+0x8e>
        tr->reflection[i] = tr->new_reflection[i];
 80155f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80155f6:	ea4f 0c82 	mov.w	ip, r2, lsl #2
 80155fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80155fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015600:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8015604:	6800      	ldr	r0, [r0, #0]
 8015606:	6008      	str	r0, [r1, #0]
        if(tr->A[i] == 0) {
 8015608:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 801560a:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 801560e:	edd0 7a00 	vldr	s15, [r0]
 8015612:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801561a:	d1d6      	bne.n	80155ca <tract_calculate_reflections+0x32>
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
 801561c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801561e:	4461      	add	r1, ip
 8015620:	4820      	ldr	r0, [pc, #128]	; (80156a4 <tract_calculate_reflections+0x10c>)
 8015622:	6008      	str	r0, [r1, #0]
 8015624:	e7e2      	b.n	80155ec <tract_calculate_reflections+0x54>
        }
    }

    tr->reflection_left = tr->new_reflection_left;
 8015626:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 801562a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    tr->reflection_right = tr->new_reflection_right;
 801562e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8015632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    tr->reflection_nose = tr->new_reflection_nose;
 8015636:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 801563a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 801563e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015640:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8015642:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8015646:	edd0 7a00 	vldr	s15, [r0]
 801564a:	3101      	adds	r1, #1
 801564c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015650:	ed92 7a00 	vldr	s14, [r2]
 8015654:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015658:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 801565a:	edd1 6a00 	vldr	s13, [r1]
 801565e:	ee37 7a26 	vadd.f32	s14, s14, s13
    Lfloat invSum = 1.0f / sum;
 8015662:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8015666:	eec6 6a07 	vdiv.f32	s13, s12, s14
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
 801566a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801566e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015672:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015676:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
    tr->new_reflection_right = (Lfloat)(2.0f * tr->A[tr->nose_start + 1] - sum) * invSum;
 801567a:	edd2 7a00 	vldr	s15, [r2]
 801567e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015682:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015686:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801568a:	edc3 7a24 	vstr	s15, [r3, #144]	; 0x90
    tr->new_reflection_nose = (Lfloat)(2.0f * tr->noseA[0] - sum) * invSum;
 801568e:	edd1 7a00 	vldr	s15, [r1]
 8015692:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015696:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801569a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801569e:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
}
 80156a2:	4770      	bx	lr
 80156a4:	3f7fbe77 	.word	0x3f7fbe77

080156a8 <tract_newLength>:

void tract_newLength(tract* const t, int numTractSections)
{
	_tract* tr = *t;
 80156a8:	6803      	ldr	r3, [r0, #0]
	int i;
	Lfloat diameter, d;
    Lfloat n;
    if (numTractSections < tr->maxNumTractSections)
 80156aa:	691a      	ldr	r2, [r3, #16]
 80156ac:	428a      	cmp	r2, r1
 80156ae:	f340 8088 	ble.w	80157c2 <tract_newLength+0x11a>
    {
    	n = numTractSections;
 80156b2:	ee07 1a90 	vmov	s15, r1
 80156b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    else
    {
    	n = tr->maxNumTractSections;
    }

    tr->n = n; //44
 80156ba:	eebd 5ae7 	vcvt.s32.f32	s10, s15
 80156be:	ed83 5a01 	vstr	s10, [r3, #4]
    tr->invN = 1.0f / n;
 80156c2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80156c6:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80156ca:	ed83 7a02 	vstr	s14, [r3, #8]
    tr->nose_length = n*0.636363636363636f; //28
 80156ce:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8015948 <tract_newLength+0x2a0>
 80156d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80156d6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80156da:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80156de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80156e2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80156e6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80156ea:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80156ee:	ed83 7a13 	vstr	s14, [r3, #76]	; 0x4c

    tr->reflection_left = 0.0f;
 80156f2:	2200      	movs	r2, #0
 80156f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    tr->reflection_right = 0.0f;
 80156f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    tr->reflection_nose = 0.0f;
 80156fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    tr->new_reflection_left = 0.0f;
 8015700:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    tr->new_reflection_right= 0.0f;
 8015704:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    tr->new_reflection_nose = 0.0f;
 8015708:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    tr->velum_target = 0.01f;
 801570c:	498f      	ldr	r1, [pc, #572]	; (801594c <tract_newLength+0x2a4>)
 801570e:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    tr->glottal_reflection = 0.75f;
 8015712:	f04f 517d 	mov.w	r1, #1061158912	; 0x3f400000
 8015716:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
    tr->lip_reflection = -0.85f;
 801571a:	498d      	ldr	r1, [pc, #564]	; (8015950 <tract_newLength+0x2a8>)
 801571c:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
    tr->last_obstruction = -1;
 8015720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015724:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
    tr->movement_speed = 200.0f;
 8015728:	498a      	ldr	r1, [pc, #552]	; (8015954 <tract_newLength+0x2ac>)
 801572a:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    tr->lip_output = 0.0f;
 801572e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tr->nose_output = 0.0f;
 8015732:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    tr->tip_start = n*0.727272727272727f;
 8015736:	eddf 6a88 	vldr	s13, [pc, #544]	; 8015958 <tract_newLength+0x2b0>
 801573a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 801573e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8015742:	edc3 6a14 	vstr	s13, [r3, #80]	; 0x50
    tr->blade_start = n*0.227272727272727f;
 8015746:	ed9f 7a85 	vldr	s14, [pc, #532]	; 801595c <tract_newLength+0x2b4>
 801574a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801574e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015752:	ed83 7a15 	vstr	s14, [r3, #84]	; 0x54
    tr->lip_start = n*0.886363636363636f;
 8015756:	ed9f 6a82 	vldr	s12, [pc, #520]	; 8015960 <tract_newLength+0x2b8>
 801575a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801575e:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8015762:	ed83 6a16 	vstr	s12, [r3, #88]	; 0x58

	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8015766:	ed9f 6a7f 	vldr	s12, [pc, #508]	; 8015964 <tract_newLength+0x2bc>
 801576a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801576e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015772:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8015776:	edc3 6a17 	vstr	s13, [r3, #92]	; 0x5c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 801577a:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8015968 <tract_newLength+0x2c0>
 801577e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8015782:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015786:	ee37 7a26 	vadd.f32	s14, s14, s13
 801578a:	ed83 7a18 	vstr	s14, [r3, #96]	; 0x60

	tr->turbuluencePointPosition[0] = n* 0.45f;
 801578e:	ed9f 7a77 	vldr	s14, [pc, #476]	; 801596c <tract_newLength+0x2c4>
 8015792:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015796:	ed83 7a34 	vstr	s14, [r3, #208]	; 0xd0
	tr->turbuluencePointPosition[1] = n* 0.5f;
 801579a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801579e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80157a2:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	tr->turbuluencePointDiameter[0] = 1.5f;
 80157a6:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80157aa:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	tr->turbuluencePointDiameter[1] = 1.5f;
 80157ae:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

    tr->invN = 1.0f / tr->n;
 80157b2:	eef8 7ac5 	vcvt.f32.s32	s15, s10
 80157b6:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 80157ba:	ed83 7a02 	vstr	s14, [r3, #8]

    for(i = 0; i < tr->n; i++) {
 80157be:	2200      	movs	r2, #0
 80157c0:	e02f      	b.n	8015822 <tract_newLength+0x17a>
    	n = tr->maxNumTractSections;
 80157c2:	ee07 2a90 	vmov	s15, r2
 80157c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157ca:	e776      	b.n	80156ba <tract_newLength+0x12>
        diameter = 0;
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
            diameter = 0.6f;
 80157cc:	4968      	ldr	r1, [pc, #416]	; (8015970 <tract_newLength+0x2c8>)
        }

        tr->diameter[i] =
            tr->rest_diameter[i] =
            tr->target_diameter[i] =
            tr->new_diameter[i] = diameter;
 80157ce:	6a18      	ldr	r0, [r3, #32]
 80157d0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80157d4:	6001      	str	r1, [r0, #0]
            tr->target_diameter[i] =
 80157d6:	69d8      	ldr	r0, [r3, #28]
 80157d8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80157dc:	6001      	str	r1, [r0, #0]
            tr->rest_diameter[i] =
 80157de:	6998      	ldr	r0, [r3, #24]
 80157e0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80157e4:	6001      	str	r1, [r0, #0]
        tr->diameter[i] =
 80157e6:	6958      	ldr	r0, [r3, #20]
 80157e8:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80157ec:	6001      	str	r1, [r0, #0]
        tr->reflection[i] = 0.0f;
 80157ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80157f0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80157f4:	2100      	movs	r1, #0
 80157f6:	6001      	str	r1, [r0, #0]
        tr->new_reflection[i] = 0.0f;
 80157f8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80157fa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80157fe:	6001      	str	r1, [r0, #0]
        tr->R[i] = 0.0f;
 8015800:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8015802:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8015806:	6001      	str	r1, [r0, #0]
        tr->L[i] = 0.0f;
 8015808:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801580a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801580e:	6001      	str	r1, [r0, #0]
        tr->junction_outR[i] = 0.0f;
 8015810:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8015812:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8015816:	6001      	str	r1, [r0, #0]
        tr->junction_outL[i] = 0.0f;
 8015818:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801581a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 801581e:	6001      	str	r1, [r0, #0]
    for(i = 0; i < tr->n; i++) {
 8015820:	3201      	adds	r2, #1
 8015822:	6859      	ldr	r1, [r3, #4]
 8015824:	4291      	cmp	r1, r2
 8015826:	dd26      	ble.n	8015876 <tract_newLength+0x1ce>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 8015828:	edd3 6a02 	vldr	s13, [r3, #8]
 801582c:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 8015830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015834:	ee07 1a10 	vmov	s14, r1
 8015838:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801583c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015840:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8015844:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015848:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801584c:	ee17 1a90 	vmov	r1, s15
 8015850:	4291      	cmp	r1, r2
 8015852:	dcbb      	bgt.n	80157cc <tract_newLength+0x124>
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 8015854:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 8015858:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801585c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015860:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015864:	ee17 1a10 	vmov	r1, s14
 8015868:	4291      	cmp	r1, r2
 801586a:	dd01      	ble.n	8015870 <tract_newLength+0x1c8>
            diameter = 1.1f;
 801586c:	4941      	ldr	r1, [pc, #260]	; (8015974 <tract_newLength+0x2cc>)
 801586e:	e7ae      	b.n	80157ce <tract_newLength+0x126>
            diameter = 1.5f;
 8015870:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8015874:	e7ab      	b.n	80157ce <tract_newLength+0x126>
    }

    Lfloat invNoseLength = 1.0f / tr->nose_length;
 8015876:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 801587a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801587e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015882:	eec7 6a27 	vdiv.f32	s13, s14, s15
	for(i = 0; i < tr->nose_length; i++) {
 8015886:	2200      	movs	r2, #0
 8015888:	e023      	b.n	80158d2 <tract_newLength+0x22a>
		d = 2.0f * ((Lfloat)i * invNoseLength);
		if(d < 1.0f) {
			diameter = 0.4f + 1.6f * d;
 801588a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8015978 <tract_newLength+0x2d0>
 801588e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015892:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 801597c <tract_newLength+0x2d4>
 8015896:	ee77 7a87 	vadd.f32	s15, s15, s14
 801589a:	e038      	b.n	801590e <tract_newLength+0x266>
		} else {
			diameter = 0.5f + 1.5f*(2.0f-d);
		}
		diameter = MIN(diameter, 1.9f);
		tr->nose_diameter[i] = diameter;
 801589c:	6f99      	ldr	r1, [r3, #120]	; 0x78
 801589e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80158a2:	edc1 7a00 	vstr	s15, [r1]
        tr->nose_reflection[i] = 0.0f;
 80158a6:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80158a8:	eb01 0082 	add.w	r0, r1, r2, lsl #2
 80158ac:	2100      	movs	r1, #0
 80158ae:	6001      	str	r1, [r0, #0]
        tr->noseR[i] = 0.0f;
 80158b0:	6e98      	ldr	r0, [r3, #104]	; 0x68
 80158b2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80158b6:	6001      	str	r1, [r0, #0]
        tr->noseL[i] = 0.0f;
 80158b8:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80158ba:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80158be:	6001      	str	r1, [r0, #0]
        tr->nose_junc_outR[i] = 0.0f;
 80158c0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80158c2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80158c6:	6001      	str	r1, [r0, #0]
        tr->nose_junc_outL[i] = 0.0f;
 80158c8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80158ca:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80158ce:	6001      	str	r1, [r0, #0]
	for(i = 0; i < tr->nose_length; i++) {
 80158d0:	3201      	adds	r2, #1
 80158d2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80158d4:	4291      	cmp	r1, r2
 80158d6:	dd24      	ble.n	8015922 <tract_newLength+0x27a>
		d = 2.0f * ((Lfloat)i * invNoseLength);
 80158d8:	ee07 2a90 	vmov	s15, r2
 80158dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80158e0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80158e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
		if(d < 1.0f) {
 80158e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80158ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80158f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158f4:	d4c9      	bmi.n	801588a <tract_newLength+0x1e2>
			diameter = 0.5f + 1.5f*(2.0f-d);
 80158f6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80158fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80158fe:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8015902:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015906:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801590a:	ee77 7a87 	vadd.f32	s15, s15, s14
		diameter = MIN(diameter, 1.9f);
 801590e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8015980 <tract_newLength+0x2d8>
 8015912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801591a:	d4bf      	bmi.n	801589c <tract_newLength+0x1f4>
 801591c:	eef0 7a47 	vmov.f32	s15, s14
 8015920:	e7bc      	b.n	801589c <tract_newLength+0x1f4>
	}

    tr->new_reflection_left = 0.0f;
 8015922:	2200      	movs	r2, #0
 8015924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    tr->reflection_left = 0.0f;
 8015928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    tr->new_reflection_right = 0.0f;
 801592c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    tr->reflection_right = 0.0f;
 8015930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    tr->new_reflection_nose = 0.0f;
 8015934:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    tr->reflection_nose = 0.0f;
 8015938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    tr->lip_output = 0.0f;
 801593c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    tr->nose_output = 0.0f;
 8015940:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

}
 8015944:	4770      	bx	lr
 8015946:	bf00      	nop
 8015948:	3f22e8ba 	.word	0x3f22e8ba
 801594c:	3c23d70a 	.word	0x3c23d70a
 8015950:	bf59999a 	.word	0xbf59999a
 8015954:	43480000 	.word	0x43480000
 8015958:	3f3a2e8c 	.word	0x3f3a2e8c
 801595c:	3e68ba2f 	.word	0x3e68ba2f
 8015960:	3f62e8ba 	.word	0x3f62e8ba
 8015964:	3d8ba2e9 	.word	0x3d8ba2e9
 8015968:	3d3a2e8c 	.word	0x3d3a2e8c
 801596c:	3ee66666 	.word	0x3ee66666
 8015970:	3f19999a 	.word	0x3f19999a
 8015974:	3f8ccccd 	.word	0x3f8ccccd
 8015978:	3fcccccd 	.word	0x3fcccccd
 801597c:	3ecccccd 	.word	0x3ecccccd
 8015980:	3ff33333 	.word	0x3ff33333

08015984 <tract_addTurbulenceNoiseAtPosition>:
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
	}
}

void tract_addTurbulenceNoiseAtPosition(tract* const t, Lfloat turbulenceNoise, Lfloat position, Lfloat diameter)
{
 8015984:	b538      	push	{r3, r4, r5, lr}
 8015986:	ed2d 8b06 	vpush	{d8-d10}
 801598a:	eef0 9a40 	vmov.f32	s19, s0
 801598e:	eeb0 9a41 	vmov.f32	s18, s2
	_tract* tr = *t;
 8015992:	6805      	ldr	r5, [r0, #0]
	int i = (int)floorf(position);
 8015994:	fefb 7a60 	vrintm.f32	s15, s1
 8015998:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801599c:	ee17 4a90 	vmov	r4, s15
	Lfloat delta = position - i;
 80159a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80159a4:	ee30 8ae7 	vsub.f32	s16, s1, s15
	//Lfloat mapped = LEAF_map(diameter, 0.38f, 0.245f, 0.0f, 1.0f);
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 80159a8:	eddf 7a30 	vldr	s15, [pc, #192]	; 8015a6c <tract_addTurbulenceNoiseAtPosition+0xe8>
 80159ac:	ee77 7ac1 	vsub.f32	s15, s15, s2
 80159b0:	ed9f aa2f 	vldr	s20, [pc, #188]	; 8015a70 <tract_addTurbulenceNoiseAtPosition+0xec>
 80159b4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80159b8:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0
 80159bc:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80159c0:	eeb0 0a4a 	vmov.f32	s0, s20
 80159c4:	f7fc f914 	bl	8011bf0 <LEAF_clip>
 80159c8:	eef0 8a40 	vmov.f32	s17, s0
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 80159cc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80159d0:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 80159d4:	ee69 0a20 	vmul.f32	s1, s18, s1
 80159d8:	eeb0 0a4a 	vmov.f32	s0, s20
 80159dc:	f7fc f908 	bl	8011bf0 <LEAF_clip>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 80159e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80159e4:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80159e8:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80159ec:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80159f0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80159f4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80159f8:	ee67 7a87 	vmul.f32	s15, s15, s14
	Lfloat noise1 = turbulenceNoise * delta * thinness0 * openness * 0.5f;
 80159fc:	ee28 8a29 	vmul.f32	s16, s16, s19
 8015a00:	ee28 8a28 	vmul.f32	s16, s16, s17
 8015a04:	ee28 8a00 	vmul.f32	s16, s16, s0
 8015a08:	ee28 8a07 	vmul.f32	s16, s16, s14
	if ((i + 1) < tr->n) {
 8015a0c:	1c62      	adds	r2, r4, #1
 8015a0e:	686b      	ldr	r3, [r5, #4]
 8015a10:	429a      	cmp	r2, r3
 8015a12:	da11      	bge.n	8015a38 <tract_addTurbulenceNoiseAtPosition+0xb4>
		tr->R[i + 1] += noise0;
 8015a14:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015a16:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015a1a:	ed93 7a00 	vldr	s14, [r3]
 8015a1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015a22:	ed83 7a00 	vstr	s14, [r3]
		tr->L[i + 1] += noise0;
 8015a26:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015a28:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8015a2c:	ed93 7a00 	vldr	s14, [r3]
 8015a30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015a34:	edc3 7a00 	vstr	s15, [r3]
	}
	if ((i + 2) < tr->n) {
 8015a38:	1ca3      	adds	r3, r4, #2
 8015a3a:	686a      	ldr	r2, [r5, #4]
 8015a3c:	4293      	cmp	r3, r2
 8015a3e:	da12      	bge.n	8015a66 <tract_addTurbulenceNoiseAtPosition+0xe2>
		tr->R[i + 2] += noise1;
 8015a40:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015a42:	3402      	adds	r4, #2
 8015a44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015a48:	edd3 7a00 	vldr	s15, [r3]
 8015a4c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8015a50:	edc3 7a00 	vstr	s15, [r3]
		tr->L[i + 2] += noise1;
 8015a54:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8015a56:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015a5a:	edd3 7a00 	vldr	s15, [r3]
 8015a5e:	ee77 7a88 	vadd.f32	s15, s15, s16
 8015a62:	edc3 7a00 	vstr	s15, [r3]
	}
 }
 8015a66:	ecbd 8b06 	vpop	{d8-d10}
 8015a6a:	bd38      	pop	{r3, r4, r5, pc}
 8015a6c:	3db851ec 	.word	0x3db851ec
 8015a70:	00000000 	.word	0x00000000

08015a74 <tract_addTurbulenceNoise>:
{
 8015a74:	b530      	push	{r4, r5, lr}
 8015a76:	ed2d 8b02 	vpush	{d8}
 8015a7a:	b083      	sub	sp, #12
	_tract* tr = *t;
 8015a7c:	6803      	ldr	r3, [r0, #0]
 8015a7e:	9301      	str	r3, [sp, #4]
	for (int i = 0; i < 2; i++)
 8015a80:	2400      	movs	r4, #0
 8015a82:	e023      	b.n	8015acc <tract_addTurbulenceNoise+0x58>
		Lfloat turbulenceNoise = tr->TnoiseGain * tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.20f);
 8015a84:	9801      	ldr	r0, [sp, #4]
 8015a86:	ed90 8a10 	vldr	s16, [r0, #64]	; 0x40
 8015a8a:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8015a8e:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8015a92:	30cc      	adds	r0, #204	; 0xcc
 8015a94:	f7fd f934 	bl	8012d00 <tNoise_tick>
 8015a98:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8015ad8 <tract_addTurbulenceNoise+0x64>
 8015a9c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015aa0:	4628      	mov	r0, r5
 8015aa2:	f7f9 fd54 	bl	800f54e <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
 8015aa6:	9b01      	ldr	r3, [sp, #4]
 8015aa8:	f104 0236 	add.w	r2, r4, #54	; 0x36
 8015aac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8015ab0:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8015ab4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8015ab8:	ed92 1a00 	vldr	s2, [r2]
 8015abc:	edd3 0a00 	vldr	s1, [r3]
 8015ac0:	ee28 0a00 	vmul.f32	s0, s16, s0
 8015ac4:	a801      	add	r0, sp, #4
 8015ac6:	f7ff ff5d 	bl	8015984 <tract_addTurbulenceNoiseAtPosition>
	for (int i = 0; i < 2; i++)
 8015aca:	3401      	adds	r4, #1
 8015acc:	2c01      	cmp	r4, #1
 8015ace:	ddd9      	ble.n	8015a84 <tract_addTurbulenceNoise+0x10>
}
 8015ad0:	b003      	add	sp, #12
 8015ad2:	ecbd 8b02 	vpop	{d8}
 8015ad6:	bd30      	pop	{r4, r5, pc}
 8015ad8:	3e4ccccd 	.word	0x3e4ccccd

08015adc <tract_compute>:


void tract_compute(tract* const t, Lfloat  in, Lfloat  lambda)
{
 8015adc:	b500      	push	{lr}
 8015ade:	ed2d 8b04 	vpush	{d8-d9}
 8015ae2:	b083      	sub	sp, #12
 8015ae4:	eef0 9a40 	vmov.f32	s19, s0
 8015ae8:	eeb0 8a60 	vmov.f32	s16, s1
	_tract* tr = *t;
 8015aec:	6800      	ldr	r0, [r0, #0]
 8015aee:	9001      	str	r0, [sp, #4]
    //Lfloat  amp;
    //int current_size;
   // _transient_pool *thepool;
    //_transient *n;

    Lfloat oneMinusLambda = 1.0f - lambda;
 8015af0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8015af4:	ee79 8a60 	vsub.f32	s17, s18, s1
		}
		n = n->next;
	}
                  */

    Lfloat UVnoise = tNoise_tick(&tr->whiteNoise);
 8015af8:	30cc      	adds	r0, #204	; 0xcc
 8015afa:	f7fd f901 	bl	8012d00 <tNoise_tick>
    UVnoise = tSVF_tick(&tr->aspirationNoiseFilt,UVnoise);
 8015afe:	9801      	ldr	r0, [sp, #4]
 8015b00:	30c8      	adds	r0, #200	; 0xc8
 8015b02:	f7f9 fd24 	bl	800f54e <tSVF_tick>

    in = tanhf((UVnoise * tr->AnoiseGain) + (in * (1.0f - tr->AnoiseGain)));
 8015b06:	9b01      	ldr	r3, [sp, #4]
 8015b08:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8015b0c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8015b10:	ee39 9a47 	vsub.f32	s18, s18, s14
 8015b14:	ee29 9a29 	vmul.f32	s18, s18, s19
 8015b18:	ee30 0a09 	vadd.f32	s0, s0, s18
 8015b1c:	f001 fc54 	bl	80173c8 <tanhf>
 8015b20:	eeb0 9a40 	vmov.f32	s18, s0

	tract_addTurbulenceNoise(&tr);
 8015b24:	a801      	add	r0, sp, #4
 8015b26:	f7ff ffa5 	bl	8015a74 <tract_addTurbulenceNoise>
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
 8015b2a:	9b01      	ldr	r3, [sp, #4]
 8015b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015b2e:	edd2 7a00 	vldr	s15, [r2]
 8015b32:	ed93 7a27 	vldr	s14, [r3, #156]	; 0x9c
 8015b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015b3c:	ee77 7a89 	vadd.f32	s15, s15, s18
 8015b40:	edc3 7a00 	vstr	s15, [r3]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
 8015b44:	9b01      	ldr	r3, [sp, #4]
 8015b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015b48:	6858      	ldr	r0, [r3, #4]
 8015b4a:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8015b4e:	4401      	add	r1, r0
 8015b50:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015b54:	edd2 7a00 	vldr	s15, [r2]
 8015b58:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8015b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b5e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8015b62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015b66:	edc3 7a00 	vstr	s15, [r3]

    for(i = 1; i < tr->n; i++) {
 8015b6a:	2301      	movs	r3, #1
 8015b6c:	e035      	b.n	8015bda <tract_compute+0xfe>
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 8015b6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8015b70:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015b74:	ed91 7a00 	vldr	s14, [r1]
 8015b78:	ee27 7a28 	vmul.f32	s14, s14, s17
 8015b7c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8015b7e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015b82:	edd1 7a00 	vldr	s15, [r1]
 8015b86:	ee67 7a88 	vmul.f32	s15, s15, s16
 8015b8a:	ee37 7a27 	vadd.f32	s14, s14, s15
        w = r * (tr->R[i - 1] + tr->L[i]);
 8015b8e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8015b90:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8015b94:	4418      	add	r0, r3
 8015b96:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8015b9a:	edd1 6a00 	vldr	s13, [r1]
 8015b9e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8015ba0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015ba4:	edd1 7a00 	vldr	s15, [r1]
 8015ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015bac:	ee67 7a87 	vmul.f32	s15, s15, s14
        tr->junction_outR[i] = tr->R[i - 1] - w;
 8015bb0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8015bb2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015bb6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8015bba:	edc2 6a00 	vstr	s13, [r2]
        tr->junction_outL[i] = tr->L[i] + w;
 8015bbe:	9901      	ldr	r1, [sp, #4]
 8015bc0:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8015bc2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015bc6:	ed92 7a00 	vldr	s14, [r2]
 8015bca:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8015bcc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015bd4:	edc2 7a00 	vstr	s15, [r2]
    for(i = 1; i < tr->n; i++) {
 8015bd8:	3301      	adds	r3, #1
 8015bda:	9a01      	ldr	r2, [sp, #4]
 8015bdc:	6851      	ldr	r1, [r2, #4]
 8015bde:	4299      	cmp	r1, r3
 8015be0:	dcc5      	bgt.n	8015b6e <tract_compute+0x92>
    }


    i = tr->nose_start;
 8015be2:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 8015be4:	edd2 7a23 	vldr	s15, [r2, #140]	; 0x8c
 8015be8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015bec:	ed92 7a20 	vldr	s14, [r2, #128]	; 0x80
 8015bf0:	ee27 7a08 	vmul.f32	s14, s14, s16
 8015bf4:	ee77 7a87 	vadd.f32	s15, s15, s14
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 8015bf8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8015bfa:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8015bfe:	4408      	add	r0, r1
 8015c00:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8015c04:	ed93 7a00 	vldr	s14, [r3]
 8015c08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015c14:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8015c16:	ed93 6a00 	vldr	s12, [r3]
 8015c1a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8015c1c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8015c20:	edd3 5a00 	vldr	s11, [r3]
 8015c24:	ee36 6a25 	vadd.f32	s12, s12, s11
 8015c28:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015c2c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8015c2e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8015c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c36:	edc3 7a00 	vstr	s15, [r3]
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
 8015c3a:	9b01      	ldr	r3, [sp, #4]
 8015c3c:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 8015c40:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015c44:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 8015c48:	ee27 7a08 	vmul.f32	s14, s14, s16
 8015c4c:	ee77 7a87 	vadd.f32	s15, s15, s14
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
 8015c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015c52:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015c56:	ed92 7a00 	vldr	s14, [r2]
 8015c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015c62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c64:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8015c68:	ed92 6a00 	vldr	s12, [r2]
 8015c6c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015c6e:	edd2 5a00 	vldr	s11, [r2]
 8015c72:	ee36 6a25 	vadd.f32	s12, s12, s11
 8015c76:	ee67 7a86 	vmul.f32	s15, s15, s12
 8015c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c7c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8015c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c84:	edc3 7a00 	vstr	s15, [r3]
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 8015c88:	9b01      	ldr	r3, [sp, #4]
 8015c8a:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8015c8e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8015c92:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8015c96:	ee27 7a08 	vmul.f32	s14, s14, s16
 8015c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 8015c9e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8015ca0:	ed92 7a00 	vldr	s14, [r2]
 8015ca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ca8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015cae:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015cb2:	edd2 6a00 	vldr	s13, [r2]
 8015cb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015cb8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8015cbc:	ed92 6a00 	vldr	s12, [r2]
 8015cc0:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015cc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015cca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015cce:	edc3 7a00 	vstr	s15, [r3]


    for(i = 0; i < tr->n; i++) {
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	e01c      	b.n	8015d10 <tract_compute+0x234>
        tr->R[i] = tr->junction_outR[i]*0.999f;
 8015cd6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8015cd8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015cdc:	edd1 7a00 	vldr	s15, [r1]
 8015ce0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8015ce2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015ce6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8015df8 <tract_compute+0x31c>
 8015cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015cee:	edc2 7a00 	vstr	s15, [r2]
        tr->L[i] = tr->junction_outL[i + 1]*0.999f;
 8015cf2:	9801      	ldr	r0, [sp, #4]
 8015cf4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8015cf6:	1c59      	adds	r1, r3, #1
 8015cf8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015cfc:	edd2 7a00 	vldr	s15, [r2]
 8015d00:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8015d02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015d0a:	edc3 7a00 	vstr	s15, [r3]
    for(i = 0; i < tr->n; i++) {
 8015d0e:	460b      	mov	r3, r1
 8015d10:	9a01      	ldr	r2, [sp, #4]
 8015d12:	6851      	ldr	r1, [r2, #4]
 8015d14:	4299      	cmp	r1, r3
 8015d16:	dcde      	bgt.n	8015cd6 <tract_compute+0x1fa>
    }
    tr->lip_output = tr->R[tr->n - 1];
 8015d18:	6a50      	ldr	r0, [r2, #36]	; 0x24
 8015d1a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8015d1e:	4419      	add	r1, r3
 8015d20:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8015d24:	6801      	ldr	r1, [r0, #0]
 8015d26:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0


    tr->nose_junc_outL[tr->nose_length] =
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8015d2a:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8015d2c:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8015d2e:	4403      	add	r3, r0
 8015d30:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015d34:	edd1 7a00 	vldr	s15, [r1]
 8015d38:	ed92 7a28 	vldr	s14, [r2, #160]	; 0xa0
    tr->nose_junc_outL[tr->nose_length] =
 8015d3c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8015d3e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8015d42:	ee67 7a87 	vmul.f32	s15, s15, s14
    tr->nose_junc_outL[tr->nose_length] =
 8015d46:	edc3 7a00 	vstr	s15, [r3]

    for(i = 1; i < tr->nose_length; i++) {
 8015d4a:	2301      	movs	r3, #1
 8015d4c:	e02a      	b.n	8015da4 <tract_compute+0x2c8>
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 8015d4e:	6f51      	ldr	r1, [r2, #116]	; 0x74
 8015d50:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015d54:	edd1 7a00 	vldr	s15, [r1]
 8015d58:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8015d5a:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8015d5e:	4418      	add	r0, r3
 8015d60:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8015d64:	ed91 7a00 	vldr	s14, [r1]
 8015d68:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8015d6a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015d6e:	edd1 6a00 	vldr	s13, [r1]
 8015d72:	ee77 6a26 	vadd.f32	s13, s14, s13
 8015d76:	ee67 7aa6 	vmul.f32	s15, s15, s13
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 8015d7a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8015d7c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015d80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015d84:	ed82 7a00 	vstr	s14, [r2]
        tr->nose_junc_outL[i] = tr->noseL[i] + w;
 8015d88:	9901      	ldr	r1, [sp, #4]
 8015d8a:	6e4a      	ldr	r2, [r1, #100]	; 0x64
 8015d8c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015d90:	ed92 7a00 	vldr	s14, [r2]
 8015d94:	6eca      	ldr	r2, [r1, #108]	; 0x6c
 8015d96:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d9e:	edc2 7a00 	vstr	s15, [r2]
    for(i = 1; i < tr->nose_length; i++) {
 8015da2:	3301      	adds	r3, #1
 8015da4:	9a01      	ldr	r2, [sp, #4]
 8015da6:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8015da8:	4299      	cmp	r1, r3
 8015daa:	dcd0      	bgt.n	8015d4e <tract_compute+0x272>
    }


    for(i = 0; i < tr->nose_length; i++) {
 8015dac:	2300      	movs	r3, #0
 8015dae:	e011      	b.n	8015dd4 <tract_compute+0x2f8>
        tr->noseR[i] = tr->nose_junc_outR[i];
 8015db0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8015db2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8015db4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015db8:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015dbc:	6809      	ldr	r1, [r1, #0]
 8015dbe:	6011      	str	r1, [r2, #0]
        tr->noseL[i] = tr->nose_junc_outL[i + 1];
 8015dc0:	9a01      	ldr	r2, [sp, #4]
 8015dc2:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 8015dc4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8015dc6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015dca:	3301      	adds	r3, #1
 8015dcc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8015dd0:	6809      	ldr	r1, [r1, #0]
 8015dd2:	6011      	str	r1, [r2, #0]
    for(i = 0; i < tr->nose_length; i++) {
 8015dd4:	9a01      	ldr	r2, [sp, #4]
 8015dd6:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8015dd8:	4299      	cmp	r1, r3
 8015dda:	dce9      	bgt.n	8015db0 <tract_compute+0x2d4>
    }
    tr->nose_output = tr->noseR[tr->nose_length - 1];
 8015ddc:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8015dde:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8015de2:	4408      	add	r0, r1
 8015de4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4

}
 8015dee:	b003      	add	sp, #12
 8015df0:	ecbd 8b04 	vpop	{d8-d9}
 8015df4:	f85d fb04 	ldr.w	pc, [sp], #4
 8015df8:	3f7fbe77 	.word	0x3f7fbe77

08015dfc <tract_calculate_nose_reflections>:

void tract_calculate_nose_reflections(tract* const t)
{
	_tract* tr = *t;
 8015dfc:	6803      	ldr	r3, [r0, #0]
	int i;

    for(i = 0; i < tr->nose_length; i++) {
 8015dfe:	2200      	movs	r2, #0
 8015e00:	e00c      	b.n	8015e1c <tract_calculate_nose_reflections+0x20>
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
 8015e02:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8015e04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015e08:	edd1 7a00 	vldr	s15, [r1]
 8015e0c:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
 8015e0e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015e12:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015e16:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->nose_length; i++) {
 8015e1a:	3201      	adds	r2, #1
 8015e1c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8015e1e:	4291      	cmp	r1, r2
 8015e20:	dcef      	bgt.n	8015e02 <tract_calculate_nose_reflections+0x6>
    }

    for(i = 1; i < tr->nose_length; i++) {
 8015e22:	2201      	movs	r2, #1
 8015e24:	e017      	b.n	8015e56 <tract_calculate_nose_reflections+0x5a>
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8015e26:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8015e28:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8015e2c:	4411      	add	r1, r2
 8015e2e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015e32:	edd1 7a00 	vldr	s15, [r1]
 8015e36:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8015e3a:	ed90 7a00 	vldr	s14, [r0]
 8015e3e:	ee77 6ac7 	vsub.f32	s13, s15, s14
            (tr->noseA[i-1] + tr->noseA[i]);
 8015e42:	ee77 7a87 	vadd.f32	s15, s15, s14
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8015e46:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8015e48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015e4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015e50:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->nose_length; i++) {
 8015e54:	3201      	adds	r2, #1
 8015e56:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8015e58:	4291      	cmp	r1, r2
 8015e5a:	dce4      	bgt.n	8015e26 <tract_calculate_nose_reflections+0x2a>
    }
}
 8015e5c:	4770      	bx	lr
	...

08015e60 <tract_initToPool>:
{
 8015e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e62:	ed2d 8b02 	vpush	{d8}
 8015e66:	b083      	sub	sp, #12
 8015e68:	4604      	mov	r4, r0
 8015e6a:	ee08 1a10 	vmov	s16, r1
 8015e6e:	4616      	mov	r6, r2
	_tMempool* m = *mp;
 8015e70:	6819      	ldr	r1, [r3, #0]
 8015e72:	9101      	str	r1, [sp, #4]
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8015e74:	20e8      	movs	r0, #232	; 0xe8
 8015e76:	f7fc fa87 	bl	8012388 <mpool_calloc>
 8015e7a:	6020      	str	r0, [r4, #0]
 8015e7c:	9000      	str	r0, [sp, #0]
	tr->mempool = m;
 8015e7e:	9b01      	ldr	r3, [sp, #4]
 8015e80:	6003      	str	r3, [r0, #0]
	LEAF* leaf = m->leaf;
 8015e82:	9901      	ldr	r1, [sp, #4]
 8015e84:	684c      	ldr	r4, [r1, #4]
    Lfloat n = numTractSections;
 8015e86:	eef8 7ac8 	vcvt.f32.s32	s15, s16
    tr->maxNumTractSections = maxNumTractSections;
 8015e8a:	9d00      	ldr	r5, [sp, #0]
 8015e8c:	612e      	str	r6, [r5, #16]
    tr->n = n; //44
 8015e8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8015e92:	ed85 7a01 	vstr	s14, [r5, #4]
    tr->invN = 1.0f / n;
 8015e96:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8015e9a:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8015e9e:	ed85 7a02 	vstr	s14, [r5, #8]
    tr->nose_length = n*0.636363636363636f; //28
 8015ea2:	ed9f 6ab1 	vldr	s12, [pc, #708]	; 8016168 <tract_initToPool+0x308>
 8015ea6:	ee27 6a86 	vmul.f32	s12, s15, s12
 8015eaa:	eebd 6ac6 	vcvt.s32.f32	s12, s12
 8015eae:	ed85 6a12 	vstr	s12, [r5, #72]	; 0x48
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8015eb2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8015eb6:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8015eba:	ee37 7a05 	vadd.f32	s14, s14, s10
 8015ebe:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015ec2:	ed85 7a13 	vstr	s14, [r5, #76]	; 0x4c
    tr->reflection_left = 0.0f;
 8015ec6:	2300      	movs	r3, #0
 8015ec8:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    tr->reflection_right = 0.0f;
 8015ecc:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    tr->reflection_nose = 0.0f;
 8015ed0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
    tr->new_reflection_left = 0.0f;
 8015ed4:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    tr->new_reflection_right= 0.0f;
 8015ed8:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
    tr->new_reflection_nose = 0.0f;
 8015edc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
    tr->velum_target = 0.01f;
 8015ee0:	4aa2      	ldr	r2, [pc, #648]	; (801616c <tract_initToPool+0x30c>)
 8015ee2:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
    tr->glottal_reflection = 0.75f;
 8015ee6:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8015eea:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
    tr->lip_reflection = -0.85f;
 8015eee:	4aa0      	ldr	r2, [pc, #640]	; (8016170 <tract_initToPool+0x310>)
 8015ef0:	f8c5 20a0 	str.w	r2, [r5, #160]	; 0xa0
    tr->last_obstruction = -1;
 8015ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015ef8:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
    tr->movement_speed = 200.0f;
 8015efc:	4a9d      	ldr	r2, [pc, #628]	; (8016174 <tract_initToPool+0x314>)
 8015efe:	f8c5 20ac 	str.w	r2, [r5, #172]	; 0xac
    tr->lip_output = 0.0f;
 8015f02:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
    tr->nose_output = 0.0f;
 8015f06:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
    tr->tip_start = n*0.727272727272727f;
 8015f0a:	eddf 6a9b 	vldr	s13, [pc, #620]	; 8016178 <tract_initToPool+0x318>
 8015f0e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8015f12:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8015f16:	edc5 6a14 	vstr	s13, [r5, #80]	; 0x50
    tr->blade_start = n*0.227272727272727f;
 8015f1a:	ed9f 7a98 	vldr	s14, [pc, #608]	; 801617c <tract_initToPool+0x31c>
 8015f1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015f22:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8015f26:	ed85 7a15 	vstr	s14, [r5, #84]	; 0x54
    tr->lip_start = n*0.886363636363636f;
 8015f2a:	eddf 5a95 	vldr	s11, [pc, #596]	; 8016180 <tract_initToPool+0x320>
 8015f2e:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8015f32:	eefd 5ae5 	vcvt.s32.f32	s11, s11
 8015f36:	edc5 5a16 	vstr	s11, [r5, #88]	; 0x58
    tr->TnoiseGain = 1.0f;
 8015f3a:	ed85 5a10 	vstr	s10, [r5, #64]	; 0x40
    tr->AnoiseGain = 1.0f;
 8015f3e:	ed85 5a11 	vstr	s10, [r5, #68]	; 0x44
    tr->diameterScale = 1.0f;
 8015f42:	ed85 5a2f 	vstr	s10, [r5, #188]	; 0xbc
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8015f46:	eddf 5a8f 	vldr	s11, [pc, #572]	; 8016184 <tract_initToPool+0x324>
 8015f4a:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8015f4e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015f52:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8015f56:	edc5 6a17 	vstr	s13, [r5, #92]	; 0x5c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8015f5a:	eddf 6a8b 	vldr	s13, [pc, #556]	; 8016188 <tract_initToPool+0x328>
 8015f5e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8015f62:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015f66:	ee37 7a26 	vadd.f32	s14, s14, s13
 8015f6a:	ed85 7a18 	vstr	s14, [r5, #96]	; 0x60
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8015f6e:	ed9f 7a87 	vldr	s14, [pc, #540]	; 801618c <tract_initToPool+0x32c>
 8015f72:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015f76:	ed85 7a34 	vstr	s14, [r5, #208]	; 0xd0
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8015f7a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8015f7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015f82:	edc5 7a35 	vstr	s15, [r5, #212]	; 0xd4
	tr->turbuluencePointDiameter[0] = 1.5f;
 8015f86:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8015f8a:	f8c5 30d8 	str.w	r3, [r5, #216]	; 0xd8
	tr->turbuluencePointDiameter[1] = 1.5f;
 8015f8e:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 8015f92:	ee85 8a06 	vdiv.f32	s16, s10, s12
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015f96:	00b7      	lsls	r7, r6, #2
 8015f98:	4638      	mov	r0, r7
 8015f9a:	f7fc f9f5 	bl	8012388 <mpool_calloc>
 8015f9e:	6168      	str	r0, [r5, #20]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fa0:	9d00      	ldr	r5, [sp, #0]
 8015fa2:	9901      	ldr	r1, [sp, #4]
 8015fa4:	4638      	mov	r0, r7
 8015fa6:	f7fc f9ef 	bl	8012388 <mpool_calloc>
 8015faa:	61a8      	str	r0, [r5, #24]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fac:	9d00      	ldr	r5, [sp, #0]
 8015fae:	9901      	ldr	r1, [sp, #4]
 8015fb0:	4638      	mov	r0, r7
 8015fb2:	f7fc f9e9 	bl	8012388 <mpool_calloc>
 8015fb6:	61e8      	str	r0, [r5, #28]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fb8:	9d00      	ldr	r5, [sp, #0]
 8015fba:	9901      	ldr	r1, [sp, #4]
 8015fbc:	4638      	mov	r0, r7
 8015fbe:	f7fc f9e3 	bl	8012388 <mpool_calloc>
 8015fc2:	6228      	str	r0, [r5, #32]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fc4:	9d00      	ldr	r5, [sp, #0]
 8015fc6:	9901      	ldr	r1, [sp, #4]
 8015fc8:	4638      	mov	r0, r7
 8015fca:	f7fc f9dd 	bl	8012388 <mpool_calloc>
 8015fce:	62a8      	str	r0, [r5, #40]	; 0x28
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8015fd0:	9d00      	ldr	r5, [sp, #0]
 8015fd2:	9901      	ldr	r1, [sp, #4]
 8015fd4:	4638      	mov	r0, r7
 8015fd6:	f7fc f9d7 	bl	8012388 <mpool_calloc>
 8015fda:	6268      	str	r0, [r5, #36]	; 0x24
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8015fdc:	1c72      	adds	r2, r6, #1
 8015fde:	0095      	lsls	r5, r2, #2
 8015fe0:	9e00      	ldr	r6, [sp, #0]
 8015fe2:	9901      	ldr	r1, [sp, #4]
 8015fe4:	4628      	mov	r0, r5
 8015fe6:	f7fc f9cf 	bl	8012388 <mpool_calloc>
 8015fea:	62f0      	str	r0, [r6, #44]	; 0x2c
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8015fec:	9e00      	ldr	r6, [sp, #0]
 8015fee:	9901      	ldr	r1, [sp, #4]
 8015ff0:	4628      	mov	r0, r5
 8015ff2:	f7fc f9c9 	bl	8012388 <mpool_calloc>
 8015ff6:	6330      	str	r0, [r6, #48]	; 0x30
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8015ff8:	9e00      	ldr	r6, [sp, #0]
 8015ffa:	9901      	ldr	r1, [sp, #4]
 8015ffc:	4628      	mov	r0, r5
 8015ffe:	f7fc f9c3 	bl	8012388 <mpool_calloc>
 8016002:	6370      	str	r0, [r6, #52]	; 0x34
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8016004:	9e00      	ldr	r6, [sp, #0]
 8016006:	9901      	ldr	r1, [sp, #4]
 8016008:	4628      	mov	r0, r5
 801600a:	f7fc f9bd 	bl	8012388 <mpool_calloc>
 801600e:	63b0      	str	r0, [r6, #56]	; 0x38
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016010:	9e00      	ldr	r6, [sp, #0]
 8016012:	9901      	ldr	r1, [sp, #4]
 8016014:	4638      	mov	r0, r7
 8016016:	f7fc f9b7 	bl	8012388 <mpool_calloc>
 801601a:	63f0      	str	r0, [r6, #60]	; 0x3c
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801601c:	9e00      	ldr	r6, [sp, #0]
 801601e:	9901      	ldr	r1, [sp, #4]
 8016020:	4638      	mov	r0, r7
 8016022:	f7fc f9b1 	bl	8012388 <mpool_calloc>
 8016026:	6670      	str	r0, [r6, #100]	; 0x64
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016028:	9e00      	ldr	r6, [sp, #0]
 801602a:	9901      	ldr	r1, [sp, #4]
 801602c:	4638      	mov	r0, r7
 801602e:	f7fc f9ab 	bl	8012388 <mpool_calloc>
 8016032:	66b0      	str	r0, [r6, #104]	; 0x68
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8016034:	9e00      	ldr	r6, [sp, #0]
 8016036:	9901      	ldr	r1, [sp, #4]
 8016038:	4628      	mov	r0, r5
 801603a:	f7fc f9a5 	bl	8012388 <mpool_calloc>
 801603e:	66f0      	str	r0, [r6, #108]	; 0x6c
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8016040:	9e00      	ldr	r6, [sp, #0]
 8016042:	9901      	ldr	r1, [sp, #4]
 8016044:	4628      	mov	r0, r5
 8016046:	f7fc f99f 	bl	8012388 <mpool_calloc>
 801604a:	6730      	str	r0, [r6, #112]	; 0x70
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801604c:	9d00      	ldr	r5, [sp, #0]
 801604e:	9901      	ldr	r1, [sp, #4]
 8016050:	4638      	mov	r0, r7
 8016052:	f7fc f999 	bl	8012388 <mpool_calloc>
 8016056:	67a8      	str	r0, [r5, #120]	; 0x78
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016058:	9d00      	ldr	r5, [sp, #0]
 801605a:	9901      	ldr	r1, [sp, #4]
 801605c:	4638      	mov	r0, r7
 801605e:	f7fc f993 	bl	8012388 <mpool_calloc>
 8016062:	6768      	str	r0, [r5, #116]	; 0x74
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8016064:	9d00      	ldr	r5, [sp, #0]
 8016066:	9901      	ldr	r1, [sp, #4]
 8016068:	4638      	mov	r0, r7
 801606a:	f7fc f98d 	bl	8012388 <mpool_calloc>
 801606e:	67e8      	str	r0, [r5, #124]	; 0x7c
    for(i = 0; i < tr->n; i++) {
 8016070:	2300      	movs	r3, #0
 8016072:	e014      	b.n	801609e <tract_initToPool+0x23e>
            diameter = 0.6f;
 8016074:	4a46      	ldr	r2, [pc, #280]	; (8016190 <tract_initToPool+0x330>)
            tr->new_diameter[i] = diameter;
 8016076:	6a09      	ldr	r1, [r1, #32]
 8016078:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801607c:	600a      	str	r2, [r1, #0]
            tr->target_diameter[i] =
 801607e:	9900      	ldr	r1, [sp, #0]
 8016080:	69c9      	ldr	r1, [r1, #28]
 8016082:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8016086:	600a      	str	r2, [r1, #0]
            tr->rest_diameter[i] =
 8016088:	9900      	ldr	r1, [sp, #0]
 801608a:	6989      	ldr	r1, [r1, #24]
 801608c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8016090:	600a      	str	r2, [r1, #0]
        tr->diameter[i] =
 8016092:	9900      	ldr	r1, [sp, #0]
 8016094:	6949      	ldr	r1, [r1, #20]
 8016096:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801609a:	600a      	str	r2, [r1, #0]
    for(i = 0; i < tr->n; i++) {
 801609c:	3301      	adds	r3, #1
 801609e:	9900      	ldr	r1, [sp, #0]
 80160a0:	684a      	ldr	r2, [r1, #4]
 80160a2:	429a      	cmp	r2, r3
 80160a4:	dd26      	ble.n	80160f4 <tract_initToPool+0x294>
        if(i < (int)(((7.0f*tr->invN) * tr->n) - 0.5f)) { //was 7
 80160a6:	edd1 6a02 	vldr	s13, [r1, #8]
 80160aa:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 80160ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80160b2:	ee07 2a10 	vmov	s14, r2
 80160b6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80160ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80160be:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80160c2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80160c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80160ca:	ee17 2a90 	vmov	r2, s15
 80160ce:	429a      	cmp	r2, r3
 80160d0:	dcd0      	bgt.n	8016074 <tract_initToPool+0x214>
        } else if( i < (int)((12.0f*tr->invN) * (Lfloat)tr->n)) { //was 12
 80160d2:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 80160d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80160da:	ee27 7a26 	vmul.f32	s14, s14, s13
 80160de:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80160e2:	ee17 2a10 	vmov	r2, s14
 80160e6:	429a      	cmp	r2, r3
 80160e8:	dd01      	ble.n	80160ee <tract_initToPool+0x28e>
            diameter = 1.1f;
 80160ea:	4a2a      	ldr	r2, [pc, #168]	; (8016194 <tract_initToPool+0x334>)
 80160ec:	e7c3      	b.n	8016076 <tract_initToPool+0x216>
            diameter = 1.5f;
 80160ee:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80160f2:	e7c0      	b.n	8016076 <tract_initToPool+0x216>
	for(i = 0; i < tr->nose_length; i++) {
 80160f4:	2300      	movs	r3, #0
 80160f6:	e00e      	b.n	8016116 <tract_initToPool+0x2b6>
			diameter = 0.4f + 1.6f * d;
 80160f8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8016198 <tract_initToPool+0x338>
 80160fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016100:	ed9f 7a26 	vldr	s14, [pc, #152]	; 801619c <tract_initToPool+0x33c>
 8016104:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016108:	e024      	b.n	8016154 <tract_initToPool+0x2f4>
		tr->nose_diameter[i] = diameter;
 801610a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 801610c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8016110:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < tr->nose_length; i++) {
 8016114:	3301      	adds	r3, #1
 8016116:	9800      	ldr	r0, [sp, #0]
 8016118:	6c82      	ldr	r2, [r0, #72]	; 0x48
 801611a:	429a      	cmp	r2, r3
 801611c:	dd4c      	ble.n	80161b8 <tract_initToPool+0x358>
		d = 2.0f * ((Lfloat)i * invNoseLength);
 801611e:	ee07 3a90 	vmov	s15, r3
 8016122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016126:	ee67 7a88 	vmul.f32	s15, s15, s16
 801612a:	ee77 7aa7 	vadd.f32	s15, s15, s15
		if(d < 1.0f) {
 801612e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8016136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801613a:	d4dd      	bmi.n	80160f8 <tract_initToPool+0x298>
			diameter = 0.5f + 1.5f*(2.0f-d);
 801613c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016144:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8016148:	ee67 7a87 	vmul.f32	s15, s15, s14
 801614c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016150:	ee77 7a87 	vadd.f32	s15, s15, s14
		diameter = MIN(diameter, 1.9f);
 8016154:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80161a0 <tract_initToPool+0x340>
 8016158:	eef4 7ac7 	vcmpe.f32	s15, s14
 801615c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016160:	d4d3      	bmi.n	801610a <tract_initToPool+0x2aa>
 8016162:	eef0 7a47 	vmov.f32	s15, s14
 8016166:	e7d0      	b.n	801610a <tract_initToPool+0x2aa>
 8016168:	3f22e8ba 	.word	0x3f22e8ba
 801616c:	3c23d70a 	.word	0x3c23d70a
 8016170:	bf59999a 	.word	0xbf59999a
 8016174:	43480000 	.word	0x43480000
 8016178:	3f3a2e8c 	.word	0x3f3a2e8c
 801617c:	3e68ba2f 	.word	0x3e68ba2f
 8016180:	3f62e8ba 	.word	0x3f62e8ba
 8016184:	3d8ba2e9 	.word	0x3d8ba2e9
 8016188:	3d3a2e8c 	.word	0x3d3a2e8c
 801618c:	3ee66666 	.word	0x3ee66666
 8016190:	3f19999a 	.word	0x3f19999a
 8016194:	3f8ccccd 	.word	0x3f8ccccd
 8016198:	3fcccccd 	.word	0x3fcccccd
 801619c:	3ecccccd 	.word	0x3ecccccd
 80161a0:	3ff33333 	.word	0x3ff33333
 80161a4:	3f333333 	.word	0x3f333333
 80161a8:	447c8000 	.word	0x447c8000
 80161ac:	44778000 	.word	0x44778000
 80161b0:	43fa0000 	.word	0x43fa0000
 80161b4:	42800000 	.word	0x42800000
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.7f, &m);
 80161b8:	ed1f 8a06 	vldr	s16, [pc, #-24]	; 80161a4 <tract_initToPool+0x344>
 80161bc:	aa01      	add	r2, sp, #4
 80161be:	eef0 0a48 	vmov.f32	s1, s16
 80161c2:	ed1f 0a07 	vldr	s0, [pc, #-28]	; 80161a8 <tract_initToPool+0x348>
 80161c6:	2102      	movs	r1, #2
 80161c8:	30c0      	adds	r0, #192	; 0xc0
 80161ca:	f7f9 f92d 	bl	800f428 <tSVF_initToPool>
	tSVF_initToPool(&tr->fricativeNoiseFilt[1], SVFTypeBandpass, 990.0f, 0.7f, &m);
 80161ce:	aa01      	add	r2, sp, #4
 80161d0:	eef0 0a48 	vmov.f32	s1, s16
 80161d4:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 80161ac <tract_initToPool+0x34c>
 80161d8:	2102      	movs	r1, #2
 80161da:	9800      	ldr	r0, [sp, #0]
 80161dc:	30c4      	adds	r0, #196	; 0xc4
 80161de:	f7f9 f923 	bl	800f428 <tSVF_initToPool>
	tSVF_initToPool(&tr->aspirationNoiseFilt, SVFTypeBandpass, 500.0f, 0.7f, &m);
 80161e2:	aa01      	add	r2, sp, #4
 80161e4:	eef0 0a48 	vmov.f32	s1, s16
 80161e8:	ed1f 0a0f 	vldr	s0, [pc, #-60]	; 80161b0 <tract_initToPool+0x350>
 80161ec:	2102      	movs	r1, #2
 80161ee:	9800      	ldr	r0, [sp, #0]
 80161f0:	30c8      	adds	r0, #200	; 0xc8
 80161f2:	f7f9 f919 	bl	800f428 <tSVF_initToPool>
	tNoise_initToPool(&tr->whiteNoise, WhiteNoise, &m);
 80161f6:	aa01      	add	r2, sp, #4
 80161f8:	2100      	movs	r1, #0
 80161fa:	9800      	ldr	r0, [sp, #0]
 80161fc:	30cc      	adds	r0, #204	; 0xcc
 80161fe:	f7fc fd65 	bl	8012ccc <tNoise_initToPool>
    tract_calculate_reflections(&tr);
 8016202:	4668      	mov	r0, sp
 8016204:	f7ff f9c8 	bl	8015598 <tract_calculate_reflections>
    tract_calculate_nose_reflections(&tr);
 8016208:	4668      	mov	r0, sp
 801620a:	f7ff fdf7 	bl	8015dfc <tract_calculate_nose_reflections>
    tr->nose_diameter[0] = tr->velum_target;
 801620e:	9b00      	ldr	r3, [sp, #0]
 8016210:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8016212:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016216:	6013      	str	r3, [r2, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
 8016218:	ed94 7a00 	vldr	s14, [r4]
 801621c:	9d00      	ldr	r5, [sp, #0]
 801621e:	ed5f 6a1b 	vldr	s13, [pc, #-108]	; 80161b4 <tract_initToPool+0x354>
 8016222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016226:	edc5 7a2e 	vstr	s15, [r5, #184]	; 0xb8
    tr->T = 1.0f / leaf->sampleRate;
 801622a:	ed94 7a00 	vldr	s14, [r4]
 801622e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016236:	edc5 7a39 	vstr	s15, [r5, #228]	; 0xe4
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 801623a:	9901      	ldr	r1, [sp, #4]
 801623c:	201c      	movs	r0, #28
 801623e:	f7fc f82b 	bl	8012298 <mpool_alloc>
 8016242:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
    tr->tpool->size = 0;
 8016246:	9b00      	ldr	r3, [sp, #0]
 8016248:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 801624c:	2400      	movs	r4, #0
 801624e:	6154      	str	r4, [r2, #20]
    tr->tpool->next_free = 0;
 8016250:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016254:	619c      	str	r4, [r3, #24]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8016256:	2c03      	cmp	r4, #3
 8016258:	dc2d      	bgt.n	80162b6 <tract_initToPool+0x456>
    	tr->tpool->pool[i] = (_transient*) mpool_alloc(sizeof(_transient), m);
 801625a:	9b00      	ldr	r3, [sp, #0]
 801625c:	f8d3 50e0 	ldr.w	r5, [r3, #224]	; 0xe0
 8016260:	9901      	ldr	r1, [sp, #4]
 8016262:	2020      	movs	r0, #32
 8016264:	f7fc f818 	bl	8012298 <mpool_alloc>
 8016268:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
        tr->tpool->pool[i]->is_free = 1;
 801626c:	9b00      	ldr	r3, [sp, #0]
 801626e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8016272:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8016276:	2101      	movs	r1, #1
 8016278:	7511      	strb	r1, [r2, #20]
        tr->tpool->pool[i]->id = i;
 801627a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 801627e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 8016282:	6194      	str	r4, [r2, #24]
        tr->tpool->pool[i]->position = 0;
 8016284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8016288:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801628c:	2200      	movs	r2, #0
 801628e:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
 8016290:	9a00      	ldr	r2, [sp, #0]
 8016292:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8016296:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 801629a:	2300      	movs	r3, #0
 801629c:	604b      	str	r3, [r1, #4]
        tr->tpool->pool[i]->strength = 0;
 801629e:	f8d2 10e0 	ldr.w	r1, [r2, #224]	; 0xe0
 80162a2:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
 80162a6:	60cb      	str	r3, [r1, #12]
        tr->tpool->pool[i]->exponent = 0;
 80162a8:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 80162ac:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80162b0:	6113      	str	r3, [r2, #16]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 80162b2:	3401      	adds	r4, #1
 80162b4:	e7cf      	b.n	8016256 <tract_initToPool+0x3f6>
}
 80162b6:	b003      	add	sp, #12
 80162b8:	ecbd 8b02 	vpop	{d8}
 80162bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162be:	bf00      	nop

080162c0 <move_towards>:

Lfloat move_towards(Lfloat current, Lfloat target,
        Lfloat amt_up, Lfloat amt_down)
{
    Lfloat tmp;
    if(current < target) {
 80162c0:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80162c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162c8:	d50b      	bpl.n	80162e2 <move_towards+0x22>
        tmp = current + amt_up;
 80162ca:	ee30 0a01 	vadd.f32	s0, s0, s2
        return MIN(tmp, target);
 80162ce:	eef4 0ac0 	vcmpe.f32	s1, s0
 80162d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162d6:	dd01      	ble.n	80162dc <move_towards+0x1c>
 80162d8:	eef0 0a40 	vmov.f32	s1, s0
 80162dc:	eeb0 0a60 	vmov.f32	s0, s1
 80162e0:	4770      	bx	lr
    } else {
        tmp = current - amt_down;
 80162e2:	ee30 0a61 	vsub.f32	s0, s0, s3
        return MAX(tmp, target);
 80162e6:	eef4 0ac0 	vcmpe.f32	s1, s0
 80162ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162ee:	d501      	bpl.n	80162f4 <move_towards+0x34>
 80162f0:	eef0 0a40 	vmov.f32	s1, s0
 80162f4:	eeb0 0a60 	vmov.f32	s0, s1
    }
    return 0.0f;
}
 80162f8:	4770      	bx	lr
	...

080162fc <tract_reshape>:
{
 80162fc:	b570      	push	{r4, r5, r6, lr}
 80162fe:	ed2d 8b02 	vpush	{d8}
	_tract* tr = *t;
 8016302:	6805      	ldr	r5, [r0, #0]
    amount = tr->block_time * tr->movement_speed;
 8016304:	ed95 8a2e 	vldr	s16, [r5, #184]	; 0xb8
 8016308:	edd5 7a2b 	vldr	s15, [r5, #172]	; 0xac
 801630c:	ee28 8a27 	vmul.f32	s16, s16, s15
    for(i = 0; i < tr->n; i++) {
 8016310:	2400      	movs	r4, #0
 8016312:	e00a      	b.n	801632a <tract_reshape+0x2e>
        if(i < tr->nose_start) slow_return = 0.6f;
 8016314:	ed9f 1a28 	vldr	s2, [pc, #160]	; 80163b8 <tract_reshape+0xbc>
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8016318:	ee78 1a08 	vadd.f32	s3, s16, s16
 801631c:	ee21 1a08 	vmul.f32	s2, s2, s16
 8016320:	f7ff ffce 	bl	80162c0 <move_towards>
 8016324:	ed86 0a00 	vstr	s0, [r6]
    for(i = 0; i < tr->n; i++) {
 8016328:	3401      	adds	r4, #1
 801632a:	686b      	ldr	r3, [r5, #4]
 801632c:	42a3      	cmp	r3, r4
 801632e:	dd27      	ble.n	8016380 <tract_reshape+0x84>
        diameter = tr->diameter[i];
 8016330:	696e      	ldr	r6, [r5, #20]
 8016332:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8016336:	ed96 0a00 	vldr	s0, [r6]
        target_diameter = tr->target_diameter[i];
 801633a:	69eb      	ldr	r3, [r5, #28]
 801633c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016340:	edd3 0a00 	vldr	s1, [r3]
        if(i < tr->nose_start) slow_return = 0.6f;
 8016344:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8016346:	42a3      	cmp	r3, r4
 8016348:	dce4      	bgt.n	8016314 <tract_reshape+0x18>
        else if(i >= tr->tip_start) slow_return = 1.0f;
 801634a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801634c:	42a2      	cmp	r2, r4
 801634e:	dd14      	ble.n	801637a <tract_reshape+0x7e>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 8016350:	1ae1      	subs	r1, r4, r3
 8016352:	ee07 1a10 	vmov	s14, r1
 8016356:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801635a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80163bc <tract_reshape+0xc0>
 801635e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016362:	1ad2      	subs	r2, r2, r3
 8016364:	ee07 2a90 	vmov	s15, r2
 8016368:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801636c:	ee87 1a27 	vdiv.f32	s2, s14, s15
            slow_return =
 8016370:	eddf 7a11 	vldr	s15, [pc, #68]	; 80163b8 <tract_reshape+0xbc>
 8016374:	ee31 1a27 	vadd.f32	s2, s2, s15
 8016378:	e7ce      	b.n	8016318 <tract_reshape+0x1c>
        else if(i >= tr->tip_start) slow_return = 1.0f;
 801637a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801637e:	e7cb      	b.n	8016318 <tract_reshape+0x1c>
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 8016380:	6fac      	ldr	r4, [r5, #120]	; 0x78
 8016382:	eddf 1a0f 	vldr	s3, [pc, #60]	; 80163c0 <tract_reshape+0xc4>
 8016386:	ee68 1a21 	vmul.f32	s3, s16, s3
 801638a:	eeb5 1a00 	vmov.f32	s2, #80	; 0x3e800000  0.250
 801638e:	ee28 1a01 	vmul.f32	s2, s16, s2
 8016392:	edd5 0a26 	vldr	s1, [r5, #152]	; 0x98
 8016396:	ed94 0a00 	vldr	s0, [r4]
 801639a:	f7ff ff91 	bl	80162c0 <move_towards>
 801639e:	ed84 0a00 	vstr	s0, [r4]
    tr->noseA[0] = tr->nose_diameter[0] * tr->nose_diameter[0];
 80163a2:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80163a4:	edd3 7a00 	vldr	s15, [r3]
 80163a8:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80163aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80163ae:	edc3 7a00 	vstr	s15, [r3]
}
 80163b2:	ecbd 8b02 	vpop	{d8}
 80163b6:	bd70      	pop	{r4, r5, r6, pc}
 80163b8:	3f19999a 	.word	0x3f19999a
 80163bc:	3ecccccd 	.word	0x3ecccccd
 80163c0:	3dcccccd 	.word	0x3dcccccd

080163c4 <tVoc_initToPool>:
{
	tVoc_initToPool   (voc, numTractSections, maxNumTractSections, &leaf->mempool);
}

void    tVoc_initToPool   (tVoc* const voc, int numTractSections, int maxNumTractSections, tMempool* const mp)
{
 80163c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163c6:	b083      	sub	sp, #12
 80163c8:	4607      	mov	r7, r0
 80163ca:	460d      	mov	r5, r1
 80163cc:	4616      	mov	r6, r2
	_tMempool* m = *mp;
 80163ce:	6819      	ldr	r1, [r3, #0]
 80163d0:	9101      	str	r1, [sp, #4]
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
 80163d2:	2018      	movs	r0, #24
 80163d4:	f7fb ff60 	bl	8012298 <mpool_alloc>
 80163d8:	4604      	mov	r4, r0
 80163da:	6038      	str	r0, [r7, #0]
	v->mempool = m;
 80163dc:	9b01      	ldr	r3, [sp, #4]
 80163de:	f840 3b04 	str.w	r3, [r0], #4
	glottis_initToPool(&v->glot, &m); /* initialize glottis */
 80163e2:	a901      	add	r1, sp, #4
 80163e4:	f7ff f82e 	bl	8015444 <glottis_initToPool>
	tract_initToPool(&v->tr, numTractSections, maxNumTractSections, &m); /* initialize vocal tract */
 80163e8:	ab01      	add	r3, sp, #4
 80163ea:	4632      	mov	r2, r6
 80163ec:	4629      	mov	r1, r5
 80163ee:	f104 0008 	add.w	r0, r4, #8
 80163f2:	f7ff fd35 	bl	8015e60 <tract_initToPool>
	v->counter = 0;
 80163f6:	2300      	movs	r3, #0
 80163f8:	6123      	str	r3, [r4, #16]
}
 80163fa:	b003      	add	sp, #12
 80163fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080163fe <tVoc_init>:
{
 80163fe:	b508      	push	{r3, lr}
	tVoc_initToPool   (voc, numTractSections, maxNumTractSections, &leaf->mempool);
 8016400:	3318      	adds	r3, #24
 8016402:	f7ff ffdf 	bl	80163c4 <tVoc_initToPool>
}
 8016406:	bd08      	pop	{r3, pc}

08016408 <tVoc_tick>:
	//mpool_free((char*)v->buf, v->mempool);
	mpool_free((char*)v, v->mempool);
}

Lfloat   tVoc_tick         (tVoc* const voc)
{
 8016408:	b538      	push	{r3, r4, r5, lr}
 801640a:	ed2d 8b04 	vpush	{d8-d9}
	_tVoc* v = *voc;
 801640e:	6804      	ldr	r4, [r0, #0]
	Lfloat vocal_output, glot;
	Lfloat lambda1,lambda2;

	if(v->counter == 0) {
 8016410:	6923      	ldr	r3, [r4, #16]
 8016412:	b393      	cbz	r3, 801647a <tVoc_tick+0x72>
		tract_calculate_reflections(&v->tr);
	}

	//Lfloat finalOutput = v->buf[v->counter];
	vocal_output = 0.0f;
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 8016414:	edd4 7a04 	vldr	s15, [r4, #16]
 8016418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801641c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80164b8 <tVoc_tick+0xb0>
 8016420:	ee27 8a87 	vmul.f32	s16, s15, s14
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
 8016424:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8016428:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801642c:	ee67 8a87 	vmul.f32	s17, s15, s14
	glot = glottis_compute(&v->glot);
 8016430:	1d20      	adds	r0, r4, #4
 8016432:	f7ff f82f 	bl	8015494 <glottis_compute>
 8016436:	eeb0 9a40 	vmov.f32	s18, s0

	tract_compute(&v->tr, glot, lambda1);
 801643a:	f104 0508 	add.w	r5, r4, #8
 801643e:	eef0 0a48 	vmov.f32	s1, s16
 8016442:	4628      	mov	r0, r5
 8016444:	f7ff fb4a 	bl	8015adc <tract_compute>
	vocal_output += v->tr->lip_output + v->tr->nose_output;
 8016448:	68a3      	ldr	r3, [r4, #8]
 801644a:	ed93 8a2c 	vldr	s16, [r3, #176]	; 0xb0
 801644e:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8016452:	ee38 8a27 	vadd.f32	s16, s16, s15
 8016456:	eddf 7a19 	vldr	s15, [pc, #100]	; 80164bc <tVoc_tick+0xb4>
 801645a:	ee38 8a27 	vadd.f32	s16, s16, s15

	if (v->doubleCompute)
 801645e:	68e3      	ldr	r3, [r4, #12]
 8016460:	b9a3      	cbnz	r3, 801648c <tVoc_tick+0x84>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
		vocal_output *= 0.125f;
	}
	else
	{
		vocal_output *= 0.25f;
 8016462:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8016466:	ee28 0a27 	vmul.f32	s0, s16, s15
	}

	v->counter = (v->counter + 1) & 63;
 801646a:	6923      	ldr	r3, [r4, #16]
 801646c:	3301      	adds	r3, #1
 801646e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016472:	6123      	str	r3, [r4, #16]
	return vocal_output;
}
 8016474:	ecbd 8b04 	vpop	{d8-d9}
 8016478:	bd38      	pop	{r3, r4, r5, pc}
		tract_reshape(&v->tr);
 801647a:	f104 0508 	add.w	r5, r4, #8
 801647e:	4628      	mov	r0, r5
 8016480:	f7ff ff3c 	bl	80162fc <tract_reshape>
		tract_calculate_reflections(&v->tr);
 8016484:	4628      	mov	r0, r5
 8016486:	f7ff f887 	bl	8015598 <tract_calculate_reflections>
 801648a:	e7c3      	b.n	8016414 <tVoc_tick+0xc>
		tract_compute(&v->tr, glot, lambda2);
 801648c:	eef0 0a68 	vmov.f32	s1, s17
 8016490:	eeb0 0a49 	vmov.f32	s0, s18
 8016494:	4628      	mov	r0, r5
 8016496:	f7ff fb21 	bl	8015adc <tract_compute>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
 801649a:	68a3      	ldr	r3, [r4, #8]
 801649c:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 80164a0:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 80164a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80164a8:	ee77 7a88 	vadd.f32	s15, s15, s16
		vocal_output *= 0.125f;
 80164ac:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80164b0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80164b4:	e7d9      	b.n	801646a <tVoc_tick+0x62>
 80164b6:	bf00      	nop
 80164b8:	3c800000 	.word	0x3c800000
 80164bc:	00000000 	.word	0x00000000

080164c0 <tVoc_setDoubleComputeFlag>:
    *out = vocal_output * 0.125;
    v->counter = (v->counter + 1) & 64;
}
void    tVoc_setDoubleComputeFlag(tVoc* const voc, int doubleCompute)
{
	_tVoc* v = *voc;
 80164c0:	6803      	ldr	r3, [r0, #0]
	v->doubleCompute = doubleCompute;
 80164c2:	60d9      	str	r1, [r3, #12]
}
 80164c4:	4770      	bx	lr

080164c6 <tVoc_setFreq>:
	v->sampleRate = sr;
}

void    tVoc_setFreq      (tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
 80164c6:	6803      	ldr	r3, [r0, #0]
	v->glot->freq = freq;
 80164c8:	685b      	ldr	r3, [r3, #4]
 80164ca:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80164ce:	4770      	bx	lr

080164d0 <tVoc_get_tract_diameters>:
	return &v->glot->freq;
}

Lfloat* tVoc_get_tract_diameters(tVoc* const voc)
{
	_tVoc* v = *voc;
 80164d0:	6803      	ldr	r3, [r0, #0]
	return v->tr->target_diameter;
 80164d2:	689b      	ldr	r3, [r3, #8]
}
 80164d4:	69d8      	ldr	r0, [r3, #28]
 80164d6:	4770      	bx	lr

080164d8 <tVoc_set_tractLength>:
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
	v->tr->turbuluencePointPosition[1] = touch_index;
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
}
void tVoc_set_tractLength(tVoc* const voc, int newLength)
{
 80164d8:	b508      	push	{r3, lr}
	_tVoc* v = *voc;
 80164da:	6800      	ldr	r0, [r0, #0]
	tract_newLength(&v->tr, newLength);
 80164dc:	3008      	adds	r0, #8
 80164de:	f7ff f8e3 	bl	80156a8 <tract_newLength>
}
 80164e2:	bd08      	pop	{r3, pc}

080164e4 <tVoc_set_tenseness>:

void tVoc_set_tenseness(tVoc* const voc, Lfloat tenseness)
{
	_tVoc* v = *voc;
 80164e4:	6803      	ldr	r3, [r0, #0]
	v->glot->tenseness = tenseness;
 80164e6:	685b      	ldr	r3, [r3, #4]
 80164e8:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80164ec:	4770      	bx	lr

080164ee <tVoc_set_velum>:
	_tVoc* v = *voc;
	return &v->glot->tenseness;
}
void tVoc_set_velum(tVoc* const voc, Lfloat velum)
{
	_tVoc* v = *voc;
 80164ee:	6803      	ldr	r3, [r0, #0]
	v->tr->velum_target = velum;
 80164f0:	689b      	ldr	r3, [r3, #8]
 80164f2:	ed83 0a26 	vstr	s0, [r3, #152]	; 0x98
}
 80164f6:	4770      	bx	lr

080164f8 <tVoc_setTurbulenceNoiseGain>:

void tVoc_setTurbulenceNoiseGain(tVoc* const voc, Lfloat gain)
{
	_tVoc* v = *voc;
 80164f8:	6803      	ldr	r3, [r0, #0]
	v->tr->TnoiseGain = gain;
 80164fa:	689b      	ldr	r3, [r3, #8]
 80164fc:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
}
 8016500:	4770      	bx	lr

08016502 <tVoc_setAspirationNoiseGain>:

void tVoc_setAspirationNoiseGain(tVoc* const voc, Lfloat gain)
{
	_tVoc* v = *voc;
 8016502:	6803      	ldr	r3, [r0, #0]
	v->tr->AnoiseGain = gain;
 8016504:	689b      	ldr	r3, [r3, #8]
 8016506:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 801650a:	4770      	bx	lr

0801650c <tVoc_setAspirationNoiseFilterFreq>:
	return &v->tr->velum_target;
}

//0-1
void tVoc_setAspirationNoiseFilterFreq(tVoc* const voc, Lfloat freq)
{
 801650c:	b508      	push	{r3, lr}
	_tVoc* v = *voc;
 801650e:	6803      	ldr	r3, [r0, #0]
	tSVF_setFreqFast(&v->tr->aspirationNoiseFilt,freq*30.0f + 60.0f);
 8016510:	6898      	ldr	r0, [r3, #8]
 8016512:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8016516:	ee20 0a27 	vmul.f32	s0, s0, s15
 801651a:	eddf 7a04 	vldr	s15, [pc, #16]	; 801652c <tVoc_setAspirationNoiseFilterFreq+0x20>
 801651e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016522:	30c8      	adds	r0, #200	; 0xc8
 8016524:	f7f9 f88e 	bl	800f644 <tSVF_setFreqFast>
}
 8016528:	bd08      	pop	{r3, pc}
 801652a:	bf00      	nop
 801652c:	42700000 	.word	0x42700000

08016530 <tVoc_setAspirationNoiseFilterQ>:

void tVoc_setAspirationNoiseFilterQ(tVoc* const voc, Lfloat Q)
{
 8016530:	b508      	push	{r3, lr}
	_tVoc* v = *voc;
 8016532:	6803      	ldr	r3, [r0, #0]
	tSVF_setQ(&v->tr->aspirationNoiseFilt,Q*0.49f + 0.5f);
 8016534:	6898      	ldr	r0, [r3, #8]
 8016536:	eddf 7a06 	vldr	s15, [pc, #24]	; 8016550 <tVoc_setAspirationNoiseFilterQ+0x20>
 801653a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801653e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016542:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016546:	30c8      	adds	r0, #200	; 0xc8
 8016548:	f7f9 f8c4 	bl	800f6d4 <tSVF_setQ>
}
 801654c:	bd08      	pop	{r3, pc}
 801654e:	bf00      	nop
 8016550:	3efae148 	.word	0x3efae148
 8016554:	00000000 	.word	0x00000000

08016558 <tVoc_set_tongue_and_touch_diameters>:


//diameter and index are 0-1.0f
void tVoc_set_tongue_and_touch_diameters(tVoc* const voc, Lfloat tongue_index, Lfloat tongue_diameter, Lfloat touch_index, Lfloat touch_diameter, Lfloat *theDiameters)
{
 8016558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801655c:	ed2d 8b06 	vpush	{d8-d10}
 8016560:	eef0 8a40 	vmov.f32	s17, s0
 8016564:	eeb0 9a60 	vmov.f32	s18, s1
 8016568:	eeb0 aa41 	vmov.f32	s20, s2
 801656c:	eef0 aa61 	vmov.f32	s21, s3
 8016570:	460e      	mov	r6, r1
	int i;

	_tVoc* v = *voc;
 8016572:	6805      	ldr	r5, [r0, #0]

	Lfloat t;
	Lfloat curve;
	//do tongue position
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 8016574:	68aa      	ldr	r2, [r5, #8]
 8016576:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8016578:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801657a:	1a9b      	subs	r3, r3, r2
 801657c:	ee07 3a90 	vmov	s15, r3
 8016580:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016588:	eec7 9a27 	vdiv.f32	s19, s14, s15

	for (i = 0; i < v->tr->n; i++)
 801658c:	2300      	movs	r3, #0
 801658e:	e007      	b.n	80165a0 <tVoc_set_tongue_and_touch_diameters+0x48>
	{
		theDiameters[i] = v->tr->rest_diameter[i];
 8016590:	6992      	ldr	r2, [r2, #24]
 8016592:	eb06 0183 	add.w	r1, r6, r3, lsl #2
 8016596:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801659a:	6812      	ldr	r2, [r2, #0]
 801659c:	600a      	str	r2, [r1, #0]
	for (i = 0; i < v->tr->n; i++)
 801659e:	3301      	adds	r3, #1
 80165a0:	68aa      	ldr	r2, [r5, #8]
 80165a2:	6851      	ldr	r1, [r2, #4]
 80165a4:	4299      	cmp	r1, r3
 80165a6:	dcf3      	bgt.n	8016590 <tVoc_set_tongue_and_touch_diameters+0x38>
	}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 80165a8:	6d54      	ldr	r4, [r2, #84]	; 0x54
 80165aa:	e00c      	b.n	80165c6 <tVoc_set_tongue_and_touch_diameters+0x6e>
		{
			curve *= 0.8f;
		}
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
		{
			curve *= 0.94f;
 80165ac:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80167a8 <tVoc_set_tongue_and_touch_diameters+0x250>
 80165b0:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
		theDiameters[i] = 1.5f - curve;
 80165b4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80165b8:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80165bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80165c0:	edc3 7a00 	vstr	s15, [r3]
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 80165c4:	3401      	adds	r4, #1
 80165c6:	68ab      	ldr	r3, [r5, #8]
 80165c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80165ca:	42a2      	cmp	r2, r4
 80165cc:	dd3b      	ble.n	8016646 <tVoc_set_tongue_and_touch_diameters+0xee>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
 80165ce:	ee07 4a90 	vmov	s15, r4
 80165d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80165d6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80165da:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80165de:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8016798 <tVoc_set_tongue_and_touch_diameters+0x240>
 80165e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80165e6:	eeb7 0ae9 	vcvt.f64.f32	d0, s19
 80165ea:	ee20 0b07 	vmul.f64	d0, d0, d7
		Lfloat fixedTongueDiameter = 2.0f + ((tongue_diameter - 2.0f) * 0.66666666666667f);
 80165ee:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80165f2:	ee39 7a67 	vsub.f32	s14, s18, s15
 80165f6:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80167ac <tVoc_set_tongue_and_touch_diameters+0x254>
 80165fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 80165fe:	ee37 7a27 	vadd.f32	s14, s14, s15
		curve = (1.5f - fixedTongueDiameter + 1.7f) * arm_cos_f32(t);
 8016602:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8016606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801660a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80167b0 <tVoc_set_tongue_and_touch_diameters+0x258>
 801660e:	ee37 8a87 	vadd.f32	s16, s15, s14
 8016612:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016616:	f7e9 ff9d 	bl	8000554 <arm_cos_f32>
 801661a:	ee68 7a00 	vmul.f32	s15, s16, s0
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 801661e:	68ab      	ldr	r3, [r5, #8]
 8016620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016622:	1e91      	subs	r1, r2, #2
 8016624:	42a1      	cmp	r1, r4
 8016626:	d003      	beq.n	8016630 <tVoc_set_tongue_and_touch_diameters+0xd8>
 8016628:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801662a:	3901      	subs	r1, #1
 801662c:	42a1      	cmp	r1, r4
 801662e:	d103      	bne.n	8016638 <tVoc_set_tongue_and_touch_diameters+0xe0>
			curve *= 0.8f;
 8016630:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80167b4 <tVoc_set_tongue_and_touch_diameters+0x25c>
 8016634:	ee67 7a87 	vmul.f32	s15, s15, s14
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 8016638:	42a2      	cmp	r2, r4
 801663a:	d0b7      	beq.n	80165ac <tVoc_set_tongue_and_touch_diameters+0x54>
 801663c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801663e:	3b02      	subs	r3, #2
 8016640:	42a3      	cmp	r3, r4
 8016642:	d1b7      	bne.n	80165b4 <tVoc_set_tongue_and_touch_diameters+0x5c>
 8016644:	e7b2      	b.n	80165ac <tVoc_set_tongue_and_touch_diameters+0x54>

	Lfloat invWidth = 1.0f / width;
	*/

	Lfloat width=2.0f;
		Lfloat tenwidth = v->tr->n*0.227272727272727f;
 8016646:	edd3 7a01 	vldr	s15, [r3, #4]
 801664a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801664e:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 80167b8 <tVoc_set_tongue_and_touch_diameters+0x260>
 8016652:	ee27 8a88 	vmul.f32	s16, s15, s16
		Lfloat fivewidth = v->tr->n*0.113636363636364f;
 8016656:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80167bc <tVoc_set_tongue_and_touch_diameters+0x264>
 801665a:	ee67 6a87 	vmul.f32	s13, s15, s14
		Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
 801665e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80167c0 <tVoc_set_tongue_and_touch_diameters+0x268>
 8016662:	ee27 7a87 	vmul.f32	s14, s15, s14
		if (touch_index< (twentyfivewidth)) width = tenwidth; //25 in original code
 8016666:	eeb4 7aca 	vcmpe.f32	s14, s20
 801666a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801666e:	dc12      	bgt.n	8016696 <tVoc_set_tongue_and_touch_diameters+0x13e>
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
 8016670:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
 8016674:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8016678:	eeb4 6aca 	vcmpe.f32	s12, s20
 801667c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016680:	d92a      	bls.n	80166d8 <tVoc_set_tongue_and_touch_diameters+0x180>
		else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
 8016682:	ee7a 5a47 	vsub.f32	s11, s20, s14
 8016686:	ee65 6aa6 	vmul.f32	s13, s11, s13
 801668a:	ee36 6a47 	vsub.f32	s12, s12, s14
 801668e:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8016692:	ee38 8a47 	vsub.f32	s16, s16, s14
		Lfloat invWidth = 1.0f / width;
 8016696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801669a:	eec7 8a08 	vdiv.f32	s17, s14, s16
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
 801669e:	eef4 7aca 	vcmpe.f32	s15, s20
 80166a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166a6:	dd72      	ble.n	801678e <tVoc_set_tongue_and_touch_diameters+0x236>
 80166a8:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80166ac:	eef4 aae7 	vcmpe.f32	s21, s15
 80166b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166b4:	d56b      	bpl.n	801678e <tVoc_set_tongue_and_touch_diameters+0x236>
	{
		int intIndex = roundf(touch_index);
 80166b6:	fef8 7a4a 	vrinta.f32	s15, s20
 80166ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80166be:	ee17 8a90 	vmov	r8, s15
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 80166c2:	fefa 7a48 	vrintp.f32	s15, s16
 80166c6:	eef1 7a67 	vneg.f32	s15, s15
 80166ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80166ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80166d2:	ee17 4a90 	vmov	r4, s15
 80166d6:	e02d      	b.n	8016734 <tVoc_set_tongue_and_touch_diameters+0x1dc>
		else if (touch_index>=v->tr->tip_start) width= fivewidth;
 80166d8:	eeb0 8a66 	vmov.f32	s16, s13
 80166dc:	e7db      	b.n	8016696 <tVoc_set_tongue_and_touch_diameters+0x13e>
			relpos = fabsf(relpos)-0.5f;
			Lfloat shrink;
			if (relpos <= 0.0f) shrink = 0.0f;
			else if (relpos > width) shrink = 1.0f;
#ifdef ARM_MATH_CM7
			else shrink = 0.5f*(1.0f-arm_cos_f32(M_PI * relpos * invWidth));
 80166de:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80166e2:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 80167a0 <tVoc_set_tongue_and_touch_diameters+0x248>
 80166e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80166ea:	eeb7 0ae8 	vcvt.f64.f32	d0, s17
 80166ee:	ee20 0b07 	vmul.f64	d0, d0, d7
 80166f2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80166f6:	f7e9 ff2d 	bl	8000554 <arm_cos_f32>
 80166fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80166fe:	ee37 7a40 	vsub.f32	s14, s14, s0
 8016702:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016706:	ee27 7a27 	vmul.f32	s14, s14, s15
 801670a:	e001      	b.n	8016710 <tVoc_set_tongue_and_touch_diameters+0x1b8>
			if (relpos <= 0.0f) shrink = 0.0f;
 801670c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80167c4 <tVoc_set_tongue_and_touch_diameters+0x26c>
#else
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
#endif
			if (touch_diameter < theDiameters[intIndex+i])
 8016710:	eb06 0787 	add.w	r7, r6, r7, lsl #2
 8016714:	edd7 7a00 	vldr	s15, [r7]
 8016718:	eef4 7aea 	vcmpe.f32	s15, s21
 801671c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016720:	dd07      	ble.n	8016732 <tVoc_set_tongue_and_touch_diameters+0x1da>
			{
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 8016722:	ee77 7aea 	vsub.f32	s15, s15, s21
 8016726:	ee67 7a87 	vmul.f32	s15, s15, s14
 801672a:	ee77 7aaa 	vadd.f32	s15, s15, s21
 801672e:	edc7 7a00 	vstr	s15, [r7]
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8016732:	3401      	adds	r4, #1
 8016734:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016738:	ee78 7a27 	vadd.f32	s15, s16, s15
 801673c:	ee07 4a10 	vmov	s14, r4
 8016740:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016744:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801674c:	d51f      	bpl.n	801678e <tVoc_set_tongue_and_touch_diameters+0x236>
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 801674e:	eb14 0708 	adds.w	r7, r4, r8
 8016752:	d4ee      	bmi.n	8016732 <tVoc_set_tongue_and_touch_diameters+0x1da>
 8016754:	68ab      	ldr	r3, [r5, #8]
 8016756:	685b      	ldr	r3, [r3, #4]
 8016758:	429f      	cmp	r7, r3
 801675a:	daea      	bge.n	8016732 <tVoc_set_tongue_and_touch_diameters+0x1da>
			Lfloat relpos = (intIndex+i) - touch_index;
 801675c:	ee07 7a90 	vmov	s15, r7
 8016760:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8016764:	ee37 7a4a 	vsub.f32	s14, s14, s20
			relpos = fabsf(relpos)-0.5f;
 8016768:	eeb0 7ac7 	vabs.f32	s14, s14
 801676c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016770:	ee37 7a67 	vsub.f32	s14, s14, s15
			if (relpos <= 0.0f) shrink = 0.0f;
 8016774:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8016778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801677c:	d9c6      	bls.n	801670c <tVoc_set_tongue_and_touch_diameters+0x1b4>
			else if (relpos > width) shrink = 1.0f;
 801677e:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8016782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016786:	d5aa      	bpl.n	80166de <tVoc_set_tongue_and_touch_diameters+0x186>
 8016788:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801678c:	e7c0      	b.n	8016710 <tVoc_set_tongue_and_touch_diameters+0x1b8>
			}
		}
	}

}
 801678e:	ecbd 8b06 	vpop	{d8-d10}
 8016792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016796:	bf00      	nop
 8016798:	4d2562ef 	.word	0x4d2562ef
 801679c:	400ba561 	.word	0x400ba561
 80167a0:	54442d18 	.word	0x54442d18
 80167a4:	400921fb 	.word	0x400921fb
 80167a8:	3f70a3d7 	.word	0x3f70a3d7
 80167ac:	3f2aaaab 	.word	0x3f2aaaab
 80167b0:	3fd9999a 	.word	0x3fd9999a
 80167b4:	3f4ccccd 	.word	0x3f4ccccd
 80167b8:	3e68ba2f 	.word	0x3e68ba2f
 80167bc:	3de8ba2f 	.word	0x3de8ba2f
 80167c0:	3f11745d 	.word	0x3f11745d
 80167c4:	00000000 	.word	0x00000000

080167c8 <tVoc_set_tongue_shape_and_touch>:
{
 80167c8:	b510      	push	{r4, lr}
 80167ca:	ed2d 8b06 	vpush	{d8-d10}
 80167ce:	b082      	sub	sp, #8
 80167d0:	eeb0 9a40 	vmov.f32	s18, s0
 80167d4:	eef0 8a60 	vmov.f32	s17, s1
 80167d8:	eeb0 aa41 	vmov.f32	s20, s2
 80167dc:	eeb0 8a61 	vmov.f32	s16, s3
	_tVoc* v = *voc;
 80167e0:	6804      	ldr	r4, [r0, #0]
 80167e2:	9401      	str	r4, [sp, #4]
	diameters = tVoc_get_tract_diameters(&v);
 80167e4:	a801      	add	r0, sp, #4
 80167e6:	f7ff fe73 	bl	80164d0 <tVoc_get_tract_diameters>
 80167ea:	4601      	mov	r1, r0
	tongue_diameter *= 1.45f;
 80167ec:	eddf 7a24 	vldr	s15, [pc, #144]	; 8016880 <tVoc_set_tongue_shape_and_touch+0xb8>
 80167f0:	ee68 8aa7 	vmul.f32	s17, s17, s15
	tongue_diameter += 2.05f;
 80167f4:	eddf 7a23 	vldr	s15, [pc, #140]	; 8016884 <tVoc_set_tongue_shape_and_touch+0xbc>
 80167f8:	ee78 8aa7 	vadd.f32	s17, s17, s15
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 80167fc:	68a3      	ldr	r3, [r4, #8]
 80167fe:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8016802:	edd3 9a18 	vldr	s19, [r3, #96]	; 0x60
 8016806:	ee77 7ae9 	vsub.f32	s15, s15, s19
 801680a:	ee27 0a89 	vmul.f32	s0, s15, s18
 801680e:	ee79 9a80 	vadd.f32	s19, s19, s0
	if (touch_diameter<0.0f) touch_diameter = 0.0f;
 8016812:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801681a:	d42d      	bmi.n	8016878 <tVoc_set_tongue_shape_and_touch+0xb0>
	touch_diameter *= 1.6f;
 801681c:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8016888 <tVoc_set_tongue_shape_and_touch+0xc0>
 8016820:	ee28 9a27 	vmul.f32	s18, s16, s15
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8016824:	ed93 8a01 	vldr	s16, [r3, #4]
 8016828:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801682c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8016830:	ee38 8a67 	vsub.f32	s16, s16, s15
 8016834:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8016838:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801683c:	ee38 8a27 	vadd.f32	s16, s16, s15
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8016840:	eef0 1a49 	vmov.f32	s3, s18
 8016844:	eeb0 1a48 	vmov.f32	s2, s16
 8016848:	eef0 0a68 	vmov.f32	s1, s17
 801684c:	eeb0 0a69 	vmov.f32	s0, s19
 8016850:	a801      	add	r0, sp, #4
 8016852:	f7ff fe81 	bl	8016558 <tVoc_set_tongue_and_touch_diameters>
	v->tr->turbuluencePointPosition[0] = tongue_index;
 8016856:	9b01      	ldr	r3, [sp, #4]
 8016858:	689a      	ldr	r2, [r3, #8]
 801685a:	edc2 9a34 	vstr	s19, [r2, #208]	; 0xd0
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
 801685e:	689a      	ldr	r2, [r3, #8]
 8016860:	edc2 8a36 	vstr	s17, [r2, #216]	; 0xd8
	v->tr->turbuluencePointPosition[1] = touch_index;
 8016864:	689a      	ldr	r2, [r3, #8]
 8016866:	ed82 8a35 	vstr	s16, [r2, #212]	; 0xd4
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
 801686a:	689b      	ldr	r3, [r3, #8]
 801686c:	ed83 9a37 	vstr	s18, [r3, #220]	; 0xdc
}
 8016870:	b002      	add	sp, #8
 8016872:	ecbd 8b06 	vpop	{d8-d10}
 8016876:	bd10      	pop	{r4, pc}
	if (touch_diameter<0.0f) touch_diameter = 0.0f;
 8016878:	ed9f 8a04 	vldr	s16, [pc, #16]	; 801688c <tVoc_set_tongue_shape_and_touch+0xc4>
 801687c:	e7ce      	b.n	801681c <tVoc_set_tongue_shape_and_touch+0x54>
 801687e:	bf00      	nop
 8016880:	3fb9999a 	.word	0x3fb9999a
 8016884:	40033333 	.word	0x40033333
 8016888:	3fcccccd 	.word	0x3fcccccd
 801688c:	00000000 	.word	0x00000000

08016890 <tVoc_rescaleDiameter>:
	return v->counter;
}

void tVoc_rescaleDiameter(tVoc* const voc, Lfloat scale)
{
	_tVoc* v = *voc;
 8016890:	6803      	ldr	r3, [r0, #0]
	v->tr->diameterScale = scale;
 8016892:	689b      	ldr	r3, [r3, #8]
 8016894:	ed83 0a2f 	vstr	s0, [r3, #188]	; 0xbc
}
 8016898:	4770      	bx	lr

0801689a <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 801689a:	4770      	bx	lr

0801689c <LEAF_init>:
{
 801689c:	b538      	push	{r3, r4, r5, lr}
 801689e:	ed2d 8b02 	vpush	{d8}
 80168a2:	4604      	mov	r4, r0
 80168a4:	eeb0 8a40 	vmov.f32	s16, s0
 80168a8:	461d      	mov	r5, r3
    leaf->_internal_mempool.leaf = leaf;
 80168aa:	6200      	str	r0, [r0, #32]
    leaf_pool_init(leaf, memory, memorysize);
 80168ac:	f7fb fce9 	bl	8012282 <leaf_pool_init>
    leaf->sampleRate = sr;
 80168b0:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 80168b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80168b8:	eec7 7a08 	vdiv.f32	s15, s14, s16
 80168bc:	edc4 7a01 	vstr	s15, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 80168c0:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80168f8 <LEAF_init+0x5c>
 80168c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80168c8:	edc4 7a03 	vstr	s15, [r4, #12]
    leaf->random = random;
 80168cc:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 80168ce:	2300      	movs	r3, #0
 80168d0:	6163      	str	r3, [r4, #20]
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 80168d2:	4a0a      	ldr	r2, [pc, #40]	; (80168fc <LEAF_init+0x60>)
 80168d4:	63a2      	str	r2, [r4, #56]	; 0x38
    for (int i = 0; i < LEAFErrorNil; ++i)
 80168d6:	e006      	b.n	80168e6 <LEAF_init+0x4a>
        leaf->errorState[i] = 0;
 80168d8:	f103 020e 	add.w	r2, r3, #14
 80168dc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80168e0:	2100      	movs	r1, #0
 80168e2:	6051      	str	r1, [r2, #4]
    for (int i = 0; i < LEAFErrorNil; ++i)
 80168e4:	3301      	adds	r3, #1
 80168e6:	2b02      	cmp	r3, #2
 80168e8:	ddf6      	ble.n	80168d8 <LEAF_init+0x3c>
    leaf->allocCount = 0;
 80168ea:	2300      	movs	r3, #0
 80168ec:	64a3      	str	r3, [r4, #72]	; 0x48
    leaf->freeCount = 0;
 80168ee:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80168f0:	ecbd 8b02 	vpop	{d8}
 80168f4:	bd38      	pop	{r3, r4, r5, pc}
 80168f6:	bf00      	nop
 80168f8:	40c90fdb 	.word	0x40c90fdb
 80168fc:	0801689b 	.word	0x0801689b

08016900 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8016900:	b510      	push	{r4, lr}
    leaf->errorState[whichone] = 1;
 8016902:	f101 030e 	add.w	r3, r1, #14
 8016906:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801690a:	2401      	movs	r4, #1
 801690c:	605c      	str	r4, [r3, #4]
    leaf->errorCallback(leaf, whichone);
 801690e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016910:	4798      	blx	r3
}
 8016912:	bd10      	pop	{r4, pc}

08016914 <__itoa>:
 8016914:	1e93      	subs	r3, r2, #2
 8016916:	2b22      	cmp	r3, #34	; 0x22
 8016918:	b510      	push	{r4, lr}
 801691a:	460c      	mov	r4, r1
 801691c:	d904      	bls.n	8016928 <__itoa+0x14>
 801691e:	2300      	movs	r3, #0
 8016920:	700b      	strb	r3, [r1, #0]
 8016922:	461c      	mov	r4, r3
 8016924:	4620      	mov	r0, r4
 8016926:	bd10      	pop	{r4, pc}
 8016928:	2a0a      	cmp	r2, #10
 801692a:	d109      	bne.n	8016940 <__itoa+0x2c>
 801692c:	2800      	cmp	r0, #0
 801692e:	da07      	bge.n	8016940 <__itoa+0x2c>
 8016930:	232d      	movs	r3, #45	; 0x2d
 8016932:	700b      	strb	r3, [r1, #0]
 8016934:	4240      	negs	r0, r0
 8016936:	2101      	movs	r1, #1
 8016938:	4421      	add	r1, r4
 801693a:	f000 f805 	bl	8016948 <__utoa>
 801693e:	e7f1      	b.n	8016924 <__itoa+0x10>
 8016940:	2100      	movs	r1, #0
 8016942:	e7f9      	b.n	8016938 <__itoa+0x24>

08016944 <itoa>:
 8016944:	f7ff bfe6 	b.w	8016914 <__itoa>

08016948 <__utoa>:
 8016948:	b5f0      	push	{r4, r5, r6, r7, lr}
 801694a:	4c1f      	ldr	r4, [pc, #124]	; (80169c8 <__utoa+0x80>)
 801694c:	b08b      	sub	sp, #44	; 0x2c
 801694e:	4605      	mov	r5, r0
 8016950:	460b      	mov	r3, r1
 8016952:	466e      	mov	r6, sp
 8016954:	f104 0c20 	add.w	ip, r4, #32
 8016958:	6820      	ldr	r0, [r4, #0]
 801695a:	6861      	ldr	r1, [r4, #4]
 801695c:	4637      	mov	r7, r6
 801695e:	c703      	stmia	r7!, {r0, r1}
 8016960:	3408      	adds	r4, #8
 8016962:	4564      	cmp	r4, ip
 8016964:	463e      	mov	r6, r7
 8016966:	d1f7      	bne.n	8016958 <__utoa+0x10>
 8016968:	7921      	ldrb	r1, [r4, #4]
 801696a:	7139      	strb	r1, [r7, #4]
 801696c:	1e91      	subs	r1, r2, #2
 801696e:	6820      	ldr	r0, [r4, #0]
 8016970:	6038      	str	r0, [r7, #0]
 8016972:	2922      	cmp	r1, #34	; 0x22
 8016974:	f04f 0100 	mov.w	r1, #0
 8016978:	d904      	bls.n	8016984 <__utoa+0x3c>
 801697a:	7019      	strb	r1, [r3, #0]
 801697c:	460b      	mov	r3, r1
 801697e:	4618      	mov	r0, r3
 8016980:	b00b      	add	sp, #44	; 0x2c
 8016982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016984:	1e58      	subs	r0, r3, #1
 8016986:	4684      	mov	ip, r0
 8016988:	fbb5 f7f2 	udiv	r7, r5, r2
 801698c:	fb02 5617 	mls	r6, r2, r7, r5
 8016990:	3628      	adds	r6, #40	; 0x28
 8016992:	446e      	add	r6, sp
 8016994:	460c      	mov	r4, r1
 8016996:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801699a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801699e:	462e      	mov	r6, r5
 80169a0:	42b2      	cmp	r2, r6
 80169a2:	f101 0101 	add.w	r1, r1, #1
 80169a6:	463d      	mov	r5, r7
 80169a8:	d9ee      	bls.n	8016988 <__utoa+0x40>
 80169aa:	2200      	movs	r2, #0
 80169ac:	545a      	strb	r2, [r3, r1]
 80169ae:	1919      	adds	r1, r3, r4
 80169b0:	1aa5      	subs	r5, r4, r2
 80169b2:	42aa      	cmp	r2, r5
 80169b4:	dae3      	bge.n	801697e <__utoa+0x36>
 80169b6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80169ba:	780e      	ldrb	r6, [r1, #0]
 80169bc:	7006      	strb	r6, [r0, #0]
 80169be:	3201      	adds	r2, #1
 80169c0:	f801 5901 	strb.w	r5, [r1], #-1
 80169c4:	e7f4      	b.n	80169b0 <__utoa+0x68>
 80169c6:	bf00      	nop
 80169c8:	08023e98 	.word	0x08023e98

080169cc <memset>:
 80169cc:	4402      	add	r2, r0
 80169ce:	4603      	mov	r3, r0
 80169d0:	4293      	cmp	r3, r2
 80169d2:	d100      	bne.n	80169d6 <memset+0xa>
 80169d4:	4770      	bx	lr
 80169d6:	f803 1b01 	strb.w	r1, [r3], #1
 80169da:	e7f9      	b.n	80169d0 <memset+0x4>

080169dc <__libc_init_array>:
 80169dc:	b570      	push	{r4, r5, r6, lr}
 80169de:	4d0d      	ldr	r5, [pc, #52]	; (8016a14 <__libc_init_array+0x38>)
 80169e0:	4c0d      	ldr	r4, [pc, #52]	; (8016a18 <__libc_init_array+0x3c>)
 80169e2:	1b64      	subs	r4, r4, r5
 80169e4:	10a4      	asrs	r4, r4, #2
 80169e6:	2600      	movs	r6, #0
 80169e8:	42a6      	cmp	r6, r4
 80169ea:	d109      	bne.n	8016a00 <__libc_init_array+0x24>
 80169ec:	4d0b      	ldr	r5, [pc, #44]	; (8016a1c <__libc_init_array+0x40>)
 80169ee:	4c0c      	ldr	r4, [pc, #48]	; (8016a20 <__libc_init_array+0x44>)
 80169f0:	f002 fa1e 	bl	8018e30 <_init>
 80169f4:	1b64      	subs	r4, r4, r5
 80169f6:	10a4      	asrs	r4, r4, #2
 80169f8:	2600      	movs	r6, #0
 80169fa:	42a6      	cmp	r6, r4
 80169fc:	d105      	bne.n	8016a0a <__libc_init_array+0x2e>
 80169fe:	bd70      	pop	{r4, r5, r6, pc}
 8016a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a04:	4798      	blx	r3
 8016a06:	3601      	adds	r6, #1
 8016a08:	e7ee      	b.n	80169e8 <__libc_init_array+0xc>
 8016a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a0e:	4798      	blx	r3
 8016a10:	3601      	adds	r6, #1
 8016a12:	e7f2      	b.n	80169fa <__libc_init_array+0x1e>
 8016a14:	08025188 	.word	0x08025188
 8016a18:	08025188 	.word	0x08025188
 8016a1c:	08025188 	.word	0x08025188
 8016a20:	0802518c 	.word	0x0802518c

08016a24 <strcpy>:
 8016a24:	4603      	mov	r3, r0
 8016a26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016a2a:	f803 2b01 	strb.w	r2, [r3], #1
 8016a2e:	2a00      	cmp	r2, #0
 8016a30:	d1f9      	bne.n	8016a26 <strcpy+0x2>
 8016a32:	4770      	bx	lr

08016a34 <frexpf>:
 8016a34:	ee10 3a10 	vmov	r3, s0
 8016a38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016a3c:	2100      	movs	r1, #0
 8016a3e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016a42:	6001      	str	r1, [r0, #0]
 8016a44:	da19      	bge.n	8016a7a <frexpf+0x46>
 8016a46:	b1c2      	cbz	r2, 8016a7a <frexpf+0x46>
 8016a48:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8016a4c:	d10a      	bne.n	8016a64 <frexpf+0x30>
 8016a4e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8016a7c <frexpf+0x48>
 8016a52:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016a56:	f06f 0118 	mvn.w	r1, #24
 8016a5a:	ee17 3a90 	vmov	r3, s15
 8016a5e:	6001      	str	r1, [r0, #0]
 8016a60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016a64:	6801      	ldr	r1, [r0, #0]
 8016a66:	15d2      	asrs	r2, r2, #23
 8016a68:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016a6c:	3a7e      	subs	r2, #126	; 0x7e
 8016a6e:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8016a72:	4411      	add	r1, r2
 8016a74:	ee00 3a10 	vmov	s0, r3
 8016a78:	6001      	str	r1, [r0, #0]
 8016a7a:	4770      	bx	lr
 8016a7c:	4c000000 	.word	0x4c000000

08016a80 <expf>:
 8016a80:	ee10 2a10 	vmov	r2, s0
 8016a84:	f240 412a 	movw	r1, #1066	; 0x42a
 8016a88:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8016a8c:	428b      	cmp	r3, r1
 8016a8e:	b430      	push	{r4, r5}
 8016a90:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8016a94:	d92a      	bls.n	8016aec <expf+0x6c>
 8016a96:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8016a9a:	d058      	beq.n	8016b4e <expf+0xce>
 8016a9c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8016aa0:	d303      	bcc.n	8016aaa <expf+0x2a>
 8016aa2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016aa6:	bc30      	pop	{r4, r5}
 8016aa8:	4770      	bx	lr
 8016aaa:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8016b54 <expf+0xd4>
 8016aae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ab6:	dd03      	ble.n	8016ac0 <expf+0x40>
 8016ab8:	bc30      	pop	{r4, r5}
 8016aba:	2000      	movs	r0, #0
 8016abc:	f000 bbd6 	b.w	801726c <__math_oflowf>
 8016ac0:	eddf 7a25 	vldr	s15, [pc, #148]	; 8016b58 <expf+0xd8>
 8016ac4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016acc:	d503      	bpl.n	8016ad6 <expf+0x56>
 8016ace:	bc30      	pop	{r4, r5}
 8016ad0:	2000      	movs	r0, #0
 8016ad2:	f000 bbbf 	b.w	8017254 <__math_uflowf>
 8016ad6:	eddf 7a21 	vldr	s15, [pc, #132]	; 8016b5c <expf+0xdc>
 8016ada:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ae2:	d503      	bpl.n	8016aec <expf+0x6c>
 8016ae4:	bc30      	pop	{r4, r5}
 8016ae6:	2000      	movs	r0, #0
 8016ae8:	f000 bbba 	b.w	8017260 <__math_may_uflowf>
 8016aec:	4b1c      	ldr	r3, [pc, #112]	; (8016b60 <expf+0xe0>)
 8016aee:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016af2:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8016af6:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8016afa:	eeb0 7b44 	vmov.f64	d7, d4
 8016afe:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016b02:	ee17 0a10 	vmov	r0, s14
 8016b06:	ee37 7b44 	vsub.f64	d7, d7, d4
 8016b0a:	f000 021f 	and.w	r2, r0, #31
 8016b0e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8016b12:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8016b16:	ee27 4b07 	vmul.f64	d4, d7, d7
 8016b1a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8016b1e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8016b22:	eea5 6b07 	vfma.f64	d6, d5, d7
 8016b26:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8016b2a:	684d      	ldr	r5, [r1, #4]
 8016b2c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8016b30:	2100      	movs	r1, #0
 8016b32:	190a      	adds	r2, r1, r4
 8016b34:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8016b38:	eea5 0b07 	vfma.f64	d0, d5, d7
 8016b3c:	ec43 2b17 	vmov	d7, r2, r3
 8016b40:	eea6 0b04 	vfma.f64	d0, d6, d4
 8016b44:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016b48:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016b4c:	e7ab      	b.n	8016aa6 <expf+0x26>
 8016b4e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8016b64 <expf+0xe4>
 8016b52:	e7a8      	b.n	8016aa6 <expf+0x26>
 8016b54:	42b17217 	.word	0x42b17217
 8016b58:	c2cff1b4 	.word	0xc2cff1b4
 8016b5c:	c2ce8ecf 	.word	0xc2ce8ecf
 8016b60:	08023ec0 	.word	0x08023ec0
 8016b64:	00000000 	.word	0x00000000

08016b68 <logf>:
 8016b68:	ee10 3a10 	vmov	r3, s0
 8016b6c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8016b70:	b410      	push	{r4}
 8016b72:	d055      	beq.n	8016c20 <logf+0xb8>
 8016b74:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8016b78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8016b7c:	d31a      	bcc.n	8016bb4 <logf+0x4c>
 8016b7e:	005a      	lsls	r2, r3, #1
 8016b80:	d104      	bne.n	8016b8c <logf+0x24>
 8016b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016b86:	2001      	movs	r0, #1
 8016b88:	f000 bb76 	b.w	8017278 <__math_divzerof>
 8016b8c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016b90:	d043      	beq.n	8016c1a <logf+0xb2>
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	db02      	blt.n	8016b9c <logf+0x34>
 8016b96:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8016b9a:	d303      	bcc.n	8016ba4 <logf+0x3c>
 8016b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ba0:	f000 bb7c 	b.w	801729c <__math_invalidf>
 8016ba4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8016c28 <logf+0xc0>
 8016ba8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016bac:	ee10 3a10 	vmov	r3, s0
 8016bb0:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8016bb4:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8016bb8:	491c      	ldr	r1, [pc, #112]	; (8016c2c <logf+0xc4>)
 8016bba:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8016bbe:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8016bc2:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8016bc6:	0dd4      	lsrs	r4, r2, #23
 8016bc8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8016bcc:	05e4      	lsls	r4, r4, #23
 8016bce:	ed90 6b00 	vldr	d6, [r0]
 8016bd2:	1b1b      	subs	r3, r3, r4
 8016bd4:	ee07 3a90 	vmov	s15, r3
 8016bd8:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8016bdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016be0:	15d2      	asrs	r2, r2, #23
 8016be2:	eea6 0b07 	vfma.f64	d0, d6, d7
 8016be6:	ed90 6b02 	vldr	d6, [r0, #8]
 8016bea:	ee20 4b00 	vmul.f64	d4, d0, d0
 8016bee:	ee07 2a90 	vmov	s15, r2
 8016bf2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016bf6:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016bfa:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8016bfe:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8016c02:	eea5 7b00 	vfma.f64	d7, d5, d0
 8016c06:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8016c0a:	ee30 0b06 	vadd.f64	d0, d0, d6
 8016c0e:	eea5 7b04 	vfma.f64	d7, d5, d4
 8016c12:	eea4 0b07 	vfma.f64	d0, d4, d7
 8016c16:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c1e:	4770      	bx	lr
 8016c20:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8016c30 <logf+0xc8>
 8016c24:	e7f9      	b.n	8016c1a <logf+0xb2>
 8016c26:	bf00      	nop
 8016c28:	4b000000 	.word	0x4b000000
 8016c2c:	08024008 	.word	0x08024008
 8016c30:	00000000 	.word	0x00000000

08016c34 <log2f>:
 8016c34:	ee10 2a10 	vmov	r2, s0
 8016c38:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8016c3c:	b410      	push	{r4}
 8016c3e:	d055      	beq.n	8016cec <log2f+0xb8>
 8016c40:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 8016c44:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8016c48:	d31a      	bcc.n	8016c80 <log2f+0x4c>
 8016c4a:	0053      	lsls	r3, r2, #1
 8016c4c:	d104      	bne.n	8016c58 <log2f+0x24>
 8016c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c52:	2001      	movs	r0, #1
 8016c54:	f000 bb10 	b.w	8017278 <__math_divzerof>
 8016c58:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8016c5c:	d043      	beq.n	8016ce6 <log2f+0xb2>
 8016c5e:	2a00      	cmp	r2, #0
 8016c60:	db02      	blt.n	8016c68 <log2f+0x34>
 8016c62:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8016c66:	d303      	bcc.n	8016c70 <log2f+0x3c>
 8016c68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c6c:	f000 bb16 	b.w	801729c <__math_invalidf>
 8016c70:	eddf 7a20 	vldr	s15, [pc, #128]	; 8016cf4 <log2f+0xc0>
 8016c74:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016c78:	ee10 3a10 	vmov	r3, s0
 8016c7c:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 8016c80:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 8016c84:	491c      	ldr	r1, [pc, #112]	; (8016cf8 <log2f+0xc4>)
 8016c86:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8016c8a:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8016c8e:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 8016c92:	0ddc      	lsrs	r4, r3, #23
 8016c94:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8016c98:	05e4      	lsls	r4, r4, #23
 8016c9a:	ed90 5b00 	vldr	d5, [r0]
 8016c9e:	1b12      	subs	r2, r2, r4
 8016ca0:	ee07 2a90 	vmov	s15, r2
 8016ca4:	15db      	asrs	r3, r3, #23
 8016ca6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016caa:	eea5 6b07 	vfma.f64	d6, d5, d7
 8016cae:	ed90 7b02 	vldr	d7, [r0, #8]
 8016cb2:	ee26 4b06 	vmul.f64	d4, d6, d6
 8016cb6:	ee00 3a10 	vmov	s0, r3
 8016cba:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8016cbe:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8016cc2:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016cc6:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 8016cca:	eea5 7b06 	vfma.f64	d7, d5, d6
 8016cce:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8016cd2:	eea5 7b04 	vfma.f64	d7, d5, d4
 8016cd6:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 8016cda:	eea5 0b06 	vfma.f64	d0, d5, d6
 8016cde:	eea4 0b07 	vfma.f64	d0, d4, d7
 8016ce2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016cea:	4770      	bx	lr
 8016cec:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8016cfc <log2f+0xc8>
 8016cf0:	e7f9      	b.n	8016ce6 <log2f+0xb2>
 8016cf2:	bf00      	nop
 8016cf4:	4b000000 	.word	0x4b000000
 8016cf8:	08024998 	.word	0x08024998
 8016cfc:	00000000 	.word	0x00000000

08016d00 <exp>:
 8016d00:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8016d02:	ee10 3a90 	vmov	r3, s1
 8016d06:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8016d0a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8016d0e:	18a2      	adds	r2, r4, r2
 8016d10:	2a3e      	cmp	r2, #62	; 0x3e
 8016d12:	ee10 1a10 	vmov	r1, s0
 8016d16:	d922      	bls.n	8016d5e <exp+0x5e>
 8016d18:	2a00      	cmp	r2, #0
 8016d1a:	da06      	bge.n	8016d2a <exp+0x2a>
 8016d1c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8016d20:	ee30 0b07 	vadd.f64	d0, d0, d7
 8016d24:	b004      	add	sp, #16
 8016d26:	bcf0      	pop	{r4, r5, r6, r7}
 8016d28:	4770      	bx	lr
 8016d2a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8016d2e:	f04f 0000 	mov.w	r0, #0
 8016d32:	d913      	bls.n	8016d5c <exp+0x5c>
 8016d34:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8016d38:	bf08      	it	eq
 8016d3a:	4281      	cmpeq	r1, r0
 8016d3c:	f000 80a0 	beq.w	8016e80 <exp+0x180>
 8016d40:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8016d44:	4294      	cmp	r4, r2
 8016d46:	d0e9      	beq.n	8016d1c <exp+0x1c>
 8016d48:	4283      	cmp	r3, r0
 8016d4a:	da03      	bge.n	8016d54 <exp+0x54>
 8016d4c:	b004      	add	sp, #16
 8016d4e:	bcf0      	pop	{r4, r5, r6, r7}
 8016d50:	f000 b8c6 	b.w	8016ee0 <__math_uflow>
 8016d54:	b004      	add	sp, #16
 8016d56:	bcf0      	pop	{r4, r5, r6, r7}
 8016d58:	f000 b8ca 	b.w	8016ef0 <__math_oflow>
 8016d5c:	4604      	mov	r4, r0
 8016d5e:	4950      	ldr	r1, [pc, #320]	; (8016ea0 <exp+0x1a0>)
 8016d60:	ed91 6b02 	vldr	d6, [r1, #8]
 8016d64:	ed91 5b00 	vldr	d5, [r1]
 8016d68:	eeb0 7b46 	vmov.f64	d7, d6
 8016d6c:	eea5 7b00 	vfma.f64	d7, d5, d0
 8016d70:	ee17 5a10 	vmov	r5, s14
 8016d74:	ee37 7b46 	vsub.f64	d7, d7, d6
 8016d78:	ed91 6b04 	vldr	d6, [r1, #16]
 8016d7c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8016d80:	eea6 0b07 	vfma.f64	d0, d6, d7
 8016d84:	ed91 6b06 	vldr	d6, [r1, #24]
 8016d88:	18d8      	adds	r0, r3, r3
 8016d8a:	f100 030f 	add.w	r3, r0, #15
 8016d8e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8016d92:	eea6 0b07 	vfma.f64	d0, d6, d7
 8016d96:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8016d9a:	ee20 7b00 	vmul.f64	d7, d0, d0
 8016d9e:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 8016da2:	ed91 4b08 	vldr	d4, [r1, #32]
 8016da6:	ee30 6b06 	vadd.f64	d6, d0, d6
 8016daa:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8016dae:	eea3 4b00 	vfma.f64	d4, d3, d0
 8016db2:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8016db6:	eea4 6b07 	vfma.f64	d6, d4, d7
 8016dba:	ee27 7b07 	vmul.f64	d7, d7, d7
 8016dbe:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8016dc2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8016dc6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8016dca:	eea3 4b00 	vfma.f64	d4, d3, d0
 8016dce:	2600      	movs	r6, #0
 8016dd0:	19f2      	adds	r2, r6, r7
 8016dd2:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 8016dd6:	eea7 6b04 	vfma.f64	d6, d7, d4
 8016dda:	2c00      	cmp	r4, #0
 8016ddc:	d14b      	bne.n	8016e76 <exp+0x176>
 8016dde:	42b5      	cmp	r5, r6
 8016de0:	db10      	blt.n	8016e04 <exp+0x104>
 8016de2:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8016de6:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8016e88 <exp+0x188>
 8016dea:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8016dee:	4610      	mov	r0, r2
 8016df0:	ec41 0b10 	vmov	d0, r0, r1
 8016df4:	eea6 0b00 	vfma.f64	d0, d6, d0
 8016df8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016dfc:	b004      	add	sp, #16
 8016dfe:	bcf0      	pop	{r4, r5, r6, r7}
 8016e00:	f000 b88a 	b.w	8016f18 <__math_check_oflow>
 8016e04:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8016e08:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8016e0c:	4610      	mov	r0, r2
 8016e0e:	ec41 0b17 	vmov	d7, r0, r1
 8016e12:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8016e16:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016e1a:	ee37 5b06 	vadd.f64	d5, d7, d6
 8016e1e:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8016e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e26:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8016e90 <exp+0x190>
 8016e2a:	d51e      	bpl.n	8016e6a <exp+0x16a>
 8016e2c:	ee35 3b04 	vadd.f64	d3, d5, d4
 8016e30:	ee37 7b45 	vsub.f64	d7, d7, d5
 8016e34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016e38:	ee34 6b43 	vsub.f64	d6, d4, d3
 8016e3c:	ee36 6b05 	vadd.f64	d6, d6, d5
 8016e40:	ee36 6b07 	vadd.f64	d6, d6, d7
 8016e44:	ee36 6b03 	vadd.f64	d6, d6, d3
 8016e48:	ee36 5b44 	vsub.f64	d5, d6, d4
 8016e4c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8016e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e54:	d101      	bne.n	8016e5a <exp+0x15a>
 8016e56:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8016e98 <exp+0x198>
 8016e5a:	ed8d 0b00 	vstr	d0, [sp]
 8016e5e:	ed9d 7b00 	vldr	d7, [sp]
 8016e62:	ee27 7b00 	vmul.f64	d7, d7, d0
 8016e66:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016e6a:	ee25 0b00 	vmul.f64	d0, d5, d0
 8016e6e:	b004      	add	sp, #16
 8016e70:	bcf0      	pop	{r4, r5, r6, r7}
 8016e72:	f000 b845 	b.w	8016f00 <__math_check_uflow>
 8016e76:	ec43 2b10 	vmov	d0, r2, r3
 8016e7a:	eea6 0b00 	vfma.f64	d0, d6, d0
 8016e7e:	e751      	b.n	8016d24 <exp+0x24>
 8016e80:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8016e98 <exp+0x198>
 8016e84:	e74e      	b.n	8016d24 <exp+0x24>
 8016e86:	bf00      	nop
 8016e88:	00000000 	.word	0x00000000
 8016e8c:	7f000000 	.word	0x7f000000
 8016e90:	00000000 	.word	0x00000000
 8016e94:	00100000 	.word	0x00100000
	...
 8016ea0:	08024128 	.word	0x08024128

08016ea4 <with_errno>:
 8016ea4:	b513      	push	{r0, r1, r4, lr}
 8016ea6:	4604      	mov	r4, r0
 8016ea8:	ed8d 0b00 	vstr	d0, [sp]
 8016eac:	f001 ffba 	bl	8018e24 <__errno>
 8016eb0:	ed9d 0b00 	vldr	d0, [sp]
 8016eb4:	6004      	str	r4, [r0, #0]
 8016eb6:	b002      	add	sp, #8
 8016eb8:	bd10      	pop	{r4, pc}

08016eba <xflow>:
 8016eba:	b082      	sub	sp, #8
 8016ebc:	b158      	cbz	r0, 8016ed6 <xflow+0x1c>
 8016ebe:	eeb1 7b40 	vneg.f64	d7, d0
 8016ec2:	ed8d 7b00 	vstr	d7, [sp]
 8016ec6:	ed9d 7b00 	vldr	d7, [sp]
 8016eca:	2022      	movs	r0, #34	; 0x22
 8016ecc:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016ed0:	b002      	add	sp, #8
 8016ed2:	f7ff bfe7 	b.w	8016ea4 <with_errno>
 8016ed6:	eeb0 7b40 	vmov.f64	d7, d0
 8016eda:	e7f2      	b.n	8016ec2 <xflow+0x8>
 8016edc:	0000      	movs	r0, r0
	...

08016ee0 <__math_uflow>:
 8016ee0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016ee8 <__math_uflow+0x8>
 8016ee4:	f7ff bfe9 	b.w	8016eba <xflow>
 8016ee8:	00000000 	.word	0x00000000
 8016eec:	10000000 	.word	0x10000000

08016ef0 <__math_oflow>:
 8016ef0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016ef8 <__math_oflow+0x8>
 8016ef4:	f7ff bfe1 	b.w	8016eba <xflow>
 8016ef8:	00000000 	.word	0x00000000
 8016efc:	70000000 	.word	0x70000000

08016f00 <__math_check_uflow>:
 8016f00:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f08:	d102      	bne.n	8016f10 <__math_check_uflow+0x10>
 8016f0a:	2022      	movs	r0, #34	; 0x22
 8016f0c:	f7ff bfca 	b.w	8016ea4 <with_errno>
 8016f10:	4770      	bx	lr
 8016f12:	0000      	movs	r0, r0
 8016f14:	0000      	movs	r0, r0
	...

08016f18 <__math_check_oflow>:
 8016f18:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8016f38 <__math_check_oflow+0x20>
 8016f1c:	eeb0 7bc0 	vabs.f64	d7, d0
 8016f20:	eeb4 7b46 	vcmp.f64	d7, d6
 8016f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f28:	dd02      	ble.n	8016f30 <__math_check_oflow+0x18>
 8016f2a:	2022      	movs	r0, #34	; 0x22
 8016f2c:	f7ff bfba 	b.w	8016ea4 <with_errno>
 8016f30:	4770      	bx	lr
 8016f32:	bf00      	nop
 8016f34:	f3af 8000 	nop.w
 8016f38:	ffffffff 	.word	0xffffffff
 8016f3c:	7fefffff 	.word	0x7fefffff

08016f40 <checkint>:
 8016f40:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8016f44:	2b7e      	cmp	r3, #126	; 0x7e
 8016f46:	dd10      	ble.n	8016f6a <checkint+0x2a>
 8016f48:	2b96      	cmp	r3, #150	; 0x96
 8016f4a:	dc0c      	bgt.n	8016f66 <checkint+0x26>
 8016f4c:	2201      	movs	r2, #1
 8016f4e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8016f52:	fa02 f303 	lsl.w	r3, r2, r3
 8016f56:	1e5a      	subs	r2, r3, #1
 8016f58:	4202      	tst	r2, r0
 8016f5a:	d106      	bne.n	8016f6a <checkint+0x2a>
 8016f5c:	4203      	tst	r3, r0
 8016f5e:	bf0c      	ite	eq
 8016f60:	2002      	moveq	r0, #2
 8016f62:	2001      	movne	r0, #1
 8016f64:	4770      	bx	lr
 8016f66:	2002      	movs	r0, #2
 8016f68:	4770      	bx	lr
 8016f6a:	2000      	movs	r0, #0
 8016f6c:	4770      	bx	lr
	...

08016f70 <powf>:
 8016f70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f72:	ee10 1a10 	vmov	r1, s0
 8016f76:	ee10 4a90 	vmov	r4, s1
 8016f7a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8016f7e:	0062      	lsls	r2, r4, #1
 8016f80:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8016f84:	eef0 7a40 	vmov.f32	s15, s0
 8016f88:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8016f8c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8016f90:	d252      	bcs.n	8017038 <powf+0xc8>
 8016f92:	4298      	cmp	r0, r3
 8016f94:	d252      	bcs.n	801703c <powf+0xcc>
 8016f96:	2000      	movs	r0, #0
 8016f98:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8016f9c:	4a9e      	ldr	r2, [pc, #632]	; (8017218 <powf+0x2a8>)
 8016f9e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8016fa2:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8016fa6:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8016faa:	0ddb      	lsrs	r3, r3, #23
 8016fac:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8016fb0:	05db      	lsls	r3, r3, #23
 8016fb2:	ed94 5b00 	vldr	d5, [r4]
 8016fb6:	1ac9      	subs	r1, r1, r3
 8016fb8:	ee07 1a90 	vmov	s15, r1
 8016fbc:	15db      	asrs	r3, r3, #23
 8016fbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8016fc2:	eea5 6b07 	vfma.f64	d6, d5, d7
 8016fc6:	ed94 5b02 	vldr	d5, [r4, #8]
 8016fca:	ee26 2b06 	vmul.f64	d2, d6, d6
 8016fce:	ee22 1b02 	vmul.f64	d1, d2, d2
 8016fd2:	ee07 3a90 	vmov	s15, r3
 8016fd6:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
 8016fda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8016fde:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016fe2:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8016fe6:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
 8016fea:	eea6 3b05 	vfma.f64	d3, d6, d5
 8016fee:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 8016ff2:	eea6 5b04 	vfma.f64	d5, d6, d4
 8016ff6:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
 8016ffa:	eea6 7b04 	vfma.f64	d7, d6, d4
 8016ffe:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
 8017002:	eea2 7b05 	vfma.f64	d7, d2, d5
 8017006:	eea3 7b01 	vfma.f64	d7, d3, d1
 801700a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801700e:	ee16 3a90 	vmov	r3, s13
 8017012:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8017016:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801701a:	429a      	cmp	r2, r3
 801701c:	f0c0 80b0 	bcc.w	8017180 <powf+0x210>
 8017020:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80171f8 <powf+0x288>
 8017024:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801702c:	dd78      	ble.n	8017120 <powf+0x1b0>
 801702e:	b003      	add	sp, #12
 8017030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017034:	f000 b91a 	b.w	801726c <__math_oflowf>
 8017038:	4298      	cmp	r0, r3
 801703a:	d32d      	bcc.n	8017098 <powf+0x128>
 801703c:	b952      	cbnz	r2, 8017054 <powf+0xe4>
 801703e:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
 8017042:	0049      	lsls	r1, r1, #1
 8017044:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 8017048:	f240 80c8 	bls.w	80171dc <powf+0x26c>
 801704c:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8017050:	b003      	add	sp, #12
 8017052:	bd30      	pop	{r4, r5, pc}
 8017054:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8017058:	d105      	bne.n	8017066 <powf+0xf6>
 801705a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801705e:	0064      	lsls	r4, r4, #1
 8017060:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8017064:	e7f0      	b.n	8017048 <powf+0xd8>
 8017066:	0049      	lsls	r1, r1, #1
 8017068:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 801706c:	d8ee      	bhi.n	801704c <powf+0xdc>
 801706e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8017072:	d1eb      	bne.n	801704c <powf+0xdc>
 8017074:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8017078:	f000 80b0 	beq.w	80171dc <powf+0x26c>
 801707c:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8017080:	ea6f 0404 	mvn.w	r4, r4
 8017084:	bf34      	ite	cc
 8017086:	2100      	movcc	r1, #0
 8017088:	2101      	movcs	r1, #1
 801708a:	0fe4      	lsrs	r4, r4, #31
 801708c:	42a1      	cmp	r1, r4
 801708e:	f040 80a8 	bne.w	80171e2 <powf+0x272>
 8017092:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8017096:	e7db      	b.n	8017050 <powf+0xe0>
 8017098:	004d      	lsls	r5, r1, #1
 801709a:	1e6a      	subs	r2, r5, #1
 801709c:	429a      	cmp	r2, r3
 801709e:	d31c      	bcc.n	80170da <powf+0x16a>
 80170a0:	2900      	cmp	r1, #0
 80170a2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80170a6:	da0f      	bge.n	80170c8 <powf+0x158>
 80170a8:	ee10 0a90 	vmov	r0, s1
 80170ac:	f7ff ff48 	bl	8016f40 <checkint>
 80170b0:	2801      	cmp	r0, #1
 80170b2:	d109      	bne.n	80170c8 <powf+0x158>
 80170b4:	eeb1 0a40 	vneg.f32	s0, s0
 80170b8:	b945      	cbnz	r5, 80170cc <powf+0x15c>
 80170ba:	2c00      	cmp	r4, #0
 80170bc:	dac8      	bge.n	8017050 <powf+0xe0>
 80170be:	b003      	add	sp, #12
 80170c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170c4:	f000 b8d8 	b.w	8017278 <__math_divzerof>
 80170c8:	2000      	movs	r0, #0
 80170ca:	e7f5      	b.n	80170b8 <powf+0x148>
 80170cc:	2c00      	cmp	r4, #0
 80170ce:	dabf      	bge.n	8017050 <powf+0xe0>
 80170d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80170d4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80170d8:	e7ba      	b.n	8017050 <powf+0xe0>
 80170da:	2900      	cmp	r1, #0
 80170dc:	da1e      	bge.n	801711c <powf+0x1ac>
 80170de:	ee10 0a90 	vmov	r0, s1
 80170e2:	f7ff ff2d 	bl	8016f40 <checkint>
 80170e6:	b920      	cbnz	r0, 80170f2 <powf+0x182>
 80170e8:	b003      	add	sp, #12
 80170ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170ee:	f000 b8d5 	b.w	801729c <__math_invalidf>
 80170f2:	1e43      	subs	r3, r0, #1
 80170f4:	4258      	negs	r0, r3
 80170f6:	4158      	adcs	r0, r3
 80170f8:	0400      	lsls	r0, r0, #16
 80170fa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80170fe:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8017102:	f4bf af49 	bcs.w	8016f98 <powf+0x28>
 8017106:	ed9f 7a45 	vldr	s14, [pc, #276]	; 801721c <powf+0x2ac>
 801710a:	ee27 0a87 	vmul.f32	s0, s15, s14
 801710e:	ee10 3a10 	vmov	r3, s0
 8017112:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017116:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801711a:	e73d      	b.n	8016f98 <powf+0x28>
 801711c:	2000      	movs	r0, #0
 801711e:	e7ee      	b.n	80170fe <powf+0x18e>
 8017120:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8017200 <powf+0x290>
 8017124:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801712c:	dd10      	ble.n	8017150 <powf+0x1e0>
 801712e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 8017132:	2800      	cmp	r0, #0
 8017134:	d158      	bne.n	80171e8 <powf+0x278>
 8017136:	9300      	str	r3, [sp, #0]
 8017138:	eddd 7a00 	vldr	s15, [sp]
 801713c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017140:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017144:	eef4 7a47 	vcmp.f32	s15, s14
 8017148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801714c:	f47f af6f 	bne.w	801702e <powf+0xbe>
 8017150:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8017208 <powf+0x298>
 8017154:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801715c:	d804      	bhi.n	8017168 <powf+0x1f8>
 801715e:	b003      	add	sp, #12
 8017160:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017164:	f000 b876 	b.w	8017254 <__math_uflowf>
 8017168:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8017210 <powf+0x2a0>
 801716c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8017170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017174:	d504      	bpl.n	8017180 <powf+0x210>
 8017176:	b003      	add	sp, #12
 8017178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801717c:	f000 b870 	b.w	8017260 <__math_may_uflowf>
 8017180:	4b27      	ldr	r3, [pc, #156]	; (8017220 <powf+0x2b0>)
 8017182:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017186:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 801718a:	ee36 7b05 	vadd.f64	d7, d6, d5
 801718e:	ee17 2a10 	vmov	r2, s14
 8017192:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017196:	f002 011f 	and.w	r1, r2, #31
 801719a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801719e:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80171a2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80171a6:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80171aa:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80171ae:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80171b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80171b6:	686d      	ldr	r5, [r5, #4]
 80171b8:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80171bc:	1882      	adds	r2, r0, r2
 80171be:	2300      	movs	r3, #0
 80171c0:	1918      	adds	r0, r3, r4
 80171c2:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80171c6:	eea7 0b05 	vfma.f64	d0, d7, d5
 80171ca:	ec41 0b17 	vmov	d7, r0, r1
 80171ce:	eea6 0b04 	vfma.f64	d0, d6, d4
 80171d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80171d6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80171da:	e739      	b.n	8017050 <powf+0xe0>
 80171dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80171e0:	e736      	b.n	8017050 <powf+0xe0>
 80171e2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8017224 <powf+0x2b4>
 80171e6:	e733      	b.n	8017050 <powf+0xe0>
 80171e8:	9301      	str	r3, [sp, #4]
 80171ea:	eddd 7a01 	vldr	s15, [sp, #4]
 80171ee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80171f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80171f6:	e7a5      	b.n	8017144 <powf+0x1d4>
 80171f8:	ffd1d571 	.word	0xffd1d571
 80171fc:	405fffff 	.word	0x405fffff
 8017200:	ffa3aae2 	.word	0xffa3aae2
 8017204:	405fffff 	.word	0x405fffff
 8017208:	00000000 	.word	0x00000000
 801720c:	c062c000 	.word	0xc062c000
 8017210:	00000000 	.word	0x00000000
 8017214:	c062a000 	.word	0xc062a000
 8017218:	08024fd8 	.word	0x08024fd8
 801721c:	4b000000 	.word	0x4b000000
 8017220:	08023ec0 	.word	0x08023ec0
 8017224:	00000000 	.word	0x00000000

08017228 <with_errnof>:
 8017228:	b513      	push	{r0, r1, r4, lr}
 801722a:	4604      	mov	r4, r0
 801722c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8017230:	f001 fdf8 	bl	8018e24 <__errno>
 8017234:	ed9d 0a01 	vldr	s0, [sp, #4]
 8017238:	6004      	str	r4, [r0, #0]
 801723a:	b002      	add	sp, #8
 801723c:	bd10      	pop	{r4, pc}

0801723e <xflowf>:
 801723e:	b130      	cbz	r0, 801724e <xflowf+0x10>
 8017240:	eef1 7a40 	vneg.f32	s15, s0
 8017244:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017248:	2022      	movs	r0, #34	; 0x22
 801724a:	f7ff bfed 	b.w	8017228 <with_errnof>
 801724e:	eef0 7a40 	vmov.f32	s15, s0
 8017252:	e7f7      	b.n	8017244 <xflowf+0x6>

08017254 <__math_uflowf>:
 8017254:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801725c <__math_uflowf+0x8>
 8017258:	f7ff bff1 	b.w	801723e <xflowf>
 801725c:	10000000 	.word	0x10000000

08017260 <__math_may_uflowf>:
 8017260:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017268 <__math_may_uflowf+0x8>
 8017264:	f7ff bfeb 	b.w	801723e <xflowf>
 8017268:	1a200000 	.word	0x1a200000

0801726c <__math_oflowf>:
 801726c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017274 <__math_oflowf+0x8>
 8017270:	f7ff bfe5 	b.w	801723e <xflowf>
 8017274:	70000000 	.word	0x70000000

08017278 <__math_divzerof>:
 8017278:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8017298 <__math_divzerof+0x20>
 801727c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017280:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017284:	2800      	cmp	r0, #0
 8017286:	f04f 0022 	mov.w	r0, #34	; 0x22
 801728a:	fe47 7a27 	vseleq.f32	s15, s14, s15
 801728e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8017292:	f7ff bfc9 	b.w	8017228 <with_errnof>
 8017296:	bf00      	nop
 8017298:	00000000 	.word	0x00000000

0801729c <__math_invalidf>:
 801729c:	eef0 7a40 	vmov.f32	s15, s0
 80172a0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80172a4:	eef4 7a67 	vcmp.f32	s15, s15
 80172a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172ac:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80172b0:	d602      	bvs.n	80172b8 <__math_invalidf+0x1c>
 80172b2:	2021      	movs	r0, #33	; 0x21
 80172b4:	f7ff bfb8 	b.w	8017228 <with_errnof>
 80172b8:	4770      	bx	lr
	...

080172bc <log10f>:
 80172bc:	b508      	push	{r3, lr}
 80172be:	ed2d 8b02 	vpush	{d8}
 80172c2:	eeb0 8a40 	vmov.f32	s16, s0
 80172c6:	f000 f9ff 	bl	80176c8 <__ieee754_log10f>
 80172ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80172ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172d2:	d60f      	bvs.n	80172f4 <log10f+0x38>
 80172d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80172d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172dc:	d80a      	bhi.n	80172f4 <log10f+0x38>
 80172de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80172e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80172e6:	d108      	bne.n	80172fa <log10f+0x3e>
 80172e8:	f001 fd9c 	bl	8018e24 <__errno>
 80172ec:	2322      	movs	r3, #34	; 0x22
 80172ee:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8017310 <log10f+0x54>
 80172f2:	6003      	str	r3, [r0, #0]
 80172f4:	ecbd 8b02 	vpop	{d8}
 80172f8:	bd08      	pop	{r3, pc}
 80172fa:	f001 fd93 	bl	8018e24 <__errno>
 80172fe:	ecbd 8b02 	vpop	{d8}
 8017302:	2321      	movs	r3, #33	; 0x21
 8017304:	6003      	str	r3, [r0, #0]
 8017306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801730a:	4802      	ldr	r0, [pc, #8]	; (8017314 <log10f+0x58>)
 801730c:	f000 b82a 	b.w	8017364 <nanf>
 8017310:	ff800000 	.word	0xff800000
 8017314:	08023ebc 	.word	0x08023ebc

08017318 <sqrtf>:
 8017318:	b508      	push	{r3, lr}
 801731a:	ed2d 8b02 	vpush	{d8}
 801731e:	eeb0 8a40 	vmov.f32	s16, s0
 8017322:	f000 f9cd 	bl	80176c0 <__ieee754_sqrtf>
 8017326:	eeb4 8a48 	vcmp.f32	s16, s16
 801732a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801732e:	d60c      	bvs.n	801734a <sqrtf+0x32>
 8017330:	eddf 8a07 	vldr	s17, [pc, #28]	; 8017350 <sqrtf+0x38>
 8017334:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801733c:	d505      	bpl.n	801734a <sqrtf+0x32>
 801733e:	f001 fd71 	bl	8018e24 <__errno>
 8017342:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8017346:	2321      	movs	r3, #33	; 0x21
 8017348:	6003      	str	r3, [r0, #0]
 801734a:	ecbd 8b02 	vpop	{d8}
 801734e:	bd08      	pop	{r3, pc}
 8017350:	00000000 	.word	0x00000000

08017354 <fabsf>:
 8017354:	ee10 3a10 	vmov	r3, s0
 8017358:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801735c:	ee00 3a10 	vmov	s0, r3
 8017360:	4770      	bx	lr
	...

08017364 <nanf>:
 8017364:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801736c <nanf+0x8>
 8017368:	4770      	bx	lr
 801736a:	bf00      	nop
 801736c:	7fc00000 	.word	0x7fc00000

08017370 <tanf>:
 8017370:	ee10 3a10 	vmov	r3, s0
 8017374:	b507      	push	{r0, r1, r2, lr}
 8017376:	4a12      	ldr	r2, [pc, #72]	; (80173c0 <tanf+0x50>)
 8017378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801737c:	4293      	cmp	r3, r2
 801737e:	dc07      	bgt.n	8017390 <tanf+0x20>
 8017380:	eddf 0a10 	vldr	s1, [pc, #64]	; 80173c4 <tanf+0x54>
 8017384:	2001      	movs	r0, #1
 8017386:	b003      	add	sp, #12
 8017388:	f85d eb04 	ldr.w	lr, [sp], #4
 801738c:	f000 b8b8 	b.w	8017500 <__kernel_tanf>
 8017390:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017394:	db04      	blt.n	80173a0 <tanf+0x30>
 8017396:	ee30 0a40 	vsub.f32	s0, s0, s0
 801739a:	b003      	add	sp, #12
 801739c:	f85d fb04 	ldr.w	pc, [sp], #4
 80173a0:	4668      	mov	r0, sp
 80173a2:	f000 f9e9 	bl	8017778 <__ieee754_rem_pio2f>
 80173a6:	0040      	lsls	r0, r0, #1
 80173a8:	f000 0002 	and.w	r0, r0, #2
 80173ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80173b0:	ed9d 0a00 	vldr	s0, [sp]
 80173b4:	f1c0 0001 	rsb	r0, r0, #1
 80173b8:	f000 f8a2 	bl	8017500 <__kernel_tanf>
 80173bc:	e7ed      	b.n	801739a <tanf+0x2a>
 80173be:	bf00      	nop
 80173c0:	3f490fda 	.word	0x3f490fda
 80173c4:	00000000 	.word	0x00000000

080173c8 <tanhf>:
 80173c8:	b538      	push	{r3, r4, r5, lr}
 80173ca:	ee10 5a10 	vmov	r5, s0
 80173ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80173d2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80173d6:	ed2d 8b02 	vpush	{d8}
 80173da:	db0f      	blt.n	80173fc <tanhf+0x34>
 80173dc:	4b2a      	ldr	r3, [pc, #168]	; (8017488 <tanhf+0xc0>)
 80173de:	ed93 6a00 	vldr	s12, [r3]
 80173e2:	edd3 6a00 	vldr	s13, [r3]
 80173e6:	eec6 7a00 	vdiv.f32	s15, s12, s0
 80173ea:	2d00      	cmp	r5, #0
 80173ec:	bfac      	ite	ge
 80173ee:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 80173f2:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 80173f6:	ecbd 8b02 	vpop	{d8}
 80173fa:	bd38      	pop	{r3, r4, r5, pc}
 80173fc:	4a23      	ldr	r2, [pc, #140]	; (801748c <tanhf+0xc4>)
 80173fe:	4293      	cmp	r3, r2
 8017400:	dc39      	bgt.n	8017476 <tanhf+0xae>
 8017402:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8017406:	da07      	bge.n	8017418 <tanhf+0x50>
 8017408:	4b1f      	ldr	r3, [pc, #124]	; (8017488 <tanhf+0xc0>)
 801740a:	edd3 7a00 	vldr	s15, [r3]
 801740e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8017412:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017416:	e7ee      	b.n	80173f6 <tanhf+0x2e>
 8017418:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801741c:	4c1c      	ldr	r4, [pc, #112]	; (8017490 <tanhf+0xc8>)
 801741e:	db19      	blt.n	8017454 <tanhf+0x8c>
 8017420:	f7ff ff98 	bl	8017354 <fabsf>
 8017424:	edd4 7a00 	vldr	s15, [r4]
 8017428:	ee20 0a27 	vmul.f32	s0, s0, s15
 801742c:	f000 ffc4 	bl	80183b8 <expm1f>
 8017430:	4b15      	ldr	r3, [pc, #84]	; (8017488 <tanhf+0xc0>)
 8017432:	edd3 7a00 	vldr	s15, [r3]
 8017436:	edd4 6a00 	vldr	s13, [r4]
 801743a:	ed94 7a00 	vldr	s14, [r4]
 801743e:	ee37 0a00 	vadd.f32	s0, s14, s0
 8017442:	ee86 7a80 	vdiv.f32	s14, s13, s0
 8017446:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801744a:	2d00      	cmp	r5, #0
 801744c:	bfb8      	it	lt
 801744e:	eeb1 0a40 	vneglt.f32	s0, s0
 8017452:	e7d0      	b.n	80173f6 <tanhf+0x2e>
 8017454:	ed94 8a00 	vldr	s16, [r4]
 8017458:	f7ff ff7c 	bl	8017354 <fabsf>
 801745c:	ee28 0a40 	vnmul.f32	s0, s16, s0
 8017460:	f000 ffaa 	bl	80183b8 <expm1f>
 8017464:	edd4 7a00 	vldr	s15, [r4]
 8017468:	ee77 7a80 	vadd.f32	s15, s15, s0
 801746c:	eeb1 7a40 	vneg.f32	s14, s0
 8017470:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8017474:	e7e9      	b.n	801744a <tanhf+0x82>
 8017476:	4b04      	ldr	r3, [pc, #16]	; (8017488 <tanhf+0xc0>)
 8017478:	ed93 0a00 	vldr	s0, [r3]
 801747c:	4b05      	ldr	r3, [pc, #20]	; (8017494 <tanhf+0xcc>)
 801747e:	edd3 7a00 	vldr	s15, [r3]
 8017482:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017486:	e7e0      	b.n	801744a <tanhf+0x82>
 8017488:	20000b94 	.word	0x20000b94
 801748c:	41afffff 	.word	0x41afffff
 8017490:	20000b9c 	.word	0x20000b9c
 8017494:	20000b98 	.word	0x20000b98

08017498 <tan>:
 8017498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801749a:	eeb0 7b40 	vmov.f64	d7, d0
 801749e:	ee17 3a90 	vmov	r3, s15
 80174a2:	4a15      	ldr	r2, [pc, #84]	; (80174f8 <tan+0x60>)
 80174a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80174a8:	4293      	cmp	r3, r2
 80174aa:	dc07      	bgt.n	80174bc <tan+0x24>
 80174ac:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80174f0 <tan+0x58>
 80174b0:	2001      	movs	r0, #1
 80174b2:	b005      	add	sp, #20
 80174b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80174b8:	f000 be62 	b.w	8018180 <__kernel_tan>
 80174bc:	4a0f      	ldr	r2, [pc, #60]	; (80174fc <tan+0x64>)
 80174be:	4293      	cmp	r3, r2
 80174c0:	dd04      	ble.n	80174cc <tan+0x34>
 80174c2:	ee30 0b40 	vsub.f64	d0, d0, d0
 80174c6:	b005      	add	sp, #20
 80174c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80174cc:	4668      	mov	r0, sp
 80174ce:	f000 fa7f 	bl	80179d0 <__ieee754_rem_pio2>
 80174d2:	0040      	lsls	r0, r0, #1
 80174d4:	f000 0002 	and.w	r0, r0, #2
 80174d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80174dc:	ed9d 0b00 	vldr	d0, [sp]
 80174e0:	f1c0 0001 	rsb	r0, r0, #1
 80174e4:	f000 fe4c 	bl	8018180 <__kernel_tan>
 80174e8:	e7ed      	b.n	80174c6 <tan+0x2e>
 80174ea:	bf00      	nop
 80174ec:	f3af 8000 	nop.w
	...
 80174f8:	3fe921fb 	.word	0x3fe921fb
 80174fc:	7fefffff 	.word	0x7fefffff

08017500 <__kernel_tanf>:
 8017500:	b508      	push	{r3, lr}
 8017502:	ee10 3a10 	vmov	r3, s0
 8017506:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801750a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801750e:	eef0 7a40 	vmov.f32	s15, s0
 8017512:	da17      	bge.n	8017544 <__kernel_tanf+0x44>
 8017514:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8017518:	ee17 1a10 	vmov	r1, s14
 801751c:	bb41      	cbnz	r1, 8017570 <__kernel_tanf+0x70>
 801751e:	1c43      	adds	r3, r0, #1
 8017520:	4313      	orrs	r3, r2
 8017522:	d108      	bne.n	8017536 <__kernel_tanf+0x36>
 8017524:	f7ff ff16 	bl	8017354 <fabsf>
 8017528:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801752c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017530:	eeb0 0a67 	vmov.f32	s0, s15
 8017534:	bd08      	pop	{r3, pc}
 8017536:	2801      	cmp	r0, #1
 8017538:	d0fa      	beq.n	8017530 <__kernel_tanf+0x30>
 801753a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801753e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017542:	e7f5      	b.n	8017530 <__kernel_tanf+0x30>
 8017544:	494c      	ldr	r1, [pc, #304]	; (8017678 <__kernel_tanf+0x178>)
 8017546:	428a      	cmp	r2, r1
 8017548:	db12      	blt.n	8017570 <__kernel_tanf+0x70>
 801754a:	2b00      	cmp	r3, #0
 801754c:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801767c <__kernel_tanf+0x17c>
 8017550:	bfb8      	it	lt
 8017552:	eef1 7a40 	vneglt.f32	s15, s0
 8017556:	ee37 7a67 	vsub.f32	s14, s14, s15
 801755a:	eddf 7a49 	vldr	s15, [pc, #292]	; 8017680 <__kernel_tanf+0x180>
 801755e:	bfb8      	it	lt
 8017560:	eef1 0a60 	vneglt.f32	s1, s1
 8017564:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017568:	eddf 0a46 	vldr	s1, [pc, #280]	; 8017684 <__kernel_tanf+0x184>
 801756c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017570:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8017574:	eddf 5a44 	vldr	s11, [pc, #272]	; 8017688 <__kernel_tanf+0x188>
 8017578:	ed9f 6a44 	vldr	s12, [pc, #272]	; 801768c <__kernel_tanf+0x18c>
 801757c:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8017690 <__kernel_tanf+0x190>
 8017580:	493d      	ldr	r1, [pc, #244]	; (8017678 <__kernel_tanf+0x178>)
 8017582:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017586:	428a      	cmp	r2, r1
 8017588:	eea7 6a25 	vfma.f32	s12, s14, s11
 801758c:	eddf 5a41 	vldr	s11, [pc, #260]	; 8017694 <__kernel_tanf+0x194>
 8017590:	eee6 5a07 	vfma.f32	s11, s12, s14
 8017594:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8017698 <__kernel_tanf+0x198>
 8017598:	eea5 6a87 	vfma.f32	s12, s11, s14
 801759c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801769c <__kernel_tanf+0x19c>
 80175a0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80175a4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80176a0 <__kernel_tanf+0x1a0>
 80175a8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80175ac:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80176a4 <__kernel_tanf+0x1a4>
 80175b0:	eee7 5a05 	vfma.f32	s11, s14, s10
 80175b4:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80176a8 <__kernel_tanf+0x1a8>
 80175b8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80175bc:	eddf 5a3b 	vldr	s11, [pc, #236]	; 80176ac <__kernel_tanf+0x1ac>
 80175c0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80175c4:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80176b0 <__kernel_tanf+0x1b0>
 80175c8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80175cc:	eddf 5a39 	vldr	s11, [pc, #228]	; 80176b4 <__kernel_tanf+0x1b4>
 80175d0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80175d4:	eeb0 7a46 	vmov.f32	s14, s12
 80175d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80175dc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80175e0:	eeb0 6a60 	vmov.f32	s12, s1
 80175e4:	eea7 6a05 	vfma.f32	s12, s14, s10
 80175e8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80176b8 <__kernel_tanf+0x1b8>
 80175ec:	eee6 0a26 	vfma.f32	s1, s12, s13
 80175f0:	eee5 0a07 	vfma.f32	s1, s10, s14
 80175f4:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80175f8:	db1d      	blt.n	8017636 <__kernel_tanf+0x136>
 80175fa:	ee07 0a10 	vmov	s14, r0
 80175fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017602:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8017606:	ee76 6a87 	vadd.f32	s13, s13, s14
 801760a:	179b      	asrs	r3, r3, #30
 801760c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 8017610:	f003 0302 	and.w	r3, r3, #2
 8017614:	f1c3 0301 	rsb	r3, r3, #1
 8017618:	ee76 6a60 	vsub.f32	s13, s12, s1
 801761c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017620:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017624:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8017628:	ee07 3a90 	vmov	s15, r3
 801762c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017630:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017634:	e77c      	b.n	8017530 <__kernel_tanf+0x30>
 8017636:	2801      	cmp	r0, #1
 8017638:	d01b      	beq.n	8017672 <__kernel_tanf+0x172>
 801763a:	4b20      	ldr	r3, [pc, #128]	; (80176bc <__kernel_tanf+0x1bc>)
 801763c:	ee16 2a90 	vmov	r2, s13
 8017640:	401a      	ands	r2, r3
 8017642:	ee05 2a90 	vmov	s11, r2
 8017646:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801764a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801764e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8017652:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8017656:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 801765a:	ee16 2a10 	vmov	r2, s12
 801765e:	4013      	ands	r3, r2
 8017660:	ee07 3a90 	vmov	s15, r3
 8017664:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8017668:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801766c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8017670:	e75e      	b.n	8017530 <__kernel_tanf+0x30>
 8017672:	eef0 7a66 	vmov.f32	s15, s13
 8017676:	e75b      	b.n	8017530 <__kernel_tanf+0x30>
 8017678:	3f2ca140 	.word	0x3f2ca140
 801767c:	3f490fda 	.word	0x3f490fda
 8017680:	33222168 	.word	0x33222168
 8017684:	00000000 	.word	0x00000000
 8017688:	b79bae5f 	.word	0xb79bae5f
 801768c:	38a3f445 	.word	0x38a3f445
 8017690:	37d95384 	.word	0x37d95384
 8017694:	3a1a26c8 	.word	0x3a1a26c8
 8017698:	3b6b6916 	.word	0x3b6b6916
 801769c:	3cb327a4 	.word	0x3cb327a4
 80176a0:	3e088889 	.word	0x3e088889
 80176a4:	3895c07a 	.word	0x3895c07a
 80176a8:	398137b9 	.word	0x398137b9
 80176ac:	3abede48 	.word	0x3abede48
 80176b0:	3c11371f 	.word	0x3c11371f
 80176b4:	3d5d0dd1 	.word	0x3d5d0dd1
 80176b8:	3eaaaaab 	.word	0x3eaaaaab
 80176bc:	fffff000 	.word	0xfffff000

080176c0 <__ieee754_sqrtf>:
 80176c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80176c4:	4770      	bx	lr
	...

080176c8 <__ieee754_log10f>:
 80176c8:	b508      	push	{r3, lr}
 80176ca:	ee10 2a10 	vmov	r2, s0
 80176ce:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80176d2:	ed2d 8b02 	vpush	{d8}
 80176d6:	d108      	bne.n	80176ea <__ieee754_log10f+0x22>
 80176d8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8017760 <__ieee754_log10f+0x98>
 80176dc:	eddf 7a21 	vldr	s15, [pc, #132]	; 8017764 <__ieee754_log10f+0x9c>
 80176e0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80176e4:	ecbd 8b02 	vpop	{d8}
 80176e8:	bd08      	pop	{r3, pc}
 80176ea:	2a00      	cmp	r2, #0
 80176ec:	da02      	bge.n	80176f4 <__ieee754_log10f+0x2c>
 80176ee:	ee30 7a40 	vsub.f32	s14, s0, s0
 80176f2:	e7f3      	b.n	80176dc <__ieee754_log10f+0x14>
 80176f4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80176f8:	db02      	blt.n	8017700 <__ieee754_log10f+0x38>
 80176fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80176fe:	e7f1      	b.n	80176e4 <__ieee754_log10f+0x1c>
 8017700:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8017704:	bfbf      	itttt	lt
 8017706:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8017768 <__ieee754_log10f+0xa0>
 801770a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801770e:	f06f 0118 	mvnlt.w	r1, #24
 8017712:	ee17 2a90 	vmovlt	r2, s15
 8017716:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801771a:	bfa8      	it	ge
 801771c:	2100      	movge	r1, #0
 801771e:	3b7f      	subs	r3, #127	; 0x7f
 8017720:	440b      	add	r3, r1
 8017722:	0fd9      	lsrs	r1, r3, #31
 8017724:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8017728:	ee07 3a90 	vmov	s15, r3
 801772c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8017730:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8017734:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8017738:	ee00 3a10 	vmov	s0, r3
 801773c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8017740:	f7ff fa12 	bl	8016b68 <logf>
 8017744:	eddf 7a09 	vldr	s15, [pc, #36]	; 801776c <__ieee754_log10f+0xa4>
 8017748:	ee20 0a27 	vmul.f32	s0, s0, s15
 801774c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8017770 <__ieee754_log10f+0xa8>
 8017750:	eea8 0a27 	vfma.f32	s0, s16, s15
 8017754:	eddf 7a07 	vldr	s15, [pc, #28]	; 8017774 <__ieee754_log10f+0xac>
 8017758:	eea8 0a27 	vfma.f32	s0, s16, s15
 801775c:	e7c2      	b.n	80176e4 <__ieee754_log10f+0x1c>
 801775e:	bf00      	nop
 8017760:	cc000000 	.word	0xcc000000
 8017764:	00000000 	.word	0x00000000
 8017768:	4c000000 	.word	0x4c000000
 801776c:	3ede5bd9 	.word	0x3ede5bd9
 8017770:	355427db 	.word	0x355427db
 8017774:	3e9a2080 	.word	0x3e9a2080

08017778 <__ieee754_rem_pio2f>:
 8017778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801777a:	ee10 6a10 	vmov	r6, s0
 801777e:	4b86      	ldr	r3, [pc, #536]	; (8017998 <__ieee754_rem_pio2f+0x220>)
 8017780:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8017784:	429d      	cmp	r5, r3
 8017786:	b087      	sub	sp, #28
 8017788:	4604      	mov	r4, r0
 801778a:	dc05      	bgt.n	8017798 <__ieee754_rem_pio2f+0x20>
 801778c:	2300      	movs	r3, #0
 801778e:	ed80 0a00 	vstr	s0, [r0]
 8017792:	6043      	str	r3, [r0, #4]
 8017794:	2000      	movs	r0, #0
 8017796:	e020      	b.n	80177da <__ieee754_rem_pio2f+0x62>
 8017798:	4b80      	ldr	r3, [pc, #512]	; (801799c <__ieee754_rem_pio2f+0x224>)
 801779a:	429d      	cmp	r5, r3
 801779c:	dc38      	bgt.n	8017810 <__ieee754_rem_pio2f+0x98>
 801779e:	2e00      	cmp	r6, #0
 80177a0:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80179a0 <__ieee754_rem_pio2f+0x228>
 80177a4:	4b7f      	ldr	r3, [pc, #508]	; (80179a4 <__ieee754_rem_pio2f+0x22c>)
 80177a6:	f025 050f 	bic.w	r5, r5, #15
 80177aa:	dd18      	ble.n	80177de <__ieee754_rem_pio2f+0x66>
 80177ac:	429d      	cmp	r5, r3
 80177ae:	ee70 7a47 	vsub.f32	s15, s0, s14
 80177b2:	bf09      	itett	eq
 80177b4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 80179a8 <__ieee754_rem_pio2f+0x230>
 80177b8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 80179ac <__ieee754_rem_pio2f+0x234>
 80177bc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80177c0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 80179b0 <__ieee754_rem_pio2f+0x238>
 80177c4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80177c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80177cc:	edc0 6a00 	vstr	s13, [r0]
 80177d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80177d4:	edc0 7a01 	vstr	s15, [r0, #4]
 80177d8:	2001      	movs	r0, #1
 80177da:	b007      	add	sp, #28
 80177dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177de:	429d      	cmp	r5, r3
 80177e0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80177e4:	bf09      	itett	eq
 80177e6:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 80179a8 <__ieee754_rem_pio2f+0x230>
 80177ea:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 80179ac <__ieee754_rem_pio2f+0x234>
 80177ee:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80177f2:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 80179b0 <__ieee754_rem_pio2f+0x238>
 80177f6:	ee77 6a87 	vadd.f32	s13, s15, s14
 80177fa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80177fe:	edc0 6a00 	vstr	s13, [r0]
 8017802:	ee77 7a87 	vadd.f32	s15, s15, s14
 8017806:	edc0 7a01 	vstr	s15, [r0, #4]
 801780a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801780e:	e7e4      	b.n	80177da <__ieee754_rem_pio2f+0x62>
 8017810:	4b68      	ldr	r3, [pc, #416]	; (80179b4 <__ieee754_rem_pio2f+0x23c>)
 8017812:	429d      	cmp	r5, r3
 8017814:	dc71      	bgt.n	80178fa <__ieee754_rem_pio2f+0x182>
 8017816:	f7ff fd9d 	bl	8017354 <fabsf>
 801781a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80179b8 <__ieee754_rem_pio2f+0x240>
 801781e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017822:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801782a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801782e:	ee17 0a90 	vmov	r0, s15
 8017832:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80179a0 <__ieee754_rem_pio2f+0x228>
 8017836:	eea7 0a67 	vfms.f32	s0, s14, s15
 801783a:	281f      	cmp	r0, #31
 801783c:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80179ac <__ieee754_rem_pio2f+0x234>
 8017840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017844:	eeb1 6a47 	vneg.f32	s12, s14
 8017848:	ee70 6a67 	vsub.f32	s13, s0, s15
 801784c:	ee16 2a90 	vmov	r2, s13
 8017850:	dc1c      	bgt.n	801788c <__ieee754_rem_pio2f+0x114>
 8017852:	495a      	ldr	r1, [pc, #360]	; (80179bc <__ieee754_rem_pio2f+0x244>)
 8017854:	1e47      	subs	r7, r0, #1
 8017856:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801785a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801785e:	428b      	cmp	r3, r1
 8017860:	d014      	beq.n	801788c <__ieee754_rem_pio2f+0x114>
 8017862:	6022      	str	r2, [r4, #0]
 8017864:	ed94 7a00 	vldr	s14, [r4]
 8017868:	ee30 0a47 	vsub.f32	s0, s0, s14
 801786c:	2e00      	cmp	r6, #0
 801786e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017872:	ed84 0a01 	vstr	s0, [r4, #4]
 8017876:	dab0      	bge.n	80177da <__ieee754_rem_pio2f+0x62>
 8017878:	eeb1 7a47 	vneg.f32	s14, s14
 801787c:	eeb1 0a40 	vneg.f32	s0, s0
 8017880:	ed84 7a00 	vstr	s14, [r4]
 8017884:	ed84 0a01 	vstr	s0, [r4, #4]
 8017888:	4240      	negs	r0, r0
 801788a:	e7a6      	b.n	80177da <__ieee754_rem_pio2f+0x62>
 801788c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8017890:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8017894:	2908      	cmp	r1, #8
 8017896:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801789a:	dde2      	ble.n	8017862 <__ieee754_rem_pio2f+0xea>
 801789c:	eddf 5a42 	vldr	s11, [pc, #264]	; 80179a8 <__ieee754_rem_pio2f+0x230>
 80178a0:	eef0 6a40 	vmov.f32	s13, s0
 80178a4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80178a8:	ee70 7a66 	vsub.f32	s15, s0, s13
 80178ac:	eee6 7a25 	vfma.f32	s15, s12, s11
 80178b0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80179b0 <__ieee754_rem_pio2f+0x238>
 80178b4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80178b8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80178bc:	ee15 2a90 	vmov	r2, s11
 80178c0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80178c4:	1a5b      	subs	r3, r3, r1
 80178c6:	2b19      	cmp	r3, #25
 80178c8:	dc04      	bgt.n	80178d4 <__ieee754_rem_pio2f+0x15c>
 80178ca:	edc4 5a00 	vstr	s11, [r4]
 80178ce:	eeb0 0a66 	vmov.f32	s0, s13
 80178d2:	e7c7      	b.n	8017864 <__ieee754_rem_pio2f+0xec>
 80178d4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80179c0 <__ieee754_rem_pio2f+0x248>
 80178d8:	eeb0 0a66 	vmov.f32	s0, s13
 80178dc:	eea6 0a25 	vfma.f32	s0, s12, s11
 80178e0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80178e4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80179c4 <__ieee754_rem_pio2f+0x24c>
 80178e8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80178ec:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80178f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80178f4:	ed84 7a00 	vstr	s14, [r4]
 80178f8:	e7b4      	b.n	8017864 <__ieee754_rem_pio2f+0xec>
 80178fa:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80178fe:	db06      	blt.n	801790e <__ieee754_rem_pio2f+0x196>
 8017900:	ee70 7a40 	vsub.f32	s15, s0, s0
 8017904:	edc0 7a01 	vstr	s15, [r0, #4]
 8017908:	edc0 7a00 	vstr	s15, [r0]
 801790c:	e742      	b.n	8017794 <__ieee754_rem_pio2f+0x1c>
 801790e:	15ea      	asrs	r2, r5, #23
 8017910:	3a86      	subs	r2, #134	; 0x86
 8017912:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8017916:	ee07 3a90 	vmov	s15, r3
 801791a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801791e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80179c8 <__ieee754_rem_pio2f+0x250>
 8017922:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017926:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801792a:	ed8d 7a03 	vstr	s14, [sp, #12]
 801792e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017932:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8017936:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801793a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801793e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8017942:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017946:	eef5 7a40 	vcmp.f32	s15, #0.0
 801794a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801794e:	edcd 7a05 	vstr	s15, [sp, #20]
 8017952:	d11e      	bne.n	8017992 <__ieee754_rem_pio2f+0x21a>
 8017954:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801795c:	bf14      	ite	ne
 801795e:	2302      	movne	r3, #2
 8017960:	2301      	moveq	r3, #1
 8017962:	491a      	ldr	r1, [pc, #104]	; (80179cc <__ieee754_rem_pio2f+0x254>)
 8017964:	9101      	str	r1, [sp, #4]
 8017966:	2102      	movs	r1, #2
 8017968:	9100      	str	r1, [sp, #0]
 801796a:	a803      	add	r0, sp, #12
 801796c:	4621      	mov	r1, r4
 801796e:	f000 fec9 	bl	8018704 <__kernel_rem_pio2f>
 8017972:	2e00      	cmp	r6, #0
 8017974:	f6bf af31 	bge.w	80177da <__ieee754_rem_pio2f+0x62>
 8017978:	edd4 7a00 	vldr	s15, [r4]
 801797c:	eef1 7a67 	vneg.f32	s15, s15
 8017980:	edc4 7a00 	vstr	s15, [r4]
 8017984:	edd4 7a01 	vldr	s15, [r4, #4]
 8017988:	eef1 7a67 	vneg.f32	s15, s15
 801798c:	edc4 7a01 	vstr	s15, [r4, #4]
 8017990:	e77a      	b.n	8017888 <__ieee754_rem_pio2f+0x110>
 8017992:	2303      	movs	r3, #3
 8017994:	e7e5      	b.n	8017962 <__ieee754_rem_pio2f+0x1ea>
 8017996:	bf00      	nop
 8017998:	3f490fd8 	.word	0x3f490fd8
 801799c:	4016cbe3 	.word	0x4016cbe3
 80179a0:	3fc90f80 	.word	0x3fc90f80
 80179a4:	3fc90fd0 	.word	0x3fc90fd0
 80179a8:	37354400 	.word	0x37354400
 80179ac:	37354443 	.word	0x37354443
 80179b0:	2e85a308 	.word	0x2e85a308
 80179b4:	43490f80 	.word	0x43490f80
 80179b8:	3f22f984 	.word	0x3f22f984
 80179bc:	08024ab8 	.word	0x08024ab8
 80179c0:	2e85a300 	.word	0x2e85a300
 80179c4:	248d3132 	.word	0x248d3132
 80179c8:	43800000 	.word	0x43800000
 80179cc:	08024b38 	.word	0x08024b38

080179d0 <__ieee754_rem_pio2>:
 80179d0:	b570      	push	{r4, r5, r6, lr}
 80179d2:	eeb0 7b40 	vmov.f64	d7, d0
 80179d6:	ee17 5a90 	vmov	r5, s15
 80179da:	4b99      	ldr	r3, [pc, #612]	; (8017c40 <__ieee754_rem_pio2+0x270>)
 80179dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80179e0:	429e      	cmp	r6, r3
 80179e2:	b088      	sub	sp, #32
 80179e4:	4604      	mov	r4, r0
 80179e6:	dc07      	bgt.n	80179f8 <__ieee754_rem_pio2+0x28>
 80179e8:	2200      	movs	r2, #0
 80179ea:	2300      	movs	r3, #0
 80179ec:	ed84 0b00 	vstr	d0, [r4]
 80179f0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80179f4:	2000      	movs	r0, #0
 80179f6:	e01b      	b.n	8017a30 <__ieee754_rem_pio2+0x60>
 80179f8:	4b92      	ldr	r3, [pc, #584]	; (8017c44 <__ieee754_rem_pio2+0x274>)
 80179fa:	429e      	cmp	r6, r3
 80179fc:	dc3b      	bgt.n	8017a76 <__ieee754_rem_pio2+0xa6>
 80179fe:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8017a02:	2d00      	cmp	r5, #0
 8017a04:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8017c00 <__ieee754_rem_pio2+0x230>
 8017a08:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8017a0c:	dd19      	ble.n	8017a42 <__ieee754_rem_pio2+0x72>
 8017a0e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8017a12:	429e      	cmp	r6, r3
 8017a14:	d00e      	beq.n	8017a34 <__ieee754_rem_pio2+0x64>
 8017a16:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8017c08 <__ieee754_rem_pio2+0x238>
 8017a1a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8017a1e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017a22:	ed84 5b00 	vstr	d5, [r4]
 8017a26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017a2a:	ed84 7b02 	vstr	d7, [r4, #8]
 8017a2e:	2001      	movs	r0, #1
 8017a30:	b008      	add	sp, #32
 8017a32:	bd70      	pop	{r4, r5, r6, pc}
 8017a34:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8017c10 <__ieee754_rem_pio2+0x240>
 8017a38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017a3c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8017c18 <__ieee754_rem_pio2+0x248>
 8017a40:	e7eb      	b.n	8017a1a <__ieee754_rem_pio2+0x4a>
 8017a42:	429e      	cmp	r6, r3
 8017a44:	ee30 7b06 	vadd.f64	d7, d0, d6
 8017a48:	d00e      	beq.n	8017a68 <__ieee754_rem_pio2+0x98>
 8017a4a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8017c08 <__ieee754_rem_pio2+0x238>
 8017a4e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8017a52:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017a56:	ed84 5b00 	vstr	d5, [r4]
 8017a5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017a5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a62:	ed84 7b02 	vstr	d7, [r4, #8]
 8017a66:	e7e3      	b.n	8017a30 <__ieee754_rem_pio2+0x60>
 8017a68:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017c10 <__ieee754_rem_pio2+0x240>
 8017a6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017a70:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017c18 <__ieee754_rem_pio2+0x248>
 8017a74:	e7eb      	b.n	8017a4e <__ieee754_rem_pio2+0x7e>
 8017a76:	4b74      	ldr	r3, [pc, #464]	; (8017c48 <__ieee754_rem_pio2+0x278>)
 8017a78:	429e      	cmp	r6, r3
 8017a7a:	dc70      	bgt.n	8017b5e <__ieee754_rem_pio2+0x18e>
 8017a7c:	f000 fdb8 	bl	80185f0 <fabs>
 8017a80:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017a84:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8017c20 <__ieee754_rem_pio2+0x250>
 8017a88:	eea0 7b06 	vfma.f64	d7, d0, d6
 8017a8c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8017a90:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8017a94:	ee17 0a90 	vmov	r0, s15
 8017a98:	eeb1 4b45 	vneg.f64	d4, d5
 8017a9c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8017c00 <__ieee754_rem_pio2+0x230>
 8017aa0:	eea5 0b47 	vfms.f64	d0, d5, d7
 8017aa4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8017c08 <__ieee754_rem_pio2+0x238>
 8017aa8:	281f      	cmp	r0, #31
 8017aaa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8017aae:	ee30 6b47 	vsub.f64	d6, d0, d7
 8017ab2:	dc08      	bgt.n	8017ac6 <__ieee754_rem_pio2+0xf6>
 8017ab4:	4b65      	ldr	r3, [pc, #404]	; (8017c4c <__ieee754_rem_pio2+0x27c>)
 8017ab6:	1e42      	subs	r2, r0, #1
 8017ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017abc:	42b3      	cmp	r3, r6
 8017abe:	d002      	beq.n	8017ac6 <__ieee754_rem_pio2+0xf6>
 8017ac0:	ed84 6b00 	vstr	d6, [r4]
 8017ac4:	e024      	b.n	8017b10 <__ieee754_rem_pio2+0x140>
 8017ac6:	ee16 3a90 	vmov	r3, s13
 8017aca:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8017ace:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8017ad2:	2b10      	cmp	r3, #16
 8017ad4:	ea4f 5226 	mov.w	r2, r6, asr #20
 8017ad8:	ddf2      	ble.n	8017ac0 <__ieee754_rem_pio2+0xf0>
 8017ada:	eeb0 6b40 	vmov.f64	d6, d0
 8017ade:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8017c10 <__ieee754_rem_pio2+0x240>
 8017ae2:	eea4 6b03 	vfma.f64	d6, d4, d3
 8017ae6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8017aea:	eea4 7b03 	vfma.f64	d7, d4, d3
 8017aee:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8017c18 <__ieee754_rem_pio2+0x248>
 8017af2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8017af6:	ee36 3b47 	vsub.f64	d3, d6, d7
 8017afa:	ee13 3a90 	vmov	r3, s7
 8017afe:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8017b02:	1ad3      	subs	r3, r2, r3
 8017b04:	2b31      	cmp	r3, #49	; 0x31
 8017b06:	dc17      	bgt.n	8017b38 <__ieee754_rem_pio2+0x168>
 8017b08:	eeb0 0b46 	vmov.f64	d0, d6
 8017b0c:	ed84 3b00 	vstr	d3, [r4]
 8017b10:	ed94 6b00 	vldr	d6, [r4]
 8017b14:	2d00      	cmp	r5, #0
 8017b16:	ee30 0b46 	vsub.f64	d0, d0, d6
 8017b1a:	ee30 0b47 	vsub.f64	d0, d0, d7
 8017b1e:	ed84 0b02 	vstr	d0, [r4, #8]
 8017b22:	da85      	bge.n	8017a30 <__ieee754_rem_pio2+0x60>
 8017b24:	eeb1 6b46 	vneg.f64	d6, d6
 8017b28:	eeb1 0b40 	vneg.f64	d0, d0
 8017b2c:	ed84 6b00 	vstr	d6, [r4]
 8017b30:	ed84 0b02 	vstr	d0, [r4, #8]
 8017b34:	4240      	negs	r0, r0
 8017b36:	e77b      	b.n	8017a30 <__ieee754_rem_pio2+0x60>
 8017b38:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8017c28 <__ieee754_rem_pio2+0x258>
 8017b3c:	eeb0 0b46 	vmov.f64	d0, d6
 8017b40:	eea4 0b07 	vfma.f64	d0, d4, d7
 8017b44:	ee36 6b40 	vsub.f64	d6, d6, d0
 8017b48:	eea4 6b07 	vfma.f64	d6, d4, d7
 8017b4c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8017c30 <__ieee754_rem_pio2+0x260>
 8017b50:	eeb0 7b46 	vmov.f64	d7, d6
 8017b54:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8017b58:	ee30 6b47 	vsub.f64	d6, d0, d7
 8017b5c:	e7b0      	b.n	8017ac0 <__ieee754_rem_pio2+0xf0>
 8017b5e:	4b3c      	ldr	r3, [pc, #240]	; (8017c50 <__ieee754_rem_pio2+0x280>)
 8017b60:	429e      	cmp	r6, r3
 8017b62:	dd06      	ble.n	8017b72 <__ieee754_rem_pio2+0x1a2>
 8017b64:	ee30 7b40 	vsub.f64	d7, d0, d0
 8017b68:	ed80 7b02 	vstr	d7, [r0, #8]
 8017b6c:	ed80 7b00 	vstr	d7, [r0]
 8017b70:	e740      	b.n	80179f4 <__ieee754_rem_pio2+0x24>
 8017b72:	1532      	asrs	r2, r6, #20
 8017b74:	ee10 0a10 	vmov	r0, s0
 8017b78:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8017b7c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8017b80:	ec41 0b17 	vmov	d7, r0, r1
 8017b84:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8017b88:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8017c38 <__ieee754_rem_pio2+0x268>
 8017b8c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017b90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017b94:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017b98:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017b9c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8017ba0:	a808      	add	r0, sp, #32
 8017ba2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017ba6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017baa:	ed8d 6b04 	vstr	d6, [sp, #16]
 8017bae:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017bb2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017bb6:	2103      	movs	r1, #3
 8017bb8:	ed30 7b02 	vldmdb	r0!, {d7}
 8017bbc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bc4:	460b      	mov	r3, r1
 8017bc6:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8017bca:	d0f5      	beq.n	8017bb8 <__ieee754_rem_pio2+0x1e8>
 8017bcc:	4921      	ldr	r1, [pc, #132]	; (8017c54 <__ieee754_rem_pio2+0x284>)
 8017bce:	9101      	str	r1, [sp, #4]
 8017bd0:	2102      	movs	r1, #2
 8017bd2:	9100      	str	r1, [sp, #0]
 8017bd4:	a802      	add	r0, sp, #8
 8017bd6:	4621      	mov	r1, r4
 8017bd8:	f000 f83e 	bl	8017c58 <__kernel_rem_pio2>
 8017bdc:	2d00      	cmp	r5, #0
 8017bde:	f6bf af27 	bge.w	8017a30 <__ieee754_rem_pio2+0x60>
 8017be2:	ed94 7b00 	vldr	d7, [r4]
 8017be6:	eeb1 7b47 	vneg.f64	d7, d7
 8017bea:	ed84 7b00 	vstr	d7, [r4]
 8017bee:	ed94 7b02 	vldr	d7, [r4, #8]
 8017bf2:	eeb1 7b47 	vneg.f64	d7, d7
 8017bf6:	ed84 7b02 	vstr	d7, [r4, #8]
 8017bfa:	e79b      	b.n	8017b34 <__ieee754_rem_pio2+0x164>
 8017bfc:	f3af 8000 	nop.w
 8017c00:	54400000 	.word	0x54400000
 8017c04:	3ff921fb 	.word	0x3ff921fb
 8017c08:	1a626331 	.word	0x1a626331
 8017c0c:	3dd0b461 	.word	0x3dd0b461
 8017c10:	1a600000 	.word	0x1a600000
 8017c14:	3dd0b461 	.word	0x3dd0b461
 8017c18:	2e037073 	.word	0x2e037073
 8017c1c:	3ba3198a 	.word	0x3ba3198a
 8017c20:	6dc9c883 	.word	0x6dc9c883
 8017c24:	3fe45f30 	.word	0x3fe45f30
 8017c28:	2e000000 	.word	0x2e000000
 8017c2c:	3ba3198a 	.word	0x3ba3198a
 8017c30:	252049c1 	.word	0x252049c1
 8017c34:	397b839a 	.word	0x397b839a
 8017c38:	00000000 	.word	0x00000000
 8017c3c:	41700000 	.word	0x41700000
 8017c40:	3fe921fb 	.word	0x3fe921fb
 8017c44:	4002d97b 	.word	0x4002d97b
 8017c48:	413921fb 	.word	0x413921fb
 8017c4c:	08024e50 	.word	0x08024e50
 8017c50:	7fefffff 	.word	0x7fefffff
 8017c54:	08024ed0 	.word	0x08024ed0

08017c58 <__kernel_rem_pio2>:
 8017c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c5c:	ed2d 8b06 	vpush	{d8-d10}
 8017c60:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8017c64:	460f      	mov	r7, r1
 8017c66:	9002      	str	r0, [sp, #8]
 8017c68:	49c3      	ldr	r1, [pc, #780]	; (8017f78 <__kernel_rem_pio2+0x320>)
 8017c6a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8017c6c:	9301      	str	r3, [sp, #4]
 8017c6e:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8017c72:	9901      	ldr	r1, [sp, #4]
 8017c74:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8017c76:	f112 0f14 	cmn.w	r2, #20
 8017c7a:	bfa8      	it	ge
 8017c7c:	1ed0      	subge	r0, r2, #3
 8017c7e:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8017c82:	bfaa      	itet	ge
 8017c84:	2418      	movge	r4, #24
 8017c86:	2000      	movlt	r0, #0
 8017c88:	fb90 f0f4 	sdivge	r0, r0, r4
 8017c8c:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8017f60 <__kernel_rem_pio2+0x308>
 8017c90:	f06f 0417 	mvn.w	r4, #23
 8017c94:	fb00 4404 	mla	r4, r0, r4, r4
 8017c98:	eba0 060a 	sub.w	r6, r0, sl
 8017c9c:	4414      	add	r4, r2
 8017c9e:	eb09 0c0a 	add.w	ip, r9, sl
 8017ca2:	ad1a      	add	r5, sp, #104	; 0x68
 8017ca4:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8017ca8:	2200      	movs	r2, #0
 8017caa:	4562      	cmp	r2, ip
 8017cac:	dd10      	ble.n	8017cd0 <__kernel_rem_pio2+0x78>
 8017cae:	9a01      	ldr	r2, [sp, #4]
 8017cb0:	a91a      	add	r1, sp, #104	; 0x68
 8017cb2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8017cb6:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8017cba:	f04f 0c00 	mov.w	ip, #0
 8017cbe:	45cc      	cmp	ip, r9
 8017cc0:	dc26      	bgt.n	8017d10 <__kernel_rem_pio2+0xb8>
 8017cc2:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 8017f60 <__kernel_rem_pio2+0x308>
 8017cc6:	f8dd e008 	ldr.w	lr, [sp, #8]
 8017cca:	4616      	mov	r6, r2
 8017ccc:	2500      	movs	r5, #0
 8017cce:	e015      	b.n	8017cfc <__kernel_rem_pio2+0xa4>
 8017cd0:	42d6      	cmn	r6, r2
 8017cd2:	d409      	bmi.n	8017ce8 <__kernel_rem_pio2+0x90>
 8017cd4:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8017cd8:	ee07 1a90 	vmov	s15, r1
 8017cdc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017ce0:	eca5 7b02 	vstmia	r5!, {d7}
 8017ce4:	3201      	adds	r2, #1
 8017ce6:	e7e0      	b.n	8017caa <__kernel_rem_pio2+0x52>
 8017ce8:	eeb0 7b46 	vmov.f64	d7, d6
 8017cec:	e7f8      	b.n	8017ce0 <__kernel_rem_pio2+0x88>
 8017cee:	ecbe 5b02 	vldmia	lr!, {d5}
 8017cf2:	ed96 6b00 	vldr	d6, [r6]
 8017cf6:	3501      	adds	r5, #1
 8017cf8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017cfc:	4555      	cmp	r5, sl
 8017cfe:	f1a6 0608 	sub.w	r6, r6, #8
 8017d02:	ddf4      	ble.n	8017cee <__kernel_rem_pio2+0x96>
 8017d04:	eca8 7b02 	vstmia	r8!, {d7}
 8017d08:	f10c 0c01 	add.w	ip, ip, #1
 8017d0c:	3208      	adds	r2, #8
 8017d0e:	e7d6      	b.n	8017cbe <__kernel_rem_pio2+0x66>
 8017d10:	aa06      	add	r2, sp, #24
 8017d12:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8017f68 <__kernel_rem_pio2+0x310>
 8017d16:	ed9f ab96 	vldr	d10, [pc, #600]	; 8017f70 <__kernel_rem_pio2+0x318>
 8017d1a:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8017d1e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8017d22:	9204      	str	r2, [sp, #16]
 8017d24:	9303      	str	r3, [sp, #12]
 8017d26:	464d      	mov	r5, r9
 8017d28:	00eb      	lsls	r3, r5, #3
 8017d2a:	9305      	str	r3, [sp, #20]
 8017d2c:	ab92      	add	r3, sp, #584	; 0x248
 8017d2e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8017d32:	f10d 0b18 	add.w	fp, sp, #24
 8017d36:	ab6a      	add	r3, sp, #424	; 0x1a8
 8017d38:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8017d3c:	465e      	mov	r6, fp
 8017d3e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8017d42:	4628      	mov	r0, r5
 8017d44:	2800      	cmp	r0, #0
 8017d46:	f1a2 0208 	sub.w	r2, r2, #8
 8017d4a:	dc48      	bgt.n	8017dde <__kernel_rem_pio2+0x186>
 8017d4c:	4620      	mov	r0, r4
 8017d4e:	f000 fc5b 	bl	8018608 <scalbn>
 8017d52:	eeb0 8b40 	vmov.f64	d8, d0
 8017d56:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8017d5a:	ee28 0b00 	vmul.f64	d0, d8, d0
 8017d5e:	f000 ff43 	bl	8018be8 <floor>
 8017d62:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8017d66:	eea0 8b47 	vfms.f64	d8, d0, d7
 8017d6a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8017d6e:	2c00      	cmp	r4, #0
 8017d70:	ee17 8a90 	vmov	r8, s15
 8017d74:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017d78:	ee38 8b47 	vsub.f64	d8, d8, d7
 8017d7c:	dd41      	ble.n	8017e02 <__kernel_rem_pio2+0x1aa>
 8017d7e:	1e68      	subs	r0, r5, #1
 8017d80:	ab06      	add	r3, sp, #24
 8017d82:	f1c4 0c18 	rsb	ip, r4, #24
 8017d86:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8017d8a:	fa46 f20c 	asr.w	r2, r6, ip
 8017d8e:	4490      	add	r8, r2
 8017d90:	fa02 f20c 	lsl.w	r2, r2, ip
 8017d94:	1ab6      	subs	r6, r6, r2
 8017d96:	f1c4 0217 	rsb	r2, r4, #23
 8017d9a:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8017d9e:	4116      	asrs	r6, r2
 8017da0:	2e00      	cmp	r6, #0
 8017da2:	dd3d      	ble.n	8017e20 <__kernel_rem_pio2+0x1c8>
 8017da4:	f04f 0c00 	mov.w	ip, #0
 8017da8:	f108 0801 	add.w	r8, r8, #1
 8017dac:	4660      	mov	r0, ip
 8017dae:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8017db2:	4565      	cmp	r5, ip
 8017db4:	dc6a      	bgt.n	8017e8c <__kernel_rem_pio2+0x234>
 8017db6:	2c00      	cmp	r4, #0
 8017db8:	dd04      	ble.n	8017dc4 <__kernel_rem_pio2+0x16c>
 8017dba:	2c01      	cmp	r4, #1
 8017dbc:	d07b      	beq.n	8017eb6 <__kernel_rem_pio2+0x25e>
 8017dbe:	2c02      	cmp	r4, #2
 8017dc0:	f000 8083 	beq.w	8017eca <__kernel_rem_pio2+0x272>
 8017dc4:	2e02      	cmp	r6, #2
 8017dc6:	d12b      	bne.n	8017e20 <__kernel_rem_pio2+0x1c8>
 8017dc8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017dcc:	ee30 8b48 	vsub.f64	d8, d0, d8
 8017dd0:	b330      	cbz	r0, 8017e20 <__kernel_rem_pio2+0x1c8>
 8017dd2:	4620      	mov	r0, r4
 8017dd4:	f000 fc18 	bl	8018608 <scalbn>
 8017dd8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8017ddc:	e020      	b.n	8017e20 <__kernel_rem_pio2+0x1c8>
 8017dde:	ee20 7b09 	vmul.f64	d7, d0, d9
 8017de2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017de6:	3801      	subs	r0, #1
 8017de8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8017dec:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8017df0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017df4:	eca6 0a01 	vstmia	r6!, {s0}
 8017df8:	ed92 0b00 	vldr	d0, [r2]
 8017dfc:	ee37 0b00 	vadd.f64	d0, d7, d0
 8017e00:	e7a0      	b.n	8017d44 <__kernel_rem_pio2+0xec>
 8017e02:	d105      	bne.n	8017e10 <__kernel_rem_pio2+0x1b8>
 8017e04:	1e6a      	subs	r2, r5, #1
 8017e06:	ab06      	add	r3, sp, #24
 8017e08:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017e0c:	15f6      	asrs	r6, r6, #23
 8017e0e:	e7c7      	b.n	8017da0 <__kernel_rem_pio2+0x148>
 8017e10:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017e14:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e1c:	da34      	bge.n	8017e88 <__kernel_rem_pio2+0x230>
 8017e1e:	2600      	movs	r6, #0
 8017e20:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e28:	f040 80aa 	bne.w	8017f80 <__kernel_rem_pio2+0x328>
 8017e2c:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8017e30:	4658      	mov	r0, fp
 8017e32:	2200      	movs	r2, #0
 8017e34:	4548      	cmp	r0, r9
 8017e36:	da50      	bge.n	8017eda <__kernel_rem_pio2+0x282>
 8017e38:	2a00      	cmp	r2, #0
 8017e3a:	d06b      	beq.n	8017f14 <__kernel_rem_pio2+0x2bc>
 8017e3c:	ab06      	add	r3, sp, #24
 8017e3e:	3c18      	subs	r4, #24
 8017e40:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	f000 8087 	beq.w	8017f58 <__kernel_rem_pio2+0x300>
 8017e4a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017e4e:	4620      	mov	r0, r4
 8017e50:	f000 fbda 	bl	8018608 <scalbn>
 8017e54:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8017f68 <__kernel_rem_pio2+0x310>
 8017e58:	f10b 0201 	add.w	r2, fp, #1
 8017e5c:	a96a      	add	r1, sp, #424	; 0x1a8
 8017e5e:	00d3      	lsls	r3, r2, #3
 8017e60:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017e64:	465a      	mov	r2, fp
 8017e66:	2a00      	cmp	r2, #0
 8017e68:	f280 80b8 	bge.w	8017fdc <__kernel_rem_pio2+0x384>
 8017e6c:	465a      	mov	r2, fp
 8017e6e:	2a00      	cmp	r2, #0
 8017e70:	f2c0 80d6 	blt.w	8018020 <__kernel_rem_pio2+0x3c8>
 8017e74:	a96a      	add	r1, sp, #424	; 0x1a8
 8017e76:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 8017e7a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 8017f60 <__kernel_rem_pio2+0x308>
 8017e7e:	4d3f      	ldr	r5, [pc, #252]	; (8017f7c <__kernel_rem_pio2+0x324>)
 8017e80:	2000      	movs	r0, #0
 8017e82:	ebab 0102 	sub.w	r1, fp, r2
 8017e86:	e0c0      	b.n	801800a <__kernel_rem_pio2+0x3b2>
 8017e88:	2602      	movs	r6, #2
 8017e8a:	e78b      	b.n	8017da4 <__kernel_rem_pio2+0x14c>
 8017e8c:	f8db 2000 	ldr.w	r2, [fp]
 8017e90:	b958      	cbnz	r0, 8017eaa <__kernel_rem_pio2+0x252>
 8017e92:	b122      	cbz	r2, 8017e9e <__kernel_rem_pio2+0x246>
 8017e94:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8017e98:	f8cb 2000 	str.w	r2, [fp]
 8017e9c:	2201      	movs	r2, #1
 8017e9e:	f10c 0c01 	add.w	ip, ip, #1
 8017ea2:	f10b 0b04 	add.w	fp, fp, #4
 8017ea6:	4610      	mov	r0, r2
 8017ea8:	e783      	b.n	8017db2 <__kernel_rem_pio2+0x15a>
 8017eaa:	ebae 0202 	sub.w	r2, lr, r2
 8017eae:	f8cb 2000 	str.w	r2, [fp]
 8017eb2:	4602      	mov	r2, r0
 8017eb4:	e7f3      	b.n	8017e9e <__kernel_rem_pio2+0x246>
 8017eb6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8017eba:	ab06      	add	r3, sp, #24
 8017ebc:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8017ec0:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8017ec4:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8017ec8:	e77c      	b.n	8017dc4 <__kernel_rem_pio2+0x16c>
 8017eca:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8017ece:	ab06      	add	r3, sp, #24
 8017ed0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8017ed4:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8017ed8:	e7f4      	b.n	8017ec4 <__kernel_rem_pio2+0x26c>
 8017eda:	ab06      	add	r3, sp, #24
 8017edc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017ee0:	3801      	subs	r0, #1
 8017ee2:	431a      	orrs	r2, r3
 8017ee4:	e7a6      	b.n	8017e34 <__kernel_rem_pio2+0x1dc>
 8017ee6:	3201      	adds	r2, #1
 8017ee8:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8017eec:	2e00      	cmp	r6, #0
 8017eee:	d0fa      	beq.n	8017ee6 <__kernel_rem_pio2+0x28e>
 8017ef0:	9b05      	ldr	r3, [sp, #20]
 8017ef2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8017ef6:	eb0d 0003 	add.w	r0, sp, r3
 8017efa:	9b01      	ldr	r3, [sp, #4]
 8017efc:	18ee      	adds	r6, r5, r3
 8017efe:	ab1a      	add	r3, sp, #104	; 0x68
 8017f00:	f105 0c01 	add.w	ip, r5, #1
 8017f04:	3898      	subs	r0, #152	; 0x98
 8017f06:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8017f0a:	442a      	add	r2, r5
 8017f0c:	4562      	cmp	r2, ip
 8017f0e:	da04      	bge.n	8017f1a <__kernel_rem_pio2+0x2c2>
 8017f10:	4615      	mov	r5, r2
 8017f12:	e709      	b.n	8017d28 <__kernel_rem_pio2+0xd0>
 8017f14:	9804      	ldr	r0, [sp, #16]
 8017f16:	2201      	movs	r2, #1
 8017f18:	e7e6      	b.n	8017ee8 <__kernel_rem_pio2+0x290>
 8017f1a:	9b03      	ldr	r3, [sp, #12]
 8017f1c:	f8dd e008 	ldr.w	lr, [sp, #8]
 8017f20:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8017f24:	9305      	str	r3, [sp, #20]
 8017f26:	ee07 3a90 	vmov	s15, r3
 8017f2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017f2e:	2500      	movs	r5, #0
 8017f30:	eca6 7b02 	vstmia	r6!, {d7}
 8017f34:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8017f60 <__kernel_rem_pio2+0x308>
 8017f38:	46b0      	mov	r8, r6
 8017f3a:	4555      	cmp	r5, sl
 8017f3c:	dd04      	ble.n	8017f48 <__kernel_rem_pio2+0x2f0>
 8017f3e:	eca0 7b02 	vstmia	r0!, {d7}
 8017f42:	f10c 0c01 	add.w	ip, ip, #1
 8017f46:	e7e1      	b.n	8017f0c <__kernel_rem_pio2+0x2b4>
 8017f48:	ecbe 5b02 	vldmia	lr!, {d5}
 8017f4c:	ed38 6b02 	vldmdb	r8!, {d6}
 8017f50:	3501      	adds	r5, #1
 8017f52:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017f56:	e7f0      	b.n	8017f3a <__kernel_rem_pio2+0x2e2>
 8017f58:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8017f5c:	e76e      	b.n	8017e3c <__kernel_rem_pio2+0x1e4>
 8017f5e:	bf00      	nop
	...
 8017f6c:	3e700000 	.word	0x3e700000
 8017f70:	00000000 	.word	0x00000000
 8017f74:	41700000 	.word	0x41700000
 8017f78:	08025140 	.word	0x08025140
 8017f7c:	08025100 	.word	0x08025100
 8017f80:	4260      	negs	r0, r4
 8017f82:	eeb0 0b48 	vmov.f64	d0, d8
 8017f86:	f000 fb3f 	bl	8018608 <scalbn>
 8017f8a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8018168 <__kernel_rem_pio2+0x510>
 8017f8e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8017f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f96:	db18      	blt.n	8017fca <__kernel_rem_pio2+0x372>
 8017f98:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8018170 <__kernel_rem_pio2+0x518>
 8017f9c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017fa0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017fa4:	aa06      	add	r2, sp, #24
 8017fa6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8017faa:	eea5 0b46 	vfms.f64	d0, d5, d6
 8017fae:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017fb2:	f105 0b01 	add.w	fp, r5, #1
 8017fb6:	ee10 3a10 	vmov	r3, s0
 8017fba:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8017fbe:	ee17 3a10 	vmov	r3, s14
 8017fc2:	3418      	adds	r4, #24
 8017fc4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8017fc8:	e73f      	b.n	8017e4a <__kernel_rem_pio2+0x1f2>
 8017fca:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017fce:	aa06      	add	r2, sp, #24
 8017fd0:	ee10 3a10 	vmov	r3, s0
 8017fd4:	46ab      	mov	fp, r5
 8017fd6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8017fda:	e736      	b.n	8017e4a <__kernel_rem_pio2+0x1f2>
 8017fdc:	a806      	add	r0, sp, #24
 8017fde:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8017fe2:	9001      	str	r0, [sp, #4]
 8017fe4:	ee07 0a90 	vmov	s15, r0
 8017fe8:	3a01      	subs	r2, #1
 8017fea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017fee:	ee27 7b00 	vmul.f64	d7, d7, d0
 8017ff2:	ee20 0b06 	vmul.f64	d0, d0, d6
 8017ff6:	ed21 7b02 	vstmdb	r1!, {d7}
 8017ffa:	e734      	b.n	8017e66 <__kernel_rem_pio2+0x20e>
 8017ffc:	ecb5 5b02 	vldmia	r5!, {d5}
 8018000:	ecb4 6b02 	vldmia	r4!, {d6}
 8018004:	3001      	adds	r0, #1
 8018006:	eea5 7b06 	vfma.f64	d7, d5, d6
 801800a:	4548      	cmp	r0, r9
 801800c:	dc01      	bgt.n	8018012 <__kernel_rem_pio2+0x3ba>
 801800e:	4288      	cmp	r0, r1
 8018010:	ddf4      	ble.n	8017ffc <__kernel_rem_pio2+0x3a4>
 8018012:	a842      	add	r0, sp, #264	; 0x108
 8018014:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8018018:	ed81 7b00 	vstr	d7, [r1]
 801801c:	3a01      	subs	r2, #1
 801801e:	e726      	b.n	8017e6e <__kernel_rem_pio2+0x216>
 8018020:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8018022:	2a02      	cmp	r2, #2
 8018024:	dc0a      	bgt.n	801803c <__kernel_rem_pio2+0x3e4>
 8018026:	2a00      	cmp	r2, #0
 8018028:	dc2e      	bgt.n	8018088 <__kernel_rem_pio2+0x430>
 801802a:	d047      	beq.n	80180bc <__kernel_rem_pio2+0x464>
 801802c:	f008 0007 	and.w	r0, r8, #7
 8018030:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8018034:	ecbd 8b06 	vpop	{d8-d10}
 8018038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801803c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801803e:	2a03      	cmp	r2, #3
 8018040:	d1f4      	bne.n	801802c <__kernel_rem_pio2+0x3d4>
 8018042:	a942      	add	r1, sp, #264	; 0x108
 8018044:	f1a3 0208 	sub.w	r2, r3, #8
 8018048:	440a      	add	r2, r1
 801804a:	4611      	mov	r1, r2
 801804c:	4658      	mov	r0, fp
 801804e:	2800      	cmp	r0, #0
 8018050:	f1a1 0108 	sub.w	r1, r1, #8
 8018054:	dc55      	bgt.n	8018102 <__kernel_rem_pio2+0x4aa>
 8018056:	4659      	mov	r1, fp
 8018058:	2901      	cmp	r1, #1
 801805a:	f1a2 0208 	sub.w	r2, r2, #8
 801805e:	dc60      	bgt.n	8018122 <__kernel_rem_pio2+0x4ca>
 8018060:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8018178 <__kernel_rem_pio2+0x520>
 8018064:	aa42      	add	r2, sp, #264	; 0x108
 8018066:	4413      	add	r3, r2
 8018068:	f1bb 0f01 	cmp.w	fp, #1
 801806c:	dc69      	bgt.n	8018142 <__kernel_rem_pio2+0x4ea>
 801806e:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8018072:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8018076:	2e00      	cmp	r6, #0
 8018078:	d16a      	bne.n	8018150 <__kernel_rem_pio2+0x4f8>
 801807a:	ed87 5b00 	vstr	d5, [r7]
 801807e:	ed87 6b02 	vstr	d6, [r7, #8]
 8018082:	ed87 7b04 	vstr	d7, [r7, #16]
 8018086:	e7d1      	b.n	801802c <__kernel_rem_pio2+0x3d4>
 8018088:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8018178 <__kernel_rem_pio2+0x520>
 801808c:	aa42      	add	r2, sp, #264	; 0x108
 801808e:	4413      	add	r3, r2
 8018090:	465a      	mov	r2, fp
 8018092:	2a00      	cmp	r2, #0
 8018094:	da26      	bge.n	80180e4 <__kernel_rem_pio2+0x48c>
 8018096:	b35e      	cbz	r6, 80180f0 <__kernel_rem_pio2+0x498>
 8018098:	eeb1 7b46 	vneg.f64	d7, d6
 801809c:	ed87 7b00 	vstr	d7, [r7]
 80180a0:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80180a4:	aa44      	add	r2, sp, #272	; 0x110
 80180a6:	2301      	movs	r3, #1
 80180a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80180ac:	459b      	cmp	fp, r3
 80180ae:	da22      	bge.n	80180f6 <__kernel_rem_pio2+0x49e>
 80180b0:	b10e      	cbz	r6, 80180b6 <__kernel_rem_pio2+0x45e>
 80180b2:	eeb1 7b47 	vneg.f64	d7, d7
 80180b6:	ed87 7b02 	vstr	d7, [r7, #8]
 80180ba:	e7b7      	b.n	801802c <__kernel_rem_pio2+0x3d4>
 80180bc:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018178 <__kernel_rem_pio2+0x520>
 80180c0:	aa42      	add	r2, sp, #264	; 0x108
 80180c2:	4413      	add	r3, r2
 80180c4:	f1bb 0f00 	cmp.w	fp, #0
 80180c8:	da05      	bge.n	80180d6 <__kernel_rem_pio2+0x47e>
 80180ca:	b10e      	cbz	r6, 80180d0 <__kernel_rem_pio2+0x478>
 80180cc:	eeb1 7b47 	vneg.f64	d7, d7
 80180d0:	ed87 7b00 	vstr	d7, [r7]
 80180d4:	e7aa      	b.n	801802c <__kernel_rem_pio2+0x3d4>
 80180d6:	ed33 6b02 	vldmdb	r3!, {d6}
 80180da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80180de:	ee37 7b06 	vadd.f64	d7, d7, d6
 80180e2:	e7ef      	b.n	80180c4 <__kernel_rem_pio2+0x46c>
 80180e4:	ed33 7b02 	vldmdb	r3!, {d7}
 80180e8:	3a01      	subs	r2, #1
 80180ea:	ee36 6b07 	vadd.f64	d6, d6, d7
 80180ee:	e7d0      	b.n	8018092 <__kernel_rem_pio2+0x43a>
 80180f0:	eeb0 7b46 	vmov.f64	d7, d6
 80180f4:	e7d2      	b.n	801809c <__kernel_rem_pio2+0x444>
 80180f6:	ecb2 6b02 	vldmia	r2!, {d6}
 80180fa:	3301      	adds	r3, #1
 80180fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018100:	e7d4      	b.n	80180ac <__kernel_rem_pio2+0x454>
 8018102:	ed91 7b00 	vldr	d7, [r1]
 8018106:	ed91 5b02 	vldr	d5, [r1, #8]
 801810a:	3801      	subs	r0, #1
 801810c:	ee37 6b05 	vadd.f64	d6, d7, d5
 8018110:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018114:	ed81 6b00 	vstr	d6, [r1]
 8018118:	ee37 7b05 	vadd.f64	d7, d7, d5
 801811c:	ed81 7b02 	vstr	d7, [r1, #8]
 8018120:	e795      	b.n	801804e <__kernel_rem_pio2+0x3f6>
 8018122:	ed92 7b00 	vldr	d7, [r2]
 8018126:	ed92 5b02 	vldr	d5, [r2, #8]
 801812a:	3901      	subs	r1, #1
 801812c:	ee37 6b05 	vadd.f64	d6, d7, d5
 8018130:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018134:	ed82 6b00 	vstr	d6, [r2]
 8018138:	ee37 7b05 	vadd.f64	d7, d7, d5
 801813c:	ed82 7b02 	vstr	d7, [r2, #8]
 8018140:	e78a      	b.n	8018058 <__kernel_rem_pio2+0x400>
 8018142:	ed33 6b02 	vldmdb	r3!, {d6}
 8018146:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801814a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801814e:	e78b      	b.n	8018068 <__kernel_rem_pio2+0x410>
 8018150:	eeb1 5b45 	vneg.f64	d5, d5
 8018154:	eeb1 6b46 	vneg.f64	d6, d6
 8018158:	ed87 5b00 	vstr	d5, [r7]
 801815c:	eeb1 7b47 	vneg.f64	d7, d7
 8018160:	ed87 6b02 	vstr	d6, [r7, #8]
 8018164:	e78d      	b.n	8018082 <__kernel_rem_pio2+0x42a>
 8018166:	bf00      	nop
 8018168:	00000000 	.word	0x00000000
 801816c:	41700000 	.word	0x41700000
 8018170:	00000000 	.word	0x00000000
 8018174:	3e700000 	.word	0x3e700000
	...

08018180 <__kernel_tan>:
 8018180:	eeb0 7b40 	vmov.f64	d7, d0
 8018184:	ee17 3a90 	vmov	r3, s15
 8018188:	4989      	ldr	r1, [pc, #548]	; (80183b0 <__kernel_tan+0x230>)
 801818a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801818e:	428a      	cmp	r2, r1
 8018190:	b510      	push	{r4, lr}
 8018192:	dc33      	bgt.n	80181fc <__kernel_tan+0x7c>
 8018194:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8018198:	ee16 1a90 	vmov	r1, s13
 801819c:	2900      	cmp	r1, #0
 801819e:	d143      	bne.n	8018228 <__kernel_tan+0xa8>
 80181a0:	ee10 4a10 	vmov	r4, s0
 80181a4:	1c43      	adds	r3, r0, #1
 80181a6:	4323      	orrs	r3, r4
 80181a8:	4313      	orrs	r3, r2
 80181aa:	d108      	bne.n	80181be <__kernel_tan+0x3e>
 80181ac:	f000 fa20 	bl	80185f0 <fabs>
 80181b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80181b4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80181b8:	eeb0 0b47 	vmov.f64	d0, d7
 80181bc:	bd10      	pop	{r4, pc}
 80181be:	2801      	cmp	r0, #1
 80181c0:	d0fa      	beq.n	80181b8 <__kernel_tan+0x38>
 80181c2:	ee30 6b01 	vadd.f64	d6, d0, d1
 80181c6:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 80181ca:	ec53 2b16 	vmov	r2, r3, d6
 80181ce:	ee87 3b06 	vdiv.f64	d3, d7, d6
 80181d2:	460a      	mov	r2, r1
 80181d4:	ec43 2b15 	vmov	d5, r2, r3
 80181d8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80181dc:	ec53 2b13 	vmov	r2, r3, d3
 80181e0:	ee35 4b40 	vsub.f64	d4, d5, d0
 80181e4:	460a      	mov	r2, r1
 80181e6:	ec43 2b17 	vmov	d7, r2, r3
 80181ea:	ee31 4b44 	vsub.f64	d4, d1, d4
 80181ee:	eea5 6b07 	vfma.f64	d6, d5, d7
 80181f2:	eea4 6b07 	vfma.f64	d6, d4, d7
 80181f6:	eea6 7b03 	vfma.f64	d7, d6, d3
 80181fa:	e7dd      	b.n	80181b8 <__kernel_tan+0x38>
 80181fc:	496d      	ldr	r1, [pc, #436]	; (80183b4 <__kernel_tan+0x234>)
 80181fe:	428a      	cmp	r2, r1
 8018200:	dd12      	ble.n	8018228 <__kernel_tan+0xa8>
 8018202:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8018330 <__kernel_tan+0x1b0>
 8018206:	2b00      	cmp	r3, #0
 8018208:	bfb8      	it	lt
 801820a:	eeb1 7b40 	vneglt.f64	d7, d0
 801820e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018212:	ed9f 7b49 	vldr	d7, [pc, #292]	; 8018338 <__kernel_tan+0x1b8>
 8018216:	bfb8      	it	lt
 8018218:	eeb1 1b41 	vneglt.f64	d1, d1
 801821c:	ee37 7b41 	vsub.f64	d7, d7, d1
 8018220:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8018340 <__kernel_tan+0x1c0>
 8018224:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018228:	ee27 5b07 	vmul.f64	d5, d7, d7
 801822c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8018348 <__kernel_tan+0x1c8>
 8018230:	ee25 6b05 	vmul.f64	d6, d5, d5
 8018234:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8018350 <__kernel_tan+0x1d0>
 8018238:	eea6 4b03 	vfma.f64	d4, d6, d3
 801823c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8018358 <__kernel_tan+0x1d8>
 8018240:	eea4 3b06 	vfma.f64	d3, d4, d6
 8018244:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8018360 <__kernel_tan+0x1e0>
 8018248:	eea3 4b06 	vfma.f64	d4, d3, d6
 801824c:	ed9f 3b46 	vldr	d3, [pc, #280]	; 8018368 <__kernel_tan+0x1e8>
 8018250:	eea4 3b06 	vfma.f64	d3, d4, d6
 8018254:	ed9f 4b46 	vldr	d4, [pc, #280]	; 8018370 <__kernel_tan+0x1f0>
 8018258:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8018378 <__kernel_tan+0x1f8>
 801825c:	eea3 4b06 	vfma.f64	d4, d3, d6
 8018260:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8018380 <__kernel_tan+0x200>
 8018264:	eea6 3b02 	vfma.f64	d3, d6, d2
 8018268:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8018388 <__kernel_tan+0x208>
 801826c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8018270:	ed9f 3b47 	vldr	d3, [pc, #284]	; 8018390 <__kernel_tan+0x210>
 8018274:	eea2 3b06 	vfma.f64	d3, d2, d6
 8018278:	ed9f 2b47 	vldr	d2, [pc, #284]	; 8018398 <__kernel_tan+0x218>
 801827c:	eea3 2b06 	vfma.f64	d2, d3, d6
 8018280:	ed9f 3b47 	vldr	d3, [pc, #284]	; 80183a0 <__kernel_tan+0x220>
 8018284:	494b      	ldr	r1, [pc, #300]	; (80183b4 <__kernel_tan+0x234>)
 8018286:	eea2 3b06 	vfma.f64	d3, d2, d6
 801828a:	ee27 2b05 	vmul.f64	d2, d7, d5
 801828e:	eeb0 6b44 	vmov.f64	d6, d4
 8018292:	eeb0 4b41 	vmov.f64	d4, d1
 8018296:	eea3 6b05 	vfma.f64	d6, d3, d5
 801829a:	eea6 4b02 	vfma.f64	d4, d6, d2
 801829e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80183a8 <__kernel_tan+0x228>
 80182a2:	eea4 1b05 	vfma.f64	d1, d4, d5
 80182a6:	428a      	cmp	r2, r1
 80182a8:	eea2 1b06 	vfma.f64	d1, d2, d6
 80182ac:	ee37 5b01 	vadd.f64	d5, d7, d1
 80182b0:	dd1d      	ble.n	80182ee <__kernel_tan+0x16e>
 80182b2:	ee25 3b05 	vmul.f64	d3, d5, d5
 80182b6:	179b      	asrs	r3, r3, #30
 80182b8:	ee06 0a90 	vmov	s13, r0
 80182bc:	f003 0302 	and.w	r3, r3, #2
 80182c0:	f1c3 0301 	rsb	r3, r3, #1
 80182c4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80182c8:	ee35 5b06 	vadd.f64	d5, d5, d6
 80182cc:	ee83 4b05 	vdiv.f64	d4, d3, d5
 80182d0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80182d4:	ee34 4b41 	vsub.f64	d4, d4, d1
 80182d8:	ee37 7b44 	vsub.f64	d7, d7, d4
 80182dc:	eea7 6b45 	vfms.f64	d6, d7, d5
 80182e0:	ee07 3a90 	vmov	s15, r3
 80182e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80182e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80182ec:	e764      	b.n	80181b8 <__kernel_tan+0x38>
 80182ee:	2801      	cmp	r0, #1
 80182f0:	d01a      	beq.n	8018328 <__kernel_tan+0x1a8>
 80182f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80182f6:	ec51 0b15 	vmov	r0, r1, d5
 80182fa:	2000      	movs	r0, #0
 80182fc:	ec41 0b13 	vmov	d3, r0, r1
 8018300:	ee33 7b47 	vsub.f64	d7, d3, d7
 8018304:	ee31 1b47 	vsub.f64	d1, d1, d7
 8018308:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801830c:	ee87 4b05 	vdiv.f64	d4, d7, d5
 8018310:	ec53 2b14 	vmov	r2, r3, d4
 8018314:	4602      	mov	r2, r0
 8018316:	ec43 2b17 	vmov	d7, r2, r3
 801831a:	eea3 6b07 	vfma.f64	d6, d3, d7
 801831e:	eea1 6b07 	vfma.f64	d6, d1, d7
 8018322:	eea6 7b04 	vfma.f64	d7, d6, d4
 8018326:	e747      	b.n	80181b8 <__kernel_tan+0x38>
 8018328:	eeb0 7b45 	vmov.f64	d7, d5
 801832c:	e744      	b.n	80181b8 <__kernel_tan+0x38>
 801832e:	bf00      	nop
 8018330:	54442d18 	.word	0x54442d18
 8018334:	3fe921fb 	.word	0x3fe921fb
 8018338:	33145c07 	.word	0x33145c07
 801833c:	3c81a626 	.word	0x3c81a626
	...
 8018348:	db605373 	.word	0xdb605373
 801834c:	bef375cb 	.word	0xbef375cb
 8018350:	a03792a6 	.word	0xa03792a6
 8018354:	3f147e88 	.word	0x3f147e88
 8018358:	f2f26501 	.word	0xf2f26501
 801835c:	3f4344d8 	.word	0x3f4344d8
 8018360:	c9560328 	.word	0xc9560328
 8018364:	3f6d6d22 	.word	0x3f6d6d22
 8018368:	8406d637 	.word	0x8406d637
 801836c:	3f9664f4 	.word	0x3f9664f4
 8018370:	1110fe7a 	.word	0x1110fe7a
 8018374:	3fc11111 	.word	0x3fc11111
 8018378:	74bf7ad4 	.word	0x74bf7ad4
 801837c:	3efb2a70 	.word	0x3efb2a70
 8018380:	32f0a7e9 	.word	0x32f0a7e9
 8018384:	3f12b80f 	.word	0x3f12b80f
 8018388:	1a8d1068 	.word	0x1a8d1068
 801838c:	3f3026f7 	.word	0x3f3026f7
 8018390:	fee08315 	.word	0xfee08315
 8018394:	3f57dbc8 	.word	0x3f57dbc8
 8018398:	e96e8493 	.word	0xe96e8493
 801839c:	3f8226e3 	.word	0x3f8226e3
 80183a0:	1bb341fe 	.word	0x1bb341fe
 80183a4:	3faba1ba 	.word	0x3faba1ba
 80183a8:	55555563 	.word	0x55555563
 80183ac:	3fd55555 	.word	0x3fd55555
 80183b0:	3e2fffff 	.word	0x3e2fffff
 80183b4:	3fe59427 	.word	0x3fe59427

080183b8 <expm1f>:
 80183b8:	ee10 2a10 	vmov	r2, s0
 80183bc:	497d      	ldr	r1, [pc, #500]	; (80185b4 <expm1f+0x1fc>)
 80183be:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80183c2:	428b      	cmp	r3, r1
 80183c4:	d920      	bls.n	8018408 <expm1f+0x50>
 80183c6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80183ca:	d902      	bls.n	80183d2 <expm1f+0x1a>
 80183cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 80183d0:	4770      	bx	lr
 80183d2:	d105      	bne.n	80183e0 <expm1f+0x28>
 80183d4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80183d8:	2a00      	cmp	r2, #0
 80183da:	fe20 0a27 	vselge.f32	s0, s0, s15
 80183de:	4770      	bx	lr
 80183e0:	2a00      	cmp	r2, #0
 80183e2:	db05      	blt.n	80183f0 <expm1f+0x38>
 80183e4:	4974      	ldr	r1, [pc, #464]	; (80185b8 <expm1f+0x200>)
 80183e6:	428b      	cmp	r3, r1
 80183e8:	d95c      	bls.n	80184a4 <expm1f+0xec>
 80183ea:	2000      	movs	r0, #0
 80183ec:	f7fe bf3e 	b.w	801726c <__math_oflowf>
 80183f0:	eddf 7a72 	vldr	s15, [pc, #456]	; 80185bc <expm1f+0x204>
 80183f4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80183f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80183fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018400:	d550      	bpl.n	80184a4 <expm1f+0xec>
 8018402:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8018406:	4770      	bx	lr
 8018408:	496d      	ldr	r1, [pc, #436]	; (80185c0 <expm1f+0x208>)
 801840a:	428b      	cmp	r3, r1
 801840c:	d966      	bls.n	80184dc <expm1f+0x124>
 801840e:	496d      	ldr	r1, [pc, #436]	; (80185c4 <expm1f+0x20c>)
 8018410:	428b      	cmp	r3, r1
 8018412:	d847      	bhi.n	80184a4 <expm1f+0xec>
 8018414:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80185c8 <expm1f+0x210>
 8018418:	2a00      	cmp	r2, #0
 801841a:	bfa7      	ittee	ge
 801841c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 8018420:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 80185cc <expm1f+0x214>
 8018424:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 80185d0 <expm1f+0x218>
 8018428:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801842c:	bfac      	ite	ge
 801842e:	2301      	movge	r3, #1
 8018430:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018434:	ee37 0a66 	vsub.f32	s0, s14, s13
 8018438:	ee77 7a40 	vsub.f32	s15, s14, s0
 801843c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018440:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8018444:	ee20 4a25 	vmul.f32	s8, s0, s11
 8018448:	ed9f 6a62 	vldr	s12, [pc, #392]	; 80185d4 <expm1f+0x21c>
 801844c:	eddf 6a62 	vldr	s13, [pc, #392]	; 80185d8 <expm1f+0x220>
 8018450:	ed9f 5a62 	vldr	s10, [pc, #392]	; 80185dc <expm1f+0x224>
 8018454:	ee20 7a04 	vmul.f32	s14, s0, s8
 8018458:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801845c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8018460:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 80185e0 <expm1f+0x228>
 8018464:	eea6 6a87 	vfma.f32	s12, s13, s14
 8018468:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80185e4 <expm1f+0x22c>
 801846c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8018470:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8018474:	eea6 5a87 	vfma.f32	s10, s13, s14
 8018478:	eef0 6a46 	vmov.f32	s13, s12
 801847c:	eee5 6a07 	vfma.f32	s13, s10, s14
 8018480:	eee4 4a66 	vfms.f32	s9, s8, s13
 8018484:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 8018488:	eea0 4a64 	vfms.f32	s8, s0, s9
 801848c:	ee36 5ae4 	vsub.f32	s10, s13, s9
 8018490:	eec5 6a04 	vdiv.f32	s13, s10, s8
 8018494:	ee66 6a87 	vmul.f32	s13, s13, s14
 8018498:	bb73      	cbnz	r3, 80184f8 <expm1f+0x140>
 801849a:	ee90 7a26 	vfnms.f32	s14, s0, s13
 801849e:	ee30 0a47 	vsub.f32	s0, s0, s14
 80184a2:	4770      	bx	lr
 80184a4:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 80184a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80184ac:	2a00      	cmp	r2, #0
 80184ae:	fe67 7a87 	vselge.f32	s15, s15, s14
 80184b2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80185e8 <expm1f+0x230>
 80184b6:	ee40 7a07 	vmla.f32	s15, s0, s14
 80184ba:	eeb0 7a40 	vmov.f32	s14, s0
 80184be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80184c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80184c6:	ee17 3a90 	vmov	r3, s15
 80184ca:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80185c8 <expm1f+0x210>
 80184ce:	eea6 7ae7 	vfms.f32	s14, s13, s15
 80184d2:	eddf 7a3e 	vldr	s15, [pc, #248]	; 80185cc <expm1f+0x214>
 80184d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80184da:	e7ab      	b.n	8018434 <expm1f+0x7c>
 80184dc:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 80184e0:	d208      	bcs.n	80184f4 <expm1f+0x13c>
 80184e2:	eddf 7a42 	vldr	s15, [pc, #264]	; 80185ec <expm1f+0x234>
 80184e6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80184ea:	ee77 7ae7 	vsub.f32	s15, s15, s15
 80184ee:	ee30 0a67 	vsub.f32	s0, s0, s15
 80184f2:	4770      	bx	lr
 80184f4:	2300      	movs	r3, #0
 80184f6:	e7a3      	b.n	8018440 <expm1f+0x88>
 80184f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80184fc:	1c5a      	adds	r2, r3, #1
 80184fe:	eed6 7a80 	vfnms.f32	s15, s13, s0
 8018502:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018506:	d106      	bne.n	8018516 <expm1f+0x15e>
 8018508:	ee70 7a67 	vsub.f32	s15, s0, s15
 801850c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018510:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8018514:	4770      	bx	lr
 8018516:	2b01      	cmp	r3, #1
 8018518:	d118      	bne.n	801854c <expm1f+0x194>
 801851a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801851e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8018522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018526:	bf5b      	ittet	pl
 8018528:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 801852c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 8018530:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 8018534:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 8018538:	bf43      	ittte	mi
 801853a:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 801853e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 8018542:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 8018546:	eeb0 0a46 	vmovpl.f32	s0, s12
 801854a:	4770      	bx	lr
 801854c:	1c5a      	adds	r2, r3, #1
 801854e:	2a39      	cmp	r2, #57	; 0x39
 8018550:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 8018554:	d90b      	bls.n	801856e <expm1f+0x1b6>
 8018556:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801855a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801855e:	ee17 3a90 	vmov	r3, s15
 8018562:	4419      	add	r1, r3
 8018564:	ee07 1a90 	vmov	s15, r1
 8018568:	ee37 0ac6 	vsub.f32	s0, s15, s12
 801856c:	4770      	bx	lr
 801856e:	2b16      	cmp	r3, #22
 8018570:	dc11      	bgt.n	8018596 <expm1f+0x1de>
 8018572:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018576:	fa42 f303 	asr.w	r3, r2, r3
 801857a:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801857e:	ee07 3a10 	vmov	s14, r3
 8018582:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8018586:	ee77 7a67 	vsub.f32	s15, s14, s15
 801858a:	ee17 3a90 	vmov	r3, s15
 801858e:	440b      	add	r3, r1
 8018590:	ee00 3a10 	vmov	s0, r3
 8018594:	4770      	bx	lr
 8018596:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801859a:	05db      	lsls	r3, r3, #23
 801859c:	ee07 3a10 	vmov	s14, r3
 80185a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80185a4:	ee70 7a67 	vsub.f32	s15, s0, s15
 80185a8:	ee77 7a86 	vadd.f32	s15, s15, s12
 80185ac:	ee17 3a90 	vmov	r3, s15
 80185b0:	e7ed      	b.n	801858e <expm1f+0x1d6>
 80185b2:	bf00      	nop
 80185b4:	4195b843 	.word	0x4195b843
 80185b8:	42b17217 	.word	0x42b17217
 80185bc:	0da24260 	.word	0x0da24260
 80185c0:	3eb17218 	.word	0x3eb17218
 80185c4:	3f851591 	.word	0x3f851591
 80185c8:	3f317180 	.word	0x3f317180
 80185cc:	3717f7d1 	.word	0x3717f7d1
 80185d0:	b717f7d1 	.word	0xb717f7d1
 80185d4:	b457edbb 	.word	0xb457edbb
 80185d8:	36867e54 	.word	0x36867e54
 80185dc:	bd088889 	.word	0xbd088889
 80185e0:	b8a670cd 	.word	0xb8a670cd
 80185e4:	3ad00d01 	.word	0x3ad00d01
 80185e8:	3fb8aa3b 	.word	0x3fb8aa3b
 80185ec:	7149f2ca 	.word	0x7149f2ca

080185f0 <fabs>:
 80185f0:	ec51 0b10 	vmov	r0, r1, d0
 80185f4:	ee10 2a10 	vmov	r2, s0
 80185f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80185fc:	ec43 2b10 	vmov	d0, r2, r3
 8018600:	4770      	bx	lr
 8018602:	0000      	movs	r0, r0
 8018604:	0000      	movs	r0, r0
	...

08018608 <scalbn>:
 8018608:	ee10 1a90 	vmov	r1, s1
 801860c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018610:	b98b      	cbnz	r3, 8018636 <scalbn+0x2e>
 8018612:	ee10 3a10 	vmov	r3, s0
 8018616:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801861a:	4319      	orrs	r1, r3
 801861c:	d00a      	beq.n	8018634 <scalbn+0x2c>
 801861e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80186d0 <scalbn+0xc8>
 8018622:	4b37      	ldr	r3, [pc, #220]	; (8018700 <scalbn+0xf8>)
 8018624:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018628:	4298      	cmp	r0, r3
 801862a:	da0b      	bge.n	8018644 <scalbn+0x3c>
 801862c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 80186d8 <scalbn+0xd0>
 8018630:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018634:	4770      	bx	lr
 8018636:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801863a:	4293      	cmp	r3, r2
 801863c:	d107      	bne.n	801864e <scalbn+0x46>
 801863e:	ee30 0b00 	vadd.f64	d0, d0, d0
 8018642:	4770      	bx	lr
 8018644:	ee10 1a90 	vmov	r1, s1
 8018648:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801864c:	3b36      	subs	r3, #54	; 0x36
 801864e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8018652:	4290      	cmp	r0, r2
 8018654:	dd0d      	ble.n	8018672 <scalbn+0x6a>
 8018656:	ed9f 7b22 	vldr	d7, [pc, #136]	; 80186e0 <scalbn+0xd8>
 801865a:	ee10 3a90 	vmov	r3, s1
 801865e:	eeb0 6b47 	vmov.f64	d6, d7
 8018662:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80186e8 <scalbn+0xe0>
 8018666:	2b00      	cmp	r3, #0
 8018668:	fe27 7b05 	vselge.f64	d7, d7, d5
 801866c:	ee27 0b06 	vmul.f64	d0, d7, d6
 8018670:	4770      	bx	lr
 8018672:	4418      	add	r0, r3
 8018674:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8018678:	4298      	cmp	r0, r3
 801867a:	dcec      	bgt.n	8018656 <scalbn+0x4e>
 801867c:	2800      	cmp	r0, #0
 801867e:	dd0a      	ble.n	8018696 <scalbn+0x8e>
 8018680:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8018684:	ec53 2b10 	vmov	r2, r3, d0
 8018688:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801868c:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 8018690:	ec43 2b10 	vmov	d0, r2, r3
 8018694:	4770      	bx	lr
 8018696:	f110 0f35 	cmn.w	r0, #53	; 0x35
 801869a:	da09      	bge.n	80186b0 <scalbn+0xa8>
 801869c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80186d8 <scalbn+0xd0>
 80186a0:	ee10 3a90 	vmov	r3, s1
 80186a4:	eeb0 6b47 	vmov.f64	d6, d7
 80186a8:	ed9f 5b11 	vldr	d5, [pc, #68]	; 80186f0 <scalbn+0xe8>
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	e7db      	b.n	8018668 <scalbn+0x60>
 80186b0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80186b4:	ec53 2b10 	vmov	r2, r3, d0
 80186b8:	3036      	adds	r0, #54	; 0x36
 80186ba:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80186be:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 80186c2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 80186f8 <scalbn+0xf0>
 80186c6:	ec43 2b10 	vmov	d0, r2, r3
 80186ca:	e7b1      	b.n	8018630 <scalbn+0x28>
 80186cc:	f3af 8000 	nop.w
 80186d0:	00000000 	.word	0x00000000
 80186d4:	43500000 	.word	0x43500000
 80186d8:	c2f8f359 	.word	0xc2f8f359
 80186dc:	01a56e1f 	.word	0x01a56e1f
 80186e0:	8800759c 	.word	0x8800759c
 80186e4:	7e37e43c 	.word	0x7e37e43c
 80186e8:	8800759c 	.word	0x8800759c
 80186ec:	fe37e43c 	.word	0xfe37e43c
 80186f0:	c2f8f359 	.word	0xc2f8f359
 80186f4:	81a56e1f 	.word	0x81a56e1f
 80186f8:	00000000 	.word	0x00000000
 80186fc:	3c900000 	.word	0x3c900000
 8018700:	ffff3cb0 	.word	0xffff3cb0

08018704 <__kernel_rem_pio2f>:
 8018704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018708:	ed2d 8b04 	vpush	{d8-d9}
 801870c:	b0d9      	sub	sp, #356	; 0x164
 801870e:	4688      	mov	r8, r1
 8018710:	9002      	str	r0, [sp, #8]
 8018712:	49b8      	ldr	r1, [pc, #736]	; (80189f4 <__kernel_rem_pio2f+0x2f0>)
 8018714:	9866      	ldr	r0, [sp, #408]	; 0x198
 8018716:	9301      	str	r3, [sp, #4]
 8018718:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801871c:	9901      	ldr	r1, [sp, #4]
 801871e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8018720:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8018724:	1d11      	adds	r1, r2, #4
 8018726:	db25      	blt.n	8018774 <__kernel_rem_pio2f+0x70>
 8018728:	1ed0      	subs	r0, r2, #3
 801872a:	bf48      	it	mi
 801872c:	1d10      	addmi	r0, r2, #4
 801872e:	10c0      	asrs	r0, r0, #3
 8018730:	1c45      	adds	r5, r0, #1
 8018732:	00e9      	lsls	r1, r5, #3
 8018734:	eba0 070b 	sub.w	r7, r0, fp
 8018738:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8018a04 <__kernel_rem_pio2f+0x300>
 801873c:	9103      	str	r1, [sp, #12]
 801873e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8018742:	eb0a 0c0b 	add.w	ip, sl, fp
 8018746:	ae1c      	add	r6, sp, #112	; 0x70
 8018748:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801874c:	2400      	movs	r4, #0
 801874e:	4564      	cmp	r4, ip
 8018750:	dd12      	ble.n	8018778 <__kernel_rem_pio2f+0x74>
 8018752:	9901      	ldr	r1, [sp, #4]
 8018754:	ac1c      	add	r4, sp, #112	; 0x70
 8018756:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801875a:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801875e:	f04f 0c00 	mov.w	ip, #0
 8018762:	45d4      	cmp	ip, sl
 8018764:	dc27      	bgt.n	80187b6 <__kernel_rem_pio2f+0xb2>
 8018766:	f8dd e008 	ldr.w	lr, [sp, #8]
 801876a:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8018a04 <__kernel_rem_pio2f+0x300>
 801876e:	4627      	mov	r7, r4
 8018770:	2600      	movs	r6, #0
 8018772:	e016      	b.n	80187a2 <__kernel_rem_pio2f+0x9e>
 8018774:	2000      	movs	r0, #0
 8018776:	e7db      	b.n	8018730 <__kernel_rem_pio2f+0x2c>
 8018778:	42e7      	cmn	r7, r4
 801877a:	bf5d      	ittte	pl
 801877c:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8018780:	ee07 1a90 	vmovpl	s15, r1
 8018784:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8018788:	eef0 7a47 	vmovmi.f32	s15, s14
 801878c:	ece6 7a01 	vstmia	r6!, {s15}
 8018790:	3401      	adds	r4, #1
 8018792:	e7dc      	b.n	801874e <__kernel_rem_pio2f+0x4a>
 8018794:	ecfe 6a01 	vldmia	lr!, {s13}
 8018798:	ed97 7a00 	vldr	s14, [r7]
 801879c:	eee6 7a87 	vfma.f32	s15, s13, s14
 80187a0:	3601      	adds	r6, #1
 80187a2:	455e      	cmp	r6, fp
 80187a4:	f1a7 0704 	sub.w	r7, r7, #4
 80187a8:	ddf4      	ble.n	8018794 <__kernel_rem_pio2f+0x90>
 80187aa:	ece9 7a01 	vstmia	r9!, {s15}
 80187ae:	f10c 0c01 	add.w	ip, ip, #1
 80187b2:	3404      	adds	r4, #4
 80187b4:	e7d5      	b.n	8018762 <__kernel_rem_pio2f+0x5e>
 80187b6:	a908      	add	r1, sp, #32
 80187b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80187bc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80187c0:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8018a00 <__kernel_rem_pio2f+0x2fc>
 80187c4:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80189fc <__kernel_rem_pio2f+0x2f8>
 80187c8:	9105      	str	r1, [sp, #20]
 80187ca:	9304      	str	r3, [sp, #16]
 80187cc:	4656      	mov	r6, sl
 80187ce:	00b3      	lsls	r3, r6, #2
 80187d0:	9306      	str	r3, [sp, #24]
 80187d2:	ab58      	add	r3, sp, #352	; 0x160
 80187d4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80187d8:	ac08      	add	r4, sp, #32
 80187da:	ab44      	add	r3, sp, #272	; 0x110
 80187dc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80187e0:	46a4      	mov	ip, r4
 80187e2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80187e6:	4637      	mov	r7, r6
 80187e8:	2f00      	cmp	r7, #0
 80187ea:	f1a0 0004 	sub.w	r0, r0, #4
 80187ee:	dc4a      	bgt.n	8018886 <__kernel_rem_pio2f+0x182>
 80187f0:	4628      	mov	r0, r5
 80187f2:	9207      	str	r2, [sp, #28]
 80187f4:	f000 fab2 	bl	8018d5c <scalbnf>
 80187f8:	eeb0 8a40 	vmov.f32	s16, s0
 80187fc:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8018800:	ee28 0a00 	vmul.f32	s0, s16, s0
 8018804:	f000 fa68 	bl	8018cd8 <floorf>
 8018808:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801880c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8018810:	2d00      	cmp	r5, #0
 8018812:	9a07      	ldr	r2, [sp, #28]
 8018814:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8018818:	ee17 9a90 	vmov	r9, s15
 801881c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018820:	ee38 8a67 	vsub.f32	s16, s16, s15
 8018824:	dd41      	ble.n	80188aa <__kernel_rem_pio2f+0x1a6>
 8018826:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801882a:	ab08      	add	r3, sp, #32
 801882c:	f1c5 0e08 	rsb	lr, r5, #8
 8018830:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8018834:	fa47 f00e 	asr.w	r0, r7, lr
 8018838:	4481      	add	r9, r0
 801883a:	fa00 f00e 	lsl.w	r0, r0, lr
 801883e:	1a3f      	subs	r7, r7, r0
 8018840:	f1c5 0007 	rsb	r0, r5, #7
 8018844:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8018848:	4107      	asrs	r7, r0
 801884a:	2f00      	cmp	r7, #0
 801884c:	dd3c      	ble.n	80188c8 <__kernel_rem_pio2f+0x1c4>
 801884e:	f04f 0e00 	mov.w	lr, #0
 8018852:	f109 0901 	add.w	r9, r9, #1
 8018856:	4671      	mov	r1, lr
 8018858:	4576      	cmp	r6, lr
 801885a:	dc67      	bgt.n	801892c <__kernel_rem_pio2f+0x228>
 801885c:	2d00      	cmp	r5, #0
 801885e:	dd03      	ble.n	8018868 <__kernel_rem_pio2f+0x164>
 8018860:	2d01      	cmp	r5, #1
 8018862:	d074      	beq.n	801894e <__kernel_rem_pio2f+0x24a>
 8018864:	2d02      	cmp	r5, #2
 8018866:	d07b      	beq.n	8018960 <__kernel_rem_pio2f+0x25c>
 8018868:	2f02      	cmp	r7, #2
 801886a:	d12d      	bne.n	80188c8 <__kernel_rem_pio2f+0x1c4>
 801886c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8018870:	ee30 8a48 	vsub.f32	s16, s0, s16
 8018874:	b341      	cbz	r1, 80188c8 <__kernel_rem_pio2f+0x1c4>
 8018876:	4628      	mov	r0, r5
 8018878:	9207      	str	r2, [sp, #28]
 801887a:	f000 fa6f 	bl	8018d5c <scalbnf>
 801887e:	9a07      	ldr	r2, [sp, #28]
 8018880:	ee38 8a40 	vsub.f32	s16, s16, s0
 8018884:	e020      	b.n	80188c8 <__kernel_rem_pio2f+0x1c4>
 8018886:	ee60 7a28 	vmul.f32	s15, s0, s17
 801888a:	3f01      	subs	r7, #1
 801888c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018894:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8018898:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801889c:	ecac 0a01 	vstmia	ip!, {s0}
 80188a0:	ed90 0a00 	vldr	s0, [r0]
 80188a4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80188a8:	e79e      	b.n	80187e8 <__kernel_rem_pio2f+0xe4>
 80188aa:	d105      	bne.n	80188b8 <__kernel_rem_pio2f+0x1b4>
 80188ac:	1e70      	subs	r0, r6, #1
 80188ae:	ab08      	add	r3, sp, #32
 80188b0:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80188b4:	11ff      	asrs	r7, r7, #7
 80188b6:	e7c8      	b.n	801884a <__kernel_rem_pio2f+0x146>
 80188b8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80188bc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80188c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188c4:	da30      	bge.n	8018928 <__kernel_rem_pio2f+0x224>
 80188c6:	2700      	movs	r7, #0
 80188c8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80188cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188d0:	f040 809a 	bne.w	8018a08 <__kernel_rem_pio2f+0x304>
 80188d4:	1e74      	subs	r4, r6, #1
 80188d6:	46a4      	mov	ip, r4
 80188d8:	2100      	movs	r1, #0
 80188da:	45d4      	cmp	ip, sl
 80188dc:	da47      	bge.n	801896e <__kernel_rem_pio2f+0x26a>
 80188de:	2900      	cmp	r1, #0
 80188e0:	d063      	beq.n	80189aa <__kernel_rem_pio2f+0x2a6>
 80188e2:	ab08      	add	r3, sp, #32
 80188e4:	3d08      	subs	r5, #8
 80188e6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d07f      	beq.n	80189ee <__kernel_rem_pio2f+0x2ea>
 80188ee:	4628      	mov	r0, r5
 80188f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80188f4:	f000 fa32 	bl	8018d5c <scalbnf>
 80188f8:	1c63      	adds	r3, r4, #1
 80188fa:	aa44      	add	r2, sp, #272	; 0x110
 80188fc:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8018a00 <__kernel_rem_pio2f+0x2fc>
 8018900:	0099      	lsls	r1, r3, #2
 8018902:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8018906:	4623      	mov	r3, r4
 8018908:	2b00      	cmp	r3, #0
 801890a:	f280 80ad 	bge.w	8018a68 <__kernel_rem_pio2f+0x364>
 801890e:	4623      	mov	r3, r4
 8018910:	2b00      	cmp	r3, #0
 8018912:	f2c0 80cb 	blt.w	8018aac <__kernel_rem_pio2f+0x3a8>
 8018916:	aa44      	add	r2, sp, #272	; 0x110
 8018918:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801891c:	4e36      	ldr	r6, [pc, #216]	; (80189f8 <__kernel_rem_pio2f+0x2f4>)
 801891e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8018a04 <__kernel_rem_pio2f+0x300>
 8018922:	2000      	movs	r0, #0
 8018924:	1ae2      	subs	r2, r4, r3
 8018926:	e0b6      	b.n	8018a96 <__kernel_rem_pio2f+0x392>
 8018928:	2702      	movs	r7, #2
 801892a:	e790      	b.n	801884e <__kernel_rem_pio2f+0x14a>
 801892c:	6820      	ldr	r0, [r4, #0]
 801892e:	b949      	cbnz	r1, 8018944 <__kernel_rem_pio2f+0x240>
 8018930:	b118      	cbz	r0, 801893a <__kernel_rem_pio2f+0x236>
 8018932:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8018936:	6020      	str	r0, [r4, #0]
 8018938:	2001      	movs	r0, #1
 801893a:	f10e 0e01 	add.w	lr, lr, #1
 801893e:	3404      	adds	r4, #4
 8018940:	4601      	mov	r1, r0
 8018942:	e789      	b.n	8018858 <__kernel_rem_pio2f+0x154>
 8018944:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8018948:	6020      	str	r0, [r4, #0]
 801894a:	4608      	mov	r0, r1
 801894c:	e7f5      	b.n	801893a <__kernel_rem_pio2f+0x236>
 801894e:	1e74      	subs	r4, r6, #1
 8018950:	ab08      	add	r3, sp, #32
 8018952:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018956:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801895a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801895e:	e783      	b.n	8018868 <__kernel_rem_pio2f+0x164>
 8018960:	1e74      	subs	r4, r6, #1
 8018962:	ab08      	add	r3, sp, #32
 8018964:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018968:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801896c:	e7f5      	b.n	801895a <__kernel_rem_pio2f+0x256>
 801896e:	ab08      	add	r3, sp, #32
 8018970:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8018974:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8018978:	4301      	orrs	r1, r0
 801897a:	e7ae      	b.n	80188da <__kernel_rem_pio2f+0x1d6>
 801897c:	3001      	adds	r0, #1
 801897e:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8018982:	2f00      	cmp	r7, #0
 8018984:	d0fa      	beq.n	801897c <__kernel_rem_pio2f+0x278>
 8018986:	9b06      	ldr	r3, [sp, #24]
 8018988:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801898c:	eb0d 0403 	add.w	r4, sp, r3
 8018990:	9b01      	ldr	r3, [sp, #4]
 8018992:	18f7      	adds	r7, r6, r3
 8018994:	ab1c      	add	r3, sp, #112	; 0x70
 8018996:	f106 0c01 	add.w	ip, r6, #1
 801899a:	3c4c      	subs	r4, #76	; 0x4c
 801899c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80189a0:	4430      	add	r0, r6
 80189a2:	4560      	cmp	r0, ip
 80189a4:	da04      	bge.n	80189b0 <__kernel_rem_pio2f+0x2ac>
 80189a6:	4606      	mov	r6, r0
 80189a8:	e711      	b.n	80187ce <__kernel_rem_pio2f+0xca>
 80189aa:	9c05      	ldr	r4, [sp, #20]
 80189ac:	2001      	movs	r0, #1
 80189ae:	e7e6      	b.n	801897e <__kernel_rem_pio2f+0x27a>
 80189b0:	9b04      	ldr	r3, [sp, #16]
 80189b2:	f8dd e008 	ldr.w	lr, [sp, #8]
 80189b6:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80189ba:	9306      	str	r3, [sp, #24]
 80189bc:	ee07 3a90 	vmov	s15, r3
 80189c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80189c4:	2600      	movs	r6, #0
 80189c6:	ece7 7a01 	vstmia	r7!, {s15}
 80189ca:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8018a04 <__kernel_rem_pio2f+0x300>
 80189ce:	46b9      	mov	r9, r7
 80189d0:	455e      	cmp	r6, fp
 80189d2:	dd04      	ble.n	80189de <__kernel_rem_pio2f+0x2da>
 80189d4:	ece4 7a01 	vstmia	r4!, {s15}
 80189d8:	f10c 0c01 	add.w	ip, ip, #1
 80189dc:	e7e1      	b.n	80189a2 <__kernel_rem_pio2f+0x29e>
 80189de:	ecfe 6a01 	vldmia	lr!, {s13}
 80189e2:	ed39 7a01 	vldmdb	r9!, {s14}
 80189e6:	3601      	adds	r6, #1
 80189e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80189ec:	e7f0      	b.n	80189d0 <__kernel_rem_pio2f+0x2cc>
 80189ee:	3c01      	subs	r4, #1
 80189f0:	e777      	b.n	80188e2 <__kernel_rem_pio2f+0x1de>
 80189f2:	bf00      	nop
 80189f4:	0802517c 	.word	0x0802517c
 80189f8:	08025150 	.word	0x08025150
 80189fc:	43800000 	.word	0x43800000
 8018a00:	3b800000 	.word	0x3b800000
 8018a04:	00000000 	.word	0x00000000
 8018a08:	9b03      	ldr	r3, [sp, #12]
 8018a0a:	eeb0 0a48 	vmov.f32	s0, s16
 8018a0e:	1a98      	subs	r0, r3, r2
 8018a10:	f000 f9a4 	bl	8018d5c <scalbnf>
 8018a14:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80189fc <__kernel_rem_pio2f+0x2f8>
 8018a18:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8018a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a20:	db19      	blt.n	8018a56 <__kernel_rem_pio2f+0x352>
 8018a22:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8018a00 <__kernel_rem_pio2f+0x2fc>
 8018a26:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018a2a:	aa08      	add	r2, sp, #32
 8018a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a30:	1c74      	adds	r4, r6, #1
 8018a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a36:	3508      	adds	r5, #8
 8018a38:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8018a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018a40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018a44:	ee10 3a10 	vmov	r3, s0
 8018a48:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8018a4c:	ee17 3a90 	vmov	r3, s15
 8018a50:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8018a54:	e74b      	b.n	80188ee <__kernel_rem_pio2f+0x1ea>
 8018a56:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018a5a:	aa08      	add	r2, sp, #32
 8018a5c:	ee10 3a10 	vmov	r3, s0
 8018a60:	4634      	mov	r4, r6
 8018a62:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8018a66:	e742      	b.n	80188ee <__kernel_rem_pio2f+0x1ea>
 8018a68:	a808      	add	r0, sp, #32
 8018a6a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8018a6e:	9001      	str	r0, [sp, #4]
 8018a70:	ee07 0a90 	vmov	s15, r0
 8018a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018a78:	3b01      	subs	r3, #1
 8018a7a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018a7e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018a82:	ed62 7a01 	vstmdb	r2!, {s15}
 8018a86:	e73f      	b.n	8018908 <__kernel_rem_pio2f+0x204>
 8018a88:	ecf6 6a01 	vldmia	r6!, {s13}
 8018a8c:	ecb5 7a01 	vldmia	r5!, {s14}
 8018a90:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018a94:	3001      	adds	r0, #1
 8018a96:	4550      	cmp	r0, sl
 8018a98:	dc01      	bgt.n	8018a9e <__kernel_rem_pio2f+0x39a>
 8018a9a:	4290      	cmp	r0, r2
 8018a9c:	ddf4      	ble.n	8018a88 <__kernel_rem_pio2f+0x384>
 8018a9e:	a858      	add	r0, sp, #352	; 0x160
 8018aa0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8018aa4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8018aa8:	3b01      	subs	r3, #1
 8018aaa:	e731      	b.n	8018910 <__kernel_rem_pio2f+0x20c>
 8018aac:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8018aae:	2b02      	cmp	r3, #2
 8018ab0:	dc09      	bgt.n	8018ac6 <__kernel_rem_pio2f+0x3c2>
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	dc2b      	bgt.n	8018b0e <__kernel_rem_pio2f+0x40a>
 8018ab6:	d044      	beq.n	8018b42 <__kernel_rem_pio2f+0x43e>
 8018ab8:	f009 0007 	and.w	r0, r9, #7
 8018abc:	b059      	add	sp, #356	; 0x164
 8018abe:	ecbd 8b04 	vpop	{d8-d9}
 8018ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ac6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8018ac8:	2b03      	cmp	r3, #3
 8018aca:	d1f5      	bne.n	8018ab8 <__kernel_rem_pio2f+0x3b4>
 8018acc:	aa30      	add	r2, sp, #192	; 0xc0
 8018ace:	1f0b      	subs	r3, r1, #4
 8018ad0:	4413      	add	r3, r2
 8018ad2:	461a      	mov	r2, r3
 8018ad4:	4620      	mov	r0, r4
 8018ad6:	2800      	cmp	r0, #0
 8018ad8:	f1a2 0204 	sub.w	r2, r2, #4
 8018adc:	dc52      	bgt.n	8018b84 <__kernel_rem_pio2f+0x480>
 8018ade:	4622      	mov	r2, r4
 8018ae0:	2a01      	cmp	r2, #1
 8018ae2:	f1a3 0304 	sub.w	r3, r3, #4
 8018ae6:	dc5d      	bgt.n	8018ba4 <__kernel_rem_pio2f+0x4a0>
 8018ae8:	ab30      	add	r3, sp, #192	; 0xc0
 8018aea:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8018a04 <__kernel_rem_pio2f+0x300>
 8018aee:	440b      	add	r3, r1
 8018af0:	2c01      	cmp	r4, #1
 8018af2:	dc67      	bgt.n	8018bc4 <__kernel_rem_pio2f+0x4c0>
 8018af4:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8018af8:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8018afc:	2f00      	cmp	r7, #0
 8018afe:	d167      	bne.n	8018bd0 <__kernel_rem_pio2f+0x4cc>
 8018b00:	edc8 6a00 	vstr	s13, [r8]
 8018b04:	ed88 7a01 	vstr	s14, [r8, #4]
 8018b08:	edc8 7a02 	vstr	s15, [r8, #8]
 8018b0c:	e7d4      	b.n	8018ab8 <__kernel_rem_pio2f+0x3b4>
 8018b0e:	ab30      	add	r3, sp, #192	; 0xc0
 8018b10:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8018a04 <__kernel_rem_pio2f+0x300>
 8018b14:	440b      	add	r3, r1
 8018b16:	4622      	mov	r2, r4
 8018b18:	2a00      	cmp	r2, #0
 8018b1a:	da24      	bge.n	8018b66 <__kernel_rem_pio2f+0x462>
 8018b1c:	b34f      	cbz	r7, 8018b72 <__kernel_rem_pio2f+0x46e>
 8018b1e:	eef1 7a47 	vneg.f32	s15, s14
 8018b22:	edc8 7a00 	vstr	s15, [r8]
 8018b26:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8018b2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018b2e:	aa31      	add	r2, sp, #196	; 0xc4
 8018b30:	2301      	movs	r3, #1
 8018b32:	429c      	cmp	r4, r3
 8018b34:	da20      	bge.n	8018b78 <__kernel_rem_pio2f+0x474>
 8018b36:	b10f      	cbz	r7, 8018b3c <__kernel_rem_pio2f+0x438>
 8018b38:	eef1 7a67 	vneg.f32	s15, s15
 8018b3c:	edc8 7a01 	vstr	s15, [r8, #4]
 8018b40:	e7ba      	b.n	8018ab8 <__kernel_rem_pio2f+0x3b4>
 8018b42:	ab30      	add	r3, sp, #192	; 0xc0
 8018b44:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8018a04 <__kernel_rem_pio2f+0x300>
 8018b48:	440b      	add	r3, r1
 8018b4a:	2c00      	cmp	r4, #0
 8018b4c:	da05      	bge.n	8018b5a <__kernel_rem_pio2f+0x456>
 8018b4e:	b10f      	cbz	r7, 8018b54 <__kernel_rem_pio2f+0x450>
 8018b50:	eef1 7a67 	vneg.f32	s15, s15
 8018b54:	edc8 7a00 	vstr	s15, [r8]
 8018b58:	e7ae      	b.n	8018ab8 <__kernel_rem_pio2f+0x3b4>
 8018b5a:	ed33 7a01 	vldmdb	r3!, {s14}
 8018b5e:	3c01      	subs	r4, #1
 8018b60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018b64:	e7f1      	b.n	8018b4a <__kernel_rem_pio2f+0x446>
 8018b66:	ed73 7a01 	vldmdb	r3!, {s15}
 8018b6a:	3a01      	subs	r2, #1
 8018b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018b70:	e7d2      	b.n	8018b18 <__kernel_rem_pio2f+0x414>
 8018b72:	eef0 7a47 	vmov.f32	s15, s14
 8018b76:	e7d4      	b.n	8018b22 <__kernel_rem_pio2f+0x41e>
 8018b78:	ecb2 7a01 	vldmia	r2!, {s14}
 8018b7c:	3301      	adds	r3, #1
 8018b7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018b82:	e7d6      	b.n	8018b32 <__kernel_rem_pio2f+0x42e>
 8018b84:	edd2 7a00 	vldr	s15, [r2]
 8018b88:	edd2 6a01 	vldr	s13, [r2, #4]
 8018b8c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018b90:	3801      	subs	r0, #1
 8018b92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018b96:	ed82 7a00 	vstr	s14, [r2]
 8018b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018b9e:	edc2 7a01 	vstr	s15, [r2, #4]
 8018ba2:	e798      	b.n	8018ad6 <__kernel_rem_pio2f+0x3d2>
 8018ba4:	edd3 7a00 	vldr	s15, [r3]
 8018ba8:	edd3 6a01 	vldr	s13, [r3, #4]
 8018bac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018bb0:	3a01      	subs	r2, #1
 8018bb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018bb6:	ed83 7a00 	vstr	s14, [r3]
 8018bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018bbe:	edc3 7a01 	vstr	s15, [r3, #4]
 8018bc2:	e78d      	b.n	8018ae0 <__kernel_rem_pio2f+0x3dc>
 8018bc4:	ed33 7a01 	vldmdb	r3!, {s14}
 8018bc8:	3c01      	subs	r4, #1
 8018bca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018bce:	e78f      	b.n	8018af0 <__kernel_rem_pio2f+0x3ec>
 8018bd0:	eef1 6a66 	vneg.f32	s13, s13
 8018bd4:	eeb1 7a47 	vneg.f32	s14, s14
 8018bd8:	edc8 6a00 	vstr	s13, [r8]
 8018bdc:	ed88 7a01 	vstr	s14, [r8, #4]
 8018be0:	eef1 7a67 	vneg.f32	s15, s15
 8018be4:	e790      	b.n	8018b08 <__kernel_rem_pio2f+0x404>
 8018be6:	bf00      	nop

08018be8 <floor>:
 8018be8:	ee10 1a90 	vmov	r1, s1
 8018bec:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018bf0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8018bf4:	2b13      	cmp	r3, #19
 8018bf6:	b530      	push	{r4, r5, lr}
 8018bf8:	ee10 0a10 	vmov	r0, s0
 8018bfc:	ee10 5a10 	vmov	r5, s0
 8018c00:	dc31      	bgt.n	8018c66 <floor+0x7e>
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	da15      	bge.n	8018c32 <floor+0x4a>
 8018c06:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8018cc8 <floor+0xe0>
 8018c0a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018c0e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c16:	dd07      	ble.n	8018c28 <floor+0x40>
 8018c18:	2900      	cmp	r1, #0
 8018c1a:	da4e      	bge.n	8018cba <floor+0xd2>
 8018c1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018c20:	4308      	orrs	r0, r1
 8018c22:	d04d      	beq.n	8018cc0 <floor+0xd8>
 8018c24:	492a      	ldr	r1, [pc, #168]	; (8018cd0 <floor+0xe8>)
 8018c26:	2000      	movs	r0, #0
 8018c28:	460b      	mov	r3, r1
 8018c2a:	4602      	mov	r2, r0
 8018c2c:	ec43 2b10 	vmov	d0, r2, r3
 8018c30:	e020      	b.n	8018c74 <floor+0x8c>
 8018c32:	4a28      	ldr	r2, [pc, #160]	; (8018cd4 <floor+0xec>)
 8018c34:	411a      	asrs	r2, r3
 8018c36:	ea01 0402 	and.w	r4, r1, r2
 8018c3a:	4304      	orrs	r4, r0
 8018c3c:	d01a      	beq.n	8018c74 <floor+0x8c>
 8018c3e:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8018cc8 <floor+0xe0>
 8018c42:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018c46:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c4e:	ddeb      	ble.n	8018c28 <floor+0x40>
 8018c50:	2900      	cmp	r1, #0
 8018c52:	bfbe      	ittt	lt
 8018c54:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8018c58:	fa40 f303 	asrlt.w	r3, r0, r3
 8018c5c:	18c9      	addlt	r1, r1, r3
 8018c5e:	ea21 0102 	bic.w	r1, r1, r2
 8018c62:	2000      	movs	r0, #0
 8018c64:	e7e0      	b.n	8018c28 <floor+0x40>
 8018c66:	2b33      	cmp	r3, #51	; 0x33
 8018c68:	dd05      	ble.n	8018c76 <floor+0x8e>
 8018c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018c6e:	d101      	bne.n	8018c74 <floor+0x8c>
 8018c70:	ee30 0b00 	vadd.f64	d0, d0, d0
 8018c74:	bd30      	pop	{r4, r5, pc}
 8018c76:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8018c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018c7e:	40e2      	lsrs	r2, r4
 8018c80:	4210      	tst	r0, r2
 8018c82:	d0f7      	beq.n	8018c74 <floor+0x8c>
 8018c84:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8018cc8 <floor+0xe0>
 8018c88:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018c8c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c94:	ddc8      	ble.n	8018c28 <floor+0x40>
 8018c96:	2900      	cmp	r1, #0
 8018c98:	da02      	bge.n	8018ca0 <floor+0xb8>
 8018c9a:	2b14      	cmp	r3, #20
 8018c9c:	d103      	bne.n	8018ca6 <floor+0xbe>
 8018c9e:	3101      	adds	r1, #1
 8018ca0:	ea20 0002 	bic.w	r0, r0, r2
 8018ca4:	e7c0      	b.n	8018c28 <floor+0x40>
 8018ca6:	2401      	movs	r4, #1
 8018ca8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018cac:	fa04 f303 	lsl.w	r3, r4, r3
 8018cb0:	4418      	add	r0, r3
 8018cb2:	4285      	cmp	r5, r0
 8018cb4:	bf88      	it	hi
 8018cb6:	1909      	addhi	r1, r1, r4
 8018cb8:	e7f2      	b.n	8018ca0 <floor+0xb8>
 8018cba:	2000      	movs	r0, #0
 8018cbc:	4601      	mov	r1, r0
 8018cbe:	e7b3      	b.n	8018c28 <floor+0x40>
 8018cc0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8018cc4:	e7b0      	b.n	8018c28 <floor+0x40>
 8018cc6:	bf00      	nop
 8018cc8:	8800759c 	.word	0x8800759c
 8018ccc:	7e37e43c 	.word	0x7e37e43c
 8018cd0:	bff00000 	.word	0xbff00000
 8018cd4:	000fffff 	.word	0x000fffff

08018cd8 <floorf>:
 8018cd8:	ee10 3a10 	vmov	r3, s0
 8018cdc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018ce0:	3a7f      	subs	r2, #127	; 0x7f
 8018ce2:	2a16      	cmp	r2, #22
 8018ce4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018ce8:	dc2a      	bgt.n	8018d40 <floorf+0x68>
 8018cea:	2a00      	cmp	r2, #0
 8018cec:	da11      	bge.n	8018d12 <floorf+0x3a>
 8018cee:	eddf 7a18 	vldr	s15, [pc, #96]	; 8018d50 <floorf+0x78>
 8018cf2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018cf6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cfe:	dd05      	ble.n	8018d0c <floorf+0x34>
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	da23      	bge.n	8018d4c <floorf+0x74>
 8018d04:	4a13      	ldr	r2, [pc, #76]	; (8018d54 <floorf+0x7c>)
 8018d06:	2900      	cmp	r1, #0
 8018d08:	bf18      	it	ne
 8018d0a:	4613      	movne	r3, r2
 8018d0c:	ee00 3a10 	vmov	s0, r3
 8018d10:	4770      	bx	lr
 8018d12:	4911      	ldr	r1, [pc, #68]	; (8018d58 <floorf+0x80>)
 8018d14:	4111      	asrs	r1, r2
 8018d16:	420b      	tst	r3, r1
 8018d18:	d0fa      	beq.n	8018d10 <floorf+0x38>
 8018d1a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018d50 <floorf+0x78>
 8018d1e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018d22:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d2a:	ddef      	ble.n	8018d0c <floorf+0x34>
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	bfbe      	ittt	lt
 8018d30:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8018d34:	fa40 f202 	asrlt.w	r2, r0, r2
 8018d38:	189b      	addlt	r3, r3, r2
 8018d3a:	ea23 0301 	bic.w	r3, r3, r1
 8018d3e:	e7e5      	b.n	8018d0c <floorf+0x34>
 8018d40:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018d44:	d3e4      	bcc.n	8018d10 <floorf+0x38>
 8018d46:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018d4a:	4770      	bx	lr
 8018d4c:	2300      	movs	r3, #0
 8018d4e:	e7dd      	b.n	8018d0c <floorf+0x34>
 8018d50:	7149f2ca 	.word	0x7149f2ca
 8018d54:	bf800000 	.word	0xbf800000
 8018d58:	007fffff 	.word	0x007fffff

08018d5c <scalbnf>:
 8018d5c:	ee10 3a10 	vmov	r3, s0
 8018d60:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8018d64:	d02a      	beq.n	8018dbc <scalbnf+0x60>
 8018d66:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8018d6a:	d302      	bcc.n	8018d72 <scalbnf+0x16>
 8018d6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018d70:	4770      	bx	lr
 8018d72:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8018d76:	d122      	bne.n	8018dbe <scalbnf+0x62>
 8018d78:	4b23      	ldr	r3, [pc, #140]	; (8018e08 <scalbnf+0xac>)
 8018d7a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8018e0c <scalbnf+0xb0>
 8018d7e:	4298      	cmp	r0, r3
 8018d80:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018d84:	db16      	blt.n	8018db4 <scalbnf+0x58>
 8018d86:	ee10 3a10 	vmov	r3, s0
 8018d8a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018d8e:	3a19      	subs	r2, #25
 8018d90:	f24c 3150 	movw	r1, #50000	; 0xc350
 8018d94:	4288      	cmp	r0, r1
 8018d96:	dd14      	ble.n	8018dc2 <scalbnf+0x66>
 8018d98:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8018e10 <scalbnf+0xb4>
 8018d9c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8018e14 <scalbnf+0xb8>
 8018da0:	ee10 3a10 	vmov	r3, s0
 8018da4:	eeb0 7a67 	vmov.f32	s14, s15
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	fe67 7aa6 	vselge.f32	s15, s15, s13
 8018dae:	ee27 0a87 	vmul.f32	s0, s15, s14
 8018db2:	4770      	bx	lr
 8018db4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8018e18 <scalbnf+0xbc>
 8018db8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018dbc:	4770      	bx	lr
 8018dbe:	0dd2      	lsrs	r2, r2, #23
 8018dc0:	e7e6      	b.n	8018d90 <scalbnf+0x34>
 8018dc2:	4410      	add	r0, r2
 8018dc4:	28fe      	cmp	r0, #254	; 0xfe
 8018dc6:	dce7      	bgt.n	8018d98 <scalbnf+0x3c>
 8018dc8:	2800      	cmp	r0, #0
 8018dca:	dd06      	ble.n	8018dda <scalbnf+0x7e>
 8018dcc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018dd0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018dd4:	ee00 3a10 	vmov	s0, r3
 8018dd8:	4770      	bx	lr
 8018dda:	f110 0f16 	cmn.w	r0, #22
 8018dde:	da09      	bge.n	8018df4 <scalbnf+0x98>
 8018de0:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8018e18 <scalbnf+0xbc>
 8018de4:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8018e1c <scalbnf+0xc0>
 8018de8:	ee10 3a10 	vmov	r3, s0
 8018dec:	eeb0 7a67 	vmov.f32	s14, s15
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	e7da      	b.n	8018daa <scalbnf+0x4e>
 8018df4:	3019      	adds	r0, #25
 8018df6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018dfa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018dfe:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8018e20 <scalbnf+0xc4>
 8018e02:	ee07 3a90 	vmov	s15, r3
 8018e06:	e7d7      	b.n	8018db8 <scalbnf+0x5c>
 8018e08:	ffff3cb0 	.word	0xffff3cb0
 8018e0c:	4c000000 	.word	0x4c000000
 8018e10:	7149f2ca 	.word	0x7149f2ca
 8018e14:	f149f2ca 	.word	0xf149f2ca
 8018e18:	0da24260 	.word	0x0da24260
 8018e1c:	8da24260 	.word	0x8da24260
 8018e20:	33000000 	.word	0x33000000

08018e24 <__errno>:
 8018e24:	4b01      	ldr	r3, [pc, #4]	; (8018e2c <__errno+0x8>)
 8018e26:	6818      	ldr	r0, [r3, #0]
 8018e28:	4770      	bx	lr
 8018e2a:	bf00      	nop
 8018e2c:	20000b90 	.word	0x20000b90

08018e30 <_init>:
 8018e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e32:	bf00      	nop
 8018e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e36:	bc08      	pop	{r3}
 8018e38:	469e      	mov	lr, r3
 8018e3a:	4770      	bx	lr

08018e3c <_fini>:
 8018e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e3e:	bf00      	nop
 8018e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018e42:	bc08      	pop	{r3}
 8018e44:	469e      	mov	lr, r3
 8018e46:	4770      	bx	lr

08018e48 <__HAL_SAI_TxHalfCpltCallback_veneer>:
 8018e48:	f85f f000 	ldr.w	pc, [pc]	; 8018e4c <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
 8018e4c:	00001741 	.word	0x00001741

08018e50 <__HAL_SPI_RxCpltCallback_veneer>:
 8018e50:	f85f f000 	ldr.w	pc, [pc]	; 8018e54 <__HAL_SPI_RxCpltCallback_veneer+0x4>
 8018e54:	000040e1 	.word	0x000040e1

08018e58 <__HAL_SAI_ErrorCallback_veneer>:
 8018e58:	f85f f000 	ldr.w	pc, [pc]	; 8018e5c <__HAL_SAI_ErrorCallback_veneer+0x4>
 8018e5c:	000018e1 	.word	0x000018e1

08018e60 <__audioInitString1_veneer>:
 8018e60:	f85f f000 	ldr.w	pc, [pc]	; 8018e64 <__audioInitString1_veneer+0x4>
 8018e64:	00004361 	.word	0x00004361

08018e68 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
 8018e68:	f85f f000 	ldr.w	pc, [pc]	; 8018e6c <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
 8018e6c:	00004001 	.word	0x00004001

08018e70 <__audioInitVocal_veneer>:
 8018e70:	f85f f000 	ldr.w	pc, [pc]	; 8018e74 <__audioInitVocal_veneer+0x4>
 8018e74:	00008bc1 	.word	0x00008bc1

08018e78 <__parsePreset_veneer>:
 8018e78:	f85f f000 	ldr.w	pc, [pc]	; 8018e7c <__parsePreset_veneer+0x4>
 8018e7c:	00001c41 	.word	0x00001c41

08018e80 <__randomNumber_veneer>:
 8018e80:	f85f f000 	ldr.w	pc, [pc]	; 8018e84 <__randomNumber_veneer+0x4>
 8018e84:	00001be1 	.word	0x00001be1

08018e88 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
 8018e88:	f85f f000 	ldr.w	pc, [pc]	; 8018e8c <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
 8018e8c:	00003ea1 	.word	0x00003ea1

08018e90 <__HAL_I2C_ErrorCallback_veneer>:
 8018e90:	f85f f000 	ldr.w	pc, [pc]	; 8018e94 <__HAL_I2C_ErrorCallback_veneer+0x4>
 8018e94:	00003ee1 	.word	0x00003ee1

08018e98 <__HAL_SAI_TxCpltCallback_veneer>:
 8018e98:	f85f f000 	ldr.w	pc, [pc]	; 8018e9c <__HAL_SAI_TxCpltCallback_veneer+0x4>
 8018e9c:	000015a1 	.word	0x000015a1

08018ea0 <__HAL_SPI_RxHalfCpltCallback_veneer>:
 8018ea0:	f85f f000 	ldr.w	pc, [pc]	; 8018ea4 <__HAL_SPI_RxHalfCpltCallback_veneer+0x4>
 8018ea4:	00004221 	.word	0x00004221

08018ea8 <__audioInitAdditive_veneer>:
 8018ea8:	f85f f000 	ldr.w	pc, [pc]	; 8018eac <__audioInitAdditive_veneer+0x4>
 8018eac:	00000401 	.word	0x00000401

08018eb0 <__HAL_SPI_TxRxCpltCallback_veneer>:
 8018eb0:	f85f f000 	ldr.w	pc, [pc]	; 8018eb4 <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
 8018eb4:	00003f21 	.word	0x00003f21

08018eb8 <__audioInitString3_veneer>:
 8018eb8:	f85f f000 	ldr.w	pc, [pc]	; 8018ebc <__audioInitString3_veneer+0x4>
 8018ebc:	000053c1 	.word	0x000053c1

Disassembly of section .itcmram:

00000400 <audioInitAdditive>:
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
     400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     402:	ed2d 8b02 	vpush	{d8}
     406:	4bb6      	ldr	r3, [pc, #728]	; (6e0 <audioInitAdditive+0x2e0>)
     408:	f04f 5276 	mov.w	r2, #1031798784	; 0x3d800000
     40c:	601a      	str	r2, [r3, #0]
     40e:	2400      	movs	r4, #0
     410:	e020      	b.n	454 <audioInitAdditive+0x54>
     412:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
     416:	0043      	lsls	r3, r0, #1
     418:	2036      	movs	r0, #54	; 0x36
        p->curr = fromBridge;
     41a:	fb00 3301 	mla	r3, r0, r1, r3
     41e:	4423      	add	r3, r4
     420:	48b0      	ldr	r0, [pc, #704]	; (6e4 <audioInitAdditive+0x2e4>)
     422:	eb00 0383 	add.w	r3, r0, r3, lsl #2
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     426:	ed93 7a00 	vldr	s14, [r3]
     42a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
  return status;
     42e:	4410      	add	r0, r2
     430:	4bad      	ldr	r3, [pc, #692]	; (6e8 <audioInitAdditive+0x2e8>)
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     432:	eb03 0380 	add.w	r3, r3, r0, lsl #2
     436:	edd3 7a00 	vldr	s15, [r3]
     43a:	ee77 7a87 	vadd.f32	s15, s15, s14
     43e:	edc3 7a00 	vstr	s15, [r3]
  return status;
     442:	3201      	adds	r2, #1
    return HAL_ERROR;
     444:	2a02      	cmp	r2, #2
     446:	dde4      	ble.n	412 <audioInitAdditive+0x12>
     448:	3101      	adds	r1, #1
     44a:	2902      	cmp	r1, #2
     44c:	dc01      	bgt.n	452 <audioInitAdditive+0x52>
     44e:	2200      	movs	r2, #0
    collector->_first_period = 0.01f;
}

static inline Lfloat sub_collector_period_of(_sub_collector* collector, _auto_correlation_info info)
{
    tZeroCrossingInfo first = tZeroCrossingCollector_getCrossing(&collector->_zc, info._i1);
     450:	e7f8      	b.n	444 <audioInitAdditive+0x44>
     452:	3401      	adds	r4, #1
     454:	2c0f      	cmp	r4, #15
     456:	dc18      	bgt.n	48a <audioInitAdditive+0x8a>
    tZeroCrossingInfo next = tZeroCrossingCollector_getCrossing(&collector->_zc, info._i2);
     458:	4ba4      	ldr	r3, [pc, #656]	; (6ec <audioInitAdditive+0x2ec>)
     45a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     45e:	ed93 7a00 	vldr	s14, [r3]
    return tZeroCrossingInfo_fractionalPeriod(&first, &next);
     462:	4ba3      	ldr	r3, [pc, #652]	; (6f0 <audioInitAdditive+0x2f0>)
     464:	edd3 7a00 	vldr	s15, [r3]
     468:	ee77 7a87 	vadd.f32	s15, s15, s14

static inline void sub_collector_save(_sub_collector* collector, _auto_correlation_info info)
{
    collector->_fundamental = info;
    collector->_fundamental._harmonic = 1;
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     46c:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i != n - 1; ++i)
     470:	4aa0      	ldr	r2, [pc, #640]	; (6f4 <audioInitAdditive+0x2f4>)
     472:	eb02 0284 	add.w	r2, r2, r4, lsl #2
     476:	ed92 7a00 	vldr	s14, [r2]
     47a:	edd3 7a01 	vldr	s15, [r3, #4]
     47e:	ee77 7a87 	vadd.f32	s15, s15, s14
            tZeroCrossingInfo curr = tZeroCrossingCollector_getCrossing(&p->_zc, i);
     482:	edc3 7a01 	vstr	s15, [r3, #4]
     486:	2100      	movs	r1, #0
     488:	e7df      	b.n	44a <audioInitAdditive+0x4a>
     48a:	2000      	movs	r0, #0
            if (curr->_peak >= threshold)
     48c:	e014      	b.n	4b8 <audioInitAdditive+0xb8>
     48e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
     492:	4413      	add	r3, r2
     494:	4994      	ldr	r1, [pc, #592]	; (6e8 <audioInitAdditive+0x2e8>)
     496:	eb01 0183 	add.w	r1, r1, r3, lsl #2
                for (int j = i + 1; j != n; ++j)
     49a:	ed91 7a00 	vldr	s14, [r1]
     49e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
        result->period = sub_collector_period_of(collector, info) / info._harmonic;
        result->periodicity = info._periodicity;
    }
    else
    {
        result->period = -1.0f;
     4a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
        result->period = 0.0f;
     4a6:	4994      	ldr	r1, [pc, #592]	; (6f8 <audioInitAdditive+0x2f8>)
     4a8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
     4ac:	edc3 7a00 	vstr	s15, [r3]
		if (fmt == FS_FAT32) {
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
			mem_set(buf, 0, ss);
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
     4b0:	3201      	adds	r2, #1
     4b2:	2a02      	cmp	r2, #2
     4b4:	ddeb      	ble.n	48e <audioInitAdditive+0x8e>
     4b6:	3001      	adds	r0, #1
     4b8:	2802      	cmp	r0, #2
     4ba:	dc01      	bgt.n	4c0 <audioInitAdditive+0xc0>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
     4bc:	2200      	movs	r2, #0
     4be:	e7f8      	b.n	4b2 <audioInitAdditive+0xb2>
     4c0:	4a8b      	ldr	r2, [pc, #556]	; (6f0 <audioInitAdditive+0x2f0>)
     4c2:	ed92 7a00 	vldr	s14, [r2]
     4c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			st_word(buf + BS_55AA, 0xAA55);
     4ca:	ee87 6a87 	vdiv.f32	s12, s15, s14
     4ce:	4b8b      	ldr	r3, [pc, #556]	; (6fc <audioInitAdditive+0x2fc>)
     4d0:	ed83 6a00 	vstr	s12, [r3]
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
     4d4:	ed92 7a01 	vldr	s14, [r2, #4]
     4d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
     4dc:	edc3 6a01 	vstr	s13, [r3, #4]
     4e0:	2400      	movs	r4, #0
     4e2:	e020      	b.n	526 <audioInitAdditive+0x126>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
     4e4:	eb00 0140 	add.w	r1, r0, r0, lsl #1
     4e8:	4411      	add	r1, r2
     4ea:	4b83      	ldr	r3, [pc, #524]	; (6f8 <audioInitAdditive+0x2f8>)
     4ec:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     4f0:	ed93 7a00 	vldr	s14, [r3]

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
			if (fmt == FS_FAT32) {
     4f4:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
     4f8:	004b      	lsls	r3, r1, #1
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
     4fa:	2136      	movs	r1, #54	; 0x36
     4fc:	fb01 3300 	mla	r3, r1, r0, r3
     500:	4423      	add	r3, r4
     502:	4978      	ldr	r1, [pc, #480]	; (6e4 <audioInitAdditive+0x2e4>)
     504:	eb01 0383 	add.w	r3, r1, r3, lsl #2
     508:	edd3 7a00 	vldr	s15, [r3]
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
     50c:	ee67 7a87 	vmul.f32	s15, s15, s14
     510:	edc3 7a00 	vstr	s15, [r3]
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
     514:	3201      	adds	r2, #1
     516:	2a02      	cmp	r2, #2
     518:	dde4      	ble.n	4e4 <audioInitAdditive+0xe4>
     51a:	3001      	adds	r0, #1
     51c:	2802      	cmp	r0, #2
     51e:	dc01      	bgt.n	524 <audioInitAdditive+0x124>
     520:	2200      	movs	r2, #0
     522:	e7f8      	b.n	516 <audioInitAdditive+0x116>
     524:	3401      	adds	r4, #1
				mem_set(buf, 0, ss);
     526:	2c0f      	cmp	r4, #15
     528:	dc13      	bgt.n	552 <audioInitAdditive+0x152>
     52a:	4b70      	ldr	r3, [pc, #448]	; (6ec <audioInitAdditive+0x2ec>)
     52c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     530:	edd3 7a00 	vldr	s15, [r3]
				sect += n; nsect -= n;
			} while (nsect);
     534:	ee66 7a27 	vmul.f32	s15, s12, s15
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
     538:	edc3 7a00 	vstr	s15, [r3]
     53c:	4b6d      	ldr	r3, [pc, #436]	; (6f4 <audioInitAdditive+0x2f4>)
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
     53e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     542:	edd3 7a00 	vldr	s15, [r3]
     546:	ee66 7aa7 	vmul.f32	s15, s13, s15
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
     54a:	edc3 7a00 	vstr	s15, [r3]
     54e:	2000      	movs	r0, #0
     550:	e7e4      	b.n	51c <audioInitAdditive+0x11c>
     552:	f04f 0c00 	mov.w	ip, #0
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
     556:	e052      	b.n	5fe <audioInitAdditive+0x1fe>
     558:	1c58      	adds	r0, r3, #1
     55a:	4a69      	ldr	r2, [pc, #420]	; (700 <audioInitAdditive+0x300>)
     55c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
     560:	eb04 0e00 	add.w	lr, r4, r0
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
     564:	eb02 0e8e 	add.w	lr, r2, lr, lsl #2
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
     568:	edde 6a00 	vldr	s13, [lr]
     56c:	441c      	add	r4, r3
     56e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
     572:	edd2 7a00 	vldr	s15, [r2]
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
     576:	ee76 6ae7 	vsub.f32	s13, s13, s15
     57a:	4c62      	ldr	r4, [pc, #392]	; (704 <audioInitAdditive+0x304>)
     57c:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
     580:	006a      	lsls	r2, r5, #1
     582:	f04f 0e36 	mov.w	lr, #54	; 0x36
     586:	fb0e fe01 	mul.w	lr, lr, r1
     58a:	4472      	add	r2, lr
     58c:	4462      	add	r2, ip
     58e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
     592:	ed92 7a00 	vldr	s14, [r2]
			mem_set(buf, 0, ss);
     596:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
     59a:	ee85 6a87 	vdiv.f32	s12, s11, s14
     59e:	eb03 05c3 	add.w	r5, r3, r3, lsl #3
     5a2:	006a      	lsls	r2, r5, #1
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
     5a4:	4472      	add	r2, lr
     5a6:	4462      	add	r2, ip
     5a8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
     5ac:	ed94 5a00 	vldr	s10, [r4]
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
			pte[PTE_Boot] = 0;					/* Boot indicator */
     5b0:	ee85 7a85 	vdiv.f32	s14, s11, s10
     5b4:	ee36 6a47 	vsub.f32	s12, s12, s14
			pte[PTE_StHead] = 1;				/* Start head */
     5b8:	eec6 5a26 	vdiv.f32	s11, s12, s13
			pte[PTE_StSec] = 1;					/* Start sector */
     5bc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
			pte[PTE_StCyl] = 0;					/* Start cylinder */
     5c0:	eb0c 1303 	add.w	r3, ip, r3, lsl #4
			pte[PTE_System] = sys;				/* System type */
     5c4:	4a50      	ldr	r2, [pc, #320]	; (708 <audioInitAdditive+0x308>)
     5c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
     5ca:	edc2 5a00 	vstr	s11, [r2]
     5ce:	ee67 7aa5 	vmul.f32	s15, s15, s11
     5d2:	4a4e      	ldr	r2, [pc, #312]	; (70c <audioInitAdditive+0x30c>)
			pte[PTE_EdHead] = 254;				/* End head */
     5d4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
     5d8:	edc2 7a00 	vstr	s15, [r2]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
     5dc:	ee37 7a67 	vsub.f32	s14, s14, s15
     5e0:	4a4b      	ldr	r2, [pc, #300]	; (710 <audioInitAdditive+0x310>)
     5e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
     5e6:	ed83 7a00 	vstr	s14, [r3]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
     5ea:	4603      	mov	r3, r0
     5ec:	2b01      	cmp	r3, #1
     5ee:	ddb3      	ble.n	558 <audioInitAdditive+0x158>
     5f0:	3101      	adds	r1, #1
     5f2:	2902      	cmp	r1, #2
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
     5f4:	dc01      	bgt.n	5fa <audioInitAdditive+0x1fa>
     5f6:	2300      	movs	r3, #0
     5f8:	e7f8      	b.n	5ec <audioInitAdditive+0x1ec>
     5fa:	f10c 0c01 	add.w	ip, ip, #1
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     5fe:	f1bc 0f0f 	cmp.w	ip, #15
     602:	dc2c      	bgt.n	65e <audioInitAdditive+0x25e>
     604:	4b43      	ldr	r3, [pc, #268]	; (714 <audioInitAdditive+0x314>)
     606:	eb03 038c 	add.w	r3, r3, ip, lsl #2
     60a:	ed93 7a00 	vldr	s14, [r3]
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
     60e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     612:	eec6 7a87 	vdiv.f32	s15, s13, s14
     616:	4b40      	ldr	r3, [pc, #256]	; (718 <audioInitAdditive+0x318>)
     618:	eb03 038c 	add.w	r3, r3, ip, lsl #2
				sys = 0x06;	/* FAT12/16 (>=64KS) */
     61c:	ed93 6a00 	vldr	s12, [r3]
	if (vol < 0) return FR_INVALID_DRIVE;
     620:	ee86 7a86 	vdiv.f32	s14, s13, s12
	if (stat & STA_NOINIT) return FR_NOT_READY;
     624:	ee77 7ac7 	vsub.f32	s15, s15, s14
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
     628:	eddf 6a3c 	vldr	s13, [pc, #240]	; 71c <audioInitAdditive+0x31c>

	return FR_OK;
}
     62c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
     630:	4b3b      	ldr	r3, [pc, #236]	; (720 <audioInitAdditive+0x320>)
     632:	eb03 038c 	add.w	r3, r3, ip, lsl #2
     636:	edc3 7a00 	vstr	s15, [r3]
     63a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 724 <audioInitAdditive+0x324>
	if (!szb_buf) return FR_MKFS_ABORTED;
     63e:	ee67 7aa6 	vmul.f32	s15, s15, s13
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
     642:	4b39      	ldr	r3, [pc, #228]	; (728 <audioInitAdditive+0x328>)
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
     644:	eb03 038c 	add.w	r3, r3, ip, lsl #2
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
     648:	edc3 7a00 	vstr	s15, [r3]
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
     64c:	ee37 7a67 	vsub.f32	s14, s14, s15
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
     650:	4b36      	ldr	r3, [pc, #216]	; (72c <audioInitAdditive+0x32c>)
     652:	eb03 038c 	add.w	r3, r3, ip, lsl #2
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
     656:	ed83 7a00 	vstr	s14, [r3]
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
     65a:	2100      	movs	r1, #0
					return FR_MKFS_ABORTED;
     65c:	e7c9      	b.n	5f2 <audioInitAdditive+0x1f2>
     65e:	2700      	movs	r7, #0
					return FR_MKFS_ABORTED;
     660:	e036      	b.n	6d0 <audioInitAdditive+0x2d0>
     662:	4e33      	ldr	r6, [pc, #204]	; (730 <audioInitAdditive+0x330>)
					return FR_MKFS_ABORTED;
     664:	eb04 1307 	add.w	r3, r4, r7, lsl #4
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
     668:	009d      	lsls	r5, r3, #2
     66a:	4631      	mov	r1, r6
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
     66c:	4831      	ldr	r0, [pc, #196]	; (734 <audioInitAdditive+0x334>)
     66e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
     672:	f009 f831 	bl	96d8 <__tCycle_init_veneer>
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
     676:	4b28      	ldr	r3, [pc, #160]	; (718 <audioInitAdditive+0x318>)
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
     678:	eb03 0384 	add.w	r3, r3, r4, lsl #2
                p += 1.0f;
     67c:	edd3 0a00 	vldr	s1, [r3]
                x = 0.5f - (p - b) * invB1;
     680:	ed9f 8a2d 	vldr	s16, [pc, #180]	; 738 <audioInitAdditive+0x338>
     684:	4633      	mov	r3, r6
     686:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     68a:	492c      	ldr	r1, [pc, #176]	; (73c <audioInitAdditive+0x33c>)
     68c:	eddf 1a2c 	vldr	s3, [pc, #176]	; 740 <audioInitAdditive+0x340>
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
     690:	eeb0 1a48 	vmov.f32	s2, s16
     694:	eddf 7a2b 	vldr	s15, [pc, #172]	; 744 <audioInitAdditive+0x344>
     698:	ee60 0aa7 	vmul.f32	s1, s1, s15
     69c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
     6a0:	4829      	ldr	r0, [pc, #164]	; (748 <audioInitAdditive+0x348>)
     6a2:	4428      	add	r0, r5
     6a4:	f008 ffd0 	bl	9648 <__tADSRT_init_veneer>
                k = 1;
     6a8:	4d28      	ldr	r5, [pc, #160]	; (74c <audioInitAdditive+0x34c>)
                x = -0.5f + p * invB;
     6aa:	eb05 0587 	add.w	r5, r5, r7, lsl #2
     6ae:	4631      	mov	r1, r6
     6b0:	eddf 0a27 	vldr	s1, [pc, #156]	; 750 <audioInitAdditive+0x350>
     6b4:	eeb0 0a48 	vmov.f32	s0, s16
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
     6b8:	4628      	mov	r0, r5
     6ba:	f008 ff71 	bl	95a0 <__tExpSmooth_init_veneer>
     6be:	eeb0 0a48 	vmov.f32	s0, s16
     6c2:	4628      	mov	r0, r5
     6c4:	f008 fed4 	bl	9470 <__tExpSmooth_setDest_veneer>
     6c8:	3401      	adds	r4, #1
     6ca:	2c0f      	cmp	r4, #15
     6cc:	ddc9      	ble.n	662 <audioInitAdditive+0x262>
     6ce:	3701      	adds	r7, #1
     6d0:	2f01      	cmp	r7, #1
     6d2:	dc01      	bgt.n	6d8 <audioInitAdditive+0x2d8>
     6d4:	2400      	movs	r4, #0
                k = 0;
     6d6:	e7f8      	b.n	6ca <audioInitAdditive+0x2ca>
     6d8:	ecbd 8b02 	vpop	{d8}
     6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    	sinPhase -= 1.0f;
     6de:	bf00      	nop
     6e0:	200012c0 	.word	0x200012c0
     6e4:	200003fc 	.word	0x200003fc
    while (sinPhase >= 1.0f)
     6e8:	20001354 	.word	0x20001354
     6ec:	200000c0 	.word	0x200000c0
     6f0:	2000134c 	.word	0x2000134c
     6f4:	20000108 	.word	0x20000108
    	sinPhase += 1.0f;
     6f8:	2000128c 	.word	0x2000128c
     6fc:	20001284 	.word	0x20001284
    while (sinPhase < 0.0f)
     700:	200003d8 	.word	0x200003d8
     704:	20000150 	.word	0x20000150
    Lfloat tempPhase = (sinPhase * 2048.0f);
     708:	20000e44 	.word	0x20000e44
     70c:	20000cc4 	.word	0x20000cc4
    idx = (uint32_t)tempPhase; //11 bit table
     710:	20000fc4 	.word	0x20000fc4
     714:	20000078 	.word	0x20000078
    tempFrac = tempPhase - idx;
     718:	20000030 	.word	0x20000030
     71c:	3b84a9fa 	.word	0x3b84a9fa
    samp0 = __leaf_table_sinewave[idx];
     720:	20001184 	.word	0x20001184
     724:	42f60000 	.word	0x42f60000
     728:	20001144 	.word	0x20001144
    idx = (idx + 1) & c->sineMask;
     72c:	200011c4 	.word	0x200011c4
     730:	20005484 	.word	0x20005484
    samp1 = __leaf_table_sinewave[idx];
     734:	20000bbc 	.word	0x20000bbc
     738:	00000000 	.word	0x00000000
    Lfloat sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
     73c:	200013a8 	.word	0x200013a8
     740:	43160000 	.word	0x43160000
     744:	447a0000 	.word	0x447a0000
     748:	20000c3c 	.word	0x20000c3c
     74c:	20001344 	.word	0x20001344
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
     750:	3a83126f 	.word	0x3a83126f
     754:	f3af 8000 	nop.w
     758:	f3af 8000 	nop.w
     75c:	f3af 8000 	nop.w

00000760 <audioFreeAdditive>:
     760:	4770      	bx	lr
     762:	bf00      	nop
     764:	f3af 8000 	nop.w
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
     768:	f3af 8000 	nop.w
     76c:	f3af 8000 	nop.w
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
     770:	f3af 8000 	nop.w
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
     774:	f3af 8000 	nop.w
     778:	f3af 8000 	nop.w
     77c:	f3af 8000 	nop.w

00000780 <audioSwitchToAdditive>:
     780:	b538      	push	{r3, r4, r5, lr}
     782:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
     786:	ed9f 0a20 	vldr	s0, [pc, #128]	; 808 <audioSwitchToAdditive+0x88>
     78a:	4820      	ldr	r0, [pc, #128]	; (80c <audioSwitchToAdditive+0x8c>)
     78c:	f008 fcf0 	bl	9170 <__tVZFilter_setFrequencyAndResonance_veneer>
     790:	eef0 0a04 	vmov.f32	s1, #4	; 0x40200000  2.5
     794:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 810 <audioSwitchToAdditive+0x90>
     798:	481e      	ldr	r0, [pc, #120]	; (814 <audioSwitchToAdditive+0x94>)
     79a:	f008 fce9 	bl	9170 <__tVZFilter_setFrequencyAndResonance_veneer>
     79e:	2400      	movs	r4, #0
     7a0:	e00b      	b.n	7ba <audioSwitchToAdditive+0x3a>
     7a2:	4b1d      	ldr	r3, [pc, #116]	; (818 <audioSwitchToAdditive+0x98>)
     7a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     7a8:	ed93 0a00 	vldr	s0, [r3]
     7ac:	4628      	mov	r0, r5
     7ae:	f008 ffab 	bl	9708 <__tExpSmooth_setValAndDest_veneer>
     7b2:	4b1a      	ldr	r3, [pc, #104]	; (81c <audioSwitchToAdditive+0x9c>)
     7b4:	2201      	movs	r2, #1
     7b6:	551a      	strb	r2, [r3, r4]
     7b8:	4414      	add	r4, r2
     7ba:	2c0b      	cmp	r4, #11
     7bc:	dc14      	bgt.n	7e8 <audioSwitchToAdditive+0x68>
     7be:	4d18      	ldr	r5, [pc, #96]	; (820 <audioSwitchToAdditive+0xa0>)
     7c0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
     7c4:	ed9f 0a17 	vldr	s0, [pc, #92]	; 824 <audioSwitchToAdditive+0xa4>
     7c8:	4628      	mov	r0, r5
     7ca:	f008 fed9 	bl	9580 <__tExpSmooth_setFactor_veneer>
     7ce:	4b16      	ldr	r3, [pc, #88]	; (828 <audioSwitchToAdditive+0xa8>)
     7d0:	681b      	ldr	r3, [r3, #0]
     7d2:	2b3d      	cmp	r3, #61	; 0x3d
     7d4:	d0e5      	beq.n	7a2 <audioSwitchToAdditive+0x22>
     7d6:	4b15      	ldr	r3, [pc, #84]	; (82c <audioSwitchToAdditive+0xac>)
     7d8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
     7dc:	ed93 0a00 	vldr	s0, [r3]
     7e0:	4628      	mov	r0, r5
     7e2:	f008 ff91 	bl	9708 <__tExpSmooth_setValAndDest_veneer>
     7e6:	e7e4      	b.n	7b2 <audioSwitchToAdditive+0x32>
     7e8:	2400      	movs	r4, #0
     7ea:	e007      	b.n	7fc <audioSwitchToAdditive+0x7c>
     7ec:	ed9f 0a10 	vldr	s0, [pc, #64]	; 830 <audioSwitchToAdditive+0xb0>
     7f0:	4810      	ldr	r0, [pc, #64]	; (834 <audioSwitchToAdditive+0xb4>)
     7f2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     7f6:	f008 fdcf 	bl	9398 <__tADSRT_setSustain_veneer>
     7fa:	3401      	adds	r4, #1
     7fc:	4b0e      	ldr	r3, [pc, #56]	; (838 <audioSwitchToAdditive+0xb8>)
     7fe:	781b      	ldrb	r3, [r3, #0]
     800:	42a3      	cmp	r3, r4
     802:	dcf3      	bgt.n	7ec <audioSwitchToAdditive+0x6c>
     804:	bd38      	pop	{r3, r4, r5, pc}
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
     806:	bf00      	nop
     808:	44dc0000 	.word	0x44dc0000
     80c:	200054e4 	.word	0x200054e4
     810:	42740000 	.word	0x42740000
     814:	200054e8 	.word	0x200054e8
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
     818:	20000000 	.word	0x20000000
     81c:	200053cc 	.word	0x200053cc
     820:	20005430 	.word	0x20005430
     824:	3a83126f 	.word	0x3a83126f
     828:	20014440 	.word	0x20014440
     82c:	200186f0 	.word	0x200186f0
    			c->numBLEPs--;
     830:	00000000 	.word	0x00000000
     834:	200053b4 	.word	0x200053b4
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
     838:	20000694 	.word	0x20000694
     83c:	f3af 8000 	nop.w

00000840 <audioTickAdditive>:
     840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
     844:	ed2d 8b0c 	vpush	{d8-d13}
     848:	2400      	movs	r4, #0
     84a:	2c0b      	cmp	r4, #11
     84c:	dc0b      	bgt.n	866 <audioTickAdditive+0x26>
     84e:	00a5      	lsls	r5, r4, #2
    	whichBLEP &= 63;
     850:	48a5      	ldr	r0, [pc, #660]	; (ae8 <audioTickAdditive+0x2a8>)
     852:	eb00 0084 	add.w	r0, r0, r4, lsl #2
     856:	f008 ff03 	bl	9660 <__tExpSmooth_tick_veneer>
     85a:	4ba4      	ldr	r3, [pc, #656]	; (aec <audioTickAdditive+0x2ac>)
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
     85c:	442b      	add	r3, r5
     85e:	ed83 0a00 	vstr	s0, [r3]
     862:	3401      	adds	r4, #1
     864:	e7f1      	b.n	84a <audioTickAdditive+0xa>
     866:	4ca2      	ldr	r4, [pc, #648]	; (af0 <audioTickAdditive+0x2b0>)
     868:	4620      	mov	r0, r4
     86a:	f008 fcf1 	bl	9250 <__tNoise_tick_veneer>
     86e:	48a1      	ldr	r0, [pc, #644]	; (af4 <audioTickAdditive+0x2b4>)
     870:	f008 fc86 	bl	9180 <__tVZFilter_tickEfficient_veneer>
     874:	eeb0 ba40 	vmov.f32	s22, s0
     878:	4620      	mov	r0, r4
     87a:	f008 fce9 	bl	9250 <__tNoise_tick_veneer>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
     87e:	489e      	ldr	r0, [pc, #632]	; (af8 <audioTickAdditive+0x2b8>)
     880:	f008 fc7e 	bl	9180 <__tVZFilter_tickEfficient_veneer>
     884:	ee3b ba00 	vadd.f32	s22, s22, s0
     888:	ee3b ba0b 	vadd.f32	s22, s22, s22
     88c:	4b97      	ldr	r3, [pc, #604]	; (aec <audioTickAdditive+0x2ac>)
     88e:	edd3 7a00 	vldr	s15, [r3]
     892:	ee67 8aa7 	vmul.f32	s17, s15, s15
     896:	ee68 8aa7 	vmul.f32	s17, s17, s15
     89a:	ee68 8aa7 	vmul.f32	s17, s17, s15
     89e:	eddf 7a97 	vldr	s15, [pc, #604]	; afc <audioTickAdditive+0x2bc>
     8a2:	ee68 8aa7 	vmul.f32	s17, s17, s15
     8a6:	ed93 aa04 	vldr	s20, [r3, #16]
     8aa:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
     8ae:	ee79 aa4a 	vsub.f32	s21, s18, s20
     8b2:	edd3 9a01 	vldr	s19, [r3, #4]
     8b6:	ee39 9a69 	vsub.f32	s18, s18, s19
     8ba:	4891      	ldr	r0, [pc, #580]	; (b00 <audioTickAdditive+0x2c0>)
     8bc:	f008 fed0 	bl	9660 <__tExpSmooth_tick_veneer>
     8c0:	eef0 ba40 	vmov.f32	s23, s0
     8c4:	2500      	movs	r5, #0
     8c6:	ed9f 8a8f 	vldr	s16, [pc, #572]	; b04 <audioTickAdditive+0x2c4>
     8ca:	e072      	b.n	9b2 <audioTickAdditive+0x172>
     8cc:	eb04 1305 	add.w	r3, r4, r5, lsl #4
     8d0:	ea4f 0883 	mov.w	r8, r3, lsl #2
     8d4:	488c      	ldr	r0, [pc, #560]	; (b08 <audioTickAdditive+0x2c8>)
     8d6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     8da:	f008 fd59 	bl	9390 <__tADSRT_tick_veneer>
     8de:	eef0 ca40 	vmov.f32	s25, s0
     8e2:	00af      	lsls	r7, r5, #2
     8e4:	4b89      	ldr	r3, [pc, #548]	; (b0c <audioTickAdditive+0x2cc>)
     8e6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     8ea:	edd3 7a00 	vldr	s15, [r3]
     8ee:	1c66      	adds	r6, r4, #1
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
     8f0:	ee07 6a10 	vmov	s14, r6
     8f4:	eeb8 cac7 	vcvt.f32.s32	s24, s14
     8f8:	ee2c ca27 	vmul.f32	s24, s24, s15
     8fc:	ee07 4a90 	vmov	s15, r4
     900:	eef8 dae7 	vcvt.f32.s32	s27, s15
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
     904:	ee6d 7aa8 	vmul.f32	s15, s27, s17
     908:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
     90c:	ee77 7a8d 	vadd.f32	s15, s15, s26
     910:	ee2c ca27 	vmul.f32	s24, s24, s15
     914:	eddf 0a7e 	vldr	s1, [pc, #504]	; b10 <audioTickAdditive+0x2d0>
    			c->numBLEPs--;
     918:	ee7c 0a60 	vsub.f32	s1, s24, s1
     91c:	eddf 7a7d 	vldr	s15, [pc, #500]	; b14 <audioTickAdditive+0x2d4>
     920:	ee60 0aa7 	vmul.f32	s1, s1, s15
    z += 0.5f * (c->_f[j] - z);
     924:	eeb0 1a4d 	vmov.f32	s2, s26
     928:	ee7d 0a60 	vsub.f32	s1, s26, s1
     92c:	ed9f 0a75 	vldr	s0, [pc, #468]	; b04 <audioTickAdditive+0x2c4>
     930:	f008 fc12 	bl	9158 <__LEAF_clip_veneer>
     934:	4c78      	ldr	r4, [pc, #480]	; (b18 <audioTickAdditive+0x2d8>)
     936:	4444      	add	r4, r8
     938:	eeb0 0a4c 	vmov.f32	s0, s24
     93c:	4620      	mov	r0, r4
     93e:	f008 fc63 	bl	9208 <__tCycle_setFreq_veneer>
    j = (j+1) & 7;
     942:	4b76      	ldr	r3, [pc, #472]	; (b1c <audioTickAdditive+0x2dc>)
     944:	edd3 7a00 	vldr	s15, [r3]
    c->out = z;
     948:	ee6d 7aa7 	vmul.f32	s15, s27, s15
    c->_p = p;
     94c:	ee3d 1a67 	vsub.f32	s2, s26, s15
    c->_w = w;
     950:	ee69 7aa7 	vmul.f32	s15, s19, s15
    c->_b = b;
     954:	ee29 1a01 	vmul.f32	s2, s18, s2
    c->_z = z;
     958:	ee37 da81 	vadd.f32	s26, s15, s2
    c->_k = k;
     95c:	4b70      	ldr	r3, [pc, #448]	; (b20 <audioTickAdditive+0x2e0>)
    c->_sinPhase = sinPhase;
     95e:	4443      	add	r3, r8
     960:	ed93 7a00 	vldr	s14, [r3]
}
     964:	ee27 7a0d 	vmul.f32	s14, s14, s26
     968:	4b6e      	ldr	r3, [pc, #440]	; (b24 <audioTickAdditive+0x2e4>)
     96a:	443b      	add	r3, r7
     96c:	edd3 7a00 	vldr	s15, [r3]
     970:	ee77 7a87 	vadd.f32	s15, s15, s14
     974:	edc3 7a00 	vstr	s15, [r3]
     978:	4b6b      	ldr	r3, [pc, #428]	; (b28 <audioTickAdditive+0x2e8>)
     97a:	4443      	add	r3, r8
			tCycle_setFreq(&additive[i][j], tempFreq);
			float upRamp = (j * invNumOvertones);
			float downRamp = 1.0f - (j * invNumOvertones);
			float freqWeight = (upRamp * freqWeightKnob) + (downRamp * oneMinusFreqWeightKnob);
			gainSum[i] += freqWeight * finalGains[i][j];
			float thisWeight = oneMinusPickup + pickupWeights[i][j] * pickup;
     97c:	ed93 ca00 	vldr	s24, [r3]
     980:	ee2a ca0c 	vmul.f32	s24, s20, s24
     984:	ee3c ca2a 	vadd.f32	s24, s24, s21
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv * thisWeight * freqWeight * invGainSum[i];
     988:	4620      	mov	r0, r4
     98a:	f008 fea9 	bl	96e0 <__tCycle_tick_veneer>
     98e:	ee60 7a2c 	vmul.f32	s15, s0, s25
     992:	ee67 7a8c 	vmul.f32	s15, s15, s24
     996:	ee67 7a8d 	vmul.f32	s15, s15, s26
     99a:	4b64      	ldr	r3, [pc, #400]	; (b2c <audioTickAdditive+0x2ec>)
     99c:	443b      	add	r3, r7
     99e:	ed93 7a00 	vldr	s14, [r3]
     9a2:	ee67 7a87 	vmul.f32	s15, s15, s14
     9a6:	ee38 8a27 	vadd.f32	s16, s16, s15
		for (int j = 0; j < NUM_OVERTONES; j++)
     9aa:	4634      	mov	r4, r6
     9ac:	2c0f      	cmp	r4, #15
     9ae:	dd8d      	ble.n	8cc <audioTickAdditive+0x8c>
	for (int i = 0; i < numStringsThisBoard; i++)
     9b0:	3501      	adds	r5, #1
     9b2:	4b5f      	ldr	r3, [pc, #380]	; (b30 <audioTickAdditive+0x2f0>)
     9b4:	781b      	ldrb	r3, [r3, #0]
     9b6:	42ab      	cmp	r3, r5
     9b8:	dd5d      	ble.n	a76 <audioTickAdditive+0x236>
		float thisTension = tExpSmooth_tick(&tensionAdd[i]);
     9ba:	00ac      	lsls	r4, r5, #2
     9bc:	4e5d      	ldr	r6, [pc, #372]	; (b34 <audioTickAdditive+0x2f4>)
     9be:	eb06 0685 	add.w	r6, r6, r5, lsl #2
     9c2:	4630      	mov	r0, r6
     9c4:	f008 fe4c 	bl	9660 <__tExpSmooth_tick_veneer>
		thisTension = knobScaled[5] * thisTension;
     9c8:	4f48      	ldr	r7, [pc, #288]	; (aec <audioTickAdditive+0x2ac>)
     9ca:	ed97 da05 	vldr	s26, [r7, #20]
     9ce:	ee2d da00 	vmul.f32	s26, s26, s0
		float tensionSpeed = (1.0f - knobScaled[6]);
     9d2:	edd7 7a06 	vldr	s15, [r7, #24]
     9d6:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
     9da:	ee7c 7ae7 	vsub.f32	s15, s25, s15
		tensionSpeed = tensionSpeed*tensionSpeed*tensionSpeed*tensionSpeed;
     9de:	ee27 0aa7 	vmul.f32	s0, s15, s15
     9e2:	ee20 0a27 	vmul.f32	s0, s0, s15
     9e6:	ee20 0a27 	vmul.f32	s0, s0, s15
		tExpSmooth_setFactor(&tensionAdd[i], 0.01f * tensionSpeed + 0.0001f);
     9ea:	eddf 7a53 	vldr	s15, [pc, #332]	; b38 <audioTickAdditive+0x2f8>
     9ee:	ee20 0a27 	vmul.f32	s0, s0, s15
     9f2:	eddf da52 	vldr	s27, [pc, #328]	; b3c <audioTickAdditive+0x2fc>
     9f6:	ee30 0a2d 	vadd.f32	s0, s0, s27
     9fa:	4630      	mov	r0, r6
     9fc:	f008 fdc0 	bl	9580 <__tExpSmooth_setFactor_veneer>
		float theMIDI = (stringMIDIPitches[i]+ stringOctave[i]) + thisTension;
     a00:	4b4f      	ldr	r3, [pc, #316]	; (b40 <audioTickAdditive+0x300>)
     a02:	4423      	add	r3, r4
     a04:	ed93 ca00 	vldr	s24, [r3]
     a08:	4b4e      	ldr	r3, [pc, #312]	; (b44 <audioTickAdditive+0x304>)
     a0a:	4423      	add	r3, r4
     a0c:	edd3 7a00 	vldr	s15, [r3]
     a10:	ee3c ca27 	vadd.f32	s24, s24, s15
     a14:	ee3c ca0d 	vadd.f32	s24, s24, s26
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     a18:	484b      	ldr	r0, [pc, #300]	; (b48 <audioTickAdditive+0x308>)
     a1a:	4420      	add	r0, r4
     a1c:	f008 fcb8 	bl	9390 <__tADSRT_tick_veneer>
		tempSamp += filtNoise * noiseEnv *  knobScaled[2];
     a20:	ee6b 7a00 	vmul.f32	s15, s22, s0
     a24:	ed97 7a02 	vldr	s14, [r7, #8]
     a28:	ee67 7a87 	vmul.f32	s15, s15, s14
     a2c:	ee38 8a27 	vadd.f32	s16, s16, s15
		stringFrequencies[i] = mtofTableLookup(theMIDI);
     a30:	eeb0 0a4c 	vmov.f32	s0, s24
     a34:	f008 fc9c 	bl	9370 <__mtofTableLookup_veneer>
     a38:	4b34      	ldr	r3, [pc, #208]	; (b0c <audioTickAdditive+0x2cc>)
     a3a:	4423      	add	r3, r4
     a3c:	ed83 0a00 	vstr	s0, [r3]
		invGainSum[i] = 1.0f;
     a40:	4b3a      	ldr	r3, [pc, #232]	; (b2c <audioTickAdditive+0x2ec>)
     a42:	4423      	add	r3, r4
     a44:	edc3 ca00 	vstr	s25, [r3]
		if(gainSum[i] > 0.0001f)
     a48:	4b36      	ldr	r3, [pc, #216]	; (b24 <audioTickAdditive+0x2e4>)
     a4a:	4423      	add	r3, r4
     a4c:	edd3 7a00 	vldr	s15, [r3]
     a50:	eef4 7aed 	vcmpe.f32	s15, s27
     a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a58:	dd06      	ble.n	a68 <audioTickAdditive+0x228>
			invGainSum[i] = 1.0f / gainSum[i];
     a5a:	ee8c 7aa7 	vdiv.f32	s14, s25, s15
     a5e:	4b33      	ldr	r3, [pc, #204]	; (b2c <audioTickAdditive+0x2ec>)
     a60:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     a64:	ed83 7a00 	vstr	s14, [r3]
		gainSum[i] = 0.0f;
     a68:	4b2e      	ldr	r3, [pc, #184]	; (b24 <audioTickAdditive+0x2e4>)
     a6a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     a6e:	2200      	movs	r2, #0
     a70:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < NUM_OVERTONES; j++)
     a72:	2400      	movs	r4, #0
     a74:	e79a      	b.n	9ac <audioTickAdditive+0x16c>
		}


	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
     a76:	eddf 7a35 	vldr	s15, [pc, #212]	; b4c <audioTickAdditive+0x30c>
     a7a:	ee6b 0aa7 	vmul.f32	s1, s23, s15
     a7e:	ed9f 0a34 	vldr	s0, [pc, #208]	; b50 <audioTickAdditive+0x310>
     a82:	ed9f 1a34 	vldr	s2, [pc, #208]	; b54 <audioTickAdditive+0x314>
     a86:	ee70 0a80 	vadd.f32	s1, s1, s0
     a8a:	f008 fb65 	bl	9158 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
     a8e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
     a92:	ee17 3a90 	vmov	r3, s15
	float alpha = volIdx-volIdxInt;
     a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     a9a:	ee30 7a67 	vsub.f32	s14, s0, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
     a9e:	1c59      	adds	r1, r3, #1
     aa0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
     aa4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     aa8:	ee77 7ac7 	vsub.f32	s15, s15, s14
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
     aac:	4a2a      	ldr	r2, [pc, #168]	; (b58 <audioTickAdditive+0x318>)
     aae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     ab2:	edd3 6a00 	vldr	s13, [r3]
     ab6:	ee66 6aa7 	vmul.f32	s13, s13, s15
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
     aba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
     abe:	edd2 7a00 	vldr	s15, [r2]
     ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
     ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
	tempSamp *= 0.5f;
     aca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
     ace:	ee28 8a07 	vmul.f32	s16, s16, s14
	tempSamp *= outVol;
     ad2:	ee67 7a88 	vmul.f32	s15, s15, s16
	tempSamp *= masterVolFromBrain;
     ad6:	4b21      	ldr	r3, [pc, #132]	; (b5c <audioTickAdditive+0x31c>)
     ad8:	ed93 0a00 	vldr	s0, [r3]
	return tempSamp;
}
     adc:	ee27 0a80 	vmul.f32	s0, s15, s0
     ae0:	ecbd 8b0c 	vpop	{d8-d13}
     ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     ae8:	20005430 	.word	0x20005430
     aec:	200053e0 	.word	0x200053e0
     af0:	200054dc 	.word	0x200054dc
     af4:	200054e4 	.word	0x200054e4
     af8:	200054e8 	.word	0x200054e8
     afc:	3e99999a 	.word	0x3e99999a
     b00:	2001444c 	.word	0x2001444c
     b04:	00000000 	.word	0x00000000
     b08:	20000c3c 	.word	0x20000c3c
     b0c:	200143cc 	.word	0x200143cc
     b10:	466a6000 	.word	0x466a6000
     b14:	3983126f 	.word	0x3983126f
     b18:	20000bbc 	.word	0x20000bbc
     b1c:	200012c0 	.word	0x200012c0
     b20:	20001204 	.word	0x20001204
     b24:	200012b0 	.word	0x200012b0
     b28:	200012c4 	.word	0x200012c4
     b2c:	200012b8 	.word	0x200012b8
     b30:	20000694 	.word	0x20000694
     b34:	20001344 	.word	0x20001344
     b38:	3c23d70a 	.word	0x3c23d70a
     b3c:	38d1b717 	.word	0x38d1b717
     b40:	20014414 	.word	0x20014414
     b44:	2001441c 	.word	0x2001441c
     b48:	200053b4 	.word	0x200053b4
     b4c:	42a00000 	.word	0x42a00000
     b50:	423c0000 	.word	0x423c0000
     b54:	42fe0000 	.word	0x42fe0000
     b58:	200006a0 	.word	0x200006a0
     b5c:	2000068c 	.word	0x2000068c

00000b60 <audioFrameAdditive>:
{
     b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b64:	ed2d 8b0c 	vpush	{d8-d13}
     b68:	b083      	sub	sp, #12
     b6a:	4604      	mov	r4, r0
	uint32_t tempCountFrame = DWT->CYCCNT;
     b6c:	4bb1      	ldr	r3, [pc, #708]	; (e34 <audioFrameAdditive+0x2d4>)
     b6e:	685b      	ldr	r3, [r3, #4]
     b70:	9300      	str	r3, [sp, #0]
	if (resetStringInputs)
     b72:	4bb1      	ldr	r3, [pc, #708]	; (e38 <audioFrameAdditive+0x2d8>)
     b74:	781b      	ldrb	r3, [r3, #0]
     b76:	b9db      	cbnz	r3, bb0 <audioFrameAdditive+0x50>
		for (int j = 0; j < NUM_OVERTONES; j++)
     b78:	2600      	movs	r6, #0
     b7a:	e03f      	b.n	bfc <audioFrameAdditive+0x9c>
				tADSRT_clear(&additiveEnv[i][j]);
     b7c:	eb05 1006 	add.w	r0, r5, r6, lsl #4
     b80:	4bae      	ldr	r3, [pc, #696]	; (e3c <audioFrameAdditive+0x2dc>)
     b82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     b86:	f008 fce7 	bl	9558 <__tADSRT_clear_veneer>
			for (int j = 0; j < NUM_OVERTONES; j++)
     b8a:	3501      	adds	r5, #1
     b8c:	2d0f      	cmp	r5, #15
     b8e:	ddf5      	ble.n	b7c <audioFrameAdditive+0x1c>
			tADSRT_clear(&fenvelopes[i]);
     b90:	48ab      	ldr	r0, [pc, #684]	; (e40 <audioFrameAdditive+0x2e0>)
     b92:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     b96:	f008 fcdf 	bl	9558 <__tADSRT_clear_veneer>
			previousStringInputs[i] = 0;
     b9a:	4baa      	ldr	r3, [pc, #680]	; (e44 <audioFrameAdditive+0x2e4>)
     b9c:	2200      	movs	r2, #0
     b9e:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     ba2:	3601      	adds	r6, #1
     ba4:	4ba8      	ldr	r3, [pc, #672]	; (e48 <audioFrameAdditive+0x2e8>)
     ba6:	781b      	ldrb	r3, [r3, #0]
     ba8:	42b3      	cmp	r3, r6
     baa:	dd03      	ble.n	bb4 <audioFrameAdditive+0x54>
			for (int j = 0; j < NUM_OVERTONES; j++)
     bac:	2500      	movs	r5, #0
     bae:	e7ed      	b.n	b8c <audioFrameAdditive+0x2c>
		for (int i = 0; i < numStringsThisBoard; i++)
     bb0:	2600      	movs	r6, #0
     bb2:	e7f7      	b.n	ba4 <audioFrameAdditive+0x44>
		resetStringInputs = 0;
     bb4:	4ba0      	ldr	r3, [pc, #640]	; (e38 <audioFrameAdditive+0x2d8>)
     bb6:	2200      	movs	r2, #0
     bb8:	701a      	strb	r2, [r3, #0]
		newPluck = 1;
     bba:	4ba4      	ldr	r3, [pc, #656]	; (e4c <audioFrameAdditive+0x2ec>)
     bbc:	2201      	movs	r2, #1
     bbe:	601a      	str	r2, [r3, #0]
     bc0:	e7da      	b.n	b78 <audioFrameAdditive+0x18>
			Lfloat x0 = additivePickupPos[i] * PI;
     bc2:	4ba3      	ldr	r3, [pc, #652]	; (e50 <audioFrameAdditive+0x2f0>)
     bc4:	eb03 0386 	add.w	r3, r3, r6, lsl #2
     bc8:	edd3 7a00 	vldr	s15, [r3]
     bcc:	ed9f 7aa1 	vldr	s14, [pc, #644]	; e54 <audioFrameAdditive+0x2f4>
     bd0:	ee67 7a87 	vmul.f32	s15, s15, s14
			pickupWeights[i][j] = arm_sin_f32((j + 1) * x0);
     bd4:	1c6f      	adds	r7, r5, #1
     bd6:	ee07 7a10 	vmov	s14, r7
     bda:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
     bde:	ee20 0a27 	vmul.f32	s0, s0, s15
     be2:	f008 fb49 	bl	9278 <__arm_sin_f32_veneer>
     be6:	eb05 1506 	add.w	r5, r5, r6, lsl #4
     bea:	4b9b      	ldr	r3, [pc, #620]	; (e58 <audioFrameAdditive+0x2f8>)
     bec:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     bf0:	ed83 0a00 	vstr	s0, [r3]
		for (int j = 0; j < NUM_OVERTONES; j++)
     bf4:	463d      	mov	r5, r7
     bf6:	2d0f      	cmp	r5, #15
     bf8:	dde3      	ble.n	bc2 <audioFrameAdditive+0x62>
	for (int i = 0; i < numStringsThisBoard; i++)
     bfa:	3601      	adds	r6, #1
     bfc:	4b92      	ldr	r3, [pc, #584]	; (e48 <audioFrameAdditive+0x2e8>)
     bfe:	781b      	ldrb	r3, [r3, #0]
     c00:	42b3      	cmp	r3, r6
     c02:	dd11      	ble.n	c28 <audioFrameAdditive+0xc8>
		additivePickupPos[i] = (knobScaled[3] * 0.4f) + 0.1f;
     c04:	4b95      	ldr	r3, [pc, #596]	; (e5c <audioFrameAdditive+0x2fc>)
     c06:	edd3 7a03 	vldr	s15, [r3, #12]
     c0a:	ed9f 7a95 	vldr	s14, [pc, #596]	; e60 <audioFrameAdditive+0x300>
     c0e:	ee67 7a87 	vmul.f32	s15, s15, s14
     c12:	ed9f 7a94 	vldr	s14, [pc, #592]	; e64 <audioFrameAdditive+0x304>
     c16:	ee77 7a87 	vadd.f32	s15, s15, s14
     c1a:	4b8d      	ldr	r3, [pc, #564]	; (e50 <audioFrameAdditive+0x2f0>)
     c1c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
     c20:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 0; j < NUM_OVERTONES; j++)
     c24:	2500      	movs	r5, #0
     c26:	e7e6      	b.n	bf6 <audioFrameAdditive+0x96>
	if (newPluck)
     c28:	4b88      	ldr	r3, [pc, #544]	; (e4c <audioFrameAdditive+0x2ec>)
     c2a:	681b      	ldr	r3, [r3, #0]
     c2c:	2b00      	cmp	r3, #0
     c2e:	f040 8318 	bne.w	1262 <audioFrameAdditive+0x702>
		for (int i = 0; i < numStringsThisBoard; i++)
     c32:	2500      	movs	r5, #0
     c34:	e32d      	b.n	1292 <audioFrameAdditive+0x732>
				float amplitz = stringInputs[i] * 0.000015259021897f;
     c36:	4b8c      	ldr	r3, [pc, #560]	; (e68 <audioFrameAdditive+0x308>)
     c38:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     c3c:	b29b      	uxth	r3, r3
     c3e:	ee0c 3a10 	vmov	s24, r3
     c42:	eeb8 cacc 	vcvt.f32.s32	s24, s24
     c46:	eddf 7a89 	vldr	s15, [pc, #548]	; e6c <audioFrameAdditive+0x30c>
     c4a:	ee2c ca27 	vmul.f32	s24, s24, s15
				tExpSmooth_setVal(&tensionAdd[i], amplitz);
     c4e:	00b5      	lsls	r5, r6, #2
     c50:	eeb0 0a4c 	vmov.f32	s0, s24
     c54:	4886      	ldr	r0, [pc, #536]	; (e70 <audioFrameAdditive+0x310>)
     c56:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     c5a:	f008 fa85 	bl	9168 <__tExpSmooth_setVal_veneer>
				stringOctave[i] = octave;
     c5e:	4f85      	ldr	r7, [pc, #532]	; (e74 <audioFrameAdditive+0x314>)
     c60:	442f      	add	r7, r5
     c62:	4b85      	ldr	r3, [pc, #532]	; (e78 <audioFrameAdditive+0x318>)
     c64:	681b      	ldr	r3, [r3, #0]
     c66:	603b      	str	r3, [r7, #0]
				tADSRT_setDecay(&fenvelopes[i], 50.0f);
     c68:	4b75      	ldr	r3, [pc, #468]	; (e40 <audioFrameAdditive+0x2e0>)
     c6a:	eb05 0803 	add.w	r8, r5, r3
     c6e:	ed9f 0a83 	vldr	s0, [pc, #524]	; e7c <audioFrameAdditive+0x31c>
     c72:	4640      	mov	r0, r8
     c74:	f008 fb80 	bl	9378 <__tADSRT_setDecay_veneer>
				tADSRT_on(&fenvelopes[i], amplitz);
     c78:	eeb0 0a4c 	vmov.f32	s0, s24
     c7c:	4640      	mov	r0, r8
     c7e:	f008 fd13 	bl	96a8 <__tADSRT_on_veneer>
				stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
     c82:	4b7f      	ldr	r3, [pc, #508]	; (e80 <audioFrameAdditive+0x320>)
     c84:	442b      	add	r3, r5
     c86:	ed93 0a00 	vldr	s0, [r3]
     c8a:	edd7 7a00 	vldr	s15, [r7]
     c8e:	ee30 0a27 	vadd.f32	s0, s0, s15
     c92:	f008 fb6d 	bl	9370 <__mtofTableLookup_veneer>
     c96:	4b7b      	ldr	r3, [pc, #492]	; (e84 <audioFrameAdditive+0x324>)
     c98:	442b      	add	r3, r5
     c9a:	ed83 0a00 	vstr	s0, [r3]
				int thisString = i + firstString;
     c9e:	4b7a      	ldr	r3, [pc, #488]	; (e88 <audioFrameAdditive+0x328>)
     ca0:	681b      	ldr	r3, [r3, #0]
     ca2:	199a      	adds	r2, r3, r6
     ca4:	9201      	str	r2, [sp, #4]
				float fakedFreq = stringFrequencies[i] * (((1.0f - knobScaled[11]) * 3.5f) + 0.5f);
     ca6:	4b6d      	ldr	r3, [pc, #436]	; (e5c <audioFrameAdditive+0x2fc>)
     ca8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
     cac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     cb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
     cb4:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
     cb8:	ee67 7a87 	vmul.f32	s15, s15, s14
     cbc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
     cc0:	ee77 7a87 	vadd.f32	s15, s15, s14
     cc4:	ee20 9a27 	vmul.f32	s18, s0, s15
				if (thisString < 6)
     cc8:	2a05      	cmp	r2, #5
     cca:	dc56      	bgt.n	d7a <audioFrameAdditive+0x21a>
					stringFade = (float)thisString * 0.2f;
     ccc:	ee07 2a90 	vmov	s15, r2
     cd0:	eef8 8ae7 	vcvt.f32.s32	s17, s15
     cd4:	eddf 7a6d 	vldr	s15, [pc, #436]	; e8c <audioFrameAdditive+0x32c>
     cd8:	ee68 8aa7 	vmul.f32	s17, s17, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
     cdc:	ed9f 8a6c 	vldr	s16, [pc, #432]	; e90 <audioFrameAdditive+0x330>
     ce0:	4d6c      	ldr	r5, [pc, #432]	; (e94 <audioFrameAdditive+0x334>)
     ce2:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
     ce6:	eef0 1a48 	vmov.f32	s3, s16
     cea:	ed95 1a08 	vldr	s2, [r5, #32]
     cee:	edd5 0a06 	vldr	s1, [r5, #24]
     cf2:	eeb0 0a49 	vmov.f32	s0, s18
     cf6:	f008 fc73 	bl	95e0 <__LEAF_map_veneer>
     cfa:	eef0 0a40 	vmov.f32	s1, s0
     cfe:	eddf 9a66 	vldr	s19, [pc, #408]	; e98 <audioFrameAdditive+0x338>
     d02:	eeb0 1a69 	vmov.f32	s2, s19
     d06:	eeb0 0a48 	vmov.f32	s0, s16
     d0a:	f008 fa25 	bl	9158 <__LEAF_clip_veneer>
     d0e:	eeb0 ba40 	vmov.f32	s22, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     d12:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
     d16:	eef0 1a48 	vmov.f32	s3, s16
     d1a:	ed95 1a05 	vldr	s2, [r5, #20]
     d1e:	edd5 0a03 	vldr	s1, [r5, #12]
     d22:	eeb0 0a49 	vmov.f32	s0, s18
     d26:	f008 fc5b 	bl	95e0 <__LEAF_map_veneer>
     d2a:	eef0 0a40 	vmov.f32	s1, s0
     d2e:	eeb0 1a69 	vmov.f32	s2, s19
     d32:	eeb0 0a48 	vmov.f32	s0, s16
     d36:	f008 fa0f 	bl	9158 <__LEAF_clip_veneer>
     d3a:	eef0 ba40 	vmov.f32	s23, s0
				float oneMinusStringFade = 1.0f - stringFade;
     d3e:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
     d42:	ee79 9ae8 	vsub.f32	s19, s19, s17
				int height1Int = floor(height1);
     d46:	eeb7 7aeb 	vcvt.f64.f32	d7, s23
     d4a:	febb 7b47 	vrintm.f64	d7, d7
     d4e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     d52:	ee17 aa90 	vmov	sl, s15
				float height1Float = height1 - height1Int;
     d56:	eef8 aae7 	vcvt.f32.s32	s21, s15
     d5a:	ee7b aaea 	vsub.f32	s21, s23, s21
				int height2Int = floor(height2);
     d5e:	eeb7 7acb 	vcvt.f64.f32	d7, s22
     d62:	febb 7b47 	vrintm.f64	d7, d7
     d66:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     d6a:	ee17 9a90 	vmov	r9, s15
				float height2Float = height2 - height2Int;
     d6e:	eeb8 aae7 	vcvt.f32.s32	s20, s15
     d72:	ee3b aa4a 	vsub.f32	s20, s22, s20
				for (int j = 0; j < NUM_OVERTONES; j++)
     d76:	2500      	movs	r5, #0
     d78:	e0db      	b.n	f32 <audioFrameAdditive+0x3d2>
					stringFade = (float)(thisString - 6.0f) * 0.2f;
     d7a:	eddd 7a01 	vldr	s15, [sp, #4]
     d7e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
     d82:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
     d86:	ee78 8ae7 	vsub.f32	s17, s17, s15
     d8a:	eddf 7a40 	vldr	s15, [pc, #256]	; e8c <audioFrameAdditive+0x32c>
     d8e:	ee68 8aa7 	vmul.f32	s17, s17, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     d92:	ed9f 8a3f 	vldr	s16, [pc, #252]	; e90 <audioFrameAdditive+0x330>
     d96:	4d3f      	ldr	r5, [pc, #252]	; (e94 <audioFrameAdditive+0x334>)
     d98:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
     d9c:	eef0 1a48 	vmov.f32	s3, s16
     da0:	ed95 1a05 	vldr	s2, [r5, #20]
     da4:	edd5 0a03 	vldr	s1, [r5, #12]
     da8:	eeb0 0a49 	vmov.f32	s0, s18
     dac:	f008 fc18 	bl	95e0 <__LEAF_map_veneer>
     db0:	eef0 0a40 	vmov.f32	s1, s0
     db4:	eddf 9a38 	vldr	s19, [pc, #224]	; e98 <audioFrameAdditive+0x338>
     db8:	eeb0 1a69 	vmov.f32	s2, s19
     dbc:	eeb0 0a48 	vmov.f32	s0, s16
     dc0:	f008 f9ca 	bl	9158 <__LEAF_clip_veneer>
     dc4:	eeb0 ba40 	vmov.f32	s22, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
     dc8:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
     dcc:	eef0 1a48 	vmov.f32	s3, s16
     dd0:	ed95 1a02 	vldr	s2, [r5, #8]
     dd4:	edd5 0a00 	vldr	s1, [r5]
     dd8:	eeb0 0a49 	vmov.f32	s0, s18
     ddc:	f008 fc00 	bl	95e0 <__LEAF_map_veneer>
     de0:	eef0 0a40 	vmov.f32	s1, s0
     de4:	eeb0 1a69 	vmov.f32	s2, s19
     de8:	eeb0 0a48 	vmov.f32	s0, s16
     dec:	f008 f9b4 	bl	9158 <__LEAF_clip_veneer>
     df0:	eef0 ba40 	vmov.f32	s23, s0
     df4:	e7a3      	b.n	d3e <audioFrameAdditive+0x1de>
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
     df6:	f105 0240 	add.w	r2, r5, #64	; 0x40
     dfa:	0097      	lsls	r7, r2, #2
     dfc:	4b27      	ldr	r3, [pc, #156]	; (e9c <audioFrameAdditive+0x33c>)
     dfe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     e02:	edd3 ca00 	vldr	s25, [r3]
     e06:	4b23      	ldr	r3, [pc, #140]	; (e94 <audioFrameAdditive+0x334>)
     e08:	ed93 1a07 	vldr	s2, [r3, #28]
     e0c:	eef0 0a49 	vmov.f32	s1, s18
     e10:	ed93 0a06 	vldr	s0, [r3, #24]
     e14:	f008 f9a0 	bl	9158 <__LEAF_clip_veneer>
     e18:	ee6c 7a80 	vmul.f32	s15, s25, s0
     e1c:	4b20      	ldr	r3, [pc, #128]	; (ea0 <audioFrameAdditive+0x340>)
     e1e:	443b      	add	r3, r7
     e20:	ed93 7a00 	vldr	s14, [r3]
     e24:	ee77 7a87 	vadd.f32	s15, s15, s14
     e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     e2c:	eec7 ca27 	vdiv.f32	s25, s14, s15
     e30:	e0ea      	b.n	1008 <audioFrameAdditive+0x4a8>
     e32:	bf00      	nop
     e34:	e0001000 	.word	0xe0001000
     e38:	20005968 	.word	0x20005968
     e3c:	20000c3c 	.word	0x20000c3c
     e40:	200053b4 	.word	0x200053b4
     e44:	20005550 	.word	0x20005550
     e48:	20000694 	.word	0x20000694
     e4c:	200054e0 	.word	0x200054e0
     e50:	20000cbc 	.word	0x20000cbc
     e54:	40490fdb 	.word	0x40490fdb
     e58:	200012c4 	.word	0x200012c4
     e5c:	200053e0 	.word	0x200053e0
     e60:	3ecccccd 	.word	0x3ecccccd
     e64:	3dcccccd 	.word	0x3dcccccd
     e68:	200143fc 	.word	0x200143fc
     e6c:	37800080 	.word	0x37800080
     e70:	20001344 	.word	0x20001344
     e74:	2001441c 	.word	0x2001441c
     e78:	200054ec 	.word	0x200054ec
     e7c:	42480000 	.word	0x42480000
     e80:	20014414 	.word	0x20014414
     e84:	200143cc 	.word	0x200143cc
     e88:	200053bc 	.word	0x200053bc
     e8c:	3e4ccccd 	.word	0x3e4ccccd
     e90:	00000000 	.word	0x00000000
     e94:	200003d8 	.word	0x200003d8
     e98:	3ffeb852 	.word	0x3ffeb852
     e9c:	20000e44 	.word	0x20000e44
     ea0:	20000fc4 	.word	0x20000fc4
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
     ea4:	f105 0220 	add.w	r2, r5, #32
     ea8:	0097      	lsls	r7, r2, #2
     eaa:	4bca      	ldr	r3, [pc, #808]	; (11d4 <audioFrameAdditive+0x674>)
     eac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     eb0:	ed93 da00 	vldr	s26, [r3]
     eb4:	4bc8      	ldr	r3, [pc, #800]	; (11d8 <audioFrameAdditive+0x678>)
     eb6:	ed93 1a04 	vldr	s2, [r3, #16]
     eba:	eef0 0a49 	vmov.f32	s1, s18
     ebe:	ed93 0a03 	vldr	s0, [r3, #12]
     ec2:	f008 f949 	bl	9158 <__LEAF_clip_veneer>
     ec6:	ee2d 7a00 	vmul.f32	s14, s26, s0
     eca:	4bc4      	ldr	r3, [pc, #784]	; (11dc <audioFrameAdditive+0x67c>)
     ecc:	443b      	add	r3, r7
     ece:	edd3 7a00 	vldr	s15, [r3]
     ed2:	ee37 7a27 	vadd.f32	s14, s14, s15
     ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
     ede:	ee67 7aa8 	vmul.f32	s15, s15, s17
     ee2:	ee2c 7aa9 	vmul.f32	s14, s25, s19
     ee6:	ee77 7a87 	vadd.f32	s15, s15, s14
					thisDecay *= 2000.0f * knobScaled[10];
     eea:	4bbd      	ldr	r3, [pc, #756]	; (11e0 <audioFrameAdditive+0x680>)
     eec:	ed93 0a0a 	vldr	s0, [r3, #40]	; 0x28
     ef0:	ed9f 7abc 	vldr	s14, [pc, #752]	; 11e4 <audioFrameAdditive+0x684>
     ef4:	ee20 0a07 	vmul.f32	s0, s0, s14
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * randomFactors[currentRandom]);
     ef8:	eb05 1306 	add.w	r3, r5, r6, lsl #4
     efc:	ea4f 0b83 	mov.w	fp, r3, lsl #2
     f00:	4ab9      	ldr	r2, [pc, #740]	; (11e8 <audioFrameAdditive+0x688>)
     f02:	eb02 0883 	add.w	r8, r2, r3, lsl #2
     f06:	ee20 0a27 	vmul.f32	s0, s0, s15
     f0a:	4640      	mov	r0, r8
     f0c:	f008 fa34 	bl	9378 <__tADSRT_setDecay_veneer>
					currentRandom++;
     f10:	4fb6      	ldr	r7, [pc, #728]	; (11ec <audioFrameAdditive+0x68c>)
     f12:	783b      	ldrb	r3, [r7, #0]
     f14:	3301      	adds	r3, #1
     f16:	703b      	strb	r3, [r7, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * thisGain);
     f18:	ee28 0a0c 	vmul.f32	s0, s16, s24
     f1c:	4640      	mov	r0, r8
     f1e:	f008 fbc3 	bl	96a8 <__tADSRT_on_veneer>
					finalGains[i][j] = thisGain;
     f22:	4bb3      	ldr	r3, [pc, #716]	; (11f0 <audioFrameAdditive+0x690>)
     f24:	445b      	add	r3, fp
     f26:	ed83 8a00 	vstr	s16, [r3]
					currentRandom++;
     f2a:	783b      	ldrb	r3, [r7, #0]
     f2c:	3301      	adds	r3, #1
     f2e:	703b      	strb	r3, [r7, #0]
				for (int j = 0; j < NUM_OVERTONES; j++)
     f30:	3501      	adds	r5, #1
     f32:	2d0f      	cmp	r5, #15
     f34:	f300 816f 	bgt.w	1216 <audioFrameAdditive+0x6b6>
					if (thisString < 6)
     f38:	9b01      	ldr	r3, [sp, #4]
     f3a:	2b05      	cmp	r3, #5
     f3c:	f300 808a 	bgt.w	1054 <audioFrameAdditive+0x4f4>
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
     f40:	4aac      	ldr	r2, [pc, #688]	; (11f4 <audioFrameAdditive+0x694>)
     f42:	eb0a 03ca 	add.w	r3, sl, sl, lsl #3
     f46:	eb05 0343 	add.w	r3, r5, r3, lsl #1
     f4a:	3336      	adds	r3, #54	; 0x36
     f4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f50:	ed93 8a00 	vldr	s16, [r3]
     f54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
     f58:	ee77 7a6a 	vsub.f32	s15, s14, s21
     f5c:	ee28 8a27 	vmul.f32	s16, s16, s15
     f60:	f10a 0301 	add.w	r3, sl, #1
     f64:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     f68:	eb05 0343 	add.w	r3, r5, r3, lsl #1
     f6c:	3336      	adds	r3, #54	; 0x36
     f6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f72:	edd3 7a00 	vldr	s15, [r3]
     f76:	ee67 7aaa 	vmul.f32	s15, s15, s21
     f7a:	ee38 8a27 	vadd.f32	s16, s16, s15
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
     f7e:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
     f82:	eb05 0343 	add.w	r3, r5, r3, lsl #1
     f86:	336c      	adds	r3, #108	; 0x6c
     f88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
     f8c:	edd3 7a00 	vldr	s15, [r3]
     f90:	ee77 6a4a 	vsub.f32	s13, s14, s20
     f94:	ee67 7aa6 	vmul.f32	s15, s15, s13
     f98:	f109 0301 	add.w	r3, r9, #1
     f9c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
     fa0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
     fa4:	336c      	adds	r3, #108	; 0x6c
     fa6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
     faa:	edd2 6a00 	vldr	s13, [r2]
     fae:	ee66 6a8a 	vmul.f32	s13, s13, s20
     fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);
     fb6:	ee28 8a88 	vmul.f32	s16, s17, s16
     fba:	ee69 7aa7 	vmul.f32	s15, s19, s15
     fbe:	ee38 8a27 	vadd.f32	s16, s16, s15
						if (height2 < 1.0f)
     fc2:	eeb4 bac7 	vcmpe.f32	s22, s14
     fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     fca:	f53f af14 	bmi.w	df6 <audioFrameAdditive+0x296>
							d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
     fce:	f105 0250 	add.w	r2, r5, #80	; 0x50
     fd2:	0097      	lsls	r7, r2, #2
     fd4:	4b7f      	ldr	r3, [pc, #508]	; (11d4 <audioFrameAdditive+0x674>)
     fd6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     fda:	edd3 ca00 	vldr	s25, [r3]
     fde:	4b7e      	ldr	r3, [pc, #504]	; (11d8 <audioFrameAdditive+0x678>)
     fe0:	ed93 1a08 	vldr	s2, [r3, #32]
     fe4:	eef0 0a49 	vmov.f32	s1, s18
     fe8:	ed93 0a07 	vldr	s0, [r3, #28]
     fec:	f008 f8b4 	bl	9158 <__LEAF_clip_veneer>
     ff0:	ee6c 7a80 	vmul.f32	s15, s25, s0
     ff4:	4b79      	ldr	r3, [pc, #484]	; (11dc <audioFrameAdditive+0x67c>)
     ff6:	443b      	add	r3, r7
     ff8:	ed93 7a00 	vldr	s14, [r3]
     ffc:	ee77 7a87 	vadd.f32	s15, s15, s14
    1000:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1004:	eec7 ca27 	vdiv.f32	s25, s14, s15
						if (height1 < 1.0f)
    1008:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    100c:	eef4 bae7 	vcmpe.f32	s23, s15
    1010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1014:	f53f af46 	bmi.w	ea4 <audioFrameAdditive+0x344>
							d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    1018:	f105 0230 	add.w	r2, r5, #48	; 0x30
    101c:	0097      	lsls	r7, r2, #2
    101e:	4b6d      	ldr	r3, [pc, #436]	; (11d4 <audioFrameAdditive+0x674>)
    1020:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1024:	ed93 da00 	vldr	s26, [r3]
    1028:	4b6b      	ldr	r3, [pc, #428]	; (11d8 <audioFrameAdditive+0x678>)
    102a:	ed93 1a05 	vldr	s2, [r3, #20]
    102e:	eef0 0a49 	vmov.f32	s1, s18
    1032:	ed93 0a04 	vldr	s0, [r3, #16]
    1036:	f008 f88f 	bl	9158 <__LEAF_clip_veneer>
    103a:	ee2d 7a00 	vmul.f32	s14, s26, s0
    103e:	4b67      	ldr	r3, [pc, #412]	; (11dc <audioFrameAdditive+0x67c>)
    1040:	443b      	add	r3, r7
    1042:	edd3 7a00 	vldr	s15, [r3]
    1046:	ee37 7a27 	vadd.f32	s14, s14, s15
    104a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    104e:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1052:	e744      	b.n	ede <audioFrameAdditive+0x37e>
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    1054:	4a67      	ldr	r2, [pc, #412]	; (11f4 <audioFrameAdditive+0x694>)
    1056:	eb0a 03ca 	add.w	r3, sl, sl, lsl #3
    105a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    105e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1062:	ed93 8a00 	vldr	s16, [r3]
    1066:	f10a 0301 	add.w	r3, sl, #1
    106a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    106e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    1072:	3336      	adds	r3, #54	; 0x36
    1074:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1078:	edd3 7a00 	vldr	s15, [r3]
    107c:	ee67 7aaa 	vmul.f32	s15, s15, s21
    1080:	ee38 8a27 	vadd.f32	s16, s16, s15
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    1084:	eb09 03c9 	add.w	r3, r9, r9, lsl #3
    1088:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    108c:	3336      	adds	r3, #54	; 0x36
    108e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1092:	edd3 7a00 	vldr	s15, [r3]
    1096:	f109 0301 	add.w	r3, r9, #1
    109a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    109e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    10a2:	336c      	adds	r3, #108	; 0x6c
    10a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    10a8:	ed92 7a00 	vldr	s14, [r2]
    10ac:	ee27 7a0a 	vmul.f32	s14, s14, s20
    10b0:	ee77 7a87 	vadd.f32	s15, s15, s14
						thisGain = (x1 * stringFade) + (x2 * oneMinusStringFade);
    10b4:	ee28 8a88 	vmul.f32	s16, s17, s16
    10b8:	ee69 7aa7 	vmul.f32	s15, s19, s15
    10bc:	ee38 8a27 	vadd.f32	s16, s16, s15
						if (height2 < 1.0f)
    10c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    10c4:	eeb4 bae7 	vcmpe.f32	s22, s15
    10c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    10cc:	d447      	bmi.n	115e <audioFrameAdditive+0x5fe>
							d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    10ce:	f105 0230 	add.w	r2, r5, #48	; 0x30
    10d2:	0097      	lsls	r7, r2, #2
    10d4:	4b3f      	ldr	r3, [pc, #252]	; (11d4 <audioFrameAdditive+0x674>)
    10d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    10da:	edd3 ca00 	vldr	s25, [r3]
    10de:	4b3e      	ldr	r3, [pc, #248]	; (11d8 <audioFrameAdditive+0x678>)
    10e0:	ed93 1a05 	vldr	s2, [r3, #20]
    10e4:	eef0 0a49 	vmov.f32	s1, s18
    10e8:	ed93 0a04 	vldr	s0, [r3, #16]
    10ec:	f008 f834 	bl	9158 <__LEAF_clip_veneer>
    10f0:	ee6c 7a80 	vmul.f32	s15, s25, s0
    10f4:	4b39      	ldr	r3, [pc, #228]	; (11dc <audioFrameAdditive+0x67c>)
    10f6:	443b      	add	r3, r7
    10f8:	ed93 7a00 	vldr	s14, [r3]
    10fc:	ee77 7a87 	vadd.f32	s15, s15, s14
    1100:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1104:	eec7 ca27 	vdiv.f32	s25, s14, s15
						if (height1 < 1.0f)
    1108:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    110c:	eef4 bae7 	vcmpe.f32	s23, s15
    1110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1114:	d441      	bmi.n	119a <audioFrameAdditive+0x63a>
							d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    1116:	f105 0210 	add.w	r2, r5, #16
    111a:	0097      	lsls	r7, r2, #2
    111c:	4b2d      	ldr	r3, [pc, #180]	; (11d4 <audioFrameAdditive+0x674>)
    111e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1122:	ed93 da00 	vldr	s26, [r3]
    1126:	4b2c      	ldr	r3, [pc, #176]	; (11d8 <audioFrameAdditive+0x678>)
    1128:	ed93 1a02 	vldr	s2, [r3, #8]
    112c:	eef0 0a49 	vmov.f32	s1, s18
    1130:	ed93 0a01 	vldr	s0, [r3, #4]
    1134:	f008 f810 	bl	9158 <__LEAF_clip_veneer>
    1138:	ee2d 7a00 	vmul.f32	s14, s26, s0
    113c:	4b27      	ldr	r3, [pc, #156]	; (11dc <audioFrameAdditive+0x67c>)
    113e:	443b      	add	r3, r7
    1140:	edd3 7a00 	vldr	s15, [r3]
    1144:	ee37 7a27 	vadd.f32	s14, s14, s15
    1148:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    114c:	eec6 7a87 	vdiv.f32	s15, s13, s14
						thisDecay = (d1 * stringFade) + (d2 * oneMinusStringFade);
    1150:	ee67 7aa8 	vmul.f32	s15, s15, s17
    1154:	ee2c 7aa9 	vmul.f32	s14, s25, s19
    1158:	ee77 7a87 	vadd.f32	s15, s15, s14
    115c:	e6c5      	b.n	eea <audioFrameAdditive+0x38a>
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    115e:	f105 0220 	add.w	r2, r5, #32
    1162:	0097      	lsls	r7, r2, #2
    1164:	4b1b      	ldr	r3, [pc, #108]	; (11d4 <audioFrameAdditive+0x674>)
    1166:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    116a:	edd3 ca00 	vldr	s25, [r3]
    116e:	4b1a      	ldr	r3, [pc, #104]	; (11d8 <audioFrameAdditive+0x678>)
    1170:	ed93 1a04 	vldr	s2, [r3, #16]
    1174:	eef0 0a49 	vmov.f32	s1, s18
    1178:	ed93 0a03 	vldr	s0, [r3, #12]
    117c:	f007 ffec 	bl	9158 <__LEAF_clip_veneer>
    1180:	ee6c 7a80 	vmul.f32	s15, s25, s0
    1184:	4b15      	ldr	r3, [pc, #84]	; (11dc <audioFrameAdditive+0x67c>)
    1186:	443b      	add	r3, r7
    1188:	ed93 7a00 	vldr	s14, [r3]
    118c:	ee77 7a87 	vadd.f32	s15, s15, s14
    1190:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1194:	eec7 ca27 	vdiv.f32	s25, s14, s15
    1198:	e7b6      	b.n	1108 <audioFrameAdditive+0x5a8>
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    119a:	00af      	lsls	r7, r5, #2
    119c:	4b0d      	ldr	r3, [pc, #52]	; (11d4 <audioFrameAdditive+0x674>)
    119e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    11a2:	ed93 da00 	vldr	s26, [r3]
    11a6:	4b0c      	ldr	r3, [pc, #48]	; (11d8 <audioFrameAdditive+0x678>)
    11a8:	ed93 1a01 	vldr	s2, [r3, #4]
    11ac:	eef0 0a49 	vmov.f32	s1, s18
    11b0:	ed93 0a00 	vldr	s0, [r3]
    11b4:	f007 ffd0 	bl	9158 <__LEAF_clip_veneer>
    11b8:	ee2d 7a00 	vmul.f32	s14, s26, s0
    11bc:	4b07      	ldr	r3, [pc, #28]	; (11dc <audioFrameAdditive+0x67c>)
    11be:	443b      	add	r3, r7
    11c0:	edd3 7a00 	vldr	s15, [r3]
    11c4:	ee37 7a27 	vadd.f32	s14, s14, s15
    11c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    11cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
    11d0:	e7be      	b.n	1150 <audioFrameAdditive+0x5f0>
    11d2:	bf00      	nop
    11d4:	20000e44 	.word	0x20000e44
    11d8:	200003d8 	.word	0x200003d8
    11dc:	20000fc4 	.word	0x20000fc4
    11e0:	200053e0 	.word	0x200053e0
    11e4:	44fa0000 	.word	0x44fa0000
    11e8:	20000c3c 	.word	0x20000c3c
    11ec:	200144fe 	.word	0x200144fe
    11f0:	20001204 	.word	0x20001204
    11f4:	200003fc 	.word	0x200003fc
					tADSRT_off(&additiveEnv[i][j]);
    11f8:	eb05 1006 	add.w	r0, r5, r6, lsl #4
    11fc:	4b37      	ldr	r3, [pc, #220]	; (12dc <audioFrameAdditive+0x77c>)
    11fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    1202:	f008 f845 	bl	9290 <__tADSRT_off_veneer>
				for (int j = 0; j < NUM_OVERTONES; j++)
    1206:	3501      	adds	r5, #1
    1208:	2d0f      	cmp	r5, #15
    120a:	ddf5      	ble.n	11f8 <audioFrameAdditive+0x698>
				tADSRT_off(&fenvelopes[i]);
    120c:	4834      	ldr	r0, [pc, #208]	; (12e0 <audioFrameAdditive+0x780>)
    120e:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    1212:	f008 f83d 	bl	9290 <__tADSRT_off_veneer>
			previousStringInputs[i] = stringInputs[i];
    1216:	4b33      	ldr	r3, [pc, #204]	; (12e4 <audioFrameAdditive+0x784>)
    1218:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
    121c:	b29b      	uxth	r3, r3
    121e:	4a32      	ldr	r2, [pc, #200]	; (12e8 <audioFrameAdditive+0x788>)
    1220:	f822 3016 	strh.w	r3, [r2, r6, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    1224:	3601      	adds	r6, #1
    1226:	4b31      	ldr	r3, [pc, #196]	; (12ec <audioFrameAdditive+0x78c>)
    1228:	781b      	ldrb	r3, [r3, #0]
    122a:	42b3      	cmp	r3, r6
    122c:	dd1b      	ble.n	1266 <audioFrameAdditive+0x706>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    122e:	4b2e      	ldr	r3, [pc, #184]	; (12e8 <audioFrameAdditive+0x788>)
    1230:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
    1234:	b29b      	uxth	r3, r3
    1236:	b933      	cbnz	r3, 1246 <audioFrameAdditive+0x6e6>
    1238:	4b2a      	ldr	r3, [pc, #168]	; (12e4 <audioFrameAdditive+0x784>)
    123a:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
    123e:	b29b      	uxth	r3, r3
    1240:	2b00      	cmp	r3, #0
    1242:	f47f acf8 	bne.w	c36 <audioFrameAdditive+0xd6>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    1246:	4b28      	ldr	r3, [pc, #160]	; (12e8 <audioFrameAdditive+0x788>)
    1248:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
    124c:	b29b      	uxth	r3, r3
    124e:	2b00      	cmp	r3, #0
    1250:	d0e1      	beq.n	1216 <audioFrameAdditive+0x6b6>
    1252:	4b24      	ldr	r3, [pc, #144]	; (12e4 <audioFrameAdditive+0x784>)
    1254:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
    1258:	b29b      	uxth	r3, r3
    125a:	2b00      	cmp	r3, #0
    125c:	d1db      	bne.n	1216 <audioFrameAdditive+0x6b6>
				for (int j = 0; j < NUM_OVERTONES; j++)
    125e:	2500      	movs	r5, #0
    1260:	e7d2      	b.n	1208 <audioFrameAdditive+0x6a8>
		for (int i = 0; i < numStringsThisBoard; i++)
    1262:	2600      	movs	r6, #0
    1264:	e7df      	b.n	1226 <audioFrameAdditive+0x6c6>
		newPluck = 0;
    1266:	4b22      	ldr	r3, [pc, #136]	; (12f0 <audioFrameAdditive+0x790>)
    1268:	2200      	movs	r2, #0
    126a:	601a      	str	r2, [r3, #0]
    126c:	e4e1      	b.n	c32 <audioFrameAdditive+0xd2>
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
    126e:	f7ff fae7 	bl	840 <audioTickAdditive>
    1272:	eddf 7a20 	vldr	s15, [pc, #128]	; 12f4 <audioFrameAdditive+0x794>
    1276:	ee20 0a27 	vmul.f32	s0, s0, s15
    127a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    127e:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i] = current_sample;
    1282:	1962      	adds	r2, r4, r5
    1284:	491c      	ldr	r1, [pc, #112]	; (12f8 <audioFrameAdditive+0x798>)
    1286:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    128a:	3201      	adds	r2, #1
    128c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    1290:	3502      	adds	r5, #2
    1292:	2d7f      	cmp	r5, #127	; 0x7f
    1294:	ddeb      	ble.n	126e <audioFrameAdditive+0x70e>
	if (switchStrings)
    1296:	4b19      	ldr	r3, [pc, #100]	; (12fc <audioFrameAdditive+0x79c>)
    1298:	681b      	ldr	r3, [r3, #0]
    129a:	b9cb      	cbnz	r3, 12d0 <audioFrameAdditive+0x770>
	switchStrings = 0;
    129c:	4b17      	ldr	r3, [pc, #92]	; (12fc <audioFrameAdditive+0x79c>)
    129e:	2200      	movs	r2, #0
    12a0:	601a      	str	r2, [r3, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    12a2:	4b17      	ldr	r3, [pc, #92]	; (1300 <audioFrameAdditive+0x7a0>)
    12a4:	685b      	ldr	r3, [r3, #4]
    12a6:	9a00      	ldr	r2, [sp, #0]
    12a8:	1a9b      	subs	r3, r3, r2
    12aa:	4a16      	ldr	r2, [pc, #88]	; (1304 <audioFrameAdditive+0x7a4>)
    12ac:	6013      	str	r3, [r2, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    12ae:	ee07 3a90 	vmov	s15, r3
    12b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    12b6:	4b14      	ldr	r3, [pc, #80]	; (1308 <audioFrameAdditive+0x7a8>)
    12b8:	ed93 7a00 	vldr	s14, [r3]
    12bc:	ee67 7a87 	vmul.f32	s15, s15, s14
    12c0:	4b12      	ldr	r3, [pc, #72]	; (130c <audioFrameAdditive+0x7ac>)
    12c2:	edc3 7a00 	vstr	s15, [r3]
}
    12c6:	b003      	add	sp, #12
    12c8:	ecbd 8b0c 	vpop	{d8-d13}
    12cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switchStringModel(switchStrings);
    12d0:	4b0a      	ldr	r3, [pc, #40]	; (12fc <audioFrameAdditive+0x79c>)
    12d2:	6818      	ldr	r0, [r3, #0]
    12d4:	f000 f8d4 	bl	1480 <switchStringModel>
    12d8:	e7e0      	b.n	129c <audioFrameAdditive+0x73c>
    12da:	bf00      	nop
    12dc:	20000c3c 	.word	0x20000c3c
    12e0:	200053b4 	.word	0x200053b4
    12e4:	200143fc 	.word	0x200143fc
    12e8:	20005550 	.word	0x20005550
    12ec:	20000694 	.word	0x20000694
    12f0:	200054e0 	.word	0x200054e0
    12f4:	4b000000 	.word	0x4b000000
    12f8:	30000000 	.word	0x30000000
    12fc:	20014434 	.word	0x20014434
    1300:	e0001000 	.word	0xe0001000
    1304:	20014438 	.word	0x20014438
    1308:	20000684 	.word	0x20000684
    130c:	200053c4 	.word	0x200053c4
	...

00001320 <updateStateFromSPIMessage>:


void __ATTR_ITCMRAM updateStateFromSPIMessage(uint8_t offset)
{
    1320:	b538      	push	{r3, r4, r5, lr}
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1322:	f100 0318 	add.w	r3, r0, #24
    1326:	4942      	ldr	r1, [pc, #264]	; (1430 <updateStateFromSPIMessage+0x110>)
    1328:	5ccb      	ldrb	r3, [r1, r3]

	octaveAction = (modeBit >> 6) & 1;
    132a:	f3c3 1480 	ubfx	r4, r3, #6, #1
    132e:	4a41      	ldr	r2, [pc, #260]	; (1434 <updateStateFromSPIMessage+0x114>)
    1330:	7014      	strb	r4, [r2, #0]
	dualSlider = (modeBit >> 5) & 1;
    1332:	f3c3 1540 	ubfx	r5, r3, #5, #1
    1336:	4c40      	ldr	r4, [pc, #256]	; (1438 <updateStateFromSPIMessage+0x118>)
    1338:	6025      	str	r5, [r4, #0]

	edit = (modeBit >> 4) & 1;
    133a:	f3c3 1500 	ubfx	r5, r3, #4, #1
    133e:	4c3f      	ldr	r4, [pc, #252]	; (143c <updateStateFromSPIMessage+0x11c>)
    1340:	6025      	str	r5, [r4, #0]
	voice = SPI_LEVERS_RX[25 + offset];
    1342:	f100 0419 	add.w	r4, r0, #25
    1346:	5d0c      	ldrb	r4, [r1, r4]
    1348:	493d      	ldr	r1, [pc, #244]	; (1440 <updateStateFromSPIMessage+0x120>)
    134a:	600c      	str	r4, [r1, #0]



	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    134c:	f003 030f 	and.w	r3, r3, #15
    1350:	3b05      	subs	r3, #5
    1352:	ee07 3a90 	vmov	s15, r3
    1356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    135a:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
    135e:	ee67 7a87 	vmul.f32	s15, s15, s14
    1362:	4b38      	ldr	r3, [pc, #224]	; (1444 <updateStateFromSPIMessage+0x124>)
    1364:	edc3 7a00 	vstr	s15, [r3]
	//if "octave action" is set to 1, then immediately change octave instead of waiting for new note
	if (octaveAction)
    1368:	7813      	ldrb	r3, [r2, #0]
    136a:	2b00      	cmp	r3, #0
    136c:	d15e      	bne.n	142c <updateStateFromSPIMessage+0x10c>
		{
			stringOctave[i] = octave;
		}
	}

	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    136e:	f100 031a 	add.w	r3, r0, #26
    1372:	4a2f      	ldr	r2, [pc, #188]	; (1430 <updateStateFromSPIMessage+0x110>)
    1374:	5cd1      	ldrb	r1, [r2, r3]
    1376:	f100 031b 	add.w	r3, r0, #27
    137a:	5cd3      	ldrb	r3, [r2, r3]
    137c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    1380:	b29b      	uxth	r3, r3
    1382:	4931      	ldr	r1, [pc, #196]	; (1448 <updateStateFromSPIMessage+0x128>)
    1384:	800b      	strh	r3, [r1, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    1386:	880b      	ldrh	r3, [r1, #0]
    1388:	b29b      	uxth	r3, r3
    138a:	ee00 3a10 	vmov	s0, r3
    138e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    1392:	eddf 7a2e 	vldr	s15, [pc, #184]	; 144c <updateStateFromSPIMessage+0x12c>
    1396:	ee20 0a27 	vmul.f32	s0, s0, s15
    139a:	4b2d      	ldr	r3, [pc, #180]	; (1450 <updateStateFromSPIMessage+0x130>)
    139c:	ed83 0a00 	vstr	s0, [r3]

	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    13a0:	f100 031c 	add.w	r3, r0, #28
    13a4:	f812 c003 	ldrb.w	ip, [r2, r3]
    13a8:	301d      	adds	r0, #29
    13aa:	5c11      	ldrb	r1, [r2, r0]
    13ac:	4b29      	ldr	r3, [pc, #164]	; (1454 <updateStateFromSPIMessage+0x134>)
    13ae:	781a      	ldrb	r2, [r3, #0]
    13b0:	b2d2      	uxtb	r2, r2
    13b2:	eb01 210c 	add.w	r1, r1, ip, lsl #8
    13b6:	4828      	ldr	r0, [pc, #160]	; (1458 <updateStateFromSPIMessage+0x138>)
    13b8:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    13bc:	781a      	ldrb	r2, [r3, #0]
    13be:	b2d2      	uxtb	r2, r2
    13c0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    13c4:	781b      	ldrb	r3, [r3, #0]
    13c6:	b2db      	uxtb	r3, r3
    13c8:	4924      	ldr	r1, [pc, #144]	; (145c <updateStateFromSPIMessage+0x13c>)
    13ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    13ce:	429a      	cmp	r2, r3
    13d0:	d01d      	beq.n	140e <updateStateFromSPIMessage+0xee>
	{
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    13d2:	4b20      	ldr	r3, [pc, #128]	; (1454 <updateStateFromSPIMessage+0x134>)
    13d4:	7819      	ldrb	r1, [r3, #0]
    13d6:	b2c9      	uxtb	r1, r1
    13d8:	781a      	ldrb	r2, [r3, #0]
    13da:	b2d2      	uxtb	r2, r2
    13dc:	4603      	mov	r3, r0
    13de:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    13e2:	491e      	ldr	r1, [pc, #120]	; (145c <updateStateFromSPIMessage+0x13c>)
    13e4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    13e8:	edd3 7a00 	vldr	s15, [r3]
    13ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    13f0:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 1460 <updateStateFromSPIMessage+0x140>
    13f4:	ee67 7a87 	vmul.f32	s15, s15, s14
    13f8:	4a1a      	ldr	r2, [pc, #104]	; (1464 <updateStateFromSPIMessage+0x144>)
    13fa:	edc2 7a00 	vstr	s15, [r2]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    13fe:	edd3 7a01 	vldr	s15, [r3, #4]
    1402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1406:	ee67 7a87 	vmul.f32	s15, s15, s14
    140a:	edc2 7a01 	vstr	s15, [r2, #4]
	}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    140e:	4816      	ldr	r0, [pc, #88]	; (1468 <updateStateFromSPIMessage+0x148>)
    1410:	f008 f82e 	bl	9470 <__tExpSmooth_setDest_veneer>
}
    1414:	bd38      	pop	{r3, r4, r5, pc}
			stringOctave[i] = octave;
    1416:	4a15      	ldr	r2, [pc, #84]	; (146c <updateStateFromSPIMessage+0x14c>)
    1418:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    141c:	edc2 7a00 	vstr	s15, [r2]
		for (int i = 0; i < numStringsThisBoard; i++)
    1420:	3301      	adds	r3, #1
    1422:	4a13      	ldr	r2, [pc, #76]	; (1470 <updateStateFromSPIMessage+0x150>)
    1424:	7812      	ldrb	r2, [r2, #0]
    1426:	429a      	cmp	r2, r3
    1428:	dcf5      	bgt.n	1416 <updateStateFromSPIMessage+0xf6>
    142a:	e7a0      	b.n	136e <updateStateFromSPIMessage+0x4e>
    142c:	2300      	movs	r3, #0
    142e:	e7f8      	b.n	1422 <updateStateFromSPIMessage+0x102>
    1430:	30000840 	.word	0x30000840
    1434:	200054f0 	.word	0x200054f0
    1438:	200053ac 	.word	0x200053ac
    143c:	200053b0 	.word	0x200053b0
    1440:	20014440 	.word	0x20014440
    1444:	200054ec 	.word	0x200054ec
    1448:	20014448 	.word	0x20014448
    144c:	39800801 	.word	0x39800801
    1450:	20014444 	.word	0x20014444
    1454:	20014450 	.word	0x20014450
    1458:	20014424 	.word	0x20014424
    145c:	2001442c 	.word	0x2001442c
    1460:	3b000000 	.word	0x3b000000
    1464:	20001384 	.word	0x20001384
    1468:	2001444c 	.word	0x2001444c
    146c:	2001441c 	.word	0x2001441c
    1470:	20000694 	.word	0x20000694
    1474:	f3af 8000 	nop.w
    1478:	f3af 8000 	nop.w
    147c:	f3af 8000 	nop.w

00001480 <switchStringModel>:




void __ATTR_ITCMRAM switchStringModel(int which)
{
    1480:	b508      	push	{r3, lr}
	if (which == 1)
    1482:	2801      	cmp	r0, #1
    1484:	d00d      	beq.n	14a2 <switchStringModel+0x22>
		audioFrameFunction = audioFrameString1;
		resetStringInputs = 1;
	}


	else if (which == 2)
    1486:	2802      	cmp	r0, #2
    1488:	d01c      	beq.n	14c4 <switchStringModel+0x44>
		}
		 audioSwitchToString2();
		audioFrameFunction = audioFrameString2;
		resetStringInputs = 1;
	}
	presetReady = 1;
    148a:	4b17      	ldr	r3, [pc, #92]	; (14e8 <switchStringModel+0x68>)
    148c:	2201      	movs	r2, #1
    148e:	601a      	str	r2, [r3, #0]
	diskBusy = 0;
    1490:	4b16      	ldr	r3, [pc, #88]	; (14ec <switchStringModel+0x6c>)
    1492:	2200      	movs	r2, #0
    1494:	701a      	strb	r2, [r3, #0]
	currentActivePreset = voice;
    1496:	4b16      	ldr	r3, [pc, #88]	; (14f0 <switchStringModel+0x70>)
    1498:	681b      	ldr	r3, [r3, #0]
    149a:	b2db      	uxtb	r3, r3
    149c:	4a15      	ldr	r2, [pc, #84]	; (14f4 <switchStringModel+0x74>)
    149e:	7013      	strb	r3, [r2, #0]

}
    14a0:	bd08      	pop	{r3, pc}
		if (whichStringModelLoaded != String1Loaded)
    14a2:	4b15      	ldr	r3, [pc, #84]	; (14f8 <switchStringModel+0x78>)
    14a4:	781b      	ldrb	r3, [r3, #0]
    14a6:	b943      	cbnz	r3, 14ba <switchStringModel+0x3a>
		 audioSwitchToString1();
    14a8:	f002 ffea 	bl	4480 <audioSwitchToString1>
		audioFrameFunction = audioFrameString1;
    14ac:	4b13      	ldr	r3, [pc, #76]	; (14fc <switchStringModel+0x7c>)
    14ae:	4a14      	ldr	r2, [pc, #80]	; (1500 <switchStringModel+0x80>)
    14b0:	601a      	str	r2, [r3, #0]
		resetStringInputs = 1;
    14b2:	4b14      	ldr	r3, [pc, #80]	; (1504 <switchStringModel+0x84>)
    14b4:	2201      	movs	r2, #1
    14b6:	701a      	strb	r2, [r3, #0]
    14b8:	e7e7      	b.n	148a <switchStringModel+0xa>
			audioFreeString2();
    14ba:	f003 faf1 	bl	4aa0 <audioFreeString2>
			audioInitString1();
    14be:	f002 ff4f 	bl	4360 <audioInitString1>
    14c2:	e7f1      	b.n	14a8 <switchStringModel+0x28>
		if (whichStringModelLoaded != String2Loaded)
    14c4:	4b0c      	ldr	r3, [pc, #48]	; (14f8 <switchStringModel+0x78>)
    14c6:	781b      	ldrb	r3, [r3, #0]
    14c8:	2b01      	cmp	r3, #1
    14ca:	d108      	bne.n	14de <switchStringModel+0x5e>
		 audioSwitchToString2();
    14cc:	f003 fb08 	bl	4ae0 <audioSwitchToString2>
		audioFrameFunction = audioFrameString2;
    14d0:	4b0a      	ldr	r3, [pc, #40]	; (14fc <switchStringModel+0x7c>)
    14d2:	4a0d      	ldr	r2, [pc, #52]	; (1508 <switchStringModel+0x88>)
    14d4:	601a      	str	r2, [r3, #0]
		resetStringInputs = 1;
    14d6:	4b0b      	ldr	r3, [pc, #44]	; (1504 <switchStringModel+0x84>)
    14d8:	2201      	movs	r2, #1
    14da:	701a      	strb	r2, [r3, #0]
    14dc:	e7d5      	b.n	148a <switchStringModel+0xa>
			audioFreeString1();
    14de:	f002 ffaf 	bl	4440 <audioFreeString1>
			audioInitString2();
    14e2:	f003 faad 	bl	4a40 <audioInitString2>
    14e6:	e7f1      	b.n	14cc <switchStringModel+0x4c>
    14e8:	20005544 	.word	0x20005544
    14ec:	20014538 	.word	0x20014538
    14f0:	20014440 	.word	0x20014440
    14f4:	200008ac 	.word	0x200008ac
    14f8:	20014451 	.word	0x20014451
    14fc:	20001380 	.word	0x20001380
    1500:	000047e1 	.word	0x000047e1
    1504:	20005968 	.word	0x20005968
    1508:	00005221 	.word	0x00005221
    150c:	f3af 8000 	nop.w
    1510:	f3af 8000 	nop.w
    1514:	f3af 8000 	nop.w
    1518:	f3af 8000 	nop.w
    151c:	f3af 8000 	nop.w

00001520 <audioFrameWaiting>:
{
}


void __ATTR_ITCMRAM audioFrameWaiting(uint16_t buffer_offset)
{
    1520:	b510      	push	{r4, lr}
    1522:	4684      	mov	ip, r0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
		uint32_t tempCountFrame = DWT->CYCCNT;
    1524:	4b16      	ldr	r3, [pc, #88]	; (1580 <audioFrameWaiting+0x60>)
    1526:	685c      	ldr	r4, [r3, #4]
		//mono operation, no need to compute right channel. Also for loop iterating by 2 instead of 1 to avoid if statement.
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    1528:	2200      	movs	r2, #0
    152a:	e009      	b.n	1540 <audioFrameWaiting+0x20>
		{
			int iplusbuffer = buffer_offset + i;
    152c:	eb0c 0302 	add.w	r3, ip, r2
			audioOutBuffer[iplusbuffer] = 0;
    1530:	4914      	ldr	r1, [pc, #80]	; (1584 <audioFrameWaiting+0x64>)
    1532:	2000      	movs	r0, #0
    1534:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			audioOutBuffer[iplusbuffer + 1] = 0;
    1538:	3301      	adds	r3, #1
    153a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    153e:	3202      	adds	r2, #2
    1540:	2a7f      	cmp	r2, #127	; 0x7f
    1542:	ddf3      	ble.n	152c <audioFrameWaiting+0xc>
		}
		if (switchStrings)
    1544:	4b10      	ldr	r3, [pc, #64]	; (1588 <audioFrameWaiting+0x68>)
    1546:	681b      	ldr	r3, [r3, #0]
    1548:	b9a3      	cbnz	r3, 1574 <audioFrameWaiting+0x54>
		{
			switchStringModel(switchStrings);
		}
		switchStrings = 0;
    154a:	4b0f      	ldr	r3, [pc, #60]	; (1588 <audioFrameWaiting+0x68>)
    154c:	2200      	movs	r2, #0
    154e:	601a      	str	r2, [r3, #0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    1550:	4b0b      	ldr	r3, [pc, #44]	; (1580 <audioFrameWaiting+0x60>)
    1552:	685b      	ldr	r3, [r3, #4]
    1554:	1b1b      	subs	r3, r3, r4
    1556:	4a0d      	ldr	r2, [pc, #52]	; (158c <audioFrameWaiting+0x6c>)
    1558:	6013      	str	r3, [r2, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    155a:	ee07 3a90 	vmov	s15, r3
    155e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1562:	4b0b      	ldr	r3, [pc, #44]	; (1590 <audioFrameWaiting+0x70>)
    1564:	ed93 7a00 	vldr	s14, [r3]
    1568:	ee67 7a87 	vmul.f32	s15, s15, s14
    156c:	4b09      	ldr	r3, [pc, #36]	; (1594 <audioFrameWaiting+0x74>)
    156e:	edc3 7a00 	vstr	s15, [r3]
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}
    1572:	bd10      	pop	{r4, pc}
			switchStringModel(switchStrings);
    1574:	4b04      	ldr	r3, [pc, #16]	; (1588 <audioFrameWaiting+0x68>)
    1576:	6818      	ldr	r0, [r3, #0]
    1578:	f7ff ff82 	bl	1480 <switchStringModel>
    157c:	e7e5      	b.n	154a <audioFrameWaiting+0x2a>
    157e:	bf00      	nop
    1580:	e0001000 	.word	0xe0001000
    1584:	30000000 	.word	0x30000000
    1588:	20014434 	.word	0x20014434
    158c:	20014438 	.word	0x20014438
    1590:	20000684 	.word	0x20000684
    1594:	200053c4 	.word	0x200053c4
    1598:	f3af 8000 	nop.w
    159c:	f3af 8000 	nop.w

000015a0 <HAL_SAI_TxCpltCallback>:
{
    15a0:	b508      	push	{r3, lr}
	if ((!diskBusy)&& (presetReady))
    15a2:	4b54      	ldr	r3, [pc, #336]	; (16f4 <HAL_SAI_TxCpltCallback+0x154>)
    15a4:	781b      	ldrb	r3, [r3, #0]
    15a6:	b933      	cbnz	r3, 15b6 <HAL_SAI_TxCpltCallback+0x16>
    15a8:	4b53      	ldr	r3, [pc, #332]	; (16f8 <HAL_SAI_TxCpltCallback+0x158>)
    15aa:	681b      	ldr	r3, [r3, #0]
    15ac:	b11b      	cbz	r3, 15b6 <HAL_SAI_TxCpltCallback+0x16>
		audioFrameFunction(HALF_BUFFER_SIZE);
    15ae:	4b53      	ldr	r3, [pc, #332]	; (16fc <HAL_SAI_TxCpltCallback+0x15c>)
    15b0:	681b      	ldr	r3, [r3, #0]
    15b2:	2080      	movs	r0, #128	; 0x80
    15b4:	4798      	blx	r3
	if (voice != prevVoice)
    15b6:	4b52      	ldr	r3, [pc, #328]	; (1700 <HAL_SAI_TxCpltCallback+0x160>)
    15b8:	681a      	ldr	r2, [r3, #0]
    15ba:	4b52      	ldr	r3, [pc, #328]	; (1704 <HAL_SAI_TxCpltCallback+0x164>)
    15bc:	681b      	ldr	r3, [r3, #0]
    15be:	429a      	cmp	r2, r3
    15c0:	d036      	beq.n	1630 <HAL_SAI_TxCpltCallback+0x90>
		if (voice == 63)
    15c2:	4b4f      	ldr	r3, [pc, #316]	; (1700 <HAL_SAI_TxCpltCallback+0x160>)
    15c4:	681b      	ldr	r3, [r3, #0]
    15c6:	2b3f      	cmp	r3, #63	; 0x3f
    15c8:	d02a      	beq.n	1620 <HAL_SAI_TxCpltCallback+0x80>
		else if (voice == 62)
    15ca:	4b4d      	ldr	r3, [pc, #308]	; (1700 <HAL_SAI_TxCpltCallback+0x160>)
    15cc:	681b      	ldr	r3, [r3, #0]
    15ce:	2b3e      	cmp	r3, #62	; 0x3e
    15d0:	d045      	beq.n	165e <HAL_SAI_TxCpltCallback+0xbe>
		else if (voice == 61)
    15d2:	4b4b      	ldr	r3, [pc, #300]	; (1700 <HAL_SAI_TxCpltCallback+0x160>)
    15d4:	681b      	ldr	r3, [r3, #0]
    15d6:	2b3d      	cmp	r3, #61	; 0x3d
    15d8:	d04a      	beq.n	1670 <HAL_SAI_TxCpltCallback+0xd0>
		else if (voice == 60)
    15da:	4b49      	ldr	r3, [pc, #292]	; (1700 <HAL_SAI_TxCpltCallback+0x160>)
    15dc:	681b      	ldr	r3, [r3, #0]
    15de:	2b3c      	cmp	r3, #60	; 0x3c
    15e0:	d05c      	beq.n	169c <HAL_SAI_TxCpltCallback+0xfc>
		else if (voice == 59)
    15e2:	4b47      	ldr	r3, [pc, #284]	; (1700 <HAL_SAI_TxCpltCallback+0x160>)
    15e4:	681b      	ldr	r3, [r3, #0]
    15e6:	2b3b      	cmp	r3, #59	; 0x3b
    15e8:	d06e      	beq.n	16c8 <HAL_SAI_TxCpltCallback+0x128>
			audioFrameFunction = audioFrameWaiting;
    15ea:	4b44      	ldr	r3, [pc, #272]	; (16fc <HAL_SAI_TxCpltCallback+0x15c>)
    15ec:	4a46      	ldr	r2, [pc, #280]	; (1708 <HAL_SAI_TxCpltCallback+0x168>)
    15ee:	601a      	str	r2, [r3, #0]
			presetWaitingToLoad = 1;
    15f0:	4b46      	ldr	r3, [pc, #280]	; (170c <HAL_SAI_TxCpltCallback+0x16c>)
    15f2:	2201      	movs	r2, #1
    15f4:	601a      	str	r2, [r3, #0]
			presetNumberToLoad = voice;
    15f6:	4b42      	ldr	r3, [pc, #264]	; (1700 <HAL_SAI_TxCpltCallback+0x160>)
    15f8:	681b      	ldr	r3, [r3, #0]
    15fa:	b2db      	uxtb	r3, r3
    15fc:	4a44      	ldr	r2, [pc, #272]	; (1710 <HAL_SAI_TxCpltCallback+0x170>)
    15fe:	7013      	strb	r3, [r2, #0]
			presetReady = 0;
    1600:	4b3d      	ldr	r3, [pc, #244]	; (16f8 <HAL_SAI_TxCpltCallback+0x158>)
    1602:	2200      	movs	r2, #0
    1604:	601a      	str	r2, [r3, #0]
			if (prevVoice > 59)
    1606:	4b3f      	ldr	r3, [pc, #252]	; (1704 <HAL_SAI_TxCpltCallback+0x164>)
    1608:	681b      	ldr	r3, [r3, #0]
    160a:	2b3b      	cmp	r3, #59	; 0x3b
    160c:	dd02      	ble.n	1614 <HAL_SAI_TxCpltCallback+0x74>
				resetStringInputs = 1;
    160e:	4b41      	ldr	r3, [pc, #260]	; (1714 <HAL_SAI_TxCpltCallback+0x174>)
    1610:	2201      	movs	r2, #1
    1612:	701a      	strb	r2, [r3, #0]
			frameLoadOverCount = 0;
    1614:	2300      	movs	r3, #0
    1616:	4a40      	ldr	r2, [pc, #256]	; (1718 <HAL_SAI_TxCpltCallback+0x178>)
    1618:	6013      	str	r3, [r2, #0]
			whichModel = 0;
    161a:	4a40      	ldr	r2, [pc, #256]	; (171c <HAL_SAI_TxCpltCallback+0x17c>)
    161c:	7013      	strb	r3, [r2, #0]
    161e:	e007      	b.n	1630 <HAL_SAI_TxCpltCallback+0x90>
			switchStrings = 1;
    1620:	2301      	movs	r3, #1
    1622:	4a3f      	ldr	r2, [pc, #252]	; (1720 <HAL_SAI_TxCpltCallback+0x180>)
    1624:	6013      	str	r3, [r2, #0]
			diskBusy = 0;
    1626:	4a33      	ldr	r2, [pc, #204]	; (16f4 <HAL_SAI_TxCpltCallback+0x154>)
    1628:	2100      	movs	r1, #0
    162a:	7011      	strb	r1, [r2, #0]
			whichModel = 1;
    162c:	4a3b      	ldr	r2, [pc, #236]	; (171c <HAL_SAI_TxCpltCallback+0x17c>)
    162e:	7013      	strb	r3, [r2, #0]
	prevVoice = voice;
    1630:	4b33      	ldr	r3, [pc, #204]	; (1700 <HAL_SAI_TxCpltCallback+0x160>)
    1632:	681a      	ldr	r2, [r3, #0]
    1634:	4b33      	ldr	r3, [pc, #204]	; (1704 <HAL_SAI_TxCpltCallback+0x164>)
    1636:	601a      	str	r2, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    1638:	4b3a      	ldr	r3, [pc, #232]	; (1724 <HAL_SAI_TxCpltCallback+0x184>)
    163a:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    163e:	f3bf 8f4f 	dsb	sy
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    1642:	f44f 7290 	mov.w	r2, #288	; 0x120
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;

      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1646:	4938      	ldr	r1, [pc, #224]	; (1728 <HAL_SAI_TxCpltCallback+0x188>)
    1648:	f8c1 3268 	str.w	r3, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    164c:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    164e:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    1650:	2a00      	cmp	r2, #0
    1652:	dcf8      	bgt.n	1646 <HAL_SAI_TxCpltCallback+0xa6>
    1654:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1658:	f3bf 8f6f 	isb	sy
}
    165c:	bd08      	pop	{r3, pc}
			switchStrings = 2;
    165e:	2302      	movs	r3, #2
    1660:	4a2f      	ldr	r2, [pc, #188]	; (1720 <HAL_SAI_TxCpltCallback+0x180>)
    1662:	6013      	str	r3, [r2, #0]
			diskBusy = 0;
    1664:	4a23      	ldr	r2, [pc, #140]	; (16f4 <HAL_SAI_TxCpltCallback+0x154>)
    1666:	2100      	movs	r1, #0
    1668:	7011      	strb	r1, [r2, #0]
			whichModel = 2;
    166a:	4a2c      	ldr	r2, [pc, #176]	; (171c <HAL_SAI_TxCpltCallback+0x17c>)
    166c:	7013      	strb	r3, [r2, #0]
    166e:	e7df      	b.n	1630 <HAL_SAI_TxCpltCallback+0x90>
			audioFrameFunction = audioFrameAdditive;
    1670:	4b22      	ldr	r3, [pc, #136]	; (16fc <HAL_SAI_TxCpltCallback+0x15c>)
    1672:	4a2e      	ldr	r2, [pc, #184]	; (172c <HAL_SAI_TxCpltCallback+0x18c>)
    1674:	601a      	str	r2, [r3, #0]
			audioSwitchToAdditive();
    1676:	f7ff f883 	bl	780 <audioSwitchToAdditive>
			currentActivePreset = voice;
    167a:	4b21      	ldr	r3, [pc, #132]	; (1700 <HAL_SAI_TxCpltCallback+0x160>)
    167c:	681b      	ldr	r3, [r3, #0]
    167e:	b2db      	uxtb	r3, r3
    1680:	4a2b      	ldr	r2, [pc, #172]	; (1730 <HAL_SAI_TxCpltCallback+0x190>)
    1682:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    1684:	4b1b      	ldr	r3, [pc, #108]	; (16f4 <HAL_SAI_TxCpltCallback+0x154>)
    1686:	2200      	movs	r2, #0
    1688:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    168a:	2301      	movs	r3, #1
    168c:	4a1a      	ldr	r2, [pc, #104]	; (16f8 <HAL_SAI_TxCpltCallback+0x158>)
    168e:	6013      	str	r3, [r2, #0]
			resetStringInputs = 1;
    1690:	4a20      	ldr	r2, [pc, #128]	; (1714 <HAL_SAI_TxCpltCallback+0x174>)
    1692:	7013      	strb	r3, [r2, #0]
			whichModel = 3;
    1694:	4b21      	ldr	r3, [pc, #132]	; (171c <HAL_SAI_TxCpltCallback+0x17c>)
    1696:	2203      	movs	r2, #3
    1698:	701a      	strb	r2, [r3, #0]
    169a:	e7c9      	b.n	1630 <HAL_SAI_TxCpltCallback+0x90>
			audioFrameFunction = audioFrameVocal;
    169c:	4b17      	ldr	r3, [pc, #92]	; (16fc <HAL_SAI_TxCpltCallback+0x15c>)
    169e:	4a25      	ldr	r2, [pc, #148]	; (1734 <HAL_SAI_TxCpltCallback+0x194>)
    16a0:	601a      	str	r2, [r3, #0]
			audioSwitchToVocal();
    16a2:	f007 fabd 	bl	8c20 <audioSwitchToVocal>
			currentActivePreset = voice;
    16a6:	4b16      	ldr	r3, [pc, #88]	; (1700 <HAL_SAI_TxCpltCallback+0x160>)
    16a8:	681b      	ldr	r3, [r3, #0]
    16aa:	b2db      	uxtb	r3, r3
    16ac:	4a20      	ldr	r2, [pc, #128]	; (1730 <HAL_SAI_TxCpltCallback+0x190>)
    16ae:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    16b0:	4b10      	ldr	r3, [pc, #64]	; (16f4 <HAL_SAI_TxCpltCallback+0x154>)
    16b2:	2200      	movs	r2, #0
    16b4:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    16b6:	2301      	movs	r3, #1
    16b8:	4a0f      	ldr	r2, [pc, #60]	; (16f8 <HAL_SAI_TxCpltCallback+0x158>)
    16ba:	6013      	str	r3, [r2, #0]
			resetStringInputs = 1;
    16bc:	4a15      	ldr	r2, [pc, #84]	; (1714 <HAL_SAI_TxCpltCallback+0x174>)
    16be:	7013      	strb	r3, [r2, #0]
			whichModel = 4;
    16c0:	4b16      	ldr	r3, [pc, #88]	; (171c <HAL_SAI_TxCpltCallback+0x17c>)
    16c2:	2204      	movs	r2, #4
    16c4:	701a      	strb	r2, [r3, #0]
    16c6:	e7b3      	b.n	1630 <HAL_SAI_TxCpltCallback+0x90>
			audioFrameFunction = audioFrameString3;
    16c8:	4b0c      	ldr	r3, [pc, #48]	; (16fc <HAL_SAI_TxCpltCallback+0x15c>)
    16ca:	4a1b      	ldr	r2, [pc, #108]	; (1738 <HAL_SAI_TxCpltCallback+0x198>)
    16cc:	601a      	str	r2, [r3, #0]
			audioSwitchToString3();
    16ce:	f003 feb7 	bl	5440 <audioSwitchToString3>
			currentActivePreset = voice;
    16d2:	4b0b      	ldr	r3, [pc, #44]	; (1700 <HAL_SAI_TxCpltCallback+0x160>)
    16d4:	681b      	ldr	r3, [r3, #0]
    16d6:	b2db      	uxtb	r3, r3
    16d8:	4a15      	ldr	r2, [pc, #84]	; (1730 <HAL_SAI_TxCpltCallback+0x190>)
    16da:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    16dc:	4b05      	ldr	r3, [pc, #20]	; (16f4 <HAL_SAI_TxCpltCallback+0x154>)
    16de:	2200      	movs	r2, #0
    16e0:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    16e2:	2301      	movs	r3, #1
    16e4:	4a04      	ldr	r2, [pc, #16]	; (16f8 <HAL_SAI_TxCpltCallback+0x158>)
    16e6:	6013      	str	r3, [r2, #0]
			resetStringInputs = 1;
    16e8:	4a0a      	ldr	r2, [pc, #40]	; (1714 <HAL_SAI_TxCpltCallback+0x174>)
    16ea:	7013      	strb	r3, [r2, #0]
			whichModel = 5;
    16ec:	4b0b      	ldr	r3, [pc, #44]	; (171c <HAL_SAI_TxCpltCallback+0x17c>)
    16ee:	2205      	movs	r2, #5
    16f0:	701a      	strb	r2, [r3, #0]
    16f2:	e79d      	b.n	1630 <HAL_SAI_TxCpltCallback+0x90>
    16f4:	20014538 	.word	0x20014538
    16f8:	20005544 	.word	0x20005544
    16fc:	20001380 	.word	0x20001380
    1700:	20014440 	.word	0x20014440
    1704:	2000069c 	.word	0x2000069c
    1708:	00001521 	.word	0x00001521
    170c:	2001a208 	.word	0x2001a208
    1710:	2001a206 	.word	0x2001a206
    1714:	20005968 	.word	0x20005968
    1718:	200053c0 	.word	0x200053c0
    171c:	2001c80d 	.word	0x2001c80d
    1720:	20014434 	.word	0x20014434
    1724:	30000000 	.word	0x30000000
    1728:	e000ed00 	.word	0xe000ed00
    172c:	00000b61 	.word	0x00000b61
    1730:	200008ac 	.word	0x200008ac
    1734:	00008de1 	.word	0x00008de1
    1738:	00005721 	.word	0x00005721
    173c:	f3af 8000 	nop.w

00001740 <HAL_SAI_TxHalfCpltCallback>:
{
    1740:	b508      	push	{r3, lr}
	if ((!diskBusy)&& (presetReady))
    1742:	4b54      	ldr	r3, [pc, #336]	; (1894 <HAL_SAI_TxHalfCpltCallback+0x154>)
    1744:	781b      	ldrb	r3, [r3, #0]
    1746:	b933      	cbnz	r3, 1756 <HAL_SAI_TxHalfCpltCallback+0x16>
    1748:	4b53      	ldr	r3, [pc, #332]	; (1898 <HAL_SAI_TxHalfCpltCallback+0x158>)
    174a:	681b      	ldr	r3, [r3, #0]
    174c:	b11b      	cbz	r3, 1756 <HAL_SAI_TxHalfCpltCallback+0x16>
		audioFrameFunction(0);
    174e:	4b53      	ldr	r3, [pc, #332]	; (189c <HAL_SAI_TxHalfCpltCallback+0x15c>)
    1750:	681b      	ldr	r3, [r3, #0]
    1752:	2000      	movs	r0, #0
    1754:	4798      	blx	r3
	if (voice != prevVoice)
    1756:	4b52      	ldr	r3, [pc, #328]	; (18a0 <HAL_SAI_TxHalfCpltCallback+0x160>)
    1758:	681a      	ldr	r2, [r3, #0]
    175a:	4b52      	ldr	r3, [pc, #328]	; (18a4 <HAL_SAI_TxHalfCpltCallback+0x164>)
    175c:	681b      	ldr	r3, [r3, #0]
    175e:	429a      	cmp	r2, r3
    1760:	d036      	beq.n	17d0 <HAL_SAI_TxHalfCpltCallback+0x90>
		if (voice == 63)
    1762:	4b4f      	ldr	r3, [pc, #316]	; (18a0 <HAL_SAI_TxHalfCpltCallback+0x160>)
    1764:	681b      	ldr	r3, [r3, #0]
    1766:	2b3f      	cmp	r3, #63	; 0x3f
    1768:	d02a      	beq.n	17c0 <HAL_SAI_TxHalfCpltCallback+0x80>
		else if (voice == 62)
    176a:	4b4d      	ldr	r3, [pc, #308]	; (18a0 <HAL_SAI_TxHalfCpltCallback+0x160>)
    176c:	681b      	ldr	r3, [r3, #0]
    176e:	2b3e      	cmp	r3, #62	; 0x3e
    1770:	d045      	beq.n	17fe <HAL_SAI_TxHalfCpltCallback+0xbe>
		else if (voice == 61)
    1772:	4b4b      	ldr	r3, [pc, #300]	; (18a0 <HAL_SAI_TxHalfCpltCallback+0x160>)
    1774:	681b      	ldr	r3, [r3, #0]
    1776:	2b3d      	cmp	r3, #61	; 0x3d
    1778:	d04a      	beq.n	1810 <HAL_SAI_TxHalfCpltCallback+0xd0>
		else if (voice == 60)
    177a:	4b49      	ldr	r3, [pc, #292]	; (18a0 <HAL_SAI_TxHalfCpltCallback+0x160>)
    177c:	681b      	ldr	r3, [r3, #0]
    177e:	2b3c      	cmp	r3, #60	; 0x3c
    1780:	d05c      	beq.n	183c <HAL_SAI_TxHalfCpltCallback+0xfc>
		else if (voice == 59)
    1782:	4b47      	ldr	r3, [pc, #284]	; (18a0 <HAL_SAI_TxHalfCpltCallback+0x160>)
    1784:	681b      	ldr	r3, [r3, #0]
    1786:	2b3b      	cmp	r3, #59	; 0x3b
    1788:	d06e      	beq.n	1868 <HAL_SAI_TxHalfCpltCallback+0x128>
			audioFrameFunction = audioFrameWaiting;
    178a:	4b44      	ldr	r3, [pc, #272]	; (189c <HAL_SAI_TxHalfCpltCallback+0x15c>)
    178c:	4a46      	ldr	r2, [pc, #280]	; (18a8 <HAL_SAI_TxHalfCpltCallback+0x168>)
    178e:	601a      	str	r2, [r3, #0]
			presetWaitingToLoad = 1;
    1790:	4b46      	ldr	r3, [pc, #280]	; (18ac <HAL_SAI_TxHalfCpltCallback+0x16c>)
    1792:	2201      	movs	r2, #1
    1794:	601a      	str	r2, [r3, #0]
			presetNumberToLoad = voice;
    1796:	4b42      	ldr	r3, [pc, #264]	; (18a0 <HAL_SAI_TxHalfCpltCallback+0x160>)
    1798:	681b      	ldr	r3, [r3, #0]
    179a:	b2db      	uxtb	r3, r3
    179c:	4a44      	ldr	r2, [pc, #272]	; (18b0 <HAL_SAI_TxHalfCpltCallback+0x170>)
    179e:	7013      	strb	r3, [r2, #0]
			presetReady = 0;
    17a0:	4b3d      	ldr	r3, [pc, #244]	; (1898 <HAL_SAI_TxHalfCpltCallback+0x158>)
    17a2:	2200      	movs	r2, #0
    17a4:	601a      	str	r2, [r3, #0]
			if (prevVoice > 59)
    17a6:	4b3f      	ldr	r3, [pc, #252]	; (18a4 <HAL_SAI_TxHalfCpltCallback+0x164>)
    17a8:	681b      	ldr	r3, [r3, #0]
    17aa:	2b3b      	cmp	r3, #59	; 0x3b
    17ac:	dd02      	ble.n	17b4 <HAL_SAI_TxHalfCpltCallback+0x74>
				resetStringInputs = 1;
    17ae:	4b41      	ldr	r3, [pc, #260]	; (18b4 <HAL_SAI_TxHalfCpltCallback+0x174>)
    17b0:	2201      	movs	r2, #1
    17b2:	701a      	strb	r2, [r3, #0]
			frameLoadOverCount = 0;
    17b4:	2300      	movs	r3, #0
    17b6:	4a40      	ldr	r2, [pc, #256]	; (18b8 <HAL_SAI_TxHalfCpltCallback+0x178>)
    17b8:	6013      	str	r3, [r2, #0]
			whichModel = 0;
    17ba:	4a40      	ldr	r2, [pc, #256]	; (18bc <HAL_SAI_TxHalfCpltCallback+0x17c>)
    17bc:	7013      	strb	r3, [r2, #0]
    17be:	e007      	b.n	17d0 <HAL_SAI_TxHalfCpltCallback+0x90>
			switchStrings = 1;
    17c0:	2301      	movs	r3, #1
    17c2:	4a3f      	ldr	r2, [pc, #252]	; (18c0 <HAL_SAI_TxHalfCpltCallback+0x180>)
    17c4:	6013      	str	r3, [r2, #0]
			diskBusy = 0;
    17c6:	4a33      	ldr	r2, [pc, #204]	; (1894 <HAL_SAI_TxHalfCpltCallback+0x154>)
    17c8:	2100      	movs	r1, #0
    17ca:	7011      	strb	r1, [r2, #0]
			whichModel = 1;
    17cc:	4a3b      	ldr	r2, [pc, #236]	; (18bc <HAL_SAI_TxHalfCpltCallback+0x17c>)
    17ce:	7013      	strb	r3, [r2, #0]
	prevVoice = voice;
    17d0:	4b33      	ldr	r3, [pc, #204]	; (18a0 <HAL_SAI_TxHalfCpltCallback+0x160>)
    17d2:	681a      	ldr	r2, [r3, #0]
    17d4:	4b33      	ldr	r3, [pc, #204]	; (18a4 <HAL_SAI_TxHalfCpltCallback+0x164>)
    17d6:	601a      	str	r2, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    17d8:	4b3a      	ldr	r3, [pc, #232]	; (18c4 <HAL_SAI_TxHalfCpltCallback+0x184>)
    17da:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    17de:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    17e2:	f44f 7290 	mov.w	r2, #288	; 0x120
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    17e6:	4938      	ldr	r1, [pc, #224]	; (18c8 <HAL_SAI_TxHalfCpltCallback+0x188>)
    17e8:	f8c1 3268 	str.w	r3, [r1, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    17ec:	3320      	adds	r3, #32
        op_size -= __SCB_DCACHE_LINE_SIZE;
    17ee:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    17f0:	2a00      	cmp	r2, #0
    17f2:	dcf8      	bgt.n	17e6 <HAL_SAI_TxHalfCpltCallback+0xa6>
    17f4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    17f8:	f3bf 8f6f 	isb	sy
}
    17fc:	bd08      	pop	{r3, pc}
			switchStrings = 2;
    17fe:	2302      	movs	r3, #2
    1800:	4a2f      	ldr	r2, [pc, #188]	; (18c0 <HAL_SAI_TxHalfCpltCallback+0x180>)
    1802:	6013      	str	r3, [r2, #0]
			diskBusy = 0;
    1804:	4a23      	ldr	r2, [pc, #140]	; (1894 <HAL_SAI_TxHalfCpltCallback+0x154>)
    1806:	2100      	movs	r1, #0
    1808:	7011      	strb	r1, [r2, #0]
			whichModel = 2;
    180a:	4a2c      	ldr	r2, [pc, #176]	; (18bc <HAL_SAI_TxHalfCpltCallback+0x17c>)
    180c:	7013      	strb	r3, [r2, #0]
    180e:	e7df      	b.n	17d0 <HAL_SAI_TxHalfCpltCallback+0x90>
			audioFrameFunction = audioFrameAdditive;
    1810:	4b22      	ldr	r3, [pc, #136]	; (189c <HAL_SAI_TxHalfCpltCallback+0x15c>)
    1812:	4a2e      	ldr	r2, [pc, #184]	; (18cc <HAL_SAI_TxHalfCpltCallback+0x18c>)
    1814:	601a      	str	r2, [r3, #0]
			audioSwitchToAdditive();
    1816:	f7fe ffb3 	bl	780 <audioSwitchToAdditive>
			currentActivePreset = voice;
    181a:	4b21      	ldr	r3, [pc, #132]	; (18a0 <HAL_SAI_TxHalfCpltCallback+0x160>)
    181c:	681b      	ldr	r3, [r3, #0]
    181e:	b2db      	uxtb	r3, r3
    1820:	4a2b      	ldr	r2, [pc, #172]	; (18d0 <HAL_SAI_TxHalfCpltCallback+0x190>)
    1822:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    1824:	4b1b      	ldr	r3, [pc, #108]	; (1894 <HAL_SAI_TxHalfCpltCallback+0x154>)
    1826:	2200      	movs	r2, #0
    1828:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    182a:	2301      	movs	r3, #1
    182c:	4a1a      	ldr	r2, [pc, #104]	; (1898 <HAL_SAI_TxHalfCpltCallback+0x158>)
    182e:	6013      	str	r3, [r2, #0]
			resetStringInputs = 1;
    1830:	4a20      	ldr	r2, [pc, #128]	; (18b4 <HAL_SAI_TxHalfCpltCallback+0x174>)
    1832:	7013      	strb	r3, [r2, #0]
			whichModel = 3;
    1834:	4b21      	ldr	r3, [pc, #132]	; (18bc <HAL_SAI_TxHalfCpltCallback+0x17c>)
    1836:	2203      	movs	r2, #3
    1838:	701a      	strb	r2, [r3, #0]
    183a:	e7c9      	b.n	17d0 <HAL_SAI_TxHalfCpltCallback+0x90>
			audioFrameFunction = audioFrameVocal;
    183c:	4b17      	ldr	r3, [pc, #92]	; (189c <HAL_SAI_TxHalfCpltCallback+0x15c>)
    183e:	4a25      	ldr	r2, [pc, #148]	; (18d4 <HAL_SAI_TxHalfCpltCallback+0x194>)
    1840:	601a      	str	r2, [r3, #0]
			audioSwitchToVocal();
    1842:	f007 f9ed 	bl	8c20 <audioSwitchToVocal>
			currentActivePreset = voice;
    1846:	4b16      	ldr	r3, [pc, #88]	; (18a0 <HAL_SAI_TxHalfCpltCallback+0x160>)
    1848:	681b      	ldr	r3, [r3, #0]
    184a:	b2db      	uxtb	r3, r3
    184c:	4a20      	ldr	r2, [pc, #128]	; (18d0 <HAL_SAI_TxHalfCpltCallback+0x190>)
    184e:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    1850:	4b10      	ldr	r3, [pc, #64]	; (1894 <HAL_SAI_TxHalfCpltCallback+0x154>)
    1852:	2200      	movs	r2, #0
    1854:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    1856:	2301      	movs	r3, #1
    1858:	4a0f      	ldr	r2, [pc, #60]	; (1898 <HAL_SAI_TxHalfCpltCallback+0x158>)
    185a:	6013      	str	r3, [r2, #0]
			resetStringInputs = 1;
    185c:	4a15      	ldr	r2, [pc, #84]	; (18b4 <HAL_SAI_TxHalfCpltCallback+0x174>)
    185e:	7013      	strb	r3, [r2, #0]
			whichModel = 4;
    1860:	4b16      	ldr	r3, [pc, #88]	; (18bc <HAL_SAI_TxHalfCpltCallback+0x17c>)
    1862:	2204      	movs	r2, #4
    1864:	701a      	strb	r2, [r3, #0]
    1866:	e7b3      	b.n	17d0 <HAL_SAI_TxHalfCpltCallback+0x90>
			audioFrameFunction = audioFrameString3;
    1868:	4b0c      	ldr	r3, [pc, #48]	; (189c <HAL_SAI_TxHalfCpltCallback+0x15c>)
    186a:	4a1b      	ldr	r2, [pc, #108]	; (18d8 <HAL_SAI_TxHalfCpltCallback+0x198>)
    186c:	601a      	str	r2, [r3, #0]
			audioSwitchToString3();
    186e:	f003 fde7 	bl	5440 <audioSwitchToString3>
			currentActivePreset = voice;
    1872:	4b0b      	ldr	r3, [pc, #44]	; (18a0 <HAL_SAI_TxHalfCpltCallback+0x160>)
    1874:	681b      	ldr	r3, [r3, #0]
    1876:	b2db      	uxtb	r3, r3
    1878:	4a15      	ldr	r2, [pc, #84]	; (18d0 <HAL_SAI_TxHalfCpltCallback+0x190>)
    187a:	7013      	strb	r3, [r2, #0]
			diskBusy = 0;
    187c:	4b05      	ldr	r3, [pc, #20]	; (1894 <HAL_SAI_TxHalfCpltCallback+0x154>)
    187e:	2200      	movs	r2, #0
    1880:	701a      	strb	r2, [r3, #0]
			presetReady = 1;
    1882:	2301      	movs	r3, #1
    1884:	4a04      	ldr	r2, [pc, #16]	; (1898 <HAL_SAI_TxHalfCpltCallback+0x158>)
    1886:	6013      	str	r3, [r2, #0]
			resetStringInputs = 1;
    1888:	4a0a      	ldr	r2, [pc, #40]	; (18b4 <HAL_SAI_TxHalfCpltCallback+0x174>)
    188a:	7013      	strb	r3, [r2, #0]
			whichModel = 5;
    188c:	4b0b      	ldr	r3, [pc, #44]	; (18bc <HAL_SAI_TxHalfCpltCallback+0x17c>)
    188e:	2205      	movs	r2, #5
    1890:	701a      	strb	r2, [r3, #0]
    1892:	e79d      	b.n	17d0 <HAL_SAI_TxHalfCpltCallback+0x90>
    1894:	20014538 	.word	0x20014538
    1898:	20005544 	.word	0x20005544
    189c:	20001380 	.word	0x20001380
    18a0:	20014440 	.word	0x20014440
    18a4:	2000069c 	.word	0x2000069c
    18a8:	00001521 	.word	0x00001521
    18ac:	2001a208 	.word	0x2001a208
    18b0:	2001a206 	.word	0x2001a206
    18b4:	20005968 	.word	0x20005968
    18b8:	200053c0 	.word	0x200053c0
    18bc:	2001c80d 	.word	0x2001c80d
    18c0:	20014434 	.word	0x20014434
    18c4:	30000000 	.word	0x30000000
    18c8:	e000ed00 	.word	0xe000ed00
    18cc:	00000b61 	.word	0x00000b61
    18d0:	200008ac 	.word	0x200008ac
    18d4:	00008de1 	.word	0x00008de1
    18d8:	00005721 	.word	0x00005721
    18dc:	f3af 8000 	nop.w

000018e0 <HAL_SAI_ErrorCallback>:
}
    18e0:	4770      	bx	lr
    18e2:	bf00      	nop
	...

00001900 <scaleDefault>:
}
    1900:	4770      	bx	lr
    1902:	bf00      	nop
    1904:	f3af 8000 	nop.w
    1908:	f3af 8000 	nop.w
    190c:	f3af 8000 	nop.w
    1910:	f3af 8000 	nop.w
    1914:	f3af 8000 	nop.w
    1918:	f3af 8000 	nop.w
    191c:	f3af 8000 	nop.w

00001920 <scaleOscPitch>:
	return ((input * 2.0f) - 1.0f);
    1920:	ee30 0a00 	vadd.f32	s0, s0, s0
}
    1924:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1928:	ee30 0a67 	vsub.f32	s0, s0, s15
    192c:	4770      	bx	lr
    192e:	bf00      	nop
    1930:	f3af 8000 	nop.w
    1934:	f3af 8000 	nop.w
    1938:	f3af 8000 	nop.w
    193c:	f3af 8000 	nop.w

00001940 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    1940:	eddf 7a04 	vldr	s15, [pc, #16]	; 1954 <scaleOscFine+0x14>
    1944:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    1948:	eddf 7a03 	vldr	s15, [pc, #12]	; 1958 <scaleOscFine+0x18>
    194c:	ee30 0a67 	vsub.f32	s0, s0, s15
    1950:	4770      	bx	lr
    1952:	bf00      	nop
    1954:	43480000 	.word	0x43480000
    1958:	42c80000 	.word	0x42c80000
    195c:	f3af 8000 	nop.w

00001960 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    1960:	eddf 7a04 	vldr	s15, [pc, #16]	; 1974 <scaleOscFreq+0x14>
    1964:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    1968:	eddf 7a03 	vldr	s15, [pc, #12]	; 1978 <scaleOscFreq+0x18>
    196c:	ee30 0a67 	vsub.f32	s0, s0, s15
    1970:	4770      	bx	lr
    1972:	bf00      	nop
    1974:	457a0000 	.word	0x457a0000
    1978:	44fa0000 	.word	0x44fa0000
    197c:	f3af 8000 	nop.w

00001980 <scaleFilterCutoff>:
}
    1980:	eddf 7a02 	vldr	s15, [pc, #8]	; 198c <scaleFilterCutoff+0xc>
    1984:	ee20 0a27 	vmul.f32	s0, s0, s15
    1988:	4770      	bx	lr
    198a:	bf00      	nop
    198c:	42fe0000 	.word	0x42fe0000
    1990:	f3af 8000 	nop.w
    1994:	f3af 8000 	nop.w
    1998:	f3af 8000 	nop.w
    199c:	f3af 8000 	nop.w

000019a0 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    19a0:	eddf 7a04 	vldr	s15, [pc, #16]	; 19b4 <scaleFinalLowpass+0x14>
    19a4:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    19a8:	eddf 7a03 	vldr	s15, [pc, #12]	; 19b8 <scaleFinalLowpass+0x18>
    19ac:	ee30 0a27 	vadd.f32	s0, s0, s15
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop
    19b4:	428c0000 	.word	0x428c0000
    19b8:	42680000 	.word	0x42680000
    19bc:	f3af 8000 	nop.w

000019c0 <blankFunction>:
}
    19c0:	4770      	bx	lr
    19c2:	bf00      	nop
    19c4:	f3af 8000 	nop.w
    19c8:	f3af 8000 	nop.w
    19cc:	f3af 8000 	nop.w
    19d0:	f3af 8000 	nop.w
    19d4:	f3af 8000 	nop.w
    19d8:	f3af 8000 	nop.w
    19dc:	f3af 8000 	nop.w

000019e0 <scaleTranspose>:
{
    19e0:	b508      	push	{r3, lr}
    19e2:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    19e6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    19ea:	ed9f 0a06 	vldr	s0, [pc, #24]	; 1a04 <scaleTranspose+0x24>
    19ee:	f007 fbb3 	bl	9158 <__LEAF_clip_veneer>
	return (input * 96.0f) - 48.0f;
    19f2:	eddf 7a05 	vldr	s15, [pc, #20]	; 1a08 <scaleTranspose+0x28>
    19f6:	ee20 0a27 	vmul.f32	s0, s0, s15
}
    19fa:	eddf 7a04 	vldr	s15, [pc, #16]	; 1a0c <scaleTranspose+0x2c>
    19fe:	ee30 0a67 	vsub.f32	s0, s0, s15
    1a02:	bd08      	pop	{r3, pc}
    1a04:	00000000 	.word	0x00000000
    1a08:	42c00000 	.word	0x42c00000
    1a0c:	42400000 	.word	0x42400000
    1a10:	f3af 8000 	nop.w
    1a14:	f3af 8000 	nop.w
    1a18:	f3af 8000 	nop.w
    1a1c:	f3af 8000 	nop.w

00001a20 <scalePitchBend>:
{
    1a20:	b508      	push	{r3, lr}
    1a22:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    1a26:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    1a2a:	ed9f 0a04 	vldr	s0, [pc, #16]	; 1a3c <scalePitchBend+0x1c>
    1a2e:	f007 fb93 	bl	9158 <__LEAF_clip_veneer>
}
    1a32:	eddf 7a03 	vldr	s15, [pc, #12]	; 1a40 <scalePitchBend+0x20>
    1a36:	ee20 0a27 	vmul.f32	s0, s0, s15
    1a3a:	bd08      	pop	{r3, pc}
    1a3c:	00000000 	.word	0x00000000
    1a40:	42400000 	.word	0x42400000
    1a44:	f3af 8000 	nop.w
    1a48:	f3af 8000 	nop.w
    1a4c:	f3af 8000 	nop.w
    1a50:	f3af 8000 	nop.w
    1a54:	f3af 8000 	nop.w
    1a58:	f3af 8000 	nop.w
    1a5c:	f3af 8000 	nop.w

00001a60 <scaleFilterResonance>:
{
    1a60:	b510      	push	{r4, lr}
    1a62:	ed2d 8b02 	vpush	{d8}
	input *= 2047.0f;
    1a66:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 1ad0 <scaleFilterResonance+0x70>
    1a6a:	ee20 0a01 	vmul.f32	s0, s0, s2
	int inputInt = (int)input;
    1a6e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    1a72:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1a76:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    1a7a:	ee38 8a40 	vsub.f32	s16, s16, s0
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1a7e:	1c63      	adds	r3, r4, #1
    1a80:	ee00 3a90 	vmov	s1, r3
    1a84:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1a88:	ed9f 0a12 	vldr	s0, [pc, #72]	; 1ad4 <scaleFilterResonance+0x74>
    1a8c:	f007 fb64 	bl	9158 <__LEAF_clip_veneer>
    1a90:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1a94:	4b10      	ldr	r3, [pc, #64]	; (1ad8 <scaleFilterResonance+0x78>)
    1a96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1a9a:	edd4 0a00 	vldr	s1, [r4]
    1a9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1aa2:	ee77 7ac8 	vsub.f32	s15, s15, s16
    1aa6:	ee60 0aa7 	vmul.f32	s1, s1, s15
    1aaa:	ee10 2a10 	vmov	r2, s0
    1aae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1ab2:	edd3 7a00 	vldr	s15, [r3]
    1ab6:	ee67 7a88 	vmul.f32	s15, s15, s16
    1aba:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    1abe:	ee70 0aa7 	vadd.f32	s1, s1, s15
    1ac2:	ed9f 0a06 	vldr	s0, [pc, #24]	; 1adc <scaleFilterResonance+0x7c>
    1ac6:	f007 fb47 	bl	9158 <__LEAF_clip_veneer>
}
    1aca:	ecbd 8b02 	vpop	{d8}
    1ace:	bd10      	pop	{r4, pc}
    1ad0:	44ffe000 	.word	0x44ffe000
    1ad4:	00000000 	.word	0x00000000
    1ad8:	2001a668 	.word	0x2001a668
    1adc:	3dcccccd 	.word	0x3dcccccd

00001ae0 <scaleEnvTimes>:
{
    1ae0:	b510      	push	{r4, lr}
    1ae2:	ed2d 8b02 	vpush	{d8}
	input *= 2047.0f;
    1ae6:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1b44 <scaleEnvTimes+0x64>
    1aea:	ee20 0a01 	vmul.f32	s0, s0, s2
	int inputInt = (int)input;
    1aee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    1af2:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1af6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    1afa:	ee38 8a40 	vsub.f32	s16, s16, s0
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1afe:	1c63      	adds	r3, r4, #1
    1b00:	ee00 3a90 	vmov	s1, r3
    1b04:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1b08:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 1b48 <scaleEnvTimes+0x68>
    1b0c:	f007 fb24 	bl	9158 <__LEAF_clip_veneer>
    1b10:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1b14:	4b0d      	ldr	r3, [pc, #52]	; (1b4c <scaleEnvTimes+0x6c>)
    1b16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1b1a:	ed94 7a00 	vldr	s14, [r4]
    1b1e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1b22:	ee77 7ac8 	vsub.f32	s15, s15, s16
    1b26:	ee27 7a27 	vmul.f32	s14, s14, s15
    1b2a:	ee10 2a10 	vmov	r2, s0
    1b2e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1b32:	edd3 7a00 	vldr	s15, [r3]
    1b36:	ee67 7a88 	vmul.f32	s15, s15, s16
}
    1b3a:	ee37 0a27 	vadd.f32	s0, s14, s15
    1b3e:	ecbd 8b02 	vpop	{d8}
    1b42:	bd10      	pop	{r4, pc}
    1b44:	44ffe000 	.word	0x44ffe000
    1b48:	00000000 	.word	0x00000000
    1b4c:	20014590 	.word	0x20014590
    1b50:	f3af 8000 	nop.w
    1b54:	f3af 8000 	nop.w
    1b58:	f3af 8000 	nop.w
    1b5c:	f3af 8000 	nop.w

00001b60 <scaleLFORates>:
{
    1b60:	b510      	push	{r4, lr}
    1b62:	ed2d 8b02 	vpush	{d8}
	input *= 2047.0f;
    1b66:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1bc4 <scaleLFORates+0x64>
    1b6a:	ee20 0a01 	vmul.f32	s0, s0, s2
	int inputInt = (int)input;
    1b6e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    1b72:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1b76:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
    1b7a:	ee38 8a40 	vsub.f32	s16, s16, s0
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1b7e:	1c63      	adds	r3, r4, #1
    1b80:	ee00 3a90 	vmov	s1, r3
    1b84:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1b88:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 1bc8 <scaleLFORates+0x68>
    1b8c:	f007 fae4 	bl	9158 <__LEAF_clip_veneer>
    1b90:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1b94:	4b0d      	ldr	r3, [pc, #52]	; (1bcc <scaleLFORates+0x6c>)
    1b96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1b9a:	ed94 7a00 	vldr	s14, [r4]
    1b9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1ba2:	ee77 7ac8 	vsub.f32	s15, s15, s16
    1ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
    1baa:	ee10 2a10 	vmov	r2, s0
    1bae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1bb2:	edd3 7a00 	vldr	s15, [r3]
    1bb6:	ee67 7a88 	vmul.f32	s15, s15, s16
}
    1bba:	ee37 0a27 	vadd.f32	s0, s14, s15
    1bbe:	ecbd 8b02 	vpop	{d8}
    1bc2:	bd10      	pop	{r4, pc}
    1bc4:	44ffe000 	.word	0x44ffe000
    1bc8:	00000000 	.word	0x00000000
    1bcc:	200166bc 	.word	0x200166bc
    1bd0:	f3af 8000 	nop.w
    1bd4:	f3af 8000 	nop.w
    1bd8:	f3af 8000 	nop.w
    1bdc:	f3af 8000 	nop.w

00001be0 <randomNumber>:
	float num = (random_values[currentRandom++] + 1.0f) * 0.5f;
    1be0:	4b08      	ldr	r3, [pc, #32]	; (1c04 <randomNumber+0x24>)
    1be2:	781a      	ldrb	r2, [r3, #0]
    1be4:	1c51      	adds	r1, r2, #1
    1be6:	7019      	strb	r1, [r3, #0]
    1be8:	4b07      	ldr	r3, [pc, #28]	; (1c08 <randomNumber+0x28>)
    1bea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1bee:	edd3 7a00 	vldr	s15, [r3]
    1bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1bf6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
    1bfa:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
    1bfe:	ee27 0a80 	vmul.f32	s0, s15, s0
    1c02:	4770      	bx	lr
    1c04:	200144fe 	.word	0x200144fe
    1c08:	2001a264 	.word	0x2001a264
    1c0c:	f3af 8000 	nop.w
    1c10:	f3af 8000 	nop.w
    1c14:	f3af 8000 	nop.w
    1c18:	f3af 8000 	nop.w
    1c1c:	f3af 8000 	nop.w

00001c20 <scaleTwo>:
}
    1c20:	ee30 0a00 	vadd.f32	s0, s0, s0
    1c24:	4770      	bx	lr
    1c26:	bf00      	nop
    1c28:	f3af 8000 	nop.w
    1c2c:	f3af 8000 	nop.w
    1c30:	f3af 8000 	nop.w
    1c34:	f3af 8000 	nop.w
    1c38:	f3af 8000 	nop.w
    1c3c:	f3af 8000 	nop.w

00001c40 <parsePreset>:
{
    1c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c44:	b087      	sub	sp, #28
    1c46:	460c      	mov	r4, r1
  __ASM volatile ("cpsid i" : : : "memory");
    1c48:	b672      	cpsid	i
	 presetReady = 0;
    1c4a:	2300      	movs	r3, #0
    1c4c:	4aa6      	ldr	r2, [pc, #664]	; (1ee8 <parsePreset+0x2a8>)
    1c4e:	6013      	str	r3, [r2, #0]
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
    1c50:	e004      	b.n	1c5c <parsePreset+0x1c>
		 audioOutBuffer[i] = 0;
    1c52:	4aa6      	ldr	r2, [pc, #664]	; (1eec <parsePreset+0x2ac>)
    1c54:	2100      	movs	r1, #0
    1c56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	 for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
    1c5a:	3301      	adds	r3, #1
    1c5c:	2bff      	cmp	r3, #255	; 0xff
    1c5e:	ddf8      	ble.n	1c52 <parsePreset+0x12>
	audioMasterLevel = 0.0f;
    1c60:	4ba3      	ldr	r3, [pc, #652]	; (1ef0 <parsePreset+0x2b0>)
    1c62:	2200      	movs	r2, #0
    1c64:	601a      	str	r2, [r3, #0]
	if (buffer[bufferIndex] == 17)
    1c66:	4ba3      	ldr	r3, [pc, #652]	; (1ef4 <parsePreset+0x2b4>)
    1c68:	781b      	ldrb	r3, [r3, #0]
    1c6a:	2b11      	cmp	r3, #17
    1c6c:	d003      	beq.n	1c76 <parsePreset+0x36>
	uint16_t bufferIndex = 0;
    1c6e:	2300      	movs	r3, #0
	uint16_t presetVersionNumber = 0;
    1c70:	469b      	mov	fp, r3
	for (int i = 0; i < 14; i++)
    1c72:	2200      	movs	r2, #0
    1c74:	e0d6      	b.n	1e24 <parsePreset+0x1e4>
		if (buffer[bufferIndex + 1] == 18)
    1c76:	4b9f      	ldr	r3, [pc, #636]	; (1ef4 <parsePreset+0x2b4>)
    1c78:	785b      	ldrb	r3, [r3, #1]
    1c7a:	2b12      	cmp	r3, #18
    1c7c:	d009      	beq.n	1c92 <parsePreset+0x52>
	uint16_t bufferIndex = 0;
    1c7e:	2300      	movs	r3, #0
	uint16_t presetVersionNumber = 0;
    1c80:	469b      	mov	fp, r3
		if (buffer[bufferIndex + 1] == 19) //this means its an internal model, not the subtractive synth
    1c82:	1c5a      	adds	r2, r3, #1
    1c84:	499b      	ldr	r1, [pc, #620]	; (1ef4 <parsePreset+0x2b4>)
    1c86:	5c8a      	ldrb	r2, [r1, r2]
    1c88:	2a13      	cmp	r2, #19
    1c8a:	d1f2      	bne.n	1c72 <parsePreset+0x32>
			for (int i = 0; i < 14; i++)
    1c8c:	2200      	movs	r2, #0
			bufferIndex = 4;
    1c8e:	2304      	movs	r3, #4
    1c90:	e018      	b.n	1cc4 <parsePreset+0x84>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    1c92:	4b98      	ldr	r3, [pc, #608]	; (1ef4 <parsePreset+0x2b4>)
    1c94:	789a      	ldrb	r2, [r3, #2]
    1c96:	78db      	ldrb	r3, [r3, #3]
    1c98:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    1c9c:	fa1f fb83 	uxth.w	fp, r3
			whichModel = 0; //this is a synth preset
    1ca0:	4b95      	ldr	r3, [pc, #596]	; (1ef8 <parsePreset+0x2b8>)
    1ca2:	2200      	movs	r2, #0
    1ca4:	701a      	strb	r2, [r3, #0]
			bufferIndex = 4;
    1ca6:	2304      	movs	r3, #4
    1ca8:	e7eb      	b.n	1c82 <parsePreset+0x42>
				presetName[i] = buffer[bufferIndex];
    1caa:	4992      	ldr	r1, [pc, #584]	; (1ef4 <parsePreset+0x2b4>)
    1cac:	5ccd      	ldrb	r5, [r1, r3]
    1cae:	4993      	ldr	r1, [pc, #588]	; (1efc <parsePreset+0x2bc>)
    1cb0:	548d      	strb	r5, [r1, r2]
				presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cb2:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
    1cb6:	4992      	ldr	r1, [pc, #584]	; (1f00 <parsePreset+0x2c0>)
    1cb8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    1cbc:	548d      	strb	r5, [r1, r2]
				bufferIndex++;
    1cbe:	3301      	adds	r3, #1
    1cc0:	b29b      	uxth	r3, r3
			for (int i = 0; i < 14; i++)
    1cc2:	3201      	adds	r2, #1
    1cc4:	2a0d      	cmp	r2, #13
    1cc6:	ddf0      	ble.n	1caa <parsePreset+0x6a>
			whichModel = buffer[bufferIndex]; // not a synth preset, maybe string or additive or something
    1cc8:	4b8a      	ldr	r3, [pc, #552]	; (1ef4 <parsePreset+0x2b4>)
    1cca:	7d1d      	ldrb	r5, [r3, #20]
    1ccc:	4b8a      	ldr	r3, [pc, #552]	; (1ef8 <parsePreset+0x2b8>)
    1cce:	701d      	strb	r5, [r3, #0]
			for (int j = 0; j < 8; j++)
    1cd0:	2600      	movs	r6, #0
			bufferIndex++;
    1cd2:	2315      	movs	r3, #21
			for (int j = 0; j < 8; j++)
    1cd4:	e011      	b.n	1cfa <parsePreset+0xba>
					macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1cd6:	4a87      	ldr	r2, [pc, #540]	; (1ef4 <parsePreset+0x2b4>)
    1cd8:	5cd7      	ldrb	r7, [r2, r3]
    1cda:	eb06 0086 	add.w	r0, r6, r6, lsl #2
    1cde:	22c8      	movs	r2, #200	; 0xc8
    1ce0:	fb04 f202 	mul.w	r2, r4, r2
    1ce4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    1ce8:	4886      	ldr	r0, [pc, #536]	; (1f04 <parsePreset+0x2c4>)
    1cea:	4402      	add	r2, r0
    1cec:	5457      	strb	r7, [r2, r1]
					bufferIndex++;
    1cee:	3301      	adds	r3, #1
    1cf0:	b29b      	uxth	r3, r3
				for (int k = 0; k < 9; k++)
    1cf2:	3101      	adds	r1, #1
    1cf4:	2908      	cmp	r1, #8
    1cf6:	ddee      	ble.n	1cd6 <parsePreset+0x96>
			for (int j = 0; j < 8; j++)
    1cf8:	3601      	adds	r6, #1
    1cfa:	2e07      	cmp	r6, #7
    1cfc:	dc01      	bgt.n	1d02 <parsePreset+0xc2>
				for (int k = 0; k < 9; k++)
    1cfe:	2100      	movs	r1, #0
    1d00:	e7f8      	b.n	1cf4 <parsePreset+0xb4>
			for (int j = 0; j < 4; j++)
    1d02:	2600      	movs	r6, #0
    1d04:	e013      	b.n	1d2e <parsePreset+0xee>
					macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1d06:	f106 0208 	add.w	r2, r6, #8
    1d0a:	497a      	ldr	r1, [pc, #488]	; (1ef4 <parsePreset+0x2b4>)
    1d0c:	5ccf      	ldrb	r7, [r1, r3]
    1d0e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1d12:	21c8      	movs	r1, #200	; 0xc8
    1d14:	fb04 f101 	mul.w	r1, r4, r1
    1d18:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    1d1c:	4979      	ldr	r1, [pc, #484]	; (1f04 <parsePreset+0x2c4>)
    1d1e:	440a      	add	r2, r1
    1d20:	5417      	strb	r7, [r2, r0]
					bufferIndex++;
    1d22:	3301      	adds	r3, #1
    1d24:	b29b      	uxth	r3, r3
				for (int k = 0; k < 10; k++)
    1d26:	3001      	adds	r0, #1
    1d28:	2809      	cmp	r0, #9
    1d2a:	ddec      	ble.n	1d06 <parsePreset+0xc6>
			for (int j = 0; j < 4; j++)
    1d2c:	3601      	adds	r6, #1
    1d2e:	2e03      	cmp	r6, #3
    1d30:	dc01      	bgt.n	1d36 <parsePreset+0xf6>
				for (int k = 0; k < 10; k++)
    1d32:	2000      	movs	r0, #0
    1d34:	e7f8      	b.n	1d28 <parsePreset+0xe8>
			for (int j = 0; j < 8; j++)
    1d36:	2600      	movs	r6, #0
    1d38:	e013      	b.n	1d62 <parsePreset+0x122>
					macroNamesArray[presetNumber][j+12][k] = buffer[bufferIndex];
    1d3a:	f106 020c 	add.w	r2, r6, #12
    1d3e:	496d      	ldr	r1, [pc, #436]	; (1ef4 <parsePreset+0x2b4>)
    1d40:	5ccf      	ldrb	r7, [r1, r3]
    1d42:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1d46:	21c8      	movs	r1, #200	; 0xc8
    1d48:	fb04 f101 	mul.w	r1, r4, r1
    1d4c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    1d50:	496c      	ldr	r1, [pc, #432]	; (1f04 <parsePreset+0x2c4>)
    1d52:	440a      	add	r2, r1
    1d54:	5417      	strb	r7, [r2, r0]
					bufferIndex++;
    1d56:	3301      	adds	r3, #1
    1d58:	b29b      	uxth	r3, r3
				for (int k = 0; k < 9; k++)
    1d5a:	3001      	adds	r0, #1
    1d5c:	2808      	cmp	r0, #8
    1d5e:	ddec      	ble.n	1d3a <parsePreset+0xfa>
			for (int j = 0; j < 8; j++)
    1d60:	3601      	adds	r6, #1
    1d62:	2e07      	cmp	r6, #7
    1d64:	dc01      	bgt.n	1d6a <parsePreset+0x12a>
				for (int k = 0; k < 9; k++)
    1d66:	2000      	movs	r0, #0
    1d68:	e7f8      	b.n	1d5c <parsePreset+0x11c>
			for (int i = 0; i < 20; i++)
    1d6a:	2100      	movs	r1, #0
    1d6c:	e015      	b.n	1d9a <parsePreset+0x15a>
				loadedKnobParams[i] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    1d6e:	4a61      	ldr	r2, [pc, #388]	; (1ef4 <parsePreset+0x2b4>)
    1d70:	5cd0      	ldrb	r0, [r2, r3]
    1d72:	1c5e      	adds	r6, r3, #1
    1d74:	5d92      	ldrb	r2, [r2, r6]
    1d76:	eb02 2200 	add.w	r2, r2, r0, lsl #8
    1d7a:	ee07 2a90 	vmov	s15, r2
    1d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1d82:	ed9f 7a61 	vldr	s14, [pc, #388]	; 1f08 <parsePreset+0x2c8>
    1d86:	ee67 7a87 	vmul.f32	s15, s15, s14
    1d8a:	4a60      	ldr	r2, [pc, #384]	; (1f0c <parsePreset+0x2cc>)
    1d8c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    1d90:	edc2 7a00 	vstr	s15, [r2]
				bufferIndex = bufferIndex + 2;
    1d94:	3302      	adds	r3, #2
    1d96:	b29b      	uxth	r3, r3
			for (int i = 0; i < 20; i++)
    1d98:	3101      	adds	r1, #1
    1d9a:	2913      	cmp	r1, #19
    1d9c:	dde7      	ble.n	1d6e <parsePreset+0x12e>
			presetWaitingToParse = 0;
    1d9e:	4b5c      	ldr	r3, [pc, #368]	; (1f10 <parsePreset+0x2d0>)
    1da0:	2200      	movs	r2, #0
    1da2:	601a      	str	r2, [r3, #0]
			currentActivePreset = presetNumber;
    1da4:	b2e4      	uxtb	r4, r4
    1da6:	4b5b      	ldr	r3, [pc, #364]	; (1f14 <parsePreset+0x2d4>)
    1da8:	701c      	strb	r4, [r3, #0]
			if (whichModel == 1)
    1daa:	2d01      	cmp	r5, #1
    1dac:	d006      	beq.n	1dbc <parsePreset+0x17c>
			else if (whichModel == 2)
    1dae:	3d02      	subs	r5, #2
    1db0:	2d03      	cmp	r5, #3
    1db2:	d806      	bhi.n	1dc2 <parsePreset+0x182>
    1db4:	e8df f005 	tbb	[pc, r5]
    1db8:	231d1713 	.word	0x231d1713
				switchStrings = 1;
    1dbc:	4b56      	ldr	r3, [pc, #344]	; (1f18 <parsePreset+0x2d8>)
    1dbe:	2201      	movs	r2, #1
    1dc0:	601a      	str	r2, [r3, #0]
			audioMasterLevel = 1.0f;
    1dc2:	4b4b      	ldr	r3, [pc, #300]	; (1ef0 <parsePreset+0x2b0>)
    1dc4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1dc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    1dca:	b662      	cpsie	i
			presetReady = 1;
    1dcc:	4b46      	ldr	r3, [pc, #280]	; (1ee8 <parsePreset+0x2a8>)
    1dce:	2201      	movs	r2, #1
    1dd0:	601a      	str	r2, [r3, #0]
			diskBusy = 0;
    1dd2:	2300      	movs	r3, #0
    1dd4:	4a51      	ldr	r2, [pc, #324]	; (1f1c <parsePreset+0x2dc>)
    1dd6:	7013      	strb	r3, [r2, #0]
			receivingI2C = 0;
    1dd8:	4a51      	ldr	r2, [pc, #324]	; (1f20 <parsePreset+0x2e0>)
    1dda:	7013      	strb	r3, [r2, #0]
			return;
    1ddc:	e081      	b.n	1ee2 <parsePreset+0x2a2>
				switchStrings = 2;
    1dde:	4b4e      	ldr	r3, [pc, #312]	; (1f18 <parsePreset+0x2d8>)
    1de0:	2202      	movs	r2, #2
    1de2:	601a      	str	r2, [r3, #0]
    1de4:	e7ed      	b.n	1dc2 <parsePreset+0x182>
				audioFrameFunction = audioFrameAdditive;
    1de6:	4b4f      	ldr	r3, [pc, #316]	; (1f24 <parsePreset+0x2e4>)
    1de8:	4a4f      	ldr	r2, [pc, #316]	; (1f28 <parsePreset+0x2e8>)
    1dea:	601a      	str	r2, [r3, #0]
				audioSwitchToAdditive();
    1dec:	f7fe fcc8 	bl	780 <audioSwitchToAdditive>
    1df0:	e7e7      	b.n	1dc2 <parsePreset+0x182>
				audioFrameFunction = audioFrameVocal;
    1df2:	4b4c      	ldr	r3, [pc, #304]	; (1f24 <parsePreset+0x2e4>)
    1df4:	4a4d      	ldr	r2, [pc, #308]	; (1f2c <parsePreset+0x2ec>)
    1df6:	601a      	str	r2, [r3, #0]
				audioSwitchToVocal();
    1df8:	f006 ff12 	bl	8c20 <audioSwitchToVocal>
    1dfc:	e7e1      	b.n	1dc2 <parsePreset+0x182>
				audioFrameFunction = audioFrameString3;
    1dfe:	4b49      	ldr	r3, [pc, #292]	; (1f24 <parsePreset+0x2e4>)
    1e00:	4a4b      	ldr	r2, [pc, #300]	; (1f30 <parsePreset+0x2f0>)
    1e02:	601a      	str	r2, [r3, #0]
				audioSwitchToString3();
    1e04:	f003 fb1c 	bl	5440 <audioSwitchToString3>
    1e08:	e7db      	b.n	1dc2 <parsePreset+0x182>
		presetName[i] = buffer[bufferIndex];
    1e0a:	493a      	ldr	r1, [pc, #232]	; (1ef4 <parsePreset+0x2b4>)
    1e0c:	5cce      	ldrb	r6, [r1, r3]
    1e0e:	493b      	ldr	r1, [pc, #236]	; (1efc <parsePreset+0x2bc>)
    1e10:	548e      	strb	r6, [r1, r2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1e12:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
    1e16:	493a      	ldr	r1, [pc, #232]	; (1f00 <parsePreset+0x2c0>)
    1e18:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    1e1c:	548e      	strb	r6, [r1, r2]
		bufferIndex++;
    1e1e:	3301      	adds	r3, #1
    1e20:	b29b      	uxth	r3, r3
	for (int i = 0; i < 14; i++)
    1e22:	3201      	adds	r2, #1
    1e24:	2a0d      	cmp	r2, #13
    1e26:	ddf0      	ble.n	1e0a <parsePreset+0x1ca>
	for (int j = 0; j < 8; j++)
    1e28:	2600      	movs	r6, #0
    1e2a:	e011      	b.n	1e50 <parsePreset+0x210>
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1e2c:	4a31      	ldr	r2, [pc, #196]	; (1ef4 <parsePreset+0x2b4>)
    1e2e:	5cd7      	ldrb	r7, [r2, r3]
    1e30:	eb06 0186 	add.w	r1, r6, r6, lsl #2
    1e34:	22c8      	movs	r2, #200	; 0xc8
    1e36:	fb04 f202 	mul.w	r2, r4, r2
    1e3a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    1e3e:	4931      	ldr	r1, [pc, #196]	; (1f04 <parsePreset+0x2c4>)
    1e40:	440a      	add	r2, r1
    1e42:	5557      	strb	r7, [r2, r5]
			bufferIndex++;
    1e44:	3301      	adds	r3, #1
    1e46:	b29b      	uxth	r3, r3
		for (int k = 0; k < 9; k++)
    1e48:	3501      	adds	r5, #1
    1e4a:	2d08      	cmp	r5, #8
    1e4c:	ddee      	ble.n	1e2c <parsePreset+0x1ec>
	for (int j = 0; j < 8; j++)
    1e4e:	3601      	adds	r6, #1
    1e50:	2e07      	cmp	r6, #7
    1e52:	dc01      	bgt.n	1e58 <parsePreset+0x218>
		for (int k = 0; k < 9; k++)
    1e54:	2500      	movs	r5, #0
    1e56:	e7f8      	b.n	1e4a <parsePreset+0x20a>
	for (int j = 0; j < 4; j++)
    1e58:	2700      	movs	r7, #0
    1e5a:	e013      	b.n	1e84 <parsePreset+0x244>
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    1e5c:	f107 0208 	add.w	r2, r7, #8
    1e60:	4924      	ldr	r1, [pc, #144]	; (1ef4 <parsePreset+0x2b4>)
    1e62:	5cce      	ldrb	r6, [r1, r3]
    1e64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1e68:	21c8      	movs	r1, #200	; 0xc8
    1e6a:	fb04 f101 	mul.w	r1, r4, r1
    1e6e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
    1e72:	4924      	ldr	r1, [pc, #144]	; (1f04 <parsePreset+0x2c4>)
    1e74:	440a      	add	r2, r1
    1e76:	5556      	strb	r6, [r2, r5]
			bufferIndex++;
    1e78:	3301      	adds	r3, #1
    1e7a:	b29b      	uxth	r3, r3
		for (int k = 0; k < 10; k++)
    1e7c:	3501      	adds	r5, #1
    1e7e:	2d09      	cmp	r5, #9
    1e80:	ddec      	ble.n	1e5c <parsePreset+0x21c>
	for (int j = 0; j < 4; j++)
    1e82:	3701      	adds	r7, #1
    1e84:	2f03      	cmp	r7, #3
    1e86:	dc01      	bgt.n	1e8c <parsePreset+0x24c>
		for (int k = 0; k < 10; k++)
    1e88:	2500      	movs	r5, #0
    1e8a:	e7f8      	b.n	1e7e <parsePreset+0x23e>
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    1e8c:	4a19      	ldr	r2, [pc, #100]	; (1ef4 <parsePreset+0x2b4>)
    1e8e:	5cd5      	ldrb	r5, [r2, r3]
    1e90:	1c59      	adds	r1, r3, #1
    1e92:	5c51      	ldrb	r1, [r2, r1]
    1e94:	eb01 2105 	add.w	r1, r1, r5, lsl #8
    1e98:	b289      	uxth	r1, r1
	if (paramCount > size)
    1e9a:	460a      	mov	r2, r1
    1e9c:	4281      	cmp	r1, r0
    1e9e:	dc18      	bgt.n	1ed2 <parsePreset+0x292>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    1ea0:	eb03 0641 	add.w	r6, r3, r1, lsl #1
    1ea4:	1cb7      	adds	r7, r6, #2
    1ea6:	4d13      	ldr	r5, [pc, #76]	; (1ef4 <parsePreset+0x2b4>)
    1ea8:	5def      	ldrb	r7, [r5, r7]
    1eaa:	f106 0c03 	add.w	ip, r6, #3
    1eae:	f815 500c 	ldrb.w	r5, [r5, ip]
    1eb2:	eb05 2507 	add.w	r5, r5, r7, lsl #8
    1eb6:	b2ad      	uxth	r5, r5
	if (paramEndCheck != 0xefef)
    1eb8:	f64e 77ef 	movw	r7, #61423	; 0xefef
    1ebc:	42bd      	cmp	r5, r7
    1ebe:	d039      	beq.n	1f34 <parsePreset+0x2f4>
		audioMasterLevel = 1.0f;
    1ec0:	4b0b      	ldr	r3, [pc, #44]	; (1ef0 <parsePreset+0x2b0>)
    1ec2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1ec6:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    1ec8:	4b11      	ldr	r3, [pc, #68]	; (1f10 <parsePreset+0x2d0>)
    1eca:	2200      	movs	r2, #0
    1ecc:	601a      	str	r2, [r3, #0]
    1ece:	b662      	cpsie	i
		return;
    1ed0:	e007      	b.n	1ee2 <parsePreset+0x2a2>
		audioMasterLevel = 1.0f;
    1ed2:	4b07      	ldr	r3, [pc, #28]	; (1ef0 <parsePreset+0x2b0>)
    1ed4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1ed8:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    1eda:	4b0d      	ldr	r3, [pc, #52]	; (1f10 <parsePreset+0x2d0>)
    1edc:	2200      	movs	r2, #0
    1ede:	601a      	str	r2, [r3, #0]
    1ee0:	b662      	cpsie	i
}
    1ee2:	b007      	add	sp, #28
    1ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ee8:	20005544 	.word	0x20005544
    1eec:	30000000 	.word	0x30000000
    1ef0:	200008a8 	.word	0x200008a8
    1ef4:	30042380 	.word	0x30042380
    1ef8:	2001c80d 	.word	0x2001c80d
    1efc:	2001a1f8 	.word	0x2001a1f8
    1f00:	30042000 	.word	0x30042000
    1f04:	30043380 	.word	0x30043380
    1f08:	377ffff6 	.word	0x377ffff6
    1f0c:	200186f0 	.word	0x200186f0
    1f10:	2001a20c 	.word	0x2001a20c
    1f14:	200008ac 	.word	0x200008ac
    1f18:	20014434 	.word	0x20014434
    1f1c:	20014538 	.word	0x20014538
    1f20:	2001a664 	.word	0x2001a664
    1f24:	20001380 	.word	0x20001380
    1f28:	00000b61 	.word	0x00000b61
    1f2c:	00008de1 	.word	0x00008de1
    1f30:	00005721 	.word	0x00005721
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    1f34:	1d37      	adds	r7, r6, #4
    1f36:	4dbf      	ldr	r5, [pc, #764]	; (2234 <parsePreset+0x5f4>)
    1f38:	5def      	ldrb	r7, [r5, r7]
    1f3a:	3605      	adds	r6, #5
    1f3c:	5dad      	ldrb	r5, [r5, r6]
    1f3e:	eb05 2507 	add.w	r5, r5, r7, lsl #8
    1f42:	b2ad      	uxth	r5, r5
    1f44:	9503      	str	r5, [sp, #12]
	if (presetVersionNumber == 0)
    1f46:	f1bb 0f00 	cmp.w	fp, #0
    1f4a:	d11e      	bne.n	1f8a <parsePreset+0x34a>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    1f4c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    1f50:	eb05 0141 	add.w	r1, r5, r1, lsl #1
    1f54:	fa13 f181 	uxtah	r1, r3, r1
    1f58:	b289      	uxth	r1, r1
    1f5a:	3106      	adds	r1, #6
    1f5c:	b289      	uxth	r1, r1
	if (mappingEndLocation > size)
    1f5e:	4281      	cmp	r1, r0
    1f60:	dc1d      	bgt.n	1f9e <parsePreset+0x35e>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    1f62:	48b4      	ldr	r0, [pc, #720]	; (2234 <parsePreset+0x5f4>)
    1f64:	5c45      	ldrb	r5, [r0, r1]
    1f66:	3101      	adds	r1, #1
    1f68:	5c41      	ldrb	r1, [r0, r1]
    1f6a:	eb01 2105 	add.w	r1, r1, r5, lsl #8
    1f6e:	b289      	uxth	r1, r1
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    1f70:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    1f74:	4281      	cmp	r1, r0
    1f76:	d01b      	beq.n	1fb0 <parsePreset+0x370>
		audioMasterLevel = 1.0f;
    1f78:	4baf      	ldr	r3, [pc, #700]	; (2238 <parsePreset+0x5f8>)
    1f7a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1f7e:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    1f80:	4bae      	ldr	r3, [pc, #696]	; (223c <parsePreset+0x5fc>)
    1f82:	2200      	movs	r2, #0
    1f84:	601a      	str	r2, [r3, #0]
    1f86:	b662      	cpsie	i
		return;
    1f88:	e7ab      	b.n	1ee2 <parsePreset+0x2a2>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    1f8a:	9d03      	ldr	r5, [sp, #12]
    1f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1f90:	4429      	add	r1, r5
    1f92:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    1f96:	b289      	uxth	r1, r1
    1f98:	3106      	adds	r1, #6
    1f9a:	b289      	uxth	r1, r1
    1f9c:	e7df      	b.n	1f5e <parsePreset+0x31e>
		audioMasterLevel = 1.0f;
    1f9e:	4ba6      	ldr	r3, [pc, #664]	; (2238 <parsePreset+0x5f8>)
    1fa0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    1fa4:	601a      	str	r2, [r3, #0]
		presetWaitingToParse = 0;
    1fa6:	4ba5      	ldr	r3, [pc, #660]	; (223c <parsePreset+0x5fc>)
    1fa8:	2200      	movs	r2, #0
    1faa:	601a      	str	r2, [r3, #0]
    1fac:	b662      	cpsie	i
		return;
    1fae:	e798      	b.n	1ee2 <parsePreset+0x2a2>
	bufferIndex = bufferIndex + 2;
    1fb0:	3302      	adds	r3, #2
    1fb2:	b29d      	uxth	r5, r3
	for (int i = 0; i < paramCount; i++)
    1fb4:	2000      	movs	r0, #0
    1fb6:	e024      	b.n	2002 <parsePreset+0x3c2>
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    1fb8:	499e      	ldr	r1, [pc, #632]	; (2234 <parsePreset+0x5f4>)
    1fba:	5d4e      	ldrb	r6, [r1, r5]
    1fbc:	1c6f      	adds	r7, r5, #1
    1fbe:	5dc9      	ldrb	r1, [r1, r7]
    1fc0:	eb01 2106 	add.w	r1, r1, r6, lsl #8
    1fc4:	ee07 1a90 	vmov	s15, r1
    1fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1fcc:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 2240 <parsePreset+0x600>
    1fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
    1fd4:	ebc0 06c0 	rsb	r6, r0, r0, lsl #3
    1fd8:	441e      	add	r6, r3
    1fda:	499a      	ldr	r1, [pc, #616]	; (2244 <parsePreset+0x604>)
    1fdc:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    1fe0:	edc1 7a00 	vstr	s15, [r1]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    1fe4:	3301      	adds	r3, #1
    1fe6:	2b01      	cmp	r3, #1
    1fe8:	dde6      	ble.n	1fb8 <parsePreset+0x378>
		params[i].scaleFunc = &scaleDefault;
    1fea:	ebc0 01c0 	rsb	r1, r0, r0, lsl #3
    1fee:	4b95      	ldr	r3, [pc, #596]	; (2244 <parsePreset+0x604>)
    1ff0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1ff4:	4994      	ldr	r1, [pc, #592]	; (2248 <parsePreset+0x608>)
    1ff6:	6119      	str	r1, [r3, #16]
		params[i].setParam = &blankFunction;
    1ff8:	4994      	ldr	r1, [pc, #592]	; (224c <parsePreset+0x60c>)
    1ffa:	6159      	str	r1, [r3, #20]
		bufferIndex += 2;
    1ffc:	3502      	adds	r5, #2
    1ffe:	b2ad      	uxth	r5, r5
	for (int i = 0; i < paramCount; i++)
    2000:	3001      	adds	r0, #1
    2002:	4282      	cmp	r2, r0
    2004:	dd16      	ble.n	2034 <parsePreset+0x3f4>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2006:	2300      	movs	r3, #0
    2008:	e7ed      	b.n	1fe6 <parsePreset+0x3a6>
			params[i].zeroToOneVal[v] = 0.0f;
    200a:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
    200e:	4418      	add	r0, r3
    2010:	498c      	ldr	r1, [pc, #560]	; (2244 <parsePreset+0x604>)
    2012:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    2016:	2000      	movs	r0, #0
    2018:	6008      	str	r0, [r1, #0]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    201a:	3301      	adds	r3, #1
    201c:	2b01      	cmp	r3, #1
    201e:	ddf4      	ble.n	200a <parsePreset+0x3ca>
		params[i].scaleFunc = &scaleDefault;
    2020:	ebc2 01c2 	rsb	r1, r2, r2, lsl #3
    2024:	4b87      	ldr	r3, [pc, #540]	; (2244 <parsePreset+0x604>)
    2026:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    202a:	4987      	ldr	r1, [pc, #540]	; (2248 <parsePreset+0x608>)
    202c:	6119      	str	r1, [r3, #16]
		params[i].setParam = &blankFunction;
    202e:	4987      	ldr	r1, [pc, #540]	; (224c <parsePreset+0x60c>)
    2030:	6159      	str	r1, [r3, #20]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    2032:	3201      	adds	r2, #1
    2034:	2a9b      	cmp	r2, #155	; 0x9b
    2036:	dc01      	bgt.n	203c <parsePreset+0x3fc>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2038:	2300      	movs	r3, #0
    203a:	e7ef      	b.n	201c <parsePreset+0x3dc>
	params[Transpose].scaleFunc = &scaleTranspose;
    203c:	4b81      	ldr	r3, [pc, #516]	; (2244 <parsePreset+0x604>)
    203e:	4a84      	ldr	r2, [pc, #528]	; (2250 <parsePreset+0x610>)
    2040:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    2044:	4a83      	ldr	r2, [pc, #524]	; (2254 <parsePreset+0x614>)
    2046:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    204a:	4a83      	ldr	r2, [pc, #524]	; (2258 <parsePreset+0x618>)
    204c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    2050:	4882      	ldr	r0, [pc, #520]	; (225c <parsePreset+0x61c>)
    2052:	f8c3 02e8 	str.w	r0, [r3, #744]	; 0x2e8
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    2056:	4982      	ldr	r1, [pc, #520]	; (2260 <parsePreset+0x620>)
    2058:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    205c:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    2060:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    2064:	f8c3 0454 	str.w	r0, [r3, #1108]	; 0x454
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    2068:	f8c3 1470 	str.w	r1, [r3, #1136]	; 0x470
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    206c:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    2070:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    2074:	f8c3 05c0 	str.w	r0, [r3, #1472]	; 0x5c0
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    2078:	f8c3 15dc 	str.w	r1, [r3, #1500]	; 0x5dc
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    207c:	f8c3 2630 	str.w	r2, [r3, #1584]	; 0x630
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    2080:	4978      	ldr	r1, [pc, #480]	; (2264 <parsePreset+0x624>)
    2082:	f8c3 1aac 	str.w	r1, [r3, #2732]	; 0xaac
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    2086:	4a78      	ldr	r2, [pc, #480]	; (2268 <parsePreset+0x628>)
    2088:	f8c3 2ae4 	str.w	r2, [r3, #2788]	; 0xae4
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    208c:	f8c3 1b54 	str.w	r1, [r3, #2900]	; 0xb54
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    2090:	f8c3 2b8c 	str.w	r2, [r3, #2956]	; 0xb8c
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    2094:	4a75      	ldr	r2, [pc, #468]	; (226c <parsePreset+0x62c>)
    2096:	f8c3 2be0 	str.w	r2, [r3, #3040]	; 0xbe0
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    209a:	f8c3 2bfc 	str.w	r2, [r3, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    209e:	f8c3 2c34 	str.w	r2, [r3, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    20a2:	f8c3 2c88 	str.w	r2, [r3, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    20a6:	f8c3 2ca4 	str.w	r2, [r3, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    20aa:	f8c3 2cdc 	str.w	r2, [r3, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    20ae:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    20b2:	f8c3 2d4c 	str.w	r2, [r3, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    20b6:	f8c3 2d84 	str.w	r2, [r3, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    20ba:	f8c3 2dd8 	str.w	r2, [r3, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    20be:	f8c3 2df4 	str.w	r2, [r3, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    20c2:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    20c6:	4a6a      	ldr	r2, [pc, #424]	; (2270 <parsePreset+0x630>)
    20c8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    20cc:	f8c3 2f0c 	str.w	r2, [r3, #3852]	; 0xf0c
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    20d0:	f8c3 2f98 	str.w	r2, [r3, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    20d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    20d8:	625a      	str	r2, [r3, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    20da:	4a66      	ldr	r2, [pc, #408]	; (2274 <parsePreset+0x634>)
    20dc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	for (int i = 0; i < NUM_EFFECT; i++)
    20e0:	2700      	movs	r7, #0
    20e2:	e028      	b.n	2136 <parsePreset+0x4f6>
			setEffectsFunctions(effectType, i);
    20e4:	4639      	mov	r1, r7
    20e6:	f007 fa9b 	bl	9620 <__setEffectsFunctions_veneer>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    20ea:	3601      	adds	r6, #1
    20ec:	2e01      	cmp	r6, #1
    20ee:	dc21      	bgt.n	2134 <parsePreset+0x4f4>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    20f0:	00fb      	lsls	r3, r7, #3
    20f2:	333f      	adds	r3, #63	; 0x3f
    20f4:	4a53      	ldr	r2, [pc, #332]	; (2244 <parsePreset+0x604>)
    20f6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    20fa:	4433      	add	r3, r6
    20fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2100:	edd3 7a00 	vldr	s15, [r3]
    2104:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
    2108:	ee67 7a87 	vmul.f32	s15, s15, s14
    210c:	fef8 7a67 	vrinta.f32	s15, s15
    2110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    2114:	edcd 7a01 	vstr	s15, [sp, #4]
    2118:	f89d 0004 	ldrb.w	r0, [sp, #4]
			param *FXAlias = &params[Effect1Param1 + (EffectParamsNum*i)];
    211c:	f107 0108 	add.w	r1, r7, #8
    2120:	018b      	lsls	r3, r1, #6
    2122:	eba3 03c1 	sub.w	r3, r3, r1, lsl #3
    2126:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			if (effectType > FXLowpass) // this assumes filters are the last effects
    212a:	280d      	cmp	r0, #13
    212c:	d9da      	bls.n	20e4 <parsePreset+0x4a4>
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    212e:	4b4e      	ldr	r3, [pc, #312]	; (2268 <parsePreset+0x628>)
    2130:	6493      	str	r3, [r2, #72]	; 0x48
    2132:	e7d7      	b.n	20e4 <parsePreset+0x4a4>
	for (int i = 0; i < NUM_EFFECT; i++)
    2134:	3701      	adds	r7, #1
    2136:	2f03      	cmp	r7, #3
    2138:	dc01      	bgt.n	213e <parsePreset+0x4fe>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    213a:	2600      	movs	r6, #0
    213c:	e7d6      	b.n	20ec <parsePreset+0x4ac>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    213e:	f04f 0900 	mov.w	r9, #0
    2142:	46a0      	mov	r8, r4
    2144:	e017      	b.n	2176 <parsePreset+0x536>
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    2146:	4c3f      	ldr	r4, [pc, #252]	; (2244 <parsePreset+0x604>)
    2148:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    214c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    2150:	691b      	ldr	r3, [r3, #16]
    2152:	ebc6 07c6 	rsb	r7, r6, r6, lsl #3
    2156:	444f      	add	r7, r9
    2158:	eb04 0287 	add.w	r2, r4, r7, lsl #2
    215c:	ed92 0a00 	vldr	s0, [r2]
    2160:	4798      	blx	r3
    2162:	3702      	adds	r7, #2
    2164:	eb04 0387 	add.w	r3, r4, r7, lsl #2
    2168:	ed83 0a00 	vstr	s0, [r3]
		for (int i = 0; i < NUM_PARAMS; i++)
    216c:	3601      	adds	r6, #1
    216e:	2e9b      	cmp	r6, #155	; 0x9b
    2170:	dde9      	ble.n	2146 <parsePreset+0x506>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2172:	f109 0901 	add.w	r9, r9, #1
    2176:	f1b9 0f01 	cmp.w	r9, #1
    217a:	dc01      	bgt.n	2180 <parsePreset+0x540>
		for (int i = 0; i < NUM_PARAMS; i++)
    217c:	2600      	movs	r6, #0
    217e:	e7f6      	b.n	216e <parsePreset+0x52e>
	for (int i = 0; i < NUM_OSC; i++)
    2180:	2700      	movs	r7, #0
	uint8_t enabledCount = 0;
    2182:	46b9      	mov	r9, r7
    2184:	e006      	b.n	2194 <parsePreset+0x554>
			oscsEnabled[i] = 0;
    2186:	2300      	movs	r3, #0
    2188:	4a3b      	ldr	r2, [pc, #236]	; (2278 <parsePreset+0x638>)
    218a:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
			oscOn[i] = 0;
    218e:	4a3b      	ldr	r2, [pc, #236]	; (227c <parsePreset+0x63c>)
    2190:	55d3      	strb	r3, [r2, r7]
	for (int i = 0; i < NUM_OSC; i++)
    2192:	3701      	adds	r7, #1
    2194:	2f02      	cmp	r7, #2
    2196:	dc32      	bgt.n	21fe <parsePreset+0x5be>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    2198:	eb07 0647 	add.w	r6, r7, r7, lsl #1
    219c:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    21a0:	f106 0323 	add.w	r3, r6, #35	; 0x23
    21a4:	4c27      	ldr	r4, [pc, #156]	; (2244 <parsePreset+0x604>)
    21a6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    21aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    21ae:	edd3 7a02 	vldr	s15, [r3, #8]
    21b2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    21b6:	ee67 7a87 	vmul.f32	s15, s15, s14
    21ba:	fef8 7a67 	vrinta.f32	s15, s15
		setOscilllatorShapes(oscshape, i);
    21be:	4639      	mov	r1, r7
    21c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    21c4:	ee17 0a90 	vmov	r0, s15
    21c8:	f006 ffba 	bl	9140 <__setOscilllatorShapes_veneer>
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    21cc:	3618      	adds	r6, #24
    21ce:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
    21d2:	eb04 0486 	add.w	r4, r4, r6, lsl #2
    21d6:	ed94 7a02 	vldr	s14, [r4, #8]
    21da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    21de:	eeb4 7ae7 	vcmpe.f32	s14, s15
    21e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    21e6:	ddce      	ble.n	2186 <parsePreset+0x546>
			enabledCount++;
    21e8:	f109 0901 	add.w	r9, r9, #1
    21ec:	fa5f f989 	uxtb.w	r9, r9
			oscsEnabled[i] = 1;
    21f0:	2301      	movs	r3, #1
    21f2:	4a21      	ldr	r2, [pc, #132]	; (2278 <parsePreset+0x638>)
    21f4:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
			oscOn[i] = 1;
    21f8:	4a20      	ldr	r2, [pc, #128]	; (227c <parsePreset+0x63c>)
    21fa:	55d3      	strb	r3, [r2, r7]
    21fc:	e7c9      	b.n	2192 <parsePreset+0x552>
	oscAmpMult = oscAmpMultArray[enabledCount];
    21fe:	4644      	mov	r4, r8
    2200:	4b1f      	ldr	r3, [pc, #124]	; (2280 <parsePreset+0x640>)
    2202:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    2206:	681a      	ldr	r2, [r3, #0]
    2208:	4b1e      	ldr	r3, [pc, #120]	; (2284 <parsePreset+0x644>)
    220a:	601a      	str	r2, [r3, #0]
	if (params[Noise].realVal[0]  > 0.5f)
    220c:	4b0d      	ldr	r3, [pc, #52]	; (2244 <parsePreset+0x604>)
    220e:	ed93 7a80 	vldr	s14, [r3, #512]	; 0x200
    2212:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2216:	eeb4 7ae7 	vcmpe.f32	s14, s15
    221a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    221e:	dd04      	ble.n	222a <parsePreset+0x5ea>
		noiseOn = 1;
    2220:	4b19      	ldr	r3, [pc, #100]	; (2288 <parsePreset+0x648>)
    2222:	2201      	movs	r2, #1
    2224:	701a      	strb	r2, [r3, #0]
	uint8_t enabledCount = 0;
    2226:	2600      	movs	r6, #0
    2228:	e049      	b.n	22be <parsePreset+0x67e>
		noiseOn = 0;
    222a:	4b17      	ldr	r3, [pc, #92]	; (2288 <parsePreset+0x648>)
    222c:	2200      	movs	r2, #0
    222e:	701a      	strb	r2, [r3, #0]
    2230:	e7f9      	b.n	2226 <parsePreset+0x5e6>
    2232:	bf00      	nop
    2234:	30042380 	.word	0x30042380
    2238:	200008a8 	.word	0x200008a8
    223c:	2001a20c 	.word	0x2001a20c
    2240:	377ffff6 	.word	0x377ffff6
    2244:	200190dc 	.word	0x200190dc
    2248:	00001901 	.word	0x00001901
    224c:	000019c1 	.word	0x000019c1
    2250:	000019e1 	.word	0x000019e1
    2254:	00001a21 	.word	0x00001a21
    2258:	00001921 	.word	0x00001921
    225c:	00001941 	.word	0x00001941
    2260:	00001961 	.word	0x00001961
    2264:	00001981 	.word	0x00001981
    2268:	00001a61 	.word	0x00001a61
    226c:	00001ae1 	.word	0x00001ae1
    2270:	00001b61 	.word	0x00001b61
    2274:	000019a1 	.word	0x000019a1
    2278:	200190d0 	.word	0x200190d0
    227c:	2001d55c 	.word	0x2001d55c
    2280:	20000ad8 	.word	0x20000ad8
    2284:	20000ad4 	.word	0x20000ad4
    2288:	2001d508 	.word	0x2001d508
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    228c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    2290:	005b      	lsls	r3, r3, #1
    2292:	3360      	adds	r3, #96	; 0x60
    2294:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    2298:	4abe      	ldr	r2, [pc, #760]	; (2594 <parsePreset+0x954>)
    229a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    229e:	edd3 7a02 	vldr	s15, [r3, #8]
    22a2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    22a6:	ee67 7a87 	vmul.f32	s15, s15, s14
    22aa:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    22ae:	4631      	mov	r1, r6
    22b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    22b4:	ee17 0a90 	vmov	r0, s15
    22b8:	f007 f89a 	bl	93f0 <__setFilterTypes_veneer>
	for (int i = 0; i < NUM_FILT; i++)
    22bc:	3601      	adds	r6, #1
    22be:	2e01      	cmp	r6, #1
    22c0:	dde4      	ble.n	228c <parsePreset+0x64c>
	for (int i = 0; i < NUM_LFOS; i++)
    22c2:	2600      	movs	r6, #0
    22c4:	e017      	b.n	22f6 <parsePreset+0x6b6>
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    22c6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    22ca:	3387      	adds	r3, #135	; 0x87
    22cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    22d0:	4ab0      	ldr	r2, [pc, #704]	; (2594 <parsePreset+0x954>)
    22d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    22d6:	edd3 7a02 	vldr	s15, [r3, #8]
    22da:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    22de:	ee67 7a87 	vmul.f32	s15, s15, s14
    22e2:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    22e6:	4631      	mov	r1, r6
    22e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    22ec:	ee17 0a90 	vmov	r0, s15
    22f0:	f006 ffe6 	bl	92c0 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    22f4:	3601      	adds	r6, #1
    22f6:	2e03      	cmp	r6, #3
    22f8:	dde5      	ble.n	22c6 <parsePreset+0x686>
	params[NoiseTilt].setParam = &noiseSetTilt;
    22fa:	4ba6      	ldr	r3, [pc, #664]	; (2594 <parsePreset+0x954>)
    22fc:	4aa6      	ldr	r2, [pc, #664]	; (2598 <parsePreset+0x958>)
    22fe:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    2302:	4aa6      	ldr	r2, [pc, #664]	; (259c <parsePreset+0x95c>)
    2304:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    2308:	4aa5      	ldr	r2, [pc, #660]	; (25a0 <parsePreset+0x960>)
    230a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
	params[Master].setParam = &setMaster;
    230e:	4aa5      	ldr	r2, [pc, #660]	; (25a4 <parsePreset+0x964>)
    2310:	64da      	str	r2, [r3, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    2312:	4aa5      	ldr	r2, [pc, #660]	; (25a8 <parsePreset+0x968>)
    2314:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    2318:	4aa4      	ldr	r2, [pc, #656]	; (25ac <parsePreset+0x96c>)
    231a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    231e:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
    2322:	4aa3      	ldr	r2, [pc, #652]	; (25b0 <parsePreset+0x970>)
    2324:	f8c1 20d0 	str.w	r2, [r1, #208]	; 0xd0
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    2328:	4aa2      	ldr	r2, [pc, #648]	; (25b4 <parsePreset+0x974>)
    232a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    232e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    2332:	f8c3 25a8 	str.w	r2, [r3, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    2336:	4aa0      	ldr	r2, [pc, #640]	; (25b8 <parsePreset+0x978>)
    2338:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    233c:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    2340:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    2344:	4a9d      	ldr	r2, [pc, #628]	; (25bc <parsePreset+0x97c>)
    2346:	6810      	ldr	r0, [r2, #0]
    2348:	f8c3 0714 	str.w	r0, [r3, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    234c:	6850      	ldr	r0, [r2, #4]
    234e:	f8c3 0730 	str.w	r0, [r3, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    2352:	6890      	ldr	r0, [r2, #8]
    2354:	f8c3 074c 	str.w	r0, [r3, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    2358:	68d0      	ldr	r0, [r2, #12]
    235a:	f8c3 0768 	str.w	r0, [r3, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    235e:	6910      	ldr	r0, [r2, #16]
    2360:	f8c3 0784 	str.w	r0, [r3, #1924]	; 0x784
	params[Effect1Mix].setParam = &fxMixSet;
    2364:	4f96      	ldr	r7, [pc, #600]	; (25c0 <parsePreset+0x980>)
    2366:	f8c3 77a0 	str.w	r7, [r3, #1952]	; 0x7a0
	params[Effect1PostGain].setParam = &fxPostGainSet;
    236a:	4e96      	ldr	r6, [pc, #600]	; (25c4 <parsePreset+0x984>)
    236c:	f8c3 67bc 	str.w	r6, [r3, #1980]	; 0x7bc
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    2370:	6950      	ldr	r0, [r2, #20]
    2372:	f8c3 07f4 	str.w	r0, [r3, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    2376:	6990      	ldr	r0, [r2, #24]
    2378:	f8c3 0810 	str.w	r0, [r3, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    237c:	69d0      	ldr	r0, [r2, #28]
    237e:	f8c3 082c 	str.w	r0, [r3, #2092]	; 0x82c
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    2382:	6a10      	ldr	r0, [r2, #32]
    2384:	f8c3 0848 	str.w	r0, [r3, #2120]	; 0x848
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    2388:	6a50      	ldr	r0, [r2, #36]	; 0x24
    238a:	f8c3 0864 	str.w	r0, [r3, #2148]	; 0x864
	params[Effect2Mix].setParam = &fxMixSet;
    238e:	f8c3 7880 	str.w	r7, [r3, #2176]	; 0x880
	params[Effect2PostGain].setParam = &fxPostGainSet;
    2392:	f8c3 689c 	str.w	r6, [r3, #2204]	; 0x89c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    2396:	6a90      	ldr	r0, [r2, #40]	; 0x28
    2398:	f8c3 08d4 	str.w	r0, [r3, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    239c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    239e:	f8c3 08f0 	str.w	r0, [r3, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    23a2:	6b10      	ldr	r0, [r2, #48]	; 0x30
    23a4:	f8c3 090c 	str.w	r0, [r3, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    23a8:	6b50      	ldr	r0, [r2, #52]	; 0x34
    23aa:	f8c3 0928 	str.w	r0, [r3, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    23ae:	6b90      	ldr	r0, [r2, #56]	; 0x38
    23b0:	f8c3 0944 	str.w	r0, [r3, #2372]	; 0x944
	params[Effect3Mix].setParam = &fxMixSet;
    23b4:	f8c3 7960 	str.w	r7, [r3, #2400]	; 0x960
	params[Effect3PostGain].setParam = &fxPostGainSet;
    23b8:	f8c3 697c 	str.w	r6, [r3, #2428]	; 0x97c
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    23bc:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    23be:	f8c3 09b4 	str.w	r0, [r3, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    23c2:	6c10      	ldr	r0, [r2, #64]	; 0x40
    23c4:	f8c3 09d0 	str.w	r0, [r3, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    23c8:	6c50      	ldr	r0, [r2, #68]	; 0x44
    23ca:	f8c3 09ec 	str.w	r0, [r3, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    23ce:	6c90      	ldr	r0, [r2, #72]	; 0x48
    23d0:	f8c3 0a08 	str.w	r0, [r3, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    23d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    23d6:	f8c3 2a24 	str.w	r2, [r3, #2596]	; 0xa24
	params[Effect4Mix].setParam = &fxMixSet;
    23da:	f8c3 7a40 	str.w	r7, [r3, #2624]	; 0xa40
	params[Effect4PostGain].setParam = &fxPostGainSet;
    23de:	f8c3 6a5c 	str.w	r6, [r3, #2652]	; 0xa5c
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    23e2:	4a79      	ldr	r2, [pc, #484]	; (25c8 <parsePreset+0x988>)
    23e4:	6810      	ldr	r0, [r2, #0]
    23e6:	f8c3 0ae8 	str.w	r0, [r3, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    23ea:	6850      	ldr	r0, [r2, #4]
    23ec:	f8c3 0acc 	str.w	r0, [r3, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    23f0:	6890      	ldr	r0, [r2, #8]
    23f2:	f8c3 0b90 	str.w	r0, [r3, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    23f6:	68d2      	ldr	r2, [r2, #12]
    23f8:	f8c3 2b74 	str.w	r2, [r3, #2932]	; 0xb74
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    23fc:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 25e4 <parsePreset+0x9a4>
    2400:	f8c3 cbe4 	str.w	ip, [r3, #3044]	; 0xbe4
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    2404:	4f71      	ldr	r7, [pc, #452]	; (25cc <parsePreset+0x98c>)
    2406:	f8c3 7c00 	str.w	r7, [r3, #3072]	; 0xc00
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    240a:	4e71      	ldr	r6, [pc, #452]	; (25d0 <parsePreset+0x990>)
    240c:	f8c3 6c1c 	str.w	r6, [r3, #3100]	; 0xc1c
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    2410:	4870      	ldr	r0, [pc, #448]	; (25d4 <parsePreset+0x994>)
    2412:	f8c3 0c38 	str.w	r0, [r3, #3128]	; 0xc38
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    2416:	4a70      	ldr	r2, [pc, #448]	; (25d8 <parsePreset+0x998>)
    2418:	f8c3 2c54 	str.w	r2, [r3, #3156]	; 0xc54
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    241c:	f8c3 cc8c 	str.w	ip, [r3, #3212]	; 0xc8c
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    2420:	f8c3 7ca8 	str.w	r7, [r3, #3240]	; 0xca8
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    2424:	f8c3 6cc4 	str.w	r6, [r3, #3268]	; 0xcc4
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    2428:	f8c3 0ce0 	str.w	r0, [r3, #3296]	; 0xce0
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    242c:	f8c3 2cfc 	str.w	r2, [r3, #3324]	; 0xcfc
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    2430:	f8c3 cd34 	str.w	ip, [r3, #3380]	; 0xd34
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    2434:	f8c3 7d50 	str.w	r7, [r3, #3408]	; 0xd50
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    2438:	f8c3 6d6c 	str.w	r6, [r3, #3436]	; 0xd6c
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    243c:	f8c3 0d88 	str.w	r0, [r3, #3464]	; 0xd88
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    2440:	f8c3 2da4 	str.w	r2, [r3, #3492]	; 0xda4
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    2444:	f8c3 cddc 	str.w	ip, [r3, #3548]	; 0xddc
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    2448:	f8c3 7df8 	str.w	r7, [r3, #3576]	; 0xdf8
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    244c:	f8c3 6e14 	str.w	r6, [r3, #3604]	; 0xe14
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    2450:	f8c3 0e30 	str.w	r0, [r3, #3632]	; 0xe30
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    2454:	f8c3 2e4c 	str.w	r2, [r3, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    2458:	4a60      	ldr	r2, [pc, #384]	; (25dc <parsePreset+0x99c>)
    245a:	6810      	ldr	r0, [r2, #0]
    245c:	f8c3 0e84 	str.w	r0, [r3, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    2460:	68d0      	ldr	r0, [r2, #12]
    2462:	f8c3 0f10 	str.w	r0, [r3, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    2466:	6990      	ldr	r0, [r2, #24]
    2468:	f8c3 0f9c 	str.w	r0, [r3, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    246c:	6a50      	ldr	r0, [r2, #36]	; 0x24
    246e:	6288      	str	r0, [r1, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    2470:	6850      	ldr	r0, [r2, #4]
    2472:	f8c3 0ea0 	str.w	r0, [r3, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    2476:	6910      	ldr	r0, [r2, #16]
    2478:	f8c3 0f2c 	str.w	r0, [r3, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    247c:	69d0      	ldr	r0, [r2, #28]
    247e:	f8c3 0fb8 	str.w	r0, [r3, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    2482:	6a90      	ldr	r0, [r2, #40]	; 0x28
    2484:	6448      	str	r0, [r1, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    2486:	6890      	ldr	r0, [r2, #8]
    2488:	f8c3 0ebc 	str.w	r0, [r3, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    248c:	6950      	ldr	r0, [r2, #20]
    248e:	f8c3 0f48 	str.w	r0, [r3, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    2492:	6a10      	ldr	r0, [r2, #32]
    2494:	f8c3 0fd4 	str.w	r0, [r3, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    2498:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    249a:	660b      	str	r3, [r1, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    249c:	4b50      	ldr	r3, [pc, #320]	; (25e0 <parsePreset+0x9a0>)
    249e:	f8c1 30b4 	str.w	r3, [r1, #180]	; 0xb4
	for (int i = 0; i < NUM_PARAMS; i++)
    24a2:	2600      	movs	r6, #0
    24a4:	46a0      	mov	r8, r4
    24a6:	e0a0      	b.n	25ea <parsePreset+0x9aa>
			params[i].objectNumber = 1;
    24a8:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    24ac:	4b39      	ldr	r3, [pc, #228]	; (2594 <parsePreset+0x954>)
    24ae:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    24b2:	2201      	movs	r2, #1
    24b4:	761a      	strb	r2, [r3, #24]
	for (int i = 0; i < NUM_LFOS; i++)
    24b6:	2700      	movs	r7, #0
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    24b8:	2f01      	cmp	r7, #1
    24ba:	f300 8095 	bgt.w	25e8 <parsePreset+0x9a8>
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    24be:	4a35      	ldr	r2, [pc, #212]	; (2594 <parsePreset+0x954>)
    24c0:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
    24c4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    24c8:	6944      	ldr	r4, [r0, #20]
    24ca:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    24ce:	443b      	add	r3, r7
    24d0:	3302      	adds	r3, #2
    24d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    24d6:	4639      	mov	r1, r7
    24d8:	7e00      	ldrb	r0, [r0, #24]
    24da:	ed92 0a00 	vldr	s0, [r2]
    24de:	47a0      	blx	r4
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    24e0:	3701      	adds	r7, #1
    24e2:	e7e9      	b.n	24b8 <parsePreset+0x878>
			params[i].objectNumber = 2;
    24e4:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    24e8:	4b2a      	ldr	r3, [pc, #168]	; (2594 <parsePreset+0x954>)
    24ea:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    24ee:	2202      	movs	r2, #2
    24f0:	761a      	strb	r2, [r3, #24]
    24f2:	e7e0      	b.n	24b6 <parsePreset+0x876>
			params[i].objectNumber = 1;
    24f4:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    24f8:	4b26      	ldr	r3, [pc, #152]	; (2594 <parsePreset+0x954>)
    24fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    24fe:	2201      	movs	r2, #1
    2500:	761a      	strb	r2, [r3, #24]
    2502:	e7d8      	b.n	24b6 <parsePreset+0x876>
			params[i].objectNumber = 1;
    2504:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    2508:	4b22      	ldr	r3, [pc, #136]	; (2594 <parsePreset+0x954>)
    250a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    250e:	2201      	movs	r2, #1
    2510:	761a      	strb	r2, [r3, #24]
    2512:	e7d0      	b.n	24b6 <parsePreset+0x876>
			params[i].objectNumber = 2;
    2514:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    2518:	4b1e      	ldr	r3, [pc, #120]	; (2594 <parsePreset+0x954>)
    251a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    251e:	2202      	movs	r2, #2
    2520:	761a      	strb	r2, [r3, #24]
    2522:	e7c8      	b.n	24b6 <parsePreset+0x876>
			params[i].objectNumber = 3;
    2524:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    2528:	4b1a      	ldr	r3, [pc, #104]	; (2594 <parsePreset+0x954>)
    252a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    252e:	2203      	movs	r2, #3
    2530:	761a      	strb	r2, [r3, #24]
    2532:	e7c0      	b.n	24b6 <parsePreset+0x876>
			params[i].objectNumber = 1;
    2534:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    2538:	4b16      	ldr	r3, [pc, #88]	; (2594 <parsePreset+0x954>)
    253a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    253e:	2201      	movs	r2, #1
    2540:	761a      	strb	r2, [r3, #24]
    2542:	e7b8      	b.n	24b6 <parsePreset+0x876>
			params[i].objectNumber = 2;
    2544:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    2548:	4b12      	ldr	r3, [pc, #72]	; (2594 <parsePreset+0x954>)
    254a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    254e:	2202      	movs	r2, #2
    2550:	761a      	strb	r2, [r3, #24]
    2552:	e7b0      	b.n	24b6 <parsePreset+0x876>
			params[i].objectNumber = 3;
    2554:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    2558:	4b0e      	ldr	r3, [pc, #56]	; (2594 <parsePreset+0x954>)
    255a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    255e:	2203      	movs	r2, #3
    2560:	761a      	strb	r2, [r3, #24]
    2562:	e7a8      	b.n	24b6 <parsePreset+0x876>
			params[i].objectNumber = 1;
    2564:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    2568:	4b0a      	ldr	r3, [pc, #40]	; (2594 <parsePreset+0x954>)
    256a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    256e:	2201      	movs	r2, #1
    2570:	761a      	strb	r2, [r3, #24]
    2572:	e7a0      	b.n	24b6 <parsePreset+0x876>
			params[i].objectNumber = 2;
    2574:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    2578:	4b06      	ldr	r3, [pc, #24]	; (2594 <parsePreset+0x954>)
    257a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    257e:	2202      	movs	r2, #2
    2580:	761a      	strb	r2, [r3, #24]
    2582:	e798      	b.n	24b6 <parsePreset+0x876>
			params[i].objectNumber = 3;
    2584:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    2588:	4b02      	ldr	r3, [pc, #8]	; (2594 <parsePreset+0x954>)
    258a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    258e:	2203      	movs	r2, #3
    2590:	761a      	strb	r2, [r3, #24]
    2592:	e790      	b.n	24b6 <parsePreset+0x876>
    2594:	200190dc 	.word	0x200190dc
    2598:	00008141 	.word	0x00008141
    259c:	000081e1 	.word	0x000081e1
    25a0:	000081a1 	.word	0x000081a1
    25a4:	000068a1 	.word	0x000068a1
    25a8:	000068c1 	.word	0x000068c1
    25ac:	000068e1 	.word	0x000068e1
    25b0:	00006921 	.word	0x00006921
    25b4:	00006261 	.word	0x00006261
    25b8:	000062c1 	.word	0x000062c1
    25bc:	2001453c 	.word	0x2001453c
    25c0:	00007321 	.word	0x00007321
    25c4:	00007341 	.word	0x00007341
    25c8:	20016590 	.word	0x20016590
    25cc:	000067a1 	.word	0x000067a1
    25d0:	000067e1 	.word	0x000067e1
    25d4:	00006801 	.word	0x00006801
    25d8:	00006841 	.word	0x00006841
    25dc:	200186bc 	.word	0x200186bc
    25e0:	00006881 	.word	0x00006881
    25e4:	00006761 	.word	0x00006761
	for (int i = 0; i < NUM_PARAMS; i++)
    25e8:	3601      	adds	r6, #1
    25ea:	2e9b      	cmp	r6, #155	; 0x9b
    25ec:	f300 80fa 	bgt.w	27e4 <parsePreset+0xba4>
		params[i].objectNumber = 0;
    25f0:	ebc6 02c6 	rsb	r2, r6, r6, lsl #3
    25f4:	4bd1      	ldr	r3, [pc, #836]	; (293c <parsePreset+0xcfc>)
    25f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    25fa:	2200      	movs	r2, #0
    25fc:	761a      	strb	r2, [r3, #24]
		if ((i >= Osc1) && (i < Osc2))
    25fe:	f1a6 0318 	sub.w	r3, r6, #24
    2602:	2b0c      	cmp	r3, #12
    2604:	f67f af57 	bls.w	24b6 <parsePreset+0x876>
		else if ((i >= Osc2) && (i < Osc3))
    2608:	f1a6 0325 	sub.w	r3, r6, #37	; 0x25
    260c:	2b72      	cmp	r3, #114	; 0x72
    260e:	f63f af52 	bhi.w	24b6 <parsePreset+0x876>
    2612:	a201      	add	r2, pc, #4	; (adr r2, 2618 <parsePreset+0x9d8>)
    2614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2618:	000024a9 	.word	0x000024a9
    261c:	000024a9 	.word	0x000024a9
    2620:	000024a9 	.word	0x000024a9
    2624:	000024a9 	.word	0x000024a9
    2628:	000024a9 	.word	0x000024a9
    262c:	000024a9 	.word	0x000024a9
    2630:	000024a9 	.word	0x000024a9
    2634:	000024a9 	.word	0x000024a9
    2638:	000024a9 	.word	0x000024a9
    263c:	000024a9 	.word	0x000024a9
    2640:	000024a9 	.word	0x000024a9
    2644:	000024a9 	.word	0x000024a9
    2648:	000024a9 	.word	0x000024a9
    264c:	000024e5 	.word	0x000024e5
    2650:	000024e5 	.word	0x000024e5
    2654:	000024e5 	.word	0x000024e5
    2658:	000024e5 	.word	0x000024e5
    265c:	000024e5 	.word	0x000024e5
    2660:	000024e5 	.word	0x000024e5
    2664:	000024e5 	.word	0x000024e5
    2668:	000024e5 	.word	0x000024e5
    266c:	000024e5 	.word	0x000024e5
    2670:	000024e5 	.word	0x000024e5
    2674:	000024e5 	.word	0x000024e5
    2678:	000024e5 	.word	0x000024e5
    267c:	000024e5 	.word	0x000024e5
    2680:	000024b7 	.word	0x000024b7
    2684:	000024b7 	.word	0x000024b7
    2688:	000024b7 	.word	0x000024b7
    268c:	000024b7 	.word	0x000024b7
    2690:	000024b7 	.word	0x000024b7
    2694:	000024b7 	.word	0x000024b7
    2698:	000024b7 	.word	0x000024b7
    269c:	000024b7 	.word	0x000024b7
    26a0:	00002565 	.word	0x00002565
    26a4:	00002565 	.word	0x00002565
    26a8:	00002565 	.word	0x00002565
    26ac:	00002565 	.word	0x00002565
    26b0:	00002565 	.word	0x00002565
    26b4:	00002565 	.word	0x00002565
    26b8:	00002565 	.word	0x00002565
    26bc:	00002565 	.word	0x00002565
    26c0:	00002575 	.word	0x00002575
    26c4:	00002575 	.word	0x00002575
    26c8:	00002575 	.word	0x00002575
    26cc:	00002575 	.word	0x00002575
    26d0:	00002575 	.word	0x00002575
    26d4:	00002575 	.word	0x00002575
    26d8:	00002575 	.word	0x00002575
    26dc:	00002575 	.word	0x00002575
    26e0:	00002585 	.word	0x00002585
    26e4:	00002585 	.word	0x00002585
    26e8:	00002585 	.word	0x00002585
    26ec:	00002585 	.word	0x00002585
    26f0:	00002585 	.word	0x00002585
    26f4:	00002585 	.word	0x00002585
    26f8:	00002585 	.word	0x00002585
    26fc:	00002585 	.word	0x00002585
    2700:	000024b7 	.word	0x000024b7
    2704:	000024b7 	.word	0x000024b7
    2708:	000024b7 	.word	0x000024b7
    270c:	000024b7 	.word	0x000024b7
    2710:	000024b7 	.word	0x000024b7
    2714:	000024b7 	.word	0x000024b7
    2718:	000024f5 	.word	0x000024f5
    271c:	000024f5 	.word	0x000024f5
    2720:	000024f5 	.word	0x000024f5
    2724:	000024f5 	.word	0x000024f5
    2728:	000024f5 	.word	0x000024f5
    272c:	000024f5 	.word	0x000024f5
    2730:	000024f5 	.word	0x000024f5
    2734:	000024b7 	.word	0x000024b7
    2738:	000024b7 	.word	0x000024b7
    273c:	000024b7 	.word	0x000024b7
    2740:	000024b7 	.word	0x000024b7
    2744:	000024b7 	.word	0x000024b7
    2748:	000024b7 	.word	0x000024b7
    274c:	00002505 	.word	0x00002505
    2750:	00002505 	.word	0x00002505
    2754:	00002505 	.word	0x00002505
    2758:	00002505 	.word	0x00002505
    275c:	00002505 	.word	0x00002505
    2760:	00002505 	.word	0x00002505
    2764:	00002515 	.word	0x00002515
    2768:	00002515 	.word	0x00002515
    276c:	00002515 	.word	0x00002515
    2770:	00002515 	.word	0x00002515
    2774:	00002515 	.word	0x00002515
    2778:	00002515 	.word	0x00002515
    277c:	00002525 	.word	0x00002525
    2780:	00002525 	.word	0x00002525
    2784:	00002525 	.word	0x00002525
    2788:	00002525 	.word	0x00002525
    278c:	00002525 	.word	0x00002525
    2790:	00002525 	.word	0x00002525
    2794:	000024b7 	.word	0x000024b7
    2798:	000024b7 	.word	0x000024b7
    279c:	000024b7 	.word	0x000024b7
    27a0:	000024b7 	.word	0x000024b7
    27a4:	000024b7 	.word	0x000024b7
    27a8:	00002535 	.word	0x00002535
    27ac:	00002535 	.word	0x00002535
    27b0:	00002535 	.word	0x00002535
    27b4:	00002535 	.word	0x00002535
    27b8:	00002535 	.word	0x00002535
    27bc:	00002545 	.word	0x00002545
    27c0:	00002545 	.word	0x00002545
    27c4:	00002545 	.word	0x00002545
    27c8:	00002545 	.word	0x00002545
    27cc:	00002545 	.word	0x00002545
    27d0:	00002555 	.word	0x00002555
    27d4:	00002555 	.word	0x00002555
    27d8:	00002555 	.word	0x00002555
    27dc:	00002555 	.word	0x00002555
    27e0:	00002555 	.word	0x00002555
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    27e4:	4644      	mov	r4, r8
    27e6:	4b55      	ldr	r3, [pc, #340]	; (293c <parsePreset+0xcfc>)
    27e8:	edd3 7a02 	vldr	s15, [r3, #8]
    27ec:	eddf 6a54 	vldr	s13, [pc, #336]	; 2940 <parsePreset+0xd00>
    27f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    27f4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    27f8:	ee27 7a26 	vmul.f32	s14, s14, s13
    27fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    2800:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    2804:	eec6 6a27 	vdiv.f32	s13, s12, s15
    2808:	4a4e      	ldr	r2, [pc, #312]	; (2944 <parsePreset+0xd04>)
    280a:	edc2 6a00 	vstr	s13, [r2]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    280e:	4a4e      	ldr	r2, [pc, #312]	; (2948 <parsePreset+0xd08>)
    2810:	ed82 7a00 	vstr	s14, [r2]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    2818:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
    281c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2820:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2828:	bfcc      	ite	gt
    282a:	2201      	movgt	r2, #1
    282c:	2200      	movle	r2, #0
    282e:	4b47      	ldr	r3, [pc, #284]	; (294c <parsePreset+0xd0c>)
    2830:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    2832:	f1bb 0f00 	cmp.w	fp, #0
    2836:	d012      	beq.n	285e <parsePreset+0xc1e>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    2838:	4b45      	ldr	r3, [pc, #276]	; (2950 <parsePreset+0xd10>)
    283a:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
    283e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    2842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2846:	bfcc      	ite	gt
    2848:	2201      	movgt	r2, #1
    284a:	2200      	movle	r2, #0
    284c:	4b41      	ldr	r3, [pc, #260]	; (2954 <parsePreset+0xd14>)
    284e:	701a      	strb	r2, [r3, #0]
	bufferIndex += 2;
    2850:	3504      	adds	r5, #4
    2852:	b2ab      	uxth	r3, r5
    2854:	461e      	mov	r6, r3
	numMappings = 0;
    2856:	2300      	movs	r3, #0
    2858:	4a3f      	ldr	r2, [pc, #252]	; (2958 <parsePreset+0xd18>)
    285a:	7013      	strb	r3, [r2, #0]
	for (int i = 0; i < NUM_LFOS; i++)
    285c:	e007      	b.n	286e <parsePreset+0xc2e>
		pedalControlsMaster = 1;
    285e:	4b3d      	ldr	r3, [pc, #244]	; (2954 <parsePreset+0xd14>)
    2860:	2201      	movs	r2, #1
    2862:	701a      	strb	r2, [r3, #0]
    2864:	e7f4      	b.n	2850 <parsePreset+0xc10>
		lfoOn[i] = 0;
    2866:	4a3d      	ldr	r2, [pc, #244]	; (295c <parsePreset+0xd1c>)
    2868:	2100      	movs	r1, #0
    286a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < NUM_LFOS; i++)
    286c:	3301      	adds	r3, #1
    286e:	2b03      	cmp	r3, #3
    2870:	ddf9      	ble.n	2866 <parsePreset+0xc26>
	for (int i = 0; i < NUM_ENV; i++)
    2872:	2300      	movs	r3, #0
    2874:	e003      	b.n	287e <parsePreset+0xc3e>
		envOn[i] = 0;
    2876:	4a3a      	ldr	r2, [pc, #232]	; (2960 <parsePreset+0xd20>)
    2878:	2100      	movs	r1, #0
    287a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < NUM_ENV; i++)
    287c:	3301      	adds	r3, #1
    287e:	2b03      	cmp	r3, #3
    2880:	ddf9      	ble.n	2876 <parsePreset+0xc36>
	for (int i = 0; i < 12; i++)
    2882:	2300      	movs	r3, #0
    2884:	e003      	b.n	288e <parsePreset+0xc4e>
		knobFrozen[i] = 0;
    2886:	4a37      	ldr	r2, [pc, #220]	; (2964 <parsePreset+0xd24>)
    2888:	2100      	movs	r1, #0
    288a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 12; i++)
    288c:	3301      	adds	r3, #1
    288e:	2b0b      	cmp	r3, #11
    2890:	ddf9      	ble.n	2886 <parsePreset+0xc46>
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2892:	2100      	movs	r1, #0
    2894:	e010      	b.n	28b8 <parsePreset+0xc78>
		mappings[i].destNumber = 255;
    2896:	4834      	ldr	r0, [pc, #208]	; (2968 <parsePreset+0xd28>)
    2898:	224c      	movs	r2, #76	; 0x4c
    289a:	fb01 f202 	mul.w	r2, r1, r2
    289e:	1883      	adds	r3, r0, r2
    28a0:	25ff      	movs	r5, #255	; 0xff
    28a2:	5485      	strb	r5, [r0, r2]
		mappings[i].hookActive[0] = 0;
    28a4:	2200      	movs	r2, #0
    28a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
		mappings[i].hookActive[1] = 0;
    28aa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
		mappings[i].hookActive[2] = 0;
    28ae:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		mappings[i].numHooks = 0;
    28b2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    28b6:	3101      	adds	r1, #1
    28b8:	291f      	cmp	r1, #31
    28ba:	ddec      	ble.n	2896 <parsePreset+0xc56>
	for (int i = 0; i < mappingCount; i++)
    28bc:	2300      	movs	r3, #0
    28be:	9301      	str	r3, [sp, #4]
    28c0:	465d      	mov	r5, fp
    28c2:	46b3      	mov	fp, r6
    28c4:	9405      	str	r4, [sp, #20]
    28c6:	e15f      	b.n	2b88 <parsePreset+0xf48>
				foundOne = 1;
    28c8:	2601      	movs	r6, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    28ca:	3301      	adds	r3, #1
    28cc:	2b1f      	cmp	r3, #31
    28ce:	dc12      	bgt.n	28f6 <parsePreset+0xcb6>
			if (mappings[j].destNumber == destNumber)
    28d0:	224c      	movs	r2, #76	; 0x4c
    28d2:	fb03 f202 	mul.w	r2, r3, r2
    28d6:	4f24      	ldr	r7, [pc, #144]	; (2968 <parsePreset+0xd28>)
    28d8:	5cba      	ldrb	r2, [r7, r2]
    28da:	42a2      	cmp	r2, r4
    28dc:	d1f5      	bne.n	28ca <parsePreset+0xc8a>
				whichMapping = j;
    28de:	b2d9      	uxtb	r1, r3
				if (presetVersionNumber == 0)
    28e0:	2d00      	cmp	r5, #0
    28e2:	d1f1      	bne.n	28c8 <parsePreset+0xc88>
					whichHook = mappings[j].numHooks;
    28e4:	204c      	movs	r0, #76	; 0x4c
    28e6:	fb00 7203 	mla	r2, r0, r3, r7
    28ea:	f892 004b 	ldrb.w	r0, [r2, #75]	; 0x4b
				foundOne = 1;
    28ee:	2601      	movs	r6, #1
    28f0:	e7eb      	b.n	28ca <parsePreset+0xc8a>
		uint8_t whichHook = 0;
    28f2:	2000      	movs	r0, #0
    28f4:	e157      	b.n	2ba6 <parsePreset+0xf66>
		if (foundOne == 0)
    28f6:	b98e      	cbnz	r6, 291c <parsePreset+0xcdc>
			whichMapping = numMappings;
    28f8:	4b17      	ldr	r3, [pc, #92]	; (2958 <parsePreset+0xd18>)
    28fa:	7819      	ldrb	r1, [r3, #0]
			numMappings++;
    28fc:	1c4a      	adds	r2, r1, #1
    28fe:	701a      	strb	r2, [r3, #0]
			if (presetVersionNumber == 0)
    2900:	b905      	cbnz	r5, 2904 <parsePreset+0xcc4>
				whichHook = 0;
    2902:	4630      	mov	r0, r6
			mappings[whichMapping].destNumber = destNumber;
    2904:	4e18      	ldr	r6, [pc, #96]	; (2968 <parsePreset+0xd28>)
    2906:	234c      	movs	r3, #76	; 0x4c
    2908:	fb01 f303 	mul.w	r3, r1, r3
    290c:	18f2      	adds	r2, r6, r3
    290e:	54f4      	strb	r4, [r6, r3]
			mappings[whichMapping].dest = &params[destNumber];
    2910:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    2914:	4b09      	ldr	r3, [pc, #36]	; (293c <parsePreset+0xcfc>)
    2916:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    291a:	6053      	str	r3, [r2, #4]
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
    291c:	460c      	mov	r4, r1
    291e:	4681      	mov	r9, r0
    2920:	4b11      	ldr	r3, [pc, #68]	; (2968 <parsePreset+0xd28>)
    2922:	224c      	movs	r2, #76	; 0x4c
    2924:	fb02 3301 	mla	r3, r2, r1, r3
    2928:	4403      	add	r3, r0
    292a:	2201      	movs	r2, #1
    292c:	f883 2020 	strb.w	r2, [r3, #32]
		int source = buffer[bufferIndex];
    2930:	4b0e      	ldr	r3, [pc, #56]	; (296c <parsePreset+0xd2c>)
    2932:	f813 600a 	ldrb.w	r6, [r3, sl]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2936:	2200      	movs	r2, #0
    2938:	e02b      	b.n	2992 <parsePreset+0xd52>
    293a:	bf00      	nop
    293c:	200190dc 	.word	0x200190dc
    2940:	42fe0000 	.word	0x42fe0000
    2944:	200190c0 	.word	0x200190c0
    2948:	200190c4 	.word	0x200190c4
    294c:	200166b9 	.word	0x200166b9
    2950:	2001a0dc 	.word	0x2001a0dc
    2954:	2001a1ec 	.word	0x2001a1ec
    2958:	200190cc 	.word	0x200190cc
    295c:	2001d2c4 	.word	0x2001d2c4
    2960:	2001d140 	.word	0x2001d140
    2964:	200053cc 	.word	0x200053cc
    2968:	20018740 	.word	0x20018740
    296c:	30042380 	.word	0x30042380
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2970:	eb02 0346 	add.w	r3, r2, r6, lsl #1
    2974:	49bb      	ldr	r1, [pc, #748]	; (2c64 <parsePreset+0x1024>)
    2976:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    297a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    297e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    2982:	eb03 0349 	add.w	r3, r3, r9, lsl #1
    2986:	4413      	add	r3, r2
    2988:	3302      	adds	r3, #2
    298a:	48b7      	ldr	r0, [pc, #732]	; (2c68 <parsePreset+0x1028>)
    298c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2990:	3201      	adds	r2, #1
    2992:	2a01      	cmp	r2, #1
    2994:	ddec      	ble.n	2970 <parsePreset+0xd30>
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2996:	2e03      	cmp	r6, #3
    2998:	dc07      	bgt.n	29aa <parsePreset+0xd6a>
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
    299a:	4bb3      	ldr	r3, [pc, #716]	; (2c68 <parsePreset+0x1028>)
    299c:	224c      	movs	r2, #76	; 0x4c
    299e:	fb02 3304 	mla	r3, r2, r4, r3
    29a2:	444b      	add	r3, r9
    29a4:	2200      	movs	r2, #0
    29a6:	f883 2020 	strb.w	r2, [r3, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    29aa:	f1a6 0318 	sub.w	r3, r6, #24
    29ae:	2b03      	cmp	r3, #3
    29b0:	d802      	bhi.n	29b8 <parsePreset+0xd78>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    29b2:	4aae      	ldr	r2, [pc, #696]	; (2c6c <parsePreset+0x102c>)
    29b4:	2101      	movs	r1, #1
    29b6:	54d1      	strb	r1, [r2, r3]
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    29b8:	f1a6 0314 	sub.w	r3, r6, #20
    29bc:	2b03      	cmp	r3, #3
    29be:	d802      	bhi.n	29c6 <parsePreset+0xd86>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    29c0:	4aab      	ldr	r2, [pc, #684]	; (2c70 <parsePreset+0x1030>)
    29c2:	2101      	movs	r1, #1
    29c4:	54d1      	strb	r1, [r2, r3]
		if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    29c6:	2e02      	cmp	r6, #2
    29c8:	d802      	bhi.n	29d0 <parsePreset+0xd90>
			oscOn[source - OSC_SOURCE_OFFSET] = 1;
    29ca:	4baa      	ldr	r3, [pc, #680]	; (2c74 <parsePreset+0x1034>)
    29cc:	2201      	movs	r2, #1
    29ce:	559a      	strb	r2, [r3, r6]
		if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    29d0:	2e03      	cmp	r6, #3
    29d2:	d00a      	beq.n	29ea <parsePreset+0xdaa>
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    29d4:	1f33      	subs	r3, r6, #4
    29d6:	9302      	str	r3, [sp, #8]
    29d8:	2b0b      	cmp	r3, #11
    29da:	d90a      	bls.n	29f2 <parsePreset+0xdb2>
		int scalar = buffer[bufferIndex+2];
    29dc:	f10a 0302 	add.w	r3, sl, #2
    29e0:	4aa5      	ldr	r2, [pc, #660]	; (2c78 <parsePreset+0x1038>)
    29e2:	f812 8003 	ldrb.w	r8, [r2, r3]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    29e6:	2700      	movs	r7, #0
    29e8:	e040      	b.n	2a6c <parsePreset+0xe2c>
			noiseOn = 1;
    29ea:	4ba4      	ldr	r3, [pc, #656]	; (2c7c <parsePreset+0x103c>)
    29ec:	2201      	movs	r2, #1
    29ee:	701a      	strb	r2, [r3, #0]
    29f0:	e7f0      	b.n	29d4 <parsePreset+0xd94>
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    29f2:	b2df      	uxtb	r7, r3
			for (int v = 0; v < numStringsThisBoard; v++)
    29f4:	2200      	movs	r2, #0
    29f6:	4ba2      	ldr	r3, [pc, #648]	; (2c80 <parsePreset+0x1040>)
    29f8:	781b      	ldrb	r3, [r3, #0]
    29fa:	4293      	cmp	r3, r2
    29fc:	dd10      	ble.n	2a20 <parsePreset+0xde0>
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    29fe:	1cfb      	adds	r3, r7, #3
    2a00:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    2a04:	4413      	add	r3, r2
    2a06:	3302      	adds	r3, #2
    2a08:	499e      	ldr	r1, [pc, #632]	; (2c84 <parsePreset+0x1044>)
    2a0a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    2a0e:	6819      	ldr	r1, [r3, #0]
    2a10:	eb02 0046 	add.w	r0, r2, r6, lsl #1
    2a14:	4b93      	ldr	r3, [pc, #588]	; (2c64 <parsePreset+0x1024>)
    2a16:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    2a1a:	6019      	str	r1, [r3, #0]
			for (int v = 0; v < numStringsThisBoard; v++)
    2a1c:	3201      	adds	r2, #1
    2a1e:	e7ea      	b.n	29f6 <parsePreset+0xdb6>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2a20:	1cfb      	adds	r3, r7, #3
    2a22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    2a26:	4a97      	ldr	r2, [pc, #604]	; (2c84 <parsePreset+0x1044>)
    2a28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2a2c:	ed93 0a02 	vldr	s0, [r3, #8]
    2a30:	4895      	ldr	r0, [pc, #596]	; (2c88 <parsePreset+0x1048>)
    2a32:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    2a36:	f006 fe67 	bl	9708 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[whichMacro] = 1;
    2a3a:	4b94      	ldr	r3, [pc, #592]	; (2c8c <parsePreset+0x104c>)
    2a3c:	2201      	movs	r2, #1
    2a3e:	55da      	strb	r2, [r3, r7]
    2a40:	e7cc      	b.n	29dc <parsePreset+0xd9c>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    2a42:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2a46:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    2a4a:	eb03 0349 	add.w	r3, r3, r9, lsl #1
    2a4e:	443b      	add	r3, r7
    2a50:	3308      	adds	r3, #8
    2a52:	4a85      	ldr	r2, [pc, #532]	; (2c68 <parsePreset+0x1028>)
    2a54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2a58:	4a8d      	ldr	r2, [pc, #564]	; (2c90 <parsePreset+0x1050>)
    2a5a:	605a      	str	r2, [r3, #4]
    2a5c:	e005      	b.n	2a6a <parsePreset+0xe2a>
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2a5e:	f1b8 0f03 	cmp.w	r8, #3
    2a62:	d02f      	beq.n	2ac4 <parsePreset+0xe84>
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2a64:	9b02      	ldr	r3, [sp, #8]
    2a66:	2b0b      	cmp	r3, #11
    2a68:	d930      	bls.n	2acc <parsePreset+0xe8c>
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2a6a:	3701      	adds	r7, #1
    2a6c:	2f01      	cmp	r7, #1
    2a6e:	dc59      	bgt.n	2b24 <parsePreset+0xee4>
			if (scalar == 0xff)
    2a70:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    2a74:	d0e5      	beq.n	2a42 <parsePreset+0xe02>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2a76:	eb07 0348 	add.w	r3, r7, r8, lsl #1
    2a7a:	4a7a      	ldr	r2, [pc, #488]	; (2c64 <parsePreset+0x1024>)
    2a7c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    2a80:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2a84:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    2a88:	eb03 0349 	add.w	r3, r3, r9, lsl #1
    2a8c:	443b      	add	r3, r7
    2a8e:	3308      	adds	r3, #8
    2a90:	4975      	ldr	r1, [pc, #468]	; (2c68 <parsePreset+0x1028>)
    2a92:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    2a96:	605a      	str	r2, [r3, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2a98:	f1a8 0318 	sub.w	r3, r8, #24
    2a9c:	2b03      	cmp	r3, #3
    2a9e:	d802      	bhi.n	2aa6 <parsePreset+0xe66>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2aa0:	4a72      	ldr	r2, [pc, #456]	; (2c6c <parsePreset+0x102c>)
    2aa2:	2101      	movs	r1, #1
    2aa4:	54d1      	strb	r1, [r2, r3]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2aa6:	f1a8 0314 	sub.w	r3, r8, #20
    2aaa:	2b03      	cmp	r3, #3
    2aac:	d802      	bhi.n	2ab4 <parsePreset+0xe74>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    2aae:	4a70      	ldr	r2, [pc, #448]	; (2c70 <parsePreset+0x1030>)
    2ab0:	2101      	movs	r1, #1
    2ab2:	54d1      	strb	r1, [r2, r3]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2ab4:	f1b8 0f02 	cmp.w	r8, #2
    2ab8:	d8d1      	bhi.n	2a5e <parsePreset+0xe1e>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2aba:	4b6e      	ldr	r3, [pc, #440]	; (2c74 <parsePreset+0x1034>)
    2abc:	2201      	movs	r2, #1
    2abe:	f803 2008 	strb.w	r2, [r3, r8]
    2ac2:	e7cc      	b.n	2a5e <parsePreset+0xe1e>
					noiseOn = 1;
    2ac4:	4b6d      	ldr	r3, [pc, #436]	; (2c7c <parsePreset+0x103c>)
    2ac6:	2201      	movs	r2, #1
    2ac8:	701a      	strb	r2, [r3, #0]
    2aca:	e7cb      	b.n	2a64 <parsePreset+0xe24>
					uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    2acc:	1f33      	subs	r3, r6, #4
    2ace:	b2d9      	uxtb	r1, r3
    2ad0:	9104      	str	r1, [sp, #16]
					for (int v = 0; v < numStringsThisBoard; v++)
    2ad2:	2200      	movs	r2, #0
    2ad4:	e00f      	b.n	2af6 <parsePreset+0xeb6>
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2ad6:	1ccb      	adds	r3, r1, #3
    2ad8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    2adc:	4413      	add	r3, r2
    2ade:	3302      	adds	r3, #2
    2ae0:	4868      	ldr	r0, [pc, #416]	; (2c84 <parsePreset+0x1044>)
    2ae2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    2ae6:	6818      	ldr	r0, [r3, #0]
    2ae8:	eb02 0c46 	add.w	ip, r2, r6, lsl #1
    2aec:	4b5d      	ldr	r3, [pc, #372]	; (2c64 <parsePreset+0x1024>)
    2aee:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    2af2:	6018      	str	r0, [r3, #0]
					for (int v = 0; v < numStringsThisBoard; v++)
    2af4:	3201      	adds	r2, #1
    2af6:	4b62      	ldr	r3, [pc, #392]	; (2c80 <parsePreset+0x1040>)
    2af8:	781b      	ldrb	r3, [r3, #0]
    2afa:	4293      	cmp	r3, r2
    2afc:	dceb      	bgt.n	2ad6 <parsePreset+0xe96>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2afe:	9904      	ldr	r1, [sp, #16]
    2b00:	1ccb      	adds	r3, r1, #3
    2b02:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    2b06:	4a5f      	ldr	r2, [pc, #380]	; (2c84 <parsePreset+0x1044>)
    2b08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b0c:	ed93 0a02 	vldr	s0, [r3, #8]
    2b10:	485d      	ldr	r0, [pc, #372]	; (2c88 <parsePreset+0x1048>)
    2b12:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2b16:	f006 fdf7 	bl	9708 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    2b1a:	4b5c      	ldr	r3, [pc, #368]	; (2c8c <parsePreset+0x104c>)
    2b1c:	2201      	movs	r2, #1
    2b1e:	9904      	ldr	r1, [sp, #16]
    2b20:	545a      	strb	r2, [r3, r1]
    2b22:	e7a2      	b.n	2a6a <parsePreset+0xe2a>
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2b24:	f10a 0203 	add.w	r2, sl, #3
    2b28:	4b53      	ldr	r3, [pc, #332]	; (2c78 <parsePreset+0x1038>)
    2b2a:	5c9a      	ldrb	r2, [r3, r2]
    2b2c:	f10a 0a04 	add.w	sl, sl, #4
    2b30:	f813 300a 	ldrb.w	r3, [r3, sl]
    2b34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    2b38:	b21b      	sxth	r3, r3
    2b3a:	ee07 3a90 	vmov	s15, r3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2b42:	ed9f 7a54 	vldr	s14, [pc, #336]	; 2c94 <parsePreset+0x1054>
    2b46:	ee67 7a87 	vmul.f32	s15, s15, s14
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2b4a:	4a47      	ldr	r2, [pc, #284]	; (2c68 <parsePreset+0x1028>)
    2b4c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2b50:	eb04 0343 	add.w	r3, r4, r3, lsl #1
    2b54:	444b      	add	r3, r9
    2b56:	330e      	adds	r3, #14
    2b58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2b5c:	edc3 7a01 	vstr	s15, [r3, #4]
		mappings[whichMapping].hookActive[whichHook] = 1;
    2b60:	234c      	movs	r3, #76	; 0x4c
    2b62:	fb03 2304 	mla	r3, r3, r4, r2
    2b66:	4499      	add	r9, r3
    2b68:	2201      	movs	r2, #1
    2b6a:	f889 2048 	strb.w	r2, [r9, #72]	; 0x48
		mappings[whichMapping].numHooks++;
    2b6e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
    2b72:	3201      	adds	r2, #1
    2b74:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		if (presetVersionNumber > 0)
    2b78:	b1cd      	cbz	r5, 2bae <parsePreset+0xf6e>
			bufferIndex += 6;
    2b7a:	f10b 0306 	add.w	r3, fp, #6
    2b7e:	fa1f fb83 	uxth.w	fp, r3
	for (int i = 0; i < mappingCount; i++)
    2b82:	9b01      	ldr	r3, [sp, #4]
    2b84:	3301      	adds	r3, #1
    2b86:	9301      	str	r3, [sp, #4]
    2b88:	9b03      	ldr	r3, [sp, #12]
    2b8a:	9a01      	ldr	r2, [sp, #4]
    2b8c:	4293      	cmp	r3, r2
    2b8e:	dd13      	ble.n	2bb8 <parsePreset+0xf78>
		uint8_t destNumber = buffer[bufferIndex+1];
    2b90:	46da      	mov	sl, fp
    2b92:	f10b 0301 	add.w	r3, fp, #1
    2b96:	4a38      	ldr	r2, [pc, #224]	; (2c78 <parsePreset+0x1038>)
    2b98:	5cd4      	ldrb	r4, [r2, r3]
		if (presetVersionNumber > 0)
    2b9a:	2d00      	cmp	r5, #0
    2b9c:	f43f aea9 	beq.w	28f2 <parsePreset+0xcb2>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    2ba0:	f10b 0305 	add.w	r3, fp, #5
    2ba4:	5cd0      	ldrb	r0, [r2, r3]
		uint8_t whichHook = 0;
    2ba6:	2300      	movs	r3, #0
    2ba8:	461e      	mov	r6, r3
    2baa:	4619      	mov	r1, r3
    2bac:	e68e      	b.n	28cc <parsePreset+0xc8c>
			bufferIndex += 5;
    2bae:	f10b 0305 	add.w	r3, fp, #5
    2bb2:	fa1f fb83 	uxth.w	fp, r3
    2bb6:	e7e4      	b.n	2b82 <parsePreset+0xf42>
    2bb8:	9c05      	ldr	r4, [sp, #20]
    2bba:	2500      	movs	r5, #0
    2bbc:	e06f      	b.n	2c9e <parsePreset+0x105e>
				for (int j = 0; j < 3; j++)
    2bbe:	3201      	adds	r2, #1
    2bc0:	2a02      	cmp	r2, #2
    2bc2:	dc28      	bgt.n	2c16 <parsePreset+0xfd6>
					if (mappings[i].hookActive[j])
    2bc4:	4b28      	ldr	r3, [pc, #160]	; (2c68 <parsePreset+0x1028>)
    2bc6:	214c      	movs	r1, #76	; 0x4c
    2bc8:	fb01 3305 	mla	r3, r1, r5, r3
    2bcc:	4413      	add	r3, r2
    2bce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	d0f3      	beq.n	2bbe <parsePreset+0xf7e>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2bd6:	4824      	ldr	r0, [pc, #144]	; (2c68 <parsePreset+0x1028>)
    2bd8:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    2bdc:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    2be0:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2be4:	4431      	add	r1, r6
    2be6:	1c8f      	adds	r7, r1, #2
    2be8:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    2bec:	edd7 7a00 	vldr	s15, [r7]
    2bf0:	4413      	add	r3, r2
    2bf2:	330e      	adds	r3, #14
    2bf4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    2bf8:	edd3 6a01 	vldr	s13, [r3, #4]
    2bfc:	ee67 7aa6 	vmul.f32	s15, s15, s13
    2c00:	3108      	adds	r1, #8
    2c02:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    2c06:	6843      	ldr	r3, [r0, #4]
    2c08:	edd3 6a00 	vldr	s13, [r3]
    2c0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
						unsmoothedValue += sum;
    2c10:	ee37 7a27 	vadd.f32	s14, s14, s15
    2c14:	e7d3      	b.n	2bbe <parsePreset+0xf7e>
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2c16:	4b14      	ldr	r3, [pc, #80]	; (2c68 <parsePreset+0x1028>)
    2c18:	224c      	movs	r2, #76	; 0x4c
    2c1a:	fb02 3805 	mla	r8, r2, r5, r3
    2c1e:	f8d8 7004 	ldr.w	r7, [r8, #4]
    2c22:	eb07 0386 	add.w	r3, r7, r6, lsl #2
    2c26:	ed93 0a00 	vldr	s0, [r3]
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2c2a:	693b      	ldr	r3, [r7, #16]
    2c2c:	ee30 0a07 	vadd.f32	s0, s0, s14
    2c30:	4798      	blx	r3
    2c32:	1cb3      	adds	r3, r6, #2
    2c34:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    2c38:	ed87 0a00 	vstr	s0, [r7]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2c3c:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2c40:	6957      	ldr	r7, [r2, #20]
    2c42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2c46:	4631      	mov	r1, r6
    2c48:	7e10      	ldrb	r0, [r2, #24]
    2c4a:	ed93 0a00 	vldr	s0, [r3]
    2c4e:	47b8      	blx	r7
			for (int v = 0; v < numStringsThisBoard; v++)
    2c50:	3601      	adds	r6, #1
    2c52:	4b0b      	ldr	r3, [pc, #44]	; (2c80 <parsePreset+0x1040>)
    2c54:	781b      	ldrb	r3, [r3, #0]
    2c56:	42b3      	cmp	r3, r6
    2c58:	dd20      	ble.n	2c9c <parsePreset+0x105c>
				for (int j = 0; j < 3; j++)
    2c5a:	2200      	movs	r2, #0
				float unsmoothedValue = 0.0f;
    2c5c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 2c98 <parsePreset+0x1058>
    2c60:	e7ae      	b.n	2bc0 <parsePreset+0xf80>
    2c62:	bf00      	nop
    2c64:	2001d77c 	.word	0x2001d77c
    2c68:	20018740 	.word	0x20018740
    2c6c:	2001d2c4 	.word	0x2001d2c4
    2c70:	2001d140 	.word	0x2001d140
    2c74:	2001d55c 	.word	0x2001d55c
    2c78:	30042380 	.word	0x30042380
    2c7c:	2001d508 	.word	0x2001d508
    2c80:	20000694 	.word	0x20000694
    2c84:	200190dc 	.word	0x200190dc
    2c88:	20005430 	.word	0x20005430
    2c8c:	200053cc 	.word	0x200053cc
    2c90:	200008b0 	.word	0x200008b0
    2c94:	37fffffc 	.word	0x37fffffc
    2c98:	00000000 	.word	0x00000000
	for (int i = 0; i < numMappings; i++)
    2c9c:	3501      	adds	r5, #1
    2c9e:	4b17      	ldr	r3, [pc, #92]	; (2cfc <parsePreset+0x10bc>)
    2ca0:	781b      	ldrb	r3, [r3, #0]
    2ca2:	42ab      	cmp	r3, r5
    2ca4:	dd08      	ble.n	2cb8 <parsePreset+0x1078>
		if (mappings[i].destNumber != 255)
    2ca6:	234c      	movs	r3, #76	; 0x4c
    2ca8:	fb05 f303 	mul.w	r3, r5, r3
    2cac:	4a14      	ldr	r2, [pc, #80]	; (2d00 <parsePreset+0x10c0>)
    2cae:	5cd3      	ldrb	r3, [r2, r3]
    2cb0:	2bff      	cmp	r3, #255	; 0xff
    2cb2:	d0f3      	beq.n	2c9c <parsePreset+0x105c>
			for (int v = 0; v < numStringsThisBoard; v++)
    2cb4:	2600      	movs	r6, #0
    2cb6:	e7cc      	b.n	2c52 <parsePreset+0x1012>
	audioFrameFunction = audioFrameSynth;
    2cb8:	4b12      	ldr	r3, [pc, #72]	; (2d04 <parsePreset+0x10c4>)
    2cba:	4a13      	ldr	r2, [pc, #76]	; (2d08 <parsePreset+0x10c8>)
    2cbc:	601a      	str	r2, [r3, #0]
	audioSwitchToSynth();
    2cbe:	f006 fb93 	bl	93e8 <__audioSwitchToSynth_veneer>
	presetWaitingToParse = 0;
    2cc2:	2500      	movs	r5, #0
    2cc4:	4b11      	ldr	r3, [pc, #68]	; (2d0c <parsePreset+0x10cc>)
    2cc6:	601d      	str	r5, [r3, #0]
	currentActivePreset = presetNumber;
    2cc8:	b2e4      	uxtb	r4, r4
    2cca:	4b11      	ldr	r3, [pc, #68]	; (2d10 <parsePreset+0x10d0>)
    2ccc:	701c      	strb	r4, [r3, #0]
	audioMasterLevel = 1.0f;
    2cce:	4b11      	ldr	r3, [pc, #68]	; (2d14 <parsePreset+0x10d4>)
    2cd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    2cd4:	601a      	str	r2, [r3, #0]
	oscToTick = NUM_OSC;
    2cd6:	4b10      	ldr	r3, [pc, #64]	; (2d18 <parsePreset+0x10d8>)
    2cd8:	2203      	movs	r2, #3
    2cda:	701a      	strb	r2, [r3, #0]
	overSampled = 1;
    2cdc:	2401      	movs	r4, #1
    2cde:	4b0f      	ldr	r3, [pc, #60]	; (2d1c <parsePreset+0x10dc>)
    2ce0:	601c      	str	r4, [r3, #0]
	changeOversampling(overSampled);
    2ce2:	4620      	mov	r0, r4
    2ce4:	f006 fbf8 	bl	94d8 <__changeOversampling_veneer>
    2ce8:	b662      	cpsie	i
	presetReady = 1;
    2cea:	4b0d      	ldr	r3, [pc, #52]	; (2d20 <parsePreset+0x10e0>)
    2cec:	601c      	str	r4, [r3, #0]
	diskBusy = 0;
    2cee:	4b0d      	ldr	r3, [pc, #52]	; (2d24 <parsePreset+0x10e4>)
    2cf0:	701d      	strb	r5, [r3, #0]
	receivingI2C = 0;
    2cf2:	4b0d      	ldr	r3, [pc, #52]	; (2d28 <parsePreset+0x10e8>)
    2cf4:	701d      	strb	r5, [r3, #0]
    2cf6:	f7ff b8f4 	b.w	1ee2 <parsePreset+0x2a2>
    2cfa:	bf00      	nop
    2cfc:	200190cc 	.word	0x200190cc
    2d00:	20018740 	.word	0x20018740
    2d04:	20001380 	.word	0x20001380
    2d08:	000088e1 	.word	0x000088e1
    2d0c:	2001a20c 	.word	0x2001a20c
    2d10:	200008ac 	.word	0x200008ac
    2d14:	200008a8 	.word	0x200008a8
    2d18:	20000ae8 	.word	0x20000ae8
    2d1c:	20000aec 	.word	0x20000aec
    2d20:	20005544 	.word	0x20005544
    2d24:	20014538 	.word	0x20014538
    2d28:	2001a664 	.word	0x2001a664
    2d2c:	f3af 8000 	nop.w
    2d30:	f3af 8000 	nop.w
    2d34:	f3af 8000 	nop.w
    2d38:	f3af 8000 	nop.w
    2d3c:	f3af 8000 	nop.w

00002d40 <handleSPI>:
{
    2d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2d44:	b082      	sub	sp, #8
    2d46:	4604      	mov	r4, r0
	interruptChecker = 1;
    2d48:	4b72      	ldr	r3, [pc, #456]	; (2f14 <handleSPI+0x1d4>)
    2d4a:	2201      	movs	r2, #1
    2d4c:	701a      	strb	r2, [r3, #0]
	if (foundBrainFirmware)
    2d4e:	4b72      	ldr	r3, [pc, #456]	; (2f18 <handleSPI+0x1d8>)
    2d50:	781a      	ldrb	r2, [r3, #0]
    2d52:	2a00      	cmp	r2, #0
    2d54:	f000 8086 	beq.w	2e64 <handleSPI+0x124>
		if (brainFirmwareEndSignal)
    2d58:	4b70      	ldr	r3, [pc, #448]	; (2f1c <handleSPI+0x1dc>)
    2d5a:	681b      	ldr	r3, [r3, #0]
    2d5c:	b1fb      	cbz	r3, 2d9e <handleSPI+0x5e>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    2d5e:	4b70      	ldr	r3, [pc, #448]	; (2f20 <handleSPI+0x1e0>)
    2d60:	22f9      	movs	r2, #249	; 0xf9
    2d62:	541a      	strb	r2, [r3, r0]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    2d64:	4a6f      	ldr	r2, [pc, #444]	; (2f24 <handleSPI+0x1e4>)
    2d66:	6812      	ldr	r2, [r2, #0]
    2d68:	0e10      	lsrs	r0, r2, #24
    2d6a:	1c61      	adds	r1, r4, #1
    2d6c:	5458      	strb	r0, [r3, r1]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    2d6e:	0c10      	lsrs	r0, r2, #16
    2d70:	1ca1      	adds	r1, r4, #2
    2d72:	5458      	strb	r0, [r3, r1]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    2d74:	0a10      	lsrs	r0, r2, #8
    2d76:	1ce1      	adds	r1, r4, #3
    2d78:	5458      	strb	r0, [r3, r1]
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    2d7a:	1d21      	adds	r1, r4, #4
    2d7c:	3a00      	subs	r2, #0
    2d7e:	bf18      	it	ne
    2d80:	2201      	movne	r2, #1
    2d82:	545a      	strb	r2, [r3, r1]
			SPI_LEVERS_TX[offset+31] = 254;
    2d84:	341f      	adds	r4, #31
    2d86:	22fe      	movs	r2, #254	; 0xfe
    2d88:	551a      	strb	r2, [r3, r4]
			brainFirmwareEndSignal = 0;
    2d8a:	2300      	movs	r3, #0
    2d8c:	4a63      	ldr	r2, [pc, #396]	; (2f1c <handleSPI+0x1dc>)
    2d8e:	6013      	str	r3, [r2, #0]
			brainFirmwareSendInProgress = 0;
    2d90:	4a65      	ldr	r2, [pc, #404]	; (2f28 <handleSPI+0x1e8>)
    2d92:	6013      	str	r3, [r2, #0]
			foundBrainFirmware = 0;
    2d94:	4a60      	ldr	r2, [pc, #384]	; (2f18 <handleSPI+0x1d8>)
    2d96:	7013      	strb	r3, [r2, #0]
}
    2d98:	b002      	add	sp, #8
    2d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		else if (brainFirmwareSendInProgress)
    2d9e:	4b62      	ldr	r3, [pc, #392]	; (2f28 <handleSPI+0x1e8>)
    2da0:	681b      	ldr	r3, [r3, #0]
    2da2:	2b00      	cmp	r3, #0
    2da4:	d046      	beq.n	2e34 <handleSPI+0xf4>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    2da6:	4b5e      	ldr	r3, [pc, #376]	; (2f20 <handleSPI+0x1e0>)
    2da8:	22fb      	movs	r2, #251	; 0xfb
    2daa:	541a      	strb	r2, [r3, r0]
			for (int i = 0; i < 30; i++)
    2dac:	2500      	movs	r5, #0
			uint8_t rowEnded = 0;
    2dae:	462f      	mov	r7, r5
			for (int i = 0; i < 30; i++)
    2db0:	e008      	b.n	2dc4 <handleSPI+0x84>
					rowEnded = 1;
    2db2:	2701      	movs	r7, #1
				positionInRowLine++;
    2db4:	3301      	adds	r3, #1
    2db6:	4a5d      	ldr	r2, [pc, #372]	; (2f2c <handleSPI+0x1ec>)
    2db8:	8013      	strh	r3, [r2, #0]
				if (rowEnded == 0)
    2dba:	b9bf      	cbnz	r7, 2dec <handleSPI+0xac>
					brainFirmwareBufferIndex += 2;
    2dbc:	3602      	adds	r6, #2
    2dbe:	4b5c      	ldr	r3, [pc, #368]	; (2f30 <handleSPI+0x1f0>)
    2dc0:	601e      	str	r6, [r3, #0]
			for (int i = 0; i < 30; i++)
    2dc2:	3501      	adds	r5, #1
    2dc4:	2d1d      	cmp	r5, #29
    2dc6:	dc27      	bgt.n	2e18 <handleSPI+0xd8>
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    2dc8:	4b59      	ldr	r3, [pc, #356]	; (2f30 <handleSPI+0x1f0>)
    2dca:	681e      	ldr	r6, [r3, #0]
    2dcc:	4b59      	ldr	r3, [pc, #356]	; (2f34 <handleSPI+0x1f4>)
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    2dce:	1c72      	adds	r2, r6, #1
				uint8_t valToSend = fromAscii(val1, val2);
    2dd0:	5c99      	ldrb	r1, [r3, r2]
    2dd2:	5d98      	ldrb	r0, [r3, r6]
    2dd4:	f006 fbe0 	bl	9598 <__fromAscii_veneer>
				if (positionInRowLine < 294)
    2dd8:	4b54      	ldr	r3, [pc, #336]	; (2f2c <handleSPI+0x1ec>)
    2dda:	881b      	ldrh	r3, [r3, #0]
    2ddc:	f5b3 7f93 	cmp.w	r3, #294	; 0x126
    2de0:	d2e7      	bcs.n	2db2 <handleSPI+0x72>
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    2de2:	1962      	adds	r2, r4, r5
    2de4:	3201      	adds	r2, #1
    2de6:	494e      	ldr	r1, [pc, #312]	; (2f20 <handleSPI+0x1e0>)
    2de8:	5488      	strb	r0, [r1, r2]
    2dea:	e7e3      	b.n	2db4 <handleSPI+0x74>
					positionInRowLine = 0;
    2dec:	2300      	movs	r3, #0
    2dee:	4a4f      	ldr	r2, [pc, #316]	; (2f2c <handleSPI+0x1ec>)
    2df0:	8013      	strh	r3, [r2, #0]
					for (uint8_t j = 0; j<10; j++)
    2df2:	e001      	b.n	2df8 <handleSPI+0xb8>
    2df4:	3301      	adds	r3, #1
    2df6:	b2db      	uxtb	r3, r3
    2df8:	2b09      	cmp	r3, #9
    2dfa:	d80a      	bhi.n	2e12 <handleSPI+0xd2>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    2dfc:	4a4c      	ldr	r2, [pc, #304]	; (2f30 <handleSPI+0x1f0>)
    2dfe:	6812      	ldr	r2, [r2, #0]
    2e00:	441a      	add	r2, r3
    2e02:	494c      	ldr	r1, [pc, #304]	; (2f34 <handleSPI+0x1f4>)
    2e04:	5c89      	ldrb	r1, [r1, r2]
    2e06:	293a      	cmp	r1, #58	; 0x3a
    2e08:	d1f4      	bne.n	2df4 <handleSPI+0xb4>
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    2e0a:	3201      	adds	r2, #1
    2e0c:	4948      	ldr	r1, [pc, #288]	; (2f30 <handleSPI+0x1f0>)
    2e0e:	600a      	str	r2, [r1, #0]
    2e10:	e7f0      	b.n	2df4 <handleSPI+0xb4>
					i-=1;//push i back one because otherwise it increments even though we didn't send, just prepped for next send
    2e12:	3d01      	subs	r5, #1
					rowEnded = 0;
    2e14:	2700      	movs	r7, #0
    2e16:	e7d4      	b.n	2dc2 <handleSPI+0x82>
			SPI_LEVERS_TX[offset+31] = 254;
    2e18:	341f      	adds	r4, #31
    2e1a:	4b41      	ldr	r3, [pc, #260]	; (2f20 <handleSPI+0x1e0>)
    2e1c:	22fe      	movs	r2, #254	; 0xfe
    2e1e:	551a      	strb	r2, [r3, r4]
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    2e20:	4b43      	ldr	r3, [pc, #268]	; (2f30 <handleSPI+0x1f0>)
    2e22:	681a      	ldr	r2, [r3, #0]
    2e24:	4b3f      	ldr	r3, [pc, #252]	; (2f24 <handleSPI+0x1e4>)
    2e26:	681b      	ldr	r3, [r3, #0]
    2e28:	429a      	cmp	r2, r3
    2e2a:	d3b5      	bcc.n	2d98 <handleSPI+0x58>
				brainFirmwareEndSignal = 1;
    2e2c:	4b3b      	ldr	r3, [pc, #236]	; (2f1c <handleSPI+0x1dc>)
    2e2e:	2201      	movs	r2, #1
    2e30:	601a      	str	r2, [r3, #0]
    2e32:	e7b1      	b.n	2d98 <handleSPI+0x58>
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    2e34:	4b3a      	ldr	r3, [pc, #232]	; (2f20 <handleSPI+0x1e0>)
    2e36:	22fc      	movs	r2, #252	; 0xfc
    2e38:	541a      	strb	r2, [r3, r0]
			brainFirmwareSendInProgress = 1;
    2e3a:	4b3b      	ldr	r3, [pc, #236]	; (2f28 <handleSPI+0x1e8>)
    2e3c:	2201      	movs	r2, #1
    2e3e:	601a      	str	r2, [r3, #0]
			for (uint8_t i = 0; i<100; i++)
    2e40:	2300      	movs	r3, #0
    2e42:	e001      	b.n	2e48 <handleSPI+0x108>
    2e44:	3301      	adds	r3, #1
    2e46:	b2db      	uxtb	r3, r3
    2e48:	2b63      	cmp	r3, #99	; 0x63
    2e4a:	d807      	bhi.n	2e5c <handleSPI+0x11c>
				if (brainFirmwareBuffer[i] ==  0x3a)
    2e4c:	4a39      	ldr	r2, [pc, #228]	; (2f34 <handleSPI+0x1f4>)
    2e4e:	5cd2      	ldrb	r2, [r2, r3]
    2e50:	2a3a      	cmp	r2, #58	; 0x3a
    2e52:	d1f7      	bne.n	2e44 <handleSPI+0x104>
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    2e54:	1c5a      	adds	r2, r3, #1
    2e56:	4936      	ldr	r1, [pc, #216]	; (2f30 <handleSPI+0x1f0>)
    2e58:	600a      	str	r2, [r1, #0]
    2e5a:	e7f3      	b.n	2e44 <handleSPI+0x104>
			positionInRowLine = 0;
    2e5c:	4b33      	ldr	r3, [pc, #204]	; (2f2c <handleSPI+0x1ec>)
    2e5e:	2200      	movs	r2, #0
    2e60:	801a      	strh	r2, [r3, #0]
    2e62:	e799      	b.n	2d98 <handleSPI+0x58>
		if (SPI_LEVERS_RX[offset] == ReceivingPitches)
    2e64:	4b2e      	ldr	r3, [pc, #184]	; (2f20 <handleSPI+0x1e0>)
    2e66:	4403      	add	r3, r0
    2e68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    2e6c:	2b01      	cmp	r3, #1
    2e6e:	d016      	beq.n	2e9e <handleSPI+0x15e>
		else if (SPI_LEVERS_RX[offset] == ReceivingPreset)
    2e70:	2b0e      	cmp	r3, #14
    2e72:	f200 8196 	bhi.w	31a2 <_Min_Heap_Size+0x1a2>
    2e76:	2b02      	cmp	r3, #2
    2e78:	d36e      	bcc.n	2f58 <handleSPI+0x218>
    2e7a:	3b02      	subs	r3, #2
    2e7c:	2b0c      	cmp	r3, #12
    2e7e:	d86b      	bhi.n	2f58 <handleSPI+0x218>
    2e80:	e8df f013 	tbh	[pc, r3, lsl #1]
    2e84:	020801aa 	.word	0x020801aa
    2e88:	006a006a 	.word	0x006a006a
    2e8c:	057b0319 	.word	0x057b0319
    2e90:	006a006a 	.word	0x006a006a
    2e94:	06fd06e4 	.word	0x06fd06e4
    2e98:	028d0707 	.word	0x028d0707
    2e9c:	0711      	.short	0x0711
			 uint8_t currentByte = offset+1;
    2e9e:	1c41      	adds	r1, r0, #1
    2ea0:	b2c9      	uxtb	r1, r1
			 for (int i = 0; i < numStringsThisBoard; i++)
    2ea2:	2200      	movs	r2, #0
    2ea4:	e000      	b.n	2ea8 <handleSPI+0x168>
    2ea6:	3201      	adds	r2, #1
    2ea8:	4b23      	ldr	r3, [pc, #140]	; (2f38 <handleSPI+0x1f8>)
    2eaa:	781b      	ldrb	r3, [r3, #0]
    2eac:	4293      	cmp	r3, r2
    2eae:	dd4d      	ble.n	2f4c <handleSPI+0x20c>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    2eb0:	4d22      	ldr	r5, [pc, #136]	; (2f3c <handleSPI+0x1fc>)
    2eb2:	682b      	ldr	r3, [r5, #0]
    2eb4:	4413      	add	r3, r2
    2eb6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    2eba:	4819      	ldr	r0, [pc, #100]	; (2f20 <handleSPI+0x1e0>)
    2ebc:	4403      	add	r3, r0
    2ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    2ec2:	021b      	lsls	r3, r3, #8
    2ec4:	ee07 3a90 	vmov	s15, r3
    2ec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2ecc:	682b      	ldr	r3, [r5, #0]
    2ece:	4413      	add	r3, r2
    2ed0:	005b      	lsls	r3, r3, #1
    2ed2:	3301      	adds	r3, #1
    2ed4:	440b      	add	r3, r1
    2ed6:	4418      	add	r0, r3
    2ed8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
    2edc:	ee07 3a10 	vmov	s14, r3
    2ee0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    2ee4:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    2ee8:	ed9f 7a15 	vldr	s14, [pc, #84]	; 2f40 <handleSPI+0x200>
    2eec:	ee67 7a87 	vmul.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    2ef0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2ef8:	ddd5      	ble.n	2ea6 <handleSPI+0x166>
    2efa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 2f44 <handleSPI+0x204>
    2efe:	eef4 7ac7 	vcmpe.f32	s15, s14
    2f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2f06:	d5ce      	bpl.n	2ea6 <handleSPI+0x166>
					stringMIDIPitches[i] = myPitch;
    2f08:	4b0f      	ldr	r3, [pc, #60]	; (2f48 <handleSPI+0x208>)
    2f0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2f0e:	edc3 7a00 	vstr	s15, [r3]
    2f12:	e7c8      	b.n	2ea6 <handleSPI+0x166>
    2f14:	200166bb 	.word	0x200166bb
    2f18:	200166b8 	.word	0x200166b8
    2f1c:	200144ec 	.word	0x200144ec
    2f20:	30000800 	.word	0x30000800
    2f24:	200144f4 	.word	0x200144f4
    2f28:	200144f0 	.word	0x200144f0
    2f2c:	2001a1f4 	.word	0x2001a1f4
    2f30:	200144e8 	.word	0x200144e8
    2f34:	61e00000 	.word	0x61e00000
    2f38:	20000694 	.word	0x20000694
    2f3c:	200053bc 	.word	0x200053bc
    2f40:	3b000080 	.word	0x3b000080
    2f44:	430c0000 	.word	0x430c0000
    2f48:	20014414 	.word	0x20014414
			 whichBar = 0;
    2f4c:	4bbf      	ldr	r3, [pc, #764]	; (324c <_Min_Heap_Size+0x24c>)
    2f4e:	2200      	movs	r2, #0
    2f50:	701a      	strb	r2, [r3, #0]
			 updateStateFromSPIMessage(offset);
    2f52:	4620      	mov	r0, r4
    2f54:	f7fe f9e4 	bl	1320 <updateStateFromSPIMessage>
			if (boardNumber == 0)
    2f58:	4bbd      	ldr	r3, [pc, #756]	; (3250 <_Min_Heap_Size+0x250>)
    2f5a:	781b      	ldrb	r3, [r3, #0]
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	f47f af1b 	bne.w	2d98 <handleSPI+0x58>
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    2f62:	4bbc      	ldr	r3, [pc, #752]	; (3254 <_Min_Heap_Size+0x254>)
    2f64:	22fd      	movs	r2, #253	; 0xfd
    2f66:	551a      	strb	r2, [r3, r4]
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    2f68:	1c62      	adds	r2, r4, #1
    2f6a:	49bb      	ldr	r1, [pc, #748]	; (3258 <_Min_Heap_Size+0x258>)
    2f6c:	7808      	ldrb	r0, [r1, #0]
    2f6e:	5498      	strb	r0, [r3, r2]
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    2f70:	7808      	ldrb	r0, [r1, #0]
    2f72:	1ca5      	adds	r5, r4, #2
    2f74:	4ab9      	ldr	r2, [pc, #740]	; (325c <_Min_Heap_Size+0x25c>)
    2f76:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2f7a:	0040      	lsls	r0, r0, #1
    2f7c:	5c10      	ldrb	r0, [r2, r0]
    2f7e:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    2f80:	7808      	ldrb	r0, [r1, #0]
    2f82:	1ce5      	adds	r5, r4, #3
    2f84:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2f88:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2f8c:	7840      	ldrb	r0, [r0, #1]
    2f8e:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    2f90:	7808      	ldrb	r0, [r1, #0]
    2f92:	1d25      	adds	r5, r4, #4
    2f94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2f98:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2f9c:	7880      	ldrb	r0, [r0, #2]
    2f9e:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    2fa0:	7808      	ldrb	r0, [r1, #0]
    2fa2:	1d65      	adds	r5, r4, #5
    2fa4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2fa8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2fac:	78c0      	ldrb	r0, [r0, #3]
    2fae:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    2fb0:	7808      	ldrb	r0, [r1, #0]
    2fb2:	1da5      	adds	r5, r4, #6
    2fb4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2fb8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2fbc:	7900      	ldrb	r0, [r0, #4]
    2fbe:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    2fc0:	7808      	ldrb	r0, [r1, #0]
    2fc2:	1de5      	adds	r5, r4, #7
    2fc4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2fc8:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2fcc:	7940      	ldrb	r0, [r0, #5]
    2fce:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    2fd0:	7808      	ldrb	r0, [r1, #0]
    2fd2:	f104 0508 	add.w	r5, r4, #8
    2fd6:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2fda:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2fde:	7980      	ldrb	r0, [r0, #6]
    2fe0:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    2fe2:	7808      	ldrb	r0, [r1, #0]
    2fe4:	f104 0509 	add.w	r5, r4, #9
    2fe8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2fec:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    2ff0:	79c0      	ldrb	r0, [r0, #7]
    2ff2:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    2ff4:	7808      	ldrb	r0, [r1, #0]
    2ff6:	f104 050a 	add.w	r5, r4, #10
    2ffa:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    2ffe:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    3002:	7a00      	ldrb	r0, [r0, #8]
    3004:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    3006:	7808      	ldrb	r0, [r1, #0]
    3008:	f104 050b 	add.w	r5, r4, #11
    300c:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3010:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    3014:	7a40      	ldrb	r0, [r0, #9]
    3016:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3018:	7808      	ldrb	r0, [r1, #0]
    301a:	f104 050c 	add.w	r5, r4, #12
    301e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3022:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    3026:	7a80      	ldrb	r0, [r0, #10]
    3028:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    302a:	7808      	ldrb	r0, [r1, #0]
    302c:	f104 050d 	add.w	r5, r4, #13
    3030:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3034:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    3038:	7ac0      	ldrb	r0, [r0, #11]
    303a:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    303c:	7808      	ldrb	r0, [r1, #0]
    303e:	f104 050e 	add.w	r5, r4, #14
    3042:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3046:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    304a:	7b00      	ldrb	r0, [r0, #12]
    304c:	5558      	strb	r0, [r3, r5]
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    304e:	7808      	ldrb	r0, [r1, #0]
    3050:	f104 050f 	add.w	r5, r4, #15
    3054:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    3058:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    305c:	7b52      	ldrb	r2, [r2, #13]
    305e:	555a      	strb	r2, [r3, r5]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3060:	f104 0010 	add.w	r0, r4, #16
    3064:	4f7e      	ldr	r7, [pc, #504]	; (3260 <_Min_Heap_Size+0x260>)
    3066:	783a      	ldrb	r2, [r7, #0]
    3068:	541a      	strb	r2, [r3, r0]
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    306a:	780e      	ldrb	r6, [r1, #0]
    306c:	f104 0c11 	add.w	ip, r4, #17
    3070:	4d7c      	ldr	r5, [pc, #496]	; (3264 <_Min_Heap_Size+0x264>)
    3072:	eb02 0e82 	add.w	lr, r2, r2, lsl #2
    3076:	20c8      	movs	r0, #200	; 0xc8
    3078:	fb00 f606 	mul.w	r6, r0, r6
    307c:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    3080:	5dae      	ldrb	r6, [r5, r6]
    3082:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    3086:	780e      	ldrb	r6, [r1, #0]
    3088:	f104 0c12 	add.w	ip, r4, #18
    308c:	fb00 f606 	mul.w	r6, r0, r6
    3090:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    3094:	442e      	add	r6, r5
    3096:	7876      	ldrb	r6, [r6, #1]
    3098:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    309c:	780e      	ldrb	r6, [r1, #0]
    309e:	f104 0c13 	add.w	ip, r4, #19
    30a2:	fb00 f606 	mul.w	r6, r0, r6
    30a6:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    30aa:	442e      	add	r6, r5
    30ac:	78b6      	ldrb	r6, [r6, #2]
    30ae:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    30b2:	780e      	ldrb	r6, [r1, #0]
    30b4:	f104 0c14 	add.w	ip, r4, #20
    30b8:	fb00 f606 	mul.w	r6, r0, r6
    30bc:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    30c0:	442e      	add	r6, r5
    30c2:	78f6      	ldrb	r6, [r6, #3]
    30c4:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    30c8:	780e      	ldrb	r6, [r1, #0]
    30ca:	f104 0c15 	add.w	ip, r4, #21
    30ce:	fb00 f606 	mul.w	r6, r0, r6
    30d2:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    30d6:	442e      	add	r6, r5
    30d8:	7936      	ldrb	r6, [r6, #4]
    30da:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    30de:	780e      	ldrb	r6, [r1, #0]
    30e0:	f104 0c16 	add.w	ip, r4, #22
    30e4:	fb00 f606 	mul.w	r6, r0, r6
    30e8:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    30ec:	442e      	add	r6, r5
    30ee:	7976      	ldrb	r6, [r6, #5]
    30f0:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    30f4:	780e      	ldrb	r6, [r1, #0]
    30f6:	f104 0c17 	add.w	ip, r4, #23
    30fa:	fb00 f606 	mul.w	r6, r0, r6
    30fe:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    3102:	442e      	add	r6, r5
    3104:	79b6      	ldrb	r6, [r6, #6]
    3106:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    310a:	780e      	ldrb	r6, [r1, #0]
    310c:	f104 0c18 	add.w	ip, r4, #24
    3110:	fb00 f606 	mul.w	r6, r0, r6
    3114:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    3118:	442e      	add	r6, r5
    311a:	79f6      	ldrb	r6, [r6, #7]
    311c:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    3120:	780e      	ldrb	r6, [r1, #0]
    3122:	f104 0c19 	add.w	ip, r4, #25
    3126:	fb00 f606 	mul.w	r6, r0, r6
    312a:	eb06 064e 	add.w	r6, r6, lr, lsl #1
    312e:	442e      	add	r6, r5
    3130:	7a36      	ldrb	r6, [r6, #8]
    3132:	f803 600c 	strb.w	r6, [r3, ip]
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    3136:	f891 c000 	ldrb.w	ip, [r1]
    313a:	f104 011a 	add.w	r1, r4, #26
    313e:	fb0c f000 	mul.w	r0, ip, r0
    3142:	eb00 004e 	add.w	r0, r0, lr, lsl #1
    3146:	4405      	add	r5, r0
    3148:	7a68      	ldrb	r0, [r5, #9]
    314a:	5458      	strb	r0, [r3, r1]
				SPI_LEVERS_TX[offset+27] = 13;
    314c:	f104 001b 	add.w	r0, r4, #27
    3150:	210d      	movs	r1, #13
    3152:	5419      	strb	r1, [r3, r0]
				SPI_LEVERS_TX[offset+28] = 13;
    3154:	f104 001c 	add.w	r0, r4, #28
    3158:	5419      	strb	r1, [r3, r0]
				SPI_LEVERS_TX[offset+29] = 13;
    315a:	f104 001d 	add.w	r0, r4, #29
    315e:	5419      	strb	r1, [r3, r0]
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    3160:	4941      	ldr	r1, [pc, #260]	; (3268 <_Min_Heap_Size+0x268>)
    3162:	8809      	ldrh	r1, [r1, #0]
    3164:	b289      	uxth	r1, r1
    3166:	f104 001e 	add.w	r0, r4, #30
    316a:	3900      	subs	r1, #0
    316c:	bf18      	it	ne
    316e:	2101      	movne	r1, #1
    3170:	5419      	strb	r1, [r3, r0]
				SPI_LEVERS_TX[offset+31] = 254;
    3172:	341f      	adds	r4, #31
    3174:	21fe      	movs	r1, #254	; 0xfe
    3176:	5519      	strb	r1, [r3, r4]
				whichMacroToSendName = (whichMacroToSendName + 1);
    3178:	3201      	adds	r2, #1
    317a:	b2d2      	uxtb	r2, r2
    317c:	703a      	strb	r2, [r7, #0]
				if (whichMacroToSendName >= 20)
    317e:	2a13      	cmp	r2, #19
    3180:	f67f ae0a 	bls.w	2d98 <handleSPI+0x58>
					whichMacroToSendName = 0;
    3184:	2200      	movs	r2, #0
    3186:	703a      	strb	r2, [r7, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3188:	4933      	ldr	r1, [pc, #204]	; (3258 <_Min_Heap_Size+0x258>)
    318a:	780b      	ldrb	r3, [r1, #0]
    318c:	3301      	adds	r3, #1
    318e:	1ad2      	subs	r2, r2, r3
    3190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3194:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    3198:	bf58      	it	pl
    319a:	4253      	negpl	r3, r2
    319c:	b2db      	uxtb	r3, r3
    319e:	700b      	strb	r3, [r1, #0]
}
    31a0:	e5fa      	b.n	2d98 <handleSPI+0x58>
    31a2:	2bfd      	cmp	r3, #253	; 0xfd
    31a4:	f47f aed8 	bne.w	2f58 <handleSPI+0x218>
			if(writingState == ReceivingPreset)
    31a8:	4b30      	ldr	r3, [pc, #192]	; (326c <_Min_Heap_Size+0x26c>)
    31aa:	781b      	ldrb	r3, [r3, #0]
    31ac:	b2db      	uxtb	r3, r3
    31ae:	2b02      	cmp	r3, #2
    31b0:	f47f aed2 	bne.w	2f58 <handleSPI+0x218>
				 writingState = 0;
    31b4:	4b2d      	ldr	r3, [pc, #180]	; (326c <_Min_Heap_Size+0x26c>)
    31b6:	2200      	movs	r2, #0
    31b8:	701a      	strb	r2, [r3, #0]
				 presetNumberToLoad = presetNumberToSave;
    31ba:	4b2d      	ldr	r3, [pc, #180]	; (3270 <_Min_Heap_Size+0x270>)
    31bc:	781b      	ldrb	r3, [r3, #0]
    31be:	b2db      	uxtb	r3, r3
    31c0:	4a2c      	ldr	r2, [pc, #176]	; (3274 <_Min_Heap_Size+0x274>)
    31c2:	7013      	strb	r3, [r2, #0]
				 presetWaitingToParse = bufferPos;
    31c4:	4a2c      	ldr	r2, [pc, #176]	; (3278 <_Min_Heap_Size+0x278>)
    31c6:	8813      	ldrh	r3, [r2, #0]
    31c8:	b29b      	uxth	r3, r3
    31ca:	492c      	ldr	r1, [pc, #176]	; (327c <_Min_Heap_Size+0x27c>)
    31cc:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    31ce:	8813      	ldrh	r3, [r2, #0]
    31d0:	b29b      	uxth	r3, r3
    31d2:	4a2b      	ldr	r2, [pc, #172]	; (3280 <_Min_Heap_Size+0x280>)
    31d4:	6013      	str	r3, [r2, #0]
    31d6:	e6bf      	b.n	2f58 <handleSPI+0x218>
			 if (writingState != ReceivingPreset)
    31d8:	4b24      	ldr	r3, [pc, #144]	; (326c <_Min_Heap_Size+0x26c>)
    31da:	781b      	ldrb	r3, [r3, #0]
    31dc:	b2db      	uxtb	r3, r3
    31de:	2b02      	cmp	r3, #2
    31e0:	d017      	beq.n	3212 <_Min_Heap_Size+0x212>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    31e2:	4b22      	ldr	r3, [pc, #136]	; (326c <_Min_Heap_Size+0x26c>)
    31e4:	2202      	movs	r2, #2
    31e6:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    31e8:	2300      	movs	r3, #0
    31ea:	e007      	b.n	31fc <_Min_Heap_Size+0x1fc>
						audioOutBuffer[i] = 0;
    31ec:	4a25      	ldr	r2, [pc, #148]	; (3284 <_Min_Heap_Size+0x284>)
    31ee:	2100      	movs	r1, #0
    31f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						audioOutBuffer[i + 1] = 0;
    31f4:	1c58      	adds	r0, r3, #1
    31f6:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    31fa:	3302      	adds	r3, #2
    31fc:	2bff      	cmp	r3, #255	; 0xff
    31fe:	ddf5      	ble.n	31ec <_Min_Heap_Size+0x1ec>
				 diskBusy = 1;
    3200:	4b21      	ldr	r3, [pc, #132]	; (3288 <_Min_Heap_Size+0x288>)
    3202:	2201      	movs	r2, #1
    3204:	701a      	strb	r2, [r3, #0]
				 audioMasterLevel = 0.0f;
    3206:	4b21      	ldr	r3, [pc, #132]	; (328c <_Min_Heap_Size+0x28c>)
    3208:	2200      	movs	r2, #0
    320a:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    320c:	4b1a      	ldr	r3, [pc, #104]	; (3278 <_Min_Heap_Size+0x278>)
    320e:	2200      	movs	r2, #0
    3210:	801a      	strh	r2, [r3, #0]
			 presetNumberToSave = SPI_LEVERS_RX[offset + 1];
    3212:	1c62      	adds	r2, r4, #1
    3214:	4b0f      	ldr	r3, [pc, #60]	; (3254 <_Min_Heap_Size+0x254>)
    3216:	4413      	add	r3, r2
    3218:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    321c:	4b14      	ldr	r3, [pc, #80]	; (3270 <_Min_Heap_Size+0x270>)
    321e:	701a      	strb	r2, [r3, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    3220:	1ca6      	adds	r6, r4, #2
    3222:	b2f6      	uxtb	r6, r6
			 for (int i = 0; i < 28; i++)
    3224:	2200      	movs	r2, #0
    3226:	e00d      	b.n	3244 <_Min_Heap_Size+0x244>
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    3228:	18b5      	adds	r5, r6, r2
    322a:	4813      	ldr	r0, [pc, #76]	; (3278 <_Min_Heap_Size+0x278>)
    322c:	8803      	ldrh	r3, [r0, #0]
    322e:	b29b      	uxth	r3, r3
    3230:	1c59      	adds	r1, r3, #1
    3232:	b289      	uxth	r1, r1
    3234:	8001      	strh	r1, [r0, #0]
    3236:	4907      	ldr	r1, [pc, #28]	; (3254 <_Min_Heap_Size+0x254>)
    3238:	4429      	add	r1, r5
    323a:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    323e:	4914      	ldr	r1, [pc, #80]	; (3290 <_Min_Heap_Size+0x290>)
    3240:	54c8      	strb	r0, [r1, r3]
			 for (int i = 0; i < 28; i++)
    3242:	3201      	adds	r2, #1
    3244:	2a1b      	cmp	r2, #27
    3246:	ddef      	ble.n	3228 <_Min_Heap_Size+0x228>
    3248:	e686      	b.n	2f58 <handleSPI+0x218>
    324a:	bf00      	nop
    324c:	20014450 	.word	0x20014450
    3250:	200144e5 	.word	0x200144e5
    3254:	30000800 	.word	0x30000800
    3258:	2001c80e 	.word	0x2001c80e
    325c:	30042000 	.word	0x30042000
    3260:	2001c80c 	.word	0x2001c80c
    3264:	30043380 	.word	0x30043380
    3268:	2000596a 	.word	0x2000596a
    326c:	2001c80f 	.word	0x2001c80f
    3270:	2001a207 	.word	0x2001a207
    3274:	2001a206 	.word	0x2001a206
    3278:	200144fc 	.word	0x200144fc
    327c:	2001a20c 	.word	0x2001a20c
    3280:	2001a210 	.word	0x2001a210
    3284:	30000000 	.word	0x30000000
    3288:	20014538 	.word	0x20014538
    328c:	200008a8 	.word	0x200008a8
    3290:	30042380 	.word	0x30042380
			uint8_t currentByte = offset+1;
    3294:	1c47      	adds	r7, r0, #1
    3296:	b2ff      	uxtb	r7, r7
			for (int i = 0; i < 8; i++)
    3298:	2500      	movs	r5, #0
    329a:	e006      	b.n	32aa <_Min_Heap_Size+0x2aa>
						knobFrozen[i] = 0;
    329c:	4ba6      	ldr	r3, [pc, #664]	; (3538 <_Min_Heap_Size+0x538>)
    329e:	2200      	movs	r2, #0
    32a0:	555a      	strb	r2, [r3, r5]
						prevKnobByte[i] = newByte;
    32a2:	4ba6      	ldr	r3, [pc, #664]	; (353c <_Min_Heap_Size+0x53c>)
    32a4:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
			for (int i = 0; i < 8; i++)
    32a8:	3501      	adds	r5, #1
    32aa:	2d07      	cmp	r5, #7
    32ac:	dc25      	bgt.n	32fa <_Min_Heap_Size+0x2fa>
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    32ae:	197a      	adds	r2, r7, r5
    32b0:	4ba3      	ldr	r3, [pc, #652]	; (3540 <_Min_Heap_Size+0x540>)
    32b2:	4413      	add	r3, r2
    32b4:	f893 6040 	ldrb.w	r6, [r3, #64]	; 0x40
				if (knobFrozen[i])
    32b8:	4b9f      	ldr	r3, [pc, #636]	; (3538 <_Min_Heap_Size+0x538>)
    32ba:	5d5b      	ldrb	r3, [r3, r5]
    32bc:	b163      	cbz	r3, 32d8 <_Min_Heap_Size+0x2d8>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    32be:	4b9f      	ldr	r3, [pc, #636]	; (353c <_Min_Heap_Size+0x53c>)
    32c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    32c4:	3303      	adds	r3, #3
    32c6:	42b3      	cmp	r3, r6
    32c8:	dbe8      	blt.n	329c <_Min_Heap_Size+0x29c>
    32ca:	4b9c      	ldr	r3, [pc, #624]	; (353c <_Min_Heap_Size+0x53c>)
    32cc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    32d0:	3b03      	subs	r3, #3
    32d2:	42b3      	cmp	r3, r6
    32d4:	dde8      	ble.n	32a8 <_Min_Heap_Size+0x2a8>
    32d6:	e7e1      	b.n	329c <_Min_Heap_Size+0x29c>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    32d8:	ee07 6a90 	vmov	s15, r6
    32dc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    32e0:	eddf 7a98 	vldr	s15, [pc, #608]	; 3544 <_Min_Heap_Size+0x544>
    32e4:	ee20 0a27 	vmul.f32	s0, s0, s15
    32e8:	4897      	ldr	r0, [pc, #604]	; (3548 <_Min_Heap_Size+0x548>)
    32ea:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    32ee:	f006 f8bf 	bl	9470 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    32f2:	4b92      	ldr	r3, [pc, #584]	; (353c <_Min_Heap_Size+0x53c>)
    32f4:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
    32f8:	e7d6      	b.n	32a8 <_Min_Heap_Size+0x2a8>
			for (int i = 8; i < 12; i++)
    32fa:	2508      	movs	r5, #8
    32fc:	e006      	b.n	330c <_Min_Heap_Size+0x30c>
						knobFrozen[i] = 0;
    32fe:	4b8e      	ldr	r3, [pc, #568]	; (3538 <_Min_Heap_Size+0x538>)
    3300:	2200      	movs	r2, #0
    3302:	555a      	strb	r2, [r3, r5]
						prevKnobByte[i] = newByte;
    3304:	4b8d      	ldr	r3, [pc, #564]	; (353c <_Min_Heap_Size+0x53c>)
    3306:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
			for (int i = 8; i < 12; i++)
    330a:	3501      	adds	r5, #1
    330c:	2d0b      	cmp	r5, #11
    330e:	dc25      	bgt.n	335c <_Min_Heap_Size+0x35c>
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3310:	197a      	adds	r2, r7, r5
    3312:	4b8b      	ldr	r3, [pc, #556]	; (3540 <_Min_Heap_Size+0x540>)
    3314:	4413      	add	r3, r2
    3316:	f893 6040 	ldrb.w	r6, [r3, #64]	; 0x40
				if (knobFrozen[i])
    331a:	4b87      	ldr	r3, [pc, #540]	; (3538 <_Min_Heap_Size+0x538>)
    331c:	5d5b      	ldrb	r3, [r3, r5]
    331e:	b163      	cbz	r3, 333a <_Min_Heap_Size+0x33a>
					if ((newByte > (prevKnobByte[i] + 3)) || (newByte < (prevKnobByte[i] - 3)))
    3320:	4b86      	ldr	r3, [pc, #536]	; (353c <_Min_Heap_Size+0x53c>)
    3322:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    3326:	3303      	adds	r3, #3
    3328:	42b3      	cmp	r3, r6
    332a:	dbe8      	blt.n	32fe <_Min_Heap_Size+0x2fe>
    332c:	4b83      	ldr	r3, [pc, #524]	; (353c <_Min_Heap_Size+0x53c>)
    332e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    3332:	3b03      	subs	r3, #3
    3334:	42b3      	cmp	r3, r6
    3336:	dde8      	ble.n	330a <_Min_Heap_Size+0x30a>
    3338:	e7e1      	b.n	32fe <_Min_Heap_Size+0x2fe>
					tExpSmooth_setDest(&knobSmoothers[i], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    333a:	ee07 6a90 	vmov	s15, r6
    333e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3342:	eddf 7a80 	vldr	s15, [pc, #512]	; 3544 <_Min_Heap_Size+0x544>
    3346:	ee20 0a27 	vmul.f32	s0, s0, s15
    334a:	487f      	ldr	r0, [pc, #508]	; (3548 <_Min_Heap_Size+0x548>)
    334c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    3350:	f006 f88e 	bl	9470 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3354:	4b79      	ldr	r3, [pc, #484]	; (353c <_Min_Heap_Size+0x53c>)
    3356:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
    335a:	e7d6      	b.n	330a <_Min_Heap_Size+0x30a>
			currentByte += 12;
    335c:	f104 060d 	add.w	r6, r4, #13
    3360:	b2f6      	uxtb	r6, r6
			for (int i = 0; i < 10; i++)
    3362:	2500      	movs	r5, #0
    3364:	e012      	b.n	338c <_Min_Heap_Size+0x38c>
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3366:	1972      	adds	r2, r6, r5
    3368:	4b75      	ldr	r3, [pc, #468]	; (3540 <_Min_Heap_Size+0x540>)
    336a:	4413      	add	r3, r2
    336c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3370:	ee07 3a90 	vmov	s15, r3
    3374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3378:	ed9f 0a72 	vldr	s0, [pc, #456]	; 3544 <_Min_Heap_Size+0x544>
    337c:	ee27 0a80 	vmul.f32	s0, s15, s0
    3380:	4872      	ldr	r0, [pc, #456]	; (354c <_Min_Heap_Size+0x54c>)
    3382:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    3386:	f006 f873 	bl	9470 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    338a:	3501      	adds	r5, #1
    338c:	2d09      	cmp	r5, #9
    338e:	ddea      	ble.n	3366 <_Min_Heap_Size+0x366>
			whichBar = 1;
    3390:	4b6f      	ldr	r3, [pc, #444]	; (3550 <_Min_Heap_Size+0x550>)
    3392:	2201      	movs	r2, #1
    3394:	701a      	strb	r2, [r3, #0]
			updateStateFromSPIMessage(offset);
    3396:	4620      	mov	r0, r4
    3398:	f7fd ffc2 	bl	1320 <updateStateFromSPIMessage>
    339c:	e5dc      	b.n	2f58 <handleSPI+0x218>
			 uint8_t currentByte = offset+1;
    339e:	f100 0801 	add.w	r8, r0, #1
    33a2:	fa5f f888 	uxtb.w	r8, r8
			for (int i = 0; i < 8; i++)
    33a6:	2500      	movs	r5, #0
    33a8:	e006      	b.n	33b8 <_Min_Heap_Size+0x3b8>
						knobFrozen[whichKnob] = 0;
    33aa:	4b63      	ldr	r3, [pc, #396]	; (3538 <_Min_Heap_Size+0x538>)
    33ac:	2200      	movs	r2, #0
    33ae:	559a      	strb	r2, [r3, r6]
						prevKnobByte[whichKnob] = newByte;
    33b0:	4b62      	ldr	r3, [pc, #392]	; (353c <_Min_Heap_Size+0x53c>)
    33b2:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
			for (int i = 0; i < 8; i++)
    33b6:	3501      	adds	r5, #1
    33b8:	2d07      	cmp	r5, #7
    33ba:	dc28      	bgt.n	340e <_Min_Heap_Size+0x40e>
				uint32_t whichKnob = i+12;
    33bc:	f105 060c 	add.w	r6, r5, #12
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    33c0:	eb08 0205 	add.w	r2, r8, r5
    33c4:	4b5e      	ldr	r3, [pc, #376]	; (3540 <_Min_Heap_Size+0x540>)
    33c6:	4413      	add	r3, r2
    33c8:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
				if (knobFrozen[whichKnob])
    33cc:	4b5a      	ldr	r3, [pc, #360]	; (3538 <_Min_Heap_Size+0x538>)
    33ce:	5d9b      	ldrb	r3, [r3, r6]
    33d0:	b163      	cbz	r3, 33ec <_Min_Heap_Size+0x3ec>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    33d2:	4b5a      	ldr	r3, [pc, #360]	; (353c <_Min_Heap_Size+0x53c>)
    33d4:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    33d8:	3303      	adds	r3, #3
    33da:	42bb      	cmp	r3, r7
    33dc:	dbe5      	blt.n	33aa <_Min_Heap_Size+0x3aa>
    33de:	4b57      	ldr	r3, [pc, #348]	; (353c <_Min_Heap_Size+0x53c>)
    33e0:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    33e4:	3b03      	subs	r3, #3
    33e6:	42bb      	cmp	r3, r7
    33e8:	dde5      	ble.n	33b6 <_Min_Heap_Size+0x3b6>
    33ea:	e7de      	b.n	33aa <_Min_Heap_Size+0x3aa>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (newByte * 0.003921568627451f)); //scaled 0.0 to 1.0
    33ec:	ee07 7a90 	vmov	s15, r7
    33f0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    33f4:	eddf 7a53 	vldr	s15, [pc, #332]	; 3544 <_Min_Heap_Size+0x544>
    33f8:	ee20 0a27 	vmul.f32	s0, s0, s15
    33fc:	4852      	ldr	r0, [pc, #328]	; (3548 <_Min_Heap_Size+0x548>)
    33fe:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    3402:	f006 f835 	bl	9470 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    3406:	4b4d      	ldr	r3, [pc, #308]	; (353c <_Min_Heap_Size+0x53c>)
    3408:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
    340c:	e7d3      	b.n	33b6 <_Min_Heap_Size+0x3b6>
			for (int i = 8; i < 12; i++)
    340e:	2508      	movs	r5, #8
    3410:	e006      	b.n	3420 <_Min_Heap_Size+0x420>
						knobFrozen[whichKnob] = 0;
    3412:	4b49      	ldr	r3, [pc, #292]	; (3538 <_Min_Heap_Size+0x538>)
    3414:	2100      	movs	r1, #0
    3416:	5499      	strb	r1, [r3, r2]
						prevKnobByte[whichKnob] = newByte;
    3418:	4b48      	ldr	r3, [pc, #288]	; (353c <_Min_Heap_Size+0x53c>)
    341a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
			for (int i = 8; i < 12; i++)
    341e:	3501      	adds	r5, #1
    3420:	2d0b      	cmp	r5, #11
    3422:	dc27      	bgt.n	3474 <_Min_Heap_Size+0x474>
				int32_t newByte = SPI_LEVERS_RX[i + currentByte];
    3424:	eb08 0205 	add.w	r2, r8, r5
    3428:	4b45      	ldr	r3, [pc, #276]	; (3540 <_Min_Heap_Size+0x540>)
    342a:	4413      	add	r3, r2
    342c:	f893 6040 	ldrb.w	r6, [r3, #64]	; 0x40
				uint32_t whichKnob = i;
    3430:	462a      	mov	r2, r5
				if (knobFrozen[whichKnob])
    3432:	4b41      	ldr	r3, [pc, #260]	; (3538 <_Min_Heap_Size+0x538>)
    3434:	5d5b      	ldrb	r3, [r3, r5]
    3436:	b163      	cbz	r3, 3452 <_Min_Heap_Size+0x452>
					if ((newByte > (prevKnobByte[whichKnob] + 3)) || (newByte < (prevKnobByte[whichKnob] - 3)))
    3438:	4b40      	ldr	r3, [pc, #256]	; (353c <_Min_Heap_Size+0x53c>)
    343a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    343e:	3303      	adds	r3, #3
    3440:	42b3      	cmp	r3, r6
    3442:	dbe6      	blt.n	3412 <_Min_Heap_Size+0x412>
    3444:	4b3d      	ldr	r3, [pc, #244]	; (353c <_Min_Heap_Size+0x53c>)
    3446:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    344a:	3b03      	subs	r3, #3
    344c:	42b3      	cmp	r3, r6
    344e:	dde6      	ble.n	341e <_Min_Heap_Size+0x41e>
    3450:	e7df      	b.n	3412 <_Min_Heap_Size+0x412>
					tExpSmooth_setDest(&knobSmoothers[whichKnob], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3452:	ee07 6a90 	vmov	s15, r6
    3456:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    345a:	eddf 7a3a 	vldr	s15, [pc, #232]	; 3544 <_Min_Heap_Size+0x544>
    345e:	ee20 0a27 	vmul.f32	s0, s0, s15
    3462:	4839      	ldr	r0, [pc, #228]	; (3548 <_Min_Heap_Size+0x548>)
    3464:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    3468:	f006 f802 	bl	9470 <__tExpSmooth_setDest_veneer>
					prevKnobByte[whichKnob] = newByte;
    346c:	4b33      	ldr	r3, [pc, #204]	; (353c <_Min_Heap_Size+0x53c>)
    346e:	f843 6025 	str.w	r6, [r3, r5, lsl #2]
    3472:	e7d4      	b.n	341e <_Min_Heap_Size+0x41e>
			currentByte += 12;
    3474:	f104 060d 	add.w	r6, r4, #13
    3478:	b2f6      	uxtb	r6, r6
			for (int i = 0; i < 10; i++)
    347a:	2500      	movs	r5, #0
    347c:	e012      	b.n	34a4 <_Min_Heap_Size+0x4a4>
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    347e:	1972      	adds	r2, r6, r5
    3480:	4b2f      	ldr	r3, [pc, #188]	; (3540 <_Min_Heap_Size+0x540>)
    3482:	4413      	add	r3, r2
    3484:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3488:	ee07 3a90 	vmov	s15, r3
    348c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3490:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 3544 <_Min_Heap_Size+0x544>
    3494:	ee27 0a80 	vmul.f32	s0, s15, s0
    3498:	482c      	ldr	r0, [pc, #176]	; (354c <_Min_Heap_Size+0x54c>)
    349a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    349e:	f005 ffe7 	bl	9470 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    34a2:	3501      	adds	r5, #1
    34a4:	2d09      	cmp	r5, #9
    34a6:	ddea      	ble.n	347e <_Min_Heap_Size+0x47e>
			whichBar = 1;
    34a8:	4b29      	ldr	r3, [pc, #164]	; (3550 <_Min_Heap_Size+0x550>)
    34aa:	2201      	movs	r2, #1
    34ac:	701a      	strb	r2, [r3, #0]
			updateStateFromSPIMessage(offset);
    34ae:	4620      	mov	r0, r4
    34b0:	f7fd ff36 	bl	1320 <updateStateFromSPIMessage>
    34b4:	e550      	b.n	2f58 <handleSPI+0x218>
			if (presetReady)
    34b6:	4b27      	ldr	r3, [pc, #156]	; (3554 <_Min_Heap_Size+0x554>)
    34b8:	681b      	ldr	r3, [r3, #0]
    34ba:	2b00      	cmp	r3, #0
    34bc:	f43f ad4c 	beq.w	2f58 <handleSPI+0x218>
				uint8_t currentByte = offset+1;
    34c0:	1c43      	adds	r3, r0, #1
    34c2:	b2db      	uxtb	r3, r3
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    34c4:	4a1e      	ldr	r2, [pc, #120]	; (3540 <_Min_Heap_Size+0x540>)
    34c6:	18d1      	adds	r1, r2, r3
    34c8:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    34cc:	3301      	adds	r3, #1
    34ce:	441a      	add	r2, r3
    34d0:	f892 5040 	ldrb.w	r5, [r2, #64]	; 0x40
    34d4:	eb05 2501 	add.w	r5, r5, r1, lsl #8
    34d8:	b2ad      	uxth	r5, r5
				currentByte = currentByte + 2;
    34da:	3003      	adds	r0, #3
    34dc:	b2c0      	uxtb	r0, r0
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    34de:	2200      	movs	r2, #0
    34e0:	e01a      	b.n	3518 <_Min_Heap_Size+0x518>
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    34e2:	4b17      	ldr	r3, [pc, #92]	; (3540 <_Min_Heap_Size+0x540>)
    34e4:	1819      	adds	r1, r3, r0
    34e6:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    34ea:	1c46      	adds	r6, r0, #1
    34ec:	4433      	add	r3, r6
    34ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    34f2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
    34f6:	ee07 3a90 	vmov	s15, r3
    34fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    34fe:	ed9f 7a16 	vldr	s14, [pc, #88]	; 3558 <_Min_Heap_Size+0x558>
    3502:	ee67 7a87 	vmul.f32	s15, s15, s14
    3506:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    350a:	4411      	add	r1, r2
    350c:	4b13      	ldr	r3, [pc, #76]	; (355c <_Min_Heap_Size+0x55c>)
    350e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3512:	edc3 7a00 	vstr	s15, [r3]
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3516:	3201      	adds	r2, #1
    3518:	2a01      	cmp	r2, #1
    351a:	dde2      	ble.n	34e2 <_Min_Heap_Size+0x4e2>
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    351c:	f1a5 033f 	sub.w	r3, r5, #63	; 0x3f
    3520:	b29b      	uxth	r3, r3
    3522:	2b18      	cmp	r3, #24
    3524:	d806      	bhi.n	3534 <_Min_Heap_Size+0x534>
    3526:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
    352a:	fa22 f303 	lsr.w	r3, r2, r3
    352e:	f013 0f01 	tst.w	r3, #1
    3532:	d115      	bne.n	3560 <_Min_Heap_Size+0x560>
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3534:	2700      	movs	r7, #0
    3536:	e06f      	b.n	3618 <_Min_Heap_Size+0x618>
    3538:	200053cc 	.word	0x200053cc
    353c:	2001a214 	.word	0x2001a214
    3540:	30000800 	.word	0x30000800
    3544:	3b808081 	.word	0x3b808081
    3548:	20005430 	.word	0x20005430
    354c:	2000551c 	.word	0x2000551c
    3550:	20014450 	.word	0x20014450
    3554:	20005544 	.word	0x20005544
    3558:	377ffff6 	.word	0x377ffff6
    355c:	200190dc 	.word	0x200190dc
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    3560:	f1b5 033f 	subs.w	r3, r5, #63	; 0x3f
    3564:	d43a      	bmi.n	35dc <_Min_Heap_Size+0x5dc>
    3566:	10db      	asrs	r3, r3, #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    3568:	4fbc      	ldr	r7, [pc, #752]	; (385c <_Min_Heap_Size+0x85c>)
    356a:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    356e:	eb07 0282 	add.w	r2, r7, r2, lsl #2
    3572:	edd2 7a00 	vldr	s15, [r2]
    3576:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
    357a:	ee67 7a87 	vmul.f32	s15, s15, s14
    357e:	fef8 7a67 	vrinta.f32	s15, s15
    3582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3586:	edcd 7a01 	vstr	s15, [sp, #4]
    358a:	f89d 0004 	ldrb.w	r0, [sp, #4]
					param *FXAlias = &params[whichParam + 1];
    358e:	f105 0801 	add.w	r8, r5, #1
    3592:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
    3596:	eb07 0782 	add.w	r7, r7, r2, lsl #2
					if (effectType > FXLowpass)
    359a:	280d      	cmp	r0, #13
    359c:	d901      	bls.n	35a2 <_Min_Heap_Size+0x5a2>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    359e:	4ab0      	ldr	r2, [pc, #704]	; (3860 <_Min_Heap_Size+0x860>)
    35a0:	64ba      	str	r2, [r7, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    35a2:	b2de      	uxtb	r6, r3
    35a4:	4631      	mov	r1, r6
    35a6:	f006 f83b 	bl	9620 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    35aa:	4aae      	ldr	r2, [pc, #696]	; (3864 <_Min_Heap_Size+0x864>)
    35ac:	eb06 0386 	add.w	r3, r6, r6, lsl #2
    35b0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    35b4:	f852 c023 	ldr.w	ip, [r2, r3, lsl #2]
    35b8:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
    35bc:	48a7      	ldr	r0, [pc, #668]	; (385c <_Min_Heap_Size+0x85c>)
    35be:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    35c2:	f8c3 c014 	str.w	ip, [r3, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    35c6:	684b      	ldr	r3, [r1, #4]
    35c8:	633b      	str	r3, [r7, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    35ca:	688b      	ldr	r3, [r1, #8]
    35cc:	64fb      	str	r3, [r7, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    35ce:	68cb      	ldr	r3, [r1, #12]
    35d0:	66bb      	str	r3, [r7, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    35d2:	460a      	mov	r2, r1
    35d4:	690b      	ldr	r3, [r1, #16]
    35d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    35da:	e7ab      	b.n	3534 <_Min_Heap_Size+0x534>
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    35dc:	3307      	adds	r3, #7
    35de:	e7c2      	b.n	3566 <_Min_Heap_Size+0x566>
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    35e0:	f8df 9278 	ldr.w	r9, [pc, #632]	; 385c <_Min_Heap_Size+0x85c>
    35e4:	ebc5 08c5 	rsb	r8, r5, r5, lsl #3
    35e8:	eb09 0888 	add.w	r8, r9, r8, lsl #2
    35ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
    35f0:	ebc5 06c5 	rsb	r6, r5, r5, lsl #3
    35f4:	443e      	add	r6, r7
    35f6:	eb09 0286 	add.w	r2, r9, r6, lsl #2
    35fa:	ed92 0a00 	vldr	s0, [r2]
    35fe:	4798      	blx	r3
    3600:	3602      	adds	r6, #2
    3602:	eb09 0986 	add.w	r9, r9, r6, lsl #2
    3606:	ed89 0a00 	vstr	s0, [r9]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    360a:	f8d8 3014 	ldr.w	r3, [r8, #20]
    360e:	4639      	mov	r1, r7
    3610:	f898 0018 	ldrb.w	r0, [r8, #24]
    3614:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3616:	3701      	adds	r7, #1
    3618:	2f01      	cmp	r7, #1
    361a:	dde1      	ble.n	35e0 <_Min_Heap_Size+0x5e0>
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    361c:	f1a5 0323 	sub.w	r3, r5, #35	; 0x23
    3620:	b29b      	uxth	r3, r3
    3622:	2b1a      	cmp	r3, #26
    3624:	d805      	bhi.n	3632 <_Min_Heap_Size+0x632>
    3626:	4a90      	ldr	r2, [pc, #576]	; (3868 <_Min_Heap_Size+0x868>)
    3628:	fa22 f303 	lsr.w	r3, r2, r3
    362c:	f013 0f01 	tst.w	r3, #1
    3630:	d124      	bne.n	367c <_Min_Heap_Size+0x67c>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    3632:	2d25      	cmp	r5, #37	; 0x25
    3634:	bf18      	it	ne
    3636:	2d18      	cmpne	r5, #24
    3638:	d001      	beq.n	363e <_Min_Heap_Size+0x63e>
    363a:	2d32      	cmp	r5, #50	; 0x32
    363c:	d14c      	bne.n	36d8 <_Min_Heap_Size+0x6d8>
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    363e:	f1a5 0318 	sub.w	r3, r5, #24
    3642:	4a8a      	ldr	r2, [pc, #552]	; (386c <_Min_Heap_Size+0x86c>)
    3644:	fb82 1203 	smull	r1, r2, r2, r3
    3648:	17db      	asrs	r3, r3, #31
    364a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					if (params[whichParam].realVal[0]  > 0.5f)
    364e:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
    3652:	4a82      	ldr	r2, [pc, #520]	; (385c <_Min_Heap_Size+0x85c>)
    3654:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    3658:	ed92 7a02 	vldr	s14, [r2, #8]
    365c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3660:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3668:	dd24      	ble.n	36b4 <_Min_Heap_Size+0x6b4>
						oscsEnabled[whichOsc] = 1;
    366a:	2201      	movs	r2, #1
    366c:	4980      	ldr	r1, [pc, #512]	; (3870 <_Min_Heap_Size+0x870>)
    366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						oscOn[whichOsc] = 1;
    3672:	4980      	ldr	r1, [pc, #512]	; (3874 <_Min_Heap_Size+0x874>)
    3674:	54ca      	strb	r2, [r1, r3]
					for (int j = 0; j < 3; j++)
    3676:	2300      	movs	r3, #0
					int enabledCount = 0;
    3678:	461a      	mov	r2, r3
					for (int j = 0; j < 3; j++)
    367a:	e025      	b.n	36c8 <_Min_Heap_Size+0x6c8>
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    367c:	f1a5 0323 	sub.w	r3, r5, #35	; 0x23
    3680:	497a      	ldr	r1, [pc, #488]	; (386c <_Min_Heap_Size+0x86c>)
    3682:	fb81 2103 	smull	r2, r1, r1, r3
    3686:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    3688:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    368c:	4a73      	ldr	r2, [pc, #460]	; (385c <_Min_Heap_Size+0x85c>)
    368e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    3692:	edd2 7a02 	vldr	s15, [r2, #8]
    3696:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    369a:	ee67 7a87 	vmul.f32	s15, s15, s14
    369e:	fef8 7a67 	vrinta.f32	s15, s15
					setOscilllatorShapes(oscshape, whichOsc);
    36a2:	ebc3 01a1 	rsb	r1, r3, r1, asr #2
    36a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    36aa:	ee17 0a90 	vmov	r0, s15
    36ae:	f005 fd47 	bl	9140 <__setOscilllatorShapes_veneer>
    36b2:	e7be      	b.n	3632 <_Min_Heap_Size+0x632>
						oscsEnabled[whichOsc] = 0;
    36b4:	4a6e      	ldr	r2, [pc, #440]	; (3870 <_Min_Heap_Size+0x870>)
    36b6:	2100      	movs	r1, #0
    36b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    36bc:	e7db      	b.n	3676 <_Min_Heap_Size+0x676>
						enabledCount += oscsEnabled[j];
    36be:	496c      	ldr	r1, [pc, #432]	; (3870 <_Min_Heap_Size+0x870>)
    36c0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    36c4:	440a      	add	r2, r1
					for (int j = 0; j < 3; j++)
    36c6:	3301      	adds	r3, #1
    36c8:	2b02      	cmp	r3, #2
    36ca:	ddf8      	ble.n	36be <_Min_Heap_Size+0x6be>
					oscAmpMult = oscAmpMultArray[enabledCount];
    36cc:	4b6a      	ldr	r3, [pc, #424]	; (3878 <_Min_Heap_Size+0x878>)
    36ce:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    36d2:	681a      	ldr	r2, [r3, #0]
    36d4:	4b69      	ldr	r3, [pc, #420]	; (387c <_Min_Heap_Size+0x87c>)
    36d6:	601a      	str	r2, [r3, #0]
				if ((whichParam == Noise))
    36d8:	2d12      	cmp	r5, #18
    36da:	d053      	beq.n	3784 <_Min_Heap_Size+0x784>
				if ((whichParam == Filter1Type) || (whichParam == Filter2Type))
    36dc:	2d66      	cmp	r5, #102	; 0x66
    36de:	bf18      	it	ne
    36e0:	2d60      	cmpne	r5, #96	; 0x60
    36e2:	d061      	beq.n	37a8 <_Min_Heap_Size+0x7a8>
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    36e4:	2d8c      	cmp	r5, #140	; 0x8c
    36e6:	bf18      	it	ne
    36e8:	2d87      	cmpne	r5, #135	; 0x87
    36ea:	d008      	beq.n	36fe <_Min_Heap_Size+0x6fe>
    36ec:	2d96      	cmp	r5, #150	; 0x96
    36ee:	bf14      	ite	ne
    36f0:	2300      	movne	r3, #0
    36f2:	2301      	moveq	r3, #1
    36f4:	2d91      	cmp	r5, #145	; 0x91
    36f6:	d002      	beq.n	36fe <_Min_Heap_Size+0x6fe>
    36f8:	2b00      	cmp	r3, #0
    36fa:	f000 8100 	beq.w	38fe <_Min_Heap_Size+0x8fe>
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    36fe:	f1a5 0387 	sub.w	r3, r5, #135	; 0x87
    3702:	4a5f      	ldr	r2, [pc, #380]	; (3880 <_Min_Heap_Size+0x880>)
    3704:	fb82 1203 	smull	r1, r2, r2, r3
    3708:	17db      	asrs	r3, r3, #31
    370a:	ebc3 0662 	rsb	r6, r3, r2, asr #1
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    370e:	f8df a14c 	ldr.w	sl, [pc, #332]	; 385c <_Min_Heap_Size+0x85c>
    3712:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    3716:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    371a:	edd3 7a02 	vldr	s15, [r3, #8]
    371e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    3722:	ee67 7a87 	vmul.f32	s15, s15, s14
    3726:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    372a:	4631      	mov	r1, r6
    372c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3730:	ee17 0a90 	vmov	r0, s15
    3734:	f005 fdc4 	bl	92c0 <__setLFOShapes_veneer>
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    3738:	eb06 0786 	add.w	r7, r6, r6, lsl #2
    373c:	f107 0984 	add.w	r9, r7, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    3740:	f107 0885 	add.w	r8, r7, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    3744:	3786      	adds	r7, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    3746:	4b4f      	ldr	r3, [pc, #316]	; (3884 <_Min_Heap_Size+0x884>)
    3748:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    374c:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    3750:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    3754:	ebc9 02c9 	rsb	r2, r9, r9, lsl #3
    3758:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    375c:	6150      	str	r0, [r2, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    375e:	6849      	ldr	r1, [r1, #4]
    3760:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
    3764:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
    3768:	6151      	str	r1, [r2, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    376a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    376e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    3772:	689b      	ldr	r3, [r3, #8]
    3774:	ebc7 02c7 	rsb	r2, r7, r7, lsl #3
    3778:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
    377c:	f8ca 3014 	str.w	r3, [sl, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3780:	2600      	movs	r6, #0
    3782:	e0ba      	b.n	38fa <_Min_Heap_Size+0x8fa>
					if (params[whichParam].realVal[0]  > 0.5f)
    3784:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
    3788:	4b34      	ldr	r3, [pc, #208]	; (385c <_Min_Heap_Size+0x85c>)
    378a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    378e:	ed93 7a02 	vldr	s14, [r3, #8]
    3792:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3796:	eeb4 7ae7 	vcmpe.f32	s14, s15
    379a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    379e:	dd9d      	ble.n	36dc <_Min_Heap_Size+0x6dc>
						noiseOn = 1;
    37a0:	4b39      	ldr	r3, [pc, #228]	; (3888 <_Min_Heap_Size+0x888>)
    37a2:	2201      	movs	r2, #1
    37a4:	701a      	strb	r2, [r3, #0]
    37a6:	e799      	b.n	36dc <_Min_Heap_Size+0x6dc>
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    37a8:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
    37ac:	4f37      	ldr	r7, [pc, #220]	; (388c <_Min_Heap_Size+0x88c>)
    37ae:	fb87 2703 	smull	r2, r7, r7, r3
    37b2:	eba7 77e3 	sub.w	r7, r7, r3, asr #31
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    37b6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 385c <_Min_Heap_Size+0x85c>
    37ba:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    37be:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    37c2:	edd3 7a02 	vldr	s15, [r3, #8]
    37c6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    37ca:	ee67 7a87 	vmul.f32	s15, s15, s14
    37ce:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    37d2:	4639      	mov	r1, r7
    37d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    37d8:	ee17 0a90 	vmov	r0, s15
    37dc:	f005 fe08 	bl	93f0 <__setFilterTypes_veneer>
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    37e0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
    37e4:	0076      	lsls	r6, r6, #1
    37e6:	f106 0863 	add.w	r8, r6, #99	; 0x63
					int filterGainParamNum = Filter1Gain + (whichFilter * FilterParamsNum);
    37ea:	3662      	adds	r6, #98	; 0x62
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    37ec:	4b28      	ldr	r3, [pc, #160]	; (3890 <_Min_Heap_Size+0x890>)
    37ee:	f853 1037 	ldr.w	r1, [r3, r7, lsl #3]
    37f2:	ebc8 02c8 	rsb	r2, r8, r8, lsl #3
    37f6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
    37fa:	6151      	str	r1, [r2, #20]
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    37fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
    3800:	685a      	ldr	r2, [r3, #4]
    3802:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    3806:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    380a:	615a      	str	r2, [r3, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    380c:	2700      	movs	r7, #0
    380e:	e022      	b.n	3856 <_Min_Heap_Size+0x856>
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    3810:	f8df 9048 	ldr.w	r9, [pc, #72]	; 385c <_Min_Heap_Size+0x85c>
    3814:	ebc8 00c8 	rsb	r0, r8, r8, lsl #3
    3818:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    381c:	6942      	ldr	r2, [r0, #20]
    381e:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
    3822:	443b      	add	r3, r7
    3824:	3302      	adds	r3, #2
    3826:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    382a:	4639      	mov	r1, r7
    382c:	7e00      	ldrb	r0, [r0, #24]
    382e:	ed93 0a00 	vldr	s0, [r3]
    3832:	4790      	blx	r2
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    3834:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
    3838:	eb09 0080 	add.w	r0, r9, r0, lsl #2
    383c:	6942      	ldr	r2, [r0, #20]
    383e:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    3842:	443b      	add	r3, r7
    3844:	3302      	adds	r3, #2
    3846:	eb09 0983 	add.w	r9, r9, r3, lsl #2
    384a:	4639      	mov	r1, r7
    384c:	7e00      	ldrb	r0, [r0, #24]
    384e:	ed99 0a00 	vldr	s0, [r9]
    3852:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3854:	3701      	adds	r7, #1
    3856:	2f01      	cmp	r7, #1
    3858:	ddda      	ble.n	3810 <_Min_Heap_Size+0x810>
    385a:	e743      	b.n	36e4 <_Min_Heap_Size+0x6e4>
    385c:	200190dc 	.word	0x200190dc
    3860:	00001a61 	.word	0x00001a61
    3864:	2001453c 	.word	0x2001453c
    3868:	04002001 	.word	0x04002001
    386c:	4ec4ec4f 	.word	0x4ec4ec4f
    3870:	200190d0 	.word	0x200190d0
    3874:	2001d55c 	.word	0x2001d55c
    3878:	20000ad8 	.word	0x20000ad8
    387c:	20000ad4 	.word	0x20000ad4
    3880:	66666667 	.word	0x66666667
    3884:	200186bc 	.word	0x200186bc
    3888:	2001d508 	.word	0x2001d508
    388c:	2aaaaaab 	.word	0x2aaaaaab
    3890:	20016590 	.word	0x20016590
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    3894:	f8df a374 	ldr.w	sl, [pc, #884]	; 3c0c <_Min_Heap_Size+0xc0c>
    3898:	ebc9 00c9 	rsb	r0, r9, r9, lsl #3
    389c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    38a0:	6942      	ldr	r2, [r0, #20]
    38a2:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
    38a6:	4433      	add	r3, r6
    38a8:	3302      	adds	r3, #2
    38aa:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    38ae:	4631      	mov	r1, r6
    38b0:	7e00      	ldrb	r0, [r0, #24]
    38b2:	ed93 0a00 	vldr	s0, [r3]
    38b6:	4790      	blx	r2
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    38b8:	ebc8 00c8 	rsb	r0, r8, r8, lsl #3
    38bc:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    38c0:	6942      	ldr	r2, [r0, #20]
    38c2:	ebc8 03c8 	rsb	r3, r8, r8, lsl #3
    38c6:	4433      	add	r3, r6
    38c8:	3302      	adds	r3, #2
    38ca:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    38ce:	4631      	mov	r1, r6
    38d0:	7e00      	ldrb	r0, [r0, #24]
    38d2:	ed93 0a00 	vldr	s0, [r3]
    38d6:	4790      	blx	r2
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    38d8:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
    38dc:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
    38e0:	6942      	ldr	r2, [r0, #20]
    38e2:	ebc7 03c7 	rsb	r3, r7, r7, lsl #3
    38e6:	4433      	add	r3, r6
    38e8:	3302      	adds	r3, #2
    38ea:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
    38ee:	4631      	mov	r1, r6
    38f0:	7e00      	ldrb	r0, [r0, #24]
    38f2:	ed93 0a00 	vldr	s0, [r3]
    38f6:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    38f8:	3601      	adds	r6, #1
    38fa:	2e01      	cmp	r6, #1
    38fc:	ddca      	ble.n	3894 <_Min_Heap_Size+0x894>
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    38fe:	2d01      	cmp	r5, #1
    3900:	d914      	bls.n	392c <_Min_Heap_Size+0x92c>
				if (whichParam == FXOrder)
    3902:	2d9a      	cmp	r5, #154	; 0x9a
    3904:	d02a      	beq.n	395c <_Min_Heap_Size+0x95c>
				if (whichParam == PedalControlsMaster)
    3906:	2d9b      	cmp	r5, #155	; 0x9b
    3908:	f47f ab26 	bne.w	2f58 <handleSPI+0x218>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    390c:	4bbd      	ldr	r3, [pc, #756]	; (3c04 <_Min_Heap_Size+0xc04>)
    390e:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
    3912:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3916:	eeb4 7ae7 	vcmpe.f32	s14, s15
    391a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    391e:	bfcc      	ite	gt
    3920:	2201      	movgt	r2, #1
    3922:	2200      	movle	r2, #0
    3924:	4bb8      	ldr	r3, [pc, #736]	; (3c08 <_Min_Heap_Size+0xc08>)
    3926:	701a      	strb	r2, [r3, #0]
    3928:	f7ff bb16 	b.w	2f58 <handleSPI+0x218>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    392c:	4bb7      	ldr	r3, [pc, #732]	; (3c0c <_Min_Heap_Size+0xc0c>)
    392e:	edd3 7a02 	vldr	s15, [r3, #8]
    3932:	eddf 6ab7 	vldr	s13, [pc, #732]	; 3c10 <_Min_Heap_Size+0xc10>
    3936:	ee67 7aa6 	vmul.f32	s15, s15, s13
    393a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
    393e:	ee27 7a26 	vmul.f32	s14, s14, s13
    3942:	ee77 7ac7 	vsub.f32	s15, s15, s14
    3946:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    394a:	eec6 6a27 	vdiv.f32	s13, s12, s15
    394e:	4bb1      	ldr	r3, [pc, #708]	; (3c14 <_Min_Heap_Size+0xc14>)
    3950:	edc3 6a00 	vstr	s13, [r3]
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    3954:	4bb0      	ldr	r3, [pc, #704]	; (3c18 <_Min_Heap_Size+0xc18>)
    3956:	ed83 7a00 	vstr	s14, [r3]
    395a:	e7d2      	b.n	3902 <_Min_Heap_Size+0x902>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    395c:	4ba9      	ldr	r3, [pc, #676]	; (3c04 <_Min_Heap_Size+0xc04>)
    395e:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
    3962:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3966:	eeb4 7ae7 	vcmpe.f32	s14, s15
    396a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    396e:	bfcc      	ite	gt
    3970:	2201      	movgt	r2, #1
    3972:	2200      	movle	r2, #0
    3974:	4ba9      	ldr	r3, [pc, #676]	; (3c1c <_Min_Heap_Size+0xc1c>)
    3976:	701a      	strb	r2, [r3, #0]
    3978:	e7c5      	b.n	3906 <_Min_Heap_Size+0x906>
			if (presetReady)
    397a:	4ba9      	ldr	r3, [pc, #676]	; (3c20 <_Min_Heap_Size+0xc20>)
    397c:	681b      	ldr	r3, [r3, #0]
    397e:	2b00      	cmp	r3, #0
    3980:	f43f aaea 	beq.w	2f58 <handleSPI+0x218>
				uint8_t currentByte = offset+1;
    3984:	1c41      	adds	r1, r0, #1
    3986:	b2c9      	uxtb	r1, r1
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3988:	4ba6      	ldr	r3, [pc, #664]	; (3c24 <_Min_Heap_Size+0xc24>)
    398a:	1858      	adds	r0, r3, r1
    398c:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
    3990:	1c48      	adds	r0, r1, #1
    3992:	4418      	add	r0, r3
    3994:	f890 5040 	ldrb.w	r5, [r0, #64]	; 0x40
    3998:	eb05 2506 	add.w	r5, r5, r6, lsl #8
    399c:	b2ad      	uxth	r5, r5
				uint8_t whichSlot = (SPI_LEVERS_RX[currentByte+2]);
    399e:	1c88      	adds	r0, r1, #2
    39a0:	4418      	add	r0, r3
    39a2:	f890 c040 	ldrb.w	ip, [r0, #64]	; 0x40
				uint8_t mappingChangeType = (SPI_LEVERS_RX[currentByte+3]);
    39a6:	1cc8      	adds	r0, r1, #3
    39a8:	4418      	add	r0, r3
    39aa:	f890 e040 	ldrb.w	lr, [r0, #64]	; 0x40
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    39ae:	1d08      	adds	r0, r1, #4
    39b0:	4418      	add	r0, r3
    39b2:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    39b6:	3105      	adds	r1, #5
    39b8:	440b      	add	r3, r1
    39ba:	f893 6040 	ldrb.w	r6, [r3, #64]	; 0x40
    39be:	eb06 2600 	add.w	r6, r6, r0, lsl #8
    39c2:	b236      	sxth	r6, r6
				uint8_t foundOne = 0;
    39c4:	4690      	mov	r8, r2
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    39c6:	2300      	movs	r3, #0
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    39c8:	2720      	movs	r7, #32
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    39ca:	e004      	b.n	39d6 <_Min_Heap_Size+0x9d6>
						whichMapping = j;
    39cc:	b2da      	uxtb	r2, r3
						foundOne = 1;
    39ce:	f04f 0801 	mov.w	r8, #1
    39d2:	e00a      	b.n	39ea <_Min_Heap_Size+0x9ea>
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    39d4:	3301      	adds	r3, #1
    39d6:	2b1f      	cmp	r3, #31
    39d8:	dc0d      	bgt.n	39f6 <_Min_Heap_Size+0x9f6>
					if (mappings[j].destNumber == destNumber)
    39da:	214c      	movs	r1, #76	; 0x4c
    39dc:	fb03 f101 	mul.w	r1, r3, r1
    39e0:	4891      	ldr	r0, [pc, #580]	; (3c28 <_Min_Heap_Size+0xc28>)
    39e2:	5c41      	ldrb	r1, [r0, r1]
    39e4:	b288      	uxth	r0, r1
    39e6:	42a8      	cmp	r0, r5
    39e8:	d0f0      	beq.n	39cc <_Min_Heap_Size+0x9cc>
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    39ea:	29ff      	cmp	r1, #255	; 0xff
    39ec:	d1f2      	bne.n	39d4 <_Min_Heap_Size+0x9d4>
    39ee:	429f      	cmp	r7, r3
    39f0:	ddf0      	ble.n	39d4 <_Min_Heap_Size+0x9d4>
						lowestEmptyMapping = j;
    39f2:	b2df      	uxtb	r7, r3
    39f4:	e7ee      	b.n	39d4 <_Min_Heap_Size+0x9d4>
				if (foundOne == 0)
    39f6:	f1b8 0f00 	cmp.w	r8, #0
    39fa:	d110      	bne.n	3a1e <_Min_Heap_Size+0xa1e>
					numMappings++;
    39fc:	4a8b      	ldr	r2, [pc, #556]	; (3c2c <_Min_Heap_Size+0xc2c>)
    39fe:	7813      	ldrb	r3, [r2, #0]
    3a00:	3301      	adds	r3, #1
    3a02:	7013      	strb	r3, [r2, #0]
					mappings[whichMapping].destNumber = destNumber;
    3a04:	4a88      	ldr	r2, [pc, #544]	; (3c28 <_Min_Heap_Size+0xc28>)
    3a06:	234c      	movs	r3, #76	; 0x4c
    3a08:	fb07 f303 	mul.w	r3, r7, r3
    3a0c:	18d1      	adds	r1, r2, r3
    3a0e:	54d5      	strb	r5, [r2, r3]
					mappings[whichMapping].dest = &params[destNumber];
    3a10:	ebc5 05c5 	rsb	r5, r5, r5, lsl #3
    3a14:	4b7d      	ldr	r3, [pc, #500]	; (3c0c <_Min_Heap_Size+0xc0c>)
    3a16:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3a1a:	604b      	str	r3, [r1, #4]
					whichMapping = lowestEmptyMapping;
    3a1c:	463a      	mov	r2, r7
				if (mappingChangeType == SourceID)
    3a1e:	f1be 0f00 	cmp.w	lr, #0
    3a22:	f040 8091 	bne.w	3b48 <_Min_Heap_Size+0xb48>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    3a26:	4615      	mov	r5, r2
    3a28:	4b7f      	ldr	r3, [pc, #508]	; (3c28 <_Min_Heap_Size+0xc28>)
    3a2a:	214c      	movs	r1, #76	; 0x4c
    3a2c:	fb01 3302 	mla	r3, r1, r2, r3
    3a30:	4463      	add	r3, ip
    3a32:	2101      	movs	r1, #1
    3a34:	f883 1020 	strb.w	r1, [r3, #32]
					if (source == 255)
    3a38:	2eff      	cmp	r6, #255	; 0xff
    3a3a:	d009      	beq.n	3a50 <_Min_Heap_Size+0xa50>
						mappings[whichMapping].hookActive[whichSlot] = 1;
    3a3c:	4b7a      	ldr	r3, [pc, #488]	; (3c28 <_Min_Heap_Size+0xc28>)
    3a3e:	214c      	movs	r1, #76	; 0x4c
    3a40:	fb01 3302 	mla	r3, r1, r2, r3
    3a44:	4463      	add	r3, ip
    3a46:	2201      	movs	r2, #1
    3a48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
						for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3a4c:	2200      	movs	r2, #0
    3a4e:	e049      	b.n	3ae4 <_Min_Heap_Size+0xae4>
						mappings[whichMapping].hookActive[whichSlot] = 0;
    3a50:	4b75      	ldr	r3, [pc, #468]	; (3c28 <_Min_Heap_Size+0xc28>)
    3a52:	214c      	movs	r1, #76	; 0x4c
    3a54:	fb01 3202 	mla	r2, r1, r2, r3
    3a58:	4462      	add	r2, ip
    3a5a:	2300      	movs	r3, #0
    3a5c:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
						for (int i = 0; i < 3; i++)
    3a60:	e000      	b.n	3a64 <_Min_Heap_Size+0xa64>
    3a62:	3301      	adds	r3, #1
    3a64:	2b02      	cmp	r3, #2
    3a66:	ddfc      	ble.n	3a62 <_Min_Heap_Size+0xa62>
							mappings[whichMapping].destNumber = 255;
    3a68:	234c      	movs	r3, #76	; 0x4c
    3a6a:	fb05 f303 	mul.w	r3, r5, r3
    3a6e:	4a6e      	ldr	r2, [pc, #440]	; (3c28 <_Min_Heap_Size+0xc28>)
    3a70:	21ff      	movs	r1, #255	; 0xff
    3a72:	54d1      	strb	r1, [r2, r3]
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3a74:	2600      	movs	r6, #0
    3a76:	e01b      	b.n	3ab0 <_Min_Heap_Size+0xab0>
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    3a78:	4b6b      	ldr	r3, [pc, #428]	; (3c28 <_Min_Heap_Size+0xc28>)
    3a7a:	224c      	movs	r2, #76	; 0x4c
    3a7c:	fb02 3805 	mla	r8, r2, r5, r3
    3a80:	f8d8 7004 	ldr.w	r7, [r8, #4]
    3a84:	eb07 0286 	add.w	r2, r7, r6, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    3a88:	693b      	ldr	r3, [r7, #16]
    3a8a:	ed92 0a00 	vldr	s0, [r2]
    3a8e:	4798      	blx	r3
    3a90:	1cb3      	adds	r3, r6, #2
    3a92:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    3a96:	ed87 0a00 	vstr	s0, [r7]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    3a9a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    3a9e:	6957      	ldr	r7, [r2, #20]
    3aa0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3aa4:	4631      	mov	r1, r6
    3aa6:	7e10      	ldrb	r0, [r2, #24]
    3aa8:	ed93 0a00 	vldr	s0, [r3]
    3aac:	47b8      	blx	r7
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3aae:	3601      	adds	r6, #1
    3ab0:	2e01      	cmp	r6, #1
    3ab2:	dde1      	ble.n	3a78 <_Min_Heap_Size+0xa78>
    3ab4:	f7ff ba50 	b.w	2f58 <handleSPI+0x218>
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3ab8:	eb02 0346 	add.w	r3, r2, r6, lsl #1
    3abc:	485c      	ldr	r0, [pc, #368]	; (3c30 <_Min_Heap_Size+0xc30>)
    3abe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    3ac2:	4959      	ldr	r1, [pc, #356]	; (3c28 <_Min_Heap_Size+0xc28>)
    3ac4:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    3ac8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    3acc:	eb03 034c 	add.w	r3, r3, ip, lsl #1
    3ad0:	4413      	add	r3, r2
    3ad2:	1c9f      	adds	r7, r3, #2
    3ad4:	f841 0027 	str.w	r0, [r1, r7, lsl #2]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3ad8:	3308      	adds	r3, #8
    3ada:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    3ade:	4b55      	ldr	r3, [pc, #340]	; (3c34 <_Min_Heap_Size+0xc34>)
    3ae0:	604b      	str	r3, [r1, #4]
						for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3ae2:	3201      	adds	r2, #1
    3ae4:	2a01      	cmp	r2, #1
    3ae6:	dde7      	ble.n	3ab8 <_Min_Heap_Size+0xab8>
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    3ae8:	2e03      	cmp	r6, #3
    3aea:	dc07      	bgt.n	3afc <_Min_Heap_Size+0xafc>
							mappings[whichMapping].sourceSmoothed[whichSlot] = 0;
    3aec:	4b4e      	ldr	r3, [pc, #312]	; (3c28 <_Min_Heap_Size+0xc28>)
    3aee:	224c      	movs	r2, #76	; 0x4c
    3af0:	fb02 3305 	mla	r3, r2, r5, r3
    3af4:	4463      	add	r3, ip
    3af6:	2200      	movs	r2, #0
    3af8:	f883 2020 	strb.w	r2, [r3, #32]
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3afc:	f1a6 0318 	sub.w	r3, r6, #24
    3b00:	2b03      	cmp	r3, #3
    3b02:	d802      	bhi.n	3b0a <_Min_Heap_Size+0xb0a>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    3b04:	4a4c      	ldr	r2, [pc, #304]	; (3c38 <_Min_Heap_Size+0xc38>)
    3b06:	2101      	movs	r1, #1
    3b08:	54d1      	strb	r1, [r2, r3]
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    3b0a:	f1a6 0314 	sub.w	r3, r6, #20
    3b0e:	2b03      	cmp	r3, #3
    3b10:	d802      	bhi.n	3b18 <_Min_Heap_Size+0xb18>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    3b12:	4a4a      	ldr	r2, [pc, #296]	; (3c3c <_Min_Heap_Size+0xc3c>)
    3b14:	2101      	movs	r1, #1
    3b16:	54d1      	strb	r1, [r2, r3]
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    3b18:	2e02      	cmp	r6, #2
    3b1a:	d802      	bhi.n	3b22 <_Min_Heap_Size+0xb22>
							oscOn[source - OSC_SOURCE_OFFSET] = 1;
    3b1c:	4b48      	ldr	r3, [pc, #288]	; (3c40 <_Min_Heap_Size+0xc40>)
    3b1e:	2201      	movs	r2, #1
    3b20:	559a      	strb	r2, [r3, r6]
						if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    3b22:	2e03      	cmp	r6, #3
    3b24:	d00c      	beq.n	3b40 <_Min_Heap_Size+0xb40>
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    3b26:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    3b2a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
    3b2e:	4463      	add	r3, ip
    3b30:	330e      	adds	r3, #14
    3b32:	4a3d      	ldr	r2, [pc, #244]	; (3c28 <_Min_Heap_Size+0xc28>)
    3b34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b38:	2200      	movs	r2, #0
    3b3a:	605a      	str	r2, [r3, #4]
    3b3c:	f7ff ba0c 	b.w	2f58 <handleSPI+0x218>
							noiseOn = 1;
    3b40:	4b40      	ldr	r3, [pc, #256]	; (3c44 <_Min_Heap_Size+0xc44>)
    3b42:	2201      	movs	r2, #1
    3b44:	701a      	strb	r2, [r3, #0]
    3b46:	e7ee      	b.n	3b26 <_Min_Heap_Size+0xb26>
				else if (mappingChangeType == Amount)
    3b48:	f1be 0f01 	cmp.w	lr, #1
    3b4c:	d005      	beq.n	3b5a <_Min_Heap_Size+0xb5a>
				else if (mappingChangeType == ScalarID)
    3b4e:	f1be 0f02 	cmp.w	lr, #2
    3b52:	f47f aa01 	bne.w	2f58 <handleSPI+0x218>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3b56:	2100      	movs	r1, #0
    3b58:	e025      	b.n	3ba6 <_Min_Heap_Size+0xba6>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    3b5a:	ee07 6a90 	vmov	s15, r6
    3b5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3b62:	ed9f 7a39 	vldr	s14, [pc, #228]	; 3c48 <_Min_Heap_Size+0xc48>
    3b66:	ee67 7a87 	vmul.f32	s15, s15, s14
    3b6a:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    3b6e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3b72:	4463      	add	r3, ip
    3b74:	330e      	adds	r3, #14
    3b76:	4a2c      	ldr	r2, [pc, #176]	; (3c28 <_Min_Heap_Size+0xc28>)
    3b78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b7c:	edc3 7a01 	vstr	s15, [r3, #4]
    3b80:	f7ff b9ea 	b.w	2f58 <handleSPI+0x218>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    3b84:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    3b88:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3b8c:	eb03 034c 	add.w	r3, r3, ip, lsl #1
    3b90:	440b      	add	r3, r1
    3b92:	3308      	adds	r3, #8
    3b94:	4824      	ldr	r0, [pc, #144]	; (3c28 <_Min_Heap_Size+0xc28>)
    3b96:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    3b9a:	4826      	ldr	r0, [pc, #152]	; (3c34 <_Min_Heap_Size+0xc34>)
    3b9c:	6058      	str	r0, [r3, #4]
    3b9e:	e001      	b.n	3ba4 <_Min_Heap_Size+0xba4>
							if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    3ba0:	2e03      	cmp	r6, #3
    3ba2:	d02a      	beq.n	3bfa <_Min_Heap_Size+0xbfa>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3ba4:	3101      	adds	r1, #1
    3ba6:	2901      	cmp	r1, #1
    3ba8:	f73f a9d6 	bgt.w	2f58 <handleSPI+0x218>
						if (scalar == 0xff)
    3bac:	2eff      	cmp	r6, #255	; 0xff
    3bae:	d0e9      	beq.n	3b84 <_Min_Heap_Size+0xb84>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3bb0:	eb01 0346 	add.w	r3, r1, r6, lsl #1
    3bb4:	4d1e      	ldr	r5, [pc, #120]	; (3c30 <_Min_Heap_Size+0xc30>)
    3bb6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3bba:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    3bbe:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3bc2:	eb03 034c 	add.w	r3, r3, ip, lsl #1
    3bc6:	440b      	add	r3, r1
    3bc8:	3308      	adds	r3, #8
    3bca:	4817      	ldr	r0, [pc, #92]	; (3c28 <_Min_Heap_Size+0xc28>)
    3bcc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    3bd0:	605d      	str	r5, [r3, #4]
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3bd2:	f1a6 0318 	sub.w	r3, r6, #24
    3bd6:	2b03      	cmp	r3, #3
    3bd8:	d802      	bhi.n	3be0 <_Min_Heap_Size+0xbe0>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3bda:	4817      	ldr	r0, [pc, #92]	; (3c38 <_Min_Heap_Size+0xc38>)
    3bdc:	2501      	movs	r5, #1
    3bde:	54c5      	strb	r5, [r0, r3]
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    3be0:	f1a6 0314 	sub.w	r3, r6, #20
    3be4:	2b03      	cmp	r3, #3
    3be6:	d802      	bhi.n	3bee <_Min_Heap_Size+0xbee>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    3be8:	4814      	ldr	r0, [pc, #80]	; (3c3c <_Min_Heap_Size+0xc3c>)
    3bea:	2501      	movs	r5, #1
    3bec:	54c5      	strb	r5, [r0, r3]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    3bee:	2e02      	cmp	r6, #2
    3bf0:	d8d6      	bhi.n	3ba0 <_Min_Heap_Size+0xba0>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    3bf2:	4b13      	ldr	r3, [pc, #76]	; (3c40 <_Min_Heap_Size+0xc40>)
    3bf4:	2001      	movs	r0, #1
    3bf6:	5598      	strb	r0, [r3, r6]
    3bf8:	e7d2      	b.n	3ba0 <_Min_Heap_Size+0xba0>
								noiseOn = 1;
    3bfa:	4b12      	ldr	r3, [pc, #72]	; (3c44 <_Min_Heap_Size+0xc44>)
    3bfc:	2001      	movs	r0, #1
    3bfe:	7018      	strb	r0, [r3, #0]
    3c00:	e7d0      	b.n	3ba4 <_Min_Heap_Size+0xba4>
    3c02:	bf00      	nop
    3c04:	2001a0dc 	.word	0x2001a0dc
    3c08:	2001a1ec 	.word	0x2001a1ec
    3c0c:	200190dc 	.word	0x200190dc
    3c10:	42fe0000 	.word	0x42fe0000
    3c14:	200190c0 	.word	0x200190c0
    3c18:	200190c4 	.word	0x200190c4
    3c1c:	200166b9 	.word	0x200166b9
    3c20:	20005544 	.word	0x20005544
    3c24:	30000800 	.word	0x30000800
    3c28:	20018740 	.word	0x20018740
    3c2c:	200190cc 	.word	0x200190cc
    3c30:	2001d77c 	.word	0x2001d77c
    3c34:	200008b0 	.word	0x200008b0
    3c38:	2001d2c4 	.word	0x2001d2c4
    3c3c:	2001d140 	.word	0x2001d140
    3c40:	2001d55c 	.word	0x2001d55c
    3c44:	2001d508 	.word	0x2001d508
    3c48:	37fffffc 	.word	0x37fffffc
			uint_fast8_t  currentByte = offset+1;
    3c4c:	1c42      	adds	r2, r0, #1
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3c4e:	4b7b      	ldr	r3, [pc, #492]	; (3e3c <_Min_Heap_Size+0xe3c>)
    3c50:	4413      	add	r3, r2
    3c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    3c56:	ee07 3a90 	vmov	s15, r3
    3c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3c5e:	ed9f 7a78 	vldr	s14, [pc, #480]	; 3e40 <_Min_Heap_Size+0xe40>
    3c62:	ee67 7a87 	vmul.f32	s15, s15, s14
    3c66:	4b77      	ldr	r3, [pc, #476]	; (3e44 <_Min_Heap_Size+0xe44>)
    3c68:	edc3 7a00 	vstr	s15, [r3]
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3c6c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3c70:	ee67 7a87 	vmul.f32	s15, s15, s14
    3c74:	4b74      	ldr	r3, [pc, #464]	; (3e48 <_Min_Heap_Size+0xe48>)
    3c76:	edc3 7a00 	vstr	s15, [r3]
    3c7a:	f7ff b96d 	b.w	2f58 <handleSPI+0x218>
			if (boardNumber == 0)
    3c7e:	4b73      	ldr	r3, [pc, #460]	; (3e4c <_Min_Heap_Size+0xe4c>)
    3c80:	781b      	ldrb	r3, [r3, #0]
    3c82:	2b00      	cmp	r3, #0
    3c84:	f47f a968 	bne.w	2f58 <handleSPI+0x218>
				brainFirmwareUpdateRequested = 1;
    3c88:	4b71      	ldr	r3, [pc, #452]	; (3e50 <_Min_Heap_Size+0xe50>)
    3c8a:	2201      	movs	r2, #1
    3c8c:	601a      	str	r2, [r3, #0]
    3c8e:	f7ff b963 	b.w	2f58 <handleSPI+0x218>
			if (boardNumber == 0)
    3c92:	4b6e      	ldr	r3, [pc, #440]	; (3e4c <_Min_Heap_Size+0xe4c>)
    3c94:	781b      	ldrb	r3, [r3, #0]
    3c96:	2b00      	cmp	r3, #0
    3c98:	f47f a95e 	bne.w	2f58 <handleSPI+0x218>
				pluckFirmwareUpdateRequested = 1;
    3c9c:	4b6d      	ldr	r3, [pc, #436]	; (3e54 <_Min_Heap_Size+0xe54>)
    3c9e:	2201      	movs	r2, #1
    3ca0:	601a      	str	r2, [r3, #0]
    3ca2:	f7ff b959 	b.w	2f58 <handleSPI+0x218>
			if (boardNumber == 0)
    3ca6:	4b69      	ldr	r3, [pc, #420]	; (3e4c <_Min_Heap_Size+0xe4c>)
    3ca8:	781b      	ldrb	r3, [r3, #0]
    3caa:	2b00      	cmp	r3, #0
    3cac:	f47f a954 	bne.w	2f58 <handleSPI+0x218>
				uint_fast8_t  currentByte = offset+1;
    3cb0:	1c42      	adds	r2, r0, #1
				presetNumberToSave = SPI_LEVERS_RX[currentByte];
    3cb2:	4b62      	ldr	r3, [pc, #392]	; (3e3c <_Min_Heap_Size+0xe3c>)
    3cb4:	4413      	add	r3, r2
    3cb6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    3cba:	4b67      	ldr	r3, [pc, #412]	; (3e58 <_Min_Heap_Size+0xe58>)
    3cbc:	701a      	strb	r2, [r3, #0]
				currentByte++;
    3cbe:	3002      	adds	r0, #2
				bufferPos = 0;
    3cc0:	2100      	movs	r1, #0
    3cc2:	4b66      	ldr	r3, [pc, #408]	; (3e5c <_Min_Heap_Size+0xe5c>)
    3cc4:	8019      	strh	r1, [r3, #0]
				for (int i = 0; i < 30; i++)
    3cc6:	e00d      	b.n	3ce4 <_Min_Heap_Size+0xce4>
					buffer[bufferPos++] = SPI_LEVERS_RX[currentByte++];
    3cc8:	4d64      	ldr	r5, [pc, #400]	; (3e5c <_Min_Heap_Size+0xe5c>)
    3cca:	882b      	ldrh	r3, [r5, #0]
    3ccc:	b29b      	uxth	r3, r3
    3cce:	1c5a      	adds	r2, r3, #1
    3cd0:	b292      	uxth	r2, r2
    3cd2:	802a      	strh	r2, [r5, #0]
    3cd4:	4a59      	ldr	r2, [pc, #356]	; (3e3c <_Min_Heap_Size+0xe3c>)
    3cd6:	4402      	add	r2, r0
    3cd8:	f892 5040 	ldrb.w	r5, [r2, #64]	; 0x40
    3cdc:	4a60      	ldr	r2, [pc, #384]	; (3e60 <_Min_Heap_Size+0xe60>)
    3cde:	54d5      	strb	r5, [r2, r3]
				for (int i = 0; i < 30; i++)
    3ce0:	3101      	adds	r1, #1
					buffer[bufferPos++] = SPI_LEVERS_RX[currentByte++];
    3ce2:	3001      	adds	r0, #1
				for (int i = 0; i < 30; i++)
    3ce4:	291d      	cmp	r1, #29
    3ce6:	ddef      	ble.n	3cc8 <_Min_Heap_Size+0xcc8>
				if (whichModel != 0)
    3ce8:	4b5e      	ldr	r3, [pc, #376]	; (3e64 <_Min_Heap_Size+0xe64>)
    3cea:	7818      	ldrb	r0, [r3, #0]
    3cec:	2800      	cmp	r0, #0
    3cee:	f000 8094 	beq.w	3e1a <_Min_Heap_Size+0xe1a>
					buffer[1] = 19; // instead of the 18 that was sent by the brain, to signal that this is an internal model, not synth
    3cf2:	495b      	ldr	r1, [pc, #364]	; (3e60 <_Min_Heap_Size+0xe60>)
    3cf4:	2313      	movs	r3, #19
    3cf6:	704b      	strb	r3, [r1, #1]
					bufferPos = 20;//first byte after name
    3cf8:	4a58      	ldr	r2, [pc, #352]	; (3e5c <_Min_Heap_Size+0xe5c>)
    3cfa:	2314      	movs	r3, #20
    3cfc:	8013      	strh	r3, [r2, #0]
					buffer[bufferPos] = whichModel; // not a synth preset, maybe string or additive or something
    3cfe:	8813      	ldrh	r3, [r2, #0]
    3d00:	b29b      	uxth	r3, r3
    3d02:	54c8      	strb	r0, [r1, r3]
					bufferPos++;
    3d04:	8813      	ldrh	r3, [r2, #0]
    3d06:	b29b      	uxth	r3, r3
    3d08:	3301      	adds	r3, #1
    3d0a:	b29b      	uxth	r3, r3
    3d0c:	8013      	strh	r3, [r2, #0]
					for (int j = 0; j < 8; j++)
    3d0e:	2600      	movs	r6, #0
    3d10:	e019      	b.n	3d46 <_Min_Heap_Size+0xd46>
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j][k];
    3d12:	4b55      	ldr	r3, [pc, #340]	; (3e68 <_Min_Heap_Size+0xe68>)
    3d14:	781f      	ldrb	r7, [r3, #0]
    3d16:	4951      	ldr	r1, [pc, #324]	; (3e5c <_Min_Heap_Size+0xe5c>)
    3d18:	8808      	ldrh	r0, [r1, #0]
    3d1a:	b280      	uxth	r0, r0
    3d1c:	eb06 0586 	add.w	r5, r6, r6, lsl #2
    3d20:	23c8      	movs	r3, #200	; 0xc8
    3d22:	fb07 f303 	mul.w	r3, r7, r3
    3d26:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    3d2a:	4d50      	ldr	r5, [pc, #320]	; (3e6c <_Min_Heap_Size+0xe6c>)
    3d2c:	442b      	add	r3, r5
    3d2e:	5c9d      	ldrb	r5, [r3, r2]
    3d30:	4b4b      	ldr	r3, [pc, #300]	; (3e60 <_Min_Heap_Size+0xe60>)
    3d32:	541d      	strb	r5, [r3, r0]
							bufferPos++;
    3d34:	880b      	ldrh	r3, [r1, #0]
    3d36:	b29b      	uxth	r3, r3
    3d38:	3301      	adds	r3, #1
    3d3a:	b29b      	uxth	r3, r3
    3d3c:	800b      	strh	r3, [r1, #0]
						for (int k = 0; k < 9; k++)
    3d3e:	3201      	adds	r2, #1
    3d40:	2a08      	cmp	r2, #8
    3d42:	dde6      	ble.n	3d12 <_Min_Heap_Size+0xd12>
					for (int j = 0; j < 8; j++)
    3d44:	3601      	adds	r6, #1
    3d46:	2e07      	cmp	r6, #7
    3d48:	dc01      	bgt.n	3d4e <_Min_Heap_Size+0xd4e>
						for (int k = 0; k < 9; k++)
    3d4a:	2200      	movs	r2, #0
    3d4c:	e7f8      	b.n	3d40 <_Min_Heap_Size+0xd40>
					for (int j = 0; j < 4; j++)
    3d4e:	2500      	movs	r5, #0
    3d50:	e01b      	b.n	3d8a <_Min_Heap_Size+0xd8a>
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+8][k];
    3d52:	4b45      	ldr	r3, [pc, #276]	; (3e68 <_Min_Heap_Size+0xe68>)
    3d54:	781f      	ldrb	r7, [r3, #0]
    3d56:	f105 0308 	add.w	r3, r5, #8
    3d5a:	4840      	ldr	r0, [pc, #256]	; (3e5c <_Min_Heap_Size+0xe5c>)
    3d5c:	8806      	ldrh	r6, [r0, #0]
    3d5e:	b2b6      	uxth	r6, r6
    3d60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3d64:	22c8      	movs	r2, #200	; 0xc8
    3d66:	fb07 f202 	mul.w	r2, r7, r2
    3d6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3d6e:	4a3f      	ldr	r2, [pc, #252]	; (3e6c <_Min_Heap_Size+0xe6c>)
    3d70:	4413      	add	r3, r2
    3d72:	5c5a      	ldrb	r2, [r3, r1]
    3d74:	4b3a      	ldr	r3, [pc, #232]	; (3e60 <_Min_Heap_Size+0xe60>)
    3d76:	559a      	strb	r2, [r3, r6]
							bufferPos++;
    3d78:	8803      	ldrh	r3, [r0, #0]
    3d7a:	b29b      	uxth	r3, r3
    3d7c:	3301      	adds	r3, #1
    3d7e:	b29b      	uxth	r3, r3
    3d80:	8003      	strh	r3, [r0, #0]
						for (int k = 0; k < 10; k++)
    3d82:	3101      	adds	r1, #1
    3d84:	2909      	cmp	r1, #9
    3d86:	dde4      	ble.n	3d52 <_Min_Heap_Size+0xd52>
					for (int j = 0; j < 4; j++)
    3d88:	3501      	adds	r5, #1
    3d8a:	2d03      	cmp	r5, #3
    3d8c:	dc01      	bgt.n	3d92 <_Min_Heap_Size+0xd92>
						for (int k = 0; k < 10; k++)
    3d8e:	2100      	movs	r1, #0
    3d90:	e7f8      	b.n	3d84 <_Min_Heap_Size+0xd84>
					for (int j = 0; j < 8; j++)
    3d92:	2500      	movs	r5, #0
    3d94:	e01b      	b.n	3dce <_Min_Heap_Size+0xdce>
							buffer[bufferPos] = macroNamesArray[currentActivePreset][j+12][k];
    3d96:	4b34      	ldr	r3, [pc, #208]	; (3e68 <_Min_Heap_Size+0xe68>)
    3d98:	781f      	ldrb	r7, [r3, #0]
    3d9a:	f105 030c 	add.w	r3, r5, #12
    3d9e:	482f      	ldr	r0, [pc, #188]	; (3e5c <_Min_Heap_Size+0xe5c>)
    3da0:	8806      	ldrh	r6, [r0, #0]
    3da2:	b2b6      	uxth	r6, r6
    3da4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3da8:	22c8      	movs	r2, #200	; 0xc8
    3daa:	fb07 f202 	mul.w	r2, r7, r2
    3dae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3db2:	4a2e      	ldr	r2, [pc, #184]	; (3e6c <_Min_Heap_Size+0xe6c>)
    3db4:	4413      	add	r3, r2
    3db6:	5c5a      	ldrb	r2, [r3, r1]
    3db8:	4b29      	ldr	r3, [pc, #164]	; (3e60 <_Min_Heap_Size+0xe60>)
    3dba:	559a      	strb	r2, [r3, r6]
							bufferPos++;
    3dbc:	8803      	ldrh	r3, [r0, #0]
    3dbe:	b29b      	uxth	r3, r3
    3dc0:	3301      	adds	r3, #1
    3dc2:	b29b      	uxth	r3, r3
    3dc4:	8003      	strh	r3, [r0, #0]
						for (int k = 0; k < 9; k++)
    3dc6:	3101      	adds	r1, #1
    3dc8:	2908      	cmp	r1, #8
    3dca:	dde4      	ble.n	3d96 <_Min_Heap_Size+0xd96>
					for (int j = 0; j < 8; j++)
    3dcc:	3501      	adds	r5, #1
    3dce:	2d07      	cmp	r5, #7
    3dd0:	dc01      	bgt.n	3dd6 <_Min_Heap_Size+0xdd6>
						for (int k = 0; k < 9; k++)
    3dd2:	2100      	movs	r1, #0
    3dd4:	e7f8      	b.n	3dc8 <_Min_Heap_Size+0xdc8>
					for (int i = 0; i < 20; i++)
    3dd6:	2000      	movs	r0, #0
    3dd8:	e01d      	b.n	3e16 <_Min_Heap_Size+0xe16>
						uint16_t integerVersion = knobScaled[i] * TWO_TO_16;
    3dda:	4b25      	ldr	r3, [pc, #148]	; (3e70 <_Min_Heap_Size+0xe70>)
    3ddc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    3de0:	edd3 7a00 	vldr	s15, [r3]
    3de4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 3e74 <_Min_Heap_Size+0xe74>
    3de8:	ee67 7a87 	vmul.f32	s15, s15, s14
    3dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3df0:	ee17 3a90 	vmov	r3, s15
						buffer[bufferPos] = integerVersion >> 8;
    3df4:	4919      	ldr	r1, [pc, #100]	; (3e5c <_Min_Heap_Size+0xe5c>)
    3df6:	880a      	ldrh	r2, [r1, #0]
    3df8:	b292      	uxth	r2, r2
    3dfa:	4d19      	ldr	r5, [pc, #100]	; (3e60 <_Min_Heap_Size+0xe60>)
    3dfc:	f3c3 2607 	ubfx	r6, r3, #8, #8
    3e00:	54ae      	strb	r6, [r5, r2]
						buffer[bufferPos+1] = integerVersion & 255;
    3e02:	880a      	ldrh	r2, [r1, #0]
    3e04:	b292      	uxth	r2, r2
    3e06:	3201      	adds	r2, #1
    3e08:	54ab      	strb	r3, [r5, r2]
						bufferPos = bufferPos + 2;
    3e0a:	880b      	ldrh	r3, [r1, #0]
    3e0c:	b29b      	uxth	r3, r3
    3e0e:	3302      	adds	r3, #2
    3e10:	b29b      	uxth	r3, r3
    3e12:	800b      	strh	r3, [r1, #0]
					for (int i = 0; i < 20; i++)
    3e14:	3001      	adds	r0, #1
    3e16:	2813      	cmp	r0, #19
    3e18:	dddf      	ble.n	3dda <_Min_Heap_Size+0xdda>
				 presetNumberToLoad = presetNumberToSave;
    3e1a:	4b0f      	ldr	r3, [pc, #60]	; (3e58 <_Min_Heap_Size+0xe58>)
    3e1c:	781b      	ldrb	r3, [r3, #0]
    3e1e:	b2db      	uxtb	r3, r3
    3e20:	4a15      	ldr	r2, [pc, #84]	; (3e78 <_Min_Heap_Size+0xe78>)
    3e22:	7013      	strb	r3, [r2, #0]
				 presetWaitingToParse = bufferPos;
    3e24:	4a0d      	ldr	r2, [pc, #52]	; (3e5c <_Min_Heap_Size+0xe5c>)
    3e26:	8813      	ldrh	r3, [r2, #0]
    3e28:	b29b      	uxth	r3, r3
    3e2a:	4914      	ldr	r1, [pc, #80]	; (3e7c <_Min_Heap_Size+0xe7c>)
    3e2c:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    3e2e:	8813      	ldrh	r3, [r2, #0]
    3e30:	b29b      	uxth	r3, r3
    3e32:	4a13      	ldr	r2, [pc, #76]	; (3e80 <_Min_Heap_Size+0xe80>)
    3e34:	6013      	str	r3, [r2, #0]
    3e36:	f7ff b88f 	b.w	2f58 <handleSPI+0x218>
    3e3a:	bf00      	nop
    3e3c:	30000800 	.word	0x30000800
    3e40:	3c23d70a 	.word	0x3c23d70a
    3e44:	2000068c 	.word	0x2000068c
    3e48:	20000690 	.word	0x20000690
    3e4c:	200144e5 	.word	0x200144e5
    3e50:	200144f8 	.word	0x200144f8
    3e54:	2001a1f0 	.word	0x2001a1f0
    3e58:	2001a207 	.word	0x2001a207
    3e5c:	200144fc 	.word	0x200144fc
    3e60:	30042380 	.word	0x30042380
    3e64:	2001c80d 	.word	0x2001c80d
    3e68:	200008ac 	.word	0x200008ac
    3e6c:	30043380 	.word	0x30043380
    3e70:	200053e0 	.word	0x200053e0
    3e74:	47800000 	.word	0x47800000
    3e78:	2001a206 	.word	0x2001a206
    3e7c:	2001a20c 	.word	0x2001a20c
    3e80:	2001a210 	.word	0x2001a210
    3e84:	f3af 8000 	nop.w
    3e88:	f3af 8000 	nop.w
    3e8c:	f3af 8000 	nop.w
    3e90:	f3af 8000 	nop.w
    3e94:	f3af 8000 	nop.w
    3e98:	f3af 8000 	nop.w
    3e9c:	f3af 8000 	nop.w

00003ea0 <HAL_I2C_SlaveRxCpltCallback>:
	presetWaitingToParse = 4096;
    3ea0:	4b02      	ldr	r3, [pc, #8]	; (3eac <HAL_I2C_SlaveRxCpltCallback+0xc>)
    3ea2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    3ea6:	601a      	str	r2, [r3, #0]
}
    3ea8:	4770      	bx	lr
    3eaa:	bf00      	nop
    3eac:	2001a20c 	.word	0x2001a20c
    3eb0:	f3af 8000 	nop.w
    3eb4:	f3af 8000 	nop.w
    3eb8:	f3af 8000 	nop.w
    3ebc:	f3af 8000 	nop.w

00003ec0 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    3ec0:	4b01      	ldr	r3, [pc, #4]	; (3ec8 <HAL_I2C_MasterTxCpltCallback+0x8>)
    3ec2:	2200      	movs	r2, #0
    3ec4:	701a      	strb	r2, [r3, #0]
}
    3ec6:	4770      	bx	lr
    3ec8:	200166ba 	.word	0x200166ba
    3ecc:	f3af 8000 	nop.w
    3ed0:	f3af 8000 	nop.w
    3ed4:	f3af 8000 	nop.w
    3ed8:	f3af 8000 	nop.w
    3edc:	f3af 8000 	nop.w

00003ee0 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    3ee0:	2300      	movs	r3, #0
    3ee2:	4a05      	ldr	r2, [pc, #20]	; (3ef8 <HAL_I2C_ErrorCallback+0x18>)
    3ee4:	7013      	strb	r3, [r2, #0]
	receivingI2C = 0;
    3ee6:	4a05      	ldr	r2, [pc, #20]	; (3efc <HAL_I2C_ErrorCallback+0x1c>)
    3ee8:	7013      	strb	r3, [r2, #0]
	I2CErrors++;
    3eea:	4a05      	ldr	r2, [pc, #20]	; (3f00 <HAL_I2C_ErrorCallback+0x20>)
    3eec:	7813      	ldrb	r3, [r2, #0]
    3eee:	3301      	adds	r3, #1
    3ef0:	b2db      	uxtb	r3, r3
    3ef2:	7013      	strb	r3, [r2, #0]
}
    3ef4:	4770      	bx	lr
    3ef6:	bf00      	nop
    3ef8:	200166ba 	.word	0x200166ba
    3efc:	2001a664 	.word	0x2001a664
    3f00:	200144e4 	.word	0x200144e4
    3f04:	f3af 8000 	nop.w
    3f08:	f3af 8000 	nop.w
    3f0c:	f3af 8000 	nop.w
    3f10:	f3af 8000 	nop.w
    3f14:	f3af 8000 	nop.w
    3f18:	f3af 8000 	nop.w
    3f1c:	f3af 8000 	nop.w

00003f20 <HAL_SPI_TxRxCpltCallback>:
{
    3f20:	b510      	push	{r4, lr}
	interrupted = 1;
    3f22:	4b2b      	ldr	r3, [pc, #172]	; (3fd0 <HAL_SPI_TxRxCpltCallback+0xb0>)
    3f24:	2201      	movs	r2, #1
    3f26:	701a      	strb	r2, [r3, #0]
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    3f28:	4b2a      	ldr	r3, [pc, #168]	; (3fd4 <HAL_SPI_TxRxCpltCallback+0xb4>)
    3f2a:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    3f2e:	f3bf 8f4f 	dsb	sy
*/
__STATIC_FORCEINLINE void SCB_CleanInvalidateDCache_by_Addr (volatile void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) {
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    3f32:	2260      	movs	r2, #96	; 0x60
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;

      __DSB();

      do {
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    3f34:	4928      	ldr	r1, [pc, #160]	; (3fd8 <HAL_SPI_TxRxCpltCallback+0xb8>)
    3f36:	f8c1 3270 	str.w	r3, [r1, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    3f3a:	3320      	adds	r3, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    3f3c:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    3f3e:	2a00      	cmp	r2, #0
    3f40:	dcf8      	bgt.n	3f34 <HAL_SPI_TxRxCpltCallback+0x14>
    3f42:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f46:	f3bf 8f6f 	isb	sy
	if ((SPI_LEVERS_RX[62] == 254) && (SPI_LEVERS_RX[63] == 253))
    3f4a:	4b24      	ldr	r3, [pc, #144]	; (3fdc <HAL_SPI_TxRxCpltCallback+0xbc>)
    3f4c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
    3f50:	2bfe      	cmp	r3, #254	; 0xfe
    3f52:	d104      	bne.n	3f5e <HAL_SPI_TxRxCpltCallback+0x3e>
    3f54:	4b21      	ldr	r3, [pc, #132]	; (3fdc <HAL_SPI_TxRxCpltCallback+0xbc>)
    3f56:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    3f5a:	2bfd      	cmp	r3, #253	; 0xfd
    3f5c:	d034      	beq.n	3fc8 <HAL_SPI_TxRxCpltCallback+0xa8>
		HAL_SPI_Abort(&hspi1);
    3f5e:	4c20      	ldr	r4, [pc, #128]	; (3fe0 <HAL_SPI_TxRxCpltCallback+0xc0>)
    3f60:	4620      	mov	r0, r4
    3f62:	f005 fad9 	bl	9518 <__HAL_SPI_Abort_veneer>
		__HAL_RCC_SPI1_FORCE_RESET();
    3f66:	4b1f      	ldr	r3, [pc, #124]	; (3fe4 <HAL_SPI_TxRxCpltCallback+0xc4>)
    3f68:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3f6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    3f70:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		__HAL_RCC_SPI1_RELEASE_RESET();
    3f74:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    3f78:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    3f7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		MX_SPI1_Init();
    3f80:	f005 fb06 	bl	9590 <__MX_SPI1_Init_veneer>
		__HAL_SPI_ENABLE(&hspi1);
    3f84:	6822      	ldr	r2, [r4, #0]
    3f86:	6813      	ldr	r3, [r2, #0]
    3f88:	f043 0301 	orr.w	r3, r3, #1
    3f8c:	6013      	str	r3, [r2, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    3f8e:	4913      	ldr	r1, [pc, #76]	; (3fdc <HAL_SPI_TxRxCpltCallback+0xbc>)
    3f90:	2340      	movs	r3, #64	; 0x40
    3f92:	18ca      	adds	r2, r1, r3
    3f94:	4620      	mov	r0, r4
    3f96:	f005 f9ab 	bl	92f0 <__HAL_SPI_TransmitReceive_DMA_veneer>
		numResets++;
    3f9a:	4a13      	ldr	r2, [pc, #76]	; (3fe8 <HAL_SPI_TxRxCpltCallback+0xc8>)
    3f9c:	7813      	ldrb	r3, [r2, #0]
    3f9e:	3301      	adds	r3, #1
    3fa0:	b2db      	uxtb	r3, r3
    3fa2:	7013      	strb	r3, [r2, #0]
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_TX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    3fa4:	4b0d      	ldr	r3, [pc, #52]	; (3fdc <HAL_SPI_TxRxCpltCallback+0xbc>)
    3fa6:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    3faa:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    3fae:	2260      	movs	r2, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    3fb0:	4909      	ldr	r1, [pc, #36]	; (3fd8 <HAL_SPI_TxRxCpltCallback+0xb8>)
    3fb2:	f8c1 3270 	str.w	r3, [r1, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    3fb6:	3320      	adds	r3, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    3fb8:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    3fba:	2a00      	cmp	r2, #0
    3fbc:	dcf8      	bgt.n	3fb0 <HAL_SPI_TxRxCpltCallback+0x90>
    3fbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3fc2:	f3bf 8f6f 	isb	sy
}
    3fc6:	bd10      	pop	{r4, pc}
		handleSPI(LEVER_BUFFER_SIZE);
    3fc8:	2020      	movs	r0, #32
    3fca:	f7fe feb9 	bl	2d40 <handleSPI>
    3fce:	e7e9      	b.n	3fa4 <HAL_SPI_TxRxCpltCallback+0x84>
    3fd0:	200053c8 	.word	0x200053c8
    3fd4:	30000840 	.word	0x30000840
    3fd8:	e000ed00 	.word	0xe000ed00
    3fdc:	30000800 	.word	0x30000800
    3fe0:	2001cc2c 	.word	0x2001cc2c
    3fe4:	58024400 	.word	0x58024400
    3fe8:	200190cd 	.word	0x200190cd
    3fec:	f3af 8000 	nop.w
    3ff0:	f3af 8000 	nop.w
    3ff4:	f3af 8000 	nop.w
    3ff8:	f3af 8000 	nop.w
    3ffc:	f3af 8000 	nop.w

00004000 <HAL_SPI_TxRxHalfCpltCallback>:
{
    4000:	b510      	push	{r4, lr}
	interrupted = 1;
    4002:	4b2b      	ldr	r3, [pc, #172]	; (40b0 <HAL_SPI_TxRxHalfCpltCallback+0xb0>)
    4004:	2201      	movs	r2, #1
    4006:	701a      	strb	r2, [r3, #0]
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    4008:	4b2a      	ldr	r3, [pc, #168]	; (40b4 <HAL_SPI_TxRxHalfCpltCallback+0xb4>)
    400a:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    400e:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    4012:	2260      	movs	r2, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4014:	4928      	ldr	r1, [pc, #160]	; (40b8 <HAL_SPI_TxRxHalfCpltCallback+0xb8>)
    4016:	f8c1 3270 	str.w	r3, [r1, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    401a:	3320      	adds	r3, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    401c:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    401e:	2a00      	cmp	r2, #0
    4020:	dcf8      	bgt.n	4014 <HAL_SPI_TxRxHalfCpltCallback+0x14>
    4022:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4026:	f3bf 8f6f 	isb	sy
	if ((SPI_LEVERS_RX[30] == 254) && (SPI_LEVERS_RX[31] == 253))
    402a:	4b24      	ldr	r3, [pc, #144]	; (40bc <HAL_SPI_TxRxHalfCpltCallback+0xbc>)
    402c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
    4030:	2bfe      	cmp	r3, #254	; 0xfe
    4032:	d104      	bne.n	403e <HAL_SPI_TxRxHalfCpltCallback+0x3e>
    4034:	4b21      	ldr	r3, [pc, #132]	; (40bc <HAL_SPI_TxRxHalfCpltCallback+0xbc>)
    4036:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    403a:	2bfd      	cmp	r3, #253	; 0xfd
    403c:	d034      	beq.n	40a8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>
		HAL_SPI_Abort(&hspi1);
    403e:	4c20      	ldr	r4, [pc, #128]	; (40c0 <HAL_SPI_TxRxHalfCpltCallback+0xc0>)
    4040:	4620      	mov	r0, r4
    4042:	f005 fa69 	bl	9518 <__HAL_SPI_Abort_veneer>
		__HAL_RCC_SPI1_FORCE_RESET();
    4046:	4b1f      	ldr	r3, [pc, #124]	; (40c4 <HAL_SPI_TxRxHalfCpltCallback+0xc4>)
    4048:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    404c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    4050:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		__HAL_RCC_SPI1_RELEASE_RESET();
    4054:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4058:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    405c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		MX_SPI1_Init();
    4060:	f005 fa96 	bl	9590 <__MX_SPI1_Init_veneer>
		__HAL_SPI_ENABLE(&hspi1);
    4064:	6822      	ldr	r2, [r4, #0]
    4066:	6813      	ldr	r3, [r2, #0]
    4068:	f043 0301 	orr.w	r3, r3, #1
    406c:	6013      	str	r3, [r2, #0]
		HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    406e:	4913      	ldr	r1, [pc, #76]	; (40bc <HAL_SPI_TxRxHalfCpltCallback+0xbc>)
    4070:	2340      	movs	r3, #64	; 0x40
    4072:	18ca      	adds	r2, r1, r3
    4074:	4620      	mov	r0, r4
    4076:	f005 f93b 	bl	92f0 <__HAL_SPI_TransmitReceive_DMA_veneer>
		numResets++;
    407a:	4a13      	ldr	r2, [pc, #76]	; (40c8 <HAL_SPI_TxRxHalfCpltCallback+0xc8>)
    407c:	7813      	ldrb	r3, [r2, #0]
    407e:	3301      	adds	r3, #1
    4080:	b2db      	uxtb	r3, r3
    4082:	7013      	strb	r3, [r2, #0]
	SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_TX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    4084:	4b0d      	ldr	r3, [pc, #52]	; (40bc <HAL_SPI_TxRxHalfCpltCallback+0xbc>)
    4086:	f023 031f 	bic.w	r3, r3, #31
  __ASM volatile ("dsb 0xF":::"memory");
    408a:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    408e:	2260      	movs	r2, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4090:	4909      	ldr	r1, [pc, #36]	; (40b8 <HAL_SPI_TxRxHalfCpltCallback+0xb8>)
    4092:	f8c1 3270 	str.w	r3, [r1, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    4096:	3320      	adds	r3, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    4098:	3a20      	subs	r2, #32
      } while ( op_size > 0 );
    409a:	2a00      	cmp	r2, #0
    409c:	dcf8      	bgt.n	4090 <HAL_SPI_TxRxHalfCpltCallback+0x90>
    409e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    40a2:	f3bf 8f6f 	isb	sy
}
    40a6:	bd10      	pop	{r4, pc}
		handleSPI(0);
    40a8:	2000      	movs	r0, #0
    40aa:	f7fe fe49 	bl	2d40 <handleSPI>
    40ae:	e7e9      	b.n	4084 <HAL_SPI_TxRxHalfCpltCallback+0x84>
    40b0:	200053c8 	.word	0x200053c8
    40b4:	30000840 	.word	0x30000840
    40b8:	e000ed00 	.word	0xe000ed00
    40bc:	30000800 	.word	0x30000800
    40c0:	2001cc2c 	.word	0x2001cc2c
    40c4:	58024400 	.word	0x58024400
    40c8:	200190cd 	.word	0x200190cd
    40cc:	f3af 8000 	nop.w
    40d0:	f3af 8000 	nop.w
    40d4:	f3af 8000 	nop.w
    40d8:	f3af 8000 	nop.w
    40dc:	f3af 8000 	nop.w

000040e0 <HAL_SPI_RxCpltCallback>:
{
    40e0:	b538      	push	{r3, r4, r5, lr}
	interrupted = 1;
    40e2:	4b3d      	ldr	r3, [pc, #244]	; (41d8 <HAL_SPI_RxCpltCallback+0xf8>)
    40e4:	2201      	movs	r2, #1
    40e6:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    40e8:	4b3c      	ldr	r3, [pc, #240]	; (41dc <HAL_SPI_RxCpltCallback+0xfc>)
    40ea:	4283      	cmp	r3, r0
    40ec:	d000      	beq.n	40f0 <HAL_SPI_RxCpltCallback+0x10>
}
    40ee:	bd38      	pop	{r3, r4, r5, pc}
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    40f0:	4c3b      	ldr	r4, [pc, #236]	; (41e0 <HAL_SPI_RxCpltCallback+0x100>)
    40f2:	f024 041f 	bic.w	r4, r4, #31
  __ASM volatile ("dsb 0xF":::"memory");
    40f6:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    40fa:	4622      	mov	r2, r4
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    40fc:	2360      	movs	r3, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    40fe:	4939      	ldr	r1, [pc, #228]	; (41e4 <HAL_SPI_RxCpltCallback+0x104>)
    4100:	f8c1 2270 	str.w	r2, [r1, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    4104:	3220      	adds	r2, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    4106:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
    4108:	2b00      	cmp	r3, #0
    410a:	dcf8      	bgt.n	40fe <HAL_SPI_RxCpltCallback+0x1e>
    410c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4110:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    4114:	4b34      	ldr	r3, [pc, #208]	; (41e8 <HAL_SPI_RxCpltCallback+0x108>)
    4116:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    411a:	2bfe      	cmp	r3, #254	; 0xfe
    411c:	d104      	bne.n	4128 <HAL_SPI_RxCpltCallback+0x48>
    411e:	4b32      	ldr	r3, [pc, #200]	; (41e8 <HAL_SPI_RxCpltCallback+0x108>)
    4120:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
    4124:	2bfd      	cmp	r3, #253	; 0xfd
    4126:	d054      	beq.n	41d2 <HAL_SPI_RxCpltCallback+0xf2>
			HAL_SPI_Abort(&hspi5);
    4128:	4d2c      	ldr	r5, [pc, #176]	; (41dc <HAL_SPI_RxCpltCallback+0xfc>)
    412a:	4628      	mov	r0, r5
    412c:	f005 f9f4 	bl	9518 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    4130:	4b2e      	ldr	r3, [pc, #184]	; (41ec <HAL_SPI_RxCpltCallback+0x10c>)
    4132:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4136:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    413a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    413e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4142:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    4146:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    414a:	f005 f919 	bl	9380 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    414e:	682a      	ldr	r2, [r5, #0]
    4150:	6813      	ldr	r3, [r2, #0]
    4152:	f043 0301 	orr.w	r3, r3, #1
    4156:	6013      	str	r3, [r2, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4158:	2240      	movs	r2, #64	; 0x40
    415a:	4921      	ldr	r1, [pc, #132]	; (41e0 <HAL_SPI_RxCpltCallback+0x100>)
    415c:	4628      	mov	r0, r5
    415e:	f005 f83f 	bl	91e0 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    4162:	4a23      	ldr	r2, [pc, #140]	; (41f0 <HAL_SPI_RxCpltCallback+0x110>)
    4164:	7813      	ldrb	r3, [r2, #0]
    4166:	3301      	adds	r3, #1
    4168:	b2db      	uxtb	r3, r3
    416a:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    416c:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    4170:	2360      	movs	r3, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4172:	4a1c      	ldr	r2, [pc, #112]	; (41e4 <HAL_SPI_RxCpltCallback+0x104>)
    4174:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    4178:	3420      	adds	r4, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    417a:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
    417c:	2b00      	cmp	r3, #0
    417e:	dcf8      	bgt.n	4172 <HAL_SPI_RxCpltCallback+0x92>
    4180:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4184:	f3bf 8f6f 	isb	sy
}
    4188:	e7b1      	b.n	40ee <HAL_SPI_RxCpltCallback+0xe>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    418a:	481a      	ldr	r0, [pc, #104]	; (41f4 <HAL_SPI_RxCpltCallback+0x114>)
    418c:	6803      	ldr	r3, [r0, #0]
    418e:	4413      	add	r3, r2
    4190:	005b      	lsls	r3, r3, #1
    4192:	3321      	adds	r3, #33	; 0x21
    4194:	4914      	ldr	r1, [pc, #80]	; (41e8 <HAL_SPI_RxCpltCallback+0x108>)
    4196:	440b      	add	r3, r1
    4198:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
    419c:	6803      	ldr	r3, [r0, #0]
    419e:	4413      	add	r3, r2
    41a0:	3311      	adds	r3, #17
    41a2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    41a6:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    41aa:	eb03 2305 	add.w	r3, r3, r5, lsl #8
    41ae:	b29b      	uxth	r3, r3
    41b0:	4911      	ldr	r1, [pc, #68]	; (41f8 <HAL_SPI_RxCpltCallback+0x118>)
    41b2:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    41b6:	3201      	adds	r2, #1
    41b8:	4b10      	ldr	r3, [pc, #64]	; (41fc <HAL_SPI_RxCpltCallback+0x11c>)
    41ba:	781b      	ldrb	r3, [r3, #0]
    41bc:	4293      	cmp	r3, r2
    41be:	d8e4      	bhi.n	418a <HAL_SPI_RxCpltCallback+0xaa>
			newPluck = 1;
    41c0:	4b0f      	ldr	r3, [pc, #60]	; (4200 <HAL_SPI_RxCpltCallback+0x120>)
    41c2:	2201      	movs	r2, #1
    41c4:	601a      	str	r2, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    41c6:	2240      	movs	r2, #64	; 0x40
    41c8:	4905      	ldr	r1, [pc, #20]	; (41e0 <HAL_SPI_RxCpltCallback+0x100>)
    41ca:	4804      	ldr	r0, [pc, #16]	; (41dc <HAL_SPI_RxCpltCallback+0xfc>)
    41cc:	f005 f808 	bl	91e0 <__HAL_SPI_Receive_DMA_veneer>
    41d0:	e7cc      	b.n	416c <HAL_SPI_RxCpltCallback+0x8c>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    41d2:	2200      	movs	r2, #0
    41d4:	e7f0      	b.n	41b8 <HAL_SPI_RxCpltCallback+0xd8>
    41d6:	bf00      	nop
    41d8:	200053c8 	.word	0x200053c8
    41dc:	2001ccb4 	.word	0x2001ccb4
    41e0:	38000040 	.word	0x38000040
    41e4:	e000ed00 	.word	0xe000ed00
    41e8:	38000000 	.word	0x38000000
    41ec:	58024400 	.word	0x58024400
    41f0:	200190cd 	.word	0x200190cd
    41f4:	200053bc 	.word	0x200053bc
    41f8:	200143fc 	.word	0x200143fc
    41fc:	20000694 	.word	0x20000694
    4200:	200054e0 	.word	0x200054e0
    4204:	f3af 8000 	nop.w
    4208:	f3af 8000 	nop.w
    420c:	f3af 8000 	nop.w
    4210:	f3af 8000 	nop.w
    4214:	f3af 8000 	nop.w
    4218:	f3af 8000 	nop.w
    421c:	f3af 8000 	nop.w

00004220 <HAL_SPI_RxHalfCpltCallback>:
{
    4220:	b538      	push	{r3, r4, r5, lr}
	interrupted = 1;
    4222:	4b3d      	ldr	r3, [pc, #244]	; (4318 <HAL_SPI_RxHalfCpltCallback+0xf8>)
    4224:	2201      	movs	r2, #1
    4226:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    4228:	4b3c      	ldr	r3, [pc, #240]	; (431c <HAL_SPI_RxHalfCpltCallback+0xfc>)
    422a:	4283      	cmp	r3, r0
    422c:	d000      	beq.n	4230 <HAL_SPI_RxHalfCpltCallback+0x10>
}
    422e:	bd38      	pop	{r3, r4, r5, pc}
		SCB_CleanInvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    4230:	4c3b      	ldr	r4, [pc, #236]	; (4320 <HAL_SPI_RxHalfCpltCallback+0x100>)
    4232:	f024 041f 	bic.w	r4, r4, #31
  __ASM volatile ("dsb 0xF":::"memory");
    4236:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    423a:	4622      	mov	r2, r4
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    423c:	2360      	movs	r3, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    423e:	4939      	ldr	r1, [pc, #228]	; (4324 <HAL_SPI_RxHalfCpltCallback+0x104>)
    4240:	f8c1 2270 	str.w	r2, [r1, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    4244:	3220      	adds	r2, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    4246:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
    4248:	2b00      	cmp	r3, #0
    424a:	dcf8      	bgt.n	423e <HAL_SPI_RxHalfCpltCallback+0x1e>
    424c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4250:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    4254:	4b34      	ldr	r3, [pc, #208]	; (4328 <HAL_SPI_RxHalfCpltCallback+0x108>)
    4256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    425a:	2bfe      	cmp	r3, #254	; 0xfe
    425c:	d104      	bne.n	4268 <HAL_SPI_RxHalfCpltCallback+0x48>
    425e:	4b32      	ldr	r3, [pc, #200]	; (4328 <HAL_SPI_RxHalfCpltCallback+0x108>)
    4260:	f893 305f 	ldrb.w	r3, [r3, #95]	; 0x5f
    4264:	2bfd      	cmp	r3, #253	; 0xfd
    4266:	d054      	beq.n	4312 <HAL_SPI_RxHalfCpltCallback+0xf2>
			HAL_SPI_Abort(&hspi5);
    4268:	4d2c      	ldr	r5, [pc, #176]	; (431c <HAL_SPI_RxHalfCpltCallback+0xfc>)
    426a:	4628      	mov	r0, r5
    426c:	f005 f954 	bl	9518 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    4270:	4b2e      	ldr	r3, [pc, #184]	; (432c <HAL_SPI_RxHalfCpltCallback+0x10c>)
    4272:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4276:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    427a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    427e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4282:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    4286:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    428a:	f005 f879 	bl	9380 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    428e:	682a      	ldr	r2, [r5, #0]
    4290:	6813      	ldr	r3, [r2, #0]
    4292:	f043 0301 	orr.w	r3, r3, #1
    4296:	6013      	str	r3, [r2, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4298:	2240      	movs	r2, #64	; 0x40
    429a:	4921      	ldr	r1, [pc, #132]	; (4320 <HAL_SPI_RxHalfCpltCallback+0x100>)
    429c:	4628      	mov	r0, r5
    429e:	f004 ff9f 	bl	91e0 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    42a2:	4a23      	ldr	r2, [pc, #140]	; (4330 <HAL_SPI_RxHalfCpltCallback+0x110>)
    42a4:	7813      	ldrb	r3, [r2, #0]
    42a6:	3301      	adds	r3, #1
    42a8:	b2db      	uxtb	r3, r3
    42aa:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    42ac:	f3bf 8f4f 	dsb	sy
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
    42b0:	2360      	movs	r3, #96	; 0x60
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    42b2:	4a1c      	ldr	r2, [pc, #112]	; (4324 <HAL_SPI_RxHalfCpltCallback+0x104>)
    42b4:	f8c2 4270 	str.w	r4, [r2, #624]	; 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
    42b8:	3420      	adds	r4, #32
        op_size -=          __SCB_DCACHE_LINE_SIZE;
    42ba:	3b20      	subs	r3, #32
      } while ( op_size > 0 );
    42bc:	2b00      	cmp	r3, #0
    42be:	dcf8      	bgt.n	42b2 <HAL_SPI_RxHalfCpltCallback+0x92>
    42c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    42c4:	f3bf 8f6f 	isb	sy
}
    42c8:	e7b1      	b.n	422e <HAL_SPI_RxHalfCpltCallback+0xe>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    42ca:	481a      	ldr	r0, [pc, #104]	; (4334 <HAL_SPI_RxHalfCpltCallback+0x114>)
    42cc:	6803      	ldr	r3, [r0, #0]
    42ce:	4413      	add	r3, r2
    42d0:	005b      	lsls	r3, r3, #1
    42d2:	3301      	adds	r3, #1
    42d4:	4914      	ldr	r1, [pc, #80]	; (4328 <HAL_SPI_RxHalfCpltCallback+0x108>)
    42d6:	440b      	add	r3, r1
    42d8:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
    42dc:	6803      	ldr	r3, [r0, #0]
    42de:	4413      	add	r3, r2
    42e0:	3301      	adds	r3, #1
    42e2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    42e6:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
    42ea:	eb03 2305 	add.w	r3, r3, r5, lsl #8
    42ee:	b29b      	uxth	r3, r3
    42f0:	4911      	ldr	r1, [pc, #68]	; (4338 <HAL_SPI_RxHalfCpltCallback+0x118>)
    42f2:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    42f6:	3201      	adds	r2, #1
    42f8:	4b10      	ldr	r3, [pc, #64]	; (433c <HAL_SPI_RxHalfCpltCallback+0x11c>)
    42fa:	781b      	ldrb	r3, [r3, #0]
    42fc:	4293      	cmp	r3, r2
    42fe:	d8e4      	bhi.n	42ca <HAL_SPI_RxHalfCpltCallback+0xaa>
			newPluck = 1;
    4300:	4b0f      	ldr	r3, [pc, #60]	; (4340 <HAL_SPI_RxHalfCpltCallback+0x120>)
    4302:	2201      	movs	r2, #1
    4304:	601a      	str	r2, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4306:	2240      	movs	r2, #64	; 0x40
    4308:	4905      	ldr	r1, [pc, #20]	; (4320 <HAL_SPI_RxHalfCpltCallback+0x100>)
    430a:	4804      	ldr	r0, [pc, #16]	; (431c <HAL_SPI_RxHalfCpltCallback+0xfc>)
    430c:	f004 ff68 	bl	91e0 <__HAL_SPI_Receive_DMA_veneer>
    4310:	e7cc      	b.n	42ac <HAL_SPI_RxHalfCpltCallback+0x8c>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4312:	2200      	movs	r2, #0
    4314:	e7f0      	b.n	42f8 <HAL_SPI_RxHalfCpltCallback+0xd8>
    4316:	bf00      	nop
    4318:	200053c8 	.word	0x200053c8
    431c:	2001ccb4 	.word	0x2001ccb4
    4320:	38000040 	.word	0x38000040
    4324:	e000ed00 	.word	0xe000ed00
    4328:	38000000 	.word	0x38000000
    432c:	58024400 	.word	0x58024400
    4330:	200190cd 	.word	0x200190cd
    4334:	200053bc 	.word	0x200053bc
    4338:	200143fc 	.word	0x200143fc
    433c:	20000694 	.word	0x20000694
    4340:	200054e0 	.word	0x200054e0
	...

00004360 <audioInitString1>:
tSimpleLivingString3 livStr[NUM_STRINGS_PER_BOARD];
tPickupNonLinearity pu[NUM_STRINGS_PER_BOARD];
tExpSmooth pitchSmootherS[NUM_STRINGS_PER_BOARD];
float string1Defaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};
void __ATTR_ITCMRAM audioInitString1()
{
    4360:	b570      	push	{r4, r5, r6, lr}
    4362:	ed2d 8b02 	vpush	{d8}
	for (int v = 0; v < numStringsThisBoard; v++)
    4366:	2500      	movs	r5, #0
    4368:	e03a      	b.n	43e0 <audioInitString1+0x80>
	{

		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    436a:	00ae      	lsls	r6, r5, #2
    436c:	4c21      	ldr	r4, [pc, #132]	; (43f4 <audioInitString1+0x94>)
    436e:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    4372:	ed9f 2a21 	vldr	s4, [pc, #132]	; 43f8 <audioInitString1+0x98>
    4376:	ed9f 8a21 	vldr	s16, [pc, #132]	; 43fc <audioInitString1+0x9c>
    437a:	4b21      	ldr	r3, [pc, #132]	; (4400 <audioInitString1+0xa0>)
    437c:	2200      	movs	r2, #0
    437e:	eef0 2a42 	vmov.f32	s5, s4
    4382:	eef0 1a48 	vmov.f32	s3, s16
    4386:	ed9f 1a1f 	vldr	s2, [pc, #124]	; 4404 <audioInitString1+0xa4>
    438a:	eddf 0a1f 	vldr	s1, [pc, #124]	; 4408 <audioInitString1+0xa8>
    438e:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 440c <audioInitString1+0xac>
    4392:	2104      	movs	r1, #4
    4394:	4620      	mov	r0, r4
    4396:	f004 ffcb 	bl	9330 <__tSimpleLivingString3_initToPool_veneer>
													 0.99999f, 0.0f, 0.01f,
												 0.01f, 0, &mediumPool);
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    439a:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 4410 <audioInitString1+0xb0>
    439e:	4620      	mov	r0, r4
    43a0:	f005 f932 	bl	9608 <__tSimpleLivingString3_setTargetLev_veneer>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
    43a4:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 4414 <audioInitString1+0xb4>
    43a8:	4620      	mov	r0, r4
    43aa:	f004 ff01 	bl	91b0 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
    43ae:	eeb0 0a48 	vmov.f32	s0, s16
    43b2:	4620      	mov	r0, r4
    43b4:	f005 f850 	bl	9458 <__tSimpleLivingString3_setLevStrength_veneer>
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
    43b8:	2101      	movs	r1, #1
    43ba:	4620      	mov	r0, r4
    43bc:	f005 f808 	bl	93d0 <__tSimpleLivingString3_setLevMode_veneer>
		tPickupNonLinearity_init(&pu[v], &leaf);
    43c0:	4c15      	ldr	r4, [pc, #84]	; (4418 <audioInitString1+0xb8>)
    43c2:	4621      	mov	r1, r4
    43c4:	4815      	ldr	r0, [pc, #84]	; (441c <audioInitString1+0xbc>)
    43c6:	4430      	add	r0, r6
    43c8:	f005 f89e 	bl	9508 <__tPickupNonLinearity_init_veneer>
		tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    43cc:	4621      	mov	r1, r4
    43ce:	eddf 0a14 	vldr	s1, [pc, #80]	; 4420 <audioInitString1+0xc0>
    43d2:	ed9f 0a14 	vldr	s0, [pc, #80]	; 4424 <audioInitString1+0xc4>
    43d6:	4814      	ldr	r0, [pc, #80]	; (4428 <audioInitString1+0xc8>)
    43d8:	4430      	add	r0, r6
    43da:	f005 f8e1 	bl	95a0 <__tExpSmooth_init_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    43de:	3501      	adds	r5, #1
    43e0:	4b12      	ldr	r3, [pc, #72]	; (442c <audioInitString1+0xcc>)
    43e2:	781b      	ldrb	r3, [r3, #0]
    43e4:	42ab      	cmp	r3, r5
    43e6:	dcc0      	bgt.n	436a <audioInitString1+0xa>
	}


	whichStringModelLoaded = String1Loaded;
    43e8:	4b11      	ldr	r3, [pc, #68]	; (4430 <audioInitString1+0xd0>)
    43ea:	2200      	movs	r2, #0
    43ec:	701a      	strb	r2, [r3, #0]
}
    43ee:	ecbd 8b02 	vpop	{d8}
    43f2:	bd70      	pop	{r4, r5, r6, pc}
    43f4:	2001cd3c 	.word	0x2001cd3c
    43f8:	3c23d70a 	.word	0x3c23d70a
    43fc:	00000000 	.word	0x00000000
    4400:	200054d8 	.word	0x200054d8
    4404:	3f7fff58 	.word	0x3f7fff58
    4408:	4684d000 	.word	0x4684d000
    440c:	435c0000 	.word	0x435c0000
    4410:	3d40c0f0 	.word	0x3d40c0f0
    4414:	3cf753bf 	.word	0x3cf753bf
    4418:	20005484 	.word	0x20005484
    441c:	2001cd4c 	.word	0x2001cd4c
    4420:	3f19999a 	.word	0x3f19999a
    4424:	42800000 	.word	0x42800000
    4428:	2001cd44 	.word	0x2001cd44
    442c:	20000694 	.word	0x20000694
    4430:	20014451 	.word	0x20014451
    4434:	f3af 8000 	nop.w
    4438:	f3af 8000 	nop.w
    443c:	f3af 8000 	nop.w

00004440 <audioFreeString1>:


void __ATTR_ITCMRAM audioFreeString1()
{
    4440:	b538      	push	{r3, r4, r5, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    4442:	2400      	movs	r4, #0
    4444:	e00e      	b.n	4464 <audioFreeString1+0x24>
	{
		tExpSmooth_free(&pitchSmootherS[v]);
    4446:	00a5      	lsls	r5, r4, #2
    4448:	4809      	ldr	r0, [pc, #36]	; (4470 <audioFreeString1+0x30>)
    444a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    444e:	f005 f83f 	bl	94d0 <__tExpSmooth_free_veneer>
		tSimpleLivingString3_free(&livStr[v]);
    4452:	4808      	ldr	r0, [pc, #32]	; (4474 <audioFreeString1+0x34>)
    4454:	4428      	add	r0, r5
    4456:	f005 f8ab 	bl	95b0 <__tSimpleLivingString3_free_veneer>
		tPickupNonLinearity_free(&pu[v]);
    445a:	4807      	ldr	r0, [pc, #28]	; (4478 <audioFreeString1+0x38>)
    445c:	4428      	add	r0, r5
    445e:	f005 f95b 	bl	9718 <__tPickupNonLinearity_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    4462:	3401      	adds	r4, #1
    4464:	4b05      	ldr	r3, [pc, #20]	; (447c <audioFreeString1+0x3c>)
    4466:	781b      	ldrb	r3, [r3, #0]
    4468:	42a3      	cmp	r3, r4
    446a:	dcec      	bgt.n	4446 <audioFreeString1+0x6>
	}
}
    446c:	bd38      	pop	{r3, r4, r5, pc}
    446e:	bf00      	nop
    4470:	2001cd44 	.word	0x2001cd44
    4474:	2001cd3c 	.word	0x2001cd3c
    4478:	2001cd4c 	.word	0x2001cd4c
    447c:	20000694 	.word	0x20000694

00004480 <audioSwitchToString1>:

void __ATTR_ITCMRAM audioSwitchToString1()
{
    4480:	b538      	push	{r3, r4, r5, lr}
	//load string1 default params:
	for (int i = 0; i < 12; i++)
    4482:	2400      	movs	r4, #0
    4484:	e00b      	b.n	449e <audioSwitchToString1+0x1e>
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);

		if (voice == 63)
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    4486:	4b14      	ldr	r3, [pc, #80]	; (44d8 <audioSwitchToString1+0x58>)
    4488:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    448c:	ed93 0a00 	vldr	s0, [r3]
    4490:	4628      	mov	r0, r5
    4492:	f005 f939 	bl	9708 <__tExpSmooth_setValAndDest_veneer>
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}

		knobFrozen[i] = 1;
    4496:	4b11      	ldr	r3, [pc, #68]	; (44dc <audioSwitchToString1+0x5c>)
    4498:	2201      	movs	r2, #1
    449a:	551a      	strb	r2, [r3, r4]
	for (int i = 0; i < 12; i++)
    449c:	4414      	add	r4, r2
    449e:	2c0b      	cmp	r4, #11
    44a0:	dc14      	bgt.n	44cc <audioSwitchToString1+0x4c>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    44a2:	4d0f      	ldr	r5, [pc, #60]	; (44e0 <audioSwitchToString1+0x60>)
    44a4:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    44a8:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 44e4 <audioSwitchToString1+0x64>
    44ac:	4628      	mov	r0, r5
    44ae:	f005 f867 	bl	9580 <__tExpSmooth_setFactor_veneer>
		if (voice == 63)
    44b2:	4b0d      	ldr	r3, [pc, #52]	; (44e8 <audioSwitchToString1+0x68>)
    44b4:	681b      	ldr	r3, [r3, #0]
    44b6:	2b3f      	cmp	r3, #63	; 0x3f
    44b8:	d0e5      	beq.n	4486 <audioSwitchToString1+0x6>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    44ba:	4b0c      	ldr	r3, [pc, #48]	; (44ec <audioSwitchToString1+0x6c>)
    44bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    44c0:	ed93 0a00 	vldr	s0, [r3]
    44c4:	4628      	mov	r0, r5
    44c6:	f005 f91f 	bl	9708 <__tExpSmooth_setValAndDest_veneer>
    44ca:	e7e4      	b.n	4496 <audioSwitchToString1+0x16>
	}
	tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
    44cc:	ed9f 0a08 	vldr	s0, [pc, #32]	; 44f0 <audioSwitchToString1+0x70>
    44d0:	4808      	ldr	r0, [pc, #32]	; (44f4 <audioSwitchToString1+0x74>)
    44d2:	f004 feed 	bl	92b0 <__tVZFilter_setFreq_veneer>
}
    44d6:	bd38      	pop	{r3, r4, r5, pc}
    44d8:	200008b4 	.word	0x200008b4
    44dc:	200053cc 	.word	0x200053cc
    44e0:	20005430 	.word	0x20005430
    44e4:	3a83126f 	.word	0x3a83126f
    44e8:	20014440 	.word	0x20014440
    44ec:	200186f0 	.word	0x200186f0
    44f0:	45504000 	.word	0x45504000
    44f4:	200054e8 	.word	0x200054e8
    44f8:	f3af 8000 	nop.w
    44fc:	f3af 8000 	nop.w

00004500 <audioTickString1>:
}



float __ATTR_ITCMRAM audioTickString1(void)
{
    4500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4504:	ed2d 8b04 	vpush	{d8-d9}
    4508:	af00      	add	r7, sp, #0
	float temp = 0.0f;
	float note[numStringsThisBoard];
    450a:	4b97      	ldr	r3, [pc, #604]	; (4768 <audioTickString1+0x268>)
    450c:	781b      	ldrb	r3, [r3, #0]
    450e:	009b      	lsls	r3, r3, #2
    4510:	3307      	adds	r3, #7
    4512:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    4516:	ebad 0d03 	sub.w	sp, sp, r3
    451a:	466e      	mov	r6, sp

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    451c:	4893      	ldr	r0, [pc, #588]	; (476c <audioTickString1+0x26c>)
    451e:	f005 f89f 	bl	9660 <__tExpSmooth_tick_veneer>
    4522:	eef0 8a40 	vmov.f32	s17, s0

	for (int i = 0; i < 12; i++)
    4526:	2400      	movs	r4, #0
    4528:	e00a      	b.n	4540 <audioTickString1+0x40>
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    452a:	00a5      	lsls	r5, r4, #2
    452c:	4890      	ldr	r0, [pc, #576]	; (4770 <audioTickString1+0x270>)
    452e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4532:	f005 f895 	bl	9660 <__tExpSmooth_tick_veneer>
    4536:	4b8f      	ldr	r3, [pc, #572]	; (4774 <audioTickString1+0x274>)
    4538:	442b      	add	r3, r5
    453a:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 12; i++)
    453e:	3401      	adds	r4, #1
    4540:	2c0b      	cmp	r4, #11
    4542:	ddf2      	ble.n	452a <audioTickString1+0x2a>
	}
	pluckPos = knobScaled[9];
    4544:	4b8b      	ldr	r3, [pc, #556]	; (4774 <audioTickString1+0x274>)
    4546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4548:	4b8b      	ldr	r3, [pc, #556]	; (4778 <audioTickString1+0x278>)
    454a:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < numStringsThisBoard; i++)
    454c:	2400      	movs	r4, #0
	float temp = 0.0f;
    454e:	ed9f 9a8b 	vldr	s18, [pc, #556]	; 477c <audioTickString1+0x27c>
	for (int i = 0; i < numStringsThisBoard; i++)
    4552:	e039      	b.n	45c8 <audioTickString1+0xc8>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
		{
			note[i] = 0.0f;
    4554:	2200      	movs	r2, #0
    4556:	601a      	str	r2, [r3, #0]
    4558:	e050      	b.n	45fc <audioTickString1+0xfc>
		{
			note[i] = 127.0f;
		}
		if (isnan(note[i]))
		{
			note[i] = 64.0f;
    455a:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    455e:	601a      	str	r2, [r3, #0]
    4560:	e062      	b.n	4628 <audioTickString1+0x128>
		}

		//float finalFreq = mtof(note[i]);
		float dampFreq = 15778.3f;
		float decay = 0.1f;
    4562:	ed9f 8a87 	vldr	s16, [pc, #540]	; 4780 <audioTickString1+0x280>
    4566:	e06e      	b.n	4646 <audioTickString1+0x146>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
		if (barDelta > 0.2f)
		{
			barDelta = 0.0f; //to avoid noise on open string glitches
		}
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    4568:	ea4f 0984 	mov.w	r9, r4, lsl #2
    456c:	4b85      	ldr	r3, [pc, #532]	; (4784 <audioTickString1+0x284>)
    456e:	eb03 0884 	add.w	r8, r3, r4, lsl #2
    4572:	4640      	mov	r0, r8
    4574:	f004 ff7c 	bl	9470 <__tExpSmooth_setDest_veneer>
		barDelta = tExpSmooth_tick(&barSlideSmoother[i]);
    4578:	4640      	mov	r0, r8
    457a:	f005 f871 	bl	9660 <__tExpSmooth_tick_veneer>
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    457e:	4882      	ldr	r0, [pc, #520]	; (4788 <audioTickString1+0x288>)
    4580:	4448      	add	r0, r9
    4582:	f005 f8c5 	bl	9710 <__tEnvelopeFollower_tick_veneer>
    4586:	eeb0 8a40 	vmov.f32	s16, s0
		prevBarInMIDI[0] = barInMIDI[0];
    458a:	4b80      	ldr	r3, [pc, #512]	; (478c <audioTickString1+0x28c>)
    458c:	681a      	ldr	r2, [r3, #0]
    458e:	4b80      	ldr	r3, [pc, #512]	; (4790 <audioTickString1+0x290>)
    4590:	601a      	str	r2, [r3, #0]
		//tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));

		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    4592:	4880      	ldr	r0, [pc, #512]	; (4794 <audioTickString1+0x294>)
    4594:	f004 fe5c 	bl	9250 <__tNoise_tick_veneer>
    4598:	487f      	ldr	r0, [pc, #508]	; (4798 <audioTickString1+0x298>)
    459a:	f004 fdf1 	bl	9180 <__tVZFilter_tickEfficient_veneer>
		//filtNoise = tVZFilter_tickEfficient(&noiseFilt2, filtNoise);
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    459e:	ee28 8a00 	vmul.f32	s16, s16, s0
    45a2:	4b74      	ldr	r3, [pc, #464]	; (4774 <audioTickString1+0x274>)
    45a4:	edd3 7a01 	vldr	s15, [r3, #4]
    45a8:	ee28 8a27 	vmul.f32	s16, s16, s15

		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    45ac:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
    45b0:	ee28 0a00 	vmul.f32	s0, s16, s0
    45b4:	4628      	mov	r0, r5
    45b6:	f004 ff03 	bl	93c0 <__tSimpleLivingString3_tick_veneer>
    45ba:	4878      	ldr	r0, [pc, #480]	; (479c <audioTickString1+0x29c>)
    45bc:	4448      	add	r0, r9
    45be:	f004 ffdb 	bl	9578 <__tPickupNonLinearity_tick_veneer>
    45c2:	ee39 9a00 	vadd.f32	s18, s18, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    45c6:	3401      	adds	r4, #1
    45c8:	4b67      	ldr	r3, [pc, #412]	; (4768 <audioTickString1+0x268>)
    45ca:	781b      	ldrb	r3, [r3, #0]
    45cc:	42a3      	cmp	r3, r4
    45ce:	f340 8095 	ble.w	46fc <audioTickString1+0x1fc>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    45d2:	4b73      	ldr	r3, [pc, #460]	; (47a0 <audioTickString1+0x2a0>)
    45d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    45d8:	edd3 7a00 	vldr	s15, [r3]
    45dc:	4b71      	ldr	r3, [pc, #452]	; (47a4 <audioTickString1+0x2a4>)
    45de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    45e2:	ed93 7a00 	vldr	s14, [r3]
    45e6:	ee77 7a87 	vadd.f32	s15, s15, s14
    45ea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    45ee:	edc3 7a00 	vstr	s15, [r3]
		if (note[i] < 0.0f)
    45f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    45f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    45fa:	d4ab      	bmi.n	4554 <audioTickString1+0x54>
		if (note[i] > 127.0f)
    45fc:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    4600:	ed93 7a00 	vldr	s14, [r3]
    4604:	eddf 7a68 	vldr	s15, [pc, #416]	; 47a8 <audioTickString1+0x2a8>
    4608:	eeb4 7ae7 	vcmpe.f32	s14, s15
    460c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4610:	dd01      	ble.n	4616 <audioTickString1+0x116>
			note[i] = 127.0f;
    4612:	edc3 7a00 	vstr	s15, [r3]
		if (isnan(note[i]))
    4616:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    461a:	edd3 7a00 	vldr	s15, [r3]
    461e:	eef4 7a67 	vcmp.f32	s15, s15
    4622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4626:	d698      	bvs.n	455a <audioTickString1+0x5a>
		if (lsDecay[i])
    4628:	4b60      	ldr	r3, [pc, #384]	; (47ac <audioTickString1+0x2ac>)
    462a:	5d1b      	ldrb	r3, [r3, r4]
    462c:	2b00      	cmp	r3, #0
    462e:	d098      	beq.n	4562 <audioTickString1+0x62>
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    4630:	4b50      	ldr	r3, [pc, #320]	; (4774 <audioTickString1+0x274>)
    4632:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
    4636:	eddf 7a5e 	vldr	s15, [pc, #376]	; 47b0 <audioTickString1+0x2b0>
    463a:	ee28 8a27 	vmul.f32	s16, s16, s15
    463e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    4642:	ee38 8a27 	vadd.f32	s16, s16, s15
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    4646:	f8df a190 	ldr.w	sl, [pc, #400]	; 47d8 <audioTickString1+0x2d8>
    464a:	ea4f 0984 	mov.w	r9, r4, lsl #2
    464e:	eb0a 0584 	add.w	r5, sl, r4, lsl #2
    4652:	f8df 8120 	ldr.w	r8, [pc, #288]	; 4774 <audioTickString1+0x274>
    4656:	ed98 0a08 	vldr	s0, [r8, #32]
    465a:	4628      	mov	r0, r5
    465c:	f005 f834 	bl	96c8 <__tSimpleLivingString3_setPickupPoint_veneer>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    4660:	eeb0 0a48 	vmov.f32	s0, s16
    4664:	4628      	mov	r0, r5
    4666:	f004 ff53 	bl	9510 <__tSimpleLivingString3_setDecay_veneer>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    466a:	ed9f 0a52 	vldr	s0, [pc, #328]	; 47b4 <audioTickString1+0x2b4>
    466e:	4628      	mov	r0, r5
    4670:	f004 fd9a 	bl	91a8 <__tSimpleLivingString3_setDampFreq_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    4674:	ed98 0a00 	vldr	s0, [r8]
    4678:	eddf 7a4f 	vldr	s15, [pc, #316]	; 47b8 <audioTickString1+0x2b8>
    467c:	ee20 0a27 	vmul.f32	s0, s0, s15
    4680:	4628      	mov	r0, r5
    4682:	f004 fee9 	bl	9458 <__tSimpleLivingString3_setLevStrength_veneer>
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    4686:	edd8 7a05 	vldr	s15, [r8, #20]
    468a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
    468e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 47bc <audioTickString1+0x2bc>
    4692:	ee67 7a87 	vmul.f32	s15, s15, s14
    4696:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    469a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    469e:	ee77 7a87 	vadd.f32	s15, s15, s14
    46a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
    46a6:	edc3 6a1b 	vstr	s13, [r3, #108]	; 0x6c
		livStr[i]->rippleDelay = knobScaled[11];
    46aa:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
    46ae:	669a      	str	r2, [r3, #104]	; 0x68
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    46b0:	4b43      	ldr	r3, [pc, #268]	; (47c0 <audioTickString1+0x2c0>)
    46b2:	eb03 0809 	add.w	r8, r3, r9
    46b6:	44b1      	add	r9, r6
    46b8:	ed99 0a00 	vldr	s0, [r9]
    46bc:	f004 fd6c 	bl	9198 <__mtof_veneer>
    46c0:	4640      	mov	r0, r8
    46c2:	f004 fed5 	bl	9470 <__tExpSmooth_setDest_veneer>
		float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    46c6:	4640      	mov	r0, r8
    46c8:	f004 ffca 	bl	9660 <__tExpSmooth_tick_veneer>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    46cc:	4628      	mov	r0, r5
    46ce:	f004 ff3b 	bl	9548 <__tSimpleLivingString3_setFreq_veneer>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    46d2:	4b2e      	ldr	r3, [pc, #184]	; (478c <audioTickString1+0x28c>)
    46d4:	ed93 0a00 	vldr	s0, [r3]
    46d8:	4b2d      	ldr	r3, [pc, #180]	; (4790 <audioTickString1+0x290>)
    46da:	edd3 7a00 	vldr	s15, [r3]
    46de:	ee30 0a67 	vsub.f32	s0, s0, s15
    46e2:	eeb0 0ac0 	vabs.f32	s0, s0
		if (barDelta > 0.2f)
    46e6:	eddf 7a37 	vldr	s15, [pc, #220]	; 47c4 <audioTickString1+0x2c4>
    46ea:	eeb4 0ae7 	vcmpe.f32	s0, s15
    46ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    46f2:	f77f af39 	ble.w	4568 <audioTickString1+0x68>
			barDelta = 0.0f; //to avoid noise on open string glitches
    46f6:	ed9f 0a21 	vldr	s0, [pc, #132]	; 477c <audioTickString1+0x27c>
    46fa:	e735      	b.n	4568 <audioTickString1+0x68>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    46fc:	eddf 7a32 	vldr	s15, [pc, #200]	; 47c8 <audioTickString1+0x2c8>
    4700:	ee68 0aa7 	vmul.f32	s1, s17, s15
    4704:	ed9f 0a31 	vldr	s0, [pc, #196]	; 47cc <audioTickString1+0x2cc>
    4708:	ed9f 1a27 	vldr	s2, [pc, #156]	; 47a8 <audioTickString1+0x2a8>
    470c:	ee70 0a80 	vadd.f32	s1, s1, s0
    4710:	f004 fd22 	bl	9158 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
    4714:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    4718:	ee17 3a90 	vmov	r3, s15
	float alpha = volIdx-volIdxInt;
    471c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    4720:	ee70 7a67 	vsub.f32	s15, s0, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    4724:	1c59      	adds	r1, r3, #1
    4726:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
    472a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    472e:	ee76 6ae7 	vsub.f32	s13, s13, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    4732:	4a27      	ldr	r2, [pc, #156]	; (47d0 <audioTickString1+0x2d0>)
    4734:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4738:	ed93 7a00 	vldr	s14, [r3]
    473c:	ee27 7a26 	vmul.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    4740:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    4744:	ed92 0a00 	vldr	s0, [r2]
    4748:	ee20 0a27 	vmul.f32	s0, s0, s15
    474c:	ee30 0a07 	vadd.f32	s0, s0, s14

	//temp = input;
	temp *= outVol * masterVolFromBrain;
    4750:	4b20      	ldr	r3, [pc, #128]	; (47d4 <audioTickString1+0x2d4>)
    4752:	edd3 7a00 	vldr	s15, [r3]
    4756:	ee20 0a27 	vmul.f32	s0, s0, s15

	return temp;
}
    475a:	ee20 0a09 	vmul.f32	s0, s0, s18
    475e:	46bd      	mov	sp, r7
    4760:	ecbd 8b04 	vpop	{d8-d9}
    4764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4768:	20000694 	.word	0x20000694
    476c:	2001444c 	.word	0x2001444c
    4770:	20005430 	.word	0x20005430
    4774:	200053e0 	.word	0x200053e0
    4778:	20000698 	.word	0x20000698
    477c:	00000000 	.word	0x00000000
    4780:	3dcccccd 	.word	0x3dcccccd
    4784:	20001394 	.word	0x20001394
    4788:	2000138c 	.word	0x2000138c
    478c:	20001384 	.word	0x20001384
    4790:	20005548 	.word	0x20005548
    4794:	200054dc 	.word	0x200054dc
    4798:	200054e8 	.word	0x200054e8
    479c:	2001cd4c 	.word	0x2001cd4c
    47a0:	20014414 	.word	0x20014414
    47a4:	2001441c 	.word	0x2001441c
    47a8:	42fe0000 	.word	0x42fe0000
    47ac:	200054d4 	.word	0x200054d4
    47b0:	44480000 	.word	0x44480000
    47b4:	46768933 	.word	0x46768933
    47b8:	3d108950 	.word	0x3d108950
    47bc:	bcf5c28f 	.word	0xbcf5c28f
    47c0:	2001cd44 	.word	0x2001cd44
    47c4:	3e4ccccd 	.word	0x3e4ccccd
    47c8:	42a00000 	.word	0x42a00000
    47cc:	423c0000 	.word	0x423c0000
    47d0:	200006a0 	.word	0x200006a0
    47d4:	2000068c 	.word	0x2000068c
    47d8:	2001cd3c 	.word	0x2001cd3c
    47dc:	f3af 8000 	nop.w

000047e0 <audioFrameString1>:
{
    47e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47e4:	ed2d 8b02 	vpush	{d8}
    47e8:	4606      	mov	r6, r0
	uint32_t tempCountFrame = DWT->CYCCNT;
    47ea:	4b7b      	ldr	r3, [pc, #492]	; (49d8 <audioFrameString1+0x1f8>)
    47ec:	685f      	ldr	r7, [r3, #4]
	if (resetStringInputs)
    47ee:	4b7b      	ldr	r3, [pc, #492]	; (49dc <audioFrameString1+0x1fc>)
    47f0:	781b      	ldrb	r3, [r3, #0]
    47f2:	b9c3      	cbnz	r3, 4826 <audioFrameString1+0x46>
	if (newPluck)
    47f4:	4b7a      	ldr	r3, [pc, #488]	; (49e0 <audioFrameString1+0x200>)
    47f6:	681b      	ldr	r3, [r3, #0]
    47f8:	2b00      	cmp	r3, #0
    47fa:	f040 80b3 	bne.w	4964 <audioFrameString1+0x184>
		for (int i = 0; i < numStringsThisBoard; i++)
    47fe:	2500      	movs	r5, #0
    4800:	e0c8      	b.n	4994 <audioFrameString1+0x1b4>
			lsDecay[i] = 0;
    4802:	2200      	movs	r2, #0
    4804:	4977      	ldr	r1, [pc, #476]	; (49e4 <audioFrameString1+0x204>)
    4806:	54ca      	strb	r2, [r1, r3]
			previousStringInputs[i] = 0;
    4808:	4977      	ldr	r1, [pc, #476]	; (49e8 <audioFrameString1+0x208>)
    480a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    480e:	3301      	adds	r3, #1
    4810:	4a76      	ldr	r2, [pc, #472]	; (49ec <audioFrameString1+0x20c>)
    4812:	7812      	ldrb	r2, [r2, #0]
    4814:	429a      	cmp	r2, r3
    4816:	dcf4      	bgt.n	4802 <audioFrameString1+0x22>
		resetStringInputs = 0;
    4818:	4b70      	ldr	r3, [pc, #448]	; (49dc <audioFrameString1+0x1fc>)
    481a:	2200      	movs	r2, #0
    481c:	701a      	strb	r2, [r3, #0]
		newPluck = 1;
    481e:	4b70      	ldr	r3, [pc, #448]	; (49e0 <audioFrameString1+0x200>)
    4820:	2201      	movs	r2, #1
    4822:	601a      	str	r2, [r3, #0]
    4824:	e7e6      	b.n	47f4 <audioFrameString1+0x14>
		for (int i = 0; i < numStringsThisBoard; i++)
    4826:	2300      	movs	r3, #0
    4828:	e7f2      	b.n	4810 <audioFrameString1+0x30>
					note = 0.0f;
    482a:	ed9f 0a71 	vldr	s0, [pc, #452]	; 49f0 <audioFrameString1+0x210>
    482e:	e07b      	b.n	4928 <audioFrameString1+0x148>
				if (isnan(note))
    4830:	eeb4 0a40 	vcmp.f32	s0, s0
    4834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4838:	f180 8081 	bvs.w	493e <audioFrameString1+0x15e>
				tExpSmooth_setValAndDest(&pitchSmootherS[i], mtof(note));
    483c:	ea4f 0884 	mov.w	r8, r4, lsl #2
    4840:	4d6c      	ldr	r5, [pc, #432]	; (49f4 <audioFrameString1+0x214>)
    4842:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    4846:	f004 fca7 	bl	9198 <__mtof_veneer>
    484a:	4628      	mov	r0, r5
    484c:	f004 ff5c 	bl	9708 <__tExpSmooth_setValAndDest_veneer>
				float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    4850:	4628      	mov	r0, r5
    4852:	f004 ff05 	bl	9660 <__tExpSmooth_tick_veneer>
				tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    4856:	4d68      	ldr	r5, [pc, #416]	; (49f8 <audioFrameString1+0x218>)
    4858:	4445      	add	r5, r8
    485a:	4628      	mov	r0, r5
    485c:	f004 fe74 	bl	9548 <__tSimpleLivingString3_setFreq_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4860:	4b66      	ldr	r3, [pc, #408]	; (49fc <audioFrameString1+0x21c>)
    4862:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4866:	b29b      	uxth	r3, r3
    4868:	ee08 3a10 	vmov	s16, r3
    486c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    4870:	eddf 7a63 	vldr	s15, [pc, #396]	; 4a00 <audioFrameString1+0x220>
    4874:	ee28 8a27 	vmul.f32	s16, s16, s15
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    4878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 4a3c <audioFrameString1+0x25c>
    487c:	f898 2000 	ldrb.w	r2, [r8]
    4880:	4b60      	ldr	r3, [pc, #384]	; (4a04 <audioFrameString1+0x224>)
    4882:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4886:	edd3 7a00 	vldr	s15, [r3]
    488a:	4b5f      	ldr	r3, [pc, #380]	; (4a08 <audioFrameString1+0x228>)
    488c:	ed93 7a00 	vldr	s14, [r3]
    4890:	ee67 7a87 	vmul.f32	s15, s15, s14
    4894:	4b5d      	ldr	r3, [pc, #372]	; (4a0c <audioFrameString1+0x22c>)
    4896:	edd3 6a02 	vldr	s13, [r3, #8]
    489a:	ee67 7aa6 	vmul.f32	s15, s15, s13
    489e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    48a2:	ee71 6a66 	vsub.f32	s13, s2, s13
    48a6:	ee27 7a26 	vmul.f32	s14, s14, s13
    48aa:	ee77 0a87 	vadd.f32	s1, s15, s14
    48ae:	ed9f 0a50 	vldr	s0, [pc, #320]	; 49f0 <audioFrameString1+0x210>
    48b2:	f004 fc51 	bl	9158 <__LEAF_clip_veneer>
    48b6:	eef0 0a40 	vmov.f32	s1, s0
    48ba:	eeb0 0a48 	vmov.f32	s0, s16
    48be:	4628      	mov	r0, r5
    48c0:	f004 fe3a 	bl	9538 <__tSimpleLivingString3_pluck_veneer>
				currentRandom++;
    48c4:	f898 3000 	ldrb.w	r3, [r8]
    48c8:	3301      	adds	r3, #1
    48ca:	f888 3000 	strb.w	r3, [r8]
				lsDecay[i] = 1;
    48ce:	4b45      	ldr	r3, [pc, #276]	; (49e4 <audioFrameString1+0x204>)
    48d0:	2201      	movs	r2, #1
    48d2:	551a      	strb	r2, [r3, r4]
			previousStringInputs[i] = stringInputs[i];
    48d4:	4b49      	ldr	r3, [pc, #292]	; (49fc <audioFrameString1+0x21c>)
    48d6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    48da:	b29b      	uxth	r3, r3
    48dc:	4a42      	ldr	r2, [pc, #264]	; (49e8 <audioFrameString1+0x208>)
    48de:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    48e2:	3401      	adds	r4, #1
    48e4:	4b41      	ldr	r3, [pc, #260]	; (49ec <audioFrameString1+0x20c>)
    48e6:	781b      	ldrb	r3, [r3, #0]
    48e8:	42a3      	cmp	r3, r4
    48ea:	dd3d      	ble.n	4968 <audioFrameString1+0x188>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    48ec:	4b3e      	ldr	r3, [pc, #248]	; (49e8 <audioFrameString1+0x208>)
    48ee:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    48f2:	b29b      	uxth	r3, r3
    48f4:	bb33      	cbnz	r3, 4944 <audioFrameString1+0x164>
    48f6:	4b41      	ldr	r3, [pc, #260]	; (49fc <audioFrameString1+0x21c>)
    48f8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    48fc:	b29b      	uxth	r3, r3
    48fe:	b30b      	cbz	r3, 4944 <audioFrameString1+0x164>
				stringOctave[i] = octave;
    4900:	4b43      	ldr	r3, [pc, #268]	; (4a10 <audioFrameString1+0x230>)
    4902:	ed93 0a00 	vldr	s0, [r3]
    4906:	4b43      	ldr	r3, [pc, #268]	; (4a14 <audioFrameString1+0x234>)
    4908:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    490c:	ed83 0a00 	vstr	s0, [r3]
				float note = stringMIDIPitches[i] + stringOctave[i];
    4910:	4b41      	ldr	r3, [pc, #260]	; (4a18 <audioFrameString1+0x238>)
    4912:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4916:	edd3 7a00 	vldr	s15, [r3]
    491a:	ee30 0a27 	vadd.f32	s0, s0, s15
				if (note < 0.0f)
    491e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    4922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4926:	d480      	bmi.n	482a <audioFrameString1+0x4a>
				if (note > 127.0f)
    4928:	eddf 7a3c 	vldr	s15, [pc, #240]	; 4a1c <audioFrameString1+0x23c>
    492c:	eeb4 0ae7 	vcmpe.f32	s0, s15
    4930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4934:	f77f af7c 	ble.w	4830 <audioFrameString1+0x50>
					note = 127.0f;
    4938:	eeb0 0a67 	vmov.f32	s0, s15
    493c:	e778      	b.n	4830 <audioFrameString1+0x50>
					note = 64.0f;
    493e:	ed9f 0a38 	vldr	s0, [pc, #224]	; 4a20 <audioFrameString1+0x240>
    4942:	e77b      	b.n	483c <audioFrameString1+0x5c>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    4944:	4b28      	ldr	r3, [pc, #160]	; (49e8 <audioFrameString1+0x208>)
    4946:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    494a:	b29b      	uxth	r3, r3
    494c:	2b00      	cmp	r3, #0
    494e:	d0c1      	beq.n	48d4 <audioFrameString1+0xf4>
    4950:	4b2a      	ldr	r3, [pc, #168]	; (49fc <audioFrameString1+0x21c>)
    4952:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4956:	b29b      	uxth	r3, r3
    4958:	2b00      	cmp	r3, #0
    495a:	d1bb      	bne.n	48d4 <audioFrameString1+0xf4>
				lsDecay[i] = 0;
    495c:	4b21      	ldr	r3, [pc, #132]	; (49e4 <audioFrameString1+0x204>)
    495e:	2200      	movs	r2, #0
    4960:	551a      	strb	r2, [r3, r4]
    4962:	e7b7      	b.n	48d4 <audioFrameString1+0xf4>
		for (int i = 0; i < numStringsThisBoard; i++)
    4964:	2400      	movs	r4, #0
    4966:	e7bd      	b.n	48e4 <audioFrameString1+0x104>
		newPluck = 0;
    4968:	4b1d      	ldr	r3, [pc, #116]	; (49e0 <audioFrameString1+0x200>)
    496a:	2200      	movs	r2, #0
    496c:	601a      	str	r2, [r3, #0]
    496e:	e746      	b.n	47fe <audioFrameString1+0x1e>
		int iplusbuffer = buffer_offset + i;
    4970:	1974      	adds	r4, r6, r5
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    4972:	f7ff fdc5 	bl	4500 <audioTickString1>
    4976:	eddf 7a2b 	vldr	s15, [pc, #172]	; 4a24 <audioFrameString1+0x244>
    497a:	ee20 0a27 	vmul.f32	s0, s0, s15
    497e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    4982:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[iplusbuffer] = current_sample;
    4986:	4a28      	ldr	r2, [pc, #160]	; (4a28 <audioFrameString1+0x248>)
    4988:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		audioOutBuffer[iplusbuffer + 1] = current_sample;
    498c:	3401      	adds	r4, #1
    498e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    4992:	3502      	adds	r5, #2
    4994:	2d7f      	cmp	r5, #127	; 0x7f
    4996:	ddeb      	ble.n	4970 <audioFrameString1+0x190>
	if (switchStrings)
    4998:	4b24      	ldr	r3, [pc, #144]	; (4a2c <audioFrameString1+0x24c>)
    499a:	681b      	ldr	r3, [r3, #0]
    499c:	b9bb      	cbnz	r3, 49ce <audioFrameString1+0x1ee>
	switchStrings = 0;
    499e:	4b23      	ldr	r3, [pc, #140]	; (4a2c <audioFrameString1+0x24c>)
    49a0:	2200      	movs	r2, #0
    49a2:	601a      	str	r2, [r3, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    49a4:	4b0c      	ldr	r3, [pc, #48]	; (49d8 <audioFrameString1+0x1f8>)
    49a6:	685b      	ldr	r3, [r3, #4]
    49a8:	1bdb      	subs	r3, r3, r7
    49aa:	4a21      	ldr	r2, [pc, #132]	; (4a30 <audioFrameString1+0x250>)
    49ac:	6013      	str	r3, [r2, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    49ae:	ee07 3a90 	vmov	s15, r3
    49b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    49b6:	4b1f      	ldr	r3, [pc, #124]	; (4a34 <audioFrameString1+0x254>)
    49b8:	ed93 7a00 	vldr	s14, [r3]
    49bc:	ee67 7a87 	vmul.f32	s15, s15, s14
    49c0:	4b1d      	ldr	r3, [pc, #116]	; (4a38 <audioFrameString1+0x258>)
    49c2:	edc3 7a00 	vstr	s15, [r3]
}
    49c6:	ecbd 8b02 	vpop	{d8}
    49ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switchStringModel(switchStrings);
    49ce:	4b17      	ldr	r3, [pc, #92]	; (4a2c <audioFrameString1+0x24c>)
    49d0:	6818      	ldr	r0, [r3, #0]
    49d2:	f7fc fd55 	bl	1480 <switchStringModel>
    49d6:	e7e2      	b.n	499e <audioFrameString1+0x1be>
    49d8:	e0001000 	.word	0xe0001000
    49dc:	20005968 	.word	0x20005968
    49e0:	200054e0 	.word	0x200054e0
    49e4:	200054d4 	.word	0x200054d4
    49e8:	20005550 	.word	0x20005550
    49ec:	20000694 	.word	0x20000694
    49f0:	00000000 	.word	0x00000000
    49f4:	2001cd44 	.word	0x2001cd44
    49f8:	2001cd3c 	.word	0x2001cd3c
    49fc:	200143fc 	.word	0x200143fc
    4a00:	37800080 	.word	0x37800080
    4a04:	20005568 	.word	0x20005568
    4a08:	20000698 	.word	0x20000698
    4a0c:	200053e0 	.word	0x200053e0
    4a10:	200054ec 	.word	0x200054ec
    4a14:	2001441c 	.word	0x2001441c
    4a18:	20014414 	.word	0x20014414
    4a1c:	42fe0000 	.word	0x42fe0000
    4a20:	42800000 	.word	0x42800000
    4a24:	4b000000 	.word	0x4b000000
    4a28:	30000000 	.word	0x30000000
    4a2c:	20014434 	.word	0x20014434
    4a30:	20014438 	.word	0x20014438
    4a34:	20000684 	.word	0x20000684
    4a38:	200053c4 	.word	0x200053c4
    4a3c:	200144fe 	.word	0x200144fe

00004a40 <audioInitString2>:
};



void __ATTR_ITCMRAM audioInitString2()
{
    4a40:	b538      	push	{r3, r4, r5, lr}

	for (int v = 0; v < numStringsThisBoard; v++)
    4a42:	2400      	movs	r4, #0
    4a44:	e014      	b.n	4a70 <audioInitString2+0x30>
	{
		 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    4a46:	4d0e      	ldr	r5, [pc, #56]	; (4a80 <audioInitString2+0x40>)
    4a48:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    4a4c:	4a0d      	ldr	r2, [pc, #52]	; (4a84 <audioInitString2+0x44>)
    4a4e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
    4a52:	2101      	movs	r1, #1
    4a54:	4628      	mov	r0, r5
    4a56:	f004 fe13 	bl	9680 <__tTString_initToPool_veneer>
		 tTString_setWoundOrUnwound(&strings[v],((firstString+v) > 3)); //string 5 is first wound string (4 in zero-based counting)
    4a5a:	4b0b      	ldr	r3, [pc, #44]	; (4a88 <audioInitString2+0x48>)
    4a5c:	6819      	ldr	r1, [r3, #0]
    4a5e:	4421      	add	r1, r4
    4a60:	2903      	cmp	r1, #3
    4a62:	bfd4      	ite	le
    4a64:	2100      	movle	r1, #0
    4a66:	2101      	movgt	r1, #1
    4a68:	4628      	mov	r0, r5
    4a6a:	f004 fbbd 	bl	91e8 <__tTString_setWoundOrUnwound_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    4a6e:	3401      	adds	r4, #1
    4a70:	4b06      	ldr	r3, [pc, #24]	; (4a8c <audioInitString2+0x4c>)
    4a72:	781b      	ldrb	r3, [r3, #0]
    4a74:	42a3      	cmp	r3, r4
    4a76:	dce6      	bgt.n	4a46 <audioInitString2+0x6>
	}

	whichStringModelLoaded = String2Loaded;
    4a78:	4b05      	ldr	r3, [pc, #20]	; (4a90 <audioInitString2+0x50>)
    4a7a:	2201      	movs	r2, #1
    4a7c:	701a      	strb	r2, [r3, #0]
}
    4a7e:	bd38      	pop	{r3, r4, r5, pc}
    4a80:	2001cd54 	.word	0x2001cd54
    4a84:	200054d8 	.word	0x200054d8
    4a88:	200053bc 	.word	0x200053bc
    4a8c:	20000694 	.word	0x20000694
    4a90:	20014451 	.word	0x20014451
    4a94:	f3af 8000 	nop.w
    4a98:	f3af 8000 	nop.w
    4a9c:	f3af 8000 	nop.w

00004aa0 <audioFreeString2>:


void __ATTR_ITCMRAM audioFreeString2()
{
    4aa0:	b510      	push	{r4, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    4aa2:	2400      	movs	r4, #0
    4aa4:	e005      	b.n	4ab2 <audioFreeString2+0x12>
	{
		tTString_free(&strings[v]);
    4aa6:	4805      	ldr	r0, [pc, #20]	; (4abc <audioFreeString2+0x1c>)
    4aa8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4aac:	f004 fc8c 	bl	93c8 <__tTString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    4ab0:	3401      	adds	r4, #1
    4ab2:	4b03      	ldr	r3, [pc, #12]	; (4ac0 <audioFreeString2+0x20>)
    4ab4:	781b      	ldrb	r3, [r3, #0]
    4ab6:	42a3      	cmp	r3, r4
    4ab8:	dcf5      	bgt.n	4aa6 <audioFreeString2+0x6>
	}
}
    4aba:	bd10      	pop	{r4, pc}
    4abc:	2001cd54 	.word	0x2001cd54
    4ac0:	20000694 	.word	0x20000694
    4ac4:	f3af 8000 	nop.w
    4ac8:	f3af 8000 	nop.w
    4acc:	f3af 8000 	nop.w
    4ad0:	f3af 8000 	nop.w
    4ad4:	f3af 8000 	nop.w
    4ad8:	f3af 8000 	nop.w
    4adc:	f3af 8000 	nop.w

00004ae0 <audioSwitchToString2>:

void __ATTR_ITCMRAM audioSwitchToString2()
{
    4ae0:	b538      	push	{r3, r4, r5, lr}
	//load string2 default params:
	for (int i = 0; i < 20; i++)
    4ae2:	2400      	movs	r4, #0
    4ae4:	e00b      	b.n	4afe <audioSwitchToString2+0x1e>
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
		if (voice == 62)
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    4ae6:	4b12      	ldr	r3, [pc, #72]	; (4b30 <audioSwitchToString2+0x50>)
    4ae8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4aec:	ed93 0a00 	vldr	s0, [r3]
    4af0:	4628      	mov	r0, r5
    4af2:	f004 fe09 	bl	9708 <__tExpSmooth_setValAndDest_veneer>
		}
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}
		knobFrozen[i] = 1;
    4af6:	4b0f      	ldr	r3, [pc, #60]	; (4b34 <audioSwitchToString2+0x54>)
    4af8:	2201      	movs	r2, #1
    4afa:	551a      	strb	r2, [r3, r4]
	for (int i = 0; i < 20; i++)
    4afc:	4414      	add	r4, r2
    4afe:	2c13      	cmp	r4, #19
    4b00:	dc14      	bgt.n	4b2c <audioSwitchToString2+0x4c>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    4b02:	4d0d      	ldr	r5, [pc, #52]	; (4b38 <audioSwitchToString2+0x58>)
    4b04:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    4b08:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 4b3c <audioSwitchToString2+0x5c>
    4b0c:	4628      	mov	r0, r5
    4b0e:	f004 fd37 	bl	9580 <__tExpSmooth_setFactor_veneer>
		if (voice == 62)
    4b12:	4b0b      	ldr	r3, [pc, #44]	; (4b40 <audioSwitchToString2+0x60>)
    4b14:	681b      	ldr	r3, [r3, #0]
    4b16:	2b3e      	cmp	r3, #62	; 0x3e
    4b18:	d0e5      	beq.n	4ae6 <audioSwitchToString2+0x6>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    4b1a:	4b0a      	ldr	r3, [pc, #40]	; (4b44 <audioSwitchToString2+0x64>)
    4b1c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4b20:	ed93 0a00 	vldr	s0, [r3]
    4b24:	4628      	mov	r0, r5
    4b26:	f004 fdef 	bl	9708 <__tExpSmooth_setValAndDest_veneer>
    4b2a:	e7e4      	b.n	4af6 <audioSwitchToString2+0x16>
	}
}
    4b2c:	bd38      	pop	{r3, r4, r5, pc}
    4b2e:	bf00      	nop
    4b30:	200008e4 	.word	0x200008e4
    4b34:	200053cc 	.word	0x200053cc
    4b38:	20005430 	.word	0x20005430
    4b3c:	3a83126f 	.word	0x3a83126f
    4b40:	20014440 	.word	0x20014440
    4b44:	200186f0 	.word	0x200186f0
    4b48:	f3af 8000 	nop.w
    4b4c:	f3af 8000 	nop.w
    4b50:	f3af 8000 	nop.w
    4b54:	f3af 8000 	nop.w
    4b58:	f3af 8000 	nop.w
    4b5c:	f3af 8000 	nop.w

00004b60 <audioTickString2>:
}

uint32_t thisFrameCount = 0;

float __ATTR_ITCMRAM audioTickString2(void)
{
    4b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b64:	ed2d 8b0a 	vpush	{d8-d12}
    4b68:	b082      	sub	sp, #8
	float temp = 0.0f;
	float theNote[NUM_STRINGS_PER_BOARD];

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    4b6a:	48a3      	ldr	r0, [pc, #652]	; (4df8 <audioTickString2+0x298>)
    4b6c:	f004 fd78 	bl	9660 <__tExpSmooth_tick_veneer>
    4b70:	eeb0 aa40 	vmov.f32	s20, s0

	for (int i = 0; i < 20; i++)
    4b74:	2400      	movs	r4, #0
    4b76:	e00a      	b.n	4b8e <audioTickString2+0x2e>
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    4b78:	00a5      	lsls	r5, r4, #2
    4b7a:	48a0      	ldr	r0, [pc, #640]	; (4dfc <audioTickString2+0x29c>)
    4b7c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4b80:	f004 fd6e 	bl	9660 <__tExpSmooth_tick_veneer>
    4b84:	4b9e      	ldr	r3, [pc, #632]	; (4e00 <audioTickString2+0x2a0>)
    4b86:	442b      	add	r3, r5
    4b88:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 20; i++)
    4b8c:	3401      	adds	r4, #1
    4b8e:	2c13      	cmp	r4, #19
    4b90:	ddf2      	ble.n	4b78 <audioTickString2+0x18>
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
    4b92:	4b9c      	ldr	r3, [pc, #624]	; (4e04 <audioTickString2+0x2a4>)
    4b94:	681b      	ldr	r3, [r3, #0]
    4b96:	2b00      	cmp	r3, #0
    4b98:	f040 8092 	bne.w	4cc0 <audioTickString2+0x160>


		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f

		uint32_t which = 0;
    4b9c:	2500      	movs	r5, #0
    4b9e:	eddf aa9a 	vldr	s21, [pc, #616]	; 4e08 <audioTickString2+0x2a8>
    4ba2:	e202      	b.n	4faa <audioTickString2+0x44a>
					theNote[i] = 0.0f;
    4ba4:	2200      	movs	r2, #0
    4ba6:	ab02      	add	r3, sp, #8
    4ba8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4bac:	f843 2c08 	str.w	r2, [r3, #-8]
    4bb0:	e04f      	b.n	4c52 <audioTickString2+0xf2>
					theNote[i] = 64.0f;
    4bb2:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    4bb6:	ab02      	add	r3, sp, #8
    4bb8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4bbc:	f843 2c08 	str.w	r2, [r3, #-8]
    4bc0:	e062      	b.n	4c88 <audioTickString2+0x128>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    4bc2:	4b92      	ldr	r3, [pc, #584]	; (4e0c <audioTickString2+0x2ac>)
    4bc4:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4bc8:	b29b      	uxth	r3, r3
    4bca:	b12b      	cbz	r3, 4bd8 <audioTickString2+0x78>
    4bcc:	4b90      	ldr	r3, [pc, #576]	; (4e10 <audioTickString2+0x2b0>)
    4bce:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4bd2:	b29b      	uxth	r3, r3
    4bd4:	2b00      	cmp	r3, #0
    4bd6:	d06d      	beq.n	4cb4 <audioTickString2+0x154>
			previousStringInputs[i] = stringInputs[i];
    4bd8:	4b8d      	ldr	r3, [pc, #564]	; (4e10 <audioTickString2+0x2b0>)
    4bda:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4bde:	b29b      	uxth	r3, r3
    4be0:	4a8a      	ldr	r2, [pc, #552]	; (4e0c <audioTickString2+0x2ac>)
    4be2:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    4be6:	3401      	adds	r4, #1
    4be8:	4b8a      	ldr	r3, [pc, #552]	; (4e14 <audioTickString2+0x2b4>)
    4bea:	781b      	ldrb	r3, [r3, #0]
    4bec:	42a3      	cmp	r3, r4
    4bee:	dd69      	ble.n	4cc4 <audioTickString2+0x164>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    4bf0:	4b86      	ldr	r3, [pc, #536]	; (4e0c <audioTickString2+0x2ac>)
    4bf2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4bf6:	b29b      	uxth	r3, r3
    4bf8:	2b00      	cmp	r3, #0
    4bfa:	d1e2      	bne.n	4bc2 <audioTickString2+0x62>
    4bfc:	4b84      	ldr	r3, [pc, #528]	; (4e10 <audioTickString2+0x2b0>)
    4bfe:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4c02:	b29b      	uxth	r3, r3
    4c04:	2b00      	cmp	r3, #0
    4c06:	d0dc      	beq.n	4bc2 <audioTickString2+0x62>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    4c08:	4b81      	ldr	r3, [pc, #516]	; (4e10 <audioTickString2+0x2b0>)
    4c0a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    4c0e:	b29b      	uxth	r3, r3
    4c10:	ee08 3a10 	vmov	s16, r3
    4c14:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    4c18:	eddf 7a7f 	vldr	s15, [pc, #508]	; 4e18 <audioTickString2+0x2b8>
    4c1c:	ee28 8a27 	vmul.f32	s16, s16, s15
				stringOctave[i] = octave;
    4c20:	4b7e      	ldr	r3, [pc, #504]	; (4e1c <audioTickString2+0x2bc>)
    4c22:	edd3 7a00 	vldr	s15, [r3]
    4c26:	4b7e      	ldr	r3, [pc, #504]	; (4e20 <audioTickString2+0x2c0>)
    4c28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c2c:	edc3 7a00 	vstr	s15, [r3]
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    4c30:	4b7c      	ldr	r3, [pc, #496]	; (4e24 <audioTickString2+0x2c4>)
    4c32:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c36:	ed93 7a00 	vldr	s14, [r3]
    4c3a:	ee77 7a87 	vadd.f32	s15, s15, s14
    4c3e:	ab02      	add	r3, sp, #8
    4c40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c44:	ed43 7a02 	vstr	s15, [r3, #-8]
				if (theNote[i] < 0.0f)
    4c48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    4c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c50:	d4a8      	bmi.n	4ba4 <audioTickString2+0x44>
				if (theNote[i] > 127.0f)
    4c52:	ab02      	add	r3, sp, #8
    4c54:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c58:	ed13 7a02 	vldr	s14, [r3, #-8]
    4c5c:	eddf 7a72 	vldr	s15, [pc, #456]	; 4e28 <audioTickString2+0x2c8>
    4c60:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c68:	dd04      	ble.n	4c74 <audioTickString2+0x114>
					theNote[i] = 127.0f;
    4c6a:	ab02      	add	r3, sp, #8
    4c6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c70:	ed43 7a02 	vstr	s15, [r3, #-8]
				if (isnan(theNote[i]))
    4c74:	ab02      	add	r3, sp, #8
    4c76:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c7a:	ed53 7a02 	vldr	s15, [r3, #-8]
    4c7e:	eef4 7a67 	vcmp.f32	s15, s15
    4c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4c86:	d694      	bvs.n	4bb2 <audioTickString2+0x52>
				float finalFreq = mtofTableLookup(theNote[i]);
    4c88:	00a6      	lsls	r6, r4, #2
    4c8a:	ab02      	add	r3, sp, #8
    4c8c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    4c90:	ed13 0a02 	vldr	s0, [r3, #-8]
    4c94:	f004 fb6c 	bl	9370 <__mtofTableLookup_veneer>
				tTString_setFreq(&strings[i], finalFreq);
    4c98:	4d64      	ldr	r5, [pc, #400]	; (4e2c <audioTickString2+0x2cc>)
    4c9a:	4435      	add	r5, r6
    4c9c:	4628      	mov	r0, r5
    4c9e:	f004 fd17 	bl	96d0 <__tTString_setFreq_veneer>
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    4ca2:	eef0 0a48 	vmov.f32	s1, s16
    4ca6:	4b56      	ldr	r3, [pc, #344]	; (4e00 <audioTickString2+0x2a0>)
    4ca8:	ed93 0a02 	vldr	s0, [r3, #8]
    4cac:	4628      	mov	r0, r5
    4cae:	f004 fbb7 	bl	9420 <__tTString_pluck_veneer>
			{
    4cb2:	e791      	b.n	4bd8 <audioTickString2+0x78>
				tTString_mute(&strings[i]);
    4cb4:	485d      	ldr	r0, [pc, #372]	; (4e2c <audioTickString2+0x2cc>)
    4cb6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4cba:	f004 fa3d 	bl	9138 <__tTString_mute_veneer>
    4cbe:	e78b      	b.n	4bd8 <audioTickString2+0x78>
		for (int i = 0; i < numStringsThisBoard; i++)
    4cc0:	2400      	movs	r4, #0
    4cc2:	e791      	b.n	4be8 <audioTickString2+0x88>
		newPluck = 0;
    4cc4:	4b4f      	ldr	r3, [pc, #316]	; (4e04 <audioTickString2+0x2a4>)
    4cc6:	2200      	movs	r2, #0
    4cc8:	601a      	str	r2, [r3, #0]
    4cca:	e767      	b.n	4b9c <audioTickString2+0x3c>
			theNote[i] = 0.0f;
    4ccc:	2200      	movs	r2, #0
    4cce:	ab02      	add	r3, sp, #8
    4cd0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    4cd4:	f843 2c08 	str.w	r2, [r3, #-8]
    4cd8:	e183      	b.n	4fe2 <audioTickString2+0x482>
			theNote[i] = 64.0f;
    4cda:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    4cde:	ab02      	add	r3, sp, #8
    4ce0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    4ce4:	f843 2c08 	str.w	r2, [r3, #-8]
    4ce8:	e197      	b.n	501a <audioTickString2+0x4ba>
			float thisString = (firstString + i);
    4cea:	4b51      	ldr	r3, [pc, #324]	; (4e30 <audioTickString2+0x2d0>)
    4cec:	681b      	ldr	r3, [r3, #0]
    4cee:	442b      	add	r3, r5
    4cf0:	ee07 3a90 	vmov	s15, r3
    4cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			float thisStringProportion = thisString * invNumStrings;
    4cf8:	4b4e      	ldr	r3, [pc, #312]	; (4e34 <audioTickString2+0x2d4>)
    4cfa:	ed93 7a00 	vldr	s14, [r3]
    4cfe:	ee27 7a27 	vmul.f32	s14, s14, s15
			float thisHarmonic = (knobScaled[10] * (1.0f - thisStringProportion)) + (knobScaled[11] * thisStringProportion);
    4d02:	4c3f      	ldr	r4, [pc, #252]	; (4e00 <audioTickString2+0x2a0>)
    4d04:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    4d08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    4d0c:	ee76 6ac7 	vsub.f32	s13, s13, s14
    4d10:	ee67 7aa6 	vmul.f32	s15, s15, s13
    4d14:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    4d18:	ee26 7a87 	vmul.f32	s14, s13, s14
    4d1c:	ee77 7a87 	vadd.f32	s15, s15, s14
			float harmonic = (thisHarmonic * 8.0f) + 2.0f;
    4d20:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
    4d24:	ee67 7a87 	vmul.f32	s15, s15, s14
    4d28:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    4d2c:	ee37 9a87 	vadd.f32	s18, s15, s14
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    4d30:	ed9f 2a41 	vldr	s4, [pc, #260]	; 4e38 <audioTickString2+0x2d8>
    4d34:	eddf 1a41 	vldr	s3, [pc, #260]	; 4e3c <audioTickString2+0x2dc>
    4d38:	ed9f 1a41 	vldr	s2, [pc, #260]	; 4e40 <audioTickString2+0x2e0>
    4d3c:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
    4d40:	eeb0 0a69 	vmov.f32	s0, s19
    4d44:	f004 fc4c 	bl	95e0 <__LEAF_map_veneer>
			if (knobScaled[5] > 0.05f)
    4d48:	edd4 0a05 	vldr	s1, [r4, #20]
    4d4c:	eddf 7a3d 	vldr	s15, [pc, #244]	; 4e44 <audioTickString2+0x2e4>
    4d50:	eef4 0ae7 	vcmpe.f32	s1, s15
    4d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d58:	dd16      	ble.n	4d88 <audioTickString2+0x228>
				inHarm = LEAF_clip(0.00000001f, inHarm * knobScaled[5], 0.01f);
    4d5a:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 4e48 <audioTickString2+0x2e8>
    4d5e:	ee60 0a80 	vmul.f32	s1, s1, s0
    4d62:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 4e4c <audioTickString2+0x2ec>
    4d66:	f004 f9f7 	bl	9158 <__LEAF_clip_veneer>
				tTString_setHarmonicity(&strings[i], inHarm, finalFreq);
    4d6a:	eef0 0a68 	vmov.f32	s1, s17
    4d6e:	4638      	mov	r0, r7
    4d70:	f004 faba 	bl	92e8 <__tTString_setHarmonicity_veneer>
				tTString_setInharmonic(&strings[i], 1);
    4d74:	2101      	movs	r1, #1
    4d76:	4638      	mov	r0, r7
    4d78:	f004 fcc2 	bl	9700 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],harmonic);
    4d7c:	eeb0 0a49 	vmov.f32	s0, s18
    4d80:	4638      	mov	r0, r7
    4d82:	f004 fa61 	bl	9248 <__tTString_setHarmonic_veneer>
    4d86:	e176      	b.n	5076 <audioTickString2+0x516>
				tTString_setInharmonic(&strings[i], 0);
    4d88:	2100      	movs	r1, #0
    4d8a:	4638      	mov	r0, r7
    4d8c:	f004 fcb8 	bl	9700 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],(uint32_t)harmonic);
    4d90:	eebc 0ac9 	vcvt.u32.f32	s0, s18
    4d94:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    4d98:	4638      	mov	r0, r7
    4d9a:	f004 fa55 	bl	9248 <__tTString_setHarmonic_veneer>
    4d9e:	e16a      	b.n	5076 <audioTickString2+0x516>
			//find the closest open string frequency and interpolate
			if (stringParams[i][0][0] > openStringFreq)
			{
				if (stringParams[i+1][0][0] < openStringFreq)
				{
					which = i;
    4da0:	4626      	mov	r6, r4
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    4da2:	eeb0 0a48 	vmov.f32	s0, s16
    4da6:	f004 fc17 	bl	95d8 <__LEAF_mapToZeroToOneOutput_veneer>
    4daa:	eef0 8a40 	vmov.f32	s17, s0
					oneMinusAlpha = 1.0f - alpha;
    4dae:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    4db2:	ee3b ba40 	vsub.f32	s22, s22, s0
		for (int i = 0; i < 9; i++)
    4db6:	3401      	adds	r4, #1
    4db8:	2c08      	cmp	r4, #8
    4dba:	dc4b      	bgt.n	4e54 <audioTickString2+0x2f4>
			if (stringParams[i][0][0] > openStringFreq)
    4dbc:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    4dc0:	4b23      	ldr	r3, [pc, #140]	; (4e50 <audioTickString2+0x2f0>)
    4dc2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    4dc6:	edd3 0a00 	vldr	s1, [r3]
    4dca:	eef4 0ac8 	vcmpe.f32	s1, s16
    4dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dd2:	ddf0      	ble.n	4db6 <audioTickString2+0x256>
				if (stringParams[i+1][0][0] < openStringFreq)
    4dd4:	1c63      	adds	r3, r4, #1
    4dd6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    4dda:	4a1d      	ldr	r2, [pc, #116]	; (4e50 <audioTickString2+0x2f0>)
    4ddc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4de0:	ed93 1a00 	vldr	s2, [r3]
    4de4:	eeb4 1ac8 	vcmpe.f32	s2, s16
    4de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4dec:	d4d8      	bmi.n	4da0 <audioTickString2+0x240>
				}
				else if (i == 8)
    4dee:	2c08      	cmp	r4, #8
    4df0:	d1e1      	bne.n	4db6 <audioTickString2+0x256>
				{
					which = 9;
    4df2:	2609      	movs	r6, #9
    4df4:	e7df      	b.n	4db6 <audioTickString2+0x256>
    4df6:	bf00      	nop
    4df8:	2001444c 	.word	0x2001444c
    4dfc:	20005430 	.word	0x20005430
    4e00:	200053e0 	.word	0x200053e0
    4e04:	200054e0 	.word	0x200054e0
    4e08:	00000000 	.word	0x00000000
    4e0c:	20005550 	.word	0x20005550
    4e10:	200143fc 	.word	0x200143fc
    4e14:	20000694 	.word	0x20000694
    4e18:	37800080 	.word	0x37800080
    4e1c:	200054ec 	.word	0x200054ec
    4e20:	2001441c 	.word	0x2001441c
    4e24:	20014414 	.word	0x20014414
    4e28:	42fe0000 	.word	0x42fe0000
    4e2c:	2001cd54 	.word	0x2001cd54
    4e30:	200053bc 	.word	0x200053bc
    4e34:	20000688 	.word	0x20000688
    4e38:	3727c5ac 	.word	0x3727c5ac
    4e3c:	38d1b717 	.word	0x38d1b717
    4e40:	42980000 	.word	0x42980000
    4e44:	3d4ccccd 	.word	0x3d4ccccd
    4e48:	3c23d70a 	.word	0x3c23d70a
    4e4c:	322bcc77 	.word	0x322bcc77
    4e50:	20000934 	.word	0x20000934
				}
			}
		}

		float barHeight = barInMIDI[i] / 12.0f;
    4e54:	4bde      	ldr	r3, [pc, #888]	; (51d0 <audioTickString2+0x670>)
    4e56:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    4e5a:	edd3 6a00 	vldr	s13, [r3]
    4e5e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    4e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15

		uint32_t barHeightInt = (uint32_t)barHeight;
    4e66:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    4e6a:	ee17 8a90 	vmov	r8, s15
		float barHeightAlpha = barHeight - barHeightInt;
    4e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    4e72:	ee77 ba67 	vsub.f32	s23, s14, s15
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    4e76:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4e7a:	ee37 caeb 	vsub.f32	s24, s15, s23
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    4e7e:	f108 0301 	add.w	r3, r8, #1
    4e82:	ee00 3a90 	vmov	s1, r3
    4e86:	ed9f 8ad3 	vldr	s16, [pc, #844]	; 51d4 <audioTickString2+0x674>
    4e8a:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
    4e8e:	eef8 0a60 	vcvt.f32.u32	s1, s1
    4e92:	eeb0 0a48 	vmov.f32	s0, s16
    4e96:	f004 f95f 	bl	9158 <__LEAF_clip_veneer>
    4e9a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    4e9e:	ee17 4a90 	vmov	r4, s15

		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    4ea2:	1c73      	adds	r3, r6, #1
    4ea4:	eeb2 1a02 	vmov.f32	s2, #34	; 0x41100000  9.0
    4ea8:	ee00 3a90 	vmov	s1, r3
    4eac:	eef8 0a60 	vcvt.f32.u32	s1, s1
    4eb0:	eeb0 0a48 	vmov.f32	s0, s16
    4eb4:	f004 f950 	bl	9158 <__LEAF_clip_veneer>
    4eb8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    4ebc:	ee17 3a90 	vmov	r3, s15
			float decayRatio2 = stringParams[0][barHeightIntPlusOne][2] / stringParams[0][barHeightIntPlusOne][0];

			decayTime = (decayRatio1 * barHeightOneMinusAlpha + decayRatio2 * barHeightAlpha) * openStringFreq;
		}

		if (which == 9)
    4ec0:	2e09      	cmp	r6, #9
    4ec2:	f000 811d 	beq.w	5100 <audioTickString2+0x5a0>
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
		}

		else
		{
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    4ec6:	4ac4      	ldr	r2, [pc, #784]	; (51d8 <audioTickString2+0x678>)
    4ec8:	eb08 0048 	add.w	r0, r8, r8, lsl #1
    4ecc:	eb06 01c6 	add.w	r1, r6, r6, lsl #3
    4ed0:	0089      	lsls	r1, r1, #2
    4ed2:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    4ed6:	4411      	add	r1, r2
    4ed8:	ed91 8a01 	vldr	s16, [r1, #4]
    4edc:	ee28 8a0b 	vmul.f32	s16, s16, s22
    4ee0:	4684      	mov	ip, r0
    4ee2:	eb03 00c3 	add.w	r0, r3, r3, lsl #3
    4ee6:	0080      	lsls	r0, r0, #2
    4ee8:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    4eec:	4410      	add	r0, r2
    4eee:	edd0 7a01 	vldr	s15, [r0, #4]
    4ef2:	ee67 7aa8 	vmul.f32	s15, s15, s17
    4ef6:	ee38 8a27 	vadd.f32	s16, s16, s15
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    4efa:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
    4efe:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
    4f02:	0080      	lsls	r0, r0, #2
    4f04:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    4f08:	4410      	add	r0, r2
    4f0a:	edd0 7a01 	vldr	s15, [r0, #4]
    4f0e:	ee67 7a8b 	vmul.f32	s15, s15, s22
    4f12:	eb08 0c48 	add.w	ip, r8, r8, lsl #1
    4f16:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    4f1a:	0080      	lsls	r0, r0, #2
    4f1c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    4f20:	4410      	add	r0, r2
    4f22:	ed90 7a01 	vldr	s14, [r0, #4]
    4f26:	ee27 7a28 	vmul.f32	s14, s14, s17
    4f2a:	ee77 7a87 	vadd.f32	s15, s15, s14
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    4f2e:	ee2c 8a08 	vmul.f32	s16, s24, s16
    4f32:	ee6b 7aa7 	vmul.f32	s15, s23, s15
    4f36:	ee38 8a27 	vadd.f32	s16, s16, s15
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    4f3a:	edd1 7a02 	vldr	s15, [r1, #8]
    4f3e:	ee67 7a8b 	vmul.f32	s15, s15, s22
    4f42:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    4f46:	009b      	lsls	r3, r3, #2
    4f48:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    4f4c:	4413      	add	r3, r2
    4f4e:	ed93 7a02 	vldr	s14, [r3, #8]
    4f52:	ee27 7a28 	vmul.f32	s14, s14, s17
    4f56:	ee77 7a87 	vadd.f32	s15, s15, s14
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    4f5a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    4f5e:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
    4f62:	009b      	lsls	r3, r3, #2
    4f64:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4f68:	4413      	add	r3, r2
    4f6a:	ed93 7a02 	vldr	s14, [r3, #8]
    4f6e:	ee27 7a0b 	vmul.f32	s14, s14, s22
    4f72:	edd0 6a02 	vldr	s13, [r0, #8]
    4f76:	ee66 6aa8 	vmul.f32	s13, s13, s17
    4f7a:	ee37 7a26 	vadd.f32	s14, s14, s13
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    4f7e:	ee6c 7a27 	vmul.f32	s15, s24, s15
    4f82:	ee2b 7a87 	vmul.f32	s14, s23, s14
    4f86:	ee77 7a87 	vadd.f32	s15, s15, s14
		}


		tTString_setDecayInSeconds(&strings[i],decayTime * decayScaling);
    4f8a:	ee27 0aa9 	vmul.f32	s0, s15, s19
    4f8e:	4638      	mov	r0, r7
    4f90:	f004 fa36 	bl	9400 <__tTString_setDecayInSeconds_veneer>
		tTString_setFilterFreqDirectly(&strings[i], filterFreq * filterScaling);
    4f94:	ee28 0a09 	vmul.f32	s0, s16, s18
    4f98:	4638      	mov	r0, r7
    4f9a:	f004 fa6d 	bl	9478 <__tTString_setFilterFreqDirectly_veneer>

		temp += tTString_tick(&strings[i]);
    4f9e:	4638      	mov	r0, r7
    4fa0:	f004 f8f6 	bl	9190 <__tTString_tick_veneer>
    4fa4:	ee7a aa80 	vadd.f32	s21, s21, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    4fa8:	3501      	adds	r5, #1
    4faa:	4b8c      	ldr	r3, [pc, #560]	; (51dc <audioTickString2+0x67c>)
    4fac:	781b      	ldrb	r3, [r3, #0]
    4fae:	42ab      	cmp	r3, r5
    4fb0:	f340 80c8 	ble.w	5144 <audioTickString2+0x5e4>
		theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    4fb4:	4b8a      	ldr	r3, [pc, #552]	; (51e0 <audioTickString2+0x680>)
    4fb6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    4fba:	edd3 7a00 	vldr	s15, [r3]
    4fbe:	4b89      	ldr	r3, [pc, #548]	; (51e4 <audioTickString2+0x684>)
    4fc0:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    4fc4:	ed93 7a00 	vldr	s14, [r3]
    4fc8:	ee77 7a87 	vadd.f32	s15, s15, s14
    4fcc:	ab02      	add	r3, sp, #8
    4fce:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    4fd2:	ed43 7a02 	vstr	s15, [r3, #-8]
		if (theNote[i] < 0.0f)
    4fd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    4fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4fde:	f53f ae75 	bmi.w	4ccc <audioTickString2+0x16c>
		if (theNote[i] > 127.0f)
    4fe2:	ab02      	add	r3, sp, #8
    4fe4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    4fe8:	ed13 7a02 	vldr	s14, [r3, #-8]
    4fec:	eddf 7a7e 	vldr	s15, [pc, #504]	; 51e8 <audioTickString2+0x688>
    4ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4ff8:	dd04      	ble.n	5004 <audioTickString2+0x4a4>
			theNote[i] = 127.0f;
    4ffa:	ab02      	add	r3, sp, #8
    4ffc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    5000:	ed43 7a02 	vstr	s15, [r3, #-8]
		if (isnan(theNote[i]))
    5004:	ab02      	add	r3, sp, #8
    5006:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    500a:	ed53 7a02 	vldr	s15, [r3, #-8]
    500e:	eef4 7a67 	vcmp.f32	s15, s15
    5012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5016:	f5bf ae60 	bvs.w	4cda <audioTickString2+0x17a>
		float finalFreq = mtofTableLookup(theNote[i]);
    501a:	00ac      	lsls	r4, r5, #2
    501c:	ab02      	add	r3, sp, #8
    501e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    5022:	ed53 9a02 	vldr	s19, [r3, #-8]
    5026:	eeb0 0a69 	vmov.f32	s0, s19
    502a:	f004 f9a1 	bl	9370 <__mtofTableLookup_veneer>
    502e:	eef0 8a40 	vmov.f32	s17, s0
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    5032:	4b67      	ldr	r3, [pc, #412]	; (51d0 <audioTickString2+0x670>)
    5034:	4423      	add	r3, r4
    5036:	ed93 0a00 	vldr	s0, [r3]
    503a:	ee39 0ac0 	vsub.f32	s0, s19, s0
    503e:	f004 f997 	bl	9370 <__mtofTableLookup_veneer>
    5042:	eeb0 8a40 	vmov.f32	s16, s0
		tTString_setWindingsPerInch(&strings[i],LEAF_map(openStringFreq, 123.0f, 247.0f, 70.0f, 120.0f));
    5046:	4f69      	ldr	r7, [pc, #420]	; (51ec <audioTickString2+0x68c>)
    5048:	4427      	add	r7, r4
    504a:	ed9f 2a69 	vldr	s4, [pc, #420]	; 51f0 <audioTickString2+0x690>
    504e:	eddf 1a69 	vldr	s3, [pc, #420]	; 51f4 <audioTickString2+0x694>
    5052:	ed9f 1a69 	vldr	s2, [pc, #420]	; 51f8 <audioTickString2+0x698>
    5056:	eddf 0a69 	vldr	s1, [pc, #420]	; 51fc <audioTickString2+0x69c>
    505a:	f004 fac1 	bl	95e0 <__LEAF_map_veneer>
    505e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    5062:	ee17 1a90 	vmov	r1, s15
    5066:	4638      	mov	r0, r7
    5068:	f004 f8e2 	bl	9230 <__tTString_setWindingsPerInch_veneer>
		if (thisFrameCount == 0)
    506c:	4b64      	ldr	r3, [pc, #400]	; (5200 <audioTickString2+0x6a0>)
    506e:	681b      	ldr	r3, [r3, #0]
    5070:	2b00      	cmp	r3, #0
    5072:	f43f ae3a 	beq.w	4cea <audioTickString2+0x18a>
		tTString_setBarPosition(&strings[i],barInMIDI[i]);
    5076:	4b56      	ldr	r3, [pc, #344]	; (51d0 <audioTickString2+0x670>)
    5078:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    507c:	ed93 0a00 	vldr	s0, [r3]
    5080:	4638      	mov	r0, r7
    5082:	f004 fa75 	bl	9570 <__tTString_setBarPosition_veneer>
		tTString_setOpenStringFrequency(&strings[i], openStringFreq);
    5086:	eeb0 0a48 	vmov.f32	s0, s16
    508a:	4638      	mov	r0, r7
    508c:	f004 f924 	bl	92d8 <__tTString_setOpenStringFrequency_veneer>
		tTString_setFeedbackStrength(&strings[i],knobScaled[6]);
    5090:	4c5c      	ldr	r4, [pc, #368]	; (5204 <audioTickString2+0x6a4>)
    5092:	ed94 0a06 	vldr	s0, [r4, #24]
    5096:	4638      	mov	r0, r7
    5098:	f004 f99e 	bl	93d8 <__tTString_setFeedbackStrength_veneer>
		tTString_setFeedbackReactionSpeed(&strings[i],knobScaled[7]);
    509c:	ed94 0a07 	vldr	s0, [r4, #28]
    50a0:	4638      	mov	r0, r7
    50a2:	f004 f935 	bl	9310 <__tTString_setFeedbackReactionSpeed_veneer>
		tTString_setRippleDepth(&strings[i],knobScaled[9]);
    50a6:	ed94 0a09 	vldr	s0, [r4, #36]	; 0x24
    50aa:	4638      	mov	r0, r7
    50ac:	f004 f9f0 	bl	9490 <__tTString_setRippleDepth_veneer>
		tTString_setFreq(&strings[i], finalFreq);
    50b0:	eeb0 0a68 	vmov.f32	s0, s17
    50b4:	4638      	mov	r0, r7
    50b6:	f004 fb0b 	bl	96d0 <__tTString_setFreq_veneer>
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    50ba:	edd4 0a00 	vldr	s1, [r4]
    50be:	eeb1 9a00 	vmov.f32	s18, #16	; 0x40800000  4.0
    50c2:	ee60 0a89 	vmul.f32	s1, s1, s18
    50c6:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
    50ca:	ee70 0ae8 	vsub.f32	s1, s1, s17
    50ce:	eeb0 0a68 	vmov.f32	s0, s17
    50d2:	f004 f9b9 	bl	9448 <__fastPowf_veneer>
    50d6:	eef0 9a40 	vmov.f32	s19, s0
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[1] * 4.0f - 2.0f); //0.5-2.0f
    50da:	edd4 0a01 	vldr	s1, [r4, #4]
    50de:	ee60 0a89 	vmul.f32	s1, s1, s18
    50e2:	ee70 0ae8 	vsub.f32	s1, s1, s17
    50e6:	eeb0 0a68 	vmov.f32	s0, s17
    50ea:	f004 f9ad 	bl	9448 <__fastPowf_veneer>
    50ee:	eeb0 9a40 	vmov.f32	s18, s0
		for (int i = 0; i < 9; i++)
    50f2:	2400      	movs	r4, #0
		float oneMinusAlpha = 1.0f;
    50f4:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
		float alpha = 0.0f;
    50f8:	eddf 8a36 	vldr	s17, [pc, #216]	; 51d4 <audioTickString2+0x674>
		uint32_t which = 0;
    50fc:	4626      	mov	r6, r4
		for (int i = 0; i < 9; i++)
    50fe:	e65b      	b.n	4db8 <audioTickString2+0x258>
			float freq1 = stringParams[9][barHeightInt][1];
    5100:	4b35      	ldr	r3, [pc, #212]	; (51d8 <audioTickString2+0x678>)
    5102:	eb08 0248 	add.w	r2, r8, r8, lsl #1
    5106:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    510a:	ed92 8a52 	vldr	s16, [r2, #328]	; 0x148
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    510e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    5112:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    5116:	edd2 7a52 	vldr	s15, [r2, #328]	; 0x148
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    511a:	ee2c 8a08 	vmul.f32	s16, s24, s16
    511e:	ee6b 7aa7 	vmul.f32	s15, s23, s15
    5122:	ee38 8a27 	vadd.f32	s16, s16, s15
			float decay1 = stringParams[9][barHeightInt][2];
    5126:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    512a:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    512e:	ed98 7a53 	vldr	s14, [r8, #332]	; 0x14c
			float decay2 = stringParams[9][barHeightIntPlusOne][2];
    5132:	edd2 7a53 	vldr	s15, [r2, #332]	; 0x14c
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    5136:	ee2c 7a07 	vmul.f32	s14, s24, s14
    513a:	ee6b 7aa7 	vmul.f32	s15, s23, s15
    513e:	ee77 7a27 	vadd.f32	s15, s14, s15
    5142:	e722      	b.n	4f8a <audioTickString2+0x42a>
	}
	thisFrameCount = (thisFrameCount + 1) & 63;
    5144:	4a2e      	ldr	r2, [pc, #184]	; (5200 <audioTickString2+0x6a0>)
    5146:	6813      	ldr	r3, [r2, #0]
    5148:	3301      	adds	r3, #1
    514a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    514e:	6013      	str	r3, [r2, #0]
	//float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    5150:	ed9f 1a25 	vldr	s2, [pc, #148]	; 51e8 <audioTickString2+0x688>
    5154:	eddf 0a2c 	vldr	s1, [pc, #176]	; 5208 <audioTickString2+0x6a8>
    5158:	ee6a 0a20 	vmul.f32	s1, s20, s1
    515c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 51d4 <audioTickString2+0x674>
    5160:	f003 fffa 	bl	9158 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
    5164:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    5168:	ee17 3a90 	vmov	r3, s15
	float alpha = volIdx-volIdxInt;
    516c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    5170:	ee70 7a67 	vsub.f32	s15, s0, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    5174:	1c59      	adds	r1, r3, #1
    5176:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
    517a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    517e:	ee78 6a67 	vsub.f32	s13, s16, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    5182:	4a22      	ldr	r2, [pc, #136]	; (520c <audioTickString2+0x6ac>)
    5184:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5188:	ed93 7a00 	vldr	s14, [r3]
    518c:	ee27 7a26 	vmul.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    5190:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5194:	ed92 0a00 	vldr	s0, [r2]
    5198:	ee20 0a27 	vmul.f32	s0, s0, s15
    519c:	ee30 0a07 	vadd.f32	s0, s0, s14

	//temp *= outVol;
	temp *= outVol * masterVolFromBrain;
    51a0:	4b1b      	ldr	r3, [pc, #108]	; (5210 <audioTickString2+0x6b0>)
    51a2:	edd3 7a00 	vldr	s15, [r3]
    51a6:	ee20 0a27 	vmul.f32	s0, s0, s15
	temp = tanhf(temp);
    51aa:	ee20 0a2a 	vmul.f32	s0, s0, s21
    51ae:	f004 fa5f 	bl	9670 <__tanhf_veneer>
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    51b2:	eeb0 1a48 	vmov.f32	s2, s16
    51b6:	eddf 0a17 	vldr	s1, [pc, #92]	; 5214 <audioTickString2+0x6b4>
    51ba:	ee60 0a20 	vmul.f32	s1, s0, s1
    51be:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    51c2:	f003 ffc9 	bl	9158 <__LEAF_clip_veneer>
}
    51c6:	b002      	add	sp, #8
    51c8:	ecbd 8b0a 	vpop	{d8-d12}
    51cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    51d0:	20001384 	.word	0x20001384
    51d4:	00000000 	.word	0x00000000
    51d8:	20000934 	.word	0x20000934
    51dc:	20000694 	.word	0x20000694
    51e0:	20014414 	.word	0x20014414
    51e4:	2001441c 	.word	0x2001441c
    51e8:	42fe0000 	.word	0x42fe0000
    51ec:	2001cd54 	.word	0x2001cd54
    51f0:	42f00000 	.word	0x42f00000
    51f4:	428c0000 	.word	0x428c0000
    51f8:	43770000 	.word	0x43770000
    51fc:	42f60000 	.word	0x42f60000
    5200:	2001cd5c 	.word	0x2001cd5c
    5204:	200053e0 	.word	0x200053e0
    5208:	42a00000 	.word	0x42a00000
    520c:	200006a0 	.word	0x200006a0
    5210:	2000068c 	.word	0x2000068c
    5214:	3f7ae148 	.word	0x3f7ae148
    5218:	f3af 8000 	nop.w
    521c:	f3af 8000 	nop.w

00005220 <audioFrameString2>:
{
    5220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5224:	ed2d 8b02 	vpush	{d8}
    5228:	4606      	mov	r6, r0
		uint32_t tempCountFrame = DWT->CYCCNT;
    522a:	4b54      	ldr	r3, [pc, #336]	; (537c <audioFrameString2+0x15c>)
    522c:	685f      	ldr	r7, [r3, #4]
		if (resetStringInputs)
    522e:	4b54      	ldr	r3, [pc, #336]	; (5380 <audioFrameString2+0x160>)
    5230:	781b      	ldrb	r3, [r3, #0]
    5232:	b9bb      	cbnz	r3, 5264 <audioFrameString2+0x44>
			for (int i = 0; i < numStringsThisBoard; i++)
    5234:	f04f 0800 	mov.w	r8, #0
    5238:	e065      	b.n	5306 <audioFrameString2+0xe6>
				tTString_mute(&strings[i]);
    523a:	4852      	ldr	r0, [pc, #328]	; (5384 <audioFrameString2+0x164>)
    523c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5240:	f003 ff7a 	bl	9138 <__tTString_mute_veneer>
				previousStringInputs[i] = 0;
    5244:	4b50      	ldr	r3, [pc, #320]	; (5388 <audioFrameString2+0x168>)
    5246:	2200      	movs	r2, #0
    5248:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			for (int i = 0; i < numStringsThisBoard; i++)
    524c:	3401      	adds	r4, #1
    524e:	4b4f      	ldr	r3, [pc, #316]	; (538c <audioFrameString2+0x16c>)
    5250:	781b      	ldrb	r3, [r3, #0]
    5252:	42a3      	cmp	r3, r4
    5254:	dcf1      	bgt.n	523a <audioFrameString2+0x1a>
			resetStringInputs = 0;
    5256:	4b4a      	ldr	r3, [pc, #296]	; (5380 <audioFrameString2+0x160>)
    5258:	2200      	movs	r2, #0
    525a:	701a      	strb	r2, [r3, #0]
			newPluck = 1;
    525c:	4b4c      	ldr	r3, [pc, #304]	; (5390 <audioFrameString2+0x170>)
    525e:	2201      	movs	r2, #1
    5260:	601a      	str	r2, [r3, #0]
    5262:	e7e7      	b.n	5234 <audioFrameString2+0x14>
			for (int i = 0; i < numStringsThisBoard; i++)
    5264:	2400      	movs	r4, #0
    5266:	e7f2      	b.n	524e <audioFrameString2+0x2e>
			tTString_setPickupPos(&strings[i],knobScaled[3]);
    5268:	4c46      	ldr	r4, [pc, #280]	; (5384 <audioFrameString2+0x164>)
    526a:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    526e:	4d49      	ldr	r5, [pc, #292]	; (5394 <audioFrameString2+0x174>)
    5270:	ed95 0a03 	vldr	s0, [r5, #12]
    5274:	4620      	mov	r0, r4
    5276:	f004 f907 	bl	9488 <__tTString_setPickupPos_veneer>
			tTString_setSlideGain(&strings[i],knobScaled[4]);
    527a:	ed95 0a04 	vldr	s0, [r5, #16]
    527e:	4620      	mov	r0, r4
    5280:	f004 f982 	bl	9588 <__tTString_setSlideGain_veneer>
			tTString_setPickupFilterFreq(&strings[i],knobScaled[8]*6000.0f + 1000.0f);
    5284:	edd5 7a08 	vldr	s15, [r5, #32]
    5288:	ed9f 8a43 	vldr	s16, [pc, #268]	; 5398 <audioFrameString2+0x178>
    528c:	ee67 7a88 	vmul.f32	s15, s15, s16
    5290:	ed9f 0a42 	vldr	s0, [pc, #264]	; 539c <audioFrameString2+0x17c>
    5294:	ee37 0a80 	vadd.f32	s0, s15, s0
    5298:	4620      	mov	r0, r4
    529a:	f003 ff61 	bl	9160 <__tTString_setPickupFilterFreq_veneer>
			tTString_setPickupModFreq(&strings[i],(knobScaled[12]));
    529e:	ed95 0a0c 	vldr	s0, [r5, #48]	; 0x30
    52a2:	4620      	mov	r0, r4
    52a4:	f004 f90c 	bl	94c0 <__tTString_setPickupModFreq_veneer>
			tTString_setPickupModAmp(&strings[i],knobScaled[13]);
    52a8:	ed95 0a0d 	vldr	s0, [r5, #52]	; 0x34
    52ac:	4620      	mov	r0, r4
    52ae:	f004 fa07 	bl	96c0 <__tTString_setPickupModAmp_veneer>
			tTString_setPhantomHarmonicsGain(&strings[i],knobScaled[14]);
    52b2:	ed95 0a0e 	vldr	s0, [r5, #56]	; 0x38
    52b6:	4620      	mov	r0, r4
    52b8:	f004 f996 	bl	95e8 <__tTString_setPhantomHarmonicsGain_veneer>
			tTString_setPickupFilterQ(&strings[i],knobScaled[15]+0.5f);
    52bc:	ed95 0a0f 	vldr	s0, [r5, #60]	; 0x3c
    52c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    52c4:	ee30 0a27 	vadd.f32	s0, s0, s15
    52c8:	4620      	mov	r0, r4
    52ca:	f004 f81d 	bl	9308 <__tTString_setPickupFilterQ_veneer>
			tTString_setPeakFilterFreq(&strings[i],knobScaled[16]*6000.0f + 60.0f);
    52ce:	edd5 7a10 	vldr	s15, [r5, #64]	; 0x40
    52d2:	ee67 7a88 	vmul.f32	s15, s15, s16
    52d6:	ed9f 0a32 	vldr	s0, [pc, #200]	; 53a0 <audioFrameString2+0x180>
    52da:	ee37 0a80 	vadd.f32	s0, s15, s0
    52de:	4620      	mov	r0, r4
    52e0:	f003 ff1e 	bl	9120 <__tTString_setPeakFilterFreq_veneer>
			tTString_setPeakFilterQ(&strings[i],knobScaled[17]);
    52e4:	ed95 0a11 	vldr	s0, [r5, #68]	; 0x44
    52e8:	4620      	mov	r0, r4
    52ea:	f004 f9b1 	bl	9650 <__tTString_setPeakFilterQ_veneer>
			tTString_setTensionGain(&strings[i],knobScaled[18]);
    52ee:	ed95 0a12 	vldr	s0, [r5, #72]	; 0x48
    52f2:	4620      	mov	r0, r4
    52f4:	f004 f984 	bl	9600 <__tTString_setTensionGain_veneer>
			tTString_setPickupAmount(&strings[i],knobScaled[19]);
    52f8:	ed95 0a13 	vldr	s0, [r5, #76]	; 0x4c
    52fc:	4620      	mov	r0, r4
    52fe:	f004 f987 	bl	9610 <__tTString_setPickupAmount_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    5302:	f108 0801 	add.w	r8, r8, #1
    5306:	4b21      	ldr	r3, [pc, #132]	; (538c <audioFrameString2+0x16c>)
    5308:	781b      	ldrb	r3, [r3, #0]
    530a:	4543      	cmp	r3, r8
    530c:	dcac      	bgt.n	5268 <audioFrameString2+0x48>
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    530e:	2500      	movs	r5, #0
    5310:	e011      	b.n	5336 <audioFrameString2+0x116>
			int iplusbuffer = buffer_offset + i;
    5312:	1974      	adds	r4, r6, r5
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    5314:	f7ff fc24 	bl	4b60 <audioTickString2>
    5318:	eddf 7a22 	vldr	s15, [pc, #136]	; 53a4 <audioFrameString2+0x184>
    531c:	ee20 0a27 	vmul.f32	s0, s0, s15
    5320:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    5324:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer] = current_sample;
    5328:	4a1f      	ldr	r2, [pc, #124]	; (53a8 <audioFrameString2+0x188>)
    532a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    532e:	3401      	adds	r4, #1
    5330:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5334:	3502      	adds	r5, #2
    5336:	2d7f      	cmp	r5, #127	; 0x7f
    5338:	ddeb      	ble.n	5312 <audioFrameString2+0xf2>
		if (switchStrings)
    533a:	4b1c      	ldr	r3, [pc, #112]	; (53ac <audioFrameString2+0x18c>)
    533c:	681b      	ldr	r3, [r3, #0]
    533e:	b9bb      	cbnz	r3, 5370 <audioFrameString2+0x150>
		switchStrings = 0;
    5340:	4b1a      	ldr	r3, [pc, #104]	; (53ac <audioFrameString2+0x18c>)
    5342:	2200      	movs	r2, #0
    5344:	601a      	str	r2, [r3, #0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5346:	4b0d      	ldr	r3, [pc, #52]	; (537c <audioFrameString2+0x15c>)
    5348:	685b      	ldr	r3, [r3, #4]
    534a:	1bdb      	subs	r3, r3, r7
    534c:	4a18      	ldr	r2, [pc, #96]	; (53b0 <audioFrameString2+0x190>)
    534e:	6013      	str	r3, [r2, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5350:	ee07 3a90 	vmov	s15, r3
    5354:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5358:	4b16      	ldr	r3, [pc, #88]	; (53b4 <audioFrameString2+0x194>)
    535a:	ed93 7a00 	vldr	s14, [r3]
    535e:	ee67 7a87 	vmul.f32	s15, s15, s14
    5362:	4b15      	ldr	r3, [pc, #84]	; (53b8 <audioFrameString2+0x198>)
    5364:	edc3 7a00 	vstr	s15, [r3]
}
    5368:	ecbd 8b02 	vpop	{d8}
    536c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			switchStringModel(switchStrings);
    5370:	4b0e      	ldr	r3, [pc, #56]	; (53ac <audioFrameString2+0x18c>)
    5372:	6818      	ldr	r0, [r3, #0]
    5374:	f7fc f884 	bl	1480 <switchStringModel>
    5378:	e7e2      	b.n	5340 <audioFrameString2+0x120>
    537a:	bf00      	nop
    537c:	e0001000 	.word	0xe0001000
    5380:	20005968 	.word	0x20005968
    5384:	2001cd54 	.word	0x2001cd54
    5388:	20005550 	.word	0x20005550
    538c:	20000694 	.word	0x20000694
    5390:	200054e0 	.word	0x200054e0
    5394:	200053e0 	.word	0x200053e0
    5398:	45bb8000 	.word	0x45bb8000
    539c:	447a0000 	.word	0x447a0000
    53a0:	42700000 	.word	0x42700000
    53a4:	4b000000 	.word	0x4b000000
    53a8:	30000000 	.word	0x30000000
    53ac:	20014434 	.word	0x20014434
    53b0:	20014438 	.word	0x20014438
    53b4:	20000684 	.word	0x20000684
    53b8:	200053c4 	.word	0x200053c4
    53bc:	00000000 	.word	0x00000000

000053c0 <audioInitString3>:
float finalPuPos[NUM_STRINGS_PER_BOARD];

float string3Defaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};

void __ATTR_ITCMRAM audioInitString3()
{
    53c0:	b510      	push	{r4, lr}

	for (int v = 0; v < numStringsThisBoard; v++)
    53c2:	2400      	movs	r4, #0
    53c4:	e007      	b.n	53d6 <audioInitString3+0x16>
	{
		tStiffString_init(&stringsC[v], 70, &leaf);
    53c6:	4a06      	ldr	r2, [pc, #24]	; (53e0 <audioInitString3+0x20>)
    53c8:	2146      	movs	r1, #70	; 0x46
    53ca:	4806      	ldr	r0, [pc, #24]	; (53e4 <audioInitString3+0x24>)
    53cc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    53d0:	f004 f856 	bl	9480 <__tStiffString_init_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    53d4:	3401      	adds	r4, #1
    53d6:	4b04      	ldr	r3, [pc, #16]	; (53e8 <audioInitString3+0x28>)
    53d8:	781b      	ldrb	r3, [r3, #0]
    53da:	42a3      	cmp	r3, r4
    53dc:	dcf3      	bgt.n	53c6 <audioInitString3+0x6>
	}
}
    53de:	bd10      	pop	{r4, pc}
    53e0:	20005484 	.word	0x20005484
    53e4:	2001cd88 	.word	0x2001cd88
    53e8:	20000694 	.word	0x20000694
    53ec:	f3af 8000 	nop.w
    53f0:	f3af 8000 	nop.w
    53f4:	f3af 8000 	nop.w
    53f8:	f3af 8000 	nop.w
    53fc:	f3af 8000 	nop.w

00005400 <audioFreeString3>:


void __ATTR_ITCMRAM audioFreeString3()
{
    5400:	b510      	push	{r4, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    5402:	2400      	movs	r4, #0
    5404:	e005      	b.n	5412 <audioFreeString3+0x12>
	{
		tStiffString_free(&stringsC[v]);
    5406:	4805      	ldr	r0, [pc, #20]	; (541c <audioFreeString3+0x1c>)
    5408:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    540c:	f004 f850 	bl	94b0 <__tStiffString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    5410:	3401      	adds	r4, #1
    5412:	4b03      	ldr	r3, [pc, #12]	; (5420 <audioFreeString3+0x20>)
    5414:	781b      	ldrb	r3, [r3, #0]
    5416:	42a3      	cmp	r3, r4
    5418:	dcf5      	bgt.n	5406 <audioFreeString3+0x6>
	}
}
    541a:	bd10      	pop	{r4, pc}
    541c:	2001cd88 	.word	0x2001cd88
    5420:	20000694 	.word	0x20000694
    5424:	f3af 8000 	nop.w
    5428:	f3af 8000 	nop.w
    542c:	f3af 8000 	nop.w
    5430:	f3af 8000 	nop.w
    5434:	f3af 8000 	nop.w
    5438:	f3af 8000 	nop.w
    543c:	f3af 8000 	nop.w

00005440 <audioSwitchToString3>:

void __ATTR_ITCMRAM audioSwitchToString3()
{
    5440:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < 12; i++)
    5442:	2400      	movs	r4, #0
    5444:	e00b      	b.n	545e <audioSwitchToString3+0x1e>
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);

		if (voice == 59)
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], string3Defaults[i]);
    5446:	4b12      	ldr	r3, [pc, #72]	; (5490 <audioSwitchToString3+0x50>)
    5448:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    544c:	ed93 0a00 	vldr	s0, [r3]
    5450:	4628      	mov	r0, r5
    5452:	f004 f959 	bl	9708 <__tExpSmooth_setValAndDest_veneer>
		}
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}
		knobFrozen[i] = 1;
    5456:	4b0f      	ldr	r3, [pc, #60]	; (5494 <audioSwitchToString3+0x54>)
    5458:	2201      	movs	r2, #1
    545a:	551a      	strb	r2, [r3, r4]
	for (int i = 0; i < 12; i++)
    545c:	4414      	add	r4, r2
    545e:	2c0b      	cmp	r4, #11
    5460:	dc14      	bgt.n	548c <audioSwitchToString3+0x4c>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.001f);
    5462:	4d0d      	ldr	r5, [pc, #52]	; (5498 <audioSwitchToString3+0x58>)
    5464:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    5468:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 549c <audioSwitchToString3+0x5c>
    546c:	4628      	mov	r0, r5
    546e:	f004 f887 	bl	9580 <__tExpSmooth_setFactor_veneer>
		if (voice == 59)
    5472:	4b0b      	ldr	r3, [pc, #44]	; (54a0 <audioSwitchToString3+0x60>)
    5474:	681b      	ldr	r3, [r3, #0]
    5476:	2b3b      	cmp	r3, #59	; 0x3b
    5478:	d0e5      	beq.n	5446 <audioSwitchToString3+0x6>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    547a:	4b0a      	ldr	r3, [pc, #40]	; (54a4 <audioSwitchToString3+0x64>)
    547c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5480:	ed93 0a00 	vldr	s0, [r3]
    5484:	4628      	mov	r0, r5
    5486:	f004 f93f 	bl	9708 <__tExpSmooth_setValAndDest_veneer>
    548a:	e7e4      	b.n	5456 <audioSwitchToString3+0x16>
	}
}
    548c:	bd38      	pop	{r3, r4, r5, pc}
    548e:	bf00      	nop
    5490:	20000a9c 	.word	0x20000a9c
    5494:	200053cc 	.word	0x200053cc
    5498:	20005430 	.word	0x20005430
    549c:	3a83126f 	.word	0x3a83126f
    54a0:	20014440 	.word	0x20014440
    54a4:	200186f0 	.word	0x200186f0
    54a8:	f3af 8000 	nop.w
    54ac:	f3af 8000 	nop.w
    54b0:	f3af 8000 	nop.w
    54b4:	f3af 8000 	nop.w
    54b8:	f3af 8000 	nop.w
    54bc:	f3af 8000 	nop.w

000054c0 <audioTickString3>:
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickString3(void)
{
    54c0:	b570      	push	{r4, r5, r6, lr}
    54c2:	ed2d 8b02 	vpush	{d8}
    54c6:	b082      	sub	sp, #8
	float temp = 0.0f;


	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    54c8:	487c      	ldr	r0, [pc, #496]	; (56bc <audioTickString3+0x1fc>)
    54ca:	f004 f8c9 	bl	9660 <__tExpSmooth_tick_veneer>
    54ce:	eef0 8a40 	vmov.f32	s17, s0

	for (int i = 0; i < 12; i++)
    54d2:	2400      	movs	r4, #0
    54d4:	e00a      	b.n	54ec <audioTickString3+0x2c>
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    54d6:	00a5      	lsls	r5, r4, #2
    54d8:	4879      	ldr	r0, [pc, #484]	; (56c0 <audioTickString3+0x200>)
    54da:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    54de:	f004 f8bf 	bl	9660 <__tExpSmooth_tick_veneer>
    54e2:	4b78      	ldr	r3, [pc, #480]	; (56c4 <audioTickString3+0x204>)
    54e4:	442b      	add	r3, r5
    54e6:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 12; i++)
    54ea:	3401      	adds	r4, #1
    54ec:	2c0b      	cmp	r4, #11
    54ee:	ddf2      	ble.n	54d6 <audioTickString3+0x16>
	  specialModeMacroNames[1][16] = "PeakF Q   ";
	  specialModeMacroNames[1][17] = "PeakF Frq ";
	  specialModeMacroNames[1][18] = "Tension G ";
	  specialModeMacroNames[1][19] = "Tension S ";
	  */
	if (newPluck)
    54f0:	4b75      	ldr	r3, [pc, #468]	; (56c8 <audioTickString3+0x208>)
    54f2:	681b      	ldr	r3, [r3, #0]
    54f4:	2b00      	cmp	r3, #0
    54f6:	f040 808f 	bne.w	5618 <audioTickString3+0x158>
	{
		float theNote[NUM_STRINGS_PER_BOARD];
		for (int i = 0; i < numStringsThisBoard; i++)
    54fa:	2400      	movs	r4, #0
    54fc:	ed9f 8a73 	vldr	s16, [pc, #460]	; 56cc <audioTickString3+0x20c>
    5500:	e098      	b.n	5634 <audioTickString3+0x174>
				stringOctave[i] = octave;

				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
				if (theNote[i] < 0.0f)
				{
					theNote[i] = 0.0f;
    5502:	2200      	movs	r2, #0
    5504:	ab02      	add	r3, sp, #8
    5506:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    550a:	f843 2c08 	str.w	r2, [r3, #-8]
    550e:	e04f      	b.n	55b0 <audioTickString3+0xf0>
				{
					theNote[i] = 127.0f;
				}
				if (isnan(theNote[i]))
				{
					theNote[i] = 64.0f;
    5510:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    5514:	ab02      	add	r3, sp, #8
    5516:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    551a:	f843 2c08 	str.w	r2, [r3, #-8]
    551e:	e062      	b.n	55e6 <audioTickString3+0x126>
				float finalFreq = mtofTableLookup(theNote[i]);
				tStiffString_setFreq(&stringsC[i], finalFreq);
				tStiffString_pluck(&stringsC[i], str3Amp);

			}
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    5520:	4b6b      	ldr	r3, [pc, #428]	; (56d0 <audioTickString3+0x210>)
    5522:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    5526:	b29b      	uxth	r3, r3
    5528:	b12b      	cbz	r3, 5536 <audioTickString3+0x76>
    552a:	4b6a      	ldr	r3, [pc, #424]	; (56d4 <audioTickString3+0x214>)
    552c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    5530:	b29b      	uxth	r3, r3
    5532:	2b00      	cmp	r3, #0
    5534:	d06a      	beq.n	560c <audioTickString3+0x14c>
			{
				//note off
				tStiffString_mute(&stringsC[i]);
				//tTString_mute(&strings[i]);
			}
			previousStringInputs[i] = stringInputs[i];
    5536:	4b67      	ldr	r3, [pc, #412]	; (56d4 <audioTickString3+0x214>)
    5538:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    553c:	b29b      	uxth	r3, r3
    553e:	4a64      	ldr	r2, [pc, #400]	; (56d0 <audioTickString3+0x210>)
    5540:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    5544:	3401      	adds	r4, #1
    5546:	4b64      	ldr	r3, [pc, #400]	; (56d8 <audioTickString3+0x218>)
    5548:	781b      	ldrb	r3, [r3, #0]
    554a:	42a3      	cmp	r3, r4
    554c:	dd66      	ble.n	561c <audioTickString3+0x15c>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    554e:	4b60      	ldr	r3, [pc, #384]	; (56d0 <audioTickString3+0x210>)
    5550:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    5554:	b29b      	uxth	r3, r3
    5556:	2b00      	cmp	r3, #0
    5558:	d1e2      	bne.n	5520 <audioTickString3+0x60>
    555a:	4b5e      	ldr	r3, [pc, #376]	; (56d4 <audioTickString3+0x214>)
    555c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    5560:	b29b      	uxth	r3, r3
    5562:	2b00      	cmp	r3, #0
    5564:	d0dc      	beq.n	5520 <audioTickString3+0x60>
				Lfloat str3Amp = stringInputs[i] * 0.000015259021897f;
    5566:	4b5b      	ldr	r3, [pc, #364]	; (56d4 <audioTickString3+0x214>)
    5568:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    556c:	b29b      	uxth	r3, r3
    556e:	ee08 3a10 	vmov	s16, r3
    5572:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    5576:	eddf 7a59 	vldr	s15, [pc, #356]	; 56dc <audioTickString3+0x21c>
    557a:	ee28 8a27 	vmul.f32	s16, s16, s15
				stringOctave[i] = octave;
    557e:	4b58      	ldr	r3, [pc, #352]	; (56e0 <audioTickString3+0x220>)
    5580:	edd3 7a00 	vldr	s15, [r3]
    5584:	4b57      	ldr	r3, [pc, #348]	; (56e4 <audioTickString3+0x224>)
    5586:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    558a:	edc3 7a00 	vstr	s15, [r3]
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    558e:	4b56      	ldr	r3, [pc, #344]	; (56e8 <audioTickString3+0x228>)
    5590:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5594:	ed93 7a00 	vldr	s14, [r3]
    5598:	ee77 7a87 	vadd.f32	s15, s15, s14
    559c:	ab02      	add	r3, sp, #8
    559e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    55a2:	ed43 7a02 	vstr	s15, [r3, #-8]
				if (theNote[i] < 0.0f)
    55a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    55aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    55ae:	d4a8      	bmi.n	5502 <audioTickString3+0x42>
				if (theNote[i] > 127.0f)
    55b0:	ab02      	add	r3, sp, #8
    55b2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    55b6:	ed13 7a02 	vldr	s14, [r3, #-8]
    55ba:	eddf 7a4c 	vldr	s15, [pc, #304]	; 56ec <audioTickString3+0x22c>
    55be:	eeb4 7ae7 	vcmpe.f32	s14, s15
    55c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    55c6:	dd04      	ble.n	55d2 <audioTickString3+0x112>
					theNote[i] = 127.0f;
    55c8:	ab02      	add	r3, sp, #8
    55ca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    55ce:	ed43 7a02 	vstr	s15, [r3, #-8]
				if (isnan(theNote[i]))
    55d2:	ab02      	add	r3, sp, #8
    55d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    55d8:	ed53 7a02 	vldr	s15, [r3, #-8]
    55dc:	eef4 7a67 	vcmp.f32	s15, s15
    55e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    55e4:	d694      	bvs.n	5510 <audioTickString3+0x50>
				float finalFreq = mtofTableLookup(theNote[i]);
    55e6:	00a6      	lsls	r6, r4, #2
    55e8:	ab02      	add	r3, sp, #8
    55ea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    55ee:	ed13 0a02 	vldr	s0, [r3, #-8]
    55f2:	f003 febd 	bl	9370 <__mtofTableLookup_veneer>
				tStiffString_setFreq(&stringsC[i], finalFreq);
    55f6:	4d3e      	ldr	r5, [pc, #248]	; (56f0 <audioTickString3+0x230>)
    55f8:	4435      	add	r5, r6
    55fa:	4628      	mov	r0, r5
    55fc:	f003 ffdc 	bl	95b8 <__tStiffString_setFreq_veneer>
				tStiffString_pluck(&stringsC[i], str3Amp);
    5600:	eeb0 0a48 	vmov.f32	s0, s16
    5604:	4628      	mov	r0, r5
    5606:	f003 fddf 	bl	91c8 <__tStiffString_pluck_veneer>
			{
    560a:	e794      	b.n	5536 <audioTickString3+0x76>
				tStiffString_mute(&stringsC[i]);
    560c:	4838      	ldr	r0, [pc, #224]	; (56f0 <audioTickString3+0x230>)
    560e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5612:	f003 fe41 	bl	9298 <__tStiffString_mute_veneer>
    5616:	e78e      	b.n	5536 <audioTickString3+0x76>
		for (int i = 0; i < numStringsThisBoard; i++)
    5618:	2400      	movs	r4, #0
    561a:	e794      	b.n	5546 <audioTickString3+0x86>
		}
		newPluck = 0;
    561c:	4b2a      	ldr	r3, [pc, #168]	; (56c8 <audioTickString3+0x208>)
    561e:	2200      	movs	r2, #0
    5620:	601a      	str	r2, [r3, #0]
    5622:	e76a      	b.n	54fa <audioTickString3+0x3a>
	}
	for (int i = 0; i < numStringsThisBoard; i++)
	{

		temp += tStiffString_tick(&stringsC[i]);
    5624:	4832      	ldr	r0, [pc, #200]	; (56f0 <audioTickString3+0x230>)
    5626:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    562a:	f003 fdf5 	bl	9218 <__tStiffString_tick_veneer>
    562e:	ee38 8a00 	vadd.f32	s16, s16, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    5632:	3401      	adds	r4, #1
    5634:	4b28      	ldr	r3, [pc, #160]	; (56d8 <audioTickString3+0x218>)
    5636:	781b      	ldrb	r3, [r3, #0]
    5638:	42a3      	cmp	r3, r4
    563a:	dcf3      	bgt.n	5624 <audioTickString3+0x164>
	}
	//float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    563c:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 56ec <audioTickString3+0x22c>
    5640:	eddf 0a2c 	vldr	s1, [pc, #176]	; 56f4 <audioTickString3+0x234>
    5644:	ee68 0aa0 	vmul.f32	s1, s17, s1
    5648:	ed9f 0a20 	vldr	s0, [pc, #128]	; 56cc <audioTickString3+0x20c>
    564c:	f003 fd84 	bl	9158 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
    5650:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    5654:	ee17 3a90 	vmov	r3, s15
	float alpha = volIdx-volIdxInt;
    5658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    565c:	ee70 7a67 	vsub.f32	s15, s0, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    5660:	1c59      	adds	r1, r3, #1
    5662:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
    5666:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    566a:	ee78 6ae7 	vsub.f32	s13, s17, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    566e:	4a22      	ldr	r2, [pc, #136]	; (56f8 <audioTickString3+0x238>)
    5670:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    5674:	ed93 7a00 	vldr	s14, [r3]
    5678:	ee27 7a26 	vmul.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    567c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5680:	ed92 0a00 	vldr	s0, [r2]
    5684:	ee20 0a27 	vmul.f32	s0, s0, s15
    5688:	ee30 0a07 	vadd.f32	s0, s0, s14

	//temp *= outVol;
	temp *= outVol * masterVolFromBrain;
    568c:	4b1b      	ldr	r3, [pc, #108]	; (56fc <audioTickString3+0x23c>)
    568e:	edd3 7a00 	vldr	s15, [r3]
    5692:	ee20 0a27 	vmul.f32	s0, s0, s15
	temp = tanhf(temp);
    5696:	ee20 0a08 	vmul.f32	s0, s0, s16
    569a:	f003 ffe9 	bl	9670 <__tanhf_veneer>
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    569e:	eeb0 1a68 	vmov.f32	s2, s17
    56a2:	eddf 0a17 	vldr	s1, [pc, #92]	; 5700 <audioTickString3+0x240>
    56a6:	ee60 0a20 	vmul.f32	s1, s0, s1
    56aa:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    56ae:	f003 fd53 	bl	9158 <__LEAF_clip_veneer>
}
    56b2:	b002      	add	sp, #8
    56b4:	ecbd 8b02 	vpop	{d8}
    56b8:	bd70      	pop	{r4, r5, r6, pc}
    56ba:	bf00      	nop
    56bc:	2001444c 	.word	0x2001444c
    56c0:	20005430 	.word	0x20005430
    56c4:	200053e0 	.word	0x200053e0
    56c8:	200054e0 	.word	0x200054e0
    56cc:	00000000 	.word	0x00000000
    56d0:	20005550 	.word	0x20005550
    56d4:	200143fc 	.word	0x200143fc
    56d8:	20000694 	.word	0x20000694
    56dc:	37800080 	.word	0x37800080
    56e0:	200054ec 	.word	0x200054ec
    56e4:	2001441c 	.word	0x2001441c
    56e8:	20014414 	.word	0x20014414
    56ec:	42fe0000 	.word	0x42fe0000
    56f0:	2001cd88 	.word	0x2001cd88
    56f4:	42a00000 	.word	0x42a00000
    56f8:	200006a0 	.word	0x200006a0
    56fc:	2000068c 	.word	0x2000068c
    5700:	3f7ae148 	.word	0x3f7ae148
    5704:	f3af 8000 	nop.w
    5708:	f3af 8000 	nop.w
    570c:	f3af 8000 	nop.w
    5710:	f3af 8000 	nop.w
    5714:	f3af 8000 	nop.w
    5718:	f3af 8000 	nop.w
    571c:	f3af 8000 	nop.w

00005720 <audioFrameString3>:
{
    5720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5724:	ed2d 8b02 	vpush	{d8}
    5728:	b086      	sub	sp, #24
    572a:	4606      	mov	r6, r0
		uint32_t tempCountFrame = DWT->CYCCNT;
    572c:	4bcc      	ldr	r3, [pc, #816]	; (5a60 <audioFrameString3+0x340>)
    572e:	685f      	ldr	r7, [r3, #4]
		if (resetStringInputs)
    5730:	4bcc      	ldr	r3, [pc, #816]	; (5a64 <audioFrameString3+0x344>)
    5732:	781b      	ldrb	r3, [r3, #0]
    5734:	b98b      	cbnz	r3, 575a <audioFrameString3+0x3a>
				mainDecay = 0.0f;
    5736:	2400      	movs	r4, #0
    5738:	e079      	b.n	582e <audioFrameString3+0x10e>
				previousStringInputs[i] = 0;
    573a:	4acb      	ldr	r2, [pc, #812]	; (5a68 <audioFrameString3+0x348>)
    573c:	2100      	movs	r1, #0
    573e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for (int i = 0; i < numStringsThisBoard; i++)
    5742:	3301      	adds	r3, #1
    5744:	4ac9      	ldr	r2, [pc, #804]	; (5a6c <audioFrameString3+0x34c>)
    5746:	7812      	ldrb	r2, [r2, #0]
    5748:	429a      	cmp	r2, r3
    574a:	dcf6      	bgt.n	573a <audioFrameString3+0x1a>
			resetStringInputs = 0;
    574c:	4bc5      	ldr	r3, [pc, #788]	; (5a64 <audioFrameString3+0x344>)
    574e:	2200      	movs	r2, #0
    5750:	701a      	strb	r2, [r3, #0]
			newPluck = 1;
    5752:	4bc7      	ldr	r3, [pc, #796]	; (5a70 <audioFrameString3+0x350>)
    5754:	2201      	movs	r2, #1
    5756:	601a      	str	r2, [r3, #0]
    5758:	e7ed      	b.n	5736 <audioFrameString3+0x16>
			for (int i = 0; i < numStringsThisBoard; i++)
    575a:	2300      	movs	r3, #0
    575c:	e7f2      	b.n	5744 <audioFrameString3+0x24>
				theNote[i] = 0.0f;
    575e:	2200      	movs	r2, #0
    5760:	ab06      	add	r3, sp, #24
    5762:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5766:	f843 2c08 	str.w	r2, [r3, #-8]
    576a:	e07c      	b.n	5866 <audioFrameString3+0x146>
				theNote[i] = 64.0f;
    576c:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    5770:	ab06      	add	r3, sp, #24
    5772:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5776:	f843 2c08 	str.w	r2, [r3, #-8]
    577a:	e090      	b.n	589e <audioFrameString3+0x17e>
					tStiffString_setStiffnessNoUpdate(&stringsC[i],squishedStiffness );
    577c:	eeb0 0a68 	vmov.f32	s0, s17
    5780:	4628      	mov	r0, r5
    5782:	f003 fda5 	bl	92d0 <__tStiffString_setStiffnessNoUpdate_veneer>
					prevSquishedStiffness[i] = squishedStiffness;
    5786:	4bbb      	ldr	r3, [pc, #748]	; (5a74 <audioFrameString3+0x354>)
    5788:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    578c:	edc3 8a00 	vstr	s17, [r3]
    5790:	e0d3      	b.n	593a <audioFrameString3+0x21a>
					float pickupKnobVal2 = pickupKnobVal;
    5792:	eeb0 7a67 	vmov.f32	s14, s15
    5796:	e120      	b.n	59da <audioFrameString3+0x2ba>
			float pluckKnobVal2 = pluckKnobVal;
    5798:	eef0 6a60 	vmov.f32	s13, s1
			float pluckpos = (pluckKnobVal * knobScaled[2]) + (pluckKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[2]);
    579c:	f8df 8304 	ldr.w	r8, [pc, #772]	; 5aa4 <audioFrameString3+0x384>
    57a0:	ed98 7a02 	vldr	s14, [r8, #8]
    57a4:	ee67 0a20 	vmul.f32	s1, s14, s1
    57a8:	eddd 7a00 	vldr	s15, [sp]
    57ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
    57b0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    57b4:	ee38 7a47 	vsub.f32	s14, s16, s14
    57b8:	ee67 7a87 	vmul.f32	s15, s15, s14
			tStiffString_setPluckPosNoUpdate(&stringsC[i], LEAF_clip(0.1f,pluckpos, 0.9f));
    57bc:	ed9f 1aae 	vldr	s2, [pc, #696]	; 5a78 <audioFrameString3+0x358>
    57c0:	ee70 0aa7 	vadd.f32	s1, s1, s15
    57c4:	ed9f 0aad 	vldr	s0, [pc, #692]	; 5a7c <audioFrameString3+0x35c>
    57c8:	f003 fcc6 	bl	9158 <__LEAF_clip_veneer>
    57cc:	4628      	mov	r0, r5
    57ce:	f003 fdab 	bl	9328 <__tStiffString_setPluckPosNoUpdate_veneer>
			float dampKnob = (1.0f - knobScaled[9]);
    57d2:	edd8 8a09 	vldr	s17, [r8, #36]	; 0x24
    57d6:	ee78 8a68 	vsub.f32	s17, s16, s17
			float mainDecay = (1.0f - knobScaled[8]);
    57da:	edd8 7a08 	vldr	s15, [r8, #32]
    57de:	ee78 7a67 	vsub.f32	s15, s16, s15
			if (mainDecay < 0.01f)
    57e2:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 5a80 <audioFrameString3+0x360>
    57e6:	eef4 7ac7 	vcmpe.f32	s15, s14
    57ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    57ee:	d501      	bpl.n	57f4 <audioFrameString3+0xd4>
				mainDecay = 0.0f;
    57f0:	eddf 7aa4 	vldr	s15, [pc, #656]	; 5a84 <audioFrameString3+0x364>
			tStiffString_setDecayNoUpdate(&stringsC[i], mainDecay * mainDecay * mainDecay * 0.001f);
    57f4:	ee27 0aa7 	vmul.f32	s0, s15, s15
    57f8:	ee60 7a27 	vmul.f32	s15, s0, s15
    57fc:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 5a88 <audioFrameString3+0x368>
    5800:	ee27 0a80 	vmul.f32	s0, s15, s0
    5804:	4628      	mov	r0, r5
    5806:	f003 fd2b 	bl	9260 <__tStiffString_setDecayNoUpdate_veneer>
			tStiffString_setDecayHighFreqNoUpdate(&stringsC[i], (dampKnob*dampKnob*dampKnob)  * 0.00025f);
    580a:	ee68 7aa8 	vmul.f32	s15, s17, s17
    580e:	ee67 7aa8 	vmul.f32	s15, s15, s17
    5812:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 5a8c <audioFrameString3+0x36c>
    5816:	ee27 0a80 	vmul.f32	s0, s15, s0
    581a:	4628      	mov	r0, r5
    581c:	f003 fcb4 	bl	9188 <__tStiffString_setDecayHighFreqNoUpdate_veneer>
			tStiffString_updateOscillators(&stringsC[i]);
    5820:	4628      	mov	r0, r5
    5822:	f003 fed5 	bl	95d0 <__tStiffString_updateOscillators_veneer>
			tStiffString_updateOutputWeights(&stringsC[i]);
    5826:	4628      	mov	r0, r5
    5828:	f003 fcba 	bl	91a0 <__tStiffString_updateOutputWeights_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    582c:	3401      	adds	r4, #1
    582e:	4b8f      	ldr	r3, [pc, #572]	; (5a6c <audioFrameString3+0x34c>)
    5830:	781b      	ldrb	r3, [r3, #0]
    5832:	42a3      	cmp	r3, r4
    5834:	f340 8111 	ble.w	5a5a <audioFrameString3+0x33a>
			theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    5838:	4b95      	ldr	r3, [pc, #596]	; (5a90 <audioFrameString3+0x370>)
    583a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    583e:	edd3 7a00 	vldr	s15, [r3]
    5842:	4b94      	ldr	r3, [pc, #592]	; (5a94 <audioFrameString3+0x374>)
    5844:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5848:	ed93 7a00 	vldr	s14, [r3]
    584c:	ee77 7a87 	vadd.f32	s15, s15, s14
    5850:	ab06      	add	r3, sp, #24
    5852:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5856:	ed43 7a02 	vstr	s15, [r3, #-8]
			if (theNote[i] < 0.0f)
    585a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    585e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5862:	f53f af7c 	bmi.w	575e <audioFrameString3+0x3e>
			if (theNote[i] > 127.0f)
    5866:	ab06      	add	r3, sp, #24
    5868:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    586c:	ed13 7a02 	vldr	s14, [r3, #-8]
    5870:	eddf 7a89 	vldr	s15, [pc, #548]	; 5a98 <audioFrameString3+0x378>
    5874:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    587c:	dd04      	ble.n	5888 <audioFrameString3+0x168>
				theNote[i] = 127.0f;
    587e:	ab06      	add	r3, sp, #24
    5880:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5884:	ed43 7a02 	vstr	s15, [r3, #-8]
			if (isnan(theNote[i]))
    5888:	ab06      	add	r3, sp, #24
    588a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    588e:	ed53 7a02 	vldr	s15, [r3, #-8]
    5892:	eef4 7a67 	vcmp.f32	s15, s15
    5896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    589a:	f5bf af67 	bvs.w	576c <audioFrameString3+0x4c>
			float finalFreq = mtofTableLookup(theNote[i]);
    589e:	ea4f 0884 	mov.w	r8, r4, lsl #2
    58a2:	ab06      	add	r3, sp, #24
    58a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    58a8:	ed53 8a02 	vldr	s17, [r3, #-8]
    58ac:	eeb0 0a68 	vmov.f32	s0, s17
    58b0:	f003 fd5e 	bl	9370 <__mtofTableLookup_veneer>
    58b4:	eeb0 8a40 	vmov.f32	s16, s0
			tStiffString_setFreqNoUpdate(&stringsC[i], finalFreq);
    58b8:	4d78      	ldr	r5, [pc, #480]	; (5a9c <audioFrameString3+0x37c>)
    58ba:	4445      	add	r5, r8
    58bc:	4628      	mov	r0, r5
    58be:	f003 fcdf 	bl	9280 <__tStiffString_setFreqNoUpdate_veneer>
			float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    58c2:	4b77      	ldr	r3, [pc, #476]	; (5aa0 <audioFrameString3+0x380>)
    58c4:	4443      	add	r3, r8
    58c6:	ed93 0a00 	vldr	s0, [r3]
    58ca:	ee38 0ac0 	vsub.f32	s0, s17, s0
    58ce:	f003 fd4f 	bl	9370 <__mtofTableLookup_veneer>
			volatile float ratioOfOpenStringToNote=(finalFreq/ openStringFreq);
    58d2:	eec8 7a00 	vdiv.f32	s15, s16, s0
    58d6:	edcd 7a00 	vstr	s15, [sp]
			volatile float ratioOfNoteToOpenString = openStringFreq/ finalFreq;
    58da:	eec0 7a08 	vdiv.f32	s15, s0, s16
    58de:	edcd 7a01 	vstr	s15, [sp, #4]
			float newStiffness = (knobScaled[0] * 100.0f);
    58e2:	4b70      	ldr	r3, [pc, #448]	; (5aa4 <audioFrameString3+0x384>)
    58e4:	ed93 8a00 	vldr	s16, [r3]
    58e8:	eddf 7a6f 	vldr	s15, [pc, #444]	; 5aa8 <audioFrameString3+0x388>
    58ec:	ee28 8a27 	vmul.f32	s16, s16, s15
			if ((newStiffness > (prevStiffness[i] + 1.0f))|| (newStiffness < (prevStiffness[i] - 1.0f)))
    58f0:	4b6e      	ldr	r3, [pc, #440]	; (5aac <audioFrameString3+0x38c>)
    58f2:	4443      	add	r3, r8
    58f4:	ed93 7a00 	vldr	s14, [r3]
    58f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    58fc:	ee77 7a27 	vadd.f32	s15, s14, s15
    5900:	eef4 7ac8 	vcmpe.f32	s15, s16
    5904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5908:	d408      	bmi.n	591c <audioFrameString3+0x1fc>
    590a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    590e:	ee37 7a67 	vsub.f32	s14, s14, s15
    5912:	eeb4 7ac8 	vcmpe.f32	s14, s16
    5916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    591a:	dd13      	ble.n	5944 <audioFrameString3+0x224>
				float squishedStiffness = (newStiffness*0.01f) ;
    591c:	eddf 8a58 	vldr	s17, [pc, #352]	; 5a80 <audioFrameString3+0x360>
    5920:	ee68 8a28 	vmul.f32	s17, s16, s17
				if ( squishedStiffness != prevSquishedStiffness[i])
    5924:	4b53      	ldr	r3, [pc, #332]	; (5a74 <audioFrameString3+0x354>)
    5926:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    592a:	edd3 7a00 	vldr	s15, [r3]
    592e:	eef4 7a68 	vcmp.f32	s15, s17
    5932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5936:	f47f af21 	bne.w	577c <audioFrameString3+0x5c>
				prevStiffness[i] = newStiffness;
    593a:	4b5c      	ldr	r3, [pc, #368]	; (5aac <audioFrameString3+0x38c>)
    593c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5940:	ed83 8a00 	vstr	s16, [r3]
			float newpuPos = (knobScaled[10] * 200.0f);
    5944:	4b57      	ldr	r3, [pc, #348]	; (5aa4 <audioFrameString3+0x384>)
    5946:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
    594a:	eddf 7a59 	vldr	s15, [pc, #356]	; 5ab0 <audioFrameString3+0x390>
    594e:	ee28 8a27 	vmul.f32	s16, s16, s15
			if ((newpuPos > (prevPuPos[i] + 1.0f))|| (newpuPos < (prevPuPos[i] - 1.0f)))
    5952:	4b58      	ldr	r3, [pc, #352]	; (5ab4 <audioFrameString3+0x394>)
    5954:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5958:	ed93 7a00 	vldr	s14, [r3]
    595c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5960:	ee77 7a27 	vadd.f32	s15, s14, s15
    5964:	eef4 7ac8 	vcmpe.f32	s15, s16
    5968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    596c:	d408      	bmi.n	5980 <audioFrameString3+0x260>
    596e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5972:	ee37 7a67 	vsub.f32	s14, s14, s15
    5976:	eeb4 7ac8 	vcmpe.f32	s14, s16
    597a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    597e:	dd4a      	ble.n	5a16 <audioFrameString3+0x2f6>
				float squishedPuPos = (newpuPos*0.005f) ;
    5980:	eddf 8a4d 	vldr	s17, [pc, #308]	; 5ab8 <audioFrameString3+0x398>
    5984:	ee68 8a28 	vmul.f32	s17, s16, s17
				if ( squishedPuPos != prevSquishedPuPos[i])
    5988:	4b4c      	ldr	r3, [pc, #304]	; (5abc <audioFrameString3+0x39c>)
    598a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    598e:	edd3 7a00 	vldr	s15, [r3]
    5992:	eef4 7a68 	vcmp.f32	s15, s17
    5996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    599a:	d037      	beq.n	5a0c <audioFrameString3+0x2ec>
					finalPuPos[i] = squishedPuPos;
    599c:	4b48      	ldr	r3, [pc, #288]	; (5ac0 <audioFrameString3+0x3a0>)
    599e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    59a2:	edc3 8a00 	vstr	s17, [r3]
					float pickupKnobVal = (0.5f - finalPuPos[i] * 0.5f);
    59a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    59aa:	ee28 7aa7 	vmul.f32	s14, s17, s15
    59ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
					if (ratioOfNoteToOpenString < pickupKnobVal)
    59b2:	ed9d 7a01 	vldr	s14, [sp, #4]
    59b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    59ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59be:	f57f aee8 	bpl.w	5792 <audioFrameString3+0x72>
						volatile float difference = pickupKnobVal - ratioOfNoteToOpenString;
    59c2:	ed9d 7a01 	vldr	s14, [sp, #4]
    59c6:	ee37 7ac7 	vsub.f32	s14, s15, s14
    59ca:	ed8d 7a02 	vstr	s14, [sp, #8]
						pickupKnobVal2 = ratioOfNoteToOpenString-difference;
    59ce:	ed9d 7a01 	vldr	s14, [sp, #4]
    59d2:	eddd 6a02 	vldr	s13, [sp, #8]
    59d6:	ee37 7a66 	vsub.f32	s14, s14, s13
					float pickuppos = (pickupKnobVal * knobScaled[1]) + (pickupKnobVal2 * ratioOfOpenStringToNote) * (1.0f - knobScaled[1]);
    59da:	4b32      	ldr	r3, [pc, #200]	; (5aa4 <audioFrameString3+0x384>)
    59dc:	edd3 6a01 	vldr	s13, [r3, #4]
    59e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    59e4:	ed9d 0a00 	vldr	s0, [sp]
    59e8:	ee20 0a07 	vmul.f32	s0, s0, s14
    59ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    59f0:	ee37 7a66 	vsub.f32	s14, s14, s13
    59f4:	ee20 0a07 	vmul.f32	s0, s0, s14
					tStiffString_setPickupPosNoUpdate(&stringsC[i], (pickuppos));
    59f8:	ee37 0a80 	vadd.f32	s0, s15, s0
    59fc:	4628      	mov	r0, r5
    59fe:	f003 fd5b 	bl	94b8 <__tStiffString_setPickupPosNoUpdate_veneer>
					prevSquishedPuPos[i] = squishedPuPos;
    5a02:	4b2e      	ldr	r3, [pc, #184]	; (5abc <audioFrameString3+0x39c>)
    5a04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5a08:	edc3 8a00 	vstr	s17, [r3]
				prevPuPos[i] = newpuPos;
    5a0c:	4b29      	ldr	r3, [pc, #164]	; (5ab4 <audioFrameString3+0x394>)
    5a0e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    5a12:	ed83 8a00 	vstr	s16, [r3]
			float pluckKnobVal = (0.4f - knobScaled[11] * 0.4f) + 0.1f;
    5a16:	4b23      	ldr	r3, [pc, #140]	; (5aa4 <audioFrameString3+0x384>)
    5a18:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
    5a1c:	eddf 0a29 	vldr	s1, [pc, #164]	; 5ac4 <audioFrameString3+0x3a4>
    5a20:	ee67 7aa0 	vmul.f32	s15, s15, s1
    5a24:	ee70 0ae7 	vsub.f32	s1, s1, s15
    5a28:	eddf 7a14 	vldr	s15, [pc, #80]	; 5a7c <audioFrameString3+0x35c>
    5a2c:	ee70 0aa7 	vadd.f32	s1, s1, s15
			if (ratioOfNoteToOpenString < pluckKnobVal)
    5a30:	eddd 7a01 	vldr	s15, [sp, #4]
    5a34:	eef4 7ae0 	vcmpe.f32	s15, s1
    5a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a3c:	f57f aeac 	bpl.w	5798 <audioFrameString3+0x78>
				volatile float difference = pluckKnobVal - ratioOfNoteToOpenString;
    5a40:	eddd 7a01 	vldr	s15, [sp, #4]
    5a44:	ee70 7ae7 	vsub.f32	s15, s1, s15
    5a48:	edcd 7a03 	vstr	s15, [sp, #12]
				pluckKnobVal2 = ratioOfNoteToOpenString-difference;
    5a4c:	eddd 6a01 	vldr	s13, [sp, #4]
    5a50:	eddd 7a03 	vldr	s15, [sp, #12]
    5a54:	ee76 6ae7 	vsub.f32	s13, s13, s15
    5a58:	e6a0      	b.n	579c <audioFrameString3+0x7c>
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5a5a:	2500      	movs	r5, #0
    5a5c:	e048      	b.n	5af0 <audioFrameString3+0x3d0>
    5a5e:	bf00      	nop
    5a60:	e0001000 	.word	0xe0001000
    5a64:	20005968 	.word	0x20005968
    5a68:	20005550 	.word	0x20005550
    5a6c:	20000694 	.word	0x20000694
    5a70:	200054e0 	.word	0x200054e0
    5a74:	2001cd78 	.word	0x2001cd78
    5a78:	3f666666 	.word	0x3f666666
    5a7c:	3dcccccd 	.word	0x3dcccccd
    5a80:	3c23d70a 	.word	0x3c23d70a
    5a84:	00000000 	.word	0x00000000
    5a88:	3a83126f 	.word	0x3a83126f
    5a8c:	3983126f 	.word	0x3983126f
    5a90:	20014414 	.word	0x20014414
    5a94:	2001441c 	.word	0x2001441c
    5a98:	42fe0000 	.word	0x42fe0000
    5a9c:	2001cd88 	.word	0x2001cd88
    5aa0:	20001384 	.word	0x20001384
    5aa4:	200053e0 	.word	0x200053e0
    5aa8:	42c80000 	.word	0x42c80000
    5aac:	2001cd80 	.word	0x2001cd80
    5ab0:	43480000 	.word	0x43480000
    5ab4:	2001cd68 	.word	0x2001cd68
    5ab8:	3ba3d70a 	.word	0x3ba3d70a
    5abc:	2001cd70 	.word	0x2001cd70
    5ac0:	2001cd60 	.word	0x2001cd60
    5ac4:	3ecccccd 	.word	0x3ecccccd
    5ac8:	4b000000 	.word	0x4b000000
			int iplusbuffer = buffer_offset + i;
    5acc:	1974      	adds	r4, r6, r5
			current_sample = (int32_t)(audioTickString3() * TWO_TO_23);
    5ace:	f7ff fcf7 	bl	54c0 <audioTickString3>
    5ad2:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 5ac8 <audioFrameString3+0x3a8>
    5ad6:	ee20 0a27 	vmul.f32	s0, s0, s15
    5ada:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    5ade:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer] = current_sample;
    5ae2:	4a15      	ldr	r2, [pc, #84]	; (5b38 <audioFrameString3+0x418>)
    5ae4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    5ae8:	3401      	adds	r4, #1
    5aea:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5aee:	3502      	adds	r5, #2
    5af0:	2d7f      	cmp	r5, #127	; 0x7f
    5af2:	ddeb      	ble.n	5acc <audioFrameString3+0x3ac>
		if (switchStrings)
    5af4:	4b11      	ldr	r3, [pc, #68]	; (5b3c <audioFrameString3+0x41c>)
    5af6:	681b      	ldr	r3, [r3, #0]
    5af8:	b9c3      	cbnz	r3, 5b2c <audioFrameString3+0x40c>
		switchStrings = 0;
    5afa:	4b10      	ldr	r3, [pc, #64]	; (5b3c <audioFrameString3+0x41c>)
    5afc:	2200      	movs	r2, #0
    5afe:	601a      	str	r2, [r3, #0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5b00:	4b0f      	ldr	r3, [pc, #60]	; (5b40 <audioFrameString3+0x420>)
    5b02:	685b      	ldr	r3, [r3, #4]
    5b04:	1bdb      	subs	r3, r3, r7
    5b06:	4a0f      	ldr	r2, [pc, #60]	; (5b44 <audioFrameString3+0x424>)
    5b08:	6013      	str	r3, [r2, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5b0a:	ee07 3a90 	vmov	s15, r3
    5b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5b12:	4b0d      	ldr	r3, [pc, #52]	; (5b48 <audioFrameString3+0x428>)
    5b14:	ed93 7a00 	vldr	s14, [r3]
    5b18:	ee67 7a87 	vmul.f32	s15, s15, s14
    5b1c:	4b0b      	ldr	r3, [pc, #44]	; (5b4c <audioFrameString3+0x42c>)
    5b1e:	edc3 7a00 	vstr	s15, [r3]
}
    5b22:	b006      	add	sp, #24
    5b24:	ecbd 8b02 	vpop	{d8}
    5b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			switchStringModel(switchStrings);
    5b2c:	4b03      	ldr	r3, [pc, #12]	; (5b3c <audioFrameString3+0x41c>)
    5b2e:	6818      	ldr	r0, [r3, #0]
    5b30:	f7fb fca6 	bl	1480 <switchStringModel>
    5b34:	e7e1      	b.n	5afa <audioFrameString3+0x3da>
    5b36:	bf00      	nop
    5b38:	30000000 	.word	0x30000000
    5b3c:	20014434 	.word	0x20014434
    5b40:	e0001000 	.word	0xe0001000
    5b44:	20014438 	.word	0x20014438
    5b48:	20000684 	.word	0x20000684
    5b4c:	200053c4 	.word	0x200053c4
	...

00005b60 <oscillator_tick>:
{
    5b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5b64:	ed2d 8b06 	vpush	{d8-d10}
    5b68:	b083      	sub	sp, #12
    5b6a:	eef0 8a40 	vmov.f32	s17, s0
    5b6e:	4605      	mov	r5, r0
	for (int i = 0; i < NUM_OSC; i++)
    5b70:	2400      	movs	r4, #0
    5b72:	e00b      	b.n	5b8c <oscillator_tick+0x2c>
		oscOuts[0][i][string] = 0.0f;
    5b74:	4a4a      	ldr	r2, [pc, #296]	; (5ca0 <oscillator_tick+0x140>)
    5b76:	eb05 0144 	add.w	r1, r5, r4, lsl #1
    5b7a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    5b7e:	2300      	movs	r3, #0
    5b80:	6003      	str	r3, [r0, #0]
		oscOuts[1][i][string] = 0.0f;
    5b82:	3106      	adds	r1, #6
    5b84:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    5b88:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < NUM_OSC; i++)
    5b8a:	3401      	adds	r4, #1
    5b8c:	2c02      	cmp	r4, #2
    5b8e:	ddf1      	ble.n	5b74 <oscillator_tick+0x14>
	for (int osc = 0; osc < oscToTick; osc++)
    5b90:	2400      	movs	r4, #0
    5b92:	e000      	b.n	5b96 <oscillator_tick+0x36>
    5b94:	3401      	adds	r4, #1
    5b96:	4b43      	ldr	r3, [pc, #268]	; (5ca4 <oscillator_tick+0x144>)
    5b98:	781b      	ldrb	r3, [r3, #0]
    5b9a:	42a3      	cmp	r3, r4
    5b9c:	dd7a      	ble.n	5c94 <oscillator_tick+0x134>
		if (oscOn[osc])
    5b9e:	4b42      	ldr	r3, [pc, #264]	; (5ca8 <oscillator_tick+0x148>)
    5ba0:	5d1b      	ldrb	r3, [r3, r4]
    5ba2:	2b00      	cmp	r3, #0
    5ba4:	d0f6      	beq.n	5b94 <oscillator_tick+0x34>
			param* oscParams = &params[OSC_PARAMS_OFFSET + osc * OscParamsNum];
    5ba6:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    5baa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    5bae:	3618      	adds	r6, #24
    5bb0:	00f7      	lsls	r7, r6, #3
    5bb2:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    5bb6:	f8df 8110 	ldr.w	r8, [pc, #272]	; 5cc8 <oscillator_tick+0x168>
    5bba:	eb08 0383 	add.w	r3, r8, r3, lsl #2
			float fine = oscParams[OscFine].realVal[string];
    5bbe:	1caa      	adds	r2, r5, #2
    5bc0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5bc4:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
			float freqOffset= oscParams[OscFreq].realVal[string];
    5bc8:	edd3 9a15 	vldr	s19, [r3, #84]	; 0x54
			float shape = oscParams[OscShape].realVal[string];
    5bcc:	ed93 aa1c 	vldr	s20, [r3, #112]	; 0x70
			float amp = oscParams[OscAmp].realVal[string];
    5bd0:	ed93 8a23 	vldr	s16, [r3, #140]	; 0x8c
			float filterSend = oscParams[OscFilterSend].realVal[string];
    5bd4:	ed93 9a54 	vldr	s18, [r3, #336]	; 0x150
			float freqToSmooth = (note + (fine*0.01f));
    5bd8:	eddf 7a34 	vldr	s15, [pc, #208]	; 5cac <oscillator_tick+0x14c>
    5bdc:	ee20 0a27 	vmul.f32	s0, s0, s15
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    5be0:	eb05 0a44 	add.w	sl, r5, r4, lsl #1
    5be4:	ea4f 098a 	mov.w	r9, sl, lsl #2
    5be8:	4b31      	ldr	r3, [pc, #196]	; (5cb0 <oscillator_tick+0x150>)
    5bea:	eb03 0b8a 	add.w	fp, r3, sl, lsl #2
    5bee:	ee30 0a28 	vadd.f32	s0, s0, s17
    5bf2:	4658      	mov	r0, fp
    5bf4:	f003 fc3c 	bl	9470 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    5bf8:	4658      	mov	r0, fp
    5bfa:	f003 fd31 	bl	9660 <__tExpSmooth_tick_veneer>
    5bfe:	4b2d      	ldr	r3, [pc, #180]	; (5cb4 <oscillator_tick+0x154>)
    5c00:	444b      	add	r3, r9
    5c02:	edd3 7a00 	vldr	s15, [r3]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    5c06:	ee30 0a27 	vadd.f32	s0, s0, s15
    5c0a:	f003 fbb1 	bl	9370 <__mtofTableLookup_veneer>
    5c0e:	4b2a      	ldr	r3, [pc, #168]	; (5cb8 <oscillator_tick+0x158>)
    5c10:	444b      	add	r3, r9
    5c12:	edd3 7a00 	vldr	s15, [r3]
    5c16:	ee20 0a27 	vmul.f32	s0, s0, s15
			float sample = 0.0f;
    5c1a:	2300      	movs	r3, #0
    5c1c:	9301      	str	r3, [sp, #4]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    5c1e:	4b27      	ldr	r3, [pc, #156]	; (5cbc <oscillator_tick+0x15c>)
    5c20:	f853 b024 	ldr.w	fp, [r3, r4, lsl #2]
    5c24:	462b      	mov	r3, r5
    5c26:	2200      	movs	r2, #0
    5c28:	eef0 0a4a 	vmov.f32	s1, s20
    5c2c:	ee30 0a29 	vadd.f32	s0, s0, s19
    5c30:	4621      	mov	r1, r4
    5c32:	a801      	add	r0, sp, #4
    5c34:	47d8      	blx	fp
			sample *= amp;
    5c36:	eddd 7a01 	vldr	s15, [sp, #4]
    5c3a:	ee68 7a27 	vmul.f32	s15, s16, s15
    5c3e:	edcd 7a01 	vstr	s15, [sp, #4]
			sourceValues[osc][string] = sample;
    5c42:	4b1f      	ldr	r3, [pc, #124]	; (5cc0 <oscillator_tick+0x160>)
    5c44:	444b      	add	r3, r9
    5c46:	edc3 7a00 	vstr	s15, [r3]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    5c4a:	4b1e      	ldr	r3, [pc, #120]	; (5cc4 <oscillator_tick+0x164>)
    5c4c:	ed93 7a00 	vldr	s14, [r3]
    5c50:	ee67 7a87 	vmul.f32	s15, s15, s14
    5c54:	edcd 7a01 	vstr	s15, [sp, #4]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    5c58:	ee67 6a89 	vmul.f32	s13, s15, s18
    5c5c:	1bbf      	subs	r7, r7, r6
    5c5e:	442f      	add	r7, r5
    5c60:	3702      	adds	r7, #2
    5c62:	eb08 0887 	add.w	r8, r8, r7, lsl #2
    5c66:	ed98 7a00 	vldr	s14, [r8]
    5c6a:	ee66 6a87 	vmul.f32	s13, s13, s14
    5c6e:	4b0c      	ldr	r3, [pc, #48]	; (5ca0 <oscillator_tick+0x140>)
    5c70:	4499      	add	r9, r3
    5c72:	edc9 6a00 	vstr	s13, [r9]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    5c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    5c7a:	ee76 6ac9 	vsub.f32	s13, s13, s18
    5c7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
    5c82:	ee27 7a27 	vmul.f32	s14, s14, s15
    5c86:	f10a 0a06 	add.w	sl, sl, #6
    5c8a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    5c8e:	ed83 7a00 	vstr	s14, [r3]
    5c92:	e77f      	b.n	5b94 <oscillator_tick+0x34>
}
    5c94:	b003      	add	sp, #12
    5c96:	ecbd 8b06 	vpop	{d8-d10}
    5c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c9e:	bf00      	nop
    5ca0:	2001d560 	.word	0x2001d560
    5ca4:	20000ae8 	.word	0x20000ae8
    5ca8:	2001d55c 	.word	0x2001d55c
    5cac:	3c23d70a 	.word	0x3c23d70a
    5cb0:	2001d638 	.word	0x2001d638
    5cb4:	2001d4a8 	.word	0x2001d4a8
    5cb8:	2001d1bc 	.word	0x2001d1bc
    5cbc:	2001d700 	.word	0x2001d700
    5cc0:	2001d77c 	.word	0x2001d77c
    5cc4:	20000ad4 	.word	0x20000ad4
    5cc8:	200190dc 	.word	0x200190dc
    5ccc:	f3af 8000 	nop.w
    5cd0:	f3af 8000 	nop.w
    5cd4:	f3af 8000 	nop.w
    5cd8:	f3af 8000 	nop.w
    5cdc:	f3af 8000 	nop.w

00005ce0 <sawSquareTick>:
{
    5ce0:	b538      	push	{r3, r4, r5, lr}
    5ce2:	ed2d 8b02 	vpush	{d8}
    5ce6:	4605      	mov	r5, r0
    5ce8:	eeb0 8a60 	vmov.f32	s16, s1
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    5cec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5cf0:	4c0b      	ldr	r4, [pc, #44]	; (5d20 <sawSquareTick+0x40>)
    5cf2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5cf6:	4620      	mov	r0, r4
    5cf8:	f003 fc22 	bl	9540 <__tPBSawSquare_setFreq_veneer>
	tPBSawSquare_setShape(&sawPaired[v][string], shape);
    5cfc:	eeb0 0a48 	vmov.f32	s0, s16
    5d00:	4620      	mov	r0, r4
    5d02:	f003 fa21 	bl	9148 <__tPBSawSquare_setShape_veneer>
    *sample += tPBSawSquare_tick(&sawPaired[v][string]);
    5d06:	4620      	mov	r0, r4
    5d08:	f003 fb8e 	bl	9428 <__tPBSawSquare_tick_veneer>
    5d0c:	edd5 7a00 	vldr	s15, [r5]
    5d10:	ee77 7a80 	vadd.f32	s15, s15, s0
    5d14:	edc5 7a00 	vstr	s15, [r5]
}
    5d18:	ecbd 8b02 	vpop	{d8}
    5d1c:	bd38      	pop	{r3, r4, r5, pc}
    5d1e:	bf00      	nop
    5d20:	2001d6a8 	.word	0x2001d6a8
    5d24:	f3af 8000 	nop.w
    5d28:	f3af 8000 	nop.w
    5d2c:	f3af 8000 	nop.w
    5d30:	f3af 8000 	nop.w
    5d34:	f3af 8000 	nop.w
    5d38:	f3af 8000 	nop.w
    5d3c:	f3af 8000 	nop.w

00005d40 <sineTriTick>:
{
    5d40:	b538      	push	{r3, r4, r5, lr}
    5d42:	ed2d 8b02 	vpush	{d8}
    5d46:	4605      	mov	r5, r0
    5d48:	eeb0 8a60 	vmov.f32	s16, s1
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    5d4c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5d50:	4c0b      	ldr	r4, [pc, #44]	; (5d80 <sineTriTick+0x40>)
    5d52:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5d56:	4620      	mov	r0, r4
    5d58:	f003 fafa 	bl	9350 <__tPBSineTriangle_setFreq_veneer>
    tPBSineTriangle_setShape(&sinePaired[v][string],shape);
    5d5c:	eeb0 0a48 	vmov.f32	s0, s16
    5d60:	4620      	mov	r0, r4
    5d62:	f003 fabd 	bl	92e0 <__tPBSineTriangle_setShape_veneer>
    *sample += tPBSineTriangle_tick(&sinePaired[v][string]);
    5d66:	4620      	mov	r0, r4
    5d68:	f003 fc92 	bl	9690 <__tPBSineTriangle_tick_veneer>
    5d6c:	edd5 7a00 	vldr	s15, [r5]
    5d70:	ee77 7a80 	vadd.f32	s15, s15, s0
    5d74:	edc5 7a00 	vstr	s15, [r5]
}
    5d78:	ecbd 8b02 	vpop	{d8}
    5d7c:	bd38      	pop	{r3, r4, r5, pc}
    5d7e:	bf00      	nop
    5d80:	2001d764 	.word	0x2001d764
    5d84:	f3af 8000 	nop.w
    5d88:	f3af 8000 	nop.w
    5d8c:	f3af 8000 	nop.w
    5d90:	f3af 8000 	nop.w
    5d94:	f3af 8000 	nop.w
    5d98:	f3af 8000 	nop.w
    5d9c:	f3af 8000 	nop.w

00005da0 <sawTick>:
{
    5da0:	b538      	push	{r3, r4, r5, lr}
    5da2:	4604      	mov	r4, r0
	tPBSaw_setFreq(&saw[v][string], freq);
    5da4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5da8:	4d07      	ldr	r5, [pc, #28]	; (5dc8 <sawTick+0x28>)
    5daa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    5dae:	4628      	mov	r0, r5
    5db0:	f003 fafe 	bl	93b0 <__tPBSaw_setFreq_veneer>
    *sample += tPBSaw_tick(&saw[v][string]);
    5db4:	4628      	mov	r0, r5
    5db6:	f003 fb53 	bl	9460 <__tPBSaw_tick_veneer>
    5dba:	edd4 7a00 	vldr	s15, [r4]
    5dbe:	ee77 7a80 	vadd.f32	s15, s15, s0
    5dc2:	edc4 7a00 	vstr	s15, [r4]
}
    5dc6:	bd38      	pop	{r3, r4, r5, pc}
    5dc8:	2001d690 	.word	0x2001d690
    5dcc:	f3af 8000 	nop.w
    5dd0:	f3af 8000 	nop.w
    5dd4:	f3af 8000 	nop.w
    5dd8:	f3af 8000 	nop.w
    5ddc:	f3af 8000 	nop.w

00005de0 <pulseTick>:
{
    5de0:	b538      	push	{r3, r4, r5, lr}
    5de2:	ed2d 8b02 	vpush	{d8}
    5de6:	4605      	mov	r5, r0
    5de8:	eeb0 8a60 	vmov.f32	s16, s1
    tPBPulse_setFreq(&pulse[v][string], freq);
    5dec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5df0:	4c0b      	ldr	r4, [pc, #44]	; (5e20 <pulseTick+0x40>)
    5df2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5df6:	4620      	mov	r0, r4
    5df8:	f003 fb7a 	bl	94f0 <__tPBPulse_setFreq_veneer>
    tPBPulse_setWidth(&pulse[v][string], shape);
    5dfc:	eeb0 0a48 	vmov.f32	s0, s16
    5e00:	4620      	mov	r0, r4
    5e02:	f003 fbe1 	bl	95c8 <__tPBPulse_setWidth_veneer>
    *sample += tPBPulse_tick(&pulse[v][string]);
    5e06:	4620      	mov	r0, r4
    5e08:	f003 face 	bl	93a8 <__tPBPulse_tick_veneer>
    5e0c:	edd5 7a00 	vldr	s15, [r5]
    5e10:	ee77 7a80 	vadd.f32	s15, s15, s0
    5e14:	edc5 7a00 	vstr	s15, [r5]
}
    5e18:	ecbd 8b02 	vpop	{d8}
    5e1c:	bd38      	pop	{r3, r4, r5, pc}
    5e1e:	bf00      	nop
    5e20:	2001d674 	.word	0x2001d674
    5e24:	f3af 8000 	nop.w
    5e28:	f3af 8000 	nop.w
    5e2c:	f3af 8000 	nop.w
    5e30:	f3af 8000 	nop.w
    5e34:	f3af 8000 	nop.w
    5e38:	f3af 8000 	nop.w
    5e3c:	f3af 8000 	nop.w

00005e40 <sineTick>:
{
    5e40:	b538      	push	{r3, r4, r5, lr}
    5e42:	4604      	mov	r4, r0
    tCycle_setFreq(&sine[v][string], freq);
    5e44:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5e48:	4d07      	ldr	r5, [pc, #28]	; (5e68 <sineTick+0x28>)
    5e4a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    5e4e:	4628      	mov	r0, r5
    5e50:	f003 f9da 	bl	9208 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
    5e54:	4628      	mov	r0, r5
    5e56:	f003 fc43 	bl	96e0 <__tCycle_tick_veneer>
    5e5a:	edd4 7a00 	vldr	s15, [r4]
    5e5e:	ee77 7a80 	vadd.f32	s15, s15, s0
    5e62:	edc4 7a00 	vstr	s15, [r4]
}
    5e66:	bd38      	pop	{r3, r4, r5, pc}
    5e68:	2001d74c 	.word	0x2001d74c
    5e6c:	f3af 8000 	nop.w
    5e70:	f3af 8000 	nop.w
    5e74:	f3af 8000 	nop.w
    5e78:	f3af 8000 	nop.w
    5e7c:	f3af 8000 	nop.w

00005e80 <triTick>:
{
    5e80:	b538      	push	{r3, r4, r5, lr}
    5e82:	ed2d 8b02 	vpush	{d8}
    5e86:	4605      	mov	r5, r0
    5e88:	eeb0 8a60 	vmov.f32	s16, s1
    tPBTriangle_setFreq(&tri[v][string], freq);
    5e8c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    5e90:	4c0b      	ldr	r4, [pc, #44]	; (5ec0 <triTick+0x40>)
    5e92:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    5e96:	4620      	mov	r0, r4
    5e98:	f003 fb46 	bl	9528 <__tPBTriangle_setFreq_veneer>
    tPBTriangle_setSkew(&tri[v][string], shape);
    5e9c:	eeb0 0a48 	vmov.f32	s0, s16
    5ea0:	4620      	mov	r0, r4
    5ea2:	f003 fa4d 	bl	9340 <__tPBTriangle_setSkew_veneer>
    *sample += tPBTriangle_tick(&tri[v][string]);
    5ea6:	4620      	mov	r0, r4
    5ea8:	f003 fac2 	bl	9430 <__tPBTriangle_tick_veneer>
    5eac:	edd5 7a00 	vldr	s15, [r5]
    5eb0:	ee77 7a80 	vadd.f32	s15, s15, s0
    5eb4:	edc5 7a00 	vstr	s15, [r5]
}
    5eb8:	ecbd 8b02 	vpop	{d8}
    5ebc:	bd38      	pop	{r3, r4, r5, pc}
    5ebe:	bf00      	nop
    5ec0:	2001d8fc 	.word	0x2001d8fc
    5ec4:	f3af 8000 	nop.w
    5ec8:	f3af 8000 	nop.w
    5ecc:	f3af 8000 	nop.w
    5ed0:	f3af 8000 	nop.w
    5ed4:	f3af 8000 	nop.w
    5ed8:	f3af 8000 	nop.w
    5edc:	f3af 8000 	nop.w

00005ee0 <userTick>:
}
    5ee0:	4770      	bx	lr
    5ee2:	bf00      	nop
    5ee4:	f3af 8000 	nop.w
    5ee8:	f3af 8000 	nop.w
    5eec:	f3af 8000 	nop.w
    5ef0:	f3af 8000 	nop.w
    5ef4:	f3af 8000 	nop.w
    5ef8:	f3af 8000 	nop.w
    5efc:	f3af 8000 	nop.w

00005f00 <filter_tick>:
{
    5f00:	b530      	push	{r4, r5, lr}
    5f02:	ed2d 8b02 	vpush	{d8}
    5f06:	b085      	sub	sp, #20
    5f08:	4604      	mov	r4, r0
    5f0a:	460d      	mov	r5, r1
	uint8_t enabledFilt[2] = {0,0};
    5f0c:	2200      	movs	r2, #0
    5f0e:	f8ad 2004 	strh.w	r2, [sp, #4]
	for (int f = 0; f < NUM_FILT; f++)
    5f12:	e009      	b.n	5f28 <filter_tick+0x28>
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    5f14:	ee60 7a27 	vmul.f32	s15, s0, s15
    5f18:	ee77 7a87 	vadd.f32	s15, s15, s14
    5f1c:	ab04      	add	r3, sp, #16
    5f1e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5f22:	ed43 7a02 	vstr	s15, [r3, #-8]
	for (int f = 0; f < NUM_FILT; f++)
    5f26:	3201      	adds	r2, #1
    5f28:	2a01      	cmp	r2, #1
    5f2a:	dc2f      	bgt.n	5f8c <filter_tick+0x8c>
		param* filtParams = &params[FILTER_PARAMS_OFFSET + f * FilterParamsNum];
    5f2c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    5f30:	005b      	lsls	r3, r3, #1
    5f32:	335f      	adds	r3, #95	; 0x5f
    5f34:	ebc3 01c3 	rsb	r1, r3, r3, lsl #3
    5f38:	4830      	ldr	r0, [pc, #192]	; (5ffc <filter_tick+0xfc>)
    5f3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
		float enabled = filtParams[FilterEnabled].realVal[string];
    5f3e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    5f42:	442b      	add	r3, r5
    5f44:	3302      	adds	r3, #2
    5f46:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5f4a:	ed90 7a00 	vldr	s14, [r0]
		enabledFilt[f] = (enabled > 0.5f);
    5f4e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5f52:	eeb4 7ae7 	vcmpe.f32	s14, s15
    5f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5f5a:	bfcc      	ite	gt
    5f5c:	2301      	movgt	r3, #1
    5f5e:	2300      	movle	r3, #0
    5f60:	f102 0010 	add.w	r0, r2, #16
    5f64:	4468      	add	r0, sp
    5f66:	f800 3c0c 	strb.w	r3, [r0, #-12]
		if (!enabledFilt[f]) continue;
    5f6a:	2b00      	cmp	r3, #0
    5f6c:	d0db      	beq.n	5f26 <filter_tick+0x26>
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    5f6e:	1cab      	adds	r3, r5, #2
    5f70:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    5f74:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    5f78:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
		if (isnan(note))
    5f7c:	eeb4 0a40 	vcmp.f32	s0, s0
    5f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5f84:	d7c6      	bvc.n	5f14 <filter_tick+0x14>
			note = 0.0f; //is this necessary?
    5f86:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 6000 <filter_tick+0x100>
    5f8a:	e7c3      	b.n	5f14 <filter_tick+0x14>
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    5f8c:	f205 22ef 	addw	r2, r5, #751	; 0x2ef
    5f90:	4b1a      	ldr	r3, [pc, #104]	; (5ffc <filter_tick+0xfc>)
    5f92:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5f96:	ed93 8a00 	vldr	s16, [r3]
	if (enabledFilt[0])
    5f9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5f9e:	b13b      	cbz	r3, 5fb0 <filter_tick+0xb0>
		filterTick[0](&samples[0], 0, cutoff[0], string);
    5fa0:	4b18      	ldr	r3, [pc, #96]	; (6004 <filter_tick+0x104>)
    5fa2:	681b      	ldr	r3, [r3, #0]
    5fa4:	462a      	mov	r2, r5
    5fa6:	ed9d 0a02 	vldr	s0, [sp, #8]
    5faa:	2100      	movs	r1, #0
    5fac:	4620      	mov	r0, r4
    5fae:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
    5fb0:	ed94 7a00 	vldr	s14, [r4]
    5fb4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5fb8:	ee77 7ac8 	vsub.f32	s15, s15, s16
    5fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
	samples[1] += sendToFilter2;
    5fc0:	edd4 7a01 	vldr	s15, [r4, #4]
    5fc4:	ee77 7a87 	vadd.f32	s15, s15, s14
    5fc8:	edc4 7a01 	vstr	s15, [r4, #4]
	if (enabledFilt[1])
    5fcc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5fd0:	b13b      	cbz	r3, 5fe2 <filter_tick+0xe2>
		filterTick[1](&samples[1], 1, cutoff[1], string);
    5fd2:	4b0c      	ldr	r3, [pc, #48]	; (6004 <filter_tick+0x104>)
    5fd4:	685b      	ldr	r3, [r3, #4]
    5fd6:	462a      	mov	r2, r5
    5fd8:	ed9d 0a03 	vldr	s0, [sp, #12]
    5fdc:	2101      	movs	r1, #1
    5fde:	1d20      	adds	r0, r4, #4
    5fe0:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
    5fe2:	ed94 0a01 	vldr	s0, [r4, #4]
    5fe6:	edd4 7a00 	vldr	s15, [r4]
    5fea:	ee67 7a88 	vmul.f32	s15, s15, s16
}
    5fee:	ee30 0a27 	vadd.f32	s0, s0, s15
    5ff2:	b005      	add	sp, #20
    5ff4:	ecbd 8b02 	vpop	{d8}
    5ff8:	bd30      	pop	{r4, r5, pc}
    5ffa:	bf00      	nop
    5ffc:	200190dc 	.word	0x200190dc
    6000:	00000000 	.word	0x00000000
    6004:	2001d1a4 	.word	0x2001d1a4
    6008:	f3af 8000 	nop.w
    600c:	f3af 8000 	nop.w
    6010:	f3af 8000 	nop.w
    6014:	f3af 8000 	nop.w
    6018:	f3af 8000 	nop.w
    601c:	f3af 8000 	nop.w

00006020 <lowpassTick>:
{
    6020:	b570      	push	{r4, r5, r6, lr}
    6022:	4604      	mov	r4, r0
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    6024:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6028:	0096      	lsls	r6, r2, #2
    602a:	4d0b      	ldr	r5, [pc, #44]	; (6058 <lowpassTick+0x38>)
    602c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    6030:	4628      	mov	r0, r5
    6032:	f003 fa0d 	bl	9450 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    6036:	ed94 0a00 	vldr	s0, [r4]
    603a:	4628      	mov	r0, r5
    603c:	f003 fb5c 	bl	96f8 <__tSVF_tick_veneer>
    6040:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    6044:	4b05      	ldr	r3, [pc, #20]	; (605c <lowpassTick+0x3c>)
    6046:	4433      	add	r3, r6
    6048:	edd3 7a00 	vldr	s15, [r3]
    604c:	ee20 0a27 	vmul.f32	s0, s0, s15
    6050:	ed84 0a00 	vstr	s0, [r4]
}
    6054:	bd70      	pop	{r4, r5, r6, pc}
    6056:	bf00      	nop
    6058:	2001d398 	.word	0x2001d398
    605c:	2001d194 	.word	0x2001d194

00006060 <highpassTick>:
{
    6060:	b570      	push	{r4, r5, r6, lr}
    6062:	4604      	mov	r4, r0
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    6064:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6068:	0096      	lsls	r6, r2, #2
    606a:	4d0b      	ldr	r5, [pc, #44]	; (6098 <highpassTick+0x38>)
    606c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    6070:	4628      	mov	r0, r5
    6072:	f003 f9ed 	bl	9450 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
    6076:	ed94 0a00 	vldr	s0, [r4]
    607a:	4628      	mov	r0, r5
    607c:	f003 fb3c 	bl	96f8 <__tSVF_tick_veneer>
    6080:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    6084:	4b05      	ldr	r3, [pc, #20]	; (609c <highpassTick+0x3c>)
    6086:	4433      	add	r3, r6
    6088:	edd3 7a00 	vldr	s15, [r3]
    608c:	ee20 0a27 	vmul.f32	s0, s0, s15
    6090:	ed84 0a00 	vstr	s0, [r4]
}
    6094:	bd70      	pop	{r4, r5, r6, pc}
    6096:	bf00      	nop
    6098:	2001d214 	.word	0x2001d214
    609c:	2001d194 	.word	0x2001d194

000060a0 <bandpassTick>:
{
    60a0:	b570      	push	{r4, r5, r6, lr}
    60a2:	4604      	mov	r4, r0
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    60a4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    60a8:	0096      	lsls	r6, r2, #2
    60aa:	4d0b      	ldr	r5, [pc, #44]	; (60d8 <bandpassTick+0x38>)
    60ac:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    60b0:	4628      	mov	r0, r5
    60b2:	f003 f9cd 	bl	9450 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    60b6:	ed94 0a00 	vldr	s0, [r4]
    60ba:	4628      	mov	r0, r5
    60bc:	f003 fb1c 	bl	96f8 <__tSVF_tick_veneer>
    60c0:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    60c4:	4b05      	ldr	r3, [pc, #20]	; (60dc <bandpassTick+0x3c>)
    60c6:	4433      	add	r3, r6
    60c8:	edd3 7a00 	vldr	s15, [r3]
    60cc:	ee20 0a27 	vmul.f32	s0, s0, s15
    60d0:	ed84 0a00 	vstr	s0, [r4]
}
    60d4:	bd70      	pop	{r4, r5, r6, pc}
    60d6:	bf00      	nop
    60d8:	2001cf08 	.word	0x2001cf08
    60dc:	2001d194 	.word	0x2001d194

000060e0 <diodeLowpassTick>:
{
    60e0:	b570      	push	{r4, r5, r6, lr}
    60e2:	4604      	mov	r4, r0
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    60e4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    60e8:	0096      	lsls	r6, r2, #2
    60ea:	4d0b      	ldr	r5, [pc, #44]	; (6118 <diodeLowpassTick+0x38>)
    60ec:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    60f0:	4628      	mov	r0, r5
    60f2:	f003 fad1 	bl	9698 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    60f6:	ed94 0a00 	vldr	s0, [r4]
    60fa:	4628      	mov	r0, r5
    60fc:	f003 f9d4 	bl	94a8 <__tDiodeFilter_tickEfficient_veneer>
    6100:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    6104:	4b05      	ldr	r3, [pc, #20]	; (611c <diodeLowpassTick+0x3c>)
    6106:	4433      	add	r3, r6
    6108:	edd3 7a00 	vldr	s15, [r3]
    610c:	ee20 0a27 	vmul.f32	s0, s0, s15
    6110:	ed84 0a00 	vstr	s0, [r4]
}
    6114:	bd70      	pop	{r4, r5, r6, pc}
    6116:	bf00      	nop
    6118:	2001d120 	.word	0x2001d120
    611c:	2001d194 	.word	0x2001d194

00006120 <VZpeakTick>:
{
    6120:	b538      	push	{r3, r4, r5, lr}
    6122:	4604      	mov	r4, r0
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    6124:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6128:	4d06      	ldr	r5, [pc, #24]	; (6144 <VZpeakTick+0x24>)
    612a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    612e:	4628      	mov	r0, r5
    6130:	f003 faaa 	bl	9688 <__tVZFilterBell_setFreq_veneer>
	*sample = tVZFilterBell_tick(&VZfilterPeak[v][string], *sample);
    6134:	ed94 0a00 	vldr	s0, [r4]
    6138:	4628      	mov	r0, r5
    613a:	f003 f881 	bl	9240 <__tVZFilterBell_tick_veneer>
    613e:	ed84 0a00 	vstr	s0, [r4]
}
    6142:	bd38      	pop	{r3, r4, r5, pc}
    6144:	2001cef0 	.word	0x2001cef0
    6148:	f3af 8000 	nop.w
    614c:	f3af 8000 	nop.w
    6150:	f3af 8000 	nop.w
    6154:	f3af 8000 	nop.w
    6158:	f3af 8000 	nop.w
    615c:	f3af 8000 	nop.w

00006160 <VZlowshelfTick>:
{
    6160:	b538      	push	{r3, r4, r5, lr}
    6162:	4604      	mov	r4, r0
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    6164:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6168:	4d06      	ldr	r5, [pc, #24]	; (6184 <VZlowshelfTick+0x24>)
    616a:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    616e:	4628      	mov	r0, r5
    6170:	f003 f87e 	bl	9270 <__tVZFilterLS_setFreqFast_veneer>
	*sample = tVZFilterLS_tick(&VZfilterLS[v][string], *sample);
    6174:	ed94 0a00 	vldr	s0, [r4]
    6178:	4628      	mov	r0, r5
    617a:	f003 f8bd 	bl	92f8 <__tVZFilterLS_tick_veneer>
    617e:	ed84 0a00 	vstr	s0, [r4]
}
    6182:	bd38      	pop	{r3, r4, r5, pc}
    6184:	2001cee0 	.word	0x2001cee0
    6188:	f3af 8000 	nop.w
    618c:	f3af 8000 	nop.w
    6190:	f3af 8000 	nop.w
    6194:	f3af 8000 	nop.w
    6198:	f3af 8000 	nop.w
    619c:	f3af 8000 	nop.w

000061a0 <VZhighshelfTick>:
{
    61a0:	b538      	push	{r3, r4, r5, lr}
    61a2:	4604      	mov	r4, r0
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    61a4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    61a8:	4d06      	ldr	r5, [pc, #24]	; (61c4 <VZhighshelfTick+0x24>)
    61aa:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    61ae:	4628      	mov	r0, r5
    61b0:	f003 fa42 	bl	9638 <__tVZFilterHS_setFreqFast_veneer>
	*sample = tVZFilterHS_tick(&VZfilterHS[v][string], *sample);
    61b4:	ed94 0a00 	vldr	s0, [r4]
    61b8:	4628      	mov	r0, r5
    61ba:	f003 f971 	bl	94a0 <__tVZFilterHS_tick_veneer>
    61be:	ed84 0a00 	vstr	s0, [r4]
}
    61c2:	bd38      	pop	{r3, r4, r5, pc}
    61c4:	2001ced0 	.word	0x2001ced0
    61c8:	f3af 8000 	nop.w
    61cc:	f3af 8000 	nop.w
    61d0:	f3af 8000 	nop.w
    61d4:	f3af 8000 	nop.w
    61d8:	f3af 8000 	nop.w
    61dc:	f3af 8000 	nop.w

000061e0 <VZbandrejectTick>:
{
    61e0:	b570      	push	{r4, r5, r6, lr}
    61e2:	4604      	mov	r4, r0
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    61e4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    61e8:	0096      	lsls	r6, r2, #2
    61ea:	4d0b      	ldr	r5, [pc, #44]	; (6218 <VZbandrejectTick+0x38>)
    61ec:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    61f0:	4628      	mov	r0, r5
    61f2:	f003 f8a9 	bl	9348 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    61f6:	ed94 0a00 	vldr	s0, [r4]
    61fa:	4628      	mov	r0, r5
    61fc:	f002 ffc0 	bl	9180 <__tVZFilter_tickEfficient_veneer>
    6200:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    6204:	4b05      	ldr	r3, [pc, #20]	; (621c <VZbandrejectTick+0x3c>)
    6206:	4433      	add	r3, r6
    6208:	edd3 7a00 	vldr	s15, [r3]
    620c:	ee20 0a27 	vmul.f32	s0, s0, s15
    6210:	ed84 0a00 	vstr	s0, [r4]
}
    6214:	bd70      	pop	{r4, r5, r6, pc}
    6216:	bf00      	nop
    6218:	2001cec0 	.word	0x2001cec0
    621c:	2001d194 	.word	0x2001d194

00006220 <LadderLowpassTick>:
{
    6220:	b570      	push	{r4, r5, r6, lr}
    6222:	4604      	mov	r4, r0
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    6224:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6228:	0096      	lsls	r6, r2, #2
    622a:	4d0b      	ldr	r5, [pc, #44]	; (6258 <LadderLowpassTick+0x38>)
    622c:	eb05 0582 	add.w	r5, r5, r2, lsl #2
    6230:	4628      	mov	r0, r5
    6232:	f003 f8f1 	bl	9418 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    6236:	ed94 0a00 	vldr	s0, [r4]
    623a:	4628      	mov	r0, r5
    623c:	f003 f92c 	bl	9498 <__tLadderFilter_tick_veneer>
    6240:	ed84 0a00 	vstr	s0, [r4]
    *sample *= filterGain[v][string];
    6244:	4b05      	ldr	r3, [pc, #20]	; (625c <LadderLowpassTick+0x3c>)
    6246:	4433      	add	r3, r6
    6248:	edd3 7a00 	vldr	s15, [r3]
    624c:	ee20 0a27 	vmul.f32	s0, s0, s15
    6250:	ed84 0a00 	vstr	s0, [r4]
}
    6254:	bd70      	pop	{r4, r5, r6, pc}
    6256:	bf00      	nop
    6258:	2001ceb0 	.word	0x2001ceb0
    625c:	2001d194 	.word	0x2001d194

00006260 <setFreqMultPitch>:
	pitch *= 24.0f;
    6260:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    6264:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    6268:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    626c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    6270:	3320      	adds	r3, #32
    6272:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    6276:	440b      	add	r3, r1
    6278:	3302      	adds	r3, #2
    627a:	4a0b      	ldr	r2, [pc, #44]	; (62a8 <setFreqMultPitch+0x48>)
    627c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6280:	ed93 7a00 	vldr	s14, [r3]
    6284:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6288:	eeb4 7ae7 	vcmpe.f32	s14, s15
    628c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6290:	dd01      	ble.n	6296 <setFreqMultPitch+0x36>
		pitch = roundf(pitch);
    6292:	feb8 0a40 	vrinta.f32	s0, s0
	midiAdd[osc][string] = pitch;
    6296:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    629a:	4b04      	ldr	r3, [pc, #16]	; (62ac <setFreqMultPitch+0x4c>)
    629c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    62a0:	ed83 0a00 	vstr	s0, [r3]
}
    62a4:	4770      	bx	lr
    62a6:	bf00      	nop
    62a8:	200190dc 	.word	0x200190dc
    62ac:	2001d4a8 	.word	0x2001d4a8
    62b0:	f3af 8000 	nop.w
    62b4:	f3af 8000 	nop.w
    62b8:	f3af 8000 	nop.w
    62bc:	f3af 8000 	nop.w

000062c0 <setFreqMultHarm>:
	harm *= 15.0f;
    62c0:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    62c4:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    62c8:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    62cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    62d0:	3320      	adds	r3, #32
    62d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    62d6:	440b      	add	r3, r1
    62d8:	3302      	adds	r3, #2
    62da:	4a17      	ldr	r2, [pc, #92]	; (6338 <setFreqMultHarm+0x78>)
    62dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    62e0:	ed93 7a00 	vldr	s14, [r3]
    62e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    62e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    62ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    62f0:	dd01      	ble.n	62f6 <setFreqMultHarm+0x36>
		harm = roundf(harm);
    62f2:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
    62f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    62fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    62fe:	db0b      	blt.n	6318 <setFreqMultHarm+0x58>
		freqMult[osc][string] = (harm + 1);
    6300:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6304:	ee30 0a27 	vadd.f32	s0, s0, s15
    6308:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    630c:	4b0b      	ldr	r3, [pc, #44]	; (633c <setFreqMultHarm+0x7c>)
    630e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6312:	ed83 0a00 	vstr	s0, [r3]
    6316:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    6318:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    631c:	ee30 0a67 	vsub.f32	s0, s0, s15
    6320:	eeb0 0ac0 	vabs.f32	s0, s0
    6324:	ee87 7a80 	vdiv.f32	s14, s15, s0
    6328:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    632c:	4b03      	ldr	r3, [pc, #12]	; (633c <setFreqMultHarm+0x7c>)
    632e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6332:	ed83 7a00 	vstr	s14, [r3]
}
    6336:	4770      	bx	lr
    6338:	200190dc 	.word	0x200190dc
    633c:	2001d1bc 	.word	0x2001d1bc

00006340 <lowpassSetQ>:
{
    6340:	b508      	push	{r3, lr}
    tSVF_setQ(&lowpass[v][string], q);
    6342:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6346:	4803      	ldr	r0, [pc, #12]	; (6354 <lowpassSetQ+0x14>)
    6348:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    634c:	f002 ff34 	bl	91b8 <__tSVF_setQ_veneer>
}
    6350:	bd08      	pop	{r3, pc}
    6352:	bf00      	nop
    6354:	2001d398 	.word	0x2001d398
    6358:	f3af 8000 	nop.w
    635c:	f3af 8000 	nop.w

00006360 <highpassSetQ>:
{
    6360:	b508      	push	{r3, lr}
    tSVF_setQ(&highpass[v][string], q);
    6362:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6366:	4803      	ldr	r0, [pc, #12]	; (6374 <highpassSetQ+0x14>)
    6368:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    636c:	f002 ff24 	bl	91b8 <__tSVF_setQ_veneer>
}
    6370:	bd08      	pop	{r3, pc}
    6372:	bf00      	nop
    6374:	2001d214 	.word	0x2001d214
    6378:	f3af 8000 	nop.w
    637c:	f3af 8000 	nop.w

00006380 <bandpassSetQ>:
{
    6380:	b508      	push	{r3, lr}
    tSVF_setQ(&bandpass[v][string], q);
    6382:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6386:	4803      	ldr	r0, [pc, #12]	; (6394 <bandpassSetQ+0x14>)
    6388:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    638c:	f002 ff14 	bl	91b8 <__tSVF_setQ_veneer>
}
    6390:	bd08      	pop	{r3, pc}
    6392:	bf00      	nop
    6394:	2001cf08 	.word	0x2001cf08
    6398:	f3af 8000 	nop.w
    639c:	f3af 8000 	nop.w

000063a0 <diodeLowpassSetQ>:
{
    63a0:	b508      	push	{r3, lr}
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    63a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    63a6:	4803      	ldr	r0, [pc, #12]	; (63b4 <diodeLowpassSetQ+0x14>)
    63a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    63ac:	f002 ff10 	bl	91d0 <__tDiodeFilter_setQ_veneer>
}
    63b0:	bd08      	pop	{r3, pc}
    63b2:	bf00      	nop
    63b4:	2001d120 	.word	0x2001d120
    63b8:	f3af 8000 	nop.w
    63bc:	f3af 8000 	nop.w

000063c0 <VZpeakSetQ>:
{
    63c0:	b508      	push	{r3, lr}
	tVZFilterBell_setBandwidth(&VZfilterPeak[v][string], q);
    63c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    63c6:	4803      	ldr	r0, [pc, #12]	; (63d4 <VZpeakSetQ+0x14>)
    63c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    63cc:	f003 f8a8 	bl	9520 <__tVZFilterBell_setBandwidth_veneer>
}
    63d0:	bd08      	pop	{r3, pc}
    63d2:	bf00      	nop
    63d4:	2001cef0 	.word	0x2001cef0
    63d8:	f3af 8000 	nop.w
    63dc:	f3af 8000 	nop.w

000063e0 <VZlowshelfSetQ>:
{
    63e0:	b508      	push	{r3, lr}
	tVZFilterLS_setResonance(&VZfilterLS[v][string], q);
    63e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    63e6:	4803      	ldr	r0, [pc, #12]	; (63f4 <VZlowshelfSetQ+0x14>)
    63e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    63ec:	f003 f804 	bl	93f8 <__tVZFilterLS_setResonance_veneer>
}
    63f0:	bd08      	pop	{r3, pc}
    63f2:	bf00      	nop
    63f4:	2001cee0 	.word	0x2001cee0
    63f8:	f3af 8000 	nop.w
    63fc:	f3af 8000 	nop.w

00006400 <VZhighshelfSetQ>:
{
    6400:	b508      	push	{r3, lr}
	tVZFilterHS_setResonance(&VZfilterHS[v][string], q);
    6402:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6406:	4803      	ldr	r0, [pc, #12]	; (6414 <VZhighshelfSetQ+0x14>)
    6408:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    640c:	f003 f818 	bl	9440 <__tVZFilterHS_setResonance_veneer>
}
    6410:	bd08      	pop	{r3, pc}
    6412:	bf00      	nop
    6414:	2001ced0 	.word	0x2001ced0
    6418:	f3af 8000 	nop.w
    641c:	f3af 8000 	nop.w

00006420 <VZbandrejectSetQ>:
{
    6420:	b508      	push	{r3, lr}
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    6422:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6426:	4803      	ldr	r0, [pc, #12]	; (6434 <VZbandrejectSetQ+0x14>)
    6428:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    642c:	f003 f940 	bl	96b0 <__tVZFilter_setResonance_veneer>
}
    6430:	bd08      	pop	{r3, pc}
    6432:	bf00      	nop
    6434:	2001cec0 	.word	0x2001cec0
    6438:	f3af 8000 	nop.w
    643c:	f3af 8000 	nop.w

00006440 <LadderLowpassSetQ>:
{
    6440:	b508      	push	{r3, lr}
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    6442:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6446:	4803      	ldr	r0, [pc, #12]	; (6454 <LadderLowpassSetQ+0x14>)
    6448:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    644c:	f003 f934 	bl	96b8 <__tLadderFilter_setQ_veneer>
}
    6450:	bd08      	pop	{r3, pc}
    6452:	bf00      	nop
    6454:	2001ceb0 	.word	0x2001ceb0
    6458:	f3af 8000 	nop.w
    645c:	f3af 8000 	nop.w

00006460 <lowpassSetGain>:
{
    6460:	b538      	push	{r3, r4, r5, lr}
    6462:	4605      	mov	r5, r0
    6464:	460c      	mov	r4, r1
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6466:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    646a:	ee20 0a27 	vmul.f32	s0, s0, s15
    646e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    6472:	ee30 0a67 	vsub.f32	s0, s0, s15
    6476:	f002 ffdf 	bl	9438 <__dbToATableLookup_veneer>
    647a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    647e:	4b03      	ldr	r3, [pc, #12]	; (648c <lowpassSetGain+0x2c>)
    6480:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6484:	ed83 0a00 	vstr	s0, [r3]
}
    6488:	bd38      	pop	{r3, r4, r5, pc}
    648a:	bf00      	nop
    648c:	2001d194 	.word	0x2001d194
    6490:	f3af 8000 	nop.w
    6494:	f3af 8000 	nop.w
    6498:	f3af 8000 	nop.w
    649c:	f3af 8000 	nop.w

000064a0 <highpassSetGain>:
{
    64a0:	b538      	push	{r3, r4, r5, lr}
    64a2:	4605      	mov	r5, r0
    64a4:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    64a6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    64aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    64ae:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    64b2:	ee30 0a67 	vsub.f32	s0, s0, s15
    64b6:	f002 ffbf 	bl	9438 <__dbToATableLookup_veneer>
    64ba:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    64be:	4b03      	ldr	r3, [pc, #12]	; (64cc <highpassSetGain+0x2c>)
    64c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    64c4:	ed83 0a00 	vstr	s0, [r3]
}
    64c8:	bd38      	pop	{r3, r4, r5, pc}
    64ca:	bf00      	nop
    64cc:	2001d194 	.word	0x2001d194
    64d0:	f3af 8000 	nop.w
    64d4:	f3af 8000 	nop.w
    64d8:	f3af 8000 	nop.w
    64dc:	f3af 8000 	nop.w

000064e0 <bandpassSetGain>:
{
    64e0:	b538      	push	{r3, r4, r5, lr}
    64e2:	4605      	mov	r5, r0
    64e4:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    64e6:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    64ea:	ee20 0a27 	vmul.f32	s0, s0, s15
    64ee:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    64f2:	ee30 0a67 	vsub.f32	s0, s0, s15
    64f6:	f002 ff9f 	bl	9438 <__dbToATableLookup_veneer>
    64fa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    64fe:	4b03      	ldr	r3, [pc, #12]	; (650c <bandpassSetGain+0x2c>)
    6500:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6504:	ed83 0a00 	vstr	s0, [r3]
}
    6508:	bd38      	pop	{r3, r4, r5, pc}
    650a:	bf00      	nop
    650c:	2001d194 	.word	0x2001d194
    6510:	f3af 8000 	nop.w
    6514:	f3af 8000 	nop.w
    6518:	f3af 8000 	nop.w
    651c:	f3af 8000 	nop.w

00006520 <diodeLowpassSetGain>:
{
    6520:	b538      	push	{r3, r4, r5, lr}
    6522:	4605      	mov	r5, r0
    6524:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6526:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    652a:	ee20 0a27 	vmul.f32	s0, s0, s15
    652e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    6532:	ee30 0a67 	vsub.f32	s0, s0, s15
    6536:	f002 ff7f 	bl	9438 <__dbToATableLookup_veneer>
    653a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    653e:	4b03      	ldr	r3, [pc, #12]	; (654c <diodeLowpassSetGain+0x2c>)
    6540:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6544:	ed83 0a00 	vstr	s0, [r3]
}
    6548:	bd38      	pop	{r3, r4, r5, pc}
    654a:	bf00      	nop
    654c:	2001d194 	.word	0x2001d194
    6550:	f3af 8000 	nop.w
    6554:	f3af 8000 	nop.w
    6558:	f3af 8000 	nop.w
    655c:	f3af 8000 	nop.w

00006560 <VZpeakSetGain>:
{
    6560:	b510      	push	{r4, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6562:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6566:	4c08      	ldr	r4, [pc, #32]	; (6588 <VZpeakSetGain+0x28>)
    6568:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    656c:	eddf 7a07 	vldr	s15, [pc, #28]	; 658c <VZpeakSetGain+0x2c>
    6570:	ee20 0a27 	vmul.f32	s0, s0, s15
    6574:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    6578:	ee30 0a67 	vsub.f32	s0, s0, s15
    657c:	f002 ff5c 	bl	9438 <__dbToATableLookup_veneer>
    6580:	4620      	mov	r0, r4
    6582:	f003 f811 	bl	95a8 <__tVZFilterBell_setGain_veneer>
}
    6586:	bd10      	pop	{r4, pc}
    6588:	2001cef0 	.word	0x2001cef0
    658c:	42480000 	.word	0x42480000
    6590:	f3af 8000 	nop.w
    6594:	f3af 8000 	nop.w
    6598:	f3af 8000 	nop.w
    659c:	f3af 8000 	nop.w

000065a0 <VZlowshelfSetGain>:
{
    65a0:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    65a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    65a6:	4c08      	ldr	r4, [pc, #32]	; (65c8 <VZlowshelfSetGain+0x28>)
    65a8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    65ac:	eddf 7a07 	vldr	s15, [pc, #28]	; 65cc <VZlowshelfSetGain+0x2c>
    65b0:	ee20 0a27 	vmul.f32	s0, s0, s15
    65b4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    65b8:	ee30 0a67 	vsub.f32	s0, s0, s15
    65bc:	f002 ff3c 	bl	9438 <__dbToATableLookup_veneer>
    65c0:	4620      	mov	r0, r4
    65c2:	f002 fe19 	bl	91f8 <__tVZFilterLS_setGain_veneer>
}
    65c6:	bd10      	pop	{r4, pc}
    65c8:	2001cee0 	.word	0x2001cee0
    65cc:	42480000 	.word	0x42480000
    65d0:	f3af 8000 	nop.w
    65d4:	f3af 8000 	nop.w
    65d8:	f3af 8000 	nop.w
    65dc:	f3af 8000 	nop.w

000065e0 <VZhighshelfSetGain>:
{
    65e0:	b510      	push	{r4, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    65e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    65e6:	4c08      	ldr	r4, [pc, #32]	; (6608 <VZhighshelfSetGain+0x28>)
    65e8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    65ec:	eddf 7a07 	vldr	s15, [pc, #28]	; 660c <VZhighshelfSetGain+0x2c>
    65f0:	ee20 0a27 	vmul.f32	s0, s0, s15
    65f4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    65f8:	ee30 0a67 	vsub.f32	s0, s0, s15
    65fc:	f002 ff1c 	bl	9438 <__dbToATableLookup_veneer>
    6600:	4620      	mov	r0, r4
    6602:	f002 fe0d 	bl	9220 <__tVZFilterHS_setGain_veneer>
}
    6606:	bd10      	pop	{r4, pc}
    6608:	2001ced0 	.word	0x2001ced0
    660c:	42480000 	.word	0x42480000
    6610:	f3af 8000 	nop.w
    6614:	f3af 8000 	nop.w
    6618:	f3af 8000 	nop.w
    661c:	f3af 8000 	nop.w

00006620 <VZbandrejectSetGain>:
{
    6620:	b538      	push	{r3, r4, r5, lr}
    6622:	4605      	mov	r5, r0
    6624:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6626:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    662a:	ee20 0a27 	vmul.f32	s0, s0, s15
    662e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    6632:	ee30 0a67 	vsub.f32	s0, s0, s15
    6636:	f002 feff 	bl	9438 <__dbToATableLookup_veneer>
    663a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    663e:	4b03      	ldr	r3, [pc, #12]	; (664c <VZbandrejectSetGain+0x2c>)
    6640:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6644:	ed83 0a00 	vstr	s0, [r3]
}
    6648:	bd38      	pop	{r3, r4, r5, pc}
    664a:	bf00      	nop
    664c:	2001d194 	.word	0x2001d194
    6650:	f3af 8000 	nop.w
    6654:	f3af 8000 	nop.w
    6658:	f3af 8000 	nop.w
    665c:	f3af 8000 	nop.w

00006660 <LadderLowpassSetGain>:
{
    6660:	b538      	push	{r3, r4, r5, lr}
    6662:	4605      	mov	r5, r0
    6664:	460c      	mov	r4, r1
	filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6666:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    666a:	ee20 0a27 	vmul.f32	s0, s0, s15
    666e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    6672:	ee30 0a67 	vsub.f32	s0, s0, s15
    6676:	f002 fedf 	bl	9438 <__dbToATableLookup_veneer>
    667a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    667e:	4b03      	ldr	r3, [pc, #12]	; (668c <LadderLowpassSetGain+0x2c>)
    6680:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6684:	ed83 0a00 	vstr	s0, [r3]
}
    6688:	bd38      	pop	{r3, r4, r5, pc}
    668a:	bf00      	nop
    668c:	2001d194 	.word	0x2001d194
    6690:	f3af 8000 	nop.w
    6694:	f3af 8000 	nop.w
    6698:	f3af 8000 	nop.w
    669c:	f3af 8000 	nop.w

000066a0 <envelope_tick>:
{
    66a0:	b570      	push	{r4, r5, r6, lr}
    66a2:	4606      	mov	r6, r0
	for (int v = 0; v < NUM_ENV; v++)
    66a4:	2400      	movs	r4, #0
    66a6:	e000      	b.n	66aa <envelope_tick+0xa>
    66a8:	3401      	adds	r4, #1
    66aa:	2c03      	cmp	r4, #3
    66ac:	dc14      	bgt.n	66d8 <envelope_tick+0x38>
		if (envOn[v])
    66ae:	4b0b      	ldr	r3, [pc, #44]	; (66dc <envelope_tick+0x3c>)
    66b0:	5d1b      	ldrb	r3, [r3, r4]
    66b2:	2b00      	cmp	r3, #0
    66b4:	d0f8      	beq.n	66a8 <envelope_tick+0x8>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    66b6:	f104 0514 	add.w	r5, r4, #20
    66ba:	eb06 0044 	add.w	r0, r6, r4, lsl #1
    66be:	4b08      	ldr	r3, [pc, #32]	; (66e0 <envelope_tick+0x40>)
    66c0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    66c4:	f002 ff34 	bl	9530 <__tADSRT_tickNoInterp_veneer>
    66c8:	eb06 0545 	add.w	r5, r6, r5, lsl #1
    66cc:	4b05      	ldr	r3, [pc, #20]	; (66e4 <envelope_tick+0x44>)
    66ce:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    66d2:	ed83 0a00 	vstr	s0, [r3]
    66d6:	e7e7      	b.n	66a8 <envelope_tick+0x8>
}
    66d8:	bd70      	pop	{r4, r5, r6, pc}
    66da:	bf00      	nop
    66dc:	2001d140 	.word	0x2001d140
    66e0:	2001d144 	.word	0x2001d144
    66e4:	2001d77c 	.word	0x2001d77c
    66e8:	f3af 8000 	nop.w
    66ec:	f3af 8000 	nop.w
    66f0:	f3af 8000 	nop.w
    66f4:	f3af 8000 	nop.w
    66f8:	f3af 8000 	nop.w
    66fc:	f3af 8000 	nop.w

00006700 <lfo_tick>:
{
    6700:	b530      	push	{r4, r5, lr}
    6702:	b083      	sub	sp, #12
    6704:	4605      	mov	r5, r0
	for (int i = 0; i < NUM_LFOS; i++)
    6706:	2400      	movs	r4, #0
    6708:	e000      	b.n	670c <lfo_tick+0xc>
    670a:	3401      	adds	r4, #1
    670c:	2c03      	cmp	r4, #3
    670e:	dc16      	bgt.n	673e <lfo_tick+0x3e>
		if (lfoOn[i])
    6710:	4b0c      	ldr	r3, [pc, #48]	; (6744 <lfo_tick+0x44>)
    6712:	5d1b      	ldrb	r3, [r3, r4]
    6714:	2b00      	cmp	r3, #0
    6716:	d0f8      	beq.n	670a <lfo_tick+0xa>
			float sample = 0.0f;
    6718:	2300      	movs	r3, #0
    671a:	9301      	str	r3, [sp, #4]
			lfoShapeTick[i](&sample,i, string);
    671c:	4b0a      	ldr	r3, [pc, #40]	; (6748 <lfo_tick+0x48>)
    671e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    6722:	462a      	mov	r2, r5
    6724:	4621      	mov	r1, r4
    6726:	a801      	add	r0, sp, #4
    6728:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    672a:	f104 0118 	add.w	r1, r4, #24
    672e:	eb05 0141 	add.w	r1, r5, r1, lsl #1
    6732:	4b06      	ldr	r3, [pc, #24]	; (674c <lfo_tick+0x4c>)
    6734:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6738:	9a01      	ldr	r2, [sp, #4]
    673a:	601a      	str	r2, [r3, #0]
    673c:	e7e5      	b.n	670a <lfo_tick+0xa>
}
    673e:	b003      	add	sp, #12
    6740:	bd30      	pop	{r4, r5, pc}
    6742:	bf00      	nop
    6744:	2001d2c4 	.word	0x2001d2c4
    6748:	2001d328 	.word	0x2001d328
    674c:	2001d77c 	.word	0x2001d77c
    6750:	f3af 8000 	nop.w
    6754:	f3af 8000 	nop.w
    6758:	f3af 8000 	nop.w
    675c:	f3af 8000 	nop.w

00006760 <setEnvelopeAttack>:
{
    6760:	b508      	push	{r3, lr}
	tADSRT_setAttack(&envs[v][string], a);
    6762:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6766:	eddf 7a05 	vldr	s15, [pc, #20]	; 677c <setEnvelopeAttack+0x1c>
    676a:	ee30 0a27 	vadd.f32	s0, s0, s15
    676e:	4804      	ldr	r0, [pc, #16]	; (6780 <setEnvelopeAttack+0x20>)
    6770:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6774:	f002 fd78 	bl	9268 <__tADSRT_setAttack_veneer>
}
    6778:	bd08      	pop	{r3, pc}
    677a:	bf00      	nop
    677c:	3a83126f 	.word	0x3a83126f
    6780:	2001d144 	.word	0x2001d144
    6784:	f3af 8000 	nop.w
    6788:	f3af 8000 	nop.w
    678c:	f3af 8000 	nop.w
    6790:	f3af 8000 	nop.w
    6794:	f3af 8000 	nop.w
    6798:	f3af 8000 	nop.w
    679c:	f3af 8000 	nop.w

000067a0 <setEnvelopeDecay>:
{
    67a0:	b508      	push	{r3, lr}
	tADSRT_setDecay(&envs[v][string], d);
    67a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    67a6:	eddf 7a05 	vldr	s15, [pc, #20]	; 67bc <setEnvelopeDecay+0x1c>
    67aa:	ee30 0a27 	vadd.f32	s0, s0, s15
    67ae:	4804      	ldr	r0, [pc, #16]	; (67c0 <setEnvelopeDecay+0x20>)
    67b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    67b4:	f002 fde0 	bl	9378 <__tADSRT_setDecay_veneer>
}
    67b8:	bd08      	pop	{r3, pc}
    67ba:	bf00      	nop
    67bc:	3a83126f 	.word	0x3a83126f
    67c0:	2001d144 	.word	0x2001d144
    67c4:	f3af 8000 	nop.w
    67c8:	f3af 8000 	nop.w
    67cc:	f3af 8000 	nop.w
    67d0:	f3af 8000 	nop.w
    67d4:	f3af 8000 	nop.w
    67d8:	f3af 8000 	nop.w
    67dc:	f3af 8000 	nop.w

000067e0 <setEnvelopeSustain>:
{
    67e0:	b508      	push	{r3, lr}
	tADSRT_setSustain(&envs[v][string], s);
    67e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    67e6:	4803      	ldr	r0, [pc, #12]	; (67f4 <setEnvelopeSustain+0x14>)
    67e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    67ec:	f002 fdd4 	bl	9398 <__tADSRT_setSustain_veneer>
}
    67f0:	bd08      	pop	{r3, pc}
    67f2:	bf00      	nop
    67f4:	2001d144 	.word	0x2001d144
    67f8:	f3af 8000 	nop.w
    67fc:	f3af 8000 	nop.w

00006800 <setEnvelopeRelease>:
{
    6800:	b508      	push	{r3, lr}
	tADSRT_setRelease(&envs[v][string], r);
    6802:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6806:	eddf 7a05 	vldr	s15, [pc, #20]	; 681c <setEnvelopeRelease+0x1c>
    680a:	ee30 0a27 	vadd.f32	s0, s0, s15
    680e:	4804      	ldr	r0, [pc, #16]	; (6820 <setEnvelopeRelease+0x20>)
    6810:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6814:	f002 fdd0 	bl	93b8 <__tADSRT_setRelease_veneer>
}
    6818:	bd08      	pop	{r3, pc}
    681a:	bf00      	nop
    681c:	3a83126f 	.word	0x3a83126f
    6820:	2001d144 	.word	0x2001d144
    6824:	f3af 8000 	nop.w
    6828:	f3af 8000 	nop.w
    682c:	f3af 8000 	nop.w
    6830:	f3af 8000 	nop.w
    6834:	f3af 8000 	nop.w
    6838:	f3af 8000 	nop.w
    683c:	f3af 8000 	nop.w

00006840 <setEnvelopeLeak>:
{
    6840:	b508      	push	{r3, lr}
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    6842:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6846:	ee77 7ac0 	vsub.f32	s15, s15, s0
    684a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 686c <setEnvelopeLeak+0x2c>
    684e:	ee67 7a87 	vmul.f32	s15, s15, s14
    6852:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6856:	ed9f 0a06 	vldr	s0, [pc, #24]	; 6870 <setEnvelopeLeak+0x30>
    685a:	ee37 0a80 	vadd.f32	s0, s15, s0
    685e:	4805      	ldr	r0, [pc, #20]	; (6874 <setEnvelopeLeak+0x34>)
    6860:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6864:	f002 fe3c 	bl	94e0 <__tADSRT_setLeakFactor_veneer>
}
    6868:	bd08      	pop	{r3, pc}
    686a:	bf00      	nop
    686c:	3851b717 	.word	0x3851b717
    6870:	3f7ffcb9 	.word	0x3f7ffcb9
    6874:	2001d144 	.word	0x2001d144
    6878:	f3af 8000 	nop.w
    687c:	f3af 8000 	nop.w

00006880 <setAmp>:
	amplitude[string] = amp;
    6880:	4b02      	ldr	r3, [pc, #8]	; (688c <setAmp+0xc>)
    6882:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6886:	ed83 0a00 	vstr	s0, [r3]
}
    688a:	4770      	bx	lr
    688c:	2001cf00 	.word	0x2001cf00
    6890:	f3af 8000 	nop.w
    6894:	f3af 8000 	nop.w
    6898:	f3af 8000 	nop.w
    689c:	f3af 8000 	nop.w

000068a0 <setMaster>:
	finalMaster[string] = amp;
    68a0:	4b02      	ldr	r3, [pc, #8]	; (68ac <setMaster+0xc>)
    68a2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    68a6:	ed83 0a00 	vstr	s0, [r3]
}
    68aa:	4770      	bx	lr
    68ac:	2001d1b4 	.word	0x2001d1b4
    68b0:	f3af 8000 	nop.w
    68b4:	f3af 8000 	nop.w
    68b8:	f3af 8000 	nop.w
    68bc:	f3af 8000 	nop.w

000068c0 <setTranspose>:
	transpose = in;
    68c0:	4b01      	ldr	r3, [pc, #4]	; (68c8 <setTranspose+0x8>)
    68c2:	ed83 0a00 	vstr	s0, [r3]
}
    68c6:	4770      	bx	lr
    68c8:	2001d8f8 	.word	0x2001d8f8
    68cc:	f3af 8000 	nop.w
    68d0:	f3af 8000 	nop.w
    68d4:	f3af 8000 	nop.w
    68d8:	f3af 8000 	nop.w
    68dc:	f3af 8000 	nop.w

000068e0 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    68e0:	ee30 0a00 	vadd.f32	s0, s0, s0
    68e4:	eddf 7a05 	vldr	s15, [pc, #20]	; 68fc <setPitchBendRange+0x1c>
    68e8:	ee87 7a80 	vdiv.f32	s14, s15, s0
    68ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    68f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    68f4:	4b02      	ldr	r3, [pc, #8]	; (6900 <setPitchBendRange+0x20>)
    68f6:	edc3 7a00 	vstr	s15, [r3]
}
    68fa:	4770      	bx	lr
    68fc:	467ffc00 	.word	0x467ffc00
    6900:	20000acc 	.word	0x20000acc
    6904:	f3af 8000 	nop.w
    6908:	f3af 8000 	nop.w
    690c:	f3af 8000 	nop.w
    6910:	f3af 8000 	nop.w
    6914:	f3af 8000 	nop.w
    6918:	f3af 8000 	nop.w
    691c:	f3af 8000 	nop.w

00006920 <setFinalLowpass>:
{
    6920:	b508      	push	{r3, lr}
	tSVF_setFreqFast(&finalLowpass[string], in);
    6922:	4803      	ldr	r0, [pc, #12]	; (6930 <setFinalLowpass+0x10>)
    6924:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6928:	f002 fd92 	bl	9450 <__tSVF_setFreqFast_veneer>
}
    692c:	bd08      	pop	{r3, pc}
    692e:	bf00      	nop
    6930:	2001d1ac 	.word	0x2001d1ac
    6934:	f3af 8000 	nop.w
    6938:	f3af 8000 	nop.w
    693c:	f3af 8000 	nop.w

00006940 <tickMappings>:
{
    6940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6942:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    6946:	2400      	movs	r4, #0
    6948:	4b3e      	ldr	r3, [pc, #248]	; (6a44 <tickMappings+0x104>)
    694a:	701c      	strb	r4, [r3, #0]
	for (int i = 0; i < numMappings; i++)
    694c:	e06a      	b.n	6a24 <tickMappings+0xe4>
							unsmoothedValue += sum;
    694e:	ee38 8a27 	vadd.f32	s16, s16, s15
				for (int j = 0; j < 3; j++)
    6952:	3301      	adds	r3, #1
    6954:	2b02      	cmp	r3, #2
    6956:	dc30      	bgt.n	69ba <tickMappings+0x7a>
					if (mappings[i].hookActive[j])
    6958:	4a3b      	ldr	r2, [pc, #236]	; (6a48 <tickMappings+0x108>)
    695a:	214c      	movs	r1, #76	; 0x4c
    695c:	fb01 2204 	mla	r2, r1, r4, r2
    6960:	441a      	add	r2, r3
    6962:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
    6966:	2a00      	cmp	r2, #0
    6968:	d0f3      	beq.n	6952 <tickMappings+0x12>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    696a:	4937      	ldr	r1, [pc, #220]	; (6a48 <tickMappings+0x108>)
    696c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    6970:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6974:	eb02 0043 	add.w	r0, r2, r3, lsl #1
    6978:	4428      	add	r0, r5
    697a:	1c86      	adds	r6, r0, #2
    697c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
    6980:	edd6 7a00 	vldr	s15, [r6]
    6984:	441a      	add	r2, r3
    6986:	320e      	adds	r2, #14
    6988:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    698c:	edd2 6a01 	vldr	s13, [r2, #4]
    6990:	ee67 7aa6 	vmul.f32	s15, s15, s13
    6994:	3008      	adds	r0, #8
    6996:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    699a:	6842      	ldr	r2, [r0, #4]
    699c:	edd2 6a00 	vldr	s13, [r2]
    69a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
						if (mappings[i].sourceSmoothed[j])
    69a4:	224c      	movs	r2, #76	; 0x4c
    69a6:	fb02 1104 	mla	r1, r2, r4, r1
    69aa:	4419      	add	r1, r3
    69ac:	f891 2020 	ldrb.w	r2, [r1, #32]
    69b0:	2a00      	cmp	r2, #0
    69b2:	d0cc      	beq.n	694e <tickMappings+0xe>
							smoothedValue += sum;
    69b4:	ee37 7a27 	vadd.f32	s14, s14, s15
    69b8:	e7cb      	b.n	6952 <tickMappings+0x12>
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    69ba:	4e23      	ldr	r6, [pc, #140]	; (6a48 <tickMappings+0x108>)
    69bc:	234c      	movs	r3, #76	; 0x4c
    69be:	fb03 6604 	mla	r6, r3, r4, r6
    69c2:	6873      	ldr	r3, [r6, #4]
    69c4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    69c8:	ed93 0a00 	vldr	s0, [r3]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    69cc:	eb05 0344 	add.w	r3, r5, r4, lsl #1
    69d0:	4f1e      	ldr	r7, [pc, #120]	; (6a4c <tickMappings+0x10c>)
    69d2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    69d6:	ee30 0a07 	vadd.f32	s0, s0, s14
    69da:	4638      	mov	r0, r7
    69dc:	f002 fd48 	bl	9470 <__tExpSmooth_setDest_veneer>
				smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    69e0:	4638      	mov	r0, r7
    69e2:	f002 fe3d 	bl	9660 <__tExpSmooth_tick_veneer>
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    69e6:	6877      	ldr	r7, [r6, #4]
    69e8:	693b      	ldr	r3, [r7, #16]
    69ea:	ee38 0a00 	vadd.f32	s0, s16, s0
    69ee:	4798      	blx	r3
    69f0:	1cab      	adds	r3, r5, #2
    69f2:	eb07 0783 	add.w	r7, r7, r3, lsl #2
    69f6:	ed87 0a00 	vstr	s0, [r7]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    69fa:	6872      	ldr	r2, [r6, #4]
    69fc:	6956      	ldr	r6, [r2, #20]
    69fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    6a02:	4629      	mov	r1, r5
    6a04:	7e10      	ldrb	r0, [r2, #24]
    6a06:	ed93 0a00 	vldr	s0, [r3]
    6a0a:	47b0      	blx	r6
			for (int v = 0; v < numStringsThisBoard; v++)
    6a0c:	3501      	adds	r5, #1
    6a0e:	4b10      	ldr	r3, [pc, #64]	; (6a50 <tickMappings+0x110>)
    6a10:	781b      	ldrb	r3, [r3, #0]
    6a12:	42ab      	cmp	r3, r5
    6a14:	dd05      	ble.n	6a22 <tickMappings+0xe2>
				for (int j = 0; j < 3; j++)
    6a16:	2300      	movs	r3, #0
				float smoothedValue = 0.0f;
    6a18:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 6a54 <tickMappings+0x114>
				float unsmoothedValue = 0.0f;
    6a1c:	eeb0 8a47 	vmov.f32	s16, s14
    6a20:	e798      	b.n	6954 <tickMappings+0x14>
	for (int i = 0; i < numMappings; i++)
    6a22:	3401      	adds	r4, #1
    6a24:	4b0c      	ldr	r3, [pc, #48]	; (6a58 <tickMappings+0x118>)
    6a26:	781b      	ldrb	r3, [r3, #0]
    6a28:	42a3      	cmp	r3, r4
    6a2a:	dd08      	ble.n	6a3e <tickMappings+0xfe>
		if (mappings[i].destNumber != 255)
    6a2c:	234c      	movs	r3, #76	; 0x4c
    6a2e:	fb04 f303 	mul.w	r3, r4, r3
    6a32:	4a05      	ldr	r2, [pc, #20]	; (6a48 <tickMappings+0x108>)
    6a34:	5cd3      	ldrb	r3, [r2, r3]
    6a36:	2bff      	cmp	r3, #255	; 0xff
    6a38:	d0f3      	beq.n	6a22 <tickMappings+0xe2>
			for (int v = 0; v < numStringsThisBoard; v++)
    6a3a:	2500      	movs	r5, #0
    6a3c:	e7e7      	b.n	6a0e <tickMappings+0xce>
}
    6a3e:	ecbd 8b02 	vpop	{d8}
    6a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a44:	200166bb 	.word	0x200166bb
    6a48:	20018740 	.word	0x20018740
    6a4c:	2001d3a8 	.word	0x2001d3a8
    6a50:	20000694 	.word	0x20000694
    6a54:	00000000 	.word	0x00000000
    6a58:	200190cc 	.word	0x200190cc
    6a5c:	f3af 8000 	nop.w

00006a60 <lfoSawSquareTick>:
{
    6a60:	b510      	push	{r4, lr}
    6a62:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    6a64:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6a68:	4803      	ldr	r0, [pc, #12]	; (6a78 <lfoSawSquareTick+0x18>)
    6a6a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6a6e:	f002 fbe3 	bl	9238 <__tSawSquareLFO_tick_veneer>
    6a72:	ed84 0a00 	vstr	s0, [r4]
}
    6a76:	bd10      	pop	{r4, pc}
    6a78:	2001d308 	.word	0x2001d308
    6a7c:	f3af 8000 	nop.w

00006a80 <lfoSineTriTick>:
{
    6a80:	b510      	push	{r4, lr}
    6a82:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    6a84:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6a88:	4803      	ldr	r0, [pc, #12]	; (6a98 <lfoSineTriTick+0x18>)
    6a8a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6a8e:	f002 fb73 	bl	9178 <__tSineTriLFO_tick_veneer>
    6a92:	ed84 0a00 	vstr	s0, [r4]
}
    6a96:	bd10      	pop	{r4, pc}
    6a98:	2001d358 	.word	0x2001d358
    6a9c:	f3af 8000 	nop.w

00006aa0 <lfoSineTick>:
{
    6aa0:	b510      	push	{r4, lr}
    6aa2:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    6aa4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6aa8:	4803      	ldr	r0, [pc, #12]	; (6ab8 <lfoSineTick+0x18>)
    6aaa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6aae:	f002 fe17 	bl	96e0 <__tCycle_tick_veneer>
    6ab2:	ed84 0a00 	vstr	s0, [r4]
}
    6ab6:	bd10      	pop	{r4, pc}
    6ab8:	2001d338 	.word	0x2001d338
    6abc:	f3af 8000 	nop.w

00006ac0 <lfoTriTick>:
{
    6ac0:	b510      	push	{r4, lr}
    6ac2:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    6ac4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6ac8:	4803      	ldr	r0, [pc, #12]	; (6ad8 <lfoTriTick+0x18>)
    6aca:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6ace:	f002 fdd3 	bl	9678 <__tTriLFO_tick_veneer>
    6ad2:	ed84 0a00 	vstr	s0, [r4]
}
    6ad6:	bd10      	pop	{r4, pc}
    6ad8:	2001d378 	.word	0x2001d378
    6adc:	f3af 8000 	nop.w

00006ae0 <lfoSawTick>:
{
    6ae0:	b510      	push	{r4, lr}
    6ae2:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    6ae4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6ae8:	4806      	ldr	r0, [pc, #24]	; (6b04 <lfoSawTick+0x24>)
    6aea:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6aee:	f002 fb8f 	bl	9210 <__tIntPhasor_tick_veneer>
    6af2:	ee30 0a00 	vadd.f32	s0, s0, s0
    6af6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6afa:	ee30 0a67 	vsub.f32	s0, s0, s15
    6afe:	ed84 0a00 	vstr	s0, [r4]
}
    6b02:	bd10      	pop	{r4, pc}
    6b04:	2001d2e8 	.word	0x2001d2e8
    6b08:	f3af 8000 	nop.w
    6b0c:	f3af 8000 	nop.w
    6b10:	f3af 8000 	nop.w
    6b14:	f3af 8000 	nop.w
    6b18:	f3af 8000 	nop.w
    6b1c:	f3af 8000 	nop.w

00006b20 <lfoPulseTick>:
{
    6b20:	b510      	push	{r4, lr}
    6b22:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    6b24:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6b28:	4803      	ldr	r0, [pc, #12]	; (6b38 <lfoPulseTick+0x18>)
    6b2a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    6b2e:	f002 fd73 	bl	9618 <__tSquareLFO_tick_veneer>
    6b32:	ed84 0a00 	vstr	s0, [r4]
}
    6b36:	bd10      	pop	{r4, pc}
    6b38:	2001d2c8 	.word	0x2001d2c8
    6b3c:	f3af 8000 	nop.w

00006b40 <lfoSawSquareSetRate>:
{
    6b40:	b508      	push	{r3, lr}
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    6b42:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6b46:	4803      	ldr	r0, [pc, #12]	; (6b54 <lfoSawSquareSetRate+0x14>)
    6b48:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6b4c:	f002 fc08 	bl	9360 <__tSawSquareLFO_setFreq_veneer>
}
    6b50:	bd08      	pop	{r3, pc}
    6b52:	bf00      	nop
    6b54:	2001d308 	.word	0x2001d308
    6b58:	f3af 8000 	nop.w
    6b5c:	f3af 8000 	nop.w

00006b60 <lfoSineTriSetRate>:
{
    6b60:	b508      	push	{r3, lr}
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    6b62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6b66:	4803      	ldr	r0, [pc, #12]	; (6b74 <lfoSineTriSetRate+0x14>)
    6b68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6b6c:	f002 fba4 	bl	92b8 <__tSineTriLFO_setFreq_veneer>
}
    6b70:	bd08      	pop	{r3, pc}
    6b72:	bf00      	nop
    6b74:	2001d358 	.word	0x2001d358
    6b78:	f3af 8000 	nop.w
    6b7c:	f3af 8000 	nop.w

00006b80 <lfoSineSetRate>:
{
    6b80:	b508      	push	{r3, lr}
	tCycle_setFreq(&lfoSine[v][string], r);
    6b82:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6b86:	4803      	ldr	r0, [pc, #12]	; (6b94 <lfoSineSetRate+0x14>)
    6b88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6b8c:	f002 fb3c 	bl	9208 <__tCycle_setFreq_veneer>
}
    6b90:	bd08      	pop	{r3, pc}
    6b92:	bf00      	nop
    6b94:	2001d338 	.word	0x2001d338
    6b98:	f3af 8000 	nop.w
    6b9c:	f3af 8000 	nop.w

00006ba0 <lfoTriSetRate>:
{
    6ba0:	b508      	push	{r3, lr}
	tTriLFO_setFreq(&lfoTri[v][string], r);
    6ba2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6ba6:	4803      	ldr	r0, [pc, #12]	; (6bb4 <lfoTriSetRate+0x14>)
    6ba8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6bac:	f002 fcd0 	bl	9550 <__tTriLFO_setFreq_veneer>
}
    6bb0:	bd08      	pop	{r3, pc}
    6bb2:	bf00      	nop
    6bb4:	2001d378 	.word	0x2001d378
    6bb8:	f3af 8000 	nop.w
    6bbc:	f3af 8000 	nop.w

00006bc0 <lfoSawSetRate>:
{
    6bc0:	b508      	push	{r3, lr}
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    6bc2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6bc6:	4803      	ldr	r0, [pc, #12]	; (6bd4 <lfoSawSetRate+0x14>)
    6bc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6bcc:	f002 fb04 	bl	91d8 <__tIntPhasor_setFreq_veneer>
}
    6bd0:	bd08      	pop	{r3, pc}
    6bd2:	bf00      	nop
    6bd4:	2001d2e8 	.word	0x2001d2e8
    6bd8:	f3af 8000 	nop.w
    6bdc:	f3af 8000 	nop.w

00006be0 <lfoPulseSetRate>:
{
    6be0:	b508      	push	{r3, lr}
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    6be2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6be6:	4803      	ldr	r0, [pc, #12]	; (6bf4 <lfoPulseSetRate+0x14>)
    6be8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6bec:	f002 fbb4 	bl	9358 <__tSquareLFO_setFreq_veneer>
}
    6bf0:	bd08      	pop	{r3, pc}
    6bf2:	bf00      	nop
    6bf4:	2001d2c8 	.word	0x2001d2c8
    6bf8:	f3af 8000 	nop.w
    6bfc:	f3af 8000 	nop.w

00006c00 <lfoSawSquareSetPhase>:
{
    6c00:	b508      	push	{r3, lr}
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    6c02:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6c06:	4803      	ldr	r0, [pc, #12]	; (6c14 <lfoSawSquareSetPhase+0x14>)
    6c08:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6c0c:	f002 fc2c 	bl	9468 <__tSawSquareLFO_setPhase_veneer>
}
    6c10:	bd08      	pop	{r3, pc}
    6c12:	bf00      	nop
    6c14:	2001d308 	.word	0x2001d308
    6c18:	f3af 8000 	nop.w
    6c1c:	f3af 8000 	nop.w

00006c20 <lfoSineTriSetPhase>:
{
    6c20:	b508      	push	{r3, lr}
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    6c22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6c26:	4803      	ldr	r0, [pc, #12]	; (6c34 <lfoSineTriSetPhase+0x14>)
    6c28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6c2c:	f002 fcc8 	bl	95c0 <__tSineTriLFO_setPhase_veneer>
}
    6c30:	bd08      	pop	{r3, pc}
    6c32:	bf00      	nop
    6c34:	2001d358 	.word	0x2001d358
    6c38:	f3af 8000 	nop.w
    6c3c:	f3af 8000 	nop.w

00006c40 <lfoSineSetPhase>:
{
    6c40:	b508      	push	{r3, lr}
	tCycle_setPhase(&lfoSine[v][string],p);
    6c42:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6c46:	4803      	ldr	r0, [pc, #12]	; (6c54 <lfoSineSetPhase+0x14>)
    6c48:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6c4c:	f002 fcd4 	bl	95f8 <__tCycle_setPhase_veneer>
}
    6c50:	bd08      	pop	{r3, pc}
    6c52:	bf00      	nop
    6c54:	2001d338 	.word	0x2001d338
    6c58:	f3af 8000 	nop.w
    6c5c:	f3af 8000 	nop.w

00006c60 <lfoTriSetPhase>:
{
    6c60:	b508      	push	{r3, lr}
	tTriLFO_setPhase(&lfoTri[v][string],p);
    6c62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6c66:	4803      	ldr	r0, [pc, #12]	; (6c74 <lfoTriSetPhase+0x14>)
    6c68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6c6c:	f002 fc44 	bl	94f8 <__tTriLFO_setPhase_veneer>
}
    6c70:	bd08      	pop	{r3, pc}
    6c72:	bf00      	nop
    6c74:	2001d378 	.word	0x2001d378
    6c78:	f3af 8000 	nop.w
    6c7c:	f3af 8000 	nop.w

00006c80 <lfoSawSetPhase>:
{
    6c80:	b508      	push	{r3, lr}
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    6c82:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6c86:	4803      	ldr	r0, [pc, #12]	; (6c94 <lfoSawSetPhase+0x14>)
    6c88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6c8c:	f002 fcb0 	bl	95f0 <__tIntPhasor_setPhase_veneer>
}
    6c90:	bd08      	pop	{r3, pc}
    6c92:	bf00      	nop
    6c94:	2001d2e8 	.word	0x2001d2e8
    6c98:	f3af 8000 	nop.w
    6c9c:	f3af 8000 	nop.w

00006ca0 <lfoPulseSetPhase>:
{
    6ca0:	b508      	push	{r3, lr}
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    6ca2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6ca6:	4803      	ldr	r0, [pc, #12]	; (6cb4 <lfoPulseSetPhase+0x14>)
    6ca8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6cac:	f002 fc0c 	bl	94c8 <__tSquareLFO_setPhase_veneer>
}
    6cb0:	bd08      	pop	{r3, pc}
    6cb2:	bf00      	nop
    6cb4:	2001d2c8 	.word	0x2001d2c8
    6cb8:	f3af 8000 	nop.w
    6cbc:	f3af 8000 	nop.w

00006cc0 <lfoSawSquareSetShape>:
{
    6cc0:	b508      	push	{r3, lr}
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    6cc2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6cc6:	4803      	ldr	r0, [pc, #12]	; (6cd4 <lfoSawSquareSetShape+0x14>)
    6cc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6ccc:	f002 fb34 	bl	9338 <__tSawSquareLFO_setShape_veneer>
}
    6cd0:	bd08      	pop	{r3, pc}
    6cd2:	bf00      	nop
    6cd4:	2001d308 	.word	0x2001d308
    6cd8:	f3af 8000 	nop.w
    6cdc:	f3af 8000 	nop.w

00006ce0 <lfoSineTriSetShape>:
{
    6ce0:	b508      	push	{r3, lr}
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    6ce2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6ce6:	4803      	ldr	r0, [pc, #12]	; (6cf4 <lfoSineTriSetShape+0x14>)
    6ce8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6cec:	f002 fa9c 	bl	9228 <__tSineTriLFO_setShape_veneer>
}
    6cf0:	bd08      	pop	{r3, pc}
    6cf2:	bf00      	nop
    6cf4:	2001d358 	.word	0x2001d358
    6cf8:	f3af 8000 	nop.w
    6cfc:	f3af 8000 	nop.w

00006d00 <lfoSineSetShape>:
}
    6d00:	4770      	bx	lr
    6d02:	bf00      	nop
    6d04:	f3af 8000 	nop.w
    6d08:	f3af 8000 	nop.w
    6d0c:	f3af 8000 	nop.w
    6d10:	f3af 8000 	nop.w
    6d14:	f3af 8000 	nop.w
    6d18:	f3af 8000 	nop.w
    6d1c:	f3af 8000 	nop.w

00006d20 <lfoTriSetShape>:
}
    6d20:	4770      	bx	lr
    6d22:	bf00      	nop
    6d24:	f3af 8000 	nop.w
    6d28:	f3af 8000 	nop.w
    6d2c:	f3af 8000 	nop.w
    6d30:	f3af 8000 	nop.w
    6d34:	f3af 8000 	nop.w
    6d38:	f3af 8000 	nop.w
    6d3c:	f3af 8000 	nop.w

00006d40 <lfoSawSetShape>:
}
    6d40:	4770      	bx	lr
    6d42:	bf00      	nop
    6d44:	f3af 8000 	nop.w
    6d48:	f3af 8000 	nop.w
    6d4c:	f3af 8000 	nop.w
    6d50:	f3af 8000 	nop.w
    6d54:	f3af 8000 	nop.w
    6d58:	f3af 8000 	nop.w
    6d5c:	f3af 8000 	nop.w

00006d60 <lfoPulseSetShape>:
{
    6d60:	b508      	push	{r3, lr}
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    6d62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6d66:	4803      	ldr	r0, [pc, #12]	; (6d74 <lfoPulseSetShape+0x14>)
    6d68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6d6c:	f002 fad8 	bl	9320 <__tSquareLFO_setPulseWidth_veneer>
}
    6d70:	bd08      	pop	{r3, pc}
    6d72:	bf00      	nop
    6d74:	2001d2c8 	.word	0x2001d2c8
    6d78:	f3af 8000 	nop.w
    6d7c:	f3af 8000 	nop.w

00006d80 <clipperGainSet>:
{
    6d80:	b538      	push	{r3, r4, r5, lr}
    6d82:	4605      	mov	r5, r0
    6d84:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 24.0f);
    6d86:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    6d8a:	ee20 0a27 	vmul.f32	s0, s0, s15
    6d8e:	f002 fb53 	bl	9438 <__dbToATableLookup_veneer>
    6d92:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    6d96:	4b03      	ldr	r3, [pc, #12]	; (6da4 <clipperGainSet+0x24>)
    6d98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6d9c:	ed83 0a00 	vstr	s0, [r3]
}
    6da0:	bd38      	pop	{r3, r4, r5, pc}
    6da2:	bf00      	nop
    6da4:	2001d598 	.word	0x2001d598
    6da8:	f3af 8000 	nop.w
    6dac:	f3af 8000 	nop.w
    6db0:	f3af 8000 	nop.w
    6db4:	f3af 8000 	nop.w
    6db8:	f3af 8000 	nop.w
    6dbc:	f3af 8000 	nop.w

00006dc0 <wavefolderParam1>:
{
    6dc0:	b538      	push	{r3, r4, r5, lr}
    6dc2:	4605      	mov	r5, r0
    6dc4:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 12.0f);
    6dc6:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    6dca:	ee20 0a27 	vmul.f32	s0, s0, s15
    6dce:	f002 fb33 	bl	9438 <__dbToATableLookup_veneer>
    6dd2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    6dd6:	4b03      	ldr	r3, [pc, #12]	; (6de4 <wavefolderParam1+0x24>)
    6dd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6ddc:	ed83 0a00 	vstr	s0, [r3]
}
    6de0:	bd38      	pop	{r3, r4, r5, pc}
    6de2:	bf00      	nop
    6de4:	2001d598 	.word	0x2001d598
    6de8:	f3af 8000 	nop.w
    6dec:	f3af 8000 	nop.w
    6df0:	f3af 8000 	nop.w
    6df4:	f3af 8000 	nop.w
    6df8:	f3af 8000 	nop.w
    6dfc:	f3af 8000 	nop.w

00006e00 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    6e00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6e04:	ee70 6a27 	vadd.f32	s13, s0, s15
    6e08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    6e0c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6e10:	4b05      	ldr	r3, [pc, #20]	; (6e28 <wavefolderParam3+0x28>)
    6e12:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6e16:	ed83 7a00 	vstr	s14, [r3]
	param3[v][string] = value;
    6e1a:	4b04      	ldr	r3, [pc, #16]	; (6e2c <wavefolderParam3+0x2c>)
    6e1c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    6e20:	ed83 0a00 	vstr	s0, [r3]
}
    6e24:	4770      	bx	lr
    6e26:	bf00      	nop
    6e28:	2001d2a4 	.word	0x2001d2a4
    6e2c:	2001d5d8 	.word	0x2001d5d8
    6e30:	f3af 8000 	nop.w
    6e34:	f3af 8000 	nop.w
    6e38:	f3af 8000 	nop.w
    6e3c:	f3af 8000 	nop.w

00006e40 <tiltParam1>:
{
    6e40:	b538      	push	{r3, r4, r5, lr}
    6e42:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    6e46:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6e4a:	008d      	lsls	r5, r1, #2
    6e4c:	4c0e      	ldr	r4, [pc, #56]	; (6e88 <tiltParam1+0x48>)
    6e4e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    6e52:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
    6e56:	ee20 8a27 	vmul.f32	s16, s0, s15
    6e5a:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    6e5e:	ee38 8a67 	vsub.f32	s16, s16, s15
    6e62:	eeb1 0a48 	vneg.f32	s0, s16
    6e66:	f002 fae7 	bl	9438 <__dbToATableLookup_veneer>
    6e6a:	4620      	mov	r0, r4
    6e6c:	f002 f9c4 	bl	91f8 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    6e70:	4c06      	ldr	r4, [pc, #24]	; (6e8c <tiltParam1+0x4c>)
    6e72:	442c      	add	r4, r5
    6e74:	eeb0 0a48 	vmov.f32	s0, s16
    6e78:	f002 fade 	bl	9438 <__dbToATableLookup_veneer>
    6e7c:	4620      	mov	r0, r4
    6e7e:	f002 f9cf 	bl	9220 <__tVZFilterHS_setGain_veneer>
}
    6e82:	ecbd 8b02 	vpop	{d8}
    6e86:	bd38      	pop	{r3, r4, r5, pc}
    6e88:	2001d70c 	.word	0x2001d70c
    6e8c:	2001d72c 	.word	0x2001d72c
    6e90:	f3af 8000 	nop.w
    6e94:	f3af 8000 	nop.w
    6e98:	f3af 8000 	nop.w
    6e9c:	f3af 8000 	nop.w

00006ea0 <tiltParam2>:
{
    6ea0:	b538      	push	{r3, r4, r5, lr}
    6ea2:	4605      	mov	r5, r0
    6ea4:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    6ea6:	eddf 7a0f 	vldr	s15, [pc, #60]	; 6ee4 <tiltParam2+0x44>
    6eaa:	ee20 0a27 	vmul.f32	s0, s0, s15
    6eae:	eddf 7a0e 	vldr	s15, [pc, #56]	; 6ee8 <tiltParam2+0x48>
    6eb2:	ee30 0a27 	vadd.f32	s0, s0, s15
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    6eb6:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
    6eba:	ee30 0a67 	vsub.f32	s0, s0, s15
    6ebe:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 6eec <tiltParam2+0x4c>
    6ec2:	eddf 0a0b 	vldr	s1, [pc, #44]	; 6ef0 <tiltParam2+0x50>
    6ec6:	ee60 0a20 	vmul.f32	s1, s0, s1
    6eca:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 6ef4 <tiltParam2+0x54>
    6ece:	f002 f943 	bl	9158 <__LEAF_clip_veneer>
	tVZFilterBell_setFreq(&bell1[v][string], value);
    6ed2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    6ed6:	4808      	ldr	r0, [pc, #32]	; (6ef8 <tiltParam2+0x58>)
    6ed8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    6edc:	f002 fbd4 	bl	9688 <__tVZFilterBell_setFreq_veneer>
}
    6ee0:	bd38      	pop	{r3, r4, r5, pc}
    6ee2:	bf00      	nop
    6ee4:	429a0000 	.word	0x429a0000
    6ee8:	42280000 	.word	0x42280000
    6eec:	457ff000 	.word	0x457ff000
    6ef0:	420fb824 	.word	0x420fb824
    6ef4:	00000000 	.word	0x00000000
    6ef8:	2001cf38 	.word	0x2001cf38
    6efc:	f3af 8000 	nop.w

00006f00 <tiltParam3>:
{
    6f00:	b508      	push	{r3, lr}
	tVZFilterBell_setBandwidth(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    6f02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6f06:	ee30 0a27 	vadd.f32	s0, s0, s15
    6f0a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6f0e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    6f12:	ee20 0a27 	vmul.f32	s0, s0, s15
    6f16:	4803      	ldr	r0, [pc, #12]	; (6f24 <tiltParam3+0x24>)
    6f18:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    6f1c:	f002 fb00 	bl	9520 <__tVZFilterBell_setBandwidth_veneer>
}
    6f20:	bd08      	pop	{r3, pc}
    6f22:	bf00      	nop
    6f24:	2001cf38 	.word	0x2001cf38
    6f28:	f3af 8000 	nop.w
    6f2c:	f3af 8000 	nop.w
    6f30:	f3af 8000 	nop.w
    6f34:	f3af 8000 	nop.w
    6f38:	f3af 8000 	nop.w
    6f3c:	f3af 8000 	nop.w

00006f40 <tiltParam4>:
{
    6f40:	b510      	push	{r4, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    6f42:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6f46:	4c08      	ldr	r4, [pc, #32]	; (6f68 <tiltParam4+0x28>)
    6f48:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    6f4c:	eddf 7a07 	vldr	s15, [pc, #28]	; 6f6c <tiltParam4+0x2c>
    6f50:	ee20 0a27 	vmul.f32	s0, s0, s15
    6f54:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
    6f58:	ee30 0a67 	vsub.f32	s0, s0, s15
    6f5c:	f002 fa6c 	bl	9438 <__dbToATableLookup_veneer>
    6f60:	4620      	mov	r0, r4
    6f62:	f002 fb21 	bl	95a8 <__tVZFilterBell_setGain_veneer>
}
    6f66:	bd10      	pop	{r4, pc}
    6f68:	2001cf38 	.word	0x2001cf38
    6f6c:	42080000 	.word	0x42080000
    6f70:	f3af 8000 	nop.w
    6f74:	f3af 8000 	nop.w
    6f78:	f3af 8000 	nop.w
    6f7c:	f3af 8000 	nop.w

00006f80 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    6f80:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6f84:	4b04      	ldr	r3, [pc, #16]	; (6f98 <compressorParam1+0x18>)
    6f86:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6f8a:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    6f8e:	ee20 0a27 	vmul.f32	s0, s0, s15
    6f92:	ed83 0a03 	vstr	s0, [r3, #12]
}
    6f96:	4770      	bx	lr
    6f98:	2001cf58 	.word	0x2001cf58
    6f9c:	f3af 8000 	nop.w

00006fa0 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    6fa0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    6fa4:	ee20 0a27 	vmul.f32	s0, s0, s15
    6fa8:	4b09      	ldr	r3, [pc, #36]	; (6fd0 <compressorParam2+0x30>)
    6faa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6fae:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    6fb2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6fb6:	ee30 0a27 	vadd.f32	s0, s0, s15
    6fba:	ed82 0a04 	vstr	s0, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    6fbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6fc2:	edd3 6a04 	vldr	s13, [r3, #16]
    6fc6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    6fca:	ed83 7a07 	vstr	s14, [r3, #28]
}
    6fce:	4770      	bx	lr
    6fd0:	2001cf58 	.word	0x2001cf58
    6fd4:	f3af 8000 	nop.w
    6fd8:	f3af 8000 	nop.w
    6fdc:	f3af 8000 	nop.w

00006fe0 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    6fe0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    6fe4:	4b04      	ldr	r3, [pc, #16]	; (6ff8 <compressorParam3+0x18>)
    6fe6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    6fea:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    6fee:	ee20 0a27 	vmul.f32	s0, s0, s15
    6ff2:	ed83 0a06 	vstr	s0, [r3, #24]
}
    6ff6:	4770      	bx	lr
    6ff8:	2001cf58 	.word	0x2001cf58
    6ffc:	f3af 8000 	nop.w

00007000 <compressorParam4>:
{
    7000:	b510      	push	{r4, lr}
	value = (value +  0.001f);
    7002:	eddf 7a0b 	vldr	s15, [pc, #44]	; 7030 <compressorParam4+0x30>
    7006:	ee30 0a27 	vadd.f32	s0, s0, s15
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    700a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    700e:	4b09      	ldr	r3, [pc, #36]	; (7034 <compressorParam4+0x34>)
    7010:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    7014:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
    7018:	ee67 7a80 	vmul.f32	s15, s15, s0
    701c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    7020:	ee80 0a27 	vdiv.f32	s0, s0, s15
    7024:	f002 fb20 	bl	9668 <__fasterexpf_veneer>
    7028:	ed84 0a01 	vstr	s0, [r4, #4]
}
    702c:	bd10      	pop	{r4, pc}
    702e:	bf00      	nop
    7030:	3a83126f 	.word	0x3a83126f
    7034:	2001cf58 	.word	0x2001cf58
    7038:	f3af 8000 	nop.w
    703c:	f3af 8000 	nop.w

00007040 <compressorParam5>:
{
    7040:	b510      	push	{r4, lr}
	value = (value + 0.001f);
    7042:	eddf 7a0b 	vldr	s15, [pc, #44]	; 7070 <compressorParam5+0x30>
    7046:	ee30 0a27 	vadd.f32	s0, s0, s15
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    704a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    704e:	4b09      	ldr	r3, [pc, #36]	; (7074 <compressorParam5+0x34>)
    7050:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
    7054:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
    7058:	ee67 7a80 	vmul.f32	s15, s15, s0
    705c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    7060:	ee80 0a27 	vdiv.f32	s0, s0, s15
    7064:	f002 fb00 	bl	9668 <__fasterexpf_veneer>
    7068:	ed84 0a02 	vstr	s0, [r4, #8]
}
    706c:	bd10      	pop	{r4, pc}
    706e:	bf00      	nop
    7070:	3a83126f 	.word	0x3a83126f
    7074:	2001cf58 	.word	0x2001cf58
    7078:	f3af 8000 	nop.w
    707c:	f3af 8000 	nop.w

00007080 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    7080:	ee30 0a00 	vadd.f32	s0, s0, s0
    7084:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7088:	ee30 0a67 	vsub.f32	s0, s0, s15
    708c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7090:	4b02      	ldr	r3, [pc, #8]	; (709c <offsetParam2+0x1c>)
    7092:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7096:	ed83 0a00 	vstr	s0, [r3]
}
    709a:	4770      	bx	lr
    709c:	2001d5b8 	.word	0x2001d5b8

000070a0 <param2Linear>:
	param2[v][string] = value;
    70a0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    70a4:	4b02      	ldr	r3, [pc, #8]	; (70b0 <param2Linear+0x10>)
    70a6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    70aa:	ed83 0a00 	vstr	s0, [r3]
}
    70ae:	4770      	bx	lr
    70b0:	2001d5b8 	.word	0x2001d5b8
    70b4:	f3af 8000 	nop.w
    70b8:	f3af 8000 	nop.w
    70bc:	f3af 8000 	nop.w

000070c0 <param3Linear>:
	param3[v][string] = value;
    70c0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    70c4:	4b02      	ldr	r3, [pc, #8]	; (70d0 <param3Linear+0x10>)
    70c6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    70ca:	ed83 0a00 	vstr	s0, [r3]
}
    70ce:	4770      	bx	lr
    70d0:	2001d5d8 	.word	0x2001d5d8
    70d4:	f3af 8000 	nop.w
    70d8:	f3af 8000 	nop.w
    70dc:	f3af 8000 	nop.w

000070e0 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    70e0:	eddf 7a11 	vldr	s15, [pc, #68]	; 7128 <param3Soft+0x48>
    70e4:	ee20 0a27 	vmul.f32	s0, s0, s15
    70e8:	eddf 7a10 	vldr	s15, [pc, #64]	; 712c <param3Soft+0x4c>
    70ec:	ee30 0a27 	vadd.f32	s0, s0, s15
    70f0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    70f4:	4b0e      	ldr	r3, [pc, #56]	; (7130 <param3Soft+0x50>)
    70f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    70fa:	ed83 0a00 	vstr	s0, [r3]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    70fe:	ee60 7a00 	vmul.f32	s15, s0, s0
    7102:	ee60 7a27 	vmul.f32	s15, s0, s15
    7106:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 7134 <param3Soft+0x54>
    710a:	ee67 7a87 	vmul.f32	s15, s15, s14
    710e:	ee30 0a67 	vsub.f32	s0, s0, s15
    7112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7116:	eec7 7a00 	vdiv.f32	s15, s14, s0
    711a:	4b07      	ldr	r3, [pc, #28]	; (7138 <param3Soft+0x58>)
    711c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7120:	edc3 7a00 	vstr	s15, [r3]
}
    7124:	4770      	bx	lr
    7126:	bf00      	nop
    7128:	3f7d70a4 	.word	0x3f7d70a4
    712c:	3c23d70a 	.word	0x3c23d70a
    7130:	2001d5d8 	.word	0x2001d5d8
    7134:	3eaaaaaa 	.word	0x3eaaaaaa
    7138:	2001d6e0 	.word	0x2001d6e0
    713c:	f3af 8000 	nop.w

00007140 <param3Hard>:
{
    7140:	b538      	push	{r3, r4, r5, lr}
    7142:	4605      	mov	r5, r0
    7144:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    7146:	eddf 7a14 	vldr	s15, [pc, #80]	; 7198 <param3Hard+0x58>
    714a:	ee20 0a27 	vmul.f32	s0, s0, s15
    714e:	eddf 7a13 	vldr	s15, [pc, #76]	; 719c <param3Hard+0x5c>
    7152:	ee30 0a27 	vadd.f32	s0, s0, s15
    7156:	eddf 7a12 	vldr	s15, [pc, #72]	; 71a0 <param3Hard+0x60>
    715a:	ee20 0a27 	vmul.f32	s0, s0, s15
    715e:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    7162:	4b10      	ldr	r3, [pc, #64]	; (71a4 <param3Hard+0x64>)
    7164:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7168:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
    716c:	f002 f884 	bl	9278 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    7170:	eeb5 0a40 	vcmp.f32	s0, #0.0
    7174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7178:	d101      	bne.n	717e <param3Hard+0x3e>
		tempDiv = 0.001f;
    717a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 71a8 <param3Hard+0x68>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    717e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7182:	eec7 7a00 	vdiv.f32	s15, s14, s0
    7186:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    718a:	4b08      	ldr	r3, [pc, #32]	; (71ac <param3Hard+0x6c>)
    718c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7190:	edc3 7a00 	vstr	s15, [r3]
}
    7194:	bd38      	pop	{r3, r4, r5, pc}
    7196:	bf00      	nop
    7198:	3f7d70a4 	.word	0x3f7d70a4
    719c:	3c23d70a 	.word	0x3c23d70a
    71a0:	3fc90fdb 	.word	0x3fc90fdb
    71a4:	2001d5d8 	.word	0x2001d5d8
    71a8:	3a83126f 	.word	0x3a83126f
    71ac:	2001d6c0 	.word	0x2001d6c0
    71b0:	f3af 8000 	nop.w
    71b4:	f3af 8000 	nop.w
    71b8:	f3af 8000 	nop.w
    71bc:	f3af 8000 	nop.w

000071c0 <param3Poly>:
{
    71c0:	b538      	push	{r3, r4, r5, lr}
    71c2:	4605      	mov	r5, r0
    71c4:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    71c6:	eddf 7a14 	vldr	s15, [pc, #80]	; 7218 <param3Poly+0x58>
    71ca:	ee20 0a27 	vmul.f32	s0, s0, s15
    71ce:	eddf 7a13 	vldr	s15, [pc, #76]	; 721c <param3Poly+0x5c>
    71d2:	ee30 0a27 	vadd.f32	s0, s0, s15
    71d6:	eddf 7a12 	vldr	s15, [pc, #72]	; 7220 <param3Poly+0x60>
    71da:	ee20 0a27 	vmul.f32	s0, s0, s15
    71de:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    71e2:	4b10      	ldr	r3, [pc, #64]	; (7224 <param3Poly+0x64>)
    71e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    71e8:	ed83 0a00 	vstr	s0, [r3]
    float tempDiv = fastSine(param3[v][string]);
    71ec:	f002 f894 	bl	9318 <__fastSine_veneer>
    if (tempDiv == 0.0f)
    71f0:	eeb5 0a40 	vcmp.f32	s0, #0.0
    71f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    71f8:	d101      	bne.n	71fe <param3Poly+0x3e>
        tempDiv = 0.001f;
    71fa:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 7228 <param3Poly+0x68>
    polyDivider[v][string] = 1.0f/tempDiv;
    71fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7202:	eec7 7a00 	vdiv.f32	s15, s14, s0
    7206:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    720a:	4b08      	ldr	r3, [pc, #32]	; (722c <param3Poly+0x6c>)
    720c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7210:	edc3 7a00 	vstr	s15, [r3]
}
    7214:	bd38      	pop	{r3, r4, r5, pc}
    7216:	bf00      	nop
    7218:	3f7d70a4 	.word	0x3f7d70a4
    721c:	3c23d70a 	.word	0x3c23d70a
    7220:	3fc90fdb 	.word	0x3fc90fdb
    7224:	2001d5d8 	.word	0x2001d5d8
    7228:	3a83126f 	.word	0x3a83126f
    722c:	2001d650 	.word	0x2001d650
    7230:	f3af 8000 	nop.w
    7234:	f3af 8000 	nop.w
    7238:	f3af 8000 	nop.w
    723c:	f3af 8000 	nop.w

00007240 <param4Linear>:
	param4[v][string] = value;
    7240:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7244:	4b02      	ldr	r3, [pc, #8]	; (7250 <param4Linear+0x10>)
    7246:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    724a:	ed83 0a00 	vstr	s0, [r3]
}
    724e:	4770      	bx	lr
    7250:	2001d5f8 	.word	0x2001d5f8
    7254:	f3af 8000 	nop.w
    7258:	f3af 8000 	nop.w
    725c:	f3af 8000 	nop.w

00007260 <param5Linear>:
	param5[v][string] = value;
    7260:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7264:	4b02      	ldr	r3, [pc, #8]	; (7270 <param5Linear+0x10>)
    7266:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    726a:	ed83 0a00 	vstr	s0, [r3]
}
    726e:	4770      	bx	lr
    7270:	2001d618 	.word	0x2001d618
    7274:	f3af 8000 	nop.w
    7278:	f3af 8000 	nop.w
    727c:	f3af 8000 	nop.w

00007280 <param2BC>:
{
    7280:	b508      	push	{r3, lr}
	tCrusher_setQuality (&bc[v][string],value);
    7282:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7286:	4803      	ldr	r0, [pc, #12]	; (7294 <param2BC+0x14>)
    7288:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    728c:	f002 f838 	bl	9300 <__tCrusher_setQuality_veneer>
}
    7290:	bd08      	pop	{r3, pc}
    7292:	bf00      	nop
    7294:	2001cf18 	.word	0x2001cf18
    7298:	f3af 8000 	nop.w
    729c:	f3af 8000 	nop.w

000072a0 <param3BC>:
{
    72a0:	b508      	push	{r3, lr}
	value = (value * inv_oversample) + 0.01f;
    72a2:	4b08      	ldr	r3, [pc, #32]	; (72c4 <param3BC+0x24>)
    72a4:	edd3 7a00 	vldr	s15, [r3]
    72a8:	ee20 0a27 	vmul.f32	s0, s0, s15
	tCrusher_setSamplingRatio (&bc[v][string], value);
    72ac:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    72b0:	eddf 7a05 	vldr	s15, [pc, #20]	; 72c8 <param3BC+0x28>
    72b4:	ee30 0a27 	vadd.f32	s0, s0, s15
    72b8:	4804      	ldr	r0, [pc, #16]	; (72cc <param3BC+0x2c>)
    72ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    72be:	f001 ffcb 	bl	9258 <__tCrusher_setSamplingRatio_veneer>
}
    72c2:	bd08      	pop	{r3, pc}
    72c4:	20000ad0 	.word	0x20000ad0
    72c8:	3c23d70a 	.word	0x3c23d70a
    72cc:	2001cf18 	.word	0x2001cf18
    72d0:	f3af 8000 	nop.w
    72d4:	f3af 8000 	nop.w
    72d8:	f3af 8000 	nop.w
    72dc:	f3af 8000 	nop.w

000072e0 <param4BC>:
{
    72e0:	b508      	push	{r3, lr}
	tCrusher_setRound(&bc[v][string], value);
    72e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    72e6:	4803      	ldr	r0, [pc, #12]	; (72f4 <param4BC+0x14>)
    72e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    72ec:	f001 ff88 	bl	9200 <__tCrusher_setRound_veneer>
}
    72f0:	bd08      	pop	{r3, pc}
    72f2:	bf00      	nop
    72f4:	2001cf18 	.word	0x2001cf18
    72f8:	f3af 8000 	nop.w
    72fc:	f3af 8000 	nop.w

00007300 <param5BC>:
{
    7300:	b508      	push	{r3, lr}
	tCrusher_setOperation(&bc[v][string], value);
    7302:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7306:	4803      	ldr	r0, [pc, #12]	; (7314 <param5BC+0x14>)
    7308:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    730c:	f001 ffcc 	bl	92a8 <__tCrusher_setOperation_veneer>
}
    7310:	bd08      	pop	{r3, pc}
    7312:	bf00      	nop
    7314:	2001cf18 	.word	0x2001cf18
    7318:	f3af 8000 	nop.w
    731c:	f3af 8000 	nop.w

00007320 <fxMixSet>:
	fxMix[v][string] = value;
    7320:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7324:	4b02      	ldr	r3, [pc, #8]	; (7330 <fxMixSet+0x10>)
    7326:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    732a:	ed83 0a00 	vstr	s0, [r3]
}
    732e:	4770      	bx	lr
    7330:	2001d1d4 	.word	0x2001d1d4
    7334:	f3af 8000 	nop.w
    7338:	f3af 8000 	nop.w
    733c:	f3af 8000 	nop.w

00007340 <fxPostGainSet>:
{
    7340:	b538      	push	{r3, r4, r5, lr}
    7342:	4605      	mov	r5, r0
    7344:	460c      	mov	r4, r1
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    7346:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
    734a:	ee20 0a27 	vmul.f32	s0, s0, s15
    734e:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
    7352:	ee30 0a67 	vsub.f32	s0, s0, s15
    7356:	f002 f86f 	bl	9438 <__dbToATableLookup_veneer>
    735a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    735e:	4b03      	ldr	r3, [pc, #12]	; (736c <fxPostGainSet+0x2c>)
    7360:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7364:	ed83 0a00 	vstr	s0, [r3]
}
    7368:	bd38      	pop	{r3, r4, r5, pc}
    736a:	bf00      	nop
    736c:	2001d1f4 	.word	0x2001d1f4
    7370:	f3af 8000 	nop.w
    7374:	f3af 8000 	nop.w
    7378:	f3af 8000 	nop.w
    737c:	f3af 8000 	nop.w

00007380 <wavefolderTick>:
{
    7380:	b510      	push	{r4, lr}
    7382:	ed2d 8b02 	vpush	{d8}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7386:	eb01 0340 	add.w	r3, r1, r0, lsl #1
    738a:	4a4b      	ldr	r2, [pc, #300]	; (74b8 <wavefolderTick+0x138>)
    738c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    7390:	edd2 7a00 	vldr	s15, [r2]
    7394:	ee27 0a80 	vmul.f32	s0, s15, s0
    7398:	4a48      	ldr	r2, [pc, #288]	; (74bc <wavefolderTick+0x13c>)
    739a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    739e:	ed92 7a00 	vldr	s14, [r2]
    73a2:	ee67 7a87 	vmul.f32	s15, s15, s14
    73a6:	ee30 0a27 	vadd.f32	s0, s0, s15
    float curFB = param3[v][string];
    73aa:	4a45      	ldr	r2, [pc, #276]	; (74c0 <wavefolderTick+0x140>)
    73ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    73b0:	edd2 6a00 	vldr	s13, [r2]
    float curFF = param4[v][string];
    73b4:	4a43      	ldr	r2, [pc, #268]	; (74c4 <wavefolderTick+0x144>)
    73b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    73ba:	ed93 6a00 	vldr	s12, [r3]
    if (ffSample <= -1.0f)
    73be:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    73c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
    73c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73ca:	d90c      	bls.n	73e6 <wavefolderTick+0x66>
    } else if (ffSample >= 1.0f)
    73cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    73d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
    73d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    73d8:	db02      	blt.n	73e0 <wavefolderTick+0x60>
    	ffSample = 1.0f;
    73da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    73de:	e004      	b.n	73ea <wavefolderTick+0x6a>
    float ffSample = sample;
    73e0:	eef0 7a40 	vmov.f32	s15, s0
    73e4:	e001      	b.n	73ea <wavefolderTick+0x6a>
    	ffSample = -1.0f;
    73e6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    73ea:	ee27 7aa7 	vmul.f32	s14, s15, s15
    73ee:	ee27 7a27 	vmul.f32	s14, s14, s15
    73f2:	eddf 5a35 	vldr	s11, [pc, #212]	; 74c8 <wavefolderTick+0x148>
    73f6:	ee27 7a25 	vmul.f32	s14, s14, s11
    73fa:	ee37 8ac7 	vsub.f32	s16, s15, s14
    ffSample *= 1.499999f;
    73fe:	eddf 7a33 	vldr	s15, [pc, #204]	; 74cc <wavefolderTick+0x14c>
    7402:	ee28 8a27 	vmul.f32	s16, s16, s15
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    7406:	ee26 8a08 	vmul.f32	s16, s12, s16
    740a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    740e:	ee77 7ac6 	vsub.f32	s15, s15, s12
    7412:	ee67 7a80 	vmul.f32	s15, s15, s0
    7416:	ee38 8a27 	vadd.f32	s16, s16, s15
    float fbSample = wfState[v][string];
    741a:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    741e:	4b2c      	ldr	r3, [pc, #176]	; (74d0 <wavefolderTick+0x150>)
    7420:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7424:	edd3 7a00 	vldr	s15, [r3]
    if (fbSample <= -1.0f)
    7428:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    742c:	eef4 7ac7 	vcmpe.f32	s15, s14
    7430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7434:	d909      	bls.n	744a <wavefolderTick+0xca>
    } else if (fbSample >= 1.0f)
    7436:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    743a:	eef4 7ac7 	vcmpe.f32	s15, s14
    743e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7442:	db04      	blt.n	744e <wavefolderTick+0xce>
    	fbSample = 1.0f;
    7444:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7448:	e001      	b.n	744e <wavefolderTick+0xce>
    	fbSample = -1.0f;
    744a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    744e:	ee27 7aa7 	vmul.f32	s14, s15, s15
    7452:	ee27 7a27 	vmul.f32	s14, s14, s15
    7456:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 74c8 <wavefolderTick+0x148>
    745a:	ee27 7a06 	vmul.f32	s14, s14, s12
    745e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    fbSample *= 1.499999f;
    7462:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 74cc <wavefolderTick+0x14c>
    7466:	ee67 7a87 	vmul.f32	s15, s15, s14
    float fb = curFB * fbSample;
    746a:	ee66 7aa7 	vmul.f32	s15, s13, s15
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    746e:	ee38 8a27 	vadd.f32	s16, s16, s15
    7472:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7476:	008c      	lsls	r4, r1, #2
    7478:	4b16      	ldr	r3, [pc, #88]	; (74d4 <wavefolderTick+0x154>)
    747a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    747e:	edd3 8a00 	vldr	s17, [r3]
    7482:	eddf 7a15 	vldr	s15, [pc, #84]	; 74d8 <wavefolderTick+0x158>
    7486:	ee20 0a27 	vmul.f32	s0, s0, s15
    748a:	f001 fef5 	bl	9278 <__arm_sin_f32_veneer>
    748e:	ee68 8a80 	vmul.f32	s17, s17, s0
    7492:	ee38 0a68 	vsub.f32	s0, s16, s17
    7496:	4b0e      	ldr	r3, [pc, #56]	; (74d0 <wavefolderTick+0x150>)
    7498:	4423      	add	r3, r4
    749a:	ed83 0a00 	vstr	s0, [r3]
    sample = wfState[v][string] * invCurFB[v][string];
    749e:	4b0f      	ldr	r3, [pc, #60]	; (74dc <wavefolderTick+0x15c>)
    74a0:	4423      	add	r3, r4
    74a2:	edd3 7a00 	vldr	s15, [r3]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    74a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    74aa:	480d      	ldr	r0, [pc, #52]	; (74e0 <wavefolderTick+0x160>)
    74ac:	4420      	add	r0, r4
    74ae:	f002 f8bb 	bl	9628 <__tHighpass_tick_veneer>
}
    74b2:	ecbd 8b02 	vpop	{d8}
    74b6:	bd10      	pop	{r4, pc}
    74b8:	2001d598 	.word	0x2001d598
    74bc:	2001d5b8 	.word	0x2001d5b8
    74c0:	2001d5d8 	.word	0x2001d5d8
    74c4:	2001d5f8 	.word	0x2001d5f8
    74c8:	3eaaaaaa 	.word	0x3eaaaaaa
    74cc:	3fbffff8 	.word	0x3fbffff8
    74d0:	2001d918 	.word	0x2001d918
    74d4:	2001d618 	.word	0x2001d618
    74d8:	40c90fdb 	.word	0x40c90fdb
    74dc:	2001d2a4 	.word	0x2001d2a4
    74e0:	2001cf78 	.word	0x2001cf78
    74e4:	f3af 8000 	nop.w
    74e8:	f3af 8000 	nop.w
    74ec:	f3af 8000 	nop.w
    74f0:	f3af 8000 	nop.w
    74f4:	f3af 8000 	nop.w
    74f8:	f3af 8000 	nop.w
    74fc:	f3af 8000 	nop.w

00007500 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    7500:	eddf 7a07 	vldr	s15, [pc, #28]	; 7520 <chorusParam1+0x20>
    7504:	ee20 0a27 	vmul.f32	s0, s0, s15
    7508:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    750c:	ee30 0a27 	vadd.f32	s0, s0, s15
    7510:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7514:	4b03      	ldr	r3, [pc, #12]	; (7524 <chorusParam1+0x24>)
    7516:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    751a:	ed83 0a00 	vstr	s0, [r3]
}
    751e:	4770      	bx	lr
    7520:	45b4a000 	.word	0x45b4a000
    7524:	2001d598 	.word	0x2001d598
    7528:	f3af 8000 	nop.w
    752c:	f3af 8000 	nop.w
    7530:	f3af 8000 	nop.w
    7534:	f3af 8000 	nop.w
    7538:	f3af 8000 	nop.w
    753c:	f3af 8000 	nop.w

00007540 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    7540:	eddf 7a05 	vldr	s15, [pc, #20]	; 7558 <chorusParam2+0x18>
    7544:	ee20 0a27 	vmul.f32	s0, s0, s15
    7548:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    754c:	4b03      	ldr	r3, [pc, #12]	; (755c <chorusParam2+0x1c>)
    754e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7552:	ed83 0a00 	vstr	s0, [r3]
}
    7556:	4770      	bx	lr
    7558:	3dcccccd 	.word	0x3dcccccd
    755c:	2001d5b8 	.word	0x2001d5b8

00007560 <chorusParam3>:
{
    7560:	b508      	push	{r3, lr}
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    7562:	eddf 7a08 	vldr	s15, [pc, #32]	; 7584 <chorusParam3+0x24>
    7566:	ee20 0a27 	vmul.f32	s0, s0, s15
    756a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    756e:	eddf 7a06 	vldr	s15, [pc, #24]	; 7588 <chorusParam3+0x28>
    7572:	ee30 0a27 	vadd.f32	s0, s0, s15
    7576:	4805      	ldr	r0, [pc, #20]	; (758c <chorusParam3+0x2c>)
    7578:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    757c:	f001 fe44 	bl	9208 <__tCycle_setFreq_veneer>
}
    7580:	bd08      	pop	{r3, pc}
    7582:	bf00      	nop
    7584:	3ecccccd 	.word	0x3ecccccd
    7588:	3c23d70a 	.word	0x3c23d70a
    758c:	2001d4c0 	.word	0x2001d4c0
    7590:	f3af 8000 	nop.w
    7594:	f3af 8000 	nop.w
    7598:	f3af 8000 	nop.w
    759c:	f3af 8000 	nop.w

000075a0 <chorusParam4>:
{
    75a0:	b508      	push	{r3, lr}
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    75a2:	eddf 7a08 	vldr	s15, [pc, #32]	; 75c4 <chorusParam4+0x24>
    75a6:	ee20 0a27 	vmul.f32	s0, s0, s15
    75aa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    75ae:	eddf 7a06 	vldr	s15, [pc, #24]	; 75c8 <chorusParam4+0x28>
    75b2:	ee30 0a27 	vadd.f32	s0, s0, s15
    75b6:	4805      	ldr	r0, [pc, #20]	; (75cc <chorusParam4+0x2c>)
    75b8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    75bc:	f001 fe24 	bl	9208 <__tCycle_setFreq_veneer>
}
    75c0:	bd08      	pop	{r3, pc}
    75c2:	bf00      	nop
    75c4:	3ee38e37 	.word	0x3ee38e37
    75c8:	3c343958 	.word	0x3c343958
    75cc:	2001d4e0 	.word	0x2001d4e0
    75d0:	f3af 8000 	nop.w
    75d4:	f3af 8000 	nop.w
    75d8:	f3af 8000 	nop.w
    75dc:	f3af 8000 	nop.w

000075e0 <delayParam1>:
{
    75e0:	b508      	push	{r3, lr}
    tTapeDelay_setDelay(&tapeDelay[v][string], value * 30000.0f + 1.0f);
    75e2:	eddf 7a08 	vldr	s15, [pc, #32]	; 7604 <delayParam1+0x24>
    75e6:	ee20 0a27 	vmul.f32	s0, s0, s15
    75ea:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    75ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    75f2:	ee30 0a27 	vadd.f32	s0, s0, s15
    75f6:	4804      	ldr	r0, [pc, #16]	; (7608 <delayParam1+0x28>)
    75f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    75fc:	f002 f820 	bl	9640 <__tTapeDelay_setDelay_veneer>
}
    7600:	bd08      	pop	{r3, pc}
    7602:	bf00      	nop
    7604:	46ea6000 	.word	0x46ea6000
    7608:	2001d8ac 	.word	0x2001d8ac
    760c:	f3af 8000 	nop.w
    7610:	f3af 8000 	nop.w
    7614:	f3af 8000 	nop.w
    7618:	f3af 8000 	nop.w
    761c:	f3af 8000 	nop.w

00007620 <delayParam2>:
{
    7620:	b538      	push	{r3, r4, r5, lr}
    7622:	4605      	mov	r5, r0
    7624:	460c      	mov	r4, r1
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    7626:	ed9f 1a08 	vldr	s2, [pc, #32]	; 7648 <delayParam2+0x28>
    762a:	ee60 0a01 	vmul.f32	s1, s0, s2
    762e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 764c <delayParam2+0x2c>
    7632:	f001 fd91 	bl	9158 <__LEAF_clip_veneer>
    7636:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    763a:	4b05      	ldr	r3, [pc, #20]	; (7650 <delayParam2+0x30>)
    763c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7640:	ed83 0a00 	vstr	s0, [r3]
}
    7644:	bd38      	pop	{r3, r4, r5, pc}
    7646:	bf00      	nop
    7648:	3f8ccccd 	.word	0x3f8ccccd
    764c:	00000000 	.word	0x00000000
    7650:	2001d5b8 	.word	0x2001d5b8
    7654:	f3af 8000 	nop.w
    7658:	f3af 8000 	nop.w
    765c:	f3af 8000 	nop.w

00007660 <delayParam3>:
{
    7660:	b508      	push	{r3, lr}
    tSVF_setFreqFast(&FXlowpass[v][string], (value * 127.0f));
    7662:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7666:	eddf 7a05 	vldr	s15, [pc, #20]	; 767c <delayParam3+0x1c>
    766a:	ee20 0a27 	vmul.f32	s0, s0, s15
    766e:	4804      	ldr	r0, [pc, #16]	; (7680 <delayParam3+0x20>)
    7670:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7674:	f001 feec 	bl	9450 <__tSVF_setFreqFast_veneer>
}
    7678:	bd08      	pop	{r3, pc}
    767a:	bf00      	nop
    767c:	42fe0000 	.word	0x42fe0000
    7680:	2001ce90 	.word	0x2001ce90
    7684:	f3af 8000 	nop.w
    7688:	f3af 8000 	nop.w
    768c:	f3af 8000 	nop.w
    7690:	f3af 8000 	nop.w
    7694:	f3af 8000 	nop.w
    7698:	f3af 8000 	nop.w
    769c:	f3af 8000 	nop.w

000076a0 <delayParam4>:
{
    76a0:	b508      	push	{r3, lr}
    tSVF_setFreqFast(&FXhighpass[v][string], (value * 127.0f));
    76a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    76a6:	eddf 7a05 	vldr	s15, [pc, #20]	; 76bc <delayParam4+0x1c>
    76aa:	ee20 0a27 	vmul.f32	s0, s0, s15
    76ae:	4804      	ldr	r0, [pc, #16]	; (76c0 <delayParam4+0x20>)
    76b0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    76b4:	f001 fecc 	bl	9450 <__tSVF_setFreqFast_veneer>
}
    76b8:	bd08      	pop	{r3, pc}
    76ba:	bf00      	nop
    76bc:	42fe0000 	.word	0x42fe0000
    76c0:	2001ce70 	.word	0x2001ce70
    76c4:	f3af 8000 	nop.w
    76c8:	f3af 8000 	nop.w
    76cc:	f3af 8000 	nop.w
    76d0:	f3af 8000 	nop.w
    76d4:	f3af 8000 	nop.w
    76d8:	f3af 8000 	nop.w
    76dc:	f3af 8000 	nop.w

000076e0 <delayParam5>:
	param5[v][string] = (value * 1.5f) + 1.0f;
    76e0:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
    76e4:	ee20 0a27 	vmul.f32	s0, s0, s15
    76e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    76ec:	ee30 0a27 	vadd.f32	s0, s0, s15
    76f0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    76f4:	4b02      	ldr	r3, [pc, #8]	; (7700 <delayParam5+0x20>)
    76f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    76fa:	ed83 0a00 	vstr	s0, [r3]
}
    76fe:	4770      	bx	lr
    7700:	2001d618 	.word	0x2001d618
    7704:	f3af 8000 	nop.w
    7708:	f3af 8000 	nop.w
    770c:	f3af 8000 	nop.w
    7710:	f3af 8000 	nop.w
    7714:	f3af 8000 	nop.w
    7718:	f3af 8000 	nop.w
    771c:	f3af 8000 	nop.w

00007720 <chorusTick>:

float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    7720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7724:	ed2d 8b04 	vpush	{d8-d9}
    7728:	eeb0 8a40 	vmov.f32	s16, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    772c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7730:	ea4f 0881 	mov.w	r8, r1, lsl #2
    7734:	4d28      	ldr	r5, [pc, #160]	; (77d8 <chorusTick+0xb8>)
    7736:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    773a:	4f28      	ldr	r7, [pc, #160]	; (77dc <chorusTick+0xbc>)
    773c:	eb07 0781 	add.w	r7, r7, r1, lsl #2
    7740:	ed97 9a00 	vldr	s18, [r7]
    7744:	eddf 7a26 	vldr	s15, [pc, #152]	; 77e0 <chorusTick+0xc0>
    7748:	ee29 9a27 	vmul.f32	s18, s18, s15
    774c:	4e25      	ldr	r6, [pc, #148]	; (77e4 <chorusTick+0xc4>)
    774e:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    7752:	edd6 8a00 	vldr	s17, [r6]
    7756:	4824      	ldr	r0, [pc, #144]	; (77e8 <chorusTick+0xc8>)
    7758:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    775c:	f001 ffc0 	bl	96e0 <__tCycle_tick_veneer>
    7760:	ee28 0a80 	vmul.f32	s0, s17, s0
    7764:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    7768:	ee30 0a28 	vadd.f32	s0, s0, s17
    776c:	ee29 0a00 	vmul.f32	s0, s18, s0
    7770:	4628      	mov	r0, r5
    7772:	f001 fda9 	bl	92c8 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    7776:	4c1d      	ldr	r4, [pc, #116]	; (77ec <chorusTick+0xcc>)
    7778:	4444      	add	r4, r8
    777a:	ed97 9a00 	vldr	s18, [r7]
    777e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    7782:	ee29 9a27 	vmul.f32	s18, s18, s15
    7786:	edd6 9a00 	vldr	s19, [r6]
    778a:	4819      	ldr	r0, [pc, #100]	; (77f0 <chorusTick+0xd0>)
    778c:	4440      	add	r0, r8
    778e:	f001 ffa7 	bl	96e0 <__tCycle_tick_veneer>
    7792:	ee69 9a80 	vmul.f32	s19, s19, s0
    7796:	ee38 0ae9 	vsub.f32	s0, s17, s19
    779a:	ee29 0a00 	vmul.f32	s0, s18, s0
    779e:	4620      	mov	r0, r4
    77a0:	f001 fd92 	bl	92c8 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    77a4:	eeb0 0a48 	vmov.f32	s0, s16
    77a8:	4628      	mov	r0, r5
    77aa:	f001 fcc1 	bl	9130 <__tLinearDelay_tick_veneer>
    77ae:	ee70 8a48 	vsub.f32	s17, s0, s16
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    77b2:	eeb0 0a48 	vmov.f32	s0, s16
    77b6:	4620      	mov	r0, r4
    77b8:	f001 fcba 	bl	9130 <__tLinearDelay_tick_veneer>
    77bc:	ee30 0a48 	vsub.f32	s0, s0, s16
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    77c0:	ee38 0a80 	vadd.f32	s0, s17, s0
    77c4:	480b      	ldr	r0, [pc, #44]	; (77f4 <chorusTick+0xd4>)
    77c6:	4440      	add	r0, r8
    77c8:	f001 ff2e 	bl	9628 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    77cc:	eeb1 0a40 	vneg.f32	s0, s0
    77d0:	ecbd 8b04 	vpop	{d8-d9}
    77d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77d8:	2001d0c0 	.word	0x2001d0c0
    77dc:	2001d598 	.word	0x2001d598
    77e0:	3f34fdf4 	.word	0x3f34fdf4
    77e4:	2001d5b8 	.word	0x2001d5b8
    77e8:	2001d4c0 	.word	0x2001d4c0
    77ec:	2001d0e0 	.word	0x2001d0e0
    77f0:	2001d4e0 	.word	0x2001d4e0
    77f4:	2001cf78 	.word	0x2001cf78
    77f8:	f3af 8000 	nop.w
    77fc:	f3af 8000 	nop.w

00007800 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    7800:	b510      	push	{r4, lr}
    sample = sample * param1[v][string];
    7802:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7806:	008c      	lsls	r4, r1, #2
    7808:	4b0d      	ldr	r3, [pc, #52]	; (7840 <shaperTick+0x40>)
    780a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    780e:	edd3 7a00 	vldr	s15, [r3]
    7812:	ee27 0a80 	vmul.f32	s0, s15, s0
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    7816:	4b0b      	ldr	r3, [pc, #44]	; (7844 <shaperTick+0x44>)
    7818:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    781c:	ed93 7a00 	vldr	s14, [r3]
    7820:	ee67 7a87 	vmul.f32	s15, s15, s14
    7824:	4b08      	ldr	r3, [pc, #32]	; (7848 <shaperTick+0x48>)
    7826:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    782a:	edd3 0a00 	vldr	s1, [r3]
    782e:	ee37 0a80 	vadd.f32	s0, s15, s0
    7832:	f001 fc71 	bl	9118 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7836:	4805      	ldr	r0, [pc, #20]	; (784c <shaperTick+0x4c>)
    7838:	4420      	add	r0, r4
    783a:	f001 fef5 	bl	9628 <__tHighpass_tick_veneer>
    return temp;
}
    783e:	bd10      	pop	{r4, pc}
    7840:	2001d598 	.word	0x2001d598
    7844:	2001d5b8 	.word	0x2001d5b8
    7848:	2001d5d8 	.word	0x2001d5d8
    784c:	2001cf78 	.word	0x2001cf78
    7850:	f3af 8000 	nop.w
    7854:	f3af 8000 	nop.w
    7858:	f3af 8000 	nop.w
    785c:	f3af 8000 	nop.w

00007860 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    7860:	4770      	bx	lr
    7862:	bf00      	nop
    7864:	f3af 8000 	nop.w
    7868:	f3af 8000 	nop.w
    786c:	f3af 8000 	nop.w
    7870:	f3af 8000 	nop.w
    7874:	f3af 8000 	nop.w
    7878:	f3af 8000 	nop.w
    787c:	f3af 8000 	nop.w

00007880 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    7880:	b510      	push	{r4, lr}
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    7882:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7886:	008c      	lsls	r4, r1, #2
    7888:	4806      	ldr	r0, [pc, #24]	; (78a4 <tiltFilterTick+0x24>)
    788a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    788e:	f001 fd33 	bl	92f8 <__tVZFilterLS_tick_veneer>
    sample = tVZFilterHS_tick(&shelf2[v][string], sample);
    7892:	4805      	ldr	r0, [pc, #20]	; (78a8 <tiltFilterTick+0x28>)
    7894:	4420      	add	r0, r4
    7896:	f001 fe03 	bl	94a0 <__tVZFilterHS_tick_veneer>
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    789a:	4804      	ldr	r0, [pc, #16]	; (78ac <tiltFilterTick+0x2c>)
    789c:	4420      	add	r0, r4
    789e:	f001 fccf 	bl	9240 <__tVZFilterBell_tick_veneer>
    return sample;
}
    78a2:	bd10      	pop	{r4, pc}
    78a4:	2001d70c 	.word	0x2001d70c
    78a8:	2001d72c 	.word	0x2001d72c
    78ac:	2001cf38 	.word	0x2001cf38
    78b0:	f3af 8000 	nop.w
    78b4:	f3af 8000 	nop.w
    78b8:	f3af 8000 	nop.w
    78bc:	f3af 8000 	nop.w

000078c0 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    78c0:	b510      	push	{r4, lr}
    float gain = param1[v][string];
    78c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    78c6:	008c      	lsls	r4, r1, #2
    78c8:	4b0e      	ldr	r3, [pc, #56]	; (7904 <tanhTick+0x44>)
    78ca:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    78ce:	edd3 7a00 	vldr	s15, [r3]
	sample = sample * gain;
    78d2:	ee27 0a80 	vmul.f32	s0, s15, s0
    gain = gain * 0.5f;
    78d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    78da:	ee67 7a87 	vmul.f32	s15, s15, s14
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
    78de:	4b0a      	ldr	r3, [pc, #40]	; (7908 <tanhTick+0x48>)
    78e0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    78e4:	ed93 7a00 	vldr	s14, [r3]
    78e8:	ee67 7a27 	vmul.f32	s15, s14, s15
    78ec:	ee37 0a80 	vadd.f32	s0, s15, s0
    78f0:	f001 febe 	bl	9670 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    78f4:	4805      	ldr	r0, [pc, #20]	; (790c <tanhTick+0x4c>)
    78f6:	4420      	add	r0, r4
    78f8:	f001 fe96 	bl	9628 <__tHighpass_tick_veneer>
    //temp *= param4[v][string];
    temp = tanhf(temp);
    78fc:	f001 feb8 	bl	9670 <__tanhf_veneer>
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    7900:	bd10      	pop	{r4, pc}
    7902:	bf00      	nop
    7904:	2001d598 	.word	0x2001d598
    7908:	2001d5b8 	.word	0x2001d5b8
    790c:	2001cf78 	.word	0x2001cf78
    7910:	f3af 8000 	nop.w
    7914:	f3af 8000 	nop.w
    7918:	f3af 8000 	nop.w
    791c:	f3af 8000 	nop.w

00007920 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    7920:	b508      	push	{r3, lr}
    sample = sample * param1[v][string];
    7922:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    7926:	4b19      	ldr	r3, [pc, #100]	; (798c <softClipTick+0x6c>)
    7928:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    792c:	edd3 7a00 	vldr	s15, [r3]
    7930:	ee27 0a80 	vmul.f32	s0, s15, s0
    sample = sample + param2[v][string];
    7934:	4b16      	ldr	r3, [pc, #88]	; (7990 <softClipTick+0x70>)
    7936:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    793a:	edd3 7a00 	vldr	s15, [r3]
    793e:	ee77 7a80 	vadd.f32	s15, s15, s0
    //float shape = param3[v][string];
    if (sample <= -1.0f)
    7942:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    7946:	eef4 7ac7 	vcmpe.f32	s15, s14
    794a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    794e:	d909      	bls.n	7964 <softClipTick+0x44>
    {
        sample = -1.0f;
    } else if (sample >= 1.0f)
    7950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7954:	eef4 7ac7 	vcmpe.f32	s15, s14
    7958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    795c:	db04      	blt.n	7968 <softClipTick+0x48>
    {
        sample = 1.0f;
    795e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7962:	e001      	b.n	7968 <softClipTick+0x48>
        sample = -1.0f;
    7964:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    }
    {
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
    7968:	ee27 0aa7 	vmul.f32	s0, s15, s15
    796c:	ee20 0a27 	vmul.f32	s0, s0, s15
    7970:	ed9f 7a08 	vldr	s14, [pc, #32]	; 7994 <softClipTick+0x74>
    7974:	ee20 0a07 	vmul.f32	s0, s0, s14
        //sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7978:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    797c:	ee37 0ac0 	vsub.f32	s0, s15, s0
    7980:	4805      	ldr	r0, [pc, #20]	; (7998 <softClipTick+0x78>)
    7982:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7986:	f001 fe4f 	bl	9628 <__tHighpass_tick_veneer>
    return sample;
}
    798a:	bd08      	pop	{r3, pc}
    798c:	2001d598 	.word	0x2001d598
    7990:	2001d5b8 	.word	0x2001d5b8
    7994:	3eaaaaaa 	.word	0x3eaaaaaa
    7998:	2001cf78 	.word	0x2001cf78
    799c:	f3af 8000 	nop.w

000079a0 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{
    79a0:	b570      	push	{r4, r5, r6, lr}

    sample = sample * param1[v][string];
    79a2:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    79a6:	4b21      	ldr	r3, [pc, #132]	; (7a2c <hardClipTick+0x8c>)
    79a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    79ac:	edd3 7a00 	vldr	s15, [r3]
    79b0:	ee67 7a80 	vmul.f32	s15, s15, s0
    sample = sample + param2[v][string];
    79b4:	4b1e      	ldr	r3, [pc, #120]	; (7a30 <hardClipTick+0x90>)
    79b6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    79ba:	ed93 0a00 	vldr	s0, [r3]
    79be:	ee30 0a27 	vadd.f32	s0, s0, s15
    if (sample <= -1.0f)
    79c2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    79c6:	eeb4 0ae7 	vcmpe.f32	s0, s15
    79ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79ce:	d909      	bls.n	79e4 <hardClipTick+0x44>
    {
        sample = -1.0f;
    } else if (sample >= 1.0f)
    79d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    79d4:	eeb4 0ae7 	vcmpe.f32	s0, s15
    79d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    79dc:	db04      	blt.n	79e8 <hardClipTick+0x48>
    {
        sample = 1.0f;
    79de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    79e2:	e001      	b.n	79e8 <hardClipTick+0x48>
        sample = -1.0f;
    79e4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    79e8:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    79ec:	008e      	lsls	r6, r1, #2
    79ee:	4d11      	ldr	r5, [pc, #68]	; (7a34 <hardClipTick+0x94>)
    79f0:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    79f4:	edd5 7a00 	vldr	s15, [r5]
    79f8:	ee27 0a80 	vmul.f32	s0, s15, s0
    79fc:	f001 fc3c 	bl	9278 <__arm_sin_f32_veneer>
    7a00:	4c0d      	ldr	r4, [pc, #52]	; (7a38 <hardClipTick+0x98>)
    7a02:	4434      	add	r4, r6
    7a04:	edd4 7a00 	vldr	s15, [r4]
    7a08:	ee20 0a27 	vmul.f32	s0, s0, s15
    7a0c:	edd5 7a00 	vldr	s15, [r5]
    7a10:	ee20 0a27 	vmul.f32	s0, s0, s15
    7a14:	f001 fc30 	bl	9278 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    7a18:	edd4 7a00 	vldr	s15, [r4]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7a1c:	ee27 0a80 	vmul.f32	s0, s15, s0
    7a20:	4806      	ldr	r0, [pc, #24]	; (7a3c <hardClipTick+0x9c>)
    7a22:	4430      	add	r0, r6
    7a24:	f001 fe00 	bl	9628 <__tHighpass_tick_veneer>
    return sample;
}
    7a28:	bd70      	pop	{r4, r5, r6, pc}
    7a2a:	bf00      	nop
    7a2c:	2001d598 	.word	0x2001d598
    7a30:	2001d5b8 	.word	0x2001d5b8
    7a34:	2001d5d8 	.word	0x2001d5d8
    7a38:	2001d6c0 	.word	0x2001d6c0
    7a3c:	2001cf78 	.word	0x2001cf78

00007a40 <polynomialShaperTick>:


float __ATTR_ITCMRAM polynomialShaperTick(float sample, int v, int string)
{
    7a40:	b570      	push	{r4, r5, r6, lr}

    sample = sample * param1[v][string];
    7a42:	eb01 0240 	add.w	r2, r1, r0, lsl #1
    7a46:	4b21      	ldr	r3, [pc, #132]	; (7acc <polynomialShaperTick+0x8c>)
    7a48:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7a4c:	edd3 7a00 	vldr	s15, [r3]
    7a50:	ee67 7a80 	vmul.f32	s15, s15, s0
    sample = sample + param2[v][string];
    7a54:	4b1e      	ldr	r3, [pc, #120]	; (7ad0 <polynomialShaperTick+0x90>)
    7a56:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7a5a:	ed93 0a00 	vldr	s0, [r3]
    7a5e:	ee30 0a27 	vadd.f32	s0, s0, s15

    if (sample <= -1.0f)
    7a62:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    7a66:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a6e:	d909      	bls.n	7a84 <polynomialShaperTick+0x44>
    {
        sample = -1.0f;
    } else if (sample >= 1.0f)
    7a70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7a74:	eeb4 0ae7 	vcmpe.f32	s0, s15
    7a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7a7c:	db04      	blt.n	7a88 <polynomialShaperTick+0x48>
    {
        sample = 1.0f;
    7a7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    7a82:	e001      	b.n	7a88 <polynomialShaperTick+0x48>
        sample = -1.0f;
    7a84:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    }

	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    7a88:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7a8c:	008e      	lsls	r6, r1, #2
    7a8e:	4d11      	ldr	r5, [pc, #68]	; (7ad4 <polynomialShaperTick+0x94>)
    7a90:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    7a94:	edd5 7a00 	vldr	s15, [r5]
    7a98:	ee27 0a80 	vmul.f32	s0, s15, s0
    7a9c:	f001 fc3c 	bl	9318 <__fastSine_veneer>
    7aa0:	4c0d      	ldr	r4, [pc, #52]	; (7ad8 <polynomialShaperTick+0x98>)
    7aa2:	4434      	add	r4, r6
    7aa4:	edd4 7a00 	vldr	s15, [r4]
    7aa8:	ee20 0a27 	vmul.f32	s0, s0, s15
    7aac:	edd5 7a00 	vldr	s15, [r5]
    7ab0:	ee20 0a27 	vmul.f32	s0, s0, s15
    7ab4:	f001 fc30 	bl	9318 <__fastSine_veneer>
	sample = sample * polyDivider[v][string];
    7ab8:	edd4 7a00 	vldr	s15, [r4]


    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7abc:	ee27 0a80 	vmul.f32	s0, s15, s0
    7ac0:	4806      	ldr	r0, [pc, #24]	; (7adc <polynomialShaperTick+0x9c>)
    7ac2:	4430      	add	r0, r6
    7ac4:	f001 fdb0 	bl	9628 <__tHighpass_tick_veneer>
    return sample;
}
    7ac8:	bd70      	pop	{r4, r5, r6, pc}
    7aca:	bf00      	nop
    7acc:	2001d598 	.word	0x2001d598
    7ad0:	2001d5b8 	.word	0x2001d5b8
    7ad4:	2001d5d8 	.word	0x2001d5d8
    7ad8:	2001d650 	.word	0x2001d650
    7adc:	2001cf78 	.word	0x2001cf78

00007ae0 <satTick>:
float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    7ae0:	b510      	push	{r4, lr}
    sample = sample * param1[v][string];
    7ae2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7ae6:	008c      	lsls	r4, r1, #2
    7ae8:	4b15      	ldr	r3, [pc, #84]	; (7b40 <satTick+0x60>)
    7aea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7aee:	ed93 6a00 	vldr	s12, [r3]
    7af2:	ee26 0a00 	vmul.f32	s0, s12, s0
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    7af6:	4b13      	ldr	r3, [pc, #76]	; (7b44 <satTick+0x64>)
    7af8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7afc:	ed93 7a00 	vldr	s14, [r3]
    7b00:	ee26 6a07 	vmul.f32	s12, s12, s14
    7b04:	ee36 6a00 	vadd.f32	s12, s12, s0
    7b08:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    7b0c:	ee37 7a00 	vadd.f32	s14, s14, s0
    7b10:	eeb0 7ac7 	vabs.f32	s14, s14
    7b14:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    7b18:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    7b1c:	ee37 7b05 	vadd.f64	d7, d7, d5
    7b20:	ee86 0b07 	vdiv.f64	d0, d6, d7
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7b24:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    7b28:	4807      	ldr	r0, [pc, #28]	; (7b48 <satTick+0x68>)
    7b2a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7b2e:	f001 fd7b 	bl	9628 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    7b32:	4806      	ldr	r0, [pc, #24]	; (7b4c <satTick+0x6c>)
    7b34:	4420      	add	r0, r4
    7b36:	f001 fd77 	bl	9628 <__tHighpass_tick_veneer>
    temp = LEAF_tanh(temp);
    7b3a:	f001 fb59 	bl	91f0 <__LEAF_tanh_veneer>
    return temp;
}
    7b3e:	bd10      	pop	{r4, pc}
    7b40:	2001d598 	.word	0x2001d598
    7b44:	2001d5b8 	.word	0x2001d5b8
    7b48:	2001cf78 	.word	0x2001cf78
    7b4c:	2001cf98 	.word	0x2001cf98
    7b50:	f3af 8000 	nop.w
    7b54:	f3af 8000 	nop.w
    7b58:	f3af 8000 	nop.w
    7b5c:	f3af 8000 	nop.w

00007b60 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    7b60:	b508      	push	{r3, lr}
    sample = sample * param1[v][string];
    7b62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7b66:	4b06      	ldr	r3, [pc, #24]	; (7b80 <bcTick+0x20>)
    7b68:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7b6c:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    7b70:	ee27 0a80 	vmul.f32	s0, s15, s0
    7b74:	4803      	ldr	r0, [pc, #12]	; (7b84 <bcTick+0x24>)
    7b76:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7b7a:	f001 fd6d 	bl	9658 <__tCrusher_tick_veneer>
}
    7b7e:	bd08      	pop	{r3, pc}
    7b80:	2001d598 	.word	0x2001d598
    7b84:	2001cf18 	.word	0x2001cf18
    7b88:	f3af 8000 	nop.w
    7b8c:	f3af 8000 	nop.w
    7b90:	f3af 8000 	nop.w
    7b94:	f3af 8000 	nop.w
    7b98:	f3af 8000 	nop.w
    7b9c:	f3af 8000 	nop.w

00007ba0 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    7ba0:	b508      	push	{r3, lr}
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
    7ba2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7ba6:	4803      	ldr	r0, [pc, #12]	; (7bb4 <compressorTick+0x14>)
    7ba8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7bac:	f001 fd40 	bl	9630 <__tCompressor_tick_veneer>
}
    7bb0:	bd08      	pop	{r3, pc}
    7bb2:	bf00      	nop
    7bb4:	2001cf58 	.word	0x2001cf58
    7bb8:	f3af 8000 	nop.w
    7bbc:	f3af 8000 	nop.w

00007bc0 <FXlowpassTick>:

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
    7bc0:	b508      	push	{r3, lr}
	return tSVF_tick(&FXlowpass[v][string], sample);
    7bc2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7bc6:	4803      	ldr	r0, [pc, #12]	; (7bd4 <FXlowpassTick+0x14>)
    7bc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7bcc:	f001 fd94 	bl	96f8 <__tSVF_tick_veneer>
}
    7bd0:	bd08      	pop	{r3, pc}
    7bd2:	bf00      	nop
    7bd4:	2001ce90 	.word	0x2001ce90
    7bd8:	f3af 8000 	nop.w
    7bdc:	f3af 8000 	nop.w

00007be0 <FXhighpassTick>:

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
    7be0:	b508      	push	{r3, lr}
	return tSVF_tick(&FXhighpass[v][string], sample);
    7be2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7be6:	4803      	ldr	r0, [pc, #12]	; (7bf4 <FXhighpassTick+0x14>)
    7be8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7bec:	f001 fd84 	bl	96f8 <__tSVF_tick_veneer>
}
    7bf0:	bd08      	pop	{r3, pc}
    7bf2:	bf00      	nop
    7bf4:	2001ce70 	.word	0x2001ce70
    7bf8:	f3af 8000 	nop.w
    7bfc:	f3af 8000 	nop.w

00007c00 <FXbandpassTick>:

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
    7c00:	b508      	push	{r3, lr}
	return tSVF_tick(&FXbandpass[v][string], sample);
    7c02:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7c06:	4803      	ldr	r0, [pc, #12]	; (7c14 <FXbandpassTick+0x14>)
    7c08:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7c0c:	f001 fd74 	bl	96f8 <__tSVF_tick_veneer>
}
    7c10:	bd08      	pop	{r3, pc}
    7c12:	bf00      	nop
    7c14:	2001ce30 	.word	0x2001ce30
    7c18:	f3af 8000 	nop.w
    7c1c:	f3af 8000 	nop.w

00007c20 <FXdiodeLowpassTick>:

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
    7c20:	b508      	push	{r3, lr}
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    7c22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7c26:	4803      	ldr	r0, [pc, #12]	; (7c34 <FXdiodeLowpassTick+0x14>)
    7c28:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7c2c:	f001 fb2c 	bl	9288 <__tDiodeFilter_tick_veneer>
}
    7c30:	bd08      	pop	{r3, pc}
    7c32:	bf00      	nop
    7c34:	2001ce50 	.word	0x2001ce50
    7c38:	f3af 8000 	nop.w
    7c3c:	f3af 8000 	nop.w

00007c40 <FXVZpeakTick>:

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
    7c40:	b508      	push	{r3, lr}
	return tVZFilterBell_tick(&FXVZfilterPeak[v][string], sample);
    7c42:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7c46:	4803      	ldr	r0, [pc, #12]	; (7c54 <FXVZpeakTick+0x14>)
    7c48:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7c4c:	f001 faf8 	bl	9240 <__tVZFilterBell_tick_veneer>
}
    7c50:	bd08      	pop	{r3, pc}
    7c52:	bf00      	nop
    7c54:	2001ce10 	.word	0x2001ce10
    7c58:	f3af 8000 	nop.w
    7c5c:	f3af 8000 	nop.w

00007c60 <FXVZlowshelfTick>:

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
    7c60:	b508      	push	{r3, lr}
	return tVZFilterLS_tick(&FXVZfilterLS[v][string], sample);
    7c62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7c66:	4803      	ldr	r0, [pc, #12]	; (7c74 <FXVZlowshelfTick+0x14>)
    7c68:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7c6c:	f001 fb44 	bl	92f8 <__tVZFilterLS_tick_veneer>
}
    7c70:	bd08      	pop	{r3, pc}
    7c72:	bf00      	nop
    7c74:	2001cdf0 	.word	0x2001cdf0
    7c78:	f3af 8000 	nop.w
    7c7c:	f3af 8000 	nop.w

00007c80 <FXVZhighshelfTick>:
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
    7c80:	b508      	push	{r3, lr}
	return tVZFilterHS_tick(&FXVZfilterHS[v][string], sample);
    7c82:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7c86:	4803      	ldr	r0, [pc, #12]	; (7c94 <FXVZhighshelfTick+0x14>)
    7c88:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7c8c:	f001 fc08 	bl	94a0 <__tVZFilterHS_tick_veneer>
}
    7c90:	bd08      	pop	{r3, pc}
    7c92:	bf00      	nop
    7c94:	2001cdd0 	.word	0x2001cdd0
    7c98:	f3af 8000 	nop.w
    7c9c:	f3af 8000 	nop.w

00007ca0 <FXVZbandrejectTick>:
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
    7ca0:	b508      	push	{r3, lr}
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    7ca2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7ca6:	4803      	ldr	r0, [pc, #12]	; (7cb4 <FXVZbandrejectTick+0x14>)
    7ca8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7cac:	f001 fa68 	bl	9180 <__tVZFilter_tickEfficient_veneer>
}
    7cb0:	bd08      	pop	{r3, pc}
    7cb2:	bf00      	nop
    7cb4:	2001cdb0 	.word	0x2001cdb0
    7cb8:	f3af 8000 	nop.w
    7cbc:	f3af 8000 	nop.w

00007cc0 <FXLadderLowpassTick>:

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
    7cc0:	b508      	push	{r3, lr}
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    7cc2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7cc6:	4803      	ldr	r0, [pc, #12]	; (7cd4 <FXLadderLowpassTick+0x14>)
    7cc8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7ccc:	f001 fbe4 	bl	9498 <__tLadderFilter_tick_veneer>
}
    7cd0:	bd08      	pop	{r3, pc}
    7cd2:	bf00      	nop
    7cd4:	2001cd90 	.word	0x2001cd90
    7cd8:	f3af 8000 	nop.w
    7cdc:	f3af 8000 	nop.w

00007ce0 <FXLowpassParam1>:
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
    7ce0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    7ce2:	eddf 7a08 	vldr	s15, [pc, #32]	; 7d04 <FXLowpassParam1+0x24>
    7ce6:	ee20 0a27 	vmul.f32	s0, s0, s15
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    7cea:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7cee:	eddf 7a06 	vldr	s15, [pc, #24]	; 7d08 <FXLowpassParam1+0x28>
    7cf2:	ee30 0a27 	vadd.f32	s0, s0, s15
    7cf6:	4805      	ldr	r0, [pc, #20]	; (7d0c <FXLowpassParam1+0x2c>)
    7cf8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7cfc:	f001 fba8 	bl	9450 <__tSVF_setFreqFast_veneer>
}
    7d00:	bd08      	pop	{r3, pc}
    7d02:	bf00      	nop
    7d04:	429a0000 	.word	0x429a0000
    7d08:	42280000 	.word	0x42280000
    7d0c:	2001ce90 	.word	0x2001ce90
    7d10:	f3af 8000 	nop.w
    7d14:	f3af 8000 	nop.w
    7d18:	f3af 8000 	nop.w
    7d1c:	f3af 8000 	nop.w

00007d20 <FXHighpassParam1>:
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
    7d20:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    7d22:	eddf 7a08 	vldr	s15, [pc, #32]	; 7d44 <FXHighpassParam1+0x24>
    7d26:	ee20 0a27 	vmul.f32	s0, s0, s15
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    7d2a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7d2e:	eddf 7a06 	vldr	s15, [pc, #24]	; 7d48 <FXHighpassParam1+0x28>
    7d32:	ee30 0a27 	vadd.f32	s0, s0, s15
    7d36:	4805      	ldr	r0, [pc, #20]	; (7d4c <FXHighpassParam1+0x2c>)
    7d38:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7d3c:	f001 fb88 	bl	9450 <__tSVF_setFreqFast_veneer>
}
    7d40:	bd08      	pop	{r3, pc}
    7d42:	bf00      	nop
    7d44:	429a0000 	.word	0x429a0000
    7d48:	42280000 	.word	0x42280000
    7d4c:	2001ce70 	.word	0x2001ce70
    7d50:	f3af 8000 	nop.w
    7d54:	f3af 8000 	nop.w
    7d58:	f3af 8000 	nop.w
    7d5c:	f3af 8000 	nop.w

00007d60 <FXBandpassParam1>:

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
    7d60:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    7d62:	eddf 7a08 	vldr	s15, [pc, #32]	; 7d84 <FXBandpassParam1+0x24>
    7d66:	ee20 0a27 	vmul.f32	s0, s0, s15
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    7d6a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7d6e:	eddf 7a06 	vldr	s15, [pc, #24]	; 7d88 <FXBandpassParam1+0x28>
    7d72:	ee30 0a27 	vadd.f32	s0, s0, s15
    7d76:	4805      	ldr	r0, [pc, #20]	; (7d8c <FXBandpassParam1+0x2c>)
    7d78:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7d7c:	f001 fb68 	bl	9450 <__tSVF_setFreqFast_veneer>
}
    7d80:	bd08      	pop	{r3, pc}
    7d82:	bf00      	nop
    7d84:	429a0000 	.word	0x429a0000
    7d88:	42280000 	.word	0x42280000
    7d8c:	2001ce30 	.word	0x2001ce30
    7d90:	f3af 8000 	nop.w
    7d94:	f3af 8000 	nop.w
    7d98:	f3af 8000 	nop.w
    7d9c:	f3af 8000 	nop.w

00007da0 <FXDiodeParam1>:

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
    7da0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    7da2:	eddf 7a08 	vldr	s15, [pc, #32]	; 7dc4 <FXDiodeParam1+0x24>
    7da6:	ee20 0a27 	vmul.f32	s0, s0, s15
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    7daa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7dae:	eddf 7a06 	vldr	s15, [pc, #24]	; 7dc8 <FXDiodeParam1+0x28>
    7db2:	ee30 0a27 	vadd.f32	s0, s0, s15
    7db6:	4805      	ldr	r0, [pc, #20]	; (7dcc <FXDiodeParam1+0x2c>)
    7db8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7dbc:	f001 fc6c 	bl	9698 <__tDiodeFilter_setFreqFast_veneer>
}
    7dc0:	bd08      	pop	{r3, pc}
    7dc2:	bf00      	nop
    7dc4:	429a0000 	.word	0x429a0000
    7dc8:	42280000 	.word	0x42280000
    7dcc:	2001ce50 	.word	0x2001ce50
    7dd0:	f3af 8000 	nop.w
    7dd4:	f3af 8000 	nop.w
    7dd8:	f3af 8000 	nop.w
    7ddc:	f3af 8000 	nop.w

00007de0 <FXPeakParam1>:
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
    7de0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    7de2:	eddf 7a08 	vldr	s15, [pc, #32]	; 7e04 <FXPeakParam1+0x24>
    7de6:	ee20 0a27 	vmul.f32	s0, s0, s15
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    7dea:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7dee:	eddf 7a06 	vldr	s15, [pc, #24]	; 7e08 <FXPeakParam1+0x28>
    7df2:	ee30 0a27 	vadd.f32	s0, s0, s15
    7df6:	4805      	ldr	r0, [pc, #20]	; (7e0c <FXPeakParam1+0x2c>)
    7df8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7dfc:	f001 fc44 	bl	9688 <__tVZFilterBell_setFreq_veneer>
}
    7e00:	bd08      	pop	{r3, pc}
    7e02:	bf00      	nop
    7e04:	429a0000 	.word	0x429a0000
    7e08:	42280000 	.word	0x42280000
    7e0c:	2001ce10 	.word	0x2001ce10
    7e10:	f3af 8000 	nop.w
    7e14:	f3af 8000 	nop.w
    7e18:	f3af 8000 	nop.w
    7e1c:	f3af 8000 	nop.w

00007e20 <FXLowShelfParam1>:
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
    7e20:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    7e22:	eddf 7a08 	vldr	s15, [pc, #32]	; 7e44 <FXLowShelfParam1+0x24>
    7e26:	ee20 0a27 	vmul.f32	s0, s0, s15
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    7e2a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7e2e:	eddf 7a06 	vldr	s15, [pc, #24]	; 7e48 <FXLowShelfParam1+0x28>
    7e32:	ee30 0a27 	vadd.f32	s0, s0, s15
    7e36:	4805      	ldr	r0, [pc, #20]	; (7e4c <FXLowShelfParam1+0x2c>)
    7e38:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7e3c:	f001 fa18 	bl	9270 <__tVZFilterLS_setFreqFast_veneer>
}
    7e40:	bd08      	pop	{r3, pc}
    7e42:	bf00      	nop
    7e44:	429a0000 	.word	0x429a0000
    7e48:	42280000 	.word	0x42280000
    7e4c:	2001cdf0 	.word	0x2001cdf0
    7e50:	f3af 8000 	nop.w
    7e54:	f3af 8000 	nop.w
    7e58:	f3af 8000 	nop.w
    7e5c:	f3af 8000 	nop.w

00007e60 <FXHighShelfParam1>:
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
    7e60:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    7e62:	eddf 7a08 	vldr	s15, [pc, #32]	; 7e84 <FXHighShelfParam1+0x24>
    7e66:	ee20 0a27 	vmul.f32	s0, s0, s15
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    7e6a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7e6e:	eddf 7a06 	vldr	s15, [pc, #24]	; 7e88 <FXHighShelfParam1+0x28>
    7e72:	ee30 0a27 	vadd.f32	s0, s0, s15
    7e76:	4805      	ldr	r0, [pc, #20]	; (7e8c <FXHighShelfParam1+0x2c>)
    7e78:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7e7c:	f001 fbdc 	bl	9638 <__tVZFilterHS_setFreqFast_veneer>
}
    7e80:	bd08      	pop	{r3, pc}
    7e82:	bf00      	nop
    7e84:	429a0000 	.word	0x429a0000
    7e88:	42280000 	.word	0x42280000
    7e8c:	2001cdd0 	.word	0x2001cdd0
    7e90:	f3af 8000 	nop.w
    7e94:	f3af 8000 	nop.w
    7e98:	f3af 8000 	nop.w
    7e9c:	f3af 8000 	nop.w

00007ea0 <FXNotchParam1>:
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
    7ea0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    7ea2:	eddf 7a08 	vldr	s15, [pc, #32]	; 7ec4 <FXNotchParam1+0x24>
    7ea6:	ee20 0a27 	vmul.f32	s0, s0, s15
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    7eaa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7eae:	eddf 7a06 	vldr	s15, [pc, #24]	; 7ec8 <FXNotchParam1+0x28>
    7eb2:	ee30 0a27 	vadd.f32	s0, s0, s15
    7eb6:	4805      	ldr	r0, [pc, #20]	; (7ecc <FXNotchParam1+0x2c>)
    7eb8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7ebc:	f001 fa44 	bl	9348 <__tVZFilter_setFreqFast_veneer>
}
    7ec0:	bd08      	pop	{r3, pc}
    7ec2:	bf00      	nop
    7ec4:	429a0000 	.word	0x429a0000
    7ec8:	42280000 	.word	0x42280000
    7ecc:	2001cdb0 	.word	0x2001cdb0
    7ed0:	f3af 8000 	nop.w
    7ed4:	f3af 8000 	nop.w
    7ed8:	f3af 8000 	nop.w
    7edc:	f3af 8000 	nop.w

00007ee0 <FXLadderParam1>:
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
    7ee0:	b508      	push	{r3, lr}
	value = (value * 77.0f) + 42.0f;
    7ee2:	eddf 7a08 	vldr	s15, [pc, #32]	; 7f04 <FXLadderParam1+0x24>
    7ee6:	ee20 0a27 	vmul.f32	s0, s0, s15
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    7eea:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7eee:	eddf 7a06 	vldr	s15, [pc, #24]	; 7f08 <FXLadderParam1+0x28>
    7ef2:	ee30 0a27 	vadd.f32	s0, s0, s15
    7ef6:	4805      	ldr	r0, [pc, #20]	; (7f0c <FXLadderParam1+0x2c>)
    7ef8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7efc:	f001 fa8c 	bl	9418 <__tLadderFilter_setFreqFast_veneer>
}
    7f00:	bd08      	pop	{r3, pc}
    7f02:	bf00      	nop
    7f04:	429a0000 	.word	0x429a0000
    7f08:	42280000 	.word	0x42280000
    7f0c:	2001cd90 	.word	0x2001cd90
    7f10:	f3af 8000 	nop.w
    7f14:	f3af 8000 	nop.w
    7f18:	f3af 8000 	nop.w
    7f1c:	f3af 8000 	nop.w

00007f20 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
    7f20:	b510      	push	{r4, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7f22:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7f26:	4c08      	ldr	r4, [pc, #32]	; (7f48 <FXPeakParam2+0x28>)
    7f28:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    7f2c:	eddf 7a07 	vldr	s15, [pc, #28]	; 7f4c <FXPeakParam2+0x2c>
    7f30:	ee20 0a27 	vmul.f32	s0, s0, s15
    7f34:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    7f38:	ee30 0a67 	vsub.f32	s0, s0, s15
    7f3c:	f001 fa7c 	bl	9438 <__dbToATableLookup_veneer>
    7f40:	4620      	mov	r0, r4
    7f42:	f001 fb31 	bl	95a8 <__tVZFilterBell_setGain_veneer>
}
    7f46:	bd10      	pop	{r4, pc}
    7f48:	2001ce10 	.word	0x2001ce10
    7f4c:	42480000 	.word	0x42480000
    7f50:	f3af 8000 	nop.w
    7f54:	f3af 8000 	nop.w
    7f58:	f3af 8000 	nop.w
    7f5c:	f3af 8000 	nop.w

00007f60 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
    7f60:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7f62:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7f66:	4c08      	ldr	r4, [pc, #32]	; (7f88 <FXLowShelfParam2+0x28>)
    7f68:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    7f6c:	eddf 7a07 	vldr	s15, [pc, #28]	; 7f8c <FXLowShelfParam2+0x2c>
    7f70:	ee20 0a27 	vmul.f32	s0, s0, s15
    7f74:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    7f78:	ee30 0a67 	vsub.f32	s0, s0, s15
    7f7c:	f001 fa5c 	bl	9438 <__dbToATableLookup_veneer>
    7f80:	4620      	mov	r0, r4
    7f82:	f001 f939 	bl	91f8 <__tVZFilterLS_setGain_veneer>
}
    7f86:	bd10      	pop	{r4, pc}
    7f88:	2001cdf0 	.word	0x2001cdf0
    7f8c:	42480000 	.word	0x42480000
    7f90:	f3af 8000 	nop.w
    7f94:	f3af 8000 	nop.w
    7f98:	f3af 8000 	nop.w
    7f9c:	f3af 8000 	nop.w

00007fa0 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
    7fa0:	b510      	push	{r4, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7fa2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7fa6:	4c08      	ldr	r4, [pc, #32]	; (7fc8 <FXHighShelfParam2+0x28>)
    7fa8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    7fac:	eddf 7a07 	vldr	s15, [pc, #28]	; 7fcc <FXHighShelfParam2+0x2c>
    7fb0:	ee20 0a27 	vmul.f32	s0, s0, s15
    7fb4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    7fb8:	ee30 0a67 	vsub.f32	s0, s0, s15
    7fbc:	f001 fa3c 	bl	9438 <__dbToATableLookup_veneer>
    7fc0:	4620      	mov	r0, r4
    7fc2:	f001 f92d 	bl	9220 <__tVZFilterHS_setGain_veneer>
}
    7fc6:	bd10      	pop	{r4, pc}
    7fc8:	2001cdd0 	.word	0x2001cdd0
    7fcc:	42480000 	.word	0x42480000
    7fd0:	f3af 8000 	nop.w
    7fd4:	f3af 8000 	nop.w
    7fd8:	f3af 8000 	nop.w
    7fdc:	f3af 8000 	nop.w

00007fe0 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
    7fe0:	b510      	push	{r4, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    7fe2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7fe6:	4c08      	ldr	r4, [pc, #32]	; (8008 <FXNotchParam2+0x28>)
    7fe8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    7fec:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c <FXNotchParam2+0x2c>
    7ff0:	ee20 0a27 	vmul.f32	s0, s0, s15
    7ff4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
    7ff8:	ee30 0a67 	vsub.f32	s0, s0, s15
    7ffc:	f001 fa1c 	bl	9438 <__dbToATableLookup_veneer>
    8000:	4620      	mov	r0, r4
    8002:	f001 f8dd 	bl	91c0 <__tVZFilter_setGain_veneer>

}
    8006:	bd10      	pop	{r4, pc}
    8008:	2001cdb0 	.word	0x2001cdb0
    800c:	42480000 	.word	0x42480000
    8010:	f3af 8000 	nop.w
    8014:	f3af 8000 	nop.w
    8018:	f3af 8000 	nop.w
    801c:	f3af 8000 	nop.w

00008020 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
    8020:	b508      	push	{r3, lr}
	tSVF_setQ(&FXlowpass[v][string], value);
    8022:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8026:	4803      	ldr	r0, [pc, #12]	; (8034 <FXLowpassParam3+0x14>)
    8028:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    802c:	f001 f8c4 	bl	91b8 <__tSVF_setQ_veneer>
}
    8030:	bd08      	pop	{r3, pc}
    8032:	bf00      	nop
    8034:	2001ce90 	.word	0x2001ce90
    8038:	f3af 8000 	nop.w
    803c:	f3af 8000 	nop.w

00008040 <FXHighpassParam3>:

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    8040:	b508      	push	{r3, lr}
    tSVF_setQ(&FXhighpass[v][string], value);
    8042:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8046:	4803      	ldr	r0, [pc, #12]	; (8054 <FXHighpassParam3+0x14>)
    8048:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    804c:	f001 f8b4 	bl	91b8 <__tSVF_setQ_veneer>
}
    8050:	bd08      	pop	{r3, pc}
    8052:	bf00      	nop
    8054:	2001ce70 	.word	0x2001ce70
    8058:	f3af 8000 	nop.w
    805c:	f3af 8000 	nop.w

00008060 <FXBandpassParam3>:

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    8060:	b508      	push	{r3, lr}
    tSVF_setQ(&FXbandpass[v][string], value);
    8062:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8066:	4803      	ldr	r0, [pc, #12]	; (8074 <FXBandpassParam3+0x14>)
    8068:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    806c:	f001 f8a4 	bl	91b8 <__tSVF_setQ_veneer>
}
    8070:	bd08      	pop	{r3, pc}
    8072:	bf00      	nop
    8074:	2001ce30 	.word	0x2001ce30
    8078:	f3af 8000 	nop.w
    807c:	f3af 8000 	nop.w

00008080 <FXDiodeParam3>:

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
    8080:	b508      	push	{r3, lr}
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
    8082:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8086:	4803      	ldr	r0, [pc, #12]	; (8094 <FXDiodeParam3+0x14>)
    8088:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    808c:	f001 f8a0 	bl	91d0 <__tDiodeFilter_setQ_veneer>
}
    8090:	bd08      	pop	{r3, pc}
    8092:	bf00      	nop
    8094:	2001ce50 	.word	0x2001ce50
    8098:	f3af 8000 	nop.w
    809c:	f3af 8000 	nop.w

000080a0 <FXPeakParam3>:


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
    80a0:	b508      	push	{r3, lr}
	tVZFilterBell_setBandwidth(&FXVZfilterPeak[v][string], value);
    80a2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    80a6:	4803      	ldr	r0, [pc, #12]	; (80b4 <FXPeakParam3+0x14>)
    80a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    80ac:	f001 fa38 	bl	9520 <__tVZFilterBell_setBandwidth_veneer>
}
    80b0:	bd08      	pop	{r3, pc}
    80b2:	bf00      	nop
    80b4:	2001ce10 	.word	0x2001ce10
    80b8:	f3af 8000 	nop.w
    80bc:	f3af 8000 	nop.w

000080c0 <FXLowShelfParam3>:


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
    80c0:	b508      	push	{r3, lr}
	tVZFilterLS_setResonance(&FXVZfilterLS[v][string], value);
    80c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    80c6:	4803      	ldr	r0, [pc, #12]	; (80d4 <FXLowShelfParam3+0x14>)
    80c8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    80cc:	f001 f994 	bl	93f8 <__tVZFilterLS_setResonance_veneer>
}
    80d0:	bd08      	pop	{r3, pc}
    80d2:	bf00      	nop
    80d4:	2001cdf0 	.word	0x2001cdf0
    80d8:	f3af 8000 	nop.w
    80dc:	f3af 8000 	nop.w

000080e0 <FXHighShelfParam3>:


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
    80e0:	b508      	push	{r3, lr}
	tVZFilterHS_setResonance(&FXVZfilterHS[v][string], value);
    80e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    80e6:	4803      	ldr	r0, [pc, #12]	; (80f4 <FXHighShelfParam3+0x14>)
    80e8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    80ec:	f001 f9a8 	bl	9440 <__tVZFilterHS_setResonance_veneer>
}
    80f0:	bd08      	pop	{r3, pc}
    80f2:	bf00      	nop
    80f4:	2001cdd0 	.word	0x2001cdd0
    80f8:	f3af 8000 	nop.w
    80fc:	f3af 8000 	nop.w

00008100 <FXNotchParam3>:


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
    8100:	b508      	push	{r3, lr}
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
    8102:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8106:	4803      	ldr	r0, [pc, #12]	; (8114 <FXNotchParam3+0x14>)
    8108:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    810c:	f001 fad0 	bl	96b0 <__tVZFilter_setResonance_veneer>
}
    8110:	bd08      	pop	{r3, pc}
    8112:	bf00      	nop
    8114:	2001cdb0 	.word	0x2001cdb0
    8118:	f3af 8000 	nop.w
    811c:	f3af 8000 	nop.w

00008120 <FXLadderParam3>:


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
    8120:	b508      	push	{r3, lr}
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
    8122:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8126:	4803      	ldr	r0, [pc, #12]	; (8134 <FXLadderParam3+0x14>)
    8128:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    812c:	f001 fac4 	bl	96b8 <__tLadderFilter_setQ_veneer>
}
    8130:	bd08      	pop	{r3, pc}
    8132:	bf00      	nop
    8134:	2001cd90 	.word	0x2001cd90
    8138:	f3af 8000 	nop.w
    813c:	f3af 8000 	nop.w

00008140 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    8140:	b538      	push	{r3, r4, r5, lr}
    8142:	ed2d 8b02 	vpush	{d8}
    8146:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    8148:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
    814c:	ee20 8a27 	vmul.f32	s16, s0, s15
    8150:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    8154:	ee38 8a67 	vsub.f32	s16, s16, s15
    8158:	eeb1 0a48 	vneg.f32	s0, s16
    815c:	f001 f96c 	bl	9438 <__dbToATableLookup_veneer>
    8160:	00a5      	lsls	r5, r4, #2
    8162:	4808      	ldr	r0, [pc, #32]	; (8184 <noiseSetTilt+0x44>)
    8164:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    8168:	f001 f846 	bl	91f8 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    816c:	eeb0 0a48 	vmov.f32	s0, s16
    8170:	f001 f962 	bl	9438 <__dbToATableLookup_veneer>
    8174:	4804      	ldr	r0, [pc, #16]	; (8188 <noiseSetTilt+0x48>)
    8176:	4428      	add	r0, r5
    8178:	f001 f852 	bl	9220 <__tVZFilterHS_setGain_veneer>
}
    817c:	ecbd 8b02 	vpop	{d8}
    8180:	bd38      	pop	{r3, r4, r5, pc}
    8182:	bf00      	nop
    8184:	2001d51c 	.word	0x2001d51c
    8188:	2001d524 	.word	0x2001d524
    818c:	f3af 8000 	nop.w
    8190:	f3af 8000 	nop.w
    8194:	f3af 8000 	nop.w
    8198:	f3af 8000 	nop.w
    819c:	f3af 8000 	nop.w

000081a0 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
    81a0:	b510      	push	{r4, lr}
    81a2:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    81a4:	eddf 7a07 	vldr	s15, [pc, #28]	; 81c4 <noiseSetGain+0x24>
    81a8:	ee20 0a27 	vmul.f32	s0, s0, s15
    81ac:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
    81b0:	ee30 0a67 	vsub.f32	s0, s0, s15
    81b4:	f001 f940 	bl	9438 <__dbToATableLookup_veneer>
    81b8:	4803      	ldr	r0, [pc, #12]	; (81c8 <noiseSetGain+0x28>)
    81ba:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    81be:	f001 f9f3 	bl	95a8 <__tVZFilterBell_setGain_veneer>
}
    81c2:	bd10      	pop	{r4, pc}
    81c4:	42080000 	.word	0x42080000
    81c8:	2001d500 	.word	0x2001d500
    81cc:	f3af 8000 	nop.w
    81d0:	f3af 8000 	nop.w
    81d4:	f3af 8000 	nop.w
    81d8:	f3af 8000 	nop.w
    81dc:	f3af 8000 	nop.w

000081e0 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
    81e0:	b510      	push	{r4, lr}
    81e2:	460c      	mov	r4, r1
	value = (value * 77.0f) + 42.0f;
    81e4:	eddf 7a07 	vldr	s15, [pc, #28]	; 8204 <noiseSetFreq+0x24>
    81e8:	ee20 0a27 	vmul.f32	s0, s0, s15
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    81ec:	eddf 7a06 	vldr	s15, [pc, #24]	; 8208 <noiseSetFreq+0x28>
    81f0:	ee30 0a27 	vadd.f32	s0, s0, s15
    81f4:	f001 f8b8 	bl	9368 <__faster_mtof_veneer>
    81f8:	4804      	ldr	r0, [pc, #16]	; (820c <noiseSetFreq+0x2c>)
    81fa:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    81fe:	f001 fa43 	bl	9688 <__tVZFilterBell_setFreq_veneer>
	//value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);

}
    8202:	bd10      	pop	{r4, pc}
    8204:	429a0000 	.word	0x429a0000
    8208:	42280000 	.word	0x42280000
    820c:	2001d500 	.word	0x2001d500
    8210:	f3af 8000 	nop.w
    8214:	f3af 8000 	nop.w
    8218:	f3af 8000 	nop.w
    821c:	f3af 8000 	nop.w

00008220 <noise_tick>:


void __ATTR_ITCMRAM noise_tick(int string)
{
    8220:	b538      	push	{r3, r4, r5, lr}
    8222:	ed2d 8b04 	vpush	{d8-d9}
    8226:	4604      	mov	r4, r0
	float enabled = params[Noise].realVal[string];
    8228:	4b2b      	ldr	r3, [pc, #172]	; (82d8 <noise_tick+0xb8>)
    822a:	f100 0280 	add.w	r2, r0, #128	; 0x80
    822e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8232:	edd2 8a00 	vldr	s17, [r2]
	float amp = params[NoiseAmp].realVal[string];
    8236:	f100 029c 	add.w	r2, r0, #156	; 0x9c
    823a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    823e:	ed92 8a00 	vldr	s16, [r2]
	float filterSend = params[NoiseFilterSend].realVal[string];
    8242:	f100 02a3 	add.w	r2, r0, #163	; 0xa3
    8246:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    824a:	ed93 9a00 	vldr	s18, [r3]
	amp = amp < 0.f ? 0.f : amp;
    824e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    8252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8256:	d43c      	bmi.n	82d2 <noise_tick+0xb2>
	float sample = random_values[randomValPointer++];
    8258:	4b20      	ldr	r3, [pc, #128]	; (82dc <noise_tick+0xbc>)
    825a:	781a      	ldrb	r2, [r3, #0]
    825c:	1c51      	adds	r1, r2, #1
    825e:	7019      	strb	r1, [r3, #0]
    8260:	4b1f      	ldr	r3, [pc, #124]	; (82e0 <noise_tick+0xc0>)
    8262:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    8266:	00a5      	lsls	r5, r4, #2
    8268:	ed93 0a00 	vldr	s0, [r3]
    826c:	481d      	ldr	r0, [pc, #116]	; (82e4 <noise_tick+0xc4>)
    826e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    8272:	f001 f841 	bl	92f8 <__tVZFilterLS_tick_veneer>
	sample = tVZFilterHS_tick(&noiseShelf2[string], sample);
    8276:	481c      	ldr	r0, [pc, #112]	; (82e8 <noise_tick+0xc8>)
    8278:	4428      	add	r0, r5
    827a:	f001 f911 	bl	94a0 <__tVZFilterHS_tick_veneer>
	sample = tVZFilterBell_tick(&noiseBell1[string], sample);
    827e:	481b      	ldr	r0, [pc, #108]	; (82ec <noise_tick+0xcc>)
    8280:	4428      	add	r0, r5
    8282:	f000 ffdd 	bl	9240 <__tVZFilterBell_tick_veneer>
	sample = sample * amp;
    8286:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    828a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    828e:	ee30 7a27 	vadd.f32	s14, s0, s15
    8292:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    8296:	ee27 7a26 	vmul.f32	s14, s14, s13
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    829a:	1da2      	adds	r2, r4, #6
    829c:	4b14      	ldr	r3, [pc, #80]	; (82f0 <noise_tick+0xd0>)
    829e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    82a2:	ed83 7a00 	vstr	s14, [r3]
	noiseOuts[0][string] = sample * filterSend *  enabled;
    82a6:	ee29 7a00 	vmul.f32	s14, s18, s0
    82aa:	ee27 7a28 	vmul.f32	s14, s14, s17
    82ae:	4b11      	ldr	r3, [pc, #68]	; (82f4 <noise_tick+0xd4>)
    82b0:	441d      	add	r5, r3
    82b2:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    82b6:	ee77 7ac9 	vsub.f32	s15, s15, s18
    82ba:	ee67 7a80 	vmul.f32	s15, s15, s0
    82be:	ee67 7aa8 	vmul.f32	s15, s15, s17
    82c2:	3402      	adds	r4, #2
    82c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    82c8:	edc3 7a00 	vstr	s15, [r3]
}
    82cc:	ecbd 8b04 	vpop	{d8-d9}
    82d0:	bd38      	pop	{r3, r4, r5, pc}
	amp = amp < 0.f ? 0.f : amp;
    82d2:	ed9f 8a09 	vldr	s16, [pc, #36]	; 82f8 <noise_tick+0xd8>
    82d6:	e7bf      	b.n	8258 <noise_tick+0x38>
    82d8:	200190dc 	.word	0x200190dc
    82dc:	2001d68c 	.word	0x2001d68c
    82e0:	2001a264 	.word	0x2001a264
    82e4:	2001d51c 	.word	0x2001d51c
    82e8:	2001d524 	.word	0x2001d524
    82ec:	2001d500 	.word	0x2001d500
    82f0:	2001d77c 	.word	0x2001d77c
    82f4:	2001d50c 	.word	0x2001d50c
    82f8:	00000000 	.word	0x00000000
    82fc:	f3af 8000 	nop.w

00008300 <audioTickSynth>:
{
    8300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8304:	ed2d 8b04 	vpush	{d8-d9}
    8308:	b087      	sub	sp, #28
    830a:	af00      	add	r7, sp, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    830c:	4c8d      	ldr	r4, [pc, #564]	; (8544 <audioTickSynth+0x244>)
    830e:	6863      	ldr	r3, [r4, #4]
    8310:	607b      	str	r3, [r7, #4]
	uint32_t tempCountMap = DWT->CYCCNT;
    8312:	6865      	ldr	r5, [r4, #4]
	tickMappings();
    8314:	f7fe fb14 	bl	6940 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    8318:	6863      	ldr	r3, [r4, #4]
    831a:	1b5b      	subs	r3, r3, r5
    831c:	4a8a      	ldr	r2, [pc, #552]	; (8548 <audioTickSynth+0x248>)
    831e:	6013      	str	r3, [r2, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    8320:	6864      	ldr	r4, [r4, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    8322:	488a      	ldr	r0, [pc, #552]	; (854c <audioTickSynth+0x24c>)
    8324:	f001 f99c 	bl	9660 <__tExpSmooth_tick_veneer>
    8328:	eeb0 8a40 	vmov.f32	s16, s0
	for (int i = 0; i < 12; i++)
    832c:	2500      	movs	r5, #0
    832e:	e00d      	b.n	834c <audioTickSynth+0x4c>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    8330:	1d29      	adds	r1, r5, #4
    8332:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    8336:	4a86      	ldr	r2, [pc, #536]	; (8550 <audioTickSynth+0x250>)
    8338:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    833c:	ed82 0a00 	vstr	s0, [r2]
		for (int v = 0; v < numStringsThisBoard; v++)
    8340:	3301      	adds	r3, #1
    8342:	4a84      	ldr	r2, [pc, #528]	; (8554 <audioTickSynth+0x254>)
    8344:	7812      	ldrb	r2, [r2, #0]
    8346:	429a      	cmp	r2, r3
    8348:	dcf2      	bgt.n	8330 <audioTickSynth+0x30>
	for (int i = 0; i < 12; i++)
    834a:	3501      	adds	r5, #1
    834c:	2d0b      	cmp	r5, #11
    834e:	dc0b      	bgt.n	8368 <audioTickSynth+0x68>
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    8350:	00ae      	lsls	r6, r5, #2
    8352:	4881      	ldr	r0, [pc, #516]	; (8558 <audioTickSynth+0x258>)
    8354:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    8358:	f001 f982 	bl	9660 <__tExpSmooth_tick_veneer>
    835c:	4b7f      	ldr	r3, [pc, #508]	; (855c <audioTickSynth+0x25c>)
    835e:	4433      	add	r3, r6
    8360:	ed83 0a00 	vstr	s0, [r3]
		for (int v = 0; v < numStringsThisBoard; v++)
    8364:	2300      	movs	r3, #0
    8366:	e7ec      	b.n	8342 <audioTickSynth+0x42>
	for (int i = 0; i < 10; i++)
    8368:	2500      	movs	r5, #0
    836a:	e00e      	b.n	838a <audioTickSynth+0x8a>
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    836c:	f105 011c 	add.w	r1, r5, #28
    8370:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    8374:	4a76      	ldr	r2, [pc, #472]	; (8550 <audioTickSynth+0x250>)
    8376:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    837a:	ed82 0a00 	vstr	s0, [r2]
		for (int v = 0; v < numStringsThisBoard; v++)
    837e:	3301      	adds	r3, #1
    8380:	4a74      	ldr	r2, [pc, #464]	; (8554 <audioTickSynth+0x254>)
    8382:	7812      	ldrb	r2, [r2, #0]
    8384:	429a      	cmp	r2, r3
    8386:	dcf1      	bgt.n	836c <audioTickSynth+0x6c>
	for (int i = 0; i < 10; i++)
    8388:	3501      	adds	r5, #1
    838a:	2d09      	cmp	r5, #9
    838c:	dc0b      	bgt.n	83a6 <audioTickSynth+0xa6>
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    838e:	00ae      	lsls	r6, r5, #2
    8390:	4873      	ldr	r0, [pc, #460]	; (8560 <audioTickSynth+0x260>)
    8392:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    8396:	f001 f963 	bl	9660 <__tExpSmooth_tick_veneer>
    839a:	4b72      	ldr	r3, [pc, #456]	; (8564 <audioTickSynth+0x264>)
    839c:	4433      	add	r3, r6
    839e:	ed83 0a00 	vstr	s0, [r3]
		for (int v = 0; v < numStringsThisBoard; v++)
    83a2:	2300      	movs	r3, #0
    83a4:	e7ec      	b.n	8380 <audioTickSynth+0x80>
	for (int v = 0; v < numStringsThisBoard; v++)
    83a6:	2200      	movs	r2, #0
    83a8:	e008      	b.n	83bc <audioTickSynth+0xbc>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    83aa:	f102 0120 	add.w	r1, r2, #32
    83ae:	4b68      	ldr	r3, [pc, #416]	; (8550 <audioTickSynth+0x250>)
    83b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    83b4:	496c      	ldr	r1, [pc, #432]	; (8568 <audioTickSynth+0x268>)
    83b6:	6809      	ldr	r1, [r1, #0]
    83b8:	6019      	str	r1, [r3, #0]
	for (int v = 0; v < numStringsThisBoard; v++)
    83ba:	3201      	adds	r2, #1
    83bc:	4b65      	ldr	r3, [pc, #404]	; (8554 <audioTickSynth+0x254>)
    83be:	781b      	ldrb	r3, [r3, #0]
    83c0:	4293      	cmp	r3, r2
    83c2:	dcf2      	bgt.n	83aa <audioTickSynth+0xaa>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    83c4:	495f      	ldr	r1, [pc, #380]	; (8544 <audioTickSynth+0x244>)
    83c6:	684a      	ldr	r2, [r1, #4]
    83c8:	1b12      	subs	r2, r2, r4
    83ca:	4868      	ldr	r0, [pc, #416]	; (856c <audioTickSynth+0x26c>)
    83cc:	6002      	str	r2, [r0, #0]
	float note[numStringsThisBoard];
    83ce:	009b      	lsls	r3, r3, #2
    83d0:	3307      	adds	r3, #7
    83d2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    83d6:	ebad 0d03 	sub.w	sp, sp, r3
    83da:	466e      	mov	r6, sp
	uint32_t tempPerStringTick = DWT->CYCCNT;
    83dc:	f8d1 b004 	ldr.w	fp, [r1, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    83e0:	2400      	movs	r4, #0
	float masterSample = 0.0f;
    83e2:	eddf 8a63 	vldr	s17, [pc, #396]	; 8570 <audioTickSynth+0x270>
	for (int v = 0; v < numStringsThisBoard; v++)
    83e6:	e10f      	b.n	8608 <audioTickSynth+0x308>
			note[v] = 0.0f;
    83e8:	2200      	movs	r2, #0
    83ea:	6002      	str	r2, [r0, #0]
    83ec:	e13e      	b.n	866c <audioTickSynth+0x36c>
			note[v] = 64.0f;
    83ee:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
    83f2:	601a      	str	r2, [r3, #0]
    83f4:	e151      	b.n	869a <audioTickSynth+0x39a>
			noise_tick(v);
    83f6:	4620      	mov	r0, r4
    83f8:	f7ff ff12 	bl	8220 <noise_tick>
    83fc:	e17a      	b.n	86f4 <audioTickSynth+0x3f4>
			filterSamps[0] += oscOuts[0][i][v];
    83fe:	4b5d      	ldr	r3, [pc, #372]	; (8574 <audioTickSynth+0x274>)
    8400:	eb04 0241 	add.w	r2, r4, r1, lsl #1
    8404:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    8408:	ed90 7a00 	vldr	s14, [r0]
    840c:	edd7 7a04 	vldr	s15, [r7, #16]
    8410:	ee77 7a87 	vadd.f32	s15, s15, s14
    8414:	edc7 7a04 	vstr	s15, [r7, #16]
			filterSamps[1] += oscOuts[1][i][v];
    8418:	3206      	adds	r2, #6
    841a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    841e:	ed93 7a00 	vldr	s14, [r3]
    8422:	edd7 7a05 	vldr	s15, [r7, #20]
    8426:	ee77 7a87 	vadd.f32	s15, s15, s14
    842a:	edc7 7a05 	vstr	s15, [r7, #20]
		for (int i = 0; i < oscToTick; i++)
    842e:	3101      	adds	r1, #1
    8430:	4b51      	ldr	r3, [pc, #324]	; (8578 <audioTickSynth+0x278>)
    8432:	781b      	ldrb	r3, [r3, #0]
    8434:	428b      	cmp	r3, r1
    8436:	dce2      	bgt.n	83fe <audioTickSynth+0xfe>
		filterSamps[0] += noiseOuts[0][v];
    8438:	4b50      	ldr	r3, [pc, #320]	; (857c <audioTickSynth+0x27c>)
    843a:	eb03 0284 	add.w	r2, r3, r4, lsl #2
    843e:	ed92 7a00 	vldr	s14, [r2]
    8442:	edd7 7a04 	vldr	s15, [r7, #16]
    8446:	ee77 7a87 	vadd.f32	s15, s15, s14
    844a:	edc7 7a04 	vstr	s15, [r7, #16]
		filterSamps[1] += noiseOuts[1][v];
    844e:	1ca2      	adds	r2, r4, #2
    8450:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8454:	ed93 7a00 	vldr	s14, [r3]
    8458:	edd7 7a05 	vldr	s15, [r7, #20]
    845c:	ee77 7a87 	vadd.f32	s15, s15, s14
    8460:	edc7 7a05 	vstr	s15, [r7, #20]
		uint32_t tempCountFilt = DWT->CYCCNT;
    8464:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8544 <audioTickSynth+0x244>
    8468:	f8d8 5004 	ldr.w	r5, [r8, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    846c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    8470:	4621      	mov	r1, r4
    8472:	ed93 0a00 	vldr	s0, [r3]
    8476:	f107 0010 	add.w	r0, r7, #16
    847a:	f7fd fd41 	bl	5f00 <filter_tick>
    847e:	ed87 0a03 	vstr	s0, [r7, #12]
		timeFilt = DWT->CYCCNT - tempCountFilt;
    8482:	f8d8 3004 	ldr.w	r3, [r8, #4]
    8486:	1b5b      	subs	r3, r3, r5
    8488:	4a3d      	ldr	r2, [pc, #244]	; (8580 <audioTickSynth+0x280>)
    848a:	6013      	str	r3, [r2, #0]
		if (fxPre)
    848c:	4b3d      	ldr	r3, [pc, #244]	; (8584 <audioTickSynth+0x284>)
    848e:	781b      	ldrb	r3, [r3, #0]
    8490:	b143      	cbz	r3, 84a4 <audioTickSynth+0x1a4>
			sample *= amplitude[v];
    8492:	4b3d      	ldr	r3, [pc, #244]	; (8588 <audioTickSynth+0x288>)
    8494:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8498:	edd3 7a00 	vldr	s15, [r3]
    849c:	ee20 0a27 	vmul.f32	s0, s0, s15
    84a0:	ed87 0a03 	vstr	s0, [r7, #12]
		uint32_t tempCountOS = DWT->CYCCNT;
    84a4:	4b27      	ldr	r3, [pc, #156]	; (8544 <audioTickSynth+0x244>)
    84a6:	f8d3 a004 	ldr.w	sl, [r3, #4]
		if (overSampled)
    84aa:	4b38      	ldr	r3, [pc, #224]	; (858c <audioTickSynth+0x28c>)
    84ac:	681b      	ldr	r3, [r3, #0]
    84ae:	b90b      	cbnz	r3, 84b4 <audioTickSynth+0x1b4>
			for (int i = 0; i < NUM_EFFECT; i++)
    84b0:	2500      	movs	r5, #0
    84b2:	e12a      	b.n	870a <audioTickSynth+0x40a>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    84b4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    84b8:	2301      	movs	r3, #1
    84ba:	4a35      	ldr	r2, [pc, #212]	; (8590 <audioTickSynth+0x290>)
    84bc:	f107 010c 	add.w	r1, r7, #12
    84c0:	4d34      	ldr	r5, [pc, #208]	; (8594 <audioTickSynth+0x294>)
    84c2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    84c6:	f001 f80f 	bl	94e8 <__arm_fir_interpolate_f32_veneer>
			for (int i = 0; i < 4; i++)
    84ca:	2500      	movs	r5, #0
    84cc:	e030      	b.n	8530 <audioTickSynth+0x230>
						float dry = oversamplerArray[j]; //store the dry value to mix later
    84ce:	4b30      	ldr	r3, [pc, #192]	; (8590 <audioTickSynth+0x290>)
    84d0:	eb03 0889 	add.w	r8, r3, r9, lsl #2
    84d4:	ed98 9a00 	vldr	s18, [r8]
						oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
    84d8:	4b2f      	ldr	r3, [pc, #188]	; (8598 <audioTickSynth+0x298>)
    84da:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    84de:	4621      	mov	r1, r4
    84e0:	4628      	mov	r0, r5
    84e2:	eeb0 0a49 	vmov.f32	s0, s18
    84e6:	4798      	blx	r3
    84e8:	ed88 0a00 	vstr	s0, [r8]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    84ec:	eb04 0345 	add.w	r3, r4, r5, lsl #1
    84f0:	4a2a      	ldr	r2, [pc, #168]	; (859c <audioTickSynth+0x29c>)
    84f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    84f6:	ed92 7a00 	vldr	s14, [r2]
    84fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    84fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
    8502:	ee67 7a89 	vmul.f32	s15, s15, s18
    8506:	ee20 0a07 	vmul.f32	s0, s0, s14
    850a:	ee77 7a80 	vadd.f32	s15, s15, s0
    850e:	edc8 7a00 	vstr	s15, [r8]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    8512:	4a23      	ldr	r2, [pc, #140]	; (85a0 <audioTickSynth+0x2a0>)
    8514:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8518:	ed93 7a00 	vldr	s14, [r3]
    851c:	ee67 7a87 	vmul.f32	s15, s15, s14
    8520:	edc8 7a00 	vstr	s15, [r8]
					for (int j = 0; j < OVERSAMPLE; j++)
    8524:	f109 0901 	add.w	r9, r9, #1
    8528:	f1b9 0f01 	cmp.w	r9, #1
    852c:	ddcf      	ble.n	84ce <audioTickSynth+0x1ce>
			for (int i = 0; i < 4; i++)
    852e:	3501      	adds	r5, #1
    8530:	2d03      	cmp	r5, #3
    8532:	dc39      	bgt.n	85a8 <audioTickSynth+0x2a8>
				if (effectsActive[i])
    8534:	4b1b      	ldr	r3, [pc, #108]	; (85a4 <audioTickSynth+0x2a4>)
    8536:	5d5b      	ldrb	r3, [r3, r5]
    8538:	2b00      	cmp	r3, #0
    853a:	d0f8      	beq.n	852e <audioTickSynth+0x22e>
					for (int j = 0; j < OVERSAMPLE; j++)
    853c:	f04f 0900 	mov.w	r9, #0
    8540:	e7f2      	b.n	8528 <audioTickSynth+0x228>
    8542:	bf00      	nop
    8544:	e0001000 	.word	0xe0001000
    8548:	2001d8dc 	.word	0x2001d8dc
    854c:	2001444c 	.word	0x2001444c
    8550:	2001d77c 	.word	0x2001d77c
    8554:	20000694 	.word	0x20000694
    8558:	20005430 	.word	0x20005430
    855c:	200053e0 	.word	0x200053e0
    8560:	2000551c 	.word	0x2000551c
    8564:	200054f4 	.word	0x200054f4
    8568:	20014444 	.word	0x20014444
    856c:	2001d8f0 	.word	0x2001d8f0
    8570:	00000000 	.word	0x00000000
    8574:	2001d560 	.word	0x2001d560
    8578:	20000ae8 	.word	0x20000ae8
    857c:	2001d50c 	.word	0x2001d50c
    8580:	2001d8d0 	.word	0x2001d8d0
    8584:	200166b9 	.word	0x200166b9
    8588:	2001cf00 	.word	0x2001cf00
    858c:	20000aec 	.word	0x20000aec
    8590:	2001d590 	.word	0x2001d590
    8594:	2001d544 	.word	0x2001d544
    8598:	2001d130 	.word	0x2001d130
    859c:	2001d1d4 	.word	0x2001d1d4
    85a0:	2001d1f4 	.word	0x2001d1f4
    85a4:	2001458c 	.word	0x2001458c
			arm_fir_decimate_f32(&osD[v], (float*)&oversamplerArray, &sample, 2);
    85a8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    85ac:	2302      	movs	r3, #2
    85ae:	f107 020c 	add.w	r2, r7, #12
    85b2:	49a6      	ldr	r1, [pc, #664]	; (884c <audioTickSynth+0x54c>)
    85b4:	4da6      	ldr	r5, [pc, #664]	; (8850 <audioTickSynth+0x550>)
    85b6:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    85ba:	f000 ff25 	bl	9408 <__arm_fir_decimate_f32_veneer>
		timeOS = DWT->CYCCNT - tempCountOS;
    85be:	4ba5      	ldr	r3, [pc, #660]	; (8854 <audioTickSynth+0x554>)
    85c0:	685b      	ldr	r3, [r3, #4]
    85c2:	eba3 030a 	sub.w	r3, r3, sl
    85c6:	4aa4      	ldr	r2, [pc, #656]	; (8858 <audioTickSynth+0x558>)
    85c8:	6013      	str	r3, [r2, #0]
		if (!fxPre)
    85ca:	4ba4      	ldr	r3, [pc, #656]	; (885c <audioTickSynth+0x55c>)
    85cc:	781b      	ldrb	r3, [r3, #0]
    85ce:	b953      	cbnz	r3, 85e6 <audioTickSynth+0x2e6>
			sample *= amplitude[v];
    85d0:	4ba3      	ldr	r3, [pc, #652]	; (8860 <audioTickSynth+0x560>)
    85d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    85d6:	ed93 7a00 	vldr	s14, [r3]
    85da:	edd7 7a03 	vldr	s15, [r7, #12]
    85de:	ee67 7a87 	vmul.f32	s15, s15, s14
    85e2:	edc7 7a03 	vstr	s15, [r7, #12]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    85e6:	ed97 0a03 	vldr	s0, [r7, #12]
    85ea:	489e      	ldr	r0, [pc, #632]	; (8864 <audioTickSynth+0x564>)
    85ec:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    85f0:	f001 f882 	bl	96f8 <__tSVF_tick_veneer>
    85f4:	4b9c      	ldr	r3, [pc, #624]	; (8868 <audioTickSynth+0x568>)
    85f6:	edd3 7a00 	vldr	s15, [r3]
    85fa:	ee20 0a27 	vmul.f32	s0, s0, s15
    85fe:	ed87 0a03 	vstr	s0, [r7, #12]
		masterSample += sample;// * finalMaster[v];
    8602:	ee78 8a80 	vadd.f32	s17, s17, s0
	for (int v = 0; v < numStringsThisBoard; v++)
    8606:	3401      	adds	r4, #1
    8608:	4b98      	ldr	r3, [pc, #608]	; (886c <audioTickSynth+0x56c>)
    860a:	781b      	ldrb	r3, [r3, #0]
    860c:	42a3      	cmp	r3, r4
    860e:	f340 80ac 	ble.w	876a <audioTickSynth+0x46a>
		float sample = 0.0f;
    8612:	2300      	movs	r3, #0
    8614:	60fb      	str	r3, [r7, #12]
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    8616:	4b8f      	ldr	r3, [pc, #572]	; (8854 <audioTickSynth+0x554>)
    8618:	6859      	ldr	r1, [r3, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    861a:	4b95      	ldr	r3, [pc, #596]	; (8870 <audioTickSynth+0x570>)
    861c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8620:	edd3 7a00 	vldr	s15, [r3]
    8624:	4b93      	ldr	r3, [pc, #588]	; (8874 <audioTickSynth+0x574>)
    8626:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    862a:	ed93 7a00 	vldr	s14, [r3]
    862e:	ee77 7a87 	vadd.f32	s15, s15, s14
    8632:	eb06 0084 	add.w	r0, r6, r4, lsl #2
    8636:	edc0 7a00 	vstr	s15, [r0]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    863a:	4b8f      	ldr	r3, [pc, #572]	; (8878 <audioTickSynth+0x578>)
    863c:	ed93 7a00 	vldr	s14, [r3]
    8640:	ee77 7ac7 	vsub.f32	s15, s15, s14
    8644:	4b8d      	ldr	r3, [pc, #564]	; (887c <audioTickSynth+0x57c>)
    8646:	ed93 7a00 	vldr	s14, [r3]
    864a:	ee67 7a87 	vmul.f32	s15, s15, s14
    864e:	f104 0222 	add.w	r2, r4, #34	; 0x22
    8652:	4b8b      	ldr	r3, [pc, #556]	; (8880 <audioTickSynth+0x580>)
    8654:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8658:	edc3 7a00 	vstr	s15, [r3]
		if (note[v] < 0.0f)
    865c:	edd0 7a00 	vldr	s15, [r0]
    8660:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    8664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8668:	f53f aebe 	bmi.w	83e8 <audioTickSynth+0xe8>
		if (note[v] > 127.0f)
    866c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    8670:	ed93 7a00 	vldr	s14, [r3]
    8674:	eddf 7a83 	vldr	s15, [pc, #524]	; 8884 <audioTickSynth+0x584>
    8678:	eeb4 7ae7 	vcmpe.f32	s14, s15
    867c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8680:	dd01      	ble.n	8686 <audioTickSynth+0x386>
			note[v] = 127.0f;
    8682:	edc3 7a00 	vstr	s15, [r3]
		if (isnan(note[v]))
    8686:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    868a:	edd3 7a00 	vldr	s15, [r3]
    868e:	eef4 7a67 	vcmp.f32	s15, s15
    8692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8696:	f5bf aeaa 	bvs.w	83ee <audioTickSynth+0xee>
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    869a:	4d6e      	ldr	r5, [pc, #440]	; (8854 <audioTickSynth+0x554>)
    869c:	686b      	ldr	r3, [r5, #4]
    869e:	1a5b      	subs	r3, r3, r1
    86a0:	4a79      	ldr	r2, [pc, #484]	; (8888 <audioTickSynth+0x588>)
    86a2:	6013      	str	r3, [r2, #0]
		uint32_t tempCountEnv = DWT->CYCCNT;
    86a4:	f8d5 8004 	ldr.w	r8, [r5, #4]
		envelope_tick(v);
    86a8:	4620      	mov	r0, r4
    86aa:	f7fd fff9 	bl	66a0 <envelope_tick>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    86ae:	686b      	ldr	r3, [r5, #4]
    86b0:	eba3 0308 	sub.w	r3, r3, r8
    86b4:	4a75      	ldr	r2, [pc, #468]	; (888c <audioTickSynth+0x58c>)
    86b6:	6013      	str	r3, [r2, #0]
		uint32_t tempCountLFO = DWT->CYCCNT;
    86b8:	f8d5 8004 	ldr.w	r8, [r5, #4]
		lfo_tick(v);
    86bc:	4620      	mov	r0, r4
    86be:	f7fe f81f 	bl	6700 <lfo_tick>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    86c2:	686b      	ldr	r3, [r5, #4]
    86c4:	eba3 0308 	sub.w	r3, r3, r8
    86c8:	4a71      	ldr	r2, [pc, #452]	; (8890 <audioTickSynth+0x590>)
    86ca:	6013      	str	r3, [r2, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    86cc:	f8d5 8004 	ldr.w	r8, [r5, #4]
		oscillator_tick(note[v], v);
    86d0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
    86d4:	4620      	mov	r0, r4
    86d6:	ed93 0a00 	vldr	s0, [r3]
    86da:	f7fd fa41 	bl	5b60 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    86de:	686b      	ldr	r3, [r5, #4]
    86e0:	eba3 0308 	sub.w	r3, r3, r8
    86e4:	4a6b      	ldr	r2, [pc, #428]	; (8894 <audioTickSynth+0x594>)
    86e6:	6013      	str	r3, [r2, #0]
		uint32_t tempCountNoise = DWT->CYCCNT;
    86e8:	686d      	ldr	r5, [r5, #4]
		if (noiseOn)
    86ea:	4b6b      	ldr	r3, [pc, #428]	; (8898 <audioTickSynth+0x598>)
    86ec:	781b      	ldrb	r3, [r3, #0]
    86ee:	2b00      	cmp	r3, #0
    86f0:	f47f ae81 	bne.w	83f6 <audioTickSynth+0xf6>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    86f4:	4b57      	ldr	r3, [pc, #348]	; (8854 <audioTickSynth+0x554>)
    86f6:	685b      	ldr	r3, [r3, #4]
    86f8:	1b5b      	subs	r3, r3, r5
    86fa:	4a68      	ldr	r2, [pc, #416]	; (889c <audioTickSynth+0x59c>)
    86fc:	6013      	str	r3, [r2, #0]
		float filterSamps[2] = {0.0f, 0.0f};
    86fe:	2300      	movs	r3, #0
    8700:	613b      	str	r3, [r7, #16]
    8702:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < oscToTick; i++)
    8704:	2100      	movs	r1, #0
    8706:	e693      	b.n	8430 <audioTickSynth+0x130>
			for (int i = 0; i < NUM_EFFECT; i++)
    8708:	3501      	adds	r5, #1
    870a:	2d03      	cmp	r5, #3
    870c:	f73f af57 	bgt.w	85be <audioTickSynth+0x2be>
				if (effectsActive[i])
    8710:	4b63      	ldr	r3, [pc, #396]	; (88a0 <audioTickSynth+0x5a0>)
    8712:	5d5b      	ldrb	r3, [r3, r5]
    8714:	2b00      	cmp	r3, #0
    8716:	d0f7      	beq.n	8708 <audioTickSynth+0x408>
					float dry = sample;
    8718:	ed97 9a03 	vldr	s18, [r7, #12]
					sample = effectTick[i](sample, i, v); //run the effect
    871c:	4b61      	ldr	r3, [pc, #388]	; (88a4 <audioTickSynth+0x5a4>)
    871e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    8722:	4621      	mov	r1, r4
    8724:	4628      	mov	r0, r5
    8726:	eeb0 0a49 	vmov.f32	s0, s18
    872a:	4798      	blx	r3
    872c:	ed87 0a03 	vstr	s0, [r7, #12]
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    8730:	eb04 0345 	add.w	r3, r4, r5, lsl #1
    8734:	4a5c      	ldr	r2, [pc, #368]	; (88a8 <audioTickSynth+0x5a8>)
    8736:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    873a:	ed92 7a00 	vldr	s14, [r2]
    873e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    8742:	ee77 7ac7 	vsub.f32	s15, s15, s14
    8746:	ee67 7a89 	vmul.f32	s15, s15, s18
    874a:	ee20 0a07 	vmul.f32	s0, s0, s14
    874e:	ee77 7a80 	vadd.f32	s15, s15, s0
    8752:	edc7 7a03 	vstr	s15, [r7, #12]
					sample *= fxPostGain[i][v];
    8756:	4a55      	ldr	r2, [pc, #340]	; (88ac <audioTickSynth+0x5ac>)
    8758:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    875c:	ed93 7a00 	vldr	s14, [r3]
    8760:	ee67 7a87 	vmul.f32	s15, s15, s14
    8764:	edc7 7a03 	vstr	s15, [r7, #12]
    8768:	e7ce      	b.n	8708 <audioTickSynth+0x408>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    876a:	4b3a      	ldr	r3, [pc, #232]	; (8854 <audioTickSynth+0x554>)
    876c:	685b      	ldr	r3, [r3, #4]
    876e:	eba3 030b 	sub.w	r3, r3, fp
    8772:	4a4f      	ldr	r2, [pc, #316]	; (88b0 <audioTickSynth+0x5b0>)
    8774:	6013      	str	r3, [r2, #0]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    8776:	eddf 7a4f 	vldr	s15, [pc, #316]	; 88b4 <audioTickSynth+0x5b4>
    877a:	ee68 0a27 	vmul.f32	s1, s16, s15
    877e:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 88b8 <audioTickSynth+0x5b8>
    8782:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8884 <audioTickSynth+0x584>
    8786:	ee70 0a80 	vadd.f32	s1, s1, s0
    878a:	f000 fce5 	bl	9158 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
    878e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    8792:	ee17 3a90 	vmov	r3, s15
	float alpha = volIdx-volIdxInt;
    8796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    879a:	ee70 7a67 	vsub.f32	s15, s0, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    879e:	1c59      	adds	r1, r3, #1
    87a0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
    87a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    87a8:	ee37 7a67 	vsub.f32	s14, s14, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    87ac:	4a43      	ldr	r2, [pc, #268]	; (88bc <audioTickSynth+0x5bc>)
    87ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    87b2:	edd3 6a00 	vldr	s13, [r3]
    87b6:	ee66 6a87 	vmul.f32	s13, s13, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    87ba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    87be:	ed92 7a00 	vldr	s14, [r2]
    87c2:	ee67 7a27 	vmul.f32	s15, s14, s15
    87c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
	if (pedalControlsMaster)
    87ca:	4b3d      	ldr	r3, [pc, #244]	; (88c0 <audioTickSynth+0x5c0>)
    87cc:	781b      	ldrb	r3, [r3, #0]
    87ce:	b10b      	cbz	r3, 87d4 <audioTickSynth+0x4d4>
		masterSample *= outVol;
    87d0:	ee68 8aa7 	vmul.f32	s17, s17, s15
	if (masterSample  > .999999f)
    87d4:	eddf 7a3b 	vldr	s15, [pc, #236]	; 88c4 <audioTickSynth+0x5c4>
    87d8:	eef4 8ae7 	vcmpe.f32	s17, s15
    87dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    87e0:	dd1a      	ble.n	8818 <audioTickSynth+0x518>
		sampleClippedCountdown = 65535;
    87e2:	4b39      	ldr	r3, [pc, #228]	; (88c8 <audioTickSynth+0x5c8>)
    87e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    87e8:	801a      	strh	r2, [r3, #0]
		masterSample  = .999999f;
    87ea:	eef0 8a67 	vmov.f32	s17, s15
	timeTick = DWT->CYCCNT - tempCountTick;
    87ee:	4b19      	ldr	r3, [pc, #100]	; (8854 <audioTickSynth+0x554>)
    87f0:	685b      	ldr	r3, [r3, #4]
    87f2:	687a      	ldr	r2, [r7, #4]
    87f4:	1a9b      	subs	r3, r3, r2
    87f6:	4a35      	ldr	r2, [pc, #212]	; (88cc <audioTickSynth+0x5cc>)
    87f8:	6013      	str	r3, [r2, #0]
	return masterSample * audioMasterLevel * 0.98f;
    87fa:	4b35      	ldr	r3, [pc, #212]	; (88d0 <audioTickSynth+0x5d0>)
    87fc:	edd3 7a00 	vldr	s15, [r3]
    8800:	ee67 7aa8 	vmul.f32	s15, s15, s17
}
    8804:	ed9f 0a33 	vldr	s0, [pc, #204]	; 88d4 <audioTickSynth+0x5d4>
    8808:	ee27 0a80 	vmul.f32	s0, s15, s0
    880c:	371c      	adds	r7, #28
    880e:	46bd      	mov	sp, r7
    8810:	ecbd 8b04 	vpop	{d8-d9}
    8814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if (masterSample < -.999999f)
    8818:	eddf 7a2f 	vldr	s15, [pc, #188]	; 88d8 <audioTickSynth+0x5d8>
    881c:	eef4 8ae7 	vcmpe.f32	s17, s15
    8820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8824:	d506      	bpl.n	8834 <audioTickSynth+0x534>
		sampleClippedCountdown = 65535;
    8826:	4b28      	ldr	r3, [pc, #160]	; (88c8 <audioTickSynth+0x5c8>)
    8828:	f64f 72ff 	movw	r2, #65535	; 0xffff
    882c:	801a      	strh	r2, [r3, #0]
		masterSample = -.9999999f;
    882e:	eddf 8a2b 	vldr	s17, [pc, #172]	; 88dc <audioTickSynth+0x5dc>
    8832:	e7dc      	b.n	87ee <audioTickSynth+0x4ee>
		if (sampleClippedCountdown > 0)
    8834:	4b24      	ldr	r3, [pc, #144]	; (88c8 <audioTickSynth+0x5c8>)
    8836:	881b      	ldrh	r3, [r3, #0]
    8838:	b29b      	uxth	r3, r3
    883a:	2b00      	cmp	r3, #0
    883c:	d0d7      	beq.n	87ee <audioTickSynth+0x4ee>
			sampleClippedCountdown--;
    883e:	4a22      	ldr	r2, [pc, #136]	; (88c8 <audioTickSynth+0x5c8>)
    8840:	8813      	ldrh	r3, [r2, #0]
    8842:	b29b      	uxth	r3, r3
    8844:	3b01      	subs	r3, #1
    8846:	b29b      	uxth	r3, r3
    8848:	8013      	strh	r3, [r2, #0]
    884a:	e7d0      	b.n	87ee <audioTickSynth+0x4ee>
    884c:	2001d590 	.word	0x2001d590
    8850:	2001d52c 	.word	0x2001d52c
    8854:	e0001000 	.word	0xe0001000
    8858:	2001d8e4 	.word	0x2001d8e4
    885c:	200166b9 	.word	0x200166b9
    8860:	2001cf00 	.word	0x2001cf00
    8864:	2001d1ac 	.word	0x2001d1ac
    8868:	20000690 	.word	0x20000690
    886c:	20000694 	.word	0x20000694
    8870:	20014414 	.word	0x20014414
    8874:	2001441c 	.word	0x2001441c
    8878:	200190c4 	.word	0x200190c4
    887c:	200190c0 	.word	0x200190c0
    8880:	2001d77c 	.word	0x2001d77c
    8884:	42fe0000 	.word	0x42fe0000
    8888:	2001d8d4 	.word	0x2001d8d4
    888c:	2001d8cc 	.word	0x2001d8cc
    8890:	2001d8d8 	.word	0x2001d8d8
    8894:	2001d8e8 	.word	0x2001d8e8
    8898:	2001d508 	.word	0x2001d508
    889c:	2001d8e0 	.word	0x2001d8e0
    88a0:	2001458c 	.word	0x2001458c
    88a4:	2001d130 	.word	0x2001d130
    88a8:	2001d1d4 	.word	0x2001d1d4
    88ac:	2001d1f4 	.word	0x2001d1f4
    88b0:	2001d8ec 	.word	0x2001d8ec
    88b4:	42a00000 	.word	0x42a00000
    88b8:	423c0000 	.word	0x423c0000
    88bc:	200006a0 	.word	0x200006a0
    88c0:	2001a1ec 	.word	0x2001a1ec
    88c4:	3f7fffef 	.word	0x3f7fffef
    88c8:	2000596a 	.word	0x2000596a
    88cc:	2001d8f4 	.word	0x2001d8f4
    88d0:	200008a8 	.word	0x200008a8
    88d4:	3f7ae148 	.word	0x3f7ae148
    88d8:	bf7fffef 	.word	0xbf7fffef
    88dc:	bf7ffffe 	.word	0xbf7ffffe

000088e0 <audioFrameSynth>:
{
    88e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    88e2:	ed2d 8b02 	vpush	{d8}
    88e6:	4605      	mov	r5, r0
	uint32_t tempCountFrame = DWT->CYCCNT;
    88e8:	4b9a      	ldr	r3, [pc, #616]	; (8b54 <audioFrameSynth+0x274>)
    88ea:	685e      	ldr	r6, [r3, #4]
	if (resetStringInputs)
    88ec:	4b9a      	ldr	r3, [pc, #616]	; (8b58 <audioFrameSynth+0x278>)
    88ee:	781b      	ldrb	r3, [r3, #0]
    88f0:	b9db      	cbnz	r3, 892a <audioFrameSynth+0x4a>
	if (newPluck)
    88f2:	4b9a      	ldr	r3, [pc, #616]	; (8b5c <audioFrameSynth+0x27c>)
    88f4:	681b      	ldr	r3, [r3, #0]
    88f6:	2b00      	cmp	r3, #0
    88f8:	f040 80d5 	bne.w	8aa6 <audioFrameSynth+0x1c6>
		for (int i = 0; i < numStringsThisBoard; i++)
    88fc:	2400      	movs	r4, #0
    88fe:	e0ea      	b.n	8ad6 <audioFrameSynth+0x1f6>
				tADSRT_clear(&envs[v][i]);
    8900:	eb07 0044 	add.w	r0, r7, r4, lsl #1
    8904:	4b96      	ldr	r3, [pc, #600]	; (8b60 <audioFrameSynth+0x280>)
    8906:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    890a:	f000 fe25 	bl	9558 <__tADSRT_clear_veneer>
				previousStringInputs[i] = 0;
    890e:	4b95      	ldr	r3, [pc, #596]	; (8b64 <audioFrameSynth+0x284>)
    8910:	2200      	movs	r2, #0
    8912:	f823 2017 	strh.w	r2, [r3, r7, lsl #1]
			for (int v = 0; v < NUM_ENV; v++)
    8916:	3401      	adds	r4, #1
    8918:	2c03      	cmp	r4, #3
    891a:	ddf1      	ble.n	8900 <audioFrameSynth+0x20>
		for (int i = 0; i < numStringsThisBoard; i++)
    891c:	3701      	adds	r7, #1
    891e:	4b92      	ldr	r3, [pc, #584]	; (8b68 <audioFrameSynth+0x288>)
    8920:	781b      	ldrb	r3, [r3, #0]
    8922:	42bb      	cmp	r3, r7
    8924:	dd03      	ble.n	892e <audioFrameSynth+0x4e>
			for (int v = 0; v < NUM_ENV; v++)
    8926:	2400      	movs	r4, #0
    8928:	e7f6      	b.n	8918 <audioFrameSynth+0x38>
		for (int i = 0; i < numStringsThisBoard; i++)
    892a:	2700      	movs	r7, #0
    892c:	e7f7      	b.n	891e <audioFrameSynth+0x3e>
		resetStringInputs = 0;
    892e:	4b8a      	ldr	r3, [pc, #552]	; (8b58 <audioFrameSynth+0x278>)
    8930:	2200      	movs	r2, #0
    8932:	701a      	strb	r2, [r3, #0]
		newPluck = 1;
    8934:	4b89      	ldr	r3, [pc, #548]	; (8b5c <audioFrameSynth+0x27c>)
    8936:	2201      	movs	r2, #1
    8938:	601a      	str	r2, [r3, #0]
    893a:	e7da      	b.n	88f2 <audioFrameSynth+0x12>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    893c:	4b8b      	ldr	r3, [pc, #556]	; (8b6c <audioFrameSynth+0x28c>)
    893e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8942:	b29b      	uxth	r3, r3
    8944:	ee08 3a10 	vmov	s16, r3
    8948:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    894c:	eddf 7a88 	vldr	s15, [pc, #544]	; 8b70 <audioFrameSynth+0x290>
    8950:	ee28 8a27 	vmul.f32	s16, s16, s15
				stringOctave[i] = octave;
    8954:	4b87      	ldr	r3, [pc, #540]	; (8b74 <audioFrameSynth+0x294>)
    8956:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    895a:	4a87      	ldr	r2, [pc, #540]	; (8b78 <audioFrameSynth+0x298>)
    895c:	6812      	ldr	r2, [r2, #0]
    895e:	601a      	str	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    8960:	2700      	movs	r7, #0
    8962:	e00c      	b.n	897e <audioFrameSynth+0x9e>
						if (useVelocity == 0) envVel = 1.f;
    8964:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
						tADSRT_on(&envs[v][i], envVel);
    8968:	eb04 0347 	add.w	r3, r4, r7, lsl #1
    896c:	487c      	ldr	r0, [pc, #496]	; (8b60 <audioFrameSynth+0x280>)
    896e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8972:	f000 fe99 	bl	96a8 <__tADSRT_on_veneer>
						voiceSounding = 1;
    8976:	4b81      	ldr	r3, [pc, #516]	; (8b7c <audioFrameSynth+0x29c>)
    8978:	2201      	movs	r2, #1
    897a:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    897c:	3701      	adds	r7, #1
    897e:	2f03      	cmp	r7, #3
    8980:	dc19      	bgt.n	89b6 <audioFrameSynth+0xd6>
					if (envOn[v])
    8982:	4b7f      	ldr	r3, [pc, #508]	; (8b80 <audioFrameSynth+0x2a0>)
    8984:	5ddb      	ldrb	r3, [r3, r7]
    8986:	2b00      	cmp	r3, #0
    8988:	d0f8      	beq.n	897c <audioFrameSynth+0x9c>
						param* envParams = &params[ENVELOPE_PARAMS_OFFSET + v * EnvelopeParamsNum];
    898a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    898e:	005b      	lsls	r3, r3, #1
    8990:	336c      	adds	r3, #108	; 0x6c
    8992:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    8996:	4a7b      	ldr	r2, [pc, #492]	; (8b84 <audioFrameSynth+0x2a4>)
    8998:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						float useVelocity = envParams[EnvelopeVelocity].realVal[i];
    899c:	1ca2      	adds	r2, r4, #2
    899e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    89a2:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
						if (useVelocity == 0) envVel = 1.f;
    89a6:	eef5 7a40 	vcmp.f32	s15, #0.0
    89aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    89ae:	d0d9      	beq.n	8964 <audioFrameSynth+0x84>
						float envVel = amplitz;
    89b0:	eeb0 0a48 	vmov.f32	s0, s16
    89b4:	e7d8      	b.n	8968 <audioFrameSynth+0x88>
				for (int v = 0; v < NUM_LFOS; v++)
    89b6:	2700      	movs	r7, #0
    89b8:	e000      	b.n	89bc <audioFrameSynth+0xdc>
    89ba:	3701      	adds	r7, #1
    89bc:	2f03      	cmp	r7, #3
    89be:	dc21      	bgt.n	8a04 <audioFrameSynth+0x124>
					if (lfoOn[v])
    89c0:	4b71      	ldr	r3, [pc, #452]	; (8b88 <audioFrameSynth+0x2a8>)
    89c2:	5ddb      	ldrb	r3, [r3, r7]
    89c4:	2b00      	cmp	r3, #0
    89c6:	d0f8      	beq.n	89ba <audioFrameSynth+0xda>
						param* lfoParams = &params[LFO_PARAMS_OFFSET + v * LFOParamsNum];
    89c8:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    89cc:	3384      	adds	r3, #132	; 0x84
    89ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    89d2:	4a6c      	ldr	r2, [pc, #432]	; (8b84 <audioFrameSynth+0x2a4>)
    89d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						float noteOnSync = lfoParams[LFOSync].realVal[i];
    89d8:	1ca2      	adds	r2, r4, #2
    89da:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    89de:	ed92 7a1c 	vldr	s14, [r2, #112]	; 0x70
						if (noteOnSync > 0.5f)
    89e2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    89e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    89ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    89ee:	dde4      	ble.n	89ba <audioFrameSynth+0xda>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    89f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    89f2:	1ca1      	adds	r1, r4, #2
    89f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    89f8:	4621      	mov	r1, r4
    89fa:	4638      	mov	r0, r7
    89fc:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
    8a00:	4790      	blx	r2
    8a02:	e7da      	b.n	89ba <audioFrameSynth+0xda>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    8a04:	4b61      	ldr	r3, [pc, #388]	; (8b8c <audioFrameSynth+0x2ac>)
    8a06:	781a      	ldrb	r2, [r3, #0]
    8a08:	1c51      	adds	r1, r2, #1
    8a0a:	7019      	strb	r1, [r3, #0]
    8a0c:	4b60      	ldr	r3, [pc, #384]	; (8b90 <audioFrameSynth+0x2b0>)
    8a0e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8a12:	edd3 7a00 	vldr	s15, [r3]
    8a16:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    8a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
    8a1e:	ee77 7a87 	vadd.f32	s15, s15, s14
    8a22:	4b5c      	ldr	r3, [pc, #368]	; (8b94 <audioFrameSynth+0x2b4>)
    8a24:	f104 0226 	add.w	r2, r4, #38	; 0x26
    8a28:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    8a2c:	edc2 7a00 	vstr	s15, [r2]
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    8a30:	f104 0224 	add.w	r2, r4, #36	; 0x24
    8a34:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    8a38:	ed83 8a00 	vstr	s16, [r3]
			previousStringInputs[i] = stringInputs[i];
    8a3c:	4b4b      	ldr	r3, [pc, #300]	; (8b6c <audioFrameSynth+0x28c>)
    8a3e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8a42:	b29b      	uxth	r3, r3
    8a44:	4a47      	ldr	r2, [pc, #284]	; (8b64 <audioFrameSynth+0x284>)
    8a46:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    8a4a:	3401      	adds	r4, #1
    8a4c:	4b46      	ldr	r3, [pc, #280]	; (8b68 <audioFrameSynth+0x288>)
    8a4e:	781b      	ldrb	r3, [r3, #0]
    8a50:	42a3      	cmp	r3, r4
    8a52:	dd2a      	ble.n	8aaa <audioFrameSynth+0x1ca>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    8a54:	4b43      	ldr	r3, [pc, #268]	; (8b64 <audioFrameSynth+0x284>)
    8a56:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8a5a:	b29b      	uxth	r3, r3
    8a5c:	b933      	cbnz	r3, 8a6c <audioFrameSynth+0x18c>
    8a5e:	4b43      	ldr	r3, [pc, #268]	; (8b6c <audioFrameSynth+0x28c>)
    8a60:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8a64:	b29b      	uxth	r3, r3
    8a66:	2b00      	cmp	r3, #0
    8a68:	f47f af68 	bne.w	893c <audioFrameSynth+0x5c>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    8a6c:	4b3d      	ldr	r3, [pc, #244]	; (8b64 <audioFrameSynth+0x284>)
    8a6e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8a72:	b29b      	uxth	r3, r3
    8a74:	2b00      	cmp	r3, #0
    8a76:	d0e1      	beq.n	8a3c <audioFrameSynth+0x15c>
    8a78:	4b3c      	ldr	r3, [pc, #240]	; (8b6c <audioFrameSynth+0x28c>)
    8a7a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8a7e:	b29b      	uxth	r3, r3
    8a80:	2b00      	cmp	r3, #0
    8a82:	d1db      	bne.n	8a3c <audioFrameSynth+0x15c>
				for (int v = 0; v < NUM_ENV; v++)
    8a84:	2700      	movs	r7, #0
    8a86:	e000      	b.n	8a8a <audioFrameSynth+0x1aa>
    8a88:	3701      	adds	r7, #1
    8a8a:	2f03      	cmp	r7, #3
    8a8c:	dcd6      	bgt.n	8a3c <audioFrameSynth+0x15c>
					if (envOn[v])
    8a8e:	4b3c      	ldr	r3, [pc, #240]	; (8b80 <audioFrameSynth+0x2a0>)
    8a90:	5ddb      	ldrb	r3, [r3, r7]
    8a92:	2b00      	cmp	r3, #0
    8a94:	d0f8      	beq.n	8a88 <audioFrameSynth+0x1a8>
						tADSRT_off(&envs[v][i]);
    8a96:	eb04 0347 	add.w	r3, r4, r7, lsl #1
    8a9a:	4831      	ldr	r0, [pc, #196]	; (8b60 <audioFrameSynth+0x280>)
    8a9c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8aa0:	f000 fbf6 	bl	9290 <__tADSRT_off_veneer>
    8aa4:	e7f0      	b.n	8a88 <audioFrameSynth+0x1a8>
		for (int i = 0; i < numStringsThisBoard; i++)
    8aa6:	2400      	movs	r4, #0
    8aa8:	e7d0      	b.n	8a4c <audioFrameSynth+0x16c>
		newPluck = 0;
    8aaa:	4b2c      	ldr	r3, [pc, #176]	; (8b5c <audioFrameSynth+0x27c>)
    8aac:	2200      	movs	r2, #0
    8aae:	601a      	str	r2, [r3, #0]
    8ab0:	e724      	b.n	88fc <audioFrameSynth+0x1c>
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    8ab2:	f7ff fc25 	bl	8300 <audioTickSynth>
    8ab6:	eddf 7a38 	vldr	s15, [pc, #224]	; 8b98 <audioFrameSynth+0x2b8>
    8aba:	ee20 0a27 	vmul.f32	s0, s0, s15
    8abe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    8ac2:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i] = current_sample;
    8ac6:	192a      	adds	r2, r5, r4
    8ac8:	4934      	ldr	r1, [pc, #208]	; (8b9c <audioFrameSynth+0x2bc>)
    8aca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    8ace:	3201      	adds	r2, #1
    8ad0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    8ad4:	3402      	adds	r4, #2
    8ad6:	2c7f      	cmp	r4, #127	; 0x7f
    8ad8:	ddeb      	ble.n	8ab2 <audioFrameSynth+0x1d2>
	if (switchStrings)
    8ada:	4b31      	ldr	r3, [pc, #196]	; (8ba0 <audioFrameSynth+0x2c0>)
    8adc:	681b      	ldr	r3, [r3, #0]
    8ade:	bb6b      	cbnz	r3, 8b3c <audioFrameSynth+0x25c>
	switchStrings = 0;
    8ae0:	4b2f      	ldr	r3, [pc, #188]	; (8ba0 <audioFrameSynth+0x2c0>)
    8ae2:	2200      	movs	r2, #0
    8ae4:	601a      	str	r2, [r3, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    8ae6:	4b1b      	ldr	r3, [pc, #108]	; (8b54 <audioFrameSynth+0x274>)
    8ae8:	685b      	ldr	r3, [r3, #4]
    8aea:	1b9b      	subs	r3, r3, r6
    8aec:	4a2d      	ldr	r2, [pc, #180]	; (8ba4 <audioFrameSynth+0x2c4>)
    8aee:	6013      	str	r3, [r2, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    8af0:	ee07 3a90 	vmov	s15, r3
    8af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    8af8:	4b2b      	ldr	r3, [pc, #172]	; (8ba8 <audioFrameSynth+0x2c8>)
    8afa:	ed93 7a00 	vldr	s14, [r3]
    8afe:	ee67 7a87 	vmul.f32	s15, s15, s14
    8b02:	4b2a      	ldr	r3, [pc, #168]	; (8bac <audioFrameSynth+0x2cc>)
    8b04:	edc3 7a00 	vstr	s15, [r3]
	if (frameLoadPercentage > .99f)
    8b08:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8bb0 <audioFrameSynth+0x2d0>
    8b0c:	eef4 7ac7 	vcmpe.f32	s15, s14
    8b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8b14:	dd0f      	ble.n	8b36 <audioFrameSynth+0x256>
		frameLoadOverCount++;
    8b16:	4a27      	ldr	r2, [pc, #156]	; (8bb4 <audioFrameSynth+0x2d4>)
    8b18:	6813      	ldr	r3, [r2, #0]
    8b1a:	3301      	adds	r3, #1
    8b1c:	6013      	str	r3, [r2, #0]
		if (frameLoadOverCount > 3)
    8b1e:	2b03      	cmp	r3, #3
    8b20:	d909      	bls.n	8b36 <audioFrameSynth+0x256>
			if (overSampled == 1)
    8b22:	4b25      	ldr	r3, [pc, #148]	; (8bb8 <audioFrameSynth+0x2d8>)
    8b24:	681b      	ldr	r3, [r3, #0]
    8b26:	2b01      	cmp	r3, #1
    8b28:	d00d      	beq.n	8b46 <audioFrameSynth+0x266>
			else if (oscToTick > 0)
    8b2a:	4b24      	ldr	r3, [pc, #144]	; (8bbc <audioFrameSynth+0x2dc>)
    8b2c:	781b      	ldrb	r3, [r3, #0]
    8b2e:	b113      	cbz	r3, 8b36 <audioFrameSynth+0x256>
				oscToTick--;
    8b30:	3b01      	subs	r3, #1
    8b32:	4a22      	ldr	r2, [pc, #136]	; (8bbc <audioFrameSynth+0x2dc>)
    8b34:	7013      	strb	r3, [r2, #0]
}
    8b36:	ecbd 8b02 	vpop	{d8}
    8b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switchStringModel(switchStrings);
    8b3c:	4b18      	ldr	r3, [pc, #96]	; (8ba0 <audioFrameSynth+0x2c0>)
    8b3e:	6818      	ldr	r0, [r3, #0]
    8b40:	f7f8 fc9e 	bl	1480 <switchStringModel>
    8b44:	e7cc      	b.n	8ae0 <audioFrameSynth+0x200>
				overSampled = 0;
    8b46:	2000      	movs	r0, #0
    8b48:	4b1b      	ldr	r3, [pc, #108]	; (8bb8 <audioFrameSynth+0x2d8>)
    8b4a:	6018      	str	r0, [r3, #0]
				changeOversampling(overSampled);
    8b4c:	f000 fcc4 	bl	94d8 <__changeOversampling_veneer>
    8b50:	e7f1      	b.n	8b36 <audioFrameSynth+0x256>
    8b52:	bf00      	nop
    8b54:	e0001000 	.word	0xe0001000
    8b58:	20005968 	.word	0x20005968
    8b5c:	200054e0 	.word	0x200054e0
    8b60:	2001d144 	.word	0x2001d144
    8b64:	20005550 	.word	0x20005550
    8b68:	20000694 	.word	0x20000694
    8b6c:	200143fc 	.word	0x200143fc
    8b70:	37800080 	.word	0x37800080
    8b74:	2001441c 	.word	0x2001441c
    8b78:	200054ec 	.word	0x200054ec
    8b7c:	2001d914 	.word	0x2001d914
    8b80:	2001d140 	.word	0x2001d140
    8b84:	200190dc 	.word	0x200190dc
    8b88:	2001d2c4 	.word	0x2001d2c4
    8b8c:	2001d68c 	.word	0x2001d68c
    8b90:	2001a264 	.word	0x2001a264
    8b94:	2001d77c 	.word	0x2001d77c
    8b98:	4b000000 	.word	0x4b000000
    8b9c:	30000000 	.word	0x30000000
    8ba0:	20014434 	.word	0x20014434
    8ba4:	20014438 	.word	0x20014438
    8ba8:	20000684 	.word	0x20000684
    8bac:	200053c4 	.word	0x200053c4
    8bb0:	3f7d70a4 	.word	0x3f7d70a4
    8bb4:	200053c0 	.word	0x200053c0
    8bb8:	20000aec 	.word	0x20000aec
    8bbc:	20000ae8 	.word	0x20000ae8

00008bc0 <audioInitVocal>:
tVoc vocal[NUM_STRINGS_PER_BOARD];
int prevTractLength[NUM_STRINGS_PER_BOARD] = {22, 22};
int32_t prevActualTractLength[NUM_STRINGS_PER_BOARD] = {22, 22};
float vocalDefaults[12] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.3019f, 0.1764f, 0.7764f, 0.8155f};
void __ATTR_ITCMRAM audioInitVocal()
{
    8bc0:	b510      	push	{r4, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    8bc2:	2400      	movs	r4, #0
    8bc4:	e008      	b.n	8bd8 <audioInitVocal+0x18>
	{
		tVoc_init(&vocal[v], 22, 65, &leaf);
    8bc6:	4b06      	ldr	r3, [pc, #24]	; (8be0 <audioInitVocal+0x20>)
    8bc8:	2241      	movs	r2, #65	; 0x41
    8bca:	2116      	movs	r1, #22
    8bcc:	4805      	ldr	r0, [pc, #20]	; (8be4 <audioInitVocal+0x24>)
    8bce:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    8bd2:	f000 fd8d 	bl	96f0 <__tVoc_init_veneer>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    8bd6:	3401      	adds	r4, #1
    8bd8:	2c01      	cmp	r4, #1
    8bda:	ddf4      	ble.n	8bc6 <audioInitVocal+0x6>
	}
}
    8bdc:	bd10      	pop	{r4, pc}
    8bde:	bf00      	nop
    8be0:	20005484 	.word	0x20005484
    8be4:	2001d938 	.word	0x2001d938
    8be8:	f3af 8000 	nop.w
    8bec:	f3af 8000 	nop.w
    8bf0:	f3af 8000 	nop.w
    8bf4:	f3af 8000 	nop.w
    8bf8:	f3af 8000 	nop.w
    8bfc:	f3af 8000 	nop.w

00008c00 <audioFreeVocal>:

void __ATTR_ITCMRAM audioFreeVocal()
{
	;
}
    8c00:	4770      	bx	lr
    8c02:	bf00      	nop
    8c04:	f3af 8000 	nop.w
    8c08:	f3af 8000 	nop.w
    8c0c:	f3af 8000 	nop.w
    8c10:	f3af 8000 	nop.w
    8c14:	f3af 8000 	nop.w
    8c18:	f3af 8000 	nop.w
    8c1c:	f3af 8000 	nop.w

00008c20 <audioSwitchToVocal>:

void __ATTR_ITCMRAM audioSwitchToVocal()
{
    8c20:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < 12; i++)
    8c22:	2400      	movs	r4, #0
    8c24:	e013      	b.n	8c4e <audioSwitchToVocal+0x2e>
	{
		tExpSmooth_setFactor(&knobSmoothers[i], 0.01f);

		if (voice == 60)
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    8c26:	4b16      	ldr	r3, [pc, #88]	; (8c80 <audioSwitchToVocal+0x60>)
    8c28:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8c2c:	ed93 0a00 	vldr	s0, [r3]
    8c30:	4628      	mov	r0, r5
    8c32:	f000 fd69 	bl	9708 <__tExpSmooth_setValAndDest_veneer>
		else
		{
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
		}

		tExpSmooth_setValAndDest(&knobSmoothers[i], vocalDefaults[i]);
    8c36:	4b12      	ldr	r3, [pc, #72]	; (8c80 <audioSwitchToVocal+0x60>)
    8c38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8c3c:	ed93 0a00 	vldr	s0, [r3]
    8c40:	4628      	mov	r0, r5
    8c42:	f000 fd61 	bl	9708 <__tExpSmooth_setValAndDest_veneer>
		knobFrozen[i] = 1;
    8c46:	4b0f      	ldr	r3, [pc, #60]	; (8c84 <audioSwitchToVocal+0x64>)
    8c48:	2201      	movs	r2, #1
    8c4a:	551a      	strb	r2, [r3, r4]
	for (int i = 0; i < 12; i++)
    8c4c:	4414      	add	r4, r2
    8c4e:	2c0b      	cmp	r4, #11
    8c50:	dc14      	bgt.n	8c7c <audioSwitchToVocal+0x5c>
		tExpSmooth_setFactor(&knobSmoothers[i], 0.01f);
    8c52:	4d0d      	ldr	r5, [pc, #52]	; (8c88 <audioSwitchToVocal+0x68>)
    8c54:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    8c58:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8c8c <audioSwitchToVocal+0x6c>
    8c5c:	4628      	mov	r0, r5
    8c5e:	f000 fc8f 	bl	9580 <__tExpSmooth_setFactor_veneer>
		if (voice == 60)
    8c62:	4b0b      	ldr	r3, [pc, #44]	; (8c90 <audioSwitchToVocal+0x70>)
    8c64:	681b      	ldr	r3, [r3, #0]
    8c66:	2b3c      	cmp	r3, #60	; 0x3c
    8c68:	d0dd      	beq.n	8c26 <audioSwitchToVocal+0x6>
			tExpSmooth_setValAndDest(&knobSmoothers[i], loadedKnobParams[i]);
    8c6a:	4b0a      	ldr	r3, [pc, #40]	; (8c94 <audioSwitchToVocal+0x74>)
    8c6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8c70:	ed93 0a00 	vldr	s0, [r3]
    8c74:	4628      	mov	r0, r5
    8c76:	f000 fd47 	bl	9708 <__tExpSmooth_setValAndDest_veneer>
    8c7a:	e7dc      	b.n	8c36 <audioSwitchToVocal+0x16>
	}
}
    8c7c:	bd38      	pop	{r3, r4, r5, pc}
    8c7e:	bf00      	nop
    8c80:	20000b08 	.word	0x20000b08
    8c84:	200053cc 	.word	0x200053cc
    8c88:	20005430 	.word	0x20005430
    8c8c:	3c23d70a 	.word	0x3c23d70a
    8c90:	20014440 	.word	0x20014440
    8c94:	200186f0 	.word	0x200186f0
    8c98:	f3af 8000 	nop.w
    8c9c:	f3af 8000 	nop.w

00008ca0 <audioTickVocal>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickVocal(void)
{
    8ca0:	b570      	push	{r4, r5, r6, lr}
    8ca2:	ed2d 8b04 	vpush	{d8-d9}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
    8ca6:	2400      	movs	r4, #0
    8ca8:	e00a      	b.n	8cc0 <audioTickVocal+0x20>
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    8caa:	00a5      	lsls	r5, r4, #2
    8cac:	483c      	ldr	r0, [pc, #240]	; (8da0 <audioTickVocal+0x100>)
    8cae:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    8cb2:	f000 fcd5 	bl	9660 <__tExpSmooth_tick_veneer>
    8cb6:	4b3b      	ldr	r3, [pc, #236]	; (8da4 <audioTickVocal+0x104>)
    8cb8:	442b      	add	r3, r5
    8cba:	ed83 0a00 	vstr	s0, [r3]
	for (int i = 0; i < 12; i++)
    8cbe:	3401      	adds	r4, #1
    8cc0:	2c0b      	cmp	r4, #11
    8cc2:	ddf2      	ble.n	8caa <audioTickVocal+0xa>
	}

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    8cc4:	4838      	ldr	r0, [pc, #224]	; (8da8 <audioTickVocal+0x108>)
    8cc6:	f000 fccb 	bl	9660 <__tExpSmooth_tick_veneer>
    8cca:	eeb0 9a40 	vmov.f32	s18, s0



	for (int i = 0; i < numStringsThisBoard; i++)
    8cce:	2400      	movs	r4, #0
	float tempSamp = 0.0f;
    8cd0:	eddf 8a36 	vldr	s17, [pc, #216]	; 8dac <audioTickVocal+0x10c>
	for (int i = 0; i < numStringsThisBoard; i++)
    8cd4:	e029      	b.n	8d2a <audioTickVocal+0x8a>
	{
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    8cd6:	00a6      	lsls	r6, r4, #2
    8cd8:	4d35      	ldr	r5, [pc, #212]	; (8db0 <audioTickVocal+0x110>)
    8cda:	eb05 0584 	add.w	r5, r5, r4, lsl #2
    8cde:	4628      	mov	r0, r5
    8ce0:	f000 fd02 	bl	96e8 <__tVoc_tick_veneer>
    8ce4:	eeb0 8a40 	vmov.f32	s16, s0
    8ce8:	4832      	ldr	r0, [pc, #200]	; (8db4 <audioTickVocal+0x114>)
    8cea:	4430      	add	r0, r6
    8cec:	f000 fc20 	bl	9530 <__tADSRT_tickNoInterp_veneer>
    8cf0:	ee28 8a00 	vmul.f32	s16, s16, s0
    8cf4:	ee78 8a88 	vadd.f32	s17, s17, s16
		stringFrequencies[i] = mtofTableLookup(stringMIDIPitches[i]+ stringOctave[i]);
    8cf8:	4b2f      	ldr	r3, [pc, #188]	; (8db8 <audioTickVocal+0x118>)
    8cfa:	4433      	add	r3, r6
    8cfc:	ed93 0a00 	vldr	s0, [r3]
    8d00:	4b2e      	ldr	r3, [pc, #184]	; (8dbc <audioTickVocal+0x11c>)
    8d02:	4433      	add	r3, r6
    8d04:	edd3 7a00 	vldr	s15, [r3]
    8d08:	ee30 0a27 	vadd.f32	s0, s0, s15
    8d0c:	f000 fb30 	bl	9370 <__mtofTableLookup_veneer>
    8d10:	4b2b      	ldr	r3, [pc, #172]	; (8dc0 <audioTickVocal+0x120>)
    8d12:	4433      	add	r3, r6
    8d14:	ed83 0a00 	vstr	s0, [r3]
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    8d18:	4628      	mov	r0, r5
    8d1a:	f000 fbf1 	bl	9500 <__tVoc_setFreq_veneer>
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    8d1e:	eeb0 0a49 	vmov.f32	s0, s18
    8d22:	4628      	mov	r0, r5
    8d24:	f000 fb5c 	bl	93e0 <__tVoc_set_tenseness_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    8d28:	3401      	adds	r4, #1
    8d2a:	4b26      	ldr	r3, [pc, #152]	; (8dc4 <audioTickVocal+0x124>)
    8d2c:	781b      	ldrb	r3, [r3, #0]
    8d2e:	42a3      	cmp	r3, r4
    8d30:	dcd1      	bgt.n	8cd6 <audioTickVocal+0x36>
		//Lfloat tongue = 12.0f + (16.0f * knobScaled[0]);
		//tVoc_set_tongue_shape(&vocal[i], tongue, 2.9f * knobScaled[1] + 0.1f);

	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    8d32:	eddf 7a25 	vldr	s15, [pc, #148]	; 8dc8 <audioTickVocal+0x128>
    8d36:	ee69 0a27 	vmul.f32	s1, s18, s15
    8d3a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8dcc <audioTickVocal+0x12c>
    8d3e:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8dd0 <audioTickVocal+0x130>
    8d42:	ee70 0a80 	vadd.f32	s1, s1, s0
    8d46:	f000 fa07 	bl	9158 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
    8d4a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    8d4e:	ee17 3a90 	vmov	r3, s15
	float alpha = volIdx-volIdxInt;
    8d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8d56:	ee30 0a67 	vsub.f32	s0, s0, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    8d5a:	1c59      	adds	r1, r3, #1
    8d5c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
    8d60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    8d64:	ee77 7ac0 	vsub.f32	s15, s15, s0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    8d68:	4a1a      	ldr	r2, [pc, #104]	; (8dd4 <audioTickVocal+0x134>)
    8d6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    8d6e:	ed93 7a00 	vldr	s14, [r3]
    8d72:	ee27 7a27 	vmul.f32	s14, s14, s15
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    8d76:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    8d7a:	edd2 7a00 	vldr	s15, [r2]
    8d7e:	ee67 7a80 	vmul.f32	s15, s15, s0
    8d82:	ee77 7a87 	vadd.f32	s15, s15, s14
	tempSamp *= outVol;
    8d86:	ee68 8aa7 	vmul.f32	s17, s17, s15
	tempSamp *= masterVolFromBrain;
    8d8a:	4b13      	ldr	r3, [pc, #76]	; (8dd8 <audioTickVocal+0x138>)
    8d8c:	ed93 0a00 	vldr	s0, [r3]
	return tanhf(tempSamp);
    8d90:	ee28 0a80 	vmul.f32	s0, s17, s0
    8d94:	f000 fc6c 	bl	9670 <__tanhf_veneer>
}
    8d98:	ecbd 8b04 	vpop	{d8-d9}
    8d9c:	bd70      	pop	{r4, r5, r6, pc}
    8d9e:	bf00      	nop
    8da0:	20005430 	.word	0x20005430
    8da4:	200053e0 	.word	0x200053e0
    8da8:	2001444c 	.word	0x2001444c
    8dac:	00000000 	.word	0x00000000
    8db0:	2001d938 	.word	0x2001d938
    8db4:	200053b4 	.word	0x200053b4
    8db8:	20014414 	.word	0x20014414
    8dbc:	2001441c 	.word	0x2001441c
    8dc0:	200143cc 	.word	0x200143cc
    8dc4:	20000694 	.word	0x20000694
    8dc8:	42a00000 	.word	0x42a00000
    8dcc:	423c0000 	.word	0x423c0000
    8dd0:	42fe0000 	.word	0x42fe0000
    8dd4:	200006a0 	.word	0x200006a0
    8dd8:	2000068c 	.word	0x2000068c
    8ddc:	f3af 8000 	nop.w

00008de0 <audioFrameVocal>:
{
    8de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8de4:	ed2d 8b02 	vpush	{d8}
    8de8:	4605      	mov	r5, r0
	uint32_t tempCountFrame = DWT->CYCCNT;
    8dea:	4bae      	ldr	r3, [pc, #696]	; (90a4 <audioFrameVocal+0x2c4>)
    8dec:	685e      	ldr	r6, [r3, #4]
	if (resetStringInputs)
    8dee:	4bae      	ldr	r3, [pc, #696]	; (90a8 <audioFrameVocal+0x2c8>)
    8df0:	781b      	ldrb	r3, [r3, #0]
    8df2:	b9db      	cbnz	r3, 8e2c <audioFrameVocal+0x4c>
	if (newPluck)
    8df4:	4bad      	ldr	r3, [pc, #692]	; (90ac <audioFrameVocal+0x2cc>)
    8df6:	681b      	ldr	r3, [r3, #0]
    8df8:	2b00      	cmp	r3, #0
    8dfa:	d170      	bne.n	8ede <audioFrameVocal+0xfe>
		float doublecompute = knobScaled[1] > 0.5f;
    8dfc:	f04f 0800 	mov.w	r8, #0
    8e00:	e0d1      	b.n	8fa6 <audioFrameVocal+0x1c6>
			tADSRT_clear(&fenvelopes[i]);
    8e02:	48ab      	ldr	r0, [pc, #684]	; (90b0 <audioFrameVocal+0x2d0>)
    8e04:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    8e08:	f000 fba6 	bl	9558 <__tADSRT_clear_veneer>
			previousStringInputs[i] = 0;
    8e0c:	4ba9      	ldr	r3, [pc, #676]	; (90b4 <audioFrameVocal+0x2d4>)
    8e0e:	2200      	movs	r2, #0
    8e10:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    8e14:	3401      	adds	r4, #1
    8e16:	4ba8      	ldr	r3, [pc, #672]	; (90b8 <audioFrameVocal+0x2d8>)
    8e18:	781b      	ldrb	r3, [r3, #0]
    8e1a:	42a3      	cmp	r3, r4
    8e1c:	dcf1      	bgt.n	8e02 <audioFrameVocal+0x22>
		resetStringInputs = 0;
    8e1e:	4ba2      	ldr	r3, [pc, #648]	; (90a8 <audioFrameVocal+0x2c8>)
    8e20:	2200      	movs	r2, #0
    8e22:	701a      	strb	r2, [r3, #0]
		newPluck = 1;
    8e24:	4ba1      	ldr	r3, [pc, #644]	; (90ac <audioFrameVocal+0x2cc>)
    8e26:	2201      	movs	r2, #1
    8e28:	601a      	str	r2, [r3, #0]
    8e2a:	e7e3      	b.n	8df4 <audioFrameVocal+0x14>
		for (int i = 0; i < numStringsThisBoard; i++)
    8e2c:	2400      	movs	r4, #0
    8e2e:	e7f2      	b.n	8e16 <audioFrameVocal+0x36>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    8e30:	4ba2      	ldr	r3, [pc, #648]	; (90bc <audioFrameVocal+0x2dc>)
    8e32:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8e36:	b29b      	uxth	r3, r3
    8e38:	ee08 3a10 	vmov	s16, r3
    8e3c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
    8e40:	eddf 7a9f 	vldr	s15, [pc, #636]	; 90c0 <audioFrameVocal+0x2e0>
    8e44:	ee28 8a27 	vmul.f32	s16, s16, s15
				stringOctave[i] = octave;
    8e48:	4b9e      	ldr	r3, [pc, #632]	; (90c4 <audioFrameVocal+0x2e4>)
    8e4a:	edd3 7a00 	vldr	s15, [r3]
    8e4e:	00a7      	lsls	r7, r4, #2
    8e50:	4b9d      	ldr	r3, [pc, #628]	; (90c8 <audioFrameVocal+0x2e8>)
    8e52:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8e56:	edc3 7a00 	vstr	s15, [r3]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    8e5a:	4b9c      	ldr	r3, [pc, #624]	; (90cc <audioFrameVocal+0x2ec>)
    8e5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    8e60:	ed93 0a00 	vldr	s0, [r3]
    8e64:	ee37 0a80 	vadd.f32	s0, s15, s0
    8e68:	f000 f996 	bl	9198 <__mtof_veneer>
    8e6c:	4b98      	ldr	r3, [pc, #608]	; (90d0 <audioFrameVocal+0x2f0>)
    8e6e:	443b      	add	r3, r7
    8e70:	ed83 0a00 	vstr	s0, [r3]
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    8e74:	4b8e      	ldr	r3, [pc, #568]	; (90b0 <audioFrameVocal+0x2d0>)
    8e76:	441f      	add	r7, r3
    8e78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    8e7c:	4638      	mov	r0, r7
    8e7e:	f000 fa8b 	bl	9398 <__tADSRT_setSustain_veneer>
				tADSRT_on(&fenvelopes[i], amplitz);
    8e82:	eeb0 0a48 	vmov.f32	s0, s16
    8e86:	4638      	mov	r0, r7
    8e88:	f000 fc0e 	bl	96a8 <__tADSRT_on_veneer>
			previousStringInputs[i] = stringInputs[i];
    8e8c:	4b8b      	ldr	r3, [pc, #556]	; (90bc <audioFrameVocal+0x2dc>)
    8e8e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8e92:	b29b      	uxth	r3, r3
    8e94:	4a87      	ldr	r2, [pc, #540]	; (90b4 <audioFrameVocal+0x2d4>)
    8e96:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    8e9a:	3401      	adds	r4, #1
    8e9c:	4b86      	ldr	r3, [pc, #536]	; (90b8 <audioFrameVocal+0x2d8>)
    8e9e:	781b      	ldrb	r3, [r3, #0]
    8ea0:	42a3      	cmp	r3, r4
    8ea2:	dd1e      	ble.n	8ee2 <audioFrameVocal+0x102>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    8ea4:	4b83      	ldr	r3, [pc, #524]	; (90b4 <audioFrameVocal+0x2d4>)
    8ea6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8eaa:	b29b      	uxth	r3, r3
    8eac:	b92b      	cbnz	r3, 8eba <audioFrameVocal+0xda>
    8eae:	4b83      	ldr	r3, [pc, #524]	; (90bc <audioFrameVocal+0x2dc>)
    8eb0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8eb4:	b29b      	uxth	r3, r3
    8eb6:	2b00      	cmp	r3, #0
    8eb8:	d1ba      	bne.n	8e30 <audioFrameVocal+0x50>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    8eba:	4b7e      	ldr	r3, [pc, #504]	; (90b4 <audioFrameVocal+0x2d4>)
    8ebc:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8ec0:	b29b      	uxth	r3, r3
    8ec2:	2b00      	cmp	r3, #0
    8ec4:	d0e2      	beq.n	8e8c <audioFrameVocal+0xac>
    8ec6:	4b7d      	ldr	r3, [pc, #500]	; (90bc <audioFrameVocal+0x2dc>)
    8ec8:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    8ecc:	b29b      	uxth	r3, r3
    8ece:	2b00      	cmp	r3, #0
    8ed0:	d1dc      	bne.n	8e8c <audioFrameVocal+0xac>
				tADSRT_off(&fenvelopes[i]);
    8ed2:	4877      	ldr	r0, [pc, #476]	; (90b0 <audioFrameVocal+0x2d0>)
    8ed4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    8ed8:	f000 f9da 	bl	9290 <__tADSRT_off_veneer>
    8edc:	e7d6      	b.n	8e8c <audioFrameVocal+0xac>
		for (int i = 0; i < numStringsThisBoard; i++)
    8ede:	2400      	movs	r4, #0
    8ee0:	e7dc      	b.n	8e9c <audioFrameVocal+0xbc>
		newPluck = 0;
    8ee2:	4b72      	ldr	r3, [pc, #456]	; (90ac <audioFrameVocal+0x2cc>)
    8ee4:	2200      	movs	r2, #0
    8ee6:	601a      	str	r2, [r3, #0]
    8ee8:	e788      	b.n	8dfc <audioFrameVocal+0x1c>
		float doublecompute = knobScaled[1] > 0.5f;
    8eea:	eddf 8a7a 	vldr	s17, [pc, #488]	; 90d4 <audioFrameVocal+0x2f4>
    8eee:	e06a      	b.n	8fc6 <audioFrameVocal+0x1e6>
			int32_t squishedTract = (newTractLength*0.168f) ;
    8ef0:	eddf 7a79 	vldr	s15, [pc, #484]	; 90d8 <audioFrameVocal+0x2f8>
    8ef4:	ee68 7a27 	vmul.f32	s15, s16, s15
    8ef8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    8efc:	ee17 4a90 	vmov	r4, s15
			if ( squishedTract != prevActualTractLength[i])
    8f00:	4b76      	ldr	r3, [pc, #472]	; (90dc <audioFrameVocal+0x2fc>)
    8f02:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
    8f06:	42a3      	cmp	r3, r4
    8f08:	f040 808b 	bne.w	9022 <audioFrameVocal+0x242>
			prevTractLength[i] = newTractLength;
    8f0c:	eebd 8ac8 	vcvt.s32.f32	s16, s16
    8f10:	4b73      	ldr	r3, [pc, #460]	; (90e0 <audioFrameVocal+0x300>)
    8f12:	ee18 2a10 	vmov	r2, s16
    8f16:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
		tVoc_setDoubleComputeFlag(&vocal[i], doublecompute);
    8f1a:	4c72      	ldr	r4, [pc, #456]	; (90e4 <audioFrameVocal+0x304>)
    8f1c:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    8f20:	eefd 7ae8 	vcvt.s32.f32	s15, s17
    8f24:	ee17 1a90 	vmov	r1, s15
    8f28:	4620      	mov	r0, r4
    8f2a:	f000 f8fd 	bl	9128 <__tVoc_setDoubleComputeFlag_veneer>
		tVoc_setTurbulenceNoiseGain(&vocal[i], knobScaled[4]);
    8f2e:	4f6e      	ldr	r7, [pc, #440]	; (90e8 <audioFrameVocal+0x308>)
    8f30:	ed97 0a04 	vldr	s0, [r7, #16]
    8f34:	4620      	mov	r0, r4
    8f36:	f000 fa6b 	bl	9410 <__tVoc_setTurbulenceNoiseGain_veneer>
		tVoc_setAspirationNoiseGain(&vocal[i], knobScaled[5]);
    8f3a:	ed97 0a05 	vldr	s0, [r7, #20]
    8f3e:	4620      	mov	r0, r4
    8f40:	f000 f906 	bl	9150 <__tVoc_setAspirationNoiseGain_veneer>
		tVoc_setAspirationNoiseFilterFreq(&vocal[i], knobScaled[6]);
    8f44:	ed97 0a06 	vldr	s0, [r7, #24]
    8f48:	4620      	mov	r0, r4
    8f4a:	f000 f9a9 	bl	92a0 <__tVoc_setAspirationNoiseFilterFreq_veneer>
		tVoc_setAspirationNoiseFilterQ(&vocal[i], knobScaled[7]);
    8f4e:	ed97 0a07 	vldr	s0, [r7, #28]
    8f52:	4620      	mov	r0, r4
    8f54:	f000 fa24 	bl	93a0 <__tVoc_setAspirationNoiseFilterQ_veneer>
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    8f58:	edd7 1a0b 	vldr	s3, [r7, #44]	; 0x2c
    8f5c:	ed97 1a0a 	vldr	s2, [r7, #40]	; 0x28
    8f60:	edd7 0a09 	vldr	s1, [r7, #36]	; 0x24
    8f64:	ed97 0a08 	vldr	s0, [r7, #32]
    8f68:	4620      	mov	r0, r4
    8f6a:	f000 fafd 	bl	9568 <__tVoc_set_tongue_shape_and_touch_veneer>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[3]) + 0.01f);
    8f6e:	edd7 7a03 	vldr	s15, [r7, #12]
    8f72:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 90ec <audioFrameVocal+0x30c>
    8f76:	ee67 7a87 	vmul.f32	s15, s15, s14
    8f7a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 90f0 <audioFrameVocal+0x310>
    8f7e:	ee37 0a80 	vadd.f32	s0, s15, s0
    8f82:	4620      	mov	r0, r4
    8f84:	f000 faec 	bl	9560 <__tVoc_set_velum_veneer>
		tVoc_rescaleDiameter(&vocal[i], (knobScaled[2] * 3.0f) + 0.0245f);
    8f88:	edd7 7a02 	vldr	s15, [r7, #8]
    8f8c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    8f90:	ee67 7a87 	vmul.f32	s15, s15, s14
    8f94:	ed9f 0a57 	vldr	s0, [pc, #348]	; 90f4 <audioFrameVocal+0x314>
    8f98:	ee37 0a80 	vadd.f32	s0, s15, s0
    8f9c:	4620      	mov	r0, r4
    8f9e:	f000 fb7f 	bl	96a0 <__tVoc_rescaleDiameter_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    8fa2:	f108 0801 	add.w	r8, r8, #1
    8fa6:	4b44      	ldr	r3, [pc, #272]	; (90b8 <audioFrameVocal+0x2d8>)
    8fa8:	781b      	ldrb	r3, [r3, #0]
    8faa:	4543      	cmp	r3, r8
    8fac:	dd43      	ble.n	9036 <audioFrameVocal+0x256>
		float doublecompute = knobScaled[1] > 0.5f;
    8fae:	4b4e      	ldr	r3, [pc, #312]	; (90e8 <audioFrameVocal+0x308>)
    8fb0:	ed93 7a01 	vldr	s14, [r3, #4]
    8fb4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    8fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    8fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8fc0:	dd93      	ble.n	8eea <audioFrameVocal+0x10a>
    8fc2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		float oneMinusDoubleCompute = 1.0f-doublecompute;
    8fc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    8fca:	ee77 7a68 	vsub.f32	s15, s14, s17
		float newTractLength = (knobScaled[0] * 100.0f) * (1.50f * oneMinusDoubleCompute +1.0f) ;
    8fce:	4b46      	ldr	r3, [pc, #280]	; (90e8 <audioFrameVocal+0x308>)
    8fd0:	ed93 8a00 	vldr	s16, [r3]
    8fd4:	eddf 6a48 	vldr	s13, [pc, #288]	; 90f8 <audioFrameVocal+0x318>
    8fd8:	ee28 8a26 	vmul.f32	s16, s16, s13
    8fdc:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
    8fe0:	ee67 7aa6 	vmul.f32	s15, s15, s13
    8fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
    8fe8:	ee28 8a27 	vmul.f32	s16, s16, s15
		if ((newTractLength > (prevTractLength[i] + 10))|| (newTractLength < (prevTractLength[i] - 10)))
    8fec:	4b3c      	ldr	r3, [pc, #240]	; (90e0 <audioFrameVocal+0x300>)
    8fee:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
    8ff2:	f103 020a 	add.w	r2, r3, #10
    8ff6:	ee07 2a90 	vmov	s15, r2
    8ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    8ffe:	eef4 7ac8 	vcmpe.f32	s15, s16
    9002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9006:	f53f af73 	bmi.w	8ef0 <audioFrameVocal+0x110>
    900a:	3b0a      	subs	r3, #10
    900c:	ee07 3a90 	vmov	s15, r3
    9010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    9014:	eef4 7ac8 	vcmpe.f32	s15, s16
    9018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    901c:	f77f af7d 	ble.w	8f1a <audioFrameVocal+0x13a>
    9020:	e766      	b.n	8ef0 <audioFrameVocal+0x110>
				tVoc_set_tractLength(&vocal[i],squishedTract   + 2);
    9022:	1ca1      	adds	r1, r4, #2
    9024:	482f      	ldr	r0, [pc, #188]	; (90e4 <audioFrameVocal+0x304>)
    9026:	eb00 0088 	add.w	r0, r0, r8, lsl #2
    902a:	f000 f9ad 	bl	9388 <__tVoc_set_tractLength_veneer>
				prevActualTractLength[i] = squishedTract;
    902e:	4b2b      	ldr	r3, [pc, #172]	; (90dc <audioFrameVocal+0x2fc>)
    9030:	f843 4028 	str.w	r4, [r3, r8, lsl #2]
    9034:	e76a      	b.n	8f0c <audioFrameVocal+0x12c>
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    9036:	2400      	movs	r4, #0
    9038:	e011      	b.n	905e <audioFrameVocal+0x27e>
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    903a:	f7ff fe31 	bl	8ca0 <audioTickVocal>
    903e:	eddf 7a2f 	vldr	s15, [pc, #188]	; 90fc <audioFrameVocal+0x31c>
    9042:	ee20 0a27 	vmul.f32	s0, s0, s15
    9046:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    904a:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i] = current_sample;
    904e:	192a      	adds	r2, r5, r4
    9050:	492b      	ldr	r1, [pc, #172]	; (9100 <audioFrameVocal+0x320>)
    9052:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    9056:	3201      	adds	r2, #1
    9058:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    905c:	3402      	adds	r4, #2
    905e:	2c7f      	cmp	r4, #127	; 0x7f
    9060:	ddeb      	ble.n	903a <audioFrameVocal+0x25a>
	if (switchStrings)
    9062:	4b28      	ldr	r3, [pc, #160]	; (9104 <audioFrameVocal+0x324>)
    9064:	681b      	ldr	r3, [r3, #0]
    9066:	b9bb      	cbnz	r3, 9098 <audioFrameVocal+0x2b8>
	switchStrings = 0;
    9068:	4b26      	ldr	r3, [pc, #152]	; (9104 <audioFrameVocal+0x324>)
    906a:	2200      	movs	r2, #0
    906c:	601a      	str	r2, [r3, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    906e:	4b0d      	ldr	r3, [pc, #52]	; (90a4 <audioFrameVocal+0x2c4>)
    9070:	685b      	ldr	r3, [r3, #4]
    9072:	1b9b      	subs	r3, r3, r6
    9074:	4a24      	ldr	r2, [pc, #144]	; (9108 <audioFrameVocal+0x328>)
    9076:	6013      	str	r3, [r2, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9078:	ee07 3a90 	vmov	s15, r3
    907c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    9080:	4b22      	ldr	r3, [pc, #136]	; (910c <audioFrameVocal+0x32c>)
    9082:	ed93 7a00 	vldr	s14, [r3]
    9086:	ee67 7a87 	vmul.f32	s15, s15, s14
    908a:	4b21      	ldr	r3, [pc, #132]	; (9110 <audioFrameVocal+0x330>)
    908c:	edc3 7a00 	vstr	s15, [r3]
}
    9090:	ecbd 8b02 	vpop	{d8}
    9094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switchStringModel(switchStrings);
    9098:	4b1a      	ldr	r3, [pc, #104]	; (9104 <audioFrameVocal+0x324>)
    909a:	6818      	ldr	r0, [r3, #0]
    909c:	f7f8 f9f0 	bl	1480 <switchStringModel>
    90a0:	e7e2      	b.n	9068 <audioFrameVocal+0x288>
    90a2:	bf00      	nop
    90a4:	e0001000 	.word	0xe0001000
    90a8:	20005968 	.word	0x20005968
    90ac:	200054e0 	.word	0x200054e0
    90b0:	200053b4 	.word	0x200053b4
    90b4:	20005550 	.word	0x20005550
    90b8:	20000694 	.word	0x20000694
    90bc:	200143fc 	.word	0x200143fc
    90c0:	37800080 	.word	0x37800080
    90c4:	200054ec 	.word	0x200054ec
    90c8:	2001441c 	.word	0x2001441c
    90cc:	20014414 	.word	0x20014414
    90d0:	200143cc 	.word	0x200143cc
    90d4:	00000000 	.word	0x00000000
    90d8:	3e2c0831 	.word	0x3e2c0831
    90dc:	20000af8 	.word	0x20000af8
    90e0:	20000b00 	.word	0x20000b00
    90e4:	2001d938 	.word	0x2001d938
    90e8:	200053e0 	.word	0x200053e0
    90ec:	3ecccccd 	.word	0x3ecccccd
    90f0:	3c23d70a 	.word	0x3c23d70a
    90f4:	3cc8b439 	.word	0x3cc8b439
    90f8:	42c80000 	.word	0x42c80000
    90fc:	4b000000 	.word	0x4b000000
    9100:	30000000 	.word	0x30000000
    9104:	20014434 	.word	0x20014434
    9108:	20014438 	.word	0x20014438
    910c:	20000684 	.word	0x20000684
    9110:	200053c4 	.word	0x200053c4
    9114:	00000000 	.word	0x00000000

00009118 <__LEAF_shaper_veneer>:
    9118:	f85f f000 	ldr.w	pc, [pc]	; 911c <__LEAF_shaper_veneer+0x4>
    911c:	08011b19 	.word	0x08011b19

00009120 <__tTString_setPeakFilterFreq_veneer>:
    9120:	f85f f000 	ldr.w	pc, [pc]	; 9124 <__tTString_setPeakFilterFreq_veneer+0x4>
    9124:	08014dd5 	.word	0x08014dd5

00009128 <__tVoc_setDoubleComputeFlag_veneer>:
    9128:	f85f f000 	ldr.w	pc, [pc]	; 912c <__tVoc_setDoubleComputeFlag_veneer+0x4>
    912c:	080164c1 	.word	0x080164c1

00009130 <__tLinearDelay_tick_veneer>:
    9130:	f85f f000 	ldr.w	pc, [pc]	; 9134 <__tLinearDelay_tick_veneer+0x4>
    9134:	0800db61 	.word	0x0800db61

00009138 <__tTString_mute_veneer>:
    9138:	f85f f000 	ldr.w	pc, [pc]	; 913c <__tTString_mute_veneer+0x4>
    913c:	08014931 	.word	0x08014931

00009140 <__setOscilllatorShapes_veneer>:
    9140:	f85f f000 	ldr.w	pc, [pc]	; 9144 <__setOscilllatorShapes_veneer+0x4>
    9144:	08001e09 	.word	0x08001e09

00009148 <__tPBSawSquare_setShape_veneer>:
    9148:	f85f f000 	ldr.w	pc, [pc]	; 914c <__tPBSawSquare_setShape_veneer+0x4>
    914c:	08012cb9 	.word	0x08012cb9

00009150 <__tVoc_setAspirationNoiseGain_veneer>:
    9150:	f85f f000 	ldr.w	pc, [pc]	; 9154 <__tVoc_setAspirationNoiseGain_veneer+0x4>
    9154:	08016503 	.word	0x08016503

00009158 <__LEAF_clip_veneer>:
    9158:	f85f f000 	ldr.w	pc, [pc]	; 915c <__LEAF_clip_veneer+0x4>
    915c:	08011bf1 	.word	0x08011bf1

00009160 <__tTString_setPickupFilterFreq_veneer>:
    9160:	f85f f000 	ldr.w	pc, [pc]	; 9164 <__tTString_setPickupFilterFreq_veneer+0x4>
    9164:	08014db5 	.word	0x08014db5

00009168 <__tExpSmooth_setVal_veneer>:
    9168:	f85f f000 	ldr.w	pc, [pc]	; 916c <__tExpSmooth_setVal_veneer+0x4>
    916c:	0800edd5 	.word	0x0800edd5

00009170 <__tVZFilter_setFrequencyAndResonance_veneer>:
    9170:	f85f f000 	ldr.w	pc, [pc]	; 9174 <__tVZFilter_setFrequencyAndResonance_veneer+0x4>
    9174:	0800fe25 	.word	0x0800fe25

00009178 <__tSineTriLFO_tick_veneer>:
    9178:	f85f f000 	ldr.w	pc, [pc]	; 917c <__tSineTriLFO_tick_veneer+0x4>
    917c:	080130ff 	.word	0x080130ff

00009180 <__tVZFilter_tickEfficient_veneer>:
    9180:	f85f f000 	ldr.w	pc, [pc]	; 9184 <__tVZFilter_tickEfficient_veneer+0x4>
    9184:	0800f7f1 	.word	0x0800f7f1

00009188 <__tStiffString_setDecayHighFreqNoUpdate_veneer>:
    9188:	f85f f000 	ldr.w	pc, [pc]	; 918c <__tStiffString_setDecayHighFreqNoUpdate_veneer+0x4>
    918c:	08015291 	.word	0x08015291

00009190 <__tTString_tick_veneer>:
    9190:	f85f f000 	ldr.w	pc, [pc]	; 9194 <__tTString_tick_veneer+0x4>
    9194:	08013a31 	.word	0x08013a31

00009198 <__mtof_veneer>:
    9198:	f85f f000 	ldr.w	pc, [pc]	; 919c <__mtof_veneer+0x4>
    919c:	08011fed 	.word	0x08011fed

000091a0 <__tStiffString_updateOutputWeights_veneer>:
    91a0:	f85f f000 	ldr.w	pc, [pc]	; 91a4 <__tStiffString_updateOutputWeights_veneer+0x4>
    91a4:	08014f2d 	.word	0x08014f2d

000091a8 <__tSimpleLivingString3_setDampFreq_veneer>:
    91a8:	f85f f000 	ldr.w	pc, [pc]	; 91ac <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    91ac:	080135f5 	.word	0x080135f5

000091b0 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    91b0:	f85f f000 	ldr.w	pc, [pc]	; 91b4 <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    91b4:	0801366d 	.word	0x0801366d

000091b8 <__tSVF_setQ_veneer>:
    91b8:	f85f f000 	ldr.w	pc, [pc]	; 91bc <__tSVF_setQ_veneer+0x4>
    91bc:	0800f6d5 	.word	0x0800f6d5

000091c0 <__tVZFilter_setGain_veneer>:
    91c0:	f85f f000 	ldr.w	pc, [pc]	; 91c4 <__tVZFilter_setGain_veneer+0x4>
    91c4:	0800fdb5 	.word	0x0800fdb5

000091c8 <__tStiffString_pluck_veneer>:
    91c8:	f85f f000 	ldr.w	pc, [pc]	; 91cc <__tStiffString_pluck_veneer+0x4>
    91cc:	08015171 	.word	0x08015171

000091d0 <__tDiodeFilter_setQ_veneer>:
    91d0:	f85f f000 	ldr.w	pc, [pc]	; 91d4 <__tDiodeFilter_setQ_veneer+0x4>
    91d4:	08011321 	.word	0x08011321

000091d8 <__tIntPhasor_setFreq_veneer>:
    91d8:	f85f f000 	ldr.w	pc, [pc]	; 91dc <__tIntPhasor_setFreq_veneer+0x4>
    91dc:	08012e0d 	.word	0x08012e0d

000091e0 <__HAL_SPI_Receive_DMA_veneer>:
    91e0:	f85f f000 	ldr.w	pc, [pc]	; 91e4 <__HAL_SPI_Receive_DMA_veneer+0x4>
    91e4:	0800a615 	.word	0x0800a615

000091e8 <__tTString_setWoundOrUnwound_veneer>:
    91e8:	f85f f000 	ldr.w	pc, [pc]	; 91ec <__tTString_setWoundOrUnwound_veneer+0x4>
    91ec:	08014d55 	.word	0x08014d55

000091f0 <__LEAF_tanh_veneer>:
    91f0:	f85f f000 	ldr.w	pc, [pc]	; 91f4 <__LEAF_tanh_veneer+0x4>
    91f4:	08011c11 	.word	0x08011c11

000091f8 <__tVZFilterLS_setGain_veneer>:
    91f8:	f85f f000 	ldr.w	pc, [pc]	; 91fc <__tVZFilterLS_setGain_veneer+0x4>
    91fc:	080102e9 	.word	0x080102e9

00009200 <__tCrusher_setRound_veneer>:
    9200:	f85f f000 	ldr.w	pc, [pc]	; 9204 <__tCrusher_setRound_veneer+0x4>
    9204:	0800e3c9 	.word	0x0800e3c9

00009208 <__tCycle_setFreq_veneer>:
    9208:	f85f f000 	ldr.w	pc, [pc]	; 920c <__tCycle_setFreq_veneer+0x4>
    920c:	08012629 	.word	0x08012629

00009210 <__tIntPhasor_tick_veneer>:
    9210:	f85f f000 	ldr.w	pc, [pc]	; 9214 <__tIntPhasor_tick_veneer+0x4>
    9214:	08012ded 	.word	0x08012ded

00009218 <__tStiffString_tick_veneer>:
    9218:	f85f f000 	ldr.w	pc, [pc]	; 921c <__tStiffString_tick_veneer+0x4>
    921c:	080150c9 	.word	0x080150c9

00009220 <__tVZFilterHS_setGain_veneer>:
    9220:	f85f f000 	ldr.w	pc, [pc]	; 9224 <__tVZFilterHS_setGain_veneer+0x4>
    9224:	08010609 	.word	0x08010609

00009228 <__tSineTriLFO_setShape_veneer>:
    9228:	f85f f000 	ldr.w	pc, [pc]	; 922c <__tSineTriLFO_setShape_veneer+0x4>
    922c:	08013185 	.word	0x08013185

00009230 <__tTString_setWindingsPerInch_veneer>:
    9230:	f85f f000 	ldr.w	pc, [pc]	; 9234 <__tTString_setWindingsPerInch_veneer+0x4>
    9234:	08014da5 	.word	0x08014da5

00009238 <__tSawSquareLFO_tick_veneer>:
    9238:	f85f f000 	ldr.w	pc, [pc]	; 923c <__tSawSquareLFO_tick_veneer+0x4>
    923c:	08012f7d 	.word	0x08012f7d

00009240 <__tVZFilterBell_tick_veneer>:
    9240:	f85f f000 	ldr.w	pc, [pc]	; 9244 <__tVZFilterBell_tick_veneer+0x4>
    9244:	08010865 	.word	0x08010865

00009248 <__tTString_setHarmonic_veneer>:
    9248:	f85f f000 	ldr.w	pc, [pc]	; 924c <__tTString_setHarmonic_veneer+0x4>
    924c:	08014a8d 	.word	0x08014a8d

00009250 <__tNoise_tick_veneer>:
    9250:	f85f f000 	ldr.w	pc, [pc]	; 9254 <__tNoise_tick_veneer+0x4>
    9254:	08012d01 	.word	0x08012d01

00009258 <__tCrusher_setSamplingRatio_veneer>:
    9258:	f85f f000 	ldr.w	pc, [pc]	; 925c <__tCrusher_setSamplingRatio_veneer+0x4>
    925c:	0800e3d1 	.word	0x0800e3d1

00009260 <__tStiffString_setDecayNoUpdate_veneer>:
    9260:	f85f f000 	ldr.w	pc, [pc]	; 9264 <__tStiffString_setDecayNoUpdate_veneer+0x4>
    9264:	08015289 	.word	0x08015289

00009268 <__tADSRT_setAttack_veneer>:
    9268:	f85f f000 	ldr.w	pc, [pc]	; 926c <__tADSRT_setAttack_veneer+0x4>
    926c:	0800e7cd 	.word	0x0800e7cd

00009270 <__tVZFilterLS_setFreqFast_veneer>:
    9270:	f85f f000 	ldr.w	pc, [pc]	; 9274 <__tVZFilterLS_setFreqFast_veneer+0x4>
    9274:	08010249 	.word	0x08010249

00009278 <__arm_sin_f32_veneer>:
    9278:	f85f f000 	ldr.w	pc, [pc]	; 927c <__arm_sin_f32_veneer+0x4>
    927c:	08000775 	.word	0x08000775

00009280 <__tStiffString_setFreqNoUpdate_veneer>:
    9280:	f85f f000 	ldr.w	pc, [pc]	; 9284 <__tStiffString_setFreqNoUpdate_veneer+0x4>
    9284:	08015281 	.word	0x08015281

00009288 <__tDiodeFilter_tick_veneer>:
    9288:	f85f f000 	ldr.w	pc, [pc]	; 928c <__tDiodeFilter_tick_veneer+0x4>
    928c:	08010d25 	.word	0x08010d25

00009290 <__tADSRT_off_veneer>:
    9290:	f85f f000 	ldr.w	pc, [pc]	; 9294 <__tADSRT_off_veneer+0x4>
    9294:	0800e8bb 	.word	0x0800e8bb

00009298 <__tStiffString_mute_veneer>:
    9298:	f85f f000 	ldr.w	pc, [pc]	; 929c <__tStiffString_mute_veneer+0x4>
    929c:	08015165 	.word	0x08015165

000092a0 <__tVoc_setAspirationNoiseFilterFreq_veneer>:
    92a0:	f85f f000 	ldr.w	pc, [pc]	; 92a4 <__tVoc_setAspirationNoiseFilterFreq_veneer+0x4>
    92a4:	0801650d 	.word	0x0801650d

000092a8 <__tCrusher_setOperation_veneer>:
    92a8:	f85f f000 	ldr.w	pc, [pc]	; 92ac <__tCrusher_setOperation_veneer+0x4>
    92ac:	0800e355 	.word	0x0800e355

000092b0 <__tVZFilter_setFreq_veneer>:
    92b0:	f85f f000 	ldr.w	pc, [pc]	; 92b4 <__tVZFilter_setFreq_veneer+0x4>
    92b4:	0800fac1 	.word	0x0800fac1

000092b8 <__tSineTriLFO_setFreq_veneer>:
    92b8:	f85f f000 	ldr.w	pc, [pc]	; 92bc <__tSineTriLFO_setFreq_veneer+0x4>
    92bc:	08013139 	.word	0x08013139

000092c0 <__setLFOShapes_veneer>:
    92c0:	f85f f000 	ldr.w	pc, [pc]	; 92c4 <__setLFOShapes_veneer+0x4>
    92c4:	08001fe1 	.word	0x08001fe1

000092c8 <__tLinearDelay_setDelay_veneer>:
    92c8:	f85f f000 	ldr.w	pc, [pc]	; 92cc <__tLinearDelay_setDelay_veneer+0x4>
    92cc:	0800dc6f 	.word	0x0800dc6f

000092d0 <__tStiffString_setStiffnessNoUpdate_veneer>:
    92d0:	f85f f000 	ldr.w	pc, [pc]	; 92d4 <__tStiffString_setStiffnessNoUpdate_veneer+0x4>
    92d4:	08015219 	.word	0x08015219

000092d8 <__tTString_setOpenStringFrequency_veneer>:
    92d8:	f85f f000 	ldr.w	pc, [pc]	; 92dc <__tTString_setOpenStringFrequency_veneer+0x4>
    92dc:	080149db 	.word	0x080149db

000092e0 <__tPBSineTriangle_setShape_veneer>:
    92e0:	f85f f000 	ldr.w	pc, [pc]	; 92e4 <__tPBSineTriangle_setShape_veneer+0x4>
    92e4:	080129a7 	.word	0x080129a7

000092e8 <__tTString_setHarmonicity_veneer>:
    92e8:	f85f f000 	ldr.w	pc, [pc]	; 92ec <__tTString_setHarmonicity_veneer+0x4>
    92ec:	08014ce9 	.word	0x08014ce9

000092f0 <__HAL_SPI_TransmitReceive_DMA_veneer>:
    92f0:	f85f f000 	ldr.w	pc, [pc]	; 92f4 <__HAL_SPI_TransmitReceive_DMA_veneer+0x4>
    92f4:	0800a7dd 	.word	0x0800a7dd

000092f8 <__tVZFilterLS_tick_veneer>:
    92f8:	f85f f000 	ldr.w	pc, [pc]	; 92fc <__tVZFilterLS_tick_veneer+0x4>
    92fc:	080101e5 	.word	0x080101e5

00009300 <__tCrusher_setQuality_veneer>:
    9300:	f85f f000 	ldr.w	pc, [pc]	; 9304 <__tCrusher_setQuality_veneer+0x4>
    9304:	0800e369 	.word	0x0800e369

00009308 <__tTString_setPickupFilterQ_veneer>:
    9308:	f85f f000 	ldr.w	pc, [pc]	; 930c <__tTString_setPickupFilterQ_veneer+0x4>
    930c:	08014dc1 	.word	0x08014dc1

00009310 <__tTString_setFeedbackReactionSpeed_veneer>:
    9310:	f85f f000 	ldr.w	pc, [pc]	; 9314 <__tTString_setFeedbackReactionSpeed_veneer+0x4>
    9314:	08014ae5 	.word	0x08014ae5

00009318 <__fastSine_veneer>:
    9318:	f85f f000 	ldr.w	pc, [pc]	; 931c <__fastSine_veneer+0x4>
    931c:	08011d29 	.word	0x08011d29

00009320 <__tSquareLFO_setPulseWidth_veneer>:
    9320:	f85f f000 	ldr.w	pc, [pc]	; 9324 <__tSquareLFO_setPulseWidth_veneer+0x4>
    9324:	08012ea9 	.word	0x08012ea9

00009328 <__tStiffString_setPluckPosNoUpdate_veneer>:
    9328:	f85f f000 	ldr.w	pc, [pc]	; 932c <__tStiffString_setPluckPosNoUpdate_veneer+0x4>
    932c:	0801525d 	.word	0x0801525d

00009330 <__tSimpleLivingString3_initToPool_veneer>:
    9330:	f85f f000 	ldr.w	pc, [pc]	; 9334 <__tSimpleLivingString3_initToPool_veneer+0x4>
    9334:	080133d9 	.word	0x080133d9

00009338 <__tSawSquareLFO_setShape_veneer>:
    9338:	f85f f000 	ldr.w	pc, [pc]	; 933c <__tSawSquareLFO_setShape_veneer+0x4>
    933c:	0801300b 	.word	0x0801300b

00009340 <__tPBTriangle_setSkew_veneer>:
    9340:	f85f f000 	ldr.w	pc, [pc]	; 9344 <__tPBTriangle_setSkew_veneer+0x4>
    9344:	08012801 	.word	0x08012801

00009348 <__tVZFilter_setFreqFast_veneer>:
    9348:	f85f f000 	ldr.w	pc, [pc]	; 934c <__tVZFilter_setFreqFast_veneer+0x4>
    934c:	0800faf1 	.word	0x0800faf1

00009350 <__tPBSineTriangle_setFreq_veneer>:
    9350:	f85f f000 	ldr.w	pc, [pc]	; 9354 <__tPBSineTriangle_setFreq_veneer+0x4>
    9354:	0801298b 	.word	0x0801298b

00009358 <__tSquareLFO_setFreq_veneer>:
    9358:	f85f f000 	ldr.w	pc, [pc]	; 935c <__tSquareLFO_setFreq_veneer+0x4>
    935c:	08012e83 	.word	0x08012e83

00009360 <__tSawSquareLFO_setFreq_veneer>:
    9360:	f85f f000 	ldr.w	pc, [pc]	; 9364 <__tSawSquareLFO_setFreq_veneer+0x4>
    9364:	08012fbf 	.word	0x08012fbf

00009368 <__faster_mtof_veneer>:
    9368:	f85f f000 	ldr.w	pc, [pc]	; 936c <__faster_mtof_veneer+0x4>
    936c:	08012099 	.word	0x08012099

00009370 <__mtofTableLookup_veneer>:
    9370:	f85f f000 	ldr.w	pc, [pc]	; 9374 <__mtofTableLookup_veneer+0x4>
    9374:	08000885 	.word	0x08000885

00009378 <__tADSRT_setDecay_veneer>:
    9378:	f85f f000 	ldr.w	pc, [pc]	; 937c <__tADSRT_setDecay_veneer+0x4>
    937c:	0800e7f5 	.word	0x0800e7f5

00009380 <__MX_SPI5_Init_veneer>:
    9380:	f85f f000 	ldr.w	pc, [pc]	; 9384 <__MX_SPI5_Init_veneer+0x4>
    9384:	08002b4d 	.word	0x08002b4d

00009388 <__tVoc_set_tractLength_veneer>:
    9388:	f85f f000 	ldr.w	pc, [pc]	; 938c <__tVoc_set_tractLength_veneer+0x4>
    938c:	080164d9 	.word	0x080164d9

00009390 <__tADSRT_tick_veneer>:
    9390:	f85f f000 	ldr.w	pc, [pc]	; 9394 <__tADSRT_tick_veneer+0x4>
    9394:	0800e8d9 	.word	0x0800e8d9

00009398 <__tADSRT_setSustain_veneer>:
    9398:	f85f f000 	ldr.w	pc, [pc]	; 939c <__tADSRT_setSustain_veneer+0x4>
    939c:	0800e81d 	.word	0x0800e81d

000093a0 <__tVoc_setAspirationNoiseFilterQ_veneer>:
    93a0:	f85f f000 	ldr.w	pc, [pc]	; 93a4 <__tVoc_setAspirationNoiseFilterQ_veneer+0x4>
    93a4:	08016531 	.word	0x08016531

000093a8 <__tPBPulse_tick_veneer>:
    93a8:	f85f f000 	ldr.w	pc, [pc]	; 93ac <__tPBPulse_tick_veneer+0x4>
    93ac:	08012a0d 	.word	0x08012a0d

000093b0 <__tPBSaw_setFreq_veneer>:
    93b0:	f85f f000 	ldr.w	pc, [pc]	; 93b4 <__tPBSaw_setFreq_veneer+0x4>
    93b4:	08012b9d 	.word	0x08012b9d

000093b8 <__tADSRT_setRelease_veneer>:
    93b8:	f85f f000 	ldr.w	pc, [pc]	; 93bc <__tADSRT_setRelease_veneer+0x4>
    93bc:	0800e849 	.word	0x0800e849

000093c0 <__tSimpleLivingString3_tick_veneer>:
    93c0:	f85f f000 	ldr.w	pc, [pc]	; 93c4 <__tSimpleLivingString3_tick_veneer+0x4>
    93c4:	08013777 	.word	0x08013777

000093c8 <__tTString_free_veneer>:
    93c8:	f85f f000 	ldr.w	pc, [pc]	; 93cc <__tTString_free_veneer+0x4>
    93cc:	08013923 	.word	0x08013923

000093d0 <__tSimpleLivingString3_setLevMode_veneer>:
    93d0:	f85f f000 	ldr.w	pc, [pc]	; 93d4 <__tSimpleLivingString3_setLevMode_veneer+0x4>
    93d4:	08013685 	.word	0x08013685

000093d8 <__tTString_setFeedbackStrength_veneer>:
    93d8:	f85f f000 	ldr.w	pc, [pc]	; 93dc <__tTString_setFeedbackStrength_veneer+0x4>
    93dc:	08014aa1 	.word	0x08014aa1

000093e0 <__tVoc_set_tenseness_veneer>:
    93e0:	f85f f000 	ldr.w	pc, [pc]	; 93e4 <__tVoc_set_tenseness_veneer+0x4>
    93e4:	080164e5 	.word	0x080164e5

000093e8 <__audioSwitchToSynth_veneer>:
    93e8:	f85f f000 	ldr.w	pc, [pc]	; 93ec <__audioSwitchToSynth_veneer+0x4>
    93ec:	08003605 	.word	0x08003605

000093f0 <__setFilterTypes_veneer>:
    93f0:	f85f f000 	ldr.w	pc, [pc]	; 93f4 <__setFilterTypes_veneer+0x4>
    93f4:	08001e71 	.word	0x08001e71

000093f8 <__tVZFilterLS_setResonance_veneer>:
    93f8:	f85f f000 	ldr.w	pc, [pc]	; 93fc <__tVZFilterLS_setResonance_veneer+0x4>
    93fc:	08010351 	.word	0x08010351

00009400 <__tTString_setDecayInSeconds_veneer>:
    9400:	f85f f000 	ldr.w	pc, [pc]	; 9404 <__tTString_setDecayInSeconds_veneer+0x4>
    9404:	080148bd 	.word	0x080148bd

00009408 <__arm_fir_decimate_f32_veneer>:
    9408:	f85f f000 	ldr.w	pc, [pc]	; 940c <__arm_fir_decimate_f32_veneer+0x4>
    940c:	080005ed 	.word	0x080005ed

00009410 <__tVoc_setTurbulenceNoiseGain_veneer>:
    9410:	f85f f000 	ldr.w	pc, [pc]	; 9414 <__tVoc_setTurbulenceNoiseGain_veneer+0x4>
    9414:	080164f9 	.word	0x080164f9

00009418 <__tLadderFilter_setFreqFast_veneer>:
    9418:	f85f f000 	ldr.w	pc, [pc]	; 941c <__tLadderFilter_setFreqFast_veneer+0x4>
    941c:	08011749 	.word	0x08011749

00009420 <__tTString_pluck_veneer>:
    9420:	f85f f000 	ldr.w	pc, [pc]	; 9424 <__tTString_pluck_veneer+0x4>
    9424:	08014b25 	.word	0x08014b25

00009428 <__tPBSawSquare_tick_veneer>:
    9428:	f85f f000 	ldr.w	pc, [pc]	; 942c <__tPBSawSquare_tick_veneer+0x4>
    942c:	08012bf9 	.word	0x08012bf9

00009430 <__tPBTriangle_tick_veneer>:
    9430:	f85f f000 	ldr.w	pc, [pc]	; 9434 <__tPBTriangle_tick_veneer+0x4>
    9434:	080126c5 	.word	0x080126c5

00009438 <__dbToATableLookup_veneer>:
    9438:	f85f f000 	ldr.w	pc, [pc]	; 943c <__dbToATableLookup_veneer+0x4>
    943c:	08000805 	.word	0x08000805

00009440 <__tVZFilterHS_setResonance_veneer>:
    9440:	f85f f000 	ldr.w	pc, [pc]	; 9444 <__tVZFilterHS_setResonance_veneer+0x4>
    9444:	0801066d 	.word	0x0801066d

00009448 <__fastPowf_veneer>:
    9448:	f85f f000 	ldr.w	pc, [pc]	; 944c <__fastPowf_veneer+0x4>
    944c:	08011aad 	.word	0x08011aad

00009450 <__tSVF_setFreqFast_veneer>:
    9450:	f85f f000 	ldr.w	pc, [pc]	; 9454 <__tSVF_setFreqFast_veneer+0x4>
    9454:	0800f645 	.word	0x0800f645

00009458 <__tSimpleLivingString3_setLevStrength_veneer>:
    9458:	f85f f000 	ldr.w	pc, [pc]	; 945c <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    945c:	08013679 	.word	0x08013679

00009460 <__tPBSaw_tick_veneer>:
    9460:	f85f f000 	ldr.w	pc, [pc]	; 9464 <__tPBSaw_tick_veneer+0x4>
    9464:	08012b45 	.word	0x08012b45

00009468 <__tSawSquareLFO_setPhase_veneer>:
    9468:	f85f f000 	ldr.w	pc, [pc]	; 946c <__tSawSquareLFO_setPhase_veneer+0x4>
    946c:	08012fe5 	.word	0x08012fe5

00009470 <__tExpSmooth_setDest_veneer>:
    9470:	f85f f000 	ldr.w	pc, [pc]	; 9474 <__tExpSmooth_setDest_veneer+0x4>
    9474:	0800edcd 	.word	0x0800edcd

00009478 <__tTString_setFilterFreqDirectly_veneer>:
    9478:	f85f f000 	ldr.w	pc, [pc]	; 947c <__tTString_setFilterFreqDirectly_veneer+0x4>
    947c:	08014971 	.word	0x08014971

00009480 <__tStiffString_init_veneer>:
    9480:	f85f f000 	ldr.w	pc, [pc]	; 9484 <__tStiffString_init_veneer+0x4>
    9484:	080150bd 	.word	0x080150bd

00009488 <__tTString_setPickupPos_veneer>:
    9488:	f85f f000 	ldr.w	pc, [pc]	; 948c <__tTString_setPickupPos_veneer+0x4>
    948c:	08014909 	.word	0x08014909

00009490 <__tTString_setRippleDepth_veneer>:
    9490:	f85f f000 	ldr.w	pc, [pc]	; 9494 <__tTString_setRippleDepth_veneer+0x4>
    9494:	08014a05 	.word	0x08014a05

00009498 <__tLadderFilter_tick_veneer>:
    9498:	f85f f000 	ldr.w	pc, [pc]	; 949c <__tLadderFilter_tick_veneer+0x4>
    949c:	080114fd 	.word	0x080114fd

000094a0 <__tVZFilterHS_tick_veneer>:
    94a0:	f85f f000 	ldr.w	pc, [pc]	; 94a4 <__tVZFilterHS_tick_veneer+0x4>
    94a4:	08010505 	.word	0x08010505

000094a8 <__tDiodeFilter_tickEfficient_veneer>:
    94a8:	f85f f000 	ldr.w	pc, [pc]	; 94ac <__tDiodeFilter_tickEfficient_veneer+0x4>
    94ac:	08010fed 	.word	0x08010fed

000094b0 <__tStiffString_free_veneer>:
    94b0:	f85f f000 	ldr.w	pc, [pc]	; 94b4 <__tStiffString_free_veneer+0x4>
    94b4:	08014df9 	.word	0x08014df9

000094b8 <__tStiffString_setPickupPosNoUpdate_veneer>:
    94b8:	f85f f000 	ldr.w	pc, [pc]	; 94bc <__tStiffString_setPickupPosNoUpdate_veneer+0x4>
    94bc:	08015239 	.word	0x08015239

000094c0 <__tTString_setPickupModFreq_veneer>:
    94c0:	f85f f000 	ldr.w	pc, [pc]	; 94c4 <__tTString_setPickupModFreq_veneer+0x4>
    94c4:	08014921 	.word	0x08014921

000094c8 <__tSquareLFO_setPhase_veneer>:
    94c8:	f85f f000 	ldr.w	pc, [pc]	; 94cc <__tSquareLFO_setPhase_veneer+0x4>
    94cc:	08012f15 	.word	0x08012f15

000094d0 <__tExpSmooth_free_veneer>:
    94d0:	f85f f000 	ldr.w	pc, [pc]	; 94d4 <__tExpSmooth_free_veneer+0x4>
    94d4:	0800ed83 	.word	0x0800ed83

000094d8 <__changeOversampling_veneer>:
    94d8:	f85f f000 	ldr.w	pc, [pc]	; 94dc <__changeOversampling_veneer+0x4>
    94dc:	08003635 	.word	0x08003635

000094e0 <__tADSRT_setLeakFactor_veneer>:
    94e0:	f85f f000 	ldr.w	pc, [pc]	; 94e4 <__tADSRT_setLeakFactor_veneer+0x4>
    94e4:	0800e871 	.word	0x0800e871

000094e8 <__arm_fir_interpolate_f32_veneer>:
    94e8:	f85f f000 	ldr.w	pc, [pc]	; 94ec <__arm_fir_interpolate_f32_veneer+0x4>
    94ec:	080006a9 	.word	0x080006a9

000094f0 <__tPBPulse_setFreq_veneer>:
    94f0:	f85f f000 	ldr.w	pc, [pc]	; 94f4 <__tPBPulse_setFreq_veneer+0x4>
    94f4:	08012a91 	.word	0x08012a91

000094f8 <__tTriLFO_setPhase_veneer>:
    94f8:	f85f f000 	ldr.w	pc, [pc]	; 94fc <__tTriLFO_setPhase_veneer+0x4>
    94fc:	080130b3 	.word	0x080130b3

00009500 <__tVoc_setFreq_veneer>:
    9500:	f85f f000 	ldr.w	pc, [pc]	; 9504 <__tVoc_setFreq_veneer+0x4>
    9504:	080164c7 	.word	0x080164c7

00009508 <__tPickupNonLinearity_init_veneer>:
    9508:	f85f f000 	ldr.w	pc, [pc]	; 950c <__tPickupNonLinearity_init_veneer+0x4>
    950c:	0801322d 	.word	0x0801322d

00009510 <__tSimpleLivingString3_setDecay_veneer>:
    9510:	f85f f000 	ldr.w	pc, [pc]	; 9514 <__tSimpleLivingString3_setDecay_veneer+0x4>
    9514:	08013601 	.word	0x08013601

00009518 <__HAL_SPI_Abort_veneer>:
    9518:	f85f f000 	ldr.w	pc, [pc]	; 951c <__HAL_SPI_Abort_veneer+0x4>
    951c:	0800aa29 	.word	0x0800aa29

00009520 <__tVZFilterBell_setBandwidth_veneer>:
    9520:	f85f f000 	ldr.w	pc, [pc]	; 9524 <__tVZFilterBell_setBandwidth_veneer+0x4>
    9524:	080108c5 	.word	0x080108c5

00009528 <__tPBTriangle_setFreq_veneer>:
    9528:	f85f f000 	ldr.w	pc, [pc]	; 952c <__tPBTriangle_setFreq_veneer+0x4>
    952c:	080127ed 	.word	0x080127ed

00009530 <__tADSRT_tickNoInterp_veneer>:
    9530:	f85f f000 	ldr.w	pc, [pc]	; 9534 <__tADSRT_tickNoInterp_veneer+0x4>
    9534:	0800eb75 	.word	0x0800eb75

00009538 <__tSimpleLivingString3_pluck_veneer>:
    9538:	f85f f000 	ldr.w	pc, [pc]	; 953c <__tSimpleLivingString3_pluck_veneer+0x4>
    953c:	08013697 	.word	0x08013697

00009540 <__tPBSawSquare_setFreq_veneer>:
    9540:	f85f f000 	ldr.w	pc, [pc]	; 9544 <__tPBSawSquare_setFreq_veneer+0x4>
    9544:	08012ca1 	.word	0x08012ca1

00009548 <__tSimpleLivingString3_setFreq_veneer>:
    9548:	f85f f000 	ldr.w	pc, [pc]	; 954c <__tSimpleLivingString3_setFreq_veneer+0x4>
    954c:	08013319 	.word	0x08013319

00009550 <__tTriLFO_setFreq_veneer>:
    9550:	f85f f000 	ldr.w	pc, [pc]	; 9554 <__tTriLFO_setFreq_veneer+0x4>
    9554:	0801304d 	.word	0x0801304d

00009558 <__tADSRT_clear_veneer>:
    9558:	f85f f000 	ldr.w	pc, [pc]	; 955c <__tADSRT_clear_veneer+0x4>
    955c:	0800e8cb 	.word	0x0800e8cb

00009560 <__tVoc_set_velum_veneer>:
    9560:	f85f f000 	ldr.w	pc, [pc]	; 9564 <__tVoc_set_velum_veneer+0x4>
    9564:	080164ef 	.word	0x080164ef

00009568 <__tVoc_set_tongue_shape_and_touch_veneer>:
    9568:	f85f f000 	ldr.w	pc, [pc]	; 956c <__tVoc_set_tongue_shape_and_touch_veneer+0x4>
    956c:	080167c9 	.word	0x080167c9

00009570 <__tTString_setBarPosition_veneer>:
    9570:	f85f f000 	ldr.w	pc, [pc]	; 9574 <__tTString_setBarPosition_veneer+0x4>
    9574:	080149cb 	.word	0x080149cb

00009578 <__tPickupNonLinearity_tick_veneer>:
    9578:	f85f f000 	ldr.w	pc, [pc]	; 957c <__tPickupNonLinearity_tick_veneer+0x4>
    957c:	08013245 	.word	0x08013245

00009580 <__tExpSmooth_setFactor_veneer>:
    9580:	f85f f000 	ldr.w	pc, [pc]	; 9584 <__tExpSmooth_setFactor_veneer+0x4>
    9584:	0800ed91 	.word	0x0800ed91

00009588 <__tTString_setSlideGain_veneer>:
    9588:	f85f f000 	ldr.w	pc, [pc]	; 958c <__tTString_setSlideGain_veneer+0x4>
    958c:	080149fb 	.word	0x080149fb

00009590 <__MX_SPI1_Init_veneer>:
    9590:	f85f f000 	ldr.w	pc, [pc]	; 9594 <__MX_SPI1_Init_veneer+0x4>
    9594:	08002b01 	.word	0x08002b01

00009598 <__fromAscii_veneer>:
    9598:	f85f f000 	ldr.w	pc, [pc]	; 959c <__fromAscii_veneer+0x4>
    959c:	08002157 	.word	0x08002157

000095a0 <__tExpSmooth_init_veneer>:
    95a0:	f85f f000 	ldr.w	pc, [pc]	; 95a4 <__tExpSmooth_init_veneer+0x4>
    95a4:	0800ed79 	.word	0x0800ed79

000095a8 <__tVZFilterBell_setGain_veneer>:
    95a8:	f85f f000 	ldr.w	pc, [pc]	; 95ac <__tVZFilterBell_setGain_veneer+0x4>
    95ac:	08010b55 	.word	0x08010b55

000095b0 <__tSimpleLivingString3_free_veneer>:
    95b0:	f85f f000 	ldr.w	pc, [pc]	; 95b4 <__tSimpleLivingString3_free_veneer+0x4>
    95b4:	080132d5 	.word	0x080132d5

000095b8 <__tStiffString_setFreq_veneer>:
    95b8:	f85f f000 	ldr.w	pc, [pc]	; 95bc <__tStiffString_setFreq_veneer+0x4>
    95bc:	08015155 	.word	0x08015155

000095c0 <__tSineTriLFO_setPhase_veneer>:
    95c0:	f85f f000 	ldr.w	pc, [pc]	; 95c4 <__tSineTriLFO_setPhase_veneer+0x4>
    95c4:	0801315f 	.word	0x0801315f

000095c8 <__tPBPulse_setWidth_veneer>:
    95c8:	f85f f000 	ldr.w	pc, [pc]	; 95cc <__tPBPulse_setWidth_veneer+0x4>
    95cc:	08012aa9 	.word	0x08012aa9

000095d0 <__tStiffString_updateOscillators_veneer>:
    95d0:	f85f f000 	ldr.w	pc, [pc]	; 95d4 <__tStiffString_updateOscillators_veneer+0x4>
    95d4:	08014e45 	.word	0x08014e45

000095d8 <__LEAF_mapToZeroToOneOutput_veneer>:
    95d8:	f85f f000 	ldr.w	pc, [pc]	; 95dc <__LEAF_mapToZeroToOneOutput_veneer+0x4>
    95dc:	08011835 	.word	0x08011835

000095e0 <__LEAF_map_veneer>:
    95e0:	f85f f000 	ldr.w	pc, [pc]	; 95e4 <__LEAF_map_veneer+0x4>
    95e4:	0801180d 	.word	0x0801180d

000095e8 <__tTString_setPhantomHarmonicsGain_veneer>:
    95e8:	f85f f000 	ldr.w	pc, [pc]	; 95ec <__tTString_setPhantomHarmonicsGain_veneer+0x4>
    95ec:	080149f3 	.word	0x080149f3

000095f0 <__tIntPhasor_setPhase_veneer>:
    95f0:	f85f f000 	ldr.w	pc, [pc]	; 95f4 <__tIntPhasor_setPhase_veneer+0x4>
    95f4:	08012e25 	.word	0x08012e25

000095f8 <__tCycle_setPhase_veneer>:
    95f8:	f85f f000 	ldr.w	pc, [pc]	; 95fc <__tCycle_setPhase_veneer+0x4>
    95fc:	08012641 	.word	0x08012641

00009600 <__tTString_setTensionGain_veneer>:
    9600:	f85f f000 	ldr.w	pc, [pc]	; 9604 <__tTString_setTensionGain_veneer+0x4>
    9604:	080149c3 	.word	0x080149c3

00009608 <__tSimpleLivingString3_setTargetLev_veneer>:
    9608:	f85f f000 	ldr.w	pc, [pc]	; 960c <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    960c:	08013661 	.word	0x08013661

00009610 <__tTString_setPickupAmount_veneer>:
    9610:	f85f f000 	ldr.w	pc, [pc]	; 9614 <__tTString_setPickupAmount_veneer+0x4>
    9614:	08014911 	.word	0x08014911

00009618 <__tSquareLFO_tick_veneer>:
    9618:	f85f f000 	ldr.w	pc, [pc]	; 961c <__tSquareLFO_tick_veneer+0x4>
    961c:	08012e49 	.word	0x08012e49

00009620 <__setEffectsFunctions_veneer>:
    9620:	f85f f000 	ldr.w	pc, [pc]	; 9624 <__setEffectsFunctions_veneer+0x4>
    9624:	08001909 	.word	0x08001909

00009628 <__tHighpass_tick_veneer>:
    9628:	f85f f000 	ldr.w	pc, [pc]	; 962c <__tHighpass_tick_veneer+0x4>
    962c:	0800f79b 	.word	0x0800f79b

00009630 <__tCompressor_tick_veneer>:
    9630:	f85f f000 	ldr.w	pc, [pc]	; 9634 <__tCompressor_tick_veneer+0x4>
    9634:	0800e485 	.word	0x0800e485

00009638 <__tVZFilterHS_setFreqFast_veneer>:
    9638:	f85f f000 	ldr.w	pc, [pc]	; 963c <__tVZFilterHS_setFreqFast_veneer+0x4>
    963c:	08010569 	.word	0x08010569

00009640 <__tTapeDelay_setDelay_veneer>:
    9640:	f85f f000 	ldr.w	pc, [pc]	; 9644 <__tTapeDelay_setDelay_veneer+0x4>
    9644:	0800e1b1 	.word	0x0800e1b1

00009648 <__tADSRT_init_veneer>:
    9648:	f85f f000 	ldr.w	pc, [pc]	; 964c <__tADSRT_init_veneer+0x4>
    964c:	0800e7c1 	.word	0x0800e7c1

00009650 <__tTString_setPeakFilterQ_veneer>:
    9650:	f85f f000 	ldr.w	pc, [pc]	; 9654 <__tTString_setPeakFilterQ_veneer+0x4>
    9654:	08014de3 	.word	0x08014de3

00009658 <__tCrusher_tick_veneer>:
    9658:	f85f f000 	ldr.w	pc, [pc]	; 965c <__tCrusher_tick_veneer+0x4>
    965c:	0800e301 	.word	0x0800e301

00009660 <__tExpSmooth_tick_veneer>:
    9660:	f85f f000 	ldr.w	pc, [pc]	; 9664 <__tExpSmooth_tick_veneer+0x4>
    9664:	0800ede9 	.word	0x0800ede9

00009668 <__fasterexpf_veneer>:
    9668:	f85f f000 	ldr.w	pc, [pc]	; 966c <__fasterexpf_veneer+0x4>
    966c:	0801194d 	.word	0x0801194d

00009670 <__tanhf_veneer>:
    9670:	f85f f000 	ldr.w	pc, [pc]	; 9674 <__tanhf_veneer+0x4>
    9674:	080173c9 	.word	0x080173c9

00009678 <__tTriLFO_tick_veneer>:
    9678:	f85f f000 	ldr.w	pc, [pc]	; 967c <__tTriLFO_tick_veneer+0x4>
    967c:	08013015 	.word	0x08013015

00009680 <__tTString_initToPool_veneer>:
    9680:	f85f f000 	ldr.w	pc, [pc]	; 9684 <__tTString_initToPool_veneer+0x4>
    9684:	080142b5 	.word	0x080142b5

00009688 <__tVZFilterBell_setFreq_veneer>:
    9688:	f85f f000 	ldr.w	pc, [pc]	; 968c <__tVZFilterBell_setFreq_veneer+0x4>
    968c:	0801094d 	.word	0x0801094d

00009690 <__tPBSineTriangle_tick_veneer>:
    9690:	f85f f000 	ldr.w	pc, [pc]	; 9694 <__tPBSineTriangle_tick_veneer+0x4>
    9694:	08012887 	.word	0x08012887

00009698 <__tDiodeFilter_setFreqFast_veneer>:
    9698:	f85f f000 	ldr.w	pc, [pc]	; 969c <__tDiodeFilter_setFreqFast_veneer+0x4>
    969c:	080112b9 	.word	0x080112b9

000096a0 <__tVoc_rescaleDiameter_veneer>:
    96a0:	f85f f000 	ldr.w	pc, [pc]	; 96a4 <__tVoc_rescaleDiameter_veneer+0x4>
    96a4:	08016891 	.word	0x08016891

000096a8 <__tADSRT_on_veneer>:
    96a8:	f85f f000 	ldr.w	pc, [pc]	; 96ac <__tADSRT_on_veneer+0x4>
    96ac:	0800e895 	.word	0x0800e895

000096b0 <__tVZFilter_setResonance_veneer>:
    96b0:	f85f f000 	ldr.w	pc, [pc]	; 96b4 <__tVZFilter_setResonance_veneer+0x4>
    96b4:	0800fded 	.word	0x0800fded

000096b8 <__tLadderFilter_setQ_veneer>:
    96b8:	f85f f000 	ldr.w	pc, [pc]	; 96bc <__tLadderFilter_setQ_veneer+0x4>
    96bc:	080117b9 	.word	0x080117b9

000096c0 <__tTString_setPickupModAmp_veneer>:
    96c0:	f85f f000 	ldr.w	pc, [pc]	; 96c4 <__tTString_setPickupModAmp_veneer+0x4>
    96c4:	08014919 	.word	0x08014919

000096c8 <__tSimpleLivingString3_setPickupPoint_veneer>:
    96c8:	f85f f000 	ldr.w	pc, [pc]	; 96cc <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    96cc:	0801391b 	.word	0x0801391b

000096d0 <__tTString_setFreq_veneer>:
    96d0:	f85f f000 	ldr.w	pc, [pc]	; 96d4 <__tTString_setFreq_veneer+0x4>
    96d4:	08014231 	.word	0x08014231

000096d8 <__tCycle_init_veneer>:
    96d8:	f85f f000 	ldr.w	pc, [pc]	; 96dc <__tCycle_init_veneer+0x4>
    96dc:	080125c1 	.word	0x080125c1

000096e0 <__tCycle_tick_veneer>:
    96e0:	f85f f000 	ldr.w	pc, [pc]	; 96e4 <__tCycle_tick_veneer+0x4>
    96e4:	080125d9 	.word	0x080125d9

000096e8 <__tVoc_tick_veneer>:
    96e8:	f85f f000 	ldr.w	pc, [pc]	; 96ec <__tVoc_tick_veneer+0x4>
    96ec:	08016409 	.word	0x08016409

000096f0 <__tVoc_init_veneer>:
    96f0:	f85f f000 	ldr.w	pc, [pc]	; 96f4 <__tVoc_init_veneer+0x4>
    96f4:	080163ff 	.word	0x080163ff

000096f8 <__tSVF_tick_veneer>:
    96f8:	f85f f000 	ldr.w	pc, [pc]	; 96fc <__tSVF_tick_veneer+0x4>
    96fc:	0800f54f 	.word	0x0800f54f

00009700 <__tTString_setInharmonic_veneer>:
    9700:	f85f f000 	ldr.w	pc, [pc]	; 9704 <__tTString_setInharmonic_veneer+0x4>
    9704:	08014d3f 	.word	0x08014d3f

00009708 <__tExpSmooth_setValAndDest_veneer>:
    9708:	f85f f000 	ldr.w	pc, [pc]	; 970c <__tExpSmooth_setValAndDest_veneer+0x4>
    970c:	0800eddd 	.word	0x0800eddd

00009710 <__tEnvelopeFollower_tick_veneer>:
    9710:	f85f f000 	ldr.w	pc, [pc]	; 9714 <__tEnvelopeFollower_tick_veneer+0x4>
    9714:	0800da35 	.word	0x0800da35

00009718 <__tPickupNonLinearity_free_veneer>:
    9718:	f85f f000 	ldr.w	pc, [pc]	; 971c <__tPickupNonLinearity_free_veneer+0x4>
    971c:	08013237 	.word	0x08013237
