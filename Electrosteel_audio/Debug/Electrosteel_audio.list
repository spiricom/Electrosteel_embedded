
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c168  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018530  0801c400  0801c400  0002c400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08034930  08034930  0005018c  2**0
                  CONTENTS
  4 .ARM          00000000  08034930  08034930  0005018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08034930  08034930  0005018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08034930  08034930  00044930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08034934  08034934  00044934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08034938  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019bdc  20000190  08034ac4  00050190  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  20019d6c  08034ac4  00059d6c  2**0
                  ALLOC
 11 .RAM_D1       0005cce0  24000000  24000000  00060000  2**5
                  ALLOC
 12 .RAM_D2       000011e0  30000000  30000000  00060000  2**5
                  ALLOC
 13 .SDRAM        02000000  60000000  60000000  00060000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  0005018c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0006fbf2  00000000  00000000  000501ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008e9d  00000000  00000000  000bfdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    00065a6f  00000000  00000000  000c8c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000030b0  00000000  00000000  0012e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000c6f0  00000000  00000000  00131768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00050d2b  00000000  00000000  0013de58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0000f1c1  00000000  00000000  0018eb83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000c5  00000000  00000000  0019dd44  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000a814  00000000  00000000  0019de0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000190 	.word	0x20000190
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801c3e8 	.word	0x0801c3e8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000194 	.word	0x20000194
 80002d4:	0801c3e8 	.word	0x0801c3e8

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 80002e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 80002ec:	4cd3      	ldr	r4, [pc, #844]	; (800063c <audioInit+0x354>)
{
 80002ee:	460d      	mov	r5, r1
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 80002f0:	ed9f 0ad3 	vldr	s0, [pc, #844]	; 8000640 <audioInit+0x358>
 80002f4:	f24e 2290 	movw	r2, #58000	; 0xe290
 80002f8:	4620      	mov	r0, r4
 80002fa:	49d2      	ldr	r1, [pc, #840]	; (8000644 <audioInit+0x35c>)
 80002fc:	4bd2      	ldr	r3, [pc, #840]	; (8000648 <audioInit+0x360>)
{
 80002fe:	ed2d 8b0a 	vpush	{d8-d12}
 8000302:	b085      	sub	sp, #20

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc

	//a table that maps bar mapping values (frequency ratios from 1 to 8) to midinote offsets caused by the bar (for the filter computation, which stays in midi world)
    float increment = 1.0f / (float)(MAPPING_TABLE_SIZE - 1);
    float x = 0.0f;
 8000304:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 800064c <audioInit+0x364>
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000308:	f019 fedc 	bl	801a0c4 <LEAF_init>
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 800030c:	4623      	mov	r3, r4
 800030e:	4ad0      	ldr	r2, [pc, #832]	; (8000650 <audioInit+0x368>)
{
 8000310:	ee0c 5a10 	vmov	s24, r5
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8000314:	49cf      	ldr	r1, [pc, #828]	; (8000654 <audioInit+0x36c>)
 8000316:	48d0      	ldr	r0, [pc, #832]	; (8000658 <audioInit+0x370>)
 8000318:	f015 f918 	bl	801554c <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 800031c:	4623      	mov	r3, r4
 800031e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000322:	49ce      	ldr	r1, [pc, #824]	; (800065c <audioInit+0x374>)
 8000324:	48ce      	ldr	r0, [pc, #824]	; (8000660 <audioInit+0x378>)
 8000326:	f015 f911 	bl	801554c <tMempool_init>
	leaf.clearOnAllocation = 1;
 800032a:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 800032c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000330:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000334:	eef0 0a48 	vmov.f32	s1, s16
 8000338:	eddf 1aca 	vldr	s3, [pc, #808]	; 8000664 <audioInit+0x37c>
 800033c:	ed9f 0aca 	vldr	s0, [pc, #808]	; 8000668 <audioInit+0x380>
 8000340:	48ca      	ldr	r0, [pc, #808]	; (800066c <audioInit+0x384>)
	leaf.clearOnAllocation = 1;
 8000342:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8000344:	f014 fef4 	bl	8015130 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 8000348:	4bc9      	ldr	r3, [pc, #804]	; (8000670 <audioInit+0x388>)
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 800034a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 800034e:	4ac9      	ldr	r2, [pc, #804]	; (8000674 <audioInit+0x38c>)
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000350:	eddf 0ac9 	vldr	s1, [pc, #804]	; 8000678 <audioInit+0x390>
 8000354:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800067c <audioInit+0x394>
 8000358:	48c9      	ldr	r0, [pc, #804]	; (8000680 <audioInit+0x398>)
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 800035a:	601a      	str	r2, [r3, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 800035c:	f014 ff4c 	bl	80151f8 <LEAF_generate_mtof>
    float scalar = 7.0f;
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
    {
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
 8000360:	eddf 9ac8 	vldr	s19, [pc, #800]	; 8000684 <audioInit+0x39c>
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
 8000364:	4bc8      	ldr	r3, [pc, #800]	; (8000688 <audioInit+0x3a0>)
 8000366:	4ac9      	ldr	r2, [pc, #804]	; (800068c <audioInit+0x3a4>)
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
 8000368:	ed9f 9ac9 	vldr	s18, [pc, #804]	; 8000690 <audioInit+0x3a8>
        x += increment;
 800036c:	eddf 8ac9 	vldr	s17, [pc, #804]	; 8000694 <audioInit+0x3ac>
 8000370:	4cc9      	ldr	r4, [pc, #804]	; (8000698 <audioInit+0x3b0>)
 8000372:	4dca      	ldr	r5, [pc, #808]	; (800069c <audioInit+0x3b4>)
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
 8000374:	601a      	str	r2, [r3, #0]
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
 8000376:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 800037a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800037e:	eea8 0a27 	vfma.f32	s0, s16, s15
        x += increment;
 8000382:	ee38 8a28 	vadd.f32	s16, s16, s17
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
 8000386:	ee20 0a29 	vmul.f32	s0, s0, s19
 800038a:	f014 ff97 	bl	80152bc <ftom>
 800038e:	ee30 0a49 	vsub.f32	s0, s0, s18
 8000392:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
 8000396:	42ac      	cmp	r4, r5
 8000398:	d1ed      	bne.n	8000376 <audioInit+0x8e>
    }


	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 800039a:	2102      	movs	r1, #2
 800039c:	48c0      	ldr	r0, [pc, #768]	; (80006a0 <audioInit+0x3b8>)
 800039e:	f008 ff85 	bl	80092ac <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80003a2:	2120      	movs	r1, #32
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80003a4:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80003a6:	48bf      	ldr	r0, [pc, #764]	; (80006a4 <audioInit+0x3bc>)
 80003a8:	f008 ff80 	bl	80092ac <HAL_GPIO_ReadPin>
 80003ac:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80003ae:	2101      	movs	r1, #1
 80003b0:	48bd      	ldr	r0, [pc, #756]	; (80006a8 <audioInit+0x3c0>)
 80003b2:	f008 ff7b 	bl	80092ac <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));


	if (numStrings == 6)
 80003b6:	4bbd      	ldr	r3, [pc, #756]	; (80006ac <audioInit+0x3c4>)
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 80003b8:	00a4      	lsls	r4, r4, #2
 80003ba:	49bd      	ldr	r1, [pc, #756]	; (80006b0 <audioInit+0x3c8>)
	if (numStrings == 6)
 80003bc:	781a      	ldrb	r2, [r3, #0]
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 80003be:	eb04 0345 	add.w	r3, r4, r5, lsl #1
	if (numStrings == 6)
 80003c2:	2a06      	cmp	r2, #6
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 80003c4:	4418      	add	r0, r3
 80003c6:	b2c3      	uxtb	r3, r0
 80003c8:	700b      	strb	r3, [r1, #0]
	if (numStrings == 6)
 80003ca:	f000 8317 	beq.w	80009fc <audioInit+0x714>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
 80003ce:	2a0a      	cmp	r2, #10
 80003d0:	f000 8309 	beq.w	80009e6 <audioInit+0x6fe>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	48b7      	ldr	r0, [pc, #732]	; (80006b4 <audioInit+0x3cc>)
		numStringsThisBoard = 2;
 80003d8:	4ab7      	ldr	r2, [pc, #732]	; (80006b8 <audioInit+0x3d0>)
 80003da:	2102      	movs	r1, #2
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 80003dc:	6003      	str	r3, [r0, #0]
		numStringsThisBoard = 2;
 80003de:	7011      	strb	r1, [r2, #0]
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{

		tSlide_init(&freqSlider[i], 1, 20, &leaf);
 80003e0:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80003e4:	4995      	ldr	r1, [pc, #596]	; (800063c <audioInit+0x354>)
 80003e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80003ea:	48b4      	ldr	r0, [pc, #720]	; (80006bc <audioInit+0x3d4>)
 80003ec:	f013 fa1a 	bl	8013824 <tSlide_init>

		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
 80003f0:	4cb3      	ldr	r4, [pc, #716]	; (80006c0 <audioInit+0x3d8>)
 80003f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80003f6:	4991      	ldr	r1, [pc, #580]	; (800063c <audioInit+0x354>)
 80003f8:	eddf 0ab2 	vldr	s1, [pc, #712]	; 80006c4 <audioInit+0x3dc>
 80003fc:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8000400:	48b1      	ldr	r0, [pc, #708]	; (80006c8 <audioInit+0x3e0>)
 8000402:	f013 f9cf 	bl	80137a4 <tExpSmooth_init>
		tSlide_init(&freqSlider[i], 1, 20, &leaf);
 8000406:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800040a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800040e:	498b      	ldr	r1, [pc, #556]	; (800063c <audioInit+0x354>)
 8000410:	48ae      	ldr	r0, [pc, #696]	; (80006cc <audioInit+0x3e4>)
 8000412:	f013 fa07 	bl	8013824 <tSlide_init>


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000416:	4d89      	ldr	r5, [pc, #548]	; (800063c <audioInit+0x354>)
		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
 8000418:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800041c:	4987      	ldr	r1, [pc, #540]	; (800063c <audioInit+0x354>)
 800041e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 80006c4 <audioInit+0x3dc>
 8000422:	48ab      	ldr	r0, [pc, #684]	; (80006d0 <audioInit+0x3e8>)
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000424:	eddf 8aab 	vldr	s17, [pc, #684]	; 80006d4 <audioInit+0x3ec>
		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
 8000428:	f013 f9bc 	bl	80137a4 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 800042c:	ed9f 8a87 	vldr	s16, [pc, #540]	; 800064c <audioInit+0x364>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8000430:	4982      	ldr	r1, [pc, #520]	; (800063c <audioInit+0x354>)
 8000432:	eddf 0aa8 	vldr	s1, [pc, #672]	; 80006d4 <audioInit+0x3ec>
 8000436:	ed9f 0a85 	vldr	s0, [pc, #532]	; 800064c <audioInit+0x364>
 800043a:	48a7      	ldr	r0, [pc, #668]	; (80006d8 <audioInit+0x3f0>)
 800043c:	f013 f9b2 	bl	80137a4 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000440:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
 8000442:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000444:	eef0 0a68 	vmov.f32	s1, s17
 8000448:	4629      	mov	r1, r5
 800044a:	eeb0 0a48 	vmov.f32	s0, s16
 800044e:	f013 f9a9 	bl	80137a4 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
 8000452:	42b4      	cmp	r4, r6
 8000454:	d1f4      	bne.n	8000440 <audioInit+0x158>
 8000456:	4ca1      	ldr	r4, [pc, #644]	; (80006dc <audioInit+0x3f4>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 8000458:	4e78      	ldr	r6, [pc, #480]	; (800063c <audioInit+0x354>)
 800045a:	eddf 8a9e 	vldr	s17, [pc, #632]	; 80006d4 <audioInit+0x3ec>
 800045e:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000462:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 800064c <audioInit+0x364>
 8000466:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
 8000468:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 800046a:	eef0 0a68 	vmov.f32	s1, s17
 800046e:	4631      	mov	r1, r6
 8000470:	eeb0 0a48 	vmov.f32	s0, s16
 8000474:	f013 f996 	bl	80137a4 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
 8000478:	42ac      	cmp	r4, r5
 800047a:	d1f4      	bne.n	8000466 <audioInit+0x17e>
 800047c:	2600      	movs	r6, #0
 800047e:	4b98      	ldr	r3, [pc, #608]	; (80006e0 <audioInit+0x3f8>)
 8000480:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 800075c <audioInit+0x474>

		for(int i = 0; i < NUM_OSC; i++)
		{


			tMBSaw_init(&saw[i][v],  &leaf);
 8000484:	4c6d      	ldr	r4, [pc, #436]	; (800063c <audioInit+0x354>)

			tMBSawPulse_init(&sawPaired[i][v], &leaf);

			tMBSineTri_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.01f, &leaf);
 8000486:	ed9f 8a97 	vldr	s16, [pc, #604]	; 80006e4 <audioInit+0x3fc>
 800048a:	eddf ba97 	vldr	s23, [pc, #604]	; 80006e8 <audioInit+0x400>
		}

		for (int i = 0; i < NUM_FILT; i++)
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 800048e:	ed9f 9a97 	vldr	s18, [pc, #604]	; 80006ec <audioInit+0x404>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
		}
		//noise
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 8000492:	ed9f aa97 	vldr	s20, [pc, #604]	; 80006f0 <audioInit+0x408>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000496:	e9cd 3600 	strd	r3, r6, [sp]
    float x = 0.0f;
 800049a:	2500      	movs	r5, #0
			tMBSaw_init(&saw[i][v],  &leaf);
 800049c:	4b95      	ldr	r3, [pc, #596]	; (80006f4 <audioInit+0x40c>)
 800049e:	4621      	mov	r1, r4
 80004a0:	1998      	adds	r0, r3, r6
 80004a2:	4428      	add	r0, r5
 80004a4:	f018 f854 	bl	8018550 <tMBSaw_init>
			tMBPulse_init(&pulse[i][v], &leaf);
 80004a8:	4b93      	ldr	r3, [pc, #588]	; (80006f8 <audioInit+0x410>)
 80004aa:	4621      	mov	r1, r4
 80004ac:	1998      	adds	r0, r3, r6
 80004ae:	4428      	add	r0, r5
 80004b0:	f015 f92c 	bl	801570c <tMBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
 80004b4:	4b91      	ldr	r3, [pc, #580]	; (80006fc <audioInit+0x414>)
 80004b6:	4621      	mov	r1, r4
 80004b8:	1998      	adds	r0, r3, r6
 80004ba:	4428      	add	r0, r5
 80004bc:	f015 f8c6 	bl	801564c <tCycle_init>
			tMBTriangle_init(&tri[i][v],  &leaf);
 80004c0:	4b8f      	ldr	r3, [pc, #572]	; (8000700 <audioInit+0x418>)
 80004c2:	4621      	mov	r1, r4
 80004c4:	1998      	adds	r0, r3, r6
 80004c6:	4428      	add	r0, r5
 80004c8:	f015 ff0c 	bl	80162e4 <tMBTriangle_init>
			tMBSawPulse_init(&sawPaired[i][v], &leaf);
 80004cc:	4b8d      	ldr	r3, [pc, #564]	; (8000704 <audioInit+0x41c>)
 80004ce:	4621      	mov	r1, r4
 80004d0:	1998      	adds	r0, r3, r6
 80004d2:	4428      	add	r0, r5
 80004d4:	f018 fafa 	bl	8018acc <tMBSawPulse_init>
			tMBSineTri_init(&sinePaired[i][v],&leaf);
 80004d8:	4b8b      	ldr	r3, [pc, #556]	; (8000708 <audioInit+0x420>)
 80004da:	4621      	mov	r1, r4
 80004dc:	1998      	adds	r0, r3, r6
 80004de:	4428      	add	r0, r5
 80004e0:	f016 ff76 	bl	80173d0 <tMBSineTri_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.01f, &leaf);
 80004e4:	4b89      	ldr	r3, [pc, #548]	; (800070c <audioInit+0x424>)
 80004e6:	eef0 0a48 	vmov.f32	s1, s16
 80004ea:	4621      	mov	r1, r4
 80004ec:	1998      	adds	r0, r3, r6
 80004ee:	eeb0 0a6b 	vmov.f32	s0, s23
 80004f2:	4428      	add	r0, r5
		for(int i = 0; i < NUM_OSC; i++)
 80004f4:	3508      	adds	r5, #8
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.01f, &leaf);
 80004f6:	f013 f955 	bl	80137a4 <tExpSmooth_init>
		for(int i = 0; i < NUM_OSC; i++)
 80004fa:	2d18      	cmp	r5, #24
 80004fc:	d1ce      	bne.n	800049c <audioInit+0x1b4>
 80004fe:	4635      	mov	r5, r6
 8000500:	f106 0710 	add.w	r7, r6, #16
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8000504:	eddf 8a82 	vldr	s17, [pc, #520]	; 8000710 <audioInit+0x428>
 8000508:	4b82      	ldr	r3, [pc, #520]	; (8000714 <audioInit+0x42c>)
 800050a:	eef0 0a49 	vmov.f32	s1, s18
 800050e:	eeb0 0a68 	vmov.f32	s0, s17
 8000512:	2101      	movs	r1, #1
 8000514:	1958      	adds	r0, r3, r5
 8000516:	4622      	mov	r2, r4
 8000518:	f013 f9c6 	bl	80138a8 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 800051c:	4b7e      	ldr	r3, [pc, #504]	; (8000718 <audioInit+0x430>)
 800051e:	eef0 0a49 	vmov.f32	s1, s18
 8000522:	4622      	mov	r2, r4
 8000524:	1958      	adds	r0, r3, r5
 8000526:	eeb0 0a68 	vmov.f32	s0, s17
 800052a:	2100      	movs	r1, #0
 800052c:	f013 f9bc 	bl	80138a8 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8000530:	4b7a      	ldr	r3, [pc, #488]	; (800071c <audioInit+0x434>)
 8000532:	4622      	mov	r2, r4
 8000534:	eef0 0a49 	vmov.f32	s1, s18
 8000538:	1958      	adds	r0, r3, r5
 800053a:	eeb0 0a68 	vmov.f32	s0, s17
 800053e:	2102      	movs	r1, #2
 8000540:	f013 f9b2 	bl	80138a8 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
 8000544:	4b76      	ldr	r3, [pc, #472]	; (8000720 <audioInit+0x438>)
 8000546:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800054a:	4621      	mov	r1, r4
 800054c:	1958      	adds	r0, r3, r5
 800054e:	eeb0 0a68 	vmov.f32	s0, s17
 8000552:	f013 ffb1 	bl	80144b8 <tDiodeFilter_init>
			tVZFilter_init(&VZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
 8000556:	4b73      	ldr	r3, [pc, #460]	; (8000724 <audioInit+0x43c>)
 8000558:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800055c:	4622      	mov	r2, r4
 800055e:	1958      	adds	r0, r3, r5
 8000560:	eeb0 0a68 	vmov.f32	s0, s17
 8000564:	2105      	movs	r1, #5
 8000566:	f013 fccb 	bl	8013f00 <tVZFilter_init>
			tVZFilter_init(&VZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
 800056a:	4b6f      	ldr	r3, [pc, #444]	; (8000728 <audioInit+0x440>)
 800056c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000570:	4622      	mov	r2, r4
 8000572:	1958      	adds	r0, r3, r5
 8000574:	eeb0 0a68 	vmov.f32	s0, s17
 8000578:	2106      	movs	r1, #6
 800057a:	f013 fcc1 	bl	8013f00 <tVZFilter_init>
			tVZFilter_init(&VZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
 800057e:	4b6b      	ldr	r3, [pc, #428]	; (800072c <audioInit+0x444>)
 8000580:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000584:	4622      	mov	r2, r4
 8000586:	1958      	adds	r0, r3, r5
 8000588:	eeb0 0a68 	vmov.f32	s0, s17
 800058c:	2107      	movs	r1, #7
 800058e:	f013 fcb7 	bl	8013f00 <tVZFilter_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8000592:	4b67      	ldr	r3, [pc, #412]	; (8000730 <audioInit+0x448>)
 8000594:	4622      	mov	r2, r4
 8000596:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800059a:	1958      	adds	r0, r3, r5
 800059c:	eeb0 0a68 	vmov.f32	s0, s17
 80005a0:	2104      	movs	r1, #4
 80005a2:	f013 fcad 	bl	8013f00 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
 80005a6:	4b63      	ldr	r3, [pc, #396]	; (8000734 <audioInit+0x44c>)
 80005a8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80005ac:	4621      	mov	r1, r4
 80005ae:	1958      	adds	r0, r3, r5
 80005b0:	eeb0 0a68 	vmov.f32	s0, s17
 80005b4:	f014 fb14 	bl	8014be0 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 80005b8:	4b5f      	ldr	r3, [pc, #380]	; (8000738 <audioInit+0x450>)
 80005ba:	eef0 0a48 	vmov.f32	s1, s16
 80005be:	4621      	mov	r1, r4
 80005c0:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
 80005c2:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 80005c4:	eeb0 0a6b 	vmov.f32	s0, s23
 80005c8:	f013 f8ec 	bl	80137a4 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
 80005cc:	42bd      	cmp	r5, r7
 80005ce:	d19b      	bne.n	8000508 <audioInit+0x220>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 80005d0:	4b5a      	ldr	r3, [pc, #360]	; (800073c <audioInit+0x454>)
 80005d2:	2500      	movs	r5, #0
 80005d4:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 80005d8:	4b59      	ldr	r3, [pc, #356]	; (8000740 <audioInit+0x458>)
 80005da:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 80005dc:	eb08 0005 	add.w	r0, r8, r5
 80005e0:	4621      	mov	r1, r4
 80005e2:	f019 fa15 	bl	8019a10 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 80005e6:	1978      	adds	r0, r7, r5
 80005e8:	4621      	mov	r1, r4
 80005ea:	f019 fa57 	bl	8019a9c <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
 80005ee:	4b55      	ldr	r3, [pc, #340]	; (8000744 <audioInit+0x45c>)
 80005f0:	4621      	mov	r1, r4
 80005f2:	1998      	adds	r0, r3, r6
 80005f4:	4428      	add	r0, r5
 80005f6:	f015 f829 	bl	801564c <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
 80005fa:	4b53      	ldr	r3, [pc, #332]	; (8000748 <audioInit+0x460>)
 80005fc:	4621      	mov	r1, r4
 80005fe:	1998      	adds	r0, r3, r6
 8000600:	4428      	add	r0, r5
 8000602:	f019 fc37 	bl	8019e74 <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
 8000606:	4b51      	ldr	r3, [pc, #324]	; (800074c <audioInit+0x464>)
 8000608:	4621      	mov	r1, r4
 800060a:	1998      	adds	r0, r3, r6
 800060c:	4428      	add	r0, r5
 800060e:	f019 fc8d 	bl	8019f2c <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 8000612:	4b4f      	ldr	r3, [pc, #316]	; (8000750 <audioInit+0x468>)
 8000614:	4621      	mov	r1, r4
 8000616:	1998      	adds	r0, r3, r6
 8000618:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
 800061a:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 800061c:	f019 fb68 	bl	8019cf0 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
 8000620:	2d20      	cmp	r5, #32
 8000622:	d1db      	bne.n	80005dc <audioInit+0x2f4>
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
 8000624:	4b4b      	ldr	r3, [pc, #300]	; (8000754 <audioInit+0x46c>)
 8000626:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800062a:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8000758 <audioInit+0x470>
 800062e:	2106      	movs	r1, #6
 8000630:	1998      	adds	r0, r3, r6
 8000632:	4622      	mov	r2, r4
 8000634:	f013 fc64 	bl	8013f00 <tVZFilter_init>
 8000638:	e092      	b.n	8000760 <audioInit+0x478>
 800063a:	bf00      	nop
 800063c:	200045f0 	.word	0x200045f0
 8000640:	473b8000 	.word	0x473b8000
 8000644:	20004b08 	.word	0x20004b08
 8000648:	08004599 	.word	0x08004599
 800064c:	00000000 	.word	0x00000000
 8000650:	00030d40 	.word	0x00030d40
 8000654:	24028020 	.word	0x24028020
 8000658:	20004824 	.word	0x20004824
 800065c:	60000000 	.word	0x60000000
 8000660:	200045ec 	.word	0x200045ec
 8000664:	ba51b717 	.word	0xba51b717
 8000668:	3a83126f 	.word	0x3a83126f
 800066c:	200003e0 	.word	0x200003e0
 8000670:	200043e0 	.word	0x200043e0
 8000674:	457ff000 	.word	0x457ff000
 8000678:	4323d666 	.word	0x4323d666
 800067c:	c323d666 	.word	0xc323d666
 8000680:	24008020 	.word	0x24008020
 8000684:	435c0000 	.word	0x435c0000
 8000688:	20000060 	.word	0x20000060
 800068c:	449256db 	.word	0x449256db
 8000690:	42640000 	.word	0x42640000
 8000694:	38ffe802 	.word	0x38ffe802
 8000698:	24000000 	.word	0x24000000
 800069c:	24008010 	.word	0x24008010
 80006a0:	58020400 	.word	0x58020400
 80006a4:	58020800 	.word	0x58020800
 80006a8:	58020000 	.word	0x58020000
 80006ac:	20000065 	.word	0x20000065
 80006b0:	20013008 	.word	0x20013008
 80006b4:	200044a4 	.word	0x200044a4
 80006b8:	20000066 	.word	0x20000066
 80006bc:	200044c4 	.word	0x200044c4
 80006c0:	200045bc 	.word	0x200045bc
 80006c4:	3d4ccccd 	.word	0x3d4ccccd
 80006c8:	20012e78 	.word	0x20012e78
 80006cc:	200044c8 	.word	0x200044c8
 80006d0:	20012e7c 	.word	0x20012e7c
 80006d4:	3a03126f 	.word	0x3a03126f
 80006d8:	20012f54 	.word	0x20012f54
 80006dc:	20004988 	.word	0x20004988
 80006e0:	2000446c 	.word	0x2000446c
 80006e4:	3c23d70a 	.word	0x3c23d70a
 80006e8:	42800000 	.word	0x42800000
 80006ec:	3f333333 	.word	0x3f333333
 80006f0:	447a0000 	.word	0x447a0000
 80006f4:	20004a1c 	.word	0x20004a1c
 80006f8:	20004a00 	.word	0x20004a00
 80006fc:	20004ad8 	.word	0x20004ad8
 8000700:	20012f2c 	.word	0x20012f2c
 8000704:	20004a34 	.word	0x20004a34
 8000708:	20004af0 	.word	0x20004af0
 800070c:	200049b0 	.word	0x200049b0
 8000710:	44fa0000 	.word	0x44fa0000
 8000714:	20004714 	.word	0x20004714
 8000718:	2000450c 	.word	0x2000450c
 800071c:	20000324 	.word	0x20000324
 8000720:	20004424 	.word	0x20004424
 8000724:	2000030c 	.word	0x2000030c
 8000728:	200002fc 	.word	0x200002fc
 800072c:	200002ec 	.word	0x200002ec
 8000730:	200002dc 	.word	0x200002dc
 8000734:	200002cc 	.word	0x200002cc
 8000738:	2000446c 	.word	0x2000446c
 800073c:	20004664 	.word	0x20004664
 8000740:	20004644 	.word	0x20004644
 8000744:	200046b4 	.word	0x200046b4
 8000748:	200046f4 	.word	0x200046f4
 800074c:	200046d4 	.word	0x200046d4
 8000750:	20004684 	.word	0x20004684
 8000754:	20004890 	.word	0x20004890
 8000758:	42a00000 	.word	0x42a00000
 800075c:	20004824 	.word	0x20004824
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
 8000760:	4bb7      	ldr	r3, [pc, #732]	; (8000a40 <audioInit+0x758>)
 8000762:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8000766:	4622      	mov	r2, r4
 8000768:	1998      	adds	r0, r3, r6
 800076a:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8000a44 <audioInit+0x75c>
 800076e:	2107      	movs	r1, #7
		//LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE);


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000770:	eddf 9ab5 	vldr	s19, [pc, #724]	; 8000a48 <audioInit+0x760>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
 8000774:	f013 fbc4 	bl	8013f00 <tVZFilter_init>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 8000778:	4bb4      	ldr	r3, [pc, #720]	; (8000a4c <audioInit+0x764>)
 800077a:	9f00      	ldr	r7, [sp, #0]
 800077c:	eeb0 0a4a 	vmov.f32	s0, s20
 8000780:	4622      	mov	r2, r4
 8000782:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8000a50 <audioInit+0x768>
 8000786:	2105      	movs	r1, #5
 8000788:	1998      	adds	r0, r3, r6
 800078a:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 800078e:	eddf 8ab1 	vldr	s17, [pc, #708]	; 8000a54 <audioInit+0x76c>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 8000792:	f013 fbb5 	bl	8013f00 <tVZFilter_init>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000796:	4628      	mov	r0, r5
 8000798:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 800079c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80007a0:	4623      	mov	r3, r4
 80007a2:	eef0 0a4a 	vmov.f32	s1, s20
 80007a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007aa:	eeb0 0a69 	vmov.f32	s0, s19
 80007ae:	49aa      	ldr	r1, [pc, #680]	; (8000a58 <audioInit+0x770>)
 80007b0:	f012 fe50 	bl	8013454 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80007b4:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
 80007b6:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80007b8:	eeb0 0a68 	vmov.f32	s0, s17
 80007bc:	f012 ff00 	bl	80135c0 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
 80007c0:	42af      	cmp	r7, r5
 80007c2:	d1e8      	bne.n	8000796 <audioInit+0x4ae>
 80007c4:	4ba5      	ldr	r3, [pc, #660]	; (8000a5c <audioInit+0x774>)
 80007c6:	4635      	mov	r5, r6
		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
 80007c8:	ed9f baa5 	vldr	s22, [pc, #660]	; 8000a60 <audioInit+0x778>
 80007cc:	eb03 0806 	add.w	r8, r3, r6
 80007d0:	4ba4      	ldr	r3, [pc, #656]	; (8000a64 <audioInit+0x77c>)
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 80007d2:	eddf 9aa5 	vldr	s19, [pc, #660]	; 8000a68 <audioInit+0x780>
 80007d6:	199f      	adds	r7, r3, r6
 80007d8:	f106 0320 	add.w	r3, r6, #32
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
			tCompressor_init(&comp[i][v], &leaf);
			//tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &mediumPool);
 80007dc:	eddf aaa3 	vldr	s21, [pc, #652]	; 8000a6c <audioInit+0x784>
			tCycle_init(&mod2[i][v], &leaf);
			tCycle_setFreq(&mod1[i][v], 0.2f);
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 80007e0:	eddf 8aa3 	vldr	s17, [pc, #652]	; 8000a70 <audioInit+0x788>
 80007e4:	e9cd b602 	strd	fp, r6, [sp, #8]
 80007e8:	469b      	mov	fp, r3
			tCrusher_init(&bc[i][v],&leaf);
 80007ea:	4640      	mov	r0, r8
 80007ec:	4621      	mov	r1, r4
 80007ee:	f012 fcff 	bl	80131f0 <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
 80007f2:	4638      	mov	r0, r7
 80007f4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80007f8:	4621      	mov	r1, r4
 80007fa:	f013 f94f 	bl	8013a9c <tHighpass_init>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 80007fe:	4b9d      	ldr	r3, [pc, #628]	; (8000a74 <audioInit+0x78c>)
 8000800:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8000804:	4621      	mov	r1, r4
 8000806:	195e      	adds	r6, r3, r5
 8000808:	4b9b      	ldr	r3, [pc, #620]	; (8000a78 <audioInit+0x790>)
		for (int i = 0; i < NUM_EFFECT; i++)
 800080a:	f108 0808 	add.w	r8, r8, #8
 800080e:	3708      	adds	r7, #8
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 8000810:	1958      	adds	r0, r3, r5
 8000812:	f013 f943 	bl	8013a9c <tHighpass_init>
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
 8000816:	4b99      	ldr	r3, [pc, #612]	; (8000a7c <audioInit+0x794>)
 8000818:	eef0 0a4b 	vmov.f32	s1, s22
 800081c:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8000a80 <audioInit+0x798>
 8000820:	eb03 0a05 	add.w	sl, r3, r5
 8000824:	4b97      	ldr	r3, [pc, #604]	; (8000a84 <audioInit+0x79c>)
 8000826:	4622      	mov	r2, r4
 8000828:	2106      	movs	r1, #6
 800082a:	eb03 0905 	add.w	r9, r3, r5
 800082e:	4630      	mov	r0, r6
 8000830:	f013 fb66 	bl	8013f00 <tVZFilter_init>
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
 8000834:	4650      	mov	r0, sl
 8000836:	eef0 0a4b 	vmov.f32	s1, s22
 800083a:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8000a44 <audioInit+0x75c>
 800083e:	4622      	mov	r2, r4
 8000840:	2107      	movs	r1, #7
 8000842:	f013 fb5d 	bl	8013f00 <tVZFilter_init>
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
 8000846:	eddf 0a82 	vldr	s1, [pc, #520]	; 8000a50 <audioInit+0x768>
 800084a:	4622      	mov	r2, r4
 800084c:	2105      	movs	r1, #5
 800084e:	4648      	mov	r0, r9
 8000850:	eeb0 0a4a 	vmov.f32	s0, s20
 8000854:	f013 fb54 	bl	8013f00 <tVZFilter_init>
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8000858:	eeb0 0a69 	vmov.f32	s0, s19
 800085c:	4630      	mov	r0, r6
 800085e:	f013 fce9 	bl	8014234 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8000862:	4650      	mov	r0, sl
 8000864:	eeb0 0a69 	vmov.f32	s0, s19
 8000868:	f013 fce4 	bl	8014234 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
 800086c:	eeb0 0a69 	vmov.f32	s0, s19
 8000870:	4648      	mov	r0, r9
 8000872:	f013 fcdf 	bl	8014234 <tVZFilter_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
 8000876:	4b84      	ldr	r3, [pc, #528]	; (8000a88 <audioInit+0x7a0>)
 8000878:	4621      	mov	r1, r4
 800087a:	1958      	adds	r0, r3, r5
 800087c:	f012 fd40 	bl	8013300 <tCompressor_init>
			tLinearDelay_initToPool(&delay1[i][v], 4000.0f, 4096, &mediumPool);
 8000880:	4b82      	ldr	r3, [pc, #520]	; (8000a8c <audioInit+0x7a4>)
 8000882:	eeb0 0a6a 	vmov.f32	s0, s21
 8000886:	4a82      	ldr	r2, [pc, #520]	; (8000a90 <audioInit+0x7a8>)
 8000888:	1958      	adds	r0, r3, r5
 800088a:	4b82      	ldr	r3, [pc, #520]	; (8000a94 <audioInit+0x7ac>)
 800088c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000890:	eb03 0a05 	add.w	sl, r3, r5
 8000894:	f012 fabc 	bl	8012e10 <tLinearDelay_initToPool>
			tLinearDelay_initToPool(&delay2[i][v], 4000.0f, 4096, &mediumPool);
 8000898:	4b7f      	ldr	r3, [pc, #508]	; (8000a98 <audioInit+0x7b0>)
 800089a:	eeb0 0a6a 	vmov.f32	s0, s21
 800089e:	4a7c      	ldr	r2, [pc, #496]	; (8000a90 <audioInit+0x7a8>)
 80008a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008a4:	1958      	adds	r0, r3, r5
 80008a6:	4b7d      	ldr	r3, [pc, #500]	; (8000a9c <audioInit+0x7b4>)
 80008a8:	eb03 0905 	add.w	r9, r3, r5
 80008ac:	f012 fab0 	bl	8012e10 <tLinearDelay_initToPool>
			tCycle_init(&mod1[i][v], &leaf);
 80008b0:	4621      	mov	r1, r4
 80008b2:	4650      	mov	r0, sl
 80008b4:	f014 feca 	bl	801564c <tCycle_init>
			tCycle_init(&mod2[i][v], &leaf);
 80008b8:	4621      	mov	r1, r4
 80008ba:	4648      	mov	r0, r9
 80008bc:	f014 fec6 	bl	801564c <tCycle_init>
			tCycle_setFreq(&mod1[i][v], 0.2f);
 80008c0:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8000aa0 <audioInit+0x7b8>
 80008c4:	4650      	mov	r0, sl
 80008c6:	f014 ff03 	bl	80156d0 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
 80008ca:	4648      	mov	r0, r9
 80008cc:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8000aa4 <audioInit+0x7bc>
 80008d0:	f014 fefe 	bl	80156d0 <tCycle_setFreq>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 80008d4:	4b74      	ldr	r3, [pc, #464]	; (8000aa8 <audioInit+0x7c0>)
 80008d6:	eef0 0a49 	vmov.f32	s1, s18
 80008da:	4622      	mov	r2, r4
 80008dc:	1958      	adds	r0, r3, r5
 80008de:	eeb0 0a68 	vmov.f32	s0, s17
 80008e2:	2101      	movs	r1, #1
 80008e4:	f012 ffe0 	bl	80138a8 <tSVF_init>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 80008e8:	4b70      	ldr	r3, [pc, #448]	; (8000aac <audioInit+0x7c4>)
 80008ea:	eef0 0a49 	vmov.f32	s1, s18
 80008ee:	4622      	mov	r2, r4
 80008f0:	1958      	adds	r0, r3, r5
 80008f2:	eeb0 0a68 	vmov.f32	s0, s17
 80008f6:	2100      	movs	r1, #0
 80008f8:	f012 ffd6 	bl	80138a8 <tSVF_init>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 80008fc:	4b6c      	ldr	r3, [pc, #432]	; (8000ab0 <audioInit+0x7c8>)
 80008fe:	4622      	mov	r2, r4
 8000900:	eef0 0a49 	vmov.f32	s1, s18
 8000904:	1958      	adds	r0, r3, r5
 8000906:	eeb0 0a68 	vmov.f32	s0, s17
 800090a:	2102      	movs	r1, #2
 800090c:	f012 ffcc 	bl	80138a8 <tSVF_init>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
 8000910:	4b68      	ldr	r3, [pc, #416]	; (8000ab4 <audioInit+0x7cc>)
 8000912:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000916:	4621      	mov	r1, r4
 8000918:	1958      	adds	r0, r3, r5
 800091a:	eeb0 0a68 	vmov.f32	s0, s17
 800091e:	f013 fdcb 	bl	80144b8 <tDiodeFilter_init>
			tVZFilter_init(&FXVZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
 8000922:	4b65      	ldr	r3, [pc, #404]	; (8000ab8 <audioInit+0x7d0>)
 8000924:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000928:	4622      	mov	r2, r4
 800092a:	1958      	adds	r0, r3, r5
 800092c:	eeb0 0a68 	vmov.f32	s0, s17
 8000930:	2105      	movs	r1, #5
 8000932:	f013 fae5 	bl	8013f00 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
 8000936:	4b61      	ldr	r3, [pc, #388]	; (8000abc <audioInit+0x7d4>)
 8000938:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800093c:	4622      	mov	r2, r4
 800093e:	1958      	adds	r0, r3, r5
 8000940:	eeb0 0a68 	vmov.f32	s0, s17
 8000944:	2106      	movs	r1, #6
 8000946:	f013 fadb 	bl	8013f00 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
 800094a:	4b5d      	ldr	r3, [pc, #372]	; (8000ac0 <audioInit+0x7d8>)
 800094c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000950:	4622      	mov	r2, r4
 8000952:	1958      	adds	r0, r3, r5
 8000954:	eeb0 0a68 	vmov.f32	s0, s17
 8000958:	2107      	movs	r1, #7
 800095a:	f013 fad1 	bl	8013f00 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 800095e:	4b59      	ldr	r3, [pc, #356]	; (8000ac4 <audioInit+0x7dc>)
 8000960:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000964:	4622      	mov	r2, r4
 8000966:	1958      	adds	r0, r3, r5
 8000968:	eeb0 0a68 	vmov.f32	s0, s17
 800096c:	2104      	movs	r1, #4
 800096e:	f013 fac7 	bl	8013f00 <tVZFilter_init>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 8000972:	4b55      	ldr	r3, [pc, #340]	; (8000ac8 <audioInit+0x7e0>)
 8000974:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000978:	4621      	mov	r1, r4
 800097a:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_EFFECT; i++)
 800097c:	3508      	adds	r5, #8
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 800097e:	eeb0 0a68 	vmov.f32	s0, s17
 8000982:	f014 f92d 	bl	8014be0 <tLadderFilter_init>
		for (int i = 0; i < NUM_EFFECT; i++)
 8000986:	45ab      	cmp	fp, r5
 8000988:	f47f af2f 	bne.w	80007ea <audioInit+0x502>
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.01f, &leaf);
 800098c:	eddf 8a4f 	vldr	s17, [pc, #316]	; 8000acc <audioInit+0x7e4>
 8000990:	e9dd b602 	ldrd	fp, r6, [sp, #8]
 8000994:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
 8000998:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 800099a:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.01f, &leaf);
 800099c:	eef0 0a48 	vmov.f32	s1, s16
 80009a0:	4621      	mov	r1, r4
 80009a2:	eeb0 0a68 	vmov.f32	s0, s17
 80009a6:	f012 fefd 	bl	80137a4 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 80009aa:	455d      	cmp	r5, fp
 80009ac:	d1f4      	bne.n	8000998 <audioInit+0x6b0>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80009ae:	9b00      	ldr	r3, [sp, #0]
		}

		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 80009b0:	2102      	movs	r1, #2
 80009b2:	2200      	movs	r2, #0
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80009b4:	f10b 0b04 	add.w	fp, fp, #4
 80009b8:	3304      	adds	r3, #4
 80009ba:	9300      	str	r3, [sp, #0]
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 80009bc:	4b44      	ldr	r3, [pc, #272]	; (8000ad0 <audioInit+0x7e8>)
 80009be:	1998      	adds	r0, r3, r6
 80009c0:	4623      	mov	r3, r4
 80009c2:	f012 fb17 	bl	8012ff4 <tOversampler_init>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 80009c6:	4b43      	ldr	r3, [pc, #268]	; (8000ad4 <audioInit+0x7ec>)
 80009c8:	4622      	mov	r2, r4
 80009ca:	eddf 0a43 	vldr	s1, [pc, #268]	; 8000ad8 <audioInit+0x7f0>
 80009ce:	1998      	adds	r0, r3, r6
 80009d0:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8000adc <audioInit+0x7f4>
 80009d4:	2101      	movs	r1, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80009d6:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 80009d8:	f012 ff66 	bl	80138a8 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80009dc:	9b01      	ldr	r3, [sp, #4]
 80009de:	b99b      	cbnz	r3, 8000a08 <audioInit+0x720>
 80009e0:	2301      	movs	r3, #1
 80009e2:	9301      	str	r3, [sp, #4]
 80009e4:	e559      	b.n	800049a <audioInit+0x1b2>
		if (boardNumber == 0)
 80009e6:	b14b      	cbz	r3, 80009fc <audioInit+0x714>
		else if (boardNumber == 1)
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d023      	beq.n	8000a34 <audioInit+0x74c>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
 80009ec:	3b01      	subs	r3, #1
 80009ee:	4a3c      	ldr	r2, [pc, #240]	; (8000ae0 <audioInit+0x7f8>)
			numStringsThisBoard = 2;
 80009f0:	493c      	ldr	r1, [pc, #240]	; (8000ae4 <audioInit+0x7fc>)
 80009f2:	2002      	movs	r0, #2
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
 80009f4:	005b      	lsls	r3, r3, #1
			numStringsThisBoard = 2;
 80009f6:	7008      	strb	r0, [r1, #0]
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
 80009f8:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 2;
 80009fa:	e4f1      	b.n	80003e0 <audioInit+0xf8>
			firstString = 0;
 80009fc:	4838      	ldr	r0, [pc, #224]	; (8000ae0 <audioInit+0x7f8>)
			numStringsThisBoard = 1;
 80009fe:	2101      	movs	r1, #1
 8000a00:	4a38      	ldr	r2, [pc, #224]	; (8000ae4 <audioInit+0x7fc>)
			firstString = 0;
 8000a02:	6003      	str	r3, [r0, #0]
			numStringsThisBoard = 1;
 8000a04:	7011      	strb	r1, [r2, #0]
 8000a06:	e4eb      	b.n	80003e0 <audioInit+0xf8>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{
		audioOutBuffer[i] = 0;
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4836      	ldr	r0, [pc, #216]	; (8000ae8 <audioInit+0x800>)
 8000a0e:	f019 fc1f 	bl	801a250 <memset>
	}

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8000a12:	2220      	movs	r2, #32
 8000a14:	4934      	ldr	r1, [pc, #208]	; (8000ae8 <audioInit+0x800>)
 8000a16:	ee1c 0a10 	vmov	r0, s24
 8000a1a:	f00b fee9 	bl	800c7f0 <HAL_SAI_Transmit_DMA>
 8000a1e:	4b33      	ldr	r3, [pc, #204]	; (8000aec <audioInit+0x804>)
 8000a20:	4602      	mov	r2, r0
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready



	HAL_Delay(1);
 8000a22:	9801      	ldr	r0, [sp, #4]
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8000a24:	701a      	strb	r2, [r3, #0]

}
 8000a26:	b005      	add	sp, #20
 8000a28:	ecbd 8b0a 	vpop	{d8-d12}
 8000a2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
 8000a30:	f006 be6a 	b.w	8007708 <HAL_Delay>
			firstString = 1;
 8000a34:	492a      	ldr	r1, [pc, #168]	; (8000ae0 <audioInit+0x7f8>)
			numStringsThisBoard = 1;
 8000a36:	4a2b      	ldr	r2, [pc, #172]	; (8000ae4 <audioInit+0x7fc>)
			firstString = 1;
 8000a38:	600b      	str	r3, [r1, #0]
			numStringsThisBoard = 1;
 8000a3a:	7013      	strb	r3, [r2, #0]
 8000a3c:	e4d0      	b.n	80003e0 <audioInit+0xf8>
 8000a3e:	bf00      	nop
 8000a40:	20004898 	.word	0x20004898
 8000a44:	463b8000 	.word	0x463b8000
 8000a48:	3dcccccd 	.word	0x3dcccccd
 8000a4c:	20004878 	.word	0x20004878
 8000a50:	3ff33333 	.word	0x3ff33333
 8000a54:	3f7fffac 	.word	0x3f7fffac
 8000a58:	200003e0 	.word	0x200003e0
 8000a5c:	2000033c 	.word	0x2000033c
 8000a60:	42000000 	.word	0x42000000
 8000a64:	200003a0 	.word	0x200003a0
 8000a68:	47bb8000 	.word	0x47bb8000
 8000a6c:	457a0000 	.word	0x457a0000
 8000a70:	44fa0000 	.word	0x44fa0000
 8000a74:	20004a98 	.word	0x20004a98
 8000a78:	200003c0 	.word	0x200003c0
 8000a7c:	20004ab8 	.word	0x20004ab8
 8000a80:	42a00000 	.word	0x42a00000
 8000a84:	2000035c 	.word	0x2000035c
 8000a88:	20000380 	.word	0x20000380
 8000a8c:	200043e4 	.word	0x200043e4
 8000a90:	20004824 	.word	0x20004824
 8000a94:	20004828 	.word	0x20004828
 8000a98:	20004404 	.word	0x20004404
 8000a9c:	20004848 	.word	0x20004848
 8000aa0:	3e4ccccd 	.word	0x3e4ccccd
 8000aa4:	3e638e39 	.word	0x3e638e39
 8000aa8:	200002ac 	.word	0x200002ac
 8000aac:	2000028c 	.word	0x2000028c
 8000ab0:	2000024c 	.word	0x2000024c
 8000ab4:	2000026c 	.word	0x2000026c
 8000ab8:	2000022c 	.word	0x2000022c
 8000abc:	2000020c 	.word	0x2000020c
 8000ac0:	200001ec 	.word	0x200001ec
 8000ac4:	200001cc 	.word	0x200001cc
 8000ac8:	200001ac 	.word	0x200001ac
 8000acc:	00000000 	.word	0x00000000
 8000ad0:	200048a4 	.word	0x200048a4
 8000ad4:	20004494 	.word	0x20004494
 8000ad8:	3e99999a 	.word	0x3e99999a
 8000adc:	46947000 	.word	0x46947000
 8000ae0:	200044a4 	.word	0x200044a4
 8000ae4:	20000066 	.word	0x20000066
 8000ae8:	30000000 	.word	0x30000000
 8000aec:	20012f24 	.word	0x20012f24

08000af0 <updateStateFromSPIMessage>:
const int syncMap[3] = {2, 0, 1};


void updateStateFromSPIMessage(uint8_t offset)
{
	int modeBit = SPI_LEVERS[24 + offset];
 8000af0:	4a23      	ldr	r2, [pc, #140]	; (8000b80 <updateStateFromSPIMessage+0x90>)

	neck = (modeBit >> 6) & 1;
	dualSlider = (modeBit >> 5) & 1;

	edit = (modeBit >> 4) & 1;
	voice = SPI_LEVERS[25 + offset];
 8000af2:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8000bb0 <updateStateFromSPIMessage+0xc0>
	int modeBit = SPI_LEVERS[24 + offset];
 8000af6:	1811      	adds	r1, r2, r0
{
 8000af8:	b4f0      	push	{r4, r5, r6, r7}
	int modeBit = SPI_LEVERS[24 + offset];
 8000afa:	7e0b      	ldrb	r3, [r1, #24]
	voice = SPI_LEVERS[25 + offset];
 8000afc:	7e49      	ldrb	r1, [r1, #25]
	neck = (modeBit >> 6) & 1;
 8000afe:	4f21      	ldr	r7, [pc, #132]	; (8000b84 <updateStateFromSPIMessage+0x94>)
	voice = SPI_LEVERS[25 + offset];
 8000b00:	f8cc 1000 	str.w	r1, [ip]
	neck = (modeBit >> 6) & 1;
 8000b04:	f3c3 1c80 	ubfx	ip, r3, #6, #1
	dualSlider = (modeBit >> 5) & 1;
 8000b08:	4e1f      	ldr	r6, [pc, #124]	; (8000b88 <updateStateFromSPIMessage+0x98>)
	neck = (modeBit >> 6) & 1;
 8000b0a:	f8c7 c000 	str.w	ip, [r7]
	dualSlider = (modeBit >> 5) & 1;
 8000b0e:	f3c3 1740 	ubfx	r7, r3, #5, #1
	edit = (modeBit >> 4) & 1;
 8000b12:	4d1e      	ldr	r5, [pc, #120]	; (8000b8c <updateStateFromSPIMessage+0x9c>)

	if (voice != prevVoice)
 8000b14:	4c1e      	ldr	r4, [pc, #120]	; (8000b90 <updateStateFromSPIMessage+0xa0>)
	dualSlider = (modeBit >> 5) & 1;
 8000b16:	6037      	str	r7, [r6, #0]
	edit = (modeBit >> 4) & 1;
 8000b18:	f3c3 1600 	ubfx	r6, r3, #4, #1
 8000b1c:	602e      	str	r6, [r5, #0]
	if (voice != prevVoice)
 8000b1e:	6825      	ldr	r5, [r4, #0]
 8000b20:	42a9      	cmp	r1, r5
 8000b22:	d004      	beq.n	8000b2e <updateStateFromSPIMessage+0x3e>
	{
		presetWaitingToLoad = 1;
 8000b24:	4d1b      	ldr	r5, [pc, #108]	; (8000b94 <updateStateFromSPIMessage+0xa4>)
 8000b26:	2601      	movs	r6, #1
 8000b28:	602e      	str	r6, [r5, #0]
		presetNumberToLoad = voice;
 8000b2a:	4d1b      	ldr	r5, [pc, #108]	; (8000b98 <updateStateFromSPIMessage+0xa8>)
 8000b2c:	7029      	strb	r1, [r5, #0]

	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
	//octaveIndex = (modeBit & 15);
	//octave = powf(2.0f,((int32_t) (modeBit & 3) - 1 ));

	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000b2e:	4410      	add	r0, r2
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000b30:	f003 030f 	and.w	r3, r3, #15
 8000b34:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000b38:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000b9c <updateStateFromSPIMessage+0xac>
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000b3c:	f890 c01a 	ldrb.w	ip, [r0, #26]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000b40:	3b05      	subs	r3, #5
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000b42:	7ec2      	ldrb	r2, [r0, #27]
 8000b44:	4816      	ldr	r0, [pc, #88]	; (8000ba0 <updateStateFromSPIMessage+0xb0>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000b46:	ee07 3a90 	vmov	s15, r3
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000b4a:	eb02 220c 	add.w	r2, r2, ip, lsl #8
	prevVoice = voice;
 8000b4e:	6021      	str	r1, [r4, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000b50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b54:	4c13      	ldr	r4, [pc, #76]	; (8000ba4 <updateStateFromSPIMessage+0xb4>)
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000b56:	b292      	uxth	r2, r2
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000b58:	4913      	ldr	r1, [pc, #76]	; (8000ba8 <updateStateFromSPIMessage+0xb8>)
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 8000b5a:	8002      	strh	r2, [r0, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000b5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000b60:	8803      	ldrh	r3, [r0, #0]
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <updateStateFromSPIMessage+0xbc>)
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000b64:	b29b      	uxth	r3, r3
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 8000b66:	edc4 7a00 	vstr	s15, [r4]
	volumePedal = volumePedalInt * 0.0002442002442f;
 8000b6a:	ee00 3a10 	vmov	s0, r3
 8000b6e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8000b72:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000b76:	ed81 0a00 	vstr	s0, [r1]
}
 8000b7a:	bcf0      	pop	{r4, r5, r6, r7}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
 8000b7c:	f012 be3e 	b.w	80137fc <tExpSmooth_setDest>
 8000b80:	30000100 	.word	0x30000100
 8000b84:	20004868 	.word	0x20004868
 8000b88:	20004434 	.word	0x20004434
 8000b8c:	20004438 	.word	0x20004438
 8000b90:	200049cc 	.word	0x200049cc
 8000b94:	20016c88 	.word	0x20016c88
 8000b98:	20000090 	.word	0x20000090
 8000b9c:	39800801 	.word	0x39800801
 8000ba0:	20012f50 	.word	0x20012f50
 8000ba4:	200048a0 	.word	0x200048a0
 8000ba8:	20012f4c 	.word	0x20012f4c
 8000bac:	20012f54 	.word	0x20012f54
 8000bb0:	20012f44 	.word	0x20012f44

08000bb4 <oscillator_tick>:
uint32_t timeApprox = 0;
uint32_t timeTrue = 0;
volatile float MIDIerror = 0.0f;

void __ATTR_ITCMRAM oscillator_tick(float note, int string)
{
 8000bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //if (loadingTables || !enabled) return;
	interruptChecker = 0;
 8000bb8:	496f      	ldr	r1, [pc, #444]	; (8000d78 <oscillator_tick+0x1c4>)
 8000bba:	2500      	movs	r5, #0
	uint32_t tempCount1 = DWT->CYCCNT;
	for (int i = 0; i < NUM_OSC; i++)
	{
		oscOuts[0][i][string] = 0.0f;
 8000bbc:	4a6f      	ldr	r2, [pc, #444]	; (8000d7c <oscillator_tick+0x1c8>)
{
 8000bbe:	ed2d 8b0c 	vpush	{d8-d13}
	interruptChecker = 0;
 8000bc2:	700d      	strb	r5, [r1, #0]
{
 8000bc4:	b089      	sub	sp, #36	; 0x24
	uint32_t tempCount1 = DWT->CYCCNT;
 8000bc6:	496e      	ldr	r1, [pc, #440]	; (8000d80 <oscillator_tick+0x1cc>)
		oscOuts[0][i][string] = 0.0f;
 8000bc8:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000bcc:	ed9f 9a6d 	vldr	s18, [pc, #436]	; 8000d84 <oscillator_tick+0x1d0>
	uint32_t tempCount1 = DWT->CYCCNT;
 8000bd0:	684b      	ldr	r3, [r1, #4]
		oscOuts[0][i][string] = 0.0f;
 8000bd2:	ed86 9a00 	vstr	s18, [r6]
	uint32_t tempCount1 = DWT->CYCCNT;
 8000bd6:	9305      	str	r3, [sp, #20]
		oscOuts[1][i][string] = 0.0f;
	}
	//for (int osc = 0; osc < 1; osc++)
	for (int osc = 0; osc < oscToTick; osc++)
 8000bd8:	4b6b      	ldr	r3, [pc, #428]	; (8000d88 <oscillator_tick+0x1d4>)
		oscOuts[1][i][string] = 0.0f;
 8000bda:	ed86 9a06 	vstr	s18, [r6, #24]
	for (int osc = 0; osc < oscToTick; osc++)
 8000bde:	781a      	ldrb	r2, [r3, #0]
		oscOuts[0][i][string] = 0.0f;
 8000be0:	ed86 9a02 	vstr	s18, [r6, #8]
		oscOuts[1][i][string] = 0.0f;
 8000be4:	ed86 9a08 	vstr	s18, [r6, #32]
		oscOuts[0][i][string] = 0.0f;
 8000be8:	ed86 9a04 	vstr	s18, [r6, #16]
		oscOuts[1][i][string] = 0.0f;
 8000bec:	ed86 9a0a 	vstr	s18, [r6, #40]	; 0x28
	for (int osc = 0; osc < oscToTick; osc++)
 8000bf0:	2a00      	cmp	r2, #0
 8000bf2:	f000 80b6 	beq.w	8000d62 <oscillator_tick+0x1ae>
 8000bf6:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8000bfa:	4a64      	ldr	r2, [pc, #400]	; (8000d8c <oscillator_tick+0x1d8>)
 8000bfc:	4c64      	ldr	r4, [pc, #400]	; (8000d90 <oscillator_tick+0x1dc>)
 8000bfe:	eef0 9a40 	vmov.f32	s19, s0
 8000c02:	eb02 0b0a 	add.w	fp, r2, sl
 8000c06:	4a63      	ldr	r2, [pc, #396]	; (8000d94 <oscillator_tick+0x1e0>)
 8000c08:	4f63      	ldr	r7, [pc, #396]	; (8000d98 <oscillator_tick+0x1e4>)
 8000c0a:	4681      	mov	r9, r0
 8000c0c:	eb02 030a 	add.w	r3, r2, sl
		float freqOffset= oscParams[OscFreq].realVal[string];
		float shape = oscParams[OscShape].realVal[string];
		float amp = oscParams[OscAmp].realVal[string];
		float filterSend = oscParams[OscFilterSend].realVal[string];
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
		float freqToSmooth = (note + (fine*0.01f));
 8000c10:	ed9f ca62 	vldr	s24, [pc, #392]	; 8000d9c <oscillator_tick+0x1e8>
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);

		uint32_t tempCountappr = DWT->CYCCNT;
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8000c14:	eddf ba62 	vldr	s23, [pc, #392]	; 8000da0 <oscillator_tick+0x1ec>
 8000c18:	4454      	add	r4, sl
 8000c1a:	9301      	str	r3, [sp, #4]
 8000c1c:	4457      	add	r7, sl
 8000c1e:	4b61      	ldr	r3, [pc, #388]	; (8000da4 <oscillator_tick+0x1f0>)
 8000c20:	ed9f ba61 	vldr	s22, [pc, #388]	; 8000da8 <oscillator_tick+0x1f4>
 8000c24:	eddf aa61 	vldr	s21, [pc, #388]	; 8000dac <oscillator_tick+0x1f8>
 8000c28:	ed9f aa61 	vldr	s20, [pc, #388]	; 8000db0 <oscillator_tick+0x1fc>
 8000c2c:	9302      	str	r3, [sp, #8]
 8000c2e:	f8cd a010 	str.w	sl, [sp, #16]
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 8000c32:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000c36:	edd4 6ae9 	vldr	s13, [r4, #932]	; 0x3a4
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 8000c3a:	eeb0 0a69 	vmov.f32	s0, s19
		float freqToSmooth = (note + (fine*0.01f));
 8000c3e:	edd4 7ab8 	vldr	s15, [r4, #736]	; 0x2e0
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 8000c42:	4638      	mov	r0, r7
		uint32_t tempCountappr = DWT->CYCCNT;
 8000c44:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8000d80 <oscillator_tick+0x1cc>
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 8000c48:	eef4 6ac7 	vcmpe.f32	s13, s14
		float filterSend = oscParams[OscFilterSend].realVal[string];
 8000c4c:	edd4 8afe 	vldr	s17, [r4, #1016]	; 0x3f8
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 8000c50:	eea7 0a8c 	vfma.f32	s0, s15, s24
		float freqOffset= oscParams[OscFreq].realVal[string];
 8000c54:	ed94 dabf 	vldr	s26, [r4, #764]	; 0x2fc
		float amp = oscParams[OscAmp].realVal[string];
 8000c58:	edd4 cacd 	vldr	s25, [r4, #820]	; 0x334
		int tempIndexI = (int)tempIndexF;
		tempIndexF = tempIndexF -tempIndexI;

		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000c5c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 8000c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float shape = oscParams[OscShape].realVal[string];
 8000c64:	edd4 dac6 	vldr	s27, [r4, #792]	; 0x318
	for (int osc = 0; osc < oscToTick; osc++)
 8000c68:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
 8000c6c:	f106 0608 	add.w	r6, r6, #8
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 8000c70:	bfcc      	ite	gt
 8000c72:	2201      	movgt	r2, #1
 8000c74:	2200      	movle	r2, #0
 8000c76:	9203      	str	r2, [sp, #12]
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 8000c78:	f012 fdc0 	bl	80137fc <tExpSmooth_setDest>
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 8000c7c:	4638      	mov	r0, r7
		uint32_t tempCountappr = DWT->CYCCNT;
 8000c7e:	f8d8 a004 	ldr.w	sl, [r8, #4]
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 8000c82:	f012 fdbf 	bl	8013804 <tExpSmooth_tick>
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8000c86:	eeb0 1a6a 	vmov.f32	s2, s21
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 8000c8a:	eef0 0a40 	vmov.f32	s1, s0
	for (int osc = 0; osc < oscToTick; osc++)
 8000c8e:	3708      	adds	r7, #8
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8000c90:	eeb0 0a4a 	vmov.f32	s0, s20
 8000c94:	f014 fa14 	bl	80150c0 <LEAF_clip>
 8000c98:	eef0 7a4b 	vmov.f32	s15, s22
		timeApprox = DWT->CYCCNT - tempCountappr;

		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000c9c:	465b      	mov	r3, fp
		timeApprox = DWT->CYCCNT - tempCountappr;
 8000c9e:	4a45      	ldr	r2, [pc, #276]	; (8000db4 <oscillator_tick+0x200>)
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8000ca0:	4845      	ldr	r0, [pc, #276]	; (8000db8 <oscillator_tick+0x204>)

		float sample = 0.0f;


		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000ca2:	eef0 0a6d 	vmov.f32	s1, s27
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8000ca6:	eee0 7a2b 	vfma.f32	s15, s0, s23
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000caa:	edd3 5a00 	vldr	s11, [r3]
		timeApprox = DWT->CYCCNT - tempCountappr;
 8000cae:	f8d8 3004 	ldr.w	r3, [r8, #4]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000cb2:	eeb0 0a4d 	vmov.f32	s0, s26
		float sample = 0.0f;
 8000cb6:	ed8d 9a07 	vstr	s18, [sp, #28]
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000cba:	f10b 0b08 	add.w	fp, fp, #8
		timeApprox = DWT->CYCCNT - tempCountappr;
 8000cbe:	eba3 030a 	sub.w	r3, r3, sl
 8000cc2:	6013      	str	r3, [r2, #0]
		int tempIndexI = (int)tempIndexF;
 8000cc4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000cc8:	9a03      	ldr	r2, [sp, #12]
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000cca:	ee78 6a67 	vsub.f32	s13, s16, s15
		sourceValues[osc][string] = sample;

		//sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)

		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 8000cce:	ee38 8a68 	vsub.f32	s16, s16, s17
		int tempIndexI = (int)tempIndexF;
 8000cd2:	ee17 3a10 	vmov	r3, s14
		tempIndexF = tempIndexF -tempIndexI;
 8000cd6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000cda:	1c59      	adds	r1, r3, #1
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8000cdc:	f3c3 030e 	ubfx	r3, r3, #0, #15
		tempIndexF = tempIndexF -tempIndexI;
 8000ce0:	ee77 7ac6 	vsub.f32	s15, s15, s12
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8000ce4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000ce8:	f3c1 010e 	ubfx	r1, r1, #0, #15
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000cec:	ee76 6a86 	vadd.f32	s13, s13, s12
 8000cf0:	ed93 7a00 	vldr	s14, [r3]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000cf4:	eb00 0381 	add.w	r3, r0, r1, lsl #2
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000cf8:	9904      	ldr	r1, [sp, #16]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000cfa:	a807      	add	r0, sp, #28
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000cfc:	ed93 6a00 	vldr	s12, [r3]
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000d00:	4b2e      	ldr	r3, [pc, #184]	; (8000dbc <oscillator_tick+0x208>)
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000d02:	ee67 7a86 	vmul.f32	s15, s15, s12
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000d06:	440b      	add	r3, r1
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000d08:	4629      	mov	r1, r5
	for (int osc = 0; osc < oscToTick; osc++)
 8000d0a:	3501      	adds	r5, #1
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8000d0c:	eee6 7a87 	vfma.f32	s15, s13, s14
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000d10:	ed93 7a00 	vldr	s14, [r3]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000d14:	9b02      	ldr	r3, [sp, #8]
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8000d16:	ee27 7a25 	vmul.f32	s14, s14, s11
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8000d1a:	f853 8b04 	ldr.w	r8, [r3], #4
 8000d1e:	9302      	str	r3, [sp, #8]
 8000d20:	464b      	mov	r3, r9
 8000d22:	eea7 0a87 	vfma.f32	s0, s15, s14
 8000d26:	47c0      	blx	r8
		sample *= amp;
 8000d28:	eddd 7a07 	vldr	s15, [sp, #28]
		sourceValues[osc][string] = sample;
 8000d2c:	9b01      	ldr	r3, [sp, #4]
		sample *= amp;
 8000d2e:	ee6c 7aa7 	vmul.f32	s15, s25, s15
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 8000d32:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
		sourceValues[osc][string] = sample;
 8000d36:	461a      	mov	r2, r3
 8000d38:	3308      	adds	r3, #8
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 8000d3a:	ee67 8a28 	vmul.f32	s17, s14, s17
		sourceValues[osc][string] = sample;
 8000d3e:	9301      	str	r3, [sp, #4]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 8000d40:	ee27 7a87 	vmul.f32	s14, s15, s14
	for (int osc = 0; osc < oscToTick; osc++)
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <oscillator_tick+0x1d4>)
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 8000d46:	ee68 8aa7 	vmul.f32	s17, s17, s15
		sourceValues[osc][string] = sample;
 8000d4a:	edc2 7a00 	vstr	s15, [r2]
	for (int osc = 0; osc < oscToTick; osc++)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 8000d50:	ee28 8a07 	vmul.f32	s16, s16, s14
	for (int osc = 0; osc < oscToTick; osc++)
 8000d54:	42ab      	cmp	r3, r5
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 8000d56:	ed46 8a02 	vstr	s17, [r6, #-8]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 8000d5a:	ed86 8a04 	vstr	s16, [r6, #16]
	for (int osc = 0; osc < oscToTick; osc++)
 8000d5e:	f73f af68 	bgt.w	8000c32 <oscillator_tick+0x7e>
	}

	timeOsc = DWT->CYCCNT - tempCount1;
 8000d62:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <oscillator_tick+0x1cc>)
 8000d64:	9905      	ldr	r1, [sp, #20]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <oscillator_tick+0x20c>)
 8000d6a:	1a5b      	subs	r3, r3, r1
 8000d6c:	6013      	str	r3, [r2, #0]
}
 8000d6e:	b009      	add	sp, #36	; 0x24
 8000d70:	ecbd 8b0c 	vpop	{d8-d13}
 8000d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d78:	200151c5 	.word	0x200151c5
 8000d7c:	200048ac 	.word	0x200048ac
 8000d80:	e0001000 	.word	0xe0001000
 8000d84:	00000000 	.word	0x00000000
 8000d88:	2000007c 	.word	0x2000007c
 8000d8c:	200044ac 	.word	0x200044ac
 8000d90:	20015b84 	.word	0x20015b84
 8000d94:	20012d98 	.word	0x20012d98
 8000d98:	200049b0 	.word	0x200049b0
 8000d9c:	3c23d70a 	.word	0x3c23d70a
 8000da0:	42c80000 	.word	0x42c80000
 8000da4:	20004a8c 	.word	0x20004a8c
 8000da8:	46800000 	.word	0x46800000
 8000dac:	43480000 	.word	0x43480000
 8000db0:	c3480000 	.word	0xc3480000
 8000db4:	20012f00 	.word	0x20012f00
 8000db8:	24008020 	.word	0x24008020
 8000dbc:	20004540 	.word	0x20004540
 8000dc0:	20012f18 	.word	0x20012f18

08000dc4 <sawSquareTick>:


void __ATTR_ITCMRAM  sawSquareTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dc8:	4605      	mov	r5, r0
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8000dca:	4c1a      	ldr	r4, [pc, #104]	; (8000e34 <sawSquareTick+0x70>)
 8000dcc:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000dd0:	4617      	mov	r7, r2
 8000dd2:	4688      	mov	r8, r1
 8000dd4:	461e      	mov	r6, r3
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8000dd6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000dda:	ed2d 8b02 	vpush	{d8}
 8000dde:	eeb0 8a60 	vmov.f32	s16, s1
 8000de2:	b082      	sub	sp, #8
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8000de4:	9001      	str	r0, [sp, #4]
 8000de6:	f018 fdad 	bl	8019944 <tMBSawPulse_setFreq>
    tMBSawPulse_setShape(&sawPaired[v][string], shape);
 8000dea:	9801      	ldr	r0, [sp, #4]
 8000dec:	eeb0 0a48 	vmov.f32	s0, s16
 8000df0:	f018 fe0a 	bl	8019a08 <tMBSawPulse_setShape>
    if (sync)
 8000df4:	9801      	ldr	r0, [sp, #4]
 8000df6:	b977      	cbnz	r7, 8000e16 <sawSquareTick+0x52>
    {
    	tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);

    }
    *sample += tMBSawPulse_tick(&sawPaired[v][string]) * 2.f;
 8000df8:	f017 feb2 	bl	8018b60 <tMBSawPulse_tick>
 8000dfc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000e00:	edd5 7a00 	vldr	s15, [r5]
 8000e04:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000e08:	edc5 7a00 	vstr	s15, [r5]
}
 8000e0c:	b002      	add	sp, #8
 8000e0e:	ecbd 8b02 	vpop	{d8}
 8000e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8000e16:	4a08      	ldr	r2, [pc, #32]	; (8000e38 <sawSquareTick+0x74>)
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <sawSquareTick+0x78>)
 8000e1a:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8000e1e:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8000e22:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000e26:	ed96 0a00 	vldr	s0, [r6]
 8000e2a:	f018 fdbd 	bl	80199a8 <tMBSawPulse_sync>
 8000e2e:	9801      	ldr	r0, [sp, #4]
 8000e30:	e7e2      	b.n	8000df8 <sawSquareTick+0x34>
 8000e32:	bf00      	nop
 8000e34:	20004a34 	.word	0x20004a34
 8000e38:	0801c400 	.word	0x0801c400
 8000e3c:	20012d98 	.word	0x20012d98

08000e40 <sineTriTick>:

void __ATTR_ITCMRAM  sineTriTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e44:	4605      	mov	r5, r0
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 8000e46:	4c1a      	ldr	r4, [pc, #104]	; (8000eb0 <sineTriTick+0x70>)
 8000e48:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000e4c:	4617      	mov	r7, r2
 8000e4e:	4688      	mov	r8, r1
 8000e50:	461e      	mov	r6, r3
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 8000e52:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000e56:	ed2d 8b02 	vpush	{d8}
 8000e5a:	eeb0 8a60 	vmov.f32	s16, s1
 8000e5e:	b082      	sub	sp, #8
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 8000e60:	9001      	str	r0, [sp, #4]
 8000e62:	f017 fb31 	bl	80184c8 <tMBSineTri_setFreq>
    tMBSineTri_setShape(&sinePaired[v][string],shape);
 8000e66:	9801      	ldr	r0, [sp, #4]
 8000e68:	eeb0 0a48 	vmov.f32	s0, s16
 8000e6c:	f017 fb6c 	bl	8018548 <tMBSineTri_setShape>
    if (sync)
 8000e70:	9801      	ldr	r0, [sp, #4]
 8000e72:	b977      	cbnz	r7, 8000e92 <sineTriTick+0x52>
    {
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
    }
    *sample += tMBSineTri_tick(&sinePaired[v][string]) * 2.0f;
 8000e74:	f016 faf8 	bl	8017468 <tMBSineTri_tick>
 8000e78:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000e7c:	edd5 7a00 	vldr	s15, [r5]
 8000e80:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000e84:	edc5 7a00 	vstr	s15, [r5]
}
 8000e88:	b002      	add	sp, #8
 8000e8a:	ecbd 8b02 	vpop	{d8}
 8000e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8000e92:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <sineTriTick+0x74>)
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <sineTriTick+0x78>)
 8000e96:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8000e9a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8000e9e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000ea2:	ed96 0a00 	vldr	s0, [r6]
 8000ea6:	f017 fb1f 	bl	80184e8 <tMBSineTri_sync>
 8000eaa:	9801      	ldr	r0, [sp, #4]
 8000eac:	e7e2      	b.n	8000e74 <sineTriTick+0x34>
 8000eae:	bf00      	nop
 8000eb0:	20004af0 	.word	0x20004af0
 8000eb4:	0801c400 	.word	0x0801c400
 8000eb8:	20012d98 	.word	0x20012d98

08000ebc <sawTick>:

void __ATTR_ITCMRAM  sawTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tMBSaw_setFreq(&saw[v][string], freq);
 8000ec0:	4c14      	ldr	r4, [pc, #80]	; (8000f14 <sawTick+0x58>)
{
 8000ec2:	4605      	mov	r5, r0
    tMBSaw_setFreq(&saw[v][string], freq);
 8000ec4:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000ec8:	b082      	sub	sp, #8
 8000eca:	4617      	mov	r7, r2
 8000ecc:	4688      	mov	r8, r1
    tMBSaw_setFreq(&saw[v][string], freq);
 8000ece:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000ed2:	461e      	mov	r6, r3
    tMBSaw_setFreq(&saw[v][string], freq);
 8000ed4:	9001      	str	r0, [sp, #4]
 8000ed6:	f017 fdb9 	bl	8018a4c <tMBSaw_setFreq>
    if (sync)
 8000eda:	9801      	ldr	r0, [sp, #4]
 8000edc:	b967      	cbnz	r7, 8000ef8 <sawTick+0x3c>
	{
		tMBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBSaw_tick(&saw[v][string]) * 2.f;;
 8000ede:	f017 fb77 	bl	80185d0 <tMBSaw_tick>
 8000ee2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000ee6:	edd5 7a00 	vldr	s15, [r5]
 8000eea:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000eee:	edc5 7a00 	vstr	s15, [r5]
}
 8000ef2:	b002      	add	sp, #8
 8000ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <sawTick+0x5c>)
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <sawTick+0x60>)
 8000efc:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8000f00:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8000f04:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000f08:	ed96 0a00 	vldr	s0, [r6]
 8000f0c:	f017 fdae 	bl	8018a6c <tMBSaw_sync>
 8000f10:	9801      	ldr	r0, [sp, #4]
 8000f12:	e7e4      	b.n	8000ede <sawTick+0x22>
 8000f14:	20004a1c 	.word	0x20004a1c
 8000f18:	0801c400 	.word	0x0801c400
 8000f1c:	20012d98 	.word	0x20012d98

08000f20 <pulseTick>:

void __ATTR_ITCMRAM  pulseTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f24:	4605      	mov	r5, r0
    tMBPulse_setFreq(&pulse[v][string], freq);
 8000f26:	4c1a      	ldr	r4, [pc, #104]	; (8000f90 <pulseTick+0x70>)
 8000f28:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000f2c:	4617      	mov	r7, r2
 8000f2e:	4688      	mov	r8, r1
 8000f30:	461e      	mov	r6, r3
    tMBPulse_setFreq(&pulse[v][string], freq);
 8000f32:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000f36:	ed2d 8b02 	vpush	{d8}
 8000f3a:	eeb0 8a60 	vmov.f32	s16, s1
 8000f3e:	b082      	sub	sp, #8
    tMBPulse_setFreq(&pulse[v][string], freq);
 8000f40:	9001      	str	r0, [sp, #4]
 8000f42:	f015 f981 	bl	8016248 <tMBPulse_setFreq>
    tMBPulse_setWidth(&pulse[v][string], shape);
 8000f46:	9801      	ldr	r0, [sp, #4]
 8000f48:	eeb0 0a48 	vmov.f32	s0, s16
 8000f4c:	f015 f98c 	bl	8016268 <tMBPulse_setWidth>
    if (sync)
 8000f50:	9801      	ldr	r0, [sp, #4]
 8000f52:	b977      	cbnz	r7, 8000f72 <pulseTick+0x52>
	{
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBPulse_tick(&pulse[v][string]) * 2.f;;
 8000f54:	f014 fc20 	bl	8015798 <tMBPulse_tick>
 8000f58:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000f5c:	edd5 7a00 	vldr	s15, [r5]
 8000f60:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000f64:	edc5 7a00 	vstr	s15, [r5]
}
 8000f68:	b002      	add	sp, #8
 8000f6a:	ecbd 8b02 	vpop	{d8}
 8000f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <pulseTick+0x74>)
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <pulseTick+0x78>)
 8000f76:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8000f7a:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8000f7e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8000f82:	ed96 0a00 	vldr	s0, [r6]
 8000f86:	f015 f97d 	bl	8016284 <tMBPulse_sync>
 8000f8a:	9801      	ldr	r0, [sp, #4]
 8000f8c:	e7e2      	b.n	8000f54 <pulseTick+0x34>
 8000f8e:	bf00      	nop
 8000f90:	20004a00 	.word	0x20004a00
 8000f94:	0801c400 	.word	0x0801c400
 8000f98:	20012d98 	.word	0x20012d98

08000f9c <sineTick>:

void __ATTR_ITCMRAM  sineTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    tCycle_setFreq(&sine[v][string], freq);
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <sineTick+0x2c>)
 8000f9e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
 8000fa2:	b510      	push	{r4, lr}
 8000fa4:	4604      	mov	r4, r0
 8000fa6:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
 8000fa8:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8000fac:	9001      	str	r0, [sp, #4]
 8000fae:	f014 fb8f 	bl	80156d0 <tCycle_setFreq>
    *sample += tCycle_tick(&sine[v][string]);
 8000fb2:	9801      	ldr	r0, [sp, #4]
 8000fb4:	f014 fb66 	bl	8015684 <tCycle_tick>
 8000fb8:	edd4 7a00 	vldr	s15, [r4]
 8000fbc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8000fc0:	ed84 0a00 	vstr	s0, [r4]
}
 8000fc4:	b002      	add	sp, #8
 8000fc6:	bd10      	pop	{r4, pc}
 8000fc8:	20004ad8 	.word	0x20004ad8

08000fcc <triTick>:

void __ATTR_ITCMRAM  triTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8000fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fd0:	4605      	mov	r5, r0
    tMBTriangle_setFreq(&tri[v][string], freq);
 8000fd2:	4c1a      	ldr	r4, [pc, #104]	; (800103c <triTick+0x70>)
 8000fd4:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8000fd8:	4617      	mov	r7, r2
 8000fda:	4688      	mov	r8, r1
 8000fdc:	461e      	mov	r6, r3
    tMBTriangle_setFreq(&tri[v][string], freq);
 8000fde:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8000fe2:	ed2d 8b02 	vpush	{d8}
 8000fe6:	eeb0 8a60 	vmov.f32	s16, s1
 8000fea:	b082      	sub	sp, #8
    tMBTriangle_setFreq(&tri[v][string], freq);
 8000fec:	9001      	str	r0, [sp, #4]
 8000fee:	f016 f99d 	bl	801732c <tMBTriangle_setFreq>
    tMBTriangle_setWidth(&tri[v][string], shape);
 8000ff2:	9801      	ldr	r0, [sp, #4]
 8000ff4:	eeb0 0a48 	vmov.f32	s0, s16
 8000ff8:	f016 f9a8 	bl	801734c <tMBTriangle_setWidth>
    if (sync)
 8000ffc:	9801      	ldr	r0, [sp, #4]
 8000ffe:	b977      	cbnz	r7, 800101e <triTick+0x52>
	{
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBTriangle_tick(&tri[v][string]) * 2.0f;;
 8001000:	f015 f9b6 	bl	8016370 <tMBTriangle_tick>
 8001004:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001008:	edd5 7a00 	vldr	s15, [r5]
 800100c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001010:	edc5 7a00 	vstr	s15, [r5]
}
 8001014:	b002      	add	sp, #8
 8001016:	ecbd 8b02 	vpop	{d8}
 800101a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 800101e:	4a08      	ldr	r2, [pc, #32]	; (8001040 <triTick+0x74>)
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <triTick+0x78>)
 8001022:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8001026:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 800102a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 800102e:	ed96 0a00 	vldr	s0, [r6]
 8001032:	f016 f99d 	bl	8017370 <tMBTriangle_sync>
 8001036:	9801      	ldr	r0, [sp, #4]
 8001038:	e7e2      	b.n	8001000 <triTick+0x34>
 800103a:	bf00      	nop
 800103c:	20012f2c 	.word	0x20012f2c
 8001040:	0801c400 	.word	0x0801c400
 8001044:	20012d98 	.word	0x20012d98

08001048 <userTick>:
void __ATTR_ITCMRAM  userTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    //tWaveOscS_setFreq(&wave[v], freq);
    //tWaveOscS_setIndex(&wave[v], shape);
    //*sample += tWaveOscS_tick(&wave[v]);
}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <filter_tick>:

uint32_t timeFilt = 0;

float __ATTR_ITCMRAM filter_tick(float* samples, float note, int string)
{
	interruptChecker = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	4a72      	ldr	r2, [pc, #456]	; (8001218 <filter_tick+0x1cc>)
{
 8001050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tempCount1 = DWT->CYCCNT;
	float cutoff[2];
	uint8_t enabledFilt[2] = {0,0};
	for (int f = 0; f < filterToTick; f++)
 8001054:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8001244 <filter_tick+0x1f8>
{
 8001058:	4604      	mov	r4, r0
 800105a:	460d      	mov	r5, r1
 800105c:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
 8001060:	7013      	strb	r3, [r2, #0]
{
 8001062:	b086      	sub	sp, #24
	uint32_t tempCount1 = DWT->CYCCNT;
 8001064:	4a6d      	ldr	r2, [pc, #436]	; (800121c <filter_tick+0x1d0>)
 8001066:	6857      	ldr	r7, [r2, #4]
	uint8_t enabledFilt[2] = {0,0};
 8001068:	f8ad 300c 	strh.w	r3, [sp, #12]
	for (int f = 0; f < filterToTick; f++)
 800106c:	f898 3000 	ldrb.w	r3, [r8]
 8001070:	2b00      	cmp	r3, #0
 8001072:	f000 80bc 	beq.w	80011ee <filter_tick+0x1a2>
	{
		param* filtParams = &params[FILTER_PARAMS_OFFSET + f * FilterParamsNum];
		float enabled = filtParams[FilterEnabled].realVal[string];
 8001076:	4e6a      	ldr	r6, [pc, #424]	; (8001220 <filter_tick+0x1d4>)
 8001078:	f201 229b 	addw	r2, r1, #667	; 0x29b
		enabledFilt[f] = (enabled > 0.5f);
		if (!enabledFilt[f]) continue;
 800107c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
 8001080:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8001084:	eeb0 8a40 	vmov.f32	s16, s0
 8001088:	edd2 8a00 	vldr	s17, [r2]
		if (!enabledFilt[f]) continue;
 800108c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001094:	d87b      	bhi.n	800118e <filter_tick+0x142>
	for (int f = 0; f < filterToTick; f++)
 8001096:	2b01      	cmp	r3, #1
 8001098:	d93b      	bls.n	8001112 <filter_tick+0xc6>
		float enabled = filtParams[FilterEnabled].realVal[string];
 800109a:	f205 23c5 	addw	r3, r5, #709	; 0x2c5
		enabledFilt[f] = (enabled > 0.5f);
 800109e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
 80010a2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80010a6:	ed93 7a00 	vldr	s14, [r3]
		enabledFilt[f] = (enabled > 0.5f);
 80010aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	bfcc      	ite	gt
 80010b4:	2301      	movgt	r3, #1
 80010b6:	2300      	movle	r3, #0
 80010b8:	f88d 300d 	strb.w	r3, [sp, #13]
		if (!enabledFilt[f]) continue;
 80010bc:	d929      	bls.n	8001112 <filter_tick+0xc6>

		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
 80010be:	4b59      	ldr	r3, [pc, #356]	; (8001224 <filter_tick+0x1d8>)
			note = 0.0f; //is this necessary?
		}

		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);

		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 80010c0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010c4:	eddf 0a58 	vldr	s1, [pc, #352]	; 8001228 <filter_tick+0x1dc>
 80010c8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80010cc:	ed9f 1a57 	vldr	s2, [pc, #348]	; 800122c <filter_tick+0x1e0>
 80010d0:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001230 <filter_tick+0x1e4>
 80010d4:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 80010d8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 80010dc:	4b55      	ldr	r3, [pc, #340]	; (8001234 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 80010de:	ee77 7ae6 	vsub.f32	s15, s15, s13
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 80010e2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80010e6:	edd3 6a00 	vldr	s13, [r3]
 80010ea:	ee38 8a26 	vadd.f32	s16, s16, s13
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 80010ee:	eee8 7a07 	vfma.f32	s15, s16, s14
 80010f2:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80010f6:	f013 ffe3 	bl	80150c0 <LEAF_clip>
		//smoothing may not be necessary
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
 80010fa:	1cab      	adds	r3, r5, #2
 80010fc:	484e      	ldr	r0, [pc, #312]	; (8001238 <filter_tick+0x1ec>)
 80010fe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001102:	9001      	str	r0, [sp, #4]
 8001104:	f012 fb7a 	bl	80137fc <tExpSmooth_setDest>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8001108:	9801      	ldr	r0, [sp, #4]
 800110a:	f012 fb7b 	bl	8013804 <tExpSmooth_tick>
 800110e:	ed8d 0a05 	vstr	s0, [sp, #20]
	}

	float  sp = params[FilterSeriesParallelMix].realVal[string];

	if (enabledFilt[0])
 8001112:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001116:	f205 23ef 	addw	r3, r5, #751	; 0x2ef
		filterTick[0](&samples[0], 0, cutoff[0], string);
	}
	float sendToFilter2 = samples[0] * (1.0f - sp);
	samples[1] += sendToFilter2;
	//compute what gets sent to the second filter
	if (enabledFilt[1])
 800111a:	f89d 800d 	ldrb.w	r8, [sp, #13]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 800111e:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	if (enabledFilt[0])
 8001122:	eef4 8ae7 	vcmpe.f32	s17, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001126:	ed96 8a00 	vldr	s16, [r6]
	if (enabledFilt[0])
 800112a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112e:	dd07      	ble.n	8001140 <filter_tick+0xf4>
		filterTick[0](&samples[0], 0, cutoff[0], string);
 8001130:	4b42      	ldr	r3, [pc, #264]	; (800123c <filter_tick+0x1f0>)
 8001132:	462a      	mov	r2, r5
 8001134:	ed9d 0a04 	vldr	s0, [sp, #16]
 8001138:	2100      	movs	r1, #0
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4620      	mov	r0, r4
 800113e:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8001140:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
 8001144:	ed94 0a01 	vldr	s0, [r4, #4]
 8001148:	ed94 7a00 	vldr	s14, [r4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
 800114c:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
 8001150:	eea7 0a27 	vfma.f32	s0, s14, s15
 8001154:	ed84 0a01 	vstr	s0, [r4, #4]
	if (enabledFilt[1])
 8001158:	f1b8 0f00 	cmp.w	r8, #0
 800115c:	d009      	beq.n	8001172 <filter_tick+0x126>
	{
		filterTick[1](&samples[1], 1, cutoff[1], string);
 800115e:	4b37      	ldr	r3, [pc, #220]	; (800123c <filter_tick+0x1f0>)
 8001160:	462a      	mov	r2, r5
 8001162:	ed9d 0a05 	vldr	s0, [sp, #20]
 8001166:	2101      	movs	r1, #1
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	1d20      	adds	r0, r4, #4
 800116c:	4798      	blx	r3
	}

	timeFilt = DWT->CYCCNT - tempCount1;
	return samples[1] + (samples[0] * sp);
 800116e:	ed94 0a01 	vldr	s0, [r4, #4]
	timeFilt = DWT->CYCCNT - tempCount1;
 8001172:	4b2a      	ldr	r3, [pc, #168]	; (800121c <filter_tick+0x1d0>)
 8001174:	4a32      	ldr	r2, [pc, #200]	; (8001240 <filter_tick+0x1f4>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	1bdb      	subs	r3, r3, r7
 800117a:	6013      	str	r3, [r2, #0]
	return samples[1] + (samples[0] * sp);
 800117c:	edd4 7a00 	vldr	s15, [r4]
}
 8001180:	eea7 0a88 	vfma.f32	s0, s15, s16
 8001184:	b006      	add	sp, #24
 8001186:	ecbd 8b02 	vpop	{d8}
 800118a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
 800118e:	f606 2364 	addw	r3, r6, #2660	; 0xa64
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001192:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001196:	eddf 0a24 	vldr	s1, [pc, #144]	; 8001228 <filter_tick+0x1dc>
 800119a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800119e:	ed9f 1a23 	vldr	s2, [pc, #140]	; 800122c <filter_tick+0x1e0>
 80011a2:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001230 <filter_tick+0x1e4>
 80011a6:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 80011aa:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 80011b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 80011b4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80011b8:	ed93 7a00 	vldr	s14, [r3]
 80011bc:	ee38 7a07 	vadd.f32	s14, s16, s14
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 80011c0:	eee7 7a26 	vfma.f32	s15, s14, s13
 80011c4:	ee67 0aa0 	vmul.f32	s1, s15, s1
 80011c8:	f013 ff7a 	bl	80150c0 <LEAF_clip>
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
 80011cc:	481a      	ldr	r0, [pc, #104]	; (8001238 <filter_tick+0x1ec>)
 80011ce:	00ab      	lsls	r3, r5, #2
 80011d0:	4418      	add	r0, r3
 80011d2:	9001      	str	r0, [sp, #4]
 80011d4:	f012 fb12 	bl	80137fc <tExpSmooth_setDest>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 80011d8:	9801      	ldr	r0, [sp, #4]
 80011da:	f012 fb13 	bl	8013804 <tExpSmooth_tick>
	for (int f = 0; f < filterToTick; f++)
 80011de:	f898 3000 	ldrb.w	r3, [r8]
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 80011e2:	ed8d 0a04 	vstr	s0, [sp, #16]
	for (int f = 0; f < filterToTick; f++)
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	f63f af57 	bhi.w	800109a <filter_tick+0x4e>
 80011ec:	e791      	b.n	8001112 <filter_tick+0xc6>
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <filter_tick+0x1d4>)
 80011f0:	f201 25ef 	addw	r5, r1, #751	; 0x2ef
	float sendToFilter2 = samples[0] * (1.0f - sp);
 80011f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
 80011f8:	ed90 0a01 	vldr	s0, [r0, #4]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 80011fc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	samples[1] += sendToFilter2;
 8001200:	ed90 7a00 	vldr	s14, [r0]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001204:	ed93 8a00 	vldr	s16, [r3]
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8001208:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
 800120c:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001210:	ed80 0a01 	vstr	s0, [r0, #4]
	if (enabledFilt[1])
 8001214:	e7ad      	b.n	8001172 <filter_tick+0x126>
 8001216:	bf00      	nop
 8001218:	200151c5 	.word	0x200151c5
 800121c:	e0001000 	.word	0xe0001000
 8001220:	20015b84 	.word	0x20015b84
 8001224:	20016690 	.word	0x20016690
 8001228:	420fb824 	.word	0x420fb824
 800122c:	457ff000 	.word	0x457ff000
 8001230:	00000000 	.word	0x00000000
 8001234:	20000334 	.word	0x20000334
 8001238:	2000446c 	.word	0x2000446c
 800123c:	2000448c 	.word	0x2000448c
 8001240:	20012f08 	.word	0x20012f08
 8001244:	20000004 	.word	0x20000004

08001248 <lowpassTick>:


void __ATTR_ITCMRAM  lowpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
 8001248:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <lowpassTick+0x3c>)
{
 800124e:	b530      	push	{r4, r5, lr}
 8001250:	4605      	mov	r5, r0
 8001252:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
 8001254:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001258:	0094      	lsls	r4, r2, #2
 800125a:	9001      	str	r0, [sp, #4]
 800125c:	f012 fbca 	bl	80139f4 <tSVF_setFreqFast>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
 8001260:	ed95 0a00 	vldr	s0, [r5]
 8001264:	9801      	ldr	r0, [sp, #4]
 8001266:	f012 fb8f 	bl	8013988 <tSVF_tick>
    *sample *= filterGain[v][string];
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
 800126c:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001270:	4422      	add	r2, r4
 8001272:	edd2 7a00 	vldr	s15, [r2]
 8001276:	ee27 0a80 	vmul.f32	s0, s15, s0
 800127a:	ed85 0a00 	vstr	s0, [r5]
}
 800127e:	b003      	add	sp, #12
 8001280:	bd30      	pop	{r4, r5, pc}
 8001282:	bf00      	nop
 8001284:	20004714 	.word	0x20004714
 8001288:	2000447c 	.word	0x2000447c

0800128c <highpassTick>:

void __ATTR_ITCMRAM  highpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&highpass[v][string], cutoff);
 800128c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <highpassTick+0x3c>)
{
 8001292:	b530      	push	{r4, r5, lr}
 8001294:	4605      	mov	r5, r0
 8001296:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
 8001298:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800129c:	0094      	lsls	r4, r2, #2
 800129e:	9001      	str	r0, [sp, #4]
 80012a0:	f012 fba8 	bl	80139f4 <tSVF_setFreqFast>
	*sample = tSVF_tick(&highpass[v][string], *sample);
 80012a4:	ed95 0a00 	vldr	s0, [r5]
 80012a8:	9801      	ldr	r0, [sp, #4]
 80012aa:	f012 fb6d 	bl	8013988 <tSVF_tick>
    *sample *= filterGain[v][string];
 80012ae:	4a07      	ldr	r2, [pc, #28]	; (80012cc <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
 80012b0:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 80012b4:	4422      	add	r2, r4
 80012b6:	edd2 7a00 	vldr	s15, [r2]
 80012ba:	ee27 0a80 	vmul.f32	s0, s15, s0
 80012be:	ed85 0a00 	vstr	s0, [r5]
}
 80012c2:	b003      	add	sp, #12
 80012c4:	bd30      	pop	{r4, r5, pc}
 80012c6:	bf00      	nop
 80012c8:	2000450c 	.word	0x2000450c
 80012cc:	2000447c 	.word	0x2000447c

080012d0 <bandpassTick>:

void __ATTR_ITCMRAM  bandpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
 80012d0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <bandpassTick+0x3c>)
{
 80012d6:	b530      	push	{r4, r5, lr}
 80012d8:	4605      	mov	r5, r0
 80012da:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
 80012dc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80012e0:	0094      	lsls	r4, r2, #2
 80012e2:	9001      	str	r0, [sp, #4]
 80012e4:	f012 fb86 	bl	80139f4 <tSVF_setFreqFast>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
 80012e8:	ed95 0a00 	vldr	s0, [r5]
 80012ec:	9801      	ldr	r0, [sp, #4]
 80012ee:	f012 fb4b 	bl	8013988 <tSVF_tick>
    *sample *= filterGain[v][string];
 80012f2:	4a07      	ldr	r2, [pc, #28]	; (8001310 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
 80012f4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 80012f8:	4422      	add	r2, r4
 80012fa:	edd2 7a00 	vldr	s15, [r2]
 80012fe:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001302:	ed85 0a00 	vstr	s0, [r5]
}
 8001306:	b003      	add	sp, #12
 8001308:	bd30      	pop	{r4, r5, pc}
 800130a:	bf00      	nop
 800130c:	20000324 	.word	0x20000324
 8001310:	2000447c 	.word	0x2000447c

08001314 <diodeLowpassTick>:

void __ATTR_ITCMRAM  diodeLowpassTick(float* sample, int v, float cutoff, int string)
{
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
 8001314:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001318:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <diodeLowpassTick+0x3c>)
{
 800131a:	b530      	push	{r4, r5, lr}
 800131c:	4605      	mov	r5, r0
 800131e:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
 8001320:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001324:	0094      	lsls	r4, r2, #2
 8001326:	9001      	str	r0, [sp, #4]
 8001328:	f013 fc26 	bl	8014b78 <tDiodeFilter_setFreqFast>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
 800132c:	ed95 0a00 	vldr	s0, [r5]
 8001330:	9801      	ldr	r0, [sp, #4]
 8001332:	f013 fa9f 	bl	8014874 <tDiodeFilter_tickEfficient>
    *sample *= filterGain[v][string];
 8001336:	4a07      	ldr	r2, [pc, #28]	; (8001354 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
 8001338:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 800133c:	4422      	add	r2, r4
 800133e:	edd2 7a00 	vldr	s15, [r2]
 8001342:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001346:	ed85 0a00 	vstr	s0, [r5]
}
 800134a:	b003      	add	sp, #12
 800134c:	bd30      	pop	{r4, r5, pc}
 800134e:	bf00      	nop
 8001350:	20004424 	.word	0x20004424
 8001354:	2000447c 	.word	0x2000447c

08001358 <VZpeakTick>:

void __ATTR_ITCMRAM  VZpeakTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <VZpeakTick+0x28>)
 800135a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 800135e:	b510      	push	{r4, lr}
 8001360:	4604      	mov	r4, r0
 8001362:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
 8001364:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001368:	9001      	str	r0, [sp, #4]
 800136a:	f012 fdcd 	bl	8013f08 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterPeak[v][string], *sample);
 800136e:	9801      	ldr	r0, [sp, #4]
 8001370:	ed94 0a00 	vldr	s0, [r4]
 8001374:	f012 fbc2 	bl	8013afc <tVZFilter_tickEfficient>
 8001378:	ed84 0a00 	vstr	s0, [r4]
}
 800137c:	b002      	add	sp, #8
 800137e:	bd10      	pop	{r4, pc}
 8001380:	2000030c 	.word	0x2000030c

08001384 <VZlowshelfTick>:

void __ATTR_ITCMRAM  VZlowshelfTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
 8001384:	4b09      	ldr	r3, [pc, #36]	; (80013ac <VZlowshelfTick+0x28>)
 8001386:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 800138a:	b510      	push	{r4, lr}
 800138c:	4604      	mov	r4, r0
 800138e:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
 8001390:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001394:	9001      	str	r0, [sp, #4]
 8001396:	f012 fdb7 	bl	8013f08 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterLS[v][string], *sample);
 800139a:	9801      	ldr	r0, [sp, #4]
 800139c:	ed94 0a00 	vldr	s0, [r4]
 80013a0:	f012 fbac 	bl	8013afc <tVZFilter_tickEfficient>
 80013a4:	ed84 0a00 	vstr	s0, [r4]
}
 80013a8:	b002      	add	sp, #8
 80013aa:	bd10      	pop	{r4, pc}
 80013ac:	200002fc 	.word	0x200002fc

080013b0 <VZhighshelfTick>:
void __ATTR_ITCMRAM  VZhighshelfTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
 80013b0:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <VZhighshelfTick+0x28>)
 80013b2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 80013b6:	b510      	push	{r4, lr}
 80013b8:	4604      	mov	r4, r0
 80013ba:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
 80013bc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80013c0:	9001      	str	r0, [sp, #4]
 80013c2:	f012 fda1 	bl	8013f08 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterHS[v][string], *sample);
 80013c6:	9801      	ldr	r0, [sp, #4]
 80013c8:	ed94 0a00 	vldr	s0, [r4]
 80013cc:	f012 fb96 	bl	8013afc <tVZFilter_tickEfficient>
 80013d0:	ed84 0a00 	vstr	s0, [r4]
}
 80013d4:	b002      	add	sp, #8
 80013d6:	bd10      	pop	{r4, pc}
 80013d8:	200002ec 	.word	0x200002ec

080013dc <VZbandrejectTick>:
void __ATTR_ITCMRAM  VZbandrejectTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
 80013dc:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <VZbandrejectTick+0x3c>)
{
 80013e2:	b530      	push	{r4, r5, lr}
 80013e4:	4605      	mov	r5, r0
 80013e6:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
 80013e8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80013ec:	0094      	lsls	r4, r2, #2
 80013ee:	9001      	str	r0, [sp, #4]
 80013f0:	f012 fd8a 	bl	8013f08 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
 80013f4:	ed95 0a00 	vldr	s0, [r5]
 80013f8:	9801      	ldr	r0, [sp, #4]
 80013fa:	f012 fb7f 	bl	8013afc <tVZFilter_tickEfficient>
    *sample *= filterGain[v][string];
 80013fe:	4a07      	ldr	r2, [pc, #28]	; (800141c <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
 8001400:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001404:	4422      	add	r2, r4
 8001406:	edd2 7a00 	vldr	s15, [r2]
 800140a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800140e:	ed85 0a00 	vstr	s0, [r5]
}
 8001412:	b003      	add	sp, #12
 8001414:	bd30      	pop	{r4, r5, pc}
 8001416:	bf00      	nop
 8001418:	200002dc 	.word	0x200002dc
 800141c:	2000447c 	.word	0x2000447c

08001420 <LadderLowpassTick>:

void __ATTR_ITCMRAM  LadderLowpassTick(float* sample, int v, float cutoff, int string)
{
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
 8001420:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <LadderLowpassTick+0x3c>)
{
 8001426:	b530      	push	{r4, r5, lr}
 8001428:	4605      	mov	r5, r0
 800142a:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
 800142c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001430:	0094      	lsls	r4, r2, #2
 8001432:	9001      	str	r0, [sp, #4]
 8001434:	f013 fd3e 	bl	8014eb4 <tLadderFilter_setFreqFast>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
 8001438:	ed95 0a00 	vldr	s0, [r5]
 800143c:	9801      	ldr	r0, [sp, #4]
 800143e:	f013 fc13 	bl	8014c68 <tLadderFilter_tick>
    *sample *= filterGain[v][string];
 8001442:	4a07      	ldr	r2, [pc, #28]	; (8001460 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
 8001444:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001448:	4422      	add	r2, r4
 800144a:	edd2 7a00 	vldr	s15, [r2]
 800144e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001452:	ed85 0a00 	vstr	s0, [r5]
}
 8001456:	b003      	add	sp, #12
 8001458:	bd30      	pop	{r4, r5, pc}
 800145a:	bf00      	nop
 800145c:	200002cc 	.word	0x200002cc
 8001460:	2000447c 	.word	0x2000447c

08001464 <setFreqMultPitch>:



void __ATTR_ITCMRAM setFreqMultPitch(float pitch, int osc, int string)
{
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 8001464:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001468:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 800146c:	eef0 0a40 	vmov.f32	s1, s0
 8001470:	b538      	push	{r3, r4, r5, lr}
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 8001472:	0045      	lsls	r5, r0, #1
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <setFreqMultPitch+0x4c>)
 8001476:	eb00 0082 	add.w	r0, r0, r2, lsl #2
{
 800147a:	460c      	mov	r4, r1
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 800147c:	3020      	adds	r0, #32
 800147e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8001482:	4408      	add	r0, r1
 8001484:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001488:	ed90 7a02 	vldr	s14, [r0, #8]
 800148c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001494:	dd01      	ble.n	800149a <setFreqMultPitch+0x36>
	{
		pitch = roundf(pitch);
 8001496:	fef8 0a40 	vrinta.f32	s1, s0
	}

	freqMult[osc][string] = powf(1.059463094359295f, pitch);
 800149a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80014b4 <setFreqMultPitch+0x50>
 800149e:	442c      	add	r4, r5
 80014a0:	f019 f962 	bl	801a768 <powf>
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <setFreqMultPitch+0x54>)
 80014a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80014aa:	ed84 0a00 	vstr	s0, [r4]

}
 80014ae:	bd38      	pop	{r3, r4, r5, pc}
 80014b0:	20015b84 	.word	0x20015b84
 80014b4:	3f879c7d 	.word	0x3f879c7d
 80014b8:	200044ac 	.word	0x200044ac

080014bc <setFreqMultHarm>:

void __ATTR_ITCMRAM setFreqMultHarm(float harm, int osc, int string)
{
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 80014bc:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <setFreqMultHarm+0x5c>)
 80014c2:	0042      	lsls	r2, r0, #1
 80014c4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80014c8:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80014cc:	3020      	adds	r0, #32
 80014ce:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80014d2:	4408      	add	r0, r1
 80014d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80014d8:	ed90 7a02 	vldr	s14, [r0, #8]
 80014dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e4:	dd01      	ble.n	80014ea <setFreqMultHarm+0x2e>
	{
		harm = roundf(harm);
 80014e6:	feb8 0a40 	vrinta.f32	s0, s0
	}

	if (harm >= 0)
 80014ea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
	{
		freqMult[osc][string] = (harm + 1);
 80014ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	db08      	blt.n	800150a <setFreqMultHarm+0x4e>
		freqMult[osc][string] = (harm + 1);
 80014f8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <setFreqMultHarm+0x60>)
 80014fe:	4411      	add	r1, r2
 8001500:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001504:	ed81 0a00 	vstr	s0, [r1]
	else
	{
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
	}

}
 8001508:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
 800150a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800150e:	eeb0 7ac0 	vabs.f32	s14, s0
 8001512:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8001516:	e7f1      	b.n	80014fc <setFreqMultHarm+0x40>
 8001518:	20015b84 	.word	0x20015b84
 800151c:	200044ac 	.word	0x200044ac

08001520 <lowpassSetQ>:



void __ATTR_ITCMRAM  lowpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&lowpass[v][string], q);
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <lowpassSetQ+0x10>)
 8001522:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001526:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800152a:	f012 ba99 	b.w	8013a60 <tSVF_setQ>
 800152e:	bf00      	nop
 8001530:	20004714 	.word	0x20004714

08001534 <highpassSetQ>:
}

void __ATTR_ITCMRAM  highpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&highpass[v][string], q);
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <highpassSetQ+0x10>)
 8001536:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800153a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800153e:	f012 ba8f 	b.w	8013a60 <tSVF_setQ>
 8001542:	bf00      	nop
 8001544:	2000450c 	.word	0x2000450c

08001548 <bandpassSetQ>:
}

void __ATTR_ITCMRAM  bandpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&bandpass[v][string], q);
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <bandpassSetQ+0x10>)
 800154a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800154e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001552:	f012 ba85 	b.w	8013a60 <tSVF_setQ>
 8001556:	bf00      	nop
 8001558:	20000324 	.word	0x20000324

0800155c <diodeLowpassSetQ>:
}

void __ATTR_ITCMRAM  diodeLowpassSetQ(float q, int v, int string)
{
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <diodeLowpassSetQ+0x10>)
 800155e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001562:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001566:	f013 bb27 	b.w	8014bb8 <tDiodeFilter_setQ>
 800156a:	bf00      	nop
 800156c:	20004424 	.word	0x20004424

08001570 <VZpeakSetQ>:
}

void __ATTR_ITCMRAM  VZpeakSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterPeak[v][string], q);
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <VZpeakSetQ+0x10>)
 8001572:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001576:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800157a:	f012 be3f 	b.w	80141fc <tVZFilter_setResonance>
 800157e:	bf00      	nop
 8001580:	2000030c 	.word	0x2000030c

08001584 <VZlowshelfSetQ>:
}

void __ATTR_ITCMRAM  VZlowshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterLS[v][string], q);
 8001584:	4b03      	ldr	r3, [pc, #12]	; (8001594 <VZlowshelfSetQ+0x10>)
 8001586:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800158a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800158e:	f012 be35 	b.w	80141fc <tVZFilter_setResonance>
 8001592:	bf00      	nop
 8001594:	200002fc 	.word	0x200002fc

08001598 <VZhighshelfSetQ>:
}

void __ATTR_ITCMRAM  VZhighshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterHS[v][string], q);
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <VZhighshelfSetQ+0x10>)
 800159a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800159e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80015a2:	f012 be2b 	b.w	80141fc <tVZFilter_setResonance>
 80015a6:	bf00      	nop
 80015a8:	200002ec 	.word	0x200002ec

080015ac <VZbandrejectSetQ>:
}

void __ATTR_ITCMRAM  VZbandrejectSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <VZbandrejectSetQ+0x10>)
 80015ae:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80015b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80015b6:	f012 be21 	b.w	80141fc <tVZFilter_setResonance>
 80015ba:	bf00      	nop
 80015bc:	200002dc 	.word	0x200002dc

080015c0 <LadderLowpassSetQ>:
}

void __ATTR_ITCMRAM  LadderLowpassSetQ(float q, int v, int string)
{
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
 80015c0:	4b03      	ldr	r3, [pc, #12]	; (80015d0 <LadderLowpassSetQ+0x10>)
 80015c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80015c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80015ca:	f013 bc97 	b.w	8014efc <tLadderFilter_setQ>
 80015ce:	bf00      	nop
 80015d0:	200002cc 	.word	0x200002cc

080015d4 <lowpassSetGain>:
}

void __ATTR_ITCMRAM  lowpassSetGain(float gain, int v, int string)
{
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 80015d4:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80015d8:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
 80015dc:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 80015de:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80015e2:	4605      	mov	r5, r0
 80015e4:	460c      	mov	r4, r1
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 80015e6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80015ea:	eeb0 0a67 	vmov.f32	s0, s15
 80015ee:	f013 feb3 	bl	8015358 <fasterdbtoa>
 80015f2:	4b03      	ldr	r3, [pc, #12]	; (8001600 <lowpassSetGain+0x2c>)
 80015f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80015f8:	ed84 0a00 	vstr	s0, [r4]
}
 80015fc:	bd38      	pop	{r3, r4, r5, pc}
 80015fe:	bf00      	nop
 8001600:	2000447c 	.word	0x2000447c

08001604 <highpassSetGain>:
 8001604:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001608:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 800160c:	b538      	push	{r3, r4, r5, lr}
 800160e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001612:	4605      	mov	r5, r0
 8001614:	460c      	mov	r4, r1
 8001616:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800161a:	eeb0 0a67 	vmov.f32	s0, s15
 800161e:	f013 fe9b 	bl	8015358 <fasterdbtoa>
 8001622:	4b03      	ldr	r3, [pc, #12]	; (8001630 <highpassSetGain+0x2c>)
 8001624:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001628:	ed84 0a00 	vstr	s0, [r4]
 800162c:	bd38      	pop	{r3, r4, r5, pc}
 800162e:	bf00      	nop
 8001630:	2000447c 	.word	0x2000447c

08001634 <bandpassSetGain>:
 8001634:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001638:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 800163c:	b538      	push	{r3, r4, r5, lr}
 800163e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001642:	4605      	mov	r5, r0
 8001644:	460c      	mov	r4, r1
 8001646:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800164a:	eeb0 0a67 	vmov.f32	s0, s15
 800164e:	f013 fe83 	bl	8015358 <fasterdbtoa>
 8001652:	4b03      	ldr	r3, [pc, #12]	; (8001660 <bandpassSetGain+0x2c>)
 8001654:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001658:	ed84 0a00 	vstr	s0, [r4]
 800165c:	bd38      	pop	{r3, r4, r5, pc}
 800165e:	bf00      	nop
 8001660:	2000447c 	.word	0x2000447c

08001664 <diodeLowpassSetGain>:
 8001664:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001668:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 800166c:	b538      	push	{r3, r4, r5, lr}
 800166e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001672:	4605      	mov	r5, r0
 8001674:	460c      	mov	r4, r1
 8001676:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	f013 fe6b 	bl	8015358 <fasterdbtoa>
 8001682:	4b03      	ldr	r3, [pc, #12]	; (8001690 <diodeLowpassSetGain+0x2c>)
 8001684:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001688:	ed84 0a00 	vstr	s0, [r4]
 800168c:	bd38      	pop	{r3, r4, r5, pc}
 800168e:	bf00      	nop
 8001690:	2000447c 	.word	0x2000447c

08001694 <VZpeakSetGain>:
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
}

void __ATTR_ITCMRAM  VZpeakSetGain(float gain, int v, int string)
{
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8001694:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8001698:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80016c0 <VZpeakSetGain+0x2c>
{
 800169c:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 800169e:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80016a2:	4605      	mov	r5, r0
 80016a4:	460c      	mov	r4, r1
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 80016a6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80016aa:	eeb0 0a67 	vmov.f32	s0, s15
 80016ae:	f013 fe53 	bl	8015358 <fasterdbtoa>
 80016b2:	4804      	ldr	r0, [pc, #16]	; (80016c4 <VZpeakSetGain+0x30>)
 80016b4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80016b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 80016bc:	f012 bd82 	b.w	80141c4 <tVZFilter_setGain>
 80016c0:	42480000 	.word	0x42480000
 80016c4:	2000030c 	.word	0x2000030c

080016c8 <VZlowshelfSetGain>:

void __ATTR_ITCMRAM  VZlowshelfSetGain(float gain, int v, int string)
{
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 80016c8:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 80016cc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80016f4 <VZlowshelfSetGain+0x2c>
{
 80016d0:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 80016d2:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80016d6:	4605      	mov	r5, r0
 80016d8:	460c      	mov	r4, r1
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 80016da:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80016de:	eeb0 0a67 	vmov.f32	s0, s15
 80016e2:	f013 fe39 	bl	8015358 <fasterdbtoa>
 80016e6:	4804      	ldr	r0, [pc, #16]	; (80016f8 <VZlowshelfSetGain+0x30>)
 80016e8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80016ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 80016f0:	f012 bd68 	b.w	80141c4 <tVZFilter_setGain>
 80016f4:	42480000 	.word	0x42480000
 80016f8:	200002fc 	.word	0x200002fc

080016fc <VZhighshelfSetGain>:
 80016fc:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8001700:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001728 <VZhighshelfSetGain+0x2c>
 8001704:	b538      	push	{r3, r4, r5, lr}
 8001706:	eee0 7a07 	vfma.f32	s15, s0, s14
 800170a:	4605      	mov	r5, r0
 800170c:	460c      	mov	r4, r1
 800170e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001712:	eeb0 0a67 	vmov.f32	s0, s15
 8001716:	f013 fe1f 	bl	8015358 <fasterdbtoa>
 800171a:	4804      	ldr	r0, [pc, #16]	; (800172c <VZhighshelfSetGain+0x30>)
 800171c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8001720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001724:	f012 bd4e 	b.w	80141c4 <tVZFilter_setGain>
 8001728:	42480000 	.word	0x42480000
 800172c:	200002fc 	.word	0x200002fc

08001730 <VZbandrejectSetGain>:
 8001730:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001734:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 8001738:	b538      	push	{r3, r4, r5, lr}
 800173a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800173e:	4605      	mov	r5, r0
 8001740:	460c      	mov	r4, r1
 8001742:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001746:	eeb0 0a67 	vmov.f32	s0, s15
 800174a:	f013 fe05 	bl	8015358 <fasterdbtoa>
 800174e:	4b03      	ldr	r3, [pc, #12]	; (800175c <VZbandrejectSetGain+0x2c>)
 8001750:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001754:	ed84 0a00 	vstr	s0, [r4]
 8001758:	bd38      	pop	{r3, r4, r5, pc}
 800175a:	bf00      	nop
 800175c:	2000447c 	.word	0x2000447c

08001760 <LadderLowpassSetGain>:
 8001760:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8001764:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 8001768:	b538      	push	{r3, r4, r5, lr}
 800176a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800176e:	4605      	mov	r5, r0
 8001770:	460c      	mov	r4, r1
 8001772:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001776:	eeb0 0a67 	vmov.f32	s0, s15
 800177a:	f013 fded 	bl	8015358 <fasterdbtoa>
 800177e:	4b03      	ldr	r3, [pc, #12]	; (800178c <LadderLowpassSetGain+0x2c>)
 8001780:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001784:	ed84 0a00 	vstr	s0, [r4]
 8001788:	bd38      	pop	{r3, r4, r5, pc}
 800178a:	bf00      	nop
 800178c:	2000447c 	.word	0x2000447c

08001790 <setEnvelopeAttack>:
}


void  __ATTR_ITCMRAM  setEnvelopeAttack(float a, int v, int string)
{
	a = a + 0.01f;
 8001790:	eddf 7a05 	vldr	s15, [pc, #20]	; 80017a8 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
 8001794:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <setEnvelopeAttack+0x1c>)
 800179a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800179e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80017a2:	f011 bebb 	b.w	801351c <tADSRT_setAttack>
 80017a6:	bf00      	nop
 80017a8:	3c23d70a 	.word	0x3c23d70a
 80017ac:	2000444c 	.word	0x2000444c

080017b0 <setEnvelopeDecay>:
}

void  __ATTR_ITCMRAM  setEnvelopeDecay(float d, int v, int string)
{
	d = d + 0.01f;
 80017b0:	eddf 7a05 	vldr	s15, [pc, #20]	; 80017c8 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
 80017b4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <setEnvelopeDecay+0x1c>)
 80017ba:	ee30 0a27 	vadd.f32	s0, s0, s15
 80017be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80017c2:	f011 bebf 	b.w	8013544 <tADSRT_setDecay>
 80017c6:	bf00      	nop
 80017c8:	3c23d70a 	.word	0x3c23d70a
 80017cc:	2000444c 	.word	0x2000444c

080017d0 <setEnvelopeSustain>:
}

void  __ATTR_ITCMRAM  setEnvelopeSustain(float s, int v, int string)
{
	tADSRT_setSustain(&envs[v][string], s);
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <setEnvelopeSustain+0x10>)
 80017d2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80017d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80017da:	f011 bec7 	b.w	801356c <tADSRT_setSustain>
 80017de:	bf00      	nop
 80017e0:	2000444c 	.word	0x2000444c

080017e4 <setEnvelopeRelease>:
}

void  __ATTR_ITCMRAM  setEnvelopeRelease(float r, int v, int string)
{
	r = r + 0.01f;
 80017e4:	eddf 7a05 	vldr	s15, [pc, #20]	; 80017fc <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
 80017e8:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <setEnvelopeRelease+0x1c>)
 80017ee:	ee30 0a27 	vadd.f32	s0, s0, s15
 80017f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80017f6:	f011 becf 	b.w	8013598 <tADSRT_setRelease>
 80017fa:	bf00      	nop
 80017fc:	3c23d70a 	.word	0x3c23d70a
 8001800:	2000444c 	.word	0x2000444c

08001804 <setEnvelopeLeak>:
}

void  __ATTR_ITCMRAM  setEnvelopeLeak(float leak, int v, int string)
{
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
 8001804:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800182c <setEnvelopeLeak+0x28>
 800180c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001830 <setEnvelopeLeak+0x2c>
 8001810:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <setEnvelopeLeak+0x30>)
 8001816:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800181a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800181e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8001822:	eeb0 0a47 	vmov.f32	s0, s14
 8001826:	f011 becb 	b.w	80135c0 <tADSRT_setLeakFactor>
 800182a:	bf00      	nop
 800182c:	3851b717 	.word	0x3851b717
 8001830:	3f7ffcb9 	.word	0x3f7ffcb9
 8001834:	2000444c 	.word	0x2000444c

08001838 <setAmp>:
}

void  __ATTR_ITCMRAM  setAmp(float amp, int v, int string)
{
	amplitude[string] = amp;
 8001838:	4b02      	ldr	r3, [pc, #8]	; (8001844 <setAmp+0xc>)
 800183a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800183e:	ed81 0a00 	vstr	s0, [r1]
}
 8001842:	4770      	bx	lr
 8001844:	2000031c 	.word	0x2000031c

08001848 <setMaster>:

void  __ATTR_ITCMRAM  setMaster(float amp,  int v, int string)
{
	finalMaster[string] = amp;
 8001848:	4b02      	ldr	r3, [pc, #8]	; (8001854 <setMaster+0xc>)
 800184a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800184e:	ed81 0a00 	vstr	s0, [r1]
}
 8001852:	4770      	bx	lr
 8001854:	2000449c 	.word	0x2000449c

08001858 <setTranspose>:

void  __ATTR_ITCMRAM  setTranspose(float in, int v, int string)
{
	transpose = in;
 8001858:	4b01      	ldr	r3, [pc, #4]	; (8001860 <setTranspose+0x8>)
 800185a:	ed83 0a00 	vstr	s0, [r3]
}
 800185e:	4770      	bx	lr
 8001860:	20012f28 	.word	0x20012f28

08001864 <setPitchBendRange>:

void  __ATTR_ITCMRAM  setPitchBendRange(float in, int v, int string)
{
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
 8001864:	eddf 7a03 	vldr	s15, [pc, #12]	; 8001874 <setPitchBendRange+0x10>
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <setPitchBendRange+0x14>)
 800186a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800186e:	ed83 0a00 	vstr	s0, [r3]
}
 8001872:	4770      	bx	lr
 8001874:	39000200 	.word	0x39000200
 8001878:	20000000 	.word	0x20000000

0800187c <setFinalLowpass>:

void  __ATTR_ITCMRAM  setFinalLowpass(float in, int v, int string)
{
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 800187c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001880:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80018b0 <setFinalLowpass+0x34>
{
 8001884:	eef0 7a40 	vmov.f32	s15, s0
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8001888:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80018b4 <setFinalLowpass+0x38>
 800188c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80018b8 <setFinalLowpass+0x3c>
 8001890:	ee77 7ac7 	vsub.f32	s15, s15, s14
{
 8001894:	b510      	push	{r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8001896:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
 800189a:	460c      	mov	r4, r1
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 800189c:	f013 fc10 	bl	80150c0 <LEAF_clip>
 80018a0:	4806      	ldr	r0, [pc, #24]	; (80018bc <setFinalLowpass+0x40>)
 80018a2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80018a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 80018aa:	f012 b8a3 	b.w	80139f4 <tSVF_setFreqFast>
 80018ae:	bf00      	nop
 80018b0:	420fb824 	.word	0x420fb824
 80018b4:	457ff000 	.word	0x457ff000
 80018b8:	00000000 	.word	0x00000000
 80018bc:	20004494 	.word	0x20004494

080018c0 <tickMappings>:

uint32_t timeMap = 0;
void __ATTR_ITCMRAM tickMappings(void)
{
 80018c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 0;
 80018c4:	4956      	ldr	r1, [pc, #344]	; (8001a20 <tickMappings+0x160>)
 80018c6:	2700      	movs	r7, #0
	uint32_t tempCount1 = DWT->CYCCNT;
 80018c8:	4a56      	ldr	r2, [pc, #344]	; (8001a24 <tickMappings+0x164>)
	for (int i = 0; i < numMappings; i++)
 80018ca:	4b57      	ldr	r3, [pc, #348]	; (8001a28 <tickMappings+0x168>)
{
 80018cc:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
 80018d0:	700f      	strb	r7, [r1, #0]
{
 80018d2:	b083      	sub	sp, #12
	uint32_t tempCount1 = DWT->CYCCNT;
 80018d4:	6852      	ldr	r2, [r2, #4]
	for (int i = 0; i < numMappings; i++)
 80018d6:	781b      	ldrb	r3, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 80018d8:	9201      	str	r2, [sp, #4]
	for (int i = 0; i < numMappings; i++)
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8086 	beq.w	80019ec <tickMappings+0x12c>
	{
		for (int v = 0; v < numStringsThisBoard; v++)
 80018e0:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8001a38 <tickMappings+0x178>
 80018e4:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8001a3c <tickMappings+0x17c>
 80018e8:	f898 2000 	ldrb.w	r2, [r8]
 80018ec:	4c4f      	ldr	r4, [pc, #316]	; (8001a2c <tickMappings+0x16c>)
 80018ee:	2a00      	cmp	r2, #0
 80018f0:	d07c      	beq.n	80019ec <tickMappings+0x12c>
 80018f2:	46a3      	mov	fp, r4
 80018f4:	464e      	mov	r6, r9
 80018f6:	2500      	movs	r5, #0
		{

			float unsmoothedValue = 0.0f;
			float smoothedValue = 0.0f;
			for (int j = 0; j < mappings[i].numHooks; j++)
 80018f8:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 80018fc:	2800      	cmp	r0, #0
 80018fe:	f000 8086 	beq.w	8001a0e <tickMappings+0x14e>
			{
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 8001902:	f8db 101c 	ldr.w	r1, [fp, #28]
 8001906:	f8db 2000 	ldr.w	r2, [fp]
 800190a:	edd1 7a00 	vldr	s15, [r1]
 800190e:	ed92 7a00 	vldr	s14, [r2]
 8001912:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 8001916:	ee67 7a87 	vmul.f32	s15, s15, s14
				if (mappings[i].sourceSmoothed[j])
 800191a:	7e23      	ldrb	r3, [r4, #24]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 800191c:	ee67 7a80 	vmul.f32	s15, s15, s0
				if (mappings[i].sourceSmoothed[j])
 8001920:	2b00      	cmp	r3, #0
 8001922:	d16e      	bne.n	8001a02 <tickMappings+0x142>
				{
					smoothedValue += sum;
				}
				else
				{
					unsmoothedValue += sum;
 8001924:	eeb0 8a67 	vmov.f32	s16, s15
			float smoothedValue = 0.0f;
 8001928:	eddf 7a41 	vldr	s15, [pc, #260]	; 8001a30 <tickMappings+0x170>
			for (int j = 0; j < mappings[i].numHooks; j++)
 800192c:	2801      	cmp	r0, #1
 800192e:	d027      	beq.n	8001980 <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 8001930:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
 8001934:	f8db 2008 	ldr.w	r2, [fp, #8]
 8001938:	ed91 7a00 	vldr	s14, [r1]
 800193c:	ed92 6a00 	vldr	s12, [r2]
 8001940:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8001944:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
 8001948:	7e63      	ldrb	r3, [r4, #25]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 800194a:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
 800194e:	2b00      	cmp	r3, #0
 8001950:	d15a      	bne.n	8001a08 <tickMappings+0x148>
					unsmoothedValue += sum;
 8001952:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
 8001956:	2802      	cmp	r0, #2
 8001958:	d012      	beq.n	8001980 <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 800195a:	f8db 1010 	ldr.w	r1, [fp, #16]
 800195e:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8001962:	ed91 7a00 	vldr	s14, [r1]
 8001966:	ed92 6a00 	vldr	s12, [r2]
 800196a:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 800196e:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
 8001972:	7ea0      	ldrb	r0, [r4, #26]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 8001974:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
 8001978:	2800      	cmp	r0, #0
 800197a:	d04d      	beq.n	8001a18 <tickMappings+0x158>
					smoothedValue += sum;
 800197c:	ee77 7a87 	vadd.f32	s15, s15, s14
				}
			}
			//sources are now summed - let's add the initial value
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
 8001980:	f854 2c04 	ldr.w	r2, [r4, #-4]

			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
 8001984:	4630      	mov	r0, r6
		for (int v = 0; v < numStringsThisBoard; v++)
 8001986:	f10b 0b04 	add.w	fp, fp, #4
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
 800198a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800198e:	ed92 0a00 	vldr	s0, [r2]
			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
 8001992:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001996:	f011 ff31 	bl	80137fc <tExpSmooth_setDest>
			smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
 800199a:	4630      	mov	r0, r6
 800199c:	f011 ff32 	bl	8013804 <tExpSmooth_tick>
			float finalVal = unsmoothedValue + smoothedValue;

			//now scale the value with the correct scaling function
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
 80019a0:	f854 ac04 	ldr.w	sl, [r4, #-4]
 80019a4:	ee30 0a08 	vadd.f32	s0, s0, s16
		for (int v = 0; v < numStringsThisBoard; v++)
 80019a8:	3604      	adds	r6, #4
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
 80019aa:	f8da 2010 	ldr.w	r2, [sl, #16]
 80019ae:	4790      	blx	r2
 80019b0:	1caa      	adds	r2, r5, #2
 80019b2:	eb0a 0182 	add.w	r1, sl, r2, lsl #2
 80019b6:	ed81 0a00 	vstr	s0, [r1]

			//and pop that value where it belongs by setting the actual parameter
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
 80019ba:	4629      	mov	r1, r5
 80019bc:	f854 0c04 	ldr.w	r0, [r4, #-4]
		for (int v = 0; v < numStringsThisBoard; v++)
 80019c0:	3501      	adds	r5, #1
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
 80019c2:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 80019c6:	6942      	ldr	r2, [r0, #20]
 80019c8:	7e00      	ldrb	r0, [r0, #24]
 80019ca:	ed9c 0a00 	vldr	s0, [ip]
 80019ce:	4790      	blx	r2
		for (int v = 0; v < numStringsThisBoard; v++)
 80019d0:	f898 2000 	ldrb.w	r2, [r8]
 80019d4:	42aa      	cmp	r2, r5
 80019d6:	dc8f      	bgt.n	80018f8 <tickMappings+0x38>
	for (int i = 0; i < numMappings; i++)
 80019d8:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <tickMappings+0x168>)
 80019da:	3701      	adds	r7, #1
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	429f      	cmp	r7, r3
 80019e0:	da04      	bge.n	80019ec <tickMappings+0x12c>
 80019e2:	f109 0908 	add.w	r9, r9, #8
 80019e6:	344c      	adds	r4, #76	; 0x4c
		for (int v = 0; v < numStringsThisBoard; v++)
 80019e8:	2a00      	cmp	r2, #0
 80019ea:	d182      	bne.n	80018f2 <tickMappings+0x32>
		}
	}
	timeMap = DWT->CYCCNT - tempCount1;
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <tickMappings+0x164>)
 80019ee:	9901      	ldr	r1, [sp, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <tickMappings+0x174>)
 80019f4:	1a5b      	subs	r3, r3, r1
 80019f6:	6013      	str	r3, [r2, #0]

}
 80019f8:	b003      	add	sp, #12
 80019fa:	ecbd 8b02 	vpop	{d8}
 80019fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float unsmoothedValue = 0.0f;
 8001a02:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 8001a30 <tickMappings+0x170>
 8001a06:	e791      	b.n	800192c <tickMappings+0x6c>
					smoothedValue += sum;
 8001a08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a0c:	e7a3      	b.n	8001956 <tickMappings+0x96>
			float smoothedValue = 0.0f;
 8001a0e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8001a30 <tickMappings+0x170>
			float unsmoothedValue = 0.0f;
 8001a12:	eeb0 8a67 	vmov.f32	s16, s15
 8001a16:	e7b3      	b.n	8001980 <tickMappings+0xc0>
					unsmoothedValue += sum;
 8001a18:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
 8001a1c:	e7b0      	b.n	8001980 <tickMappings+0xc0>
 8001a1e:	bf00      	nop
 8001a20:	200151c5 	.word	0x200151c5
 8001a24:	e0001000 	.word	0xe0001000
 8001a28:	20015b80 	.word	0x20015b80
 8001a2c:	20015204 	.word	0x20015204
 8001a30:	00000000 	.word	0x00000000
 8001a34:	20012f14 	.word	0x20012f14
 8001a38:	20000066 	.word	0x20000066
 8001a3c:	20004724 	.word	0x20004724

08001a40 <lfoSawSquareTick>:



void lfoSawSquareTick(float* sample, int v, int string)
{
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
 8001a40:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <lfoSawSquareTick+0x18>)
 8001a42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001a46:	b510      	push	{r4, lr}
 8001a48:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
 8001a4a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001a4e:	f018 f975 	bl	8019d3c <tSawSquareLFO_tick>
 8001a52:	ed84 0a00 	vstr	s0, [r4]
}
 8001a56:	bd10      	pop	{r4, pc}
 8001a58:	20004684 	.word	0x20004684

08001a5c <lfoSineTriTick>:

void lfoSineTriTick(float* sample, int v, int string)
{
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <lfoSineTriTick+0x18>)
 8001a5e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001a62:	b510      	push	{r4, lr}
 8001a64:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
 8001a66:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001a6a:	f018 faa9 	bl	8019fc0 <tSineTriLFO_tick>
 8001a6e:	ed84 0a00 	vstr	s0, [r4]
}
 8001a72:	bd10      	pop	{r4, pc}
 8001a74:	200046d4 	.word	0x200046d4

08001a78 <lfoSineTick>:

void lfoSineTick(float* sample, int v, int string)
{
    *sample = tCycle_tick(&lfoSine[v][string]);
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <lfoSineTick+0x18>)
 8001a7a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001a7e:	b510      	push	{r4, lr}
 8001a80:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
 8001a82:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001a86:	f013 fdfd 	bl	8015684 <tCycle_tick>
 8001a8a:	ed84 0a00 	vstr	s0, [r4]
}
 8001a8e:	bd10      	pop	{r4, pc}
 8001a90:	200046b4 	.word	0x200046b4

08001a94 <lfoTriTick>:

void lfoTriTick(float* sample, int v, int string)
{
    *sample = tTriLFO_tick(&lfoTri[v][string]);
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <lfoTriTick+0x18>)
 8001a96:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001a9a:	b510      	push	{r4, lr}
 8001a9c:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
 8001a9e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001aa2:	f018 fa11 	bl	8019ec8 <tTriLFO_tick>
 8001aa6:	ed84 0a00 	vstr	s0, [r4]
}
 8001aaa:	bd10      	pop	{r4, pc}
 8001aac:	200046f4 	.word	0x200046f4

08001ab0 <lfoSawTick>:
void lfoSawTick(float* sample, int v, int string)
{
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <lfoSawTick+0x24>)
 8001ab2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001ab6:	b510      	push	{r4, lr}
 8001ab8:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
 8001aba:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001abe:	f017 ffbf 	bl	8019a40 <tIntPhasor_tick>
 8001ac2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001ac6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001aca:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001ace:	edc4 7a00 	vstr	s15, [r4]
}
 8001ad2:	bd10      	pop	{r4, pc}
 8001ad4:	20004664 	.word	0x20004664

08001ad8 <lfoPulseTick>:

void lfoPulseTick(float* sample, int v, int string)
{
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <lfoPulseTick+0x18>)
 8001ada:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001ade:	b510      	push	{r4, lr}
 8001ae0:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
 8001ae2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001ae6:	f018 f879 	bl	8019bdc <tSquareLFO_tick>
 8001aea:	ed84 0a00 	vstr	s0, [r4]
}
 8001aee:	bd10      	pop	{r4, pc}
 8001af0:	20004644 	.word	0x20004644

08001af4 <lfoSawSquareSetRate>:

void lfoSawSquareSetRate(float r, int v, int string)
{
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <lfoSawSquareSetRate+0x10>)
 8001af6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001afa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001afe:	f018 b95f 	b.w	8019dc0 <tSawSquareLFO_setFreq>
 8001b02:	bf00      	nop
 8001b04:	20004684 	.word	0x20004684

08001b08 <lfoSineTriSetRate>:
}

void lfoSineTriSetRate(float r, int v, int string)
{
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <lfoSineTriSetRate+0x10>)
 8001b0a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b12:	f018 baa1 	b.w	801a058 <tSineTriLFO_setFreq>
 8001b16:	bf00      	nop
 8001b18:	200046d4 	.word	0x200046d4

08001b1c <lfoSineSetRate>:
}
void lfoSineSetRate(float r, int v, int string)
{
	tCycle_setFreq(&lfoSine[v][string], r);
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <lfoSineSetRate+0x10>)
 8001b1e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b22:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b26:	f013 bdd3 	b.w	80156d0 <tCycle_setFreq>
 8001b2a:	bf00      	nop
 8001b2c:	200046b4 	.word	0x200046b4

08001b30 <lfoTriSetRate>:
}
void lfoTriSetRate(float r, int v, int string)
{
	tTriLFO_setFreq(&lfoTri[v][string], r);
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <lfoTriSetRate+0x10>)
 8001b32:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b3a:	f018 b9df 	b.w	8019efc <tTriLFO_setFreq>
 8001b3e:	bf00      	nop
 8001b40:	200046f4 	.word	0x200046f4

08001b44 <lfoSawSetRate>:
}
void lfoSawSetRate(float r, int v, int string)
{
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <lfoSawSetRate+0x10>)
 8001b46:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b4a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b4e:	f017 bf87 	b.w	8019a60 <tIntPhasor_setFreq>
 8001b52:	bf00      	nop
 8001b54:	20004664 	.word	0x20004664

08001b58 <lfoPulseSetRate>:
}
void lfoPulseSetRate(float r, int v, int string)
{
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
 8001b58:	4b03      	ldr	r3, [pc, #12]	; (8001b68 <lfoPulseSetRate+0x10>)
 8001b5a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b5e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b62:	f018 b85f 	b.w	8019c24 <tSquareLFO_setFreq>
 8001b66:	bf00      	nop
 8001b68:	20004644 	.word	0x20004644

08001b6c <lfoSawSquareSetPhase>:
}


void lfoSawSquareSetPhase(float p, int v, int string)
{
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
 8001b6c:	4b03      	ldr	r3, [pc, #12]	; (8001b7c <lfoSawSquareSetPhase+0x10>)
 8001b6e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b76:	f018 b947 	b.w	8019e08 <tSawSquareLFO_setPhase>
 8001b7a:	bf00      	nop
 8001b7c:	20004684 	.word	0x20004684

08001b80 <lfoSineTriSetPhase>:
}
void lfoSineTriSetPhase(float p, int v, int string)
{
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <lfoSineTriSetPhase+0x10>)
 8001b82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b8a:	f018 ba7d 	b.w	801a088 <tSineTriLFO_setPhase>
 8001b8e:	bf00      	nop
 8001b90:	200046d4 	.word	0x200046d4

08001b94 <lfoSineSetPhase>:
}
void lfoSineSetPhase(float p, int v, int string)
{
	tCycle_setPhase(&lfoSine[v][string],p);
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <lfoSineSetPhase+0x10>)
 8001b96:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001b9a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001b9e:	f013 bda3 	b.w	80156e8 <tCycle_setPhase>
 8001ba2:	bf00      	nop
 8001ba4:	200046b4 	.word	0x200046b4

08001ba8 <lfoTriSetPhase>:
}
void lfoTriSetPhase(float p, int v, int string)
{
	tTriLFO_setPhase(&lfoTri[v][string],p);
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <lfoTriSetPhase+0x10>)
 8001baa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001bae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001bb2:	f018 b9af 	b.w	8019f14 <tTriLFO_setPhase>
 8001bb6:	bf00      	nop
 8001bb8:	200046f4 	.word	0x200046f4

08001bbc <lfoSawSetPhase>:
}
void lfoSawSetPhase(float p, int v, int string)
{
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
 8001bbc:	4b03      	ldr	r3, [pc, #12]	; (8001bcc <lfoSawSetPhase+0x10>)
 8001bbe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001bc2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001bc6:	f017 bf57 	b.w	8019a78 <tIntPhasor_setPhase>
 8001bca:	bf00      	nop
 8001bcc:	20004664 	.word	0x20004664

08001bd0 <lfoPulseSetPhase>:
}
void lfoPulseSetPhase(float p, int v, int string)
{
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <lfoPulseSetPhase+0x10>)
 8001bd2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001bd6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001bda:	f018 b85b 	b.w	8019c94 <tSquareLFO_setPhase>
 8001bde:	bf00      	nop
 8001be0:	20004644 	.word	0x20004644

08001be4 <lfoSawSquareSetShape>:
}


void lfoSawSquareSetShape(float s, int v, int string)
{
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <lfoSawSquareSetShape+0x10>)
 8001be6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001bea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001bee:	f018 b93d 	b.w	8019e6c <tSawSquareLFO_setShape>
 8001bf2:	bf00      	nop
 8001bf4:	20004684 	.word	0x20004684

08001bf8 <lfoSineTriSetShape>:
}
void lfoSineTriSetShape(float s, int v, int string)
{
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <lfoSineTriSetShape+0x10>)
 8001bfa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001bfe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001c02:	f018 ba59 	b.w	801a0b8 <tSineTriLFO_setShape>
 8001c06:	bf00      	nop
 8001c08:	200046d4 	.word	0x200046d4

08001c0c <lfoSineSetShape>:
}
void lfoSineSetShape(float s, int v, int string)
{
	//none
}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop

08001c10 <lfoTriSetShape>:
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop

08001c14 <lfoSawSetShape>:
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop

08001c18 <lfoPulseSetShape>:
{
	//none
}
void lfoPulseSetShape(float s, int v, int string)
{
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <lfoPulseSetShape+0x10>)
 8001c1a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001c1e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001c22:	f018 b817 	b.w	8019c54 <tSquareLFO_setPulseWidth>
 8001c26:	bf00      	nop
 8001c28:	20004644 	.word	0x20004644

08001c2c <clipperGainSet>:
float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void __ATTR_ITCMRAM  clipperGainSet(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 24.0f);
 8001c2c:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
 8001c30:	b538      	push	{r3, r4, r5, lr}
 8001c32:	4605      	mov	r5, r0
 8001c34:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 24.0f);
 8001c36:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001c3a:	f013 fb8d 	bl	8015358 <fasterdbtoa>
 8001c3e:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <clipperGainSet+0x24>)
 8001c40:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001c44:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001c48:	ed84 0a00 	vstr	s0, [r4]
}
 8001c4c:	bd38      	pop	{r3, r4, r5, pc}
 8001c4e:	bf00      	nop
 8001c50:	200048e8 	.word	0x200048e8

08001c54 <wavefolderParam1>:
void __ATTR_ITCMRAM  wavefolderParam1(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 12.0f);
 8001c54:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
 8001c58:	b538      	push	{r3, r4, r5, lr}
 8001c5a:	4605      	mov	r5, r0
 8001c5c:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 12.0f);
 8001c5e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001c62:	f013 fb79 	bl	8015358 <fasterdbtoa>
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <wavefolderParam1+0x24>)
 8001c68:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001c6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001c70:	ed84 0a00 	vstr	s0, [r4]
}
 8001c74:	bd38      	pop	{r3, r4, r5, pc}
 8001c76:	bf00      	nop
 8001c78:	200048e8 	.word	0x200048e8

08001c7c <wavefolderParam3>:
void __ATTR_ITCMRAM  wavefolderParam3(float value, int v, int string)
{
	//value = (value * 0.99f) + 0.00f; //avoid zero
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8001c7c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001c80:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <wavefolderParam3+0x28>)
	param3[v][string] = value;
 8001c86:	4808      	ldr	r0, [pc, #32]	; (8001ca8 <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8001c88:	ee70 6a27 	vadd.f32	s13, s0, s15
 8001c8c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
 8001c90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8001c94:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
 8001c98:	ed81 0a00 	vstr	s0, [r1]
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8001c9c:	ed83 7a00 	vstr	s14, [r3]
}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20004520 	.word	0x20004520
 8001ca8:	20004928 	.word	0x20004928

08001cac <tiltParam1>:

void __ATTR_ITCMRAM  tiltParam1(float value, int v, int string)
{
 8001cac:	b510      	push	{r4, lr}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8001cae:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8001cb2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
 8001cb6:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8001cba:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
 8001cbe:	0084      	lsls	r4, r0, #2
{
 8001cc0:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8001cc4:	eee0 7a68 	vfms.f32	s15, s0, s17
 8001cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ccc:	f013 fb44 	bl	8015358 <fasterdbtoa>
 8001cd0:	4808      	ldr	r0, [pc, #32]	; (8001cf4 <tiltParam1+0x48>)
 8001cd2:	4420      	add	r0, r4
 8001cd4:	f012 fa76 	bl	80141c4 <tVZFilter_setGain>
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8001cd8:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 8001cdc:	eea8 0a28 	vfma.f32	s0, s16, s17
 8001ce0:	f013 fb3a 	bl	8015358 <fasterdbtoa>
 8001ce4:	4804      	ldr	r0, [pc, #16]	; (8001cf8 <tiltParam1+0x4c>)
}
 8001ce6:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8001cea:	4420      	add	r0, r4
}
 8001cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8001cf0:	f012 ba68 	b.w	80141c4 <tVZFilter_setGain>
 8001cf4:	20004a98 	.word	0x20004a98
 8001cf8:	20004ab8 	.word	0x20004ab8

08001cfc <tiltParam2>:

void __ATTR_ITCMRAM  tiltParam2(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8001cfc:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8001d00:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001d34 <tiltParam2+0x38>
 8001d04:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8001d38 <tiltParam2+0x3c>
 8001d08:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8001d3c <tiltParam2+0x40>
 8001d0c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001d10:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001d40 <tiltParam2+0x44>
{
 8001d14:	b538      	push	{r3, r4, r5, lr}
 8001d16:	4605      	mov	r5, r0
 8001d18:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8001d1a:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&bell1[v][string], value);
 8001d1e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8001d22:	f013 f9cd 	bl	80150c0 <LEAF_clip>
	tVZFilter_setFreqFast(&bell1[v][string], value);
 8001d26:	4807      	ldr	r0, [pc, #28]	; (8001d44 <tiltParam2+0x48>)
 8001d28:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8001d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&bell1[v][string], value);
 8001d30:	f012 b8ea 	b.w	8013f08 <tVZFilter_setFreqFast>
 8001d34:	429a0000 	.word	0x429a0000
 8001d38:	420fb824 	.word	0x420fb824
 8001d3c:	457ff000 	.word	0x457ff000
 8001d40:	00000000 	.word	0x00000000
 8001d44:	2000035c 	.word	0x2000035c

08001d48 <tiltParam3>:
void __ATTR_ITCMRAM  tiltParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
 8001d48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <tiltParam3+0x20>)
 8001d4e:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8001d52:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001d56:	ee30 0a07 	vadd.f32	s0, s0, s14
 8001d5a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001d5e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001d62:	f012 ba4b 	b.w	80141fc <tVZFilter_setResonance>
 8001d66:	bf00      	nop
 8001d68:	2000035c 	.word	0x2000035c

08001d6c <tiltParam4>:
}
void __ATTR_ITCMRAM  tiltParam4(float value, int v, int string)
{
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8001d6c:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
 8001d70:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001d98 <tiltParam4+0x2c>
{
 8001d74:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8001d76:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8001d7a:	4605      	mov	r5, r0
 8001d7c:	460c      	mov	r4, r1
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8001d7e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8001d82:	eeb0 0a67 	vmov.f32	s0, s15
 8001d86:	f013 fadf 	bl	8015348 <fastdbtoa>
 8001d8a:	4804      	ldr	r0, [pc, #16]	; (8001d9c <tiltParam4+0x30>)
 8001d8c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8001d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8001d94:	f012 ba16 	b.w	80141c4 <tVZFilter_setGain>
 8001d98:	42080000 	.word	0x42080000
 8001d9c:	2000035c 	.word	0x2000035c

08001da0 <compressorParam1>:

void __ATTR_ITCMRAM  compressorParam1(float value, int v, int string)
{
	comp[v][string]->T = value*-24.0f;
 8001da0:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <compressorParam1+0x18>)
 8001da6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001daa:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001dae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001db2:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8001db6:	4770      	bx	lr
 8001db8:	20000380 	.word	0x20000380

08001dbc <compressorParam2>:
void __ATTR_ITCMRAM  compressorParam2(float value, int v, int string)
{
	comp[v][string]->R = ((value*10.0f)+1.0f);
 8001dbc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <compressorParam2+0x30>)
 8001dc2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001dc6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001dca:	eeb0 7a67 	vmov.f32	s14, s15
 8001dce:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001dd2:	eea0 7a26 	vfma.f32	s14, s0, s13
 8001dd6:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
 8001dda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001dde:	edd3 6a04 	vldr	s13, [r3, #16]
 8001de2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001de6:	ed83 7a07 	vstr	s14, [r3, #28]
}
 8001dea:	4770      	bx	lr
 8001dec:	20000380 	.word	0x20000380

08001df0 <compressorParam3>:

void __ATTR_ITCMRAM  compressorParam3(float value, int v, int string)
{
	comp[v][string]->M = value * 18.0f;
 8001df0:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <compressorParam3+0x18>)
 8001df6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001dfa:	ee20 0a27 	vmul.f32	s0, s0, s15
 8001dfe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001e02:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8001e06:	4770      	bx	lr
 8001e08:	20000380 	.word	0x20000380

08001e0c <compressorParam4>:

void __ATTR_ITCMRAM  compressorParam4(float value, int v, int string)
{
	value = (value +  0.001f);
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001e0c:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <compressorParam4+0x30>)
 8001e0e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
 8001e12:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001e40 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001e16:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 8001e1a:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001e1c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
 8001e20:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001e24:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8001e28:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001e2c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001e30:	f013 f8b2 	bl	8014f98 <fasterexpf>
 8001e34:	ed84 0a01 	vstr	s0, [r4, #4]
}
 8001e38:	bd10      	pop	{r4, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000380 	.word	0x20000380
 8001e40:	3a83126f 	.word	0x3a83126f

08001e44 <compressorParam5>:

void __ATTR_ITCMRAM  compressorParam5(float value, int v, int string)
{
	value = (value + 0.001f);
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <compressorParam5+0x30>)
 8001e46:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
 8001e4a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001e78 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001e4e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 8001e52:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001e54:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
 8001e58:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8001e5c:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8001e60:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001e64:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001e68:	f013 f896 	bl	8014f98 <fasterexpf>
 8001e6c:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8001e70:	bd10      	pop	{r4, pc}
 8001e72:	bf00      	nop
 8001e74:	20000380 	.word	0x20000380
 8001e78:	3a83126f 	.word	0x3a83126f

08001e7c <offsetParam2>:

void __ATTR_ITCMRAM  offsetParam2(float value, int v, int string)
{
	param2[v][string] = (value * 2.0f) - 1.0f;
 8001e7c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <offsetParam2+0x1c>)
 8001e82:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001e86:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001e8a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001e8e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001e92:	edc3 7a00 	vstr	s15, [r3]
}
 8001e96:	4770      	bx	lr
 8001e98:	20004908 	.word	0x20004908

08001e9c <param2Linear>:
void __ATTR_ITCMRAM param2Linear(float value, int v, int string)
{
	param2[v][string] = value;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <param2Linear+0x10>)
 8001e9e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001ea2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001ea6:	ed83 0a00 	vstr	s0, [r3]
}
 8001eaa:	4770      	bx	lr
 8001eac:	20004908 	.word	0x20004908

08001eb0 <param3Linear>:
void __ATTR_ITCMRAM param3Linear(float value, int v, int string)
{
	param3[v][string] = value;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <param3Linear+0x10>)
 8001eb2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001eb6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001eba:	ed83 0a00 	vstr	s0, [r3]
}
 8001ebe:	4770      	bx	lr
 8001ec0:	20004928 	.word	0x20004928

08001ec4 <param3Soft>:
void __ATTR_ITCMRAM param3Soft(float value, int v, int string)
{
	param3[v][string] = (value * .99f) + 0.01f;
 8001ec4:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001f08 <param3Soft+0x44>
 8001ec8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ecc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8001f0c <param3Soft+0x48>
 8001ed0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8001ed4:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8001f10 <param3Soft+0x4c>
 8001ed8:	eee0 7a26 	vfma.f32	s15, s0, s13
 8001edc:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <param3Soft+0x50>)
 8001ede:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
 8001ee4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8001ee8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001eec:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
 8001ef0:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8001ef4:	eee5 6a86 	vfma.f32	s13, s11, s12
 8001ef8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001efc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f00:	edc1 6a00 	vstr	s13, [r1]
}
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	3f7d70a4 	.word	0x3f7d70a4
 8001f0c:	3c23d70a 	.word	0x3c23d70a
 8001f10:	3eaaaaaa 	.word	0x3eaaaaaa
 8001f14:	20004928 	.word	0x20004928
 8001f18:	20004a6c 	.word	0x20004a6c

08001f1c <param3Hard>:

void __ATTR_ITCMRAM param3Hard(float value, int v, int string)
{
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8001f1c:	eddf 6a17 	vldr	s13, [pc, #92]	; 8001f7c <param3Hard+0x60>
 8001f20:	eddf 7a17 	vldr	s15, [pc, #92]	; 8001f80 <param3Hard+0x64>
 8001f24:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001f84 <param3Hard+0x68>
 8001f28:	eee0 7a26 	vfma.f32	s15, s0, s13
{
 8001f2c:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <param3Hard+0x6c>)
 8001f30:	0045      	lsls	r5, r0, #1
 8001f32:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
 8001f36:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8001f38:	ee27 0a87 	vmul.f32	s0, s15, s14
 8001f3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001f40:	ed80 0a00 	vstr	s0, [r0]
	float tempDiv = arm_sin_f32(param3[v][string]);
 8001f44:	f018 f8f2 	bl	801a12c <arm_sin_f32>
	if (tempDiv == 0.0f)
 8001f48:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f50:	d00a      	beq.n	8001f68 <param3Hard+0x4c>
	{
		tempDiv = 0.001f;
	}
	shapeDividerH[v][string] = 1.0f/tempDiv;
 8001f52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <param3Hard+0x70>)
 8001f58:	442c      	add	r4, r5
 8001f5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8001f5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001f62:	edc4 7a00 	vstr	s15, [r4]
}
 8001f66:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <param3Hard+0x70>)
 8001f6a:	442c      	add	r4, r5
 8001f6c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8001f90 <param3Hard+0x74>
 8001f70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8001f74:	edc4 7a00 	vstr	s15, [r4]
}
 8001f78:	bd38      	pop	{r3, r4, r5, pc}
 8001f7a:	bf00      	nop
 8001f7c:	3f7d70a4 	.word	0x3f7d70a4
 8001f80:	3c23d70a 	.word	0x3c23d70a
 8001f84:	3fc90fdb 	.word	0x3fc90fdb
 8001f88:	20004928 	.word	0x20004928
 8001f8c:	20004a4c 	.word	0x20004a4c
 8001f90:	4479ffff 	.word	0x4479ffff

08001f94 <param4Linear>:
void __ATTR_ITCMRAM param4Linear(float value, int v, int string)
{
	param4[v][string] = value;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <param4Linear+0x10>)
 8001f96:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001f9a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001f9e:	ed83 0a00 	vstr	s0, [r3]
}
 8001fa2:	4770      	bx	lr
 8001fa4:	20004948 	.word	0x20004948

08001fa8 <param5Linear>:

void __ATTR_ITCMRAM param5Linear(float value, int v, int string)
{
	param5[v][string] = value;
 8001fa8:	4b03      	ldr	r3, [pc, #12]	; (8001fb8 <param5Linear+0x10>)
 8001faa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001fae:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001fb2:	ed83 0a00 	vstr	s0, [r3]
}
 8001fb6:	4770      	bx	lr
 8001fb8:	20004968 	.word	0x20004968

08001fbc <param3BC>:
{
	tCrusher_setQuality (&bc[v][string],value);
}
void __ATTR_ITCMRAM param3BC(float value, int v, int string)
{
	value = (value * inv_oversample) + 0.01f;
 8001fbc:	4a07      	ldr	r2, [pc, #28]	; (8001fdc <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
 8001fbe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
 8001fc2:	eddf 7a07 	vldr	s15, [pc, #28]	; 8001fe0 <param3BC+0x24>
 8001fc6:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <param3BC+0x28>)
 8001fcc:	eee7 7a00 	vfma.f32	s15, s14, s0
 8001fd0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd8:	f011 b97c 	b.w	80132d4 <tCrusher_setSamplingRatio>
 8001fdc:	2000005c 	.word	0x2000005c
 8001fe0:	3c23d70a 	.word	0x3c23d70a
 8001fe4:	2000033c 	.word	0x2000033c

08001fe8 <fxMixSet>:



void __ATTR_ITCMRAM fxMixSet(float value, int v, int string)
{
	fxMix[v][string] = value;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <fxMixSet+0x10>)
 8001fea:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8001fee:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8001ff2:	ed83 0a00 	vstr	s0, [r3]
}
 8001ff6:	4770      	bx	lr
 8001ff8:	200044cc 	.word	0x200044cc

08001ffc <fxPostGainSet>:

void __ATTR_ITCMRAM fxPostGainSet(float value, int v, int string)
{
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 8001ffc:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002000:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
 8002004:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 8002006:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800200a:	4605      	mov	r5, r0
 800200c:	460c      	mov	r4, r1
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 800200e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002012:	eeb0 0a67 	vmov.f32	s0, s15
 8002016:	f013 f99f 	bl	8015358 <fasterdbtoa>
 800201a:	4b03      	ldr	r3, [pc, #12]	; (8002028 <fxPostGainSet+0x2c>)
 800201c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8002020:	ed84 0a00 	vstr	s0, [r4]
}
 8002024:	bd38      	pop	{r3, r4, r5, pc}
 8002026:	bf00      	nop
 8002028:	200044ec 	.word	0x200044ec

0800202c <wavefolderTick>:


//got the idea from https://ccrma.stanford.edu/~jatin/ComplexNonlinearities/Wavefolder.html  -JS
//much more efficient than the lockhart, and can be further optimized with lookups
float __ATTR_ITCMRAM wavefolderTick(float sample, int v, int string)
{
 800202c:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 800202e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    ffSample *= 1.499999f;
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);

    //softclip approx for tanh saturation in original code
    float fbSample = wfState[v][string];
 8002032:	4d36      	ldr	r5, [pc, #216]	; (800210c <wavefolderTick+0xe0>)
 8002034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8002038:	4b35      	ldr	r3, [pc, #212]	; (8002110 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
 800203a:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800203e:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8002042:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002046:	4a33      	ldr	r2, [pc, #204]	; (8002114 <wavefolderTick+0xe8>)
 8002048:	ed9f 4a33 	vldr	s8, [pc, #204]	; 8002118 <wavefolderTick+0xec>
 800204c:	0084      	lsls	r4, r0, #2
 800204e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    {
    	fbSample = 1.0f;
    }
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    fbSample *= 1.499999f;
    float fb = curFB * fbSample;
 8002052:	eddf 3a32 	vldr	s7, [pc, #200]	; 800211c <wavefolderTick+0xf0>
{
 8002056:	ed2d 8b02 	vpush	{d8}
 800205a:	ed95 8a00 	vldr	s16, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 800205e:	ed93 6a00 	vldr	s12, [r3]
 8002062:	fe88 8a66 	vminnm.f32	s16, s16, s13
 8002066:	fe88 8a24 	vmaxnm.f32	s16, s16, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
 800206a:	ee68 7a08 	vmul.f32	s15, s16, s16
    float curFB = param3[v][string];
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8002070:	ee30 0a06 	vadd.f32	s0, s0, s12
 8002074:	ed92 6a00 	vldr	s12, [r2]
    float curFB = param3[v][string];
 8002078:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
 800207c:	4a29      	ldr	r2, [pc, #164]	; (8002124 <wavefolderTick+0xf8>)
 800207e:	ee67 5a84 	vmul.f32	s11, s15, s8
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8002082:	ee20 6a06 	vmul.f32	s12, s0, s12
    float fb = curFB * fbSample;
 8002086:	edd3 7a00 	vldr	s15, [r3]
    float curFF = param4[v][string];
 800208a:	eb02 0280 	add.w	r2, r2, r0, lsl #2

    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 800208e:	4b26      	ldr	r3, [pc, #152]	; (8002128 <wavefolderTick+0xfc>)
 8002090:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8002094:	ed9f 0a25 	vldr	s0, [pc, #148]	; 800212c <wavefolderTick+0x100>
 8002098:	fe86 7a66 	vminnm.f32	s14, s12, s13
    float fb = curFB * fbSample;
 800209c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80020a0:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
 80020a4:	ee67 4a07 	vmul.f32	s9, s14, s14
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
 80020a8:	ee28 8a25 	vmul.f32	s16, s16, s11
    float curFF = param4[v][string];
 80020ac:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 80020b0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80020b4:	ee26 0a00 	vmul.f32	s0, s12, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
 80020b8:	ee36 3ac5 	vsub.f32	s6, s13, s10
 80020bc:	ee64 5a84 	vmul.f32	s11, s9, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 80020c0:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
 80020c4:	ee67 7a88 	vmul.f32	s15, s15, s16
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 80020c8:	ee25 5a23 	vmul.f32	s10, s10, s7
 80020cc:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80020d0:	eee3 7a06 	vfma.f32	s15, s6, s12
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
 80020d4:	ee27 7a26 	vmul.f32	s14, s14, s13
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 80020d8:	eee7 7a05 	vfma.f32	s15, s14, s10
 80020dc:	eeb0 8a67 	vmov.f32	s16, s15
 80020e0:	f018 f824 	bl	801a12c <arm_sin_f32>
    sample = wfState[v][string] * invCurFB[v][string];
 80020e4:	4b12      	ldr	r3, [pc, #72]	; (8002130 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 80020e6:	4813      	ldr	r0, [pc, #76]	; (8002134 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 80020e8:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
 80020ec:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 80020ee:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
 80020f0:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 80020f4:	eee8 7ac0 	vfms.f32	s15, s17, s0
 80020f8:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 80020fc:	ee27 0a87 	vmul.f32	s0, s15, s14
    return sample;
}
 8002100:	ecbd 8b02 	vpop	{d8}
 8002104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002108:	f011 bce8 	b.w	8013adc <tHighpass_tick>
 800210c:	20012f58 	.word	0x20012f58
 8002110:	20004908 	.word	0x20004908
 8002114:	200048e8 	.word	0x200048e8
 8002118:	3eaaaaaa 	.word	0x3eaaaaaa
 800211c:	3fbffff8 	.word	0x3fbffff8
 8002120:	20004928 	.word	0x20004928
 8002124:	20004948 	.word	0x20004948
 8002128:	20004968 	.word	0x20004968
 800212c:	40c90fdb 	.word	0x40c90fdb
 8002130:	20004520 	.word	0x20004520
 8002134:	200003a0 	.word	0x200003a0

08002138 <chorusParam1>:

void __ATTR_ITCMRAM chorusParam1(float value, int v, int string)
{
	param1[v][string] = value * 5780.0f + 10.0f;
 8002138:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800213c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002154 <chorusParam1+0x1c>
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <chorusParam1+0x20>)
 8002142:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002146:	eee0 7a07 	vfma.f32	s15, s0, s14
 800214a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800214e:	edc3 7a00 	vstr	s15, [r3]
}
 8002152:	4770      	bx	lr
 8002154:	45b4a000 	.word	0x45b4a000
 8002158:	200048e8 	.word	0x200048e8

0800215c <chorusParam2>:
void __ATTR_ITCMRAM chorusParam2(float value, int v, int string)
{
	param2[v][string] = value * 0.1f;
 800215c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8002174 <chorusParam2+0x18>
 8002160:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002164:	4b04      	ldr	r3, [pc, #16]	; (8002178 <chorusParam2+0x1c>)
 8002166:	ee20 0a27 	vmul.f32	s0, s0, s15
 800216a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800216e:	ed83 0a00 	vstr	s0, [r3]
}
 8002172:	4770      	bx	lr
 8002174:	3dcccccd 	.word	0x3dcccccd
 8002178:	20004908 	.word	0x20004908

0800217c <chorusParam3>:

void __ATTR_ITCMRAM chorusParam3(float value, int v, int string)
{
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
 800217c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800219c <chorusParam3+0x20>
 8002180:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002184:	eddf 7a06 	vldr	s15, [pc, #24]	; 80021a0 <chorusParam3+0x24>
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <chorusParam3+0x28>)
 800218a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800218e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002192:	eeb0 0a67 	vmov.f32	s0, s15
 8002196:	f013 ba9b 	b.w	80156d0 <tCycle_setFreq>
 800219a:	bf00      	nop
 800219c:	3ecccccd 	.word	0x3ecccccd
 80021a0:	3c23d70a 	.word	0x3c23d70a
 80021a4:	20004828 	.word	0x20004828

080021a8 <chorusParam4>:
}

void __ATTR_ITCMRAM chorusParam4(float value, int v, int string)
{
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
 80021a8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80021c8 <chorusParam4+0x20>
 80021ac:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80021b0:	eddf 7a06 	vldr	s15, [pc, #24]	; 80021cc <chorusParam4+0x24>
 80021b4:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <chorusParam4+0x28>)
 80021b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80021ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80021be:	eeb0 0a67 	vmov.f32	s0, s15
 80021c2:	f013 ba85 	b.w	80156d0 <tCycle_setFreq>
 80021c6:	bf00      	nop
 80021c8:	3ee38e37 	.word	0x3ee38e37
 80021cc:	3c343958 	.word	0x3c343958
 80021d0:	20004848 	.word	0x20004848

080021d4 <chorusTick>:
}


float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
 80021da:	4f28      	ldr	r7, [pc, #160]	; (800227c <chorusTick+0xa8>)
 80021dc:	4e28      	ldr	r6, [pc, #160]	; (8002280 <chorusTick+0xac>)
 80021de:	4829      	ldr	r0, [pc, #164]	; (8002284 <chorusTick+0xb0>)
 80021e0:	eb07 0781 	add.w	r7, r7, r1, lsl #2
 80021e4:	eb06 0681 	add.w	r6, r6, r1, lsl #2
 80021e8:	4d27      	ldr	r5, [pc, #156]	; (8002288 <chorusTick+0xb4>)
 80021ea:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80021ee:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 80021f2:	008c      	lsls	r4, r1, #2
{
 80021f4:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
 80021f8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80021fc:	ed97 9a00 	vldr	s18, [r7]
{
 8002200:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
 8002204:	edd6 9a00 	vldr	s19, [r6]
 8002208:	f013 fa3c 	bl	8015684 <tCycle_tick>
 800220c:	4628      	mov	r0, r5
 800220e:	eef0 7a48 	vmov.f32	s15, s16
 8002212:	eee9 7a80 	vfma.f32	s15, s19, s0
 8002216:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800228c <chorusTick+0xb8>
 800221a:	ee29 0a00 	vmul.f32	s0, s18, s0
 800221e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002222:	f010 fea5 	bl	8012f70 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
 8002226:	481a      	ldr	r0, [pc, #104]	; (8002290 <chorusTick+0xbc>)
 8002228:	491a      	ldr	r1, [pc, #104]	; (8002294 <chorusTick+0xc0>)
 800222a:	edd6 9a00 	vldr	s19, [r6]
 800222e:	4420      	add	r0, r4
 8002230:	ed97 9a00 	vldr	s18, [r7]
 8002234:	440c      	add	r4, r1
 8002236:	f013 fa25 	bl	8015684 <tCycle_tick>
 800223a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800223e:	eea9 8ac0 	vfms.f32	s16, s19, s0
 8002242:	4620      	mov	r0, r4
 8002244:	ee29 0a27 	vmul.f32	s0, s18, s15
 8002248:	ee20 0a08 	vmul.f32	s0, s0, s16
 800224c:	f010 fe90 	bl	8012f70 <tLinearDelay_setDelay>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
 8002250:	eeb0 0a68 	vmov.f32	s0, s17
 8002254:	4628      	mov	r0, r5
 8002256:	f010 fe53 	bl	8012f00 <tLinearDelay_tick>
 800225a:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
 800225e:	4620      	mov	r0, r4
 8002260:	eeb0 0a68 	vmov.f32	s0, s17
 8002264:	f010 fe4c 	bl	8012f00 <tLinearDelay_tick>
    //temp = tHighpass_tick(&dcBlock1[v], temp);
    return -temp;
 8002268:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800226c:	ee38 0a00 	vadd.f32	s0, s16, s0
}
 8002270:	ee98 0aa7 	vfnms.f32	s0, s17, s15
 8002274:	ecbd 8b04 	vpop	{d8-d9}
 8002278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800227a:	bf00      	nop
 800227c:	200048e8 	.word	0x200048e8
 8002280:	20004908 	.word	0x20004908
 8002284:	20004828 	.word	0x20004828
 8002288:	200043e4 	.word	0x200043e4
 800228c:	3f34fdf4 	.word	0x3f34fdf4
 8002290:	20004848 	.word	0x20004848
 8002294:	20004404 	.word	0x20004404

08002298 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 8002298:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800229c:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <shaperTick+0x40>)
    sample = sample * param1[v][string];
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 80022a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
 80022a4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 80022a8:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 80022aa:	edd2 7a00 	vldr	s15, [r2]
 80022ae:	008c      	lsls	r4, r1, #2
 80022b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80022b4:	edd3 7a00 	vldr	s15, [r3]
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <shaperTick+0x48>)
 80022ba:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80022be:	ee20 0a27 	vmul.f32	s0, s0, s15
 80022c2:	edd1 0a00 	vldr	s1, [r1]
 80022c6:	f012 fe97 	bl	8014ff8 <LEAF_shaper>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 80022ca:	4806      	ldr	r0, [pc, #24]	; (80022e4 <shaperTick+0x4c>)
 80022cc:	4420      	add	r0, r4
    return temp;
}
 80022ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 80022d2:	f011 bc03 	b.w	8013adc <tHighpass_tick>
 80022d6:	bf00      	nop
 80022d8:	20004908 	.word	0x20004908
 80022dc:	200048e8 	.word	0x200048e8
 80022e0:	20004928 	.word	0x20004928
 80022e4:	200003a0 	.word	0x200003a0

080022e8 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop

080022ec <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
 80022ec:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <tiltFilterTick+0x28>)
{
 80022f2:	b510      	push	{r4, lr}
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
 80022f4:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 80022f8:	008c      	lsls	r4, r1, #2
 80022fa:	f011 fbff 	bl	8013afc <tVZFilter_tickEfficient>
    sample = tVZFilter_tickEfficient(&shelf2[v][string], sample);
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <tiltFilterTick+0x2c>)
 8002300:	4420      	add	r0, r4
 8002302:	f011 fbfb 	bl	8013afc <tVZFilter_tickEfficient>
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <tiltFilterTick+0x30>)
 8002308:	4420      	add	r0, r4
    return sample;
}
 800230a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
 800230e:	f011 bbf5 	b.w	8013afc <tVZFilter_tickEfficient>
 8002312:	bf00      	nop
 8002314:	20004a98 	.word	0x20004a98
 8002318:	20004ab8 	.word	0x20004ab8
 800231c:	2000035c 	.word	0x2000035c

08002320 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
 8002320:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
 8002324:	4b10      	ldr	r3, [pc, #64]	; (8002368 <tanhTick+0x48>)
 8002326:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
 800232a:	4810      	ldr	r0, [pc, #64]	; (800236c <tanhTick+0x4c>)
    float temp = tanhf(sample + (param2[v][string]*gain));
 800232c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 8002330:	b510      	push	{r4, lr}
 8002332:	edd3 6a00 	vldr	s13, [r3]
    float gain = param1[v][string];
 8002336:	008c      	lsls	r4, r1, #2
 8002338:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800233c:	eea6 0a87 	vfma.f32	s0, s13, s14
 8002340:	edd1 7a00 	vldr	s15, [r1]
    float temp = tanhf(sample + (param2[v][string]*gain));
 8002344:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002348:	f018 fb9a 	bl	801aa80 <tanhf>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 800234c:	4808      	ldr	r0, [pc, #32]	; (8002370 <tanhTick+0x50>)
 800234e:	4420      	add	r0, r4
 8002350:	f011 fbc4 	bl	8013adc <tHighpass_tick>
    temp *= param4[v][string];
 8002354:	4b07      	ldr	r3, [pc, #28]	; (8002374 <tanhTick+0x54>)
 8002356:	4423      	add	r3, r4
 8002358:	edd3 7a00 	vldr	s15, [r3]
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
 800235c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
 8002360:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002364:	f018 bb8c 	b.w	801aa80 <tanhf>
 8002368:	20004908 	.word	0x20004908
 800236c:	200048e8 	.word	0x200048e8
 8002370:	200003a0 	.word	0x200003a0
 8002374:	20004948 	.word	0x20004948

08002378 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
 8002378:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    sample = sample + param2[v][string];
 800237c:	4a19      	ldr	r2, [pc, #100]	; (80023e4 <softClipTick+0x6c>)
    float shape = param3[v][string];
 800237e:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <softClipTick+0x70>)
    sample = sample + param2[v][string];
 8002380:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002384:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002388:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80023ec <softClipTick+0x74>
    float shape = param3[v][string];
 800238c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8002390:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    {
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
        sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002394:	4816      	ldr	r0, [pc, #88]	; (80023f0 <softClipTick+0x78>)
{
 8002396:	b410      	push	{r4}
    sample = sample * param1[v][string];
 8002398:	4c16      	ldr	r4, [pc, #88]	; (80023f4 <softClipTick+0x7c>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 800239a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample + param2[v][string];
 800239e:	edd2 7a00 	vldr	s15, [r2]
    sample = sample * param1[v][string];
 80023a2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    float shape = param3[v][string];
 80023a6:	edd3 6a00 	vldr	s13, [r3]
        sample = sample * shapeDividerS[v][string];
 80023aa:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <softClipTick+0x80>)
    sample = sample + param2[v][string];
 80023ac:	ed94 5a00 	vldr	s10, [r4]
 80023b0:	ee26 7a87 	vmul.f32	s14, s13, s14
        sample = sample * shapeDividerS[v][string];
 80023b4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return sample;
}
 80023b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    sample = sample + param2[v][string];
 80023bc:	eee5 7a00 	vfma.f32	s15, s10, s0
        sample = sample * shapeDividerS[v][string];
 80023c0:	ed93 0a00 	vldr	s0, [r3]
 80023c4:	fec7 7ae5 	vminnm.f32	s15, s15, s11
 80023c8:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
 80023cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023d4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80023d8:	ee67 7a87 	vmul.f32	s15, s15, s14
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 80023dc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80023e0:	f011 bb7c 	b.w	8013adc <tHighpass_tick>
 80023e4:	20004908 	.word	0x20004908
 80023e8:	20004928 	.word	0x20004928
 80023ec:	3eaaaaaa 	.word	0x3eaaaaaa
 80023f0:	200003a0 	.word	0x200003a0
 80023f4:	200048e8 	.word	0x200048e8
 80023f8:	20004a6c 	.word	0x20004a6c

080023fc <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
 80023fc:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002400:	4a1a      	ldr	r2, [pc, #104]	; (800246c <hardClipTick+0x70>)
    sample = sample + param2[v][string];
 8002402:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <hardClipTick+0x74>)
 8002404:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
 8002408:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 800240c:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
 8002410:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
 8002414:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
 8002416:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
 800241a:	0084      	lsls	r4, r0, #2
    sample = sample + param2[v][string];
 800241c:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 8002420:	4e14      	ldr	r6, [pc, #80]	; (8002474 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
 8002422:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 8002426:	4d14      	ldr	r5, [pc, #80]	; (8002478 <hardClipTick+0x7c>)
 8002428:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 800242c:	4425      	add	r5, r4
 800242e:	ed96 7a00 	vldr	s14, [r6]
 8002432:	fec7 7ac6 	vminnm.f32	s15, s15, s12
 8002436:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 800243a:	ee27 0a87 	vmul.f32	s0, s15, s14
 800243e:	f017 fe75 	bl	801a12c <arm_sin_f32>
 8002442:	ed96 7a00 	vldr	s14, [r6]
 8002446:	edd5 7a00 	vldr	s15, [r5]
 800244a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800244e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002452:	f017 fe6b 	bl	801a12c <arm_sin_f32>
        sample = sample * shapeDividerH[v][string];
 8002456:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 800245a:	4808      	ldr	r0, [pc, #32]	; (800247c <hardClipTick+0x80>)
 800245c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002460:	4420      	add	r0, r4
    return sample;
}
 8002462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 8002466:	f011 bb39 	b.w	8013adc <tHighpass_tick>
 800246a:	bf00      	nop
 800246c:	200048e8 	.word	0x200048e8
 8002470:	20004908 	.word	0x20004908
 8002474:	20004928 	.word	0x20004928
 8002478:	20004a4c 	.word	0x20004a4c
 800247c:	200003a0 	.word	0x200003a0

08002480 <satTick>:


float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
 8002480:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8002484:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <satTick+0x64>)
    sample = sample * param1[v][string];
 8002486:	4a18      	ldr	r2, [pc, #96]	; (80024e8 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8002488:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800248c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8002490:	4816      	ldr	r0, [pc, #88]	; (80024ec <satTick+0x6c>)
    sample = sample * param1[v][string];
 8002492:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8002496:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
 800249a:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 800249c:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
 80024a0:	008c      	lsls	r4, r1, #2
 80024a2:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 80024a6:	eeb0 6a47 	vmov.f32	s12, s14
 80024aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024ae:	eea7 6a80 	vfma.f32	s12, s15, s0
 80024b2:	eea7 7a80 	vfma.f32	s14, s15, s0
 80024b6:	eeb0 6ac6 	vabs.f32	s12, s12
 80024ba:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80024be:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80024c2:	ee36 6b05 	vadd.f64	d6, d6, d5
 80024c6:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 80024ca:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80024ce:	f011 fb05 	bl	8013adc <tHighpass_tick>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
 80024d2:	4807      	ldr	r0, [pc, #28]	; (80024f0 <satTick+0x70>)
 80024d4:	4420      	add	r0, r4
 80024d6:	f011 fb01 	bl	8013adc <tHighpass_tick>
    temp = LEAF_tanh(temp);
    return temp;
}
 80024da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
 80024de:	f012 be03 	b.w	80150e8 <LEAF_tanh>
 80024e2:	bf00      	nop
 80024e4:	20004908 	.word	0x20004908
 80024e8:	200048e8 	.word	0x200048e8
 80024ec:	200003a0 	.word	0x200003a0
 80024f0:	200003c0 	.word	0x200003c0

080024f4 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
 80024f4:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
 80024fa:	4806      	ldr	r0, [pc, #24]	; (8002514 <bcTick+0x20>)
    sample = sample * param1[v][string];
 80024fc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
 8002500:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
 8002504:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
 8002508:	ee20 0a27 	vmul.f32	s0, s0, s15
 800250c:	f010 bea2 	b.w	8013254 <tCrusher_tick>
 8002510:	200048e8 	.word	0x200048e8
 8002514:	2000033c 	.word	0x2000033c

08002518 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
 8002518:	4b03      	ldr	r3, [pc, #12]	; (8002528 <compressorTick+0x10>)
 800251a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800251e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002522:	f010 bf2f 	b.w	8013384 <tCompressor_tick>
 8002526:	bf00      	nop
 8002528:	20000380 	.word	0x20000380

0800252c <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <FXlowpassTick+0x10>)
 800252e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002532:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002536:	f011 ba27 	b.w	8013988 <tSVF_tick>
 800253a:	bf00      	nop
 800253c:	200002ac 	.word	0x200002ac

08002540 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <FXhighpassTick+0x10>)
 8002542:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002546:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800254a:	f011 ba1d 	b.w	8013988 <tSVF_tick>
 800254e:	bf00      	nop
 8002550:	2000028c 	.word	0x2000028c

08002554 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <FXbandpassTick+0x10>)
 8002556:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800255a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800255e:	f011 ba13 	b.w	8013988 <tSVF_tick>
 8002562:	bf00      	nop
 8002564:	2000024c 	.word	0x2000024c

08002568 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <FXdiodeLowpassTick+0x10>)
 800256a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800256e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002572:	f011 bffd 	b.w	8014570 <tDiodeFilter_tick>
 8002576:	bf00      	nop
 8002578:	2000026c 	.word	0x2000026c

0800257c <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v][string], sample);
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <FXVZpeakTick+0x10>)
 800257e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002582:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002586:	f011 bab9 	b.w	8013afc <tVZFilter_tickEfficient>
 800258a:	bf00      	nop
 800258c:	2000022c 	.word	0x2000022c

08002590 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterLS[v][string], sample);
 8002590:	4b03      	ldr	r3, [pc, #12]	; (80025a0 <FXVZlowshelfTick+0x10>)
 8002592:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002596:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800259a:	f011 baaf 	b.w	8013afc <tVZFilter_tickEfficient>
 800259e:	bf00      	nop
 80025a0:	2000020c 	.word	0x2000020c

080025a4 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterHS[v][string], sample);
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <FXVZhighshelfTick+0x10>)
 80025a6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80025aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80025ae:	f011 baa5 	b.w	8013afc <tVZFilter_tickEfficient>
 80025b2:	bf00      	nop
 80025b4:	200001ec 	.word	0x200001ec

080025b8 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <FXVZbandrejectTick+0x10>)
 80025ba:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80025be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80025c2:	f011 ba9b 	b.w	8013afc <tVZFilter_tickEfficient>
 80025c6:	bf00      	nop
 80025c8:	200001cc 	.word	0x200001cc

080025cc <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <FXLadderLowpassTick+0x10>)
 80025ce:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80025d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80025d6:	f012 bb47 	b.w	8014c68 <tLadderFilter_tick>
 80025da:	bf00      	nop
 80025dc:	200001ac 	.word	0x200001ac

080025e0 <FXLowpassParam1>:
//cutoffparams

void FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80025e0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80025e4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002618 <FXLowpassParam1+0x38>
 80025e8:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800261c <FXLowpassParam1+0x3c>
 80025ec:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002620 <FXLowpassParam1+0x40>
 80025f0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80025f4:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002624 <FXLowpassParam1+0x44>
{
 80025f8:	b538      	push	{r3, r4, r5, lr}
 80025fa:	4605      	mov	r5, r0
 80025fc:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80025fe:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 8002602:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002606:	f012 fd5b 	bl	80150c0 <LEAF_clip>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 800260a:	4807      	ldr	r0, [pc, #28]	; (8002628 <FXLowpassParam1+0x48>)
 800260c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 8002614:	f011 b9ee 	b.w	80139f4 <tSVF_setFreqFast>
 8002618:	429a0000 	.word	0x429a0000
 800261c:	420fb824 	.word	0x420fb824
 8002620:	457ff000 	.word	0x457ff000
 8002624:	00000000 	.word	0x00000000
 8002628:	200002ac 	.word	0x200002ac

0800262c <FXHighpassParam1>:
void FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800262c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002630:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002664 <FXHighpassParam1+0x38>
 8002634:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002668 <FXHighpassParam1+0x3c>
 8002638:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800266c <FXHighpassParam1+0x40>
 800263c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002640:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002670 <FXHighpassParam1+0x44>
{
 8002644:	b538      	push	{r3, r4, r5, lr}
 8002646:	4605      	mov	r5, r0
 8002648:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800264a:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 800264e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002652:	f012 fd35 	bl	80150c0 <LEAF_clip>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 8002656:	4807      	ldr	r0, [pc, #28]	; (8002674 <FXHighpassParam1+0x48>)
 8002658:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800265c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 8002660:	f011 b9c8 	b.w	80139f4 <tSVF_setFreqFast>
 8002664:	429a0000 	.word	0x429a0000
 8002668:	420fb824 	.word	0x420fb824
 800266c:	457ff000 	.word	0x457ff000
 8002670:	00000000 	.word	0x00000000
 8002674:	2000028c 	.word	0x2000028c

08002678 <FXBandpassParam1>:

void FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002678:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800267c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80026b0 <FXBandpassParam1+0x38>
 8002680:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80026b4 <FXBandpassParam1+0x3c>
 8002684:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80026b8 <FXBandpassParam1+0x40>
 8002688:	eee0 7a07 	vfma.f32	s15, s0, s14
 800268c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80026bc <FXBandpassParam1+0x44>
{
 8002690:	b538      	push	{r3, r4, r5, lr}
 8002692:	4605      	mov	r5, r0
 8002694:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002696:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 800269a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800269e:	f012 fd0f 	bl	80150c0 <LEAF_clip>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 80026a2:	4807      	ldr	r0, [pc, #28]	; (80026c0 <FXBandpassParam1+0x48>)
 80026a4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80026a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 80026ac:	f011 b9a2 	b.w	80139f4 <tSVF_setFreqFast>
 80026b0:	429a0000 	.word	0x429a0000
 80026b4:	420fb824 	.word	0x420fb824
 80026b8:	457ff000 	.word	0x457ff000
 80026bc:	00000000 	.word	0x00000000
 80026c0:	2000024c 	.word	0x2000024c

080026c4 <FXDiodeParam1>:

void FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80026c4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80026c8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80026fc <FXDiodeParam1+0x38>
 80026cc:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002700 <FXDiodeParam1+0x3c>
 80026d0:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002704 <FXDiodeParam1+0x40>
 80026d4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80026d8:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002708 <FXDiodeParam1+0x44>
{
 80026dc:	b538      	push	{r3, r4, r5, lr}
 80026de:	4605      	mov	r5, r0
 80026e0:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80026e2:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 80026e6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80026ea:	f012 fce9 	bl	80150c0 <LEAF_clip>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 80026ee:	4807      	ldr	r0, [pc, #28]	; (800270c <FXDiodeParam1+0x48>)
 80026f0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80026f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 80026f8:	f012 ba3e 	b.w	8014b78 <tDiodeFilter_setFreqFast>
 80026fc:	429a0000 	.word	0x429a0000
 8002700:	420fb824 	.word	0x420fb824
 8002704:	457ff000 	.word	0x457ff000
 8002708:	00000000 	.word	0x00000000
 800270c:	2000026c 	.word	0x2000026c

08002710 <FXPeakParam1>:
void FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002710:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002714:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002748 <FXPeakParam1+0x38>
 8002718:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800274c <FXPeakParam1+0x3c>
 800271c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002750 <FXPeakParam1+0x40>
 8002720:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002724:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002754 <FXPeakParam1+0x44>
{
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	4605      	mov	r5, r0
 800272c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800272e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 8002732:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002736:	f012 fcc3 	bl	80150c0 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 800273a:	4807      	ldr	r0, [pc, #28]	; (8002758 <FXPeakParam1+0x48>)
 800273c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 8002744:	f011 bbe0 	b.w	8013f08 <tVZFilter_setFreqFast>
 8002748:	429a0000 	.word	0x429a0000
 800274c:	420fb824 	.word	0x420fb824
 8002750:	457ff000 	.word	0x457ff000
 8002754:	00000000 	.word	0x00000000
 8002758:	2000022c 	.word	0x2000022c

0800275c <FXLowShelfParam1>:
void FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800275c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002760:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002794 <FXLowShelfParam1+0x38>
 8002764:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002798 <FXLowShelfParam1+0x3c>
 8002768:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 800279c <FXLowShelfParam1+0x40>
 800276c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002770:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80027a0 <FXLowShelfParam1+0x44>
{
 8002774:	b538      	push	{r3, r4, r5, lr}
 8002776:	4605      	mov	r5, r0
 8002778:	460c      	mov	r4, r1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800277a:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 800277e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002782:	f012 fc9d 	bl	80150c0 <LEAF_clip>
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 8002786:	4807      	ldr	r0, [pc, #28]	; (80027a4 <FXLowShelfParam1+0x48>)
 8002788:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800278c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 8002790:	f011 bbba 	b.w	8013f08 <tVZFilter_setFreqFast>
 8002794:	429a0000 	.word	0x429a0000
 8002798:	420fb824 	.word	0x420fb824
 800279c:	457ff000 	.word	0x457ff000
 80027a0:	00000000 	.word	0x00000000
 80027a4:	2000020c 	.word	0x2000020c

080027a8 <FXHighShelfParam1>:
void FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80027a8:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80027ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80027e0 <FXHighShelfParam1+0x38>
 80027b0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80027e4 <FXHighShelfParam1+0x3c>
 80027b4:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80027e8 <FXHighShelfParam1+0x40>
 80027b8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80027bc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80027ec <FXHighShelfParam1+0x44>
{
 80027c0:	b538      	push	{r3, r4, r5, lr}
 80027c2:	4605      	mov	r5, r0
 80027c4:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80027c6:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 80027ca:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80027ce:	f012 fc77 	bl	80150c0 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 80027d2:	4807      	ldr	r0, [pc, #28]	; (80027f0 <FXHighShelfParam1+0x48>)
 80027d4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80027d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 80027dc:	f011 bb94 	b.w	8013f08 <tVZFilter_setFreqFast>
 80027e0:	429a0000 	.word	0x429a0000
 80027e4:	420fb824 	.word	0x420fb824
 80027e8:	457ff000 	.word	0x457ff000
 80027ec:	00000000 	.word	0x00000000
 80027f0:	200001ec 	.word	0x200001ec

080027f4 <FXNotchParam1>:
void FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80027f4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80027f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800282c <FXNotchParam1+0x38>
 80027fc:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002830 <FXNotchParam1+0x3c>
 8002800:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002834 <FXNotchParam1+0x40>
 8002804:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002808:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002838 <FXNotchParam1+0x44>
{
 800280c:	b538      	push	{r3, r4, r5, lr}
 800280e:	4605      	mov	r5, r0
 8002810:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002812:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 8002816:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800281a:	f012 fc51 	bl	80150c0 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 800281e:	4807      	ldr	r0, [pc, #28]	; (800283c <FXNotchParam1+0x48>)
 8002820:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 8002828:	f011 bb6e 	b.w	8013f08 <tVZFilter_setFreqFast>
 800282c:	429a0000 	.word	0x429a0000
 8002830:	420fb824 	.word	0x420fb824
 8002834:	457ff000 	.word	0x457ff000
 8002838:	00000000 	.word	0x00000000
 800283c:	200001cc 	.word	0x200001cc

08002840 <FXLadderParam1>:
void FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002840:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002844:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002878 <FXLadderParam1+0x38>
 8002848:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800287c <FXLadderParam1+0x3c>
 800284c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002880 <FXLadderParam1+0x40>
 8002850:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002854:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002884 <FXLadderParam1+0x44>
{
 8002858:	b538      	push	{r3, r4, r5, lr}
 800285a:	4605      	mov	r5, r0
 800285c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800285e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 8002862:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002866:	f012 fc2b 	bl	80150c0 <LEAF_clip>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 800286a:	4807      	ldr	r0, [pc, #28]	; (8002888 <FXLadderParam1+0x48>)
 800286c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 8002874:	f012 bb1e 	b.w	8014eb4 <tLadderFilter_setFreqFast>
 8002878:	429a0000 	.word	0x429a0000
 800287c:	420fb824 	.word	0x420fb824
 8002880:	457ff000 	.word	0x457ff000
 8002884:	00000000 	.word	0x00000000
 8002888:	200001ac 	.word	0x200001ac

0800288c <FXPeakParam2>:

//gain params

void FXPeakParam2(float value, int v, int string)
{
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800288c:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8002890:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80028b8 <FXPeakParam2+0x2c>
{
 8002894:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002896:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800289a:	4605      	mov	r5, r0
 800289c:	460c      	mov	r4, r1
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800289e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	f012 fd57 	bl	8015358 <fasterdbtoa>
 80028aa:	4804      	ldr	r0, [pc, #16]	; (80028bc <FXPeakParam2+0x30>)
 80028ac:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80028b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80028b4:	f011 bc86 	b.w	80141c4 <tVZFilter_setGain>
 80028b8:	42480000 	.word	0x42480000
 80028bc:	2000022c 	.word	0x2000022c

080028c0 <FXLowShelfParam2>:

void FXLowShelfParam2(float value, int v, int string)
{
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80028c0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 80028c4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80028ec <FXLowShelfParam2+0x2c>
{
 80028c8:	b538      	push	{r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80028ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80028ce:	4605      	mov	r5, r0
 80028d0:	460c      	mov	r4, r1
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80028d2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80028d6:	eeb0 0a67 	vmov.f32	s0, s15
 80028da:	f012 fd3d 	bl	8015358 <fasterdbtoa>
 80028de:	4804      	ldr	r0, [pc, #16]	; (80028f0 <FXLowShelfParam2+0x30>)
 80028e0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80028e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80028e8:	f011 bc6c 	b.w	80141c4 <tVZFilter_setGain>
 80028ec:	42480000 	.word	0x42480000
 80028f0:	2000020c 	.word	0x2000020c

080028f4 <FXHighShelfParam2>:

void FXHighShelfParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80028f4:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 80028f8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002920 <FXHighShelfParam2+0x2c>
{
 80028fc:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80028fe:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8002902:	4605      	mov	r5, r0
 8002904:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002906:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800290a:	eeb0 0a67 	vmov.f32	s0, s15
 800290e:	f012 fd23 	bl	8015358 <fasterdbtoa>
 8002912:	4804      	ldr	r0, [pc, #16]	; (8002924 <FXHighShelfParam2+0x30>)
 8002914:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800291c:	f011 bc52 	b.w	80141c4 <tVZFilter_setGain>
 8002920:	42480000 	.word	0x42480000
 8002924:	200001ec 	.word	0x200001ec

08002928 <FXNotchParam2>:

void FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002928:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 800292c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002954 <FXNotchParam2+0x2c>
{
 8002930:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002932:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8002936:	4605      	mov	r5, r0
 8002938:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800293a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800293e:	eeb0 0a67 	vmov.f32	s0, s15
 8002942:	f012 fd09 	bl	8015358 <fasterdbtoa>
 8002946:	4804      	ldr	r0, [pc, #16]	; (8002958 <FXNotchParam2+0x30>)
 8002948:	eb00 0084 	add.w	r0, r0, r4, lsl #2

}
 800294c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8002950:	f011 bc38 	b.w	80141c4 <tVZFilter_setGain>
 8002954:	42480000 	.word	0x42480000
 8002958:	200001cc 	.word	0x200001cc

0800295c <FXLowpassParam3>:
//resonance params
void FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <FXLowpassParam3+0x10>)
 800295e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002962:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002966:	f011 b87b 	b.w	8013a60 <tSVF_setQ>
 800296a:	bf00      	nop
 800296c:	200002ac 	.word	0x200002ac

08002970 <FXHighpassParam3>:
}

void FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <FXHighpassParam3+0x10>)
 8002972:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002976:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800297a:	f011 b871 	b.w	8013a60 <tSVF_setQ>
 800297e:	bf00      	nop
 8002980:	2000028c 	.word	0x2000028c

08002984 <FXBandpassParam3>:
}

void FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <FXBandpassParam3+0x10>)
 8002986:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800298a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800298e:	f011 b867 	b.w	8013a60 <tSVF_setQ>
 8002992:	bf00      	nop
 8002994:	2000024c 	.word	0x2000024c

08002998 <FXDiodeParam3>:
}

void FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
 8002998:	4b03      	ldr	r3, [pc, #12]	; (80029a8 <FXDiodeParam3+0x10>)
 800299a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800299e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80029a2:	f012 b909 	b.w	8014bb8 <tDiodeFilter_setQ>
 80029a6:	bf00      	nop
 80029a8:	2000026c 	.word	0x2000026c

080029ac <FXPeakParam3>:
}


void FXPeakParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterPeak[v][string], value);
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <FXPeakParam3+0x10>)
 80029ae:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80029b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80029b6:	f011 bc21 	b.w	80141fc <tVZFilter_setResonance>
 80029ba:	bf00      	nop
 80029bc:	2000022c 	.word	0x2000022c

080029c0 <FXLowShelfParam3>:
}


void FXLowShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterLS[v][string], value);
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <FXLowShelfParam3+0x10>)
 80029c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80029c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80029ca:	f011 bc17 	b.w	80141fc <tVZFilter_setResonance>
 80029ce:	bf00      	nop
 80029d0:	2000020c 	.word	0x2000020c

080029d4 <FXHighShelfParam3>:
}


void FXHighShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterHS[v][string], value);
 80029d4:	4b03      	ldr	r3, [pc, #12]	; (80029e4 <FXHighShelfParam3+0x10>)
 80029d6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80029da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80029de:	f011 bc0d 	b.w	80141fc <tVZFilter_setResonance>
 80029e2:	bf00      	nop
 80029e4:	200001ec 	.word	0x200001ec

080029e8 <FXNotchParam3>:
}


void FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <FXNotchParam3+0x10>)
 80029ea:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80029ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80029f2:	f011 bc03 	b.w	80141fc <tVZFilter_setResonance>
 80029f6:	bf00      	nop
 80029f8:	200001cc 	.word	0x200001cc

080029fc <FXLadderParam3>:
}


void FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <FXLadderParam3+0x10>)
 80029fe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002a02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002a06:	f012 ba79 	b.w	8014efc <tLadderFilter_setQ>
 8002a0a:	bf00      	nop
 8002a0c:	200001ac 	.word	0x200001ac

08002a10 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
 8002a10:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8002a12:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8002a16:	008c      	lsls	r4, r1, #2
{
 8002a18:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8002a1c:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
 8002a20:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8002a24:	eee0 7a68 	vfms.f32	s15, s0, s17
 8002a28:	eeb0 0a67 	vmov.f32	s0, s15
 8002a2c:	f012 fc8c 	bl	8015348 <fastdbtoa>
 8002a30:	4808      	ldr	r0, [pc, #32]	; (8002a54 <noiseSetTilt+0x44>)
 8002a32:	4420      	add	r0, r4
 8002a34:	f011 fbc6 	bl	80141c4 <tVZFilter_setGain>
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 8002a38:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 8002a3c:	eea8 0a28 	vfma.f32	s0, s16, s17
 8002a40:	f012 fc82 	bl	8015348 <fastdbtoa>
 8002a44:	4804      	ldr	r0, [pc, #16]	; (8002a58 <noiseSetTilt+0x48>)
}
 8002a46:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 8002a4a:	4420      	add	r0, r4
}
 8002a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 8002a50:	f011 bbb8 	b.w	80141c4 <tVZFilter_setGain>
 8002a54:	20004890 	.word	0x20004890
 8002a58:	20004898 	.word	0x20004898

08002a5c <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8002a5c:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
 8002a60:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8002a84 <noiseSetGain+0x28>
{
 8002a64:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8002a66:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8002a6a:	460c      	mov	r4, r1
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8002a6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002a70:	f012 fc6a 	bl	8015348 <fastdbtoa>
 8002a74:	4804      	ldr	r0, [pc, #16]	; (8002a88 <noiseSetGain+0x2c>)
 8002a76:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8002a7e:	f011 bba1 	b.w	80141c4 <tVZFilter_setGain>
 8002a82:	bf00      	nop
 8002a84:	42080000 	.word	0x42080000
 8002a88:	20004878 	.word	0x20004878

08002a8c <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002a8c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002a90:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002ac0 <noiseSetFreq+0x34>
 8002a94:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002ac4 <noiseSetFreq+0x38>
 8002a98:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8002ac8 <noiseSetFreq+0x3c>
 8002a9c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002aa0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002acc <noiseSetFreq+0x40>
{
 8002aa4:	b510      	push	{r4, lr}
 8002aa6:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002aa8:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8002aac:	f012 fb08 	bl	80150c0 <LEAF_clip>
	tVZFilter_setFreqFast(&noiseBell1[string], value);
 8002ab0:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <noiseSetFreq+0x44>)
 8002ab2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&noiseBell1[string], value);
 8002aba:	f011 ba25 	b.w	8013f08 <tVZFilter_setFreqFast>
 8002abe:	bf00      	nop
 8002ac0:	429a0000 	.word	0x429a0000
 8002ac4:	420fb824 	.word	0x420fb824
 8002ac8:	457ff000 	.word	0x457ff000
 8002acc:	00000000 	.word	0x00000000
 8002ad0:	20004878 	.word	0x20004878

08002ad4 <noise_tick>:
uint32_t timeNoise = 0;
uint32_t timeRandom = 0;

uint8_t randomValPointer = 0;
void __ATTR_ITCMRAM noise_tick(int string)
{
 8002ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tempCount9 = DWT->CYCCNT;
	float enabled = params[Noise].realVal[string];
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
 8002ad6:	4d27      	ldr	r5, [pc, #156]	; (8002b74 <noise_tick+0xa0>)
{
 8002ad8:	4604      	mov	r4, r0
	float sample = random_values[randomValPointer++];
 8002ada:	4927      	ldr	r1, [pc, #156]	; (8002b78 <noise_tick+0xa4>)
	float enabled = params[Noise].realVal[string];
 8002adc:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <noise_tick+0xa8>)
	uint32_t tempCount9 = DWT->CYCCNT;
 8002ade:	4f28      	ldr	r7, [pc, #160]	; (8002b80 <noise_tick+0xac>)
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8002ae0:	4828      	ldr	r0, [pc, #160]	; (8002b84 <noise_tick+0xb0>)
{
 8002ae2:	ed2d 8b04 	vpush	{d8-d9}
	float sample = random_values[randomValPointer++];
 8002ae6:	782a      	ldrb	r2, [r5, #0]
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8002ae8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	uint32_t tempCount9 = DWT->CYCCNT;
 8002aec:	687e      	ldr	r6, [r7, #4]
	float sample = random_values[randomValPointer++];
 8002aee:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8002af2:	3201      	adds	r2, #1
 8002af4:	702a      	strb	r2, [r5, #0]
	float enabled = params[Noise].realVal[string];
 8002af6:	eb03 0284 	add.w	r2, r3, r4, lsl #2
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8002afa:	ed91 0a00 	vldr	s0, [r1]
 8002afe:	00a5      	lsls	r5, r4, #2
	float enabled = params[Noise].realVal[string];
 8002b00:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float filterSend = params[NoiseFilterSend].realVal[string];
 8002b04:	ed92 8aa3 	vldr	s16, [r2, #652]	; 0x28c
	float amp = params[NoiseAmp].realVal[string];
 8002b08:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8002b0c:	f010 fff6 	bl	8013afc <tVZFilter_tickEfficient>
	sample = tVZFilter_tickEfficient(&noiseShelf2[string], sample);
 8002b10:	481d      	ldr	r0, [pc, #116]	; (8002b88 <noise_tick+0xb4>)
 8002b12:	4428      	add	r0, r5
 8002b14:	f010 fff2 	bl	8013afc <tVZFilter_tickEfficient>
	sample = tVZFilter_tickEfficient(&noiseBell1[string], sample);
 8002b18:	481c      	ldr	r0, [pc, #112]	; (8002b8c <noise_tick+0xb8>)
 8002b1a:	4428      	add	r0, r5
 8002b1c:	f010 ffee 	bl	8013afc <tVZFilter_tickEfficient>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
 8002b20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
 8002b24:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8002b90 <noise_tick+0xbc>
	sourceValues[3][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8002b28:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
 8002b2c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	sourceValues[3][string] = normSample;
 8002b30:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <noise_tick+0xc0>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8002b32:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
 8002b36:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
 8002b3a:	ee28 0a80 	vmul.f32	s0, s17, s0
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8002b3e:	4816      	ldr	r0, [pc, #88]	; (8002b98 <noise_tick+0xc4>)
	sourceValues[3][string] = normSample;
 8002b40:	eb03 0384 	add.w	r3, r3, r4, lsl #2

	uint32_t tempCount10 = DWT->CYCCNT;
	timeRandom = tempCount10-tempCount9;
 8002b44:	4a15      	ldr	r2, [pc, #84]	; (8002b9c <noise_tick+0xc8>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8002b46:	ee28 8a09 	vmul.f32	s16, s16, s18
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8002b4a:	4405      	add	r5, r0
	float normSample = (sample + 1.f) * 0.5f;
 8002b4c:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8002b50:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8002b54:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
 8002b58:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8002b5c:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8002b60:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[3][string] = normSample;
 8002b64:	edc3 7a06 	vstr	s15, [r3, #24]
	uint32_t tempCount10 = DWT->CYCCNT;
 8002b68:	687b      	ldr	r3, [r7, #4]
	timeRandom = tempCount10-tempCount9;
 8002b6a:	1b9b      	subs	r3, r3, r6
 8002b6c:	6013      	str	r3, [r2, #0]
}
 8002b6e:	ecbd 8b04 	vpop	{d8-d9}
 8002b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b74:	20004a18 	.word	0x20004a18
 8002b78:	20016c94 	.word	0x20016c94
 8002b7c:	20015b84 	.word	0x20015b84
 8002b80:	e0001000 	.word	0xe0001000
 8002b84:	20004890 	.word	0x20004890
 8002b88:	20004898 	.word	0x20004898
 8002b8c:	20004878 	.word	0x20004878
 8002b90:	00000000 	.word	0x00000000
 8002b94:	20012d98 	.word	0x20012d98
 8002b98:	20004880 	.word	0x20004880
 8002b9c:	20012f1c 	.word	0x20012f1c

08002ba0 <audioTickL>:
{
 8002ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interrupted = 0;
 8002ba4:	2100      	movs	r1, #0
	uint32_t tempCount5 = DWT->CYCCNT;
 8002ba6:	4aba      	ldr	r2, [pc, #744]	; (8002e90 <audioTickL+0x2f0>)
	interrupted = 0;
 8002ba8:	48ba      	ldr	r0, [pc, #744]	; (8002e94 <audioTickL+0x2f4>)
 8002baa:	4dbb      	ldr	r5, [pc, #748]	; (8002e98 <audioTickL+0x2f8>)
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
 8002bac:	4bbb      	ldr	r3, [pc, #748]	; (8002e9c <audioTickL+0x2fc>)
 8002bae:	4ebc      	ldr	r6, [pc, #752]	; (8002ea0 <audioTickL+0x300>)
 8002bb0:	f105 0830 	add.w	r8, r5, #48	; 0x30
	tickMappings();
 8002bb4:	4cbb      	ldr	r4, [pc, #748]	; (8002ea4 <audioTickL+0x304>)
{
 8002bb6:	ed2d 8b06 	vpush	{d8-d10}
 8002bba:	b08d      	sub	sp, #52	; 0x34
 8002bbc:	af00      	add	r7, sp, #0
	interrupted = 0;
 8002bbe:	7001      	strb	r1, [r0, #0]
	uint32_t tempCount5 = DWT->CYCCNT;
 8002bc0:	6852      	ldr	r2, [r2, #4]
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
 8002bc2:	edd3 8a38 	vldr	s17, [r3, #224]	; 0xe0
	uint32_t tempCount5 = DWT->CYCCNT;
 8002bc6:	60ba      	str	r2, [r7, #8]
	tickMappings();
 8002bc8:	f7fe fe7a 	bl	80018c0 <tickMappings>
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8002bcc:	4630      	mov	r0, r6
 8002bce:	f010 fe19 	bl	8013804 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
 8002bd2:	4bb5      	ldr	r3, [pc, #724]	; (8002ea8 <audioTickL+0x308>)
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8002bd4:	eca5 0a01 	vstmia	r5!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	b12b      	cbz	r3, 8002be8 <audioTickL+0x48>
 8002bdc:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
 8002bde:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
 8002be2:	d001      	beq.n	8002be8 <audioTickL+0x48>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
 8002be4:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
 8002be8:	4545      	cmp	r5, r8
 8002bea:	f106 0604 	add.w	r6, r6, #4
 8002bee:	f104 0408 	add.w	r4, r4, #8
 8002bf2:	d1eb      	bne.n	8002bcc <audioTickL+0x2c>
	float note[numStringsThisBoard];
 8002bf4:	009a      	lsls	r2, r3, #2
	float masterSample = 0.0f;
 8002bf6:	eddf 9aad 	vldr	s19, [pc, #692]	; 8002eac <audioTickL+0x30c>
	float note[numStringsThisBoard];
 8002bfa:	3207      	adds	r2, #7
 8002bfc:	f402 62ff 	and.w	r2, r2, #2040	; 0x7f8
 8002c00:	ebad 0d02 	sub.w	sp, sp, r2
 8002c04:	466a      	mov	r2, sp
	for (int v = 0; v < numStringsThisBoard; v++)
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8114 	beq.w	8002e34 <audioTickL+0x294>
 8002c0c:	4ba8      	ldr	r3, [pc, #672]	; (8002eb0 <audioTickL+0x310>)
 8002c0e:	f04f 0a00 	mov.w	sl, #0
		if (note[v] < 0.0f)
 8002c12:	eeb0 9a69 	vmov.f32	s18, s19
 8002c16:	617b      	str	r3, [r7, #20]
	for (int v = 0; v < numStringsThisBoard; v++)
 8002c18:	46d3      	mov	fp, sl
 8002c1a:	4ba6      	ldr	r3, [pc, #664]	; (8002eb4 <audioTickL+0x314>)
 8002c1c:	e9c7 2307 	strd	r2, r3, [r7, #28]
 8002c20:	4ba5      	ldr	r3, [pc, #660]	; (8002eb8 <audioTickL+0x318>)
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	4ba5      	ldr	r3, [pc, #660]	; (8002ebc <audioTickL+0x31c>)
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
 8002c28:	4ba5      	ldr	r3, [pc, #660]	; (8002ec0 <audioTickL+0x320>)
 8002c2a:	61bb      	str	r3, [r7, #24]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	ecb3 8a01 	vldmia	r3!, {s16}
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	4ba3      	ldr	r3, [pc, #652]	; (8002ec4 <audioTickL+0x324>)
 8002c36:	4453      	add	r3, sl
 8002c38:	edd3 7a00 	vldr	s15, [r3]
 8002c3c:	ee38 8a27 	vadd.f32	s16, s16, s15
		if (note[v] < 0.0f)
 8002c40:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c48:	f100 816a 	bmi.w	8002f20 <audioTickL+0x380>
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	ed83 8a00 	vstr	s16, [r3]
	interruptChecker = 0;
 8002c52:	4b9d      	ldr	r3, [pc, #628]	; (8002ec8 <audioTickL+0x328>)
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	4a8c      	ldr	r2, [pc, #560]	; (8002e90 <audioTickL+0x2f0>)
 8002c5e:	f1a3 0520 	sub.w	r5, r3, #32
 8002c62:	4699      	mov	r9, r3
 8002c64:	6854      	ldr	r4, [r2, #4]
	for (int v = 0; v < NUM_ENV; v++)
 8002c66:	4a99      	ldr	r2, [pc, #612]	; (8002ecc <audioTickL+0x32c>)
	uint32_t tempCount1 = DWT->CYCCNT;
 8002c68:	462e      	mov	r6, r5
 8002c6a:	eb02 080a 	add.w	r8, r2, sl
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
 8002c6e:	4640      	mov	r0, r8
	for (int v = 0; v < NUM_ENV; v++)
 8002c70:	3608      	adds	r6, #8
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
 8002c72:	f010 fcd1 	bl	8013618 <tADSRT_tickNoInterp>
		sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
 8002c76:	ed86 0a26 	vstr	s0, [r6, #152]	; 0x98
	for (int v = 0; v < NUM_ENV; v++)
 8002c7a:	454e      	cmp	r6, r9
 8002c7c:	f108 0808 	add.w	r8, r8, #8
 8002c80:	d1f5      	bne.n	8002c6e <audioTickL+0xce>
	timeEnv = DWT->CYCCNT - tempCount1;
 8002c82:	4a83      	ldr	r2, [pc, #524]	; (8002e90 <audioTickL+0x2f0>)
	interruptChecker = 0;
 8002c84:	f04f 0100 	mov.w	r1, #0
 8002c88:	4e91      	ldr	r6, [pc, #580]	; (8002ed0 <audioTickL+0x330>)
	timeEnv = DWT->CYCCNT - tempCount1;
 8002c8a:	6853      	ldr	r3, [r2, #4]
 8002c8c:	1b1c      	subs	r4, r3, r4
 8002c8e:	4b91      	ldr	r3, [pc, #580]	; (8002ed4 <audioTickL+0x334>)
 8002c90:	601c      	str	r4, [r3, #0]
	for (int i = 0; i < NUM_LFOS; i++)
 8002c92:	2400      	movs	r4, #0
	interruptChecker = 0;
 8002c94:	4b8c      	ldr	r3, [pc, #560]	; (8002ec8 <audioTickL+0x328>)
 8002c96:	7019      	strb	r1, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8002c98:	f8d2 8004 	ldr.w	r8, [r2, #4]
		if (lfoOn[i])
 8002c9c:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i, string);
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	465a      	mov	r2, fp
 8002ca4:	f107 0028 	add.w	r0, r7, #40	; 0x28
		float sample = 0.0f;
 8002ca8:	ed87 9a0a 	vstr	s18, [r7, #40]	; 0x28
		if (lfoOn[i])
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 812f 	beq.w	8002f10 <audioTickL+0x370>
			lfoShapeTick[i](&sample,i, string);
 8002cb2:	4b89      	ldr	r3, [pc, #548]	; (8002ed8 <audioTickL+0x338>)
	for (int i = 0; i < NUM_LFOS; i++)
 8002cb4:	3508      	adds	r5, #8
			lfoShapeTick[i](&sample,i, string);
 8002cb6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
 8002cba:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i, string);
 8002cbc:	4798      	blx	r3
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8002cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
	for (int i = 0; i < NUM_LFOS; i++)
 8002cc0:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8002cc2:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	for (int i = 0; i < NUM_LFOS; i++)
 8002cc6:	d1e9      	bne.n	8002c9c <audioTickL+0xfc>
	timeLFO = DWT->CYCCNT - tempCount1;
 8002cc8:	4b71      	ldr	r3, [pc, #452]	; (8002e90 <audioTickL+0x2f0>)
		oscillator_tick(note[v], v);
 8002cca:	eeb0 0a48 	vmov.f32	s0, s16
	timeLFO = DWT->CYCCNT - tempCount1;
 8002cce:	4a83      	ldr	r2, [pc, #524]	; (8002edc <audioTickL+0x33c>)
		oscillator_tick(note[v], v);
 8002cd0:	4658      	mov	r0, fp
	timeLFO = DWT->CYCCNT - tempCount1;
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	eba3 0308 	sub.w	r3, r3, r8
 8002cd8:	6013      	str	r3, [r2, #0]
		oscillator_tick(note[v], v);
 8002cda:	f7fd ff6b 	bl	8000bb4 <oscillator_tick>
		noise_tick(v);
 8002cde:	4658      	mov	r0, fp
 8002ce0:	f7ff fef8 	bl	8002ad4 <noise_tick>
		for (int i = 0; i < oscToTick; i++)
 8002ce4:	4b7e      	ldr	r3, [pc, #504]	; (8002ee0 <audioTickL+0x340>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 817a 	beq.w	8002fe2 <audioTickL+0x442>
			filterSamps[0] += oscOuts[0][i][v];
 8002cee:	69ba      	ldr	r2, [r7, #24]
		for (int i = 0; i < oscToTick; i++)
 8002cf0:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
 8002cf2:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
 8002cf6:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
 8002cfa:	d011      	beq.n	8002d20 <audioTickL+0x180>
			filterSamps[0] += oscOuts[0][i][v];
 8002cfc:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
 8002d00:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
 8002d02:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
 8002d06:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
 8002d0a:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
 8002d0e:	d007      	beq.n	8002d20 <audioTickL+0x180>
			filterSamps[0] += oscOuts[0][i][v];
 8002d10:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
 8002d14:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
 8002d18:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
 8002d1c:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
 8002d20:	693b      	ldr	r3, [r7, #16]
		sample = filter_tick(&filterSamps[0], note[v], v);
 8002d22:	eeb0 0a48 	vmov.f32	s0, s16
 8002d26:	4659      	mov	r1, fp
 8002d28:	f107 0028 	add.w	r0, r7, #40	; 0x28
		filterSamps[0] += noiseOuts[0][v];
 8002d2c:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
 8002d30:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
 8002d34:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002d38:	613b      	str	r3, [r7, #16]
		filterSamps[1] += noiseOuts[1][v];
 8002d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
 8002d3e:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
		filterSamps[1] += noiseOuts[1][v];
 8002d42:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		sample = filter_tick(&filterSamps[0], note[v], v);
 8002d46:	f7fe f981 	bl	800104c <filter_tick>
		if (fxPre)
 8002d4a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		sample = filter_tick(&filterSamps[0], note[v], v);
 8002d4e:	eeb0 8a40 	vmov.f32	s16, s0
		if (fxPre)
 8002d52:	eef4 8ae7 	vcmpe.f32	s17, s15
 8002d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5a:	dd04      	ble.n	8002d66 <audioTickL+0x1c6>
			sample *= amplitude[v];
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	ee20 8a27 	vmul.f32	s16, s0, s15
		if (overSampled)
 8002d66:	4b5f      	ldr	r3, [pc, #380]	; (8002ee4 <audioTickL+0x344>)
 8002d68:	781c      	ldrb	r4, [r3, #0]
		uint32_t tempCount1 = DWT->CYCCNT;
 8002d6a:	4b49      	ldr	r3, [pc, #292]	; (8002e90 <audioTickL+0x2f0>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	60fb      	str	r3, [r7, #12]
		if (overSampled)
 8002d70:	2c00      	cmp	r4, #0
 8002d72:	f040 80db 	bne.w	8002f2c <audioTickL+0x38c>
			for (int i = 0; i < numEffectToTick; i++)
 8002d76:	4b5c      	ldr	r3, [pc, #368]	; (8002ee8 <audioTickL+0x348>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	b31b      	cbz	r3, 8002dc4 <audioTickL+0x224>
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8002d7c:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 8002d80:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8002f08 <audioTickL+0x368>
			for (int i = 0; i < numEffectToTick; i++)
 8002d84:	4656      	mov	r6, sl
 8002d86:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8002f0c <audioTickL+0x36c>
 8002d8a:	4d58      	ldr	r5, [pc, #352]	; (8002eec <audioTickL+0x34c>)
				sample = effectTick[i](sample, i, v); //run the effect
 8002d8c:	eeb0 0a48 	vmov.f32	s0, s16
 8002d90:	4620      	mov	r0, r4
 8002d92:	f858 3b04 	ldr.w	r3, [r8], #4
 8002d96:	4659      	mov	r1, fp
 8002d98:	4798      	blx	r3
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8002d9a:	eb09 0306 	add.w	r3, r9, r6
			for (int i = 0; i < numEffectToTick; i++)
 8002d9e:	3401      	adds	r4, #1
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8002da0:	edd3 7a00 	vldr	s15, [r3]
				sample *= fxPostGain[i][v];
 8002da4:	19ab      	adds	r3, r5, r6
			for (int i = 0; i < numEffectToTick; i++)
 8002da6:	3608      	adds	r6, #8
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8002da8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002dac:	ee7a 7a67 	vsub.f32	s15, s20, s15
 8002db0:	eea7 0a88 	vfma.f32	s0, s15, s16
				sample *= fxPostGain[i][v];
 8002db4:	ed93 8a00 	vldr	s16, [r3]
			for (int i = 0; i < numEffectToTick; i++)
 8002db8:	4b4b      	ldr	r3, [pc, #300]	; (8002ee8 <audioTickL+0x348>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	42a3      	cmp	r3, r4
				sample *= fxPostGain[i][v];
 8002dbe:	ee20 8a08 	vmul.f32	s16, s0, s16
			for (int i = 0; i < numEffectToTick; i++)
 8002dc2:	dce3      	bgt.n	8002d8c <audioTickL+0x1ec>
		if (!fxPre)
 8002dc4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		uint32_t tempCount2 = DWT->CYCCNT;
 8002dc8:	4b31      	ldr	r3, [pc, #196]	; (8002e90 <audioTickL+0x2f0>)
		oversampleCount = tempCount2-tempCount1;
 8002dca:	68fa      	ldr	r2, [r7, #12]
		uint32_t tempCount2 = DWT->CYCCNT;
 8002dcc:	685b      	ldr	r3, [r3, #4]
		if (!fxPre)
 8002dce:	eef4 8ae7 	vcmpe.f32	s17, s15
		oversampleCount = tempCount2-tempCount1;
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	4a46      	ldr	r2, [pc, #280]	; (8002ef0 <audioTickL+0x350>)
		if (!fxPre)
 8002dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		oversampleCount = tempCount2-tempCount1;
 8002dda:	6013      	str	r3, [r2, #0]
		if (!fxPre)
 8002ddc:	d804      	bhi.n	8002de8 <audioTickL+0x248>
			sample *= amplitude[v];
 8002dde:	6a3b      	ldr	r3, [r7, #32]
 8002de0:	edd3 7a00 	vldr	s15, [r3]
 8002de4:	ee28 8a27 	vmul.f32	s16, s16, s15
	for (int v = 0; v < numStringsThisBoard; v++)
 8002de8:	6a3b      	ldr	r3, [r7, #32]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.5f;
 8002dea:	eeb0 0a48 	vmov.f32	s0, s16
	for (int v = 0; v < numStringsThisBoard; v++)
 8002dee:	f10b 0b01 	add.w	fp, fp, #1
 8002df2:	3304      	adds	r3, #4
 8002df4:	623b      	str	r3, [r7, #32]
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	3304      	adds	r3, #4
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	3304      	adds	r3, #4
 8002e06:	61bb      	str	r3, [r7, #24]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.5f;
 8002e08:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <audioTickL+0x354>)
 8002e0a:	eb03 000a 	add.w	r0, r3, sl
 8002e0e:	f010 fdbb 	bl	8013988 <tSVF_tick>
		masterSample *= finalMaster[v] ;
 8002e12:	4b39      	ldr	r3, [pc, #228]	; (8002ef8 <audioTickL+0x358>)
		masterSample += sample;
 8002e14:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		masterSample *= finalMaster[v] ;
 8002e18:	4453      	add	r3, sl
	for (int v = 0; v < numStringsThisBoard; v++)
 8002e1a:	f10a 0a04 	add.w	sl, sl, #4
		masterSample += sample;
 8002e1e:	eee0 9a27 	vfma.f32	s19, s0, s15
		masterSample *= finalMaster[v] ;
 8002e22:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <audioTickL+0x308>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	455b      	cmp	r3, fp
		masterSample *= finalMaster[v] ;
 8002e2c:	ee69 9aa7 	vmul.f32	s19, s19, s15
	for (int v = 0; v < numStringsThisBoard; v++)
 8002e30:	f73f aefc 	bgt.w	8002c2c <audioTickL+0x8c>
	masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 8002e34:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002e38:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002e3c:	eef0 0a69 	vmov.f32	s1, s19
 8002e40:	f012 f93e 	bl	80150c0 <LEAF_clip>
	uint32_t tempCount6 = DWT->CYCCNT;
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <audioTickL+0x2f0>)
	timeTick = tempCount6-tempCount5;
 8002e46:	68b8      	ldr	r0, [r7, #8]
	if ((timeTick > 10000) && (!interrupted))
 8002e48:	f242 7210 	movw	r2, #10000	; 0x2710
	uint32_t tempCount6 = DWT->CYCCNT;
 8002e4c:	685b      	ldr	r3, [r3, #4]
	timeTick = tempCount6-tempCount5;
 8002e4e:	492b      	ldr	r1, [pc, #172]	; (8002efc <audioTickL+0x35c>)
 8002e50:	1a1b      	subs	r3, r3, r0
	if ((timeTick > 10000) && (!interrupted))
 8002e52:	4293      	cmp	r3, r2
	timeTick = tempCount6-tempCount5;
 8002e54:	600b      	str	r3, [r1, #0]
	if ((timeTick > 10000) && (!interrupted))
 8002e56:	d90b      	bls.n	8002e70 <audioTickL+0x2d0>
 8002e58:	4b0e      	ldr	r3, [pc, #56]	; (8002e94 <audioTickL+0x2f4>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	b943      	cbnz	r3, 8002e70 <audioTickL+0x2d0>
		if (overSampled)
 8002e5e:	4a21      	ldr	r2, [pc, #132]	; (8002ee4 <audioTickL+0x344>)
 8002e60:	7811      	ldrb	r1, [r2, #0]
 8002e62:	b921      	cbnz	r1, 8002e6e <audioTickL+0x2ce>
		else if (oscToTick > 1)
 8002e64:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <audioTickL+0x340>)
 8002e66:	7813      	ldrb	r3, [r2, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d901      	bls.n	8002e70 <audioTickL+0x2d0>
			oscToTick--;
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	7013      	strb	r3, [r2, #0]
	return masterSample * audioMasterLevel * 0.98f;
 8002e70:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <audioTickL+0x360>)
}
 8002e72:	3734      	adds	r7, #52	; 0x34
	return masterSample * audioMasterLevel * 0.98f;
 8002e74:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002f04 <audioTickL+0x364>
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e80:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002e84:	46bd      	mov	sp, r7
 8002e86:	ecbd 8b06 	vpop	{d8-d10}
 8002e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e8e:	bf00      	nop
 8002e90:	e0001000 	.word	0xe0001000
 8002e94:	2000451c 	.word	0x2000451c
 8002e98:	20004548 	.word	0x20004548
 8002e9c:	20016b84 	.word	0x20016b84
 8002ea0:	200045bc 	.word	0x200045bc
 8002ea4:	20012d98 	.word	0x20012d98
 8002ea8:	20000066 	.word	0x20000066
 8002eac:	00000000 	.word	0x00000000
 8002eb0:	20012eb0 	.word	0x20012eb0
 8002eb4:	2000031c 	.word	0x2000031c
 8002eb8:	20004880 	.word	0x20004880
 8002ebc:	20012db8 	.word	0x20012db8
 8002ec0:	200048ac 	.word	0x200048ac
 8002ec4:	20012ee8 	.word	0x20012ee8
 8002ec8:	200151c5 	.word	0x200151c5
 8002ecc:	2000444c 	.word	0x2000444c
 8002ed0:	20004640 	.word	0x20004640
 8002ed4:	20012f04 	.word	0x20012f04
 8002ed8:	200046a4 	.word	0x200046a4
 8002edc:	20012f10 	.word	0x20012f10
 8002ee0:	2000007c 	.word	0x2000007c
 8002ee4:	2000007d 	.word	0x2000007d
 8002ee8:	20000064 	.word	0x20000064
 8002eec:	200044ec 	.word	0x200044ec
 8002ef0:	200048dc 	.word	0x200048dc
 8002ef4:	20004494 	.word	0x20004494
 8002ef8:	2000449c 	.word	0x2000449c
 8002efc:	20012f20 	.word	0x20012f20
 8002f00:	20000088 	.word	0x20000088
 8002f04:	3f7ae148 	.word	0x3f7ae148
 8002f08:	2000443c 	.word	0x2000443c
 8002f0c:	200044cc 	.word	0x200044cc
	for (int i = 0; i < NUM_LFOS; i++)
 8002f10:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8002f12:	ed85 9a30 	vstr	s18, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
 8002f16:	3508      	adds	r5, #8
 8002f18:	2c04      	cmp	r4, #4
 8002f1a:	f47f aebf 	bne.w	8002c9c <audioTickL+0xfc>
 8002f1e:	e6d3      	b.n	8002cc8 <audioTickL+0x128>
			note[v] = 0.0f;
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	eeb0 8a49 	vmov.f32	s16, s18
 8002f26:	ed83 9a00 	vstr	s18, [r3]
 8002f2a:	e692      	b.n	8002c52 <audioTickL+0xb2>
			tOversampler_upsample(&os[v], sample, oversamplerArray);
 8002f2c:	4b31      	ldr	r3, [pc, #196]	; (8002ff4 <audioTickL+0x454>)
 8002f2e:	eeb0 0a48 	vmov.f32	s0, s16
 8002f32:	4931      	ldr	r1, [pc, #196]	; (8002ff8 <audioTickL+0x458>)
 8002f34:	4453      	add	r3, sl
 8002f36:	4618      	mov	r0, r3
 8002f38:	ee0a 3a90 	vmov	s21, r3
 8002f3c:	f010 f8b2 	bl	80130a4 <tOversampler_upsample>
			for (int i = 0; i < numEffectToTick; i++)
 8002f40:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <audioTickL+0x45c>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d051      	beq.n	8002fec <audioTickL+0x44c>
 8002f48:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003010 <audioTickL+0x470>
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8002f4c:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 8002f50:	4d2b      	ldr	r5, [pc, #172]	; (8003000 <audioTickL+0x460>)
			for (int i = 0; i < numEffectToTick; i++)
 8002f52:	f04f 0800 	mov.w	r8, #0
 8002f56:	4b28      	ldr	r3, [pc, #160]	; (8002ff8 <audioTickL+0x458>)
 8002f58:	44d1      	add	r9, sl
 8002f5a:	4455      	add	r5, sl
 8002f5c:	4e29      	ldr	r6, [pc, #164]	; (8003004 <audioTickL+0x464>)
 8002f5e:	607b      	str	r3, [r7, #4]
 8002f60:	4c25      	ldr	r4, [pc, #148]	; (8002ff8 <audioTickL+0x458>)
					float dry = oversamplerArray[j]; //store the dry value to mix later
 8002f62:	ed94 8a00 	vldr	s16, [r4]
					oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
 8002f66:	4659      	mov	r1, fp
 8002f68:	6833      	ldr	r3, [r6, #0]
 8002f6a:	4640      	mov	r0, r8
 8002f6c:	eeb0 0a48 	vmov.f32	s0, s16
 8002f70:	4798      	blx	r3
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8002f72:	edd9 7a00 	vldr	s15, [r9]
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
 8002f76:	ed95 7a00 	vldr	s14, [r5]
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8002f7a:	ee20 0a27 	vmul.f32	s0, s0, s15
				for (int j = 0; j < OVERSAMPLE; j++)
 8002f7e:	4b22      	ldr	r3, [pc, #136]	; (8003008 <audioTickL+0x468>)
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8002f80:	ee7a 7a67 	vsub.f32	s15, s20, s15
 8002f84:	eea7 0a88 	vfma.f32	s0, s15, s16
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
 8002f88:	ee27 0a00 	vmul.f32	s0, s14, s0
 8002f8c:	eca4 0a01 	vstmia	r4!, {s0}
				for (int j = 0; j < OVERSAMPLE; j++)
 8002f90:	42a3      	cmp	r3, r4
 8002f92:	d1e6      	bne.n	8002f62 <audioTickL+0x3c2>
			for (int i = 0; i < numEffectToTick; i++)
 8002f94:	4b19      	ldr	r3, [pc, #100]	; (8002ffc <audioTickL+0x45c>)
 8002f96:	f108 0801 	add.w	r8, r8, #1
 8002f9a:	3604      	adds	r6, #4
 8002f9c:	f109 0908 	add.w	r9, r9, #8
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	3508      	adds	r5, #8
 8002fa4:	4543      	cmp	r3, r8
 8002fa6:	dcdb      	bgt.n	8002f60 <audioTickL+0x3c0>
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
 8002fa8:	687c      	ldr	r4, [r7, #4]
 8002faa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002fae:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002fb2:	edd4 0a00 	vldr	s1, [r4]
 8002fb6:	f012 f883 	bl	80150c0 <LEAF_clip>
 8002fba:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8002fbe:	edd4 0a01 	vldr	s1, [r4, #4]
 8002fc2:	ed84 0a00 	vstr	s0, [r4]
 8002fc6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8002fca:	f012 f879 	bl	80150c0 <LEAF_clip>
			sample = tOversampler_downsample(&os[v], oversamplerArray);
 8002fce:	ee1a 0a90 	vmov	r0, s21
 8002fd2:	4909      	ldr	r1, [pc, #36]	; (8002ff8 <audioTickL+0x458>)
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
 8002fd4:	ed84 0a01 	vstr	s0, [r4, #4]
			sample = tOversampler_downsample(&os[v], oversamplerArray);
 8002fd8:	f010 f8cc 	bl	8013174 <tOversampler_downsample>
 8002fdc:	eeb0 8a40 	vmov.f32	s16, s0
 8002fe0:	e6f0      	b.n	8002dc4 <audioTickL+0x224>
		for (int i = 0; i < oscToTick; i++)
 8002fe2:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800300c <audioTickL+0x46c>
 8002fe6:	eeb0 6a67 	vmov.f32	s12, s15
 8002fea:	e699      	b.n	8002d20 <audioTickL+0x180>
 8002fec:	4b02      	ldr	r3, [pc, #8]	; (8002ff8 <audioTickL+0x458>)
 8002fee:	607b      	str	r3, [r7, #4]
 8002ff0:	e7da      	b.n	8002fa8 <audioTickL+0x408>
 8002ff2:	bf00      	nop
 8002ff4:	200048a4 	.word	0x200048a4
 8002ff8:	200048e0 	.word	0x200048e0
 8002ffc:	20000064 	.word	0x20000064
 8003000:	200044ec 	.word	0x200044ec
 8003004:	2000443c 	.word	0x2000443c
 8003008:	200048e8 	.word	0x200048e8
 800300c:	00000000 	.word	0x00000000
 8003010:	200044cc 	.word	0x200044cc

08003014 <audioFrame>:
{
 8003014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
 8003018:	49c2      	ldr	r1, [pc, #776]	; (8003324 <audioFrame+0x310>)
	if (newBar)
 800301a:	4fc3      	ldr	r7, [pc, #780]	; (8003328 <audioFrame+0x314>)
{
 800301c:	ed2d 8b04 	vpush	{d8-d9}
 8003020:	b089      	sub	sp, #36	; 0x24
	if (newBar)
 8003022:	683a      	ldr	r2, [r7, #0]
{
 8003024:	9003      	str	r0, [sp, #12]
	uint32_t tempCountFrame = DWT->CYCCNT;
 8003026:	684b      	ldr	r3, [r1, #4]
 8003028:	9302      	str	r3, [sp, #8]
	if (newBar)
 800302a:	2a00      	cmp	r2, #0
 800302c:	f000 8095 	beq.w	800315a <audioFrame+0x146>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8003030:	4abe      	ldr	r2, [pc, #760]	; (800332c <audioFrame+0x318>)
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8003032:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003036:	49be      	ldr	r1, [pc, #760]	; (8003330 <audioFrame+0x31c>)
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8003038:	ed92 7a02 	vldr	s14, [r2, #8]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 800303c:	edd2 6a01 	vldr	s13, [r2, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003040:	edd2 7a03 	vldr	s15, [r2, #12]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8003044:	ed92 6a00 	vldr	s12, [r2]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003048:	ee77 3a66 	vsub.f32	s7, s14, s13
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 800304c:	680a      	ldr	r2, [r1, #0]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800304e:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8003052:	ee76 4ac6 	vsub.f32	s9, s13, s12
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8003056:	4282      	cmp	r2, r0
 8003058:	d00c      	beq.n	8003074 <audioFrame+0x60>
 800305a:	ee07 2a90 	vmov	s15, r2
 800305e:	4ab5      	ldr	r2, [pc, #724]	; (8003334 <audioFrame+0x320>)
 8003060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003064:	ed92 5a00 	vldr	s10, [r2]
 8003068:	eef4 7ac5 	vcmpe.f32	s15, s10
 800306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003070:	f340 8115 	ble.w	800329e <audioFrame+0x28a>
				stringMappedPositions[j] = 1.0f;
 8003074:	f8df b310 	ldr.w	fp, [pc, #784]	; 8003388 <audioFrame+0x374>
 8003078:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800307c:	f8cb 2000 	str.w	r2, [fp]
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8003080:	684a      	ldr	r2, [r1, #4]
 8003082:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003086:	428a      	cmp	r2, r1
 8003088:	d00c      	beq.n	80030a4 <audioFrame+0x90>
 800308a:	ee07 2a90 	vmov	s15, r2
 800308e:	4aa9      	ldr	r2, [pc, #676]	; (8003334 <audioFrame+0x320>)
 8003090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003094:	ed92 5a01 	vldr	s10, [r2, #4]
 8003098:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800309c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a0:	f140 80ea 	bpl.w	8003278 <audioFrame+0x264>
				stringMappedPositions[j] = 1.0f;
 80030a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80030a8:	f8cb 2004 	str.w	r2, [fp, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
 80030ac:	f8df a2dc 	ldr.w	sl, [pc, #732]	; 800338c <audioFrame+0x378>
 80030b0:	f89a 2000 	ldrb.w	r2, [sl]
 80030b4:	2a00      	cmp	r2, #0
 80030b6:	d04e      	beq.n	8003156 <audioFrame+0x142>
 80030b8:	4d9f      	ldr	r5, [pc, #636]	; (8003338 <audioFrame+0x324>)
 80030ba:	2400      	movs	r4, #0
 80030bc:	4b9f      	ldr	r3, [pc, #636]	; (800333c <audioFrame+0x328>)
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 80030be:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
 80030c2:	f8cd a004 	str.w	sl, [sp, #4]
 80030c6:	46aa      	mov	sl, r5
 80030c8:	eddf 8a9d 	vldr	s17, [pc, #628]	; 8003340 <audioFrame+0x32c>
 80030cc:	4625      	mov	r5, r4
 80030ce:	4e9d      	ldr	r6, [pc, #628]	; (8003344 <audioFrame+0x330>)
 80030d0:	461c      	mov	r4, r3
 80030d2:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8003390 <audioFrame+0x37c>
 80030d6:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 8003394 <audioFrame+0x380>
			if (dualSlider)
 80030da:	f8d9 3000 	ldr.w	r3, [r9]
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 80030de:	ed9b 0a00 	vldr	s0, [fp]
			if (dualSlider)
 80030e2:	b1c3      	cbz	r3, 8003116 <audioFrame+0x102>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 80030e4:	eeb4 0a48 	vcmp.f32	s0, s16
 80030e8:	eddb 0a01 	vldr	s1, [fp, #4]
 80030ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f0:	f040 80b1 	bne.w	8003256 <audioFrame+0x242>
 80030f4:	eef4 0ac8 	vcmpe.f32	s1, s16
 80030f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fc:	f100 80ec 	bmi.w	80032d8 <audioFrame+0x2c4>
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
 8003100:	4b91      	ldr	r3, [pc, #580]	; (8003348 <audioFrame+0x334>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	442b      	add	r3, r5
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 800310e:	ee21 1a28 	vmul.f32	s2, s2, s17
 8003112:	f012 f8bf 	bl	8015294 <LEAF_interpolation_linear>
			myMappedPos = tSlide_tick(&freqSlider[i], myMappedPos);
 8003116:	4650      	mov	r0, sl
		for (int i = 0; i < numStringsThisBoard; i++)
 8003118:	3501      	adds	r5, #1
			myMappedPos = tSlide_tick(&freqSlider[i], myMappedPos);
 800311a:	f010 fba9 	bl	8013870 <tSlide_tick>
			invMapping[i] = (1.0f / myMappedPos);
 800311e:	ee88 7a00 	vdiv.f32	s14, s16, s0
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 8003122:	edd8 6a00 	vldr	s13, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
 8003126:	f10a 0a04 	add.w	sl, sl, #4
 800312a:	9b01      	ldr	r3, [sp, #4]
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
 800312c:	4987      	ldr	r1, [pc, #540]	; (800334c <audioFrame+0x338>)
		for (int i = 0; i < numStringsThisBoard; i++)
 800312e:	781a      	ldrb	r2, [r3, #0]
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 8003130:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		for (int i = 0; i < numStringsThisBoard; i++)
 8003134:	42aa      	cmp	r2, r5
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 8003136:	ee37 6a48 	vsub.f32	s12, s14, s16
			invMapping[i] = (1.0f / myMappedPos);
 800313a:	eca6 7a01 	vstmia	r6!, {s14}
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 800313e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8003142:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003146:	ee17 3a90 	vmov	r3, s15
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
 800314a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f844 3b04 	str.w	r3, [r4], #4
		for (int i = 0; i < numStringsThisBoard; i++)
 8003154:	dcc1      	bgt.n	80030da <audioFrame+0xc6>
		newBar = 0;
 8003156:	2200      	movs	r2, #0
 8003158:	603a      	str	r2, [r7, #0]
	if (newPluck)
 800315a:	4f7d      	ldr	r7, [pc, #500]	; (8003350 <audioFrame+0x33c>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	b363      	cbz	r3, 80031ba <audioFrame+0x1a6>
		for (int i = 0; i < numStringsThisBoard; i++)
 8003160:	f8df a228 	ldr.w	sl, [pc, #552]	; 800338c <audioFrame+0x378>
 8003164:	f89a 3000 	ldrb.w	r3, [sl]
 8003168:	b32b      	cbz	r3, 80031b6 <audioFrame+0x1a2>
 800316a:	4a7a      	ldr	r2, [pc, #488]	; (8003354 <audioFrame+0x340>)
 800316c:	2400      	movs	r4, #0
 800316e:	497a      	ldr	r1, [pc, #488]	; (8003358 <audioFrame+0x344>)
				float amplitz = stringInputs[i] * 0.00005f;
 8003170:	eddf 8a7a 	vldr	s17, [pc, #488]	; 800335c <audioFrame+0x348>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003174:	4690      	mov	r8, r2
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8003176:	ed9f 8a7a 	vldr	s16, [pc, #488]	; 8003360 <audioFrame+0x34c>
 800317a:	f8df b21c 	ldr.w	fp, [pc, #540]	; 8003398 <audioFrame+0x384>
 800317e:	4d79      	ldr	r5, [pc, #484]	; (8003364 <audioFrame+0x350>)
 8003180:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800339c <audioFrame+0x388>
 8003184:	9101      	str	r1, [sp, #4]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003186:	f8cd a010 	str.w	sl, [sp, #16]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
 800318a:	f85b 6b04 	ldr.w	r6, [fp], #4
 800318e:	682a      	ldr	r2, [r5, #0]
 8003190:	2e00      	cmp	r6, #0
 8003192:	d146      	bne.n	8003222 <audioFrame+0x20e>
 8003194:	2a00      	cmp	r2, #0
 8003196:	f040 8122 	bne.w	80033de <audioFrame+0x3ca>
		for (int i = 0; i < numStringsThisBoard; i++)
 800319a:	3401      	adds	r4, #1
			previousStringInputs[i] = stringInputs[i];
 800319c:	f84b 2c04 	str.w	r2, [fp, #-4]
		for (int i = 0; i < numStringsThisBoard; i++)
 80031a0:	9a01      	ldr	r2, [sp, #4]
 80031a2:	3504      	adds	r5, #4
 80031a4:	42a3      	cmp	r3, r4
 80031a6:	f108 0804 	add.w	r8, r8, #4
 80031aa:	f102 0204 	add.w	r2, r2, #4
 80031ae:	f109 0904 	add.w	r9, r9, #4
 80031b2:	9201      	str	r2, [sp, #4]
 80031b4:	dce9      	bgt.n	800318a <audioFrame+0x176>
		newPluck = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	603b      	str	r3, [r7, #0]
	if ((codecReady)&&(presetReady))
 80031ba:	4b6b      	ldr	r3, [pc, #428]	; (8003368 <audioFrame+0x354>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	b1cb      	cbz	r3, 80031f4 <audioFrame+0x1e0>
 80031c0:	4b6a      	ldr	r3, [pc, #424]	; (800336c <audioFrame+0x358>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	b1b3      	cbz	r3, 80031f4 <audioFrame+0x1e0>
 80031c6:	4c6a      	ldr	r4, [pc, #424]	; (8003370 <audioFrame+0x35c>)
 80031c8:	9b03      	ldr	r3, [sp, #12]
 80031ca:	f104 0540 	add.w	r5, r4, #64	; 0x40
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 80031ce:	ed9f 8a69 	vldr	s16, [pc, #420]	; 8003374 <audioFrame+0x360>
 80031d2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80031d6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80031da:	f7ff fce1 	bl	8002ba0 <audioTickL>
 80031de:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80031e2:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 80031e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80031e8:	42ac      	cmp	r4, r5
			current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 80031ea:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[buffer_offset + i + 1] = current_sample;
 80031ee:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80031f2:	d1f2      	bne.n	80031da <audioFrame+0x1c6>
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 80031f4:	4860      	ldr	r0, [pc, #384]	; (8003378 <audioFrame+0x364>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
 80031f6:	4b4b      	ldr	r3, [pc, #300]	; (8003324 <audioFrame+0x310>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 80031f8:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	9802      	ldr	r0, [sp, #8]
 8003200:	495e      	ldr	r1, [pc, #376]	; (800337c <audioFrame+0x368>)
 8003202:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 8003204:	4a5e      	ldr	r2, [pc, #376]	; (8003380 <audioFrame+0x36c>)
 8003206:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
 800320a:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 800320c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003214:	edc2 7a00 	vstr	s15, [r2]
}
 8003218:	b009      	add	sp, #36	; 0x24
 800321a:	ecbd 8b04 	vpop	{d8-d9}
 800321e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
 8003222:	ddba      	ble.n	800319a <audioFrame+0x186>
 8003224:	2a00      	cmp	r2, #0
 8003226:	d1b8      	bne.n	800319a <audioFrame+0x186>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003228:	2110      	movs	r1, #16
 800322a:	4856      	ldr	r0, [pc, #344]	; (8003384 <audioFrame+0x370>)
 800322c:	f006 f844 	bl	80092b8 <HAL_GPIO_WritePin>
					tADSRT_off(&envs[v][i]);
 8003230:	4640      	mov	r0, r8
 8003232:	f010 f9e9 	bl	8013608 <tADSRT_off>
 8003236:	f108 0008 	add.w	r0, r8, #8
 800323a:	f010 f9e5 	bl	8013608 <tADSRT_off>
 800323e:	f108 0010 	add.w	r0, r8, #16
 8003242:	f010 f9e1 	bl	8013608 <tADSRT_off>
 8003246:	f108 0018 	add.w	r0, r8, #24
 800324a:	f010 f9dd 	bl	8013608 <tADSRT_off>
		for (int i = 0; i < numStringsThisBoard; i++)
 800324e:	9b04      	ldr	r3, [sp, #16]
			previousStringInputs[i] = stringInputs[i];
 8003250:	682a      	ldr	r2, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	e7a1      	b.n	800319a <audioFrame+0x186>
				else if ((stringMappedPositions[1] == 1.0f) && (stringMappedPositions[0] < 1.0f))
 8003256:	eef4 0a48 	vcmp.f32	s1, s16
 800325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325e:	f47f af4f 	bne.w	8003100 <audioFrame+0xec>
 8003262:	eeb4 0a48 	vcmp.f32	s0, s16
 8003266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326a:	f57f af49 	bpl.w	8003100 <audioFrame+0xec>
					stringMappedPositions[1] = stringMappedPositions[0];
 800326e:	eef0 0a40 	vmov.f32	s1, s0
 8003272:	ed8b 0a01 	vstr	s0, [fp, #4]
 8003276:	e743      	b.n	8003100 <audioFrame+0xec>
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 8003278:	ed92 4a05 	vldr	s8, [r2, #20]
 800327c:	eeb4 4ae7 	vcmpe.f32	s8, s15
 8003280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003284:	f200 808c 	bhi.w	80033a0 <audioFrame+0x38c>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003288:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800328c:	ee34 5a45 	vsub.f32	s10, s8, s10
 8003290:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8003294:	eea4 6a87 	vfma.f32	s12, s9, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8003298:	ed8b 6a01 	vstr	s12, [fp, #4]
 800329c:	e706      	b.n	80030ac <audioFrame+0x98>
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 800329e:	ed92 4a04 	vldr	s8, [r2, #16]
 80032a2:	eef4 7ac4 	vcmpe.f32	s15, s8
 80032a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032aa:	da2b      	bge.n	8003304 <audioFrame+0x2f0>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 80032ac:	ed92 5a08 	vldr	s10, [r2, #32]
 80032b0:	eef4 7ac5 	vcmpe.f32	s15, s10
 80032b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b8:	db13      	blt.n	80032e2 <audioFrame+0x2ce>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80032ba:	ee77 7ac4 	vsub.f32	s15, s15, s8
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 80032be:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8003388 <audioFrame+0x374>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80032c2:	ee35 5a44 	vsub.f32	s10, s10, s8
 80032c6:	ee87 4a85 	vdiv.f32	s8, s15, s10
 80032ca:	eef0 7a66 	vmov.f32	s15, s13
 80032ce:	eee4 7a23 	vfma.f32	s15, s8, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 80032d2:	edcb 7a00 	vstr	s15, [fp]
 80032d6:	e6d3      	b.n	8003080 <audioFrame+0x6c>
					stringMappedPositions[0] = stringMappedPositions[1];
 80032d8:	eeb0 0a60 	vmov.f32	s0, s1
 80032dc:	edcb 0a00 	vstr	s1, [fp]
 80032e0:	e70e      	b.n	8003100 <audioFrame+0xec>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80032e2:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
 80032e6:	ee77 7ac5 	vsub.f32	s15, s15, s10
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 80032ea:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8003388 <audioFrame+0x374>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80032ee:	ee34 5a45 	vsub.f32	s10, s8, s10
 80032f2:	ee87 4a85 	vdiv.f32	s8, s15, s10
 80032f6:	eef0 7a47 	vmov.f32	s15, s14
 80032fa:	eee5 7a84 	vfma.f32	s15, s11, s8
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 80032fe:	edcb 7a00 	vstr	s15, [fp]
 8003302:	e6bd      	b.n	8003080 <audioFrame+0x6c>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8003304:	ee77 7ac5 	vsub.f32	s15, s15, s10
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8003308:	f8df b07c 	ldr.w	fp, [pc, #124]	; 8003388 <audioFrame+0x374>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800330c:	ee34 5a45 	vsub.f32	s10, s8, s10
 8003310:	ee87 4a85 	vdiv.f32	s8, s15, s10
 8003314:	eef0 7a46 	vmov.f32	s15, s12
 8003318:	eee4 7a84 	vfma.f32	s15, s9, s8
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 800331c:	edcb 7a00 	vstr	s15, [fp]
 8003320:	e6ae      	b.n	8003080 <audioFrame+0x6c>
 8003322:	bf00      	nop
 8003324:	e0001000 	.word	0xe0001000
 8003328:	2000486c 	.word	0x2000486c
 800332c:	2000004c 	.word	0x2000004c
 8003330:	20012ef0 	.word	0x20012ef0
 8003334:	2000000c 	.word	0x2000000c
 8003338:	200044c4 	.word	0x200044c4
 800333c:	20000334 	.word	0x20000334
 8003340:	3dcccccd 	.word	0x3dcccccd
 8003344:	20004540 	.word	0x20004540
 8003348:	200044a4 	.word	0x200044a4
 800334c:	24000000 	.word	0x24000000
 8003350:	20004874 	.word	0x20004874
 8003354:	2000444c 	.word	0x2000444c
 8003358:	20012ee8 	.word	0x20012ee8
 800335c:	3851b717 	.word	0x3851b717
 8003360:	00000000 	.word	0x00000000
 8003364:	20012e80 	.word	0x20012e80
 8003368:	2000037c 	.word	0x2000037c
 800336c:	200049c8 	.word	0x200049c8
 8003370:	30000000 	.word	0x30000000
 8003374:	4b000000 	.word	0x4b000000
 8003378:	20000008 	.word	0x20000008
 800337c:	20012f0c 	.word	0x20012f0c
 8003380:	200044a8 	.word	0x200044a8
 8003384:	58020400 	.word	0x58020400
 8003388:	20012eb8 	.word	0x20012eb8
 800338c:	20000066 	.word	0x20000066
 8003390:	20004434 	.word	0x20004434
 8003394:	20000060 	.word	0x20000060
 8003398:	200049d0 	.word	0x200049d0
 800339c:	20016a34 	.word	0x20016a34
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 80033a0:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 80033a4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80033a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ac:	d80a      	bhi.n	80033c4 <audioFrame+0x3b0>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80033ae:	ee77 7ac4 	vsub.f32	s15, s15, s8
 80033b2:	ee36 6a44 	vsub.f32	s12, s12, s8
 80033b6:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80033ba:	eee3 6a87 	vfma.f32	s13, s7, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 80033be:	edcb 6a01 	vstr	s13, [fp, #4]
 80033c2:	e673      	b.n	80030ac <audioFrame+0x98>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80033c4:	edd2 6a0d 	vldr	s13, [r2, #52]	; 0x34
 80033c8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80033cc:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80033d0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80033d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 80033d8:	ed8b 7a01 	vstr	s14, [fp, #4]
 80033dc:	e666      	b.n	80030ac <audioFrame+0x98>
				float amplitz = stringInputs[i] * 0.00005f;
 80033de:	ee07 2a90 	vmov	s15, r2
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 80033e2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80033e6:	eeb0 0a48 	vmov.f32	s0, s16
				float amplitz = stringInputs[i] * 0.00005f;
 80033ea:	eef8 0a67 	vcvt.f32.u32	s1, s15
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 80033ee:	ee60 0aa8 	vmul.f32	s1, s1, s17
 80033f2:	f011 fe65 	bl	80150c0 <LEAF_clip>
				stringOctave[i] = octave;
 80033f6:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <audioFrame+0x498>)
 80033f8:	9a01      	ldr	r2, [sp, #4]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80033fa:	2110      	movs	r1, #16
				stringOctave[i] = octave;
 80033fc:	681b      	ldr	r3, [r3, #0]
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 80033fe:	eeb0 9a40 	vmov.f32	s18, s0
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003402:	482b      	ldr	r0, [pc, #172]	; (80034b0 <audioFrame+0x49c>)
				stringOctave[i] = octave;
 8003404:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003406:	f5a9 7313 	sub.w	r3, r9, #588	; 0x24c
 800340a:	2201      	movs	r2, #1
 800340c:	9307      	str	r3, [sp, #28]
 800340e:	f109 0354 	add.w	r3, r9, #84	; 0x54
 8003412:	9305      	str	r3, [sp, #20]
 8003414:	f005 ff50 	bl	80092b8 <HAL_GPIO_WritePin>
 8003418:	9b07      	ldr	r3, [sp, #28]
 800341a:	9406      	str	r4, [sp, #24]
 800341c:	4644      	mov	r4, r8
 800341e:	469a      	mov	sl, r3
					if (useVelocity == 0) envVel = 1.f;
 8003420:	edda 7a00 	vldr	s15, [sl]
				    tADSRT_on(&envs[v][i], envVel);
 8003424:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
				for (int v = 0; v < NUM_ENV; v++)
 8003428:	f10a 0aa8 	add.w	sl, sl, #168	; 0xa8
					if (useVelocity == 0) envVel = 1.f;
 800342c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003434:	d02e      	beq.n	8003494 <audioFrame+0x480>
				    tADSRT_on(&envs[v][i], envVel);
 8003436:	4620      	mov	r0, r4
 8003438:	eeb0 0a49 	vmov.f32	s0, s18
 800343c:	f010 f8d2 	bl	80135e4 <tADSRT_on>
				    voiceSounding = 1;
 8003440:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <audioFrame+0x4a0>)
 8003442:	f04f 0201 	mov.w	r2, #1
				for (int v = 0; v < NUM_ENV; v++)
 8003446:	3408      	adds	r4, #8
				    voiceSounding = 1;
 8003448:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
 800344a:	9b05      	ldr	r3, [sp, #20]
 800344c:	4553      	cmp	r3, sl
 800344e:	d1e7      	bne.n	8003420 <audioFrame+0x40c>
 8003450:	9c06      	ldr	r4, [sp, #24]
					if (noteOnSync > 0.5f)
 8003452:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8003456:	9505      	str	r5, [sp, #20]
 8003458:	46ca      	mov	sl, r9
 800345a:	ebc4 7284 	rsb	r2, r4, r4, lsl #30
 800345e:	0092      	lsls	r2, r2, #2
 8003460:	320c      	adds	r2, #12
 8003462:	4615      	mov	r5, r2
					if (noteOnSync > 0.5f)
 8003464:	edda 7a0e 	vldr	s15, [sl, #56]	; 0x38
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
 8003468:	4630      	mov	r0, r6
 800346a:	4621      	mov	r1, r4
				for (int v = 0; v < NUM_LFOS; v++)
 800346c:	3601      	adds	r6, #1
					if (noteOnSync > 0.5f)
 800346e:	eef4 7ac9 	vcmpe.f32	s15, s18
 8003472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003476:	dd04      	ble.n	8003482 <audioFrame+0x46e>
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
 8003478:	ed9a 0a00 	vldr	s0, [sl]
 800347c:	f85a 3005 	ldr.w	r3, [sl, r5]
 8003480:	4798      	blx	r3
				for (int v = 0; v < NUM_LFOS; v++)
 8003482:	2e04      	cmp	r6, #4
 8003484:	f10a 0a8c 	add.w	sl, sl, #140	; 0x8c
 8003488:	d1ec      	bne.n	8003464 <audioFrame+0x450>
			previousStringInputs[i] = stringInputs[i];
 800348a:	9d05      	ldr	r5, [sp, #20]
		for (int i = 0; i < numStringsThisBoard; i++)
 800348c:	9b04      	ldr	r3, [sp, #16]
			previousStringInputs[i] = stringInputs[i];
 800348e:	682a      	ldr	r2, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	e682      	b.n	800319a <audioFrame+0x186>
				    tADSRT_on(&envs[v][i], envVel);
 8003494:	4620      	mov	r0, r4
				for (int v = 0; v < NUM_ENV; v++)
 8003496:	3408      	adds	r4, #8
				    tADSRT_on(&envs[v][i], envVel);
 8003498:	f010 f8a4 	bl	80135e4 <tADSRT_on>
				    voiceSounding = 1;
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <audioFrame+0x4a0>)
 800349e:	f04f 0201 	mov.w	r2, #1
 80034a2:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
 80034a4:	9b05      	ldr	r3, [sp, #20]
 80034a6:	459a      	cmp	sl, r3
 80034a8:	d1ba      	bne.n	8003420 <audioFrame+0x40c>
 80034aa:	e7d1      	b.n	8003450 <audioFrame+0x43c>
 80034ac:	200048a0 	.word	0x200048a0
 80034b0:	58020400 	.word	0x58020400
 80034b4:	20012f48 	.word	0x20012f48

080034b8 <HAL_SPI_RxCpltCallback>:




void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80034b8:	b538      	push	{r3, r4, r5, lr}
	interrupted = 1;
	if (hspi == &hspi5)
 80034ba:	4b86      	ldr	r3, [pc, #536]	; (80036d4 <HAL_SPI_RxCpltCallback+0x21c>)
	interrupted = 1;
 80034bc:	2101      	movs	r1, #1
 80034be:	4a86      	ldr	r2, [pc, #536]	; (80036d8 <HAL_SPI_RxCpltCallback+0x220>)
{
 80034c0:	4604      	mov	r4, r0
	if (hspi == &hspi5)
 80034c2:	4298      	cmp	r0, r3
	interrupted = 1;
 80034c4:	7011      	strb	r1, [r2, #0]
	if (hspi == &hspi5)
 80034c6:	d019      	beq.n	80034fc <HAL_SPI_RxCpltCallback+0x44>
			}
		}
		newPluck = 1;
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
	}
	if (hspi == &hspi2)
 80034c8:	4b84      	ldr	r3, [pc, #528]	; (80036dc <HAL_SPI_RxCpltCallback+0x224>)
 80034ca:	429c      	cmp	r4, r3
 80034cc:	d00d      	beq.n	80034ea <HAL_SPI_RxCpltCallback+0x32>
			}
		}
		newBar = 1;

	}
	if (hspi == &hspi1)
 80034ce:	4b84      	ldr	r3, [pc, #528]	; (80036e0 <HAL_SPI_RxCpltCallback+0x228>)
 80034d0:	429c      	cmp	r4, r3
 80034d2:	d000      	beq.n	80034d6 <HAL_SPI_RxCpltCallback+0x1e>
			levers[1][i] = SPI_LEVERS[i];
		}
		*/
		newLevers = 1;
	}
}
 80034d4:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 80034d6:	4b83      	ldr	r3, [pc, #524]	; (80036e4 <HAL_SPI_RxCpltCallback+0x22c>)
 80034d8:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 80034dc:	2afe      	cmp	r2, #254	; 0xfe
 80034de:	f000 80ef 	beq.w	80036c0 <HAL_SPI_RxCpltCallback+0x208>
		newLevers = 1;
 80034e2:	4b81      	ldr	r3, [pc, #516]	; (80036e8 <HAL_SPI_RxCpltCallback+0x230>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
}
 80034e8:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_RX[14] == 254) && (SPI_RX[15] == 253))
 80034ea:	4b80      	ldr	r3, [pc, #512]	; (80036ec <HAL_SPI_RxCpltCallback+0x234>)
 80034ec:	7b9a      	ldrb	r2, [r3, #14]
 80034ee:	2afe      	cmp	r2, #254	; 0xfe
 80034f0:	f000 80d6 	beq.w	80036a0 <HAL_SPI_RxCpltCallback+0x1e8>
		newBar = 1;
 80034f4:	4b7e      	ldr	r3, [pc, #504]	; (80036f0 <HAL_SPI_RxCpltCallback+0x238>)
 80034f6:	2201      	movs	r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e7e8      	b.n	80034ce <HAL_SPI_RxCpltCallback+0x16>
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
 80034fc:	4b7d      	ldr	r3, [pc, #500]	; (80036f4 <HAL_SPI_RxCpltCallback+0x23c>)
 80034fe:	7e9a      	ldrb	r2, [r3, #26]
 8003500:	2afe      	cmp	r2, #254	; 0xfe
 8003502:	d008      	beq.n	8003516 <HAL_SPI_RxCpltCallback+0x5e>
		newPluck = 1;
 8003504:	4b7c      	ldr	r3, [pc, #496]	; (80036f8 <HAL_SPI_RxCpltCallback+0x240>)
 8003506:	2001      	movs	r0, #1
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 8003508:	2234      	movs	r2, #52	; 0x34
 800350a:	497a      	ldr	r1, [pc, #488]	; (80036f4 <HAL_SPI_RxCpltCallback+0x23c>)
		newPluck = 1;
 800350c:	6018      	str	r0, [r3, #0]
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 800350e:	4871      	ldr	r0, [pc, #452]	; (80036d4 <HAL_SPI_RxCpltCallback+0x21c>)
 8003510:	f00a fc20 	bl	800dd54 <HAL_SPI_Receive_DMA>
 8003514:	e7d8      	b.n	80034c8 <HAL_SPI_RxCpltCallback+0x10>
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
 8003516:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 800351a:	2afd      	cmp	r2, #253	; 0xfd
 800351c:	d1f2      	bne.n	8003504 <HAL_SPI_RxCpltCallback+0x4c>
			for (int i = 0; i < numStringsThisBoard; i++)
 800351e:	4a77      	ldr	r2, [pc, #476]	; (80036fc <HAL_SPI_RxCpltCallback+0x244>)
 8003520:	7811      	ldrb	r1, [r2, #0]
 8003522:	2900      	cmp	r1, #0
 8003524:	d0ee      	beq.n	8003504 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003526:	4a76      	ldr	r2, [pc, #472]	; (8003700 <HAL_SPI_RxCpltCallback+0x248>)
			for (int i = 0; i < numStringsThisBoard; i++)
 8003528:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800352a:	6810      	ldr	r0, [r2, #0]
 800352c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8003530:	f890 c01b 	ldrb.w	ip, [r0, #27]
 8003534:	6810      	ldr	r0, [r2, #0]
 8003536:	f100 000e 	add.w	r0, r0, #14
 800353a:	f813 5010 	ldrb.w	r5, [r3, r0, lsl #1]
 800353e:	4871      	ldr	r0, [pc, #452]	; (8003704 <HAL_SPI_RxCpltCallback+0x24c>)
 8003540:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003544:	6005      	str	r5, [r0, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003546:	d0dd      	beq.n	8003504 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003548:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800354a:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800354c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003550:	f895 e01d 	ldrb.w	lr, [r5, #29]
 8003554:	6815      	ldr	r5, [r2, #0]
 8003556:	f105 0c0f 	add.w	ip, r5, #15
 800355a:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 800355e:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8003562:	6045      	str	r5, [r0, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003564:	d0ce      	beq.n	8003504 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003566:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003568:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800356a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800356e:	f895 e01f 	ldrb.w	lr, [r5, #31]
 8003572:	6815      	ldr	r5, [r2, #0]
 8003574:	f105 0c10 	add.w	ip, r5, #16
 8003578:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 800357c:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8003580:	6085      	str	r5, [r0, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003582:	d0bf      	beq.n	8003504 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003584:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003586:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003588:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800358c:	f895 e021 	ldrb.w	lr, [r5, #33]	; 0x21
 8003590:	6815      	ldr	r5, [r2, #0]
 8003592:	f105 0c11 	add.w	ip, r5, #17
 8003596:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 800359a:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800359e:	60c5      	str	r5, [r0, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
 80035a0:	d0b0      	beq.n	8003504 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80035a2:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80035a4:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80035a6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80035aa:	f895 e023 	ldrb.w	lr, [r5, #35]	; 0x23
 80035ae:	6815      	ldr	r5, [r2, #0]
 80035b0:	f105 0c12 	add.w	ip, r5, #18
 80035b4:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 80035b8:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 80035bc:	6105      	str	r5, [r0, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
 80035be:	d0a1      	beq.n	8003504 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80035c0:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80035c2:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80035c4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80035c8:	f895 e025 	ldrb.w	lr, [r5, #37]	; 0x25
 80035cc:	6815      	ldr	r5, [r2, #0]
 80035ce:	f105 0c13 	add.w	ip, r5, #19
 80035d2:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 80035d6:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 80035da:	6145      	str	r5, [r0, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
 80035dc:	d092      	beq.n	8003504 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80035de:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80035e0:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80035e2:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80035e6:	f895 c027 	ldrb.w	ip, [r5, #39]	; 0x27
 80035ea:	6815      	ldr	r5, [r2, #0]
 80035ec:	f105 0514 	add.w	r5, r5, #20
 80035f0:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80035f4:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80035f8:	6185      	str	r5, [r0, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
 80035fa:	d083      	beq.n	8003504 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 80035fc:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80035fe:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003600:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003604:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
 8003608:	6815      	ldr	r5, [r2, #0]
 800360a:	f105 0515 	add.w	r5, r5, #21
 800360e:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003612:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003616:	61c5      	str	r5, [r0, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003618:	f43f af74 	beq.w	8003504 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800361c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800361e:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003620:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003624:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
 8003628:	6815      	ldr	r5, [r2, #0]
 800362a:	f105 0516 	add.w	r5, r5, #22
 800362e:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003632:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003636:	6205      	str	r5, [r0, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003638:	f43f af64 	beq.w	8003504 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800363c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800363e:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003640:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003644:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
 8003648:	6815      	ldr	r5, [r2, #0]
 800364a:	f105 0517 	add.w	r5, r5, #23
 800364e:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003652:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003656:	6245      	str	r5, [r0, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
 8003658:	f43f af54 	beq.w	8003504 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800365c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800365e:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003660:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003664:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
 8003668:	6815      	ldr	r5, [r2, #0]
 800366a:	f105 0518 	add.w	r5, r5, #24
 800366e:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003672:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003676:	6285      	str	r5, [r0, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
 8003678:	f43f af44 	beq.w	8003504 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800367c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800367e:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8003680:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003684:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
 8003688:	6815      	ldr	r5, [r2, #0]
 800368a:	f105 0519 	add.w	r5, r5, #25
 800368e:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
 8003692:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8003696:	62c3      	str	r3, [r0, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
 8003698:	f43f af34 	beq.w	8003504 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 800369c:	6813      	ldr	r3, [r2, #0]
 800369e:	6813      	ldr	r3, [r2, #0]
		if ((SPI_RX[14] == 254) && (SPI_RX[15] == 253))
 80036a0:	7bda      	ldrb	r2, [r3, #15]
 80036a2:	2afd      	cmp	r2, #253	; 0xfd
 80036a4:	f47f af26 	bne.w	80034f4 <HAL_SPI_RxCpltCallback+0x3c>
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + 8] << 8) + ((uint16_t)SPI_RX[(j * 2) + 9] & 0xff);
 80036a8:	7a98      	ldrb	r0, [r3, #10]
 80036aa:	7a1d      	ldrb	r5, [r3, #8]
 80036ac:	7a5a      	ldrb	r2, [r3, #9]
 80036ae:	7ad9      	ldrb	r1, [r3, #11]
 80036b0:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 80036b4:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80036b8:	4813      	ldr	r0, [pc, #76]	; (8003708 <HAL_SPI_RxCpltCallback+0x250>)
 80036ba:	e9c0 2100 	strd	r2, r1, [r0]
			for (int j = 0; j < 2; j++)
 80036be:	e719      	b.n	80034f4 <HAL_SPI_RxCpltCallback+0x3c>
		if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 80036c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036c4:	2bfd      	cmp	r3, #253	; 0xfd
 80036c6:	f47f af0c 	bne.w	80034e2 <HAL_SPI_RxCpltCallback+0x2a>
			handleSPI(LEVER_BUFFER_SIZE);
 80036ca:	2020      	movs	r0, #32
 80036cc:	f001 fa42 	bl	8004b54 <handleSPI>
			newLevers = 1;
 80036d0:	e707      	b.n	80034e2 <HAL_SPI_RxCpltCallback+0x2a>
 80036d2:	bf00      	nop
 80036d4:	20019640 	.word	0x20019640
 80036d8:	2000451c 	.word	0x2000451c
 80036dc:	200195b8 	.word	0x200195b8
 80036e0:	20019530 	.word	0x20019530
 80036e4:	30000100 	.word	0x30000100
 80036e8:	20004870 	.word	0x20004870
 80036ec:	30000180 	.word	0x30000180
 80036f0:	2000486c 	.word	0x2000486c
 80036f4:	300001a0 	.word	0x300001a0
 80036f8:	20004874 	.word	0x20004874
 80036fc:	20000066 	.word	0x20000066
 8003700:	200044a4 	.word	0x200044a4
 8003704:	20012e80 	.word	0x20012e80
 8003708:	20012ef0 	.word	0x20012ef0

0800370c <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800370c:	b538      	push	{r3, r4, r5, lr}
	interrupted = 1;

	if (hspi == &hspi5)
 800370e:	4b80      	ldr	r3, [pc, #512]	; (8003910 <HAL_SPI_RxHalfCpltCallback+0x204>)
	interrupted = 1;
 8003710:	2101      	movs	r1, #1
 8003712:	4a80      	ldr	r2, [pc, #512]	; (8003914 <HAL_SPI_RxHalfCpltCallback+0x208>)
	if (hspi == &hspi5)
 8003714:	4298      	cmp	r0, r3
	interrupted = 1;
 8003716:	7011      	strb	r1, [r2, #0]
	if (hspi == &hspi5)
 8003718:	d01d      	beq.n	8003756 <HAL_SPI_RxHalfCpltCallback+0x4a>
			}
		}
		newPluck = 1;

	}
	if (hspi == &hspi2)
 800371a:	4b7f      	ldr	r3, [pc, #508]	; (8003918 <HAL_SPI_RxHalfCpltCallback+0x20c>)
 800371c:	4298      	cmp	r0, r3
 800371e:	d011      	beq.n	8003744 <HAL_SPI_RxHalfCpltCallback+0x38>
			}
		}
		newBar = 1;

	}
	if (hspi == &hspi1)
 8003720:	4b7e      	ldr	r3, [pc, #504]	; (800391c <HAL_SPI_RxHalfCpltCallback+0x210>)
 8003722:	4298      	cmp	r0, r3
 8003724:	d000      	beq.n	8003728 <HAL_SPI_RxHalfCpltCallback+0x1c>
		{
			handleSPI(0);
			newLevers = 1;
		}
	}
}
 8003726:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 8003728:	4b7d      	ldr	r3, [pc, #500]	; (8003920 <HAL_SPI_RxHalfCpltCallback+0x214>)
 800372a:	7f9a      	ldrb	r2, [r3, #30]
 800372c:	2afe      	cmp	r2, #254	; 0xfe
 800372e:	d1fa      	bne.n	8003726 <HAL_SPI_RxHalfCpltCallback+0x1a>
 8003730:	7fdb      	ldrb	r3, [r3, #31]
 8003732:	2bfd      	cmp	r3, #253	; 0xfd
 8003734:	d1f7      	bne.n	8003726 <HAL_SPI_RxHalfCpltCallback+0x1a>
			handleSPI(0);
 8003736:	2000      	movs	r0, #0
 8003738:	f001 fa0c 	bl	8004b54 <handleSPI>
			newLevers = 1;
 800373c:	4b79      	ldr	r3, [pc, #484]	; (8003924 <HAL_SPI_RxHalfCpltCallback+0x218>)
 800373e:	2201      	movs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]
}
 8003742:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8003744:	4b78      	ldr	r3, [pc, #480]	; (8003928 <HAL_SPI_RxHalfCpltCallback+0x21c>)
 8003746:	799a      	ldrb	r2, [r3, #6]
 8003748:	2afe      	cmp	r2, #254	; 0xfe
 800374a:	f000 80d0 	beq.w	80038ee <HAL_SPI_RxHalfCpltCallback+0x1e2>
		newBar = 1;
 800374e:	4b77      	ldr	r3, [pc, #476]	; (800392c <HAL_SPI_RxHalfCpltCallback+0x220>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	e7e4      	b.n	8003720 <HAL_SPI_RxHalfCpltCallback+0x14>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
 8003756:	4b76      	ldr	r3, [pc, #472]	; (8003930 <HAL_SPI_RxHalfCpltCallback+0x224>)
 8003758:	781a      	ldrb	r2, [r3, #0]
 800375a:	2afe      	cmp	r2, #254	; 0xfe
 800375c:	d003      	beq.n	8003766 <HAL_SPI_RxHalfCpltCallback+0x5a>
		newPluck = 1;
 800375e:	4b75      	ldr	r3, [pc, #468]	; (8003934 <HAL_SPI_RxHalfCpltCallback+0x228>)
 8003760:	2201      	movs	r2, #1
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	e7d9      	b.n	800371a <HAL_SPI_RxHalfCpltCallback+0xe>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
 8003766:	7e5a      	ldrb	r2, [r3, #25]
 8003768:	2afd      	cmp	r2, #253	; 0xfd
 800376a:	d1f8      	bne.n	800375e <HAL_SPI_RxHalfCpltCallback+0x52>
			for (int i = 0; i < numStringsThisBoard; i++)
 800376c:	4a72      	ldr	r2, [pc, #456]	; (8003938 <HAL_SPI_RxHalfCpltCallback+0x22c>)
 800376e:	7811      	ldrb	r1, [r2, #0]
 8003770:	2900      	cmp	r1, #0
 8003772:	d0f4      	beq.n	800375e <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003774:	4a71      	ldr	r2, [pc, #452]	; (800393c <HAL_SPI_RxHalfCpltCallback+0x230>)
			for (int i = 0; i < numStringsThisBoard; i++)
 8003776:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003778:	6814      	ldr	r4, [r2, #0]
 800377a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800377e:	f894 c001 	ldrb.w	ip, [r4, #1]
 8003782:	6814      	ldr	r4, [r2, #0]
 8003784:	f104 0401 	add.w	r4, r4, #1
 8003788:	f813 5014 	ldrb.w	r5, [r3, r4, lsl #1]
 800378c:	4c6c      	ldr	r4, [pc, #432]	; (8003940 <HAL_SPI_RxHalfCpltCallback+0x234>)
 800378e:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003792:	6025      	str	r5, [r4, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003794:	d0e3      	beq.n	800375e <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003796:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003798:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800379a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800379e:	f895 e003 	ldrb.w	lr, [r5, #3]
 80037a2:	6815      	ldr	r5, [r2, #0]
 80037a4:	f105 0c02 	add.w	ip, r5, #2
 80037a8:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 80037ac:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 80037b0:	6065      	str	r5, [r4, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037b2:	d0d4      	beq.n	800375e <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80037b4:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037b6:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80037b8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80037bc:	f895 e005 	ldrb.w	lr, [r5, #5]
 80037c0:	6815      	ldr	r5, [r2, #0]
 80037c2:	f105 0c03 	add.w	ip, r5, #3
 80037c6:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 80037ca:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 80037ce:	60a5      	str	r5, [r4, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037d0:	d0c5      	beq.n	800375e <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80037d2:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037d4:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80037d6:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80037da:	f895 e007 	ldrb.w	lr, [r5, #7]
 80037de:	6815      	ldr	r5, [r2, #0]
 80037e0:	f105 0c04 	add.w	ip, r5, #4
 80037e4:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 80037e8:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 80037ec:	60e5      	str	r5, [r4, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037ee:	d0b6      	beq.n	800375e <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80037f0:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80037f2:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80037f4:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80037f8:	f895 e009 	ldrb.w	lr, [r5, #9]
 80037fc:	6815      	ldr	r5, [r2, #0]
 80037fe:	f105 0c05 	add.w	ip, r5, #5
 8003802:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8003806:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800380a:	6125      	str	r5, [r4, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
 800380c:	d0a7      	beq.n	800375e <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800380e:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003810:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003812:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003816:	f895 e00b 	ldrb.w	lr, [r5, #11]
 800381a:	6815      	ldr	r5, [r2, #0]
 800381c:	f105 0c06 	add.w	ip, r5, #6
 8003820:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8003824:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8003828:	6165      	str	r5, [r4, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
 800382a:	d098      	beq.n	800375e <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800382c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800382e:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8003830:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003834:	f895 c00d 	ldrb.w	ip, [r5, #13]
 8003838:	6815      	ldr	r5, [r2, #0]
 800383a:	f105 0507 	add.w	r5, r5, #7
 800383e:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003842:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003846:	61a5      	str	r5, [r4, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003848:	d089      	beq.n	800375e <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800384a:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800384c:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800384e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003852:	f895 c00f 	ldrb.w	ip, [r5, #15]
 8003856:	6815      	ldr	r5, [r2, #0]
 8003858:	f105 0508 	add.w	r5, r5, #8
 800385c:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003860:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003864:	61e5      	str	r5, [r4, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003866:	f43f af7a 	beq.w	800375e <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800386a:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800386c:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800386e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003872:	f895 c011 	ldrb.w	ip, [r5, #17]
 8003876:	6815      	ldr	r5, [r2, #0]
 8003878:	f105 0509 	add.w	r5, r5, #9
 800387c:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8003880:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8003884:	6225      	str	r5, [r4, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
 8003886:	f43f af6a 	beq.w	800375e <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800388a:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800388c:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800388e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8003892:	f895 c013 	ldrb.w	ip, [r5, #19]
 8003896:	6815      	ldr	r5, [r2, #0]
 8003898:	f105 050a 	add.w	r5, r5, #10
 800389c:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80038a0:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80038a4:	6265      	str	r5, [r4, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
 80038a6:	f43f af5a 	beq.w	800375e <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80038aa:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80038ac:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80038ae:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80038b2:	f895 c015 	ldrb.w	ip, [r5, #21]
 80038b6:	6815      	ldr	r5, [r2, #0]
 80038b8:	f105 050b 	add.w	r5, r5, #11
 80038bc:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80038c0:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80038c4:	62a5      	str	r5, [r4, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
 80038c6:	f43f af4a 	beq.w	800375e <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80038ca:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80038cc:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80038ce:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80038d2:	f895 c017 	ldrb.w	ip, [r5, #23]
 80038d6:	6815      	ldr	r5, [r2, #0]
 80038d8:	f105 050c 	add.w	r5, r5, #12
 80038dc:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
 80038e0:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 80038e4:	62e3      	str	r3, [r4, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
 80038e6:	f43f af3a 	beq.w	800375e <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80038ea:	6813      	ldr	r3, [r2, #0]
 80038ec:	6813      	ldr	r3, [r2, #0]
		if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 80038ee:	79da      	ldrb	r2, [r3, #7]
 80038f0:	2afd      	cmp	r2, #253	; 0xfd
 80038f2:	f47f af2c 	bne.w	800374e <HAL_SPI_RxHalfCpltCallback+0x42>
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2)] << 8) + ((uint16_t)SPI_RX[(j * 2) + 1] & 0xff);
 80038f6:	789c      	ldrb	r4, [r3, #2]
 80038f8:	781d      	ldrb	r5, [r3, #0]
 80038fa:	785a      	ldrb	r2, [r3, #1]
 80038fc:	78d9      	ldrb	r1, [r3, #3]
 80038fe:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8003902:	eb01 2104 	add.w	r1, r1, r4, lsl #8
 8003906:	4c0f      	ldr	r4, [pc, #60]	; (8003944 <HAL_SPI_RxHalfCpltCallback+0x238>)
 8003908:	e9c4 2100 	strd	r2, r1, [r4]
			for (int j = 0; j < 2; j++)
 800390c:	e71f      	b.n	800374e <HAL_SPI_RxHalfCpltCallback+0x42>
 800390e:	bf00      	nop
 8003910:	20019640 	.word	0x20019640
 8003914:	2000451c 	.word	0x2000451c
 8003918:	200195b8 	.word	0x200195b8
 800391c:	20019530 	.word	0x20019530
 8003920:	30000100 	.word	0x30000100
 8003924:	20004870 	.word	0x20004870
 8003928:	30000180 	.word	0x30000180
 800392c:	2000486c 	.word	0x2000486c
 8003930:	300001a0 	.word	0x300001a0
 8003934:	20004874 	.word	0x20004874
 8003938:	20000066 	.word	0x20000066
 800393c:	200044a4 	.word	0x200044a4
 8003940:	20012e80 	.word	0x20012e80
 8003944:	20012ef0 	.word	0x20012ef0

08003948 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003948:	b508      	push	{r3, lr}
	interrupted = 1;

	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 800394a:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <HAL_SPI_TxRxCpltCallback+0x2c>)
	interrupted = 1;
 800394c:	2001      	movs	r0, #1
 800394e:	490a      	ldr	r1, [pc, #40]	; (8003978 <HAL_SPI_TxRxCpltCallback+0x30>)
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 8003950:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	interrupted = 1;
 8003954:	7008      	strb	r0, [r1, #0]
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 8003956:	2afe      	cmp	r2, #254	; 0xfe
 8003958:	d003      	beq.n	8003962 <HAL_SPI_TxRxCpltCallback+0x1a>
	{
		handleSPI(LEVER_BUFFER_SIZE);
		newLevers = 1;
	}
	newLevers = 1;
 800395a:	4b08      	ldr	r3, [pc, #32]	; (800397c <HAL_SPI_TxRxCpltCallback+0x34>)
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]
}
 8003960:	bd08      	pop	{r3, pc}
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 8003962:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003966:	2bfd      	cmp	r3, #253	; 0xfd
 8003968:	d1f7      	bne.n	800395a <HAL_SPI_TxRxCpltCallback+0x12>
		handleSPI(LEVER_BUFFER_SIZE);
 800396a:	2020      	movs	r0, #32
 800396c:	f001 f8f2 	bl	8004b54 <handleSPI>
		newLevers = 1;
 8003970:	e7f3      	b.n	800395a <HAL_SPI_TxRxCpltCallback+0x12>
 8003972:	bf00      	nop
 8003974:	30000100 	.word	0x30000100
 8003978:	2000451c 	.word	0x2000451c
 800397c:	20004870 	.word	0x20004870

08003980 <HAL_SPI_TxRxHalfCpltCallback>:
void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 8003980:	4b08      	ldr	r3, [pc, #32]	; (80039a4 <HAL_SPI_TxRxHalfCpltCallback+0x24>)
	interrupted = 1;
 8003982:	4909      	ldr	r1, [pc, #36]	; (80039a8 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
{
 8003984:	b510      	push	{r4, lr}
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 8003986:	7f9a      	ldrb	r2, [r3, #30]
	interrupted = 1;
 8003988:	2401      	movs	r4, #1
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 800398a:	2afe      	cmp	r2, #254	; 0xfe
	interrupted = 1;
 800398c:	700c      	strb	r4, [r1, #0]
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 800398e:	d000      	beq.n	8003992 <HAL_SPI_TxRxHalfCpltCallback+0x12>
	{
		handleSPI(0);
		newLevers = 1;
	}
}
 8003990:	bd10      	pop	{r4, pc}
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 8003992:	7fdb      	ldrb	r3, [r3, #31]
 8003994:	2bfd      	cmp	r3, #253	; 0xfd
 8003996:	d1fb      	bne.n	8003990 <HAL_SPI_TxRxHalfCpltCallback+0x10>
		handleSPI(0);
 8003998:	2000      	movs	r0, #0
 800399a:	f001 f8db 	bl	8004b54 <handleSPI>
		newLevers = 1;
 800399e:	4b03      	ldr	r3, [pc, #12]	; (80039ac <HAL_SPI_TxRxHalfCpltCallback+0x2c>)
 80039a0:	601c      	str	r4, [r3, #0]
}
 80039a2:	bd10      	pop	{r4, pc}
 80039a4:	30000100 	.word	0x30000100
 80039a8:	2000451c 	.word	0x2000451c
 80039ac:	20004870 	.word	0x20004870

080039b0 <HAL_SAI_TxCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
	if (!diskBusy)
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <HAL_SAI_TxCpltCallback+0x10>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	b103      	cbz	r3, 80039b8 <HAL_SAI_TxCpltCallback+0x8>
	audioFrame(HALF_BUFFER_SIZE);
}
 80039b6:	4770      	bx	lr
	audioFrame(HALF_BUFFER_SIZE);
 80039b8:	2010      	movs	r0, #16
 80039ba:	f7ff bb2b 	b.w	8003014 <audioFrame>
 80039be:	bf00      	nop
 80039c0:	20013048 	.word	0x20013048

080039c4 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
	if (!diskBusy)
 80039c4:	4b02      	ldr	r3, [pc, #8]	; (80039d0 <HAL_SAI_TxHalfCpltCallback+0xc>)
 80039c6:	7818      	ldrb	r0, [r3, #0]
 80039c8:	b100      	cbz	r0, 80039cc <HAL_SAI_TxHalfCpltCallback+0x8>
	audioFrame(0);
}
 80039ca:	4770      	bx	lr
	audioFrame(0);
 80039cc:	f7ff bb22 	b.w	8003014 <audioFrame>
 80039d0:	20013048 	.word	0x20013048

080039d4 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop

080039d8 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 80039d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80039dc:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 80039de:	b082      	sub	sp, #8
 80039e0:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80039e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039e6:	483b      	ldr	r0, [pc, #236]	; (8003ad4 <AudioCodec_init+0xfc>)
 80039e8:	f005 fc66 	bl	80092b8 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 80039ec:	2002      	movs	r0, #2
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 80039ee:	4c3a      	ldr	r4, [pc, #232]	; (8003ad8 <AudioCodec_init+0x100>)
	HAL_Delay(2);
 80039f0:	f003 fe8a 	bl	8007708 <HAL_Delay>
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039f4:	4f39      	ldr	r7, [pc, #228]	; (8003adc <AudioCodec_init+0x104>)
	myI2cData[0] = 0x07;
 80039f6:	f240 3307 	movw	r3, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80039fa:	4e39      	ldr	r6, [pc, #228]	; (8003ae0 <AudioCodec_init+0x108>)
 80039fc:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 80039fe:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a00:	2120      	movs	r1, #32
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	4628      	mov	r0, r5
 8003a06:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8003ae8 <AudioCodec_init+0x110>
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	8833      	ldrh	r3, [r6, #0]
 8003a0e:	f005 fd7d 	bl	800950c <HAL_I2C_Master_Transmit>

	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a16:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a1a:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x01;
 8003a1c:	f244 1301 	movw	r3, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a20:	2120      	movs	r1, #32
 8003a22:	4628      	mov	r0, r5
	myI2cData[0] = 0x01;
 8003a24:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a26:	8833      	ldrh	r3, [r6, #0]
 8003a28:	f005 fd70 	bl	800950c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a30:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a34:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x02;
 8003a36:	2302      	movs	r3, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a38:	2120      	movs	r1, #32
 8003a3a:	4628      	mov	r0, r5
	myI2cData[0] = 0x02;
 8003a3c:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a3e:	8833      	ldrh	r3, [r6, #0]
 8003a40:	f005 fd64 	bl	800950c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a48:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a4c:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x03;
 8003a4e:	f647 1303 	movw	r3, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a52:	2120      	movs	r1, #32
 8003a54:	4628      	mov	r0, r5
	myI2cData[0] = 0x03;
 8003a56:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a58:	8833      	ldrh	r3, [r6, #0]
 8003a5a:	f005 fd57 	bl	800950c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a62:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a66:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x04;
 8003a68:	f44f 7382 	mov.w	r3, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a6c:	2120      	movs	r1, #32
 8003a6e:	4628      	mov	r0, r5
	myI2cData[0] = 0x04;
 8003a70:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a72:	8833      	ldrh	r3, [r6, #0]
 8003a74:	f005 fd4a 	bl	800950c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a7c:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a80:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x05;
 8003a82:	f240 1305 	movw	r3, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a86:	2120      	movs	r1, #32
 8003a88:	4628      	mov	r0, r5
	myI2cData[0] = 0x05;
 8003a8a:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a8c:	8833      	ldrh	r3, [r6, #0]
 8003a8e:	f005 fd3d 	bl	800950c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a96:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003a9a:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x06;
 8003a9c:	f241 0306 	movw	r3, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003aa0:	2120      	movs	r1, #32
 8003aa2:	4628      	mov	r0, r5
	myI2cData[0] = 0x06;
 8003aa4:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003aa6:	8833      	ldrh	r3, [r6, #0]
 8003aa8:	f005 fd30 	bl	800950c <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003aac:	683a      	ldr	r2, [r7, #0]
	myI2cData[0] = 0x07;
 8003aae:	f240 2107 	movw	r1, #519	; 0x207
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003ab2:	8833      	ldrh	r3, [r6, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003ab4:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003ab8:	4628      	mov	r0, r5
 8003aba:	9200      	str	r2, [sp, #0]
 8003abc:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8003abe:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	f005 fd23 	bl	800950c <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8003ac6:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <AudioCodec_init+0x10c>)
 8003ac8:	2201      	movs	r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

}
 8003acc:	b002      	add	sp, #8
 8003ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad2:	bf00      	nop
 8003ad4:	58020800 	.word	0x58020800
 8003ad8:	20012f78 	.word	0x20012f78
 8003adc:	20000080 	.word	0x20000080
 8003ae0:	20000084 	.word	0x20000084
 8003ae4:	2000037c 	.word	0x2000037c
 8003ae8:	20012f7a 	.word	0x20012f7a

08003aec <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003aec:	4b20      	ldr	r3, [pc, #128]	; (8003b70 <MX_DMA_Init+0x84>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 11, 0);
 8003aee:	210b      	movs	r1, #11
 8003af0:	2200      	movs	r2, #0
 8003af2:	4608      	mov	r0, r1
{
 8003af4:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003af6:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8003afa:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003afc:	f044 0401 	orr.w	r4, r4, #1
 8003b00:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8003b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 11, 0);
 8003b10:	f003 fe2e 	bl	8007770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003b14:	200b      	movs	r0, #11
 8003b16:	f003 fe69 	bl	80077ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	210a      	movs	r1, #10
 8003b1e:	200c      	movs	r0, #12
 8003b20:	f003 fe26 	bl	8007770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003b24:	200c      	movs	r0, #12
 8003b26:	f003 fe61 	bl	80077ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 9, 0);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2109      	movs	r1, #9
 8003b2e:	200d      	movs	r0, #13
 8003b30:	f003 fe1e 	bl	8007770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003b34:	200d      	movs	r0, #13
 8003b36:	f003 fe59 	bl	80077ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 8, 0);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2108      	movs	r1, #8
 8003b3e:	200e      	movs	r0, #14
 8003b40:	f003 fe16 	bl	8007770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003b44:	200e      	movs	r0, #14
 8003b46:	f003 fe51 	bl	80077ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2107      	movs	r1, #7
 8003b4e:	200f      	movs	r0, #15
 8003b50:	f003 fe0e 	bl	8007770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003b54:	200f      	movs	r0, #15
 8003b56:	f003 fe49 	bl	80077ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	2010      	movs	r0, #16
 8003b5e:	4611      	mov	r1, r2
 8003b60:	f003 fe06 	bl	8007770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003b64:	2010      	movs	r0, #16

}
 8003b66:	b002      	add	sp, #8
 8003b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003b6c:	f003 be3e 	b.w	80077ec <HAL_NVIC_EnableIRQ>
 8003b70:	58024400 	.word	0x58024400
 8003b74:	00000000 	.word	0x00000000

08003b78 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003b78:	481f      	ldr	r0, [pc, #124]	; (8003bf8 <MX_FMC_Init+0x80>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8003b7a:	2201      	movs	r2, #1
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8003b7c:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8003b7e:	2108      	movs	r1, #8
{
 8003b80:	b510      	push	{r4, lr}
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003b82:	4c1e      	ldr	r4, [pc, #120]	; (8003bfc <MX_FMC_Init+0x84>)
{
 8003b84:	b088      	sub	sp, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8003b86:	6082      	str	r2, [r0, #8]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003b88:	2210      	movs	r2, #16
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8003b8a:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8003b8c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8003b90:	6102      	str	r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8003b92:	f44f 7280 	mov.w	r2, #256	; 0x100
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003b96:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8003b98:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8003b9a:	e9c0 4300 	strd	r4, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003b9e:	2440      	movs	r4, #64	; 0x40
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8003ba0:	2306      	movs	r3, #6
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8003ba2:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003ba6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 8003baa:	2402      	movs	r4, #2
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8003bac:	e9c0 1208 	strd	r1, r2, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
 8003bb0:	2204      	movs	r2, #4

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003bb2:	4669      	mov	r1, sp
  SdramTiming.RCDDelay = 2;
 8003bb4:	9406      	str	r4, [sp, #24]
  SdramTiming.LoadToActiveDelay = 2;
 8003bb6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8003bf0 <MX_FMC_Init+0x78>
 8003bba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	ed8d 7b00 	vstr	d7, [sp]
 8003bc6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8003bca:	f009 ff31 	bl	800da30 <HAL_SDRAM_Init>
 8003bce:	b928      	cbnz	r0, 8003bdc <MX_FMC_Init+0x64>
  {
    Error_Handler( );
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8003bd0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8003bd4:	f003 fdb0 	bl	8007738 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8003bd8:	b008      	add	sp, #32
 8003bda:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8003bdc:	f003 f882 	bl	8006ce4 <Error_Handler>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8003be0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8003be4:	f003 fda8 	bl	8007738 <HAL_SetFMCMemorySwappingConfig>
}
 8003be8:	b008      	add	sp, #32
 8003bea:	bd10      	pop	{r4, pc}
 8003bec:	f3af 8000 	nop.w
 8003bf0:	00000002 	.word	0x00000002
 8003bf4:	00000006 	.word	0x00000006
 8003bf8:	20012f80 	.word	0x20012f80
 8003bfc:	52004140 	.word	0x52004140

08003c00 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8003c00:	4836      	ldr	r0, [pc, #216]	; (8003cdc <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c02:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8003c04:	b5d0      	push	{r4, r6, r7, lr}
 8003c06:	b0b8      	sub	sp, #224	; 0xe0
  if (FMC_Initialized) {
 8003c08:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003c0e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003c12:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 8003c14:	b109      	cbz	r1, 8003c1a <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003c16:	b038      	add	sp, #224	; 0xe0
 8003c18:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 8003c1a:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c1c:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
 8003c1e:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c20:	a80a      	add	r0, sp, #40	; 0x28
 8003c22:	f016 fb15 	bl	801a250 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8003c26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c2a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c2c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8003c2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c32:	f007 f8eb 	bl	800ae0c <HAL_RCCEx_PeriphCLKConfig>
 8003c36:	2800      	cmp	r0, #0
 8003c38:	d14c      	bne.n	8003cd4 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 8003c3a:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003c3c:	f64f 003f 	movw	r0, #63551	; 0xf83f
 8003c40:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c42:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8003c44:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003c48:	2600      	movs	r6, #0
 8003c4a:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8003c4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c50:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8003c54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c58:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003c5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8003c62:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c64:	a902      	add	r1, sp, #8
 8003c66:	481f      	ldr	r0, [pc, #124]	; (8003ce4 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8003c68:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003c6a:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c6e:	f005 f9d3 	bl	8009018 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8003c72:	2219      	movs	r2, #25
 8003c74:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c76:	a902      	add	r1, sp, #8
 8003c78:	481b      	ldr	r0, [pc, #108]	; (8003ce8 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c7a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8003c7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c80:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c84:	f005 f9c8 	bl	8009018 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8003c88:	f248 1237 	movw	r2, #33079	; 0x8137
 8003c8c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c8e:	a902      	add	r1, sp, #8
 8003c90:	4816      	ldr	r0, [pc, #88]	; (8003cec <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003c92:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8003c94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c98:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003c9c:	f005 f9bc 	bl	8009018 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003ca0:	f64f 7283 	movw	r2, #65411	; 0xff83
 8003ca4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ca6:	a902      	add	r1, sp, #8
 8003ca8:	4811      	ldr	r0, [pc, #68]	; (8003cf0 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003caa:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003cac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003cb0:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cb4:	f005 f9b0 	bl	8009018 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003cb8:	f24c 7203 	movw	r2, #50947	; 0xc703
 8003cbc:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cbe:	a902      	add	r1, sp, #8
 8003cc0:	480c      	ldr	r0, [pc, #48]	; (8003cf4 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003cc2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003cc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003cc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ccc:	f005 f9a4 	bl	8009018 <HAL_GPIO_Init>
}
 8003cd0:	b038      	add	sp, #224	; 0xe0
 8003cd2:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8003cd4:	f003 f806 	bl	8006ce4 <Error_Handler>
 8003cd8:	e7af      	b.n	8003c3a <HAL_SDRAM_MspInit+0x3a>
 8003cda:	bf00      	nop
 8003cdc:	20012f7c 	.word	0x20012f7c
 8003ce0:	58024400 	.word	0x58024400
 8003ce4:	58021400 	.word	0x58021400
 8003ce8:	58020800 	.word	0x58020800
 8003cec:	58021800 	.word	0x58021800
 8003cf0:	58021000 	.word	0x58021000
 8003cf4:	58020c00 	.word	0x58020c00

08003cf8 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8003cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cfc:	4b7e      	ldr	r3, [pc, #504]	; (8003ef8 <MX_GPIO_Init+0x200>)
{
 8003cfe:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d00:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003d02:	4f7e      	ldr	r7, [pc, #504]	; (8003efc <MX_GPIO_Init+0x204>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003d04:	4e7e      	ldr	r6, [pc, #504]	; (8003f00 <MX_GPIO_Init+0x208>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003d06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d0a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003d0c:	4638      	mov	r0, r7

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003d0e:	4d7d      	ldr	r5, [pc, #500]	; (8003f04 <MX_GPIO_Init+0x20c>)

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d10:	f04f 0a01 	mov.w	sl, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003d14:	f04f 0800 	mov.w	r8, #0
 8003d18:	f04f 0900 	mov.w	r9, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d1c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8003d20:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003d28:	f042 0210 	orr.w	r2, r2, #16
 8003d2c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003d30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003d34:	f002 0210 	and.w	r2, r2, #16
 8003d38:	9200      	str	r2, [sp, #0]
 8003d3a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003d40:	f042 0204 	orr.w	r2, r2, #4
 8003d44:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003d48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003d4c:	f002 0204 	and.w	r2, r2, #4
 8003d50:	9201      	str	r2, [sp, #4]
 8003d52:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003d58:	f042 0220 	orr.w	r2, r2, #32
 8003d5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003d60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003d64:	f002 0220 	and.w	r2, r2, #32
 8003d68:	9202      	str	r2, [sp, #8]
 8003d6a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003d70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003d74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003d78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003d7c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003d80:	9203      	str	r2, [sp, #12]
 8003d82:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003d88:	f042 0201 	orr.w	r2, r2, #1
 8003d8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003d90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003d94:	f002 0201 	and.w	r2, r2, #1
 8003d98:	9204      	str	r2, [sp, #16]
 8003d9a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003da0:	f042 0202 	orr.w	r2, r2, #2
 8003da4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003da8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003dac:	f002 0202 	and.w	r2, r2, #2
 8003db0:	9205      	str	r2, [sp, #20]
 8003db2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003db4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003db8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dbc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003dc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003dc4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003dc8:	9206      	str	r2, [sp, #24]
 8003dca:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dcc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003dd0:	f042 0208 	orr.w	r2, r2, #8
 8003dd4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003dd8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	9307      	str	r3, [sp, #28]
 8003de4:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8003de6:	f005 fa67 	bl	80092b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003dea:	4622      	mov	r2, r4
 8003dec:	4630      	mov	r0, r6
 8003dee:	2102      	movs	r1, #2
 8003df0:	f005 fa62 	bl	80092b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8003df4:	4622      	mov	r2, r4
 8003df6:	4628      	mov	r0, r5
 8003df8:	2110      	movs	r1, #16
 8003dfa:	f005 fa5d 	bl	80092b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8003dfe:	f242 0220 	movw	r2, #8224	; 0x2020
 8003e02:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e04:	a908      	add	r1, sp, #32
 8003e06:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e08:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8003e0c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e10:	f005 f902 	bl	8009018 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003e14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e18:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e1a:	a908      	add	r1, sp, #32
 8003e1c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003e1e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003e22:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e26:	f005 f8f7 	bl	8009018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8003e2a:	f248 02c6 	movw	r2, #32966	; 0x80c6
 8003e2e:	2303      	movs	r3, #3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e30:	4638      	mov	r0, r7
 8003e32:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e34:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8003e36:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e3a:	f005 f8ed 	bl	8009018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e42:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e44:	a908      	add	r1, sp, #32
 8003e46:	4830      	ldr	r0, [pc, #192]	; (8003f08 <MX_GPIO_Init+0x210>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e48:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e4e:	f005 f8e3 	bl	8009018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e52:	2201      	movs	r2, #1
 8003e54:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e56:	a908      	add	r1, sp, #32
 8003e58:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e5a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e62:	f005 f8d9 	bl	8009018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e66:	2202      	movs	r2, #2
 8003e68:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e6a:	a908      	add	r1, sp, #32
 8003e6c:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003e72:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e76:	f005 f8cf 	bl	8009018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8003e7a:	f649 720c 	movw	r2, #40716	; 0x9f0c
 8003e7e:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e80:	4630      	mov	r0, r6
 8003e82:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e84:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8003e86:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8a:	f005 f8c5 	bl	8009018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 8003e8e:	f240 32e5 	movw	r2, #997	; 0x3e5
 8003e92:	2303      	movs	r3, #3
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e94:	a908      	add	r1, sp, #32
 8003e96:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e98:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 8003e9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9e:	f005 f8bb 	bl	8009018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ea6:	a908      	add	r1, sp, #32
 8003ea8:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003eaa:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003eae:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eb2:	f005 f8b1 	bl	8009018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8003eb6:	f643 02f8 	movw	r2, #14584	; 0x38f8
 8003eba:	2303      	movs	r3, #3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ebc:	a908      	add	r1, sp, #32
 8003ebe:	4813      	ldr	r0, [pc, #76]	; (8003f0c <MX_GPIO_Init+0x214>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8003ec2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ec6:	f005 f8a7 	bl	8009018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8003eca:	f647 62c8 	movw	r2, #32456	; 0x7ec8
 8003ece:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ed0:	a908      	add	r1, sp, #32
 8003ed2:	480f      	ldr	r0, [pc, #60]	; (8003f10 <MX_GPIO_Init+0x218>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8003ed6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003eda:	f005 f89d 	bl	8009018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ede:	2210      	movs	r2, #16
 8003ee0:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ee2:	a908      	add	r1, sp, #32
 8003ee4:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ee6:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8003eea:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eee:	f005 f893 	bl	8009018 <HAL_GPIO_Init>

}
 8003ef2:	b00e      	add	sp, #56	; 0x38
 8003ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef8:	58024400 	.word	0x58024400
 8003efc:	58020800 	.word	0x58020800
 8003f00:	58020000 	.word	0x58020000
 8003f04:	58020400 	.word	0x58020400
 8003f08:	58021400 	.word	0x58021400
 8003f0c:	58020c00 	.word	0x58020c00
 8003f10:	58021800 	.word	0x58021800

08003f14 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8003f14:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003f16:	4817      	ldr	r0, [pc, #92]	; (8003f74 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	4917      	ldr	r1, [pc, #92]	; (8003f78 <MX_I2C2_Init+0x64>)
 8003f1c:	2401      	movs	r4, #1
 8003f1e:	4a17      	ldr	r2, [pc, #92]	; (8003f7c <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f20:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f22:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
 8003f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f2a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003f2e:	f005 fa8f 	bl	8009450 <HAL_I2C_Init>
 8003f32:	b950      	cbnz	r0, 8003f4a <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003f34:	2100      	movs	r1, #0
 8003f36:	480f      	ldr	r0, [pc, #60]	; (8003f74 <MX_I2C2_Init+0x60>)
 8003f38:	f006 f818 	bl	8009f6c <HAL_I2CEx_ConfigAnalogFilter>
 8003f3c:	b968      	cbnz	r0, 8003f5a <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003f3e:	2100      	movs	r1, #0
 8003f40:	480c      	ldr	r0, [pc, #48]	; (8003f74 <MX_I2C2_Init+0x60>)
 8003f42:	f006 f847 	bl	8009fd4 <HAL_I2CEx_ConfigDigitalFilter>
 8003f46:	b980      	cbnz	r0, 8003f6a <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003f48:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003f4a:	f002 fecb 	bl	8006ce4 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003f4e:	2100      	movs	r1, #0
 8003f50:	4808      	ldr	r0, [pc, #32]	; (8003f74 <MX_I2C2_Init+0x60>)
 8003f52:	f006 f80b 	bl	8009f6c <HAL_I2CEx_ConfigAnalogFilter>
 8003f56:	2800      	cmp	r0, #0
 8003f58:	d0f1      	beq.n	8003f3e <MX_I2C2_Init+0x2a>
    Error_Handler();
 8003f5a:	f002 fec3 	bl	8006ce4 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003f5e:	2100      	movs	r1, #0
 8003f60:	4804      	ldr	r0, [pc, #16]	; (8003f74 <MX_I2C2_Init+0x60>)
 8003f62:	f006 f837 	bl	8009fd4 <HAL_I2CEx_ConfigDigitalFilter>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d0ee      	beq.n	8003f48 <MX_I2C2_Init+0x34>
}
 8003f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003f6e:	f002 beb9 	b.w	8006ce4 <Error_Handler>
 8003f72:	bf00      	nop
 8003f74:	20012fb4 	.word	0x20012fb4
 8003f78:	40005800 	.word	0x40005800
 8003f7c:	00b03fdb 	.word	0x00b03fdb

08003f80 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003f80:	b510      	push	{r4, lr}
 8003f82:	b0b8      	sub	sp, #224	; 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	2100      	movs	r1, #0
{
 8003f86:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f88:	22c0      	movs	r2, #192	; 0xc0
 8003f8a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f8c:	9106      	str	r1, [sp, #24]
 8003f8e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8003f92:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f96:	f016 f95b 	bl	801a250 <memset>
  if(i2cHandle->Instance==I2C2)
 8003f9a:	4b27      	ldr	r3, [pc, #156]	; (8004038 <HAL_I2C_MspInit+0xb8>)
 8003f9c:	6822      	ldr	r2, [r4, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d001      	beq.n	8003fa6 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8003fa2:	b038      	add	sp, #224	; 0xe0
 8003fa4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003faa:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003fac:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fb0:	f006 ff2c 	bl	800ae0c <HAL_RCCEx_PeriphCLKConfig>
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	d138      	bne.n	800402a <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fb8:	4c20      	ldr	r4, [pc, #128]	; (800403c <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003fba:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fbc:	a902      	add	r1, sp, #8
 8003fbe:	4820      	ldr	r0, [pc, #128]	; (8004040 <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fc0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8003fc4:	f043 0302 	orr.w	r3, r3, #2
 8003fc8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8003fcc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003fd0:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003fd2:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd4:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003fd8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8004030 <HAL_I2C_MspInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003fe6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fea:	f005 f815 	bl	8009018 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003fee:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ff6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8003ffa:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ffc:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8004000:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8004004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004008:	9301      	str	r3, [sp, #4]
 800400a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800400c:	f003 fbb0 	bl	8007770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8004010:	2021      	movs	r0, #33	; 0x21
 8004012:	f003 fbeb 	bl	80077ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 8004016:	2200      	movs	r2, #0
 8004018:	2101      	movs	r1, #1
 800401a:	2022      	movs	r0, #34	; 0x22
 800401c:	f003 fba8 	bl	8007770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8004020:	2022      	movs	r0, #34	; 0x22
 8004022:	f003 fbe3 	bl	80077ec <HAL_NVIC_EnableIRQ>
}
 8004026:	b038      	add	sp, #224	; 0xe0
 8004028:	bd10      	pop	{r4, pc}
      Error_Handler();
 800402a:	f002 fe5b 	bl	8006ce4 <Error_Handler>
 800402e:	e7c3      	b.n	8003fb8 <HAL_I2C_MspInit+0x38>
 8004030:	00000c00 	.word	0x00000c00
 8004034:	00000012 	.word	0x00000012
 8004038:	40005800 	.word	0x40005800
 800403c:	58024400 	.word	0x58024400
 8004040:	58020400 	.word	0x58020400

08004044 <scaleOscPitch>:
}

float __ATTR_ITCMRAM scaleOscPitch(float input)
{
	//input = LEAF_clip(0.0f, input, 1.0f);
	return (input * 48.0f) - 24.0f;
 8004044:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
 8004048:	ed9f 7a03 	vldr	s14, [pc, #12]	; 8004058 <scaleOscPitch+0x14>
}
 800404c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004050:	eeb0 0a67 	vmov.f32	s0, s15
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	42400000 	.word	0x42400000

0800405c <scaleOscFine>:

float __ATTR_ITCMRAM scaleOscFine(float input)
{
	//input = LEAF_clip(0.0f, input, 1.f);
	return (input * 200.0f) - 100.0f;
 800405c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004070 <scaleOscFine+0x14>
 8004060:	eddf 7a04 	vldr	s15, [pc, #16]	; 8004074 <scaleOscFine+0x18>
}
 8004064:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004068:	eeb0 0a67 	vmov.f32	s0, s15
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	43480000 	.word	0x43480000
 8004074:	c2c80000 	.word	0xc2c80000

08004078 <scaleOscFreq>:

float __ATTR_ITCMRAM scaleOscFreq(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return (input * 4000.0f) - 2000.0f;
 8004078:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800408c <scaleOscFreq+0x14>
 800407c:	eddf 7a04 	vldr	s15, [pc, #16]	; 8004090 <scaleOscFreq+0x18>
}
 8004080:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004084:	eeb0 0a67 	vmov.f32	s0, s15
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	457a0000 	.word	0x457a0000
 8004090:	c4fa0000 	.word	0xc4fa0000

08004094 <scaleFilterCutoff>:
}

float __ATTR_ITCMRAM scaleFilterCutoff(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return (input * 127.0f);
 8004094:	eddf 7a02 	vldr	s15, [pc, #8]	; 80040a0 <scaleFilterCutoff+0xc>
}
 8004098:	ee20 0a27 	vmul.f32	s0, s0, s15
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	42fe0000 	.word	0x42fe0000

080040a4 <scaleFinalLowpass>:
}

float __ATTR_ITCMRAM scaleFinalLowpass(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return ((input * 70.0f) + 58.0f);
 80040a4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80040b8 <scaleFinalLowpass+0x14>
 80040a8:	eddf 7a04 	vldr	s15, [pc, #16]	; 80040bc <scaleFinalLowpass+0x18>
}
 80040ac:	eee0 7a07 	vfma.f32	s15, s0, s14
 80040b0:	eeb0 0a67 	vmov.f32	s0, s15
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	428c0000 	.word	0x428c0000
 80040bc:	42680000 	.word	0x42680000

080040c0 <blankFunction>:


void blankFunction(float a, int b, int c)
{
	;
}
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop

080040c4 <checkForSDCardPreset>:
{
 80040c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint8_t status = SD_PRESENT;
 80040c8:	2301      	movs	r3, #1
{
 80040ca:	b08a      	sub	sp, #40	; 0x28
 80040cc:	4606      	mov	r6, r0
  __IO uint8_t status = SD_PRESENT;
 80040ce:	f88d 300b 	strb.w	r3, [sp, #11]
  if (BSP_PlatformIsDetected() != 0x0)
 80040d2:	f00b fd25 	bl	800fb20 <BSP_PlatformIsDetected>
 80040d6:	b110      	cbz	r0, 80040de <checkForSDCardPreset+0x1a>
    status = SD_NOT_PRESENT;
 80040d8:	2300      	movs	r3, #0
 80040da:	f88d 300b 	strb.w	r3, [sp, #11]
  return status;
 80040de:	f89d 300b 	ldrb.w	r3, [sp, #11]
	if(BSP_SD_IsDetected())
 80040e2:	b95b      	cbnz	r3, 80040fc <checkForSDCardPreset+0x38>
 80040e4:	4c39      	ldr	r4, [pc, #228]	; (80041cc <checkForSDCardPreset+0x108>)
 80040e6:	4d3a      	ldr	r5, [pc, #232]	; (80041d0 <checkForSDCardPreset+0x10c>)
		loadFailed = 1;
 80040e8:	2301      	movs	r3, #1
 80040ea:	2000      	movs	r0, #0
 80040ec:	702b      	strb	r3, [r5, #0]
	presetWaitingToLoad = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	4a38      	ldr	r2, [pc, #224]	; (80041d4 <checkForSDCardPreset+0x110>)
 80040f2:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 80040f4:	7023      	strb	r3, [r4, #0]
}
 80040f6:	b00a      	add	sp, #40	; 0x28
 80040f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		loadFailed = 0;
 80040fc:	2700      	movs	r7, #0
		diskBusy = 1;
 80040fe:	f04f 0801 	mov.w	r8, #1
 8004102:	4c32      	ldr	r4, [pc, #200]	; (80041cc <checkForSDCardPreset+0x108>)
		loadFailed = 0;
 8004104:	4d32      	ldr	r5, [pc, #200]	; (80041d0 <checkForSDCardPreset+0x10c>)
		disk_initialize(0);
 8004106:	4638      	mov	r0, r7
		diskBusy = 1;
 8004108:	f884 8000 	strb.w	r8, [r4]
		loadFailed = 0;
 800410c:	702f      	strb	r7, [r5, #0]
		disk_initialize(0);
 800410e:	f00b fda1 	bl	800fc54 <disk_initialize>
	    disk_status(0);
 8004112:	4638      	mov	r0, r7
 8004114:	f00b fd94 	bl	800fc40 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8004118:	4642      	mov	r2, r8
 800411a:	492f      	ldr	r1, [pc, #188]	; (80041d8 <checkForSDCardPreset+0x114>)
 800411c:	482f      	ldr	r0, [pc, #188]	; (80041dc <checkForSDCardPreset+0x118>)
 800411e:	f00e f82d 	bl	801217c <f_mount>
 8004122:	2800      	cmp	r0, #0
 8004124:	d1e0      	bne.n	80040e8 <checkForSDCardPreset+0x24>
			itoa(numberToLoad, charBuf, 10);
 8004126:	a904      	add	r1, sp, #16
 8004128:	220a      	movs	r2, #10
 800412a:	4630      	mov	r0, r6
 800412c:	f016 f880 	bl	801a230 <itoa>
			int len = ((strlen(charBuf)));
 8004130:	a804      	add	r0, sp, #16
 8004132:	f7fc f8d1 	bl	80002d8 <strlen>
			if (len == 1)
 8004136:	4540      	cmp	r0, r8
			int len = ((strlen(charBuf)));
 8004138:	4601      	mov	r1, r0
			if (len == 1)
 800413a:	d02d      	beq.n	8004198 <checkForSDCardPreset+0xd4>
				strcat(charBuf, ".ebp");
 800413c:	ab04      	add	r3, sp, #16
 800413e:	4e28      	ldr	r6, [pc, #160]	; (80041e0 <checkForSDCardPreset+0x11c>)
 8004140:	f10d 0c10 	add.w	ip, sp, #16
				strcpy(finalString, charBuf);
 8004144:	1d42      	adds	r2, r0, #5
				strcat(charBuf, ".ebp");
 8004146:	181f      	adds	r7, r3, r0
 8004148:	6830      	ldr	r0, [r6, #0]
				strcpy(finalString, charBuf);
 800414a:	ab07      	add	r3, sp, #28
				strcat(charBuf, ".ebp");
 800414c:	f84c 0001 	str.w	r0, [ip, r1]
 8004150:	7931      	ldrb	r1, [r6, #4]
				strcpy(finalString, charBuf);
 8004152:	4618      	mov	r0, r3
				strcat(charBuf, ".ebp");
 8004154:	7139      	strb	r1, [r7, #4]
				strcpy(finalString, charBuf);
 8004156:	4661      	mov	r1, ip
 8004158:	f016 f86c 	bl	801a234 <memcpy>
 800415c:	4603      	mov	r3, r0
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 800415e:	4a1e      	ldr	r2, [pc, #120]	; (80041d8 <checkForSDCardPreset+0x114>)
 8004160:	4920      	ldr	r1, [pc, #128]	; (80041e4 <checkForSDCardPreset+0x120>)
 8004162:	4821      	ldr	r0, [pc, #132]	; (80041e8 <checkForSDCardPreset+0x124>)
 8004164:	f00e fd7a 	bl	8012c5c <f_findfirst>
			if(res == FR_OK)
 8004168:	2800      	cmp	r0, #0
 800416a:	d1bd      	bne.n	80040e8 <checkForSDCardPreset+0x24>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 800416c:	4e1f      	ldr	r6, [pc, #124]	; (80041ec <checkForSDCardPreset+0x128>)
 800416e:	2211      	movs	r2, #17
 8004170:	491f      	ldr	r1, [pc, #124]	; (80041f0 <checkForSDCardPreset+0x12c>)
 8004172:	4630      	mov	r0, r6
 8004174:	f00e f854 	bl	8012220 <f_open>
 8004178:	2800      	cmp	r0, #0
 800417a:	d1b5      	bne.n	80040e8 <checkForSDCardPreset+0x24>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 800417c:	ab03      	add	r3, sp, #12
 800417e:	68f2      	ldr	r2, [r6, #12]
 8004180:	491c      	ldr	r1, [pc, #112]	; (80041f4 <checkForSDCardPreset+0x130>)
 8004182:	4630      	mov	r0, r6
 8004184:	f00e f9ca 	bl	801251c <f_read>
					presetWaitingToParse = bytesRead;
 8004188:	9a03      	ldr	r2, [sp, #12]
 800418a:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <checkForSDCardPreset+0x134>)
					f_close(&SDFile);
 800418c:	4630      	mov	r0, r6
					presetWaitingToParse = bytesRead;
 800418e:	601a      	str	r2, [r3, #0]
					f_close(&SDFile);
 8004190:	f00e fc58 	bl	8012a44 <f_close>
					found = 1;
 8004194:	2001      	movs	r0, #1
 8004196:	e7aa      	b.n	80040ee <checkForSDCardPreset+0x2a>
				finalString[1] = charBuf[0];
 8004198:	f89d 2010 	ldrb.w	r2, [sp, #16]
				strcat(finalString, ".ebp");
 800419c:	ab07      	add	r3, sp, #28
				finalString[2] = charBuf[1];
 800419e:	f89d 1011 	ldrb.w	r1, [sp, #17]
				finalString[1] = charBuf[0];
 80041a2:	f88d 201d 	strb.w	r2, [sp, #29]
				finalString[0] = '0';
 80041a6:	2230      	movs	r2, #48	; 0x30
				strcat(finalString, ".ebp");
 80041a8:	4618      	mov	r0, r3
				finalString[2] = charBuf[1];
 80041aa:	f88d 101e 	strb.w	r1, [sp, #30]
				strcat(finalString, ".ebp");
 80041ae:	9301      	str	r3, [sp, #4]
				finalString[0] = '0';
 80041b0:	f88d 201c 	strb.w	r2, [sp, #28]
				strcat(finalString, ".ebp");
 80041b4:	f7fc f890 	bl	80002d8 <strlen>
 80041b8:	4909      	ldr	r1, [pc, #36]	; (80041e0 <checkForSDCardPreset+0x11c>)
 80041ba:	4602      	mov	r2, r0
 80041bc:	9b01      	ldr	r3, [sp, #4]
 80041be:	181e      	adds	r6, r3, r0
 80041c0:	6808      	ldr	r0, [r1, #0]
 80041c2:	5098      	str	r0, [r3, r2]
 80041c4:	790a      	ldrb	r2, [r1, #4]
 80041c6:	7132      	strb	r2, [r6, #4]
 80041c8:	e7c9      	b.n	800415e <checkForSDCardPreset+0x9a>
 80041ca:	bf00      	nop
 80041cc:	20013048 	.word	0x20013048
 80041d0:	200151f8 	.word	0x200151f8
 80041d4:	20016c88 	.word	0x20016c88
 80041d8:	20019b30 	.word	0x20019b30
 80041dc:	200196cc 	.word	0x200196cc
 80041e0:	0801c40c 	.word	0x0801c40c
 80041e4:	200150ac 	.word	0x200150ac
 80041e8:	20013010 	.word	0x20013010
 80041ec:	20019900 	.word	0x20019900
 80041f0:	200150c2 	.word	0x200150c2
 80041f4:	300001e0 	.word	0x300001e0
 80041f8:	20016c8c 	.word	0x20016c8c

080041fc <scaleDefault>:
{
 80041fc:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
 8004200:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800420c <scaleDefault+0x10>
 8004204:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004208:	f010 bf5a 	b.w	80150c0 <LEAF_clip>
 800420c:	00000000 	.word	0x00000000

08004210 <scaleTranspose>:
{
 8004210:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
 8004214:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8004234 <scaleTranspose+0x24>
 8004218:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 800421c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
 800421e:	f010 ff4f 	bl	80150c0 <LEAF_clip>
	return (input * 96.0f) - 48.0f;
 8004222:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004238 <scaleTranspose+0x28>
 8004226:	eddf 7a05 	vldr	s15, [pc, #20]	; 800423c <scaleTranspose+0x2c>
}
 800422a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800422e:	eeb0 0a67 	vmov.f32	s0, s15
 8004232:	bd08      	pop	{r3, pc}
 8004234:	00000000 	.word	0x00000000
 8004238:	42c00000 	.word	0x42c00000
 800423c:	c2400000 	.word	0xc2400000

08004240 <scalePitchBend>:
{
 8004240:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
 8004244:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800425c <scalePitchBend+0x1c>
 8004248:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 800424c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
 800424e:	f010 ff37 	bl	80150c0 <LEAF_clip>
	return (input * 48.0f);
 8004252:	eddf 7a03 	vldr	s15, [pc, #12]	; 8004260 <scalePitchBend+0x20>
}
 8004256:	ee20 0a27 	vmul.f32	s0, s0, s15
 800425a:	bd08      	pop	{r3, pc}
 800425c:	00000000 	.word	0x00000000
 8004260:	42400000 	.word	0x42400000

08004264 <scaleFilterResonance>:
{
 8004264:	b510      	push	{r4, lr}
 8004266:	ed2d 8b04 	vpush	{d8-d9}
	input = LEAF_clip(0.1f, input, 1.0f);
 800426a:	ed9f 9a21 	vldr	s18, [pc, #132]	; 80042f0 <scaleFilterResonance+0x8c>
{
 800426e:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.1f, input, 1.0f);
 8004272:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004276:	eeb0 0a49 	vmov.f32	s0, s18
 800427a:	f010 ff21 	bl	80150c0 <LEAF_clip>
 800427e:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 8004282:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 80042f4 <scaleFilterResonance+0x90>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8004286:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 80042f8 <scaleFilterResonance+0x94>
	input *= 2047.0f;
 800428a:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 800428e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004292:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 8004296:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 800429a:	1c63      	adds	r3, r4, #1
 800429c:	ee00 3a90 	vmov	s1, r3
 80042a0:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80042a4:	f010 ff0c 	bl	80150c0 <LEAF_clip>
 80042a8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 80042ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80042b0:	4b12      	ldr	r3, [pc, #72]	; (80042fc <scaleFilterResonance+0x98>)
	float inputFloat = (float)inputInt - input;
 80042b2:	ee78 0ac8 	vsub.f32	s1, s17, s16
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 80042b6:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 80042ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80042be:	ee38 8a27 	vadd.f32	s16, s16, s15
 80042c2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80042c6:	edd4 7a00 	vldr	s15, [r4]
 80042ca:	eeb0 0a49 	vmov.f32	s0, s18
 80042ce:	ed93 7a00 	vldr	s14, [r3]
 80042d2:	ee38 8a68 	vsub.f32	s16, s16, s17
 80042d6:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80042da:	ee60 0a87 	vmul.f32	s1, s1, s14
 80042de:	eee7 0a88 	vfma.f32	s1, s15, s16
}
 80042e2:	ecbd 8b04 	vpop	{d8-d9}
 80042e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 80042ea:	f010 bee9 	b.w	80150c0 <LEAF_clip>
 80042ee:	bf00      	nop
 80042f0:	3dcccccd 	.word	0x3dcccccd
 80042f4:	44ffe000 	.word	0x44ffe000
 80042f8:	00000000 	.word	0x00000000
 80042fc:	20017094 	.word	0x20017094

08004300 <scaleEnvTimes>:
{
 8004300:	b510      	push	{r4, lr}
 8004302:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
 8004306:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800437c <scaleEnvTimes+0x7c>
{
 800430a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
 800430e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004312:	eeb0 0a68 	vmov.f32	s0, s17
 8004316:	f010 fed3 	bl	80150c0 <LEAF_clip>
 800431a:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 800431e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8004380 <scaleEnvTimes+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8004322:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
 8004326:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 800432a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800432e:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 8004332:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8004336:	1c63      	adds	r3, r4, #1
 8004338:	ee00 3a90 	vmov	s1, r3
 800433c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8004340:	f010 febe 	bl	80150c0 <LEAF_clip>
 8004344:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
 8004348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <scaleEnvTimes+0x84>)
	float inputFloat = (float)inputInt - input;
 800434e:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
 8004352:	ee10 2a10 	vmov	r2, s0
 8004356:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800435a:	ee38 8a07 	vadd.f32	s16, s16, s14
 800435e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004362:	ed94 7a00 	vldr	s14, [r4]
 8004366:	ed93 0a00 	vldr	s0, [r3]
 800436a:	ee38 8a68 	vsub.f32	s16, s16, s17
 800436e:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 8004372:	eea7 0a08 	vfma.f32	s0, s14, s16
 8004376:	ecbd 8b02 	vpop	{d8}
 800437a:	bd10      	pop	{r4, pc}
 800437c:	00000000 	.word	0x00000000
 8004380:	44ffe000 	.word	0x44ffe000
 8004384:	2001309c 	.word	0x2001309c

08004388 <scaleLFORates>:
{
 8004388:	b510      	push	{r4, lr}
 800438a:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
 800438e:	eddf 8a1d 	vldr	s17, [pc, #116]	; 8004404 <scaleLFORates+0x7c>
{
 8004392:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
 8004396:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800439a:	eeb0 0a68 	vmov.f32	s0, s17
 800439e:	f010 fe8f 	bl	80150c0 <LEAF_clip>
 80043a2:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 80043a6:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8004408 <scaleLFORates+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 80043aa:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
 80043ae:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 80043b2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80043b6:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 80043ba:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 80043be:	1c63      	adds	r3, r4, #1
 80043c0:	ee00 3a90 	vmov	s1, r3
 80043c4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80043c8:	f010 fe7a 	bl	80150c0 <LEAF_clip>
 80043cc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
 80043d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043d4:	4b0d      	ldr	r3, [pc, #52]	; (800440c <scaleLFORates+0x84>)
	float inputFloat = (float)inputInt - input;
 80043d6:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
 80043da:	ee10 2a10 	vmov	r2, s0
 80043de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80043e2:	ee38 8a07 	vadd.f32	s16, s16, s14
 80043e6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80043ea:	ed94 7a00 	vldr	s14, [r4]
 80043ee:	ed93 0a00 	vldr	s0, [r3]
 80043f2:	ee38 8a68 	vsub.f32	s16, s16, s17
 80043f6:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 80043fa:	eea7 0a08 	vfma.f32	s0, s14, s16
 80043fe:	ecbd 8b02 	vpop	{d8}
 8004402:	bd10      	pop	{r4, pc}
 8004404:	00000000 	.word	0x00000000
 8004408:	44ffe000 	.word	0x44ffe000
 800440c:	240590e0 	.word	0x240590e0

08004410 <SystemClock_Config>:
{
 8004410:	b500      	push	{lr}
 8004412:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004414:	224c      	movs	r2, #76	; 0x4c
 8004416:	2100      	movs	r1, #0
 8004418:	a80c      	add	r0, sp, #48	; 0x30
 800441a:	f015 ff19 	bl	801a250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800441e:	2220      	movs	r2, #32
 8004420:	2100      	movs	r1, #0
 8004422:	a804      	add	r0, sp, #16
 8004424:	f015 ff14 	bl	801a250 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8004428:	2002      	movs	r0, #2
 800442a:	f005 fe05 	bl	800a038 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800442e:	4b40      	ldr	r3, [pc, #256]	; (8004530 <SystemClock_Config+0x120>)
 8004430:	2100      	movs	r1, #0
 8004432:	4a40      	ldr	r2, [pc, #256]	; (8004534 <SystemClock_Config+0x124>)
 8004434:	9101      	str	r1, [sp, #4]
 8004436:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004438:	f021 0101 	bic.w	r1, r1, #1
 800443c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	6993      	ldr	r3, [r2, #24]
 8004448:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800444c:	6193      	str	r3, [r2, #24]
 800444e:	6993      	ldr	r3, [r2, #24]
 8004450:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004458:	6993      	ldr	r3, [r2, #24]
 800445a:	0499      	lsls	r1, r3, #18
 800445c:	d5fc      	bpl.n	8004458 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445e:	4b36      	ldr	r3, [pc, #216]	; (8004538 <SystemClock_Config+0x128>)
 8004460:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8004464:	f041 0102 	orr.w	r1, r1, #2
 8004468:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800446c:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800446e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	9302      	str	r3, [sp, #8]
 8004478:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800447a:	9103      	str	r1, [sp, #12]
 800447c:	6991      	ldr	r1, [r2, #24]
 800447e:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <SystemClock_Config+0x120>)
 8004480:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8004484:	6191      	str	r1, [r2, #24]
 8004486:	6992      	ldr	r2, [r2, #24]
 8004488:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 800448c:	9203      	str	r2, [sp, #12]
 800448e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004490:	4a28      	ldr	r2, [pc, #160]	; (8004534 <SystemClock_Config+0x124>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004492:	f041 0101 	orr.w	r1, r1, #1
 8004496:	62d9      	str	r1, [r3, #44]	; 0x2c
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	9303      	str	r3, [sp, #12]
 80044a0:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80044a2:	6993      	ldr	r3, [r2, #24]
 80044a4:	049b      	lsls	r3, r3, #18
 80044a6:	d5fc      	bpl.n	80044a2 <SystemClock_Config+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80044a8:	4a23      	ldr	r2, [pc, #140]	; (8004538 <SystemClock_Config+0x128>)
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80044aa:	2101      	movs	r1, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044ac:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80044ae:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80044b0:	f023 0303 	bic.w	r3, r3, #3
 80044b4:	f043 0302 	orr.w	r3, r3, #2
 80044b8:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044ba:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80044bc:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 5;
 80044be:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80044c0:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80044c2:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80044c4:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80044c6:	21c0      	movs	r1, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80044c8:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLN = 192;
 80044ca:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80044cc:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8004518 <SystemClock_Config+0x108>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044d0:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80044d4:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80044d8:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80044da:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80044de:	e9cd 321c 	strd	r3, r2, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044e2:	f005 fe51 	bl	800a188 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044e6:	2200      	movs	r2, #0
 80044e8:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80044ea:	2104      	movs	r1, #4
 80044ec:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044ee:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8004520 <SystemClock_Config+0x110>
 80044f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80044f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044fa:	2340      	movs	r3, #64	; 0x40
 80044fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004500:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8004528 <SystemClock_Config+0x118>
 8004504:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004508:	ed8d 7b08 	vstr	d7, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800450c:	f006 f9ce 	bl	800a8ac <HAL_RCC_ClockConfig>
}
 8004510:	b021      	add	sp, #132	; 0x84
 8004512:	f85d fb04 	ldr.w	pc, [sp], #4
 8004516:	bf00      	nop
 8004518:	00000021 	.word	0x00000021
 800451c:	00010000 	.word	0x00010000
 8004520:	0000003f 	.word	0x0000003f
 8004524:	00000003 	.word	0x00000003
 8004528:	00000040 	.word	0x00000040
 800452c:	00000040 	.word	0x00000040
 8004530:	58000400 	.word	0x58000400
 8004534:	58024800 	.word	0x58024800
 8004538:	58024400 	.word	0x58024400
 800453c:	00000000 	.word	0x00000000

08004540 <PeriphCommonClock_Config>:
{
 8004540:	b500      	push	{lr}
 8004542:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004544:	22a4      	movs	r2, #164	; 0xa4
 8004546:	2100      	movs	r1, #0
 8004548:	a807      	add	r0, sp, #28
 800454a:	f015 fe81 	bl	801a250 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800454e:	2019      	movs	r0, #25
 8004550:	f44f 71ac 	mov.w	r1, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004554:	2302      	movs	r3, #2
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8004556:	2201      	movs	r2, #1
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004558:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800455a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800455e:	9216      	str	r2, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8004560:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8004562:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8004588 <PeriphCommonClock_Config+0x48>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8004566:	e9cd 0102 	strd	r0, r1, [sp, #8]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800456a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800456e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8004570:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8004574:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8004590 <PeriphCommonClock_Config+0x50>
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8004578:	9114      	str	r1, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800457a:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800457e:	f006 fc45 	bl	800ae0c <HAL_RCCEx_PeriphCLKConfig>
}
 8004582:	b031      	add	sp, #196	; 0xc4
 8004584:	f85d fb04 	ldr.w	pc, [sp], #4
 8004588:	00011100 	.word	0x00011100
 800458c:	00000000 	.word	0x00000000
 8004590:	00000007 	.word	0x00000007
 8004594:	00000002 	.word	0x00000002

08004598 <randomNumber>:
float randomNumber(void) {
 8004598:	b500      	push	{lr}
 800459a:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800459c:	4807      	ldr	r0, [pc, #28]	; (80045bc <randomNumber+0x24>)
 800459e:	a901      	add	r1, sp, #4
 80045a0:	f007 fe5c 	bl	800c25c <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 80045a4:	eddd 7a01 	vldr	s15, [sp, #4]
 80045a8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80045c0 <randomNumber+0x28>
 80045ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80045b0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80045b4:	b003      	add	sp, #12
 80045b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80045ba:	bf00      	nop
 80045bc:	20019098 	.word	0x20019098
 80045c0:	2f80000d 	.word	0x2f80000d

080045c4 <BSP_SD_IsDetected>:
{
 80045c4:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 80045c6:	2301      	movs	r3, #1
{
 80045c8:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 80045ca:	f88d 3007 	strb.w	r3, [sp, #7]
  if (BSP_PlatformIsDetected() != 0x0)
 80045ce:	f00b faa7 	bl	800fb20 <BSP_PlatformIsDetected>
 80045d2:	b110      	cbz	r0, 80045da <BSP_SD_IsDetected+0x16>
    status = SD_NOT_PRESENT;
 80045d4:	2300      	movs	r3, #0
 80045d6:	f88d 3007 	strb.w	r3, [sp, #7]
  return status;
 80045da:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80045de:	b003      	add	sp, #12
 80045e0:	f85d fb04 	ldr.w	pc, [sp], #4

080045e4 <getPresetNamesFromSDCard>:
{
 80045e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
 80045e8:	2301      	movs	r3, #1
{
 80045ea:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
 80045ec:	f88d 3003 	strb.w	r3, [sp, #3]
  if (BSP_PlatformIsDetected() != 0x0)
 80045f0:	f00b fa96 	bl	800fb20 <BSP_PlatformIsDetected>
 80045f4:	b110      	cbz	r0, 80045fc <getPresetNamesFromSDCard+0x18>
    status = SD_NOT_PRESENT;
 80045f6:	2300      	movs	r3, #0
 80045f8:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
 80045fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
 8004600:	b93b      	cbnz	r3, 8004612 <getPresetNamesFromSDCard+0x2e>
 8004602:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8004660 <getPresetNamesFromSDCard+0x7c>
	diskBusy = 0;
 8004606:	2300      	movs	r3, #0
 8004608:	f88a 3000 	strb.w	r3, [sl]
}
 800460c:	b009      	add	sp, #36	; 0x24
 800460e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		loadFailed = 0;
 8004612:	2400      	movs	r4, #0
 8004614:	4b0d      	ldr	r3, [pc, #52]	; (800464c <getPresetNamesFromSDCard+0x68>)
		diskBusy = 1;
 8004616:	2501      	movs	r5, #1
 8004618:	f8df a044 	ldr.w	sl, [pc, #68]	; 8004660 <getPresetNamesFromSDCard+0x7c>
		disk_initialize(0);
 800461c:	4620      	mov	r0, r4
		loadFailed = 0;
 800461e:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
 8004620:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
 8004624:	f00b fb16 	bl	800fc54 <disk_initialize>
	    disk_status(0);
 8004628:	4620      	mov	r0, r4
 800462a:	f00b fb09 	bl	800fc40 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 800462e:	462a      	mov	r2, r5
 8004630:	4907      	ldr	r1, [pc, #28]	; (8004650 <getPresetNamesFromSDCard+0x6c>)
 8004632:	4808      	ldr	r0, [pc, #32]	; (8004654 <getPresetNamesFromSDCard+0x70>)
 8004634:	f00d fda2 	bl	801217c <f_mount>
 8004638:	2800      	cmp	r0, #0
 800463a:	d1e4      	bne.n	8004606 <getPresetNamesFromSDCard+0x22>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 800463c:	4605      	mov	r5, r0
 800463e:	4e06      	ldr	r6, [pc, #24]	; (8004658 <getPresetNamesFromSDCard+0x74>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8004640:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8004650 <getPresetNamesFromSDCard+0x6c>
 8004644:	f8df 801c 	ldr.w	r8, [pc, #28]	; 8004664 <getPresetNamesFromSDCard+0x80>
 8004648:	4f04      	ldr	r7, [pc, #16]	; (800465c <getPresetNamesFromSDCard+0x78>)
 800464a:	e023      	b.n	8004694 <getPresetNamesFromSDCard+0xb0>
 800464c:	200151f8 	.word	0x200151f8
 8004650:	20019b30 	.word	0x20019b30
 8004654:	200196cc 	.word	0x200196cc
 8004658:	0801c40c 	.word	0x0801c40c
 800465c:	20013010 	.word	0x20013010
 8004660:	20013048 	.word	0x20013048
 8004664:	200150ac 	.word	0x200150ac
					strcat(charBuf, ".ebp");
 8004668:	ab02      	add	r3, sp, #8
 800466a:	6830      	ldr	r0, [r6, #0]
 800466c:	ac02      	add	r4, sp, #8
 800466e:	1899      	adds	r1, r3, r2
 8004670:	7933      	ldrb	r3, [r6, #4]
 8004672:	50a0      	str	r0, [r4, r2]
					strcpy(finalString, charBuf);
 8004674:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 8004676:	710b      	strb	r3, [r1, #4]
					strcpy(finalString, charBuf);
 8004678:	a805      	add	r0, sp, #20
 800467a:	4621      	mov	r1, r4
 800467c:	f015 fdda 	bl	801a234 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8004680:	ab05      	add	r3, sp, #20
 8004682:	464a      	mov	r2, r9
 8004684:	4641      	mov	r1, r8
 8004686:	4638      	mov	r0, r7
 8004688:	f00e fae8 	bl	8012c5c <f_findfirst>
				if(res == FR_OK)
 800468c:	b358      	cbz	r0, 80046e6 <getPresetNamesFromSDCard+0x102>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 800468e:	3501      	adds	r5, #1
 8004690:	2d40      	cmp	r5, #64	; 0x40
 8004692:	d0b8      	beq.n	8004606 <getPresetNamesFromSDCard+0x22>
				itoa(i, charBuf, 10);
 8004694:	220a      	movs	r2, #10
 8004696:	a902      	add	r1, sp, #8
 8004698:	4628      	mov	r0, r5
 800469a:	f015 fdc9 	bl	801a230 <itoa>
				int len = ((strlen(charBuf)));
 800469e:	a802      	add	r0, sp, #8
 80046a0:	f7fb fe1a 	bl	80002d8 <strlen>
				if (len == 1)
 80046a4:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 80046a6:	4602      	mov	r2, r0
				if (len == 1)
 80046a8:	d1de      	bne.n	8004668 <getPresetNamesFromSDCard+0x84>
					finalString[2] = charBuf[1];
 80046aa:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
 80046ae:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
 80046b0:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, ".ebp");
 80046b4:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
 80046b6:	f88d 1016 	strb.w	r1, [sp, #22]
					finalString[1] = charBuf[0];
 80046ba:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
 80046be:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
 80046c2:	f7fb fe09 	bl	80002d8 <strlen>
 80046c6:	aa05      	add	r2, sp, #20
 80046c8:	4603      	mov	r3, r0
 80046ca:	a905      	add	r1, sp, #20
 80046cc:	4402      	add	r2, r0
 80046ce:	6830      	ldr	r0, [r6, #0]
 80046d0:	50c8      	str	r0, [r1, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80046d2:	4641      	mov	r1, r8
					strcat(finalString, ".ebp");
 80046d4:	7933      	ldrb	r3, [r6, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80046d6:	4638      	mov	r0, r7
					strcat(finalString, ".ebp");
 80046d8:	7113      	strb	r3, [r2, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80046da:	ab05      	add	r3, sp, #20
 80046dc:	464a      	mov	r2, r9
 80046de:	f00e fabd 	bl	8012c5c <f_findfirst>
				if(res == FR_OK)
 80046e2:	2800      	cmp	r0, #0
 80046e4:	d1d3      	bne.n	800468e <getPresetNamesFromSDCard+0xaa>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 80046e6:	f8df b3d4 	ldr.w	fp, [pc, #980]	; 8004abc <getPresetNamesFromSDCard+0x4d8>
 80046ea:	2211      	movs	r2, #17
 80046ec:	49ef      	ldr	r1, [pc, #956]	; (8004aac <getPresetNamesFromSDCard+0x4c8>)
 80046ee:	4658      	mov	r0, fp
 80046f0:	f00d fd96 	bl	8012220 <f_open>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	d1ca      	bne.n	800468e <getPresetNamesFromSDCard+0xaa>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 80046f8:	4ced      	ldr	r4, [pc, #948]	; (8004ab0 <getPresetNamesFromSDCard+0x4cc>)
 80046fa:	ab01      	add	r3, sp, #4
 80046fc:	f8db 200c 	ldr.w	r2, [fp, #12]
 8004700:	4658      	mov	r0, fp
 8004702:	4621      	mov	r1, r4
 8004704:	f00d ff0a 	bl	801251c <f_read>
						f_close(&SDFile);
 8004708:	4658      	mov	r0, fp
 800470a:	f00e f99b 	bl	8012a44 <f_close>
							presetNamesArray[i][j] = buffer[bufferIndex];
 800470e:	7823      	ldrb	r3, [r4, #0]
 8004710:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 8004714:	4ae7      	ldr	r2, [pc, #924]	; (8004ab4 <getPresetNamesFromSDCard+0x4d0>)
 8004716:	f894 c001 	ldrb.w	ip, [r4, #1]
 800471a:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
 800471e:	eb02 0241 	add.w	r2, r2, r1, lsl #1
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8004722:	48e5      	ldr	r0, [pc, #916]	; (8004ab8 <getPresetNamesFromSDCard+0x4d4>)
							presetNamesArray[i][j] = buffer[bufferIndex];
 8004724:	f882 c001 	strb.w	ip, [r2, #1]
 8004728:	f894 c002 	ldrb.w	ip, [r4, #2]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 800472c:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8004730:	0109      	lsls	r1, r1, #4
							presetNamesArray[i][j] = buffer[bufferIndex];
 8004732:	f882 c002 	strb.w	ip, [r2, #2]
 8004736:	f894 c003 	ldrb.w	ip, [r4, #3]
 800473a:	f882 c003 	strb.w	ip, [r2, #3]
 800473e:	f894 c004 	ldrb.w	ip, [r4, #4]
 8004742:	f882 c004 	strb.w	ip, [r2, #4]
 8004746:	f894 c005 	ldrb.w	ip, [r4, #5]
 800474a:	f882 c005 	strb.w	ip, [r2, #5]
 800474e:	f894 c006 	ldrb.w	ip, [r4, #6]
 8004752:	f882 c006 	strb.w	ip, [r2, #6]
 8004756:	f894 c007 	ldrb.w	ip, [r4, #7]
 800475a:	f882 c007 	strb.w	ip, [r2, #7]
 800475e:	f894 c008 	ldrb.w	ip, [r4, #8]
 8004762:	f882 c008 	strb.w	ip, [r2, #8]
 8004766:	f894 c009 	ldrb.w	ip, [r4, #9]
 800476a:	f882 c009 	strb.w	ip, [r2, #9]
 800476e:	f894 c00a 	ldrb.w	ip, [r4, #10]
 8004772:	f882 c00a 	strb.w	ip, [r2, #10]
 8004776:	f894 c00b 	ldrb.w	ip, [r4, #11]
 800477a:	f882 c00b 	strb.w	ip, [r2, #11]
 800477e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8004782:	f882 c00c 	strb.w	ip, [r2, #12]
 8004786:	f894 c00d 	ldrb.w	ip, [r4, #13]
 800478a:	f882 c00d 	strb.w	ip, [r2, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 800478e:	7ba2      	ldrb	r2, [r4, #14]
 8004790:	5442      	strb	r2, [r0, r1]
 8004792:	7be2      	ldrb	r2, [r4, #15]
 8004794:	705a      	strb	r2, [r3, #1]
 8004796:	7c22      	ldrb	r2, [r4, #16]
 8004798:	709a      	strb	r2, [r3, #2]
 800479a:	7c62      	ldrb	r2, [r4, #17]
 800479c:	70da      	strb	r2, [r3, #3]
 800479e:	7ca2      	ldrb	r2, [r4, #18]
 80047a0:	711a      	strb	r2, [r3, #4]
 80047a2:	7ce2      	ldrb	r2, [r4, #19]
 80047a4:	715a      	strb	r2, [r3, #5]
 80047a6:	7d22      	ldrb	r2, [r4, #20]
 80047a8:	719a      	strb	r2, [r3, #6]
 80047aa:	7d62      	ldrb	r2, [r4, #21]
 80047ac:	71da      	strb	r2, [r3, #7]
 80047ae:	7da2      	ldrb	r2, [r4, #22]
 80047b0:	721a      	strb	r2, [r3, #8]
 80047b2:	7de2      	ldrb	r2, [r4, #23]
 80047b4:	725a      	strb	r2, [r3, #9]
 80047b6:	7e22      	ldrb	r2, [r4, #24]
 80047b8:	729a      	strb	r2, [r3, #10]
 80047ba:	7e62      	ldrb	r2, [r4, #25]
 80047bc:	72da      	strb	r2, [r3, #11]
 80047be:	7ea2      	ldrb	r2, [r4, #26]
 80047c0:	731a      	strb	r2, [r3, #12]
 80047c2:	7ee2      	ldrb	r2, [r4, #27]
 80047c4:	735a      	strb	r2, [r3, #13]
 80047c6:	7f22      	ldrb	r2, [r4, #28]
 80047c8:	739a      	strb	r2, [r3, #14]
 80047ca:	7f62      	ldrb	r2, [r4, #29]
 80047cc:	73da      	strb	r2, [r3, #15]
 80047ce:	7fa2      	ldrb	r2, [r4, #30]
 80047d0:	741a      	strb	r2, [r3, #16]
 80047d2:	7fe2      	ldrb	r2, [r4, #31]
 80047d4:	745a      	strb	r2, [r3, #17]
 80047d6:	f894 2020 	ldrb.w	r2, [r4, #32]
 80047da:	749a      	strb	r2, [r3, #18]
 80047dc:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 80047e0:	74da      	strb	r2, [r3, #19]
 80047e2:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80047e6:	751a      	strb	r2, [r3, #20]
 80047e8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80047ec:	755a      	strb	r2, [r3, #21]
 80047ee:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80047f2:	759a      	strb	r2, [r3, #22]
 80047f4:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80047f8:	75da      	strb	r2, [r3, #23]
 80047fa:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80047fe:	761a      	strb	r2, [r3, #24]
 8004800:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8004804:	765a      	strb	r2, [r3, #25]
 8004806:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800480a:	769a      	strb	r2, [r3, #26]
 800480c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8004810:	76da      	strb	r2, [r3, #27]
 8004812:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8004816:	771a      	strb	r2, [r3, #28]
 8004818:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 800481c:	775a      	strb	r2, [r3, #29]
 800481e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8004822:	779a      	strb	r2, [r3, #30]
 8004824:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8004828:	77da      	strb	r2, [r3, #31]
 800482a:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 800482e:	f883 2020 	strb.w	r2, [r3, #32]
 8004832:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8004836:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800483a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800483e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004842:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8004846:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 800484a:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 800484e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004852:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 8004856:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800485a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800485e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8004862:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8004866:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 800486a:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 800486e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004872:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 8004876:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800487a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800487e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8004882:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8004886:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800488a:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 800488e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8004892:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 8004896:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800489a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800489e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 80048a2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80048a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 80048aa:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 80048ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80048b2:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 80048b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80048ba:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 80048be:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80048c2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 80048c6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80048ca:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80048ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80048d2:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80048da:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80048de:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80048e2:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80048e6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80048ea:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 80048ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80048f2:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 80048f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80048fa:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 80048fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004902:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
 8004906:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800490a:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004912:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 8004916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800491a:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 800491e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004922:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 8004926:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800492a:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 800492e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004932:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
 8004936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800493a:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800493e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004942:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 8004946:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800494a:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 800494e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004952:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 8004956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800495a:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 800495e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004962:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
 8004966:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800496a:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 800496e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004972:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
 8004976:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800497a:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800497e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8004982:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8004986:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800498a:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
 800498e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8004992:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 8004996:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800499a:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 800499e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 80049a2:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 80049a6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 80049aa:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 80049ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80049b2:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 80049b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80049ba:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 80049be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 80049c2:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 80049c6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80049ca:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80049ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80049d2:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 80049d6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80049da:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
 80049de:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80049e2:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 80049e6:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 80049ea:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 80049ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80049f2:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
 80049f6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80049fa:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 80049fe:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8004a02:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8004a06:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8004a0a:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 8004a0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004a12:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
 8004a16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8004a1a:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 8004a1e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 8004a22:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 8004a26:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 8004a2a:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
 8004a2e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8004a32:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 8004a36:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8004a3a:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 8004a3e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 8004a42:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
 8004a46:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8004a4a:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
 8004a4e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8004a52:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
 8004a56:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8004a5a:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 8004a5e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8004a62:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 8004a66:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8004a6a:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8004a6e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8004a72:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
 8004a76:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8004a7a:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8004a7e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8004a82:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 8004a86:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8004a8a:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 8004a8e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8004a92:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
 8004a96:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 8004a9a:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8004a9e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 8004aa2:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 8004aa6:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
						for (int j = 0; j < 8; j++)
 8004aaa:	e5f0      	b.n	800468e <getPresetNamesFromSDCard+0xaa>
 8004aac:	200150c2 	.word	0x200150c2
 8004ab0:	300001e0 	.word	0x300001e0
 8004ab4:	24058d60 	.word	0x24058d60
 8004ab8:	2405b0e0 	.word	0x2405b0e0
 8004abc:	20019900 	.word	0x20019900

08004ac0 <SDRAM_init>:
{
 8004ac0:	b5d0      	push	{r4, r6, r7, lr}
	        __IO uint32_t tmpmrd = 0;
 8004ac2:	2300      	movs	r3, #0
{
 8004ac4:	b086      	sub	sp, #24
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004ac6:	4c22      	ldr	r4, [pc, #136]	; (8004b50 <SDRAM_init+0x90>)
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004ac8:	2201      	movs	r2, #1
	        __IO uint32_t tmpmrd = 0;
 8004aca:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004acc:	2310      	movs	r3, #16
 8004ace:	2601      	movs	r6, #1
 8004ad0:	2700      	movs	r7, #0
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004ad2:	a902      	add	r1, sp, #8
 8004ad4:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004ad6:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004ada:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004ade:	e9cd 6704 	strd	r6, r7, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004ae2:	f008 ffcf 	bl	800da84 <HAL_SDRAM_SendCommand>
	        HAL_Delay(100);
 8004ae6:	2064      	movs	r0, #100	; 0x64
 8004ae8:	f002 fe0e 	bl	8007708 <HAL_Delay>
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004aec:	a902      	add	r1, sp, #8
 8004aee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004af2:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004af4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004af8:	2602      	movs	r6, #2
 8004afa:	2710      	movs	r7, #16
 8004afc:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004b00:	f008 ffc0 	bl	800da84 <HAL_SDRAM_SendCommand>
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004b04:	2003      	movs	r0, #3
 8004b06:	2110      	movs	r1, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004b08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004b0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b10:	2004      	movs	r0, #4
 8004b12:	2100      	movs	r1, #0
 8004b14:	e9cd 0104 	strd	r0, r1, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004b18:	a902      	add	r1, sp, #8
 8004b1a:	4620      	mov	r0, r4
 8004b1c:	f008 ffb2 	bl	800da84 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8004b20:	f240 2032 	movw	r0, #562	; 0x232
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004b24:	2204      	movs	r2, #4
 8004b26:	2310      	movs	r3, #16
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8004b28:	9001      	str	r0, [sp, #4]
	        Command.AutoRefreshNumber      = 1;
 8004b2a:	2001      	movs	r0, #1
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004b2c:	a902      	add	r1, sp, #8
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004b2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        Command.ModeRegisterDefinition = tmpmrd;
 8004b32:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004b34:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
 8004b38:	e9cd 0304 	strd	r0, r3, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f008 ffa1 	bl	800da84 <HAL_SDRAM_SendCommand>
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 0x81A - 20);
 8004b42:	f640 0106 	movw	r1, #2054	; 0x806
 8004b46:	4620      	mov	r0, r4
 8004b48:	f008 ffbc 	bl	800dac4 <HAL_SDRAM_ProgramRefreshRate>
}
 8004b4c:	b006      	add	sp, #24
 8004b4e:	bdd0      	pop	{r4, r6, r7, pc}
 8004b50:	20012f80 	.word	0x20012f80

08004b54 <handleSPI>:
{
 8004b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	interruptChecker = 1;
 8004b58:	4bc7      	ldr	r3, [pc, #796]	; (8004e78 <handleSPI+0x324>)
 8004b5a:	2201      	movs	r2, #1
	if (SPI_LEVERS[offset] == ReceivingPitches)
 8004b5c:	4dc7      	ldr	r5, [pc, #796]	; (8004e7c <handleSPI+0x328>)
{
 8004b5e:	4604      	mov	r4, r0
 8004b60:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 1;
 8004b64:	701a      	strb	r2, [r3, #0]
	if (SPI_LEVERS[offset] == ReceivingPitches)
 8004b66:	5c2b      	ldrb	r3, [r5, r0]
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	f000 80c0 	beq.w	8004cee <handleSPI+0x19a>
	else if (SPI_LEVERS[offset] == ReceivingPreset)
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	f000 8097 	beq.w	8004ca2 <handleSPI+0x14e>
	else if (SPI_LEVERS[offset] == ReceivingKnobs)
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	f000 81bc 	beq.w	8004ef2 <handleSPI+0x39e>
	else if (SPI_LEVERS[offset] == ReceivingEnd)
 8004b7a:	2bfd      	cmp	r3, #253	; 0xfd
 8004b7c:	f000 81a2 	beq.w	8004ec4 <handleSPI+0x370>
		if (boardNumber == 0)
 8004b80:	4bbf      	ldr	r3, [pc, #764]	; (8004e80 <handleSPI+0x32c>)
 8004b82:	781f      	ldrb	r7, [r3, #0]
 8004b84:	2f00      	cmp	r7, #0
 8004b86:	f040 8088 	bne.w	8004c9a <handleSPI+0x146>
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 8004b8a:	4ebe      	ldr	r6, [pc, #760]	; (8004e84 <handleSPI+0x330>)
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
 8004b8c:	1928      	adds	r0, r5, r4
 8004b8e:	23fd      	movs	r3, #253	; 0xfd
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8004b90:	4dbd      	ldr	r5, [pc, #756]	; (8004e88 <handleSPI+0x334>)
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 8004b92:	7834      	ldrb	r4, [r6, #0]
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
 8004b94:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8004b98:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
 8004b9c:	f8df c31c 	ldr.w	ip, [pc, #796]	; 8004ebc <handleSPI+0x368>
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8004ba0:	f8df e31c 	ldr.w	lr, [pc, #796]	; 8004ec0 <handleSPI+0x36c>
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8004ba4:	eb05 0243 	add.w	r2, r5, r3, lsl #1
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
 8004ba8:	f89c 1000 	ldrb.w	r1, [ip]
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8004bac:	ea4f 1803 	mov.w	r8, r3, lsl #4
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 8004bb0:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	5ceb      	ldrb	r3, [r5, r3]
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8004bb8:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8004bbc:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8004bc0:	eb08 0545 	add.w	r5, r8, r5, lsl #1
			SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
 8004bc4:	7853      	ldrb	r3, [r2, #1]
 8004bc6:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
 8004bca:	7893      	ldrb	r3, [r2, #2]
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
 8004bcc:	f892 8003 	ldrb.w	r8, [r2, #3]
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
 8004bd0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8004bd4:	eb0e 0305 	add.w	r3, lr, r5
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
 8004bd8:	f880 8045 	strb.w	r8, [r0, #69]	; 0x45
			SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
 8004bdc:	f892 8004 	ldrb.w	r8, [r2, #4]
 8004be0:	f880 8046 	strb.w	r8, [r0, #70]	; 0x46
			SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
 8004be4:	f892 8005 	ldrb.w	r8, [r2, #5]
 8004be8:	f880 8047 	strb.w	r8, [r0, #71]	; 0x47
			SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
 8004bec:	f892 8006 	ldrb.w	r8, [r2, #6]
 8004bf0:	f880 8048 	strb.w	r8, [r0, #72]	; 0x48
			SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
 8004bf4:	f892 8007 	ldrb.w	r8, [r2, #7]
 8004bf8:	f880 8049 	strb.w	r8, [r0, #73]	; 0x49
			SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
 8004bfc:	f892 8008 	ldrb.w	r8, [r2, #8]
 8004c00:	f880 804a 	strb.w	r8, [r0, #74]	; 0x4a
			SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
 8004c04:	f892 8009 	ldrb.w	r8, [r2, #9]
 8004c08:	f880 804b 	strb.w	r8, [r0, #75]	; 0x4b
			SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
 8004c0c:	f892 800a 	ldrb.w	r8, [r2, #10]
 8004c10:	f880 804c 	strb.w	r8, [r0, #76]	; 0x4c
			SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
 8004c14:	f892 800b 	ldrb.w	r8, [r2, #11]
 8004c18:	f880 804d 	strb.w	r8, [r0, #77]	; 0x4d
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
 8004c1c:	f892 800c 	ldrb.w	r8, [r2, #12]
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
 8004c20:	7b52      	ldrb	r2, [r2, #13]
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
 8004c22:	f880 804e 	strb.w	r8, [r0, #78]	; 0x4e
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
 8004c26:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
 8004c2a:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
			whichMacroToSendName = (whichMacroToSendName + 1);
 8004c2e:	3101      	adds	r1, #1
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8004c30:	f81e 2005 	ldrb.w	r2, [lr, r5]
			whichMacroToSendName = (whichMacroToSendName + 1);
 8004c34:	b2c9      	uxtb	r1, r1
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8004c36:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
			SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
 8004c3a:	785a      	ldrb	r2, [r3, #1]
			if (whichMacroToSendName >= 8)
 8004c3c:	2907      	cmp	r1, #7
			SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
 8004c3e:	f880 2052 	strb.w	r2, [r0, #82]	; 0x52
			SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
 8004c42:	789a      	ldrb	r2, [r3, #2]
 8004c44:	f880 2053 	strb.w	r2, [r0, #83]	; 0x53
			SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
 8004c48:	78da      	ldrb	r2, [r3, #3]
 8004c4a:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
 8004c4e:	791a      	ldrb	r2, [r3, #4]
 8004c50:	f880 2055 	strb.w	r2, [r0, #85]	; 0x55
			SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
 8004c54:	795a      	ldrb	r2, [r3, #5]
 8004c56:	f880 2056 	strb.w	r2, [r0, #86]	; 0x56
			SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
 8004c5a:	799a      	ldrb	r2, [r3, #6]
 8004c5c:	f880 2057 	strb.w	r2, [r0, #87]	; 0x57
			SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
 8004c60:	79da      	ldrb	r2, [r3, #7]
 8004c62:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
			SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
 8004c66:	7a1a      	ldrb	r2, [r3, #8]
 8004c68:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
			SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
 8004c6c:	7a5a      	ldrb	r2, [r3, #9]
 8004c6e:	f880 205a 	strb.w	r2, [r0, #90]	; 0x5a
			SPI_LEVERS_TX[offset+27] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][10];
 8004c72:	7a9a      	ldrb	r2, [r3, #10]
 8004c74:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
			SPI_LEVERS_TX[offset+28] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][11];
 8004c78:	7ada      	ldrb	r2, [r3, #11]
 8004c7a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
			SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
 8004c7e:	7b1a      	ldrb	r2, [r3, #12]
			SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
 8004c80:	7b5b      	ldrb	r3, [r3, #13]
			SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
 8004c82:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
			SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
 8004c86:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
			SPI_LEVERS_TX[offset+31] = 254;
 8004c8a:	f04f 03fe 	mov.w	r3, #254	; 0xfe
 8004c8e:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
			if (whichMacroToSendName >= 8)
 8004c92:	f200 80e7 	bhi.w	8004e64 <handleSPI+0x310>
			whichMacroToSendName = (whichMacroToSendName + 1);
 8004c96:	f88c 1000 	strb.w	r1, [ip]
}
 8004c9a:	ecbd 8b02 	vpop	{d8}
 8004c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		 if (writingState != ReceivingPreset)
 8004ca2:	497a      	ldr	r1, [pc, #488]	; (8004e8c <handleSPI+0x338>)
 8004ca4:	7808      	ldrb	r0, [r1, #0]
 8004ca6:	2802      	cmp	r0, #2
 8004ca8:	f000 8121 	beq.w	8004eee <handleSPI+0x39a>
			 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
 8004cac:	700b      	strb	r3, [r1, #0]
			 diskBusy = 1;
 8004cae:	4978      	ldr	r1, [pc, #480]	; (8004e90 <handleSPI+0x33c>)
			 audioMasterLevel = 0.0f;
 8004cb0:	4b78      	ldr	r3, [pc, #480]	; (8004e94 <handleSPI+0x340>)
			 diskBusy = 1;
 8004cb2:	700a      	strb	r2, [r1, #0]
			 audioMasterLevel = 0.0f;
 8004cb4:	2200      	movs	r2, #0
			 bufferPos = 0;
 8004cb6:	4878      	ldr	r0, [pc, #480]	; (8004e98 <handleSPI+0x344>)
			 audioMasterLevel = 0.0f;
 8004cb8:	601a      	str	r2, [r3, #0]
			 bufferPos = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	8003      	strh	r3, [r0, #0]
		 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
 8004cbe:	1ca6      	adds	r6, r4, #2
		 presetNumberToSave = SPI_LEVERS[offset + 1];
 8004cc0:	192a      	adds	r2, r5, r4
 8004cc2:	4976      	ldr	r1, [pc, #472]	; (8004e9c <handleSPI+0x348>)
 8004cc4:	b2f3      	uxtb	r3, r6
 8004cc6:	7852      	ldrb	r2, [r2, #1]
 8004cc8:	4e75      	ldr	r6, [pc, #468]	; (8004ea0 <handleSPI+0x34c>)
 8004cca:	700a      	strb	r2, [r1, #0]
		 for (int i = 0; i < 28; i++)
 8004ccc:	1e59      	subs	r1, r3, #1
 8004cce:	441e      	add	r6, r3
 8004cd0:	4f74      	ldr	r7, [pc, #464]	; (8004ea4 <handleSPI+0x350>)
 8004cd2:	4429      	add	r1, r5
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
 8004cd4:	8803      	ldrh	r3, [r0, #0]
 8004cd6:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 8004cda:	b29b      	uxth	r3, r3
		 for (int i = 0; i < 28; i++)
 8004cdc:	42b1      	cmp	r1, r6
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
 8004cde:	f103 0201 	add.w	r2, r3, #1
 8004ce2:	f807 c003 	strb.w	ip, [r7, r3]
 8004ce6:	b293      	uxth	r3, r2
 8004ce8:	8003      	strh	r3, [r0, #0]
		 for (int i = 0; i < 28; i++)
 8004cea:	d1f3      	bne.n	8004cd4 <handleSPI+0x180>
 8004cec:	e748      	b.n	8004b80 <handleSPI+0x2c>
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004cee:	4b6e      	ldr	r3, [pc, #440]	; (8004ea8 <handleSPI+0x354>)
 8004cf0:	7818      	ldrb	r0, [r3, #0]
 8004cf2:	2800      	cmp	r0, #0
 8004cf4:	f000 80b2 	beq.w	8004e5c <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8004cf8:	496c      	ldr	r1, [pc, #432]	; (8004eac <handleSPI+0x358>)
		 uint8_t currentByte = offset+1;
 8004cfa:	18a3      	adds	r3, r4, r2
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004cfc:	ed9f 6a6c 	vldr	s12, [pc, #432]	; 8004eb0 <handleSPI+0x35c>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8004d00:	680a      	ldr	r2, [r1, #0]
 8004d02:	b2db      	uxtb	r3, r3
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8004d04:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8004eb4 <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8004d08:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8004d0c:	5cd2      	ldrb	r2, [r2, r3]
 8004d0e:	0212      	lsls	r2, r2, #8
 8004d10:	ee07 2a90 	vmov	s15, r2
 8004d14:	680a      	ldr	r2, [r1, #0]
 8004d16:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8004d1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d1e:	441a      	add	r2, r3
 8004d20:	7852      	ldrb	r2, [r2, #1]
 8004d22:	ee07 2a90 	vmov	s15, r2
 8004d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d2a:	ee77 7a87 	vadd.f32	s15, s15, s14
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004d2e:	eef4 7a46 	vcmp.f32	s15, s12
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8004d32:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d3a:	d507      	bpl.n	8004d4c <handleSPI+0x1f8>
 8004d3c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d44:	dd02      	ble.n	8004d4c <handleSPI+0x1f8>
				stringMIDIPitches[i] = myPitch;
 8004d46:	4a5c      	ldr	r2, [pc, #368]	; (8004eb8 <handleSPI+0x364>)
 8004d48:	ed82 7a00 	vstr	s14, [r2]
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004d4c:	2801      	cmp	r0, #1
 8004d4e:	f000 8085 	beq.w	8004e5c <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8004d52:	680a      	ldr	r2, [r1, #0]
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004d54:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8004eb0 <handleSPI+0x35c>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8004d58:	3201      	adds	r2, #1
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8004d5a:	eddf 6a56 	vldr	s13, [pc, #344]	; 8004eb4 <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8004d5e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8004d62:	5cd2      	ldrb	r2, [r2, r3]
 8004d64:	0212      	lsls	r2, r2, #8
 8004d66:	ee07 2a90 	vmov	s15, r2
 8004d6a:	680a      	ldr	r2, [r1, #0]
 8004d6c:	3201      	adds	r2, #1
 8004d6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d72:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8004d76:	441a      	add	r2, r3
 8004d78:	7852      	ldrb	r2, [r2, #1]
 8004d7a:	ee07 2a90 	vmov	s15, r2
 8004d7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d82:	ee77 7a87 	vadd.f32	s15, s15, s14
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004d86:	eef4 7a46 	vcmp.f32	s15, s12
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8004d8a:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d92:	d507      	bpl.n	8004da4 <handleSPI+0x250>
 8004d94:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d9c:	dd02      	ble.n	8004da4 <handleSPI+0x250>
				stringMIDIPitches[i] = myPitch;
 8004d9e:	4a46      	ldr	r2, [pc, #280]	; (8004eb8 <handleSPI+0x364>)
 8004da0:	ed82 7a01 	vstr	s14, [r2, #4]
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004da4:	2802      	cmp	r0, #2
 8004da6:	d059      	beq.n	8004e5c <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8004da8:	680a      	ldr	r2, [r1, #0]
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8004daa:	eddf 6a42 	vldr	s13, [pc, #264]	; 8004eb4 <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8004dae:	3202      	adds	r2, #2
 8004db0:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8004db4:	5cd2      	ldrb	r2, [r2, r3]
 8004db6:	0212      	lsls	r2, r2, #8
 8004db8:	ee07 2a90 	vmov	s15, r2
 8004dbc:	680a      	ldr	r2, [r1, #0]
 8004dbe:	3202      	adds	r2, #2
 8004dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dc4:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8004dc8:	441a      	add	r2, r3
 8004dca:	7852      	ldrb	r2, [r2, #1]
 8004dcc:	ee07 2a90 	vmov	s15, r2
 8004dd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8004dd8:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004ddc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004de4:	dd09      	ble.n	8004dfa <handleSPI+0x2a6>
 8004de6:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004eb0 <handleSPI+0x35c>
 8004dea:	eef4 7a66 	vcmp.f32	s15, s13
 8004dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004df2:	d502      	bpl.n	8004dfa <handleSPI+0x2a6>
				stringMIDIPitches[i] = myPitch;
 8004df4:	4a30      	ldr	r2, [pc, #192]	; (8004eb8 <handleSPI+0x364>)
 8004df6:	ed82 7a02 	vstr	s14, [r2, #8]
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004dfa:	2803      	cmp	r0, #3
 8004dfc:	d02e      	beq.n	8004e5c <handleSPI+0x308>
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8004dfe:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8004eb4 <handleSPI+0x360>
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004e02:	2603      	movs	r6, #3
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004e04:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8004eb0 <handleSPI+0x35c>
 8004e08:	4f2b      	ldr	r7, [pc, #172]	; (8004eb8 <handleSPI+0x364>)
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8004e0a:	680a      	ldr	r2, [r1, #0]
 8004e0c:	4432      	add	r2, r6
 8004e0e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8004e12:	5cd2      	ldrb	r2, [r2, r3]
 8004e14:	0212      	lsls	r2, r2, #8
 8004e16:	ee07 2a90 	vmov	s15, r2
 8004e1a:	680a      	ldr	r2, [r1, #0]
 8004e1c:	4432      	add	r2, r6
 8004e1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004e22:	3601      	adds	r6, #1
 8004e24:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8004e28:	441a      	add	r2, r3
 8004e2a:	7852      	ldrb	r2, [r2, #1]
 8004e2c:	ee07 2a90 	vmov	s15, r2
 8004e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e34:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8004e38:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8004e3c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e44:	dd06      	ble.n	8004e54 <handleSPI+0x300>
 8004e46:	eef4 7a46 	vcmp.f32	s15, s12
 8004e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				stringMIDIPitches[i] = myPitch;
 8004e4e:	bf48      	it	mi
 8004e50:	ed87 7a03 	vstrmi	s14, [r7, #12]
		 for (int i = 0; i < numStringsThisBoard; i++)
 8004e54:	42b0      	cmp	r0, r6
 8004e56:	f107 0704 	add.w	r7, r7, #4
 8004e5a:	dcd6      	bgt.n	8004e0a <handleSPI+0x2b6>
		 updateStateFromSPIMessage(offset);
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f7fb fe47 	bl	8000af0 <updateStateFromSPIMessage>
 8004e62:	e68d      	b.n	8004b80 <handleSPI+0x2c>
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
 8004e64:	3401      	adds	r4, #1
				whichMacroToSendName = 0;
 8004e66:	f88c 7000 	strb.w	r7, [ip]
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
 8004e6a:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 8004e6e:	7034      	strb	r4, [r6, #0]
}
 8004e70:	ecbd 8b02 	vpop	{d8}
 8004e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e78:	200151c5 	.word	0x200151c5
 8004e7c:	30000100 	.word	0x30000100
 8004e80:	20013008 	.word	0x20013008
 8004e84:	20019095 	.word	0x20019095
 8004e88:	24058d60 	.word	0x24058d60
 8004e8c:	20019096 	.word	0x20019096
 8004e90:	20013048 	.word	0x20013048
 8004e94:	20000088 	.word	0x20000088
 8004e98:	2001300a 	.word	0x2001300a
 8004e9c:	20016c86 	.word	0x20016c86
 8004ea0:	3000011b 	.word	0x3000011b
 8004ea4:	300001e0 	.word	0x300001e0
 8004ea8:	20000066 	.word	0x20000066
 8004eac:	200044a4 	.word	0x200044a4
 8004eb0:	478bff74 	.word	0x478bff74
 8004eb4:	3b000080 	.word	0x3b000080
 8004eb8:	20012eb0 	.word	0x20012eb0
 8004ebc:	20019094 	.word	0x20019094
 8004ec0:	2405b0e0 	.word	0x2405b0e0
		if(writingState == ReceivingPreset)
 8004ec4:	4b24      	ldr	r3, [pc, #144]	; (8004f58 <handleSPI+0x404>)
 8004ec6:	781a      	ldrb	r2, [r3, #0]
 8004ec8:	2a02      	cmp	r2, #2
 8004eca:	f47f ae59 	bne.w	8004b80 <handleSPI+0x2c>
			 presetWaitingToParse = bufferPos;
 8004ece:	4923      	ldr	r1, [pc, #140]	; (8004f5c <handleSPI+0x408>)
			 writingState = 0;
 8004ed0:	2200      	movs	r2, #0
			 presetNumberToLoad = presetNumberToSave;
 8004ed2:	4823      	ldr	r0, [pc, #140]	; (8004f60 <handleSPI+0x40c>)
			 writingState = 0;
 8004ed4:	701a      	strb	r2, [r3, #0]
			 presetNumberToLoad = presetNumberToSave;
 8004ed6:	7800      	ldrb	r0, [r0, #0]
			 presetWaitingToParse = bufferPos;
 8004ed8:	880a      	ldrh	r2, [r1, #0]
			 presetWaitingToWrite = bufferPos;
 8004eda:	880b      	ldrh	r3, [r1, #0]
			 presetNumberToLoad = presetNumberToSave;
 8004edc:	4921      	ldr	r1, [pc, #132]	; (8004f64 <handleSPI+0x410>)
			 presetWaitingToParse = bufferPos;
 8004ede:	b292      	uxth	r2, r2
			 presetWaitingToWrite = bufferPos;
 8004ee0:	b29b      	uxth	r3, r3
			 presetNumberToLoad = presetNumberToSave;
 8004ee2:	7008      	strb	r0, [r1, #0]
			 presetWaitingToParse = bufferPos;
 8004ee4:	4920      	ldr	r1, [pc, #128]	; (8004f68 <handleSPI+0x414>)
 8004ee6:	600a      	str	r2, [r1, #0]
			 presetWaitingToWrite = bufferPos;
 8004ee8:	4a20      	ldr	r2, [pc, #128]	; (8004f6c <handleSPI+0x418>)
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	e648      	b.n	8004b80 <handleSPI+0x2c>
 8004eee:	481b      	ldr	r0, [pc, #108]	; (8004f5c <handleSPI+0x408>)
 8004ef0:	e6e5      	b.n	8004cbe <handleSPI+0x16a>
		 uint8_t currentByte = offset+1;
 8004ef2:	1c47      	adds	r7, r0, #1
 8004ef4:	4e1e      	ldr	r6, [pc, #120]	; (8004f70 <handleSPI+0x41c>)
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
 8004ef6:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8004f74 <handleSPI+0x420>
 8004efa:	fa55 f787 	uxtab	r7, r5, r7
 8004efe:	f106 0830 	add.w	r8, r6, #48	; 0x30
 8004f02:	f817 3b01 	ldrb.w	r3, [r7], #1
 8004f06:	4630      	mov	r0, r6
			for (int i = 0; i < 12; i++)
 8004f08:	3604      	adds	r6, #4
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
 8004f0a:	ee00 3a10 	vmov	s0, r3
 8004f0e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8004f12:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004f16:	f00e fc71 	bl	80137fc <tExpSmooth_setDest>
			for (int i = 0; i < 12; i++)
 8004f1a:	4546      	cmp	r6, r8
 8004f1c:	d1f1      	bne.n	8004f02 <handleSPI+0x3ae>
			currentByte += 12;
 8004f1e:	f104 070d 	add.w	r7, r4, #13
 8004f22:	4e15      	ldr	r6, [pc, #84]	; (8004f78 <handleSPI+0x424>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
 8004f24:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8004f74 <handleSPI+0x420>
 8004f28:	b2ff      	uxtb	r7, r7
 8004f2a:	f106 0828 	add.w	r8, r6, #40	; 0x28
 8004f2e:	3f01      	subs	r7, #1
 8004f30:	442f      	add	r7, r5
 8004f32:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8004f36:	4630      	mov	r0, r6
			for (int i = 0; i < 10; i++)
 8004f38:	3604      	adds	r6, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
 8004f3a:	ee00 3a10 	vmov	s0, r3
 8004f3e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8004f42:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004f46:	f00e fc59 	bl	80137fc <tExpSmooth_setDest>
			for (int i = 0; i < 10; i++)
 8004f4a:	4546      	cmp	r6, r8
 8004f4c:	d1f1      	bne.n	8004f32 <handleSPI+0x3de>
		 updateStateFromSPIMessage(offset);
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f7fb fdce 	bl	8000af0 <updateStateFromSPIMessage>
 8004f54:	e614      	b.n	8004b80 <handleSPI+0x2c>
 8004f56:	bf00      	nop
 8004f58:	20019096 	.word	0x20019096
 8004f5c:	2001300a 	.word	0x2001300a
 8004f60:	20016c86 	.word	0x20016c86
 8004f64:	20000090 	.word	0x20000090
 8004f68:	20016c8c 	.word	0x20016c8c
 8004f6c:	20016c90 	.word	0x20016c90
 8004f70:	200045bc 	.word	0x200045bc
 8004f74:	3b808081 	.word	0x3b808081
 8004f78:	20004988 	.word	0x20004988

08004f7c <parsePreset>:


void __ATTR_ITCMRAM parsePreset(int size, int presetNumber)
{
 8004f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f80:	b087      	sub	sp, #28
 8004f82:	460e      	mov	r6, r1
 8004f84:	9000      	str	r0, [sp, #0]
 8004f86:	9105      	str	r1, [sp, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f88:	b672      	cpsid	i
	//turn off the volume while changing parameters
	 __disable_irq();
	 presetReady = 0;
 8004f8a:	2500      	movs	r5, #0
 8004f8c:	4beb      	ldr	r3, [pc, #940]	; (800533c <parsePreset+0x3c0>)

	uint16_t bufferIndex = 0;
	//read first 14 items in buffer as the 14 character string that is the name of the preset
	for (int i = 0; i < 14; i++)
	{
		presetName[i] = buffer[bufferIndex];
 8004f8e:	4cec      	ldr	r4, [pc, #944]	; (8005340 <parsePreset+0x3c4>)
		 audioOutBuffer[i] = 0;
 8004f90:	2280      	movs	r2, #128	; 0x80
 8004f92:	4629      	mov	r1, r5
 8004f94:	48eb      	ldr	r0, [pc, #940]	; (8005344 <parsePreset+0x3c8>)
	audioMasterLevel = 0.0f;
 8004f96:	f04f 0b00 	mov.w	fp, #0
	 presetReady = 0;
 8004f9a:	601d      	str	r5, [r3, #0]
		 audioOutBuffer[i] = 0;
 8004f9c:	f015 f958 	bl	801a250 <memset>
	audioMasterLevel = 0.0f;
 8004fa0:	49e9      	ldr	r1, [pc, #932]	; (8005348 <parsePreset+0x3cc>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8004fa2:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
		presetName[i] = buffer[bufferIndex];
 8004fa6:	78e6      	ldrb	r6, [r4, #3]
 8004fa8:	4be8      	ldr	r3, [pc, #928]	; (800534c <parsePreset+0x3d0>)
	audioMasterLevel = 0.0f;
 8004faa:	f8c1 b000 	str.w	fp, [r1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8004fae:	ea4f 0b40 	mov.w	fp, r0, lsl #1
		presetName[i] = buffer[bufferIndex];
 8004fb2:	f894 c004 	ldrb.w	ip, [r4, #4]
 8004fb6:	f894 a000 	ldrb.w	sl, [r4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8004fba:	49e5      	ldr	r1, [pc, #916]	; (8005350 <parsePreset+0x3d4>)
 8004fbc:	4ae4      	ldr	r2, [pc, #912]	; (8005350 <parsePreset+0x3d4>)
		presetName[i] = buffer[bufferIndex];
 8004fbe:	9601      	str	r6, [sp, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8004fc0:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8004fc4:	f801 a00b 	strb.w	sl, [r1, fp]
		presetName[i] = buffer[bufferIndex];
 8004fc8:	78a7      	ldrb	r7, [r4, #2]
 8004fca:	f894 8001 	ldrb.w	r8, [r4, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8004fce:	9901      	ldr	r1, [sp, #4]
		presetName[i] = buffer[bufferIndex];
 8004fd0:	f8cd c008 	str.w	ip, [sp, #8]
 8004fd4:	f883 c004 	strb.w	ip, [r3, #4]
 8004fd8:	f894 c005 	ldrb.w	ip, [r4, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8004fdc:	f882 8001 	strb.w	r8, [r2, #1]
		presetName[i] = buffer[bufferIndex];
 8004fe0:	f894 9007 	ldrb.w	r9, [r4, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8004fe4:	7097      	strb	r7, [r2, #2]
		presetName[i] = buffer[bufferIndex];
 8004fe6:	f894 e009 	ldrb.w	lr, [r4, #9]
 8004fea:	70de      	strb	r6, [r3, #3]
 8004fec:	f883 c005 	strb.w	ip, [r3, #5]
 8004ff0:	7a26      	ldrb	r6, [r4, #8]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8004ff2:	70d1      	strb	r1, [r2, #3]
		presetName[i] = buffer[bufferIndex];
 8004ff4:	f8cd c00c 	str.w	ip, [sp, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8004ff8:	9902      	ldr	r1, [sp, #8]
		presetName[i] = buffer[bufferIndex];
 8004ffa:	f894 c006 	ldrb.w	ip, [r4, #6]
 8004ffe:	709f      	strb	r7, [r3, #2]
 8005000:	f883 c006 	strb.w	ip, [r3, #6]
 8005004:	721e      	strb	r6, [r3, #8]
 8005006:	f883 a000 	strb.w	sl, [r3]
 800500a:	f883 8001 	strb.w	r8, [r3, #1]
 800500e:	f8cd c010 	str.w	ip, [sp, #16]
 8005012:	f883 9007 	strb.w	r9, [r3, #7]
 8005016:	f894 c00a 	ldrb.w	ip, [r4, #10]
 800501a:	f883 e009 	strb.w	lr, [r3, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 800501e:	7111      	strb	r1, [r2, #4]
 8005020:	9903      	ldr	r1, [sp, #12]
		presetName[i] = buffer[bufferIndex];
 8005022:	7ae7      	ldrb	r7, [r4, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005024:	7151      	strb	r1, [r2, #5]
 8005026:	9904      	ldr	r1, [sp, #16]
		presetName[i] = buffer[bufferIndex];
 8005028:	72df      	strb	r7, [r3, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 800502a:	7191      	strb	r1, [r2, #6]
 800502c:	f882 9007 	strb.w	r9, [r2, #7]
 8005030:	7216      	strb	r6, [r2, #8]
 8005032:	f882 e009 	strb.w	lr, [r2, #9]
 8005036:	f882 c00a 	strb.w	ip, [r2, #10]
 800503a:	72d7      	strb	r7, [r2, #11]
		presetName[i] = buffer[bufferIndex];
 800503c:	7b27      	ldrb	r7, [r4, #12]
	for (int j = 0; j < 8; j++)
	{
		for (int k = 0; k < 14; k++)
		{

			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 800503e:	49c5      	ldr	r1, [pc, #788]	; (8005354 <parsePreset+0x3d8>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005040:	7317      	strb	r7, [r2, #12]
		presetName[i] = buffer[bufferIndex];
 8005042:	731f      	strb	r7, [r3, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8005044:	eb01 1600 	add.w	r6, r1, r0, lsl #4
		presetName[i] = buffer[bufferIndex];
 8005048:	7b67      	ldrb	r7, [r4, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 800504a:	0100      	lsls	r0, r0, #4
		presetName[i] = buffer[bufferIndex];
 800504c:	f883 c00a 	strb.w	ip, [r3, #10]
 8005050:	735f      	strb	r7, [r3, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8005052:	7ba3      	ldrb	r3, [r4, #14]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8005054:	7357      	strb	r7, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8005056:	540b      	strb	r3, [r1, r0]
 8005058:	7be3      	ldrb	r3, [r4, #15]
 800505a:	7073      	strb	r3, [r6, #1]
 800505c:	7c23      	ldrb	r3, [r4, #16]
 800505e:	70b3      	strb	r3, [r6, #2]
 8005060:	7c63      	ldrb	r3, [r4, #17]
 8005062:	70f3      	strb	r3, [r6, #3]
 8005064:	7ca3      	ldrb	r3, [r4, #18]
 8005066:	7133      	strb	r3, [r6, #4]
 8005068:	7ce3      	ldrb	r3, [r4, #19]
 800506a:	7173      	strb	r3, [r6, #5]
 800506c:	7d23      	ldrb	r3, [r4, #20]
 800506e:	71b3      	strb	r3, [r6, #6]
 8005070:	7d63      	ldrb	r3, [r4, #21]
 8005072:	71f3      	strb	r3, [r6, #7]
 8005074:	7da3      	ldrb	r3, [r4, #22]
 8005076:	7233      	strb	r3, [r6, #8]
 8005078:	7de3      	ldrb	r3, [r4, #23]
 800507a:	7273      	strb	r3, [r6, #9]
 800507c:	7e23      	ldrb	r3, [r4, #24]
 800507e:	72b3      	strb	r3, [r6, #10]
 8005080:	7e63      	ldrb	r3, [r4, #25]
 8005082:	72f3      	strb	r3, [r6, #11]
 8005084:	7ea3      	ldrb	r3, [r4, #26]
 8005086:	7333      	strb	r3, [r6, #12]
 8005088:	7ee3      	ldrb	r3, [r4, #27]
 800508a:	7373      	strb	r3, [r6, #13]
 800508c:	7f23      	ldrb	r3, [r4, #28]
 800508e:	73b3      	strb	r3, [r6, #14]
 8005090:	7f63      	ldrb	r3, [r4, #29]
 8005092:	73f3      	strb	r3, [r6, #15]
 8005094:	7fa3      	ldrb	r3, [r4, #30]
 8005096:	7433      	strb	r3, [r6, #16]
 8005098:	7fe3      	ldrb	r3, [r4, #31]
 800509a:	7473      	strb	r3, [r6, #17]
 800509c:	f894 3020 	ldrb.w	r3, [r4, #32]
 80050a0:	74b3      	strb	r3, [r6, #18]
 80050a2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80050a6:	74f3      	strb	r3, [r6, #19]
 80050a8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80050ac:	7533      	strb	r3, [r6, #20]
 80050ae:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80050b2:	7573      	strb	r3, [r6, #21]
 80050b4:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80050b8:	75b3      	strb	r3, [r6, #22]
 80050ba:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80050be:	75f3      	strb	r3, [r6, #23]
 80050c0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80050c4:	7633      	strb	r3, [r6, #24]
 80050c6:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80050ca:	7673      	strb	r3, [r6, #25]
 80050cc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80050d0:	76b3      	strb	r3, [r6, #26]
 80050d2:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80050d6:	76f3      	strb	r3, [r6, #27]
 80050d8:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80050dc:	7733      	strb	r3, [r6, #28]
 80050de:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80050e2:	7773      	strb	r3, [r6, #29]
 80050e4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80050e8:	77b3      	strb	r3, [r6, #30]
 80050ea:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80050ee:	77f3      	strb	r3, [r6, #31]
 80050f0:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80050f4:	f886 3020 	strb.w	r3, [r6, #32]
 80050f8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 80050fc:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
 8005100:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8005104:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
 8005108:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800510c:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
 8005110:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8005114:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
 8005118:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 800511c:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
 8005120:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8005124:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
 8005128:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800512c:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
 8005130:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8005134:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 8005138:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800513c:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
 8005140:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8005144:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
 8005148:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 800514c:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
 8005150:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8005154:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
 8005158:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 800515c:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
 8005160:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005164:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
 8005168:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800516c:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
 8005170:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005174:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 8005178:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 800517c:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
 8005180:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8005184:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
 8005188:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800518c:	f886 3033 	strb.w	r3, [r6, #51]	; 0x33
 8005190:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8005194:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
 8005198:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800519c:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
 80051a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80051a4:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
 80051a8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80051ac:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
 80051b0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80051b4:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
 80051b8:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80051bc:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
 80051c0:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80051c4:	f886 303a 	strb.w	r3, [r6, #58]	; 0x3a
 80051c8:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 80051cc:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
 80051d0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 80051d4:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
 80051d8:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 80051dc:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
 80051e0:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80051e4:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
 80051e8:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 80051ec:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
 80051f0:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 80051f4:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
 80051f8:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 80051fc:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
 8005200:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8005204:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
 8005208:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800520c:	f886 3043 	strb.w	r3, [r6, #67]	; 0x43
 8005210:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8005214:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
 8005218:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 800521c:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
 8005220:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8005224:	f886 3046 	strb.w	r3, [r6, #70]	; 0x46
 8005228:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 800522c:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
 8005230:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8005234:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
 8005238:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 800523c:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
 8005240:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8005244:	f886 304a 	strb.w	r3, [r6, #74]	; 0x4a
 8005248:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 800524c:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
 8005250:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8005254:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 8005258:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
 800525c:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
 8005260:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8005264:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8005268:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 800526c:	f886 304f 	strb.w	r3, [r6, #79]	; 0x4f
 8005270:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8005274:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8005278:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 800527c:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
 8005280:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8005284:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
 8005288:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 800528c:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
 8005290:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8005294:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
 8005298:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
 800529c:	f886 3055 	strb.w	r3, [r6, #85]	; 0x55
 80052a0:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80052a4:	f886 3056 	strb.w	r3, [r6, #86]	; 0x56
 80052a8:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 80052ac:	f886 3057 	strb.w	r3, [r6, #87]	; 0x57
 80052b0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80052b4:	f886 3058 	strb.w	r3, [r6, #88]	; 0x58
 80052b8:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 80052bc:	f886 3059 	strb.w	r3, [r6, #89]	; 0x59
 80052c0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 80052c4:	f886 305a 	strb.w	r3, [r6, #90]	; 0x5a
 80052c8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80052cc:	f886 305b 	strb.w	r3, [r6, #91]	; 0x5b
 80052d0:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 80052d4:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
 80052d8:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 80052dc:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 80052e0:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80052e4:	f886 305e 	strb.w	r3, [r6, #94]	; 0x5e
 80052e8:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 80052ec:	f886 305f 	strb.w	r3, [r6, #95]	; 0x5f
 80052f0:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
 80052f4:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
 80052f8:	f894 306f 	ldrb.w	r3, [r4, #111]	; 0x6f
 80052fc:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
 8005300:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8005304:	f886 3062 	strb.w	r3, [r6, #98]	; 0x62
 8005308:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
 800530c:	f886 3063 	strb.w	r3, [r6, #99]	; 0x63
 8005310:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8005314:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
 8005318:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
 800531c:	f886 3065 	strb.w	r3, [r6, #101]	; 0x65
 8005320:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8005324:	f886 3066 	strb.w	r3, [r6, #102]	; 0x66
 8005328:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
		}
	}


	//read first element in buffer (after the 14 character name) as a count of how many parameters
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
 800532c:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8005330:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
 8005334:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8005338:	e00e      	b.n	8005358 <parsePreset+0x3dc>
 800533a:	bf00      	nop
 800533c:	200049c8 	.word	0x200049c8
 8005340:	300001e0 	.word	0x300001e0
 8005344:	30000000 	.word	0x30000000
 8005348:	20000088 	.word	0x20000088
 800534c:	20016c78 	.word	0x20016c78
 8005350:	24058d60 	.word	0x24058d60
 8005354:	2405b0e0 	.word	0x2405b0e0
 8005358:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
 800535c:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 8005360:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
 8005364:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8005368:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
 800536c:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 8005370:	f886 306b 	strb.w	r3, [r6, #107]	; 0x6b
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
 8005374:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
 8005378:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 800537c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 8005380:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
 8005384:	b29b      	uxth	r3, r3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8005386:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
 800538a:	f886 206d 	strb.w	r2, [r6, #109]	; 0x6d
 800538e:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8005392:	f886 206e 	strb.w	r2, [r6, #110]	; 0x6e
 8005396:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 800539a:	f886 206f 	strb.w	r2, [r6, #111]	; 0x6f
	if (paramCount > size)
 800539e:	9a00      	ldr	r2, [sp, #0]
 80053a0:	4293      	cmp	r3, r2
 80053a2:	dc0d      	bgt.n	80053c0 <parsePreset+0x444>
		return;
	}

	//check the validity of the transfer by verifying that the param array and mapping arrays both end with the required 0xefef values
	//should make this a real checksum
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
 80053a4:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	if (paramEndCheck != 0xefef)
 80053a8:	f64e 70ef 	movw	r0, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
 80053ac:	005f      	lsls	r7, r3, #1
 80053ae:	f891 6080 	ldrb.w	r6, [r1, #128]	; 0x80
 80053b2:	f891 2081 	ldrb.w	r2, [r1, #129]	; 0x81
 80053b6:	eb02 2206 	add.w	r2, r2, r6, lsl #8
	if (paramEndCheck != 0xefef)
 80053ba:	b292      	uxth	r2, r2
 80053bc:	4282      	cmp	r2, r0
 80053be:	d009      	beq.n	80053d4 <parsePreset+0x458>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
	{
		//error in transmission - give up and don't parse!
		audioMasterLevel = 1.0f;
		presetWaitingToParse = 0;
 80053c0:	4ac4      	ldr	r2, [pc, #784]	; (80056d4 <parsePreset+0x758>)
		audioMasterLevel = 1.0f;
 80053c2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
 80053c6:	6015      	str	r5, [r2, #0]
		audioMasterLevel = 1.0f;
 80053c8:	4ac3      	ldr	r2, [pc, #780]	; (80056d8 <parsePreset+0x75c>)
 80053ca:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80053cc:	b662      	cpsie	i
	overSampled = 1;
	numEffectToTick = totalEffects;
	filterToTick = totalFilters;
	__enable_irq();
	presetReady = 1;
}
 80053ce:	b007      	add	sp, #28
 80053d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
 80053d4:	f891 0082 	ldrb.w	r0, [r1, #130]	; 0x82
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
 80053d8:	b2ba      	uxth	r2, r7
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
 80053da:	f891 b083 	ldrb.w	fp, [r1, #131]	; 0x83
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
 80053de:	f102 0184 	add.w	r1, r2, #132	; 0x84
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
 80053e2:	eb0b 2b00 	add.w	fp, fp, r0, lsl #8
 80053e6:	fa1f fb8b 	uxth.w	fp, fp
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
 80053ea:	eb0b 008b 	add.w	r0, fp, fp, lsl #2
 80053ee:	b280      	uxth	r0, r0
 80053f0:	4401      	add	r1, r0
 80053f2:	9002      	str	r0, [sp, #8]
	if (mappingEndLocation > size)
 80053f4:	9800      	ldr	r0, [sp, #0]
 80053f6:	b289      	uxth	r1, r1
 80053f8:	4281      	cmp	r1, r0
 80053fa:	dce1      	bgt.n	80053c0 <parsePreset+0x444>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
 80053fc:	1866      	adds	r6, r4, r1
 80053fe:	5c60      	ldrb	r0, [r4, r1]
 8005400:	7871      	ldrb	r1, [r6, #1]
 8005402:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
 8005406:	f64f 60fe 	movw	r0, #65278	; 0xfefe
 800540a:	b289      	uxth	r1, r1
 800540c:	4281      	cmp	r1, r0
 800540e:	d1d7      	bne.n	80053c0 <parsePreset+0x444>
	for (int i = 0; i < paramCount; i++)
 8005410:	2b00      	cmp	r3, #0
 8005412:	f001 8189 	beq.w	8006728 <parsePreset+0x17ac>
 8005416:	48b1      	ldr	r0, [pc, #708]	; (80056dc <parsePreset+0x760>)
 8005418:	3280      	adds	r2, #128	; 0x80
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 800541a:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80056e0 <parsePreset+0x764>
	bufferIndex = bufferIndex + 2;
 800541e:	2180      	movs	r1, #128	; 0x80
 8005420:	b297      	uxth	r7, r2
	for (int i = 0; i < paramCount; i++)
 8005422:	4606      	mov	r6, r0
 8005424:	4605      	mov	r5, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8005426:	1c4a      	adds	r2, r1, #1
 8005428:	f814 c001 	ldrb.w	ip, [r4, r1]
		bufferIndex += 2;
 800542c:	3102      	adds	r1, #2
	for (int i = 0; i < paramCount; i++)
 800542e:	351c      	adds	r5, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8005430:	b292      	uxth	r2, r2
		bufferIndex += 2;
 8005432:	b289      	uxth	r1, r1
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8005434:	5ca2      	ldrb	r2, [r4, r2]
	for (int i = 0; i < paramCount; i++)
 8005436:	42b9      	cmp	r1, r7
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8005438:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 800543c:	ee07 2a90 	vmov	s15, r2
 8005440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005448:	ed45 7a07 	vstr	s15, [r5, #-28]	; 0xffffffe4
 800544c:	ed45 7a06 	vstr	s15, [r5, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
 8005450:	d1e9      	bne.n	8005426 <parsePreset+0x4aa>
 8005452:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
 8005456:	4aa1      	ldr	r2, [pc, #644]	; (80056dc <parsePreset+0x760>)
 8005458:	49a2      	ldr	r1, [pc, #648]	; (80056e4 <parsePreset+0x768>)
 800545a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
		params[i].setParam = &blankFunction;
 800545e:	6151      	str	r1, [r2, #20]
	for (int i = 0; i < paramCount; i++)
 8005460:	321c      	adds	r2, #28
 8005462:	42aa      	cmp	r2, r5
 8005464:	d1fb      	bne.n	800545e <parsePreset+0x4e2>
 8005466:	4aa0      	ldr	r2, [pc, #640]	; (80056e8 <parsePreset+0x76c>)
		params[i].scaleFunc = &scaleDefault;
 8005468:	6102      	str	r2, [r0, #16]
	for (int i = 0; i < paramCount; i++)
 800546a:	301c      	adds	r0, #28
 800546c:	42a8      	cmp	r0, r5
 800546e:	d1fb      	bne.n	8005468 <parsePreset+0x4ec>
	bufferIndex += 2;
 8005470:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8005474:	f108 0884 	add.w	r8, r8, #132	; 0x84
 8005478:	fa1f f888 	uxth.w	r8, r8
	for (int i = paramCount; i < NUM_PARAMS; i++)
 800547c:	2b9a      	cmp	r3, #154	; 0x9a
 800547e:	f301 8150 	bgt.w	8006722 <parsePreset+0x17a6>
 8005482:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8005486:	4d99      	ldr	r5, [pc, #612]	; (80056ec <parsePreset+0x770>)
 8005488:	4996      	ldr	r1, [pc, #600]	; (80056e4 <parsePreset+0x768>)
			params[i].zeroToOneVal[v] = 0.0f;
 800548a:	2000      	movs	r0, #0
 800548c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005490:	4a95      	ldr	r2, [pc, #596]	; (80056e8 <parsePreset+0x76c>)
 8005492:	6018      	str	r0, [r3, #0]
 8005494:	6058      	str	r0, [r3, #4]
		params[i].setParam = &blankFunction;
 8005496:	e9c3 2104 	strd	r2, r1, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
 800549a:	331c      	adds	r3, #28
 800549c:	42ab      	cmp	r3, r5
 800549e:	d1f8      	bne.n	8005492 <parsePreset+0x516>
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
 80054a0:	4b93      	ldr	r3, [pc, #588]	; (80056f0 <parsePreset+0x774>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 80054a2:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[Transpose].scaleFunc = &scaleTranspose;
 80054a6:	4993      	ldr	r1, [pc, #588]	; (80056f4 <parsePreset+0x778>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
 80054a8:	f8c6 3be0 	str.w	r3, [r6, #3040]	; 0xbe0
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
 80054ac:	f8c6 3bfc 	str.w	r3, [r6, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
 80054b0:	f8c6 3c34 	str.w	r3, [r6, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
 80054b4:	f8c6 3c88 	str.w	r3, [r6, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
 80054b8:	f8c6 3ca4 	str.w	r3, [r6, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
 80054bc:	f8c6 3cdc 	str.w	r3, [r6, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
 80054c0:	f8c6 3d30 	str.w	r3, [r6, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
 80054c4:	f8c6 3d4c 	str.w	r3, [r6, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
 80054c8:	f8c6 3d84 	str.w	r3, [r6, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
 80054cc:	f8c6 3dd8 	str.w	r3, [r6, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
 80054d0:	f8c6 3df4 	str.w	r3, [r6, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
 80054d4:	f8c6 3e2c 	str.w	r3, [r6, #3628]	; 0xe2c
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
 80054d8:	4b87      	ldr	r3, [pc, #540]	; (80056f8 <parsePreset+0x77c>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
 80054da:	4a88      	ldr	r2, [pc, #544]	; (80056fc <parsePreset+0x780>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
 80054dc:	f8c6 32cc 	str.w	r3, [r6, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
 80054e0:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
 80054e4:	f8c6 3438 	str.w	r3, [r6, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
 80054e8:	f8c6 34c4 	str.w	r3, [r6, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
 80054ec:	f8c6 35a4 	str.w	r3, [r6, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
 80054f0:	f8c6 3630 	str.w	r3, [r6, #1584]	; 0x630
	params[Osc1Fine].scaleFunc = &scaleOscFine;
 80054f4:	4b82      	ldr	r3, [pc, #520]	; (8005700 <parsePreset+0x784>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
 80054f6:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8005734 <parsePreset+0x7b8>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
 80054fa:	f8c6 32e8 	str.w	r3, [r6, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
 80054fe:	f8c6 3454 	str.w	r3, [r6, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
 8005502:	f8c6 35c0 	str.w	r3, [r6, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
 8005506:	4b7f      	ldr	r3, [pc, #508]	; (8005704 <parsePreset+0x788>)
	params[Transpose].scaleFunc = &scaleTranspose;
 8005508:	f8c6 11d0 	str.w	r1, [r6, #464]	; 0x1d0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
 800550c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
 8005510:	f8c6 3470 	str.w	r3, [r6, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
 8005514:	f8c6 35dc 	str.w	r3, [r6, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
 8005518:	4b7b      	ldr	r3, [pc, #492]	; (8005708 <parsePreset+0x78c>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
 800551a:	497c      	ldr	r1, [pc, #496]	; (800570c <parsePreset+0x790>)
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
 800551c:	f8c6 3aac 	str.w	r3, [r6, #2732]	; 0xaac
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
 8005520:	f8c6 3b54 	str.w	r3, [r6, #2900]	; 0xb54
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
 8005524:	4b7a      	ldr	r3, [pc, #488]	; (8005710 <parsePreset+0x794>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
 8005526:	f8c6 2e80 	str.w	r2, [r6, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
 800552a:	f8c6 2f0c 	str.w	r2, [r6, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
 800552e:	f8c6 3ae4 	str.w	r3, [r6, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
 8005532:	f8c6 3b8c 	str.w	r3, [r6, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
 8005536:	f8c6 11ec 	str.w	r1, [r6, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
 800553a:	f8c6 2f98 	str.w	r2, [r6, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
 800553e:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8005542:	f6aa 1214 	subw	r2, sl, #2324	; 0x914
 8005546:	edd2 7a00 	vldr	s15, [r2]
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
 800554a:	4a72      	ldr	r2, [pc, #456]	; (8005714 <parsePreset+0x798>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 800554c:	ee67 7a87 	vmul.f32	s15, s15, s14
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
 8005550:	f8ca 20cc 	str.w	r2, [sl, #204]	; 0xcc
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8005554:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8005558:	fef8 7a67 	vrinta.f32	s15, s15
 800555c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005560:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8005564:	f89d 2000 	ldrb.w	r2, [sp]
 8005568:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 800556a:	4a6b      	ldr	r2, [pc, #428]	; (8005718 <parsePreset+0x79c>)
 800556c:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8005570:	bf88      	it	hi
 8005572:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8005576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800557a:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800557e:	fef8 7a67 	vrinta.f32	s15, s15
 8005582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005586:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 800558a:	f89d 2000 	ldrb.w	r2, [sp]
 800558e:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8005590:	4a62      	ldr	r2, [pc, #392]	; (800571c <parsePreset+0x7a0>)
 8005592:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8005596:	bf88      	it	hi
 8005598:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 800559c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055a0:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80055a4:	fef8 7a67 	vrinta.f32	s15, s15
 80055a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ac:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 80055b0:	f89d 2000 	ldrb.w	r2, [sp]
 80055b4:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 80055b6:	4a5a      	ldr	r2, [pc, #360]	; (8005720 <parsePreset+0x7a4>)
 80055b8:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 80055bc:	bf88      	it	hi
 80055be:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 80055c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055c6:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80055ca:	fef8 7a67 	vrinta.f32	s15, s15
 80055ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d2:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 80055d6:	f89d 2000 	ldrb.w	r2, [sp]
 80055da:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 80055dc:	4a51      	ldr	r2, [pc, #324]	; (8005724 <parsePreset+0x7a8>)
 80055de:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 80055e2:	bf88      	it	hi
 80055e4:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 80055e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055ec:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80055f0:	fef8 7a67 	vrinta.f32	s15, s15
 80055f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055f8:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 80055fc:	f89d 2000 	ldrb.w	r2, [sp]
 8005600:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8005602:	4a49      	ldr	r2, [pc, #292]	; (8005728 <parsePreset+0x7ac>)
 8005604:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8005608:	bf88      	it	hi
 800560a:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 800560e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005612:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8005616:	fef8 7a67 	vrinta.f32	s15, s15
 800561a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800561e:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8005622:	f89d 2000 	ldrb.w	r2, [sp]
 8005626:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8005628:	4a40      	ldr	r2, [pc, #256]	; (800572c <parsePreset+0x7b0>)
 800562a:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 800562e:	bf88      	it	hi
 8005630:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8005634:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005638:	fef8 7a67 	vrinta.f32	s15, s15
 800563c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005640:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8005644:	f89d 2000 	ldrb.w	r2, [sp]
 8005648:	2a0b      	cmp	r2, #11
 800564a:	d901      	bls.n	8005650 <parsePreset+0x6d4>
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 800564c:	f8c6 39e8 	str.w	r3, [r6, #2536]	; 0x9e8
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8005650:	4a37      	ldr	r2, [pc, #220]	; (8005730 <parsePreset+0x7b4>)
 8005652:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8005656:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80056dc <parsePreset+0x760>
 800565a:	edd2 7a00 	vldr	s15, [r2]
	for (int i = 0; i < paramCount; i++)
 800565e:	464f      	mov	r7, r9
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8005660:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005664:	fef8 7a67 	vrinta.f32	s15, s15
 8005668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800566c:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8005670:	f89d 2000 	ldrb.w	r2, [sp]
 8005674:	2a0b      	cmp	r2, #11
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8005676:	bf88      	it	hi
 8005678:	f8c6 39e8 	strhi.w	r3, [r6, #2536]	; 0x9e8
	for (int i = 0; i < paramCount; i++)
 800567c:	464e      	mov	r6, r9
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 800567e:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8005680:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8005682:	ed17 0a07 	vldr	s0, [r7, #-28]	; 0xffffffe4
 8005686:	4798      	blx	r3
 8005688:	ed07 0a05 	vstr	s0, [r7, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
 800568c:	42af      	cmp	r7, r5
 800568e:	d1f6      	bne.n	800567e <parsePreset+0x702>
 8005690:	4f12      	ldr	r7, [pc, #72]	; (80056dc <parsePreset+0x760>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8005692:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8005694:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8005696:	ed17 0a06 	vldr	s0, [r7, #-24]	; 0xffffffe8
 800569a:	4798      	blx	r3
 800569c:	ed07 0a04 	vstr	s0, [r7, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
 80056a0:	42af      	cmp	r7, r5
 80056a2:	d1f6      	bne.n	8005692 <parsePreset+0x716>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 80056a4:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80056a8:	edd6 7af7 	vldr	s15, [r6, #988]	; 0x3dc
 80056ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056b0:	fef8 7a67 	vrinta.f32	s15, s15
 80056b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056b8:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
 80056bc:	2b06      	cmp	r3, #6
 80056be:	d83e      	bhi.n	800573e <parsePreset+0x7c2>
 80056c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80056c4:	0801003a 	.word	0x0801003a
 80056c8:	07f707fc 	.word	0x07f707fc
 80056cc:	07ed07f2 	.word	0x07ed07f2
 80056d0:	07e8      	.short	0x07e8
 80056d2:	bf00      	nop
 80056d4:	20016c8c 	.word	0x20016c8c
 80056d8:	20000088 	.word	0x20000088
 80056dc:	20015b84 	.word	0x20015b84
 80056e0:	377ffff6 	.word	0x377ffff6
 80056e4:	080040c1 	.word	0x080040c1
 80056e8:	080041fd 	.word	0x080041fd
 80056ec:	20016c78 	.word	0x20016c78
 80056f0:	08004301 	.word	0x08004301
 80056f4:	08004211 	.word	0x08004211
 80056f8:	08004045 	.word	0x08004045
 80056fc:	08004389 	.word	0x08004389
 8005700:	0800405d 	.word	0x0800405d
 8005704:	08004079 	.word	0x08004079
 8005708:	08004095 	.word	0x08004095
 800570c:	08004241 	.word	0x08004241
 8005710:	08004265 	.word	0x08004265
 8005714:	080040a5 	.word	0x080040a5
 8005718:	20016274 	.word	0x20016274
 800571c:	20016350 	.word	0x20016350
 8005720:	20016354 	.word	0x20016354
 8005724:	20016430 	.word	0x20016430
 8005728:	20016434 	.word	0x20016434
 800572c:	20016510 	.word	0x20016510
 8005730:	20016514 	.word	0x20016514
 8005734:	20016b84 	.word	0x20016b84
				  shapeTick[i] = &sawSquareTick;
 8005738:	4b8e      	ldr	r3, [pc, #568]	; (8005974 <parsePreset+0x9f8>)
 800573a:	4a8f      	ldr	r2, [pc, #572]	; (8005978 <parsePreset+0x9fc>)
 800573c:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 800573e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8005742:	4b8e      	ldr	r3, [pc, #568]	; (800597c <parsePreset+0xa00>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8005744:	edd6 6aaa 	vldr	s13, [r6, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8005748:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 800574c:	eef4 6ae7 	vcmpe.f32	s13, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8005750:	edd3 7a00 	vldr	s15, [r3]
 8005754:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8005758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 800575c:	fef8 7a67 	vrinta.f32	s15, s15
 8005760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	uint8_t enabledCount = 0;
 8005764:	bfcc      	ite	gt
 8005766:	2301      	movgt	r3, #1
 8005768:	2300      	movle	r3, #0
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 800576a:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
 800576e:	2a06      	cmp	r2, #6
 8005770:	d80b      	bhi.n	800578a <parsePreset+0x80e>
 8005772:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005776:	0007      	.short	0x0007
 8005778:	0785078a 	.word	0x0785078a
 800577c:	077b0780 	.word	0x077b0780
 8005780:	07710776 	.word	0x07710776
				  shapeTick[i] = &sawSquareTick;
 8005784:	4a7b      	ldr	r2, [pc, #492]	; (8005974 <parsePreset+0x9f8>)
 8005786:	497c      	ldr	r1, [pc, #496]	; (8005978 <parsePreset+0x9fc>)
 8005788:	6051      	str	r1, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 800578a:	4a7d      	ldr	r2, [pc, #500]	; (8005980 <parsePreset+0xa04>)
 800578c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005790:	ed92 7a00 	vldr	s14, [r2]
 8005794:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800579c:	dd01      	ble.n	80057a2 <parsePreset+0x826>
			enabledCount++;
 800579e:	3301      	adds	r3, #1
 80057a0:	b2db      	uxtb	r3, r3
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 80057a2:	4a78      	ldr	r2, [pc, #480]	; (8005984 <parsePreset+0xa08>)
 80057a4:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80057a8:	edd2 7a00 	vldr	s15, [r2]
 80057ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057b0:	fef8 7a67 	vrinta.f32	s15, s15
 80057b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057b8:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
 80057bc:	2a06      	cmp	r2, #6
 80057be:	d80b      	bhi.n	80057d8 <parsePreset+0x85c>
 80057c0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80057c4:	07450007 	.word	0x07450007
 80057c8:	073b0740 	.word	0x073b0740
 80057cc:	07310736 	.word	0x07310736
 80057d0:	072c      	.short	0x072c
				  shapeTick[i] = &sawSquareTick;
 80057d2:	4a68      	ldr	r2, [pc, #416]	; (8005974 <parsePreset+0x9f8>)
 80057d4:	4968      	ldr	r1, [pc, #416]	; (8005978 <parsePreset+0x9fc>)
 80057d6:	6091      	str	r1, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 80057d8:	4a6b      	ldr	r2, [pc, #428]	; (8005988 <parsePreset+0xa0c>)
 80057da:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80057de:	ed92 7a00 	vldr	s14, [r2]
 80057e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ea:	dd01      	ble.n	80057f0 <parsePreset+0x874>
			enabledCount++;
 80057ec:	3301      	adds	r3, #1
 80057ee:	b2db      	uxtb	r3, r3
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 80057f0:	4a66      	ldr	r2, [pc, #408]	; (800598c <parsePreset+0xa10>)
 80057f2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80057f6:	edd2 7a00 	vldr	s15, [r2]
	oscAmpMult = oscAmpMultArray[enabledCount];
 80057fa:	4a65      	ldr	r2, [pc, #404]	; (8005990 <parsePreset+0xa14>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 80057fc:	ee67 7a87 	vmul.f32	s15, s15, s14
	oscAmpMult = oscAmpMultArray[enabledCount];
 8005800:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005804:	4a63      	ldr	r2, [pc, #396]	; (8005994 <parsePreset+0xa18>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8005806:	fef8 7a67 	vrinta.f32	s15, s15
 800580a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
 800580e:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8005810:	ee17 3a90 	vmov	r3, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
 8005814:	6011      	str	r1, [r2, #0]
		switch (filterType)
 8005816:	4960      	ldr	r1, [pc, #384]	; (8005998 <parsePreset+0xa1c>)
 8005818:	2b08      	cmp	r3, #8
 800581a:	d811      	bhi.n	8005840 <parsePreset+0x8c4>
 800581c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005820:	06f50009 	.word	0x06f50009
 8005824:	06e306ec 	.word	0x06e306ec
 8005828:	06d106da 	.word	0x06d106da
 800582c:	06bf06c8 	.word	0x06bf06c8
 8005830:	06b6      	.short	0x06b6
				  filterTick[i] = &lowpassTick;
 8005832:	4b5a      	ldr	r3, [pc, #360]	; (800599c <parsePreset+0xa20>)
 8005834:	4a5a      	ldr	r2, [pc, #360]	; (80059a0 <parsePreset+0xa24>)
 8005836:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &lowpassSetQ;
 8005838:	4b5a      	ldr	r3, [pc, #360]	; (80059a4 <parsePreset+0xa28>)
 800583a:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &lowpassSetGain;
 800583c:	4b5a      	ldr	r3, [pc, #360]	; (80059a8 <parsePreset+0xa2c>)
 800583e:	604b      	str	r3, [r1, #4]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8005840:	4b5a      	ldr	r3, [pc, #360]	; (80059ac <parsePreset+0xa30>)
 8005842:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8005846:	edd3 7a00 	vldr	s15, [r3]
 800584a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800584e:	fef8 7a67 	vrinta.f32	s15, s15
 8005852:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005856:	ee17 3a90 	vmov	r3, s15
		switch (filterType)
 800585a:	2b08      	cmp	r3, #8
 800585c:	d811      	bhi.n	8005882 <parsePreset+0x906>
 800585e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005862:	0009      	.short	0x0009
 8005864:	0683068c 	.word	0x0683068c
 8005868:	0671067a 	.word	0x0671067a
 800586c:	065f0668 	.word	0x065f0668
 8005870:	064d0656 	.word	0x064d0656
				  filterTick[i] = &lowpassTick;
 8005874:	4b49      	ldr	r3, [pc, #292]	; (800599c <parsePreset+0xa20>)
 8005876:	4a4a      	ldr	r2, [pc, #296]	; (80059a0 <parsePreset+0xa24>)
 8005878:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &lowpassSetQ;
 800587a:	4b4a      	ldr	r3, [pc, #296]	; (80059a4 <parsePreset+0xa28>)
 800587c:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &lowpassSetGain;
 800587e:	4b4a      	ldr	r3, [pc, #296]	; (80059a8 <parsePreset+0xa2c>)
 8005880:	60cb      	str	r3, [r1, #12]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8005882:	4b4b      	ldr	r3, [pc, #300]	; (80059b0 <parsePreset+0xa34>)
 8005884:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8005888:	edd3 7a00 	vldr	s15, [r3]
 800588c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005890:	fef8 7a67 	vrinta.f32	s15, s15
 8005894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005898:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 800589c:	2b05      	cmp	r3, #5
 800589e:	f200 87c0 	bhi.w	8006822 <parsePreset+0x18a6>
 80058a2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80058a6:	061f      	.short	0x061f
 80058a8:	05b50613 	.word	0x05b50613
 80058ac:	059d05a9 	.word	0x059d05a9
 80058b0:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
 80058b2:	4b40      	ldr	r3, [pc, #256]	; (80059b4 <parsePreset+0xa38>)
 80058b4:	4840      	ldr	r0, [pc, #256]	; (80059b8 <parsePreset+0xa3c>)
				lfoSetters[i].setRate = &lfoPulseSetRate;
 80058b6:	4a41      	ldr	r2, [pc, #260]	; (80059bc <parsePreset+0xa40>)
				lfoShapeTick[i] = &lfoPulseTick;
 80058b8:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 80058ba:	4b41      	ldr	r3, [pc, #260]	; (80059c0 <parsePreset+0xa44>)
 80058bc:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 80058be:	4b41      	ldr	r3, [pc, #260]	; (80059c4 <parsePreset+0xa48>)
 80058c0:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 80058c2:	4b41      	ldr	r3, [pc, #260]	; (80059c8 <parsePreset+0xa4c>)
 80058c4:	6093      	str	r3, [r2, #8]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 80058c6:	4b41      	ldr	r3, [pc, #260]	; (80059cc <parsePreset+0xa50>)
 80058c8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80058cc:	edd3 7a00 	vldr	s15, [r3]
 80058d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80058d4:	fef8 7a67 	vrinta.f32	s15, s15
 80058d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058dc:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 80058e0:	2b05      	cmp	r3, #5
 80058e2:	d810      	bhi.n	8005906 <parsePreset+0x98a>
 80058e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80058e8:	05660571 	.word	0x05660571
 80058ec:	0550055b 	.word	0x0550055b
 80058f0:	0006053a 	.word	0x0006053a
				lfoShapeTick[i] = &lfoPulseTick;
 80058f4:	4b2f      	ldr	r3, [pc, #188]	; (80059b4 <parsePreset+0xa38>)
 80058f6:	4830      	ldr	r0, [pc, #192]	; (80059b8 <parsePreset+0xa3c>)
 80058f8:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 80058fa:	4b31      	ldr	r3, [pc, #196]	; (80059c0 <parsePreset+0xa44>)
 80058fc:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 80058fe:	4b31      	ldr	r3, [pc, #196]	; (80059c4 <parsePreset+0xa48>)
 8005900:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8005902:	4b31      	ldr	r3, [pc, #196]	; (80059c8 <parsePreset+0xa4c>)
 8005904:	6153      	str	r3, [r2, #20]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8005906:	4b32      	ldr	r3, [pc, #200]	; (80059d0 <parsePreset+0xa54>)
 8005908:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800590c:	edd3 7a00 	vldr	s15, [r3]
 8005910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005914:	fef8 7a67 	vrinta.f32	s15, s15
 8005918:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800591c:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 8005920:	2b05      	cmp	r3, #5
 8005922:	d810      	bhi.n	8005946 <parsePreset+0x9ca>
 8005924:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005928:	050f0525 	.word	0x050f0525
 800592c:	04f90504 	.word	0x04f90504
 8005930:	000604d8 	.word	0x000604d8
				lfoShapeTick[i] = &lfoPulseTick;
 8005934:	4b1f      	ldr	r3, [pc, #124]	; (80059b4 <parsePreset+0xa38>)
 8005936:	4820      	ldr	r0, [pc, #128]	; (80059b8 <parsePreset+0xa3c>)
 8005938:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 800593a:	4b21      	ldr	r3, [pc, #132]	; (80059c0 <parsePreset+0xa44>)
 800593c:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 800593e:	4b21      	ldr	r3, [pc, #132]	; (80059c4 <parsePreset+0xa48>)
 8005940:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8005942:	4b21      	ldr	r3, [pc, #132]	; (80059c8 <parsePreset+0xa4c>)
 8005944:	6213      	str	r3, [r2, #32]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8005946:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800594a:	edda 7a1c 	vldr	s15, [sl, #112]	; 0x70
 800594e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005952:	fef8 7a67 	vrinta.f32	s15, s15
 8005956:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800595a:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 800595e:	2b05      	cmp	r3, #5
 8005960:	d841      	bhi.n	80059e6 <parsePreset+0xa6a>
 8005962:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005966:	04cf      	.short	0x04cf
 8005968:	04ae04c4 	.word	0x04ae04c4
 800596c:	049804a3 	.word	0x049804a3
 8005970:	0037      	.short	0x0037
 8005972:	bf00      	nop
 8005974:	20004a8c 	.word	0x20004a8c
 8005978:	08000dc5 	.word	0x08000dc5
 800597c:	200160cc 	.word	0x200160cc
 8005980:	20015f98 	.word	0x20015f98
 8005984:	20016238 	.word	0x20016238
 8005988:	20016104 	.word	0x20016104
 800598c:	2001660c 	.word	0x2001660c
 8005990:	2000006c 	.word	0x2000006c
 8005994:	20000068 	.word	0x20000068
 8005998:	2001509c 	.word	0x2001509c
 800599c:	2000448c 	.word	0x2000448c
 80059a0:	08001249 	.word	0x08001249
 80059a4:	08001521 	.word	0x08001521
 80059a8:	080015d5 	.word	0x080015d5
 80059ac:	200166b4 	.word	0x200166b4
 80059b0:	20016a50 	.word	0x20016a50
 80059b4:	200046a4 	.word	0x200046a4
 80059b8:	08001ad9 	.word	0x08001ad9
 80059bc:	200151c8 	.word	0x200151c8
 80059c0:	08001b59 	.word	0x08001b59
 80059c4:	08001c19 	.word	0x08001c19
 80059c8:	08001bd1 	.word	0x08001bd1
 80059cc:	20016adc 	.word	0x20016adc
 80059d0:	20016b68 	.word	0x20016b68
				lfoShapeTick[i] = &lfoPulseTick;
 80059d4:	4b8e      	ldr	r3, [pc, #568]	; (8005c10 <parsePreset+0xc94>)
 80059d6:	488f      	ldr	r0, [pc, #572]	; (8005c14 <parsePreset+0xc98>)
 80059d8:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 80059da:	4b8f      	ldr	r3, [pc, #572]	; (8005c18 <parsePreset+0xc9c>)
 80059dc:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoPulseSetShape;
 80059de:	4b8f      	ldr	r3, [pc, #572]	; (8005c1c <parsePreset+0xca0>)
 80059e0:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 80059e2:	4b8f      	ldr	r3, [pc, #572]	; (8005c20 <parsePreset+0xca4>)
 80059e4:	62d3      	str	r3, [r2, #44]	; 0x2c
	uint8_t totalEffects = 4; //currently doesn't pay attention to skipped effects out of order
 80059e6:	2304      	movs	r3, #4
 80059e8:	4f8e      	ldr	r7, [pc, #568]	; (8005c24 <parsePreset+0xca8>)
 80059ea:	4d8f      	ldr	r5, [pc, #572]	; (8005c28 <parsePreset+0xcac>)
 80059ec:	9301      	str	r3, [sp, #4]
 80059ee:	463b      	mov	r3, r7
 80059f0:	f8df e290 	ldr.w	lr, [pc, #656]	; 8005c84 <parsePreset+0xd08>
				  effectSetters[i].setParam2 = &blankFunction;;
 80059f4:	488d      	ldr	r0, [pc, #564]	; (8005c2c <parsePreset+0xcb0>)
				  effectTick[i] = FXVZhighshelfTick;
 80059f6:	9203      	str	r2, [sp, #12]
		FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[0] * (NUM_EFFECT_TYPES-1));
 80059f8:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80059fc:	edde 7a00 	vldr	s15, [lr]
 8005a00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a04:	fef8 7a67 	vrinta.f32	s15, s15
 8005a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a0c:	edcd 7a00 	vstr	s15, [sp]
		switch (effectType)
 8005a10:	f89d c000 	ldrb.w	ip, [sp]
 8005a14:	f1bc 0f13 	cmp.w	ip, #19
 8005a18:	d81e      	bhi.n	8005a58 <parsePreset+0xadc>
 8005a1a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 8005a1e:	042b      	.short	0x042b
 8005a20:	03fe0414 	.word	0x03fe0414
 8005a24:	03f603fa 	.word	0x03f603fa
 8005a28:	02fa03e0 	.word	0x02fa03e0
 8005a2c:	02d502e4 	.word	0x02d502e4
 8005a30:	02a302bc 	.word	0x02a302bc
 8005a34:	02830293 	.word	0x02830293
 8005a38:	03c50273 	.word	0x03c50273
 8005a3c:	03240337 	.word	0x03240337
 8005a40:	03d50313 	.word	0x03d50313
 8005a44:	0014      	.short	0x0014
				  effectTick[i] = &FXLadderLowpassTick;
 8005a46:	4a7a      	ldr	r2, [pc, #488]	; (8005c30 <parsePreset+0xcb4>)
 8005a48:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam1 = &FXLadderParam1;;
 8005a4a:	4a7a      	ldr	r2, [pc, #488]	; (8005c34 <parsePreset+0xcb8>)
				  effectSetters[i].setParam5 = &blankFunction;;
 8005a4c:	6118      	str	r0, [r3, #16]
				  effectSetters[i].setParam2 = &blankFunction;;
 8005a4e:	e9c3 2000 	strd	r2, r0, [r3]
				  effectSetters[i].setParam3 = &FXLadderParam3;;
 8005a52:	4a79      	ldr	r2, [pc, #484]	; (8005c38 <parsePreset+0xcbc>)
				  effectSetters[i].setParam4 = &blankFunction;;
 8005a54:	e9c3 2002 	strd	r2, r0, [r3, #8]
	for (int i = 0; i < NUM_EFFECT; i++)
 8005a58:	3504      	adds	r5, #4
 8005a5a:	4a78      	ldr	r2, [pc, #480]	; (8005c3c <parsePreset+0xcc0>)
 8005a5c:	f10e 0ee0 	add.w	lr, lr, #224	; 0xe0
 8005a60:	3314      	adds	r3, #20
 8005a62:	4295      	cmp	r5, r2
 8005a64:	d1c8      	bne.n	80059f8 <parsePreset+0xa7c>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
 8005a66:	4876      	ldr	r0, [pc, #472]	; (8005c40 <parsePreset+0xcc4>)
	params[Effect1Mix].setParam = &fxMixSet;
 8005a68:	4b76      	ldr	r3, [pc, #472]	; (8005c44 <parsePreset+0xcc8>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
 8005a6a:	f8c6 02d0 	str.w	r0, [r6, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
 8005a6e:	f8c6 043c 	str.w	r0, [r6, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
 8005a72:	f8c6 05a8 	str.w	r0, [r6, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
 8005a76:	4874      	ldr	r0, [pc, #464]	; (8005c48 <parsePreset+0xccc>)
	params[Effect1PostGain].setParam = &fxPostGainSet;
 8005a78:	4d74      	ldr	r5, [pc, #464]	; (8005c4c <parsePreset+0xcd0>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
 8005a7a:	f8c6 035c 	str.w	r0, [r6, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
 8005a7e:	f8c6 04c8 	str.w	r0, [r6, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
 8005a82:	f8c6 0634 	str.w	r0, [r6, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
 8005a86:	6838      	ldr	r0, [r7, #0]
	params[Effect1Mix].setParam = &fxMixSet;
 8005a88:	9a03      	ldr	r2, [sp, #12]
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
 8005a8a:	f8c6 0714 	str.w	r0, [r6, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
 8005a8e:	6878      	ldr	r0, [r7, #4]
	params[Effect1Mix].setParam = &fxMixSet;
 8005a90:	f8c6 37a0 	str.w	r3, [r6, #1952]	; 0x7a0
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
 8005a94:	f8c6 0730 	str.w	r0, [r6, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
 8005a98:	68b8      	ldr	r0, [r7, #8]
	params[Effect1PostGain].setParam = &fxPostGainSet;
 8005a9a:	f8c6 57bc 	str.w	r5, [r6, #1980]	; 0x7bc
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
 8005a9e:	f8c6 074c 	str.w	r0, [r6, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f8c6 0768 	str.w	r0, [r6, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
 8005aa8:	6938      	ldr	r0, [r7, #16]
 8005aaa:	f8c6 0784 	str.w	r0, [r6, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
 8005aae:	6978      	ldr	r0, [r7, #20]
 8005ab0:	f8c6 07f4 	str.w	r0, [r6, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
 8005ab4:	69b8      	ldr	r0, [r7, #24]
 8005ab6:	f8c6 0810 	str.w	r0, [r6, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
 8005aba:	69f8      	ldr	r0, [r7, #28]
 8005abc:	f8c6 082c 	str.w	r0, [r6, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
 8005ac0:	4863      	ldr	r0, [pc, #396]	; (8005c50 <parsePreset+0xcd4>)
 8005ac2:	f8c6 0228 	str.w	r0, [r6, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
 8005ac6:	4863      	ldr	r0, [pc, #396]	; (8005c54 <parsePreset+0xcd8>)
 8005ac8:	f8c6 0260 	str.w	r0, [r6, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
 8005acc:	4862      	ldr	r0, [pc, #392]	; (8005c58 <parsePreset+0xcdc>)
 8005ace:	f8c6 0244 	str.w	r0, [r6, #580]	; 0x244
	params[Master].setParam = &setMaster;
 8005ad2:	4862      	ldr	r0, [pc, #392]	; (8005c5c <parsePreset+0xce0>)
 8005ad4:	64f0      	str	r0, [r6, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
 8005ad6:	4862      	ldr	r0, [pc, #392]	; (8005c60 <parsePreset+0xce4>)
 8005ad8:	f8c6 01d4 	str.w	r0, [r6, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
 8005adc:	4861      	ldr	r0, [pc, #388]	; (8005c64 <parsePreset+0xce8>)
 8005ade:	f8c6 01f0 	str.w	r0, [r6, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
 8005ae2:	4861      	ldr	r0, [pc, #388]	; (8005c68 <parsePreset+0xcec>)
 8005ae4:	f8ca 00d0 	str.w	r0, [sl, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
 8005ae8:	6a38      	ldr	r0, [r7, #32]
	params[Effect2Mix].setParam = &fxMixSet;
 8005aea:	f8c6 3880 	str.w	r3, [r6, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
 8005aee:	f8c6 3960 	str.w	r3, [r6, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
 8005af2:	f8c6 3a40 	str.w	r3, [r6, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
 8005af8:	f8c6 0848 	str.w	r0, [r6, #2120]	; 0x848
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
 8005afc:	f8c6 3864 	str.w	r3, [r6, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
	params[Effect2PostGain].setParam = &fxPostGainSet;
 8005b02:	f8c6 589c 	str.w	r5, [r6, #2204]	; 0x89c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
 8005b06:	f8c6 38d4 	str.w	r3, [r6, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
 8005b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	params[Effect3PostGain].setParam = &fxPostGainSet;
 8005b0c:	f8c6 597c 	str.w	r5, [r6, #2428]	; 0x97c
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
 8005b10:	f8c6 38f0 	str.w	r3, [r6, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	params[Effect4PostGain].setParam = &fxPostGainSet;
 8005b16:	f8c6 5a5c 	str.w	r5, [r6, #2652]	; 0xa5c
	params[OutputAmp].setParam = &setAmp;
 8005b1a:	2501      	movs	r5, #1
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
 8005b1c:	f8c6 390c 	str.w	r3, [r6, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
 8005b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
 8005b22:	4852      	ldr	r0, [pc, #328]	; (8005c6c <parsePreset+0xcf0>)
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
 8005b24:	f8c6 3928 	str.w	r3, [r6, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	f8c6 3944 	str.w	r3, [r6, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
 8005b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b30:	f8c6 39b4 	str.w	r3, [r6, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
 8005b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b36:	f8c6 39d0 	str.w	r3, [r6, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
 8005b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3c:	f8c6 39ec 	str.w	r3, [r6, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
 8005b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b42:	f8c6 3a08 	str.w	r3, [r6, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
 8005b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		params[i].objectNumber = 0;
 8005b48:	2700      	movs	r7, #0
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
 8005b4a:	f8c6 3a24 	str.w	r3, [r6, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
 8005b4e:	680b      	ldr	r3, [r1, #0]
 8005b50:	f8c6 3ae8 	str.w	r3, [r6, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
 8005b54:	684b      	ldr	r3, [r1, #4]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
 8005b56:	f8c6 0be4 	str.w	r0, [r6, #3044]	; 0xbe4
	params[Filter1Gain].setParam = filterSetters[0].setGain;
 8005b5a:	f8c6 3acc 	str.w	r3, [r6, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
 8005b5e:	688b      	ldr	r3, [r1, #8]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
 8005b60:	f8c6 0c8c 	str.w	r0, [r6, #3212]	; 0xc8c
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
 8005b64:	f8c6 3b90 	str.w	r3, [r6, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
 8005b68:	68cb      	ldr	r3, [r1, #12]
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
 8005b6a:	f8c6 0d34 	str.w	r0, [r6, #3380]	; 0xd34
	params[Filter2Gain].setParam = filterSetters[1].setGain;
 8005b6e:	f8c6 3b74 	str.w	r3, [r6, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
 8005b72:	4b3f      	ldr	r3, [pc, #252]	; (8005c70 <parsePreset+0xcf4>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
 8005b74:	f8c6 0ddc 	str.w	r0, [r6, #3548]	; 0xddc
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
 8005b78:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
 8005b7c:	f8c6 3ca8 	str.w	r3, [r6, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
 8005b80:	f8c6 3d50 	str.w	r3, [r6, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
 8005b84:	f8c6 3df8 	str.w	r3, [r6, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
 8005b88:	4b3a      	ldr	r3, [pc, #232]	; (8005c74 <parsePreset+0xcf8>)
 8005b8a:	f8c6 3c1c 	str.w	r3, [r6, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
 8005b8e:	f8c6 3cc4 	str.w	r3, [r6, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
 8005b92:	f8c6 3d6c 	str.w	r3, [r6, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
 8005b96:	f8c6 3e14 	str.w	r3, [r6, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
 8005b9a:	4b37      	ldr	r3, [pc, #220]	; (8005c78 <parsePreset+0xcfc>)
 8005b9c:	f8c6 3c38 	str.w	r3, [r6, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
 8005ba0:	f8c6 3ce0 	str.w	r3, [r6, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
 8005ba4:	f8c6 3d88 	str.w	r3, [r6, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
 8005ba8:	f8c6 3e30 	str.w	r3, [r6, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
 8005bac:	4b33      	ldr	r3, [pc, #204]	; (8005c7c <parsePreset+0xd00>)
 8005bae:	f8c6 3c54 	str.w	r3, [r6, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
 8005bb2:	f8c6 3cfc 	str.w	r3, [r6, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
 8005bb6:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
 8005bba:	f8c6 3e4c 	str.w	r3, [r6, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
 8005bbe:	6813      	ldr	r3, [r2, #0]
 8005bc0:	f8c6 3e84 	str.w	r3, [r6, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
 8005bc4:	68d3      	ldr	r3, [r2, #12]
 8005bc6:	f8c6 3f10 	str.w	r3, [r6, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
 8005bca:	6993      	ldr	r3, [r2, #24]
 8005bcc:	f8c6 3f9c 	str.w	r3, [r6, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
 8005bd0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005bd2:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
 8005bd6:	6853      	ldr	r3, [r2, #4]
 8005bd8:	f8c6 3ea0 	str.w	r3, [r6, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
 8005bdc:	6913      	ldr	r3, [r2, #16]
 8005bde:	f8c6 3f2c 	str.w	r3, [r6, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
 8005be2:	69d3      	ldr	r3, [r2, #28]
 8005be4:	f8c6 3fb8 	str.w	r3, [r6, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
 8005be8:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005bea:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
 8005bee:	6893      	ldr	r3, [r2, #8]
 8005bf0:	f8c6 3ebc 	str.w	r3, [r6, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
 8005bf4:	6953      	ldr	r3, [r2, #20]
 8005bf6:	f8c6 3f48 	str.w	r3, [r6, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
 8005bfa:	6a13      	ldr	r3, [r2, #32]
 8005bfc:	f8c6 3fd4 	str.w	r3, [r6, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
 8005c00:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005c02:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
 8005c06:	4b1e      	ldr	r3, [pc, #120]	; (8005c80 <parsePreset+0xd04>)
 8005c08:	f8ca 30b4 	str.w	r3, [sl, #180]	; 0xb4
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 8005c0c:	46aa      	mov	sl, r5
 8005c0e:	e03e      	b.n	8005c8e <parsePreset+0xd12>
 8005c10:	200046a4 	.word	0x200046a4
 8005c14:	08001ad9 	.word	0x08001ad9
 8005c18:	08001b59 	.word	0x08001b59
 8005c1c:	08001c19 	.word	0x08001c19
 8005c20:	08001bd1 	.word	0x08001bd1
 8005c24:	2001304c 	.word	0x2001304c
 8005c28:	2000443c 	.word	0x2000443c
 8005c2c:	080040c1 	.word	0x080040c1
 8005c30:	080025cd 	.word	0x080025cd
 8005c34:	08002841 	.word	0x08002841
 8005c38:	080029fd 	.word	0x080029fd
 8005c3c:	2000444c 	.word	0x2000444c
 8005c40:	08001465 	.word	0x08001465
 8005c44:	08001fe9 	.word	0x08001fe9
 8005c48:	080014bd 	.word	0x080014bd
 8005c4c:	08001ffd 	.word	0x08001ffd
 8005c50:	08002a11 	.word	0x08002a11
 8005c54:	08002a8d 	.word	0x08002a8d
 8005c58:	08002a5d 	.word	0x08002a5d
 8005c5c:	08001849 	.word	0x08001849
 8005c60:	08001859 	.word	0x08001859
 8005c64:	08001865 	.word	0x08001865
 8005c68:	0800187d 	.word	0x0800187d
 8005c6c:	08001791 	.word	0x08001791
 8005c70:	080017b1 	.word	0x080017b1
 8005c74:	080017d1 	.word	0x080017d1
 8005c78:	080017e5 	.word	0x080017e5
 8005c7c:	08001805 	.word	0x08001805
 8005c80:	08001839 	.word	0x08001839
 8005c84:	20016270 	.word	0x20016270
 8005c88:	f109 091c 	add.w	r9, r9, #28
 8005c8c:	3501      	adds	r5, #1
		if ((i >= Osc1) && (i < Osc2))
 8005c8e:	f1a5 0319 	sub.w	r3, r5, #25
		params[i].objectNumber = 0;
 8005c92:	f889 7018 	strb.w	r7, [r9, #24]
		if ((i >= Osc1) && (i < Osc2))
 8005c96:	2b0c      	cmp	r3, #12
 8005c98:	d94b      	bls.n	8005d32 <parsePreset+0xdb6>
		else if ((i >= Osc2) && (i < Osc3))
 8005c9a:	f1a5 0326 	sub.w	r3, r5, #38	; 0x26
 8005c9e:	2b0c      	cmp	r3, #12
 8005ca0:	f240 85bc 	bls.w	800681c <parsePreset+0x18a0>
		else if ((i >= Osc3) && (i < Effect1FXType))
 8005ca4:	f1a5 0333 	sub.w	r3, r5, #51	; 0x33
 8005ca8:	2b0c      	cmp	r3, #12
 8005caa:	f240 85b3 	bls.w	8006814 <parsePreset+0x1898>
		else if ((i >= Filter1) && (i < Filter2))
 8005cae:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
 8005cb2:	2b05      	cmp	r3, #5
 8005cb4:	d93d      	bls.n	8005d32 <parsePreset+0xdb6>
		else if ((i >= Filter2) && (i < Envelope1Attack))
 8005cb6:	f1a5 0366 	sub.w	r3, r5, #102	; 0x66
 8005cba:	2b06      	cmp	r3, #6
 8005cbc:	f240 85ae 	bls.w	800681c <parsePreset+0x18a0>
		else if ((i >= Envelope1Attack) && (i < Envelope2Attack))
 8005cc0:	f1a5 036d 	sub.w	r3, r5, #109	; 0x6d
 8005cc4:	2b05      	cmp	r3, #5
 8005cc6:	d934      	bls.n	8005d32 <parsePreset+0xdb6>
		else if ((i >= Envelope2Attack) && (i < Envelope3Attack))
 8005cc8:	f1a5 0373 	sub.w	r3, r5, #115	; 0x73
 8005ccc:	2b05      	cmp	r3, #5
 8005cce:	f240 85a5 	bls.w	800681c <parsePreset+0x18a0>
		else if ((i >= Envelope3Attack) && (i < Envelope4Attack))
 8005cd2:	f1a5 0379 	sub.w	r3, r5, #121	; 0x79
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	f240 859c 	bls.w	8006814 <parsePreset+0x1898>
		else if ((i >= Envelope4Attack) && (i < LFO1Rate))
 8005cdc:	f1a5 037f 	sub.w	r3, r5, #127	; 0x7f
 8005ce0:	2b05      	cmp	r3, #5
 8005ce2:	f240 8581 	bls.w	80067e8 <parsePreset+0x186c>
		else if ((i >= LFO1Rate) && (i < LFO2Rate))
 8005ce6:	f1a5 0385 	sub.w	r3, r5, #133	; 0x85
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d921      	bls.n	8005d32 <parsePreset+0xdb6>
		else if ((i >= LFO2Rate) && (i < LFO3Rate))
 8005cee:	f1a5 038a 	sub.w	r3, r5, #138	; 0x8a
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	f240 8592 	bls.w	800681c <parsePreset+0x18a0>
		else if ((i >= LFO3Rate) && (i < LFO4Rate))
 8005cf8:	f1a5 038f 	sub.w	r3, r5, #143	; 0x8f
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	f240 8589 	bls.w	8006814 <parsePreset+0x1898>
		else if ((i >= LFO4Rate) && (i < OutputAmp))
 8005d02:	f1a5 0394 	sub.w	r3, r5, #148	; 0x94
 8005d06:	2b04      	cmp	r3, #4
 8005d08:	f240 856e 	bls.w	80067e8 <parsePreset+0x186c>
		else if ((i >= Effect1FXType) && (i < Effect2FXType))
 8005d0c:	f1a5 0340 	sub.w	r3, r5, #64	; 0x40
 8005d10:	2b07      	cmp	r3, #7
 8005d12:	d90e      	bls.n	8005d32 <parsePreset+0xdb6>
		else if ((i >= Effect2FXType) && (i < Effect3FXType))
 8005d14:	f1a5 0348 	sub.w	r3, r5, #72	; 0x48
 8005d18:	2b07      	cmp	r3, #7
 8005d1a:	f240 857f 	bls.w	800681c <parsePreset+0x18a0>
		else if ((i >= Effect3FXType) && (i < Effect4FXType))
 8005d1e:	f1a5 0350 	sub.w	r3, r5, #80	; 0x50
 8005d22:	2b07      	cmp	r3, #7
 8005d24:	f240 8576 	bls.w	8006814 <parsePreset+0x1898>
		else if ((i >= Effect4FXType) && (i < Filter1))
 8005d28:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
 8005d2c:	2b07      	cmp	r3, #7
 8005d2e:	f240 855b 	bls.w	80067e8 <parsePreset+0x186c>
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 8005d32:	2100      	movs	r1, #0
 8005d34:	ed99 0a02 	vldr	s0, [r9, #8]
 8005d38:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005d3c:	4608      	mov	r0, r1
 8005d3e:	4798      	blx	r3
 8005d40:	ed99 0a03 	vldr	s0, [r9, #12]
 8005d44:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005d48:	2101      	movs	r1, #1
 8005d4a:	f899 0018 	ldrb.w	r0, [r9, #24]
 8005d4e:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
 8005d50:	2d9b      	cmp	r5, #155	; 0x9b
 8005d52:	d199      	bne.n	8005c88 <parsePreset+0xd0c>
	numMappings = 0;
 8005d54:	2200      	movs	r2, #0
 8005d56:	4bd7      	ldr	r3, [pc, #860]	; (80060b4 <parsePreset+0x1138>)
 8005d58:	f8df e38c 	ldr.w	lr, [pc, #908]	; 80060e8 <parsePreset+0x116c>
		mappings[i].destNumber = 255;
 8005d5c:	21ff      	movs	r1, #255	; 0xff
	numMappings = 0;
 8005d5e:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
 8005d60:	4bd5      	ldr	r3, [pc, #852]	; (80060b8 <parsePreset+0x113c>)
 8005d62:	f50e 6018 	add.w	r0, lr, #2432	; 0x980
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	4673      	mov	r3, lr
		mappings[i].destNumber = 255;
 8005d6a:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8005d6c:	334c      	adds	r3, #76	; 0x4c
		mappings[i].numHooks = 0;
 8005d6e:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8005d72:	4283      	cmp	r3, r0
 8005d74:	d1f9      	bne.n	8005d6a <parsePreset+0xdee>
	for (int i = 0; i < mappingCount; i++)
 8005d76:	f1bb 0f00 	cmp.w	fp, #0
 8005d7a:	f000 8094 	beq.w	8005ea6 <parsePreset+0xf2a>
 8005d7e:	9b02      	ldr	r3, [sp, #8]
				foundOne = 1;
 8005d80:	f04f 0b01 	mov.w	fp, #1
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8005d84:	ed9f 7acd 	vldr	s14, [pc, #820]	; 80060bc <parsePreset+0x1140>
			mappings[whichMapping].destNumber = destNumber;
 8005d88:	f04f 094c 	mov.w	r9, #76	; 0x4c
 8005d8c:	4443      	add	r3, r8
 8005d8e:	f8df a35c 	ldr.w	sl, [pc, #860]	; 80060ec <parsePreset+0x1170>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8005d92:	9602      	str	r6, [sp, #8]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	9300      	str	r3, [sp, #0]
	for (int i = 0; i < mappingCount; i++)
 8005d98:	2300      	movs	r3, #0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8005d9a:	469c      	mov	ip, r3
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
 8005d9c:	2300      	movs	r3, #0
		uint8_t destNumber = buffer[bufferIndex+1];
 8005d9e:	eb04 0208 	add.w	r2, r4, r8
		uint8_t foundOne = 0;
 8005da2:	461d      	mov	r5, r3
		uint8_t destNumber = buffer[bufferIndex+1];
 8005da4:	7850      	ldrb	r0, [r2, #1]
		uint8_t whichHook = 0;
 8005da6:	461f      	mov	r7, r3
		uint8_t destNumber = buffer[bufferIndex+1];
 8005da8:	4672      	mov	r2, lr
		uint8_t whichMapping = 0;
 8005daa:	461e      	mov	r6, r3
			if (mappings[j].destNumber == destNumber)
 8005dac:	7811      	ldrb	r1, [r2, #0]
 8005dae:	4281      	cmp	r1, r0
 8005db0:	d103      	bne.n	8005dba <parsePreset+0xe3e>
				whichHook = mappings[j].numHooks;
 8005db2:	f892 7048 	ldrb.w	r7, [r2, #72]	; 0x48
 8005db6:	b2de      	uxtb	r6, r3
				foundOne = 1;
 8005db8:	2501      	movs	r5, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
 8005dba:	3301      	adds	r3, #1
 8005dbc:	324c      	adds	r2, #76	; 0x4c
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	d1f4      	bne.n	8005dac <parsePreset+0xe30>
		if (foundOne == 0)
 8005dc2:	2d00      	cmp	r5, #0
 8005dc4:	f000 8484 	beq.w	80066d0 <parsePreset+0x1754>
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8005dc8:	463d      	mov	r5, r7
		int source = buffer[bufferIndex];
 8005dca:	f814 2008 	ldrb.w	r2, [r4, r8]
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8005dce:	fb09 f306 	mul.w	r3, r9, r6
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8005dd2:	1c68      	adds	r0, r5, #1
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8005dd4:	eb0e 0103 	add.w	r1, lr, r3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8005dd8:	eb0a 07c2 	add.w	r7, sl, r2, lsl #3
 8005ddc:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
 8005de0:	2a03      	cmp	r2, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8005de2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005de6:	f107 0704 	add.w	r7, r7, #4
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8005dea:	4429      	add	r1, r5
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8005dec:	4473      	add	r3, lr
 8005dee:	60df      	str	r7, [r3, #12]
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
 8005df0:	bfcc      	ite	gt
 8005df2:	465b      	movgt	r3, fp
 8005df4:	2300      	movle	r3, #0
 8005df6:	f881 3020 	strb.w	r3, [r1, #32]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8005dfa:	eb0a 03c2 	add.w	r3, sl, r2, lsl #3
 8005dfe:	00e9      	lsls	r1, r5, #3
 8005e00:	f84e 3000 	str.w	r3, [lr, r0]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 8005e04:	f1a2 0318 	sub.w	r3, r2, #24
 8005e08:	2b03      	cmp	r3, #3
 8005e0a:	d803      	bhi.n	8005e14 <parsePreset+0xe98>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
 8005e0c:	4baa      	ldr	r3, [pc, #680]	; (80060b8 <parsePreset+0x113c>)
 8005e0e:	441a      	add	r2, r3
 8005e10:	f802 bc18 	strb.w	fp, [r2, #-24]
		int scalar = buffer[bufferIndex+2];
 8005e14:	eb04 0308 	add.w	r3, r4, r8
 8005e18:	789b      	ldrb	r3, [r3, #2]
			if (scalar == 0xff)
 8005e1a:	2bff      	cmp	r3, #255	; 0xff
 8005e1c:	f000 846b 	beq.w	80066f6 <parsePreset+0x177a>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8005e20:	fb09 f006 	mul.w	r0, r9, r6
 8005e24:	1d2a      	adds	r2, r5, #4
 8005e26:	eb0a 07c3 	add.w	r7, sl, r3, lsl #3
 8005e2a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8005e2e:	4472      	add	r2, lr
 8005e30:	6057      	str	r7, [r2, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 8005e32:	f1a3 0218 	sub.w	r2, r3, #24
 8005e36:	2a03      	cmp	r2, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8005e38:	eb01 0200 	add.w	r2, r1, r0
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 8005e3c:	f200 8468 	bhi.w	8006710 <parsePreset+0x1794>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8005e40:	2004      	movs	r0, #4
 8005e42:	2108      	movs	r1, #8
 8005e44:	4472      	add	r2, lr
 8005e46:	fb11 0103 	smlabb	r1, r1, r3, r0
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 8005e4a:	489b      	ldr	r0, [pc, #620]	; (80060b8 <parsePreset+0x113c>)
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8005e4c:	4451      	add	r1, sl
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 8005e4e:	4403      	add	r3, r0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8005e50:	6291      	str	r1, [r2, #40]	; 0x28
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 8005e52:	f803 bc18 	strb.w	fp, [r3, #-24]
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 8005e56:	eb04 0308 	add.w	r3, r4, r8
		bufferIndex += 5;
 8005e5a:	f108 0805 	add.w	r8, r8, #5
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 8005e5e:	78da      	ldrb	r2, [r3, #3]
		bufferIndex += 5;
 8005e60:	fa1f f888 	uxth.w	r8, r8
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 8005e64:	791b      	ldrb	r3, [r3, #4]
 8005e66:	eb03 2302 	add.w	r3, r3, r2, lsl #8
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8005e6a:	b21b      	sxth	r3, r3
 8005e6c:	ee07 3a90 	vmov	s15, r3
		mappings[whichMapping].amount[whichHook] = amountFloat;
 8005e70:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8005e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		mappings[whichMapping].amount[whichHook] = amountFloat;
 8005e78:	eb06 0343 	add.w	r3, r6, r3, lsl #1
		mappings[whichMapping].numHooks++;
 8005e7c:	fb09 e606 	mla	r6, r9, r6, lr
		mappings[whichMapping].amount[whichHook] = amountFloat;
 8005e80:	441d      	add	r5, r3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8005e82:	ee67 7a87 	vmul.f32	s15, s15, s14
		mappings[whichMapping].amount[whichHook] = amountFloat;
 8005e86:	eb0e 0385 	add.w	r3, lr, r5, lsl #2
 8005e8a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
 8005e8e:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 8005e92:	3301      	adds	r3, #1
 8005e94:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
	for (int i = 0; i < mappingCount; i++)
 8005e98:	9b00      	ldr	r3, [sp, #0]
 8005e9a:	4598      	cmp	r8, r3
 8005e9c:	f47f af7e 	bne.w	8005d9c <parsePreset+0xe20>
 8005ea0:	4b84      	ldr	r3, [pc, #528]	; (80060b4 <parsePreset+0x1138>)
 8005ea2:	f883 c000 	strb.w	ip, [r3]
	if (params[Filter1].zeroToOneVal[0])
 8005ea6:	4b86      	ldr	r3, [pc, #536]	; (80060c0 <parsePreset+0x1144>)
	audioMasterLevel = 1.0f;
 8005ea8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005eac:	4985      	ldr	r1, [pc, #532]	; (80060c4 <parsePreset+0x1148>)
	presetWaitingToParse = 0;
 8005eae:	2000      	movs	r0, #0
	if (params[Filter1].zeroToOneVal[0])
 8005eb0:	ed93 7a00 	vldr	s14, [r3]
 8005eb4:	33a8      	adds	r3, #168	; 0xa8
	audioMasterLevel = 1.0f;
 8005eb6:	600a      	str	r2, [r1, #0]
	presetWaitingToParse = 0;
 8005eb8:	4983      	ldr	r1, [pc, #524]	; (80060c8 <parsePreset+0x114c>)
	if (params[Filter1].zeroToOneVal[0])
 8005eba:	eeb5 7a40 	vcmp.f32	s14, #0.0
	if (params[Filter2].zeroToOneVal[0])
 8005ebe:	edd3 7a00 	vldr	s15, [r3]
	presetWaitingToParse = 0;
 8005ec2:	6008      	str	r0, [r1, #0]
	currentActivePreset = presetNumber;
 8005ec4:	9805      	ldr	r0, [sp, #20]
	if (params[Filter1].zeroToOneVal[0])
 8005ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	currentActivePreset = presetNumber;
 8005eca:	4980      	ldr	r1, [pc, #512]	; (80060cc <parsePreset+0x1150>)
	if (params[Filter2].zeroToOneVal[0])
 8005ecc:	eef5 7a40 	vcmp.f32	s15, #0.0
	oscToTick = NUM_OSC;
 8005ed0:	4a7f      	ldr	r2, [pc, #508]	; (80060d0 <parsePreset+0x1154>)
	currentActivePreset = presetNumber;
 8005ed2:	7008      	strb	r0, [r1, #0]
	oscToTick = NUM_OSC;
 8005ed4:	f04f 0103 	mov.w	r1, #3
	uint8_t totalFilters = 0;
 8005ed8:	bf14      	ite	ne
 8005eda:	2301      	movne	r3, #1
 8005edc:	2300      	moveq	r3, #0
	oscToTick = NUM_OSC;
 8005ede:	7011      	strb	r1, [r2, #0]
	overSampled = 1;
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	497c      	ldr	r1, [pc, #496]	; (80060d4 <parsePreset+0x1158>)
	if (params[Filter2].zeroToOneVal[0])
 8005ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	numEffectToTick = totalEffects;
 8005ee8:	9801      	ldr	r0, [sp, #4]
	overSampled = 1;
 8005eea:	700a      	strb	r2, [r1, #0]
	numEffectToTick = totalEffects;
 8005eec:	497a      	ldr	r1, [pc, #488]	; (80060d8 <parsePreset+0x115c>)
		totalFilters++;
 8005eee:	bf18      	it	ne
 8005ef0:	3301      	addne	r3, #1
	numEffectToTick = totalEffects;
 8005ef2:	7008      	strb	r0, [r1, #0]
	filterToTick = totalFilters;
 8005ef4:	4979      	ldr	r1, [pc, #484]	; (80060dc <parsePreset+0x1160>)
 8005ef6:	700b      	strb	r3, [r1, #0]
 8005ef8:	b662      	cpsie	i
	presetReady = 1;
 8005efa:	4b79      	ldr	r3, [pc, #484]	; (80060e0 <parsePreset+0x1164>)
 8005efc:	601a      	str	r2, [r3, #0]
}
 8005efe:	b007      	add	sp, #28
 8005f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				  effectTick[i] = &FXbandpassTick;
 8005f04:	f8df c1e8 	ldr.w	ip, [pc, #488]	; 80060f0 <parsePreset+0x1174>
				  effectSetters[i].setParam2 = &blankFunction;
 8005f08:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXbandpassTick;
 8005f0a:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXBandpassParam1;
 8005f0e:	f8df c1e4 	ldr.w	ip, [pc, #484]	; 80060f4 <parsePreset+0x1178>
 8005f12:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
 8005f16:	f8df c1e0 	ldr.w	ip, [pc, #480]	; 80060f8 <parsePreset+0x117c>
				  effectSetters[i].setParam5 = &blankFunction;
 8005f1a:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
 8005f1e:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8005f22:	e599      	b.n	8005a58 <parsePreset+0xadc>
				  effectTick[i] = &FXhighpassTick;
 8005f24:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 80060fc <parsePreset+0x1180>
				  effectSetters[i].setParam2 = &blankFunction;
 8005f28:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXhighpassTick;
 8005f2a:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXHighpassParam1;
 8005f2e:	f8df c1d0 	ldr.w	ip, [pc, #464]	; 8006100 <parsePreset+0x1184>
 8005f32:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
 8005f36:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 8006104 <parsePreset+0x1188>
				  effectSetters[i].setParam5 = &blankFunction;
 8005f3a:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
 8005f3e:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8005f42:	e589      	b.n	8005a58 <parsePreset+0xadc>
				  effectTick[i] = &FXlowpassTick;
 8005f44:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8006108 <parsePreset+0x118c>
				  effectSetters[i].setParam2 = &blankFunction;
 8005f48:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXlowpassTick;
 8005f4a:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXLowpassParam1;
 8005f4e:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 800610c <parsePreset+0x1190>
 8005f52:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
 8005f56:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8006110 <parsePreset+0x1194>
				  effectSetters[i].setParam5 = &blankFunction;;
 8005f5a:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
 8005f5e:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8005f62:	e579      	b.n	8005a58 <parsePreset+0xadc>
				  effectTick[i] = &wavefolderTick;
 8005f64:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8006114 <parsePreset+0x1198>
 8005f68:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &wavefolderParam1;
 8005f6c:	f8df c1a8 	ldr.w	ip, [pc, #424]	; 8006118 <parsePreset+0x119c>
 8005f70:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
 8005f74:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800611c <parsePreset+0x11a0>
 8005f78:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &wavefolderParam3;
 8005f7c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8006120 <parsePreset+0x11a4>
 8005f80:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 8005f84:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8006124 <parsePreset+0x11a8>
 8005f88:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
 8005f8c:	f8df c198 	ldr.w	ip, [pc, #408]	; 8006128 <parsePreset+0x11ac>
 8005f90:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
 8005f94:	e560      	b.n	8005a58 <parsePreset+0xadc>
				  effectTick[i] = &tiltFilterTick;
 8005f96:	f8df c194 	ldr.w	ip, [pc, #404]	; 800612c <parsePreset+0x11b0>
 8005f9a:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &tiltParam1;
 8005f9e:	f8df c190 	ldr.w	ip, [pc, #400]	; 8006130 <parsePreset+0x11b4>
 8005fa2:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &tiltParam2;
 8005fa6:	f8df c18c 	ldr.w	ip, [pc, #396]	; 8006134 <parsePreset+0x11b8>
 8005faa:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &tiltParam3;
 8005fae:	f8df c188 	ldr.w	ip, [pc, #392]	; 8006138 <parsePreset+0x11bc>
 8005fb2:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &tiltParam4;
 8005fb6:	f8df c184 	ldr.w	ip, [pc, #388]	; 800613c <parsePreset+0x11c0>
 8005fba:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
 8005fbe:	f8df c168 	ldr.w	ip, [pc, #360]	; 8006128 <parsePreset+0x11ac>
 8005fc2:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
 8005fc6:	e547      	b.n	8005a58 <parsePreset+0xadc>
				  effectTick[i] = &bcTick;
 8005fc8:	f8df c174 	ldr.w	ip, [pc, #372]	; 8006140 <parsePreset+0x11c4>
 8005fcc:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
 8005fd0:	f8df c170 	ldr.w	ip, [pc, #368]	; 8006144 <parsePreset+0x11c8>
 8005fd4:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &param2Linear;
 8005fd8:	f8df c16c 	ldr.w	ip, [pc, #364]	; 8006148 <parsePreset+0x11cc>
 8005fdc:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3BC;
 8005fe0:	f8df c168 	ldr.w	ip, [pc, #360]	; 800614c <parsePreset+0x11d0>
 8005fe4:	e7cc      	b.n	8005f80 <parsePreset+0x1004>
				  effectTick[i] = &chorusTick;
 8005fe6:	f8df c168 	ldr.w	ip, [pc, #360]	; 8006150 <parsePreset+0x11d4>
				  effectSetters[i].setParam5 = &blankFunction;
 8005fea:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &chorusTick;
 8005fec:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &chorusParam1;
 8005ff0:	f8df c160 	ldr.w	ip, [pc, #352]	; 8006154 <parsePreset+0x11d8>
 8005ff4:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &chorusParam2;
 8005ff8:	f8df c15c 	ldr.w	ip, [pc, #348]	; 8006158 <parsePreset+0x11dc>
 8005ffc:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &chorusParam3;
 8006000:	f8df c158 	ldr.w	ip, [pc, #344]	; 800615c <parsePreset+0x11e0>
 8006004:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &chorusParam4;
 8006008:	f8df c154 	ldr.w	ip, [pc, #340]	; 8006160 <parsePreset+0x11e4>
 800600c:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
 8006010:	e522      	b.n	8005a58 <parsePreset+0xadc>
				  effectTick[i] = &compressorTick;
 8006012:	f8df c150 	ldr.w	ip, [pc, #336]	; 8006164 <parsePreset+0x11e8>
 8006016:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &compressorParam1;
 800601a:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8006168 <parsePreset+0x11ec>
 800601e:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &compressorParam2;
 8006022:	f8df c148 	ldr.w	ip, [pc, #328]	; 800616c <parsePreset+0x11f0>
 8006026:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &compressorParam3;
 800602a:	f8df c144 	ldr.w	ip, [pc, #324]	; 8006170 <parsePreset+0x11f4>
 800602e:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &compressorParam4;
 8006032:	f8df c140 	ldr.w	ip, [pc, #320]	; 8006174 <parsePreset+0x11f8>
 8006036:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &compressorParam5;
 800603a:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8006178 <parsePreset+0x11fc>
 800603e:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
 8006042:	e509      	b.n	8005a58 <parsePreset+0xadc>
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8006044:	f8df c134 	ldr.w	ip, [pc, #308]	; 800617c <parsePreset+0x1200>
				  effectTick[i] = FXVZhighshelfTick;
 8006048:	4a26      	ldr	r2, [pc, #152]	; (80060e4 <parsePreset+0x1168>)
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 800604a:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 800604e:	f8df c130 	ldr.w	ip, [pc, #304]	; 8006180 <parsePreset+0x1204>
				  effectTick[i] = FXVZhighshelfTick;
 8006052:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 8006054:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8006058:	f8df c128 	ldr.w	ip, [pc, #296]	; 8006184 <parsePreset+0x1208>
				  effectSetters[i].setParam5 = &blankFunction;;
 800605c:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8006060:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8006064:	e4f8      	b.n	8005a58 <parsePreset+0xadc>
				  effectTick[i] = &FXVZlowshelfTick;
 8006066:	f8df c120 	ldr.w	ip, [pc, #288]	; 8006188 <parsePreset+0x120c>
 800606a:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXLowShelfParam1;
 800606e:	f8df c11c 	ldr.w	ip, [pc, #284]	; 800618c <parsePreset+0x1210>
 8006072:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXLowShelfParam2;
 8006076:	f8df c118 	ldr.w	ip, [pc, #280]	; 8006190 <parsePreset+0x1214>
 800607a:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
 800607e:	f8df c114 	ldr.w	ip, [pc, #276]	; 8006194 <parsePreset+0x1218>
				  effectSetters[i].setParam5 = &blankFunction;
 8006082:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8006086:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 800608a:	e4e5      	b.n	8005a58 <parsePreset+0xadc>
				  effectTick[i] = &FXVZpeakTick;
 800608c:	f8df c108 	ldr.w	ip, [pc, #264]	; 8006198 <parsePreset+0x121c>
 8006090:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXPeakParam1;
 8006094:	f8df c104 	ldr.w	ip, [pc, #260]	; 800619c <parsePreset+0x1220>
 8006098:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXPeakParam2;
 800609c:	f8df c100 	ldr.w	ip, [pc, #256]	; 80061a0 <parsePreset+0x1224>
 80060a0:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXPeakParam3;
 80060a4:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 80061a4 <parsePreset+0x1228>
				  effectSetters[i].setParam5 = &blankFunction;
 80060a8:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXPeakParam3;
 80060ac:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 80060b0:	e4d2      	b.n	8005a58 <parsePreset+0xadc>
 80060b2:	bf00      	nop
 80060b4:	20015b80 	.word	0x20015b80
 80060b8:	20004640 	.word	0x20004640
 80060bc:	37fffffc 	.word	0x37fffffc
 80060c0:	200165e8 	.word	0x200165e8
 80060c4:	20000088 	.word	0x20000088
 80060c8:	20016c8c 	.word	0x20016c8c
 80060cc:	2001300c 	.word	0x2001300c
 80060d0:	2000007c 	.word	0x2000007c
 80060d4:	2000007d 	.word	0x2000007d
 80060d8:	20000064 	.word	0x20000064
 80060dc:	20000004 	.word	0x20000004
 80060e0:	200049c8 	.word	0x200049c8
 80060e4:	080025a5 	.word	0x080025a5
 80060e8:	200151fc 	.word	0x200151fc
 80060ec:	20012d98 	.word	0x20012d98
 80060f0:	08002555 	.word	0x08002555
 80060f4:	08002679 	.word	0x08002679
 80060f8:	08002985 	.word	0x08002985
 80060fc:	08002541 	.word	0x08002541
 8006100:	0800262d 	.word	0x0800262d
 8006104:	08002971 	.word	0x08002971
 8006108:	0800252d 	.word	0x0800252d
 800610c:	080025e1 	.word	0x080025e1
 8006110:	0800295d 	.word	0x0800295d
 8006114:	0800202d 	.word	0x0800202d
 8006118:	08001c55 	.word	0x08001c55
 800611c:	08001e7d 	.word	0x08001e7d
 8006120:	08001c7d 	.word	0x08001c7d
 8006124:	08001f95 	.word	0x08001f95
 8006128:	08001fa9 	.word	0x08001fa9
 800612c:	080022ed 	.word	0x080022ed
 8006130:	08001cad 	.word	0x08001cad
 8006134:	08001cfd 	.word	0x08001cfd
 8006138:	08001d49 	.word	0x08001d49
 800613c:	08001d6d 	.word	0x08001d6d
 8006140:	080024f5 	.word	0x080024f5
 8006144:	08001c2d 	.word	0x08001c2d
 8006148:	08001e9d 	.word	0x08001e9d
 800614c:	08001fbd 	.word	0x08001fbd
 8006150:	080021d5 	.word	0x080021d5
 8006154:	08002139 	.word	0x08002139
 8006158:	0800215d 	.word	0x0800215d
 800615c:	0800217d 	.word	0x0800217d
 8006160:	080021a9 	.word	0x080021a9
 8006164:	08002519 	.word	0x08002519
 8006168:	08001da1 	.word	0x08001da1
 800616c:	08001dbd 	.word	0x08001dbd
 8006170:	08001df1 	.word	0x08001df1
 8006174:	08001e0d 	.word	0x08001e0d
 8006178:	08001e45 	.word	0x08001e45
 800617c:	080027a9 	.word	0x080027a9
 8006180:	080028f5 	.word	0x080028f5
 8006184:	080029d5 	.word	0x080029d5
 8006188:	08002591 	.word	0x08002591
 800618c:	0800275d 	.word	0x0800275d
 8006190:	080028c1 	.word	0x080028c1
 8006194:	080029c1 	.word	0x080029c1
 8006198:	0800257d 	.word	0x0800257d
 800619c:	08002711 	.word	0x08002711
 80061a0:	0800288d 	.word	0x0800288d
 80061a4:	080029ad 	.word	0x080029ad
				  effectTick[i] = &FXdiodeLowpassTick;
 80061a8:	f8df c2e4 	ldr.w	ip, [pc, #740]	; 8006490 <parsePreset+0x1514>
				  effectSetters[i].setParam2 = &blankFunction;
 80061ac:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXdiodeLowpassTick;
 80061ae:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXDiodeParam1;
 80061b2:	f8df c2e0 	ldr.w	ip, [pc, #736]	; 8006494 <parsePreset+0x1518>
 80061b6:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
 80061ba:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 8006498 <parsePreset+0x151c>
				  effectSetters[i].setParam5 = &blankFunction;
 80061be:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
 80061c2:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 80061c6:	e447      	b.n	8005a58 <parsePreset+0xadc>
				  effectTick[i] = FXVZbandrejectTick;
 80061c8:	4a97      	ldr	r2, [pc, #604]	; (8006428 <parsePreset+0x14ac>)
 80061ca:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
 80061cc:	4a97      	ldr	r2, [pc, #604]	; (800642c <parsePreset+0x14b0>)
				  effectSetters[i].setParam5 = &blankFunction;;
 80061ce:	6118      	str	r0, [r3, #16]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
 80061d0:	601a      	str	r2, [r3, #0]
				  effectSetters[i].setParam2 = &FXNotchParam2;;
 80061d2:	4a97      	ldr	r2, [pc, #604]	; (8006430 <parsePreset+0x14b4>)
 80061d4:	605a      	str	r2, [r3, #4]
				  effectSetters[i].setParam3 = &FXNotchParam3;;
 80061d6:	4a97      	ldr	r2, [pc, #604]	; (8006434 <parsePreset+0x14b8>)
				  effectSetters[i].setParam4 = &blankFunction;;
 80061d8:	e9c3 2002 	strd	r2, r0, [r3, #8]
				  break;
 80061dc:	e43c      	b.n	8005a58 <parsePreset+0xadc>
				  effectTick[i] = &shaperTick;
 80061de:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 800649c <parsePreset+0x1520>
				  effectSetters[i].setParam5 = &blankFunction;
 80061e2:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &tanhTick;
 80061e4:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
 80061e8:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 80064a0 <parsePreset+0x1524>
 80061ec:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
 80061f0:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 80064a4 <parsePreset+0x1528>
 80061f4:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Linear;
 80061f8:	f8df c2ac 	ldr.w	ip, [pc, #684]	; 80064a8 <parsePreset+0x152c>
 80061fc:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 8006200:	f8df c2a8 	ldr.w	ip, [pc, #680]	; 80064ac <parsePreset+0x1530>
 8006204:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
 8006208:	e426      	b.n	8005a58 <parsePreset+0xadc>
				  effectTick[i] = &tanhTick;
 800620a:	f8df c2a4 	ldr.w	ip, [pc, #676]	; 80064b0 <parsePreset+0x1534>
				  effectSetters[i].setParam5 = &blankFunction;
 800620e:	6118      	str	r0, [r3, #16]
 8006210:	e7e8      	b.n	80061e4 <parsePreset+0x1268>
				  effectTick[i] = &satTick;
 8006212:	f8df c2a0 	ldr.w	ip, [pc, #672]	; 80064b4 <parsePreset+0x1538>
				  effectSetters[i].setParam5 = &blankFunction;
 8006216:	6118      	str	r0, [r3, #16]
 8006218:	e7e4      	b.n	80061e4 <parsePreset+0x1268>
				  effectTick[i] = &hardClipTick;
 800621a:	f8df c29c 	ldr.w	ip, [pc, #668]	; 80064b8 <parsePreset+0x153c>
				  effectSetters[i].setParam5 = &blankFunction;
 800621e:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &hardClipTick;
 8006220:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
 8006224:	f8df c278 	ldr.w	ip, [pc, #632]	; 80064a0 <parsePreset+0x1524>
 8006228:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
 800622c:	f8df c274 	ldr.w	ip, [pc, #628]	; 80064a4 <parsePreset+0x1528>
 8006230:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Hard;
 8006234:	f8df c284 	ldr.w	ip, [pc, #644]	; 80064bc <parsePreset+0x1540>
 8006238:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 800623c:	f8df c26c 	ldr.w	ip, [pc, #620]	; 80064ac <parsePreset+0x1530>
 8006240:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
 8006244:	e408      	b.n	8005a58 <parsePreset+0xadc>
				  effectTick[i] = &softClipTick;
 8006246:	f8df c278 	ldr.w	ip, [pc, #632]	; 80064c0 <parsePreset+0x1544>
				  effectSetters[i].setParam5 = &blankFunction;
 800624a:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &softClipTick;
 800624c:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
 8006250:	f8df c24c 	ldr.w	ip, [pc, #588]	; 80064a0 <parsePreset+0x1524>
 8006254:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
 8006258:	f8df c248 	ldr.w	ip, [pc, #584]	; 80064a4 <parsePreset+0x1528>
 800625c:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Soft;
 8006260:	f8df c260 	ldr.w	ip, [pc, #608]	; 80064c4 <parsePreset+0x1548>
 8006264:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 8006268:	f8df c240 	ldr.w	ip, [pc, #576]	; 80064ac <parsePreset+0x1530>
 800626c:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
 8006270:	f7ff bbf2 	b.w	8005a58 <parsePreset+0xadc>
				  totalEffects--;
 8006274:	9a01      	ldr	r2, [sp, #4]
				  effectSetters[i].setParam3 = &blankFunction;
 8006276:	6098      	str	r0, [r3, #8]
				  totalEffects--;
 8006278:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800627c:	fa5f f28c 	uxtb.w	r2, ip
				  effectTick[i] = &blankTick;
 8006280:	f8df c244 	ldr.w	ip, [pc, #580]	; 80064c8 <parsePreset+0x154c>
				  effectSetters[i].setParam2 = &blankFunction;
 8006284:	e9c3 0000 	strd	r0, r0, [r3]
				  totalEffects--;
 8006288:	9201      	str	r2, [sp, #4]
				  effectTick[i] = &blankTick;
 800628a:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam5 = &blankFunction;
 800628e:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  break;
 8006292:	f7ff bbe1 	b.w	8005a58 <parsePreset+0xadc>
				lfoShapeTick[i] = &lfoSawTick;
 8006296:	4b68      	ldr	r3, [pc, #416]	; (8006438 <parsePreset+0x14bc>)
 8006298:	4868      	ldr	r0, [pc, #416]	; (800643c <parsePreset+0x14c0>)
 800629a:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSetRate;
 800629c:	4b68      	ldr	r3, [pc, #416]	; (8006440 <parsePreset+0x14c4>)
 800629e:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSetShape;
 80062a0:	4b68      	ldr	r3, [pc, #416]	; (8006444 <parsePreset+0x14c8>)
 80062a2:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 80062a4:	4b68      	ldr	r3, [pc, #416]	; (8006448 <parsePreset+0x14cc>)
 80062a6:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 80062a8:	f7ff bb9d 	b.w	80059e6 <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoTriTick;
 80062ac:	4b62      	ldr	r3, [pc, #392]	; (8006438 <parsePreset+0x14bc>)
 80062ae:	4867      	ldr	r0, [pc, #412]	; (800644c <parsePreset+0x14d0>)
 80062b0:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoTriSetRate;
 80062b2:	4b67      	ldr	r3, [pc, #412]	; (8006450 <parsePreset+0x14d4>)
 80062b4:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoTriSetShape;
 80062b6:	4b67      	ldr	r3, [pc, #412]	; (8006454 <parsePreset+0x14d8>)
 80062b8:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 80062ba:	4b67      	ldr	r3, [pc, #412]	; (8006458 <parsePreset+0x14dc>)
 80062bc:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 80062be:	f7ff bb92 	b.w	80059e6 <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoSineTick;
 80062c2:	4b5d      	ldr	r3, [pc, #372]	; (8006438 <parsePreset+0x14bc>)
 80062c4:	4865      	ldr	r0, [pc, #404]	; (800645c <parsePreset+0x14e0>)
 80062c6:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineSetRate;
 80062c8:	4b65      	ldr	r3, [pc, #404]	; (8006460 <parsePreset+0x14e4>)
 80062ca:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineSetShape;
 80062cc:	4b65      	ldr	r3, [pc, #404]	; (8006464 <parsePreset+0x14e8>)
 80062ce:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 80062d0:	4b65      	ldr	r3, [pc, #404]	; (8006468 <parsePreset+0x14ec>)
 80062d2:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 80062d4:	f7ff bb87 	b.w	80059e6 <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoSawTick;
 80062d8:	4b57      	ldr	r3, [pc, #348]	; (8006438 <parsePreset+0x14bc>)
 80062da:	4858      	ldr	r0, [pc, #352]	; (800643c <parsePreset+0x14c0>)
 80062dc:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSetRate;
 80062de:	4b58      	ldr	r3, [pc, #352]	; (8006440 <parsePreset+0x14c4>)
 80062e0:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSetShape;
 80062e2:	4b58      	ldr	r3, [pc, #352]	; (8006444 <parsePreset+0x14c8>)
 80062e4:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 80062e6:	4b58      	ldr	r3, [pc, #352]	; (8006448 <parsePreset+0x14cc>)
 80062e8:	6213      	str	r3, [r2, #32]
				break;
 80062ea:	f7ff bb2c 	b.w	8005946 <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSawSquareTick;
 80062ee:	4b52      	ldr	r3, [pc, #328]	; (8006438 <parsePreset+0x14bc>)
 80062f0:	485e      	ldr	r0, [pc, #376]	; (800646c <parsePreset+0x14f0>)
 80062f2:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 80062f4:	4b5e      	ldr	r3, [pc, #376]	; (8006470 <parsePreset+0x14f4>)
 80062f6:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 80062f8:	4b5e      	ldr	r3, [pc, #376]	; (8006474 <parsePreset+0x14f8>)
 80062fa:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 80062fc:	4b5e      	ldr	r3, [pc, #376]	; (8006478 <parsePreset+0x14fc>)
 80062fe:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8006300:	f7ff bb71 	b.w	80059e6 <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoSineTriTick;
 8006304:	4b4c      	ldr	r3, [pc, #304]	; (8006438 <parsePreset+0x14bc>)
 8006306:	485d      	ldr	r0, [pc, #372]	; (800647c <parsePreset+0x1500>)
 8006308:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 800630a:	4b5d      	ldr	r3, [pc, #372]	; (8006480 <parsePreset+0x1504>)
 800630c:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 800630e:	4b5d      	ldr	r3, [pc, #372]	; (8006484 <parsePreset+0x1508>)
 8006310:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8006312:	4b5d      	ldr	r3, [pc, #372]	; (8006488 <parsePreset+0x150c>)
 8006314:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8006316:	f7ff bb66 	b.w	80059e6 <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoTriTick;
 800631a:	4b47      	ldr	r3, [pc, #284]	; (8006438 <parsePreset+0x14bc>)
 800631c:	484b      	ldr	r0, [pc, #300]	; (800644c <parsePreset+0x14d0>)
 800631e:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8006320:	4b4b      	ldr	r3, [pc, #300]	; (8006450 <parsePreset+0x14d4>)
 8006322:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8006324:	4b4b      	ldr	r3, [pc, #300]	; (8006454 <parsePreset+0x14d8>)
 8006326:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8006328:	4b4b      	ldr	r3, [pc, #300]	; (8006458 <parsePreset+0x14dc>)
 800632a:	6213      	str	r3, [r2, #32]
				break;
 800632c:	f7ff bb0b 	b.w	8005946 <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSineTick;
 8006330:	4b41      	ldr	r3, [pc, #260]	; (8006438 <parsePreset+0x14bc>)
 8006332:	484a      	ldr	r0, [pc, #296]	; (800645c <parsePreset+0x14e0>)
 8006334:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8006336:	4b4a      	ldr	r3, [pc, #296]	; (8006460 <parsePreset+0x14e4>)
 8006338:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineSetShape;
 800633a:	4b4a      	ldr	r3, [pc, #296]	; (8006464 <parsePreset+0x14e8>)
 800633c:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 800633e:	4b4a      	ldr	r3, [pc, #296]	; (8006468 <parsePreset+0x14ec>)
 8006340:	6213      	str	r3, [r2, #32]
				break;
 8006342:	f7ff bb00 	b.w	8005946 <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSawSquareTick;
 8006346:	4b3c      	ldr	r3, [pc, #240]	; (8006438 <parsePreset+0x14bc>)
 8006348:	4848      	ldr	r0, [pc, #288]	; (800646c <parsePreset+0x14f0>)
 800634a:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 800634c:	4b48      	ldr	r3, [pc, #288]	; (8006470 <parsePreset+0x14f4>)
 800634e:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8006350:	4b48      	ldr	r3, [pc, #288]	; (8006474 <parsePreset+0x14f8>)
 8006352:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8006354:	4b48      	ldr	r3, [pc, #288]	; (8006478 <parsePreset+0x14fc>)
 8006356:	6213      	str	r3, [r2, #32]
				break;
 8006358:	f7ff baf5 	b.w	8005946 <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSawTick;
 800635c:	4b36      	ldr	r3, [pc, #216]	; (8006438 <parsePreset+0x14bc>)
 800635e:	4837      	ldr	r0, [pc, #220]	; (800643c <parsePreset+0x14c0>)
 8006360:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8006362:	4b37      	ldr	r3, [pc, #220]	; (8006440 <parsePreset+0x14c4>)
 8006364:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSetShape;
 8006366:	4b37      	ldr	r3, [pc, #220]	; (8006444 <parsePreset+0x14c8>)
 8006368:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 800636a:	4b37      	ldr	r3, [pc, #220]	; (8006448 <parsePreset+0x14cc>)
 800636c:	6153      	str	r3, [r2, #20]
				break;
 800636e:	f7ff baca 	b.w	8005906 <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSineTriTick;
 8006372:	4b31      	ldr	r3, [pc, #196]	; (8006438 <parsePreset+0x14bc>)
 8006374:	4841      	ldr	r0, [pc, #260]	; (800647c <parsePreset+0x1500>)
 8006376:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8006378:	4b41      	ldr	r3, [pc, #260]	; (8006480 <parsePreset+0x1504>)
 800637a:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 800637c:	4b41      	ldr	r3, [pc, #260]	; (8006484 <parsePreset+0x1508>)
 800637e:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8006380:	4b41      	ldr	r3, [pc, #260]	; (8006488 <parsePreset+0x150c>)
 8006382:	6213      	str	r3, [r2, #32]
				break;
 8006384:	f7ff badf 	b.w	8005946 <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoTriTick;
 8006388:	4b2b      	ldr	r3, [pc, #172]	; (8006438 <parsePreset+0x14bc>)
 800638a:	4830      	ldr	r0, [pc, #192]	; (800644c <parsePreset+0x14d0>)
 800638c:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoTriSetRate;
 800638e:	4b30      	ldr	r3, [pc, #192]	; (8006450 <parsePreset+0x14d4>)
 8006390:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8006392:	4b30      	ldr	r3, [pc, #192]	; (8006454 <parsePreset+0x14d8>)
 8006394:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8006396:	4b30      	ldr	r3, [pc, #192]	; (8006458 <parsePreset+0x14dc>)
 8006398:	6153      	str	r3, [r2, #20]
				break;
 800639a:	f7ff bab4 	b.w	8005906 <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSineTick;
 800639e:	4b26      	ldr	r3, [pc, #152]	; (8006438 <parsePreset+0x14bc>)
 80063a0:	482e      	ldr	r0, [pc, #184]	; (800645c <parsePreset+0x14e0>)
 80063a2:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineSetRate;
 80063a4:	4b2e      	ldr	r3, [pc, #184]	; (8006460 <parsePreset+0x14e4>)
 80063a6:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineSetShape;
 80063a8:	4b2e      	ldr	r3, [pc, #184]	; (8006464 <parsePreset+0x14e8>)
 80063aa:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 80063ac:	4b2e      	ldr	r3, [pc, #184]	; (8006468 <parsePreset+0x14ec>)
 80063ae:	6153      	str	r3, [r2, #20]
				break;
 80063b0:	f7ff baa9 	b.w	8005906 <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSawSquareTick;
 80063b4:	4b20      	ldr	r3, [pc, #128]	; (8006438 <parsePreset+0x14bc>)
 80063b6:	482d      	ldr	r0, [pc, #180]	; (800646c <parsePreset+0x14f0>)
 80063b8:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 80063ba:	4b2d      	ldr	r3, [pc, #180]	; (8006470 <parsePreset+0x14f4>)
 80063bc:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 80063be:	4b2d      	ldr	r3, [pc, #180]	; (8006474 <parsePreset+0x14f8>)
 80063c0:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 80063c2:	4b2d      	ldr	r3, [pc, #180]	; (8006478 <parsePreset+0x14fc>)
 80063c4:	6153      	str	r3, [r2, #20]
				break;
 80063c6:	f7ff ba9e 	b.w	8005906 <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSineTriTick;
 80063ca:	4b1b      	ldr	r3, [pc, #108]	; (8006438 <parsePreset+0x14bc>)
 80063cc:	482b      	ldr	r0, [pc, #172]	; (800647c <parsePreset+0x1500>)
 80063ce:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 80063d0:	4b2b      	ldr	r3, [pc, #172]	; (8006480 <parsePreset+0x1504>)
 80063d2:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 80063d4:	4b2b      	ldr	r3, [pc, #172]	; (8006484 <parsePreset+0x1508>)
 80063d6:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 80063d8:	4b2b      	ldr	r3, [pc, #172]	; (8006488 <parsePreset+0x150c>)
 80063da:	6153      	str	r3, [r2, #20]
				break;
 80063dc:	f7ff ba93 	b.w	8005906 <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSawTick;
 80063e0:	4b15      	ldr	r3, [pc, #84]	; (8006438 <parsePreset+0x14bc>)
 80063e2:	4816      	ldr	r0, [pc, #88]	; (800643c <parsePreset+0x14c0>)
				lfoSetters[i].setRate = &lfoSawSetRate;
 80063e4:	4a29      	ldr	r2, [pc, #164]	; (800648c <parsePreset+0x1510>)
				lfoShapeTick[i] = &lfoSawTick;
 80063e6:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSetRate;
 80063e8:	4b15      	ldr	r3, [pc, #84]	; (8006440 <parsePreset+0x14c4>)
 80063ea:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSetShape;
 80063ec:	4b15      	ldr	r3, [pc, #84]	; (8006444 <parsePreset+0x14c8>)
 80063ee:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 80063f0:	4b15      	ldr	r3, [pc, #84]	; (8006448 <parsePreset+0x14cc>)
 80063f2:	6093      	str	r3, [r2, #8]
				break;
 80063f4:	f7ff ba67 	b.w	80058c6 <parsePreset+0x94a>
				lfoShapeTick[i] = &lfoTriTick;
 80063f8:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <parsePreset+0x14bc>)
 80063fa:	4814      	ldr	r0, [pc, #80]	; (800644c <parsePreset+0x14d0>)
				lfoSetters[i].setRate = &lfoTriSetRate;
 80063fc:	4a23      	ldr	r2, [pc, #140]	; (800648c <parsePreset+0x1510>)
				lfoShapeTick[i] = &lfoTriTick;
 80063fe:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8006400:	4b13      	ldr	r3, [pc, #76]	; (8006450 <parsePreset+0x14d4>)
 8006402:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8006404:	4b13      	ldr	r3, [pc, #76]	; (8006454 <parsePreset+0x14d8>)
 8006406:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8006408:	4b13      	ldr	r3, [pc, #76]	; (8006458 <parsePreset+0x14dc>)
 800640a:	6093      	str	r3, [r2, #8]
				break;
 800640c:	f7ff ba5b 	b.w	80058c6 <parsePreset+0x94a>
				lfoShapeTick[i] = &lfoSineTick;
 8006410:	4b09      	ldr	r3, [pc, #36]	; (8006438 <parsePreset+0x14bc>)
 8006412:	4812      	ldr	r0, [pc, #72]	; (800645c <parsePreset+0x14e0>)
				lfoSetters[i].setRate = &lfoSineSetRate;
 8006414:	4a1d      	ldr	r2, [pc, #116]	; (800648c <parsePreset+0x1510>)
				lfoShapeTick[i] = &lfoSineTick;
 8006416:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8006418:	4b11      	ldr	r3, [pc, #68]	; (8006460 <parsePreset+0x14e4>)
 800641a:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineSetShape;
 800641c:	4b11      	ldr	r3, [pc, #68]	; (8006464 <parsePreset+0x14e8>)
 800641e:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 8006420:	4b11      	ldr	r3, [pc, #68]	; (8006468 <parsePreset+0x14ec>)
 8006422:	6093      	str	r3, [r2, #8]
				break;
 8006424:	f7ff ba4f 	b.w	80058c6 <parsePreset+0x94a>
 8006428:	080025b9 	.word	0x080025b9
 800642c:	080027f5 	.word	0x080027f5
 8006430:	08002929 	.word	0x08002929
 8006434:	080029e9 	.word	0x080029e9
 8006438:	200046a4 	.word	0x200046a4
 800643c:	08001ab1 	.word	0x08001ab1
 8006440:	08001b45 	.word	0x08001b45
 8006444:	08001c15 	.word	0x08001c15
 8006448:	08001bbd 	.word	0x08001bbd
 800644c:	08001a95 	.word	0x08001a95
 8006450:	08001b31 	.word	0x08001b31
 8006454:	08001c11 	.word	0x08001c11
 8006458:	08001ba9 	.word	0x08001ba9
 800645c:	08001a79 	.word	0x08001a79
 8006460:	08001b1d 	.word	0x08001b1d
 8006464:	08001c0d 	.word	0x08001c0d
 8006468:	08001b95 	.word	0x08001b95
 800646c:	08001a41 	.word	0x08001a41
 8006470:	08001af5 	.word	0x08001af5
 8006474:	08001be5 	.word	0x08001be5
 8006478:	08001b6d 	.word	0x08001b6d
 800647c:	08001a5d 	.word	0x08001a5d
 8006480:	08001b09 	.word	0x08001b09
 8006484:	08001bf9 	.word	0x08001bf9
 8006488:	08001b81 	.word	0x08001b81
 800648c:	200151c8 	.word	0x200151c8
 8006490:	08002569 	.word	0x08002569
 8006494:	080026c5 	.word	0x080026c5
 8006498:	08002999 	.word	0x08002999
 800649c:	08002299 	.word	0x08002299
 80064a0:	08001c2d 	.word	0x08001c2d
 80064a4:	08001e7d 	.word	0x08001e7d
 80064a8:	08001eb1 	.word	0x08001eb1
 80064ac:	08001f95 	.word	0x08001f95
 80064b0:	08002321 	.word	0x08002321
 80064b4:	08002481 	.word	0x08002481
 80064b8:	080023fd 	.word	0x080023fd
 80064bc:	08001f1d 	.word	0x08001f1d
 80064c0:	08002379 	.word	0x08002379
 80064c4:	08001ec5 	.word	0x08001ec5
 80064c8:	080022e9 	.word	0x080022e9
				lfoShapeTick[i] = &lfoSawSquareTick;
 80064cc:	4b99      	ldr	r3, [pc, #612]	; (8006734 <parsePreset+0x17b8>)
 80064ce:	489a      	ldr	r0, [pc, #616]	; (8006738 <parsePreset+0x17bc>)
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 80064d0:	4a9a      	ldr	r2, [pc, #616]	; (800673c <parsePreset+0x17c0>)
				lfoShapeTick[i] = &lfoSawSquareTick;
 80064d2:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 80064d4:	4b9a      	ldr	r3, [pc, #616]	; (8006740 <parsePreset+0x17c4>)
 80064d6:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 80064d8:	4b9a      	ldr	r3, [pc, #616]	; (8006744 <parsePreset+0x17c8>)
 80064da:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 80064dc:	4b9a      	ldr	r3, [pc, #616]	; (8006748 <parsePreset+0x17cc>)
 80064de:	6093      	str	r3, [r2, #8]
				break;
 80064e0:	f7ff b9f1 	b.w	80058c6 <parsePreset+0x94a>
				lfoShapeTick[i] = &lfoSineTriTick;
 80064e4:	4b93      	ldr	r3, [pc, #588]	; (8006734 <parsePreset+0x17b8>)
 80064e6:	4899      	ldr	r0, [pc, #612]	; (800674c <parsePreset+0x17d0>)
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 80064e8:	4a94      	ldr	r2, [pc, #592]	; (800673c <parsePreset+0x17c0>)
				lfoShapeTick[i] = &lfoSineTriTick;
 80064ea:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 80064ec:	4b98      	ldr	r3, [pc, #608]	; (8006750 <parsePreset+0x17d4>)
 80064ee:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 80064f0:	4b98      	ldr	r3, [pc, #608]	; (8006754 <parsePreset+0x17d8>)
 80064f2:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 80064f4:	4b98      	ldr	r3, [pc, #608]	; (8006758 <parsePreset+0x17dc>)
 80064f6:	6093      	str	r3, [r2, #8]
				break;
 80064f8:	f7ff b9e5 	b.w	80058c6 <parsePreset+0x94a>
				  filterTick[i] = &LadderLowpassTick;
 80064fc:	4b97      	ldr	r3, [pc, #604]	; (800675c <parsePreset+0x17e0>)
 80064fe:	4a98      	ldr	r2, [pc, #608]	; (8006760 <parsePreset+0x17e4>)
 8006500:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8006502:	4b98      	ldr	r3, [pc, #608]	; (8006764 <parsePreset+0x17e8>)
 8006504:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8006506:	4b98      	ldr	r3, [pc, #608]	; (8006768 <parsePreset+0x17ec>)
 8006508:	60cb      	str	r3, [r1, #12]
				  break;
 800650a:	f7ff b9ba 	b.w	8005882 <parsePreset+0x906>
				  filterTick[i] = &VZbandrejectTick;
 800650e:	4b93      	ldr	r3, [pc, #588]	; (800675c <parsePreset+0x17e0>)
 8006510:	4a96      	ldr	r2, [pc, #600]	; (800676c <parsePreset+0x17f0>)
 8006512:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8006514:	4b96      	ldr	r3, [pc, #600]	; (8006770 <parsePreset+0x17f4>)
 8006516:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8006518:	4b96      	ldr	r3, [pc, #600]	; (8006774 <parsePreset+0x17f8>)
 800651a:	60cb      	str	r3, [r1, #12]
				  break;
 800651c:	f7ff b9b1 	b.w	8005882 <parsePreset+0x906>
				  filterTick[i] = &VZhighshelfTick;
 8006520:	4b8e      	ldr	r3, [pc, #568]	; (800675c <parsePreset+0x17e0>)
 8006522:	4a95      	ldr	r2, [pc, #596]	; (8006778 <parsePreset+0x17fc>)
 8006524:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8006526:	4b95      	ldr	r3, [pc, #596]	; (800677c <parsePreset+0x1800>)
 8006528:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 800652a:	4b95      	ldr	r3, [pc, #596]	; (8006780 <parsePreset+0x1804>)
 800652c:	60cb      	str	r3, [r1, #12]
				  break;
 800652e:	f7ff b9a8 	b.w	8005882 <parsePreset+0x906>
				  filterTick[i] = &VZlowshelfTick;
 8006532:	4b8a      	ldr	r3, [pc, #552]	; (800675c <parsePreset+0x17e0>)
 8006534:	4a93      	ldr	r2, [pc, #588]	; (8006784 <parsePreset+0x1808>)
 8006536:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8006538:	4b93      	ldr	r3, [pc, #588]	; (8006788 <parsePreset+0x180c>)
 800653a:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 800653c:	4b93      	ldr	r3, [pc, #588]	; (800678c <parsePreset+0x1810>)
 800653e:	60cb      	str	r3, [r1, #12]
				  break;
 8006540:	f7ff b99f 	b.w	8005882 <parsePreset+0x906>
				  filterTick[i] = &VZpeakTick;
 8006544:	4b85      	ldr	r3, [pc, #532]	; (800675c <parsePreset+0x17e0>)
 8006546:	4a92      	ldr	r2, [pc, #584]	; (8006790 <parsePreset+0x1814>)
 8006548:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZpeakSetQ;
 800654a:	4b92      	ldr	r3, [pc, #584]	; (8006794 <parsePreset+0x1818>)
 800654c:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZpeakSetGain;
 800654e:	4b92      	ldr	r3, [pc, #584]	; (8006798 <parsePreset+0x181c>)
 8006550:	60cb      	str	r3, [r1, #12]
				  break;
 8006552:	f7ff b996 	b.w	8005882 <parsePreset+0x906>
				  filterTick[i] = &diodeLowpassTick;
 8006556:	4b81      	ldr	r3, [pc, #516]	; (800675c <parsePreset+0x17e0>)
 8006558:	4a90      	ldr	r2, [pc, #576]	; (800679c <parsePreset+0x1820>)
 800655a:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 800655c:	4b90      	ldr	r3, [pc, #576]	; (80067a0 <parsePreset+0x1824>)
 800655e:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8006560:	4b90      	ldr	r3, [pc, #576]	; (80067a4 <parsePreset+0x1828>)
 8006562:	60cb      	str	r3, [r1, #12]
				  break;
 8006564:	f7ff b98d 	b.w	8005882 <parsePreset+0x906>
				  filterTick[i] = &bandpassTick;
 8006568:	4b7c      	ldr	r3, [pc, #496]	; (800675c <parsePreset+0x17e0>)
 800656a:	4a8f      	ldr	r2, [pc, #572]	; (80067a8 <parsePreset+0x182c>)
 800656c:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &bandpassSetQ;
 800656e:	4b8f      	ldr	r3, [pc, #572]	; (80067ac <parsePreset+0x1830>)
 8006570:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &bandpassSetGain;
 8006572:	4b8f      	ldr	r3, [pc, #572]	; (80067b0 <parsePreset+0x1834>)
 8006574:	60cb      	str	r3, [r1, #12]
				  break;
 8006576:	f7ff b984 	b.w	8005882 <parsePreset+0x906>
				  filterTick[i] = &highpassTick;
 800657a:	4b78      	ldr	r3, [pc, #480]	; (800675c <parsePreset+0x17e0>)
 800657c:	4a8d      	ldr	r2, [pc, #564]	; (80067b4 <parsePreset+0x1838>)
 800657e:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &highpassSetQ;
 8006580:	4b8d      	ldr	r3, [pc, #564]	; (80067b8 <parsePreset+0x183c>)
 8006582:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &highpassSetGain;
 8006584:	4b8d      	ldr	r3, [pc, #564]	; (80067bc <parsePreset+0x1840>)
 8006586:	60cb      	str	r3, [r1, #12]
				  break;
 8006588:	f7ff b97b 	b.w	8005882 <parsePreset+0x906>
				  filterTick[i] = &LadderLowpassTick;
 800658c:	4b73      	ldr	r3, [pc, #460]	; (800675c <parsePreset+0x17e0>)
 800658e:	4a74      	ldr	r2, [pc, #464]	; (8006760 <parsePreset+0x17e4>)
 8006590:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8006592:	4b74      	ldr	r3, [pc, #464]	; (8006764 <parsePreset+0x17e8>)
 8006594:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8006596:	4b74      	ldr	r3, [pc, #464]	; (8006768 <parsePreset+0x17ec>)
 8006598:	604b      	str	r3, [r1, #4]
				  break;
 800659a:	f7ff b951 	b.w	8005840 <parsePreset+0x8c4>
				  filterTick[i] = &VZbandrejectTick;
 800659e:	4b6f      	ldr	r3, [pc, #444]	; (800675c <parsePreset+0x17e0>)
 80065a0:	4a72      	ldr	r2, [pc, #456]	; (800676c <parsePreset+0x17f0>)
 80065a2:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 80065a4:	4b72      	ldr	r3, [pc, #456]	; (8006770 <parsePreset+0x17f4>)
 80065a6:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 80065a8:	4b72      	ldr	r3, [pc, #456]	; (8006774 <parsePreset+0x17f8>)
 80065aa:	604b      	str	r3, [r1, #4]
				  break;
 80065ac:	f7ff b948 	b.w	8005840 <parsePreset+0x8c4>
				  filterTick[i] = &VZhighshelfTick;
 80065b0:	4b6a      	ldr	r3, [pc, #424]	; (800675c <parsePreset+0x17e0>)
 80065b2:	4a71      	ldr	r2, [pc, #452]	; (8006778 <parsePreset+0x17fc>)
 80065b4:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 80065b6:	4b71      	ldr	r3, [pc, #452]	; (800677c <parsePreset+0x1800>)
 80065b8:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 80065ba:	4b71      	ldr	r3, [pc, #452]	; (8006780 <parsePreset+0x1804>)
 80065bc:	604b      	str	r3, [r1, #4]
				  break;
 80065be:	f7ff b93f 	b.w	8005840 <parsePreset+0x8c4>
				  filterTick[i] = &VZlowshelfTick;
 80065c2:	4b66      	ldr	r3, [pc, #408]	; (800675c <parsePreset+0x17e0>)
 80065c4:	4a6f      	ldr	r2, [pc, #444]	; (8006784 <parsePreset+0x1808>)
 80065c6:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 80065c8:	4b6f      	ldr	r3, [pc, #444]	; (8006788 <parsePreset+0x180c>)
 80065ca:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 80065cc:	4b6f      	ldr	r3, [pc, #444]	; (800678c <parsePreset+0x1810>)
 80065ce:	604b      	str	r3, [r1, #4]
				  break;
 80065d0:	f7ff b936 	b.w	8005840 <parsePreset+0x8c4>
				  filterTick[i] = &VZpeakTick;
 80065d4:	4b61      	ldr	r3, [pc, #388]	; (800675c <parsePreset+0x17e0>)
 80065d6:	4a6e      	ldr	r2, [pc, #440]	; (8006790 <parsePreset+0x1814>)
 80065d8:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZpeakSetQ;
 80065da:	4b6e      	ldr	r3, [pc, #440]	; (8006794 <parsePreset+0x1818>)
 80065dc:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZpeakSetGain;
 80065de:	4b6e      	ldr	r3, [pc, #440]	; (8006798 <parsePreset+0x181c>)
 80065e0:	604b      	str	r3, [r1, #4]
				  break;
 80065e2:	f7ff b92d 	b.w	8005840 <parsePreset+0x8c4>
				  filterTick[i] = &diodeLowpassTick;
 80065e6:	4b5d      	ldr	r3, [pc, #372]	; (800675c <parsePreset+0x17e0>)
 80065e8:	4a6c      	ldr	r2, [pc, #432]	; (800679c <parsePreset+0x1820>)
 80065ea:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 80065ec:	4b6c      	ldr	r3, [pc, #432]	; (80067a0 <parsePreset+0x1824>)
 80065ee:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 80065f0:	4b6c      	ldr	r3, [pc, #432]	; (80067a4 <parsePreset+0x1828>)
 80065f2:	604b      	str	r3, [r1, #4]
				  break;
 80065f4:	f7ff b924 	b.w	8005840 <parsePreset+0x8c4>
				  filterTick[i] = &bandpassTick;
 80065f8:	4b58      	ldr	r3, [pc, #352]	; (800675c <parsePreset+0x17e0>)
 80065fa:	4a6b      	ldr	r2, [pc, #428]	; (80067a8 <parsePreset+0x182c>)
 80065fc:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &bandpassSetQ;
 80065fe:	4b6b      	ldr	r3, [pc, #428]	; (80067ac <parsePreset+0x1830>)
 8006600:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &bandpassSetGain;
 8006602:	4b6b      	ldr	r3, [pc, #428]	; (80067b0 <parsePreset+0x1834>)
 8006604:	604b      	str	r3, [r1, #4]
				  break;
 8006606:	f7ff b91b 	b.w	8005840 <parsePreset+0x8c4>
				  filterTick[i] = &highpassTick;
 800660a:	4b54      	ldr	r3, [pc, #336]	; (800675c <parsePreset+0x17e0>)
 800660c:	4a69      	ldr	r2, [pc, #420]	; (80067b4 <parsePreset+0x1838>)
 800660e:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &highpassSetQ;
 8006610:	4b69      	ldr	r3, [pc, #420]	; (80067b8 <parsePreset+0x183c>)
 8006612:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &highpassSetGain;
 8006614:	4b69      	ldr	r3, [pc, #420]	; (80067bc <parsePreset+0x1840>)
 8006616:	604b      	str	r3, [r1, #4]
				  break;
 8006618:	f7ff b912 	b.w	8005840 <parsePreset+0x8c4>
				  shapeTick[i] = &userTick;
 800661c:	4a68      	ldr	r2, [pc, #416]	; (80067c0 <parsePreset+0x1844>)
 800661e:	4969      	ldr	r1, [pc, #420]	; (80067c4 <parsePreset+0x1848>)
 8006620:	6091      	str	r1, [r2, #8]
				  break;
 8006622:	f7ff b8d9 	b.w	80057d8 <parsePreset+0x85c>
				  shapeTick[i] = &triTick;
 8006626:	4a66      	ldr	r2, [pc, #408]	; (80067c0 <parsePreset+0x1844>)
 8006628:	4967      	ldr	r1, [pc, #412]	; (80067c8 <parsePreset+0x184c>)
 800662a:	6091      	str	r1, [r2, #8]
				  break;
 800662c:	f7ff b8d4 	b.w	80057d8 <parsePreset+0x85c>
				  shapeTick[i] = &sineTick;
 8006630:	4a63      	ldr	r2, [pc, #396]	; (80067c0 <parsePreset+0x1844>)
 8006632:	4966      	ldr	r1, [pc, #408]	; (80067cc <parsePreset+0x1850>)
 8006634:	6091      	str	r1, [r2, #8]
				  break;
 8006636:	f7ff b8cf 	b.w	80057d8 <parsePreset+0x85c>
				  shapeTick[i] = &pulseTick;
 800663a:	4a61      	ldr	r2, [pc, #388]	; (80067c0 <parsePreset+0x1844>)
 800663c:	4964      	ldr	r1, [pc, #400]	; (80067d0 <parsePreset+0x1854>)
 800663e:	6091      	str	r1, [r2, #8]
				  break;
 8006640:	f7ff b8ca 	b.w	80057d8 <parsePreset+0x85c>
				  shapeTick[i] = &sawTick;
 8006644:	4a5e      	ldr	r2, [pc, #376]	; (80067c0 <parsePreset+0x1844>)
 8006646:	4963      	ldr	r1, [pc, #396]	; (80067d4 <parsePreset+0x1858>)
 8006648:	6091      	str	r1, [r2, #8]
				  break;
 800664a:	f7ff b8c5 	b.w	80057d8 <parsePreset+0x85c>
				  shapeTick[i] = &sineTriTick;
 800664e:	4a5c      	ldr	r2, [pc, #368]	; (80067c0 <parsePreset+0x1844>)
 8006650:	4961      	ldr	r1, [pc, #388]	; (80067d8 <parsePreset+0x185c>)
 8006652:	6091      	str	r1, [r2, #8]
				  break;
 8006654:	f7ff b8c0 	b.w	80057d8 <parsePreset+0x85c>
				  shapeTick[i] = &userTick;
 8006658:	4a59      	ldr	r2, [pc, #356]	; (80067c0 <parsePreset+0x1844>)
 800665a:	495a      	ldr	r1, [pc, #360]	; (80067c4 <parsePreset+0x1848>)
 800665c:	6051      	str	r1, [r2, #4]
				  break;
 800665e:	f7ff b894 	b.w	800578a <parsePreset+0x80e>
				  shapeTick[i] = &triTick;
 8006662:	4a57      	ldr	r2, [pc, #348]	; (80067c0 <parsePreset+0x1844>)
 8006664:	4958      	ldr	r1, [pc, #352]	; (80067c8 <parsePreset+0x184c>)
 8006666:	6051      	str	r1, [r2, #4]
				  break;
 8006668:	f7ff b88f 	b.w	800578a <parsePreset+0x80e>
				  shapeTick[i] = &sineTick;
 800666c:	4a54      	ldr	r2, [pc, #336]	; (80067c0 <parsePreset+0x1844>)
 800666e:	4957      	ldr	r1, [pc, #348]	; (80067cc <parsePreset+0x1850>)
 8006670:	6051      	str	r1, [r2, #4]
				  break;
 8006672:	f7ff b88a 	b.w	800578a <parsePreset+0x80e>
				  shapeTick[i] = &pulseTick;
 8006676:	4a52      	ldr	r2, [pc, #328]	; (80067c0 <parsePreset+0x1844>)
 8006678:	4955      	ldr	r1, [pc, #340]	; (80067d0 <parsePreset+0x1854>)
 800667a:	6051      	str	r1, [r2, #4]
				  break;
 800667c:	f7ff b885 	b.w	800578a <parsePreset+0x80e>
				  shapeTick[i] = &sawTick;
 8006680:	4a4f      	ldr	r2, [pc, #316]	; (80067c0 <parsePreset+0x1844>)
 8006682:	4954      	ldr	r1, [pc, #336]	; (80067d4 <parsePreset+0x1858>)
 8006684:	6051      	str	r1, [r2, #4]
				  break;
 8006686:	f7ff b880 	b.w	800578a <parsePreset+0x80e>
				  shapeTick[i] = &sineTriTick;
 800668a:	4a4d      	ldr	r2, [pc, #308]	; (80067c0 <parsePreset+0x1844>)
 800668c:	4952      	ldr	r1, [pc, #328]	; (80067d8 <parsePreset+0x185c>)
 800668e:	6051      	str	r1, [r2, #4]
				  break;
 8006690:	f7ff b87b 	b.w	800578a <parsePreset+0x80e>
				  shapeTick[i] = &userTick;
 8006694:	4b4a      	ldr	r3, [pc, #296]	; (80067c0 <parsePreset+0x1844>)
 8006696:	4a4b      	ldr	r2, [pc, #300]	; (80067c4 <parsePreset+0x1848>)
 8006698:	601a      	str	r2, [r3, #0]
				  break;
 800669a:	f7ff b850 	b.w	800573e <parsePreset+0x7c2>
				  shapeTick[i] = &triTick;
 800669e:	4b48      	ldr	r3, [pc, #288]	; (80067c0 <parsePreset+0x1844>)
 80066a0:	4a49      	ldr	r2, [pc, #292]	; (80067c8 <parsePreset+0x184c>)
 80066a2:	601a      	str	r2, [r3, #0]
				  break;
 80066a4:	f7ff b84b 	b.w	800573e <parsePreset+0x7c2>
				  shapeTick[i] = &sineTick;
 80066a8:	4b45      	ldr	r3, [pc, #276]	; (80067c0 <parsePreset+0x1844>)
 80066aa:	4a48      	ldr	r2, [pc, #288]	; (80067cc <parsePreset+0x1850>)
 80066ac:	601a      	str	r2, [r3, #0]
				  break;
 80066ae:	f7ff b846 	b.w	800573e <parsePreset+0x7c2>
				  shapeTick[i] = &pulseTick;
 80066b2:	4b43      	ldr	r3, [pc, #268]	; (80067c0 <parsePreset+0x1844>)
 80066b4:	4a46      	ldr	r2, [pc, #280]	; (80067d0 <parsePreset+0x1854>)
 80066b6:	601a      	str	r2, [r3, #0]
				  break;
 80066b8:	f7ff b841 	b.w	800573e <parsePreset+0x7c2>
				  shapeTick[i] = &sawTick;
 80066bc:	4b40      	ldr	r3, [pc, #256]	; (80067c0 <parsePreset+0x1844>)
 80066be:	4a45      	ldr	r2, [pc, #276]	; (80067d4 <parsePreset+0x1858>)
 80066c0:	601a      	str	r2, [r3, #0]
				  break;
 80066c2:	f7ff b83c 	b.w	800573e <parsePreset+0x7c2>
				  shapeTick[i] = &sineTriTick;
 80066c6:	4b3e      	ldr	r3, [pc, #248]	; (80067c0 <parsePreset+0x1844>)
 80066c8:	4a43      	ldr	r2, [pc, #268]	; (80067d8 <parsePreset+0x185c>)
 80066ca:	601a      	str	r2, [r3, #0]
				  break;
 80066cc:	f7ff b837 	b.w	800573e <parsePreset+0x7c2>
			mappings[whichMapping].destNumber = destNumber;
 80066d0:	fb09 f30c 	mul.w	r3, r9, ip
 80066d4:	4666      	mov	r6, ip
 80066d6:	eb0e 0203 	add.w	r2, lr, r3
 80066da:	f80e 0003 	strb.w	r0, [lr, r3]
			mappings[whichMapping].dest = &params[destNumber];
 80066de:	9b02      	ldr	r3, [sp, #8]
 80066e0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80066e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			numMappings++;
 80066e8:	f10c 0301 	add.w	r3, ip, #1
			mappings[whichMapping].dest = &params[destNumber];
 80066ec:	6050      	str	r0, [r2, #4]
			numMappings++;
 80066ee:	fa5f fc83 	uxtb.w	ip, r3
 80066f2:	f7ff bb6a 	b.w	8005dca <parsePreset+0xe4e>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
 80066f6:	fb09 f306 	mul.w	r3, r9, r6
 80066fa:	18ca      	adds	r2, r1, r3
 80066fc:	4937      	ldr	r1, [pc, #220]	; (80067dc <parsePreset+0x1860>)
 80066fe:	4472      	add	r2, lr
 8006700:	6291      	str	r1, [r2, #40]	; 0x28
 8006702:	1d2a      	adds	r2, r5, #4
 8006704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006708:	4473      	add	r3, lr
 800670a:	6059      	str	r1, [r3, #4]
 800670c:	f7ff bba3 	b.w	8005e56 <parsePreset+0xeda>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8006710:	2108      	movs	r1, #8
 8006712:	2004      	movs	r0, #4
 8006714:	4472      	add	r2, lr
 8006716:	fb11 0303 	smlabb	r3, r1, r3, r0
 800671a:	4453      	add	r3, sl
 800671c:	6293      	str	r3, [r2, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 800671e:	f7ff bb9a 	b.w	8005e56 <parsePreset+0xeda>
 8006722:	4d2f      	ldr	r5, [pc, #188]	; (80067e0 <parsePreset+0x1864>)
 8006724:	f7fe bebc 	b.w	80054a0 <parsePreset+0x524>
	for (int i = 0; i < paramCount; i++)
 8006728:	f04f 0884 	mov.w	r8, #132	; 0x84
 800672c:	4e2d      	ldr	r6, [pc, #180]	; (80067e4 <parsePreset+0x1868>)
 800672e:	f7fe bea5 	b.w	800547c <parsePreset+0x500>
 8006732:	bf00      	nop
 8006734:	200046a4 	.word	0x200046a4
 8006738:	08001a41 	.word	0x08001a41
 800673c:	200151c8 	.word	0x200151c8
 8006740:	08001af5 	.word	0x08001af5
 8006744:	08001be5 	.word	0x08001be5
 8006748:	08001b6d 	.word	0x08001b6d
 800674c:	08001a5d 	.word	0x08001a5d
 8006750:	08001b09 	.word	0x08001b09
 8006754:	08001bf9 	.word	0x08001bf9
 8006758:	08001b81 	.word	0x08001b81
 800675c:	2000448c 	.word	0x2000448c
 8006760:	08001421 	.word	0x08001421
 8006764:	080015c1 	.word	0x080015c1
 8006768:	08001761 	.word	0x08001761
 800676c:	080013dd 	.word	0x080013dd
 8006770:	080015ad 	.word	0x080015ad
 8006774:	08001731 	.word	0x08001731
 8006778:	080013b1 	.word	0x080013b1
 800677c:	08001599 	.word	0x08001599
 8006780:	080016fd 	.word	0x080016fd
 8006784:	08001385 	.word	0x08001385
 8006788:	08001585 	.word	0x08001585
 800678c:	080016c9 	.word	0x080016c9
 8006790:	08001359 	.word	0x08001359
 8006794:	08001571 	.word	0x08001571
 8006798:	08001695 	.word	0x08001695
 800679c:	08001315 	.word	0x08001315
 80067a0:	0800155d 	.word	0x0800155d
 80067a4:	08001665 	.word	0x08001665
 80067a8:	080012d1 	.word	0x080012d1
 80067ac:	08001549 	.word	0x08001549
 80067b0:	08001635 	.word	0x08001635
 80067b4:	0800128d 	.word	0x0800128d
 80067b8:	08001535 	.word	0x08001535
 80067bc:	08001605 	.word	0x08001605
 80067c0:	20004a8c 	.word	0x20004a8c
 80067c4:	08001049 	.word	0x08001049
 80067c8:	08000fcd 	.word	0x08000fcd
 80067cc:	08000f9d 	.word	0x08000f9d
 80067d0:	08000f21 	.word	0x08000f21
 80067d4:	08000ebd 	.word	0x08000ebd
 80067d8:	08000e41 	.word	0x08000e41
 80067dc:	2000008c 	.word	0x2000008c
 80067e0:	20016c78 	.word	0x20016c78
 80067e4:	20015b84 	.word	0x20015b84
			params[i].objectNumber = 3;
 80067e8:	f04f 0303 	mov.w	r3, #3
 80067ec:	f889 3018 	strb.w	r3, [r9, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 80067f0:	ed99 0a02 	vldr	s0, [r9, #8]
 80067f4:	2100      	movs	r1, #0
 80067f6:	f899 0018 	ldrb.w	r0, [r9, #24]
 80067fa:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80067fe:	4798      	blx	r3
 8006800:	ed99 0a03 	vldr	s0, [r9, #12]
 8006804:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006808:	2101      	movs	r1, #1
 800680a:	f899 0018 	ldrb.w	r0, [r9, #24]
 800680e:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
 8006810:	f7ff ba3a 	b.w	8005c88 <parsePreset+0xd0c>
			params[i].objectNumber = 2;
 8006814:	2302      	movs	r3, #2
 8006816:	f889 3018 	strb.w	r3, [r9, #24]
 800681a:	e7e9      	b.n	80067f0 <parsePreset+0x1874>
			params[i].objectNumber = 1;
 800681c:	f889 a018 	strb.w	sl, [r9, #24]
 8006820:	e7e6      	b.n	80067f0 <parsePreset+0x1874>
 8006822:	4a01      	ldr	r2, [pc, #4]	; (8006828 <parsePreset+0x18ac>)
 8006824:	f7ff b84f 	b.w	80058c6 <parsePreset+0x94a>
 8006828:	200151c8 	.word	0x200151c8

0800682c <main>:
{
 800682c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8006830:	2400      	movs	r4, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8006832:	2501      	movs	r5, #1
{
 8006834:	ed2d 8b02 	vpush	{d8}
 8006838:	b08d      	sub	sp, #52	; 0x34
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800683a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800683e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_MPU_Disable();
 8006842:	f000 fff7 	bl	8007834 <HAL_MPU_Disable>
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8006846:	f248 721f 	movw	r2, #34591	; 0x871f
 800684a:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800684e:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8006850:	f8ad 501c 	strh.w	r5, [sp, #28]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8006854:	930a      	str	r3, [sp, #40]	; 0x28
 8006856:	e9cd 4208 	strd	r4, r2, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800685a:	f001 f809 	bl	8007870 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x30000000;
 800685e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8006862:	4bb9      	ldr	r3, [pc, #740]	; (8006b48 <main+0x31c>)
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006864:	a807      	add	r0, sp, #28
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8006866:	f88d 501d 	strb.w	r5, [sp, #29]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800686a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800686e:	f000 ffff 	bl	8007870 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8006872:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8006876:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8006878:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0xc0000000;
 800687a:	9308      	str	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800687c:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800687e:	f88d 201d 	strb.w	r2, [sp, #29]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8006882:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8006886:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800688a:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800688e:	f000 ffef 	bl	8007870 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x60000000;
 8006892:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8006896:	2318      	movs	r3, #24
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8006898:	2103      	movs	r1, #3
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800689a:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0x60000000;
 800689c:	9208      	str	r2, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800689e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 80068a2:	f88d 101d 	strb.w	r1, [sp, #29]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80068a6:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80068aa:	f000 ffe1 	bl	8007870 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80068ae:	2004      	movs	r0, #4
 80068b0:	f000 ffce 	bl	8007850 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80068b4:	4ba5      	ldr	r3, [pc, #660]	; (8006b4c <main+0x320>)
 80068b6:	695a      	ldr	r2, [r3, #20]
 80068b8:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 80068bc:	d111      	bne.n	80068e2 <main+0xb6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80068be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80068c2:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80068c6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80068ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80068ce:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80068d2:	695a      	ldr	r2, [r3, #20]
 80068d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80068d8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80068da:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80068de:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80068e2:	489a      	ldr	r0, [pc, #616]	; (8006b4c <main+0x320>)
 80068e4:	6943      	ldr	r3, [r0, #20]
 80068e6:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80068ea:	d124      	bne.n	8006936 <main+0x10a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80068ec:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80068f0:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80068f4:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80068f8:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80068fc:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8006900:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8006904:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006906:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800690a:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800690c:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8006910:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8006912:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 8006916:	1c5a      	adds	r2, r3, #1
 8006918:	d1f8      	bne.n	800690c <main+0xe0>
    } while(sets-- != 0U);
 800691a:	3c20      	subs	r4, #32
 800691c:	f114 0f20 	cmn.w	r4, #32
 8006920:	d1f1      	bne.n	8006906 <main+0xda>
 8006922:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8006926:	6943      	ldr	r3, [r0, #20]
 8006928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800692c:	6143      	str	r3, [r0, #20]
 800692e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006932:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8006936:	f000 fea5 	bl	8007684 <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 800693a:	b662      	cpsie	i
  SystemClock_Config();
 800693c:	f7fd fd68 	bl	8004410 <SystemClock_Config>
  PeriphCommonClock_Config();
 8006940:	f7fd fdfe 	bl	8004540 <PeriphCommonClock_Config>
  HAL_Delay(500);
 8006944:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006948:	f000 fede 	bl	8007708 <HAL_Delay>
  MX_GPIO_Init();
 800694c:	f7fd f9d4 	bl	8003cf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8006950:	f7fd f8cc 	bl	8003aec <MX_DMA_Init>
  MX_FMC_Init();
 8006954:	f7fd f910 	bl	8003b78 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8006958:	f000 fb00 	bl	8006f5c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800695c:	f009 f878 	bl	800fa50 <MX_FATFS_Init>
  MX_SAI1_Init();
 8006960:	f000 fa02 	bl	8006d68 <MX_SAI1_Init>
  MX_RNG_Init();
 8006964:	f000 f9c0 	bl	8006ce8 <MX_RNG_Init>
  MX_SPI2_Init();
 8006968:	f000 fb9a 	bl	80070a0 <MX_SPI2_Init>
  MX_I2C2_Init();
 800696c:	f7fd fad2 	bl	8003f14 <MX_I2C2_Init>
  MX_SPI1_Init();
 8006970:	f000 fb6a 	bl	8007048 <MX_SPI1_Init>
  MX_SPI5_Init();
 8006974:	f000 fbc0 	bl	80070f8 <MX_SPI5_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8006978:	2200      	movs	r2, #0
 800697a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800697e:	4874      	ldr	r0, [pc, #464]	; (8006b50 <main+0x324>)
 8006980:	f002 fc9a 	bl	80092b8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8006984:	2200      	movs	r2, #0
 8006986:	2102      	movs	r1, #2
 8006988:	4872      	ldr	r0, [pc, #456]	; (8006b54 <main+0x328>)
 800698a:	f002 fc95 	bl	80092b8 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 800698e:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 8006992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 8006996:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800699a:	496c      	ldr	r1, [pc, #432]	; (8006b4c <main+0x320>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
 800699c:	4a6e      	ldr	r2, [pc, #440]	; (8006b58 <main+0x32c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800699e:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 80069a2:	f8d2 0fb4 	ldr.w	r0, [r2, #4020]	; 0xfb4
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80069a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80069aa:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 80069ae:	07c3      	lsls	r3, r0, #31
 80069b0:	d502      	bpl.n	80069b8 <main+0x18c>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 80069b2:	4b6a      	ldr	r3, [pc, #424]	; (8006b5c <main+0x330>)
 80069b4:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
	  buffer[i] = 0;
 80069b8:	4b69      	ldr	r3, [pc, #420]	; (8006b60 <main+0x334>)
  DWT->CYCCNT = 0;
 80069ba:	2100      	movs	r1, #0
 80069bc:	4a66      	ldr	r2, [pc, #408]	; (8006b58 <main+0x32c>)
  DWT->CTRL = 0x40000001;
 80069be:	4869      	ldr	r0, [pc, #420]	; (8006b64 <main+0x338>)
  DWT->CYCCNT = 0;
 80069c0:	6051      	str	r1, [r2, #4]
  DWT->CTRL = 0x40000001;
 80069c2:	6010      	str	r0, [r2, #0]
	  buffer[i] = 0;
 80069c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069c8:	4618      	mov	r0, r3
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 80069ca:	f8df a200 	ldr.w	sl, [pc, #512]	; 8006bcc <main+0x3a0>
	  buffer[i] = 0;
 80069ce:	f013 fc3f 	bl	801a250 <memset>
  buffer[15] = NUM_PARAMS;
 80069d2:	229b      	movs	r2, #155	; 0x9b
	  buffer[i] = 0;
 80069d4:	4603      	mov	r3, r0
  buffer[NUM_PARAMS*2+19] = 1;
 80069d6:	2101      	movs	r1, #1
  buffer[NUM_PARAMS*2+16] = 0xef;
 80069d8:	f64e 70ef 	movw	r0, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80069dc:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15] = NUM_PARAMS;
 80069e0:	73da      	strb	r2, [r3, #15]
  buffer[NUM_PARAMS*2+25] = 0xfe;
 80069e2:	f64f 62fe 	movw	r2, #65278	; 0xfefe
  buffer[NUM_PARAMS*2+16] = 0xef;
 80069e6:	f8a3 0146 	strh.w	r0, [r3, #326]	; 0x146
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80069ea:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+19] = 1;
 80069ee:	f883 1149 	strb.w	r1, [r3, #329]	; 0x149
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80069f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+25] = 0xfe;
 80069f6:	f8a3 214f 	strh.w	r2, [r3, #335]	; 0x14f
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80069fa:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8006b68 <main+0x33c>
 80069fe:	485b      	ldr	r0, [pc, #364]	; (8006b6c <main+0x340>)
 8006a00:	f00e fbbe 	bl	8015180 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 8006a04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a08:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8006b70 <main+0x344>
 8006a0c:	eddf 0a59 	vldr	s1, [pc, #356]	; 8006b74 <main+0x348>
 8006a10:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8006b78 <main+0x34c>
 8006a14:	4859      	ldr	r0, [pc, #356]	; (8006b7c <main+0x350>)
 8006a16:	f00e fbb3 	bl	8015180 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 8006a1a:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 8006a1e:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8006a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a26:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8006b78 <main+0x34c>
 8006a2a:	4855      	ldr	r0, [pc, #340]	; (8006b80 <main+0x354>)
 8006a2c:	f00e fba8 	bl	8015180 <LEAF_generate_table_skew_non_sym>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 8006a30:	4c54      	ldr	r4, [pc, #336]	; (8006b84 <main+0x358>)
  getPresetNamesFromSDCard();
 8006a32:	f7fd fdd7 	bl	80045e4 <getPresetNamesFromSDCard>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 8006a36:	f89a 0000 	ldrb.w	r0, [sl]
 8006a3a:	f7fd fb43 	bl	80040c4 <checkForSDCardPreset>
 8006a3e:	b2c3      	uxtb	r3, r0
 8006a40:	7023      	strb	r3, [r4, #0]
	  if (foundOne)
 8006a42:	7823      	ldrb	r3, [r4, #0]
 8006a44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8132 	beq.w	8006cb2 <main+0x486>
  SDRAM_init();
 8006a4e:	f7fe f837 	bl	8004ac0 <SDRAM_init>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 8006a52:	494d      	ldr	r1, [pc, #308]	; (8006b88 <main+0x35c>)
 8006a54:	4a4d      	ldr	r2, [pc, #308]	; (8006b8c <main+0x360>)
 8006a56:	484e      	ldr	r0, [pc, #312]	; (8006b90 <main+0x364>)
 8006a58:	f7f9 fc46 	bl	80002e8 <audioInit>
	AudioCodec_init(&hi2c2);
 8006a5c:	484c      	ldr	r0, [pc, #304]	; (8006b90 <main+0x364>)
 8006a5e:	f7fc ffbb 	bl	80039d8 <AudioCodec_init>
  	if (foundOne == 0)
 8006a62:	7823      	ldrb	r3, [r4, #0]
 8006a64:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f040 811b 	bne.w	8006ca4 <main+0x478>
	  parsePreset((NUM_PARAMS*2)+27+(8*14), 0); //default preset binary
 8006a6e:	f240 10c1 	movw	r0, #449	; 0x1c1
 8006a72:	4d48      	ldr	r5, [pc, #288]	; (8006b94 <main+0x368>)
 8006a74:	f7fe fa82 	bl	8004f7c <parsePreset>
    HAL_SPI_Receive_DMA(&hspi2, SPI_RX, BAR_BUFFER_SIZE_TIMES_TWO);
 8006a78:	2210      	movs	r2, #16
 8006a7a:	4947      	ldr	r1, [pc, #284]	; (8006b98 <main+0x36c>)
 8006a7c:	4847      	ldr	r0, [pc, #284]	; (8006b9c <main+0x370>)
 8006a7e:	f007 f969 	bl	800dd54 <HAL_SPI_Receive_DMA>
    HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 8006a82:	2234      	movs	r2, #52	; 0x34
 8006a84:	4946      	ldr	r1, [pc, #280]	; (8006ba0 <main+0x374>)
 8006a86:	4847      	ldr	r0, [pc, #284]	; (8006ba4 <main+0x378>)
 8006a88:	f007 f964 	bl	800dd54 <HAL_SPI_Receive_DMA>
    if (boardNumber != 0)
 8006a8c:	4b46      	ldr	r3, [pc, #280]	; (8006ba8 <main+0x37c>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 8100 	beq.w	8006c96 <main+0x46a>
    	HAL_SPI_Receive_DMA(&hspi1, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
 8006a96:	4945      	ldr	r1, [pc, #276]	; (8006bac <main+0x380>)
 8006a98:	2240      	movs	r2, #64	; 0x40
 8006a9a:	4845      	ldr	r0, [pc, #276]	; (8006bb0 <main+0x384>)
 8006a9c:	f007 f95a 	bl	800dd54 <HAL_SPI_Receive_DMA>
    	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aa0:	2300      	movs	r3, #0
  	  	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006aa2:	2240      	movs	r2, #64	; 0x40
  	  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aa4:	a907      	add	r1, sp, #28
 8006aa6:	482b      	ldr	r0, [pc, #172]	; (8006b54 <main+0x328>)
    	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006aa8:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8006aac:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  	  	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	9309      	str	r3, [sp, #36]	; 0x24
  	  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ab4:	f002 fab0 	bl	8009018 <HAL_GPIO_Init>
 8006ab8:	4f3e      	ldr	r7, [pc, #248]	; (8006bb4 <main+0x388>)
 8006aba:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8006bd0 <main+0x3a4>
	  if (rand > TWO_TO_31)
 8006abe:	eddf 8a3e 	vldr	s17, [pc, #248]	; 8006bb8 <main+0x38c>
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8006ac2:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 8006bbc <main+0x390>
 8006ac6:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8006bd4 <main+0x3a8>
 8006aca:	4c3d      	ldr	r4, [pc, #244]	; (8006bc0 <main+0x394>)
 8006acc:	4e3d      	ldr	r6, [pc, #244]	; (8006bc4 <main+0x398>)
 8006ace:	e02b      	b.n	8006b28 <main+0x2fc>
	  if (presetWaitingToParse > 0)
 8006ad0:	6829      	ldr	r1, [r5, #0]
 8006ad2:	bb99      	cbnz	r1, 8006b3c <main+0x310>
	  else if (presetWaitingToWrite > 0)
 8006ad4:	f8d9 b000 	ldr.w	fp, [r9]
 8006ad8:	f1bb 0f00 	cmp.w	fp, #0
 8006adc:	d17c      	bne.n	8006bd8 <main+0x3ac>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8006ade:	a907      	add	r1, sp, #28
 8006ae0:	4839      	ldr	r0, [pc, #228]	; (8006bc8 <main+0x39c>)
 8006ae2:	f005 fbbb 	bl	800c25c <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
 8006ae6:	eddd 7a07 	vldr	s15, [sp, #28]
 8006aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aee:	eef4 7ae8 	vcmpe.f32	s15, s17
 8006af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af6:	dd0c      	ble.n	8006b12 <main+0x2e6>
		  myTestInt++;
 8006af8:	f8d8 3000 	ldr.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8006afc:	2180      	movs	r1, #128	; 0x80
 8006afe:	4814      	ldr	r0, [pc, #80]	; (8006b50 <main+0x324>)
		  myTestInt++;
 8006b00:	3301      	adds	r3, #1
 8006b02:	f8c8 3000 	str.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 8006b06:	f002 fbdb 	bl	80092c0 <HAL_GPIO_TogglePin>
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
 8006b0a:	eddd 7a07 	vldr	s15, [sp, #28]
 8006b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8006b12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8006b16:	7823      	ldrb	r3, [r4, #0]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006b1e:	eea7 7a88 	vfma.f32	s14, s15, s16
 8006b22:	7022      	strb	r2, [r4, #0]
 8006b24:	ed83 7a00 	vstr	s14, [r3]
	  if (presetWaitingToLoad > 0)
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0d0      	beq.n	8006ad0 <main+0x2a4>
		  checkForSDCardPreset(presetNumberToLoad);
 8006b2e:	f89a 0000 	ldrb.w	r0, [sl]
 8006b32:	f7fd fac7 	bl	80040c4 <checkForSDCardPreset>
	  if (presetWaitingToParse > 0)
 8006b36:	6829      	ldr	r1, [r5, #0]
 8006b38:	2900      	cmp	r1, #0
 8006b3a:	d0cb      	beq.n	8006ad4 <main+0x2a8>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	f89a 1000 	ldrb.w	r1, [sl]
 8006b42:	f7fe fa1b 	bl	8004f7c <parsePreset>
 8006b46:	e7ca      	b.n	8006ade <main+0x2b2>
 8006b48:	03010011 	.word	0x03010011
 8006b4c:	e000ed00 	.word	0xe000ed00
 8006b50:	58020800 	.word	0x58020800
 8006b54:	58020000 	.word	0x58020000
 8006b58:	e0001000 	.word	0xe0001000
 8006b5c:	c5acce55 	.word	0xc5acce55
 8006b60:	300001e0 	.word	0x300001e0
 8006b64:	40000001 	.word	0x40000001
 8006b68:	3c23d70a 	.word	0x3c23d70a
 8006b6c:	20017094 	.word	0x20017094
 8006b70:	457a0000 	.word	0x457a0000
 8006b74:	469c4000 	.word	0x469c4000
 8006b78:	00000000 	.word	0x00000000
 8006b7c:	2001309c 	.word	0x2001309c
 8006b80:	240590e0 	.word	0x240590e0
 8006b84:	200151c4 	.word	0x200151c4
 8006b88:	200191a0 	.word	0x200191a0
 8006b8c:	20019238 	.word	0x20019238
 8006b90:	20012fb4 	.word	0x20012fb4
 8006b94:	20016c8c 	.word	0x20016c8c
 8006b98:	30000180 	.word	0x30000180
 8006b9c:	200195b8 	.word	0x200195b8
 8006ba0:	300001a0 	.word	0x300001a0
 8006ba4:	20019640 	.word	0x20019640
 8006ba8:	20013008 	.word	0x20013008
 8006bac:	30000100 	.word	0x30000100
 8006bb0:	20019530 	.word	0x20019530
 8006bb4:	20016c88 	.word	0x20016c88
 8006bb8:	4f000000 	.word	0x4f000000
 8006bbc:	3000000d 	.word	0x3000000d
 8006bc0:	2001300d 	.word	0x2001300d
 8006bc4:	20016c94 	.word	0x20016c94
 8006bc8:	20019098 	.word	0x20019098
 8006bcc:	20000090 	.word	0x20000090
 8006bd0:	20016c90 	.word	0x20016c90
 8006bd4:	20015b7c 	.word	0x20015b7c
  __ASM volatile ("cpsid i" : : : "memory");
 8006bd8:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
 8006bda:	2280      	movs	r2, #128	; 0x80
 8006bdc:	4837      	ldr	r0, [pc, #220]	; (8006cbc <main+0x490>)
 8006bde:	9101      	str	r1, [sp, #4]
 8006be0:	f013 fb36 	bl	801a250 <memset>
  __IO uint8_t status = SD_PRESENT;
 8006be4:	2301      	movs	r3, #1
 8006be6:	f88d 300b 	strb.w	r3, [sp, #11]
  if (BSP_PlatformIsDetected() != 0x0)
 8006bea:	f008 ff99 	bl	800fb20 <BSP_PlatformIsDetected>
 8006bee:	b110      	cbz	r0, 8006bf6 <main+0x3ca>
    status = SD_NOT_PRESENT;
 8006bf0:	9901      	ldr	r1, [sp, #4]
 8006bf2:	f88d 100b 	strb.w	r1, [sp, #11]
  return status;
 8006bf6:	f89d 300b 	ldrb.w	r3, [sp, #11]
	if(BSP_SD_IsDetected())
 8006bfa:	b323      	cbz	r3, 8006c46 <main+0x41a>
				diskBusy = 1;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	4a30      	ldr	r2, [pc, #192]	; (8006cc0 <main+0x494>)
 8006c00:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
 8006c02:	4b30      	ldr	r3, [pc, #192]	; (8006cc4 <main+0x498>)
 8006c04:	7818      	ldrb	r0, [r3, #0]
 8006c06:	2863      	cmp	r0, #99	; 0x63
 8006c08:	d901      	bls.n	8006c0e <main+0x3e2>
			        presetNumberToSave = 99;
 8006c0a:	2063      	movs	r0, #99	; 0x63
 8006c0c:	7018      	strb	r0, [r3, #0]
				itoa(presetNumberToSave, charBuf, 10);
 8006c0e:	220a      	movs	r2, #10
 8006c10:	a904      	add	r1, sp, #16
 8006c12:	f013 fb0d 	bl	801a230 <itoa>
				int len = ((strlen(charBuf)));
 8006c16:	a804      	add	r0, sp, #16
 8006c18:	f7f9 fb5e 	bl	80002d8 <strlen>
				if (len == 1)
 8006c1c:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 8006c1e:	4602      	mov	r2, r0
				if (len == 1)
 8006c20:	d018      	beq.n	8006c54 <main+0x428>
					strcat(charBuf, ".ebp");
 8006c22:	4929      	ldr	r1, [pc, #164]	; (8006cc8 <main+0x49c>)
 8006c24:	ab04      	add	r3, sp, #16
 8006c26:	6808      	ldr	r0, [r1, #0]
 8006c28:	7909      	ldrb	r1, [r1, #4]
 8006c2a:	5098      	str	r0, [r3, r2]
 8006c2c:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
 8006c2e:	a807      	add	r0, sp, #28
 8006c30:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 8006c32:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
 8006c34:	a904      	add	r1, sp, #16
 8006c36:	f013 fafd 	bl	801a234 <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8006c3a:	220a      	movs	r2, #10
 8006c3c:	a907      	add	r1, sp, #28
 8006c3e:	4823      	ldr	r0, [pc, #140]	; (8006ccc <main+0x4a0>)
 8006c40:	f00b faee 	bl	8012220 <f_open>
 8006c44:	b1e8      	cbz	r0, 8006c82 <main+0x456>
	presetWaitingToWrite = 0;
 8006c46:	2300      	movs	r3, #0
	diskBusy = 0;
 8006c48:	4a1d      	ldr	r2, [pc, #116]	; (8006cc0 <main+0x494>)
	presetWaitingToWrite = 0;
 8006c4a:	f8c9 3000 	str.w	r3, [r9]
	diskBusy = 0;
 8006c4e:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006c50:	b662      	cpsie	i
}
 8006c52:	e744      	b.n	8006ade <main+0x2b2>
					finalString[2] = charBuf[1];
 8006c54:	f89d 3011 	ldrb.w	r3, [sp, #17]
					strcat(finalString, ".ebp");
 8006c58:	a807      	add	r0, sp, #28
					finalString[2] = charBuf[1];
 8006c5a:	f88d 301e 	strb.w	r3, [sp, #30]
					finalString[1] = charBuf[0];
 8006c5e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8006c62:	f88d 301d 	strb.w	r3, [sp, #29]
					finalString[0] = '0';
 8006c66:	2330      	movs	r3, #48	; 0x30
 8006c68:	f88d 301c 	strb.w	r3, [sp, #28]
					strcat(finalString, ".ebp");
 8006c6c:	f7f9 fb34 	bl	80002d8 <strlen>
 8006c70:	4a15      	ldr	r2, [pc, #84]	; (8006cc8 <main+0x49c>)
 8006c72:	4603      	mov	r3, r0
 8006c74:	a907      	add	r1, sp, #28
 8006c76:	6810      	ldr	r0, [r2, #0]
 8006c78:	7912      	ldrb	r2, [r2, #4]
 8006c7a:	50c8      	str	r0, [r1, r3]
 8006c7c:	440b      	add	r3, r1
 8006c7e:	711a      	strb	r2, [r3, #4]
 8006c80:	e7db      	b.n	8006c3a <main+0x40e>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 8006c82:	465a      	mov	r2, fp
 8006c84:	ab03      	add	r3, sp, #12
 8006c86:	4912      	ldr	r1, [pc, #72]	; (8006cd0 <main+0x4a4>)
 8006c88:	4810      	ldr	r0, [pc, #64]	; (8006ccc <main+0x4a0>)
 8006c8a:	f00b fd81 	bl	8012790 <f_write>
					f_close(&SDFile);
 8006c8e:	480f      	ldr	r0, [pc, #60]	; (8006ccc <main+0x4a0>)
 8006c90:	f00b fed8 	bl	8012a44 <f_close>
 8006c94:	e7d7      	b.n	8006c46 <main+0x41a>
    	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
 8006c96:	4a0f      	ldr	r2, [pc, #60]	; (8006cd4 <main+0x4a8>)
 8006c98:	2340      	movs	r3, #64	; 0x40
 8006c9a:	480f      	ldr	r0, [pc, #60]	; (8006cd8 <main+0x4ac>)
 8006c9c:	18d1      	adds	r1, r2, r3
 8006c9e:	f007 f939 	bl	800df14 <HAL_SPI_TransmitReceive_DMA>
 8006ca2:	e709      	b.n	8006ab8 <main+0x28c>
	  parsePreset(presetWaitingToParse, presetNumberToLoad);
 8006ca4:	4d0d      	ldr	r5, [pc, #52]	; (8006cdc <main+0x4b0>)
 8006ca6:	f89a 1000 	ldrb.w	r1, [sl]
 8006caa:	6828      	ldr	r0, [r5, #0]
 8006cac:	f7fe f966 	bl	8004f7c <parsePreset>
 8006cb0:	e6e2      	b.n	8006a78 <main+0x24c>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8006cb2:	2110      	movs	r1, #16
 8006cb4:	480a      	ldr	r0, [pc, #40]	; (8006ce0 <main+0x4b4>)
 8006cb6:	f002 faff 	bl	80092b8 <HAL_GPIO_WritePin>
 8006cba:	e6c8      	b.n	8006a4e <main+0x222>
 8006cbc:	30000000 	.word	0x30000000
 8006cc0:	20013048 	.word	0x20013048
 8006cc4:	20016c86 	.word	0x20016c86
 8006cc8:	0801c40c 	.word	0x0801c40c
 8006ccc:	20019900 	.word	0x20019900
 8006cd0:	300001e0 	.word	0x300001e0
 8006cd4:	30000100 	.word	0x30000100
 8006cd8:	20019530 	.word	0x20019530
 8006cdc:	20016c8c 	.word	0x20016c8c
 8006ce0:	58020400 	.word	0x58020400

08006ce4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop

08006ce8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8006ce8:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8006cea:	4806      	ldr	r0, [pc, #24]	; (8006d04 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	4a06      	ldr	r2, [pc, #24]	; (8006d08 <MX_RNG_Init+0x20>)
 8006cf0:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8006cf4:	f005 fa70 	bl	800c1d8 <HAL_RNG_Init>
 8006cf8:	b900      	cbnz	r0, 8006cfc <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8006cfa:	bd08      	pop	{r3, pc}
 8006cfc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006d00:	f7ff bff0 	b.w	8006ce4 <Error_Handler>
 8006d04:	20019098 	.word	0x20019098
 8006d08:	48021800 	.word	0x48021800

08006d0c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	b0b2      	sub	sp, #200	; 0xc8
 8006d10:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006d12:	22c0      	movs	r2, #192	; 0xc0
 8006d14:	2100      	movs	r1, #0
 8006d16:	a802      	add	r0, sp, #8
 8006d18:	f013 fa9a 	bl	801a250 <memset>
  if(rngHandle->Instance==RNG)
 8006d1c:	4b10      	ldr	r3, [pc, #64]	; (8006d60 <HAL_RNG_MspInit+0x54>)
 8006d1e:	6822      	ldr	r2, [r4, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d001      	beq.n	8006d28 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8006d24:	b032      	add	sp, #200	; 0xc8
 8006d26:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8006d28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d2c:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d2e:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8006d30:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006d34:	f004 f86a 	bl	800ae0c <HAL_RCCEx_PeriphCLKConfig>
 8006d38:	b970      	cbnz	r0, 8006d58 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 8006d3a:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <HAL_RNG_MspInit+0x58>)
 8006d3c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8006d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d44:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006d48:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	9b01      	ldr	r3, [sp, #4]
}
 8006d54:	b032      	add	sp, #200	; 0xc8
 8006d56:	bd10      	pop	{r4, pc}
      Error_Handler();
 8006d58:	f7ff ffc4 	bl	8006ce4 <Error_Handler>
 8006d5c:	e7ed      	b.n	8006d3a <HAL_RNG_MspInit+0x2e>
 8006d5e:	bf00      	nop
 8006d60:	48021800 	.word	0x48021800
 8006d64:	58024400 	.word	0x58024400

08006d68 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8006d68:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8006d6a:	4818      	ldr	r0, [pc, #96]	; (8006dcc <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8006d6c:	2100      	movs	r1, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 8006d6e:	4c18      	ldr	r4, [pc, #96]	; (8006dd0 <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8006d70:	2201      	movs	r2, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006d72:	2302      	movs	r3, #2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8006d74:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8006d76:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006d78:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8006d7a:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8006d7c:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Instance = SAI1_Block_A;
 8006d7e:	e9c0 4100 	strd	r4, r1, [r0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8006d82:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8006d86:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8006d8a:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8006d8c:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006d90:	f005 fc74 	bl	800c67c <HAL_SAI_InitProtocol>
 8006d94:	b998      	cbnz	r0, 8006dbe <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 8006d96:	480f      	ldr	r0, [pc, #60]	; (8006dd4 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8006d98:	2201      	movs	r2, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 8006d9a:	4c0f      	ldr	r4, [pc, #60]	; (8006dd8 <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006d9c:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006d9e:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8006da0:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Instance = SAI1_Block_B;
 8006da2:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8006da4:	2403      	movs	r4, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8006da6:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006da8:	461a      	mov	r2, r3
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8006daa:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8006dac:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8006dae:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8006db0:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8006db2:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8006db6:	f005 fc61 	bl	800c67c <HAL_SAI_InitProtocol>
 8006dba:	b918      	cbnz	r0, 8006dc4 <MX_SAI1_Init+0x5c>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8006dbc:	bd10      	pop	{r4, pc}
    Error_Handler();
 8006dbe:	f7ff ff91 	bl	8006ce4 <Error_Handler>
 8006dc2:	e7e8      	b.n	8006d96 <MX_SAI1_Init+0x2e>
}
 8006dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8006dc8:	f7ff bf8c 	b.w	8006ce4 <Error_Handler>
 8006dcc:	200191a0 	.word	0x200191a0
 8006dd0:	40015804 	.word	0x40015804
 8006dd4:	20019238 	.word	0x20019238
 8006dd8:	40015824 	.word	0x40015824
 8006ddc:	00000000 	.word	0x00000000

08006de0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8006de0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8006de2:	4a55      	ldr	r2, [pc, #340]	; (8006f38 <HAL_SAI_MspInit+0x158>)
{
 8006de4:	b089      	sub	sp, #36	; 0x24
    if(saiHandle->Instance==SAI1_Block_A)
 8006de6:	6803      	ldr	r3, [r0, #0]
{
 8006de8:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d004      	beq.n	8006df8 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 8006dee:	4a53      	ldr	r2, [pc, #332]	; (8006f3c <HAL_SAI_MspInit+0x15c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d03f      	beq.n	8006e74 <HAL_SAI_MspInit+0x94>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 8006df4:	b009      	add	sp, #36	; 0x24
 8006df6:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 8006df8:	4b51      	ldr	r3, [pc, #324]	; (8006f40 <HAL_SAI_MspInit+0x160>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	2a00      	cmp	r2, #0
 8006dfe:	f000 8081 	beq.w	8006f04 <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
 8006e02:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006e04:	2074      	movs	r0, #116	; 0x74
 8006e06:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
 8006e08:	4d4e      	ldr	r5, [pc, #312]	; (8006f44 <HAL_SAI_MspInit+0x164>)
    SAI1_client ++;
 8006e0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006e0c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006e0e:	ed9f 7b48 	vldr	d7, [pc, #288]	; 8006f30 <HAL_SAI_MspInit+0x150>
 8006e12:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e16:	a902      	add	r1, sp, #8
 8006e18:	484b      	ldr	r0, [pc, #300]	; (8006f48 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006e1a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006e1c:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e20:	f002 f8fa 	bl	8009018 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 8006e24:	4949      	ldr	r1, [pc, #292]	; (8006f4c <HAL_SAI_MspInit+0x16c>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8006e26:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e28:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8006e2a:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e2c:	60eb      	str	r3, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8006e2e:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 8006e30:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8006e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e38:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006e3a:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8006e3e:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e48:	60a9      	str	r1, [r5, #8]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e4a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006e4e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8006e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e56:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006e5a:	2304      	movs	r3, #4
 8006e5c:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8006e5e:	f000 fe1d 	bl	8007a9c <HAL_DMA_Init>
 8006e62:	2800      	cmp	r0, #0
 8006e64:	d15c      	bne.n	8006f20 <HAL_SAI_MspInit+0x140>
    if(saiHandle->Instance==SAI1_Block_B)
 8006e66:	4a35      	ldr	r2, [pc, #212]	; (8006f3c <HAL_SAI_MspInit+0x15c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8006e68:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
 8006e6a:	6823      	ldr	r3, [r4, #0]
 8006e6c:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8006e6e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
 8006e72:	d1bf      	bne.n	8006df4 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 8006e74:	4b32      	ldr	r3, [pc, #200]	; (8006f40 <HAL_SAI_MspInit+0x160>)
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	b3b2      	cbz	r2, 8006ee8 <HAL_SAI_MspInit+0x108>
    SAI1_client ++;
 8006e7a:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006e7c:	2008      	movs	r0, #8
 8006e7e:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
 8006e80:	4d33      	ldr	r5, [pc, #204]	; (8006f50 <HAL_SAI_MspInit+0x170>)
    SAI1_client ++;
 8006e82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006e84:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006e86:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 8006f30 <HAL_SAI_MspInit+0x150>
 8006e8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e8e:	a902      	add	r1, sp, #8
 8006e90:	482d      	ldr	r0, [pc, #180]	; (8006f48 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006e92:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006e94:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006e98:	f002 f8be 	bl	8009018 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8006e9c:	492d      	ldr	r1, [pc, #180]	; (8006f54 <HAL_SAI_MspInit+0x174>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8006e9e:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ea0:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8006ea2:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006ea4:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8006ea6:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8006eaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006eae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006eb2:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8006eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006eba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ebe:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 8006ec2:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 8006ec6:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006eca:	2304      	movs	r3, #4
 8006ecc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006ed0:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 8006ed4:	f000 fde2 	bl	8007a9c <HAL_DMA_Init>
 8006ed8:	bb28      	cbnz	r0, 8006f26 <HAL_SAI_MspInit+0x146>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 8006eda:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 8006ede:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 8006ee0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8006ee4:	b009      	add	sp, #36	; 0x24
 8006ee6:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006ee8:	491b      	ldr	r1, [pc, #108]	; (8006f58 <HAL_SAI_MspInit+0x178>)
 8006eea:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8006eee:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8006ef2:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8006ef6:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8006efa:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006efe:	9101      	str	r1, [sp, #4]
 8006f00:	9901      	ldr	r1, [sp, #4]
 8006f02:	e7ba      	b.n	8006e7a <HAL_SAI_MspInit+0x9a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006f04:	4914      	ldr	r1, [pc, #80]	; (8006f58 <HAL_SAI_MspInit+0x178>)
 8006f06:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 8006f0a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 8006f0e:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 8006f12:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 8006f16:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006f1a:	9100      	str	r1, [sp, #0]
 8006f1c:	9900      	ldr	r1, [sp, #0]
 8006f1e:	e770      	b.n	8006e02 <HAL_SAI_MspInit+0x22>
      Error_Handler();
 8006f20:	f7ff fee0 	bl	8006ce4 <Error_Handler>
 8006f24:	e79f      	b.n	8006e66 <HAL_SAI_MspInit+0x86>
      Error_Handler();
 8006f26:	f7ff fedd 	bl	8006ce4 <Error_Handler>
 8006f2a:	e7d6      	b.n	8006eda <HAL_SAI_MspInit+0xfa>
 8006f2c:	f3af 8000 	nop.w
 8006f30:	00000000 	.word	0x00000000
 8006f34:	00000003 	.word	0x00000003
 8006f38:	40015804 	.word	0x40015804
 8006f3c:	40015824 	.word	0x40015824
 8006f40:	200190ac 	.word	0x200190ac
 8006f44:	200190b0 	.word	0x200190b0
 8006f48:	58021000 	.word	0x58021000
 8006f4c:	40020028 	.word	0x40020028
 8006f50:	20019128 	.word	0x20019128
 8006f54:	40020040 	.word	0x40020040
 8006f58:	58024400 	.word	0x58024400

08006f5c <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8006f5c:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8006f5e:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8006f60:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 8006f62:	4c07      	ldr	r4, [pc, #28]	; (8006f80 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8006f64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
 8006f68:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
 8006f6a:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8006f6e:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
 8006f72:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8006f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	200192d0 	.word	0x200192d0
 8006f80:	52007000 	.word	0x52007000

08006f84 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8006f84:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8006f86:	4b2b      	ldr	r3, [pc, #172]	; (8007034 <HAL_SD_MspInit+0xb0>)
{
 8006f88:	b08b      	sub	sp, #44	; 0x2c
  if(sdHandle->Instance==SDMMC1)
 8006f8a:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f8c:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 8006f8e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f90:	9408      	str	r4, [sp, #32]
 8006f92:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8006f96:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
 8006f9a:	d001      	beq.n	8006fa0 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8006f9c:	b00b      	add	sp, #44	; 0x2c
 8006f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006fa0:	4b25      	ldr	r3, [pc, #148]	; (8007038 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8006fa2:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006fa4:	2601      	movs	r6, #1
 8006fa6:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006fa8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006fac:	4823      	ldr	r0, [pc, #140]	; (800703c <HAL_SD_MspInit+0xb8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8006fae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006fb2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8006fb6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8006fba:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8006fbe:	9201      	str	r2, [sp, #4]
 8006fc0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fc2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006fc6:	f042 0204 	orr.w	r2, r2, #4
 8006fca:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8006fce:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006fd2:	f002 0204 	and.w	r2, r2, #4
 8006fd6:	9202      	str	r2, [sp, #8]
 8006fd8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fda:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8006fde:	f042 0208 	orr.w	r2, r2, #8
 8006fe2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006fe6:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8006fee:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ff0:	f003 0308 	and.w	r3, r3, #8
 8006ff4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006ff6:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ff8:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ffa:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006ffc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007000:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007004:	f002 f808 	bl	8009018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007008:	2302      	movs	r3, #2
 800700a:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800700c:	a904      	add	r1, sp, #16
 800700e:	480c      	ldr	r0, [pc, #48]	; (8007040 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8007010:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007012:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007016:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800701a:	f001 fffd 	bl	8009018 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800701e:	4622      	mov	r2, r4
 8007020:	4621      	mov	r1, r4
 8007022:	2031      	movs	r0, #49	; 0x31
 8007024:	f000 fba4 	bl	8007770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8007028:	2031      	movs	r0, #49	; 0x31
 800702a:	f000 fbdf 	bl	80077ec <HAL_NVIC_EnableIRQ>
}
 800702e:	b00b      	add	sp, #44	; 0x2c
 8007030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007032:	bf00      	nop
 8007034:	52007000 	.word	0x52007000
 8007038:	58024400 	.word	0x58024400
 800703c:	58020800 	.word	0x58020800
 8007040:	58020c00 	.word	0x58020c00
 8007044:	00000000 	.word	0x00000000

08007048 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8007048:	4813      	ldr	r0, [pc, #76]	; (8007098 <MX_SPI1_Init+0x50>)
 800704a:	4a14      	ldr	r2, [pc, #80]	; (800709c <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800704c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007090 <MX_SPI1_Init+0x48>
{
 8007050:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8007052:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 8007054:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007056:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8007058:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800705a:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800705c:	ed80 7b08 	vstr	d7, [r0, #32]
 8007060:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007064:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007068:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800706c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007070:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007074:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007078:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800707c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007080:	f006 fd9c 	bl	800dbbc <HAL_SPI_Init>
 8007084:	b900      	cbnz	r0, 8007088 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007086:	bd08      	pop	{r3, pc}
 8007088:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800708c:	f7ff be2a 	b.w	8006ce4 <Error_Handler>
	...
 8007098:	20019530 	.word	0x20019530
 800709c:	40013000 	.word	0x40013000

080070a0 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80070a0:	4813      	ldr	r0, [pc, #76]	; (80070f0 <MX_SPI2_Init+0x50>)
 80070a2:	4a14      	ldr	r2, [pc, #80]	; (80070f4 <MX_SPI2_Init+0x54>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80070a4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80070e8 <MX_SPI2_Init+0x48>
{
 80070a8:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 80070aa:	2300      	movs	r3, #0
  hspi2.Instance = SPI2;
 80070ac:	6002      	str	r2, [r0, #0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80070ae:	2207      	movs	r2, #7
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 80070b0:	6183      	str	r3, [r0, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80070b2:	60c2      	str	r2, [r0, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80070b4:	ed80 7b08 	vstr	d7, [r0, #32]
 80070b8:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80070bc:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80070c0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x0;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80070c4:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80070c8:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80070cc:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80070d0:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80070d4:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80070d8:	f006 fd70 	bl	800dbbc <HAL_SPI_Init>
 80070dc:	b900      	cbnz	r0, 80070e0 <MX_SPI2_Init+0x40>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80070de:	bd08      	pop	{r3, pc}
 80070e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80070e4:	f7ff bdfe 	b.w	8006ce4 <Error_Handler>
	...
 80070f0:	200195b8 	.word	0x200195b8
 80070f4:	40003800 	.word	0x40003800

080070f8 <MX_SPI5_Init>:
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80070f8:	4813      	ldr	r0, [pc, #76]	; (8007148 <MX_SPI5_Init+0x50>)
 80070fa:	4a14      	ldr	r2, [pc, #80]	; (800714c <MX_SPI5_Init+0x54>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80070fc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8007140 <MX_SPI5_Init+0x48>
{
 8007100:	b508      	push	{r3, lr}
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8007102:	2300      	movs	r3, #0
  hspi5.Instance = SPI5;
 8007104:	6002      	str	r2, [r0, #0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8007106:	2207      	movs	r2, #7
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8007108:	6183      	str	r3, [r0, #24]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800710a:	60c2      	str	r2, [r0, #12]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800710c:	ed80 7b08 	vstr	d7, [r0, #32]
 8007110:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8007114:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007118:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 0x0;
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800711c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007120:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007124:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007128:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800712c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8007130:	f006 fd44 	bl	800dbbc <HAL_SPI_Init>
 8007134:	b900      	cbnz	r0, 8007138 <MX_SPI5_Init+0x40>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8007136:	bd08      	pop	{r3, pc}
 8007138:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800713c:	f7ff bdd2 	b.w	8006ce4 <Error_Handler>
	...
 8007148:	20019640 	.word	0x20019640
 800714c:	40015000 	.word	0x40015000

08007150 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007150:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007152:	2400      	movs	r4, #0
{
 8007154:	b0bc      	sub	sp, #240	; 0xf0
 8007156:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007158:	22c0      	movs	r2, #192	; 0xc0
 800715a:	4621      	mov	r1, r4
 800715c:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800715e:	940a      	str	r4, [sp, #40]	; 0x28
 8007160:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8007164:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007168:	f013 f872 	bl	801a250 <memset>
  if(spiHandle->Instance==SPI1)
 800716c:	682b      	ldr	r3, [r5, #0]
 800716e:	4aa5      	ldr	r2, [pc, #660]	; (8007404 <HAL_SPI_MspInit+0x2b4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d008      	beq.n	8007186 <HAL_SPI_MspInit+0x36>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8007174:	4aa4      	ldr	r2, [pc, #656]	; (8007408 <HAL_SPI_MspInit+0x2b8>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d076      	beq.n	8007268 <HAL_SPI_MspInit+0x118>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 800717a:	4aa4      	ldr	r2, [pc, #656]	; (800740c <HAL_SPI_MspInit+0x2bc>)
 800717c:	4293      	cmp	r3, r2
 800717e:	f000 80d0 	beq.w	8007322 <HAL_SPI_MspInit+0x1d2>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8007182:	b03c      	add	sp, #240	; 0xf0
 8007184:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007186:	4ba2      	ldr	r3, [pc, #648]	; (8007410 <HAL_SPI_MspInit+0x2c0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007188:	a906      	add	r1, sp, #24
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800718a:	4ea2      	ldr	r6, [pc, #648]	; (8007414 <HAL_SPI_MspInit+0x2c4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800718c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007190:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007194:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8007198:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800719c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80071a0:	9200      	str	r2, [sp, #0]
 80071a2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80071a8:	f042 0201 	orr.w	r2, r2, #1
 80071ac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80071b0:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80071bc:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071be:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071c0:	4895      	ldr	r0, [pc, #596]	; (8007418 <HAL_SPI_MspInit+0x2c8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80071c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80071c6:	2203      	movs	r2, #3
 80071c8:	2305      	movs	r3, #5
 80071ca:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071ce:	f001 ff23 	bl	8009018 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80071d2:	2325      	movs	r3, #37	; 0x25
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80071d4:	4a91      	ldr	r2, [pc, #580]	; (800741c <HAL_SPI_MspInit+0x2cc>)
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80071d6:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80071d8:	6073      	str	r3, [r6, #4]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80071da:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80071de:	6032      	str	r2, [r6, #0]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80071e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80071e4:	60b4      	str	r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80071e6:	60f4      	str	r4, [r6, #12]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80071e8:	62f4      	str	r4, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80071ea:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80071ec:	e9c6 4306 	strd	r4, r3, [r6, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80071f0:	2304      	movs	r3, #4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80071f2:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80071f6:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80071f8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80071fc:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80071fe:	6232      	str	r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007200:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8007202:	f000 fc4b 	bl	8007a9c <HAL_DMA_Init>
 8007206:	2800      	cmp	r0, #0
 8007208:	f040 80f0 	bne.w	80073ec <HAL_SPI_MspInit+0x29c>
    hdma_spi1_tx.Instance = DMA1_Stream5;
 800720c:	4c84      	ldr	r4, [pc, #528]	; (8007420 <HAL_SPI_MspInit+0x2d0>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800720e:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8007210:	4984      	ldr	r1, [pc, #528]	; (8007424 <HAL_SPI_MspInit+0x2d4>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007212:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8007214:	6062      	str	r2, [r4, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007216:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream5;
 800721a:	6021      	str	r1, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800721c:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800721e:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007220:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007224:	60e3      	str	r3, [r4, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8007226:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007228:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800722a:	60a1      	str	r1, [r4, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800722c:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007230:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8007232:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8007234:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007236:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007238:	6222      	str	r2, [r4, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800723a:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800723c:	67ee      	str	r6, [r5, #124]	; 0x7c
 800723e:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8007240:	61e1      	str	r1, [r4, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007242:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8007246:	f000 fc29 	bl	8007a9c <HAL_DMA_Init>
 800724a:	2800      	cmp	r0, #0
 800724c:	f040 80cb 	bne.w	80073e6 <HAL_SPI_MspInit+0x296>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8007250:	2200      	movs	r2, #0
 8007252:	2102      	movs	r1, #2
 8007254:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8007256:	67ac      	str	r4, [r5, #120]	; 0x78
 8007258:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 800725a:	f000 fa89 	bl	8007770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800725e:	2023      	movs	r0, #35	; 0x23
 8007260:	f000 fac4 	bl	80077ec <HAL_NVIC_EnableIRQ>
}
 8007264:	b03c      	add	sp, #240	; 0xf0
 8007266:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007268:	4b69      	ldr	r3, [pc, #420]	; (8007410 <HAL_SPI_MspInit+0x2c0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800726a:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800726c:	486e      	ldr	r0, [pc, #440]	; (8007428 <HAL_SPI_MspInit+0x2d8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800726e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8007272:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007276:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800727a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800727e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007282:	9202      	str	r2, [sp, #8]
 8007284:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007286:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800728a:	f042 0202 	orr.w	r2, r2, #2
 800728e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8007292:	f44f 4230 	mov.w	r2, #45056	; 0xb000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800729a:	f003 0302 	and.w	r3, r3, #2
 800729e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80072a0:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072a2:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072a4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80072a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072b0:	f001 feb2 	bl	8009018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80072b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072b8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072ba:	485b      	ldr	r0, [pc, #364]	; (8007428 <HAL_SPI_MspInit+0x2d8>)
 80072bc:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80072be:	960a      	str	r6, [sp, #40]	; 0x28
    hdma_spi2_rx.Instance = DMA1_Stream0;
 80072c0:	4e5a      	ldr	r6, [pc, #360]	; (800742c <HAL_SPI_MspInit+0x2dc>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80072c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072c6:	2200      	movs	r2, #0
 80072c8:	2302      	movs	r3, #2
 80072ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072ce:	f001 fea3 	bl	8009018 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 80072d2:	4a57      	ldr	r2, [pc, #348]	; (8007430 <HAL_SPI_MspInit+0x2e0>)
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80072d4:	2327      	movs	r3, #39	; 0x27
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80072d6:	4630      	mov	r0, r6
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80072d8:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80072dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80072e0:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80072e4:	6132      	str	r2, [r6, #16]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80072e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80072ea:	61f3      	str	r3, [r6, #28]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80072ec:	2304      	movs	r3, #4
 80072ee:	e9c6 2308 	strd	r2, r3, [r6, #32]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80072f2:	2301      	movs	r3, #1
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072f4:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80072f8:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80072fc:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8007300:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8007302:	f000 fbcb 	bl	8007a9c <HAL_DMA_Init>
 8007306:	2800      	cmp	r0, #0
 8007308:	d173      	bne.n	80073f2 <HAL_SPI_MspInit+0x2a2>
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 800730a:	2200      	movs	r2, #0
 800730c:	2103      	movs	r1, #3
 800730e:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8007310:	67ee      	str	r6, [r5, #124]	; 0x7c
 8007312:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8007314:	f000 fa2c 	bl	8007770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007318:	2024      	movs	r0, #36	; 0x24
 800731a:	f000 fa67 	bl	80077ec <HAL_NVIC_EnableIRQ>
}
 800731e:	b03c      	add	sp, #240	; 0xf0
 8007320:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8007322:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007326:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007328:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800732a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800732e:	f003 fd6d 	bl	800ae0c <HAL_RCCEx_PeriphCLKConfig>
 8007332:	2800      	cmp	r0, #0
 8007334:	d163      	bne.n	80073fe <HAL_SPI_MspInit+0x2ae>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8007336:	4b36      	ldr	r3, [pc, #216]	; (8007410 <HAL_SPI_MspInit+0x2c0>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8007338:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800733a:	483e      	ldr	r0, [pc, #248]	; (8007434 <HAL_SPI_MspInit+0x2e4>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 800733c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007340:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007344:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8007348:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800734c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007350:	9204      	str	r2, [sp, #16]
 8007352:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007354:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8007358:	f042 0220 	orr.w	r2, r2, #32
 800735c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8007360:	f44f 7230 	mov.w	r2, #704	; 0x2c0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8007368:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800736a:	f003 0320 	and.w	r3, r3, #32
 800736e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8007370:	2302      	movs	r3, #2
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8007372:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007374:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8007376:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800737a:	2200      	movs	r2, #0
 800737c:	2302      	movs	r3, #2
 800737e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8007382:	f001 fe49 	bl	8009018 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800738a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800738c:	a906      	add	r1, sp, #24
 800738e:	4829      	ldr	r0, [pc, #164]	; (8007434 <HAL_SPI_MspInit+0x2e4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8007390:	940a      	str	r4, [sp, #40]	; 0x28
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8007392:	4c29      	ldr	r4, [pc, #164]	; (8007438 <HAL_SPI_MspInit+0x2e8>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007394:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007398:	2200      	movs	r2, #0
 800739a:	2300      	movs	r3, #0
 800739c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80073a0:	f001 fe3a 	bl	8009018 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 80073a4:	4925      	ldr	r1, [pc, #148]	; (800743c <HAL_SPI_MspInit+0x2ec>)
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 80073a6:	2255      	movs	r2, #85	; 0x55
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80073a8:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80073aa:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80073ac:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 80073ae:	e9c4 1200 	strd	r1, r2, [r4]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80073b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80073b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80073ba:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80073be:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80073c2:	6121      	str	r1, [r4, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80073c4:	e9c4 3207 	strd	r3, r2, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 80073c8:	f000 fb68 	bl	8007a9c <HAL_DMA_Init>
 80073cc:	b9a0      	cbnz	r0, 80073f8 <HAL_SPI_MspInit+0x2a8>
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 80073ce:	2200      	movs	r2, #0
 80073d0:	2104      	movs	r1, #4
 80073d2:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 80073d4:	67ec      	str	r4, [r5, #124]	; 0x7c
 80073d6:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 80073d8:	f000 f9ca 	bl	8007770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80073dc:	2055      	movs	r0, #85	; 0x55
 80073de:	f000 fa05 	bl	80077ec <HAL_NVIC_EnableIRQ>
}
 80073e2:	b03c      	add	sp, #240	; 0xf0
 80073e4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80073e6:	f7ff fc7d 	bl	8006ce4 <Error_Handler>
 80073ea:	e731      	b.n	8007250 <HAL_SPI_MspInit+0x100>
      Error_Handler();
 80073ec:	f7ff fc7a 	bl	8006ce4 <Error_Handler>
 80073f0:	e70c      	b.n	800720c <HAL_SPI_MspInit+0xbc>
      Error_Handler();
 80073f2:	f7ff fc77 	bl	8006ce4 <Error_Handler>
 80073f6:	e788      	b.n	800730a <HAL_SPI_MspInit+0x1ba>
      Error_Handler();
 80073f8:	f7ff fc74 	bl	8006ce4 <Error_Handler>
 80073fc:	e7e7      	b.n	80073ce <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 80073fe:	f7ff fc71 	bl	8006ce4 <Error_Handler>
 8007402:	e798      	b.n	8007336 <HAL_SPI_MspInit+0x1e6>
 8007404:	40013000 	.word	0x40013000
 8007408:	40003800 	.word	0x40003800
 800740c:	40015000 	.word	0x40015000
 8007410:	58024400 	.word	0x58024400
 8007414:	2001934c 	.word	0x2001934c
 8007418:	58020000 	.word	0x58020000
 800741c:	40020070 	.word	0x40020070
 8007420:	200193c4 	.word	0x200193c4
 8007424:	40020088 	.word	0x40020088
 8007428:	58020400 	.word	0x58020400
 800742c:	2001943c 	.word	0x2001943c
 8007430:	40020010 	.word	0x40020010
 8007434:	58021400 	.word	0x58021400
 8007438:	200194b4 	.word	0x200194b4
 800743c:	40020058 	.word	0x40020058

08007440 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007440:	4b07      	ldr	r3, [pc, #28]	; (8007460 <HAL_MspInit+0x20>)
{
 8007442:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007444:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8007448:	f042 0202 	orr.w	r2, r2, #2
 800744c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8007450:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007454:	f003 0302 	and.w	r3, r3, #2
 8007458:	9301      	str	r3, [sp, #4]
 800745a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800745c:	b002      	add	sp, #8
 800745e:	4770      	bx	lr
 8007460:	58024400 	.word	0x58024400

08007464 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007464:	e7fe      	b.n	8007464 <NMI_Handler>
 8007466:	bf00      	nop

08007468 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007468:	e7fe      	b.n	8007468 <HardFault_Handler>
 800746a:	bf00      	nop

0800746c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800746c:	e7fe      	b.n	800746c <MemManage_Handler>
 800746e:	bf00      	nop

08007470 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007470:	e7fe      	b.n	8007470 <BusFault_Handler>
 8007472:	bf00      	nop

08007474 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007474:	e7fe      	b.n	8007474 <UsageFault_Handler>
 8007476:	bf00      	nop

08007478 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop

0800747c <DebugMon_Handler>:
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop

08007480 <PendSV_Handler>:
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop

08007484 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007484:	f000 b92e 	b.w	80076e4 <HAL_IncTick>

08007488 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8007488:	4801      	ldr	r0, [pc, #4]	; (8007490 <DMA1_Stream0_IRQHandler+0x8>)
 800748a:	f001 b95b 	b.w	8008744 <HAL_DMA_IRQHandler>
 800748e:	bf00      	nop
 8007490:	2001943c 	.word	0x2001943c

08007494 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8007494:	4801      	ldr	r0, [pc, #4]	; (800749c <DMA1_Stream1_IRQHandler+0x8>)
 8007496:	f001 b955 	b.w	8008744 <HAL_DMA_IRQHandler>
 800749a:	bf00      	nop
 800749c:	200190b0 	.word	0x200190b0

080074a0 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 80074a0:	4801      	ldr	r0, [pc, #4]	; (80074a8 <DMA1_Stream2_IRQHandler+0x8>)
 80074a2:	f001 b94f 	b.w	8008744 <HAL_DMA_IRQHandler>
 80074a6:	bf00      	nop
 80074a8:	20019128 	.word	0x20019128

080074ac <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 80074ac:	4801      	ldr	r0, [pc, #4]	; (80074b4 <DMA1_Stream3_IRQHandler+0x8>)
 80074ae:	f001 b949 	b.w	8008744 <HAL_DMA_IRQHandler>
 80074b2:	bf00      	nop
 80074b4:	200194b4 	.word	0x200194b4

080074b8 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80074b8:	4801      	ldr	r0, [pc, #4]	; (80074c0 <DMA1_Stream4_IRQHandler+0x8>)
 80074ba:	f001 b943 	b.w	8008744 <HAL_DMA_IRQHandler>
 80074be:	bf00      	nop
 80074c0:	2001934c 	.word	0x2001934c

080074c4 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80074c4:	4801      	ldr	r0, [pc, #4]	; (80074cc <DMA1_Stream5_IRQHandler+0x8>)
 80074c6:	f001 b93d 	b.w	8008744 <HAL_DMA_IRQHandler>
 80074ca:	bf00      	nop
 80074cc:	200193c4 	.word	0x200193c4

080074d0 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80074d0:	4801      	ldr	r0, [pc, #4]	; (80074d8 <I2C2_EV_IRQHandler+0x8>)
 80074d2:	f002 b9e7 	b.w	80098a4 <HAL_I2C_EV_IRQHandler>
 80074d6:	bf00      	nop
 80074d8:	20012fb4 	.word	0x20012fb4

080074dc <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80074dc:	4801      	ldr	r0, [pc, #4]	; (80074e4 <I2C2_ER_IRQHandler+0x8>)
 80074de:	f002 bd03 	b.w	8009ee8 <HAL_I2C_ER_IRQHandler>
 80074e2:	bf00      	nop
 80074e4:	20012fb4 	.word	0x20012fb4

080074e8 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80074e8:	4801      	ldr	r0, [pc, #4]	; (80074f0 <SPI1_IRQHandler+0x8>)
 80074ea:	f006 beed 	b.w	800e2c8 <HAL_SPI_IRQHandler>
 80074ee:	bf00      	nop
 80074f0:	20019530 	.word	0x20019530

080074f4 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80074f4:	4801      	ldr	r0, [pc, #4]	; (80074fc <SPI2_IRQHandler+0x8>)
 80074f6:	f006 bee7 	b.w	800e2c8 <HAL_SPI_IRQHandler>
 80074fa:	bf00      	nop
 80074fc:	200195b8 	.word	0x200195b8

08007500 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8007500:	4801      	ldr	r0, [pc, #4]	; (8007508 <SDMMC1_IRQHandler+0x8>)
 8007502:	f006 b94d 	b.w	800d7a0 <HAL_SD_IRQHandler>
 8007506:	bf00      	nop
 8007508:	200192d0 	.word	0x200192d0

0800750c <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 800750c:	4801      	ldr	r0, [pc, #4]	; (8007514 <SPI5_IRQHandler+0x8>)
 800750e:	f006 bedb 	b.w	800e2c8 <HAL_SPI_IRQHandler>
 8007512:	bf00      	nop
 8007514:	20019640 	.word	0x20019640

08007518 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007518:	4927      	ldr	r1, [pc, #156]	; (80075b8 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800751a:	4a28      	ldr	r2, [pc, #160]	; (80075bc <SystemInit+0xa4>)
{
 800751c:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800751e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8007522:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800752a:	6813      	ldr	r3, [r2, #0]
 800752c:	f003 030f 	and.w	r3, r3, #15
 8007530:	2b06      	cmp	r3, #6
 8007532:	d805      	bhi.n	8007540 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8007534:	6813      	ldr	r3, [r2, #0]
 8007536:	f023 030f 	bic.w	r3, r3, #15
 800753a:	f043 0307 	orr.w	r3, r3, #7
 800753e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8007540:	4b1f      	ldr	r3, [pc, #124]	; (80075c0 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007542:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8007544:	4a1f      	ldr	r2, [pc, #124]	; (80075c4 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8007546:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007548:	481c      	ldr	r0, [pc, #112]	; (80075bc <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 800754a:	f041 0101 	orr.w	r1, r1, #1
 800754e:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007550:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8007552:	6819      	ldr	r1, [r3, #0]
 8007554:	400a      	ands	r2, r1
 8007556:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007558:	6803      	ldr	r3, [r0, #0]
 800755a:	071b      	lsls	r3, r3, #28
 800755c:	d505      	bpl.n	800756a <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800755e:	6803      	ldr	r3, [r0, #0]
 8007560:	f023 030f 	bic.w	r3, r3, #15
 8007564:	f043 0307 	orr.w	r3, r3, #7
 8007568:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800756a:	4b15      	ldr	r3, [pc, #84]	; (80075c0 <SystemInit+0xa8>)
 800756c:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800756e:	4916      	ldr	r1, [pc, #88]	; (80075c8 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8007570:	4c16      	ldr	r4, [pc, #88]	; (80075cc <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8007572:	4817      	ldr	r0, [pc, #92]	; (80075d0 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8007574:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8007576:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8007578:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800757a:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 800757c:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 800757e:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8007580:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8007582:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8007584:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8007586:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8007588:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800758a:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800758c:	4c11      	ldr	r4, [pc, #68]	; (80075d4 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 800758e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007592:	4911      	ldr	r1, [pc, #68]	; (80075d8 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8007594:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8007596:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	4019      	ands	r1, r3
 800759c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80075a0:	d203      	bcs.n	80075aa <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80075a2:	4b0e      	ldr	r3, [pc, #56]	; (80075dc <SystemInit+0xc4>)
 80075a4:	2201      	movs	r2, #1
 80075a6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80075aa:	4b0d      	ldr	r3, [pc, #52]	; (80075e0 <SystemInit+0xc8>)
 80075ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80075b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80075b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	e000ed00 	.word	0xe000ed00
 80075bc:	52002000 	.word	0x52002000
 80075c0:	58024400 	.word	0x58024400
 80075c4:	eaf6ed7f 	.word	0xeaf6ed7f
 80075c8:	01010280 	.word	0x01010280
 80075cc:	02020200 	.word	0x02020200
 80075d0:	01ff0000 	.word	0x01ff0000
 80075d4:	5c001000 	.word	0x5c001000
 80075d8:	ffff0000 	.word	0xffff0000
 80075dc:	51008000 	.word	0x51008000
 80075e0:	52004000 	.word	0x52004000

080075e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80075e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800761c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80075e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80075ea:	e003      	b.n	80075f4 <LoopCopyDataInit>

080075ec <CopyDataInit>:


CopyDataInit:
  ldr  r3, =_sidata
 80075ec:	4b0c      	ldr	r3, [pc, #48]	; (8007620 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80075ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80075f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80075f2:	3104      	adds	r1, #4

080075f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 80075f4:	480b      	ldr	r0, [pc, #44]	; (8007624 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80075f6:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80075f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80075fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80075fc:	d3f6      	bcc.n	80075ec <CopyDataInit>
  ldr  r2, =_sbss
 80075fe:	4a0b      	ldr	r2, [pc, #44]	; (800762c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007600:	e002      	b.n	8007608 <LoopFillZerobss>

08007602 <FillZerobss>:



/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8007602:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007604:	f842 3b04 	str.w	r3, [r2], #4

08007608 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8007608:	4b09      	ldr	r3, [pc, #36]	; (8007630 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800760a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800760c:	d3f9      	bcc.n	8007602 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800760e:	f7ff ff83 	bl	8007518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007612:	f012 fdd1 	bl	801a1b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007616:	f7ff f909 	bl	800682c <main>
  bx  lr
 800761a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800761c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007620:	08034938 	.word	0x08034938
  ldr  r0, =_sdata
 8007624:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007628:	2000018c 	.word	0x2000018c
  ldr  r2, =_sbss
 800762c:	20000190 	.word	0x20000190
  ldr  r3, = _ebss
 8007630:	20019d6c 	.word	0x20019d6c

08007634 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007634:	e7fe      	b.n	8007634 <ADC3_IRQHandler>
	...

08007638 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007638:	4b0f      	ldr	r3, [pc, #60]	; (8007678 <HAL_InitTick+0x40>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	b90b      	cbnz	r3, 8007642 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 800763e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8007640:	4770      	bx	lr
{
 8007642:	b510      	push	{r4, lr}
 8007644:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800764a:	4a0c      	ldr	r2, [pc, #48]	; (800767c <HAL_InitTick+0x44>)
 800764c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007650:	6810      	ldr	r0, [r2, #0]
 8007652:	fbb0 f0f3 	udiv	r0, r0, r3
 8007656:	f000 f8d7 	bl	8007808 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800765a:	2c0f      	cmp	r4, #15
 800765c:	d800      	bhi.n	8007660 <HAL_InitTick+0x28>
 800765e:	b108      	cbz	r0, 8007664 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8007660:	2001      	movs	r0, #1
}
 8007662:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007664:	2200      	movs	r2, #0
 8007666:	4621      	mov	r1, r4
 8007668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800766c:	f000 f880 	bl	8007770 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007670:	4b03      	ldr	r3, [pc, #12]	; (8007680 <HAL_InitTick+0x48>)
 8007672:	2000      	movs	r0, #0
 8007674:	601c      	str	r4, [r3, #0]
}
 8007676:	bd10      	pop	{r4, pc}
 8007678:	2000009c 	.word	0x2000009c
 800767c:	20000094 	.word	0x20000094
 8007680:	200000a0 	.word	0x200000a0

08007684 <HAL_Init>:
{
 8007684:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007686:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007688:	4c12      	ldr	r4, [pc, #72]	; (80076d4 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800768a:	f000 f85f 	bl	800774c <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800768e:	f003 f86d 	bl	800a76c <HAL_RCC_GetSysClockFreq>
 8007692:	4b11      	ldr	r3, [pc, #68]	; (80076d8 <HAL_Init+0x54>)
 8007694:	4911      	ldr	r1, [pc, #68]	; (80076dc <HAL_Init+0x58>)
 8007696:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007698:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800769a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800769e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80076a2:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076a4:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80076a6:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 80076aa:	490d      	ldr	r1, [pc, #52]	; (80076e0 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076ac:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80076b0:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076b2:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 80076b6:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80076b8:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80076ba:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80076bc:	f7ff ffbc 	bl	8007638 <HAL_InitTick>
 80076c0:	b110      	cbz	r0, 80076c8 <HAL_Init+0x44>
    return HAL_ERROR;
 80076c2:	2401      	movs	r4, #1
}
 80076c4:	4620      	mov	r0, r4
 80076c6:	bd10      	pop	{r4, pc}
 80076c8:	4604      	mov	r4, r0
  HAL_MspInit();
 80076ca:	f7ff feb9 	bl	8007440 <HAL_MspInit>
}
 80076ce:	4620      	mov	r0, r4
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	bf00      	nop
 80076d4:	20000098 	.word	0x20000098
 80076d8:	58024400 	.word	0x58024400
 80076dc:	0801c414 	.word	0x0801c414
 80076e0:	20000094 	.word	0x20000094

080076e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80076e4:	4a03      	ldr	r2, [pc, #12]	; (80076f4 <HAL_IncTick+0x10>)
 80076e6:	4b04      	ldr	r3, [pc, #16]	; (80076f8 <HAL_IncTick+0x14>)
 80076e8:	6811      	ldr	r1, [r2, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	440b      	add	r3, r1
 80076ee:	6013      	str	r3, [r2, #0]
}
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	200196c8 	.word	0x200196c8
 80076f8:	2000009c 	.word	0x2000009c

080076fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80076fc:	4b01      	ldr	r3, [pc, #4]	; (8007704 <HAL_GetTick+0x8>)
 80076fe:	6818      	ldr	r0, [r3, #0]
}
 8007700:	4770      	bx	lr
 8007702:	bf00      	nop
 8007704:	200196c8 	.word	0x200196c8

08007708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800770c:	f7ff fff6 	bl	80076fc <HAL_GetTick>
 8007710:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007712:	1c63      	adds	r3, r4, #1
 8007714:	d002      	beq.n	800771c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8007716:	4b04      	ldr	r3, [pc, #16]	; (8007728 <HAL_Delay+0x20>)
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800771c:	f7ff ffee 	bl	80076fc <HAL_GetTick>
 8007720:	1b43      	subs	r3, r0, r5
 8007722:	42a3      	cmp	r3, r4
 8007724:	d3fa      	bcc.n	800771c <HAL_Delay+0x14>
  {
  }
}
 8007726:	bd38      	pop	{r3, r4, r5, pc}
 8007728:	2000009c 	.word	0x2000009c

0800772c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800772c:	4b01      	ldr	r3, [pc, #4]	; (8007734 <HAL_GetREVID+0x8>)
 800772e:	6818      	ldr	r0, [r3, #0]
}
 8007730:	0c00      	lsrs	r0, r0, #16
 8007732:	4770      	bx	lr
 8007734:	5c001000 	.word	0x5c001000

08007738 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8007738:	4a03      	ldr	r2, [pc, #12]	; (8007748 <HAL_SetFMCMemorySwappingConfig+0x10>)
 800773a:	6813      	ldr	r3, [r2, #0]
 800773c:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8007740:	4318      	orrs	r0, r3
 8007742:	6010      	str	r0, [r2, #0]
}
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	52004000 	.word	0x52004000

0800774c <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800774c:	4906      	ldr	r1, [pc, #24]	; (8007768 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800774e:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007752:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 8007754:	4b05      	ldr	r3, [pc, #20]	; (800776c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007756:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007758:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800775c:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007760:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8007762:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8007764:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8007766:	4770      	bx	lr
 8007768:	e000ed00 	.word	0xe000ed00
 800776c:	05fa0000 	.word	0x05fa0000

08007770 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007770:	4b1b      	ldr	r3, [pc, #108]	; (80077e0 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007772:	b500      	push	{lr}
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800777a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800777e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007782:	f1be 0f04 	cmp.w	lr, #4
 8007786:	bf28      	it	cs
 8007788:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800778c:	f1bc 0f06 	cmp.w	ip, #6
 8007790:	d91a      	bls.n	80077c8 <HAL_NVIC_SetPriority+0x58>
 8007792:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007794:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8007798:	fa0c fc03 	lsl.w	ip, ip, r3
 800779c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077a0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 80077a4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077a6:	fa0c fc0e 	lsl.w	ip, ip, lr
 80077aa:	ea21 010c 	bic.w	r1, r1, ip
 80077ae:	fa01 f103 	lsl.w	r1, r1, r3
 80077b2:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80077b6:	db0a      	blt.n	80077ce <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077b8:	0109      	lsls	r1, r1, #4
 80077ba:	4b0a      	ldr	r3, [pc, #40]	; (80077e4 <HAL_NVIC_SetPriority+0x74>)
 80077bc:	b2c9      	uxtb	r1, r1
 80077be:	4403      	add	r3, r0
 80077c0:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80077c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80077c8:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80077ca:	4613      	mov	r3, r2
 80077cc:	e7e8      	b.n	80077a0 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077ce:	f000 000f 	and.w	r0, r0, #15
 80077d2:	0109      	lsls	r1, r1, #4
 80077d4:	4b04      	ldr	r3, [pc, #16]	; (80077e8 <HAL_NVIC_SetPriority+0x78>)
 80077d6:	b2c9      	uxtb	r1, r1
 80077d8:	4403      	add	r3, r0
 80077da:	7619      	strb	r1, [r3, #24]
 80077dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80077e0:	e000ed00 	.word	0xe000ed00
 80077e4:	e000e100 	.word	0xe000e100
 80077e8:	e000ecfc 	.word	0xe000ecfc

080077ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80077ec:	2800      	cmp	r0, #0
 80077ee:	db07      	blt.n	8007800 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077f0:	2301      	movs	r3, #1
 80077f2:	f000 011f 	and.w	r1, r0, #31
 80077f6:	4a03      	ldr	r2, [pc, #12]	; (8007804 <HAL_NVIC_EnableIRQ+0x18>)
 80077f8:	0940      	lsrs	r0, r0, #5
 80077fa:	408b      	lsls	r3, r1
 80077fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	e000e100 	.word	0xe000e100

08007808 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007808:	1e43      	subs	r3, r0, #1
 800780a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800780e:	d20c      	bcs.n	800782a <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007810:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007814:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007816:	4906      	ldr	r1, [pc, #24]	; (8007830 <HAL_SYSTICK_Config+0x28>)
 8007818:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800781c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800781e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007820:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007824:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007826:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007828:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800782a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	e000ed00 	.word	0xe000ed00

08007834 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8007834:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8007838:	4b04      	ldr	r3, [pc, #16]	; (800784c <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800783a:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800783c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800783e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007842:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 8007844:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	e000ed00 	.word	0xe000ed00

08007850 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8007850:	4b06      	ldr	r3, [pc, #24]	; (800786c <HAL_MPU_Enable+0x1c>)
 8007852:	f040 0001 	orr.w	r0, r0, #1
 8007856:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800785a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800785c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007860:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007862:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007866:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800786a:	4770      	bx	lr
 800786c:	e000ed00 	.word	0xe000ed00

08007870 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007870:	7843      	ldrb	r3, [r0, #1]
 8007872:	4a16      	ldr	r2, [pc, #88]	; (80078cc <HAL_MPU_ConfigRegion+0x5c>)
 8007874:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8007878:	7803      	ldrb	r3, [r0, #0]
 800787a:	b313      	cbz	r3, 80078c2 <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800787c:	6843      	ldr	r3, [r0, #4]
 800787e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007882:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007884:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007888:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800788a:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800788c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8007890:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007894:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007896:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007898:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800789c:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80078a0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80078a4:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80078a6:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80078aa:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80078ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80078b2:	7a01      	ldrb	r1, [r0, #8]
 80078b4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 80078b8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80078bc:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 80078c0:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 80078c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 80078c6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 80078ca:	4770      	bx	lr
 80078cc:	e000ed00 	.word	0xe000ed00

080078d0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078d0:	4b34      	ldr	r3, [pc, #208]	; (80079a4 <DMA_CalcBaseAndBitshift+0xd4>)
 80078d2:	4935      	ldr	r1, [pc, #212]	; (80079a8 <DMA_CalcBaseAndBitshift+0xd8>)
{
 80078d4:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80078d6:	4d35      	ldr	r5, [pc, #212]	; (80079ac <DMA_CalcBaseAndBitshift+0xdc>)
 80078d8:	6802      	ldr	r2, [r0, #0]
 80078da:	4c35      	ldr	r4, [pc, #212]	; (80079b0 <DMA_CalcBaseAndBitshift+0xe0>)
 80078dc:	42aa      	cmp	r2, r5
 80078de:	bf18      	it	ne
 80078e0:	429a      	cmpne	r2, r3
 80078e2:	bf0c      	ite	eq
 80078e4:	2301      	moveq	r3, #1
 80078e6:	2300      	movne	r3, #0
 80078e8:	428a      	cmp	r2, r1
 80078ea:	bf08      	it	eq
 80078ec:	f043 0301 	orreq.w	r3, r3, #1
 80078f0:	3130      	adds	r1, #48	; 0x30
 80078f2:	42a2      	cmp	r2, r4
 80078f4:	bf08      	it	eq
 80078f6:	f043 0301 	orreq.w	r3, r3, #1
 80078fa:	3430      	adds	r4, #48	; 0x30
 80078fc:	428a      	cmp	r2, r1
 80078fe:	bf08      	it	eq
 8007900:	f043 0301 	orreq.w	r3, r3, #1
 8007904:	3130      	adds	r1, #48	; 0x30
 8007906:	42a2      	cmp	r2, r4
 8007908:	bf08      	it	eq
 800790a:	f043 0301 	orreq.w	r3, r3, #1
 800790e:	3430      	adds	r4, #48	; 0x30
 8007910:	428a      	cmp	r2, r1
 8007912:	bf08      	it	eq
 8007914:	f043 0301 	orreq.w	r3, r3, #1
 8007918:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800791c:	42a2      	cmp	r2, r4
 800791e:	bf08      	it	eq
 8007920:	f043 0301 	orreq.w	r3, r3, #1
 8007924:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8007928:	428a      	cmp	r2, r1
 800792a:	bf08      	it	eq
 800792c:	f043 0301 	orreq.w	r3, r3, #1
 8007930:	3130      	adds	r1, #48	; 0x30
 8007932:	42a2      	cmp	r2, r4
 8007934:	bf08      	it	eq
 8007936:	f043 0301 	orreq.w	r3, r3, #1
 800793a:	3430      	adds	r4, #48	; 0x30
 800793c:	428a      	cmp	r2, r1
 800793e:	bf08      	it	eq
 8007940:	f043 0301 	orreq.w	r3, r3, #1
 8007944:	3130      	adds	r1, #48	; 0x30
 8007946:	42a2      	cmp	r2, r4
 8007948:	bf08      	it	eq
 800794a:	f043 0301 	orreq.w	r3, r3, #1
 800794e:	3430      	adds	r4, #48	; 0x30
 8007950:	428a      	cmp	r2, r1
 8007952:	bf08      	it	eq
 8007954:	f043 0301 	orreq.w	r3, r3, #1
 8007958:	3130      	adds	r1, #48	; 0x30
 800795a:	42a2      	cmp	r2, r4
 800795c:	bf08      	it	eq
 800795e:	f043 0301 	orreq.w	r3, r3, #1
 8007962:	428a      	cmp	r2, r1
 8007964:	bf08      	it	eq
 8007966:	f043 0301 	orreq.w	r3, r3, #1
 800796a:	b913      	cbnz	r3, 8007972 <DMA_CalcBaseAndBitshift+0xa2>
 800796c:	4b11      	ldr	r3, [pc, #68]	; (80079b4 <DMA_CalcBaseAndBitshift+0xe4>)
 800796e:	429a      	cmp	r2, r3
 8007970:	d113      	bne.n	800799a <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007972:	b2d3      	uxtb	r3, r2
 8007974:	4910      	ldr	r1, [pc, #64]	; (80079b8 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007976:	4c11      	ldr	r4, [pc, #68]	; (80079bc <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007978:	3b10      	subs	r3, #16
 800797a:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 800797e:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007980:	4b0f      	ldr	r3, [pc, #60]	; (80079c0 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007982:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007986:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800798a:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800798c:	bf88      	it	hi
 800798e:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007990:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007992:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8007994:	4618      	mov	r0, r3
 8007996:	bc30      	pop	{r4, r5}
 8007998:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800799a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 800799e:	6583      	str	r3, [r0, #88]	; 0x58
 80079a0:	e7f8      	b.n	8007994 <DMA_CalcBaseAndBitshift+0xc4>
 80079a2:	bf00      	nop
 80079a4:	40020010 	.word	0x40020010
 80079a8:	40020040 	.word	0x40020040
 80079ac:	40020028 	.word	0x40020028
 80079b0:	40020058 	.word	0x40020058
 80079b4:	400204b8 	.word	0x400204b8
 80079b8:	aaaaaaab 	.word	0xaaaaaaab
 80079bc:	0801c424 	.word	0x0801c424
 80079c0:	fffffc00 	.word	0xfffffc00

080079c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80079c4:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80079c6:	4a29      	ldr	r2, [pc, #164]	; (8007a6c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 80079c8:	4929      	ldr	r1, [pc, #164]	; (8007a70 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 80079ca:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80079cc:	4d29      	ldr	r5, [pc, #164]	; (8007a74 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 80079ce:	4c2a      	ldr	r4, [pc, #168]	; (8007a78 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 80079d0:	42ab      	cmp	r3, r5
 80079d2:	bf18      	it	ne
 80079d4:	4293      	cmpne	r3, r2
 80079d6:	bf0c      	ite	eq
 80079d8:	2201      	moveq	r2, #1
 80079da:	2200      	movne	r2, #0
 80079dc:	428b      	cmp	r3, r1
 80079de:	bf08      	it	eq
 80079e0:	f042 0201 	orreq.w	r2, r2, #1
 80079e4:	3128      	adds	r1, #40	; 0x28
 80079e6:	42a3      	cmp	r3, r4
 80079e8:	bf08      	it	eq
 80079ea:	f042 0201 	orreq.w	r2, r2, #1
 80079ee:	3428      	adds	r4, #40	; 0x28
 80079f0:	428b      	cmp	r3, r1
 80079f2:	bf08      	it	eq
 80079f4:	f042 0201 	orreq.w	r2, r2, #1
 80079f8:	3128      	adds	r1, #40	; 0x28
 80079fa:	42a3      	cmp	r3, r4
 80079fc:	bf08      	it	eq
 80079fe:	f042 0201 	orreq.w	r2, r2, #1
 8007a02:	428b      	cmp	r3, r1
 8007a04:	bf08      	it	eq
 8007a06:	f042 0201 	orreq.w	r2, r2, #1
 8007a0a:	b912      	cbnz	r2, 8007a12 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 8007a0c:	4a1b      	ldr	r2, [pc, #108]	; (8007a7c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d113      	bne.n	8007a3a <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	4c1a      	ldr	r4, [pc, #104]	; (8007a80 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007a16:	4a1b      	ldr	r2, [pc, #108]	; (8007a84 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a18:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007a1a:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007a1c:	4d1a      	ldr	r5, [pc, #104]	; (8007a88 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007a1e:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007a22:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007a24:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a28:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007a2c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a2e:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007a32:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a34:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007a36:	bc30      	pop	{r4, r5}
 8007a38:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a3a:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007a3c:	4913      	ldr	r1, [pc, #76]	; (8007a8c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a3e:	4c14      	ldr	r4, [pc, #80]	; (8007a90 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007a40:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a42:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007a44:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007a46:	fba4 2302 	umull	r2, r3, r4, r2
 8007a4a:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007a4e:	d800      	bhi.n	8007a52 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8007a50:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007a52:	4a10      	ldr	r2, [pc, #64]	; (8007a94 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a54:	f003 051f 	and.w	r5, r3, #31
 8007a58:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007a5a:	4c0f      	ldr	r4, [pc, #60]	; (8007a98 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007a5c:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a5e:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007a60:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007a62:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007a64:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007a66:	6602      	str	r2, [r0, #96]	; 0x60
}
 8007a68:	e7e5      	b.n	8007a36 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 8007a6a:	bf00      	nop
 8007a6c:	58025408 	.word	0x58025408
 8007a70:	58025430 	.word	0x58025430
 8007a74:	5802541c 	.word	0x5802541c
 8007a78:	58025444 	.word	0x58025444
 8007a7c:	58025494 	.word	0x58025494
 8007a80:	cccccccd 	.word	0xcccccccd
 8007a84:	16009600 	.word	0x16009600
 8007a88:	58025880 	.word	0x58025880
 8007a8c:	bffdfbf0 	.word	0xbffdfbf0
 8007a90:	aaaaaaab 	.word	0xaaaaaaab
 8007a94:	10008200 	.word	0x10008200
 8007a98:	40020880 	.word	0x40020880

08007a9c <HAL_DMA_Init>:
{
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007aa0:	f7ff fe2c 	bl	80076fc <HAL_GetTick>
  if(hdma == NULL)
 8007aa4:	2c00      	cmp	r4, #0
 8007aa6:	f000 816b 	beq.w	8007d80 <HAL_DMA_Init+0x2e4>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007aaa:	6822      	ldr	r2, [r4, #0]
 8007aac:	4605      	mov	r5, r0
 8007aae:	4ba3      	ldr	r3, [pc, #652]	; (8007d3c <HAL_DMA_Init+0x2a0>)
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d048      	beq.n	8007b46 <HAL_DMA_Init+0xaa>
 8007ab4:	3318      	adds	r3, #24
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d045      	beq.n	8007b46 <HAL_DMA_Init+0xaa>
 8007aba:	3330      	adds	r3, #48	; 0x30
 8007abc:	49a0      	ldr	r1, [pc, #640]	; (8007d40 <HAL_DMA_Init+0x2a4>)
 8007abe:	428a      	cmp	r2, r1
 8007ac0:	bf18      	it	ne
 8007ac2:	429a      	cmpne	r2, r3
 8007ac4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8007ac8:	bf0c      	ite	eq
 8007aca:	2301      	moveq	r3, #1
 8007acc:	2300      	movne	r3, #0
 8007ace:	428a      	cmp	r2, r1
 8007ad0:	bf08      	it	eq
 8007ad2:	f043 0301 	orreq.w	r3, r3, #1
 8007ad6:	3118      	adds	r1, #24
 8007ad8:	428a      	cmp	r2, r1
 8007ada:	bf08      	it	eq
 8007adc:	f043 0301 	orreq.w	r3, r3, #1
 8007ae0:	3118      	adds	r1, #24
 8007ae2:	428a      	cmp	r2, r1
 8007ae4:	bf08      	it	eq
 8007ae6:	f043 0301 	orreq.w	r3, r3, #1
 8007aea:	3118      	adds	r1, #24
 8007aec:	428a      	cmp	r2, r1
 8007aee:	bf08      	it	eq
 8007af0:	f043 0301 	orreq.w	r3, r3, #1
 8007af4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8007af8:	428a      	cmp	r2, r1
 8007afa:	bf08      	it	eq
 8007afc:	f043 0301 	orreq.w	r3, r3, #1
 8007b00:	3118      	adds	r1, #24
 8007b02:	428a      	cmp	r2, r1
 8007b04:	bf08      	it	eq
 8007b06:	f043 0301 	orreq.w	r3, r3, #1
 8007b0a:	3118      	adds	r1, #24
 8007b0c:	428a      	cmp	r2, r1
 8007b0e:	bf08      	it	eq
 8007b10:	f043 0301 	orreq.w	r3, r3, #1
 8007b14:	3118      	adds	r1, #24
 8007b16:	428a      	cmp	r2, r1
 8007b18:	bf08      	it	eq
 8007b1a:	f043 0301 	orreq.w	r3, r3, #1
 8007b1e:	3118      	adds	r1, #24
 8007b20:	428a      	cmp	r2, r1
 8007b22:	bf08      	it	eq
 8007b24:	f043 0301 	orreq.w	r3, r3, #1
 8007b28:	3118      	adds	r1, #24
 8007b2a:	428a      	cmp	r2, r1
 8007b2c:	bf08      	it	eq
 8007b2e:	f043 0301 	orreq.w	r3, r3, #1
 8007b32:	3118      	adds	r1, #24
 8007b34:	428a      	cmp	r2, r1
 8007b36:	bf08      	it	eq
 8007b38:	f043 0301 	orreq.w	r3, r3, #1
 8007b3c:	b91b      	cbnz	r3, 8007b46 <HAL_DMA_Init+0xaa>
 8007b3e:	4b81      	ldr	r3, [pc, #516]	; (8007d44 <HAL_DMA_Init+0x2a8>)
 8007b40:	429a      	cmp	r2, r3
 8007b42:	f040 8184 	bne.w	8007e4e <HAL_DMA_Init+0x3b2>
    __HAL_UNLOCK(hdma);
 8007b46:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b48:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 8007b4a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b4e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8007b52:	6813      	ldr	r3, [r2, #0]
 8007b54:	f023 0301 	bic.w	r3, r3, #1
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	e005      	b.n	8007b68 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b5c:	f7ff fdce 	bl	80076fc <HAL_GetTick>
 8007b60:	1b43      	subs	r3, r0, r5
 8007b62:	2b05      	cmp	r3, #5
 8007b64:	f200 80fe 	bhi.w	8007d64 <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	07d0      	lsls	r0, r2, #31
 8007b6e:	d4f5      	bmi.n	8007b5c <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8007b70:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b74:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8007b76:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007b78:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b80:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b82:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b86:	69a1      	ldr	r1, [r4, #24]
 8007b88:	ea42 0201 	orr.w	r2, r2, r1
 8007b8c:	69e1      	ldr	r1, [r4, #28]
 8007b8e:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8007b92:	6a21      	ldr	r1, [r4, #32]
 8007b94:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b98:	496b      	ldr	r1, [pc, #428]	; (8007d48 <HAL_DMA_Init+0x2ac>)
 8007b9a:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 8007b9e:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007ba2:	d103      	bne.n	8007bac <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007ba4:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8007ba8:	4301      	orrs	r1, r0
 8007baa:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007bac:	4867      	ldr	r0, [pc, #412]	; (8007d4c <HAL_DMA_Init+0x2b0>)
 8007bae:	4968      	ldr	r1, [pc, #416]	; (8007d50 <HAL_DMA_Init+0x2b4>)
 8007bb0:	6800      	ldr	r0, [r0, #0]
 8007bb2:	4001      	ands	r1, r0
 8007bb4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8007bb8:	d30a      	bcc.n	8007bd0 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007bba:	6861      	ldr	r1, [r4, #4]
 8007bbc:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8007bc0:	281f      	cmp	r0, #31
 8007bc2:	f240 80d6 	bls.w	8007d72 <HAL_DMA_Init+0x2d6>
 8007bc6:	394f      	subs	r1, #79	; 0x4f
 8007bc8:	2903      	cmp	r1, #3
 8007bca:	d801      	bhi.n	8007bd0 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
 8007bcc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007bd0:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007bd2:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 8007bd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007bd6:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007bd8:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007bda:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8007bde:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007be2:	d10e      	bne.n	8007c02 <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007be4:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 8007be8:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007bea:	b150      	cbz	r0, 8007c02 <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007bec:	69a5      	ldr	r5, [r4, #24]
 8007bee:	2d00      	cmp	r5, #0
 8007bf0:	f040 8108 	bne.w	8007e04 <HAL_DMA_Init+0x368>
    switch (hdma->Init.FIFOThreshold)
 8007bf4:	2a01      	cmp	r2, #1
 8007bf6:	f000 8125 	beq.w	8007e44 <HAL_DMA_Init+0x3a8>
 8007bfa:	f032 0202 	bics.w	r2, r2, #2
 8007bfe:	f000 8109 	beq.w	8007e14 <HAL_DMA_Init+0x378>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007c02:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c04:	4620      	mov	r0, r4
 8007c06:	f7ff fe63 	bl	80078d0 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c0a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007c0c:	233f      	movs	r3, #63	; 0x3f
 8007c0e:	f002 021f 	and.w	r2, r2, #31
 8007c12:	4093      	lsls	r3, r2
 8007c14:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c16:	6822      	ldr	r2, [r4, #0]
 8007c18:	4b48      	ldr	r3, [pc, #288]	; (8007d3c <HAL_DMA_Init+0x2a0>)
 8007c1a:	484e      	ldr	r0, [pc, #312]	; (8007d54 <HAL_DMA_Init+0x2b8>)
 8007c1c:	4948      	ldr	r1, [pc, #288]	; (8007d40 <HAL_DMA_Init+0x2a4>)
 8007c1e:	4282      	cmp	r2, r0
 8007c20:	bf18      	it	ne
 8007c22:	429a      	cmpne	r2, r3
 8007c24:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8007c28:	bf0c      	ite	eq
 8007c2a:	2301      	moveq	r3, #1
 8007c2c:	2300      	movne	r3, #0
 8007c2e:	428a      	cmp	r2, r1
 8007c30:	bf08      	it	eq
 8007c32:	f043 0301 	orreq.w	r3, r3, #1
 8007c36:	3130      	adds	r1, #48	; 0x30
 8007c38:	4282      	cmp	r2, r0
 8007c3a:	bf08      	it	eq
 8007c3c:	f043 0301 	orreq.w	r3, r3, #1
 8007c40:	3030      	adds	r0, #48	; 0x30
 8007c42:	428a      	cmp	r2, r1
 8007c44:	bf08      	it	eq
 8007c46:	f043 0301 	orreq.w	r3, r3, #1
 8007c4a:	3130      	adds	r1, #48	; 0x30
 8007c4c:	4282      	cmp	r2, r0
 8007c4e:	bf08      	it	eq
 8007c50:	f043 0301 	orreq.w	r3, r3, #1
 8007c54:	3030      	adds	r0, #48	; 0x30
 8007c56:	428a      	cmp	r2, r1
 8007c58:	bf08      	it	eq
 8007c5a:	f043 0301 	orreq.w	r3, r3, #1
 8007c5e:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8007c62:	4282      	cmp	r2, r0
 8007c64:	bf08      	it	eq
 8007c66:	f043 0301 	orreq.w	r3, r3, #1
 8007c6a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8007c6e:	428a      	cmp	r2, r1
 8007c70:	bf08      	it	eq
 8007c72:	f043 0301 	orreq.w	r3, r3, #1
 8007c76:	3130      	adds	r1, #48	; 0x30
 8007c78:	4282      	cmp	r2, r0
 8007c7a:	bf08      	it	eq
 8007c7c:	f043 0301 	orreq.w	r3, r3, #1
 8007c80:	3030      	adds	r0, #48	; 0x30
 8007c82:	428a      	cmp	r2, r1
 8007c84:	bf08      	it	eq
 8007c86:	f043 0301 	orreq.w	r3, r3, #1
 8007c8a:	3130      	adds	r1, #48	; 0x30
 8007c8c:	4282      	cmp	r2, r0
 8007c8e:	bf08      	it	eq
 8007c90:	f043 0301 	orreq.w	r3, r3, #1
 8007c94:	3030      	adds	r0, #48	; 0x30
 8007c96:	428a      	cmp	r2, r1
 8007c98:	bf08      	it	eq
 8007c9a:	f043 0301 	orreq.w	r3, r3, #1
 8007c9e:	3130      	adds	r1, #48	; 0x30
 8007ca0:	4282      	cmp	r2, r0
 8007ca2:	bf08      	it	eq
 8007ca4:	f043 0301 	orreq.w	r3, r3, #1
 8007ca8:	3030      	adds	r0, #48	; 0x30
 8007caa:	428a      	cmp	r2, r1
 8007cac:	bf08      	it	eq
 8007cae:	f043 0301 	orreq.w	r3, r3, #1
 8007cb2:	4929      	ldr	r1, [pc, #164]	; (8007d58 <HAL_DMA_Init+0x2bc>)
 8007cb4:	4282      	cmp	r2, r0
 8007cb6:	bf08      	it	eq
 8007cb8:	f043 0301 	orreq.w	r3, r3, #1
 8007cbc:	4827      	ldr	r0, [pc, #156]	; (8007d5c <HAL_DMA_Init+0x2c0>)
 8007cbe:	428a      	cmp	r2, r1
 8007cc0:	bf08      	it	eq
 8007cc2:	f043 0301 	orreq.w	r3, r3, #1
 8007cc6:	3128      	adds	r1, #40	; 0x28
 8007cc8:	4282      	cmp	r2, r0
 8007cca:	bf08      	it	eq
 8007ccc:	f043 0301 	orreq.w	r3, r3, #1
 8007cd0:	3028      	adds	r0, #40	; 0x28
 8007cd2:	428a      	cmp	r2, r1
 8007cd4:	bf08      	it	eq
 8007cd6:	f043 0301 	orreq.w	r3, r3, #1
 8007cda:	3128      	adds	r1, #40	; 0x28
 8007cdc:	4282      	cmp	r2, r0
 8007cde:	bf08      	it	eq
 8007ce0:	f043 0301 	orreq.w	r3, r3, #1
 8007ce4:	3028      	adds	r0, #40	; 0x28
 8007ce6:	428a      	cmp	r2, r1
 8007ce8:	bf08      	it	eq
 8007cea:	f043 0301 	orreq.w	r3, r3, #1
 8007cee:	3128      	adds	r1, #40	; 0x28
 8007cf0:	4282      	cmp	r2, r0
 8007cf2:	bf08      	it	eq
 8007cf4:	f043 0301 	orreq.w	r3, r3, #1
 8007cf8:	428a      	cmp	r2, r1
 8007cfa:	bf08      	it	eq
 8007cfc:	f043 0301 	orreq.w	r3, r3, #1
 8007d00:	b913      	cbnz	r3, 8007d08 <HAL_DMA_Init+0x26c>
 8007d02:	4b17      	ldr	r3, [pc, #92]	; (8007d60 <HAL_DMA_Init+0x2c4>)
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d113      	bne.n	8007d30 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f7ff fe5b 	bl	80079c4 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	2b80      	cmp	r3, #128	; 0x80
 8007d12:	d037      	beq.n	8007d84 <HAL_DMA_Init+0x2e8>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007d14:	7922      	ldrb	r2, [r4, #4]
 8007d16:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8007d18:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d1a:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 8007d1e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007d20:	6861      	ldr	r1, [r4, #4]
 8007d22:	1e4b      	subs	r3, r1, #1
 8007d24:	2b07      	cmp	r3, #7
 8007d26:	d931      	bls.n	8007d8c <HAL_DMA_Init+0x2f0>
      hdma->DMAmuxRequestGen = 0U;
 8007d28:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8007d2a:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007d2e:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d30:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8007d32:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d34:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8007d36:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007d3a:	bd38      	pop	{r3, r4, r5, pc}
 8007d3c:	40020010 	.word	0x40020010
 8007d40:	40020040 	.word	0x40020040
 8007d44:	400204b8 	.word	0x400204b8
 8007d48:	fe10803f 	.word	0xfe10803f
 8007d4c:	5c001000 	.word	0x5c001000
 8007d50:	ffff0000 	.word	0xffff0000
 8007d54:	40020028 	.word	0x40020028
 8007d58:	58025408 	.word	0x58025408
 8007d5c:	5802541c 	.word	0x5802541c
 8007d60:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d64:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8007d66:	2303      	movs	r3, #3
        return HAL_ERROR;
 8007d68:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d6a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8007d6c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007d70:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007d72:	496a      	ldr	r1, [pc, #424]	; (8007f1c <HAL_DMA_Init+0x480>)
 8007d74:	fa21 f000 	lsr.w	r0, r1, r0
 8007d78:	07c1      	lsls	r1, r0, #31
 8007d7a:	f57f af29 	bpl.w	8007bd0 <HAL_DMA_Init+0x134>
 8007d7e:	e725      	b.n	8007bcc <HAL_DMA_Init+0x130>
    return HAL_ERROR;
 8007d80:	2001      	movs	r0, #1
}
 8007d82:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007d84:	2300      	movs	r3, #0
 8007d86:	461a      	mov	r2, r3
 8007d88:	6063      	str	r3, [r4, #4]
 8007d8a:	e7c4      	b.n	8007d16 <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007d8c:	6820      	ldr	r0, [r4, #0]
 8007d8e:	4a64      	ldr	r2, [pc, #400]	; (8007f20 <HAL_DMA_Init+0x484>)
 8007d90:	4d64      	ldr	r5, [pc, #400]	; (8007f24 <HAL_DMA_Init+0x488>)
 8007d92:	42a8      	cmp	r0, r5
 8007d94:	bf18      	it	ne
 8007d96:	4290      	cmpne	r0, r2
 8007d98:	f105 0514 	add.w	r5, r5, #20
 8007d9c:	bf0c      	ite	eq
 8007d9e:	2201      	moveq	r2, #1
 8007da0:	2200      	movne	r2, #0
 8007da2:	42a8      	cmp	r0, r5
 8007da4:	bf08      	it	eq
 8007da6:	f042 0201 	orreq.w	r2, r2, #1
 8007daa:	3514      	adds	r5, #20
 8007dac:	42a8      	cmp	r0, r5
 8007dae:	bf08      	it	eq
 8007db0:	f042 0201 	orreq.w	r2, r2, #1
 8007db4:	3514      	adds	r5, #20
 8007db6:	42a8      	cmp	r0, r5
 8007db8:	bf08      	it	eq
 8007dba:	f042 0201 	orreq.w	r2, r2, #1
 8007dbe:	3514      	adds	r5, #20
 8007dc0:	42a8      	cmp	r0, r5
 8007dc2:	bf08      	it	eq
 8007dc4:	f042 0201 	orreq.w	r2, r2, #1
 8007dc8:	3514      	adds	r5, #20
 8007dca:	42a8      	cmp	r0, r5
 8007dcc:	bf08      	it	eq
 8007dce:	f042 0201 	orreq.w	r2, r2, #1
 8007dd2:	b93a      	cbnz	r2, 8007de4 <HAL_DMA_Init+0x348>
 8007dd4:	4a54      	ldr	r2, [pc, #336]	; (8007f28 <HAL_DMA_Init+0x48c>)
 8007dd6:	4290      	cmp	r0, r2
 8007dd8:	d004      	beq.n	8007de4 <HAL_DMA_Init+0x348>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007dda:	4a54      	ldr	r2, [pc, #336]	; (8007f2c <HAL_DMA_Init+0x490>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007ddc:	4854      	ldr	r0, [pc, #336]	; (8007f30 <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007dde:	440a      	add	r2, r1
 8007de0:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007de2:	e003      	b.n	8007dec <HAL_DMA_Init+0x350>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007de4:	4a53      	ldr	r2, [pc, #332]	; (8007f34 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007de6:	4854      	ldr	r0, [pc, #336]	; (8007f38 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007de8:	440a      	add	r2, r1
 8007dea:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007dec:	2101      	movs	r1, #1
 8007dee:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007df2:	2100      	movs	r1, #0
 8007df4:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007df8:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007dfa:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007dfc:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8007e00:	605a      	str	r2, [r3, #4]
 8007e02:	e795      	b.n	8007d30 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e04:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8007e08:	d00e      	beq.n	8007e28 <HAL_DMA_Init+0x38c>
    switch (hdma->Init.FIFOThreshold)
 8007e0a:	2a02      	cmp	r2, #2
 8007e0c:	d905      	bls.n	8007e1a <HAL_DMA_Init+0x37e>
 8007e0e:	2a03      	cmp	r2, #3
 8007e10:	f47f aef7 	bne.w	8007c02 <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007e14:	01c2      	lsls	r2, r0, #7
 8007e16:	f57f aef4 	bpl.w	8007c02 <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
 8007e1a:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007e1c:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8007e1e:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007e20:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8007e22:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 8007e28:	2a03      	cmp	r2, #3
 8007e2a:	f63f aeea 	bhi.w	8007c02 <HAL_DMA_Init+0x166>
 8007e2e:	a501      	add	r5, pc, #4	; (adr r5, 8007e34 <HAL_DMA_Init+0x398>)
 8007e30:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8007e34:	08007e1b 	.word	0x08007e1b
 8007e38:	08007e15 	.word	0x08007e15
 8007e3c:	08007e1b 	.word	0x08007e1b
 8007e40:	08007e45 	.word	0x08007e45
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007e44:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8007e48:	f47f aedb 	bne.w	8007c02 <HAL_DMA_Init+0x166>
 8007e4c:	e7e5      	b.n	8007e1a <HAL_DMA_Init+0x37e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007e4e:	4b34      	ldr	r3, [pc, #208]	; (8007f20 <HAL_DMA_Init+0x484>)
 8007e50:	4834      	ldr	r0, [pc, #208]	; (8007f24 <HAL_DMA_Init+0x488>)
 8007e52:	493a      	ldr	r1, [pc, #232]	; (8007f3c <HAL_DMA_Init+0x4a0>)
 8007e54:	4282      	cmp	r2, r0
 8007e56:	bf18      	it	ne
 8007e58:	429a      	cmpne	r2, r3
 8007e5a:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8007e5e:	bf0c      	ite	eq
 8007e60:	2301      	moveq	r3, #1
 8007e62:	2300      	movne	r3, #0
 8007e64:	428a      	cmp	r2, r1
 8007e66:	bf08      	it	eq
 8007e68:	f043 0301 	orreq.w	r3, r3, #1
 8007e6c:	3128      	adds	r1, #40	; 0x28
 8007e6e:	4282      	cmp	r2, r0
 8007e70:	bf08      	it	eq
 8007e72:	f043 0301 	orreq.w	r3, r3, #1
 8007e76:	3028      	adds	r0, #40	; 0x28
 8007e78:	428a      	cmp	r2, r1
 8007e7a:	bf08      	it	eq
 8007e7c:	f043 0301 	orreq.w	r3, r3, #1
 8007e80:	3128      	adds	r1, #40	; 0x28
 8007e82:	4282      	cmp	r2, r0
 8007e84:	bf08      	it	eq
 8007e86:	f043 0301 	orreq.w	r3, r3, #1
 8007e8a:	428a      	cmp	r2, r1
 8007e8c:	bf08      	it	eq
 8007e8e:	f043 0301 	orreq.w	r3, r3, #1
 8007e92:	b913      	cbnz	r3, 8007e9a <HAL_DMA_Init+0x3fe>
 8007e94:	4b24      	ldr	r3, [pc, #144]	; (8007f28 <HAL_DMA_Init+0x48c>)
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d139      	bne.n	8007f0e <HAL_DMA_Init+0x472>
    __HAL_UNLOCK(hdma);
 8007e9a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e9c:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007e9e:	4928      	ldr	r1, [pc, #160]	; (8007f40 <HAL_DMA_Init+0x4a4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ea0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8007ea4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007ea8:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007eaa:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007eac:	68a3      	ldr	r3, [r4, #8]
 8007eae:	2b40      	cmp	r3, #64	; 0x40
 8007eb0:	d02b      	beq.n	8007f0a <HAL_DMA_Init+0x46e>
 8007eb2:	2b80      	cmp	r3, #128	; 0x80
 8007eb4:	bf0c      	ite	eq
 8007eb6:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8007eba:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007ebc:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8007ec0:	08db      	lsrs	r3, r3, #3
 8007ec2:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007ec6:	6965      	ldr	r5, [r4, #20]
 8007ec8:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007ecc:	69a5      	ldr	r5, [r4, #24]
 8007ece:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007ed2:	69e5      	ldr	r5, [r4, #28]
 8007ed4:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007ed8:	6a25      	ldr	r5, [r4, #32]
 8007eda:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8007ede:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007ee0:	4918      	ldr	r1, [pc, #96]	; (8007f44 <HAL_DMA_Init+0x4a8>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ee2:	4303      	orrs	r3, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007ee4:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007ee6:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007ee8:	6822      	ldr	r2, [r4, #0]
 8007eea:	4b17      	ldr	r3, [pc, #92]	; (8007f48 <HAL_DMA_Init+0x4ac>)
 8007eec:	4411      	add	r1, r2
 8007eee:	fba3 2301 	umull	r2, r3, r3, r1
 8007ef2:	091b      	lsrs	r3, r3, #4
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007ef8:	f7ff fcea 	bl	80078d0 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007efc:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8007efe:	2301      	movs	r3, #1
 8007f00:	f002 021f 	and.w	r2, r2, #31
 8007f04:	4093      	lsls	r3, r2
 8007f06:	6043      	str	r3, [r0, #4]
 8007f08:	e685      	b.n	8007c16 <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007f0a:	2010      	movs	r0, #16
 8007f0c:	e7d6      	b.n	8007ebc <HAL_DMA_Init+0x420>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f0e:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007f10:	2303      	movs	r3, #3
    return HAL_ERROR;
 8007f12:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f14:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007f16:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	c3c0003f 	.word	0xc3c0003f
 8007f20:	58025408 	.word	0x58025408
 8007f24:	5802541c 	.word	0x5802541c
 8007f28:	58025494 	.word	0x58025494
 8007f2c:	1000823f 	.word	0x1000823f
 8007f30:	40020940 	.word	0x40020940
 8007f34:	1600963f 	.word	0x1600963f
 8007f38:	58025940 	.word	0x58025940
 8007f3c:	58025430 	.word	0x58025430
 8007f40:	fffe000f 	.word	0xfffe000f
 8007f44:	a7fdabf8 	.word	0xa7fdabf8
 8007f48:	cccccccd 	.word	0xcccccccd

08007f4c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	f000 8270 	beq.w	8008432 <HAL_DMA_Start_IT+0x4e6>
 8007f52:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8007f54:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8007f58:	2801      	cmp	r0, #1
 8007f5a:	f000 826c 	beq.w	8008436 <HAL_DMA_Start_IT+0x4ea>
 8007f5e:	2001      	movs	r0, #1
{
 8007f60:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 8007f62:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8007f66:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8007f6a:	4284      	cmp	r4, r0
 8007f6c:	d008      	beq.n	8007f80 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007f6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8007f72:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007f74:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8007f78:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8007f7c:	bc70      	pop	{r4, r5, r6}
 8007f7e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f80:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8007f82:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f86:	4ea2      	ldr	r6, [pc, #648]	; (8008210 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f88:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8007f92:	6820      	ldr	r0, [r4, #0]
 8007f94:	f020 0001 	bic.w	r0, r0, #1
 8007f98:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f9a:	489e      	ldr	r0, [pc, #632]	; (8008214 <HAL_DMA_Start_IT+0x2c8>)
 8007f9c:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fa0:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007fa4:	42b4      	cmp	r4, r6
 8007fa6:	bf18      	it	ne
 8007fa8:	4284      	cmpne	r4, r0
 8007faa:	f106 0618 	add.w	r6, r6, #24
 8007fae:	bf0c      	ite	eq
 8007fb0:	2001      	moveq	r0, #1
 8007fb2:	2000      	movne	r0, #0
 8007fb4:	42b4      	cmp	r4, r6
 8007fb6:	bf08      	it	eq
 8007fb8:	f040 0001 	orreq.w	r0, r0, #1
 8007fbc:	3618      	adds	r6, #24
 8007fbe:	42b4      	cmp	r4, r6
 8007fc0:	bf08      	it	eq
 8007fc2:	f040 0001 	orreq.w	r0, r0, #1
 8007fc6:	3618      	adds	r6, #24
 8007fc8:	42b4      	cmp	r4, r6
 8007fca:	bf08      	it	eq
 8007fcc:	f040 0001 	orreq.w	r0, r0, #1
 8007fd0:	3618      	adds	r6, #24
 8007fd2:	42b4      	cmp	r4, r6
 8007fd4:	bf08      	it	eq
 8007fd6:	f040 0001 	orreq.w	r0, r0, #1
 8007fda:	3618      	adds	r6, #24
 8007fdc:	42b4      	cmp	r4, r6
 8007fde:	bf08      	it	eq
 8007fe0:	f040 0001 	orreq.w	r0, r0, #1
 8007fe4:	3618      	adds	r6, #24
 8007fe6:	42b4      	cmp	r4, r6
 8007fe8:	bf08      	it	eq
 8007fea:	f040 0001 	orreq.w	r0, r0, #1
 8007fee:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8007ff2:	42b4      	cmp	r4, r6
 8007ff4:	bf08      	it	eq
 8007ff6:	f040 0001 	orreq.w	r0, r0, #1
 8007ffa:	3618      	adds	r6, #24
 8007ffc:	42b4      	cmp	r4, r6
 8007ffe:	bf08      	it	eq
 8008000:	f040 0001 	orreq.w	r0, r0, #1
 8008004:	3618      	adds	r6, #24
 8008006:	42b4      	cmp	r4, r6
 8008008:	bf08      	it	eq
 800800a:	f040 0001 	orreq.w	r0, r0, #1
 800800e:	3618      	adds	r6, #24
 8008010:	42b4      	cmp	r4, r6
 8008012:	bf08      	it	eq
 8008014:	f040 0001 	orreq.w	r0, r0, #1
 8008018:	3618      	adds	r6, #24
 800801a:	42b4      	cmp	r4, r6
 800801c:	bf08      	it	eq
 800801e:	f040 0001 	orreq.w	r0, r0, #1
 8008022:	3618      	adds	r6, #24
 8008024:	42b4      	cmp	r4, r6
 8008026:	bf08      	it	eq
 8008028:	f040 0001 	orreq.w	r0, r0, #1
 800802c:	3618      	adds	r6, #24
 800802e:	42b4      	cmp	r4, r6
 8008030:	bf08      	it	eq
 8008032:	f040 0001 	orreq.w	r0, r0, #1
 8008036:	3618      	adds	r6, #24
 8008038:	42b4      	cmp	r4, r6
 800803a:	bf08      	it	eq
 800803c:	f040 0001 	orreq.w	r0, r0, #1
 8008040:	4e75      	ldr	r6, [pc, #468]	; (8008218 <HAL_DMA_Start_IT+0x2cc>)
 8008042:	42b4      	cmp	r4, r6
 8008044:	bf08      	it	eq
 8008046:	f040 0001 	orreq.w	r0, r0, #1
 800804a:	3614      	adds	r6, #20
 800804c:	42b4      	cmp	r4, r6
 800804e:	bf08      	it	eq
 8008050:	f040 0001 	orreq.w	r0, r0, #1
 8008054:	3614      	adds	r6, #20
 8008056:	42b4      	cmp	r4, r6
 8008058:	bf08      	it	eq
 800805a:	f040 0001 	orreq.w	r0, r0, #1
 800805e:	3614      	adds	r6, #20
 8008060:	42b4      	cmp	r4, r6
 8008062:	bf08      	it	eq
 8008064:	f040 0001 	orreq.w	r0, r0, #1
 8008068:	3614      	adds	r6, #20
 800806a:	42b4      	cmp	r4, r6
 800806c:	bf08      	it	eq
 800806e:	f040 0001 	orreq.w	r0, r0, #1
 8008072:	3614      	adds	r6, #20
 8008074:	42b4      	cmp	r4, r6
 8008076:	bf08      	it	eq
 8008078:	f040 0001 	orreq.w	r0, r0, #1
 800807c:	3614      	adds	r6, #20
 800807e:	42b4      	cmp	r4, r6
 8008080:	bf08      	it	eq
 8008082:	f040 0001 	orreq.w	r0, r0, #1
 8008086:	b910      	cbnz	r0, 800808e <HAL_DMA_Start_IT+0x142>
 8008088:	4864      	ldr	r0, [pc, #400]	; (800821c <HAL_DMA_Start_IT+0x2d0>)
 800808a:	4284      	cmp	r4, r0
 800808c:	d10a      	bne.n	80080a4 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800808e:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 8008092:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8008094:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 8008098:	b110      	cbz	r0, 80080a0 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800809a:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 800809e:	6044      	str	r4, [r0, #4]
 80080a0:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080a4:	485b      	ldr	r0, [pc, #364]	; (8008214 <HAL_DMA_Start_IT+0x2c8>)
 80080a6:	4e5a      	ldr	r6, [pc, #360]	; (8008210 <HAL_DMA_Start_IT+0x2c4>)
 80080a8:	42b4      	cmp	r4, r6
 80080aa:	bf18      	it	ne
 80080ac:	4284      	cmpne	r4, r0
 80080ae:	f106 0618 	add.w	r6, r6, #24
 80080b2:	bf0c      	ite	eq
 80080b4:	2001      	moveq	r0, #1
 80080b6:	2000      	movne	r0, #0
 80080b8:	42b4      	cmp	r4, r6
 80080ba:	bf08      	it	eq
 80080bc:	f040 0001 	orreq.w	r0, r0, #1
 80080c0:	3618      	adds	r6, #24
 80080c2:	42b4      	cmp	r4, r6
 80080c4:	bf08      	it	eq
 80080c6:	f040 0001 	orreq.w	r0, r0, #1
 80080ca:	3618      	adds	r6, #24
 80080cc:	42b4      	cmp	r4, r6
 80080ce:	bf08      	it	eq
 80080d0:	f040 0001 	orreq.w	r0, r0, #1
 80080d4:	3618      	adds	r6, #24
 80080d6:	42b4      	cmp	r4, r6
 80080d8:	bf08      	it	eq
 80080da:	f040 0001 	orreq.w	r0, r0, #1
 80080de:	3618      	adds	r6, #24
 80080e0:	42b4      	cmp	r4, r6
 80080e2:	bf08      	it	eq
 80080e4:	f040 0001 	orreq.w	r0, r0, #1
 80080e8:	3618      	adds	r6, #24
 80080ea:	42b4      	cmp	r4, r6
 80080ec:	bf08      	it	eq
 80080ee:	f040 0001 	orreq.w	r0, r0, #1
 80080f2:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80080f6:	42b4      	cmp	r4, r6
 80080f8:	bf08      	it	eq
 80080fa:	f040 0001 	orreq.w	r0, r0, #1
 80080fe:	3618      	adds	r6, #24
 8008100:	42b4      	cmp	r4, r6
 8008102:	bf08      	it	eq
 8008104:	f040 0001 	orreq.w	r0, r0, #1
 8008108:	3618      	adds	r6, #24
 800810a:	42b4      	cmp	r4, r6
 800810c:	bf08      	it	eq
 800810e:	f040 0001 	orreq.w	r0, r0, #1
 8008112:	3618      	adds	r6, #24
 8008114:	42b4      	cmp	r4, r6
 8008116:	bf08      	it	eq
 8008118:	f040 0001 	orreq.w	r0, r0, #1
 800811c:	3618      	adds	r6, #24
 800811e:	42b4      	cmp	r4, r6
 8008120:	bf08      	it	eq
 8008122:	f040 0001 	orreq.w	r0, r0, #1
 8008126:	3618      	adds	r6, #24
 8008128:	42b4      	cmp	r4, r6
 800812a:	bf08      	it	eq
 800812c:	f040 0001 	orreq.w	r0, r0, #1
 8008130:	3618      	adds	r6, #24
 8008132:	42b4      	cmp	r4, r6
 8008134:	bf08      	it	eq
 8008136:	f040 0001 	orreq.w	r0, r0, #1
 800813a:	b918      	cbnz	r0, 8008144 <HAL_DMA_Start_IT+0x1f8>
 800813c:	4838      	ldr	r0, [pc, #224]	; (8008220 <HAL_DMA_Start_IT+0x2d4>)
 800813e:	4284      	cmp	r4, r0
 8008140:	f040 817b 	bne.w	800843a <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008144:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8008148:	f000 041f 	and.w	r4, r0, #31
 800814c:	203f      	movs	r0, #63	; 0x3f
 800814e:	40a0      	lsls	r0, r4
 8008150:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008152:	f8dc 4000 	ldr.w	r4, [ip]
 8008156:	6820      	ldr	r0, [r4, #0]
 8008158:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800815c:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800815e:	f8dc 0000 	ldr.w	r0, [ip]
 8008162:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008164:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8008168:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800816a:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800816e:	f000 815b 	beq.w	8008428 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008172:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008174:	f8dc 3000 	ldr.w	r3, [ip]
 8008178:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800817a:	f8dc 4000 	ldr.w	r4, [ip]
 800817e:	4b25      	ldr	r3, [pc, #148]	; (8008214 <HAL_DMA_Start_IT+0x2c8>)
 8008180:	4923      	ldr	r1, [pc, #140]	; (8008210 <HAL_DMA_Start_IT+0x2c4>)
 8008182:	4a28      	ldr	r2, [pc, #160]	; (8008224 <HAL_DMA_Start_IT+0x2d8>)
 8008184:	428c      	cmp	r4, r1
 8008186:	bf18      	it	ne
 8008188:	429c      	cmpne	r4, r3
 800818a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800818e:	bf0c      	ite	eq
 8008190:	2301      	moveq	r3, #1
 8008192:	2300      	movne	r3, #0
 8008194:	4294      	cmp	r4, r2
 8008196:	bf08      	it	eq
 8008198:	f043 0301 	orreq.w	r3, r3, #1
 800819c:	3230      	adds	r2, #48	; 0x30
 800819e:	428c      	cmp	r4, r1
 80081a0:	bf08      	it	eq
 80081a2:	f043 0301 	orreq.w	r3, r3, #1
 80081a6:	3130      	adds	r1, #48	; 0x30
 80081a8:	4294      	cmp	r4, r2
 80081aa:	bf08      	it	eq
 80081ac:	f043 0301 	orreq.w	r3, r3, #1
 80081b0:	3230      	adds	r2, #48	; 0x30
 80081b2:	428c      	cmp	r4, r1
 80081b4:	bf08      	it	eq
 80081b6:	f043 0301 	orreq.w	r3, r3, #1
 80081ba:	3130      	adds	r1, #48	; 0x30
 80081bc:	4294      	cmp	r4, r2
 80081be:	bf08      	it	eq
 80081c0:	f043 0301 	orreq.w	r3, r3, #1
 80081c4:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80081c8:	428c      	cmp	r4, r1
 80081ca:	bf08      	it	eq
 80081cc:	f043 0301 	orreq.w	r3, r3, #1
 80081d0:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80081d4:	4294      	cmp	r4, r2
 80081d6:	bf08      	it	eq
 80081d8:	f043 0301 	orreq.w	r3, r3, #1
 80081dc:	3230      	adds	r2, #48	; 0x30
 80081de:	428c      	cmp	r4, r1
 80081e0:	bf08      	it	eq
 80081e2:	f043 0301 	orreq.w	r3, r3, #1
 80081e6:	3130      	adds	r1, #48	; 0x30
 80081e8:	4294      	cmp	r4, r2
 80081ea:	bf08      	it	eq
 80081ec:	f043 0301 	orreq.w	r3, r3, #1
 80081f0:	3230      	adds	r2, #48	; 0x30
 80081f2:	428c      	cmp	r4, r1
 80081f4:	bf08      	it	eq
 80081f6:	f043 0301 	orreq.w	r3, r3, #1
 80081fa:	3130      	adds	r1, #48	; 0x30
 80081fc:	4294      	cmp	r4, r2
 80081fe:	bf08      	it	eq
 8008200:	f043 0301 	orreq.w	r3, r3, #1
 8008204:	3230      	adds	r2, #48	; 0x30
 8008206:	428c      	cmp	r4, r1
 8008208:	bf08      	it	eq
 800820a:	f043 0301 	orreq.w	r3, r3, #1
 800820e:	e00b      	b.n	8008228 <HAL_DMA_Start_IT+0x2dc>
 8008210:	40020028 	.word	0x40020028
 8008214:	40020010 	.word	0x40020010
 8008218:	58025408 	.word	0x58025408
 800821c:	58025494 	.word	0x58025494
 8008220:	400204b8 	.word	0x400204b8
 8008224:	40020040 	.word	0x40020040
 8008228:	4294      	cmp	r4, r2
 800822a:	bf08      	it	eq
 800822c:	f043 0301 	orreq.w	r3, r3, #1
 8008230:	b91b      	cbnz	r3, 800823a <HAL_DMA_Start_IT+0x2ee>
 8008232:	4b9b      	ldr	r3, [pc, #620]	; (80084a0 <HAL_DMA_Start_IT+0x554>)
 8008234:	429c      	cmp	r4, r3
 8008236:	f040 8143 	bne.w	80084c0 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	f023 031e 	bic.w	r3, r3, #30
 8008240:	f043 0316 	orr.w	r3, r3, #22
 8008244:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8008246:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800824a:	b12b      	cbz	r3, 8008258 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800824c:	f8dc 2000 	ldr.w	r2, [ip]
 8008250:	6813      	ldr	r3, [r2, #0]
 8008252:	f043 0308 	orr.w	r3, r3, #8
 8008256:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008258:	f8dc 4000 	ldr.w	r4, [ip]
 800825c:	4b91      	ldr	r3, [pc, #580]	; (80084a4 <HAL_DMA_Start_IT+0x558>)
 800825e:	4992      	ldr	r1, [pc, #584]	; (80084a8 <HAL_DMA_Start_IT+0x55c>)
 8008260:	4a92      	ldr	r2, [pc, #584]	; (80084ac <HAL_DMA_Start_IT+0x560>)
 8008262:	428c      	cmp	r4, r1
 8008264:	bf18      	it	ne
 8008266:	429c      	cmpne	r4, r3
 8008268:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800826c:	bf0c      	ite	eq
 800826e:	2301      	moveq	r3, #1
 8008270:	2300      	movne	r3, #0
 8008272:	4294      	cmp	r4, r2
 8008274:	bf08      	it	eq
 8008276:	f043 0301 	orreq.w	r3, r3, #1
 800827a:	3230      	adds	r2, #48	; 0x30
 800827c:	428c      	cmp	r4, r1
 800827e:	bf08      	it	eq
 8008280:	f043 0301 	orreq.w	r3, r3, #1
 8008284:	3130      	adds	r1, #48	; 0x30
 8008286:	4294      	cmp	r4, r2
 8008288:	bf08      	it	eq
 800828a:	f043 0301 	orreq.w	r3, r3, #1
 800828e:	3230      	adds	r2, #48	; 0x30
 8008290:	428c      	cmp	r4, r1
 8008292:	bf08      	it	eq
 8008294:	f043 0301 	orreq.w	r3, r3, #1
 8008298:	3130      	adds	r1, #48	; 0x30
 800829a:	4294      	cmp	r4, r2
 800829c:	bf08      	it	eq
 800829e:	f043 0301 	orreq.w	r3, r3, #1
 80082a2:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80082a6:	428c      	cmp	r4, r1
 80082a8:	bf08      	it	eq
 80082aa:	f043 0301 	orreq.w	r3, r3, #1
 80082ae:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80082b2:	4294      	cmp	r4, r2
 80082b4:	bf08      	it	eq
 80082b6:	f043 0301 	orreq.w	r3, r3, #1
 80082ba:	3230      	adds	r2, #48	; 0x30
 80082bc:	428c      	cmp	r4, r1
 80082be:	bf08      	it	eq
 80082c0:	f043 0301 	orreq.w	r3, r3, #1
 80082c4:	3130      	adds	r1, #48	; 0x30
 80082c6:	4294      	cmp	r4, r2
 80082c8:	bf08      	it	eq
 80082ca:	f043 0301 	orreq.w	r3, r3, #1
 80082ce:	3230      	adds	r2, #48	; 0x30
 80082d0:	428c      	cmp	r4, r1
 80082d2:	bf08      	it	eq
 80082d4:	f043 0301 	orreq.w	r3, r3, #1
 80082d8:	3130      	adds	r1, #48	; 0x30
 80082da:	4294      	cmp	r4, r2
 80082dc:	bf08      	it	eq
 80082de:	f043 0301 	orreq.w	r3, r3, #1
 80082e2:	3230      	adds	r2, #48	; 0x30
 80082e4:	428c      	cmp	r4, r1
 80082e6:	bf08      	it	eq
 80082e8:	f043 0301 	orreq.w	r3, r3, #1
 80082ec:	3130      	adds	r1, #48	; 0x30
 80082ee:	4294      	cmp	r4, r2
 80082f0:	bf08      	it	eq
 80082f2:	f043 0301 	orreq.w	r3, r3, #1
 80082f6:	4a6e      	ldr	r2, [pc, #440]	; (80084b0 <HAL_DMA_Start_IT+0x564>)
 80082f8:	428c      	cmp	r4, r1
 80082fa:	bf08      	it	eq
 80082fc:	f043 0301 	orreq.w	r3, r3, #1
 8008300:	496c      	ldr	r1, [pc, #432]	; (80084b4 <HAL_DMA_Start_IT+0x568>)
 8008302:	4294      	cmp	r4, r2
 8008304:	bf08      	it	eq
 8008306:	f043 0301 	orreq.w	r3, r3, #1
 800830a:	3228      	adds	r2, #40	; 0x28
 800830c:	428c      	cmp	r4, r1
 800830e:	bf08      	it	eq
 8008310:	f043 0301 	orreq.w	r3, r3, #1
 8008314:	3128      	adds	r1, #40	; 0x28
 8008316:	4294      	cmp	r4, r2
 8008318:	bf08      	it	eq
 800831a:	f043 0301 	orreq.w	r3, r3, #1
 800831e:	3228      	adds	r2, #40	; 0x28
 8008320:	428c      	cmp	r4, r1
 8008322:	bf08      	it	eq
 8008324:	f043 0301 	orreq.w	r3, r3, #1
 8008328:	3128      	adds	r1, #40	; 0x28
 800832a:	4294      	cmp	r4, r2
 800832c:	bf08      	it	eq
 800832e:	f043 0301 	orreq.w	r3, r3, #1
 8008332:	3228      	adds	r2, #40	; 0x28
 8008334:	428c      	cmp	r4, r1
 8008336:	bf08      	it	eq
 8008338:	f043 0301 	orreq.w	r3, r3, #1
 800833c:	4294      	cmp	r4, r2
 800833e:	bf08      	it	eq
 8008340:	f043 0301 	orreq.w	r3, r3, #1
 8008344:	b913      	cbnz	r3, 800834c <HAL_DMA_Start_IT+0x400>
 8008346:	4b5c      	ldr	r3, [pc, #368]	; (80084b8 <HAL_DMA_Start_IT+0x56c>)
 8008348:	429c      	cmp	r4, r3
 800834a:	d111      	bne.n	8008370 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800834c:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	03d2      	lsls	r2, r2, #15
 8008354:	d503      	bpl.n	800835e <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800835c:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 800835e:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 8008362:	b11b      	cbz	r3, 800836c <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 8008370:	4b4c      	ldr	r3, [pc, #304]	; (80084a4 <HAL_DMA_Start_IT+0x558>)
 8008372:	494d      	ldr	r1, [pc, #308]	; (80084a8 <HAL_DMA_Start_IT+0x55c>)
 8008374:	4a4d      	ldr	r2, [pc, #308]	; (80084ac <HAL_DMA_Start_IT+0x560>)
 8008376:	428c      	cmp	r4, r1
 8008378:	bf18      	it	ne
 800837a:	429c      	cmpne	r4, r3
 800837c:	484f      	ldr	r0, [pc, #316]	; (80084bc <HAL_DMA_Start_IT+0x570>)
 800837e:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8008382:	bf0c      	ite	eq
 8008384:	2301      	moveq	r3, #1
 8008386:	2300      	movne	r3, #0
 8008388:	4294      	cmp	r4, r2
 800838a:	bf08      	it	eq
 800838c:	f043 0301 	orreq.w	r3, r3, #1
 8008390:	3230      	adds	r2, #48	; 0x30
 8008392:	4284      	cmp	r4, r0
 8008394:	bf08      	it	eq
 8008396:	f043 0301 	orreq.w	r3, r3, #1
 800839a:	3060      	adds	r0, #96	; 0x60
 800839c:	4294      	cmp	r4, r2
 800839e:	bf08      	it	eq
 80083a0:	f043 0301 	orreq.w	r3, r3, #1
 80083a4:	3230      	adds	r2, #48	; 0x30
 80083a6:	428c      	cmp	r4, r1
 80083a8:	bf08      	it	eq
 80083aa:	f043 0301 	orreq.w	r3, r3, #1
 80083ae:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 80083b2:	4294      	cmp	r4, r2
 80083b4:	bf08      	it	eq
 80083b6:	f043 0301 	orreq.w	r3, r3, #1
 80083ba:	f502 725c 	add.w	r2, r2, #880	; 0x370
 80083be:	4284      	cmp	r4, r0
 80083c0:	bf08      	it	eq
 80083c2:	f043 0301 	orreq.w	r3, r3, #1
 80083c6:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 80083ca:	4294      	cmp	r4, r2
 80083cc:	bf08      	it	eq
 80083ce:	f043 0301 	orreq.w	r3, r3, #1
 80083d2:	3230      	adds	r2, #48	; 0x30
 80083d4:	428c      	cmp	r4, r1
 80083d6:	bf08      	it	eq
 80083d8:	f043 0301 	orreq.w	r3, r3, #1
 80083dc:	3160      	adds	r1, #96	; 0x60
 80083de:	4294      	cmp	r4, r2
 80083e0:	bf08      	it	eq
 80083e2:	f043 0301 	orreq.w	r3, r3, #1
 80083e6:	3230      	adds	r2, #48	; 0x30
 80083e8:	4284      	cmp	r4, r0
 80083ea:	bf08      	it	eq
 80083ec:	f043 0301 	orreq.w	r3, r3, #1
 80083f0:	4294      	cmp	r4, r2
 80083f2:	bf08      	it	eq
 80083f4:	f043 0301 	orreq.w	r3, r3, #1
 80083f8:	3230      	adds	r2, #48	; 0x30
 80083fa:	428c      	cmp	r4, r1
 80083fc:	bf08      	it	eq
 80083fe:	f043 0301 	orreq.w	r3, r3, #1
 8008402:	4294      	cmp	r4, r2
 8008404:	bf08      	it	eq
 8008406:	f043 0301 	orreq.w	r3, r3, #1
 800840a:	b933      	cbnz	r3, 800841a <HAL_DMA_Start_IT+0x4ce>
 800840c:	3060      	adds	r0, #96	; 0x60
 800840e:	1a20      	subs	r0, r4, r0
 8008410:	fab0 f080 	clz	r0, r0
 8008414:	0940      	lsrs	r0, r0, #5
 8008416:	2800      	cmp	r0, #0
 8008418:	d03d      	beq.n	8008496 <HAL_DMA_Start_IT+0x54a>
 800841a:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800841c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800841e:	f043 0301 	orr.w	r3, r3, #1
 8008422:	6023      	str	r3, [r4, #0]
}
 8008424:	bc70      	pop	{r4, r5, r6}
 8008426:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008428:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800842a:	f8dc 3000 	ldr.w	r3, [ip]
 800842e:	60d9      	str	r1, [r3, #12]
 8008430:	e6a3      	b.n	800817a <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 8008432:	2001      	movs	r0, #1
 8008434:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8008436:	2002      	movs	r0, #2
}
 8008438:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800843a:	481d      	ldr	r0, [pc, #116]	; (80084b0 <HAL_DMA_Start_IT+0x564>)
 800843c:	4e1d      	ldr	r6, [pc, #116]	; (80084b4 <HAL_DMA_Start_IT+0x568>)
 800843e:	42b4      	cmp	r4, r6
 8008440:	bf18      	it	ne
 8008442:	4284      	cmpne	r4, r0
 8008444:	f106 0614 	add.w	r6, r6, #20
 8008448:	bf0c      	ite	eq
 800844a:	2001      	moveq	r0, #1
 800844c:	2000      	movne	r0, #0
 800844e:	42b4      	cmp	r4, r6
 8008450:	bf08      	it	eq
 8008452:	f040 0001 	orreq.w	r0, r0, #1
 8008456:	3614      	adds	r6, #20
 8008458:	42b4      	cmp	r4, r6
 800845a:	bf08      	it	eq
 800845c:	f040 0001 	orreq.w	r0, r0, #1
 8008460:	3614      	adds	r6, #20
 8008462:	42b4      	cmp	r4, r6
 8008464:	bf08      	it	eq
 8008466:	f040 0001 	orreq.w	r0, r0, #1
 800846a:	3614      	adds	r6, #20
 800846c:	42b4      	cmp	r4, r6
 800846e:	bf08      	it	eq
 8008470:	f040 0001 	orreq.w	r0, r0, #1
 8008474:	3614      	adds	r6, #20
 8008476:	42b4      	cmp	r4, r6
 8008478:	bf08      	it	eq
 800847a:	f040 0001 	orreq.w	r0, r0, #1
 800847e:	b910      	cbnz	r0, 8008486 <HAL_DMA_Start_IT+0x53a>
 8008480:	480d      	ldr	r0, [pc, #52]	; (80084b8 <HAL_DMA_Start_IT+0x56c>)
 8008482:	4284      	cmp	r4, r0
 8008484:	d11c      	bne.n	80084c0 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008486:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800848a:	f000 041f 	and.w	r4, r0, #31
 800848e:	2001      	movs	r0, #1
 8008490:	40a0      	lsls	r0, r4
 8008492:	6068      	str	r0, [r5, #4]
 8008494:	e663      	b.n	800815e <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 8008496:	6823      	ldr	r3, [r4, #0]
 8008498:	f043 0301 	orr.w	r3, r3, #1
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	e56d      	b.n	8007f7c <HAL_DMA_Start_IT+0x30>
 80084a0:	400204b8 	.word	0x400204b8
 80084a4:	40020010 	.word	0x40020010
 80084a8:	40020028 	.word	0x40020028
 80084ac:	40020040 	.word	0x40020040
 80084b0:	58025408 	.word	0x58025408
 80084b4:	5802541c 	.word	0x5802541c
 80084b8:	58025494 	.word	0x58025494
 80084bc:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80084c0:	6823      	ldr	r3, [r4, #0]
 80084c2:	f023 030e 	bic.w	r3, r3, #14
 80084c6:	f043 030a 	orr.w	r3, r3, #10
 80084ca:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80084cc:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f43f aec1 	beq.w	8008258 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80084d6:	f8dc 2000 	ldr.w	r2, [ip]
 80084da:	6813      	ldr	r3, [r2, #0]
 80084dc:	f043 0304 	orr.w	r3, r3, #4
 80084e0:	6013      	str	r3, [r2, #0]
 80084e2:	e6b9      	b.n	8008258 <HAL_DMA_Start_IT+0x30c>

080084e4 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d065      	beq.n	80085b4 <HAL_DMA_Abort_IT+0xd0>
{
 80084e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084ec:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 80084f0:	4603      	mov	r3, r0
 80084f2:	2a02      	cmp	r2, #2
 80084f4:	d159      	bne.n	80085aa <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084f6:	6801      	ldr	r1, [r0, #0]
 80084f8:	4883      	ldr	r0, [pc, #524]	; (8008708 <HAL_DMA_Abort_IT+0x224>)
 80084fa:	4281      	cmp	r1, r0
 80084fc:	d04b      	beq.n	8008596 <HAL_DMA_Abort_IT+0xb2>
 80084fe:	4c83      	ldr	r4, [pc, #524]	; (800870c <HAL_DMA_Abort_IT+0x228>)
 8008500:	42a1      	cmp	r1, r4
 8008502:	d048      	beq.n	8008596 <HAL_DMA_Abort_IT+0xb2>
 8008504:	f8df a228 	ldr.w	sl, [pc, #552]	; 8008730 <HAL_DMA_Abort_IT+0x24c>
 8008508:	f8df b214 	ldr.w	fp, [pc, #532]	; 8008720 <HAL_DMA_Abort_IT+0x23c>
 800850c:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8008734 <HAL_DMA_Abort_IT+0x250>
 8008510:	4559      	cmp	r1, fp
 8008512:	bf18      	it	ne
 8008514:	4551      	cmpne	r1, sl
 8008516:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8008738 <HAL_DMA_Abort_IT+0x254>
 800851a:	f8df e220 	ldr.w	lr, [pc, #544]	; 800873c <HAL_DMA_Abort_IT+0x258>
 800851e:	bf0c      	ite	eq
 8008520:	2201      	moveq	r2, #1
 8008522:	2200      	movne	r2, #0
 8008524:	f8df c218 	ldr.w	ip, [pc, #536]	; 8008740 <HAL_DMA_Abort_IT+0x25c>
 8008528:	4549      	cmp	r1, r9
 800852a:	bf08      	it	eq
 800852c:	f042 0201 	orreq.w	r2, r2, #1
 8008530:	4d77      	ldr	r5, [pc, #476]	; (8008710 <HAL_DMA_Abort_IT+0x22c>)
 8008532:	4f78      	ldr	r7, [pc, #480]	; (8008714 <HAL_DMA_Abort_IT+0x230>)
 8008534:	4541      	cmp	r1, r8
 8008536:	bf08      	it	eq
 8008538:	f042 0201 	orreq.w	r2, r2, #1
 800853c:	4e76      	ldr	r6, [pc, #472]	; (8008718 <HAL_DMA_Abort_IT+0x234>)
 800853e:	4571      	cmp	r1, lr
 8008540:	bf08      	it	eq
 8008542:	f042 0201 	orreq.w	r2, r2, #1
 8008546:	4561      	cmp	r1, ip
 8008548:	bf08      	it	eq
 800854a:	f042 0201 	orreq.w	r2, r2, #1
 800854e:	42a9      	cmp	r1, r5
 8008550:	bf08      	it	eq
 8008552:	f042 0201 	orreq.w	r2, r2, #1
 8008556:	3518      	adds	r5, #24
 8008558:	42a9      	cmp	r1, r5
 800855a:	bf08      	it	eq
 800855c:	f042 0201 	orreq.w	r2, r2, #1
 8008560:	3518      	adds	r5, #24
 8008562:	42a9      	cmp	r1, r5
 8008564:	bf08      	it	eq
 8008566:	f042 0201 	orreq.w	r2, r2, #1
 800856a:	3518      	adds	r5, #24
 800856c:	42a9      	cmp	r1, r5
 800856e:	bf08      	it	eq
 8008570:	f042 0201 	orreq.w	r2, r2, #1
 8008574:	3548      	adds	r5, #72	; 0x48
 8008576:	42b9      	cmp	r1, r7
 8008578:	bf08      	it	eq
 800857a:	f042 0201 	orreq.w	r2, r2, #1
 800857e:	42b1      	cmp	r1, r6
 8008580:	bf08      	it	eq
 8008582:	f042 0201 	orreq.w	r2, r2, #1
 8008586:	42a9      	cmp	r1, r5
 8008588:	bf08      	it	eq
 800858a:	f042 0201 	orreq.w	r2, r2, #1
 800858e:	b912      	cbnz	r2, 8008596 <HAL_DMA_Abort_IT+0xb2>
 8008590:	4a62      	ldr	r2, [pc, #392]	; (800871c <HAL_DMA_Abort_IT+0x238>)
 8008592:	4291      	cmp	r1, r2
 8008594:	d110      	bne.n	80085b8 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8008596:	2204      	movs	r2, #4
  return HAL_OK;
 8008598:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800859a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800859e:	680b      	ldr	r3, [r1, #0]
 80085a0:	f023 0301 	bic.w	r3, r3, #1
 80085a4:	600b      	str	r3, [r1, #0]
}
 80085a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085aa:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 80085ac:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085ae:	655a      	str	r2, [r3, #84]	; 0x54
}
 80085b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 80085b4:	2001      	movs	r0, #1
}
 80085b6:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80085b8:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80085ba:	4c54      	ldr	r4, [pc, #336]	; (800870c <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80085bc:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80085c0:	4857      	ldr	r0, [pc, #348]	; (8008720 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80085c2:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 80085c4:	6819      	ldr	r1, [r3, #0]
 80085c6:	680a      	ldr	r2, [r1, #0]
 80085c8:	f022 0201 	bic.w	r2, r2, #1
 80085cc:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80085ce:	4a4e      	ldr	r2, [pc, #312]	; (8008708 <HAL_DMA_Abort_IT+0x224>)
 80085d0:	6819      	ldr	r1, [r3, #0]
 80085d2:	42a1      	cmp	r1, r4
 80085d4:	bf18      	it	ne
 80085d6:	4291      	cmpne	r1, r2
 80085d8:	f104 0430 	add.w	r4, r4, #48	; 0x30
 80085dc:	bf0c      	ite	eq
 80085de:	2201      	moveq	r2, #1
 80085e0:	2200      	movne	r2, #0
 80085e2:	4281      	cmp	r1, r0
 80085e4:	bf08      	it	eq
 80085e6:	f042 0201 	orreq.w	r2, r2, #1
 80085ea:	3030      	adds	r0, #48	; 0x30
 80085ec:	42a1      	cmp	r1, r4
 80085ee:	bf08      	it	eq
 80085f0:	f042 0201 	orreq.w	r2, r2, #1
 80085f4:	3430      	adds	r4, #48	; 0x30
 80085f6:	4281      	cmp	r1, r0
 80085f8:	bf08      	it	eq
 80085fa:	f042 0201 	orreq.w	r2, r2, #1
 80085fe:	3030      	adds	r0, #48	; 0x30
 8008600:	42a1      	cmp	r1, r4
 8008602:	bf08      	it	eq
 8008604:	f042 0201 	orreq.w	r2, r2, #1
 8008608:	3430      	adds	r4, #48	; 0x30
 800860a:	4281      	cmp	r1, r0
 800860c:	bf08      	it	eq
 800860e:	f042 0201 	orreq.w	r2, r2, #1
 8008612:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8008616:	42a1      	cmp	r1, r4
 8008618:	bf08      	it	eq
 800861a:	f042 0201 	orreq.w	r2, r2, #1
 800861e:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8008622:	4281      	cmp	r1, r0
 8008624:	bf08      	it	eq
 8008626:	f042 0201 	orreq.w	r2, r2, #1
 800862a:	3030      	adds	r0, #48	; 0x30
 800862c:	42a1      	cmp	r1, r4
 800862e:	bf08      	it	eq
 8008630:	f042 0201 	orreq.w	r2, r2, #1
 8008634:	3430      	adds	r4, #48	; 0x30
 8008636:	4281      	cmp	r1, r0
 8008638:	bf08      	it	eq
 800863a:	f042 0201 	orreq.w	r2, r2, #1
 800863e:	3030      	adds	r0, #48	; 0x30
 8008640:	42a1      	cmp	r1, r4
 8008642:	bf08      	it	eq
 8008644:	f042 0201 	orreq.w	r2, r2, #1
 8008648:	3430      	adds	r4, #48	; 0x30
 800864a:	4281      	cmp	r1, r0
 800864c:	bf08      	it	eq
 800864e:	f042 0201 	orreq.w	r2, r2, #1
 8008652:	3030      	adds	r0, #48	; 0x30
 8008654:	42a1      	cmp	r1, r4
 8008656:	bf08      	it	eq
 8008658:	f042 0201 	orreq.w	r2, r2, #1
 800865c:	3430      	adds	r4, #48	; 0x30
 800865e:	4281      	cmp	r1, r0
 8008660:	bf08      	it	eq
 8008662:	f042 0201 	orreq.w	r2, r2, #1
 8008666:	482f      	ldr	r0, [pc, #188]	; (8008724 <HAL_DMA_Abort_IT+0x240>)
 8008668:	42a1      	cmp	r1, r4
 800866a:	bf08      	it	eq
 800866c:	f042 0201 	orreq.w	r2, r2, #1
 8008670:	4c2d      	ldr	r4, [pc, #180]	; (8008728 <HAL_DMA_Abort_IT+0x244>)
 8008672:	4281      	cmp	r1, r0
 8008674:	bf08      	it	eq
 8008676:	f042 0201 	orreq.w	r2, r2, #1
 800867a:	3028      	adds	r0, #40	; 0x28
 800867c:	42a1      	cmp	r1, r4
 800867e:	bf08      	it	eq
 8008680:	f042 0201 	orreq.w	r2, r2, #1
 8008684:	3428      	adds	r4, #40	; 0x28
 8008686:	4281      	cmp	r1, r0
 8008688:	bf08      	it	eq
 800868a:	f042 0201 	orreq.w	r2, r2, #1
 800868e:	3028      	adds	r0, #40	; 0x28
 8008690:	42a1      	cmp	r1, r4
 8008692:	bf08      	it	eq
 8008694:	f042 0201 	orreq.w	r2, r2, #1
 8008698:	3428      	adds	r4, #40	; 0x28
 800869a:	4281      	cmp	r1, r0
 800869c:	bf08      	it	eq
 800869e:	f042 0201 	orreq.w	r2, r2, #1
 80086a2:	3028      	adds	r0, #40	; 0x28
 80086a4:	42a1      	cmp	r1, r4
 80086a6:	bf08      	it	eq
 80086a8:	f042 0201 	orreq.w	r2, r2, #1
 80086ac:	4281      	cmp	r1, r0
 80086ae:	bf08      	it	eq
 80086b0:	f042 0201 	orreq.w	r2, r2, #1
 80086b4:	b912      	cbnz	r2, 80086bc <HAL_DMA_Abort_IT+0x1d8>
 80086b6:	4a1d      	ldr	r2, [pc, #116]	; (800872c <HAL_DMA_Abort_IT+0x248>)
 80086b8:	4291      	cmp	r1, r2
 80086ba:	d117      	bne.n	80086ec <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80086bc:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80086be:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80086c0:	6801      	ldr	r1, [r0, #0]
 80086c2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80086c6:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80086c8:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80086cc:	f001 011f 	and.w	r1, r1, #31
 80086d0:	408a      	lsls	r2, r1
 80086d2:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086d4:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 80086d8:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 80086da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80086dc:	b132      	cbz	r2, 80086ec <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80086de:	6811      	ldr	r1, [r2, #0]
 80086e0:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80086e4:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086e6:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 80086ea:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 80086ec:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 80086ee:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 80086f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 80086f2:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80086f6:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 80086fa:	b11a      	cbz	r2, 8008704 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 80086fc:	4618      	mov	r0, r3
 80086fe:	4790      	blx	r2
  return HAL_OK;
 8008700:	4620      	mov	r0, r4
 8008702:	e755      	b.n	80085b0 <HAL_DMA_Abort_IT+0xcc>
 8008704:	4610      	mov	r0, r2
 8008706:	e753      	b.n	80085b0 <HAL_DMA_Abort_IT+0xcc>
 8008708:	40020010 	.word	0x40020010
 800870c:	40020028 	.word	0x40020028
 8008710:	40020410 	.word	0x40020410
 8008714:	40020470 	.word	0x40020470
 8008718:	40020488 	.word	0x40020488
 800871c:	400204b8 	.word	0x400204b8
 8008720:	40020040 	.word	0x40020040
 8008724:	58025408 	.word	0x58025408
 8008728:	5802541c 	.word	0x5802541c
 800872c:	58025494 	.word	0x58025494
 8008730:	40020058 	.word	0x40020058
 8008734:	40020070 	.word	0x40020070
 8008738:	40020088 	.word	0x40020088
 800873c:	400200a0 	.word	0x400200a0
 8008740:	400200b8 	.word	0x400200b8

08008744 <HAL_DMA_IRQHandler>:
{
 8008744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 8008748:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800874a:	4b9e      	ldr	r3, [pc, #632]	; (80089c4 <HAL_DMA_IRQHandler+0x280>)
{
 800874c:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800874e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8008750:	681e      	ldr	r6, [r3, #0]
{
 8008752:	4680      	mov	r8, r0
  __IO uint32_t count = 0U;
 8008754:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008756:	6803      	ldr	r3, [r0, #0]
 8008758:	4a9b      	ldr	r2, [pc, #620]	; (80089c8 <HAL_DMA_IRQHandler+0x284>)
  tmpisr_dma  = regs_dma->ISR;
 800875a:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800875c:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 800875e:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008760:	d048      	beq.n	80087f4 <HAL_DMA_IRQHandler+0xb0>
 8008762:	3218      	adds	r2, #24
 8008764:	4293      	cmp	r3, r2
 8008766:	d045      	beq.n	80087f4 <HAL_DMA_IRQHandler+0xb0>
 8008768:	3218      	adds	r2, #24
 800876a:	4f98      	ldr	r7, [pc, #608]	; (80089cc <HAL_DMA_IRQHandler+0x288>)
 800876c:	42bb      	cmp	r3, r7
 800876e:	bf18      	it	ne
 8008770:	4293      	cmpne	r3, r2
 8008772:	f107 0718 	add.w	r7, r7, #24
 8008776:	bf0c      	ite	eq
 8008778:	2201      	moveq	r2, #1
 800877a:	2200      	movne	r2, #0
 800877c:	42bb      	cmp	r3, r7
 800877e:	bf08      	it	eq
 8008780:	f042 0201 	orreq.w	r2, r2, #1
 8008784:	3718      	adds	r7, #24
 8008786:	42bb      	cmp	r3, r7
 8008788:	bf08      	it	eq
 800878a:	f042 0201 	orreq.w	r2, r2, #1
 800878e:	3718      	adds	r7, #24
 8008790:	42bb      	cmp	r3, r7
 8008792:	bf08      	it	eq
 8008794:	f042 0201 	orreq.w	r2, r2, #1
 8008798:	3718      	adds	r7, #24
 800879a:	42bb      	cmp	r3, r7
 800879c:	bf08      	it	eq
 800879e:	f042 0201 	orreq.w	r2, r2, #1
 80087a2:	f507 7756 	add.w	r7, r7, #856	; 0x358
 80087a6:	42bb      	cmp	r3, r7
 80087a8:	bf08      	it	eq
 80087aa:	f042 0201 	orreq.w	r2, r2, #1
 80087ae:	3718      	adds	r7, #24
 80087b0:	42bb      	cmp	r3, r7
 80087b2:	bf08      	it	eq
 80087b4:	f042 0201 	orreq.w	r2, r2, #1
 80087b8:	3718      	adds	r7, #24
 80087ba:	42bb      	cmp	r3, r7
 80087bc:	bf08      	it	eq
 80087be:	f042 0201 	orreq.w	r2, r2, #1
 80087c2:	3718      	adds	r7, #24
 80087c4:	42bb      	cmp	r3, r7
 80087c6:	bf08      	it	eq
 80087c8:	f042 0201 	orreq.w	r2, r2, #1
 80087cc:	3718      	adds	r7, #24
 80087ce:	42bb      	cmp	r3, r7
 80087d0:	bf08      	it	eq
 80087d2:	f042 0201 	orreq.w	r2, r2, #1
 80087d6:	3718      	adds	r7, #24
 80087d8:	42bb      	cmp	r3, r7
 80087da:	bf08      	it	eq
 80087dc:	f042 0201 	orreq.w	r2, r2, #1
 80087e0:	3718      	adds	r7, #24
 80087e2:	42bb      	cmp	r3, r7
 80087e4:	bf08      	it	eq
 80087e6:	f042 0201 	orreq.w	r2, r2, #1
 80087ea:	b91a      	cbnz	r2, 80087f4 <HAL_DMA_IRQHandler+0xb0>
 80087ec:	4a78      	ldr	r2, [pc, #480]	; (80089d0 <HAL_DMA_IRQHandler+0x28c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	f040 82b3 	bne.w	8008d5a <HAL_DMA_IRQHandler+0x616>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80087f4:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
 80087f8:	2208      	movs	r2, #8
 80087fa:	f000 011f 	and.w	r1, r0, #31
 80087fe:	408a      	lsls	r2, r1
 8008800:	4222      	tst	r2, r4
 8008802:	f040 81a5 	bne.w	8008b50 <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008806:	fa24 f201 	lsr.w	r2, r4, r1
 800880a:	07d2      	lsls	r2, r2, #31
 800880c:	d511      	bpl.n	8008832 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800880e:	695a      	ldr	r2, [r3, #20]
 8008810:	0612      	lsls	r2, r2, #24
 8008812:	f140 8269 	bpl.w	8008ce8 <HAL_DMA_IRQHandler+0x5a4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008816:	2301      	movs	r3, #1
 8008818:	fa03 f101 	lsl.w	r1, r3, r1
 800881c:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800881e:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008822:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008826:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800882a:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800882e:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008832:	f04f 0c04 	mov.w	ip, #4
 8008836:	fa0c fc01 	lsl.w	ip, ip, r1
 800883a:	ea1c 0f04 	tst.w	ip, r4
 800883e:	d062      	beq.n	8008906 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008840:	f8d8 2000 	ldr.w	r2, [r8]
 8008844:	4f60      	ldr	r7, [pc, #384]	; (80089c8 <HAL_DMA_IRQHandler+0x284>)
 8008846:	4b63      	ldr	r3, [pc, #396]	; (80089d4 <HAL_DMA_IRQHandler+0x290>)
 8008848:	429a      	cmp	r2, r3
 800884a:	bf18      	it	ne
 800884c:	42ba      	cmpne	r2, r7
 800884e:	f103 0318 	add.w	r3, r3, #24
 8008852:	bf0c      	ite	eq
 8008854:	2701      	moveq	r7, #1
 8008856:	2700      	movne	r7, #0
 8008858:	429a      	cmp	r2, r3
 800885a:	bf08      	it	eq
 800885c:	f047 0701 	orreq.w	r7, r7, #1
 8008860:	3318      	adds	r3, #24
 8008862:	429a      	cmp	r2, r3
 8008864:	bf08      	it	eq
 8008866:	f047 0701 	orreq.w	r7, r7, #1
 800886a:	3318      	adds	r3, #24
 800886c:	429a      	cmp	r2, r3
 800886e:	bf08      	it	eq
 8008870:	f047 0701 	orreq.w	r7, r7, #1
 8008874:	3318      	adds	r3, #24
 8008876:	429a      	cmp	r2, r3
 8008878:	bf08      	it	eq
 800887a:	f047 0701 	orreq.w	r7, r7, #1
 800887e:	3318      	adds	r3, #24
 8008880:	429a      	cmp	r2, r3
 8008882:	bf08      	it	eq
 8008884:	f047 0701 	orreq.w	r7, r7, #1
 8008888:	3318      	adds	r3, #24
 800888a:	429a      	cmp	r2, r3
 800888c:	bf08      	it	eq
 800888e:	f047 0701 	orreq.w	r7, r7, #1
 8008892:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008896:	429a      	cmp	r2, r3
 8008898:	bf08      	it	eq
 800889a:	f047 0701 	orreq.w	r7, r7, #1
 800889e:	3318      	adds	r3, #24
 80088a0:	429a      	cmp	r2, r3
 80088a2:	bf08      	it	eq
 80088a4:	f047 0701 	orreq.w	r7, r7, #1
 80088a8:	3318      	adds	r3, #24
 80088aa:	429a      	cmp	r2, r3
 80088ac:	bf08      	it	eq
 80088ae:	f047 0701 	orreq.w	r7, r7, #1
 80088b2:	3318      	adds	r3, #24
 80088b4:	429a      	cmp	r2, r3
 80088b6:	bf08      	it	eq
 80088b8:	f047 0701 	orreq.w	r7, r7, #1
 80088bc:	3318      	adds	r3, #24
 80088be:	429a      	cmp	r2, r3
 80088c0:	bf08      	it	eq
 80088c2:	f047 0701 	orreq.w	r7, r7, #1
 80088c6:	3318      	adds	r3, #24
 80088c8:	429a      	cmp	r2, r3
 80088ca:	bf08      	it	eq
 80088cc:	f047 0701 	orreq.w	r7, r7, #1
 80088d0:	3318      	adds	r3, #24
 80088d2:	429a      	cmp	r2, r3
 80088d4:	bf08      	it	eq
 80088d6:	f047 0701 	orreq.w	r7, r7, #1
 80088da:	4613      	mov	r3, r2
 80088dc:	b91f      	cbnz	r7, 80088e6 <HAL_DMA_IRQHandler+0x1a2>
 80088de:	4f3c      	ldr	r7, [pc, #240]	; (80089d0 <HAL_DMA_IRQHandler+0x28c>)
 80088e0:	42ba      	cmp	r2, r7
 80088e2:	f040 8277 	bne.w	8008dd4 <HAL_DMA_IRQHandler+0x690>
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	0797      	lsls	r7, r2, #30
 80088ea:	f140 8209 	bpl.w	8008d00 <HAL_DMA_IRQHandler+0x5bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80088ee:	f8c5 c008 	str.w	ip, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80088f2:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80088f6:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80088fa:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80088fe:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008902:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008906:	f04f 0c10 	mov.w	ip, #16
 800890a:	fa0c fc01 	lsl.w	ip, ip, r1
 800890e:	ea1c 0f04 	tst.w	ip, r4
 8008912:	d079      	beq.n	8008a08 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008914:	f8d8 2000 	ldr.w	r2, [r8]
 8008918:	4f2b      	ldr	r7, [pc, #172]	; (80089c8 <HAL_DMA_IRQHandler+0x284>)
 800891a:	4b2e      	ldr	r3, [pc, #184]	; (80089d4 <HAL_DMA_IRQHandler+0x290>)
 800891c:	429a      	cmp	r2, r3
 800891e:	bf18      	it	ne
 8008920:	42ba      	cmpne	r2, r7
 8008922:	f103 0318 	add.w	r3, r3, #24
 8008926:	bf0c      	ite	eq
 8008928:	2701      	moveq	r7, #1
 800892a:	2700      	movne	r7, #0
 800892c:	429a      	cmp	r2, r3
 800892e:	bf08      	it	eq
 8008930:	f047 0701 	orreq.w	r7, r7, #1
 8008934:	3318      	adds	r3, #24
 8008936:	429a      	cmp	r2, r3
 8008938:	bf08      	it	eq
 800893a:	f047 0701 	orreq.w	r7, r7, #1
 800893e:	3318      	adds	r3, #24
 8008940:	429a      	cmp	r2, r3
 8008942:	bf08      	it	eq
 8008944:	f047 0701 	orreq.w	r7, r7, #1
 8008948:	3318      	adds	r3, #24
 800894a:	429a      	cmp	r2, r3
 800894c:	bf08      	it	eq
 800894e:	f047 0701 	orreq.w	r7, r7, #1
 8008952:	3318      	adds	r3, #24
 8008954:	429a      	cmp	r2, r3
 8008956:	bf08      	it	eq
 8008958:	f047 0701 	orreq.w	r7, r7, #1
 800895c:	3318      	adds	r3, #24
 800895e:	429a      	cmp	r2, r3
 8008960:	bf08      	it	eq
 8008962:	f047 0701 	orreq.w	r7, r7, #1
 8008966:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800896a:	429a      	cmp	r2, r3
 800896c:	bf08      	it	eq
 800896e:	f047 0701 	orreq.w	r7, r7, #1
 8008972:	3318      	adds	r3, #24
 8008974:	429a      	cmp	r2, r3
 8008976:	bf08      	it	eq
 8008978:	f047 0701 	orreq.w	r7, r7, #1
 800897c:	3318      	adds	r3, #24
 800897e:	429a      	cmp	r2, r3
 8008980:	bf08      	it	eq
 8008982:	f047 0701 	orreq.w	r7, r7, #1
 8008986:	3318      	adds	r3, #24
 8008988:	429a      	cmp	r2, r3
 800898a:	bf08      	it	eq
 800898c:	f047 0701 	orreq.w	r7, r7, #1
 8008990:	3318      	adds	r3, #24
 8008992:	429a      	cmp	r2, r3
 8008994:	bf08      	it	eq
 8008996:	f047 0701 	orreq.w	r7, r7, #1
 800899a:	3318      	adds	r3, #24
 800899c:	429a      	cmp	r2, r3
 800899e:	bf08      	it	eq
 80089a0:	f047 0701 	orreq.w	r7, r7, #1
 80089a4:	3318      	adds	r3, #24
 80089a6:	429a      	cmp	r2, r3
 80089a8:	bf08      	it	eq
 80089aa:	f047 0701 	orreq.w	r7, r7, #1
 80089ae:	4613      	mov	r3, r2
 80089b0:	b91f      	cbnz	r7, 80089ba <HAL_DMA_IRQHandler+0x276>
 80089b2:	4f07      	ldr	r7, [pc, #28]	; (80089d0 <HAL_DMA_IRQHandler+0x28c>)
 80089b4:	42ba      	cmp	r2, r7
 80089b6:	f040 814b 	bne.w	8008c50 <HAL_DMA_IRQHandler+0x50c>
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	0710      	lsls	r0, r2, #28
 80089be:	f140 818c 	bpl.w	8008cda <HAL_DMA_IRQHandler+0x596>
 80089c2:	e009      	b.n	80089d8 <HAL_DMA_IRQHandler+0x294>
 80089c4:	20000094 	.word	0x20000094
 80089c8:	40020010 	.word	0x40020010
 80089cc:	40020058 	.word	0x40020058
 80089d0:	400204b8 	.word	0x400204b8
 80089d4:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80089d8:	f8c5 c008 	str.w	ip, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80089dc:	f8d8 3000 	ldr.w	r3, [r8]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	0352      	lsls	r2, r2, #13
 80089e4:	f100 8195 	bmi.w	8008d12 <HAL_DMA_IRQHandler+0x5ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	05d7      	lsls	r7, r2, #23
 80089ec:	d403      	bmi.n	80089f6 <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	f022 0208 	bic.w	r2, r2, #8
 80089f4:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80089f6:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 80089fa:	b10b      	cbz	r3, 8008a00 <HAL_DMA_IRQHandler+0x2bc>
            hdma->XferHalfCpltCallback(hdma);
 80089fc:	4640      	mov	r0, r8
 80089fe:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a00:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
 8008a04:	f001 011f 	and.w	r1, r1, #31
 8008a08:	2320      	movs	r3, #32
 8008a0a:	fa03 f101 	lsl.w	r1, r3, r1
 8008a0e:	4221      	tst	r1, r4
 8008a10:	d069      	beq.n	8008ae6 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008a12:	f8d8 3000 	ldr.w	r3, [r8]
 8008a16:	4a97      	ldr	r2, [pc, #604]	; (8008c74 <HAL_DMA_IRQHandler+0x530>)
 8008a18:	4c97      	ldr	r4, [pc, #604]	; (8008c78 <HAL_DMA_IRQHandler+0x534>)
 8008a1a:	42a3      	cmp	r3, r4
 8008a1c:	bf18      	it	ne
 8008a1e:	4293      	cmpne	r3, r2
 8008a20:	f104 0418 	add.w	r4, r4, #24
 8008a24:	bf0c      	ite	eq
 8008a26:	2201      	moveq	r2, #1
 8008a28:	2200      	movne	r2, #0
 8008a2a:	42a3      	cmp	r3, r4
 8008a2c:	bf08      	it	eq
 8008a2e:	f042 0201 	orreq.w	r2, r2, #1
 8008a32:	3418      	adds	r4, #24
 8008a34:	42a3      	cmp	r3, r4
 8008a36:	bf08      	it	eq
 8008a38:	f042 0201 	orreq.w	r2, r2, #1
 8008a3c:	3418      	adds	r4, #24
 8008a3e:	42a3      	cmp	r3, r4
 8008a40:	bf08      	it	eq
 8008a42:	f042 0201 	orreq.w	r2, r2, #1
 8008a46:	3418      	adds	r4, #24
 8008a48:	42a3      	cmp	r3, r4
 8008a4a:	bf08      	it	eq
 8008a4c:	f042 0201 	orreq.w	r2, r2, #1
 8008a50:	3418      	adds	r4, #24
 8008a52:	42a3      	cmp	r3, r4
 8008a54:	bf08      	it	eq
 8008a56:	f042 0201 	orreq.w	r2, r2, #1
 8008a5a:	3418      	adds	r4, #24
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	bf08      	it	eq
 8008a60:	f042 0201 	orreq.w	r2, r2, #1
 8008a64:	f504 7456 	add.w	r4, r4, #856	; 0x358
 8008a68:	42a3      	cmp	r3, r4
 8008a6a:	bf08      	it	eq
 8008a6c:	f042 0201 	orreq.w	r2, r2, #1
 8008a70:	3418      	adds	r4, #24
 8008a72:	42a3      	cmp	r3, r4
 8008a74:	bf08      	it	eq
 8008a76:	f042 0201 	orreq.w	r2, r2, #1
 8008a7a:	3418      	adds	r4, #24
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	bf08      	it	eq
 8008a80:	f042 0201 	orreq.w	r2, r2, #1
 8008a84:	3418      	adds	r4, #24
 8008a86:	42a3      	cmp	r3, r4
 8008a88:	bf08      	it	eq
 8008a8a:	f042 0201 	orreq.w	r2, r2, #1
 8008a8e:	3418      	adds	r4, #24
 8008a90:	42a3      	cmp	r3, r4
 8008a92:	bf08      	it	eq
 8008a94:	f042 0201 	orreq.w	r2, r2, #1
 8008a98:	3418      	adds	r4, #24
 8008a9a:	42a3      	cmp	r3, r4
 8008a9c:	bf08      	it	eq
 8008a9e:	f042 0201 	orreq.w	r2, r2, #1
 8008aa2:	3418      	adds	r4, #24
 8008aa4:	42a3      	cmp	r3, r4
 8008aa6:	bf08      	it	eq
 8008aa8:	f042 0201 	orreq.w	r2, r2, #1
 8008aac:	b91a      	cbnz	r2, 8008ab6 <HAL_DMA_IRQHandler+0x372>
 8008aae:	4a73      	ldr	r2, [pc, #460]	; (8008c7c <HAL_DMA_IRQHandler+0x538>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	f040 80da 	bne.w	8008c6a <HAL_DMA_IRQHandler+0x526>
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	06dc      	lsls	r4, r3, #27
 8008aba:	d514      	bpl.n	8008ae6 <HAL_DMA_IRQHandler+0x3a2>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008abc:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008abe:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	f000 80de 	beq.w	8008c84 <HAL_DMA_IRQHandler+0x540>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	0352      	lsls	r2, r2, #13
 8008ad0:	f140 8129 	bpl.w	8008d26 <HAL_DMA_IRQHandler+0x5e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	031b      	lsls	r3, r3, #12
 8008ad8:	f140 8134 	bpl.w	8008d44 <HAL_DMA_IRQHandler+0x600>
          if(hdma->XferCpltCallback != NULL)
 8008adc:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8008ae0:	b10b      	cbz	r3, 8008ae6 <HAL_DMA_IRQHandler+0x3a2>
            hdma->XferCpltCallback(hdma);
 8008ae2:	4640      	mov	r0, r8
 8008ae4:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008ae6:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 80f2 	beq.w	8008cd4 <HAL_DMA_IRQHandler+0x590>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008af0:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8008af4:	07df      	lsls	r7, r3, #31
 8008af6:	d521      	bpl.n	8008b3c <HAL_DMA_IRQHandler+0x3f8>
        __HAL_DMA_DISABLE(hdma);
 8008af8:	f8d8 2000 	ldr.w	r2, [r8]
        hdma->State = HAL_DMA_STATE_ABORT;
 8008afc:	2104      	movs	r1, #4
 8008afe:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8008b02:	6813      	ldr	r3, [r2, #0]
 8008b04:	f023 0301 	bic.w	r3, r3, #1
 8008b08:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008b0a:	4b5d      	ldr	r3, [pc, #372]	; (8008c80 <HAL_DMA_IRQHandler+0x53c>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008b0c:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008b10:	fba3 3606 	umull	r3, r6, r3, r6
 8008b14:	0ab6      	lsrs	r6, r6, #10
 8008b16:	e002      	b.n	8008b1e <HAL_DMA_IRQHandler+0x3da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008b18:	6813      	ldr	r3, [r2, #0]
 8008b1a:	07dd      	lsls	r5, r3, #31
 8008b1c:	d504      	bpl.n	8008b28 <HAL_DMA_IRQHandler+0x3e4>
          if (++count > timeout)
 8008b1e:	9b01      	ldr	r3, [sp, #4]
 8008b20:	3301      	adds	r3, #1
 8008b22:	42b3      	cmp	r3, r6
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	d9f7      	bls.n	8008b18 <HAL_DMA_IRQHandler+0x3d4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008b28:	6813      	ldr	r3, [r2, #0]
 8008b2a:	07dc      	lsls	r4, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8008b2c:	bf4c      	ite	mi
 8008b2e:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8008b30:	2301      	movpl	r3, #1
 8008b32:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8008b36:	2300      	movs	r3, #0
 8008b38:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8008b3c:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 80c7 	beq.w	8008cd4 <HAL_DMA_IRQHandler+0x590>
        hdma->XferErrorCallback(hdma);
 8008b46:	4640      	mov	r0, r8
}
 8008b48:	b002      	add	sp, #8
 8008b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 8008b4e:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	0752      	lsls	r2, r2, #29
 8008b54:	d514      	bpl.n	8008b80 <HAL_DMA_IRQHandler+0x43c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	f022 0204 	bic.w	r2, r2, #4
 8008b5c:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b5e:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8008b62:	f003 021f 	and.w	r2, r3, #31
 8008b66:	2308      	movs	r3, #8
 8008b68:	4093      	lsls	r3, r2
 8008b6a:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008b6c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b70:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008b74:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b78:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008b7c:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b80:	fa24 f301 	lsr.w	r3, r4, r1
 8008b84:	07df      	lsls	r7, r3, #31
 8008b86:	f57f ae54 	bpl.w	8008832 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008b8a:	f8d8 2000 	ldr.w	r2, [r8]
 8008b8e:	4f39      	ldr	r7, [pc, #228]	; (8008c74 <HAL_DMA_IRQHandler+0x530>)
 8008b90:	4b39      	ldr	r3, [pc, #228]	; (8008c78 <HAL_DMA_IRQHandler+0x534>)
 8008b92:	429a      	cmp	r2, r3
 8008b94:	bf18      	it	ne
 8008b96:	42ba      	cmpne	r2, r7
 8008b98:	f103 0318 	add.w	r3, r3, #24
 8008b9c:	bf0c      	ite	eq
 8008b9e:	2701      	moveq	r7, #1
 8008ba0:	2700      	movne	r7, #0
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	bf08      	it	eq
 8008ba6:	f047 0701 	orreq.w	r7, r7, #1
 8008baa:	3318      	adds	r3, #24
 8008bac:	429a      	cmp	r2, r3
 8008bae:	bf08      	it	eq
 8008bb0:	f047 0701 	orreq.w	r7, r7, #1
 8008bb4:	3318      	adds	r3, #24
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	bf08      	it	eq
 8008bba:	f047 0701 	orreq.w	r7, r7, #1
 8008bbe:	3318      	adds	r3, #24
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	bf08      	it	eq
 8008bc4:	f047 0701 	orreq.w	r7, r7, #1
 8008bc8:	3318      	adds	r3, #24
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	bf08      	it	eq
 8008bce:	f047 0701 	orreq.w	r7, r7, #1
 8008bd2:	3318      	adds	r3, #24
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	bf08      	it	eq
 8008bd8:	f047 0701 	orreq.w	r7, r7, #1
 8008bdc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008be0:	429a      	cmp	r2, r3
 8008be2:	bf08      	it	eq
 8008be4:	f047 0701 	orreq.w	r7, r7, #1
 8008be8:	3318      	adds	r3, #24
 8008bea:	429a      	cmp	r2, r3
 8008bec:	bf08      	it	eq
 8008bee:	f047 0701 	orreq.w	r7, r7, #1
 8008bf2:	3318      	adds	r3, #24
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	bf08      	it	eq
 8008bf8:	f047 0701 	orreq.w	r7, r7, #1
 8008bfc:	3318      	adds	r3, #24
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	bf08      	it	eq
 8008c02:	f047 0701 	orreq.w	r7, r7, #1
 8008c06:	3318      	adds	r3, #24
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	bf08      	it	eq
 8008c0c:	f047 0701 	orreq.w	r7, r7, #1
 8008c10:	3318      	adds	r3, #24
 8008c12:	429a      	cmp	r2, r3
 8008c14:	bf08      	it	eq
 8008c16:	f047 0701 	orreq.w	r7, r7, #1
 8008c1a:	3318      	adds	r3, #24
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	bf08      	it	eq
 8008c20:	f047 0701 	orreq.w	r7, r7, #1
 8008c24:	4613      	mov	r3, r2
 8008c26:	2f00      	cmp	r7, #0
 8008c28:	f47f adf1 	bne.w	800880e <HAL_DMA_IRQHandler+0xca>
 8008c2c:	4f13      	ldr	r7, [pc, #76]	; (8008c7c <HAL_DMA_IRQHandler+0x538>)
 8008c2e:	42ba      	cmp	r2, r7
 8008c30:	f43f aded 	beq.w	800880e <HAL_DMA_IRQHandler+0xca>
 8008c34:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c36:	2304      	movs	r3, #4
 8008c38:	408b      	lsls	r3, r1
 8008c3a:	4223      	tst	r3, r4
 8008c3c:	f040 80ca 	bne.w	8008dd4 <HAL_DMA_IRQHandler+0x690>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c40:	f04f 0c10 	mov.w	ip, #16
 8008c44:	fa0c fc01 	lsl.w	ip, ip, r1
 8008c48:	ea14 0f0c 	tst.w	r4, ip
 8008c4c:	f43f aedc 	beq.w	8008a08 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008c50:	6813      	ldr	r3, [r2, #0]
 8008c52:	0759      	lsls	r1, r3, #29
 8008c54:	f53f aec0 	bmi.w	80089d8 <HAL_DMA_IRQHandler+0x294>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c58:	f000 0e1f 	and.w	lr, r0, #31
 8008c5c:	2120      	movs	r1, #32
 8008c5e:	fa01 f10e 	lsl.w	r1, r1, lr
 8008c62:	420c      	tst	r4, r1
 8008c64:	f43f af3f 	beq.w	8008ae6 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008c68:	4613      	mov	r3, r2
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	0798      	lsls	r0, r3, #30
 8008c6e:	f57f af3a 	bpl.w	8008ae6 <HAL_DMA_IRQHandler+0x3a2>
 8008c72:	e723      	b.n	8008abc <HAL_DMA_IRQHandler+0x378>
 8008c74:	40020010 	.word	0x40020010
 8008c78:	40020028 	.word	0x40020028
 8008c7c:	400204b8 	.word	0x400204b8
 8008c80:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c84:	f8d8 2000 	ldr.w	r2, [r8]
 8008c88:	6813      	ldr	r3, [r2, #0]
 8008c8a:	f023 0316 	bic.w	r3, r3, #22
 8008c8e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008c90:	f8d8 2000 	ldr.w	r2, [r8]
 8008c94:	6953      	ldr	r3, [r2, #20]
 8008c96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c9a:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c9c:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d055      	beq.n	8008d50 <HAL_DMA_IRQHandler+0x60c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008ca4:	f8d8 2000 	ldr.w	r2, [r8]
 8008ca8:	6813      	ldr	r3, [r2, #0]
 8008caa:	f023 0308 	bic.w	r3, r3, #8
 8008cae:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008cb0:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
 8008cb4:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8008cb6:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008cb8:	f002 021f 	and.w	r2, r2, #31
 8008cbc:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 8008cbe:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008cc0:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8008cc2:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8008cc6:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8008cca:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f47f af39 	bne.w	8008b46 <HAL_DMA_IRQHandler+0x402>
}
 8008cd4:	b002      	add	sp, #8
 8008cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008cda:	2220      	movs	r2, #32
 8008cdc:	fa02 f101 	lsl.w	r1, r2, r1
 8008ce0:	420c      	tst	r4, r1
 8008ce2:	f47f aee8 	bne.w	8008ab6 <HAL_DMA_IRQHandler+0x372>
 8008ce6:	e6fe      	b.n	8008ae6 <HAL_DMA_IRQHandler+0x3a2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ce8:	f04f 0c04 	mov.w	ip, #4
 8008cec:	fa0c fc01 	lsl.w	ip, ip, r1
 8008cf0:	ea14 0f0c 	tst.w	r4, ip
 8008cf4:	f43f ae07 	beq.w	8008906 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	0797      	lsls	r7, r2, #30
 8008cfc:	f53f adf7 	bmi.w	80088ee <HAL_DMA_IRQHandler+0x1aa>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008d00:	f04f 0c10 	mov.w	ip, #16
 8008d04:	fa0c fc01 	lsl.w	ip, ip, r1
 8008d08:	ea14 0f0c 	tst.w	r4, ip
 8008d0c:	f47f ae55 	bne.w	80089ba <HAL_DMA_IRQHandler+0x276>
 8008d10:	e67a      	b.n	8008a08 <HAL_DMA_IRQHandler+0x2c4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	031b      	lsls	r3, r3, #12
 8008d16:	f57f ae6e 	bpl.w	80089f6 <HAL_DMA_IRQHandler+0x2b2>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008d1a:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f47f ae6c 	bne.w	80089fc <HAL_DMA_IRQHandler+0x2b8>
 8008d24:	e66c      	b.n	8008a00 <HAL_DMA_IRQHandler+0x2bc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8008d2c:	f47f aed6 	bne.w	8008adc <HAL_DMA_IRQHandler+0x398>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008d30:	6819      	ldr	r1, [r3, #0]
 8008d32:	f021 0110 	bic.w	r1, r1, #16
 8008d36:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8008d38:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8008d3a:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8008d3e:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8008d42:	e6cb      	b.n	8008adc <HAL_DMA_IRQHandler+0x398>
            if(hdma->XferM1CpltCallback != NULL)
 8008d44:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f47f aeca 	bne.w	8008ae2 <HAL_DMA_IRQHandler+0x39e>
 8008d4e:	e6ca      	b.n	8008ae6 <HAL_DMA_IRQHandler+0x3a2>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008d50:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1a5      	bne.n	8008ca4 <HAL_DMA_IRQHandler+0x560>
 8008d58:	e7aa      	b.n	8008cb0 <HAL_DMA_IRQHandler+0x56c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008d5a:	4aa0      	ldr	r2, [pc, #640]	; (8008fdc <HAL_DMA_IRQHandler+0x898>)
 8008d5c:	4ca0      	ldr	r4, [pc, #640]	; (8008fe0 <HAL_DMA_IRQHandler+0x89c>)
 8008d5e:	42a3      	cmp	r3, r4
 8008d60:	bf18      	it	ne
 8008d62:	4293      	cmpne	r3, r2
 8008d64:	f104 0414 	add.w	r4, r4, #20
 8008d68:	bf0c      	ite	eq
 8008d6a:	2201      	moveq	r2, #1
 8008d6c:	2200      	movne	r2, #0
 8008d6e:	42a3      	cmp	r3, r4
 8008d70:	bf08      	it	eq
 8008d72:	f042 0201 	orreq.w	r2, r2, #1
 8008d76:	3414      	adds	r4, #20
 8008d78:	42a3      	cmp	r3, r4
 8008d7a:	bf08      	it	eq
 8008d7c:	f042 0201 	orreq.w	r2, r2, #1
 8008d80:	3414      	adds	r4, #20
 8008d82:	42a3      	cmp	r3, r4
 8008d84:	bf08      	it	eq
 8008d86:	f042 0201 	orreq.w	r2, r2, #1
 8008d8a:	3414      	adds	r4, #20
 8008d8c:	42a3      	cmp	r3, r4
 8008d8e:	bf08      	it	eq
 8008d90:	f042 0201 	orreq.w	r2, r2, #1
 8008d94:	3414      	adds	r4, #20
 8008d96:	42a3      	cmp	r3, r4
 8008d98:	bf08      	it	eq
 8008d9a:	f042 0201 	orreq.w	r2, r2, #1
 8008d9e:	b912      	cbnz	r2, 8008da6 <HAL_DMA_IRQHandler+0x662>
 8008da0:	4a90      	ldr	r2, [pc, #576]	; (8008fe4 <HAL_DMA_IRQHandler+0x8a0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d196      	bne.n	8008cd4 <HAL_DMA_IRQHandler+0x590>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008da6:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
 8008daa:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008dac:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008dae:	f004 041f 	and.w	r4, r4, #31
 8008db2:	40a6      	lsls	r6, r4
 8008db4:	420e      	tst	r6, r1
 8008db6:	d019      	beq.n	8008dec <HAL_DMA_IRQHandler+0x6a8>
 8008db8:	0750      	lsls	r0, r2, #29
 8008dba:	d517      	bpl.n	8008dec <HAL_DMA_IRQHandler+0x6a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008dbc:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008dbe:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008dc0:	d549      	bpl.n	8008e56 <HAL_DMA_IRQHandler+0x712>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008dc2:	03d2      	lsls	r2, r2, #15
 8008dc4:	f100 809f 	bmi.w	8008f06 <HAL_DMA_IRQHandler+0x7c2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008dc8:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f47f aeba 	bne.w	8008b46 <HAL_DMA_IRQHandler+0x402>
 8008dd2:	e77f      	b.n	8008cd4 <HAL_DMA_IRQHandler+0x590>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008dd4:	f000 011f 	and.w	r1, r0, #31
 8008dd8:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008ddc:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008dde:	fa0c fc01 	lsl.w	ip, ip, r1
 8008de2:	ea14 0f0c 	tst.w	r4, ip
 8008de6:	f47f af33 	bne.w	8008c50 <HAL_DMA_IRQHandler+0x50c>
 8008dea:	e60d      	b.n	8008a08 <HAL_DMA_IRQHandler+0x2c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008dec:	2602      	movs	r6, #2
 8008dee:	40a6      	lsls	r6, r4
 8008df0:	420e      	tst	r6, r1
 8008df2:	d00e      	beq.n	8008e12 <HAL_DMA_IRQHandler+0x6ce>
 8008df4:	0797      	lsls	r7, r2, #30
 8008df6:	d50c      	bpl.n	8008e12 <HAL_DMA_IRQHandler+0x6ce>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008df8:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008dfa:	0415      	lsls	r5, r2, #16
 8008dfc:	f140 8089 	bpl.w	8008f12 <HAL_DMA_IRQHandler+0x7ce>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008e00:	03d4      	lsls	r4, r2, #15
 8008e02:	f100 80e4 	bmi.w	8008fce <HAL_DMA_IRQHandler+0x88a>
          if(hdma->XferM1CpltCallback != NULL)
 8008e06:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f47f ae9b 	bne.w	8008b46 <HAL_DMA_IRQHandler+0x402>
 8008e10:	e760      	b.n	8008cd4 <HAL_DMA_IRQHandler+0x590>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008e12:	2608      	movs	r6, #8
 8008e14:	fa06 f404 	lsl.w	r4, r6, r4
 8008e18:	420c      	tst	r4, r1
 8008e1a:	f43f af5b 	beq.w	8008cd4 <HAL_DMA_IRQHandler+0x590>
 8008e1e:	0711      	lsls	r1, r2, #28
 8008e20:	f57f af58 	bpl.w	8008cd4 <HAL_DMA_IRQHandler+0x590>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e24:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008e26:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008e28:	f021 010e 	bic.w	r1, r1, #14
 8008e2c:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 8008e2e:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008e30:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8008e34:	f003 031f 	and.w	r3, r3, #31
 8008e38:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3c:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 8008e3e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008e42:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8008e46:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8008e4a:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f47f ae79 	bne.w	8008b46 <HAL_DMA_IRQHandler+0x402>
 8008e54:	e73e      	b.n	8008cd4 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008e56:	0693      	lsls	r3, r2, #26
 8008e58:	d455      	bmi.n	8008f06 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008e5a:	f8d8 2000 	ldr.w	r2, [r8]
 8008e5e:	4b62      	ldr	r3, [pc, #392]	; (8008fe8 <HAL_DMA_IRQHandler+0x8a4>)
 8008e60:	4c62      	ldr	r4, [pc, #392]	; (8008fec <HAL_DMA_IRQHandler+0x8a8>)
 8008e62:	4963      	ldr	r1, [pc, #396]	; (8008ff0 <HAL_DMA_IRQHandler+0x8ac>)
 8008e64:	42a2      	cmp	r2, r4
 8008e66:	bf18      	it	ne
 8008e68:	429a      	cmpne	r2, r3
 8008e6a:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8008e6e:	bf0c      	ite	eq
 8008e70:	2301      	moveq	r3, #1
 8008e72:	2300      	movne	r3, #0
 8008e74:	428a      	cmp	r2, r1
 8008e76:	bf08      	it	eq
 8008e78:	f043 0301 	orreq.w	r3, r3, #1
 8008e7c:	3130      	adds	r1, #48	; 0x30
 8008e7e:	42a2      	cmp	r2, r4
 8008e80:	bf08      	it	eq
 8008e82:	f043 0301 	orreq.w	r3, r3, #1
 8008e86:	3430      	adds	r4, #48	; 0x30
 8008e88:	428a      	cmp	r2, r1
 8008e8a:	bf08      	it	eq
 8008e8c:	f043 0301 	orreq.w	r3, r3, #1
 8008e90:	3130      	adds	r1, #48	; 0x30
 8008e92:	42a2      	cmp	r2, r4
 8008e94:	bf08      	it	eq
 8008e96:	f043 0301 	orreq.w	r3, r3, #1
 8008e9a:	3430      	adds	r4, #48	; 0x30
 8008e9c:	428a      	cmp	r2, r1
 8008e9e:	bf08      	it	eq
 8008ea0:	f043 0301 	orreq.w	r3, r3, #1
 8008ea4:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8008ea8:	42a2      	cmp	r2, r4
 8008eaa:	bf08      	it	eq
 8008eac:	f043 0301 	orreq.w	r3, r3, #1
 8008eb0:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8008eb4:	428a      	cmp	r2, r1
 8008eb6:	bf08      	it	eq
 8008eb8:	f043 0301 	orreq.w	r3, r3, #1
 8008ebc:	3130      	adds	r1, #48	; 0x30
 8008ebe:	42a2      	cmp	r2, r4
 8008ec0:	bf08      	it	eq
 8008ec2:	f043 0301 	orreq.w	r3, r3, #1
 8008ec6:	3430      	adds	r4, #48	; 0x30
 8008ec8:	428a      	cmp	r2, r1
 8008eca:	bf08      	it	eq
 8008ecc:	f043 0301 	orreq.w	r3, r3, #1
 8008ed0:	3130      	adds	r1, #48	; 0x30
 8008ed2:	42a2      	cmp	r2, r4
 8008ed4:	bf08      	it	eq
 8008ed6:	f043 0301 	orreq.w	r3, r3, #1
 8008eda:	3430      	adds	r4, #48	; 0x30
 8008edc:	428a      	cmp	r2, r1
 8008ede:	bf08      	it	eq
 8008ee0:	f043 0301 	orreq.w	r3, r3, #1
 8008ee4:	3130      	adds	r1, #48	; 0x30
 8008ee6:	42a2      	cmp	r2, r4
 8008ee8:	bf08      	it	eq
 8008eea:	f043 0301 	orreq.w	r3, r3, #1
 8008eee:	428a      	cmp	r2, r1
 8008ef0:	bf08      	it	eq
 8008ef2:	f043 0301 	orreq.w	r3, r3, #1
 8008ef6:	b913      	cbnz	r3, 8008efe <HAL_DMA_IRQHandler+0x7ba>
 8008ef8:	4b3e      	ldr	r3, [pc, #248]	; (8008ff4 <HAL_DMA_IRQHandler+0x8b0>)
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d17c      	bne.n	8008ff8 <HAL_DMA_IRQHandler+0x8b4>
 8008efe:	6813      	ldr	r3, [r2, #0]
 8008f00:	f023 0308 	bic.w	r3, r3, #8
 8008f04:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8008f06:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	f47f ae1b 	bne.w	8008b46 <HAL_DMA_IRQHandler+0x402>
 8008f10:	e6e0      	b.n	8008cd4 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008f12:	0690      	lsls	r0, r2, #26
 8008f14:	d45b      	bmi.n	8008fce <HAL_DMA_IRQHandler+0x88a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008f16:	f8d8 2000 	ldr.w	r2, [r8]
 8008f1a:	4b33      	ldr	r3, [pc, #204]	; (8008fe8 <HAL_DMA_IRQHandler+0x8a4>)
 8008f1c:	4c33      	ldr	r4, [pc, #204]	; (8008fec <HAL_DMA_IRQHandler+0x8a8>)
 8008f1e:	4934      	ldr	r1, [pc, #208]	; (8008ff0 <HAL_DMA_IRQHandler+0x8ac>)
 8008f20:	42a2      	cmp	r2, r4
 8008f22:	bf18      	it	ne
 8008f24:	429a      	cmpne	r2, r3
 8008f26:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8008f2a:	bf0c      	ite	eq
 8008f2c:	2301      	moveq	r3, #1
 8008f2e:	2300      	movne	r3, #0
 8008f30:	428a      	cmp	r2, r1
 8008f32:	bf08      	it	eq
 8008f34:	f043 0301 	orreq.w	r3, r3, #1
 8008f38:	3130      	adds	r1, #48	; 0x30
 8008f3a:	42a2      	cmp	r2, r4
 8008f3c:	bf08      	it	eq
 8008f3e:	f043 0301 	orreq.w	r3, r3, #1
 8008f42:	3430      	adds	r4, #48	; 0x30
 8008f44:	428a      	cmp	r2, r1
 8008f46:	bf08      	it	eq
 8008f48:	f043 0301 	orreq.w	r3, r3, #1
 8008f4c:	3130      	adds	r1, #48	; 0x30
 8008f4e:	42a2      	cmp	r2, r4
 8008f50:	bf08      	it	eq
 8008f52:	f043 0301 	orreq.w	r3, r3, #1
 8008f56:	3430      	adds	r4, #48	; 0x30
 8008f58:	428a      	cmp	r2, r1
 8008f5a:	bf08      	it	eq
 8008f5c:	f043 0301 	orreq.w	r3, r3, #1
 8008f60:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8008f64:	42a2      	cmp	r2, r4
 8008f66:	bf08      	it	eq
 8008f68:	f043 0301 	orreq.w	r3, r3, #1
 8008f6c:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8008f70:	428a      	cmp	r2, r1
 8008f72:	bf08      	it	eq
 8008f74:	f043 0301 	orreq.w	r3, r3, #1
 8008f78:	3130      	adds	r1, #48	; 0x30
 8008f7a:	42a2      	cmp	r2, r4
 8008f7c:	bf08      	it	eq
 8008f7e:	f043 0301 	orreq.w	r3, r3, #1
 8008f82:	3430      	adds	r4, #48	; 0x30
 8008f84:	428a      	cmp	r2, r1
 8008f86:	bf08      	it	eq
 8008f88:	f043 0301 	orreq.w	r3, r3, #1
 8008f8c:	3130      	adds	r1, #48	; 0x30
 8008f8e:	42a2      	cmp	r2, r4
 8008f90:	bf08      	it	eq
 8008f92:	f043 0301 	orreq.w	r3, r3, #1
 8008f96:	3430      	adds	r4, #48	; 0x30
 8008f98:	428a      	cmp	r2, r1
 8008f9a:	bf08      	it	eq
 8008f9c:	f043 0301 	orreq.w	r3, r3, #1
 8008fa0:	3130      	adds	r1, #48	; 0x30
 8008fa2:	42a2      	cmp	r2, r4
 8008fa4:	bf08      	it	eq
 8008fa6:	f043 0301 	orreq.w	r3, r3, #1
 8008faa:	428a      	cmp	r2, r1
 8008fac:	bf08      	it	eq
 8008fae:	f043 0301 	orreq.w	r3, r3, #1
 8008fb2:	b913      	cbnz	r3, 8008fba <HAL_DMA_IRQHandler+0x876>
 8008fb4:	4b0f      	ldr	r3, [pc, #60]	; (8008ff4 <HAL_DMA_IRQHandler+0x8b0>)
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d123      	bne.n	8009002 <HAL_DMA_IRQHandler+0x8be>
 8008fba:	6813      	ldr	r3, [r2, #0]
 8008fbc:	f023 0314 	bic.w	r3, r3, #20
 8008fc0:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008fc2:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8008fc4:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 8008fc6:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8008fca:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8008fce:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f47f adb7 	bne.w	8008b46 <HAL_DMA_IRQHandler+0x402>
 8008fd8:	e67c      	b.n	8008cd4 <HAL_DMA_IRQHandler+0x590>
 8008fda:	bf00      	nop
 8008fdc:	58025408 	.word	0x58025408
 8008fe0:	5802541c 	.word	0x5802541c
 8008fe4:	58025494 	.word	0x58025494
 8008fe8:	40020010 	.word	0x40020010
 8008fec:	40020028 	.word	0x40020028
 8008ff0:	40020040 	.word	0x40020040
 8008ff4:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008ff8:	6813      	ldr	r3, [r2, #0]
 8008ffa:	f023 0304 	bic.w	r3, r3, #4
 8008ffe:	6013      	str	r3, [r2, #0]
 8009000:	e781      	b.n	8008f06 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009002:	6813      	ldr	r3, [r2, #0]
 8009004:	f023 030a 	bic.w	r3, r3, #10
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	e7da      	b.n	8008fc2 <HAL_DMA_IRQHandler+0x87e>

0800900c <HAL_DMA_GetState>:
  return hdma->State;
 800900c:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop

08009014 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8009014:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8009016:	4770      	bx	lr

08009018 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009018:	680b      	ldr	r3, [r1, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 811a 	beq.w	8009254 <HAL_GPIO_Init+0x23c>
 8009020:	f04f 0c00 	mov.w	ip, #0
{
 8009024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8009028:	4662      	mov	r2, ip
{
 800902a:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800902c:	4d94      	ldr	r5, [pc, #592]	; (8009280 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800902e:	4f95      	ldr	r7, [pc, #596]	; (8009284 <HAL_GPIO_Init+0x26c>)
 8009030:	f8df 8268 	ldr.w	r8, [pc, #616]	; 800929c <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009034:	f04f 0901 	mov.w	r9, #1
 8009038:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 800903c:	ea19 0e03 	ands.w	lr, r9, r3
 8009040:	f000 80c2 	beq.w	80091c8 <HAL_GPIO_Init+0x1b0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009044:	684b      	ldr	r3, [r1, #4]
 8009046:	f003 0303 	and.w	r3, r3, #3
 800904a:	1e5c      	subs	r4, r3, #1
 800904c:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800904e:	f04f 0403 	mov.w	r4, #3
 8009052:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009056:	f240 80c1 	bls.w	80091dc <HAL_GPIO_Init+0x1c4>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800905a:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800905c:	2b03      	cmp	r3, #3
 800905e:	d026      	beq.n	80090ae <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 8009060:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009062:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009066:	688b      	ldr	r3, [r1, #8]
 8009068:	fa03 f30c 	lsl.w	r3, r3, ip
 800906c:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8009070:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009072:	684b      	ldr	r3, [r1, #4]
 8009074:	f003 0303 	and.w	r3, r3, #3
 8009078:	2b02      	cmp	r3, #2
 800907a:	d118      	bne.n	80090ae <HAL_GPIO_Init+0x96>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800907c:	f002 0307 	and.w	r3, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8009080:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009084:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8009088:	230f      	movs	r3, #15
 800908a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800908e:	fa03 f30b 	lsl.w	r3, r3, fp
        temp = GPIOx->AFR[position >> 3U];
 8009092:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009096:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800909a:	690b      	ldr	r3, [r1, #16]
 800909c:	fa03 f30b 	lsl.w	r3, r3, fp
 80090a0:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 80090a4:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090a8:	684b      	ldr	r3, [r1, #4]
 80090aa:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 80090ae:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090b2:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80090b6:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80090ba:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 80090bc:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80090be:	684b      	ldr	r3, [r1, #4]
 80090c0:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 80090c4:	d07f      	beq.n	80091c6 <HAL_GPIO_Init+0x1ae>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090c6:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80090ca:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80090ce:	f002 0903 	and.w	r9, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80090d2:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090d4:	f043 0302 	orr.w	r3, r3, #2
 80090d8:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80090dc:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80090e0:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 80090e4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80090e8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 80090ec:	f003 0302 	and.w	r3, r3, #2
 80090f0:	9301      	str	r3, [sp, #4]
 80090f2:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80090f4:	f04f 030f 	mov.w	r3, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 80090f8:	f8d4 a008 	ldr.w	sl, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80090fc:	fa03 f309 	lsl.w	r3, r3, r9
 8009100:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009104:	d02b      	beq.n	800915e <HAL_GPIO_Init+0x146>
 8009106:	4540      	cmp	r0, r8
 8009108:	f000 8088 	beq.w	800921c <HAL_GPIO_Init+0x204>
 800910c:	4e5e      	ldr	r6, [pc, #376]	; (8009288 <HAL_GPIO_Init+0x270>)
 800910e:	42b0      	cmp	r0, r6
 8009110:	f000 808b 	beq.w	800922a <HAL_GPIO_Init+0x212>
 8009114:	4e5d      	ldr	r6, [pc, #372]	; (800928c <HAL_GPIO_Init+0x274>)
 8009116:	42b0      	cmp	r0, r6
 8009118:	d079      	beq.n	800920e <HAL_GPIO_Init+0x1f6>
 800911a:	4e5d      	ldr	r6, [pc, #372]	; (8009290 <HAL_GPIO_Init+0x278>)
 800911c:	42b0      	cmp	r0, r6
 800911e:	f000 8092 	beq.w	8009246 <HAL_GPIO_Init+0x22e>
 8009122:	4e5c      	ldr	r6, [pc, #368]	; (8009294 <HAL_GPIO_Init+0x27c>)
 8009124:	42b0      	cmp	r0, r6
 8009126:	f000 8096 	beq.w	8009256 <HAL_GPIO_Init+0x23e>
 800912a:	4e5b      	ldr	r6, [pc, #364]	; (8009298 <HAL_GPIO_Init+0x280>)
 800912c:	42b0      	cmp	r0, r6
 800912e:	f000 8083 	beq.w	8009238 <HAL_GPIO_Init+0x220>
 8009132:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80092a0 <HAL_GPIO_Init+0x288>
 8009136:	4550      	cmp	r0, sl
 8009138:	f000 8094 	beq.w	8009264 <HAL_GPIO_Init+0x24c>
 800913c:	f8df a164 	ldr.w	sl, [pc, #356]	; 80092a4 <HAL_GPIO_Init+0x28c>
 8009140:	4550      	cmp	r0, sl
 8009142:	f000 8096 	beq.w	8009272 <HAL_GPIO_Init+0x25a>
 8009146:	f8df a160 	ldr.w	sl, [pc, #352]	; 80092a8 <HAL_GPIO_Init+0x290>
 800914a:	4550      	cmp	r0, sl
 800914c:	bf0c      	ite	eq
 800914e:	f04f 0a09 	moveq.w	sl, #9
 8009152:	f04f 0a0a 	movne.w	sl, #10
 8009156:	fa0a f909 	lsl.w	r9, sl, r9
 800915a:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 800915e:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009164:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 8009166:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 800916a:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800916c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009170:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 8009172:	bf54      	ite	pl
 8009174:	4023      	andpl	r3, r4
          temp |= iocurrent;
 8009176:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 800917a:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800917e:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 8009180:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8009184:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009188:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 800918a:	bf54      	ite	pl
 800918c:	4023      	andpl	r3, r4
          temp |= iocurrent;
 800918e:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 8009192:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009196:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8009198:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800919c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80091a0:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 80091a2:	bf54      	ite	pl
 80091a4:	4023      	andpl	r3, r4
          temp |= iocurrent;
 80091a6:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 80091aa:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80091ae:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 80091b0:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80091b4:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 80091b6:	bf54      	ite	pl
 80091b8:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80091ba:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80091be:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80091c2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80091c6:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 80091c8:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80091ca:	f10c 0c02 	add.w	ip, ip, #2
 80091ce:	fa33 f402 	lsrs.w	r4, r3, r2
 80091d2:	f47f af2f 	bne.w	8009034 <HAL_GPIO_Init+0x1c>
  }
}
 80091d6:	b003      	add	sp, #12
 80091d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80091dc:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80091de:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80091e2:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80091e4:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80091e6:	fa03 f30c 	lsl.w	r3, r3, ip
 80091ea:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80091ee:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80091f0:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 80091f2:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80091f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80091fa:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80091fe:	4093      	lsls	r3, r2
 8009200:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 8009204:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009206:	684b      	ldr	r3, [r1, #4]
 8009208:	f003 0303 	and.w	r3, r3, #3
 800920c:	e726      	b.n	800905c <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800920e:	f04f 0a03 	mov.w	sl, #3
 8009212:	fa0a f909 	lsl.w	r9, sl, r9
 8009216:	ea43 0309 	orr.w	r3, r3, r9
 800921a:	e7a0      	b.n	800915e <HAL_GPIO_Init+0x146>
 800921c:	f04f 0a01 	mov.w	sl, #1
 8009220:	fa0a f909 	lsl.w	r9, sl, r9
 8009224:	ea43 0309 	orr.w	r3, r3, r9
 8009228:	e799      	b.n	800915e <HAL_GPIO_Init+0x146>
 800922a:	f04f 0a02 	mov.w	sl, #2
 800922e:	fa0a f909 	lsl.w	r9, sl, r9
 8009232:	ea43 0309 	orr.w	r3, r3, r9
 8009236:	e792      	b.n	800915e <HAL_GPIO_Init+0x146>
 8009238:	f04f 0a06 	mov.w	sl, #6
 800923c:	fa0a f909 	lsl.w	r9, sl, r9
 8009240:	ea43 0309 	orr.w	r3, r3, r9
 8009244:	e78b      	b.n	800915e <HAL_GPIO_Init+0x146>
 8009246:	f04f 0a04 	mov.w	sl, #4
 800924a:	fa0a f909 	lsl.w	r9, sl, r9
 800924e:	ea43 0309 	orr.w	r3, r3, r9
 8009252:	e784      	b.n	800915e <HAL_GPIO_Init+0x146>
 8009254:	4770      	bx	lr
 8009256:	f04f 0a05 	mov.w	sl, #5
 800925a:	fa0a f909 	lsl.w	r9, sl, r9
 800925e:	ea43 0309 	orr.w	r3, r3, r9
 8009262:	e77c      	b.n	800915e <HAL_GPIO_Init+0x146>
 8009264:	f04f 0a07 	mov.w	sl, #7
 8009268:	fa0a f909 	lsl.w	r9, sl, r9
 800926c:	ea43 0309 	orr.w	r3, r3, r9
 8009270:	e775      	b.n	800915e <HAL_GPIO_Init+0x146>
 8009272:	f04f 0a08 	mov.w	sl, #8
 8009276:	fa0a f909 	lsl.w	r9, sl, r9
 800927a:	ea43 0309 	orr.w	r3, r3, r9
 800927e:	e76e      	b.n	800915e <HAL_GPIO_Init+0x146>
 8009280:	58024400 	.word	0x58024400
 8009284:	58020000 	.word	0x58020000
 8009288:	58020800 	.word	0x58020800
 800928c:	58020c00 	.word	0x58020c00
 8009290:	58021000 	.word	0x58021000
 8009294:	58021400 	.word	0x58021400
 8009298:	58021800 	.word	0x58021800
 800929c:	58020400 	.word	0x58020400
 80092a0:	58021c00 	.word	0x58021c00
 80092a4:	58022000 	.word	0x58022000
 80092a8:	58022400 	.word	0x58022400

080092ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80092ac:	6903      	ldr	r3, [r0, #16]
 80092ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80092b0:	bf14      	ite	ne
 80092b2:	2001      	movne	r0, #1
 80092b4:	2000      	moveq	r0, #0
 80092b6:	4770      	bx	lr

080092b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80092b8:	b902      	cbnz	r2, 80092bc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80092ba:	0409      	lsls	r1, r1, #16
 80092bc:	6181      	str	r1, [r0, #24]
  }
}
 80092be:	4770      	bx	lr

080092c0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80092c0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80092c2:	ea01 0203 	and.w	r2, r1, r3
 80092c6:	ea21 0103 	bic.w	r1, r1, r3
 80092ca:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80092ce:	6181      	str	r1, [r0, #24]
}
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop

080092d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80092d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092d8:	6803      	ldr	r3, [r0, #0]
{
 80092da:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092dc:	699a      	ldr	r2, [r3, #24]
 80092de:	0694      	lsls	r4, r2, #26
 80092e0:	d46d      	bmi.n	80093be <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
 80092e2:	4605      	mov	r5, r0
 80092e4:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092e6:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 80092ea:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80092ec:	f014 0410 	ands.w	r4, r4, #16
 80092f0:	d068      	beq.n	80093c4 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
 80092f2:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80092f4:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 80092f8:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80092fa:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092fc:	46b2      	mov	sl, r6
 80092fe:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009300:	699a      	ldr	r2, [r3, #24]
 8009302:	d161      	bne.n	80093c8 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
 8009304:	0690      	lsls	r0, r2, #26
 8009306:	f100 8085 	bmi.w	8009414 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 800930a:	f1ba 0f00 	cmp.w	sl, #0
 800930e:	d105      	bne.n	800931c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 8009310:	699c      	ldr	r4, [r3, #24]
 8009312:	06a1      	lsls	r1, r4, #26
 8009314:	d5fc      	bpl.n	8009310 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009316:	2220      	movs	r2, #32
 8009318:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800931a:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
 800931c:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
 8009320:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8009322:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009324:	05d0      	lsls	r0, r2, #23
 8009326:	d535      	bpl.n	8009394 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009328:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800932c:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800932e:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009332:	61d9      	str	r1, [r3, #28]
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009334:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009336:	d505      	bpl.n	8009344 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009338:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800933c:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009340:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009342:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009344:	0597      	lsls	r7, r2, #22
 8009346:	d505      	bpl.n	8009354 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009348:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800934c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009350:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009352:	682b      	ldr	r3, [r5, #0]
 8009354:	699a      	ldr	r2, [r3, #24]
 8009356:	0790      	lsls	r0, r2, #30
 8009358:	d502      	bpl.n	8009360 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
 800935a:	2200      	movs	r2, #0
 800935c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800935e:	682b      	ldr	r3, [r5, #0]
 8009360:	699a      	ldr	r2, [r3, #24]
 8009362:	07d1      	lsls	r1, r2, #31
 8009364:	d404      	bmi.n	8009370 <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009366:	699a      	ldr	r2, [r3, #24]
 8009368:	f042 0201 	orr.w	r2, r2, #1
 800936c:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800936e:	682b      	ldr	r3, [r5, #0]
 8009370:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009372:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8009374:	4835      	ldr	r0, [pc, #212]	; (800944c <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
 8009376:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
 8009378:	4002      	ands	r2, r0
      return HAL_ERROR;
 800937a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800937c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800937e:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009380:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8009384:	431c      	orrs	r4, r3
 8009386:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009388:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800938c:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 8009390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009394:	0550      	lsls	r0, r2, #21
 8009396:	d4cf      	bmi.n	8009338 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009398:	0596      	lsls	r6, r2, #22
 800939a:	d4d5      	bmi.n	8009348 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
 800939c:	2900      	cmp	r1, #0
 800939e:	d1d9      	bne.n	8009354 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093a0:	f7fe f9ac 	bl	80076fc <HAL_GetTick>
 80093a4:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80093a8:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093aa:	42b8      	cmp	r0, r7
 80093ac:	d800      	bhi.n	80093b0 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
 80093ae:	b91f      	cbnz	r7, 80093b8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80093b0:	699a      	ldr	r2, [r3, #24]
 80093b2:	f012 0220 	ands.w	r2, r2, #32
 80093b6:	d032      	beq.n	800941e <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093b8:	699a      	ldr	r2, [r3, #24]
 80093ba:	0692      	lsls	r2, r2, #26
 80093bc:	d595      	bpl.n	80092ea <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80093be:	2000      	movs	r0, #0
}
 80093c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80093c4:	4621      	mov	r1, r4
 80093c6:	e7ac      	b.n	8009322 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80093c8:	0692      	lsls	r2, r2, #26
 80093ca:	d423      	bmi.n	8009414 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 80093cc:	f1ba 0f00 	cmp.w	sl, #0
 80093d0:	d1a4      	bne.n	800931c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80093d2:	f7fe f993 	bl	80076fc <HAL_GetTick>
 80093d6:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80093d8:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80093da:	4287      	cmp	r7, r0
 80093dc:	d301      	bcc.n	80093e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
 80093de:	2f00      	cmp	r7, #0
 80093e0:	d18d      	bne.n	80092fe <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80093e2:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80093e4:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80093e8:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 80093ea:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80093ec:	0409      	lsls	r1, r1, #16
 80093ee:	d503      	bpl.n	80093f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
 80093f0:	0441      	lsls	r1, r0, #17
 80093f2:	d401      	bmi.n	80093f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 80093f4:	2a20      	cmp	r2, #32
 80093f6:	d11f      	bne.n	8009438 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093f8:	699a      	ldr	r2, [r3, #24]
 80093fa:	0690      	lsls	r0, r2, #26
 80093fc:	f53f af7f 	bmi.w	80092fe <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009400:	f7fe f97c 	bl	80076fc <HAL_GetTick>
 8009404:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009406:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009408:	2819      	cmp	r0, #25
 800940a:	d9f5      	bls.n	80093f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800940c:	2620      	movs	r6, #32
              status = HAL_ERROR;
 800940e:	f04f 0a01 	mov.w	sl, #1
 8009412:	e774      	b.n	80092fe <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
 8009414:	f1ba 0f00 	cmp.w	sl, #0
 8009418:	f43f af7d 	beq.w	8009316 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 800941c:	e77e      	b.n	800931c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800941e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009420:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 8009422:	2001      	movs	r0, #1
 8009424:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009428:	430b      	orrs	r3, r1
 800942a:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800942c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009430:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8009434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009438:	685a      	ldr	r2, [r3, #4]
 800943a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800943e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8009440:	f7fe f95c 	bl	80076fc <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009444:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8009446:	4604      	mov	r4, r0
 8009448:	e7d6      	b.n	80093f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 800944a:	bf00      	nop
 800944c:	fe00e800 	.word	0xfe00e800

08009450 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8009450:	2800      	cmp	r0, #0
 8009452:	d056      	beq.n	8009502 <HAL_I2C_Init+0xb2>
{
 8009454:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009456:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800945a:	4604      	mov	r4, r0
 800945c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009460:	2b00      	cmp	r3, #0
 8009462:	d049      	beq.n	80094f8 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 8009464:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8009466:	2324      	movs	r3, #36	; 0x24
 8009468:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800946c:	6813      	ldr	r3, [r2, #0]
 800946e:	f023 0301 	bic.w	r3, r3, #1
 8009472:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009474:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009478:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800947c:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800947e:	6822      	ldr	r2, [r4, #0]
 8009480:	6893      	ldr	r3, [r2, #8]
 8009482:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009486:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009488:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800948a:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800948c:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800948e:	68a3      	ldr	r3, [r4, #8]
 8009490:	bf0c      	ite	eq
 8009492:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009496:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 800949a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800949c:	68e3      	ldr	r3, [r4, #12]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d103      	bne.n	80094aa <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80094a2:	6823      	ldr	r3, [r4, #0]
 80094a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094a8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80094aa:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80094ac:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80094b0:	4b15      	ldr	r3, [pc, #84]	; (8009508 <HAL_I2C_Init+0xb8>)
 80094b2:	6851      	ldr	r1, [r2, #4]
 80094b4:	430b      	orrs	r3, r1
 80094b6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80094b8:	6822      	ldr	r2, [r4, #0]
 80094ba:	68d3      	ldr	r3, [r2, #12]
 80094bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094c0:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 80094c2:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80094c4:	6821      	ldr	r1, [r4, #0]
 80094c6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80094ca:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094cc:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80094ce:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80094d2:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80094d4:	6821      	ldr	r1, [r4, #0]
 80094d6:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80094da:	4303      	orrs	r3, r0
  return HAL_OK;
 80094dc:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80094de:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
 80094e0:	6821      	ldr	r1, [r4, #0]
 80094e2:	680b      	ldr	r3, [r1, #0]
 80094e4:	f043 0301 	orr.w	r3, r3, #1
 80094e8:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094ea:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80094ec:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80094f0:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80094f2:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 80094f6:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80094f8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80094fc:	f7fa fd40 	bl	8003f80 <HAL_I2C_MspInit>
 8009500:	e7b0      	b.n	8009464 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8009502:	2001      	movs	r0, #1
}
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	02008000 	.word	0x02008000

0800950c <HAL_I2C_Master_Transmit>:
{
 800950c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009510:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009512:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009516:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009518:	2b20      	cmp	r3, #32
 800951a:	d12c      	bne.n	8009576 <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
 800951c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009520:	4683      	mov	fp, r0
 8009522:	2b01      	cmp	r3, #1
 8009524:	d027      	beq.n	8009576 <HAL_I2C_Master_Transmit+0x6a>
 8009526:	2301      	movs	r3, #1
 8009528:	468a      	mov	sl, r1
 800952a:	4616      	mov	r6, r2
 800952c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009530:	f7fe f8e4 	bl	80076fc <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009534:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
 8009538:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800953a:	699a      	ldr	r2, [r3, #24]
 800953c:	0417      	lsls	r7, r2, #16
 800953e:	d51d      	bpl.n	800957c <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009540:	f7fe f8dc 	bl	80076fc <HAL_GetTick>
 8009544:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009548:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800954c:	2819      	cmp	r0, #25
 800954e:	d9f4      	bls.n	800953a <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009550:	699a      	ldr	r2, [r3, #24]
 8009552:	0410      	lsls	r0, r2, #16
 8009554:	d5f1      	bpl.n	800953a <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009556:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800955a:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800955c:	2200      	movs	r2, #0
      return HAL_ERROR;
 800955e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009560:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 8009562:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009566:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800956a:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800956e:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
 8009572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8009576:	2002      	movs	r0, #2
}
 8009578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800957c:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800957e:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 8009580:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009584:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009588:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
 800958a:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800958e:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009592:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
 8009596:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800959a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 800959e:	b292      	uxth	r2, r2
 80095a0:	2aff      	cmp	r2, #255	; 0xff
 80095a2:	d87e      	bhi.n	80096a2 <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
 80095a4:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80095a8:	48ad      	ldr	r0, [pc, #692]	; (8009860 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
 80095aa:	b292      	uxth	r2, r2
 80095ac:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80095b0:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 80095b2:	6859      	ldr	r1, [r3, #4]
 80095b4:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80095b6:	f3ca 0109 	ubfx	r1, sl, #0, #10
 80095ba:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80095be:	4301      	orrs	r1, r0
 80095c0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80095c4:	49a7      	ldr	r1, [pc, #668]	; (8009864 <HAL_I2C_Master_Transmit+0x358>)
 80095c6:	4311      	orrs	r1, r2
 80095c8:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80095ca:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
 80095ce:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 8107 	beq.w	80097e8 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80095da:	f8db 3000 	ldr.w	r3, [fp]
 80095de:	699c      	ldr	r4, [r3, #24]
 80095e0:	f014 0402 	ands.w	r4, r4, #2
 80095e4:	f040 80c5 	bne.w	8009772 <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
 80095e8:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80095ea:	f012 0210 	ands.w	r2, r2, #16
 80095ee:	f000 808d 	beq.w	800970c <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095f2:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 80095f4:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
 80095f6:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095f8:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095fa:	f8db 3000 	ldr.w	r3, [fp]
 80095fe:	1c69      	adds	r1, r5, #1
 8009600:	699a      	ldr	r2, [r3, #24]
 8009602:	f040 8085 	bne.w	8009710 <HAL_I2C_Master_Transmit+0x204>
 8009606:	0690      	lsls	r0, r2, #26
 8009608:	f100 8106 	bmi.w	8009818 <HAL_I2C_Master_Transmit+0x30c>
 800960c:	b937      	cbnz	r7, 800961c <HAL_I2C_Master_Transmit+0x110>
 800960e:	699a      	ldr	r2, [r3, #24]
 8009610:	0691      	lsls	r1, r2, #26
 8009612:	d5fc      	bpl.n	800960e <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009614:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8009618:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
 800961c:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
 8009620:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8009622:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009624:	05ce      	lsls	r6, r1, #23
 8009626:	d54b      	bpl.n	80096c0 <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009628:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800962c:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800962e:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009632:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009634:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009638:	d506      	bpl.n	8009648 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800963a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800963e:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009642:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009644:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009648:	0589      	lsls	r1, r1, #22
 800964a:	d506      	bpl.n	800965a <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800964c:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8009650:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009654:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009656:	f8db 3000 	ldr.w	r3, [fp]
 800965a:	6999      	ldr	r1, [r3, #24]
 800965c:	078e      	lsls	r6, r1, #30
 800965e:	d503      	bpl.n	8009668 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
 8009660:	2100      	movs	r1, #0
 8009662:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009664:	f8db 3000 	ldr.w	r3, [fp]
 8009668:	6999      	ldr	r1, [r3, #24]
 800966a:	07cd      	lsls	r5, r1, #31
 800966c:	d405      	bmi.n	800967a <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800966e:	6999      	ldr	r1, [r3, #24]
 8009670:	f041 0101 	orr.w	r1, r1, #1
 8009674:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8009676:	f8db 3000 	ldr.w	r3, [fp]
 800967a:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800967c:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
 800967e:	487a      	ldr	r0, [pc, #488]	; (8009868 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
 8009680:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 8009682:	4001      	ands	r1, r0
        return HAL_ERROR;
 8009684:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8009686:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 8009688:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800968c:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 8009690:	431a      	orrs	r2, r3
 8009692:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009696:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800969a:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
 800969e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80096a2:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80096a4:	496e      	ldr	r1, [pc, #440]	; (8009860 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80096a6:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80096ae:	f3ca 0109 	ubfx	r1, sl, #0, #10
 80096b2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80096b6:	4311      	orrs	r1, r2
 80096b8:	4a6c      	ldr	r2, [pc, #432]	; (800986c <HAL_I2C_Master_Transmit+0x360>)
 80096ba:	430a      	orrs	r2, r1
 80096bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80096be:	e784      	b.n	80095ca <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80096c0:	054c      	lsls	r4, r1, #21
 80096c2:	d4ba      	bmi.n	800963a <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80096c4:	058f      	lsls	r7, r1, #22
 80096c6:	d4c1      	bmi.n	800964c <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d1c6      	bne.n	800965a <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
 80096cc:	1c6a      	adds	r2, r5, #1
 80096ce:	d086      	beq.n	80095de <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096d0:	f7fe f814 	bl	80076fc <HAL_GetTick>
 80096d4:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80096d8:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096dc:	4285      	cmp	r5, r0
 80096de:	d302      	bcc.n	80096e6 <HAL_I2C_Master_Transmit+0x1da>
 80096e0:	2d00      	cmp	r5, #0
 80096e2:	f47f af7c 	bne.w	80095de <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80096e6:	699a      	ldr	r2, [r3, #24]
 80096e8:	f012 0202 	ands.w	r2, r2, #2
 80096ec:	f47f af77 	bne.w	80095de <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096f0:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80096f4:	2120      	movs	r1, #32
        return HAL_ERROR;
 80096f6:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 80096f8:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80096fc:	430b      	orrs	r3, r1
 80096fe:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009702:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009706:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
 800970a:	e735      	b.n	8009578 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 800970c:	4610      	mov	r0, r2
 800970e:	e788      	b.n	8009622 <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009710:	0692      	lsls	r2, r2, #26
 8009712:	f100 8081 	bmi.w	8009818 <HAL_I2C_Master_Transmit+0x30c>
 8009716:	2f00      	cmp	r7, #0
 8009718:	d180      	bne.n	800961c <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800971a:	f7fd ffef 	bl	80076fc <HAL_GetTick>
 800971e:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009720:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009724:	4285      	cmp	r5, r0
 8009726:	d302      	bcc.n	800972e <HAL_I2C_Master_Transmit+0x222>
 8009728:	2d00      	cmp	r5, #0
 800972a:	f47f af68 	bne.w	80095fe <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800972e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8009730:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009734:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8009736:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009738:	0409      	lsls	r1, r1, #16
 800973a:	d50c      	bpl.n	8009756 <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
 800973c:	0441      	lsls	r1, r0, #17
 800973e:	d40a      	bmi.n	8009756 <HAL_I2C_Master_Transmit+0x24a>
 8009740:	2a20      	cmp	r2, #32
 8009742:	d008      	beq.n	8009756 <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009744:	685a      	ldr	r2, [r3, #4]
 8009746:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800974a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800974c:	f7fd ffd6 	bl	80076fc <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009750:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
 8009754:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009756:	699a      	ldr	r2, [r3, #24]
 8009758:	0690      	lsls	r0, r2, #26
 800975a:	f53f af50 	bmi.w	80095fe <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800975e:	f7fd ffcd 	bl	80076fc <HAL_GetTick>
 8009762:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009764:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009768:	2819      	cmp	r0, #25
 800976a:	d9f4      	bls.n	8009756 <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800976c:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800976e:	2701      	movs	r7, #1
 8009770:	e745      	b.n	80095fe <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009772:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 8009776:	7812      	ldrb	r2, [r2, #0]
 8009778:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800977a:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
 800977e:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
 8009782:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8009784:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
 8009788:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800978a:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800978c:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800978e:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8009790:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009794:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8009798:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800979c:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800979e:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80097a2:	2a00      	cmp	r2, #0
 80097a4:	f43f af13 	beq.w	80095ce <HAL_I2C_Master_Transmit+0xc2>
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	f47f af10 	bne.w	80095ce <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80097ae:	f8db 2000 	ldr.w	r2, [fp]
 80097b2:	1c6c      	adds	r4, r5, #1
 80097b4:	d134      	bne.n	8009820 <HAL_I2C_Master_Transmit+0x314>
 80097b6:	6993      	ldr	r3, [r2, #24]
 80097b8:	0618      	lsls	r0, r3, #24
 80097ba:	d5fc      	bpl.n	80097b6 <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097bc:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	2bff      	cmp	r3, #255	; 0xff
 80097c4:	d958      	bls.n	8009878 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80097c6:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80097c8:	4929      	ldr	r1, [pc, #164]	; (8009870 <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80097ca:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80097ce:	6853      	ldr	r3, [r2, #4]
 80097d0:	400b      	ands	r3, r1
 80097d2:	4928      	ldr	r1, [pc, #160]	; (8009874 <HAL_I2C_Master_Transmit+0x368>)
 80097d4:	ea4a 0303 	orr.w	r3, sl, r3
 80097d8:	4319      	orrs	r1, r3
 80097da:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
 80097dc:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f47f aef9 	bne.w	80095da <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80097e8:	4642      	mov	r2, r8
 80097ea:	4629      	mov	r1, r5
 80097ec:	4658      	mov	r0, fp
 80097ee:	f7ff fd71 	bl	80092d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	d151      	bne.n	800989a <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097f6:	f8db 3000 	ldr.w	r3, [fp]
 80097fa:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 80097fc:	4c1a      	ldr	r4, [pc, #104]	; (8009868 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097fe:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009800:	f8db 1000 	ldr.w	r1, [fp]
 8009804:	684b      	ldr	r3, [r1, #4]
 8009806:	4023      	ands	r3, r4
 8009808:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800980a:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800980e:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009812:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
 8009816:	e6af      	b.n	8009578 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
 8009818:	2f00      	cmp	r7, #0
 800981a:	f43f aefb 	beq.w	8009614 <HAL_I2C_Master_Transmit+0x108>
 800981e:	e6fd      	b.n	800961c <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009820:	6993      	ldr	r3, [r2, #24]
 8009822:	0619      	lsls	r1, r3, #24
 8009824:	d4ca      	bmi.n	80097bc <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009826:	f7fd ff69 	bl	80076fc <HAL_GetTick>
 800982a:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800982e:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009832:	4285      	cmp	r5, r0
 8009834:	d301      	bcc.n	800983a <HAL_I2C_Master_Transmit+0x32e>
 8009836:	2d00      	cmp	r5, #0
 8009838:	d1bb      	bne.n	80097b2 <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800983a:	6993      	ldr	r3, [r2, #24]
 800983c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8009840:	d1b7      	bne.n	80097b2 <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009842:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009846:	2120      	movs	r1, #32
          return HAL_ERROR;
 8009848:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800984a:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800984e:	430a      	orrs	r2, r1
 8009850:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009854:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009858:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
 800985c:	e68c      	b.n	8009578 <HAL_I2C_Master_Transmit+0x6c>
 800985e:	bf00      	nop
 8009860:	fc009800 	.word	0xfc009800
 8009864:	02002000 	.word	0x02002000
 8009868:	fe00e800 	.word	0xfe00e800
 800986c:	01ff2000 	.word	0x01ff2000
 8009870:	fc009c00 	.word	0xfc009c00
 8009874:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
 8009878:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800987c:	4808      	ldr	r0, [pc, #32]	; (80098a0 <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
 800987e:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009880:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 8009882:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8009886:	6853      	ldr	r3, [r2, #4]
 8009888:	4003      	ands	r3, r0
 800988a:	ea4a 0303 	orr.w	r3, sl, r3
 800988e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009892:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009896:	6053      	str	r3, [r2, #4]
}
 8009898:	e699      	b.n	80095ce <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
 800989a:	2001      	movs	r0, #1
 800989c:	e66c      	b.n	8009578 <HAL_I2C_Master_Transmit+0x6c>
 800989e:	bf00      	nop
 80098a0:	fc009c00 	.word	0xfc009c00

080098a4 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80098a4:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 80098a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80098a8:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80098aa:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 80098ac:	b103      	cbz	r3, 80098b0 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80098ae:	4718      	bx	r3
}
 80098b0:	4770      	bx	lr
 80098b2:	bf00      	nop

080098b4 <HAL_I2C_SlaveTxCpltCallback>:
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop

080098b8 <HAL_I2C_SlaveRxCpltCallback>:
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop

080098bc <I2C_ITSlaveSeqCplt>:
{
 80098bc:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80098be:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098c0:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80098c2:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80098c4:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80098c8:	0451      	lsls	r1, r2, #17
 80098ca:	d50c      	bpl.n	80098e6 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80098d2:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80098d4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80098d8:	2b29      	cmp	r3, #41	; 0x29
 80098da:	d00e      	beq.n	80098fa <I2C_ITSlaveSeqCplt+0x3e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80098dc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80098e0:	2b2a      	cmp	r3, #42	; 0x2a
 80098e2:	d024      	beq.n	800992e <I2C_ITSlaveSeqCplt+0x72>
}
 80098e4:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80098e6:	0412      	lsls	r2, r2, #16
 80098e8:	d5f4      	bpl.n	80098d4 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80098f0:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80098f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80098f6:	2b29      	cmp	r3, #41	; 0x29
 80098f8:	d1f0      	bne.n	80098dc <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80098fa:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80098fc:	2321      	movs	r3, #33	; 0x21
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80098fe:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8009900:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009904:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009908:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800990a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800990e:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009910:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8009914:	2a28      	cmp	r2, #40	; 0x28
 8009916:	bf0c      	ite	eq
 8009918:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 800991c:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009920:	4013      	ands	r3, r2
 8009922:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8009924:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009928:	f7ff ffc4 	bl	80098b4 <HAL_I2C_SlaveTxCpltCallback>
}
 800992c:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800992e:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009930:	2322      	movs	r3, #34	; 0x22
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009932:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8009934:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009938:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800993c:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800993e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009942:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009944:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8009948:	2a28      	cmp	r2, #40	; 0x28
 800994a:	bf0c      	ite	eq
 800994c:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 8009950:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009954:	4013      	ands	r3, r2
 8009956:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8009958:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800995c:	f7ff ffac 	bl	80098b8 <HAL_I2C_SlaveRxCpltCallback>
}
 8009960:	bd08      	pop	{r3, pc}
 8009962:	bf00      	nop

08009964 <HAL_I2C_AddrCallback>:
}
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop

08009968 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8009968:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 800996a:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800996c:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800996e:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8009970:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009972:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009974:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8009976:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 8009978:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800997c:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8009980:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8009982:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009986:	d10f      	bne.n	80099a8 <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8009988:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800998c:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8009990:	f013 0306 	ands.w	r3, r3, #6
 8009994:	d106      	bne.n	80099a4 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
 8009996:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8009998:	3501      	adds	r5, #1
 800999a:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800999c:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800999e:	2d02      	cmp	r5, #2
 80099a0:	d00c      	beq.n	80099bc <I2C_ITAddrCplt.part.0+0x54>
}
 80099a2:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80099a4:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80099a8:	6823      	ldr	r3, [r4, #0]
 80099aa:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 80099ae:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 80099b0:	2300      	movs	r3, #0
 80099b2:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80099b6:	f7ff ffd5 	bl	8009964 <HAL_I2C_AddrCallback>
}
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80099bc:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 80099be:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80099c0:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 80099c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80099c6:	f7ff ffcd 	bl	8009964 <HAL_I2C_AddrCallback>
}
 80099ca:	bd70      	pop	{r4, r5, r6, pc}

080099cc <HAL_I2C_ListenCpltCallback>:
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop

080099d0 <HAL_I2C_ErrorCallback>:
 80099d0:	4770      	bx	lr
 80099d2:	bf00      	nop

080099d4 <HAL_I2C_AbortCpltCallback>:
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop

080099d8 <I2C_DMAAbort>:
{
 80099d8:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099da:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 80099dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80099de:	b10b      	cbz	r3, 80099e4 <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80099e0:	2200      	movs	r2, #0
 80099e2:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 80099e4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80099e6:	b10b      	cbz	r3, 80099ec <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80099e8:	2200      	movs	r2, #0
 80099ea:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80099ec:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80099f0:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 80099f2:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80099f6:	d005      	beq.n	8009a04 <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 80099f8:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80099fa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80099fe:	f7ff ffe7 	bl	80099d0 <HAL_I2C_ErrorCallback>
}
 8009a02:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8009a04:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8009a06:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8009a0a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a0e:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8009a10:	f7ff ffe0 	bl	80099d4 <HAL_I2C_AbortCpltCallback>
}
 8009a14:	bd08      	pop	{r3, pc}
 8009a16:	bf00      	nop

08009a18 <I2C_ITError>:
{
 8009a18:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009a1a:	4a5d      	ldr	r2, [pc, #372]	; (8009b90 <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009a1c:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009a1e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8009a22:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009a24:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009a28:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009a2a:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009a2c:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8009a2e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009a30:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8009a32:	ea41 0102 	orr.w	r1, r1, r2
 8009a36:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009a38:	d874      	bhi.n	8009b24 <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a3a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a3e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a42:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009a46:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a48:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a4c:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009a4e:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a50:	bf14      	ite	ne
 8009a52:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 8009a56:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a5a:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009a5c:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009a60:	bf18      	it	ne
 8009a62:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009a66:	4013      	ands	r3, r2
 8009a68:	6003      	str	r3, [r0, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009a6a:	4b4a      	ldr	r3, [pc, #296]	; (8009b94 <I2C_ITError+0x17c>)
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009a6c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009a70:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009a72:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 8009a74:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8009a76:	b118      	cbz	r0, 8009a80 <I2C_ITError+0x68>
 8009a78:	2b11      	cmp	r3, #17
 8009a7a:	d01e      	beq.n	8009aba <I2C_ITError+0xa2>
 8009a7c:	2b21      	cmp	r3, #33	; 0x21
 8009a7e:	d01c      	beq.n	8009aba <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009a80:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009a82:	b118      	cbz	r0, 8009a8c <I2C_ITError+0x74>
 8009a84:	2b12      	cmp	r3, #18
 8009a86:	d030      	beq.n	8009aea <I2C_ITError+0xd2>
 8009a88:	2b22      	cmp	r3, #34	; 0x22
 8009a8a:	d02e      	beq.n	8009aea <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009a8c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009a90:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a92:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009a96:	d006      	beq.n	8009aa6 <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
 8009a98:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8009a9a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009a9c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009aa0:	f7ff ff96 	bl	80099d0 <HAL_I2C_ErrorCallback>
}
 8009aa4:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8009aa6:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8009aa8:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8009aaa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8009aae:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009ab2:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8009ab4:	f7ff ff8e 	bl	80099d4 <HAL_I2C_AbortCpltCallback>
}
 8009ab8:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	0451      	lsls	r1, r2, #17
 8009ac0:	d460      	bmi.n	8009b84 <I2C_ITError+0x16c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009ac2:	f7ff faa3 	bl	800900c <HAL_DMA_GetState>
 8009ac6:	2801      	cmp	r0, #1
 8009ac8:	d0e0      	beq.n	8009a8c <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009aca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8009acc:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8009ace:	4932      	ldr	r1, [pc, #200]	; (8009b98 <I2C_ITError+0x180>)
 8009ad0:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8009ad2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8009ad6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009ad8:	f7fe fd04 	bl	80084e4 <HAL_DMA_Abort_IT>
 8009adc:	2800      	cmp	r0, #0
 8009ade:	d0e1      	beq.n	8009aa4 <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009ae0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8009ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009ae6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009ae8:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	0412      	lsls	r2, r2, #16
 8009af0:	d504      	bpl.n	8009afc <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009af8:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009afa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009afc:	f7ff fa86 	bl	800900c <HAL_DMA_GetState>
 8009b00:	2801      	cmp	r0, #1
 8009b02:	d0c3      	beq.n	8009a8c <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009b04:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 8009b06:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009b08:	4923      	ldr	r1, [pc, #140]	; (8009b98 <I2C_ITError+0x180>)
 8009b0a:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8009b0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009b10:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009b12:	f7fe fce7 	bl	80084e4 <HAL_DMA_Abort_IT>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d0c4      	beq.n	8009aa4 <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009b1a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8009b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009b20:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009b22:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009b24:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009b26:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009b2a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009b2e:	6813      	ldr	r3, [r2, #0]
 8009b30:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8009b34:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009b36:	6803      	ldr	r3, [r0, #0]
 8009b38:	699a      	ldr	r2, [r3, #24]
 8009b3a:	0792      	lsls	r2, r2, #30
 8009b3c:	d501      	bpl.n	8009b42 <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 8009b3e:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b40:	6803      	ldr	r3, [r0, #0]
 8009b42:	699a      	ldr	r2, [r3, #24]
 8009b44:	07d6      	lsls	r6, r2, #31
 8009b46:	d403      	bmi.n	8009b50 <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009b48:	699a      	ldr	r2, [r3, #24]
 8009b4a:	f042 0201 	orr.w	r2, r2, #1
 8009b4e:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8009b50:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009b54:	2b60      	cmp	r3, #96	; 0x60
 8009b56:	d012      	beq.n	8009b7e <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
 8009b58:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009b5a:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
 8009b5c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009b60:	699a      	ldr	r2, [r3, #24]
 8009b62:	0695      	lsls	r5, r2, #26
 8009b64:	d50b      	bpl.n	8009b7e <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b66:	699a      	ldr	r2, [r3, #24]
 8009b68:	06d0      	lsls	r0, r2, #27
 8009b6a:	d506      	bpl.n	8009b7a <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b6c:	2210      	movs	r2, #16
 8009b6e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b70:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b72:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b74:	f042 0204 	orr.w	r2, r2, #4
 8009b78:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	6363      	str	r3, [r4, #52]	; 0x34
 8009b82:	e776      	b.n	8009a72 <I2C_ITError+0x5a>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009b8a:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009b8c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8009b8e:	e798      	b.n	8009ac2 <I2C_ITError+0xaa>
 8009b90:	ffff0000 	.word	0xffff0000
 8009b94:	08009d45 	.word	0x08009d45
 8009b98:	080099d9 	.word	0x080099d9

08009b9c <I2C_ITSlaveCplt>:
{
 8009b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009b9e:	6802      	ldr	r2, [r0, #0]
{
 8009ba0:	460d      	mov	r5, r1
 8009ba2:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8009ba4:	6811      	ldr	r1, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8009ba6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009baa:	2020      	movs	r0, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009bac:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009bb0:	61d0      	str	r0, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8009bb2:	2b21      	cmp	r3, #33	; 0x21
 8009bb4:	d16f      	bne.n	8009c96 <I2C_ITSlaveCplt+0xfa>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009bb6:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009bb8:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009bbc:	6802      	ldr	r2, [r0, #0]
 8009bbe:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
 8009bc2:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009bc4:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009bc6:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
 8009bc8:	485c      	ldr	r0, [pc, #368]	; (8009d3c <I2C_ITSlaveCplt+0x1a0>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009bca:	6853      	ldr	r3, [r2, #4]
 8009bcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bd0:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8009bd2:	6822      	ldr	r2, [r4, #0]
 8009bd4:	6853      	ldr	r3, [r2, #4]
 8009bd6:	4003      	ands	r3, r0
 8009bd8:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	699a      	ldr	r2, [r3, #24]
 8009bde:	0797      	lsls	r7, r2, #30
 8009be0:	d502      	bpl.n	8009be8 <I2C_ITSlaveCplt+0x4c>
    hi2c->Instance->TXDR = 0x00U;
 8009be2:	2200      	movs	r2, #0
 8009be4:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009be6:	6823      	ldr	r3, [r4, #0]
 8009be8:	699a      	ldr	r2, [r3, #24]
 8009bea:	07d6      	lsls	r6, r2, #31
 8009bec:	d403      	bmi.n	8009bf6 <I2C_ITSlaveCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009bee:	699a      	ldr	r2, [r3, #24]
 8009bf0:	f042 0201 	orr.w	r2, r2, #1
 8009bf4:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8009bf6:	0448      	lsls	r0, r1, #17
 8009bf8:	d558      	bpl.n	8009cac <I2C_ITSlaveCplt+0x110>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009bfa:	6822      	ldr	r2, [r4, #0]
 8009bfc:	6813      	ldr	r3, [r2, #0]
 8009bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c02:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8009c04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009c06:	b11b      	cbz	r3, 8009c10 <I2C_ITSlaveCplt+0x74>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	6853      	ldr	r3, [r2, #4]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009c10:	076a      	lsls	r2, r5, #29
 8009c12:	d50a      	bpl.n	8009c2a <I2C_ITSlaveCplt+0x8e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009c14:	6822      	ldr	r2, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8009c16:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009c1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009c22:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8009c24:	3301      	adds	r3, #1
 8009c26:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009c28:	bb72      	cbnz	r2, 8009c88 <I2C_ITSlaveCplt+0xec>
  if (hi2c->XferCount != 0U)
 8009c2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	b11b      	cbz	r3, 8009c38 <I2C_ITSlaveCplt+0x9c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009c30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009c32:	f043 0304 	orr.w	r3, r3, #4
 8009c36:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c38:	2700      	movs	r7, #0
 8009c3a:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009c3e:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8009c40:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009c42:	2e00      	cmp	r6, #0
 8009c44:	d13d      	bne.n	8009cc2 <I2C_ITSlaveCplt+0x126>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009c46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009c48:	4d3d      	ldr	r5, [pc, #244]	; (8009d40 <I2C_ITSlaveCplt+0x1a4>)
 8009c4a:	42ab      	cmp	r3, r5
 8009c4c:	d10e      	bne.n	8009c6c <I2C_ITSlaveCplt+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009c4e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009c52:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8009c54:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009c58:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 8009c5a:	f04f 0320 	mov.w	r3, #32
 8009c5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009c62:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009c64:	d066      	beq.n	8009d34 <I2C_ITSlaveCplt+0x198>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009c66:	f7ff fe25 	bl	80098b4 <HAL_I2C_SlaveTxCpltCallback>
}
 8009c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveSeqCplt(hi2c);
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	f7ff fe25 	bl	80098bc <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8009c72:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c74:	62e5      	str	r5, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 8009c76:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8009c78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009c7c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8009c80:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8009c82:	f7ff fea3 	bl	80099cc <HAL_I2C_ListenCpltCallback>
}
 8009c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferCount--;
 8009c88:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009c8a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009c8c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009c8e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	8563      	strh	r3, [r4, #42]	; 0x2a
 8009c94:	e7c9      	b.n	8009c2a <I2C_ITSlaveCplt+0x8e>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009c96:	2b22      	cmp	r3, #34	; 0x22
 8009c98:	d195      	bne.n	8009bc6 <I2C_ITSlaveCplt+0x2a>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009c9a:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009c9c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009ca0:	6802      	ldr	r2, [r0, #0]
 8009ca2:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
 8009ca6:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8009ca8:	6323      	str	r3, [r4, #48]	; 0x30
 8009caa:	e78c      	b.n	8009bc6 <I2C_ITSlaveCplt+0x2a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8009cac:	0409      	lsls	r1, r1, #16
 8009cae:	d5af      	bpl.n	8009c10 <I2C_ITSlaveCplt+0x74>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009cb0:	6822      	ldr	r2, [r4, #0]
 8009cb2:	6813      	ldr	r3, [r2, #0]
 8009cb4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009cb8:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8009cba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1a3      	bne.n	8009c08 <I2C_ITSlaveCplt+0x6c>
 8009cc0:	e7a6      	b.n	8009c10 <I2C_ITSlaveCplt+0x74>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8009cc2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f7ff fea7 	bl	8009a18 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009cca:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009cce:	2b28      	cmp	r3, #40	; 0x28
 8009cd0:	d1cb      	bne.n	8009c6a <I2C_ITSlaveCplt+0xce>
  hi2c->State = HAL_I2C_STATE_READY;
 8009cd2:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cd4:	4a1a      	ldr	r2, [pc, #104]	; (8009d40 <I2C_ITSlaveCplt+0x1a4>)
  hi2c->XferISR = NULL;
 8009cd6:	6367      	str	r7, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009cd8:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009cda:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009cdc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009ce0:	076b      	lsls	r3, r5, #29
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ce2:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009ce6:	d512      	bpl.n	8009d0e <I2C_ITSlaveCplt+0x172>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009ce8:	6822      	ldr	r2, [r4, #0]
 8009cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009cee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009cf2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009cf8:	b14a      	cbz	r2, 8009d0e <I2C_ITSlaveCplt+0x172>
      hi2c->XferCount--;
 8009cfa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009cfc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009cfe:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009d00:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d06:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009d08:	f043 0304 	orr.w	r3, r3, #4
 8009d0c:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009d0e:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d10:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d12:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8009d16:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009d18:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009d1c:	6813      	ldr	r3, [r2, #0]
 8009d1e:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8009d22:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 8009d28:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 8009d2a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8009d2e:	f7ff fe4d 	bl	80099cc <HAL_I2C_ListenCpltCallback>
}
 8009d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009d34:	f7ff fdc0 	bl	80098b8 <HAL_I2C_SlaveRxCpltCallback>
}
 8009d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	fe00e800 	.word	0xfe00e800
 8009d40:	ffff0000 	.word	0xffff0000

08009d44 <I2C_Slave_ISR_IT>:
{
 8009d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8009d46:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8009d4a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d07f      	beq.n	8009e50 <I2C_Slave_ISR_IT+0x10c>
 8009d50:	4617      	mov	r7, r2
 8009d52:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009d54:	068a      	lsls	r2, r1, #26
 8009d56:	4604      	mov	r4, r0
 8009d58:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8009d5a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009d5e:	d501      	bpl.n	8009d64 <I2C_Slave_ISR_IT+0x20>
 8009d60:	06bb      	lsls	r3, r7, #26
 8009d62:	d461      	bmi.n	8009e28 <I2C_Slave_ISR_IT+0xe4>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009d64:	06ea      	lsls	r2, r5, #27
 8009d66:	d51b      	bpl.n	8009da0 <I2C_Slave_ISR_IT+0x5c>
 8009d68:	06fb      	lsls	r3, r7, #27
 8009d6a:	d519      	bpl.n	8009da0 <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount == 0U)
 8009d6c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d15e      	bne.n	8009e32 <I2C_Slave_ISR_IT+0xee>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009d74:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8009d78:	2a28      	cmp	r2, #40	; 0x28
 8009d7a:	d102      	bne.n	8009d82 <I2C_Slave_ISR_IT+0x3e>
 8009d7c:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8009d80:	d07f      	beq.n	8009e82 <I2C_Slave_ISR_IT+0x13e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009d82:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d86:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009d88:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009d8e:	d102      	bne.n	8009d96 <I2C_Slave_ISR_IT+0x52>
 8009d90:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8009d94:	d162      	bne.n	8009e5c <I2C_Slave_ISR_IT+0x118>
  __HAL_UNLOCK(hi2c);
 8009d96:	2300      	movs	r3, #0
  return HAL_OK;
 8009d98:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 8009d9a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8009d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009da0:	076a      	lsls	r2, r5, #29
 8009da2:	d40d      	bmi.n	8009dc0 <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009da4:	0728      	lsls	r0, r5, #28
 8009da6:	d529      	bpl.n	8009dfc <I2C_Slave_ISR_IT+0xb8>
 8009da8:	0739      	lsls	r1, r7, #28
 8009daa:	d527      	bpl.n	8009dfc <I2C_Slave_ISR_IT+0xb8>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8009dac:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8009db0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009db4:	2b28      	cmp	r3, #40	; 0x28
 8009db6:	d060      	beq.n	8009e7a <I2C_Slave_ISR_IT+0x136>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009db8:	6823      	ldr	r3, [r4, #0]
 8009dba:	2208      	movs	r2, #8
 8009dbc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009dbe:	e7ea      	b.n	8009d96 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8009dc0:	077b      	lsls	r3, r7, #29
 8009dc2:	d5ef      	bpl.n	8009da4 <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount > 0U)
 8009dc4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	b16b      	cbz	r3, 8009de6 <I2C_Slave_ISR_IT+0xa2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009dca:	6822      	ldr	r2, [r4, #0]
 8009dcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009dce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009dd0:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8009dd2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8009dd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8009dd6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009dd8:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8009dda:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8009ddc:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009dde:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8009de0:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8009de2:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009de4:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8009de6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1d3      	bne.n	8009d96 <I2C_Slave_ISR_IT+0x52>
 8009dee:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8009df2:	d0d0      	beq.n	8009d96 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8009df4:	4620      	mov	r0, r4
 8009df6:	f7ff fd61 	bl	80098bc <I2C_ITSlaveSeqCplt>
 8009dfa:	e7cc      	b.n	8009d96 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009dfc:	07aa      	lsls	r2, r5, #30
 8009dfe:	d5ca      	bpl.n	8009d96 <I2C_Slave_ISR_IT+0x52>
 8009e00:	07bb      	lsls	r3, r7, #30
 8009e02:	d5c8      	bpl.n	8009d96 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 8009e04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009e06:	b29b      	uxth	r3, r3
 8009e08:	b323      	cbz	r3, 8009e54 <I2C_Slave_ISR_IT+0x110>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009e0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009e0c:	6823      	ldr	r3, [r4, #0]
 8009e0e:	7812      	ldrb	r2, [r2, #0]
 8009e10:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009e12:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8009e14:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8009e16:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009e18:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8009e1a:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8009e1c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009e1e:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8009e20:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8009e22:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009e24:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009e26:	e7b6      	b.n	8009d96 <I2C_Slave_ISR_IT+0x52>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8009e28:	f7ff feb8 	bl	8009b9c <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009e2c:	06ea      	lsls	r2, r5, #27
 8009e2e:	d5b7      	bpl.n	8009da0 <I2C_Slave_ISR_IT+0x5c>
 8009e30:	e79a      	b.n	8009d68 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	2210      	movs	r2, #16
 8009e36:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009e38:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009e3a:	f043 0304 	orr.w	r3, r3, #4
 8009e3e:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8009e40:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8009e44:	d1a7      	bne.n	8009d96 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8009e46:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009e48:	4620      	mov	r0, r4
 8009e4a:	f7ff fde5 	bl	8009a18 <I2C_ITError>
 8009e4e:	e7a2      	b.n	8009d96 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8009e50:	2002      	movs	r0, #2
}
 8009e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009e54:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8009e58:	d19d      	bne.n	8009d96 <I2C_Slave_ISR_IT+0x52>
 8009e5a:	e7cb      	b.n	8009df4 <I2C_Slave_ISR_IT+0xb0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009e5c:	6823      	ldr	r3, [r4, #0]
 8009e5e:	699a      	ldr	r2, [r3, #24]
 8009e60:	0790      	lsls	r0, r2, #30
 8009e62:	d502      	bpl.n	8009e6a <I2C_Slave_ISR_IT+0x126>
    hi2c->Instance->TXDR = 0x00U;
 8009e64:	2200      	movs	r2, #0
 8009e66:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e68:	6823      	ldr	r3, [r4, #0]
 8009e6a:	699a      	ldr	r2, [r3, #24]
 8009e6c:	07d1      	lsls	r1, r2, #31
 8009e6e:	d4c1      	bmi.n	8009df4 <I2C_Slave_ISR_IT+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009e70:	699a      	ldr	r2, [r3, #24]
 8009e72:	f042 0201 	orr.w	r2, r2, #1
 8009e76:	619a      	str	r2, [r3, #24]
 8009e78:	e7bc      	b.n	8009df4 <I2C_Slave_ISR_IT+0xb0>
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f7ff fd74 	bl	8009968 <I2C_ITAddrCplt.part.0>
 8009e80:	e789      	b.n	8009d96 <I2C_Slave_ISR_IT+0x52>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e82:	4918      	ldr	r1, [pc, #96]	; (8009ee4 <I2C_Slave_ISR_IT+0x1a0>)
  hi2c->State = HAL_I2C_STATE_READY;
 8009e84:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009e86:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
 8009e88:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e8a:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e8c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8009e8e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009e96:	d512      	bpl.n	8009ebe <I2C_Slave_ISR_IT+0x17a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009e98:	6822      	ldr	r2, [r4, #0]
 8009e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009e9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8009ea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009ea2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8009ea8:	b14a      	cbz	r2, 8009ebe <I2C_Slave_ISR_IT+0x17a>
      hi2c->XferCount--;
 8009eaa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8009eac:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8009eae:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8009eb0:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009eb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009eb8:	f043 0304 	orr.w	r3, r3, #4
 8009ebc:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009ebe:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ec0:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ec2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8009ec6:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009ec8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009ecc:	6813      	ldr	r3, [r2, #0]
 8009ece:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8009ed2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 8009ed8:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 8009eda:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8009ede:	f7ff fd75 	bl	80099cc <HAL_I2C_ListenCpltCallback>
}
 8009ee2:	e758      	b.n	8009d96 <I2C_Slave_ISR_IT+0x52>
 8009ee4:	ffff0000 	.word	0xffff0000

08009ee8 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009ee8:	6803      	ldr	r3, [r0, #0]
{
 8009eea:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009eec:	699a      	ldr	r2, [r3, #24]
 8009eee:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009ef0:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009ef2:	f412 7f80 	tst.w	r2, #256	; 0x100
 8009ef6:	d032      	beq.n	8009f5e <HAL_I2C_ER_IRQHandler+0x76>
 8009ef8:	f011 0f80 	tst.w	r1, #128	; 0x80
 8009efc:	d021      	beq.n	8009f42 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009efe:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009f00:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009f04:	f041 0101 	orr.w	r1, r1, #1
 8009f08:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009f0a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009f0c:	0553      	lsls	r3, r2, #21
 8009f0e:	d507      	bpl.n	8009f20 <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009f10:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009f12:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009f14:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009f18:	f041 0108 	orr.w	r1, r1, #8
 8009f1c:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009f1e:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009f20:	0592      	lsls	r2, r2, #22
 8009f22:	d507      	bpl.n	8009f34 <HAL_I2C_ER_IRQHandler+0x4c>
 8009f24:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009f26:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009f28:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009f2c:	f043 0302 	orr.w	r3, r3, #2
 8009f30:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009f32:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
 8009f34:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009f36:	f011 0f0b 	tst.w	r1, #11
 8009f3a:	d10c      	bne.n	8009f56 <HAL_I2C_ER_IRQHandler+0x6e>
}
 8009f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f40:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009f42:	0553      	lsls	r3, r2, #21
 8009f44:	d4f6      	bmi.n	8009f34 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009f46:	0593      	lsls	r3, r2, #22
 8009f48:	d5f4      	bpl.n	8009f34 <HAL_I2C_ER_IRQHandler+0x4c>
 8009f4a:	060a      	lsls	r2, r1, #24
 8009f4c:	d4eb      	bmi.n	8009f26 <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
 8009f4e:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009f50:	f011 0f0b 	tst.w	r1, #11
 8009f54:	d0f2      	beq.n	8009f3c <HAL_I2C_ER_IRQHandler+0x54>
}
 8009f56:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8009f5a:	f7ff bd5d 	b.w	8009a18 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009f5e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8009f62:	d0f0      	beq.n	8009f46 <HAL_I2C_ER_IRQHandler+0x5e>
 8009f64:	0609      	lsls	r1, r1, #24
 8009f66:	d5e5      	bpl.n	8009f34 <HAL_I2C_ER_IRQHandler+0x4c>
 8009f68:	e7d3      	b.n	8009f12 <HAL_I2C_ER_IRQHandler+0x2a>
 8009f6a:	bf00      	nop

08009f6c <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f6c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8009f70:	2a20      	cmp	r2, #32
 8009f72:	d129      	bne.n	8009fc8 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
 8009f74:	4603      	mov	r3, r0
{
 8009f76:	b500      	push	{lr}
 8009f78:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f7c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8009f80:	2a01      	cmp	r2, #1
 8009f82:	d023      	beq.n	8009fcc <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8009f84:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009f86:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f88:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 8009f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009f90:	2224      	movs	r2, #36	; 0x24
 8009f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8009f96:	6802      	ldr	r2, [r0, #0]
 8009f98:	f022 0201 	bic.w	r2, r2, #1
 8009f9c:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009f9e:	6818      	ldr	r0, [r3, #0]
 8009fa0:	6802      	ldr	r2, [r0, #0]
 8009fa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009fa6:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8009fa8:	6818      	ldr	r0, [r3, #0]
 8009faa:	6802      	ldr	r2, [r0, #0]
 8009fac:	4311      	orrs	r1, r2
 8009fae:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8009fb0:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 8009fb2:	6819      	ldr	r1, [r3, #0]
 8009fb4:	680a      	ldr	r2, [r1, #0]
 8009fb6:	f042 0201 	orr.w	r2, r2, #1
 8009fba:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8009fbc:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8009fc0:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009fc4:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8009fc8:	2002      	movs	r0, #2
}
 8009fca:	4770      	bx	lr
    return HAL_BUSY;
 8009fcc:	2002      	movs	r0, #2
}
 8009fce:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fd2:	bf00      	nop

08009fd4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fd4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8009fd8:	2a20      	cmp	r2, #32
 8009fda:	d127      	bne.n	800a02c <HAL_I2CEx_ConfigDigitalFilter+0x58>
 8009fdc:	4603      	mov	r3, r0
{
 8009fde:	b500      	push	{lr}
 8009fe0:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fe4:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8009fe8:	2a01      	cmp	r2, #1
 8009fea:	d021      	beq.n	800a030 <HAL_I2CEx_ConfigDigitalFilter+0x5c>
 8009fec:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009fee:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ff0:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 8009ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8009ff8:	2224      	movs	r2, #36	; 0x24
 8009ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8009ffe:	6802      	ldr	r2, [r0, #0]
 800a000:	f022 0201 	bic.w	r2, r2, #1
 800a004:	6002      	str	r2, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 800a006:	6818      	ldr	r0, [r3, #0]
 800a008:	6802      	ldr	r2, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800a00a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800a00e:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800a012:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800a014:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 800a016:	6819      	ldr	r1, [r3, #0]
 800a018:	680a      	ldr	r2, [r1, #0]
 800a01a:	f042 0201 	orr.w	r2, r2, #1
 800a01e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800a020:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a024:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800a028:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800a02c:	2002      	movs	r0, #2
}
 800a02e:	4770      	bx	lr
    return HAL_BUSY;
 800a030:	2002      	movs	r0, #2
}
 800a032:	f85d fb04 	ldr.w	pc, [sp], #4
 800a036:	bf00      	nop

0800a038 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a038:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a03a:	4c10      	ldr	r4, [pc, #64]	; (800a07c <HAL_PWREx_ConfigSupply+0x44>)
 800a03c:	68e3      	ldr	r3, [r4, #12]
 800a03e:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a042:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a044:	d105      	bne.n	800a052 <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a046:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a04a:	1a18      	subs	r0, r3, r0
 800a04c:	bf18      	it	ne
 800a04e:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800a050:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a052:	f023 0307 	bic.w	r3, r3, #7
 800a056:	4318      	orrs	r0, r3
 800a058:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800a05a:	f7fd fb4f 	bl	80076fc <HAL_GetTick>
 800a05e:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a060:	e005      	b.n	800a06e <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a062:	f7fd fb4b 	bl	80076fc <HAL_GetTick>
 800a066:	1b40      	subs	r0, r0, r5
 800a068:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a06c:	d804      	bhi.n	800a078 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a06e:	6863      	ldr	r3, [r4, #4]
 800a070:	049b      	lsls	r3, r3, #18
 800a072:	d5f6      	bpl.n	800a062 <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800a074:	2000      	movs	r0, #0
}
 800a076:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800a078:	2001      	movs	r0, #1
}
 800a07a:	bd38      	pop	{r3, r4, r5, pc}
 800a07c:	58024800 	.word	0x58024800

0800a080 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a080:	4b3b      	ldr	r3, [pc, #236]	; (800a170 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800a082:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a084:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a086:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a088:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800a08a:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a08e:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a090:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800a094:	d038      	beq.n	800a108 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a096:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a09a:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a09e:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a0a2:	fb05 f101 	mul.w	r1, r5, r1
 800a0a6:	2a01      	cmp	r2, #1
 800a0a8:	ee07 1a90 	vmov	s15, r1
 800a0ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800a0b0:	d002      	beq.n	800a0b8 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800a0b2:	2a02      	cmp	r2, #2
 800a0b4:	d04e      	beq.n	800a154 <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800a0b6:	b34a      	cbz	r2, 800a10c <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0b8:	ee07 0a90 	vmov	s15, r0
 800a0bc:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800a174 <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800a0c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c6:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a0ca:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800a178 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800a0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d2:	ee06 3a90 	vmov	s13, r3
 800a0d6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800a0da:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a0de:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a0e2:	eee7 6a25 	vfma.f32	s13, s14, s11
 800a0e6:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a0ea:	4b21      	ldr	r3, [pc, #132]	; (800a170 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800a0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ee:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a0f2:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a0f4:	ee07 3a90 	vmov	s15, r3
 800a0f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a0fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a104:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800a108:	bc30      	pop	{r4, r5}
 800a10a:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	0692      	lsls	r2, r2, #26
 800a110:	d527      	bpl.n	800a162 <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a112:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a114:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a118:	4a18      	ldr	r2, [pc, #96]	; (800a17c <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a11a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a11e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a120:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a128:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800a178 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800a12c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a130:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a132:	ee06 3a90 	vmov	s13, r3
 800a136:	ee05 2a90 	vmov	s11, r2
 800a13a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a13e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800a142:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a146:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800a14a:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a14e:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a152:	e7ca      	b.n	800a0ea <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a154:	ee07 0a90 	vmov	s15, r0
 800a158:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a180 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 800a15c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a160:	e7b0      	b.n	800a0c4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a162:	ee07 0a90 	vmov	s15, r0
 800a166:	eddf 6a07 	vldr	s13, [pc, #28]	; 800a184 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800a16a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a16e:	e7a9      	b.n	800a0c4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800a170:	58024400 	.word	0x58024400
 800a174:	4a742400 	.word	0x4a742400
 800a178:	39000000 	.word	0x39000000
 800a17c:	03d09000 	.word	0x03d09000
 800a180:	4bbebc20 	.word	0x4bbebc20
 800a184:	4c742400 	.word	0x4c742400

0800a188 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800a188:	2800      	cmp	r0, #0
 800a18a:	f000 81ef 	beq.w	800a56c <HAL_RCC_OscConfig+0x3e4>
{
 800a18e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a190:	6803      	ldr	r3, [r0, #0]
 800a192:	4604      	mov	r4, r0
 800a194:	07d9      	lsls	r1, r3, #31
 800a196:	d52e      	bpl.n	800a1f6 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a198:	49a4      	ldr	r1, [pc, #656]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
 800a19a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a19c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a19e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a1a2:	2a10      	cmp	r2, #16
 800a1a4:	f000 8107 	beq.w	800a3b6 <HAL_RCC_OscConfig+0x22e>
 800a1a8:	2a18      	cmp	r2, #24
 800a1aa:	f000 80ff 	beq.w	800a3ac <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1ae:	6863      	ldr	r3, [r4, #4]
 800a1b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1b4:	f000 812a 	beq.w	800a40c <HAL_RCC_OscConfig+0x284>
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	f040 8188 	bne.w	800a4ce <HAL_RCC_OscConfig+0x346>
 800a1be:	4b9b      	ldr	r3, [pc, #620]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a1c6:	601a      	str	r2, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a1ce:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a1d0:	6863      	ldr	r3, [r4, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	f000 815c 	beq.w	800a490 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 800a1d8:	f7fd fa90 	bl	80076fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1dc:	4e93      	ldr	r6, [pc, #588]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800a1de:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1e0:	e005      	b.n	800a1ee <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1e2:	f7fd fa8b 	bl	80076fc <HAL_GetTick>
 800a1e6:	1b40      	subs	r0, r0, r5
 800a1e8:	2864      	cmp	r0, #100	; 0x64
 800a1ea:	f200 814f 	bhi.w	800a48c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1ee:	6833      	ldr	r3, [r6, #0]
 800a1f0:	039b      	lsls	r3, r3, #14
 800a1f2:	d5f6      	bpl.n	800a1e2 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	079d      	lsls	r5, r3, #30
 800a1f8:	f100 808a 	bmi.w	800a310 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a1fc:	06d9      	lsls	r1, r3, #27
 800a1fe:	d533      	bpl.n	800a268 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a200:	4a8a      	ldr	r2, [pc, #552]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
 800a202:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a204:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a206:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a20a:	2b08      	cmp	r3, #8
 800a20c:	f000 80e3 	beq.w	800a3d6 <HAL_RCC_OscConfig+0x24e>
 800a210:	2b18      	cmp	r3, #24
 800a212:	f000 80db 	beq.w	800a3cc <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a216:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800a218:	4d84      	ldr	r5, [pc, #528]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 8176 	beq.w	800a50c <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a226:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a228:	f7fd fa68 	bl	80076fc <HAL_GetTick>
 800a22c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a22e:	e005      	b.n	800a23c <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a230:	f7fd fa64 	bl	80076fc <HAL_GetTick>
 800a234:	1b80      	subs	r0, r0, r6
 800a236:	2802      	cmp	r0, #2
 800a238:	f200 8128 	bhi.w	800a48c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a23c:	682b      	ldr	r3, [r5, #0]
 800a23e:	05db      	lsls	r3, r3, #23
 800a240:	d5f6      	bpl.n	800a230 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a242:	f7fd fa73 	bl	800772c <HAL_GetREVID>
 800a246:	f241 0303 	movw	r3, #4099	; 0x1003
 800a24a:	4298      	cmp	r0, r3
 800a24c:	f200 8266 	bhi.w	800a71c <HAL_RCC_OscConfig+0x594>
 800a250:	6a22      	ldr	r2, [r4, #32]
 800a252:	686b      	ldr	r3, [r5, #4]
 800a254:	2a20      	cmp	r2, #32
 800a256:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a25a:	bf0c      	ite	eq
 800a25c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800a260:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800a264:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	071d      	lsls	r5, r3, #28
 800a26a:	d516      	bpl.n	800a29a <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a26c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800a26e:	4d6f      	ldr	r5, [pc, #444]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 811b 	beq.w	800a4ac <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
 800a276:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a278:	f043 0301 	orr.w	r3, r3, #1
 800a27c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a27e:	f7fd fa3d 	bl	80076fc <HAL_GetTick>
 800a282:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a284:	e005      	b.n	800a292 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a286:	f7fd fa39 	bl	80076fc <HAL_GetTick>
 800a28a:	1b80      	subs	r0, r0, r6
 800a28c:	2802      	cmp	r0, #2
 800a28e:	f200 80fd 	bhi.w	800a48c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a292:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a294:	0798      	lsls	r0, r3, #30
 800a296:	d5f6      	bpl.n	800a286 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a298:	6823      	ldr	r3, [r4, #0]
 800a29a:	069a      	lsls	r2, r3, #26
 800a29c:	d516      	bpl.n	800a2cc <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a29e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800a2a0:	4d62      	ldr	r5, [pc, #392]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	f000 8121 	beq.w	800a4ea <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 800a2a8:	682b      	ldr	r3, [r5, #0]
 800a2aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a2ae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a2b0:	f7fd fa24 	bl	80076fc <HAL_GetTick>
 800a2b4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2b6:	e005      	b.n	800a2c4 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a2b8:	f7fd fa20 	bl	80076fc <HAL_GetTick>
 800a2bc:	1b80      	subs	r0, r0, r6
 800a2be:	2802      	cmp	r0, #2
 800a2c0:	f200 80e4 	bhi.w	800a48c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a2c4:	682b      	ldr	r3, [r5, #0]
 800a2c6:	049f      	lsls	r7, r3, #18
 800a2c8:	d5f6      	bpl.n	800a2b8 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	0759      	lsls	r1, r3, #29
 800a2ce:	f100 80a3 	bmi.w	800a418 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a2d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a2d4:	b1d0      	cbz	r0, 800a30c <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a2d6:	4d55      	ldr	r5, [pc, #340]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
 800a2d8:	692b      	ldr	r3, [r5, #16]
 800a2da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2de:	2b18      	cmp	r3, #24
 800a2e0:	f000 81b6 	beq.w	800a650 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 800a2e4:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a2e6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800a2e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2ec:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a2ee:	f000 8149 	beq.w	800a584 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
 800a2f2:	f7fd fa03 	bl	80076fc <HAL_GetTick>
 800a2f6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a2f8:	e005      	b.n	800a306 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2fa:	f7fd f9ff 	bl	80076fc <HAL_GetTick>
 800a2fe:	1b00      	subs	r0, r0, r4
 800a300:	2802      	cmp	r0, #2
 800a302:	f200 80c3 	bhi.w	800a48c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a306:	682b      	ldr	r3, [r5, #0]
 800a308:	019b      	lsls	r3, r3, #6
 800a30a:	d4f6      	bmi.n	800a2fa <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 800a30c:	2000      	movs	r0, #0
}
 800a30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a310:	4a46      	ldr	r2, [pc, #280]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
 800a312:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a314:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a316:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800a31a:	d12d      	bne.n	800a378 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a31c:	4b43      	ldr	r3, [pc, #268]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
 800a31e:	68e2      	ldr	r2, [r4, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	0759      	lsls	r1, r3, #29
 800a324:	d501      	bpl.n	800a32a <HAL_RCC_OscConfig+0x1a2>
 800a326:	2a00      	cmp	r2, #0
 800a328:	d04e      	beq.n	800a3c8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a32a:	4d40      	ldr	r5, [pc, #256]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
 800a32c:	682b      	ldr	r3, [r5, #0]
 800a32e:	f023 0319 	bic.w	r3, r3, #25
 800a332:	4313      	orrs	r3, r2
 800a334:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a336:	f7fd f9e1 	bl	80076fc <HAL_GetTick>
 800a33a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a33c:	e005      	b.n	800a34a <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a33e:	f7fd f9dd 	bl	80076fc <HAL_GetTick>
 800a342:	1b80      	subs	r0, r0, r6
 800a344:	2802      	cmp	r0, #2
 800a346:	f200 80a1 	bhi.w	800a48c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a34a:	682b      	ldr	r3, [r5, #0]
 800a34c:	075b      	lsls	r3, r3, #29
 800a34e:	d5f6      	bpl.n	800a33e <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a350:	f7fd f9ec 	bl	800772c <HAL_GetREVID>
 800a354:	f241 0303 	movw	r3, #4099	; 0x1003
 800a358:	4298      	cmp	r0, r3
 800a35a:	f200 80fe 	bhi.w	800a55a <HAL_RCC_OscConfig+0x3d2>
 800a35e:	6922      	ldr	r2, [r4, #16]
 800a360:	686b      	ldr	r3, [r5, #4]
 800a362:	2a40      	cmp	r2, #64	; 0x40
 800a364:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a368:	bf0c      	ite	eq
 800a36a:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800a36e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800a372:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	e741      	b.n	800a1fc <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a378:	2b18      	cmp	r3, #24
 800a37a:	f000 80ea 	beq.w	800a552 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a37e:	4d2b      	ldr	r5, [pc, #172]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a380:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a382:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a384:	2a00      	cmp	r2, #0
 800a386:	f000 80d3 	beq.w	800a530 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a38a:	f023 0319 	bic.w	r3, r3, #25
 800a38e:	4313      	orrs	r3, r2
 800a390:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a392:	f7fd f9b3 	bl	80076fc <HAL_GetTick>
 800a396:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a398:	e004      	b.n	800a3a4 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a39a:	f7fd f9af 	bl	80076fc <HAL_GetTick>
 800a39e:	1b80      	subs	r0, r0, r6
 800a3a0:	2802      	cmp	r0, #2
 800a3a2:	d873      	bhi.n	800a48c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a3a4:	682b      	ldr	r3, [r5, #0]
 800a3a6:	075f      	lsls	r7, r3, #29
 800a3a8:	d5f7      	bpl.n	800a39a <HAL_RCC_OscConfig+0x212>
 800a3aa:	e7d1      	b.n	800a350 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a3ac:	f001 0103 	and.w	r1, r1, #3
 800a3b0:	2902      	cmp	r1, #2
 800a3b2:	f47f aefc 	bne.w	800a1ae <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a3b6:	4a1d      	ldr	r2, [pc, #116]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
 800a3b8:	6812      	ldr	r2, [r2, #0]
 800a3ba:	0392      	lsls	r2, r2, #14
 800a3bc:	f57f af1b 	bpl.w	800a1f6 <HAL_RCC_OscConfig+0x6e>
 800a3c0:	6862      	ldr	r2, [r4, #4]
 800a3c2:	2a00      	cmp	r2, #0
 800a3c4:	f47f af17 	bne.w	800a1f6 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800a3c8:	2001      	movs	r0, #1
}
 800a3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a3cc:	f002 0203 	and.w	r2, r2, #3
 800a3d0:	2a01      	cmp	r2, #1
 800a3d2:	f47f af20 	bne.w	800a216 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a3d6:	4b15      	ldr	r3, [pc, #84]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	05da      	lsls	r2, r3, #23
 800a3dc:	d502      	bpl.n	800a3e4 <HAL_RCC_OscConfig+0x25c>
 800a3de:	69e3      	ldr	r3, [r4, #28]
 800a3e0:	2b80      	cmp	r3, #128	; 0x80
 800a3e2:	d1f1      	bne.n	800a3c8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3e4:	f7fd f9a2 	bl	800772c <HAL_GetREVID>
 800a3e8:	f241 0303 	movw	r3, #4099	; 0x1003
 800a3ec:	4298      	cmp	r0, r3
 800a3ee:	f200 80bf 	bhi.w	800a570 <HAL_RCC_OscConfig+0x3e8>
 800a3f2:	6a22      	ldr	r2, [r4, #32]
 800a3f4:	2a20      	cmp	r2, #32
 800a3f6:	f000 81ad 	beq.w	800a754 <HAL_RCC_OscConfig+0x5cc>
 800a3fa:	490c      	ldr	r1, [pc, #48]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
 800a3fc:	684b      	ldr	r3, [r1, #4]
 800a3fe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a402:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800a406:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	e72d      	b.n	800a268 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a40c:	4a07      	ldr	r2, [pc, #28]	; (800a42c <HAL_RCC_OscConfig+0x2a4>)
 800a40e:	6813      	ldr	r3, [r2, #0]
 800a410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a414:	6013      	str	r3, [r2, #0]
 800a416:	e6db      	b.n	800a1d0 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 800a418:	4d05      	ldr	r5, [pc, #20]	; (800a430 <HAL_RCC_OscConfig+0x2a8>)
 800a41a:	682b      	ldr	r3, [r5, #0]
 800a41c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a420:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800a422:	f7fd f96b 	bl	80076fc <HAL_GetTick>
 800a426:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a428:	e009      	b.n	800a43e <HAL_RCC_OscConfig+0x2b6>
 800a42a:	bf00      	nop
 800a42c:	58024400 	.word	0x58024400
 800a430:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a434:	f7fd f962 	bl	80076fc <HAL_GetTick>
 800a438:	1b80      	subs	r0, r0, r6
 800a43a:	2864      	cmp	r0, #100	; 0x64
 800a43c:	d826      	bhi.n	800a48c <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a43e:	682b      	ldr	r3, [r5, #0]
 800a440:	05da      	lsls	r2, r3, #23
 800a442:	d5f7      	bpl.n	800a434 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a444:	68a3      	ldr	r3, [r4, #8]
 800a446:	2b01      	cmp	r3, #1
 800a448:	f000 8171 	beq.w	800a72e <HAL_RCC_OscConfig+0x5a6>
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f040 8174 	bne.w	800a73a <HAL_RCC_OscConfig+0x5b2>
 800a452:	4baa      	ldr	r3, [pc, #680]	; (800a6fc <HAL_RCC_OscConfig+0x574>)
 800a454:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a456:	f022 0201 	bic.w	r2, r2, #1
 800a45a:	671a      	str	r2, [r3, #112]	; 0x70
 800a45c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a45e:	f022 0204 	bic.w	r2, r2, #4
 800a462:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a464:	68a3      	ldr	r3, [r4, #8]
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 8140 	beq.w	800a6ec <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
 800a46c:	f7fd f946 	bl	80076fc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a470:	4ea2      	ldr	r6, [pc, #648]	; (800a6fc <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a472:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a476:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a478:	e004      	b.n	800a484 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a47a:	f7fd f93f 	bl	80076fc <HAL_GetTick>
 800a47e:	1b40      	subs	r0, r0, r5
 800a480:	42b8      	cmp	r0, r7
 800a482:	d803      	bhi.n	800a48c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a484:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800a486:	079b      	lsls	r3, r3, #30
 800a488:	d5f7      	bpl.n	800a47a <HAL_RCC_OscConfig+0x2f2>
 800a48a:	e722      	b.n	800a2d2 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800a48c:	2003      	movs	r0, #3
}
 800a48e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 800a490:	f7fd f934 	bl	80076fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a494:	4e99      	ldr	r6, [pc, #612]	; (800a6fc <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
 800a496:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a498:	e004      	b.n	800a4a4 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a49a:	f7fd f92f 	bl	80076fc <HAL_GetTick>
 800a49e:	1b40      	subs	r0, r0, r5
 800a4a0:	2864      	cmp	r0, #100	; 0x64
 800a4a2:	d8f3      	bhi.n	800a48c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a4a4:	6833      	ldr	r3, [r6, #0]
 800a4a6:	039f      	lsls	r7, r3, #14
 800a4a8:	d4f7      	bmi.n	800a49a <HAL_RCC_OscConfig+0x312>
 800a4aa:	e6a3      	b.n	800a1f4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800a4ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a4ae:	f023 0301 	bic.w	r3, r3, #1
 800a4b2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800a4b4:	f7fd f922 	bl	80076fc <HAL_GetTick>
 800a4b8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4ba:	e004      	b.n	800a4c6 <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a4bc:	f7fd f91e 	bl	80076fc <HAL_GetTick>
 800a4c0:	1b80      	subs	r0, r0, r6
 800a4c2:	2802      	cmp	r0, #2
 800a4c4:	d8e2      	bhi.n	800a48c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a4c6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800a4c8:	0799      	lsls	r1, r3, #30
 800a4ca:	d4f7      	bmi.n	800a4bc <HAL_RCC_OscConfig+0x334>
 800a4cc:	e6e4      	b.n	800a298 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4d2:	4b8a      	ldr	r3, [pc, #552]	; (800a6fc <HAL_RCC_OscConfig+0x574>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	f47f ae74 	bne.w	800a1c2 <HAL_RCC_OscConfig+0x3a>
 800a4da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a4de:	601a      	str	r2, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a4e6:	601a      	str	r2, [r3, #0]
 800a4e8:	e672      	b.n	800a1d0 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 800a4ea:	682b      	ldr	r3, [r5, #0]
 800a4ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4f0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a4f2:	f7fd f903 	bl	80076fc <HAL_GetTick>
 800a4f6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4f8:	e004      	b.n	800a504 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4fa:	f7fd f8ff 	bl	80076fc <HAL_GetTick>
 800a4fe:	1b80      	subs	r0, r0, r6
 800a500:	2802      	cmp	r0, #2
 800a502:	d8c3      	bhi.n	800a48c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	0498      	lsls	r0, r3, #18
 800a508:	d4f7      	bmi.n	800a4fa <HAL_RCC_OscConfig+0x372>
 800a50a:	e6de      	b.n	800a2ca <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a512:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a514:	f7fd f8f2 	bl	80076fc <HAL_GetTick>
 800a518:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a51a:	e004      	b.n	800a526 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a51c:	f7fd f8ee 	bl	80076fc <HAL_GetTick>
 800a520:	1b80      	subs	r0, r0, r6
 800a522:	2802      	cmp	r0, #2
 800a524:	d8b2      	bhi.n	800a48c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a526:	682b      	ldr	r3, [r5, #0]
 800a528:	05df      	lsls	r7, r3, #23
 800a52a:	d4f7      	bmi.n	800a51c <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a52c:	6823      	ldr	r3, [r4, #0]
 800a52e:	e69b      	b.n	800a268 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800a530:	f023 0301 	bic.w	r3, r3, #1
 800a534:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a536:	f7fd f8e1 	bl	80076fc <HAL_GetTick>
 800a53a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a53c:	e004      	b.n	800a548 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a53e:	f7fd f8dd 	bl	80076fc <HAL_GetTick>
 800a542:	1b80      	subs	r0, r0, r6
 800a544:	2802      	cmp	r0, #2
 800a546:	d8a1      	bhi.n	800a48c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	0758      	lsls	r0, r3, #29
 800a54c:	d4f7      	bmi.n	800a53e <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	e654      	b.n	800a1fc <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a552:	0790      	lsls	r0, r2, #30
 800a554:	f47f af13 	bne.w	800a37e <HAL_RCC_OscConfig+0x1f6>
 800a558:	e6e0      	b.n	800a31c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a55a:	686b      	ldr	r3, [r5, #4]
 800a55c:	6922      	ldr	r2, [r4, #16]
 800a55e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a562:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a566:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	e647      	b.n	800a1fc <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800a56c:	2001      	movs	r0, #1
}
 800a56e:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a570:	4a62      	ldr	r2, [pc, #392]	; (800a6fc <HAL_RCC_OscConfig+0x574>)
 800a572:	6a21      	ldr	r1, [r4, #32]
 800a574:	68d3      	ldr	r3, [r2, #12]
 800a576:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800a57a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800a57e:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	e671      	b.n	800a268 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800a584:	f7fd f8ba 	bl	80076fc <HAL_GetTick>
 800a588:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a58a:	e005      	b.n	800a598 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a58c:	f7fd f8b6 	bl	80076fc <HAL_GetTick>
 800a590:	1b80      	subs	r0, r0, r6
 800a592:	2802      	cmp	r0, #2
 800a594:	f63f af7a 	bhi.w	800a48c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	0199      	lsls	r1, r3, #6
 800a59c:	d4f6      	bmi.n	800a58c <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a59e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800a5a0:	4b57      	ldr	r3, [pc, #348]	; (800a700 <HAL_RCC_OscConfig+0x578>)
 800a5a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800a5a4:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a5a6:	4957      	ldr	r1, [pc, #348]	; (800a704 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a5a8:	4e54      	ldr	r6, [pc, #336]	; (800a6fc <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a5ae:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800a5b2:	62ab      	str	r3, [r5, #40]	; 0x28
 800a5b4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	3a01      	subs	r2, #1
 800a5bc:	025b      	lsls	r3, r3, #9
 800a5be:	0412      	lsls	r2, r2, #16
 800a5c0:	b29b      	uxth	r3, r3
 800a5c2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a5ca:	3a01      	subs	r2, #1
 800a5cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a5d4:	3a01      	subs	r2, #1
 800a5d6:	0612      	lsls	r2, r2, #24
 800a5d8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800a5e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a5e2:	f023 0301 	bic.w	r3, r3, #1
 800a5e6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a5e8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800a5ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a5ec:	4011      	ands	r1, r2
 800a5ee:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800a5f2:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a5f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a5f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a5f8:	f023 030c 	bic.w	r3, r3, #12
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a600:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a602:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a604:	f023 0302 	bic.w	r3, r3, #2
 800a608:	4313      	orrs	r3, r2
 800a60a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a60c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a60e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a612:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a614:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a61a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a61c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a61e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a622:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800a624:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800a626:	f043 0301 	orr.w	r3, r3, #1
 800a62a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a632:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a634:	f7fd f862 	bl	80076fc <HAL_GetTick>
 800a638:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a63a:	e005      	b.n	800a648 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a63c:	f7fd f85e 	bl	80076fc <HAL_GetTick>
 800a640:	1b00      	subs	r0, r0, r4
 800a642:	2802      	cmp	r0, #2
 800a644:	f63f af22 	bhi.w	800a48c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a648:	6833      	ldr	r3, [r6, #0]
 800a64a:	019a      	lsls	r2, r3, #6
 800a64c:	d5f6      	bpl.n	800a63c <HAL_RCC_OscConfig+0x4b4>
 800a64e:	e65d      	b.n	800a30c <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a650:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a652:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a654:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a656:	f43f ae5a 	beq.w	800a30e <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a65a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a65e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800a660:	428b      	cmp	r3, r1
 800a662:	f47f aeb1 	bne.w	800a3c8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a666:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a66a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a66c:	429a      	cmp	r2, r3
 800a66e:	f47f aeab 	bne.w	800a3c8 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a672:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a674:	f3c6 0208 	ubfx	r2, r6, #0, #9
 800a678:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a67a:	429a      	cmp	r2, r3
 800a67c:	f47f aea4 	bne.w	800a3c8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a680:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a682:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800a686:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a688:	429a      	cmp	r2, r3
 800a68a:	f47f ae9d 	bne.w	800a3c8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a68e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a690:	f3c6 4206 	ubfx	r2, r6, #16, #7
 800a694:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a696:	429a      	cmp	r2, r3
 800a698:	f47f ae96 	bne.w	800a3c8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a69c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a69e:	f3c6 6606 	ubfx	r6, r6, #24, #7
 800a6a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a6a4:	429e      	cmp	r6, r3
 800a6a6:	f47f ae8f 	bne.w	800a3c8 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a6aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a6ac:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a6ae:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	f43f ae2a 	beq.w	800a30c <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 800a6b8:	4a10      	ldr	r2, [pc, #64]	; (800a6fc <HAL_RCC_OscConfig+0x574>)
 800a6ba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a6bc:	f023 0301 	bic.w	r3, r3, #1
 800a6c0:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800a6c2:	f7fd f81b 	bl	80076fc <HAL_GetTick>
 800a6c6:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a6c8:	f7fd f818 	bl	80076fc <HAL_GetTick>
 800a6cc:	42a8      	cmp	r0, r5
 800a6ce:	d0fb      	beq.n	800a6c8 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a6d0:	4a0a      	ldr	r2, [pc, #40]	; (800a6fc <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
 800a6d2:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a6d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a6d6:	4b0b      	ldr	r3, [pc, #44]	; (800a704 <HAL_RCC_OscConfig+0x57c>)
 800a6d8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800a6da:	4023      	ands	r3, r4
 800a6dc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a6e0:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800a6e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a6e4:	f043 0301 	orr.w	r3, r3, #1
 800a6e8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800a6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 800a6ec:	f7fd f806 	bl	80076fc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a6f0:	4e02      	ldr	r6, [pc, #8]	; (800a6fc <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6f2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800a6f6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a6f8:	e00c      	b.n	800a714 <HAL_RCC_OscConfig+0x58c>
 800a6fa:	bf00      	nop
 800a6fc:	58024400 	.word	0x58024400
 800a700:	fffffc0c 	.word	0xfffffc0c
 800a704:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a708:	f7fc fff8 	bl	80076fc <HAL_GetTick>
 800a70c:	1b40      	subs	r0, r0, r5
 800a70e:	42b8      	cmp	r0, r7
 800a710:	f63f aebc 	bhi.w	800a48c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a714:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800a716:	0798      	lsls	r0, r3, #30
 800a718:	d4f6      	bmi.n	800a708 <HAL_RCC_OscConfig+0x580>
 800a71a:	e5da      	b.n	800a2d2 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a71c:	68eb      	ldr	r3, [r5, #12]
 800a71e:	6a22      	ldr	r2, [r4, #32]
 800a720:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800a724:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a728:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	e59c      	b.n	800a268 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a72e:	4a0e      	ldr	r2, [pc, #56]	; (800a768 <HAL_RCC_OscConfig+0x5e0>)
 800a730:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800a732:	f043 0301 	orr.w	r3, r3, #1
 800a736:	6713      	str	r3, [r2, #112]	; 0x70
 800a738:	e694      	b.n	800a464 <HAL_RCC_OscConfig+0x2dc>
 800a73a:	2b05      	cmp	r3, #5
 800a73c:	4b0a      	ldr	r3, [pc, #40]	; (800a768 <HAL_RCC_OscConfig+0x5e0>)
 800a73e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a740:	f47f ae89 	bne.w	800a456 <HAL_RCC_OscConfig+0x2ce>
 800a744:	f042 0204 	orr.w	r2, r2, #4
 800a748:	671a      	str	r2, [r3, #112]	; 0x70
 800a74a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a74c:	f042 0201 	orr.w	r2, r2, #1
 800a750:	671a      	str	r2, [r3, #112]	; 0x70
 800a752:	e687      	b.n	800a464 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a754:	4a04      	ldr	r2, [pc, #16]	; (800a768 <HAL_RCC_OscConfig+0x5e0>)
 800a756:	6853      	ldr	r3, [r2, #4]
 800a758:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a75c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a760:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	e580      	b.n	800a268 <HAL_RCC_OscConfig+0xe0>
 800a766:	bf00      	nop
 800a768:	58024400 	.word	0x58024400

0800a76c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a76c:	4a47      	ldr	r2, [pc, #284]	; (800a88c <HAL_RCC_GetSysClockFreq+0x120>)
 800a76e:	6913      	ldr	r3, [r2, #16]
 800a770:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a774:	2b10      	cmp	r3, #16
 800a776:	d004      	beq.n	800a782 <HAL_RCC_GetSysClockFreq+0x16>
 800a778:	2b18      	cmp	r3, #24
 800a77a:	d00d      	beq.n	800a798 <HAL_RCC_GetSysClockFreq+0x2c>
 800a77c:	b11b      	cbz	r3, 800a786 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800a77e:	4844      	ldr	r0, [pc, #272]	; (800a890 <HAL_RCC_GetSysClockFreq+0x124>)
 800a780:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a782:	4844      	ldr	r0, [pc, #272]	; (800a894 <HAL_RCC_GetSysClockFreq+0x128>)
 800a784:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a786:	6813      	ldr	r3, [r2, #0]
 800a788:	0699      	lsls	r1, r3, #26
 800a78a:	d54a      	bpl.n	800a822 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a78c:	6813      	ldr	r3, [r2, #0]
 800a78e:	4842      	ldr	r0, [pc, #264]	; (800a898 <HAL_RCC_GetSysClockFreq+0x12c>)
 800a790:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a794:	40d8      	lsrs	r0, r3
 800a796:	4770      	bx	lr
{
 800a798:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a79a:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a79c:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a79e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 800a7a0:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a7a4:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a7a6:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800a7aa:	d038      	beq.n	800a81e <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a7ac:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a7b0:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7b4:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a7b8:	fb05 f101 	mul.w	r1, r5, r1
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	ee07 1a90 	vmov	s15, r1
 800a7c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 800a7c6:	d002      	beq.n	800a7ce <HAL_RCC_GetSysClockFreq+0x62>
 800a7c8:	2b02      	cmp	r3, #2
 800a7ca:	d02c      	beq.n	800a826 <HAL_RCC_GetSysClockFreq+0xba>
 800a7cc:	b393      	cbz	r3, 800a834 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7ce:	ee07 0a90 	vmov	s15, r0
 800a7d2:	eddf 6a32 	vldr	s13, [pc, #200]	; 800a89c <HAL_RCC_GetSysClockFreq+0x130>
 800a7d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a7da:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800a7dc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800a7e0:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800a8a0 <HAL_RCC_GetSysClockFreq+0x134>
 800a7e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7e8:	ee06 3a90 	vmov	s13, r3
 800a7ec:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800a7f0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a7f4:	ee76 6a85 	vadd.f32	s13, s13, s10
 800a7f8:	eee7 6a25 	vfma.f32	s13, s14, s11
 800a7fc:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a800:	4b22      	ldr	r3, [pc, #136]	; (800a88c <HAL_RCC_GetSysClockFreq+0x120>)
 800a802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a804:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a808:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a80a:	ee07 3a90 	vmov	s15, r3
 800a80e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a81a:	ee17 0a90 	vmov	r0, s15
}
 800a81e:	bc30      	pop	{r4, r5}
 800a820:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a822:	481d      	ldr	r0, [pc, #116]	; (800a898 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800a824:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a826:	ee07 0a90 	vmov	s15, r0
 800a82a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800a8a4 <HAL_RCC_GetSysClockFreq+0x138>
 800a82e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a832:	e7d2      	b.n	800a7da <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a834:	6813      	ldr	r3, [r2, #0]
 800a836:	069b      	lsls	r3, r3, #26
 800a838:	d520      	bpl.n	800a87c <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a83a:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a83c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a840:	4915      	ldr	r1, [pc, #84]	; (800a898 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a842:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a846:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a848:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a84c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a850:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800a8a0 <HAL_RCC_GetSysClockFreq+0x134>
 800a854:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a858:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a85a:	ee06 3a90 	vmov	s13, r3
 800a85e:	ee05 1a90 	vmov	s11, r1
 800a862:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a866:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800a86a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800a86e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800a872:	eee7 6a05 	vfma.f32	s13, s14, s10
 800a876:	ee66 6a26 	vmul.f32	s13, s12, s13
 800a87a:	e7c1      	b.n	800a800 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a87c:	ee07 0a90 	vmov	s15, r0
 800a880:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a8a8 <HAL_RCC_GetSysClockFreq+0x13c>
 800a884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a888:	e7a7      	b.n	800a7da <HAL_RCC_GetSysClockFreq+0x6e>
 800a88a:	bf00      	nop
 800a88c:	58024400 	.word	0x58024400
 800a890:	003d0900 	.word	0x003d0900
 800a894:	017d7840 	.word	0x017d7840
 800a898:	03d09000 	.word	0x03d09000
 800a89c:	4a742400 	.word	0x4a742400
 800a8a0:	39000000 	.word	0x39000000
 800a8a4:	4bbebc20 	.word	0x4bbebc20
 800a8a8:	4c742400 	.word	0x4c742400

0800a8ac <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800a8ac:	2800      	cmp	r0, #0
 800a8ae:	f000 811a 	beq.w	800aae6 <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8b2:	4a92      	ldr	r2, [pc, #584]	; (800aafc <HAL_RCC_ClockConfig+0x250>)
{
 800a8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8b8:	6813      	ldr	r3, [r2, #0]
 800a8ba:	4604      	mov	r4, r0
 800a8bc:	460d      	mov	r5, r1
 800a8be:	f003 030f 	and.w	r3, r3, #15
 800a8c2:	428b      	cmp	r3, r1
 800a8c4:	d20c      	bcs.n	800a8e0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8c6:	6813      	ldr	r3, [r2, #0]
 800a8c8:	f023 030f 	bic.w	r3, r3, #15
 800a8cc:	430b      	orrs	r3, r1
 800a8ce:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8d0:	6813      	ldr	r3, [r2, #0]
 800a8d2:	f003 030f 	and.w	r3, r3, #15
 800a8d6:	428b      	cmp	r3, r1
 800a8d8:	d002      	beq.n	800a8e0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800a8da:	2001      	movs	r0, #1
}
 800a8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8e0:	6823      	ldr	r3, [r4, #0]
 800a8e2:	075f      	lsls	r7, r3, #29
 800a8e4:	d50c      	bpl.n	800a900 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a8e6:	4986      	ldr	r1, [pc, #536]	; (800ab00 <HAL_RCC_ClockConfig+0x254>)
 800a8e8:	6920      	ldr	r0, [r4, #16]
 800a8ea:	698a      	ldr	r2, [r1, #24]
 800a8ec:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a8f0:	4290      	cmp	r0, r2
 800a8f2:	d905      	bls.n	800a900 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a8f4:	698b      	ldr	r3, [r1, #24]
 800a8f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8fa:	4303      	orrs	r3, r0
 800a8fc:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	071e      	lsls	r6, r3, #28
 800a902:	d50c      	bpl.n	800a91e <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a904:	497e      	ldr	r1, [pc, #504]	; (800ab00 <HAL_RCC_ClockConfig+0x254>)
 800a906:	6960      	ldr	r0, [r4, #20]
 800a908:	69ca      	ldr	r2, [r1, #28]
 800a90a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a90e:	4290      	cmp	r0, r2
 800a910:	d905      	bls.n	800a91e <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a912:	69cb      	ldr	r3, [r1, #28]
 800a914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a918:	4303      	orrs	r3, r0
 800a91a:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	06d8      	lsls	r0, r3, #27
 800a920:	d50c      	bpl.n	800a93c <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a922:	4977      	ldr	r1, [pc, #476]	; (800ab00 <HAL_RCC_ClockConfig+0x254>)
 800a924:	69a0      	ldr	r0, [r4, #24]
 800a926:	69ca      	ldr	r2, [r1, #28]
 800a928:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800a92c:	4290      	cmp	r0, r2
 800a92e:	d905      	bls.n	800a93c <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a930:	69cb      	ldr	r3, [r1, #28]
 800a932:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800a936:	4303      	orrs	r3, r0
 800a938:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a93a:	6823      	ldr	r3, [r4, #0]
 800a93c:	0699      	lsls	r1, r3, #26
 800a93e:	d50c      	bpl.n	800a95a <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a940:	496f      	ldr	r1, [pc, #444]	; (800ab00 <HAL_RCC_ClockConfig+0x254>)
 800a942:	69e0      	ldr	r0, [r4, #28]
 800a944:	6a0a      	ldr	r2, [r1, #32]
 800a946:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a94a:	4290      	cmp	r0, r2
 800a94c:	d905      	bls.n	800a95a <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a94e:	6a0b      	ldr	r3, [r1, #32]
 800a950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a954:	4303      	orrs	r3, r0
 800a956:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a958:	6823      	ldr	r3, [r4, #0]
 800a95a:	079a      	lsls	r2, r3, #30
 800a95c:	f140 8083 	bpl.w	800aa66 <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a960:	4867      	ldr	r0, [pc, #412]	; (800ab00 <HAL_RCC_ClockConfig+0x254>)
 800a962:	68e1      	ldr	r1, [r4, #12]
 800a964:	6982      	ldr	r2, [r0, #24]
 800a966:	f002 020f 	and.w	r2, r2, #15
 800a96a:	4291      	cmp	r1, r2
 800a96c:	f240 80a9 	bls.w	800aac2 <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a970:	6983      	ldr	r3, [r0, #24]
 800a972:	f023 030f 	bic.w	r3, r3, #15
 800a976:	4319      	orrs	r1, r3
 800a978:	6181      	str	r1, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	07df      	lsls	r7, r3, #31
 800a97e:	d474      	bmi.n	800aa6a <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a980:	079f      	lsls	r7, r3, #30
 800a982:	d507      	bpl.n	800a994 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a984:	4a5e      	ldr	r2, [pc, #376]	; (800ab00 <HAL_RCC_ClockConfig+0x254>)
 800a986:	68e1      	ldr	r1, [r4, #12]
 800a988:	6993      	ldr	r3, [r2, #24]
 800a98a:	f003 030f 	and.w	r3, r3, #15
 800a98e:	428b      	cmp	r3, r1
 800a990:	f200 80a0 	bhi.w	800aad4 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a994:	4a59      	ldr	r2, [pc, #356]	; (800aafc <HAL_RCC_ClockConfig+0x250>)
 800a996:	6813      	ldr	r3, [r2, #0]
 800a998:	f003 030f 	and.w	r3, r3, #15
 800a99c:	42ab      	cmp	r3, r5
 800a99e:	d909      	bls.n	800a9b4 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9a0:	6813      	ldr	r3, [r2, #0]
 800a9a2:	f023 030f 	bic.w	r3, r3, #15
 800a9a6:	432b      	orrs	r3, r5
 800a9a8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	f003 030f 	and.w	r3, r3, #15
 800a9b0:	42ab      	cmp	r3, r5
 800a9b2:	d192      	bne.n	800a8da <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a9b4:	6823      	ldr	r3, [r4, #0]
 800a9b6:	075e      	lsls	r6, r3, #29
 800a9b8:	d50c      	bpl.n	800a9d4 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a9ba:	4951      	ldr	r1, [pc, #324]	; (800ab00 <HAL_RCC_ClockConfig+0x254>)
 800a9bc:	6920      	ldr	r0, [r4, #16]
 800a9be:	698a      	ldr	r2, [r1, #24]
 800a9c0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a9c4:	4290      	cmp	r0, r2
 800a9c6:	d205      	bcs.n	800a9d4 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a9c8:	698b      	ldr	r3, [r1, #24]
 800a9ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ce:	4303      	orrs	r3, r0
 800a9d0:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	071d      	lsls	r5, r3, #28
 800a9d6:	d50c      	bpl.n	800a9f2 <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a9d8:	4949      	ldr	r1, [pc, #292]	; (800ab00 <HAL_RCC_ClockConfig+0x254>)
 800a9da:	6960      	ldr	r0, [r4, #20]
 800a9dc:	69ca      	ldr	r2, [r1, #28]
 800a9de:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800a9e2:	4290      	cmp	r0, r2
 800a9e4:	d205      	bcs.n	800a9f2 <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a9e6:	69cb      	ldr	r3, [r1, #28]
 800a9e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9ec:	4303      	orrs	r3, r0
 800a9ee:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9f0:	6823      	ldr	r3, [r4, #0]
 800a9f2:	06d8      	lsls	r0, r3, #27
 800a9f4:	d50c      	bpl.n	800aa10 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a9f6:	4942      	ldr	r1, [pc, #264]	; (800ab00 <HAL_RCC_ClockConfig+0x254>)
 800a9f8:	69a0      	ldr	r0, [r4, #24]
 800a9fa:	69ca      	ldr	r2, [r1, #28]
 800a9fc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800aa00:	4290      	cmp	r0, r2
 800aa02:	d205      	bcs.n	800aa10 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa04:	69cb      	ldr	r3, [r1, #28]
 800aa06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800aa0a:	4303      	orrs	r3, r0
 800aa0c:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	0699      	lsls	r1, r3, #26
 800aa12:	d50b      	bpl.n	800aa2c <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa14:	4a3a      	ldr	r2, [pc, #232]	; (800ab00 <HAL_RCC_ClockConfig+0x254>)
 800aa16:	69e1      	ldr	r1, [r4, #28]
 800aa18:	6a13      	ldr	r3, [r2, #32]
 800aa1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa1e:	4299      	cmp	r1, r3
 800aa20:	d204      	bcs.n	800aa2c <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800aa22:	6a13      	ldr	r3, [r2, #32]
 800aa24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa28:	430b      	orrs	r3, r1
 800aa2a:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa2c:	f7ff fe9e 	bl	800a76c <HAL_RCC_GetSysClockFreq>
 800aa30:	4a33      	ldr	r2, [pc, #204]	; (800ab00 <HAL_RCC_ClockConfig+0x254>)
 800aa32:	4603      	mov	r3, r0
 800aa34:	4833      	ldr	r0, [pc, #204]	; (800ab04 <HAL_RCC_ClockConfig+0x258>)
 800aa36:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa38:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa3a:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800aa3e:	4d32      	ldr	r5, [pc, #200]	; (800ab08 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa40:	f002 020f 	and.w	r2, r2, #15
 800aa44:	4c31      	ldr	r4, [pc, #196]	; (800ab0c <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa46:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa48:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa4a:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800aa4e:	4830      	ldr	r0, [pc, #192]	; (800ab10 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa50:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aa54:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800aa56:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800aa58:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa5a:	40d3      	lsrs	r3, r2
 800aa5c:	6023      	str	r3, [r4, #0]
}
 800aa5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800aa62:	f7fc bde9 	b.w	8007638 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aa66:	07db      	lsls	r3, r3, #31
 800aa68:	d594      	bpl.n	800a994 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800aa6a:	4a25      	ldr	r2, [pc, #148]	; (800ab00 <HAL_RCC_ClockConfig+0x254>)
 800aa6c:	68a1      	ldr	r1, [r4, #8]
 800aa6e:	6993      	ldr	r3, [r2, #24]
 800aa70:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800aa74:	430b      	orrs	r3, r1
 800aa76:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa78:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa7a:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aa7c:	2902      	cmp	r1, #2
 800aa7e:	d034      	beq.n	800aaea <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aa80:	2903      	cmp	r1, #3
 800aa82:	d02d      	beq.n	800aae0 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aa84:	2901      	cmp	r1, #1
 800aa86:	d035      	beq.n	800aaf4 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa88:	075b      	lsls	r3, r3, #29
 800aa8a:	f57f af26 	bpl.w	800a8da <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa8e:	4e1c      	ldr	r6, [pc, #112]	; (800ab00 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa90:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa94:	6933      	ldr	r3, [r6, #16]
 800aa96:	f023 0307 	bic.w	r3, r3, #7
 800aa9a:	430b      	orrs	r3, r1
 800aa9c:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800aa9e:	f7fc fe2d 	bl	80076fc <HAL_GetTick>
 800aaa2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aaa4:	e004      	b.n	800aab0 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aaa6:	f7fc fe29 	bl	80076fc <HAL_GetTick>
 800aaaa:	1bc0      	subs	r0, r0, r7
 800aaac:	4540      	cmp	r0, r8
 800aaae:	d81f      	bhi.n	800aaf0 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aab0:	6933      	ldr	r3, [r6, #16]
 800aab2:	6862      	ldr	r2, [r4, #4]
 800aab4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aab8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800aabc:	d1f3      	bne.n	800aaa6 <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aabe:	6823      	ldr	r3, [r4, #0]
 800aac0:	e75e      	b.n	800a980 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aac2:	07da      	lsls	r2, r3, #31
 800aac4:	d4d1      	bmi.n	800aa6a <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aac6:	4a0e      	ldr	r2, [pc, #56]	; (800ab00 <HAL_RCC_ClockConfig+0x254>)
 800aac8:	6993      	ldr	r3, [r2, #24]
 800aaca:	f003 030f 	and.w	r3, r3, #15
 800aace:	428b      	cmp	r3, r1
 800aad0:	f67f af60 	bls.w	800a994 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aad4:	6993      	ldr	r3, [r2, #24]
 800aad6:	f023 030f 	bic.w	r3, r3, #15
 800aada:	4319      	orrs	r1, r3
 800aadc:	6191      	str	r1, [r2, #24]
 800aade:	e759      	b.n	800a994 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aae0:	0198      	lsls	r0, r3, #6
 800aae2:	d4d4      	bmi.n	800aa8e <HAL_RCC_ClockConfig+0x1e2>
 800aae4:	e6f9      	b.n	800a8da <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800aae6:	2001      	movs	r0, #1
}
 800aae8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aaea:	039e      	lsls	r6, r3, #14
 800aaec:	d4cf      	bmi.n	800aa8e <HAL_RCC_ClockConfig+0x1e2>
 800aaee:	e6f4      	b.n	800a8da <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800aaf0:	2003      	movs	r0, #3
 800aaf2:	e6f3      	b.n	800a8dc <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aaf4:	05da      	lsls	r2, r3, #23
 800aaf6:	d4ca      	bmi.n	800aa8e <HAL_RCC_ClockConfig+0x1e2>
 800aaf8:	e6ef      	b.n	800a8da <HAL_RCC_ClockConfig+0x2e>
 800aafa:	bf00      	nop
 800aafc:	52002000 	.word	0x52002000
 800ab00:	58024400 	.word	0x58024400
 800ab04:	0801c414 	.word	0x0801c414
 800ab08:	20000094 	.word	0x20000094
 800ab0c:	20000098 	.word	0x20000098
 800ab10:	200000a0 	.word	0x200000a0

0800ab14 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab14:	4a18      	ldr	r2, [pc, #96]	; (800ab78 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab16:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab18:	6913      	ldr	r3, [r2, #16]
 800ab1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab1e:	2b10      	cmp	r3, #16
 800ab20:	d01a      	beq.n	800ab58 <HAL_RCC_GetHCLKFreq+0x44>
 800ab22:	2b18      	cmp	r3, #24
 800ab24:	d023      	beq.n	800ab6e <HAL_RCC_GetHCLKFreq+0x5a>
 800ab26:	b1cb      	cbz	r3, 800ab5c <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 800ab28:	4814      	ldr	r0, [pc, #80]	; (800ab7c <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab2a:	4b13      	ldr	r3, [pc, #76]	; (800ab78 <HAL_RCC_GetHCLKFreq+0x64>)
 800ab2c:	4914      	ldr	r1, [pc, #80]	; (800ab80 <HAL_RCC_GetHCLKFreq+0x6c>)
 800ab2e:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab30:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab32:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab36:	4c13      	ldr	r4, [pc, #76]	; (800ab84 <HAL_RCC_GetHCLKFreq+0x70>)
 800ab38:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab3c:	4d12      	ldr	r5, [pc, #72]	; (800ab88 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab3e:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab40:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ab42:	f002 021f 	and.w	r2, r2, #31
 800ab46:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab4a:	f003 001f 	and.w	r0, r3, #31
 800ab4e:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800ab52:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab54:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800ab56:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab58:	480c      	ldr	r0, [pc, #48]	; (800ab8c <HAL_RCC_GetHCLKFreq+0x78>)
 800ab5a:	e7e6      	b.n	800ab2a <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab5c:	6813      	ldr	r3, [r2, #0]
 800ab5e:	069b      	lsls	r3, r3, #26
 800ab60:	d508      	bpl.n	800ab74 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab62:	6812      	ldr	r2, [r2, #0]
 800ab64:	480a      	ldr	r0, [pc, #40]	; (800ab90 <HAL_RCC_GetHCLKFreq+0x7c>)
 800ab66:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800ab6a:	40d0      	lsrs	r0, r2
 800ab6c:	e7dd      	b.n	800ab2a <HAL_RCC_GetHCLKFreq+0x16>
 800ab6e:	f7ff fa87 	bl	800a080 <HAL_RCC_GetSysClockFreq.part.0>
 800ab72:	e7da      	b.n	800ab2a <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ab74:	4806      	ldr	r0, [pc, #24]	; (800ab90 <HAL_RCC_GetHCLKFreq+0x7c>)
 800ab76:	e7d8      	b.n	800ab2a <HAL_RCC_GetHCLKFreq+0x16>
 800ab78:	58024400 	.word	0x58024400
 800ab7c:	003d0900 	.word	0x003d0900
 800ab80:	0801c414 	.word	0x0801c414
 800ab84:	20000098 	.word	0x20000098
 800ab88:	20000094 	.word	0x20000094
 800ab8c:	017d7840 	.word	0x017d7840
 800ab90:	03d09000 	.word	0x03d09000

0800ab94 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab94:	4a1c      	ldr	r2, [pc, #112]	; (800ac08 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab96:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab98:	6913      	ldr	r3, [r2, #16]
 800ab9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab9e:	2b10      	cmp	r3, #16
 800aba0:	d021      	beq.n	800abe6 <HAL_RCC_GetPCLK1Freq+0x52>
 800aba2:	2b18      	cmp	r3, #24
 800aba4:	d02b      	beq.n	800abfe <HAL_RCC_GetPCLK1Freq+0x6a>
 800aba6:	b303      	cbz	r3, 800abea <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800aba8:	4818      	ldr	r0, [pc, #96]	; (800ac0c <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abaa:	4a17      	ldr	r2, [pc, #92]	; (800ac08 <HAL_RCC_GetPCLK1Freq+0x74>)
 800abac:	4918      	ldr	r1, [pc, #96]	; (800ac10 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800abae:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800abb0:	4d18      	ldr	r5, [pc, #96]	; (800ac14 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abb2:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abb6:	4c18      	ldr	r4, [pc, #96]	; (800ac18 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abb8:	5ccb      	ldrb	r3, [r1, r3]
 800abba:	f003 031f 	and.w	r3, r3, #31
 800abbe:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abc2:	6990      	ldr	r0, [r2, #24]
 800abc4:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800abc8:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abca:	5c08      	ldrb	r0, [r1, r0]
 800abcc:	f000 001f 	and.w	r0, r0, #31
 800abd0:	40c3      	lsrs	r3, r0
 800abd2:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800abd4:	69d2      	ldr	r2, [r2, #28]
 800abd6:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800abda:	5c88      	ldrb	r0, [r1, r2]
 800abdc:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800abe0:	fa23 f000 	lsr.w	r0, r3, r0
 800abe4:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800abe6:	480d      	ldr	r0, [pc, #52]	; (800ac1c <HAL_RCC_GetPCLK1Freq+0x88>)
 800abe8:	e7df      	b.n	800abaa <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abea:	6813      	ldr	r3, [r2, #0]
 800abec:	069b      	lsls	r3, r3, #26
 800abee:	d509      	bpl.n	800ac04 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abf0:	6810      	ldr	r0, [r2, #0]
 800abf2:	4b0b      	ldr	r3, [pc, #44]	; (800ac20 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800abf4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800abf8:	fa23 f000 	lsr.w	r0, r3, r0
 800abfc:	e7d5      	b.n	800abaa <HAL_RCC_GetPCLK1Freq+0x16>
 800abfe:	f7ff fa3f 	bl	800a080 <HAL_RCC_GetSysClockFreq.part.0>
 800ac02:	e7d2      	b.n	800abaa <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ac04:	4806      	ldr	r0, [pc, #24]	; (800ac20 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800ac06:	e7d0      	b.n	800abaa <HAL_RCC_GetPCLK1Freq+0x16>
 800ac08:	58024400 	.word	0x58024400
 800ac0c:	003d0900 	.word	0x003d0900
 800ac10:	0801c414 	.word	0x0801c414
 800ac14:	20000094 	.word	0x20000094
 800ac18:	20000098 	.word	0x20000098
 800ac1c:	017d7840 	.word	0x017d7840
 800ac20:	03d09000 	.word	0x03d09000

0800ac24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac26:	4c3a      	ldr	r4, [pc, #232]	; (800ad10 <RCCEx_PLL2_Config+0xec>)
 800ac28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac2a:	f003 0303 	and.w	r3, r3, #3
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d067      	beq.n	800ad02 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	4606      	mov	r6, r0
 800ac36:	460f      	mov	r7, r1
 800ac38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ac3c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac3e:	f7fc fd5d 	bl	80076fc <HAL_GetTick>
 800ac42:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac44:	e004      	b.n	800ac50 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ac46:	f7fc fd59 	bl	80076fc <HAL_GetTick>
 800ac4a:	1b43      	subs	r3, r0, r5
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	d856      	bhi.n	800acfe <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac50:	6823      	ldr	r3, [r4, #0]
 800ac52:	011a      	lsls	r2, r3, #4
 800ac54:	d4f7      	bmi.n	800ac46 <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ac56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac58:	6832      	ldr	r2, [r6, #0]
 800ac5a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ac5e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800ac62:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac64:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800ac68:	3b01      	subs	r3, #1
 800ac6a:	3a01      	subs	r2, #1
 800ac6c:	025b      	lsls	r3, r3, #9
 800ac6e:	0412      	lsls	r2, r2, #16
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800ac76:	4313      	orrs	r3, r2
 800ac78:	6872      	ldr	r2, [r6, #4]
 800ac7a:	3a01      	subs	r2, #1
 800ac7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac80:	4313      	orrs	r3, r2
 800ac82:	6932      	ldr	r2, [r6, #16]
 800ac84:	3a01      	subs	r2, #1
 800ac86:	0612      	lsls	r2, r2, #24
 800ac88:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ac90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ac92:	6972      	ldr	r2, [r6, #20]
 800ac94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ac9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ac9e:	69b3      	ldr	r3, [r6, #24]
 800aca0:	f022 0220 	bic.w	r2, r2, #32
 800aca4:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aca6:	4b1b      	ldr	r3, [pc, #108]	; (800ad14 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aca8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800acaa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800acac:	f022 0210 	bic.w	r2, r2, #16
 800acb0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800acb2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800acb4:	69f2      	ldr	r2, [r6, #28]
 800acb6:	400b      	ands	r3, r1
 800acb8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800acbc:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800acbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800acc0:	f043 0310 	orr.w	r3, r3, #16
 800acc4:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800acc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800acc8:	b1ef      	cbz	r7, 800ad06 <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800acca:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800accc:	bf0c      	ite	eq
 800acce:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800acd2:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800acd6:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800acd8:	4c0d      	ldr	r4, [pc, #52]	; (800ad10 <RCCEx_PLL2_Config+0xec>)
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ace0:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ace2:	f7fc fd0b 	bl	80076fc <HAL_GetTick>
 800ace6:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ace8:	e004      	b.n	800acf4 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800acea:	f7fc fd07 	bl	80076fc <HAL_GetTick>
 800acee:	1b40      	subs	r0, r0, r5
 800acf0:	2802      	cmp	r0, #2
 800acf2:	d804      	bhi.n	800acfe <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800acf4:	6823      	ldr	r3, [r4, #0]
 800acf6:	011b      	lsls	r3, r3, #4
 800acf8:	d5f7      	bpl.n	800acea <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800acfa:	2000      	movs	r0, #0
}
 800acfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800acfe:	2003      	movs	r0, #3
}
 800ad00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800ad02:	2001      	movs	r0, #1
}
 800ad04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad0a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad0c:	e7e4      	b.n	800acd8 <RCCEx_PLL2_Config+0xb4>
 800ad0e:	bf00      	nop
 800ad10:	58024400 	.word	0x58024400
 800ad14:	ffff0007 	.word	0xffff0007

0800ad18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ad18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad1a:	4c3a      	ldr	r4, [pc, #232]	; (800ae04 <RCCEx_PLL3_Config+0xec>)
 800ad1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ad1e:	f003 0303 	and.w	r3, r3, #3
 800ad22:	2b03      	cmp	r3, #3
 800ad24:	d067      	beq.n	800adf6 <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	4606      	mov	r6, r0
 800ad2a:	460f      	mov	r7, r1
 800ad2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad30:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad32:	f7fc fce3 	bl	80076fc <HAL_GetTick>
 800ad36:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ad38:	e004      	b.n	800ad44 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ad3a:	f7fc fcdf 	bl	80076fc <HAL_GetTick>
 800ad3e:	1b43      	subs	r3, r0, r5
 800ad40:	2b02      	cmp	r3, #2
 800ad42:	d856      	bhi.n	800adf2 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ad44:	6823      	ldr	r3, [r4, #0]
 800ad46:	009a      	lsls	r2, r3, #2
 800ad48:	d4f7      	bmi.n	800ad3a <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ad4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ad4c:	6832      	ldr	r2, [r6, #0]
 800ad4e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800ad52:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800ad56:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad58:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	3a01      	subs	r2, #1
 800ad60:	025b      	lsls	r3, r3, #9
 800ad62:	0412      	lsls	r2, r2, #16
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	6872      	ldr	r2, [r6, #4]
 800ad6e:	3a01      	subs	r2, #1
 800ad70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad74:	4313      	orrs	r3, r2
 800ad76:	6932      	ldr	r2, [r6, #16]
 800ad78:	3a01      	subs	r2, #1
 800ad7a:	0612      	lsls	r2, r2, #24
 800ad7c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800ad80:	4313      	orrs	r3, r2
 800ad82:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ad84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ad86:	6972      	ldr	r2, [r6, #20]
 800ad88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ad90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ad92:	69b3      	ldr	r3, [r6, #24]
 800ad94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ad98:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ad9a:	4b1b      	ldr	r3, [pc, #108]	; (800ae08 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ad9c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ad9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ada0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ada4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ada6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ada8:	69f2      	ldr	r2, [r6, #28]
 800adaa:	400b      	ands	r3, r1
 800adac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800adb0:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800adb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800adb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800adb8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800adba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800adbc:	b1ef      	cbz	r7, 800adfa <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800adbe:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800adc0:	bf0c      	ite	eq
 800adc2:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800adc6:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800adca:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800adcc:	4c0d      	ldr	r4, [pc, #52]	; (800ae04 <RCCEx_PLL3_Config+0xec>)
 800adce:	6823      	ldr	r3, [r4, #0]
 800add0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800add4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800add6:	f7fc fc91 	bl	80076fc <HAL_GetTick>
 800adda:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800addc:	e004      	b.n	800ade8 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800adde:	f7fc fc8d 	bl	80076fc <HAL_GetTick>
 800ade2:	1b40      	subs	r0, r0, r5
 800ade4:	2802      	cmp	r0, #2
 800ade6:	d804      	bhi.n	800adf2 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	d5f7      	bpl.n	800adde <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800adee:	2000      	movs	r0, #0
}
 800adf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800adf2:	2003      	movs	r0, #3
}
 800adf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800adf6:	2001      	movs	r0, #1
}
 800adf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800adfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800adfe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae00:	e7e4      	b.n	800adcc <RCCEx_PLL3_Config+0xb4>
 800ae02:	bf00      	nop
 800ae04:	58024400 	.word	0x58024400
 800ae08:	ffff0007 	.word	0xffff0007

0800ae0c <HAL_RCCEx_PeriphCLKConfig>:
{
 800ae0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae10:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800ae14:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae16:	011d      	lsls	r5, r3, #4
 800ae18:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800ae1c:	d521      	bpl.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ae1e:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800ae20:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800ae24:	f000 8572 	beq.w	800b90c <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800ae28:	d80e      	bhi.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800ae2a:	2900      	cmp	r1, #0
 800ae2c:	f000 85cd 	beq.w	800b9ca <HAL_RCCEx_PeriphCLKConfig+0xbbe>
 800ae30:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800ae34:	f040 85c6 	bne.w	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae38:	2102      	movs	r1, #2
 800ae3a:	3008      	adds	r0, #8
 800ae3c:	f7ff fef2 	bl	800ac24 <RCCEx_PLL2_Config>
 800ae40:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800ae42:	b966      	cbnz	r6, 800ae5e <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ae44:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800ae46:	e003      	b.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800ae48:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800ae4c:	f040 85ba 	bne.w	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ae50:	4aa3      	ldr	r2, [pc, #652]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ae52:	2600      	movs	r6, #0
 800ae54:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800ae56:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ae5a:	4319      	orrs	r1, r3
 800ae5c:	6511      	str	r1, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ae5e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ae62:	05d8      	lsls	r0, r3, #23
 800ae64:	d50a      	bpl.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 800ae66:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ae68:	2904      	cmp	r1, #4
 800ae6a:	d806      	bhi.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800ae6c:	e8df f011 	tbh	[pc, r1, lsl #1]
 800ae70:	055f0558 	.word	0x055f0558
 800ae74:	030e0576 	.word	0x030e0576
 800ae78:	030e      	.short	0x030e
 800ae7a:	2601      	movs	r6, #1
 800ae7c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ae7e:	0599      	lsls	r1, r3, #22
 800ae80:	d517      	bpl.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800ae82:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ae84:	2980      	cmp	r1, #128	; 0x80
 800ae86:	f000 8570 	beq.w	800b96a <HAL_RCCEx_PeriphCLKConfig+0xb5e>
 800ae8a:	f200 80e1 	bhi.w	800b050 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800ae8e:	2900      	cmp	r1, #0
 800ae90:	f000 8442 	beq.w	800b718 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800ae94:	2940      	cmp	r1, #64	; 0x40
 800ae96:	f040 80e2 	bne.w	800b05e <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	f104 0008 	add.w	r0, r4, #8
 800aea0:	f7ff fec0 	bl	800ac24 <RCCEx_PLL2_Config>
 800aea4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800aea6:	2d00      	cmp	r5, #0
 800aea8:	f000 83f4 	beq.w	800b694 <HAL_RCCEx_PeriphCLKConfig+0x888>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aeac:	462e      	mov	r6, r5
 800aeae:	e9d4 3200 	ldrd	r3, r2, [r4]
 800aeb2:	055f      	lsls	r7, r3, #21
 800aeb4:	d51a      	bpl.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
 800aeb6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800aeba:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800aebe:	f000 851d 	beq.w	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800aec2:	f200 80cf 	bhi.w	800b064 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800aec6:	2900      	cmp	r1, #0
 800aec8:	f000 842d 	beq.w	800b726 <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800aecc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800aed0:	f040 80d0 	bne.w	800b074 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aed4:	2100      	movs	r1, #0
 800aed6:	f104 0008 	add.w	r0, r4, #8
 800aeda:	f7ff fea3 	bl	800ac24 <RCCEx_PLL2_Config>
 800aede:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800aee0:	2d00      	cmp	r5, #0
 800aee2:	f000 83f6 	beq.w	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aee6:	462e      	mov	r6, r5
 800aee8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800aeec:	0518      	lsls	r0, r3, #20
 800aeee:	d51a      	bpl.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
 800aef0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800aef4:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800aef8:	f000 8528 	beq.w	800b94c <HAL_RCCEx_PeriphCLKConfig+0xb40>
 800aefc:	f200 80bd 	bhi.w	800b07a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800af00:	2900      	cmp	r1, #0
 800af02:	f000 8403 	beq.w	800b70c <HAL_RCCEx_PeriphCLKConfig+0x900>
 800af06:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800af0a:	f040 80be 	bne.w	800b08a <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af0e:	2100      	movs	r1, #0
 800af10:	f104 0008 	add.w	r0, r4, #8
 800af14:	f7ff fe86 	bl	800ac24 <RCCEx_PLL2_Config>
 800af18:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800af1a:	2d00      	cmp	r5, #0
 800af1c:	f000 83af 	beq.w	800b67e <HAL_RCCEx_PeriphCLKConfig+0x872>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800af20:	462e      	mov	r6, r5
 800af22:	e9d4 3200 	ldrd	r3, r2, [r4]
 800af26:	0199      	lsls	r1, r3, #6
 800af28:	d51a      	bpl.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
 800af2a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800af2c:	2920      	cmp	r1, #32
 800af2e:	f000 84b0 	beq.w	800b892 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800af32:	f200 80ad 	bhi.w	800b090 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800af36:	b139      	cbz	r1, 800af48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800af38:	2910      	cmp	r1, #16
 800af3a:	f040 80ac 	bne.w	800b096 <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af3e:	4a68      	ldr	r2, [pc, #416]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af40:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800af42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af46:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800af48:	2d00      	cmp	r5, #0
 800af4a:	f040 8414 	bne.w	800b776 <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800af4e:	4a64      	ldr	r2, [pc, #400]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800af50:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800af52:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800af54:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800af58:	430b      	orrs	r3, r1
 800af5a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800af5c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800af60:	04df      	lsls	r7, r3, #19
 800af62:	d519      	bpl.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
 800af64:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800af66:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800af6a:	f000 84e7 	beq.w	800b93c <HAL_RCCEx_PeriphCLKConfig+0xb30>
 800af6e:	f200 8095 	bhi.w	800b09c <HAL_RCCEx_PeriphCLKConfig+0x290>
 800af72:	2900      	cmp	r1, #0
 800af74:	f000 83c4 	beq.w	800b700 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800af78:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800af7c:	f040 8096 	bne.w	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af80:	2100      	movs	r1, #0
 800af82:	f104 0008 	add.w	r0, r4, #8
 800af86:	f7ff fe4d 	bl	800ac24 <RCCEx_PLL2_Config>
 800af8a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800af8c:	2d00      	cmp	r5, #0
 800af8e:	f000 838b 	beq.w	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800af92:	462e      	mov	r6, r5
 800af94:	e9d4 3200 	ldrd	r3, r2, [r4]
 800af98:	0498      	lsls	r0, r3, #18
 800af9a:	d51d      	bpl.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
 800af9c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800af9e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800afa2:	f000 8462 	beq.w	800b86a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800afa6:	f200 8084 	bhi.w	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800afaa:	b149      	cbz	r1, 800afc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800afac:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800afb0:	f040 8088 	bne.w	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afb4:	2101      	movs	r1, #1
 800afb6:	f104 0008 	add.w	r0, r4, #8
 800afba:	f7ff fe33 	bl	800ac24 <RCCEx_PLL2_Config>
 800afbe:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800afc0:	2d00      	cmp	r5, #0
 800afc2:	f040 83e7 	bne.w	800b794 <HAL_RCCEx_PeriphCLKConfig+0x988>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800afc6:	4a46      	ldr	r2, [pc, #280]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800afc8:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800afca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800afcc:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800afd0:	430b      	orrs	r3, r1
 800afd2:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800afd4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800afd8:	0459      	lsls	r1, r3, #17
 800afda:	d51d      	bpl.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
 800afdc:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800afe0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800afe4:	f000 844b 	beq.w	800b87e <HAL_RCCEx_PeriphCLKConfig+0xa72>
 800afe8:	d86f      	bhi.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800afea:	b141      	cbz	r1, 800affe <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800afec:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800aff0:	d173      	bne.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aff2:	2101      	movs	r1, #1
 800aff4:	f104 0008 	add.w	r0, r4, #8
 800aff8:	f7ff fe14 	bl	800ac24 <RCCEx_PLL2_Config>
 800affc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800affe:	2d00      	cmp	r5, #0
 800b000:	f040 83d0 	bne.w	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b004:	4a36      	ldr	r2, [pc, #216]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800b006:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800b00a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b00c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800b010:	430b      	orrs	r3, r1
 800b012:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b014:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b018:	041f      	lsls	r7, r3, #16
 800b01a:	d50d      	bpl.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
 800b01c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800b01e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800b022:	f000 8419 	beq.w	800b858 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800b026:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800b02a:	f000 8237 	beq.w	800b49c <HAL_RCCEx_PeriphCLKConfig+0x690>
 800b02e:	2900      	cmp	r1, #0
 800b030:	f000 823a 	beq.w	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800b034:	2601      	movs	r6, #1
 800b036:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b038:	01d8      	lsls	r0, r3, #7
 800b03a:	d55f      	bpl.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->FmcClockSelection)
 800b03c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b03e:	2903      	cmp	r1, #3
 800b040:	f200 84ee 	bhi.w	800ba20 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 800b044:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b048:	04390054 	.word	0x04390054
 800b04c:	0054004e 	.word	0x0054004e
    switch (PeriphClkInit->Sai23ClockSelection)
 800b050:	29c0      	cmp	r1, #192	; 0xc0
 800b052:	f43f af28 	beq.w	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800b056:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b05a:	f43f af24 	beq.w	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800b05e:	2601      	movs	r6, #1
 800b060:	4635      	mov	r5, r6
 800b062:	e726      	b.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800b064:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800b068:	f43f af3a 	beq.w	800aee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b06c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800b070:	f43f af36 	beq.w	800aee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b074:	2601      	movs	r6, #1
 800b076:	4635      	mov	r5, r6
 800b078:	e738      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
 800b07a:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800b07e:	f43f af4c 	beq.w	800af1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800b082:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800b086:	f43f af48 	beq.w	800af1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800b08a:	2601      	movs	r6, #1
 800b08c:	4635      	mov	r5, r6
 800b08e:	e74a      	b.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
 800b090:	2930      	cmp	r1, #48	; 0x30
 800b092:	f43f af59 	beq.w	800af48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800b096:	2601      	movs	r6, #1
 800b098:	4635      	mov	r5, r6
 800b09a:	e761      	b.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
 800b09c:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800b0a0:	f43f af74 	beq.w	800af8c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800b0a4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800b0a8:	f43f af70 	beq.w	800af8c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800b0ac:	2601      	movs	r6, #1
 800b0ae:	4635      	mov	r5, r6
 800b0b0:	e772      	b.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
 800b0b2:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800b0b6:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800b0ba:	d081      	beq.n	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b0bc:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800b0c0:	f43f af7e 	beq.w	800afc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b0c4:	2601      	movs	r6, #1
 800b0c6:	4635      	mov	r5, r6
 800b0c8:	e786      	b.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
 800b0ca:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800b0ce:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b0d2:	d094      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800b0d4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800b0d8:	d091      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800b0da:	2601      	movs	r6, #1
 800b0dc:	4635      	mov	r5, r6
 800b0de:	e79b      	b.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800b0e0:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b0e4:	2102      	movs	r1, #2
 800b0e6:	f104 0008 	add.w	r0, r4, #8
 800b0ea:	f7ff fd9b 	bl	800ac24 <RCCEx_PLL2_Config>
 800b0ee:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b0f0:	2d00      	cmp	r5, #0
 800b0f2:	f000 8345 	beq.w	800b780 <HAL_RCCEx_PeriphCLKConfig+0x974>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b0f6:	462e      	mov	r6, r5
 800b0f8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b0fc:	0259      	lsls	r1, r3, #9
 800b0fe:	f100 826c 	bmi.w	800b5da <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b102:	07d8      	lsls	r0, r3, #31
 800b104:	d52f      	bpl.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    switch (PeriphClkInit->Usart16ClockSelection)
 800b106:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800b108:	2928      	cmp	r1, #40	; 0x28
 800b10a:	d82a      	bhi.n	800b162 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800b10c:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b110:	0029020a 	.word	0x0029020a
 800b114:	00290029 	.word	0x00290029
 800b118:	00290029 	.word	0x00290029
 800b11c:	00290029 	.word	0x00290029
 800b120:	0029044a 	.word	0x0029044a
 800b124:	00290029 	.word	0x00290029
 800b128:	00290029 	.word	0x00290029
 800b12c:	00290029 	.word	0x00290029
 800b130:	00290204 	.word	0x00290204
 800b134:	00290029 	.word	0x00290029
 800b138:	00290029 	.word	0x00290029
 800b13c:	00290029 	.word	0x00290029
 800b140:	0029020a 	.word	0x0029020a
 800b144:	00290029 	.word	0x00290029
 800b148:	00290029 	.word	0x00290029
 800b14c:	00290029 	.word	0x00290029
 800b150:	0029020a 	.word	0x0029020a
 800b154:	00290029 	.word	0x00290029
 800b158:	00290029 	.word	0x00290029
 800b15c:	00290029 	.word	0x00290029
 800b160:	020a      	.short	0x020a
 800b162:	2601      	movs	r6, #1
 800b164:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b166:	0799      	lsls	r1, r3, #30
 800b168:	d517      	bpl.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b16a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800b16c:	2905      	cmp	r1, #5
 800b16e:	f200 845f 	bhi.w	800ba30 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800b172:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b176:	000c      	.short	0x000c
 800b178:	0006040c 	.word	0x0006040c
 800b17c:	000c000c 	.word	0x000c000c
 800b180:	000c      	.short	0x000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b182:	2101      	movs	r1, #1
 800b184:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b188:	f7ff fdc6 	bl	800ad18 <RCCEx_PLL3_Config>
 800b18c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b18e:	2d00      	cmp	r5, #0
 800b190:	f000 82d8 	beq.w	800b744 <HAL_RCCEx_PeriphCLKConfig+0x938>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b194:	462e      	mov	r6, r5
 800b196:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b19a:	075f      	lsls	r7, r3, #29
 800b19c:	d518      	bpl.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b19e:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800b1a2:	2905      	cmp	r1, #5
 800b1a4:	f200 8440 	bhi.w	800ba28 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
 800b1a8:	e8df f011 	tbh	[pc, r1, lsl #1]
 800b1ac:	03e7000c 	.word	0x03e7000c
 800b1b0:	000c0006 	.word	0x000c0006
 800b1b4:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b1b8:	2101      	movs	r1, #1
 800b1ba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b1be:	f7ff fdab 	bl	800ad18 <RCCEx_PLL3_Config>
 800b1c2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b1c4:	2d00      	cmp	r5, #0
 800b1c6:	f000 82c7 	beq.w	800b758 <HAL_RCCEx_PeriphCLKConfig+0x94c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b1ca:	462e      	mov	r6, r5
 800b1cc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b1d0:	0698      	lsls	r0, r3, #26
 800b1d2:	d51f      	bpl.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b1d4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800b1d8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800b1dc:	f000 8363 	beq.w	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 800b1e0:	f200 811c 	bhi.w	800b41c <HAL_RCCEx_PeriphCLKConfig+0x610>
 800b1e4:	b149      	cbz	r1, 800b1fa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800b1e6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800b1ea:	f040 8121 	bne.w	800b430 <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	f104 0008 	add.w	r0, r4, #8
 800b1f4:	f7ff fd16 	bl	800ac24 <RCCEx_PLL2_Config>
 800b1f8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b1fa:	2d00      	cmp	r5, #0
 800b1fc:	f040 82b7 	bne.w	800b76e <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b200:	4ab0      	ldr	r2, [pc, #704]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800b202:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800b206:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800b208:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800b20c:	430b      	orrs	r3, r1
 800b20e:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b210:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b214:	0659      	lsls	r1, r3, #25
 800b216:	d51f      	bpl.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b218:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800b21c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800b220:	f000 8306 	beq.w	800b830 <HAL_RCCEx_PeriphCLKConfig+0xa24>
 800b224:	f200 8107 	bhi.w	800b436 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800b228:	b149      	cbz	r1, 800b23e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b22a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b22e:	f040 810c 	bne.w	800b44a <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b232:	2100      	movs	r1, #0
 800b234:	f104 0008 	add.w	r0, r4, #8
 800b238:	f7ff fcf4 	bl	800ac24 <RCCEx_PLL2_Config>
 800b23c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b23e:	2d00      	cmp	r5, #0
 800b240:	f040 82b4 	bne.w	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b244:	4a9f      	ldr	r2, [pc, #636]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800b246:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800b24a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b24c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800b250:	430b      	orrs	r3, r1
 800b252:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b254:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b258:	061f      	lsls	r7, r3, #24
 800b25a:	d51f      	bpl.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b25c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800b260:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800b264:	f000 82ee 	beq.w	800b844 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 800b268:	f200 80f2 	bhi.w	800b450 <HAL_RCCEx_PeriphCLKConfig+0x644>
 800b26c:	b149      	cbz	r1, 800b282 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b26e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800b272:	f040 80f7 	bne.w	800b464 <HAL_RCCEx_PeriphCLKConfig+0x658>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b276:	2100      	movs	r1, #0
 800b278:	f104 0008 	add.w	r0, r4, #8
 800b27c:	f7ff fcd2 	bl	800ac24 <RCCEx_PLL2_Config>
 800b280:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b282:	2d00      	cmp	r5, #0
 800b284:	f040 828a 	bne.w	800b79c <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b288:	4a8e      	ldr	r2, [pc, #568]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800b28a:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800b28e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b290:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b294:	430b      	orrs	r3, r1
 800b296:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b298:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b29c:	0718      	lsls	r0, r3, #28
 800b29e:	d50d      	bpl.n	800b2bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b2a0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800b2a4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800b2a8:	f000 8310 	beq.w	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xac0>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b2ac:	4985      	ldr	r1, [pc, #532]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800b2ae:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800b2b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b2b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b2bc:	06d9      	lsls	r1, r3, #27
 800b2be:	d50d      	bpl.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b2c0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800b2c4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800b2c8:	f000 830c 	beq.w	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b2cc:	497d      	ldr	r1, [pc, #500]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800b2ce:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800b2d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b2d8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b2dc:	031f      	lsls	r7, r3, #12
 800b2de:	d50e      	bpl.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->AdcClockSelection)
 800b2e0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800b2e4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800b2e8:	f000 8102 	beq.w	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800b2ec:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800b2f0:	f000 8104 	beq.w	800b4fc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 800b2f4:	2900      	cmp	r1, #0
 800b2f6:	f000 8290 	beq.w	800b81a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800b2fa:	2601      	movs	r6, #1
 800b2fc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b2fe:	0358      	lsls	r0, r3, #13
 800b300:	d50f      	bpl.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x516>
    switch (PeriphClkInit->UsbClockSelection)
 800b302:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800b306:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800b30a:	f000 80dd 	beq.w	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800b30e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800b312:	f000 80df 	beq.w	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800b316:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b31a:	f000 8275 	beq.w	800b808 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 800b31e:	2601      	movs	r6, #1
 800b320:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b322:	03d9      	lsls	r1, r3, #15
 800b324:	d509      	bpl.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch (PeriphClkInit->SdmmcClockSelection)
 800b326:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b328:	2900      	cmp	r1, #0
 800b32a:	f000 8258 	beq.w	800b7de <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800b32e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800b332:	f000 81d9 	beq.w	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800b336:	2601      	movs	r6, #1
 800b338:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b33a:	009f      	lsls	r7, r3, #2
 800b33c:	f100 80ff 	bmi.w	800b53e <HAL_RCCEx_PeriphCLKConfig+0x732>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b340:	0398      	lsls	r0, r3, #14
 800b342:	d50e      	bpl.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->RngClockSelection)
 800b344:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800b348:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b34c:	f000 823e 	beq.w	800b7cc <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 800b350:	f240 808b 	bls.w	800b46a <HAL_RCCEx_PeriphCLKConfig+0x65e>
 800b354:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800b358:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b35c:	f000 8088 	beq.w	800b470 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b360:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b362:	02d9      	lsls	r1, r3, #11
 800b364:	d508      	bpl.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b366:	4a57      	ldr	r2, [pc, #348]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800b368:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800b36a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b36c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b370:	430b      	orrs	r3, r1
 800b372:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b374:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b378:	00df      	lsls	r7, r3, #3
 800b37a:	d509      	bpl.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x584>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b37c:	4a51      	ldr	r2, [pc, #324]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800b37e:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800b382:	6913      	ldr	r3, [r2, #16]
 800b384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b388:	430b      	orrs	r3, r1
 800b38a:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b38c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b390:	029d      	lsls	r5, r3, #10
 800b392:	d508      	bpl.n	800b3a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b394:	4a4b      	ldr	r2, [pc, #300]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800b396:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800b398:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b39a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b39e:	430b      	orrs	r3, r1
 800b3a0:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b3a2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b3a6:	0058      	lsls	r0, r3, #1
 800b3a8:	d50b      	bpl.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b3aa:	4b46      	ldr	r3, [pc, #280]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800b3ac:	691a      	ldr	r2, [r3, #16]
 800b3ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3b2:	611a      	str	r2, [r3, #16]
 800b3b4:	691a      	ldr	r2, [r3, #16]
 800b3b6:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 800b3ba:	430a      	orrs	r2, r1
 800b3bc:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b3be:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	da08      	bge.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b3c6:	4a3f      	ldr	r2, [pc, #252]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800b3c8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800b3ca:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800b3cc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800b3d0:	430b      	orrs	r3, r1
 800b3d2:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b3d4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b3d8:	0219      	lsls	r1, r3, #8
 800b3da:	d508      	bpl.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b3dc:	4a39      	ldr	r2, [pc, #228]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800b3de:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800b3e2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800b3e4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800b3e8:	430b      	orrs	r3, r1
 800b3ea:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b3ec:	6862      	ldr	r2, [r4, #4]
 800b3ee:	07d3      	lsls	r3, r2, #31
 800b3f0:	f100 80b1 	bmi.w	800b556 <HAL_RCCEx_PeriphCLKConfig+0x74a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b3f4:	0797      	lsls	r7, r2, #30
 800b3f6:	f100 80bb 	bmi.w	800b570 <HAL_RCCEx_PeriphCLKConfig+0x764>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b3fa:	0755      	lsls	r5, r2, #29
 800b3fc:	f100 80c5 	bmi.w	800b58a <HAL_RCCEx_PeriphCLKConfig+0x77e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b400:	0710      	lsls	r0, r2, #28
 800b402:	f100 80cf 	bmi.w	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x798>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b406:	06d1      	lsls	r1, r2, #27
 800b408:	f100 80d9 	bmi.w	800b5be <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b40c:	0692      	lsls	r2, r2, #26
 800b40e:	f100 812a 	bmi.w	800b666 <HAL_RCCEx_PeriphCLKConfig+0x85a>
    return HAL_OK;
 800b412:	1e30      	subs	r0, r6, #0
 800b414:	bf18      	it	ne
 800b416:	2001      	movne	r0, #1
}
 800b418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b41c:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800b420:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b424:	f43f aee9 	beq.w	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800b428:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800b42c:	f43f aee5 	beq.w	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800b430:	2601      	movs	r6, #1
 800b432:	4635      	mov	r5, r6
 800b434:	e6ee      	b.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b436:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 800b43a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800b43e:	f43f aefe 	beq.w	800b23e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b442:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800b446:	f43f aefa 	beq.w	800b23e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800b44a:	2601      	movs	r6, #1
 800b44c:	4635      	mov	r5, r6
 800b44e:	e703      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b450:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800b454:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800b458:	f43f af13 	beq.w	800b282 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b45c:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800b460:	f43f af0f 	beq.w	800b282 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800b464:	2601      	movs	r6, #1
 800b466:	4635      	mov	r5, r6
 800b468:	e718      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->RngClockSelection)
 800b46a:	2900      	cmp	r1, #0
 800b46c:	f47f af78 	bne.w	800b360 <HAL_RCCEx_PeriphCLKConfig+0x554>
    if (ret == HAL_OK)
 800b470:	2d00      	cmp	r5, #0
 800b472:	f040 81c5 	bne.w	800b800 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b476:	4a13      	ldr	r2, [pc, #76]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800b478:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800b47c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800b47e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b482:	430b      	orrs	r3, r1
 800b484:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b486:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b48a:	e76a      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->Sai1ClockSelection)
 800b48c:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800b48e:	2d00      	cmp	r5, #0
 800b490:	f000 8114 	beq.w	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b494:	462e      	mov	r6, r5
 800b496:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b49a:	e4f0      	b.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b49c:	2101      	movs	r1, #1
 800b49e:	f104 0008 	add.w	r0, r4, #8
 800b4a2:	f7ff fbbf 	bl	800ac24 <RCCEx_PLL2_Config>
 800b4a6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b4a8:	2d00      	cmp	r5, #0
 800b4aa:	f040 8147 	bne.w	800b73c <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b4ae:	4a05      	ldr	r2, [pc, #20]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800b4b0:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800b4b2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b4b4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800b4b8:	430b      	orrs	r3, r1
 800b4ba:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b4bc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b4c0:	e5ba      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800b4c2:	bf00      	nop
 800b4c4:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4c8:	2101      	movs	r1, #1
 800b4ca:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b4ce:	f7ff fc23 	bl	800ad18 <RCCEx_PLL3_Config>
 800b4d2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b4d4:	2d00      	cmp	r5, #0
 800b4d6:	f040 8171 	bne.w	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b4da:	4aba      	ldr	r2, [pc, #744]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b4dc:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800b4e0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800b4e2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b4e6:	430b      	orrs	r3, r1
 800b4e8:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b4ea:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b4ee:	e718      	b.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x516>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4f0:	2102      	movs	r1, #2
 800b4f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b4f6:	f7ff fc0f 	bl	800ad18 <RCCEx_PLL3_Config>
 800b4fa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b4fc:	2d00      	cmp	r5, #0
 800b4fe:	f040 8159 	bne.w	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b502:	4ab0      	ldr	r2, [pc, #704]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b504:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800b508:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b50a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800b50e:	430b      	orrs	r3, r1
 800b510:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b512:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b516:	e6f2      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b518:	2101      	movs	r1, #1
 800b51a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b51e:	f7ff fbfb 	bl	800ad18 <RCCEx_PLL3_Config>
 800b522:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b524:	2d00      	cmp	r5, #0
 800b526:	f040 8105 	bne.w	800b734 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b52a:	4aa6      	ldr	r2, [pc, #664]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b52c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800b52e:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800b530:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800b534:	430b      	orrs	r3, r1
 800b536:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b538:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b53c:	e613      	b.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b53e:	2102      	movs	r1, #2
 800b540:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b544:	f7ff fbe8 	bl	800ad18 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b548:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b54c:	2800      	cmp	r0, #0
 800b54e:	f43f aef7 	beq.w	800b340 <HAL_RCCEx_PeriphCLKConfig+0x534>
      status = HAL_ERROR;
 800b552:	2601      	movs	r6, #1
 800b554:	e6f4      	b.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x534>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b556:	2100      	movs	r1, #0
 800b558:	f104 0008 	add.w	r0, r4, #8
 800b55c:	f7ff fb62 	bl	800ac24 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b560:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800b562:	2800      	cmp	r0, #0
 800b564:	f43f af46 	beq.w	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b568:	0797      	lsls	r7, r2, #30
 800b56a:	4606      	mov	r6, r0
 800b56c:	f57f af45 	bpl.w	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b570:	2101      	movs	r1, #1
 800b572:	f104 0008 	add.w	r0, r4, #8
 800b576:	f7ff fb55 	bl	800ac24 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b57a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800b57c:	2800      	cmp	r0, #0
 800b57e:	f43f af3c 	beq.w	800b3fa <HAL_RCCEx_PeriphCLKConfig+0x5ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b582:	0755      	lsls	r5, r2, #29
 800b584:	4606      	mov	r6, r0
 800b586:	f57f af3b 	bpl.w	800b400 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b58a:	2102      	movs	r1, #2
 800b58c:	f104 0008 	add.w	r0, r4, #8
 800b590:	f7ff fb48 	bl	800ac24 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b594:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800b596:	2800      	cmp	r0, #0
 800b598:	f43f af32 	beq.w	800b400 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b59c:	4606      	mov	r6, r0
 800b59e:	0710      	lsls	r0, r2, #28
 800b5a0:	f57f af31 	bpl.w	800b406 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b5aa:	f7ff fbb5 	bl	800ad18 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b5ae:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	f43f af28 	beq.w	800b406 <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b5b6:	06d1      	lsls	r1, r2, #27
 800b5b8:	4606      	mov	r6, r0
 800b5ba:	f57f af27 	bpl.w	800b40c <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5be:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800b5c2:	2101      	movs	r1, #1
 800b5c4:	4628      	mov	r0, r5
 800b5c6:	f7ff fba7 	bl	800ad18 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b5ca:	2800      	cmp	r0, #0
 800b5cc:	f000 812e 	beq.w	800b82c <HAL_RCCEx_PeriphCLKConfig+0xa20>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b5d0:	6863      	ldr	r3, [r4, #4]
 800b5d2:	069b      	lsls	r3, r3, #26
 800b5d4:	d550      	bpl.n	800b678 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	e047      	b.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b5da:	4f7b      	ldr	r7, [pc, #492]	; (800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b5e2:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800b5e4:	f7fc f88a 	bl	80076fc <HAL_GetTick>
 800b5e8:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b5ea:	e006      	b.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5ec:	f7fc f886 	bl	80076fc <HAL_GetTick>
 800b5f0:	eba0 0008 	sub.w	r0, r0, r8
 800b5f4:	2864      	cmp	r0, #100	; 0x64
 800b5f6:	f200 81df 	bhi.w	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	05da      	lsls	r2, r3, #23
 800b5fe:	d5f5      	bpl.n	800b5ec <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    if (ret == HAL_OK)
 800b600:	2d00      	cmp	r5, #0
 800b602:	f040 8208 	bne.w	800ba16 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b606:	4b6f      	ldr	r3, [pc, #444]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b608:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800b60c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b60e:	4051      	eors	r1, r2
 800b610:	f411 7f40 	tst.w	r1, #768	; 0x300
 800b614:	d00d      	beq.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x826>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b616:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800b618:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b61a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800b61e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800b622:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b624:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b626:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800b62a:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800b62c:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b62e:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800b632:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800b636:	f000 81d0 	beq.w	800b9da <HAL_RCCEx_PeriphCLKConfig+0xbce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b63a:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800b63e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b642:	f000 81de 	beq.w	800ba02 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800b646:	4a5f      	ldr	r2, [pc, #380]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b648:	6913      	ldr	r3, [r2, #16]
 800b64a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b64e:	6113      	str	r3, [r2, #16]
 800b650:	4a5c      	ldr	r2, [pc, #368]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b652:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800b656:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800b658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b65c:	430b      	orrs	r3, r1
 800b65e:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b660:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b664:	e54d      	b.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b666:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b66a:	2102      	movs	r1, #2
 800b66c:	4628      	mov	r0, r5
 800b66e:	f7ff fb53 	bl	800ad18 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b672:	2800      	cmp	r0, #0
 800b674:	f43f aecd 	beq.w	800b412 <HAL_RCCEx_PeriphCLKConfig+0x606>
  return HAL_ERROR;
 800b678:	2001      	movs	r0, #1
}
 800b67a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b67e:	4a51      	ldr	r2, [pc, #324]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b680:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800b684:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b686:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800b68a:	430b      	orrs	r3, r1
 800b68c:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b68e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b692:	e448      	b.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b694:	4a4b      	ldr	r2, [pc, #300]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b696:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b698:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b69a:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800b69e:	430b      	orrs	r3, r1
 800b6a0:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b6a2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b6a6:	e404      	b.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b6a8:	4a46      	ldr	r2, [pc, #280]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b6aa:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800b6ac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b6ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6b2:	430b      	orrs	r3, r1
 800b6b4:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b6b6:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b6ba:	e46d      	b.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b6bc:	4a41      	ldr	r2, [pc, #260]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b6be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b6c0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b6c2:	f023 0307 	bic.w	r3, r3, #7
 800b6c6:	430b      	orrs	r3, r1
 800b6c8:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b6ca:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b6ce:	f7ff bbd6 	b.w	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b6d2:	4a3c      	ldr	r2, [pc, #240]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b6d4:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800b6d8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b6da:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800b6de:	430b      	orrs	r3, r1
 800b6e0:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b6e2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b6e6:	e401      	b.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6e8:	2102      	movs	r1, #2
 800b6ea:	f104 0008 	add.w	r0, r4, #8
 800b6ee:	f7ff fa99 	bl	800ac24 <RCCEx_PLL2_Config>
 800b6f2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b6f4:	2d00      	cmp	r5, #0
 800b6f6:	d079      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b6f8:	462e      	mov	r6, r5
 800b6fa:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b6fe:	e61c      	b.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x52e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b700:	4a30      	ldr	r2, [pc, #192]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b702:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b708:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800b70a:	e43f      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b70c:	4a2d      	ldr	r2, [pc, #180]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b70e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b714:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800b716:	e400      	b.n	800af1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b718:	4a2a      	ldr	r2, [pc, #168]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b71a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b71c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b720:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800b722:	f7ff bbc0 	b.w	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b726:	4a27      	ldr	r2, [pc, #156]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b728:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b72a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b72e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800b730:	f7ff bbd6 	b.w	800aee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b734:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b738:	462e      	mov	r6, r5
 800b73a:	e514      	b.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b73c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b740:	462e      	mov	r6, r5
 800b742:	e479      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b744:	4a1f      	ldr	r2, [pc, #124]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b746:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800b748:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800b74a:	f023 0307 	bic.w	r3, r3, #7
 800b74e:	430b      	orrs	r3, r1
 800b750:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b752:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b756:	e520      	b.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b758:	4a1a      	ldr	r2, [pc, #104]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b75a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800b75e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800b760:	f023 0307 	bic.w	r3, r3, #7
 800b764:	430b      	orrs	r3, r1
 800b766:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b768:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b76c:	e530      	b.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b76e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b772:	462e      	mov	r6, r5
 800b774:	e54e      	b.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b776:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b77a:	462e      	mov	r6, r5
 800b77c:	f7ff bbf0 	b.w	800af60 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b780:	4a10      	ldr	r2, [pc, #64]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800b782:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b784:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800b786:	f023 0303 	bic.w	r3, r3, #3
 800b78a:	430b      	orrs	r3, r1
 800b78c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b78e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b792:	e4b3      	b.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b794:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b798:	462e      	mov	r6, r5
 800b79a:	e41d      	b.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b79c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b7a0:	462e      	mov	r6, r5
 800b7a2:	e57b      	b.n	800b29c <HAL_RCCEx_PeriphCLKConfig+0x490>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b7a4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b7a8:	462e      	mov	r6, r5
 800b7aa:	e435      	b.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b7ac:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b7b0:	462e      	mov	r6, r5
 800b7b2:	e551      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b7b4:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b7b8:	462e      	mov	r6, r5
 800b7ba:	e5a0      	b.n	800b2fe <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b7bc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b7c0:	462e      	mov	r6, r5
 800b7c2:	e5ae      	b.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800b7c4:	58024400 	.word	0x58024400
 800b7c8:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7cc:	4a9a      	ldr	r2, [pc, #616]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800b7ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b7d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800b7d6:	2d00      	cmp	r5, #0
 800b7d8:	f43f ae4d 	beq.w	800b476 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b7dc:	e010      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7de:	4a96      	ldr	r2, [pc, #600]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800b7e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b7e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7e6:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800b7e8:	2d00      	cmp	r5, #0
 800b7ea:	d185      	bne.n	800b6f8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b7ec:	4a92      	ldr	r2, [pc, #584]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800b7ee:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800b7f0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800b7f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7f6:	430b      	orrs	r3, r1
 800b7f8:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b7fa:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b7fe:	e59c      	b.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x52e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b800:	e9d4 3200 	ldrd	r3, r2, [r4]
 800b804:	462e      	mov	r6, r5
 800b806:	e5ac      	b.n	800b362 <HAL_RCCEx_PeriphCLKConfig+0x556>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b808:	4a8b      	ldr	r2, [pc, #556]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800b80a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b80c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b810:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800b812:	2d00      	cmp	r5, #0
 800b814:	f43f ae61 	beq.w	800b4da <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 800b818:	e7d0      	b.n	800b7bc <HAL_RCCEx_PeriphCLKConfig+0x9b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b81a:	f104 0008 	add.w	r0, r4, #8
 800b81e:	f7ff fa01 	bl	800ac24 <RCCEx_PLL2_Config>
 800b822:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b824:	2d00      	cmp	r5, #0
 800b826:	f43f ae6c 	beq.w	800b502 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800b82a:	e7c3      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b82c:	6862      	ldr	r2, [r4, #4]
 800b82e:	e5ed      	b.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x600>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b830:	2102      	movs	r1, #2
 800b832:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b836:	f7ff fa6f 	bl	800ad18 <RCCEx_PLL3_Config>
 800b83a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b83c:	2d00      	cmp	r5, #0
 800b83e:	f43f ad01 	beq.w	800b244 <HAL_RCCEx_PeriphCLKConfig+0x438>
 800b842:	e7b3      	b.n	800b7ac <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b844:	2102      	movs	r1, #2
 800b846:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b84a:	f7ff fa65 	bl	800ad18 <RCCEx_PLL3_Config>
 800b84e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b850:	2d00      	cmp	r5, #0
 800b852:	f43f ad19 	beq.w	800b288 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800b856:	e7a1      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x990>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b858:	4a77      	ldr	r2, [pc, #476]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800b85a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b85c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b860:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800b862:	2d00      	cmp	r5, #0
 800b864:	f43f ae23 	beq.w	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x6a2>
 800b868:	e768      	b.n	800b73c <HAL_RCCEx_PeriphCLKConfig+0x930>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b86a:	2101      	movs	r1, #1
 800b86c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b870:	f7ff fa52 	bl	800ad18 <RCCEx_PLL3_Config>
 800b874:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b876:	2d00      	cmp	r5, #0
 800b878:	f43f aba5 	beq.w	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800b87c:	e78a      	b.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x988>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b87e:	2101      	movs	r1, #1
 800b880:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b884:	f7ff fa48 	bl	800ad18 <RCCEx_PLL3_Config>
 800b888:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b88a:	2d00      	cmp	r5, #0
 800b88c:	f43f abba 	beq.w	800b004 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800b890:	e788      	b.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x998>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b892:	2102      	movs	r1, #2
 800b894:	f104 0008 	add.w	r0, r4, #8
 800b898:	f7ff f9c4 	bl	800ac24 <RCCEx_PLL2_Config>
 800b89c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b89e:	2d00      	cmp	r5, #0
 800b8a0:	f43f ab55 	beq.w	800af4e <HAL_RCCEx_PeriphCLKConfig+0x142>
 800b8a4:	e767      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8a6:	2102      	movs	r1, #2
 800b8a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b8ac:	f7ff fa34 	bl	800ad18 <RCCEx_PLL3_Config>
 800b8b0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b8b2:	2d00      	cmp	r5, #0
 800b8b4:	f43f aca4 	beq.w	800b200 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800b8b8:	e759      	b.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x962>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8ba:	4a5f      	ldr	r2, [pc, #380]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800b8bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b8be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8c2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800b8c4:	2d00      	cmp	r5, #0
 800b8c6:	f43f af5b 	beq.w	800b780 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800b8ca:	e414      	b.n	800b0f6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8cc:	2102      	movs	r1, #2
 800b8ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b8d2:	f7ff fa21 	bl	800ad18 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b8d6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	f43f ace6 	beq.w	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>
        status = HAL_ERROR;
 800b8e0:	2601      	movs	r6, #1
 800b8e2:	e4e3      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8e4:	2102      	movs	r1, #2
 800b8e6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b8ea:	f7ff fa15 	bl	800ad18 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b8ee:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	f43f acea 	beq.w	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        status = HAL_ERROR;
 800b8f8:	2601      	movs	r6, #1
 800b8fa:	e4e7      	b.n	800b2cc <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8fc:	2100      	movs	r1, #0
 800b8fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b902:	f7ff fa09 	bl	800ad18 <RCCEx_PLL3_Config>
 800b906:	4605      	mov	r5, r0
        break;
 800b908:	f7ff baea 	b.w	800aee0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b90c:	2102      	movs	r1, #2
 800b90e:	3028      	adds	r0, #40	; 0x28
 800b910:	f7ff fa02 	bl	800ad18 <RCCEx_PLL3_Config>
 800b914:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800b916:	2e00      	cmp	r6, #0
 800b918:	f43f aa94 	beq.w	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x38>
 800b91c:	f7ff ba9f 	b.w	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b920:	4a45      	ldr	r2, [pc, #276]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
        break;
 800b922:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b924:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b92a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800b92c:	e5af      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b92e:	2100      	movs	r1, #0
 800b930:	f104 0008 	add.w	r0, r4, #8
 800b934:	f7ff f976 	bl	800ac24 <RCCEx_PLL2_Config>
 800b938:	4605      	mov	r5, r0
        break;
 800b93a:	e5a8      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b93c:	2100      	movs	r1, #0
 800b93e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b942:	f7ff f9e9 	bl	800ad18 <RCCEx_PLL3_Config>
 800b946:	4605      	mov	r5, r0
        break;
 800b948:	f7ff bb20 	b.w	800af8c <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b94c:	2100      	movs	r1, #0
 800b94e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b952:	f7ff f9e1 	bl	800ad18 <RCCEx_PLL3_Config>
 800b956:	4605      	mov	r5, r0
        break;
 800b958:	f7ff badf 	b.w	800af1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b95c:	2100      	movs	r1, #0
 800b95e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b962:	f7ff f9d9 	bl	800ad18 <RCCEx_PLL3_Config>
 800b966:	4605      	mov	r5, r0
        break;
 800b968:	e591      	b.n	800b48e <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b96a:	2100      	movs	r1, #0
 800b96c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800b970:	f7ff f9d2 	bl	800ad18 <RCCEx_PLL3_Config>
 800b974:	4605      	mov	r5, r0
        break;
 800b976:	f7ff ba96 	b.w	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b97a:	2101      	movs	r1, #1
 800b97c:	f104 0008 	add.w	r0, r4, #8
 800b980:	f7ff f950 	bl	800ac24 <RCCEx_PLL2_Config>
 800b984:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b986:	2d00      	cmp	r5, #0
 800b988:	f43f aee6 	beq.w	800b758 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800b98c:	e41d      	b.n	800b1ca <HAL_RCCEx_PeriphCLKConfig+0x3be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b98e:	2101      	movs	r1, #1
 800b990:	f104 0008 	add.w	r0, r4, #8
 800b994:	f7ff f946 	bl	800ac24 <RCCEx_PLL2_Config>
 800b998:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b99a:	2d00      	cmp	r5, #0
 800b99c:	f43f aed2 	beq.w	800b744 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800b9a0:	f7ff bbf8 	b.w	800b194 <HAL_RCCEx_PeriphCLKConfig+0x388>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9a4:	2101      	movs	r1, #1
 800b9a6:	f104 0008 	add.w	r0, r4, #8
 800b9aa:	f7ff f93b 	bl	800ac24 <RCCEx_PLL2_Config>
 800b9ae:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800b9b0:	2d00      	cmp	r5, #0
 800b9b2:	f43f adba 	beq.w	800b52a <HAL_RCCEx_PeriphCLKConfig+0x71e>
 800b9b6:	e6bd      	b.n	800b734 <HAL_RCCEx_PeriphCLKConfig+0x928>
            ret = HAL_TIMEOUT;
 800b9b8:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b9ba:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 800b9be:	4635      	mov	r5, r6
 800b9c0:	f7ff bb9f 	b.w	800b102 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800b9c4:	2601      	movs	r6, #1
 800b9c6:	f7ff ba4c 	b.w	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9ca:	4a1b      	ldr	r2, [pc, #108]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800b9cc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800b9ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9d2:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b9d4:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800b9d6:	f7ff ba3b 	b.w	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
 800b9da:	f7fb fe8f 	bl	80076fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9de:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800ba38 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
        tickstart = HAL_GetTick();
 800b9e2:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9e4:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9e8:	e004      	b.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b9ea:	f7fb fe87 	bl	80076fc <HAL_GetTick>
 800b9ee:	1bc0      	subs	r0, r0, r7
 800b9f0:	4548      	cmp	r0, r9
 800b9f2:	d8e1      	bhi.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b9f4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800b9f8:	079b      	lsls	r3, r3, #30
 800b9fa:	d5f6      	bpl.n	800b9ea <HAL_RCCEx_PeriphCLKConfig+0xbde>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b9fc:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800ba00:	e61b      	b.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800ba02:	490d      	ldr	r1, [pc, #52]	; (800ba38 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800ba04:	4b0d      	ldr	r3, [pc, #52]	; (800ba3c <HAL_RCCEx_PeriphCLKConfig+0xc30>)
 800ba06:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 800ba0a:	690a      	ldr	r2, [r1, #16]
 800ba0c:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800ba10:	4313      	orrs	r3, r2
 800ba12:	610b      	str	r3, [r1, #16]
 800ba14:	e61c      	b.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x844>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ba16:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ba1a:	462e      	mov	r6, r5
 800ba1c:	f7ff bb71 	b.w	800b102 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->FmcClockSelection)
 800ba20:	2601      	movs	r6, #1
 800ba22:	4635      	mov	r5, r6
 800ba24:	f7ff bb6a 	b.w	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ba28:	2601      	movs	r6, #1
 800ba2a:	4635      	mov	r5, r6
 800ba2c:	f7ff bbd0 	b.w	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ba30:	2601      	movs	r6, #1
 800ba32:	4635      	mov	r5, r6
 800ba34:	f7ff bbb1 	b.w	800b19a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800ba38:	58024400 	.word	0x58024400
 800ba3c:	00ffffcf 	.word	0x00ffffcf

0800ba40 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba40:	4b4f      	ldr	r3, [pc, #316]	; (800bb80 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800ba42:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba44:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ba46:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba48:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800ba4a:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ba4e:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ba52:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800ba54:	d05c      	beq.n	800bb10 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ba56:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba5a:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba5e:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ba62:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800ba66:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ba68:	ee07 4a90 	vmov	s15, r4
 800ba6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800ba70:	d003      	beq.n	800ba7a <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800ba72:	2902      	cmp	r1, #2
 800ba74:	d075      	beq.n	800bb62 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800ba76:	2900      	cmp	r1, #0
 800ba78:	d04f      	beq.n	800bb1a <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ba7a:	ee07 2a90 	vmov	s15, r2
 800ba7e:	eddf 6a41 	vldr	s13, [pc, #260]	; 800bb84 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800ba82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba88:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800ba8c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800bb88 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800ba90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba94:	ee06 3a90 	vmov	s13, r3
 800ba98:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800ba9c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800baa0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800baa4:	eee7 6a25 	vfma.f32	s13, s14, s11
 800baa8:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800baac:	4a34      	ldr	r2, [pc, #208]	; (800bb80 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800baae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bab2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800bab4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800bab8:	ee07 3a10 	vmov	s14, r3
 800babc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800bac0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bac2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bace:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bad2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800bad4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800bad8:	ee07 3a10 	vmov	s14, r3
 800badc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bae0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baec:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800baf0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800baf2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800baf6:	ee07 3a90 	vmov	s15, r3
 800bafa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bafe:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bb02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb06:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800bb0a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800bb0e:	4770      	bx	lr
 800bb10:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bb12:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bb16:	6082      	str	r2, [r0, #8]
}
 800bb18:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb1a:	6819      	ldr	r1, [r3, #0]
 800bb1c:	0689      	lsls	r1, r1, #26
 800bb1e:	d527      	bpl.n	800bb70 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb20:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb22:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb26:	4919      	ldr	r1, [pc, #100]	; (800bb8c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb28:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bb2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb2e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb36:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800bb88 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800bb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb3e:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb40:	ee06 3a90 	vmov	s13, r3
 800bb44:	ee05 1a90 	vmov	s11, r1
 800bb48:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bb4c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800bb50:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bb54:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800bb58:	eee7 6a05 	vfma.f32	s13, s14, s10
 800bb5c:	ee66 6a26 	vmul.f32	s13, s12, s13
 800bb60:	e7a4      	b.n	800baac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb62:	ee07 2a90 	vmov	s15, r2
 800bb66:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800bb90 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800bb6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb6e:	e78a      	b.n	800ba86 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb70:	ee07 2a90 	vmov	s15, r2
 800bb74:	eddf 6a07 	vldr	s13, [pc, #28]	; 800bb94 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800bb78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb7c:	e783      	b.n	800ba86 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800bb7e:	bf00      	nop
 800bb80:	58024400 	.word	0x58024400
 800bb84:	4a742400 	.word	0x4a742400
 800bb88:	39000000 	.word	0x39000000
 800bb8c:	03d09000 	.word	0x03d09000
 800bb90:	4bbebc20 	.word	0x4bbebc20
 800bb94:	4c742400 	.word	0x4c742400

0800bb98 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb98:	4b4f      	ldr	r3, [pc, #316]	; (800bcd8 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800bb9a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb9c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bb9e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bba0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800bba2:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bba6:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bbaa:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800bbac:	d05c      	beq.n	800bc68 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bbae:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bbb2:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbb6:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bbba:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800bbbe:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bbc0:	ee07 4a90 	vmov	s15, r4
 800bbc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800bbc8:	d003      	beq.n	800bbd2 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800bbca:	2902      	cmp	r1, #2
 800bbcc:	d075      	beq.n	800bcba <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800bbce:	2900      	cmp	r1, #0
 800bbd0:	d04f      	beq.n	800bc72 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbd2:	ee07 2a90 	vmov	s15, r2
 800bbd6:	eddf 6a41 	vldr	s13, [pc, #260]	; 800bcdc <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800bbda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bbde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800bbe4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800bce0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800bbe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbec:	ee06 3a90 	vmov	s13, r3
 800bbf0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800bbf4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bbf8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bbfc:	eee7 6a25 	vfma.f32	s13, s14, s11
 800bc00:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bc04:	4a34      	ldr	r2, [pc, #208]	; (800bcd8 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800bc06:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bc0a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800bc0c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800bc10:	ee07 3a10 	vmov	s14, r3
 800bc14:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800bc18:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bc1a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bc1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc26:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bc2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800bc2c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800bc30:	ee07 3a10 	vmov	s14, r3
 800bc34:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bc38:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bc3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc44:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bc48:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800bc4a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800bc4e:	ee07 3a90 	vmov	s15, r3
 800bc52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc56:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bc5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc5e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800bc62:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800bc66:	4770      	bx	lr
 800bc68:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bc6a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bc6e:	6082      	str	r2, [r0, #8]
}
 800bc70:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc72:	6819      	ldr	r1, [r3, #0]
 800bc74:	0689      	lsls	r1, r1, #26
 800bc76:	d527      	bpl.n	800bcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc78:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc7a:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc7e:	4919      	ldr	r1, [pc, #100]	; (800bce4 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc80:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc86:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bc8e:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800bce0 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800bc92:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc96:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bc98:	ee06 3a90 	vmov	s13, r3
 800bc9c:	ee05 1a90 	vmov	s11, r1
 800bca0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bca4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800bca8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800bcac:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800bcb0:	eee7 6a05 	vfma.f32	s13, s14, s10
 800bcb4:	ee66 6a26 	vmul.f32	s13, s12, s13
 800bcb8:	e7a4      	b.n	800bc04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcba:	ee07 2a90 	vmov	s15, r2
 800bcbe:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800bce8 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800bcc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcc6:	e78a      	b.n	800bbde <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bcc8:	ee07 2a90 	vmov	s15, r2
 800bccc:	eddf 6a07 	vldr	s13, [pc, #28]	; 800bcec <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800bcd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bcd4:	e783      	b.n	800bbde <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800bcd6:	bf00      	nop
 800bcd8:	58024400 	.word	0x58024400
 800bcdc:	4a742400 	.word	0x4a742400
 800bce0:	39000000 	.word	0x39000000
 800bce4:	03d09000 	.word	0x03d09000
 800bce8:	4bbebc20 	.word	0x4bbebc20
 800bcec:	4c742400 	.word	0x4c742400

0800bcf0 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bcf0:	4b4f      	ldr	r3, [pc, #316]	; (800be30 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800bcf2:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bcf4:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bcf6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bcf8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800bcfa:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bcfe:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bd02:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800bd04:	d05c      	beq.n	800bdc0 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bd06:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bd0a:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd0e:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bd12:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800bd16:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bd18:	ee07 4a90 	vmov	s15, r4
 800bd1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800bd20:	d07e      	beq.n	800be20 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800bd22:	2902      	cmp	r1, #2
 800bd24:	d075      	beq.n	800be12 <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800bd26:	2900      	cmp	r1, #0
 800bd28:	d04f      	beq.n	800bdca <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd2a:	ee07 2a90 	vmov	s15, r2
 800bd2e:	eddf 6a41 	vldr	s13, [pc, #260]	; 800be34 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800bd32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd38:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800bd3c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800be38 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800bd40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd44:	ee06 3a90 	vmov	s13, r3
 800bd48:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800bd4c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bd50:	ee76 6a85 	vadd.f32	s13, s13, s10
 800bd54:	eee7 6a25 	vfma.f32	s13, s14, s11
 800bd58:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bd5c:	4a34      	ldr	r2, [pc, #208]	; (800be30 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800bd5e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bd62:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800bd64:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800bd68:	ee07 3a10 	vmov	s14, r3
 800bd6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800bd70:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bd72:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bd76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd7e:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bd82:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800bd84:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800bd88:	ee07 3a10 	vmov	s14, r3
 800bd8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bd90:	ee37 7a06 	vadd.f32	s14, s14, s12
 800bd94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd9c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bda0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800bda2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800bda6:	ee07 3a90 	vmov	s15, r3
 800bdaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdae:	ee77 7a86 	vadd.f32	s15, s15, s12
 800bdb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bdb6:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800bdba:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800bdbe:	4770      	bx	lr
 800bdc0:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bdc2:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bdc6:	6082      	str	r2, [r0, #8]
}
 800bdc8:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdca:	6819      	ldr	r1, [r3, #0]
 800bdcc:	0689      	lsls	r1, r1, #26
 800bdce:	d5ac      	bpl.n	800bd2a <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdd0:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdd2:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdd6:	4919      	ldr	r1, [pc, #100]	; (800be3c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdd8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800bddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdde:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bde2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bde6:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800be38 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800bdea:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bdee:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdf0:	ee06 3a90 	vmov	s13, r3
 800bdf4:	ee05 1a90 	vmov	s11, r1
 800bdf8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800bdfc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800be00:	ee76 6a86 	vadd.f32	s13, s13, s12
 800be04:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800be08:	eee7 6a05 	vfma.f32	s13, s14, s10
 800be0c:	ee66 6a26 	vmul.f32	s13, s12, s13
 800be10:	e7a4      	b.n	800bd5c <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be12:	ee07 2a90 	vmov	s15, r2
 800be16:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800be40 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800be1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be1e:	e78a      	b.n	800bd36 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be20:	ee07 2a90 	vmov	s15, r2
 800be24:	eddf 6a07 	vldr	s13, [pc, #28]	; 800be44 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800be28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be2c:	e783      	b.n	800bd36 <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800be2e:	bf00      	nop
 800be30:	58024400 	.word	0x58024400
 800be34:	4c742400 	.word	0x4c742400
 800be38:	39000000 	.word	0x39000000
 800be3c:	03d09000 	.word	0x03d09000
 800be40:	4bbebc20 	.word	0x4bbebc20
 800be44:	4a742400 	.word	0x4a742400

0800be48 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800be48:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800be4c:	430b      	orrs	r3, r1
{
 800be4e:	b500      	push	{lr}
 800be50:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800be52:	f000 8084 	beq.w	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800be56:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800be5a:	430b      	orrs	r3, r1
 800be5c:	d039      	beq.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800be5e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800be62:	430b      	orrs	r3, r1
 800be64:	f000 80e6 	beq.w	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800be68:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800be6c:	430b      	orrs	r3, r1
 800be6e:	f000 8089 	beq.w	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800be72:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800be76:	430b      	orrs	r3, r1
 800be78:	d061      	beq.n	800bf3e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800be7a:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800be7e:	430b      	orrs	r3, r1
 800be80:	f000 8112 	beq.w	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800be84:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800be88:	430b      	orrs	r3, r1
 800be8a:	f000 80a3 	beq.w	800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800be8e:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800be92:	430b      	orrs	r3, r1
 800be94:	f000 80fa 	beq.w	800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800be98:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800be9c:	430b      	orrs	r3, r1
 800be9e:	f000 8143 	beq.w	800c128 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bea2:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800bea6:	ea50 0301 	orrs.w	r3, r0, r1
 800beaa:	d137      	bne.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800beac:	4a99      	ldr	r2, [pc, #612]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800beae:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800beb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800beb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800beb8:	f000 8083 	beq.w	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800bebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bec0:	f000 8156 	beq.w	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800bec4:	bb53      	cbnz	r3, 800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bec6:	6810      	ldr	r0, [r2, #0]
 800bec8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800becc:	d044      	beq.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
 800bece:	4892      	ldr	r0, [pc, #584]	; (800c118 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800bed0:	e042      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bed2:	4a90      	ldr	r2, [pc, #576]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bed4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800bed6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 800beda:	2b80      	cmp	r3, #128	; 0x80
 800bedc:	f000 80a5 	beq.w	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800bee0:	d920      	bls.n	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800bee2:	2bc0      	cmp	r3, #192	; 0xc0
 800bee4:	d037      	beq.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800bee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800beea:	d117      	bne.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800beec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800beee:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bef0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bef4:	0749      	lsls	r1, r1, #29
 800bef6:	d502      	bpl.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f000 80c1 	beq.w	800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800befe:	4a85      	ldr	r2, [pc, #532]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf00:	6812      	ldr	r2, [r2, #0]
 800bf02:	05d0      	lsls	r0, r2, #23
 800bf04:	d503      	bpl.n	800bf0e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800bf06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf0a:	f000 8101 	beq.w	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf0e:	4a81      	ldr	r2, [pc, #516]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf10:	6812      	ldr	r2, [r2, #0]
 800bf12:	0391      	lsls	r1, r2, #14
 800bf14:	d502      	bpl.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800bf16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf1a:	d0d8      	beq.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800bf1c:	2000      	movs	r0, #0
}
 800bf1e:	b005      	add	sp, #20
 800bf20:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d04c      	beq.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800bf28:	2b40      	cmp	r3, #64	; 0x40
 800bf2a:	d1f7      	bne.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf2c:	6810      	ldr	r0, [r2, #0]
 800bf2e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800bf32:	d011      	beq.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf34:	a801      	add	r0, sp, #4
 800bf36:	f7ff fd83 	bl	800ba40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf3a:	9801      	ldr	r0, [sp, #4]
 800bf3c:	e00c      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bf3e:	4a75      	ldr	r2, [pc, #468]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf40:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800bf42:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800bf46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf4a:	d06e      	beq.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800bf4c:	d937      	bls.n	800bfbe <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800bf4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf52:	f040 8087 	bne.w	800c064 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf56:	4871      	ldr	r0, [pc, #452]	; (800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 800bf58:	b005      	add	sp, #20
 800bf5a:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bf5e:	4b6d      	ldr	r3, [pc, #436]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf62:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800bf66:	2b04      	cmp	r3, #4
 800bf68:	d8d8      	bhi.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800bf6a:	a201      	add	r2, pc, #4	; (adr r2, 800bf70 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800bf6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf70:	0800c013 	.word	0x0800c013
 800bf74:	0800bfef 	.word	0x0800bfef
 800bf78:	0800bfff 	.word	0x0800bfff
 800bf7c:	0800bf57 	.word	0x0800bf57
 800bf80:	0800bffb 	.word	0x0800bffb
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bf84:	4a63      	ldr	r2, [pc, #396]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bf86:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800bf88:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800bf8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf90:	d04b      	beq.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800bf92:	d944      	bls.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800bf94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf98:	d0dd      	beq.n	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800bf9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf9e:	d1bd      	bne.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfa0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfa2:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfa4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfa8:	0752      	lsls	r2, r2, #29
 800bfaa:	d5a8      	bpl.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1a6      	bne.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfb0:	4b58      	ldr	r3, [pc, #352]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bfb2:	485b      	ldr	r0, [pc, #364]	; (800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bfba:	40d8      	lsrs	r0, r3
 800bfbc:	e7cc      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d154      	bne.n	800c06c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfc2:	6810      	ldr	r0, [r2, #0]
 800bfc4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800bfc8:	d0c6      	beq.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfca:	a801      	add	r0, sp, #4
 800bfcc:	f7ff fe90 	bl	800bcf0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfd0:	9802      	ldr	r0, [sp, #8]
 800bfd2:	e7c1      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800bfd4:	4a4f      	ldr	r2, [pc, #316]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bfd6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800bfd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800bfdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfe0:	f000 80d0 	beq.w	800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800bfe4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfe8:	d0da      	beq.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d196      	bne.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfee:	4b49      	ldr	r3, [pc, #292]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bff0:	6818      	ldr	r0, [r3, #0]
 800bff2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800bff6:	d0af      	beq.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800bff8:	e79c      	b.n	800bf34 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bffa:	4a46      	ldr	r2, [pc, #280]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800bffc:	e776      	b.n	800beec <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bffe:	4b45      	ldr	r3, [pc, #276]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c006:	d0a7      	beq.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c008:	a801      	add	r0, sp, #4
 800c00a:	f7ff fdc5 	bl	800bb98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c00e:	9801      	ldr	r0, [sp, #4]
 800c010:	e7a2      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c012:	4b40      	ldr	r3, [pc, #256]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c014:	6818      	ldr	r0, [r3, #0]
 800c016:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800c01a:	d09d      	beq.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c01c:	e7d5      	b.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d0cf      	beq.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800c022:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c026:	d081      	beq.n	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800c028:	e778      	b.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c02a:	6810      	ldr	r0, [r2, #0]
 800c02c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c030:	d092      	beq.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c032:	e7e9      	b.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c034:	4a37      	ldr	r2, [pc, #220]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c036:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c038:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800c03c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c040:	d0f3      	beq.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800c042:	d806      	bhi.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c044:	2b00      	cmp	r3, #0
 800c046:	d0bc      	beq.n	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800c048:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c04c:	f43f af6e 	beq.w	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800c050:	e764      	b.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800c052:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c056:	f43f af7e 	beq.w	800bf56 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800c05a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c05e:	f43f af45 	beq.w	800beec <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800c062:	e75b      	b.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
 800c064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c068:	d09a      	beq.n	800bfa0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800c06a:	e757      	b.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800c06c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c070:	f43f af5c 	beq.w	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800c074:	e752      	b.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c076:	6810      	ldr	r0, [r2, #0]
 800c078:	f010 0004 	ands.w	r0, r0, #4
 800c07c:	f43f af6c 	beq.w	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c080:	6813      	ldr	r3, [r2, #0]
 800c082:	4827      	ldr	r0, [pc, #156]	; (800c120 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800c084:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c088:	40d8      	lsrs	r0, r3
 800c08a:	e765      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c08c:	4b21      	ldr	r3, [pc, #132]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c08e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 800c090:	03d2      	lsls	r2, r2, #15
 800c092:	d5bf      	bpl.n	800c014 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c094:	6818      	ldr	r0, [r3, #0]
 800c096:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800c09a:	f43f af5d 	beq.w	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c09e:	a801      	add	r0, sp, #4
 800c0a0:	f7ff fcce 	bl	800ba40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c0a4:	9803      	ldr	r0, [sp, #12]
 800c0a6:	e757      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c0a8:	4a1a      	ldr	r2, [pc, #104]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c0aa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c0ac:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800c0b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c0b4:	d0df      	beq.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800c0b6:	d810      	bhi.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800c0b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0bc:	d058      	beq.n	800c170 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800c0be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0c2:	d118      	bne.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0c4:	4b13      	ldr	r3, [pc, #76]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c0c6:	6818      	ldr	r0, [r3, #0]
 800c0c8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c0cc:	f43f af44 	beq.w	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0d0:	a801      	add	r0, sp, #4
 800c0d2:	f7ff fd61 	bl	800bb98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c0d6:	9802      	ldr	r0, [sp, #8]
 800c0d8:	e73e      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800c0da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c0de:	d012      	beq.n	800c106 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 800c0e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0e4:	f47f af1a 	bne.w	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c0e8:	4b0a      	ldr	r3, [pc, #40]	; (800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800c0ea:	6818      	ldr	r0, [r3, #0]
 800c0ec:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800c0f0:	f43f af32 	beq.w	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c0f4:	e6eb      	b.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f47f af10 	bne.w	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
 800c0fc:	b005      	add	sp, #20
 800c0fe:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800c102:	f7fe bd47 	b.w	800ab94 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c106:	6810      	ldr	r0, [r2, #0]
 800c108:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800c10c:	f43f af24 	beq.w	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
 800c110:	4804      	ldr	r0, [pc, #16]	; (800c124 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800c112:	e721      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c114:	58024400 	.word	0x58024400
 800c118:	017d7840 	.word	0x017d7840
 800c11c:	00bb8000 	.word	0x00bb8000
 800c120:	03d09000 	.word	0x03d09000
 800c124:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c128:	4b28      	ldr	r3, [pc, #160]	; (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800c12a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c12c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800c130:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c134:	d037      	beq.n	800c1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800c136:	d814      	bhi.n	800c162 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800c138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c13c:	d03f      	beq.n	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800c13e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c142:	d0bf      	beq.n	800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800c144:	2b00      	cmp	r3, #0
 800c146:	f47f aee9 	bne.w	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c14a:	f7fe fce3 	bl	800ab14 <HAL_RCC_GetHCLKFreq>
 800c14e:	4b1f      	ldr	r3, [pc, #124]	; (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800c150:	4a1f      	ldr	r2, [pc, #124]	; (800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800c152:	6a1b      	ldr	r3, [r3, #32]
 800c154:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c158:	5cd3      	ldrb	r3, [r2, r3]
 800c15a:	f003 031f 	and.w	r3, r3, #31
 800c15e:	40d8      	lsrs	r0, r3
        break;
 800c160:	e6fa      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800c162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c166:	d017      	beq.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 800c168:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c16c:	d0bc      	beq.n	800c0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800c16e:	e6d5      	b.n	800bf1c <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c170:	6810      	ldr	r0, [r2, #0]
 800c172:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800c176:	f43f aeef 	beq.w	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c17a:	a801      	add	r0, sp, #4
 800c17c:	f7ff fc60 	bl	800ba40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c180:	9802      	ldr	r0, [sp, #8]
 800c182:	e6e9      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c184:	6810      	ldr	r0, [r2, #0]
 800c186:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800c18a:	f43f aee5 	beq.w	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c18e:	a801      	add	r0, sp, #4
 800c190:	f7ff fd02 	bl	800bb98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c194:	9803      	ldr	r0, [sp, #12]
 800c196:	e6df      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c198:	4b0c      	ldr	r3, [pc, #48]	; (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800c19a:	6818      	ldr	r0, [r3, #0]
 800c19c:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800c1a0:	f43f aeda 	beq.w	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c1a4:	e7b4      	b.n	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c1a6:	4b09      	ldr	r3, [pc, #36]	; (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800c1a8:	6818      	ldr	r0, [r3, #0]
 800c1aa:	f010 0004 	ands.w	r0, r0, #4
 800c1ae:	f43f aed3 	beq.w	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4807      	ldr	r0, [pc, #28]	; (800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800c1b6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c1ba:	40d8      	lsrs	r0, r3
 800c1bc:	e6cc      	b.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1be:	4b03      	ldr	r3, [pc, #12]	; (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800c1c0:	6818      	ldr	r0, [r3, #0]
 800c1c2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800c1c6:	f43f aec7 	beq.w	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800c1ca:	e7d6      	b.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800c1cc:	58024400 	.word	0x58024400
 800c1d0:	0801c414 	.word	0x0801c414
 800c1d4:	03d09000 	.word	0x03d09000

0800c1d8 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c1d8:	2800      	cmp	r0, #0
 800c1da:	d03c      	beq.n	800c256 <HAL_RNG_Init+0x7e>
{
 800c1dc:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c1de:	7a43      	ldrb	r3, [r0, #9]
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d031      	beq.n	800c24e <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800c1ea:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800c1ec:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800c1ee:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800c1f0:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800c1f2:	6813      	ldr	r3, [r2, #0]
 800c1f4:	f023 0320 	bic.w	r3, r3, #32
 800c1f8:	430b      	orrs	r3, r1
 800c1fa:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c1fc:	6822      	ldr	r2, [r4, #0]
 800c1fe:	6813      	ldr	r3, [r2, #0]
 800c200:	f043 0304 	orr.w	r3, r3, #4
 800c204:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800c206:	6823      	ldr	r3, [r4, #0]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	0658      	lsls	r0, r3, #25
 800c20c:	d503      	bpl.n	800c216 <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800c20e:	2304      	movs	r3, #4
    return HAL_ERROR;
 800c210:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 800c212:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800c214:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 800c216:	f7fb fa71 	bl	80076fc <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800c21a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c21c:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	0759      	lsls	r1, r3, #29
 800c222:	d50e      	bpl.n	800c242 <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c224:	f7fb fa6a 	bl	80076fc <HAL_GetTick>
 800c228:	1b43      	subs	r3, r0, r5
 800c22a:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800c22c:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c22e:	d9f6      	bls.n	800c21e <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800c230:	685a      	ldr	r2, [r3, #4]
 800c232:	0752      	lsls	r2, r2, #29
 800c234:	d5f3      	bpl.n	800c21e <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
 800c236:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c238:	2302      	movs	r3, #2
        return HAL_ERROR;
 800c23a:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 800c23c:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c23e:	60e3      	str	r3, [r4, #12]
}
 800c240:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c242:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 800c244:	2201      	movs	r2, #1
  return HAL_OK;
 800c246:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800c248:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c24a:	60e3      	str	r3, [r4, #12]
}
 800c24c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800c24e:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800c250:	f7fa fd5c 	bl	8006d0c <HAL_RNG_MspInit>
 800c254:	e7c9      	b.n	800c1ea <HAL_RNG_Init+0x12>
    return HAL_ERROR;
 800c256:	2001      	movs	r0, #1
}
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop

0800c25c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800c25e:	7a03      	ldrb	r3, [r0, #8]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d027      	beq.n	800c2b4 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800c264:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 800c266:	2201      	movs	r2, #1
 800c268:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 800c26a:	4293      	cmp	r3, r2
 800c26c:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
 800c26e:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 800c270:	d006      	beq.n	800c280 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800c272:	2304      	movs	r3, #4
    status = HAL_ERROR;
 800c274:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800c276:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800c278:	2300      	movs	r3, #0
 800c27a:	7223      	strb	r3, [r4, #8]

  return status;
}
 800c27c:	4630      	mov	r0, r6
 800c27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 800c280:	2302      	movs	r3, #2
 800c282:	460d      	mov	r5, r1
 800c284:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 800c286:	f7fb fa39 	bl	80076fc <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c28a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800c28c:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c28e:	685a      	ldr	r2, [r3, #4]
 800c290:	07d2      	lsls	r2, r2, #31
 800c292:	d412      	bmi.n	800c2ba <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c294:	f7fb fa32 	bl	80076fc <HAL_GetTick>
 800c298:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c29a:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800c29c:	2802      	cmp	r0, #2
 800c29e:	d9f6      	bls.n	800c28e <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800c2a0:	685a      	ldr	r2, [r3, #4]
 800c2a2:	f012 0201 	ands.w	r2, r2, #1
 800c2a6:	d1f2      	bne.n	800c28e <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 800c2a8:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c2aa:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 800c2ac:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 800c2ae:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800c2b0:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 800c2b2:	e7e3      	b.n	800c27c <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 800c2b4:	2602      	movs	r6, #2
}
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 800c2ba:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
 800c2bc:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 800c2be:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
 800c2c0:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800c2c2:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800c2c4:	7262      	strb	r2, [r4, #9]
 800c2c6:	e7d7      	b.n	800c278 <HAL_RNG_GenerateRandomNumber+0x1c>

0800c2c8 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800c2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c2ca:	4ba6      	ldr	r3, [pc, #664]	; (800c564 <HAL_SAI_Init.part.0+0x29c>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800c2cc:	4604      	mov	r4, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c2ce:	6802      	ldr	r2, [r0, #0]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d01c      	beq.n	800c30e <HAL_SAI_Init.part.0+0x46>
 800c2d4:	3320      	adds	r3, #32
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d019      	beq.n	800c30e <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c2da:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d04d      	beq.n	800c37e <HAL_SAI_Init.part.0+0xb6>
 800c2e2:	3320      	adds	r3, #32
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d04a      	beq.n	800c37e <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800c2e8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	f000 8134 	beq.w	800c55a <HAL_SAI_Init.part.0+0x292>
 800c2f2:	3320      	adds	r3, #32
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	f000 8130 	beq.w	800c55a <HAL_SAI_Init.part.0+0x292>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800c2fa:	4b9b      	ldr	r3, [pc, #620]	; (800c568 <HAL_SAI_Init.part.0+0x2a0>)
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	f000 812e 	beq.w	800c55e <HAL_SAI_Init.part.0+0x296>
 800c302:	3320      	adds	r3, #32
 800c304:	429a      	cmp	r2, r3
 800c306:	f000 812a 	beq.w	800c55e <HAL_SAI_Init.part.0+0x296>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800c30a:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 800c30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 800c30e:	4e97      	ldr	r6, [pc, #604]	; (800c56c <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800c310:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800c314:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d037      	beq.n	800c38c <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c31c:	4b94      	ldr	r3, [pc, #592]	; (800c570 <HAL_SAI_Init.part.0+0x2a8>)
 800c31e:	4995      	ldr	r1, [pc, #596]	; (800c574 <HAL_SAI_Init.part.0+0x2ac>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800c326:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c328:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800c32a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c32e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800c330:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800c332:	2b00      	cmp	r3, #0
 800c334:	d031      	beq.n	800c39a <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800c336:	6822      	ldr	r2, [r4, #0]
    count--;
 800c338:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800c33a:	6815      	ldr	r5, [r2, #0]
 800c33c:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
 800c340:	d1f7      	bne.n	800c332 <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
 800c342:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 800c344:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 800c346:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 800c348:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800c34c:	f000 8156 	beq.w	800c5fc <HAL_SAI_Init.part.0+0x334>
 800c350:	4293      	cmp	r3, r2
 800c352:	bf19      	ittee	ne
 800c354:	4610      	movne	r0, r2
 800c356:	2103      	movne	r1, #3
 800c358:	2123      	moveq	r1, #35	; 0x23
 800c35a:	2022      	moveq	r0, #34	; 0x22
 800c35c:	bf15      	itete	ne
 800c35e:	2701      	movne	r7, #1
 800c360:	2721      	moveq	r7, #33	; 0x21
 800c362:	2200      	movne	r2, #0
 800c364:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
 800c366:	68a3      	ldr	r3, [r4, #8]
 800c368:	3b01      	subs	r3, #1
 800c36a:	2b04      	cmp	r3, #4
 800c36c:	f200 8181 	bhi.w	800c672 <HAL_SAI_Init.part.0+0x3aa>
 800c370:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c374:	001c00e8 	.word	0x001c00e8
 800c378:	001b00ef 	.word	0x001b00ef
 800c37c:	00eb      	.short	0x00eb
  if (hsai->State == HAL_SAI_STATE_RESET)
 800c37e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    SaiBaseAddress = SAI2;
 800c382:	4e7d      	ldr	r6, [pc, #500]	; (800c578 <HAL_SAI_Init.part.0+0x2b0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800c384:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1c7      	bne.n	800c31c <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
 800c38c:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
 800c38e:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800c392:	f7fa fd25 	bl	8006de0 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 800c396:	6822      	ldr	r2, [r4, #0]
 800c398:	e7c0      	b.n	800c31c <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c39a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 800c39e:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800c3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800c3aa:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c3ac:	f44f 6700 	mov.w	r7, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 800c3b0:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800c3b2:	6a23      	ldr	r3, [r4, #32]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d04a      	beq.n	800c44e <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800c3b8:	6823      	ldr	r3, [r4, #0]
 800c3ba:	4a6a      	ldr	r2, [pc, #424]	; (800c564 <HAL_SAI_Init.part.0+0x29c>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	f000 8131 	beq.w	800c624 <HAL_SAI_Init.part.0+0x35c>
 800c3c2:	486e      	ldr	r0, [pc, #440]	; (800c57c <HAL_SAI_Init.part.0+0x2b4>)
 800c3c4:	1a18      	subs	r0, r3, r0
 800c3c6:	fab0 f080 	clz	r0, r0
 800c3ca:	0940      	lsrs	r0, r0, #5
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	f040 8129 	bne.w	800c624 <HAL_SAI_Init.part.0+0x35c>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c3d2:	4a6b      	ldr	r2, [pc, #428]	; (800c580 <HAL_SAI_Init.part.0+0x2b8>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	f000 8133 	beq.w	800c640 <HAL_SAI_Init.part.0+0x378>
 800c3da:	3220      	adds	r2, #32
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	f000 812f 	beq.w	800c640 <HAL_SAI_Init.part.0+0x378>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800c3e2:	4a68      	ldr	r2, [pc, #416]	; (800c584 <HAL_SAI_Init.part.0+0x2bc>)
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	f000 8124 	beq.w	800c632 <HAL_SAI_Init.part.0+0x36a>
 800c3ea:	3220      	adds	r2, #32
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	f000 8120 	beq.w	800c632 <HAL_SAI_Init.part.0+0x36a>
    if (hsai->Instance == SAI4_Block_A)
 800c3f2:	4a5d      	ldr	r2, [pc, #372]	; (800c568 <HAL_SAI_Init.part.0+0x2a0>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	f000 8133 	beq.w	800c660 <HAL_SAI_Init.part.0+0x398>
    if (hsai->Instance == SAI4_Block_B)
 800c3fa:	4a63      	ldr	r2, [pc, #396]	; (800c588 <HAL_SAI_Init.part.0+0x2c0>)
 800c3fc:	4293      	cmp	r3, r2
 800c3fe:	f000 8129 	beq.w	800c654 <HAL_SAI_Init.part.0+0x38c>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800c402:	69a3      	ldr	r3, [r4, #24]
 800c404:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c408:	f000 80fd 	beq.w	800c606 <HAL_SAI_Init.part.0+0x33e>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800c40c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800c40e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c412:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800c414:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800c418:	ea4f 0340 	mov.w	r3, r0, lsl #1
 800c41c:	6a20      	ldr	r0, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800c41e:	bf0c      	ite	eq
 800c420:	2202      	moveq	r2, #2
 800c422:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800c424:	fb00 f202 	mul.w	r2, r0, r2
 800c428:	0212      	lsls	r2, r2, #8
 800c42a:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 800c42e:	4a57      	ldr	r2, [pc, #348]	; (800c58c <HAL_SAI_Init.part.0+0x2c4>)
 800c430:	fba2 0203 	umull	r0, r2, r2, r3
 800c434:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 800c436:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800c43a:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800c43e:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 800c440:	bf08      	it	eq
 800c442:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c444:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 800c446:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c448:	d101      	bne.n	800c44e <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800c44a:	0852      	lsrs	r2, r2, #1
 800c44c:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c44e:	6863      	ldr	r3, [r4, #4]
 800c450:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800c454:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c456:	f040 80cc 	bne.w	800c5f2 <HAL_SAI_Init.part.0+0x32a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	bf14      	ite	ne
 800c45e:	f44f 7500 	movne.w	r5, #512	; 0x200
 800c462:	2500      	moveq	r5, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800c464:	f7fb f962 	bl	800772c <HAL_GetREVID>
 800c468:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c46c:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800c46e:	f0c0 80ac 	bcc.w	800c5ca <HAL_SAI_Init.part.0+0x302>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c472:	6811      	ldr	r1, [r2, #0]
 800c474:	4b46      	ldr	r3, [pc, #280]	; (800c590 <HAL_SAI_Init.part.0+0x2c8>)
 800c476:	400b      	ands	r3, r1
 800c478:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c47a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c47c:	e9d4 1300 	ldrd	r1, r3, [r4]
 800c480:	431a      	orrs	r2, r3
 800c482:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c484:	431a      	orrs	r2, r3
 800c486:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c488:	431a      	orrs	r2, r3
 800c48a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c48c:	431a      	orrs	r2, r3
 800c48e:	6963      	ldr	r3, [r4, #20]
 800c490:	431a      	orrs	r2, r3
 800c492:	69a3      	ldr	r3, [r4, #24]
 800c494:	431a      	orrs	r2, r3
 800c496:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c498:	431a      	orrs	r2, r3
 800c49a:	6923      	ldr	r3, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c49c:	431a      	orrs	r2, r3
 800c49e:	680b      	ldr	r3, [r1, #0]
 800c4a0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800c4a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c4a4:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c4a8:	4b3a      	ldr	r3, [pc, #232]	; (800c594 <HAL_SAI_Init.part.0+0x2cc>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c4aa:	433a      	orrs	r2, r7
 800c4ac:	432a      	orrs	r2, r5
 800c4ae:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800c4b0:	6822      	ldr	r2, [r4, #0]
 800c4b2:	6851      	ldr	r1, [r2, #4]
 800c4b4:	400b      	ands	r3, r1
 800c4b6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800c4b8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c4ba:	69e3      	ldr	r3, [r4, #28]
 800c4bc:	6822      	ldr	r2, [r4, #0]
 800c4be:	430b      	orrs	r3, r1
 800c4c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4c2:	430b      	orrs	r3, r1
 800c4c4:	6851      	ldr	r1, [r2, #4]
 800c4c6:	430b      	orrs	r3, r1
 800c4c8:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800c4ca:	6822      	ldr	r2, [r4, #0]
 800c4cc:	4b32      	ldr	r3, [pc, #200]	; (800c598 <HAL_SAI_Init.part.0+0x2d0>)
 800c4ce:	6891      	ldr	r1, [r2, #8]
 800c4d0:	400b      	ands	r3, r1
 800c4d2:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c4d4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800c4d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4d8:	6821      	ldr	r1, [r4, #0]
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c4de:	6888      	ldr	r0, [r1, #8]
 800c4e0:	4313      	orrs	r3, r2
 800c4e2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800c4e4:	4303      	orrs	r3, r0
 800c4e6:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800c4e8:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c4ec:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800c4ee:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800c4f0:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800c4f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800c4f6:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800c4f8:	6822      	ldr	r2, [r4, #0]
 800c4fa:	68d3      	ldr	r3, [r2, #12]
 800c4fc:	4003      	ands	r3, r0
 800c4fe:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c500:	6821      	ldr	r1, [r4, #0]
 800c502:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
 800c506:	68ca      	ldr	r2, [r1, #12]
 800c508:	4303      	orrs	r3, r0
 800c50a:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800c50c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c50e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800c512:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800c514:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c516:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800c51a:	4a12      	ldr	r2, [pc, #72]	; (800c564 <HAL_SAI_Init.part.0+0x29c>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800c51c:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800c51e:	6823      	ldr	r3, [r4, #0]
 800c520:	4293      	cmp	r3, r2
 800c522:	d03f      	beq.n	800c5a4 <HAL_SAI_Init.part.0+0x2dc>
 800c524:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800c528:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d039      	beq.n	800c5a4 <HAL_SAI_Init.part.0+0x2dc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c530:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 800c532:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c534:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 800c538:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
 800c53a:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 800c53e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800c542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 800c544:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800c548:	e732      	b.n	800c3b0 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800c54a:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c54c:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800c550:	e72e      	b.n	800c3b0 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800c552:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800c554:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800c558:	e72a      	b.n	800c3b0 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
 800c55a:	4e10      	ldr	r6, [pc, #64]	; (800c59c <HAL_SAI_Init.part.0+0x2d4>)
 800c55c:	e6d8      	b.n	800c310 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
 800c55e:	4e10      	ldr	r6, [pc, #64]	; (800c5a0 <HAL_SAI_Init.part.0+0x2d8>)
 800c560:	e6d6      	b.n	800c310 <HAL_SAI_Init.part.0+0x48>
 800c562:	bf00      	nop
 800c564:	40015804 	.word	0x40015804
 800c568:	58005404 	.word	0x58005404
 800c56c:	40015800 	.word	0x40015800
 800c570:	20000094 	.word	0x20000094
 800c574:	95cbec1b 	.word	0x95cbec1b
 800c578:	40015c00 	.word	0x40015c00
 800c57c:	40015824 	.word	0x40015824
 800c580:	40015c04 	.word	0x40015c04
 800c584:	40016004 	.word	0x40016004
 800c588:	58005424 	.word	0x58005424
 800c58c:	cccccccd 	.word	0xcccccccd
 800c590:	f005c010 	.word	0xf005c010
 800c594:	ffff1ff0 	.word	0xffff1ff0
 800c598:	fff88000 	.word	0xfff88000
 800c59c:	40016000 	.word	0x40016000
 800c5a0:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800c5a4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800c5a6:	f023 0301 	bic.w	r3, r3, #1
 800c5aa:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800c5ac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d1bd      	bne.n	800c530 <HAL_SAI_Init.part.0+0x268>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800c5b4:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800c5b8:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800c5ba:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800c5be:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800c5c0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800c5c2:	f043 0301 	orr.w	r3, r3, #1
 800c5c6:	6473      	str	r3, [r6, #68]	; 0x44
 800c5c8:	e7b2      	b.n	800c530 <HAL_SAI_Init.part.0+0x268>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800c5ca:	6811      	ldr	r1, [r2, #0]
 800c5cc:	4b2a      	ldr	r3, [pc, #168]	; (800c678 <HAL_SAI_Init.part.0+0x3b0>)
 800c5ce:	400b      	ands	r3, r1
 800c5d0:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800c5d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800c5d4:	e9d4 1300 	ldrd	r1, r3, [r4]
 800c5d8:	431a      	orrs	r2, r3
 800c5da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800c5dc:	431a      	orrs	r2, r3
 800c5de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800c5e0:	431a      	orrs	r2, r3
 800c5e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c5e4:	431a      	orrs	r2, r3
 800c5e6:	6963      	ldr	r3, [r4, #20]
 800c5e8:	431a      	orrs	r2, r3
 800c5ea:	69a3      	ldr	r3, [r4, #24]
 800c5ec:	431a      	orrs	r2, r3
 800c5ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c5f0:	e754      	b.n	800c49c <HAL_SAI_Init.part.0+0x1d4>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	bf08      	it	eq
 800c5f6:	f44f 7500 	moveq.w	r5, #512	; 0x200
 800c5fa:	e733      	b.n	800c464 <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
 800c5fc:	2113      	movs	r1, #19
 800c5fe:	2012      	movs	r0, #18
 800c600:	2711      	movs	r7, #17
 800c602:	2210      	movs	r2, #16
 800c604:	e6af      	b.n	800c366 <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800c606:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c608:	2904      	cmp	r1, #4
 800c60a:	d030      	beq.n	800c66e <HAL_SAI_Init.part.0+0x3a6>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800c60c:	2908      	cmp	r1, #8
 800c60e:	d01e      	beq.n	800c64e <HAL_SAI_Init.part.0+0x386>
        tmpframelength = hsai->FrameInit.FrameLength;
 800c610:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800c612:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800c616:	0043      	lsls	r3, r0, #1
 800c618:	6a20      	ldr	r0, [r4, #32]
 800c61a:	fb00 f202 	mul.w	r2, r0, r2
 800c61e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c622:	e704      	b.n	800c42e <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800c624:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c628:	2100      	movs	r1, #0
 800c62a:	f7ff fc0d 	bl	800be48 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	e6cf      	b.n	800c3d2 <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800c632:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c636:	2100      	movs	r1, #0
 800c638:	f7ff fc06 	bl	800be48 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 800c63c:	6823      	ldr	r3, [r4, #0]
 800c63e:	e6d8      	b.n	800c3f2 <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800c640:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c644:	2100      	movs	r1, #0
 800c646:	f7ff fbff 	bl	800be48 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	e6c9      	b.n	800c3e2 <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800c64e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c652:	e7de      	b.n	800c612 <HAL_SAI_Init.part.0+0x34a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800c654:	2100      	movs	r1, #0
 800c656:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c65a:	f7ff fbf5 	bl	800be48 <HAL_RCCEx_GetPeriphCLKFreq>
 800c65e:	e6d0      	b.n	800c402 <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800c660:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c664:	2100      	movs	r1, #0
 800c666:	f7ff fbef 	bl	800be48 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 800c66a:	6823      	ldr	r3, [r4, #0]
 800c66c:	e6c5      	b.n	800c3fa <HAL_SAI_Init.part.0+0x132>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800c66e:	2240      	movs	r2, #64	; 0x40
 800c670:	e7cf      	b.n	800c612 <HAL_SAI_Init.part.0+0x34a>
      syncen_bits = 0;
 800c672:	2700      	movs	r7, #0
 800c674:	e69c      	b.n	800c3b0 <HAL_SAI_Init.part.0+0xe8>
 800c676:	bf00      	nop
 800c678:	f805c010 	.word	0xf805c010

0800c67c <HAL_SAI_InitProtocol>:
  switch (protocol)
 800c67c:	2902      	cmp	r1, #2
{
 800c67e:	b538      	push	{r3, r4, r5, lr}
 800c680:	4604      	mov	r4, r0
  switch (protocol)
 800c682:	d935      	bls.n	800c6f0 <HAL_SAI_InitProtocol+0x74>
 800c684:	1ec8      	subs	r0, r1, #3
 800c686:	2801      	cmp	r0, #1
 800c688:	d830      	bhi.n	800c6ec <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800c68a:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800c68c:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800c68e:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800c690:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800c692:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 800c694:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800c696:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c69a:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c69c:	6860      	ldr	r0, [r4, #4]
 800c69e:	f030 0002 	bics.w	r0, r0, #2
 800c6a2:	bf0c      	ite	eq
 800c6a4:	2501      	moveq	r5, #1
 800c6a6:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
 800c6a8:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800c6aa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800c6ae:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 800c6b0:	bf0c      	ite	eq
 800c6b2:	2001      	moveq	r0, #1
 800c6b4:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800c6b6:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800c6b8:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800c6bc:	65a0      	str	r0, [r4, #88]	; 0x58
 800c6be:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
 800c6c0:	2a03      	cmp	r2, #3
 800c6c2:	d813      	bhi.n	800c6ec <HAL_SAI_InitProtocol+0x70>
 800c6c4:	e8df f002 	tbb	[pc, r2]
 800c6c8:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800c6cc:	6823      	ldr	r3, [r4, #0]
 800c6ce:	4a47      	ldr	r2, [pc, #284]	; (800c7ec <HAL_SAI_InitProtocol+0x170>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d005      	beq.n	800c6e0 <HAL_SAI_InitProtocol+0x64>
 800c6d4:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800c6d8:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d105      	bne.n	800c6ec <HAL_SAI_InitProtocol+0x70>
 800c6e0:	6863      	ldr	r3, [r4, #4]
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d102      	bne.n	800c6ec <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800c6e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d037      	beq.n	800c75c <HAL_SAI_InitProtocol+0xe0>
}
 800c6ec:	2001      	movs	r0, #1
 800c6ee:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800c6f0:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800c6f2:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800c6f4:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800c6f6:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 800c6f8:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c6fa:	6860      	ldr	r0, [r4, #4]
 800c6fc:	f030 0002 	bics.w	r0, r0, #2
 800c700:	bf14      	ite	ne
 800c702:	2001      	movne	r0, #1
 800c704:	2000      	moveq	r0, #0
 800c706:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800c708:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c70c:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800c70e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c712:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 800c714:	f013 0001 	ands.w	r0, r3, #1
 800c718:	d1e8      	bne.n	800c6ec <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
 800c71a:	b949      	cbnz	r1, 800c730 <HAL_SAI_InitProtocol+0xb4>
 800c71c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c720:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
 800c724:	2a03      	cmp	r2, #3
 800c726:	d8e1      	bhi.n	800c6ec <HAL_SAI_InitProtocol+0x70>
 800c728:	e8df f002 	tbb	[pc, r2]
 800c72c:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800c730:	6660      	str	r0, [r4, #100]	; 0x64
 800c732:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c736:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
 800c738:	2a03      	cmp	r2, #3
 800c73a:	d8d7      	bhi.n	800c6ec <HAL_SAI_InitProtocol+0x70>
 800c73c:	e8df f002 	tbb	[pc, r2]
 800c740:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c744:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800c746:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c748:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c74a:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800c74c:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c74e:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800c750:	f7fa ffec 	bl	800772c <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800c754:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d0b7      	beq.n	800c6cc <HAL_SAI_InitProtocol+0x50>
 800c75c:	4620      	mov	r0, r4
}
 800c75e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c762:	f7ff bdb1 	b.w	800c2c8 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c766:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c768:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c76a:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c76c:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c76e:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800c770:	e7ee      	b.n	800c750 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c772:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c774:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c776:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c778:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800c77a:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c77c:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800c77e:	e7e7      	b.n	800c750 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c780:	21e0      	movs	r1, #224	; 0xe0
 800c782:	e7f7      	b.n	800c774 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c784:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c786:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c788:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c78a:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800c78c:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c78e:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c790:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c792:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800c796:	e7db      	b.n	800c750 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c798:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c79a:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c79c:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800c79e:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c7a0:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800c7a4:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c7a6:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c7aa:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c7ac:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c7ae:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800c7b0:	d1ce      	bne.n	800c750 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
 800c7b2:	2308      	movs	r3, #8
 800c7b4:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800c7b6:	e7cb      	b.n	800c750 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c7b8:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c7ba:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800c7bc:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800c7be:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c7c2:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c7c4:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800c7c8:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800c7ca:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800c7ce:	d1bf      	bne.n	800c750 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
 800c7d0:	2310      	movs	r3, #16
 800c7d2:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800c7d4:	e7bc      	b.n	800c750 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800c7d6:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c7d8:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c7da:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800c7dc:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800c7de:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800c7e0:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800c7e2:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800c7e4:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800c7e8:	e7b2      	b.n	800c750 <HAL_SAI_InitProtocol+0xd4>
 800c7ea:	bf00      	nop
 800c7ec:	40015804 	.word	0x40015804

0800c7f0 <HAL_SAI_Transmit_DMA>:
{
 800c7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7f4:	460f      	mov	r7, r1
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800c7fa:	f7fa ff7f 	bl	80076fc <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 800c7fe:	2f00      	cmp	r7, #0
 800c800:	d06b      	beq.n	800c8da <HAL_SAI_Transmit_DMA+0xea>
 800c802:	fab5 f885 	clz	r8, r5
 800c806:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800c80a:	2d00      	cmp	r5, #0
 800c80c:	d065      	beq.n	800c8da <HAL_SAI_Transmit_DMA+0xea>
  if (hsai->State == HAL_SAI_STATE_READY)
 800c80e:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800c812:	2b01      	cmp	r3, #1
 800c814:	fa5f f983 	uxtb.w	r9, r3
 800c818:	d15a      	bne.n	800c8d0 <HAL_SAI_Transmit_DMA+0xe0>
    __HAL_LOCK(hsai);
 800c81a:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d056      	beq.n	800c8d0 <HAL_SAI_Transmit_DMA+0xe0>
    hsai->XferSize = Size;
 800c822:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800c824:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800c828:	4a3c      	ldr	r2, [pc, #240]	; (800c91c <HAL_SAI_Transmit_DMA+0x12c>)
 800c82a:	4606      	mov	r6, r0
    hsai->XferSize = Size;
 800c82c:	f365 030f 	bfi	r3, r5, #0, #16
    hsai->pBuffPtr = pData;
 800c830:	67a7      	str	r7, [r4, #120]	; 0x78
    __HAL_LOCK(hsai);
 800c832:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    hsai->XferSize = Size;
 800c836:	f365 431f 	bfi	r3, r5, #16, #16
 800c83a:	67e3      	str	r3, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800c83c:	2312      	movs	r3, #18
 800c83e:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800c842:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c846:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800c848:	4a35      	ldr	r2, [pc, #212]	; (800c920 <HAL_SAI_Transmit_DMA+0x130>)
 800c84a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c84e:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800c850:	4a34      	ldr	r2, [pc, #208]	; (800c924 <HAL_SAI_Transmit_DMA+0x134>)
 800c852:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c856:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800c858:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800c85c:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800c860:	6822      	ldr	r2, [r4, #0]
 800c862:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800c866:	321c      	adds	r2, #28
 800c868:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800c86a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800c86e:	f7fb fb6d 	bl	8007f4c <HAL_DMA_Start_IT>
 800c872:	2800      	cmp	r0, #0
 800c874:	d13f      	bne.n	800c8f6 <HAL_SAI_Transmit_DMA+0x106>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c876:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800c878:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c87a:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c87c:	d032      	beq.n	800c8e4 <HAL_SAI_Transmit_DMA+0xf4>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c87e:	2205      	movs	r2, #5
 800c880:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c882:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800c884:	2b01      	cmp	r3, #1
 800c886:	bf98      	it	ls
 800c888:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c88a:	6821      	ldr	r1, [r4, #0]
 800c88c:	690b      	ldr	r3, [r1, #16]
 800c88e:	4313      	orrs	r3, r2
 800c890:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800c892:	6822      	ldr	r2, [r4, #0]
 800c894:	6813      	ldr	r3, [r2, #0]
 800c896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c89a:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c89c:	e005      	b.n	800c8aa <HAL_SAI_Transmit_DMA+0xba>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800c89e:	f7fa ff2d 	bl	80076fc <HAL_GetTick>
 800c8a2:	1b83      	subs	r3, r0, r6
 800c8a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8a8:	d82a      	bhi.n	800c900 <HAL_SAI_Transmit_DMA+0x110>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800c8aa:	6822      	ldr	r2, [r4, #0]
 800c8ac:	6955      	ldr	r5, [r2, #20]
 800c8ae:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 800c8b2:	d0f4      	beq.n	800c89e <HAL_SAI_Transmit_DMA+0xae>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800c8b4:	6813      	ldr	r3, [r2, #0]
 800c8b6:	03db      	lsls	r3, r3, #15
 800c8b8:	d403      	bmi.n	800c8c2 <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
 800c8ba:	6813      	ldr	r3, [r2, #0]
 800c8bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c8c0:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 800c8c2:	2300      	movs	r3, #0
    return HAL_OK;
 800c8c4:	4699      	mov	r9, r3
    __HAL_UNLOCK(hsai);
 800c8c6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800c8ca:	4648      	mov	r0, r9
 800c8cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800c8d0:	f04f 0902 	mov.w	r9, #2
}
 800c8d4:	4648      	mov	r0, r9
 800c8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 800c8da:	f04f 0901 	mov.w	r9, #1
}
 800c8de:	4648      	mov	r0, r9
 800c8e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c8e4:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c8e8:	2a01      	cmp	r2, #1
 800c8ea:	bf0b      	itete	eq
 800c8ec:	2215      	moveq	r2, #21
 800c8ee:	2205      	movne	r2, #5
 800c8f0:	2171      	moveq	r1, #113	; 0x71
 800c8f2:	2161      	movne	r1, #97	; 0x61
 800c8f4:	e7c5      	b.n	800c882 <HAL_SAI_Transmit_DMA+0x92>
}
 800c8f6:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
 800c8f8:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
 800c8fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c900:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 800c904:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
 800c908:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c90c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 800c910:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c912:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800c916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c91a:	bf00      	nop
 800c91c:	0800c98d 	.word	0x0800c98d
 800c920:	0800c929 	.word	0x0800c929
 800c924:	0800c999 	.word	0x0800c999

0800c928 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800c928:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c92a:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c92c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800c92e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c932:	d01b      	beq.n	800c96c <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c934:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 800c936:	2300      	movs	r3, #0
 800c938:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800c93c:	6813      	ldr	r3, [r2, #0]
 800c93e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c942:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c944:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c946:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c948:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c94a:	d012      	beq.n	800c972 <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c94c:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 800c950:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c954:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800c956:	3b02      	subs	r3, #2
 800c958:	2b01      	cmp	r3, #1
 800c95a:	bf98      	it	ls
 800c95c:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c95e:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800c960:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800c964:	4013      	ands	r3, r2
 800c966:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800c968:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800c96c:	f7f7 f820 	bl	80039b0 <HAL_SAI_TxCpltCallback>
#endif
}
 800c970:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800c972:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800c976:	2a01      	cmp	r2, #1
 800c978:	bf0b      	itete	eq
 800c97a:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 800c97e:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 800c982:	f06f 0215 	mvneq.w	r2, #21
 800c986:	f06f 0205 	mvnne.w	r2, #5
 800c98a:	e7e3      	b.n	800c954 <SAI_DMATxCplt+0x2c>

0800c98c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c98c:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800c98e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800c990:	f7f7 f818 	bl	80039c4 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800c994:	bd08      	pop	{r3, pc}
 800c996:	bf00      	nop

0800c998 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800c998:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c99a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c99c:	f7fc fb3a 	bl	8009014 <HAL_DMA_GetError>
 800c9a0:	2802      	cmp	r0, #2
 800c9a2:	d025      	beq.n	800c9f0 <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c9a4:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c9a8:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c9aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c9ae:	4b14      	ldr	r3, [pc, #80]	; (800ca00 <SAI_DMAError+0x68>)
 800c9b0:	4814      	ldr	r0, [pc, #80]	; (800ca04 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800c9b2:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800c9b6:	680a      	ldr	r2, [r1, #0]
 800c9b8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800c9bc:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c9be:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
 800c9c0:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c9c2:	fba0 2303 	umull	r2, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
 800c9c6:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c9c8:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800c9ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800c9ce:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800c9d0:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 800c9d2:	b173      	cbz	r3, 800c9f2 <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800c9d4:	6822      	ldr	r2, [r4, #0]
    count--;
 800c9d6:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800c9d8:	6812      	ldr	r2, [r2, #0]
 800c9da:	03d2      	lsls	r2, r2, #15
 800c9dc:	d4f9      	bmi.n	800c9d2 <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800c9de:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800c9e0:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800c9e2:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 800c9e4:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 800c9e8:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 800c9ec:	f7f6 fff2 	bl	80039d4 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800c9f0:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800c9f2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800c9f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9fa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 800c9fe:	e7ee      	b.n	800c9de <SAI_DMAError+0x46>
 800ca00:	20000094 	.word	0x20000094
 800ca04:	95cbec1b 	.word	0x95cbec1b

0800ca08 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ca08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca0c:	4605      	mov	r5, r0
 800ca0e:	b086      	sub	sp, #24
 800ca10:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ca12:	f7fa fe73 	bl	80076fc <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ca16:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800ca18:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ca1a:	6828      	ldr	r0, [r5, #0]
 800ca1c:	f001 fe6c 	bl	800e6f8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca20:	4604      	mov	r4, r0
 800ca22:	b118      	cbz	r0, 800ca2c <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800ca24:	4620      	mov	r0, r4
 800ca26:	b006      	add	sp, #24
 800ca28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ca2c:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800ca2e:	6828      	ldr	r0, [r5, #0]
 800ca30:	0409      	lsls	r1, r1, #16
 800ca32:	f002 fbbb 	bl	800f1ac <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca36:	4604      	mov	r4, r0
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d1f3      	bne.n	800ca24 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ca3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca40:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ca42:	4669      	mov	r1, sp
 800ca44:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ca46:	e9cd 2300 	strd	r2, r3, [sp]
 800ca4a:	2230      	movs	r2, #48	; 0x30
 800ca4c:	2302      	movs	r3, #2
 800ca4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca52:	2200      	movs	r2, #0
 800ca54:	2301      	movs	r3, #1
 800ca56:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ca5a:	f001 fe37 	bl	800e6cc <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ca5e:	6828      	ldr	r0, [r5, #0]
 800ca60:	f002 fd2a 	bl	800f4b8 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800ca64:	4604      	mov	r4, r0
 800ca66:	2800      	cmp	r0, #0
 800ca68:	d1dc      	bne.n	800ca24 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ca6a:	4682      	mov	sl, r0
 800ca6c:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ca6e:	f240 582a 	movw	r8, #1322	; 0x52a
 800ca72:	e004      	b.n	800ca7e <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ca74:	f7fa fe42 	bl	80076fc <HAL_GetTick>
 800ca78:	1b83      	subs	r3, r0, r6
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	d024      	beq.n	800cac8 <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ca7e:	6828      	ldr	r0, [r5, #0]
 800ca80:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ca82:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ca86:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ca88:	d10c      	bne.n	800caa4 <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ca8a:	0319      	lsls	r1, r3, #12
 800ca8c:	d4f2      	bmi.n	800ca74 <SD_FindSCR+0x6c>
 800ca8e:	2c00      	cmp	r4, #0
 800ca90:	d1f0      	bne.n	800ca74 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ca92:	f001 fe01 	bl	800e698 <SDMMC_ReadFIFO>
 800ca96:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ca98:	6828      	ldr	r0, [r5, #0]
      index++;
 800ca9a:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ca9c:	f001 fdfc 	bl	800e698 <SDMMC_ReadFIFO>
 800caa0:	4682      	mov	sl, r0
      index++;
 800caa2:	e7e7      	b.n	800ca74 <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800caa4:	071a      	lsls	r2, r3, #28
 800caa6:	d416      	bmi.n	800cad6 <SD_FindSCR+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800caa8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800caaa:	079b      	lsls	r3, r3, #30
 800caac:	d40f      	bmi.n	800cace <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800caae:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800cab0:	f014 0420 	ands.w	r4, r4, #32
 800cab4:	d113      	bne.n	800cade <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cab6:	fa9a f28a 	rev.w	r2, sl
 800caba:	fa99 f389 	rev.w	r3, r9
 800cabe:	490a      	ldr	r1, [pc, #40]	; (800cae8 <SD_FindSCR+0xe0>)
 800cac0:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800cac2:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800cac6:	e7ad      	b.n	800ca24 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800cac8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cacc:	e7aa      	b.n	800ca24 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800cace:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cad0:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800cad2:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cad4:	e7a6      	b.n	800ca24 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800cad6:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cad8:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800cada:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cadc:	e7a2      	b.n	800ca24 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800cade:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 800cae0:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800cae2:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800cae4:	e79e      	b.n	800ca24 <SD_FindSCR+0x1c>
 800cae6:	bf00      	nop
 800cae8:	18000f3a 	.word	0x18000f3a

0800caec <HAL_SD_GetCardStatus.part.0>:
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
 800caec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caf0:	4604      	mov	r4, r0
 800caf2:	b096      	sub	sp, #88	; 0x58
 800caf4:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800caf6:	f7fa fe01 	bl	80076fc <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cafa:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800cafc:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800cafe:	6820      	ldr	r0, [r4, #0]
 800cb00:	f001 fde0 	bl	800e6c4 <SDMMC_GetResponse>
 800cb04:	0182      	lsls	r2, r0, #6
 800cb06:	d45c      	bmi.n	800cbc2 <HAL_SD_GetCardStatus.part.0+0xd6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800cb08:	2140      	movs	r1, #64	; 0x40
 800cb0a:	6820      	ldr	r0, [r4, #0]
 800cb0c:	f001 fdf4 	bl	800e6f8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb10:	4603      	mov	r3, r0
 800cb12:	b1e8      	cbz	r0, 800cb50 <HAL_SD_GetCardStatus.part.0+0x64>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800cb14:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800cb16:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb18:	6820      	ldr	r0, [r4, #0]
 800cb1a:	4956      	ldr	r1, [pc, #344]	; (800cc74 <HAL_SD_GetCardStatus.part.0+0x188>)
    hsd->State = HAL_SD_STATE_READY;
 800cb1c:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb1e:	6381      	str	r1, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800cb20:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 800cb22:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800cb24:	4303      	orrs	r3, r0
 800cb26:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cb28:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cb2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cb30:	6820      	ldr	r0, [r4, #0]
 800cb32:	f001 fde1 	bl	800e6f8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb36:	b138      	cbz	r0, 800cb48 <HAL_SD_GetCardStatus.part.0+0x5c>
    hsd->State = HAL_SD_STATE_READY;
 800cb38:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb3a:	6822      	ldr	r2, [r4, #0]
 800cb3c:	494d      	ldr	r1, [pc, #308]	; (800cc74 <HAL_SD_GetCardStatus.part.0+0x188>)
    status = HAL_ERROR;
 800cb3e:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb40:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800cb42:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cb44:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800cb48:	4630      	mov	r0, r6
 800cb4a:	b016      	add	sp, #88	; 0x58
 800cb4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800cb50:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cb52:	6820      	ldr	r0, [r4, #0]
 800cb54:	0409      	lsls	r1, r1, #16
 800cb56:	f002 fb29 	bl	800f1ac <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	d1d9      	bne.n	800cb14 <HAL_SD_GetCardStatus.part.0+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb64:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cb66:	4669      	mov	r1, sp
 800cb68:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb6a:	e9cd 2300 	strd	r2, r3, [sp]
 800cb6e:	2260      	movs	r2, #96	; 0x60
 800cb70:	2302      	movs	r3, #2
 800cb72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb76:	2301      	movs	r3, #1
 800cb78:	2200      	movs	r2, #0
 800cb7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cb7e:	f001 fda5 	bl	800e6cc <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800cb82:	6820      	ldr	r0, [r4, #0]
 800cb84:	f002 febc 	bl	800f900 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2800      	cmp	r0, #0
 800cb8c:	d1c2      	bne.n	800cb14 <HAL_SD_GetCardStatus.part.0+0x28>
  uint32_t *pData = pSDstatus;
 800cb8e:	ae06      	add	r6, sp, #24
 800cb90:	e004      	b.n	800cb9c <HAL_SD_GetCardStatus.part.0+0xb0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cb92:	f7fa fdb3 	bl	80076fc <HAL_GetTick>
 800cb96:	1bc0      	subs	r0, r0, r7
 800cb98:	3001      	adds	r0, #1
 800cb9a:	d016      	beq.n	800cbca <HAL_SD_GetCardStatus.part.0+0xde>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cb9c:	6820      	ldr	r0, [r4, #0]
 800cb9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cba0:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800cba4:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cba6:	d113      	bne.n	800cbd0 <HAL_SD_GetCardStatus.part.0+0xe4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800cba8:	041b      	lsls	r3, r3, #16
 800cbaa:	d5f2      	bpl.n	800cb92 <HAL_SD_GetCardStatus.part.0+0xa6>
 800cbac:	f106 0820 	add.w	r8, r6, #32
 800cbb0:	e000      	b.n	800cbb4 <HAL_SD_GetCardStatus.part.0+0xc8>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cbb2:	6820      	ldr	r0, [r4, #0]
 800cbb4:	f001 fd70 	bl	800e698 <SDMMC_ReadFIFO>
 800cbb8:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 800cbbc:	4546      	cmp	r6, r8
 800cbbe:	d1f8      	bne.n	800cbb2 <HAL_SD_GetCardStatus.part.0+0xc6>
 800cbc0:	e7e7      	b.n	800cb92 <HAL_SD_GetCardStatus.part.0+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cbc2:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800cbc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cbc8:	e7a7      	b.n	800cb1a <HAL_SD_GetCardStatus.part.0+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 800cbca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cbce:	e7a3      	b.n	800cb18 <HAL_SD_GetCardStatus.part.0+0x2c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cbd0:	0719      	lsls	r1, r3, #28
 800cbd2:	d448      	bmi.n	800cc66 <HAL_SD_GetCardStatus.part.0+0x17a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cbd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cbd6:	079a      	lsls	r2, r3, #30
 800cbd8:	d447      	bmi.n	800cc6a <HAL_SD_GetCardStatus.part.0+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cbda:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cbdc:	069b      	lsls	r3, r3, #26
 800cbde:	d50a      	bpl.n	800cbf6 <HAL_SD_GetCardStatus.part.0+0x10a>
 800cbe0:	e045      	b.n	800cc6e <HAL_SD_GetCardStatus.part.0+0x182>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800cbe2:	f001 fd59 	bl	800e698 <SDMMC_ReadFIFO>
 800cbe6:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cbea:	f7fa fd87 	bl	80076fc <HAL_GetTick>
 800cbee:	1bc0      	subs	r0, r0, r7
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	d0ea      	beq.n	800cbca <HAL_SD_GetCardStatus.part.0+0xde>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800cbf4:	6820      	ldr	r0, [r4, #0]
 800cbf6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cbf8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800cbfc:	d1f1      	bne.n	800cbe2 <HAL_SD_GetCardStatus.part.0+0xf6>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cbfe:	4a1e      	ldr	r2, [pc, #120]	; (800cc78 <HAL_SD_GetCardStatus.part.0+0x18c>)
  HAL_StatusTypeDef status = HAL_OK;
 800cc00:	461e      	mov	r6, r3
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800cc02:	9b06      	ldr	r3, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cc04:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800cc06:	f3c3 1281 	ubfx	r2, r3, #6, #2
 800cc0a:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800cc0c:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800cc10:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800cc12:	0a1a      	lsrs	r2, r3, #8
 800cc14:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800cc18:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800cc1c:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
 800cc20:	b292      	uxth	r2, r2
 800cc22:	ba09      	rev	r1, r1
 800cc24:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800cc26:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cc28:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800cc2a:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800cc2c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cc30:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800cc34:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800cc36:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800cc3a:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800cc3c:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800cc3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc40:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc44:	b2d0      	uxtb	r0, r2
 800cc46:	4303      	orrs	r3, r0
 800cc48:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800cc4a:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800cc4e:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800cc50:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800cc54:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800cc56:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cc5a:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800cc5e:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cc60:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cc62:	74a9      	strb	r1, [r5, #18]
 800cc64:	e762      	b.n	800cb2c <HAL_SD_GetCardStatus.part.0+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800cc66:	2308      	movs	r3, #8
 800cc68:	e757      	b.n	800cb1a <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800cc6a:	2302      	movs	r3, #2
 800cc6c:	e755      	b.n	800cb1a <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 800cc6e:	2320      	movs	r3, #32
 800cc70:	e753      	b.n	800cb1a <HAL_SD_GetCardStatus.part.0+0x2e>
 800cc72:	bf00      	nop
 800cc74:	1fe00fff 	.word	0x1fe00fff
 800cc78:	18000f3a 	.word	0x18000f3a

0800cc7c <HAL_SD_ReadBlocks>:
{
 800cc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc80:	460d      	mov	r5, r1
 800cc82:	b087      	sub	sp, #28
 800cc84:	4604      	mov	r4, r0
 800cc86:	4692      	mov	sl, r2
 800cc88:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800cc8a:	f7fa fd37 	bl	80076fc <HAL_GetTick>
  if (NULL == pData)
 800cc8e:	2d00      	cmp	r5, #0
 800cc90:	f000 8093 	beq.w	800cdba <HAL_SD_ReadBlocks+0x13e>
  if (hsd->State == HAL_SD_STATE_READY)
 800cc94:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	fa5f f983 	uxtb.w	r9, r3
 800cc9e:	d17b      	bne.n	800cd98 <HAL_SD_ReadBlocks+0x11c>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cca0:	eb0a 0307 	add.w	r3, sl, r7
 800cca4:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cca6:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cca8:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ccaa:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ccac:	f200 808f 	bhi.w	800cdce <HAL_SD_ReadBlocks+0x152>
    hsd->State = HAL_SD_STATE_BUSY;
 800ccb0:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ccb2:	f04f 0b02 	mov.w	fp, #2
 800ccb6:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
 800ccb8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 800ccbc:	6823      	ldr	r3, [r4, #0]
 800ccbe:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ccc0:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ccc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ccc4:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ccc6:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ccc8:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cccc:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ccd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 800ccd4:	bf18      	it	ne
 800ccd6:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ccda:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ccdc:	027b      	lsls	r3, r7, #9
 800ccde:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cce0:	2390      	movs	r3, #144	; 0x90
 800cce2:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cce6:	f001 fcf1 	bl	800e6cc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800ccea:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 800ccec:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800ccee:	68d3      	ldr	r3, [r2, #12]
 800ccf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccf4:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 800ccf6:	d959      	bls.n	800cdac <HAL_SD_ReadBlocks+0x130>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800ccf8:	4651      	mov	r1, sl
 800ccfa:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800ccfc:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cd00:	f001 fe46 	bl	800e990 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 800cd04:	2800      	cmp	r0, #0
 800cd06:	d16a      	bne.n	800cdde <HAL_SD_ReadBlocks+0x162>
    dataremaining = config.DataLength;
 800cd08:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cd0c:	e005      	b.n	800cd1a <HAL_SD_ReadBlocks+0x9e>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800cd0e:	f7fa fcf5 	bl	80076fc <HAL_GetTick>
 800cd12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd14:	1b80      	subs	r0, r0, r6
 800cd16:	4298      	cmp	r0, r3
 800cd18:	d22c      	bcs.n	800cd74 <HAL_SD_ReadBlocks+0xf8>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cd1a:	6820      	ldr	r0, [r4, #0]
 800cd1c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd1e:	f413 7f95 	tst.w	r3, #298	; 0x12a
 800cd22:	d168      	bne.n	800cdf6 <HAL_SD_ReadBlocks+0x17a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800cd24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cd26:	041a      	lsls	r2, r3, #16
 800cd28:	d5f1      	bpl.n	800cd0e <HAL_SD_ReadBlocks+0x92>
 800cd2a:	f1bb 0f1f 	cmp.w	fp, #31
 800cd2e:	d9ee      	bls.n	800cd0e <HAL_SD_ReadBlocks+0x92>
 800cd30:	f105 0804 	add.w	r8, r5, #4
 800cd34:	f105 0a24 	add.w	sl, r5, #36	; 0x24
 800cd38:	e000      	b.n	800cd3c <HAL_SD_ReadBlocks+0xc0>
          data = SDMMC_ReadFIFO(hsd->Instance);
 800cd3a:	6820      	ldr	r0, [r4, #0]
        for (count = 0U; count < 8U; count++)
 800cd3c:	f108 0804 	add.w	r8, r8, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 800cd40:	f001 fcaa 	bl	800e698 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cd44:	ea4f 2c10 	mov.w	ip, r0, lsr #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cd48:	0c01      	lsrs	r1, r0, #16
        for (count = 0U; count < 8U; count++)
 800cd4a:	45d0      	cmp	r8, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cd4c:	ea4f 6210 	mov.w	r2, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cd50:	f808 0c08 	strb.w	r0, [r8, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cd54:	f808 cc07 	strb.w	ip, [r8, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cd58:	f808 1c06 	strb.w	r1, [r8, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cd5c:	f808 2c05 	strb.w	r2, [r8, #-5]
        for (count = 0U; count < 8U; count++)
 800cd60:	d1eb      	bne.n	800cd3a <HAL_SD_ReadBlocks+0xbe>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800cd62:	f7fa fccb 	bl	80076fc <HAL_GetTick>
 800cd66:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd68:	1b80      	subs	r0, r0, r6
          tempbuff++;
 800cd6a:	3520      	adds	r5, #32
        dataremaining -= 32U;
 800cd6c:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800cd70:	4298      	cmp	r0, r3
 800cd72:	d3d2      	bcc.n	800cd1a <HAL_SD_ReadBlocks+0x9e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd74:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 800cd76:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd7a:	4842      	ldr	r0, [pc, #264]	; (800ce84 <HAL_SD_ReadBlocks+0x208>)
        hsd->State = HAL_SD_STATE_READY;
 800cd7c:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
 800cd7e:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd80:	6398      	str	r0, [r3, #56]	; 0x38
}
 800cd82:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cd84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd8a:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800cd8c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800cd90:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800cd92:	b007      	add	sp, #28
 800cd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cd98:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800cd9a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cd9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cda2:	6363      	str	r3, [r4, #52]	; 0x34
}
 800cda4:	4648      	mov	r0, r9
 800cda6:	b007      	add	sp, #28
 800cda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cdac:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cdae:	4651      	mov	r1, sl
 800cdb0:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cdb2:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cdb4:	f001 fd46 	bl	800e844 <SDMMC_CmdReadSingleBlock>
 800cdb8:	e7a4      	b.n	800cd04 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cdba:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800cdbc:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cdc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800cdc4:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cdc6:	6363      	str	r3, [r4, #52]	; 0x34
}
 800cdc8:	b007      	add	sp, #28
 800cdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cdce:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800cdd0:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cdd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cdd6:	6363      	str	r3, [r4, #52]	; 0x34
}
 800cdd8:	b007      	add	sp, #28
 800cdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cdde:	6823      	ldr	r3, [r4, #0]
 800cde0:	4a28      	ldr	r2, [pc, #160]	; (800ce84 <HAL_SD_ReadBlocks+0x208>)
 800cde2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cde4:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 800cde6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cde8:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 800cdea:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 800cdec:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800cdee:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800cdf2:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800cdf4:	e7d6      	b.n	800cda4 <HAL_SD_ReadBlocks+0x128>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cdf6:	68c3      	ldr	r3, [r0, #12]
 800cdf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdfc:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cdfe:	6820      	ldr	r0, [r4, #0]
 800ce00:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ce02:	05db      	lsls	r3, r3, #23
 800ce04:	d509      	bpl.n	800ce1a <HAL_SD_ReadBlocks+0x19e>
 800ce06:	2f01      	cmp	r7, #1
 800ce08:	d907      	bls.n	800ce1a <HAL_SD_ReadBlocks+0x19e>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800ce0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ce0c:	2b03      	cmp	r3, #3
 800ce0e:	d004      	beq.n	800ce1a <HAL_SD_ReadBlocks+0x19e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce10:	f001 ffb0 	bl	800ed74 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800ce14:	2800      	cmp	r0, #0
 800ce16:	d1e2      	bne.n	800cdde <HAL_SD_ReadBlocks+0x162>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ce18:	6820      	ldr	r0, [r4, #0]
 800ce1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ce1c:	f013 0308 	ands.w	r3, r3, #8
 800ce20:	d112      	bne.n	800ce48 <HAL_SD_ReadBlocks+0x1cc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ce22:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800ce24:	f012 0202 	ands.w	r2, r2, #2
 800ce28:	d11a      	bne.n	800ce60 <HAL_SD_ReadBlocks+0x1e4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ce2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ce2c:	f013 0320 	ands.w	r3, r3, #32
 800ce30:	d021      	beq.n	800ce76 <HAL_SD_ReadBlocks+0x1fa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce32:	4b14      	ldr	r3, [pc, #80]	; (800ce84 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800ce34:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce36:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ce38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce3a:	f043 0320 	orr.w	r3, r3, #32
 800ce3e:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ce40:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ce44:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800ce46:	e7ad      	b.n	800cda4 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce48:	4b0e      	ldr	r3, [pc, #56]	; (800ce84 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800ce4a:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce4c:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ce4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ce50:	f043 0308 	orr.w	r3, r3, #8
 800ce54:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ce56:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800ce58:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ce5c:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800ce5e:	e7a1      	b.n	800cda4 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce60:	4a08      	ldr	r2, [pc, #32]	; (800ce84 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800ce62:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce64:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ce66:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ce68:	f042 0202 	orr.w	r2, r2, #2
 800ce6c:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ce6e:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ce72:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800ce74:	e796      	b.n	800cda4 <HAL_SD_ReadBlocks+0x128>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ce76:	4904      	ldr	r1, [pc, #16]	; (800ce88 <HAL_SD_ReadBlocks+0x20c>)
    hsd->State = HAL_SD_STATE_READY;
 800ce78:	2201      	movs	r2, #1
    return HAL_OK;
 800ce7a:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ce7c:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ce7e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800ce82:	e78f      	b.n	800cda4 <HAL_SD_ReadBlocks+0x128>
 800ce84:	1fe00fff 	.word	0x1fe00fff
 800ce88:	18000f3a 	.word	0x18000f3a

0800ce8c <HAL_SD_WriteBlocks>:
{
 800ce8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce90:	460d      	mov	r5, r1
 800ce92:	b089      	sub	sp, #36	; 0x24
 800ce94:	4604      	mov	r4, r0
 800ce96:	4692      	mov	sl, r2
 800ce98:	461f      	mov	r7, r3
 800ce9a:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800ce9e:	f7fa fc2d 	bl	80076fc <HAL_GetTick>
  if (NULL == pData)
 800cea2:	2d00      	cmp	r5, #0
 800cea4:	d07c      	beq.n	800cfa0 <HAL_SD_WriteBlocks+0x114>
  if (hsd->State == HAL_SD_STATE_READY)
 800cea6:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	fa5f f983 	uxtb.w	r9, r3
 800ceb0:	d166      	bne.n	800cf80 <HAL_SD_WriteBlocks+0xf4>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ceb2:	eb0a 0307 	add.w	r3, sl, r7
 800ceb6:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ceb8:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ceba:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cebc:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cebe:	d879      	bhi.n	800cfb4 <HAL_SD_WriteBlocks+0x128>
    hsd->State = HAL_SD_STATE_BUSY;
 800cec0:	2303      	movs	r3, #3
 800cec2:	4606      	mov	r6, r0
 800cec4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 800cec8:	6823      	ldr	r3, [r4, #0]
 800ceca:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cecc:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cece:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ced0:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ced2:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800ced4:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ced8:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cedc:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 800cee2:	bf18      	it	ne
 800cee4:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cee8:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ceea:	027b      	lsls	r3, r7, #9
 800ceec:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ceee:	2390      	movs	r3, #144	; 0x90
 800cef0:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cef2:	f001 fbeb 	bl	800e6cc <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800cef6:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 800cef8:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cefa:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800cefc:	68d3      	ldr	r3, [r2, #12]
 800cefe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf02:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 800cf04:	d946      	bls.n	800cf94 <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800cf06:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cf08:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800cf0a:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cf0c:	f001 fe8c 	bl	800ec28 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 800cf10:	2800      	cmp	r0, #0
 800cf12:	d157      	bne.n	800cfc4 <HAL_SD_WriteBlocks+0x138>
    dataremaining = config.DataLength;
 800cf14:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800cf18:	e004      	b.n	800cf24 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800cf1a:	f7fa fbef 	bl	80076fc <HAL_GetTick>
 800cf1e:	1b80      	subs	r0, r0, r6
 800cf20:	4540      	cmp	r0, r8
 800cf22:	d21d      	bcs.n	800cf60 <HAL_SD_WriteBlocks+0xd4>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800cf24:	6820      	ldr	r0, [r4, #0]
 800cf26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cf28:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800cf2c:	d156      	bne.n	800cfdc <HAL_SD_WriteBlocks+0x150>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800cf2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cf30:	045a      	lsls	r2, r3, #17
 800cf32:	d5f2      	bpl.n	800cf1a <HAL_SD_WriteBlocks+0x8e>
 800cf34:	f1bb 0f1f 	cmp.w	fp, #31
 800cf38:	d9ef      	bls.n	800cf1a <HAL_SD_WriteBlocks+0x8e>
 800cf3a:	f105 0a20 	add.w	sl, r5, #32
 800cf3e:	e000      	b.n	800cf42 <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800cf40:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800cf42:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800cf46:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800cf48:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800cf4a:	f001 fba9 	bl	800e6a0 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800cf4e:	4555      	cmp	r5, sl
 800cf50:	d1f6      	bne.n	800cf40 <HAL_SD_WriteBlocks+0xb4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800cf52:	f7fa fbd3 	bl	80076fc <HAL_GetTick>
 800cf56:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
 800cf58:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800cf5c:	4540      	cmp	r0, r8
 800cf5e:	d3e1      	bcc.n	800cf24 <HAL_SD_WriteBlocks+0x98>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf60:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
 800cf62:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf66:	4841      	ldr	r0, [pc, #260]	; (800d06c <HAL_SD_WriteBlocks+0x1e0>)
        hsd->State = HAL_SD_STATE_READY;
 800cf68:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 800cf6a:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf6c:	6388      	str	r0, [r1, #56]	; 0x38
}
 800cf6e:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
 800cf70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf72:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800cf74:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800cf78:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800cf7a:	b009      	add	sp, #36	; 0x24
 800cf7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cf80:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800cf82:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cf86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cf8a:	6363      	str	r3, [r4, #52]	; 0x34
}
 800cf8c:	4648      	mov	r0, r9
 800cf8e:	b009      	add	sp, #36	; 0x24
 800cf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800cf94:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cf96:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800cf98:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cf9a:	f001 fd9f 	bl	800eadc <SDMMC_CmdWriteSingleBlock>
 800cf9e:	e7b7      	b.n	800cf10 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cfa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800cfa2:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cfa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800cfaa:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cfac:	6363      	str	r3, [r4, #52]	; 0x34
}
 800cfae:	b009      	add	sp, #36	; 0x24
 800cfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cfb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800cfb6:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cfb8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cfbc:	6363      	str	r3, [r4, #52]	; 0x34
}
 800cfbe:	b009      	add	sp, #36	; 0x24
 800cfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cfc4:	6823      	ldr	r3, [r4, #0]
 800cfc6:	4a29      	ldr	r2, [pc, #164]	; (800d06c <HAL_SD_WriteBlocks+0x1e0>)
 800cfc8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cfca:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 800cfcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cfce:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 800cfd0:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 800cfd2:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800cfd4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800cfd8:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800cfda:	e7d7      	b.n	800cf8c <HAL_SD_WriteBlocks+0x100>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cfdc:	68c3      	ldr	r3, [r0, #12]
 800cfde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfe2:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800cfe4:	6820      	ldr	r0, [r4, #0]
 800cfe6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800cfe8:	05db      	lsls	r3, r3, #23
 800cfea:	d509      	bpl.n	800d000 <HAL_SD_WriteBlocks+0x174>
 800cfec:	2f01      	cmp	r7, #1
 800cfee:	d907      	bls.n	800d000 <HAL_SD_WriteBlocks+0x174>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800cff0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cff2:	2b03      	cmp	r3, #3
 800cff4:	d004      	beq.n	800d000 <HAL_SD_WriteBlocks+0x174>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cff6:	f001 febd 	bl	800ed74 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800cffa:	2800      	cmp	r0, #0
 800cffc:	d1e2      	bne.n	800cfc4 <HAL_SD_WriteBlocks+0x138>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800cffe:	6820      	ldr	r0, [r4, #0]
 800d000:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d002:	f013 0308 	ands.w	r3, r3, #8
 800d006:	d112      	bne.n	800d02e <HAL_SD_WriteBlocks+0x1a2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d008:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800d00a:	f012 0202 	ands.w	r2, r2, #2
 800d00e:	d11a      	bne.n	800d046 <HAL_SD_WriteBlocks+0x1ba>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d010:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d012:	f013 0310 	ands.w	r3, r3, #16
 800d016:	d021      	beq.n	800d05c <HAL_SD_WriteBlocks+0x1d0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d018:	4b14      	ldr	r3, [pc, #80]	; (800d06c <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800d01a:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d01c:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d01e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d020:	f043 0310 	orr.w	r3, r3, #16
 800d024:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d026:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d02a:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800d02c:	e7ae      	b.n	800cf8c <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d02e:	4b0f      	ldr	r3, [pc, #60]	; (800d06c <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800d030:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d032:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d034:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d036:	f043 0308 	orr.w	r3, r3, #8
 800d03a:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d03c:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800d03e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d042:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800d044:	e7a2      	b.n	800cf8c <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d046:	4a09      	ldr	r2, [pc, #36]	; (800d06c <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800d048:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d04a:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d04c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d04e:	f042 0202 	orr.w	r2, r2, #2
 800d052:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d054:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d058:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800d05a:	e797      	b.n	800cf8c <HAL_SD_WriteBlocks+0x100>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d05c:	4904      	ldr	r1, [pc, #16]	; (800d070 <HAL_SD_WriteBlocks+0x1e4>)
    hsd->State = HAL_SD_STATE_READY;
 800d05e:	2201      	movs	r2, #1
    return HAL_OK;
 800d060:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d062:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d064:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800d068:	e790      	b.n	800cf8c <HAL_SD_WriteBlocks+0x100>
 800d06a:	bf00      	nop
 800d06c:	1fe00fff 	.word	0x1fe00fff
 800d070:	18000f3a 	.word	0x18000f3a

0800d074 <HAL_SD_ErrorCallback>:
 800d074:	4770      	bx	lr
 800d076:	bf00      	nop

0800d078 <HAL_SD_GetCardCSD>:
{
 800d078:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d07a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d07c:	f04f 0c00 	mov.w	ip, #0
{
 800d080:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d082:	0f92      	lsrs	r2, r2, #30
 800d084:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d086:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800d088:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800d08c:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d08e:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
 800d092:	f002 0203 	and.w	r2, r2, #3
 800d096:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d098:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
 800d09c:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d09e:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 800d0a2:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d0a4:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 800d0a8:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d0aa:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800d0ac:	0d12      	lsrs	r2, r2, #20
 800d0ae:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d0b0:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800d0b4:	f002 020f 	and.w	r2, r2, #15
 800d0b8:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d0ba:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800d0bc:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800d0c0:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d0c2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800d0c4:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800d0c8:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d0ca:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800d0cc:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800d0d0:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d0d2:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800d0d4:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800d0d8:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d0da:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 800d0de:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800d0e0:	2a00      	cmp	r2, #0
 800d0e2:	f040 808a 	bne.w	800d1fa <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d0e6:	f640 72fc 	movw	r2, #4092	; 0xffc
 800d0ea:	e9d0 4018 	ldrd	r4, r0, [r0, #96]	; 0x60
 800d0ee:	ea02 0284 	and.w	r2, r2, r4, lsl #2
 800d0f2:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800d0f6:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d0f8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d0fa:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 800d0fe:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d100:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800d104:	f002 0207 	and.w	r2, r2, #7
 800d108:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d10a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d10c:	f3c2 5242 	ubfx	r2, r2, #21, #3
 800d110:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d112:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d114:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800d118:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d11a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d11c:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 800d120:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d122:	690a      	ldr	r2, [r1, #16]
 800d124:	3201      	adds	r2, #1
 800d126:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d128:	7e08      	ldrb	r0, [r1, #24]
 800d12a:	f000 0007 	and.w	r0, r0, #7
 800d12e:	3002      	adds	r0, #2
 800d130:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d132:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d134:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d136:	f891 c008 	ldrb.w	ip, [r1, #8]
 800d13a:	f00c 0c0f 	and.w	ip, ip, #15
 800d13e:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d142:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d146:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = 512U;
 800d148:	f44f 7000 	mov.w	r0, #512	; 0x200
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d14c:	fb02 f20c 	mul.w	r2, r2, ip
    hsd->SdCard.LogBlockSize = 512U;
 800d150:	e9c3 2014 	strd	r2, r0, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d154:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  pCSD->Reserved3 = 0;
 800d156:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
 800d158:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d15c:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800d160:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d162:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d164:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 800d168:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d16a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d16c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d170:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d172:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d174:	0fd2      	lsrs	r2, r2, #31
 800d176:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d178:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d17a:	f3c2 7241 	ubfx	r2, r2, #29, #2
 800d17e:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d180:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d182:	f3c2 6282 	ubfx	r2, r2, #26, #3
 800d186:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d188:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d18a:	f3c2 5283 	ubfx	r2, r2, #22, #4
 800d18e:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d190:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d192:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800d196:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 800d19a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d19e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d1a2:	ea02 020c 	and.w	r2, r2, ip
 800d1a6:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d1aa:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d1ac:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800d1b0:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d1b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d1b6:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800d1ba:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d1be:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d1c0:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800d1c4:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d1c8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d1ca:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800d1ce:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d1d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d1d4:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800d1d8:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d1dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800d1de:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800d1e2:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d1e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1e8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800d1ec:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800d1f0:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
 800d1f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1f8:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d1fa:	2a01      	cmp	r2, #1
 800d1fc:	d112      	bne.n	800d224 <HAL_SD_GetCardCSD+0x1ac>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d1fe:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800d200:	f8b0 c066 	ldrh.w	ip, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
 800d204:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d208:	0412      	lsls	r2, r2, #16
 800d20a:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800d20e:	ea42 020c 	orr.w	r2, r2, ip
 800d212:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d214:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 800d216:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d218:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d21a:	6558      	str	r0, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d21c:	0292      	lsls	r2, r2, #10
 800d21e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d220:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d222:	e797      	b.n	800d154 <HAL_SD_GetCardCSD+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d224:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
 800d226:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d228:	4805      	ldr	r0, [pc, #20]	; (800d240 <HAL_SD_GetCardCSD+0x1c8>)
 800d22a:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 800d22c:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d22e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d230:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d234:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d236:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
 800d23a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d23e:	4770      	bx	lr
 800d240:	1fe00fff 	.word	0x1fe00fff

0800d244 <HAL_SD_InitCard>:
{
 800d244:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d246:	2200      	movs	r2, #0
{
 800d248:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d24a:	2300      	movs	r3, #0
{
 800d24c:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d24e:	2100      	movs	r1, #0
 800d250:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d254:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d258:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d25c:	f7fe fdf4 	bl	800be48 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800d260:	b940      	cbnz	r0, 800d274 <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
 800d262:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d264:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 800d268:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d26c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800d26e:	4630      	mov	r0, r6
 800d270:	b015      	add	sp, #84	; 0x54
 800d272:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d274:	0a06      	lsrs	r6, r0, #8
 800d276:	4b8f      	ldr	r3, [pc, #572]	; (800d4b4 <HAL_SD_InitCard+0x270>)
  (void)SDMMC_Init(hsd->Instance, Init);
 800d278:	aa07      	add	r2, sp, #28
 800d27a:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d27c:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 800d280:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d282:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 800d284:	9608      	str	r6, [sp, #32]
 800d286:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d28a:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d28e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d290:	6820      	ldr	r0, [r4, #0]
 800d292:	f001 f9e5 	bl	800e660 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d296:	6820      	ldr	r0, [r4, #0]
 800d298:	f001 fa08 	bl	800e6ac <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 800d29c:	4b86      	ldr	r3, [pc, #536]	; (800d4b8 <HAL_SD_InitCard+0x274>)
 800d29e:	429d      	cmp	r5, r3
 800d2a0:	d902      	bls.n	800d2a8 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d2a2:	0076      	lsls	r6, r6, #1
 800d2a4:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d2a8:	4884      	ldr	r0, [pc, #528]	; (800d4bc <HAL_SD_InitCard+0x278>)
 800d2aa:	fbb0 f0f5 	udiv	r0, r0, r5
 800d2ae:	3001      	adds	r0, #1
 800d2b0:	f7fa fa2a 	bl	8007708 <HAL_Delay>
  __IO uint32_t count = 0U;
 800d2b4:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d2b6:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 800d2b8:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d2ba:	f001 ff0b 	bl	800f0d4 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2be:	4605      	mov	r5, r0
 800d2c0:	b140      	cbz	r0, 800d2d4 <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 800d2c2:	2601      	movs	r6, #1
 800d2c4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
 800d2c8:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800d2ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d2cc:	431d      	orrs	r5, r3
 800d2ce:	6365      	str	r5, [r4, #52]	; 0x34
}
 800d2d0:	b015      	add	sp, #84	; 0x54
 800d2d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d2d4:	6820      	ldr	r0, [r4, #0]
 800d2d6:	f001 ff29 	bl	800f12c <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d2da:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800d2de:	d06c      	beq.n	800d3ba <HAL_SD_InitCard+0x176>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d2e4:	2100      	movs	r1, #0
 800d2e6:	6820      	ldr	r0, [r4, #0]
 800d2e8:	f001 ff60 	bl	800f1ac <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800d2ec:	bb08      	cbnz	r0, 800d332 <HAL_SD_InitCard+0xee>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d2ee:	9b03      	ldr	r3, [sp, #12]
 800d2f0:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800d2f4:	42b3      	cmp	r3, r6
 800d2f6:	f200 80d6 	bhi.w	800d4a6 <HAL_SD_InitCard+0x262>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d2fa:	4f71      	ldr	r7, [pc, #452]	; (800d4c0 <HAL_SD_InitCard+0x27c>)
 800d2fc:	e00b      	b.n	800d316 <HAL_SD_InitCard+0xd2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d2fe:	6820      	ldr	r0, [r4, #0]
 800d300:	f001 f9e0 	bl	800e6c4 <SDMMC_GetResponse>
    count++;
 800d304:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d306:	2800      	cmp	r0, #0
    count++;
 800d308:	f103 0301 	add.w	r3, r3, #1
 800d30c:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d30e:	9b03      	ldr	r3, [sp, #12]
 800d310:	db12      	blt.n	800d338 <HAL_SD_InitCard+0xf4>
 800d312:	42b3      	cmp	r3, r6
 800d314:	d810      	bhi.n	800d338 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d316:	2100      	movs	r1, #0
 800d318:	6820      	ldr	r0, [r4, #0]
 800d31a:	f001 ff47 	bl	800f1ac <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d31e:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 800d320:	4605      	mov	r5, r0
 800d322:	2800      	cmp	r0, #0
 800d324:	d1cd      	bne.n	800d2c2 <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d326:	6820      	ldr	r0, [r4, #0]
 800d328:	f001 ffe6 	bl	800f2f8 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800d32c:	4601      	mov	r1, r0
 800d32e:	2800      	cmp	r0, #0
 800d330:	d0e5      	beq.n	800d2fe <HAL_SD_InitCard+0xba>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d332:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800d336:	e7c4      	b.n	800d2c2 <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d338:	9a03      	ldr	r2, [sp, #12]
 800d33a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800d33e:	429a      	cmp	r2, r3
 800d340:	f200 80ab 	bhi.w	800d49a <HAL_SD_InitCard+0x256>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d344:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 800d348:	d043      	beq.n	800d3d2 <HAL_SD_InitCard+0x18e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d34a:	2301      	movs	r3, #1
 800d34c:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
 800d34e:	2300      	movs	r3, #0
 800d350:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 800d354:	f7fa f9d2 	bl	80076fc <HAL_GetTick>
 800d358:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d35a:	6820      	ldr	r0, [r4, #0]
 800d35c:	f001 f9ae 	bl	800e6bc <SDMMC_GetPowerState>
 800d360:	2800      	cmp	r0, #0
 800d362:	d038      	beq.n	800d3d6 <HAL_SD_InitCard+0x192>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d366:	2b03      	cmp	r3, #3
 800d368:	d140      	bne.n	800d3ec <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d36a:	2104      	movs	r1, #4
 800d36c:	6820      	ldr	r0, [r4, #0]
 800d36e:	f001 f9a9 	bl	800e6c4 <SDMMC_GetResponse>
 800d372:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d374:	a909      	add	r1, sp, #36	; 0x24
 800d376:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d378:	0d1b      	lsrs	r3, r3, #20
 800d37a:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d37c:	f7ff fe7c 	bl	800d078 <HAL_SD_GetCardCSD>
 800d380:	4606      	mov	r6, r0
 800d382:	2800      	cmp	r0, #0
 800d384:	f040 808c 	bne.w	800d4a0 <HAL_SD_InitCard+0x25c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d388:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d38a:	6820      	ldr	r0, [r4, #0]
 800d38c:	0409      	lsls	r1, r1, #16
 800d38e:	f001 fdfb 	bl	800ef88 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d392:	bb10      	cbnz	r0, 800d3da <HAL_SD_InitCard+0x196>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d394:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d398:	6820      	ldr	r0, [r4, #0]
 800d39a:	f001 f9ad 	bl	800e6f8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d39e:	2800      	cmp	r0, #0
 800d3a0:	f43f af65 	beq.w	800d26e <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3a4:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800d3a6:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3a8:	4946      	ldr	r1, [pc, #280]	; (800d4c4 <HAL_SD_InitCard+0x280>)
    return HAL_ERROR;
 800d3aa:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3ac:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d3ae:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d3b0:	4310      	orrs	r0, r2
 800d3b2:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d3b4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
 800d3b8:	e759      	b.n	800d26e <HAL_SD_InitCard+0x2a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d3ba:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d3bc:	6820      	ldr	r0, [r4, #0]
 800d3be:	f001 fe89 	bl	800f0d4 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3c2:	4605      	mov	r5, r0
 800d3c4:	2800      	cmp	r0, #0
 800d3c6:	f47f af7c 	bne.w	800d2c2 <HAL_SD_InitCard+0x7e>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d3ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d18e      	bne.n	800d2ee <HAL_SD_InitCard+0xaa>
 800d3d0:	e788      	b.n	800d2e4 <HAL_SD_InitCard+0xa0>
  hsd->SdCard.CardType = CARD_SDSC;
 800d3d2:	63a0      	str	r0, [r4, #56]	; 0x38
 800d3d4:	e7bb      	b.n	800d34e <HAL_SD_InitCard+0x10a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d3d6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800d3da:	2601      	movs	r6, #1
 800d3dc:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d3e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3e2:	4318      	orrs	r0, r3
 800d3e4:	6360      	str	r0, [r4, #52]	; 0x34
}
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	b015      	add	sp, #84	; 0x54
 800d3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d3ec:	6820      	ldr	r0, [r4, #0]
 800d3ee:	f002 f90b 	bl	800f608 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3f2:	2800      	cmp	r0, #0
 800d3f4:	d1f1      	bne.n	800d3da <HAL_SD_InitCard+0x196>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d3f6:	4601      	mov	r1, r0
 800d3f8:	6820      	ldr	r0, [r4, #0]
 800d3fa:	f001 f963 	bl	800e6c4 <SDMMC_GetResponse>
 800d3fe:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d400:	2104      	movs	r1, #4
 800d402:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d404:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d406:	f001 f95d 	bl	800e6c4 <SDMMC_GetResponse>
 800d40a:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d40c:	2108      	movs	r1, #8
 800d40e:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d410:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d412:	f001 f957 	bl	800e6c4 <SDMMC_GetResponse>
 800d416:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d418:	210c      	movs	r1, #12
 800d41a:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d41c:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d41e:	f001 f951 	bl	800e6c4 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d422:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d424:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d426:	2b03      	cmp	r3, #3
 800d428:	d09f      	beq.n	800d36a <HAL_SD_InitCard+0x126>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d42a:	f241 3687 	movw	r6, #4999	; 0x1387
 800d42e:	e009      	b.n	800d444 <HAL_SD_InitCard+0x200>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d430:	6820      	ldr	r0, [r4, #0]
 800d432:	f002 f967 	bl	800f704 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 800d436:	2800      	cmp	r0, #0
 800d438:	d1cf      	bne.n	800d3da <HAL_SD_InitCard+0x196>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d43a:	f7fa f95f 	bl	80076fc <HAL_GetTick>
 800d43e:	1b43      	subs	r3, r0, r5
 800d440:	42b3      	cmp	r3, r6
 800d442:	d827      	bhi.n	800d494 <HAL_SD_InitCard+0x250>
    while (sd_rca == 0U)
 800d444:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d448:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d0ef      	beq.n	800d430 <HAL_SD_InitCard+0x1ec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d450:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800d452:	2a03      	cmp	r2, #3
 800d454:	d089      	beq.n	800d36a <HAL_SD_InitCard+0x126>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d456:	0419      	lsls	r1, r3, #16
 800d458:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800d45a:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d45c:	f002 f912 	bl	800f684 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800d460:	2800      	cmp	r0, #0
 800d462:	d1ba      	bne.n	800d3da <HAL_SD_InitCard+0x196>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d464:	4601      	mov	r1, r0
 800d466:	6820      	ldr	r0, [r4, #0]
 800d468:	f001 f92c 	bl	800e6c4 <SDMMC_GetResponse>
 800d46c:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d46e:	2104      	movs	r1, #4
 800d470:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d472:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d474:	f001 f926 	bl	800e6c4 <SDMMC_GetResponse>
 800d478:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d47a:	2108      	movs	r1, #8
 800d47c:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d47e:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d480:	f001 f920 	bl	800e6c4 <SDMMC_GetResponse>
 800d484:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d486:	210c      	movs	r1, #12
 800d488:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d48a:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d48c:	f001 f91a 	bl	800e6c4 <SDMMC_GetResponse>
 800d490:	66a0      	str	r0, [r4, #104]	; 0x68
 800d492:	e76a      	b.n	800d36a <HAL_SD_InitCard+0x126>
        return HAL_SD_ERROR_TIMEOUT;
 800d494:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 800d498:	e79f      	b.n	800d3da <HAL_SD_InitCard+0x196>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d49a:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800d49e:	e710      	b.n	800d2c2 <HAL_SD_InitCard+0x7e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4a0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800d4a4:	e799      	b.n	800d3da <HAL_SD_InitCard+0x196>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d4a6:	9b03      	ldr	r3, [sp, #12]
 800d4a8:	42b3      	cmp	r3, r6
 800d4aa:	d8f6      	bhi.n	800d49a <HAL_SD_InitCard+0x256>
  hsd->SdCard.CardType = CARD_SDSC;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d4b0:	e74d      	b.n	800d34e <HAL_SD_InitCard+0x10a>
 800d4b2:	bf00      	nop
 800d4b4:	014f8b59 	.word	0x014f8b59
 800d4b8:	000c34ff 	.word	0x000c34ff
 800d4bc:	00012110 	.word	0x00012110
 800d4c0:	c1100000 	.word	0xc1100000
 800d4c4:	1fe00fff 	.word	0x1fe00fff

0800d4c8 <HAL_SD_GetCardInfo>:
{
 800d4c8:	4603      	mov	r3, r0
}
 800d4ca:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d4cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4ce:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d4d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4d2:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d4d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d4d6:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d4d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4da:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d4dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d4de:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d4e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d4e2:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d4e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4e6:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d4e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ea:	61cb      	str	r3, [r1, #28]
}
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop

0800d4f0 <HAL_SD_ConfigWideBusOperation>:
{
 800d4f0:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800d4f2:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d4f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 800d4f6:	b089      	sub	sp, #36	; 0x24
 800d4f8:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d4fa:	4293      	cmp	r3, r2
{
 800d4fc:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800d4fe:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d502:	d033      	beq.n	800d56c <HAL_SD_ConfigWideBusOperation+0x7c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d504:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800d508:	d030      	beq.n	800d56c <HAL_SD_ConfigWideBusOperation+0x7c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d50a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800d50e:	f000 8084 	beq.w	800d61a <HAL_SD_ConfigWideBusOperation+0x12a>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d512:	2900      	cmp	r1, #0
 800d514:	d062      	beq.n	800d5dc <HAL_SD_ConfigWideBusOperation+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d516:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d518:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d51c:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d51e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d520:	bb5b      	cbnz	r3, 800d57a <HAL_SD_ConfigWideBusOperation+0x8a>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d522:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d526:	2100      	movs	r1, #0
 800d528:	f7fe fc8e 	bl	800be48 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800d52c:	2800      	cmp	r0, #0
 800d52e:	d03b      	beq.n	800d5a8 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d530:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d532:	4b55      	ldr	r3, [pc, #340]	; (800d688 <HAL_SD_ConfigWideBusOperation+0x198>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d534:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 800d536:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d538:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d53a:	fba3 5300 	umull	r5, r3, r3, r0
 800d53e:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d540:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d542:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d546:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d548:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d54c:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d54e:	d238      	bcs.n	800d5c2 <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d550:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d552:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800d556:	d034      	beq.n	800d5c2 <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d558:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800d55c:	d07f      	beq.n	800d65e <HAL_SD_ConfigWideBusOperation+0x16e>
        if (hsd->Init.ClockDiv == 0U)
 800d55e:	bb4a      	cbnz	r2, 800d5b4 <HAL_SD_ConfigWideBusOperation+0xc4>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d560:	4b4a      	ldr	r3, [pc, #296]	; (800d68c <HAL_SD_ConfigWideBusOperation+0x19c>)
 800d562:	4298      	cmp	r0, r3
 800d564:	f240 8085 	bls.w	800d672 <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d568:	9506      	str	r5, [sp, #24]
 800d56a:	e02b      	b.n	800d5c4 <HAL_SD_ConfigWideBusOperation+0xd4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d56c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d56e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d572:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d574:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d576:	2b00      	cmp	r3, #0
 800d578:	d0d3      	beq.n	800d522 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d57a:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800d57c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d57e:	4a44      	ldr	r2, [pc, #272]	; (800d690 <HAL_SD_ConfigWideBusOperation+0x1a0>)
 800d580:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d582:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d586:	6820      	ldr	r0, [r4, #0]
 800d588:	f001 f8b6 	bl	800e6f8 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d58c:	b130      	cbz	r0, 800d59c <HAL_SD_ConfigWideBusOperation+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d58e:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800d590:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d592:	4a3f      	ldr	r2, [pc, #252]	; (800d690 <HAL_SD_ConfigWideBusOperation+0x1a0>)
 800d594:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d596:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d598:	4318      	orrs	r0, r3
 800d59a:	6360      	str	r0, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
 800d59c:	2301      	movs	r3, #1
}
 800d59e:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800d5a0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800d5a4:	b009      	add	sp, #36	; 0x24
 800d5a6:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d5a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800d5aa:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d5ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d5b0:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800d5b2:	e7e6      	b.n	800d582 <HAL_SD_ConfigWideBusOperation+0x92>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d5b4:	0053      	lsls	r3, r2, #1
 800d5b6:	fbb0 f0f3 	udiv	r0, r0, r3
 800d5ba:	4b34      	ldr	r3, [pc, #208]	; (800d68c <HAL_SD_ConfigWideBusOperation+0x19c>)
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d5bc:	4298      	cmp	r0, r3
 800d5be:	bf88      	it	hi
 800d5c0:	462a      	movhi	r2, r5
 800d5c2:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800d5c4:	aa05      	add	r2, sp, #20
 800d5c6:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800d5c8:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 800d5ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d5ce:	e88d 0003 	stmia.w	sp, {r0, r1}
 800d5d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d5d4:	6820      	ldr	r0, [r4, #0]
 800d5d6:	f001 f843 	bl	800e660 <SDMMC_Init>
 800d5da:	e7d2      	b.n	800d582 <HAL_SD_ConfigWideBusOperation+0x92>
  uint32_t scr[2U] = {0UL, 0UL};
 800d5dc:	2200      	movs	r2, #0
 800d5de:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d5e0:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800d5e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d5e6:	f001 f86d 	bl	800e6c4 <SDMMC_GetResponse>
 800d5ea:	0182      	lsls	r2, r0, #6
 800d5ec:	d434      	bmi.n	800d658 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
 800d5ee:	a902      	add	r1, sp, #8
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	f7ff fa09 	bl	800ca08 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5f6:	b960      	cbnz	r0, 800d612 <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d5f8:	9b03      	ldr	r3, [sp, #12]
 800d5fa:	03db      	lsls	r3, r3, #15
 800d5fc:	d536      	bpl.n	800d66c <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d5fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d600:	6820      	ldr	r0, [r4, #0]
 800d602:	0409      	lsls	r1, r1, #16
 800d604:	f001 fdd2 	bl	800f1ac <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800d608:	b918      	cbnz	r0, 800d612 <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d60a:	4601      	mov	r1, r0
 800d60c:	6820      	ldr	r0, [r4, #0]
 800d60e:	f001 fead 	bl	800f36c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800d612:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d614:	4318      	orrs	r0, r3
 800d616:	6360      	str	r0, [r4, #52]	; 0x34
 800d618:	e7ac      	b.n	800d574 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0UL, 0UL};
 800d61a:	2200      	movs	r2, #0
 800d61c:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d61e:	2100      	movs	r1, #0
 800d620:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800d622:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d626:	f001 f84d 	bl	800e6c4 <SDMMC_GetResponse>
 800d62a:	0180      	lsls	r0, r0, #6
 800d62c:	d414      	bmi.n	800d658 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
 800d62e:	a902      	add	r1, sp, #8
 800d630:	4620      	mov	r0, r4
 800d632:	f7ff f9e9 	bl	800ca08 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d636:	2800      	cmp	r0, #0
 800d638:	d1eb      	bne.n	800d612 <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d63a:	9b03      	ldr	r3, [sp, #12]
 800d63c:	0359      	lsls	r1, r3, #13
 800d63e:	d515      	bpl.n	800d66c <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d640:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d642:	6820      	ldr	r0, [r4, #0]
 800d644:	0409      	lsls	r1, r1, #16
 800d646:	f001 fdb1 	bl	800f1ac <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800d64a:	2800      	cmp	r0, #0
 800d64c:	d1e1      	bne.n	800d612 <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d64e:	2102      	movs	r1, #2
 800d650:	6820      	ldr	r0, [r4, #0]
 800d652:	f001 fe8b 	bl	800f36c <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800d656:	e7dc      	b.n	800d612 <HAL_SD_ConfigWideBusOperation+0x122>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d658:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d65c:	e7d9      	b.n	800d612 <HAL_SD_ConfigWideBusOperation+0x122>
        if (hsd->Init.ClockDiv == 0U)
 800d65e:	b95a      	cbnz	r2, 800d678 <HAL_SD_ConfigWideBusOperation+0x188>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d660:	4a0c      	ldr	r2, [pc, #48]	; (800d694 <HAL_SD_ConfigWideBusOperation+0x1a4>)
 800d662:	4290      	cmp	r0, r2
 800d664:	d905      	bls.n	800d672 <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d666:	0e5b      	lsrs	r3, r3, #25
 800d668:	9306      	str	r3, [sp, #24]
 800d66a:	e7ab      	b.n	800d5c4 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d66c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800d670:	e7cf      	b.n	800d612 <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d672:	2300      	movs	r3, #0
 800d674:	9306      	str	r3, [sp, #24]
 800d676:	e7a5      	b.n	800d5c4 <HAL_SD_ConfigWideBusOperation+0xd4>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d678:	0051      	lsls	r1, r2, #1
 800d67a:	fbb0 f0f1 	udiv	r0, r0, r1
 800d67e:	4905      	ldr	r1, [pc, #20]	; (800d694 <HAL_SD_ConfigWideBusOperation+0x1a4>)
 800d680:	4288      	cmp	r0, r1
 800d682:	d99e      	bls.n	800d5c2 <HAL_SD_ConfigWideBusOperation+0xd2>
 800d684:	e7ef      	b.n	800d666 <HAL_SD_ConfigWideBusOperation+0x176>
 800d686:	bf00      	nop
 800d688:	55e63b89 	.word	0x55e63b89
 800d68c:	017d7840 	.word	0x017d7840
 800d690:	1fe00fff 	.word	0x1fe00fff
 800d694:	02faf080 	.word	0x02faf080

0800d698 <HAL_SD_Init>:
{
 800d698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d69a:	b087      	sub	sp, #28
  if (hsd == NULL)
 800d69c:	2800      	cmp	r0, #0
 800d69e:	d044      	beq.n	800d72a <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_RESET)
 800d6a0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800d6a4:	4604      	mov	r4, r0
 800d6a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d041      	beq.n	800d732 <HAL_SD_Init+0x9a>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d6ae:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d6b0:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d6b2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d6b6:	f7ff fdc5 	bl	800d244 <HAL_SD_InitCard>
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d135      	bne.n	800d72a <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_BUSY)
 800d6be:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800d6c2:	2b03      	cmp	r3, #3
 800d6c4:	d031      	beq.n	800d72a <HAL_SD_Init+0x92>
 800d6c6:	a901      	add	r1, sp, #4
 800d6c8:	4620      	mov	r0, r4
 800d6ca:	f7ff fa0f 	bl	800caec <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d6ce:	bb60      	cbnz	r0, 800d72a <HAL_SD_Init+0x92>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d6d0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800d6d2:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d6d6:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d6d8:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800d6dc:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d6de:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d6e0:	d02b      	beq.n	800d73a <HAL_SD_Init+0xa2>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d6e2:	65a0      	str	r0, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d6e4:	68e1      	ldr	r1, [r4, #12]
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f7ff ff02 	bl	800d4f0 <HAL_SD_ConfigWideBusOperation>
 800d6ec:	4606      	mov	r6, r0
 800d6ee:	b9e0      	cbnz	r0, 800d72a <HAL_SD_Init+0x92>
  tickstart = HAL_GetTick();
 800d6f0:	f7fa f804 	bl	80076fc <HAL_GetTick>
 800d6f4:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d6f6:	e00c      	b.n	800d712 <HAL_SD_Init+0x7a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d6f8:	6820      	ldr	r0, [r4, #0]
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	f000 ffe2 	bl	800e6c4 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d700:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d704:	2804      	cmp	r0, #4
 800d706:	d020      	beq.n	800d74a <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d708:	f7f9 fff8 	bl	80076fc <HAL_GetTick>
 800d70c:	1bc3      	subs	r3, r0, r7
 800d70e:	3301      	adds	r3, #1
 800d710:	d021      	beq.n	800d756 <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d712:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d714:	6820      	ldr	r0, [r4, #0]
 800d716:	0409      	lsls	r1, r1, #16
 800d718:	f002 f84c 	bl	800f7b4 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d71c:	4605      	mov	r5, r0
 800d71e:	2800      	cmp	r0, #0
 800d720:	d0ea      	beq.n	800d6f8 <HAL_SD_Init+0x60>
    hsd->ErrorCode |= errorstate;
 800d722:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d724:	4303      	orrs	r3, r0
 800d726:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
 800d728:	e7ee      	b.n	800d708 <HAL_SD_Init+0x70>
    return HAL_ERROR;
 800d72a:	2601      	movs	r6, #1
}
 800d72c:	4630      	mov	r0, r6
 800d72e:	b007      	add	sp, #28
 800d730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 800d732:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 800d734:	f7f9 fc26 	bl	8006f84 <HAL_SD_MspInit>
 800d738:	e7b9      	b.n	800d6ae <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d73a:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d73c:	bf14      	ite	ne
 800d73e:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d742:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800d746:	65a3      	str	r3, [r4, #88]	; 0x58
 800d748:	e7cc      	b.n	800d6e4 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
 800d74a:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d74c:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d74e:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800d750:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800d754:	e7ea      	b.n	800d72c <HAL_SD_Init+0x94>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d756:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 800d75a:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800d75c:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d75e:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d760:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800d764:	e7e2      	b.n	800d72c <HAL_SD_Init+0x94>
 800d766:	bf00      	nop

0800d768 <HAL_SD_GetCardState>:
{
 800d768:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d76a:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 800d76c:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d76e:	6800      	ldr	r0, [r0, #0]
 800d770:	0409      	lsls	r1, r1, #16
 800d772:	f002 f81f 	bl	800f7b4 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800d776:	4601      	mov	r1, r0
 800d778:	b120      	cbz	r0, 800d784 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800d77a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d77c:	2000      	movs	r0, #0
 800d77e:	4319      	orrs	r1, r3
 800d780:	6361      	str	r1, [r4, #52]	; 0x34
}
 800d782:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d784:	6820      	ldr	r0, [r4, #0]
 800d786:	f000 ff9d 	bl	800e6c4 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d78a:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800d78e:	bd10      	pop	{r4, pc}

0800d790 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop

0800d794 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800d794:	4770      	bx	lr
 800d796:	bf00      	nop

0800d798 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop

0800d79c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop

0800d7a0 <HAL_SD_IRQHandler>:
{
 800d7a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7a2:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d7a4:	6800      	ldr	r0, [r0, #0]
{
 800d7a6:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 800d7a8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d7aa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d7ac:	041b      	lsls	r3, r3, #16
 800d7ae:	d502      	bpl.n	800d7b6 <HAL_SD_IRQHandler+0x16>
 800d7b0:	072f      	lsls	r7, r5, #28
 800d7b2:	f100 80b7 	bmi.w	800d924 <HAL_SD_IRQHandler+0x184>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d7b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d7b8:	05de      	lsls	r6, r3, #23
 800d7ba:	d529      	bpl.n	800d810 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d7bc:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d7c0:	4b99      	ldr	r3, [pc, #612]	; (800da28 <HAL_SD_IRQHandler+0x288>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d7c2:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d7c4:	6822      	ldr	r2, [r4, #0]
 800d7c6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800d7c8:	400b      	ands	r3, r1
 800d7ca:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d7cc:	6822      	ldr	r2, [r4, #0]
 800d7ce:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800d7d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d7d4:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d7d6:	6822      	ldr	r2, [r4, #0]
 800d7d8:	68d3      	ldr	r3, [r2, #12]
 800d7da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7de:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 800d7e0:	f015 0308 	ands.w	r3, r5, #8
 800d7e4:	d076      	beq.n	800d8d4 <HAL_SD_IRQHandler+0x134>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d7e6:	f015 0f22 	tst.w	r5, #34	; 0x22
 800d7ea:	f040 80e9 	bne.w	800d9c0 <HAL_SD_IRQHandler+0x220>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7ee:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 800d7f0:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7f2:	498e      	ldr	r1, [pc, #568]	; (800da2c <HAL_SD_IRQHandler+0x28c>)
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d7f4:	07a8      	lsls	r0, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7f6:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 800d7f8:	f04f 0300 	mov.w	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800d7fc:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d800:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d802:	f000 80b0 	beq.w	800d966 <HAL_SD_IRQHandler+0x1c6>
        HAL_SD_RxCpltCallback(hsd);
 800d806:	4620      	mov	r0, r4
 800d808:	f002 f96e 	bl	800fae8 <HAL_SD_RxCpltCallback>
}
 800d80c:	b003      	add	sp, #12
 800d80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d810:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d812:	045b      	lsls	r3, r3, #17
 800d814:	d502      	bpl.n	800d81c <HAL_SD_IRQHandler+0x7c>
 800d816:	072f      	lsls	r7, r5, #28
 800d818:	f100 80aa 	bmi.w	800d970 <HAL_SD_IRQHandler+0x1d0>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d81c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d81e:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d822:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d824:	d06e      	beq.n	800d904 <HAL_SD_IRQHandler+0x164>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d826:	079e      	lsls	r6, r3, #30
 800d828:	d503      	bpl.n	800d832 <HAL_SD_IRQHandler+0x92>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d82a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d82c:	f043 0302 	orr.w	r3, r3, #2
 800d830:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d832:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d834:	0719      	lsls	r1, r3, #28
 800d836:	d503      	bpl.n	800d840 <HAL_SD_IRQHandler+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d83a:	f043 0308 	orr.w	r3, r3, #8
 800d83e:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d840:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d842:	069a      	lsls	r2, r3, #26
 800d844:	d503      	bpl.n	800d84e <HAL_SD_IRQHandler+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d846:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d848:	f043 0320 	orr.w	r3, r3, #32
 800d84c:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d84e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800d850:	06db      	lsls	r3, r3, #27
 800d852:	d503      	bpl.n	800d85c <HAL_SD_IRQHandler+0xbc>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d854:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d856:	f043 0310 	orr.w	r3, r3, #16
 800d85a:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d85c:	4b73      	ldr	r3, [pc, #460]	; (800da2c <HAL_SD_IRQHandler+0x28c>)
 800d85e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d860:	6822      	ldr	r2, [r4, #0]
 800d862:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800d864:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800d868:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d86a:	6822      	ldr	r2, [r4, #0]
 800d86c:	68d3      	ldr	r3, [r2, #12]
 800d86e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d872:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d874:	6822      	ldr	r2, [r4, #0]
 800d876:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d878:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d87c:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d87e:	6822      	ldr	r2, [r4, #0]
 800d880:	68d3      	ldr	r3, [r2, #12]
 800d882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d886:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d888:	6820      	ldr	r0, [r4, #0]
 800d88a:	f001 fa73 	bl	800ed74 <SDMMC_CmdStopTransfer>
 800d88e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d890:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d892:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d896:	4318      	orrs	r0, r3
 800d898:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d89a:	68d3      	ldr	r3, [r2, #12]
 800d89c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8a0:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d8a2:	6823      	ldr	r3, [r4, #0]
 800d8a4:	6399      	str	r1, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d8a6:	f015 0308 	ands.w	r3, r5, #8
 800d8aa:	f040 8097 	bne.w	800d9dc <HAL_SD_IRQHandler+0x23c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d8ae:	062f      	lsls	r7, r5, #24
 800d8b0:	d5ac      	bpl.n	800d80c <HAL_SD_IRQHandler+0x6c>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d8b2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800d8b4:	2a00      	cmp	r2, #0
 800d8b6:	d0a9      	beq.n	800d80c <HAL_SD_IRQHandler+0x6c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d8b8:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800d8ba:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 800d8bc:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d8be:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800d8c0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d8c4:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d8c6:	6822      	ldr	r2, [r4, #0]
 800d8c8:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d8ca:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d8ce:	f7ff fbd1 	bl	800d074 <HAL_SD_ErrorCallback>
 800d8d2:	e79b      	b.n	800d80c <HAL_SD_IRQHandler+0x6c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d8d4:	0629      	lsls	r1, r5, #24
 800d8d6:	d599      	bpl.n	800d80c <HAL_SD_IRQHandler+0x6c>
      hsd->Instance->DLEN = 0;
 800d8d8:	6822      	ldr	r2, [r4, #0]
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d8da:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800d8de:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d8e0:	6822      	ldr	r2, [r4, #0]
 800d8e2:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d8e4:	6822      	ldr	r2, [r4, #0]
 800d8e6:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d8e8:	f040 8086 	bne.w	800d9f8 <HAL_SD_IRQHandler+0x258>
      hsd->State = HAL_SD_STATE_READY;
 800d8ec:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800d8ee:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d8f0:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800d8f4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d8f8:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d8fa:	f040 808b 	bne.w	800da14 <HAL_SD_IRQHandler+0x274>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d8fe:	07aa      	lsls	r2, r5, #30
 800d900:	d084      	beq.n	800d80c <HAL_SD_IRQHandler+0x6c>
 800d902:	e780      	b.n	800d806 <HAL_SD_IRQHandler+0x66>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d904:	00de      	lsls	r6, r3, #3
 800d906:	d581      	bpl.n	800d80c <HAL_SD_IRQHandler+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d908:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d90c:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d90e:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d910:	6823      	ldr	r3, [r4, #0]
 800d912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d914:	0759      	lsls	r1, r3, #29
 800d916:	d46a      	bmi.n	800d9ee <HAL_SD_IRQHandler+0x24e>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d918:	06aa      	lsls	r2, r5, #26
 800d91a:	f140 8082 	bpl.w	800da22 <HAL_SD_IRQHandler+0x282>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d91e:	f7ff ff3d 	bl	800d79c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800d922:	e773      	b.n	800d80c <HAL_SD_IRQHandler+0x6c>
  if (hsd->RxXferSize >= 32U)
 800d924:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d926:	2b1f      	cmp	r3, #31
 800d928:	f67f af70 	bls.w	800d80c <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pRxBuffPtr;
 800d92c:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800d92e:	1d3d      	adds	r5, r7, #4
 800d930:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800d934:	e000      	b.n	800d938 <HAL_SD_IRQHandler+0x198>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d936:	6820      	ldr	r0, [r4, #0]
    for (count = 0U; count < 8U; count++)
 800d938:	3504      	adds	r5, #4
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d93a:	f000 fead 	bl	800e698 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d93e:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d940:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)(data & 0xFFU);
 800d942:	f805 0c08 	strb.w	r0, [r5, #-8]
    for (count = 0U; count < 8U; count++)
 800d946:	42b5      	cmp	r5, r6
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d948:	ea4f 6010 	mov.w	r0, r0, lsr #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d94c:	f805 2c07 	strb.w	r2, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d950:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d954:	f805 0c05 	strb.w	r0, [r5, #-5]
    for (count = 0U; count < 8U; count++)
 800d958:	d1ed      	bne.n	800d936 <HAL_SD_IRQHandler+0x196>
    hsd->RxXferSize -= 32U;
 800d95a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp++;
 800d95c:	3720      	adds	r7, #32
    hsd->RxXferSize -= 32U;
 800d95e:	3b20      	subs	r3, #32
 800d960:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
 800d964:	e752      	b.n	800d80c <HAL_SD_IRQHandler+0x6c>
        HAL_SD_TxCpltCallback(hsd);
 800d966:	4620      	mov	r0, r4
 800d968:	f002 f8b8 	bl	800fadc <HAL_SD_TxCpltCallback>
}
 800d96c:	b003      	add	sp, #12
 800d96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hsd->TxXferSize >= 32U)
 800d970:	6a23      	ldr	r3, [r4, #32]
 800d972:	2b1f      	cmp	r3, #31
 800d974:	f67f af4a 	bls.w	800d80c <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pTxBuffPtr;
 800d978:	69e6      	ldr	r6, [r4, #28]
 800d97a:	1d37      	adds	r7, r6, #4
 800d97c:	f106 0524 	add.w	r5, r6, #36	; 0x24
 800d980:	e000      	b.n	800d984 <HAL_SD_IRQHandler+0x1e4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d982:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800d984:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
 800d988:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d98a:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 800d98c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800d98e:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 800d992:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d996:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800d998:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 800d99c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d9a0:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800d9a2:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 800d9a6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d9aa:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d9ac:	f000 fe78 	bl	800e6a0 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d9b0:	42bd      	cmp	r5, r7
 800d9b2:	d1e6      	bne.n	800d982 <HAL_SD_IRQHandler+0x1e2>
    hsd->TxXferSize -= 32U;
 800d9b4:	6a23      	ldr	r3, [r4, #32]
      tmp++;
 800d9b6:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800d9b8:	3b20      	subs	r3, #32
 800d9ba:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
 800d9be:	e725      	b.n	800d80c <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d9c0:	6820      	ldr	r0, [r4, #0]
 800d9c2:	f001 f9d7 	bl	800ed74 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	f43f af10 	beq.w	800d7ee <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800d9ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d9d0:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d9d6:	f7ff fb4d 	bl	800d074 <HAL_SD_ErrorCallback>
 800d9da:	e708      	b.n	800d7ee <HAL_SD_IRQHandler+0x4e>
      hsd->State = HAL_SD_STATE_READY;
 800d9dc:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800d9de:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 800d9e0:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800d9e2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d9e6:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d9e8:	f7ff fb44 	bl	800d074 <HAL_SD_ErrorCallback>
 800d9ec:	e70e      	b.n	800d80c <HAL_SD_IRQHandler+0x6c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d9ee:	06ab      	lsls	r3, r5, #26
 800d9f0:	d514      	bpl.n	800da1c <HAL_SD_IRQHandler+0x27c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d9f2:	f7ff fed1 	bl	800d798 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800d9f6:	e709      	b.n	800d80c <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d9f8:	6820      	ldr	r0, [r4, #0]
 800d9fa:	f001 f9bb 	bl	800ed74 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800d9fe:	4603      	mov	r3, r0
 800da00:	2800      	cmp	r0, #0
 800da02:	f43f af73 	beq.w	800d8ec <HAL_SD_IRQHandler+0x14c>
          hsd->ErrorCode |= errorstate;
 800da06:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800da08:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800da0a:	4313      	orrs	r3, r2
 800da0c:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800da0e:	f7ff fb31 	bl	800d074 <HAL_SD_ErrorCallback>
 800da12:	e76b      	b.n	800d8ec <HAL_SD_IRQHandler+0x14c>
        HAL_SD_TxCpltCallback(hsd);
 800da14:	4620      	mov	r0, r4
 800da16:	f002 f861 	bl	800fadc <HAL_SD_TxCpltCallback>
 800da1a:	e770      	b.n	800d8fe <HAL_SD_IRQHandler+0x15e>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800da1c:	f7ff feb8 	bl	800d790 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800da20:	e6f4      	b.n	800d80c <HAL_SD_IRQHandler+0x6c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800da22:	f7ff feb7 	bl	800d794 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800da26:	e6f1      	b.n	800d80c <HAL_SD_IRQHandler+0x6c>
 800da28:	ffff3ec5 	.word	0xffff3ec5
 800da2c:	18000f3a 	.word	0x18000f3a

0800da30 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800da30:	b318      	cbz	r0, 800da7a <HAL_SDRAM_Init+0x4a>
{
 800da32:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800da34:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800da38:	4604      	mov	r4, r0
 800da3a:	460d      	mov	r5, r1
 800da3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800da40:	b1b3      	cbz	r3, 800da70 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800da42:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800da44:	2302      	movs	r3, #2
 800da46:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800da4a:	f851 0b04 	ldr.w	r0, [r1], #4
 800da4e:	f000 fd55 	bl	800e4fc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800da52:	6862      	ldr	r2, [r4, #4]
 800da54:	4629      	mov	r1, r5
 800da56:	6820      	ldr	r0, [r4, #0]
 800da58:	f000 fd8e 	bl	800e578 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800da5c:	4a08      	ldr	r2, [pc, #32]	; (800da80 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800da5e:	2101      	movs	r1, #1

  return HAL_OK;
 800da60:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800da62:	6813      	ldr	r3, [r2, #0]
 800da64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800da68:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800da6a:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800da6e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800da70:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800da74:	f7f6 f8c4 	bl	8003c00 <HAL_SDRAM_MspInit>
 800da78:	e7e3      	b.n	800da42 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800da7a:	2001      	movs	r0, #1
}
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop
 800da80:	52004000 	.word	0x52004000

0800da84 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800da84:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800da86:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800da8a:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800da8c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800da8e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800da90:	d004      	beq.n	800da9c <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800da92:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 800da96:	2e01      	cmp	r6, #1
 800da98:	d001      	beq.n	800da9e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800da9a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800da9c:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800da9e:	2302      	movs	r3, #2
 800daa0:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800daa2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800daa4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800daa8:	f000 fdb4 	bl	800e614 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800daac:	682b      	ldr	r3, [r5, #0]
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d003      	beq.n	800daba <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800dab2:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 800dab4:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 800dab8:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800daba:	2305      	movs	r3, #5
  return HAL_OK;
 800dabc:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800dabe:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800dac2:	bd70      	pop	{r4, r5, r6, pc}

0800dac4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800dac4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800dac6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800daca:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800dacc:	2b02      	cmp	r3, #2
 800dace:	b2d8      	uxtb	r0, r3
 800dad0:	d005      	beq.n	800dade <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800dad2:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	b2dd      	uxtb	r5, r3
 800dada:	d001      	beq.n	800dae0 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800dadc:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800dade:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800dae0:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800dae2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800dae4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800dae8:	f000 fdac 	bl	800e644 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800daec:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800daee:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800daf2:	bd38      	pop	{r3, r4, r5, pc}

0800daf4 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800daf4:	6802      	ldr	r2, [r0, #0]
{
 800daf6:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800daf8:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800dafa:	6991      	ldr	r1, [r2, #24]
 800dafc:	f041 0108 	orr.w	r1, r1, #8
 800db00:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800db02:	6801      	ldr	r1, [r0, #0]
 800db04:	698a      	ldr	r2, [r1, #24]
 800db06:	f042 0210 	orr.w	r2, r2, #16
 800db0a:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800db0c:	6801      	ldr	r1, [r0, #0]
 800db0e:	680a      	ldr	r2, [r1, #0]
 800db10:	f022 0201 	bic.w	r2, r2, #1
 800db14:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800db16:	6801      	ldr	r1, [r0, #0]
 800db18:	4a27      	ldr	r2, [pc, #156]	; (800dbb8 <SPI_CloseTransfer+0xc4>)
 800db1a:	690c      	ldr	r4, [r1, #16]
 800db1c:	4022      	ands	r2, r4
 800db1e:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800db20:	6801      	ldr	r1, [r0, #0]
 800db22:	688a      	ldr	r2, [r1, #8]
 800db24:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800db28:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800db2a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800db2e:	2a04      	cmp	r2, #4
 800db30:	d001      	beq.n	800db36 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800db32:	069c      	lsls	r4, r3, #26
 800db34:	d433      	bmi.n	800db9e <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800db36:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800db3a:	2a03      	cmp	r2, #3
 800db3c:	d001      	beq.n	800db42 <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800db3e:	0659      	lsls	r1, r3, #25
 800db40:	d421      	bmi.n	800db86 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800db42:	059a      	lsls	r2, r3, #22
 800db44:	d50a      	bpl.n	800db5c <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800db46:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800db4a:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800db4c:	f042 0201 	orr.w	r2, r2, #1
 800db50:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800db54:	698a      	ldr	r2, [r1, #24]
 800db56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db5a:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800db5c:	05db      	lsls	r3, r3, #23
 800db5e:	d50a      	bpl.n	800db76 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800db60:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800db64:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800db66:	f043 0308 	orr.w	r3, r3, #8
 800db6a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800db6e:	6993      	ldr	r3, [r2, #24]
 800db70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db74:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800db76:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800db78:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800db7c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800db80:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800db84:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800db86:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db8a:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800db8c:	f042 0204 	orr.w	r2, r2, #4
 800db90:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db94:	698a      	ldr	r2, [r1, #24]
 800db96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800db9a:	618a      	str	r2, [r1, #24]
 800db9c:	e7d1      	b.n	800db42 <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800db9e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800dba2:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800dba4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dba8:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800dbac:	698a      	ldr	r2, [r1, #24]
 800dbae:	f042 0220 	orr.w	r2, r2, #32
 800dbb2:	618a      	str	r2, [r1, #24]
 800dbb4:	e7bf      	b.n	800db36 <SPI_CloseTransfer+0x42>
 800dbb6:	bf00      	nop
 800dbb8:	fffffc90 	.word	0xfffffc90

0800dbbc <HAL_SPI_Init>:
  if (hspi == NULL)
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	f000 80be 	beq.w	800dd3e <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dbc2:	4a62      	ldr	r2, [pc, #392]	; (800dd4c <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dbc4:	2100      	movs	r1, #0
{
 800dbc6:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dbc8:	6803      	ldr	r3, [r0, #0]
 800dbca:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dbcc:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dbce:	4293      	cmp	r3, r2
 800dbd0:	d015      	beq.n	800dbfe <HAL_SPI_Init+0x42>
 800dbd2:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800dbd6:	4293      	cmp	r3, r2
 800dbd8:	d011      	beq.n	800dbfe <HAL_SPI_Init+0x42>
 800dbda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800dbde:	4293      	cmp	r3, r2
 800dbe0:	68c2      	ldr	r2, [r0, #12]
 800dbe2:	f000 80a5 	beq.w	800dd30 <HAL_SPI_Init+0x174>
 800dbe6:	2a0f      	cmp	r2, #15
 800dbe8:	d807      	bhi.n	800dbfa <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dbea:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dbec:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dbee:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800dbf0:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 800dbf2:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dbf6:	2a08      	cmp	r2, #8
 800dbf8:	d914      	bls.n	800dc24 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 800dbfa:	2001      	movs	r0, #1
}
 800dbfc:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 800dbfe:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dc00:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800dc02:	3108      	adds	r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dc04:	4d51      	ldr	r5, [pc, #324]	; (800dd4c <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dc06:	0950      	lsrs	r0, r2, #5
  data_size = (data_size + 7UL) / 8UL;
 800dc08:	08ca      	lsrs	r2, r1, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dc0a:	4951      	ldr	r1, [pc, #324]	; (800dd50 <HAL_SPI_Init+0x194>)
 800dc0c:	428b      	cmp	r3, r1
 800dc0e:	bf18      	it	ne
 800dc10:	42ab      	cmpne	r3, r5
  return data_size * fifo_threashold;
 800dc12:	fb00 2202 	mla	r2, r0, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dc16:	d003      	beq.n	800dc20 <HAL_SPI_Init+0x64>
 800dc18:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800dc1c:	428b      	cmp	r3, r1
 800dc1e:	d101      	bne.n	800dc24 <HAL_SPI_Init+0x68>
 800dc20:	2a10      	cmp	r2, #16
 800dc22:	d8ea      	bhi.n	800dbfa <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800dc24:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800dc28:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800dc2c:	2a00      	cmp	r2, #0
 800dc2e:	d078      	beq.n	800dd22 <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 800dc30:	2202      	movs	r2, #2
 800dc32:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800dc36:	681a      	ldr	r2, [r3, #0]
 800dc38:	f022 0201 	bic.w	r2, r2, #1
 800dc3c:	601a      	str	r2, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dc3e:	6822      	ldr	r2, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dc40:	69a0      	ldr	r0, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dc42:	6891      	ldr	r1, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dc44:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800dc48:	6863      	ldr	r3, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dc4a:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dc4e:	d058      	beq.n	800dd02 <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800dc50:	0258      	lsls	r0, r3, #9
 800dc52:	d502      	bpl.n	800dc5a <HAL_SPI_Init+0x9e>
 800dc54:	68e3      	ldr	r3, [r4, #12]
 800dc56:	2b06      	cmp	r3, #6
 800dc58:	d84c      	bhi.n	800dcf4 <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dc5a:	6813      	ldr	r3, [r2, #0]
 800dc5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc60:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dc62:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800dc64:	69e3      	ldr	r3, [r4, #28]
 800dc66:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800dc68:	432b      	orrs	r3, r5
 800dc6a:	6822      	ldr	r2, [r4, #0]
 800dc6c:	4303      	orrs	r3, r0
 800dc6e:	68e0      	ldr	r0, [r4, #12]
 800dc70:	4303      	orrs	r3, r0
 800dc72:	430b      	orrs	r3, r1
 800dc74:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dc76:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dc78:	69a0      	ldr	r0, [r4, #24]
 800dc7a:	6822      	ldr	r2, [r4, #0]
 800dc7c:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 800dc80:	432b      	orrs	r3, r5
 800dc82:	430b      	orrs	r3, r1
 800dc84:	6921      	ldr	r1, [r4, #16]
 800dc86:	4303      	orrs	r3, r0
 800dc88:	6960      	ldr	r0, [r4, #20]
 800dc8a:	430b      	orrs	r3, r1
 800dc8c:	6a21      	ldr	r1, [r4, #32]
 800dc8e:	4303      	orrs	r3, r0
 800dc90:	6860      	ldr	r0, [r4, #4]
 800dc92:	430b      	orrs	r3, r1
 800dc94:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800dc96:	4303      	orrs	r3, r0
 800dc98:	68a0      	ldr	r0, [r4, #8]
 800dc9a:	430b      	orrs	r3, r1
 800dc9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dc9e:	4303      	orrs	r3, r0
 800dca0:	430b      	orrs	r3, r1
 800dca2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dca4:	430b      	orrs	r3, r1
 800dca6:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dca8:	6863      	ldr	r3, [r4, #4]
 800dcaa:	b96b      	cbnz	r3, 800dcc8 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dcac:	6822      	ldr	r2, [r4, #0]
 800dcae:	6893      	ldr	r3, [r2, #8]
 800dcb0:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800dcb4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dcb8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dcba:	6822      	ldr	r2, [r4, #0]
 800dcbc:	6893      	ldr	r3, [r2, #8]
 800dcbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800dcc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dcc6:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dcc8:	6822      	ldr	r2, [r4, #0]
 800dcca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800dccc:	f023 0301 	bic.w	r3, r3, #1
 800dcd0:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dcd2:	6863      	ldr	r3, [r4, #4]
 800dcd4:	025b      	lsls	r3, r3, #9
 800dcd6:	d506      	bpl.n	800dce6 <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dcd8:	6822      	ldr	r2, [r4, #0]
 800dcda:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800dcdc:	68d3      	ldr	r3, [r2, #12]
 800dcde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dce2:	430b      	orrs	r3, r1
 800dce4:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dce6:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800dce8:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dcea:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dcee:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800dcf2:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dcf4:	6813      	ldr	r3, [r2, #0]
 800dcf6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800dcf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dcfc:	4303      	orrs	r3, r0
 800dcfe:	6013      	str	r3, [r2, #0]
 800dd00:	e7af      	b.n	800dc62 <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dd02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd06:	d01c      	beq.n	800dd42 <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d1a1      	bne.n	800dc50 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dd0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd12:	d1a2      	bne.n	800dc5a <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dd14:	6813      	ldr	r3, [r2, #0]
 800dd16:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dd1a:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dd1c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dd20:	e796      	b.n	800dc50 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 800dd22:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800dd24:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800dd28:	f7f9 fa12 	bl	8007150 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800dd2c:	6823      	ldr	r3, [r4, #0]
 800dd2e:	e77f      	b.n	800dc30 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dd30:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800dd32:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dd34:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800dd36:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800dd38:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dd3c:	e770      	b.n	800dc20 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 800dd3e:	2001      	movs	r0, #1
}
 800dd40:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dd42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d0e5      	beq.n	800dd14 <HAL_SPI_Init+0x158>
 800dd48:	e784      	b.n	800dc54 <HAL_SPI_Init+0x98>
 800dd4a:	bf00      	nop
 800dd4c:	40013000 	.word	0x40013000
 800dd50:	40003800 	.word	0x40003800

0800dd54 <HAL_SPI_Receive_DMA>:
{
 800dd54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800dd56:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	f000 80a9 	beq.w	800deb2 <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800dd60:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800dd64:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800dd66:	2201      	movs	r2, #1
 800dd68:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800dd6a:	b2de      	uxtb	r6, r3
 800dd6c:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 800dd6e:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800dd72:	f040 8093 	bne.w	800de9c <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 800dd76:	2900      	cmp	r1, #0
 800dd78:	f000 808b 	beq.w	800de92 <HAL_SPI_Receive_DMA+0x13e>
 800dd7c:	fab5 f385 	clz	r3, r5
 800dd80:	095b      	lsrs	r3, r3, #5
 800dd82:	2d00      	cmp	r5, #0
 800dd84:	f000 8085 	beq.w	800de92 <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd88:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dd8a:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dd8c:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd8e:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 800dd92:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dd96:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 800dd9a:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd9c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dda0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 800dda4:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800dda8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 800ddac:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ddb0:	d07a      	beq.n	800dea8 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 800ddb2:	68d3      	ldr	r3, [r2, #12]
 800ddb4:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800ddb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ddbc:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800ddbe:	68e3      	ldr	r3, [r4, #12]
 800ddc0:	2b0f      	cmp	r3, #15
 800ddc2:	d861      	bhi.n	800de88 <HAL_SPI_Receive_DMA+0x134>
 800ddc4:	2b07      	cmp	r3, #7
 800ddc6:	f200 8092 	bhi.w	800deee <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800ddca:	6822      	ldr	r2, [r4, #0]
 800ddcc:	6893      	ldr	r3, [r2, #8]
 800ddce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ddd2:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800ddd4:	68e3      	ldr	r3, [r4, #12]
 800ddd6:	2b07      	cmp	r3, #7
 800ddd8:	d86e      	bhi.n	800deb8 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ddda:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800dddc:	699a      	ldr	r2, [r3, #24]
 800ddde:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800dde2:	d107      	bne.n	800ddf4 <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800dde4:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800dde8:	b292      	uxth	r2, r2
 800ddea:	3201      	adds	r2, #1
 800ddec:	0852      	lsrs	r2, r2, #1
 800ddee:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800ddf2:	699a      	ldr	r2, [r3, #24]
 800ddf4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800ddf8:	d106      	bne.n	800de08 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800ddfa:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800ddfe:	b292      	uxth	r2, r2
 800de00:	3203      	adds	r2, #3
 800de02:	0892      	lsrs	r2, r2, #2
 800de04:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800de08:	4a3e      	ldr	r2, [pc, #248]	; (800df04 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800de0a:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800de0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800de0e:	4a3e      	ldr	r2, [pc, #248]	; (800df08 <HAL_SPI_Receive_DMA+0x1b4>)
 800de10:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800de12:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800de14:	4a3d      	ldr	r2, [pc, #244]	; (800df0c <HAL_SPI_Receive_DMA+0x1b8>)
 800de16:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800de18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800de1a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800de1c:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800de1e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800de22:	6821      	ldr	r1, [r4, #0]
 800de24:	b29b      	uxth	r3, r3
 800de26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800de28:	3130      	adds	r1, #48	; 0x30
 800de2a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800de2c:	f7fa f88e 	bl	8007f4c <HAL_DMA_Start_IT>
 800de30:	2800      	cmp	r0, #0
 800de32:	d150      	bne.n	800ded6 <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800de34:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800de36:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800de38:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800de3a:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800de3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800de40:	4b33      	ldr	r3, [pc, #204]	; (800df10 <HAL_SPI_Receive_DMA+0x1bc>)
 800de42:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800de46:	bf18      	it	ne
 800de48:	432b      	orrne	r3, r5
 800de4a:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800de4c:	6822      	ldr	r2, [r4, #0]
 800de4e:	6893      	ldr	r3, [r2, #8]
 800de50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800de54:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800de56:	6822      	ldr	r2, [r4, #0]
 800de58:	6913      	ldr	r3, [r2, #16]
 800de5a:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800de5e:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800de60:	6822      	ldr	r2, [r4, #0]
 800de62:	6813      	ldr	r3, [r2, #0]
 800de64:	f043 0301 	orr.w	r3, r3, #1
 800de68:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800de6a:	6863      	ldr	r3, [r4, #4]
 800de6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de70:	d104      	bne.n	800de7c <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800de72:	6822      	ldr	r2, [r4, #0]
 800de74:	6813      	ldr	r3, [r2, #0]
 800de76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800de7a:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800de7c:	2300      	movs	r3, #0
  return errorcode;
 800de7e:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800de80:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800de84:	4630      	mov	r0, r6
 800de86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800de88:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800de8a:	699b      	ldr	r3, [r3, #24]
 800de8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de90:	d09b      	beq.n	800ddca <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 800de92:	2300      	movs	r3, #0
 800de94:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800de98:	4630      	mov	r0, r6
 800de9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800de9c:	2300      	movs	r3, #0
    return errorcode;
 800de9e:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800dea0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800dea4:	4630      	mov	r0, r6
 800dea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 800dea8:	6813      	ldr	r3, [r2, #0]
 800deaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800deae:	6013      	str	r3, [r2, #0]
 800deb0:	e785      	b.n	800ddbe <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 800deb2:	2602      	movs	r6, #2
}
 800deb4:	4630      	mov	r0, r6
 800deb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800deb8:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800deba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800debc:	d8a4      	bhi.n	800de08 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800debe:	699a      	ldr	r2, [r3, #24]
 800dec0:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800dec4:	d1a0      	bne.n	800de08 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800dec6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800deca:	b292      	uxth	r2, r2
 800decc:	3201      	adds	r2, #1
 800dece:	0852      	lsrs	r2, r2, #1
 800ded0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800ded4:	e798      	b.n	800de08 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ded6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800deda:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800dedc:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dee0:	f043 0310 	orr.w	r3, r3, #16
 800dee4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800dee8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800deec:	e7d4      	b.n	800de98 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800deee:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800def0:	699b      	ldr	r3, [r3, #24]
 800def2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800def6:	f43f af68 	beq.w	800ddca <HAL_SPI_Receive_DMA+0x76>
 800defa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800defe:	d1c8      	bne.n	800de92 <HAL_SPI_Receive_DMA+0x13e>
 800df00:	e763      	b.n	800ddca <HAL_SPI_Receive_DMA+0x76>
 800df02:	bf00      	nop
 800df04:	0800e1a5 	.word	0x0800e1a5
 800df08:	0800e155 	.word	0x0800e155
 800df0c:	0800e1c1 	.word	0x0800e1c1
 800df10:	ffff0000 	.word	0xffff0000

0800df14 <HAL_SPI_TransmitReceive_DMA>:
{
 800df14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df18:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800df1a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800df1e:	2b01      	cmp	r3, #1
 800df20:	f000 809a 	beq.w	800e058 <HAL_SPI_TransmitReceive_DMA+0x144>
 800df24:	2301      	movs	r3, #1
 800df26:	4604      	mov	r4, r0
 800df28:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800df2c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800df30:	2b01      	cmp	r3, #1
 800df32:	b2de      	uxtb	r6, r3
 800df34:	d158      	bne.n	800dfe8 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800df36:	2d00      	cmp	r5, #0
 800df38:	bf18      	it	ne
 800df3a:	2a00      	cmpne	r2, #0
 800df3c:	d04e      	beq.n	800dfdc <HAL_SPI_TransmitReceive_DMA+0xc8>
 800df3e:	fab1 f381 	clz	r3, r1
 800df42:	095b      	lsrs	r3, r3, #5
 800df44:	2900      	cmp	r1, #0
 800df46:	d049      	beq.n	800dfdc <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800df48:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800df4a:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800df4c:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
 800df4e:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800df50:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
 800df54:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800df58:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
 800df5c:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
 800df60:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
 800df64:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800df68:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
 800df6c:	68d3      	ldr	r3, [r2, #12]
 800df6e:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800df72:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800df74:	6802      	ldr	r2, [r0, #0]
 800df76:	6893      	ldr	r3, [r2, #8]
 800df78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800df7c:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800df7e:	68c3      	ldr	r3, [r0, #12]
 800df80:	2b0f      	cmp	r3, #15
 800df82:	d938      	bls.n	800dff6 <HAL_SPI_TransmitReceive_DMA+0xe2>
 800df84:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800df86:	699a      	ldr	r2, [r3, #24]
 800df88:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800df8c:	d126      	bne.n	800dfdc <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800df8e:	4a6c      	ldr	r2, [pc, #432]	; (800e140 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800df90:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800df94:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800e14c <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800df98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800df9a:	4a6a      	ldr	r2, [pc, #424]	; (800e144 <HAL_SPI_TransmitReceive_DMA+0x230>)
 800df9c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800df9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800dfa0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800dfa2:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800dfa6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800dfa8:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800dfac:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800dfb0:	6821      	ldr	r1, [r4, #0]
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dfb6:	3130      	adds	r1, #48	; 0x30
 800dfb8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800dfba:	f7f9 ffc7 	bl	8007f4c <HAL_DMA_Start_IT>
 800dfbe:	4607      	mov	r7, r0
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d04d      	beq.n	800e060 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dfc4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800dfc8:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800dfca:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dfce:	f043 0310 	orr.w	r3, r3, #16
 800dfd2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800dfd6:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800dfda:	e002      	b.n	800dfe2 <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
 800dfdc:	2300      	movs	r3, #0
 800dfde:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 800dfe8:	2300      	movs	r3, #0
    return errorcode;
 800dfea:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800dfec:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800dff0:	4630      	mov	r0, r6
 800dff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800dff6:	2b07      	cmp	r3, #7
 800dff8:	d87f      	bhi.n	800e0fa <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800dffa:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800dffc:	6993      	ldr	r3, [r2, #24]
 800dffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e002:	d107      	bne.n	800e014 <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e004:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800e008:	b29b      	uxth	r3, r3
 800e00a:	3301      	adds	r3, #1
 800e00c:	085b      	lsrs	r3, r3, #1
 800e00e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e012:	6993      	ldr	r3, [r2, #24]
 800e014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e018:	d106      	bne.n	800e028 <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800e01a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800e01e:	b29b      	uxth	r3, r3
 800e020:	3303      	adds	r3, #3
 800e022:	089b      	lsrs	r3, r3, #2
 800e024:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e028:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800e02a:	699a      	ldr	r2, [r3, #24]
 800e02c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e030:	d107      	bne.n	800e042 <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e032:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800e036:	b292      	uxth	r2, r2
 800e038:	3201      	adds	r2, #1
 800e03a:	0852      	lsrs	r2, r2, #1
 800e03c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e040:	699a      	ldr	r2, [r3, #24]
 800e042:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800e046:	d1a2      	bne.n	800df8e <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800e048:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800e04c:	b292      	uxth	r2, r2
 800e04e:	3203      	adds	r2, #3
 800e050:	0892      	lsrs	r2, r2, #2
 800e052:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800e056:	e79a      	b.n	800df8e <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
 800e058:	2602      	movs	r6, #2
}
 800e05a:	4630      	mov	r0, r6
 800e05c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800e060:	6822      	ldr	r2, [r4, #0]
 800e062:	6893      	ldr	r3, [r2, #8]
 800e064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e068:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800e06a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e06c:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800e06e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e070:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800e072:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e074:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800e076:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e078:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
 800e07c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800e080:	6822      	ldr	r2, [r4, #0]
 800e082:	b29b      	uxth	r3, r3
 800e084:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e086:	3220      	adds	r2, #32
 800e088:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800e08a:	f7f9 ff5f 	bl	8007f4c <HAL_DMA_Start_IT>
 800e08e:	bb40      	cbnz	r0, 800e0e2 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e090:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800e092:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e094:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800e096:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e098:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800e09c:	4b2a      	ldr	r3, [pc, #168]	; (800e148 <HAL_SPI_TransmitReceive_DMA+0x234>)
 800e09e:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e0a2:	bf18      	it	ne
 800e0a4:	432b      	orrne	r3, r5
 800e0a6:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800e0a8:	6822      	ldr	r2, [r4, #0]
 800e0aa:	6893      	ldr	r3, [r2, #8]
 800e0ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e0b0:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800e0b2:	6822      	ldr	r2, [r4, #0]
 800e0b4:	6913      	ldr	r3, [r2, #16]
 800e0b6:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800e0ba:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800e0bc:	6822      	ldr	r2, [r4, #0]
 800e0be:	6813      	ldr	r3, [r2, #0]
 800e0c0:	f043 0301 	orr.w	r3, r3, #1
 800e0c4:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e0c6:	6863      	ldr	r3, [r4, #4]
 800e0c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e0cc:	d104      	bne.n	800e0d8 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e0ce:	6822      	ldr	r2, [r4, #0]
 800e0d0:	6813      	ldr	r3, [r2, #0]
 800e0d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e0d6:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800e0d8:	2300      	movs	r3, #0
  return errorcode;
 800e0da:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800e0dc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800e0e0:	e77f      	b.n	800dfe2 <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e0e2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e0e6:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800e0e8:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e0ec:	f043 0310 	orr.w	r3, r3, #16
 800e0f0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e0f4:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800e0f8:	e773      	b.n	800dfe2 <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800e0fa:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800e0fc:	699a      	ldr	r2, [r3, #24]
 800e0fe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e102:	d003      	beq.n	800e10c <HAL_SPI_TransmitReceive_DMA+0x1f8>
 800e104:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800e108:	f47f af68 	bne.w	800dfdc <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e10c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800e10e:	6989      	ldr	r1, [r1, #24]
 800e110:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800e114:	d107      	bne.n	800e126 <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800e116:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800e11a:	b292      	uxth	r2, r2
 800e11c:	3201      	adds	r2, #1
 800e11e:	0852      	lsrs	r2, r2, #1
 800e120:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800e124:	699a      	ldr	r2, [r3, #24]
 800e126:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800e12a:	f47f af30 	bne.w	800df8e <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800e12e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800e132:	b292      	uxth	r2, r2
 800e134:	3201      	adds	r2, #1
 800e136:	0852      	lsrs	r2, r2, #1
 800e138:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800e13c:	e727      	b.n	800df8e <HAL_SPI_TransmitReceive_DMA+0x7a>
 800e13e:	bf00      	nop
 800e140:	0800e1b1 	.word	0x0800e1b1
 800e144:	0800e17d 	.word	0x0800e17d
 800e148:	ffff0000 	.word	0xffff0000
 800e14c:	0800e1c1 	.word	0x0800e1c1

0800e150 <HAL_SPI_TxCpltCallback>:
 800e150:	4770      	bx	lr
 800e152:	bf00      	nop

0800e154 <SPI_DMAReceiveCplt>:
{
 800e154:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e156:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800e158:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800e15c:	2b07      	cmp	r3, #7
 800e15e:	d009      	beq.n	800e174 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e160:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800e162:	69db      	ldr	r3, [r3, #28]
 800e164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e168:	d005      	beq.n	800e176 <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800e16a:	6802      	ldr	r2, [r0, #0]
 800e16c:	6913      	ldr	r3, [r2, #16]
 800e16e:	f043 0308 	orr.w	r3, r3, #8
 800e172:	6113      	str	r3, [r2, #16]
}
 800e174:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800e176:	f7f5 f99f 	bl	80034b8 <HAL_SPI_RxCpltCallback>
}
 800e17a:	bd08      	pop	{r3, pc}

0800e17c <SPI_DMATransmitReceiveCplt>:
{
 800e17c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e17e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800e180:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800e184:	2b07      	cmp	r3, #7
 800e186:	d009      	beq.n	800e19c <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800e188:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800e18a:	69db      	ldr	r3, [r3, #28]
 800e18c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e190:	d005      	beq.n	800e19e <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800e192:	6802      	ldr	r2, [r0, #0]
 800e194:	6913      	ldr	r3, [r2, #16]
 800e196:	f043 0308 	orr.w	r3, r3, #8
 800e19a:	6113      	str	r3, [r2, #16]
}
 800e19c:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 800e19e:	f7f5 fbd3 	bl	8003948 <HAL_SPI_TxRxCpltCallback>
}
 800e1a2:	bd08      	pop	{r3, pc}

0800e1a4 <SPI_DMAHalfReceiveCplt>:
{
 800e1a4:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800e1a6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e1a8:	f7f5 fab0 	bl	800370c <HAL_SPI_RxHalfCpltCallback>
}
 800e1ac:	bd08      	pop	{r3, pc}
 800e1ae:	bf00      	nop

0800e1b0 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800e1b0:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800e1b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e1b4:	f7f5 fbe4 	bl	8003980 <HAL_SPI_TxRxHalfCpltCallback>
}
 800e1b8:	bd08      	pop	{r3, pc}
 800e1ba:	bf00      	nop

0800e1bc <HAL_SPI_ErrorCallback>:
 800e1bc:	4770      	bx	lr
 800e1be:	bf00      	nop

0800e1c0 <SPI_DMAError>:
{
 800e1c0:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e1c2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e1c4:	f7fa ff26 	bl	8009014 <HAL_DMA_GetError>
 800e1c8:	2802      	cmp	r0, #2
 800e1ca:	d100      	bne.n	800e1ce <SPI_DMAError+0xe>
}
 800e1cc:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 800e1ce:	6822      	ldr	r2, [r4, #0]
 800e1d0:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e1d2:	6991      	ldr	r1, [r2, #24]
 800e1d4:	f041 0108 	orr.w	r1, r1, #8
 800e1d8:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e1da:	6821      	ldr	r1, [r4, #0]
 800e1dc:	698a      	ldr	r2, [r1, #24]
 800e1de:	f042 0210 	orr.w	r2, r2, #16
 800e1e2:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 800e1e4:	6821      	ldr	r1, [r4, #0]
 800e1e6:	680a      	ldr	r2, [r1, #0]
 800e1e8:	f022 0201 	bic.w	r2, r2, #1
 800e1ec:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e1ee:	6821      	ldr	r1, [r4, #0]
 800e1f0:	4a2c      	ldr	r2, [pc, #176]	; (800e2a4 <SPI_DMAError+0xe4>)
 800e1f2:	6908      	ldr	r0, [r1, #16]
 800e1f4:	4002      	ands	r2, r0
 800e1f6:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e1f8:	6821      	ldr	r1, [r4, #0]
 800e1fa:	688a      	ldr	r2, [r1, #8]
 800e1fc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e200:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e202:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800e206:	2a04      	cmp	r2, #4
 800e208:	d001      	beq.n	800e20e <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e20a:	0698      	lsls	r0, r3, #26
 800e20c:	d43d      	bmi.n	800e28a <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e20e:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800e212:	2a03      	cmp	r2, #3
 800e214:	d001      	beq.n	800e21a <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e216:	0659      	lsls	r1, r3, #25
 800e218:	d42b      	bmi.n	800e272 <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e21a:	059a      	lsls	r2, r3, #22
 800e21c:	d50a      	bpl.n	800e234 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e21e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e222:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e224:	f042 0201 	orr.w	r2, r2, #1
 800e228:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e22c:	698a      	ldr	r2, [r1, #24]
 800e22e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e232:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e234:	05db      	lsls	r3, r3, #23
 800e236:	d50a      	bpl.n	800e24e <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e238:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e23c:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e23e:	f043 0308 	orr.w	r3, r3, #8
 800e242:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e246:	6993      	ldr	r3, [r2, #24]
 800e248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e24c:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800e24e:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 800e250:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800e252:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 800e254:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e258:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e25c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e260:	f043 0310 	orr.w	r3, r3, #16
 800e264:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800e268:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800e26c:	f7ff ffa6 	bl	800e1bc <HAL_SPI_ErrorCallback>
}
 800e270:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e272:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e276:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e278:	f042 0204 	orr.w	r2, r2, #4
 800e27c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e280:	698a      	ldr	r2, [r1, #24]
 800e282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e286:	618a      	str	r2, [r1, #24]
 800e288:	e7c7      	b.n	800e21a <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e28a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e28e:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e290:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e294:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e298:	698a      	ldr	r2, [r1, #24]
 800e29a:	f042 0220 	orr.w	r2, r2, #32
 800e29e:	618a      	str	r2, [r1, #24]
 800e2a0:	e7b5      	b.n	800e20e <SPI_DMAError+0x4e>
 800e2a2:	bf00      	nop
 800e2a4:	fffffc90 	.word	0xfffffc90

0800e2a8 <SPI_DMAAbortOnError>:
{
 800e2a8:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 800e2aa:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e2ac:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800e2b4:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800e2b8:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800e2bc:	f7ff ff7e 	bl	800e1bc <HAL_SPI_ErrorCallback>
}
 800e2c0:	bd08      	pop	{r3, pc}
 800e2c2:	bf00      	nop

0800e2c4 <HAL_SPI_SuspendCallback>:
 800e2c4:	4770      	bx	lr
 800e2c6:	bf00      	nop

0800e2c8 <HAL_SPI_IRQHandler>:
{
 800e2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800e2cc:	6802      	ldr	r2, [r0, #0]
{
 800e2ce:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800e2d0:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800e2d2:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800e2d4:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 800e2d6:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 800e2da:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800e2de:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 800e2e0:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800e2e2:	d502      	bpl.n	800e2ea <HAL_SPI_IRQHandler+0x22>
 800e2e4:	0709      	lsls	r1, r1, #28
 800e2e6:	f100 80e2 	bmi.w	800e4ae <HAL_SPI_IRQHandler+0x1e6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800e2ea:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800e2ee:	2b04      	cmp	r3, #4
 800e2f0:	d045      	beq.n	800e37e <HAL_SPI_IRQHandler+0xb6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800e2f2:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800e2f6:	2b01      	cmp	r3, #1
 800e2f8:	d04b      	beq.n	800e392 <HAL_SPI_IRQHandler+0xca>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800e2fa:	f005 0326 	and.w	r3, r5, #38	; 0x26
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	f000 80ec 	beq.w	800e4dc <HAL_SPI_IRQHandler+0x214>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800e304:	072b      	lsls	r3, r5, #28
 800e306:	d564      	bpl.n	800e3d2 <HAL_SPI_IRQHandler+0x10a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e308:	6993      	ldr	r3, [r2, #24]
 800e30a:	f043 0308 	orr.w	r3, r3, #8
 800e30e:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e310:	6821      	ldr	r1, [r4, #0]
 800e312:	698b      	ldr	r3, [r1, #24]
 800e314:	f043 0310 	orr.w	r3, r3, #16
 800e318:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800e31a:	6821      	ldr	r1, [r4, #0]
 800e31c:	698b      	ldr	r3, [r1, #24]
 800e31e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e322:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800e324:	6821      	ldr	r1, [r4, #0]
 800e326:	690b      	ldr	r3, [r1, #16]
 800e328:	f023 0308 	bic.w	r3, r3, #8
 800e32c:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800e32e:	6823      	ldr	r3, [r4, #0]
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800e336:	d136      	bne.n	800e3a6 <HAL_SPI_IRQHandler+0xde>
      while (hspi->RxXferCount != 0UL)
 800e338:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d031      	beq.n	800e3a6 <HAL_SPI_IRQHandler+0xde>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e342:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800e344:	e00f      	b.n	800e366 <HAL_SPI_IRQHandler+0x9e>
 800e346:	6823      	ldr	r3, [r4, #0]
 800e348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e34a:	600b      	str	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e34c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800e34e:	3104      	adds	r1, #4
 800e350:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800e352:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e356:	3b01      	subs	r3, #1
 800e358:	b29b      	uxth	r3, r3
 800e35a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800e35e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800e362:	b29b      	uxth	r3, r3
 800e364:	b1fb      	cbz	r3, 800e3a6 <HAL_SPI_IRQHandler+0xde>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e366:	68e3      	ldr	r3, [r4, #12]
 800e368:	2b0f      	cmp	r3, #15
 800e36a:	d8ec      	bhi.n	800e346 <HAL_SPI_IRQHandler+0x7e>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e36c:	2b07      	cmp	r3, #7
 800e36e:	f240 80ad 	bls.w	800e4cc <HAL_SPI_IRQHandler+0x204>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e372:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800e374:	800b      	strh	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e376:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800e378:	3102      	adds	r1, #2
 800e37a:	6661      	str	r1, [r4, #100]	; 0x64
 800e37c:	e7e9      	b.n	800e352 <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 800e37e:	4620      	mov	r0, r4
 800e380:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e382:	4798      	blx	r3
    hspi->RxISR(hspi);
 800e384:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e386:	4620      	mov	r0, r4
 800e388:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800e38a:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d102      	bne.n	800e398 <HAL_SPI_IRQHandler+0xd0>
    hspi->RxISR(hspi);
 800e392:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800e394:	4620      	mov	r0, r4
 800e396:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800e398:	f005 0526 	and.w	r5, r5, #38	; 0x26
 800e39c:	2d02      	cmp	r5, #2
 800e39e:	f000 809d 	beq.w	800e4dc <HAL_SPI_IRQHandler+0x214>
}
 800e3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 800e3a6:	4620      	mov	r0, r4
 800e3a8:	f7ff fba4 	bl	800daf4 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e3b2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	f040 8085 	bne.w	800e4c6 <HAL_SPI_IRQHandler+0x1fe>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800e3bc:	2e05      	cmp	r6, #5
 800e3be:	f000 8092 	beq.w	800e4e6 <HAL_SPI_IRQHandler+0x21e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800e3c2:	2e04      	cmp	r6, #4
 800e3c4:	f000 8092 	beq.w	800e4ec <HAL_SPI_IRQHandler+0x224>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800e3c8:	2e03      	cmp	r6, #3
 800e3ca:	d1ea      	bne.n	800e3a2 <HAL_SPI_IRQHandler+0xda>
      HAL_SPI_TxCpltCallback(hspi);
 800e3cc:	f7ff fec0 	bl	800e150 <HAL_SPI_TxCpltCallback>
 800e3d0:	e7e7      	b.n	800e3a2 <HAL_SPI_IRQHandler+0xda>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800e3d2:	f415 7f58 	tst.w	r5, #864	; 0x360
 800e3d6:	d0e4      	beq.n	800e3a2 <HAL_SPI_IRQHandler+0xda>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800e3d8:	0668      	lsls	r0, r5, #25
 800e3da:	d509      	bpl.n	800e3f0 <HAL_SPI_IRQHandler+0x128>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e3dc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e3e0:	f043 0304 	orr.w	r3, r3, #4
 800e3e4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e3e8:	6993      	ldr	r3, [r2, #24]
 800e3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3ee:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800e3f0:	05a9      	lsls	r1, r5, #22
 800e3f2:	d50a      	bpl.n	800e40a <HAL_SPI_IRQHandler+0x142>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e3f4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e3f8:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e3fa:	f043 0301 	orr.w	r3, r3, #1
 800e3fe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e402:	6993      	ldr	r3, [r2, #24]
 800e404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e408:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800e40a:	05ea      	lsls	r2, r5, #23
 800e40c:	d50a      	bpl.n	800e424 <HAL_SPI_IRQHandler+0x15c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e40e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e412:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e414:	f043 0308 	orr.w	r3, r3, #8
 800e418:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e41c:	6993      	ldr	r3, [r2, #24]
 800e41e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e422:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800e424:	06ab      	lsls	r3, r5, #26
 800e426:	d50a      	bpl.n	800e43e <HAL_SPI_IRQHandler+0x176>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e428:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e42c:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e42e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e432:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e436:	6993      	ldr	r3, [r2, #24]
 800e438:	f043 0320 	orr.w	r3, r3, #32
 800e43c:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e43e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e442:	2b00      	cmp	r3, #0
 800e444:	d0ad      	beq.n	800e3a2 <HAL_SPI_IRQHandler+0xda>
      __HAL_SPI_DISABLE(hspi);
 800e446:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800e448:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800e44c:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800e44e:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800e452:	f023 0301 	bic.w	r3, r3, #1
 800e456:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800e458:	6822      	ldr	r2, [r4, #0]
 800e45a:	4b26      	ldr	r3, [pc, #152]	; (800e4f4 <HAL_SPI_IRQHandler+0x22c>)
 800e45c:	6911      	ldr	r1, [r2, #16]
 800e45e:	ea03 0301 	and.w	r3, r3, r1
 800e462:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800e464:	d12b      	bne.n	800e4be <HAL_SPI_IRQHandler+0x1f6>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e466:	6822      	ldr	r2, [r4, #0]
 800e468:	6893      	ldr	r3, [r2, #8]
 800e46a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800e46e:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800e470:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800e472:	b15b      	cbz	r3, 800e48c <HAL_SPI_IRQHandler+0x1c4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e474:	4a20      	ldr	r2, [pc, #128]	; (800e4f8 <HAL_SPI_IRQHandler+0x230>)
 800e476:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e478:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800e47a:	f7fa f833 	bl	80084e4 <HAL_DMA_Abort_IT>
 800e47e:	b128      	cbz	r0, 800e48c <HAL_SPI_IRQHandler+0x1c4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e480:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e488:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800e48c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d087      	beq.n	800e3a2 <HAL_SPI_IRQHandler+0xda>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e492:	4a19      	ldr	r2, [pc, #100]	; (800e4f8 <HAL_SPI_IRQHandler+0x230>)
 800e494:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e496:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800e498:	f7fa f824 	bl	80084e4 <HAL_DMA_Abort_IT>
 800e49c:	2800      	cmp	r0, #0
 800e49e:	d080      	beq.n	800e3a2 <HAL_SPI_IRQHandler+0xda>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e4a0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e4a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4a8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800e4ac:	e779      	b.n	800e3a2 <HAL_SPI_IRQHandler+0xda>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800e4ae:	6993      	ldr	r3, [r2, #24]
 800e4b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e4b4:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 800e4b6:	f7ff ff05 	bl	800e2c4 <HAL_SPI_SuspendCallback>
}
 800e4ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800e4be:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800e4c0:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800e4c2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800e4c6:	f7ff fe79 	bl	800e1bc <HAL_SPI_ErrorCallback>
 800e4ca:	e76a      	b.n	800e3a2 <HAL_SPI_IRQHandler+0xda>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e4cc:	6823      	ldr	r3, [r4, #0]
 800e4ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4d2:	700b      	strb	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e4d4:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800e4d6:	3101      	adds	r1, #1
 800e4d8:	6661      	str	r1, [r4, #100]	; 0x64
 800e4da:	e73a      	b.n	800e352 <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 800e4dc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800e4de:	4620      	mov	r0, r4
}
 800e4e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800e4e4:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800e4e6:	f7f5 fa2f 	bl	8003948 <HAL_SPI_TxRxCpltCallback>
 800e4ea:	e75a      	b.n	800e3a2 <HAL_SPI_IRQHandler+0xda>
      HAL_SPI_RxCpltCallback(hspi);
 800e4ec:	f7f4 ffe4 	bl	80034b8 <HAL_SPI_RxCpltCallback>
 800e4f0:	e757      	b.n	800e3a2 <HAL_SPI_IRQHandler+0xda>
 800e4f2:	bf00      	nop
 800e4f4:	fffffc94 	.word	0xfffffc94
 800e4f8:	0800e2a9 	.word	0x0800e2a9

0800e4fc <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e4fc:	680b      	ldr	r3, [r1, #0]
{
 800e4fe:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800e500:	b9d3      	cbnz	r3, 800e538 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e502:	6804      	ldr	r4, [r0, #0]
 800e504:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800e508:	684a      	ldr	r2, [r1, #4]
 800e50a:	4023      	ands	r3, r4
 800e50c:	4313      	orrs	r3, r2
 800e50e:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800e512:	4323      	orrs	r3, r4
 800e514:	4313      	orrs	r3, r2
 800e516:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800e51a:	4323      	orrs	r3, r4
 800e51c:	4313      	orrs	r3, r2
 800e51e:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800e522:	4323      	orrs	r3, r4
 800e524:	4313      	orrs	r3, r2
 800e526:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800e52a:	4323      	orrs	r3, r4
 800e52c:	4313      	orrs	r3, r2
 800e52e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800e530:	2000      	movs	r0, #0
 800e532:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e536:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e538:	6802      	ldr	r2, [r0, #0]
 800e53a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800e53e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800e542:	4322      	orrs	r2, r4
 800e544:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800e546:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e548:	4b0a      	ldr	r3, [pc, #40]	; (800e574 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800e54a:	4322      	orrs	r2, r4
 800e54c:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800e54e:	6842      	ldr	r2, [r0, #4]
 800e550:	4013      	ands	r3, r2
 800e552:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800e556:	4323      	orrs	r3, r4
 800e558:	4313      	orrs	r3, r2
 800e55a:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 800e55e:	4323      	orrs	r3, r4
 800e560:	4313      	orrs	r3, r2
 800e562:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800e566:	4323      	orrs	r3, r4
 800e568:	4313      	orrs	r3, r2
 800e56a:	6043      	str	r3, [r0, #4]
}
 800e56c:	2000      	movs	r0, #0
 800e56e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e572:	4770      	bx	lr
 800e574:	ffff8000 	.word	0xffff8000

0800e578 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800e578:	b530      	push	{r4, r5, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800e57a:	bb02      	cbnz	r2, 800e5be <FMC_SDRAM_Timing_Init+0x46>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e57c:	6883      	ldr	r3, [r0, #8]
 800e57e:	e9d1 2400 	ldrd	r2, r4, [r1]
 800e582:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e586:	3c01      	subs	r4, #1
 800e588:	3a01      	subs	r2, #1
 800e58a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800e58e:	4313      	orrs	r3, r2
 800e590:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800e594:	3a01      	subs	r2, #1
 800e596:	3c01      	subs	r4, #1
 800e598:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e59c:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
 800e5a0:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
 800e5a4:	6989      	ldr	r1, [r1, #24]
 800e5a6:	3b01      	subs	r3, #1
 800e5a8:	3c01      	subs	r4, #1
 800e5aa:	3901      	subs	r1, #1
 800e5ac:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800e5b0:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800e5b4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800e5b8:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800e5ba:	2000      	movs	r0, #0
 800e5bc:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800e5be:	6885      	ldr	r5, [r0, #8]
 800e5c0:	68ca      	ldr	r2, [r1, #12]
 800e5c2:	4b13      	ldr	r3, [pc, #76]	; (800e610 <FMC_SDRAM_Timing_Init+0x98>)
 800e5c4:	1e54      	subs	r4, r2, #1
 800e5c6:	694a      	ldr	r2, [r1, #20]
 800e5c8:	402b      	ands	r3, r5
 800e5ca:	3a01      	subs	r2, #1
 800e5cc:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 800e5d0:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800e5d4:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800e5d6:	68c3      	ldr	r3, [r0, #12]
 800e5d8:	e9d1 4200 	ldrd	r4, r2, [r1]
 800e5dc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e5e0:	3a01      	subs	r2, #1
 800e5e2:	3c01      	subs	r4, #1
 800e5e4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800e5e8:	ea43 0204 	orr.w	r2, r3, r4
 800e5ec:	688c      	ldr	r4, [r1, #8]
 800e5ee:	690b      	ldr	r3, [r1, #16]
 800e5f0:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 800e5f4:	6989      	ldr	r1, [r1, #24]
 800e5f6:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800e5fa:	ea42 230e 	orr.w	r3, r2, lr, lsl #8
 800e5fe:	3901      	subs	r1, #1
 800e600:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800e604:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800e608:	60c3      	str	r3, [r0, #12]
}
 800e60a:	2000      	movs	r0, #0
 800e60c:	bd30      	pop	{r4, r5, pc}
 800e60e:	bf00      	nop
 800e610:	ff0f0fff 	.word	0xff0f0fff

0800e614 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800e614:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e616:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 800e61a:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e61c:	6900      	ldr	r0, [r0, #16]
 800e61e:	4323      	orrs	r3, r4
 800e620:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 800e624:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800e628:	4c05      	ldr	r4, [pc, #20]	; (800e640 <FMC_SDRAM_SendCommand+0x2c>)
 800e62a:	3901      	subs	r1, #1
 800e62c:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800e62e:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800e630:	4323      	orrs	r3, r4
 800e632:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800e636:	6113      	str	r3, [r2, #16]
}
 800e638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e63c:	4770      	bx	lr
 800e63e:	bf00      	nop
 800e640:	ffc00000 	.word	0xffc00000

0800e644 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800e644:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800e646:	4b05      	ldr	r3, [pc, #20]	; (800e65c <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800e648:	2000      	movs	r0, #0
{
 800e64a:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800e64c:	6954      	ldr	r4, [r2, #20]
 800e64e:	4023      	ands	r3, r4
 800e650:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800e654:	6151      	str	r1, [r2, #20]
}
 800e656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e65a:	4770      	bx	lr
 800e65c:	ffffc001 	.word	0xffffc001

0800e660 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800e660:	b084      	sub	sp, #16
 800e662:	b410      	push	{r4}
 800e664:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800e668:	4614      	mov	r4, r2
{
 800e66a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800e66e:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800e670:	9904      	ldr	r1, [sp, #16]
{
 800e672:	4602      	mov	r2, r0
             Init.BusWide             | \
 800e674:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800e676:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e678:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800e67a:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800e67c:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800e67e:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800e680:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800e682:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800e684:	4903      	ldr	r1, [pc, #12]	; (800e694 <SDMMC_Init+0x34>)
 800e686:	4021      	ands	r1, r4
 800e688:	430b      	orrs	r3, r1
 800e68a:	6053      	str	r3, [r2, #4]
}
 800e68c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e690:	b004      	add	sp, #16
 800e692:	4770      	bx	lr
 800e694:	ffc02c00 	.word	0xffc02c00

0800e698 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800e698:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800e69c:	4770      	bx	lr
 800e69e:	bf00      	nop

0800e6a0 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800e6a0:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800e6a2:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800e6a4:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800e6a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800e6aa:	4770      	bx	lr

0800e6ac <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800e6ac:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800e6ae:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800e6b0:	681a      	ldr	r2, [r3, #0]
 800e6b2:	f042 0203 	orr.w	r2, r2, #3
 800e6b6:	601a      	str	r2, [r3, #0]
}
 800e6b8:	4770      	bx	lr
 800e6ba:	bf00      	nop

0800e6bc <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800e6bc:	6800      	ldr	r0, [r0, #0]
}
 800e6be:	f000 0003 	and.w	r0, r0, #3
 800e6c2:	4770      	bx	lr

0800e6c4 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800e6c4:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800e6c6:	5840      	ldr	r0, [r0, r1]
}
 800e6c8:	4770      	bx	lr
 800e6ca:	bf00      	nop

0800e6cc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800e6cc:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e6ce:	680b      	ldr	r3, [r1, #0]
{
 800e6d0:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800e6d2:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800e6d4:	684b      	ldr	r3, [r1, #4]
 800e6d6:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
 800e6d8:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e6da:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800e6dc:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800e6e0:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 800e6e2:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e6e4:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
 800e6e8:	2000      	movs	r0, #0
                       Data->TransferDir   | \
 800e6ea:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800e6ec:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e6ee:	430b      	orrs	r3, r1
 800e6f0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800e6f2:	bc30      	pop	{r4, r5}
 800e6f4:	4770      	bx	lr
 800e6f6:	bf00      	nop

0800e6f8 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e6f8:	4a4c      	ldr	r2, [pc, #304]	; (800e82c <SDMMC_CmdBlockLength+0x134>)
 800e6fa:	4b4d      	ldr	r3, [pc, #308]	; (800e830 <SDMMC_CmdBlockLength+0x138>)
{
 800e6fc:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e6fe:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e700:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e702:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e706:	68c1      	ldr	r1, [r0, #12]
 800e708:	4c4a      	ldr	r4, [pc, #296]	; (800e834 <SDMMC_CmdBlockLength+0x13c>)
 800e70a:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e70e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e710:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e712:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e716:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e718:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e71c:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
 800e71e:	b14a      	cbz	r2, 800e734 <SDMMC_CmdBlockLength+0x3c>
 800e720:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e722:	4945      	ldr	r1, [pc, #276]	; (800e838 <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
 800e724:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e726:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e728:	420a      	tst	r2, r1
 800e72a:	d001      	beq.n	800e730 <SDMMC_CmdBlockLength+0x38>
 800e72c:	0492      	lsls	r2, r2, #18
 800e72e:	d507      	bpl.n	800e740 <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
 800e730:	1c5c      	adds	r4, r3, #1
 800e732:	d1f7      	bne.n	800e724 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800e734:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e738:	4618      	mov	r0, r3
 800e73a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e73e:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e740:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e742:	075c      	lsls	r4, r3, #29
 800e744:	d43d      	bmi.n	800e7c2 <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e746:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e748:	f013 0301 	ands.w	r3, r3, #1
 800e74c:	d134      	bne.n	800e7b8 <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e74e:	4b3b      	ldr	r3, [pc, #236]	; (800e83c <SDMMC_CmdBlockLength+0x144>)
 800e750:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e752:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e754:	b2db      	uxtb	r3, r3
 800e756:	2b10      	cmp	r3, #16
 800e758:	d131      	bne.n	800e7be <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
 800e75a:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e75c:	4b38      	ldr	r3, [pc, #224]	; (800e840 <SDMMC_CmdBlockLength+0x148>)
 800e75e:	4013      	ands	r3, r2
 800e760:	2b00      	cmp	r3, #0
 800e762:	d0e9      	beq.n	800e738 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e764:	2a00      	cmp	r2, #0
 800e766:	db30      	blt.n	800e7ca <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e768:	0051      	lsls	r1, r2, #1
 800e76a:	d431      	bmi.n	800e7d0 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e76c:	0094      	lsls	r4, r2, #2
 800e76e:	d431      	bmi.n	800e7d4 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e770:	00d0      	lsls	r0, r2, #3
 800e772:	d431      	bmi.n	800e7d8 <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e774:	0111      	lsls	r1, r2, #4
 800e776:	d432      	bmi.n	800e7de <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e778:	0154      	lsls	r4, r2, #5
 800e77a:	d433      	bmi.n	800e7e4 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e77c:	01d0      	lsls	r0, r2, #7
 800e77e:	d434      	bmi.n	800e7ea <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e780:	0211      	lsls	r1, r2, #8
 800e782:	d435      	bmi.n	800e7f0 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e784:	0254      	lsls	r4, r2, #9
 800e786:	d436      	bmi.n	800e7f6 <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e788:	0290      	lsls	r0, r2, #10
 800e78a:	d440      	bmi.n	800e80e <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e78c:	02d1      	lsls	r1, r2, #11
 800e78e:	d43b      	bmi.n	800e808 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e790:	0354      	lsls	r4, r2, #13
 800e792:	d436      	bmi.n	800e802 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e794:	0390      	lsls	r0, r2, #14
 800e796:	d431      	bmi.n	800e7fc <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e798:	03d1      	lsls	r1, r2, #15
 800e79a:	d444      	bmi.n	800e826 <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e79c:	0414      	lsls	r4, r2, #16
 800e79e:	d43f      	bmi.n	800e820 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e7a0:	0450      	lsls	r0, r2, #17
 800e7a2:	d43a      	bmi.n	800e81a <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e7a4:	0491      	lsls	r1, r2, #18
 800e7a6:	d435      	bmi.n	800e814 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e7a8:	f012 0f08 	tst.w	r2, #8
 800e7ac:	bf14      	ite	ne
 800e7ae:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800e7b2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800e7b6:	e7bf      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e7b8:	2201      	movs	r2, #1
 800e7ba:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7bc:	e7bc      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e7ba      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e7c2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7c4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e7c6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7c8:	e7b6      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e7ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e7ce:	e7b3      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e7d0:	2340      	movs	r3, #64	; 0x40
 800e7d2:	e7b1      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e7d4:	2380      	movs	r3, #128	; 0x80
 800e7d6:	e7af      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e7d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e7dc:	e7ac      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e7de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e7e2:	e7a9      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e7e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7e8:	e7a6      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e7ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e7ee:	e7a3      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e7f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e7f4:	e7a0      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e7f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e7fa:	e79d      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e7fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e800:	e79a      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e802:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e806:	e797      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
 800e808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e80c:	e794      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e80e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e812:	e791      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800e814:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e818:	e78e      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e81a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e81e:	e78b      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e820:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e824:	e788      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e826:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e82a:	e785      	b.n	800e738 <SDMMC_CmdBlockLength+0x40>
 800e82c:	20000094 	.word	0x20000094
 800e830:	10624dd3 	.word	0x10624dd3
 800e834:	fffee0c0 	.word	0xfffee0c0
 800e838:	00200045 	.word	0x00200045
 800e83c:	002000c5 	.word	0x002000c5
 800e840:	fdffe008 	.word	0xfdffe008

0800e844 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e844:	4a4c      	ldr	r2, [pc, #304]	; (800e978 <SDMMC_CmdReadSingleBlock+0x134>)
 800e846:	4b4d      	ldr	r3, [pc, #308]	; (800e97c <SDMMC_CmdReadSingleBlock+0x138>)
{
 800e848:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e84a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e84c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e84e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e852:	68c1      	ldr	r1, [r0, #12]
 800e854:	4c4a      	ldr	r4, [pc, #296]	; (800e980 <SDMMC_CmdReadSingleBlock+0x13c>)
 800e856:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e85a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e85c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e85e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e862:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e864:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e868:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e86a:	b14a      	cbz	r2, 800e880 <SDMMC_CmdReadSingleBlock+0x3c>
 800e86c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e86e:	4945      	ldr	r1, [pc, #276]	; (800e984 <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800e870:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e872:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e874:	420a      	tst	r2, r1
 800e876:	d001      	beq.n	800e87c <SDMMC_CmdReadSingleBlock+0x38>
 800e878:	0492      	lsls	r2, r2, #18
 800e87a:	d507      	bpl.n	800e88c <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
 800e87c:	1c5c      	adds	r4, r3, #1
 800e87e:	d1f7      	bne.n	800e870 <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800e880:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e884:	4618      	mov	r0, r3
 800e886:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e88a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e88c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e88e:	075c      	lsls	r4, r3, #29
 800e890:	d43d      	bmi.n	800e90e <SDMMC_CmdReadSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e892:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e894:	f013 0301 	ands.w	r3, r3, #1
 800e898:	d134      	bne.n	800e904 <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e89a:	4b3b      	ldr	r3, [pc, #236]	; (800e988 <SDMMC_CmdReadSingleBlock+0x144>)
 800e89c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e89e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e8a0:	b2db      	uxtb	r3, r3
 800e8a2:	2b11      	cmp	r3, #17
 800e8a4:	d131      	bne.n	800e90a <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800e8a6:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e8a8:	4b38      	ldr	r3, [pc, #224]	; (800e98c <SDMMC_CmdReadSingleBlock+0x148>)
 800e8aa:	4013      	ands	r3, r2
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d0e9      	beq.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e8b0:	2a00      	cmp	r2, #0
 800e8b2:	db30      	blt.n	800e916 <SDMMC_CmdReadSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e8b4:	0051      	lsls	r1, r2, #1
 800e8b6:	d431      	bmi.n	800e91c <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e8b8:	0094      	lsls	r4, r2, #2
 800e8ba:	d431      	bmi.n	800e920 <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e8bc:	00d0      	lsls	r0, r2, #3
 800e8be:	d431      	bmi.n	800e924 <SDMMC_CmdReadSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e8c0:	0111      	lsls	r1, r2, #4
 800e8c2:	d432      	bmi.n	800e92a <SDMMC_CmdReadSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e8c4:	0154      	lsls	r4, r2, #5
 800e8c6:	d433      	bmi.n	800e930 <SDMMC_CmdReadSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e8c8:	01d0      	lsls	r0, r2, #7
 800e8ca:	d434      	bmi.n	800e936 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e8cc:	0211      	lsls	r1, r2, #8
 800e8ce:	d435      	bmi.n	800e93c <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e8d0:	0254      	lsls	r4, r2, #9
 800e8d2:	d436      	bmi.n	800e942 <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e8d4:	0290      	lsls	r0, r2, #10
 800e8d6:	d440      	bmi.n	800e95a <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e8d8:	02d1      	lsls	r1, r2, #11
 800e8da:	d43b      	bmi.n	800e954 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e8dc:	0354      	lsls	r4, r2, #13
 800e8de:	d436      	bmi.n	800e94e <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e8e0:	0390      	lsls	r0, r2, #14
 800e8e2:	d431      	bmi.n	800e948 <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e8e4:	03d1      	lsls	r1, r2, #15
 800e8e6:	d444      	bmi.n	800e972 <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e8e8:	0414      	lsls	r4, r2, #16
 800e8ea:	d43f      	bmi.n	800e96c <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e8ec:	0450      	lsls	r0, r2, #17
 800e8ee:	d43a      	bmi.n	800e966 <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e8f0:	0491      	lsls	r1, r2, #18
 800e8f2:	d435      	bmi.n	800e960 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e8f4:	f012 0f08 	tst.w	r2, #8
 800e8f8:	bf14      	ite	ne
 800e8fa:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800e8fe:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800e902:	e7bf      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800e904:	2201      	movs	r2, #1
 800e906:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e908:	e7bc      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e90a:	2301      	movs	r3, #1
 800e90c:	e7ba      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e90e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e910:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800e912:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e914:	e7b6      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e91a:	e7b3      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e91c:	2340      	movs	r3, #64	; 0x40
 800e91e:	e7b1      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e920:	2380      	movs	r3, #128	; 0x80
 800e922:	e7af      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e924:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e928:	e7ac      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e92a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e92e:	e7a9      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e934:	e7a6      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e93a:	e7a3      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e93c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e940:	e7a0      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e946:	e79d      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e948:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e94c:	e79a      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e94e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e952:	e797      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800e954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e958:	e794      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e95a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e95e:	e791      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800e960:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e964:	e78e      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e966:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e96a:	e78b      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e96c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e970:	e788      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e972:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e976:	e785      	b.n	800e884 <SDMMC_CmdReadSingleBlock+0x40>
 800e978:	20000094 	.word	0x20000094
 800e97c:	10624dd3 	.word	0x10624dd3
 800e980:	fffee0c0 	.word	0xfffee0c0
 800e984:	00200045 	.word	0x00200045
 800e988:	002000c5 	.word	0x002000c5
 800e98c:	fdffe008 	.word	0xfdffe008

0800e990 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e990:	4a4c      	ldr	r2, [pc, #304]	; (800eac4 <SDMMC_CmdReadMultiBlock+0x134>)
 800e992:	4b4d      	ldr	r3, [pc, #308]	; (800eac8 <SDMMC_CmdReadMultiBlock+0x138>)
{
 800e994:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e996:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800e998:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e99a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e99e:	68c1      	ldr	r1, [r0, #12]
 800e9a0:	4c4a      	ldr	r4, [pc, #296]	; (800eacc <SDMMC_CmdReadMultiBlock+0x13c>)
 800e9a2:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e9a6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e9a8:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e9aa:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e9ae:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800e9b0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800e9b4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800e9b6:	b14a      	cbz	r2, 800e9cc <SDMMC_CmdReadMultiBlock+0x3c>
 800e9b8:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800e9ba:	4945      	ldr	r1, [pc, #276]	; (800ead0 <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800e9bc:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800e9be:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800e9c0:	420a      	tst	r2, r1
 800e9c2:	d001      	beq.n	800e9c8 <SDMMC_CmdReadMultiBlock+0x38>
 800e9c4:	0492      	lsls	r2, r2, #18
 800e9c6:	d507      	bpl.n	800e9d8 <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
 800e9c8:	1c5c      	adds	r4, r3, #1
 800e9ca:	d1f7      	bne.n	800e9bc <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800e9cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9d6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800e9d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e9da:	075c      	lsls	r4, r3, #29
 800e9dc:	d43d      	bmi.n	800ea5a <SDMMC_CmdReadMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800e9de:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e9e0:	f013 0301 	ands.w	r3, r3, #1
 800e9e4:	d134      	bne.n	800ea50 <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800e9e6:	4b3b      	ldr	r3, [pc, #236]	; (800ead4 <SDMMC_CmdReadMultiBlock+0x144>)
 800e9e8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800e9ea:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	2b12      	cmp	r3, #18
 800e9f0:	d131      	bne.n	800ea56 <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800e9f2:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e9f4:	4b38      	ldr	r3, [pc, #224]	; (800ead8 <SDMMC_CmdReadMultiBlock+0x148>)
 800e9f6:	4013      	ands	r3, r2
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d0e9      	beq.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e9fc:	2a00      	cmp	r2, #0
 800e9fe:	db30      	blt.n	800ea62 <SDMMC_CmdReadMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ea00:	0051      	lsls	r1, r2, #1
 800ea02:	d431      	bmi.n	800ea68 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ea04:	0094      	lsls	r4, r2, #2
 800ea06:	d431      	bmi.n	800ea6c <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ea08:	00d0      	lsls	r0, r2, #3
 800ea0a:	d431      	bmi.n	800ea70 <SDMMC_CmdReadMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ea0c:	0111      	lsls	r1, r2, #4
 800ea0e:	d432      	bmi.n	800ea76 <SDMMC_CmdReadMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ea10:	0154      	lsls	r4, r2, #5
 800ea12:	d433      	bmi.n	800ea7c <SDMMC_CmdReadMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ea14:	01d0      	lsls	r0, r2, #7
 800ea16:	d434      	bmi.n	800ea82 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ea18:	0211      	lsls	r1, r2, #8
 800ea1a:	d435      	bmi.n	800ea88 <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ea1c:	0254      	lsls	r4, r2, #9
 800ea1e:	d436      	bmi.n	800ea8e <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ea20:	0290      	lsls	r0, r2, #10
 800ea22:	d440      	bmi.n	800eaa6 <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ea24:	02d1      	lsls	r1, r2, #11
 800ea26:	d43b      	bmi.n	800eaa0 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ea28:	0354      	lsls	r4, r2, #13
 800ea2a:	d436      	bmi.n	800ea9a <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ea2c:	0390      	lsls	r0, r2, #14
 800ea2e:	d431      	bmi.n	800ea94 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ea30:	03d1      	lsls	r1, r2, #15
 800ea32:	d444      	bmi.n	800eabe <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ea34:	0414      	lsls	r4, r2, #16
 800ea36:	d43f      	bmi.n	800eab8 <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ea38:	0450      	lsls	r0, r2, #17
 800ea3a:	d43a      	bmi.n	800eab2 <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ea3c:	0491      	lsls	r1, r2, #18
 800ea3e:	d435      	bmi.n	800eaac <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ea40:	f012 0f08 	tst.w	r2, #8
 800ea44:	bf14      	ite	ne
 800ea46:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800ea4a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800ea4e:	e7bf      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ea50:	2201      	movs	r2, #1
 800ea52:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea54:	e7bc      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ea56:	2301      	movs	r3, #1
 800ea58:	e7ba      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea5a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea5c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ea5e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ea60:	e7b6      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ea62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ea66:	e7b3      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ea68:	2340      	movs	r3, #64	; 0x40
 800ea6a:	e7b1      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ea6c:	2380      	movs	r3, #128	; 0x80
 800ea6e:	e7af      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ea70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ea74:	e7ac      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ea76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ea7a:	e7a9      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ea7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea80:	e7a6      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ea82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea86:	e7a3      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ea88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea8c:	e7a0      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ea8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ea92:	e79d      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ea94:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ea98:	e79a      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ea9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ea9e:	e797      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800eaa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eaa4:	e794      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800eaa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800eaaa:	e791      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800eaac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800eab0:	e78e      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800eab2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800eab6:	e78b      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800eab8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800eabc:	e788      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800eabe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800eac2:	e785      	b.n	800e9d0 <SDMMC_CmdReadMultiBlock+0x40>
 800eac4:	20000094 	.word	0x20000094
 800eac8:	10624dd3 	.word	0x10624dd3
 800eacc:	fffee0c0 	.word	0xfffee0c0
 800ead0:	00200045 	.word	0x00200045
 800ead4:	002000c5 	.word	0x002000c5
 800ead8:	fdffe008 	.word	0xfdffe008

0800eadc <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800eadc:	4a4c      	ldr	r2, [pc, #304]	; (800ec10 <SDMMC_CmdWriteSingleBlock+0x134>)
 800eade:	4b4d      	ldr	r3, [pc, #308]	; (800ec14 <SDMMC_CmdWriteSingleBlock+0x138>)
{
 800eae0:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800eae2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800eae4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800eae6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eaea:	68c1      	ldr	r1, [r0, #12]
 800eaec:	4c4a      	ldr	r4, [pc, #296]	; (800ec18 <SDMMC_CmdWriteSingleBlock+0x13c>)
 800eaee:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800eaf2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eaf4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800eaf6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eafa:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800eafc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eb00:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800eb02:	b14a      	cbz	r2, 800eb18 <SDMMC_CmdWriteSingleBlock+0x3c>
 800eb04:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800eb06:	4945      	ldr	r1, [pc, #276]	; (800ec1c <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800eb08:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800eb0a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800eb0c:	420a      	tst	r2, r1
 800eb0e:	d001      	beq.n	800eb14 <SDMMC_CmdWriteSingleBlock+0x38>
 800eb10:	0492      	lsls	r2, r2, #18
 800eb12:	d507      	bpl.n	800eb24 <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
 800eb14:	1c5c      	adds	r4, r3, #1
 800eb16:	d1f7      	bne.n	800eb08 <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800eb18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb22:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800eb24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800eb26:	075c      	lsls	r4, r3, #29
 800eb28:	d43d      	bmi.n	800eba6 <SDMMC_CmdWriteSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800eb2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800eb2c:	f013 0301 	ands.w	r3, r3, #1
 800eb30:	d134      	bne.n	800eb9c <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800eb32:	4b3b      	ldr	r3, [pc, #236]	; (800ec20 <SDMMC_CmdWriteSingleBlock+0x144>)
 800eb34:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800eb36:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	2b18      	cmp	r3, #24
 800eb3c:	d131      	bne.n	800eba2 <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800eb3e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800eb40:	4b38      	ldr	r3, [pc, #224]	; (800ec24 <SDMMC_CmdWriteSingleBlock+0x148>)
 800eb42:	4013      	ands	r3, r2
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d0e9      	beq.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800eb48:	2a00      	cmp	r2, #0
 800eb4a:	db30      	blt.n	800ebae <SDMMC_CmdWriteSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800eb4c:	0051      	lsls	r1, r2, #1
 800eb4e:	d431      	bmi.n	800ebb4 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800eb50:	0094      	lsls	r4, r2, #2
 800eb52:	d431      	bmi.n	800ebb8 <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800eb54:	00d0      	lsls	r0, r2, #3
 800eb56:	d431      	bmi.n	800ebbc <SDMMC_CmdWriteSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800eb58:	0111      	lsls	r1, r2, #4
 800eb5a:	d432      	bmi.n	800ebc2 <SDMMC_CmdWriteSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800eb5c:	0154      	lsls	r4, r2, #5
 800eb5e:	d433      	bmi.n	800ebc8 <SDMMC_CmdWriteSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800eb60:	01d0      	lsls	r0, r2, #7
 800eb62:	d434      	bmi.n	800ebce <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800eb64:	0211      	lsls	r1, r2, #8
 800eb66:	d435      	bmi.n	800ebd4 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800eb68:	0254      	lsls	r4, r2, #9
 800eb6a:	d436      	bmi.n	800ebda <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800eb6c:	0290      	lsls	r0, r2, #10
 800eb6e:	d440      	bmi.n	800ebf2 <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800eb70:	02d1      	lsls	r1, r2, #11
 800eb72:	d43b      	bmi.n	800ebec <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800eb74:	0354      	lsls	r4, r2, #13
 800eb76:	d436      	bmi.n	800ebe6 <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800eb78:	0390      	lsls	r0, r2, #14
 800eb7a:	d431      	bmi.n	800ebe0 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800eb7c:	03d1      	lsls	r1, r2, #15
 800eb7e:	d444      	bmi.n	800ec0a <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800eb80:	0414      	lsls	r4, r2, #16
 800eb82:	d43f      	bmi.n	800ec04 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800eb84:	0450      	lsls	r0, r2, #17
 800eb86:	d43a      	bmi.n	800ebfe <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800eb88:	0491      	lsls	r1, r2, #18
 800eb8a:	d435      	bmi.n	800ebf8 <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800eb8c:	f012 0f08 	tst.w	r2, #8
 800eb90:	bf14      	ite	ne
 800eb92:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800eb96:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800eb9a:	e7bf      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800eb9c:	2201      	movs	r2, #1
 800eb9e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eba0:	e7bc      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eba2:	2301      	movs	r3, #1
 800eba4:	e7ba      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800eba6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eba8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ebaa:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ebac:	e7b6      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ebae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ebb2:	e7b3      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ebb4:	2340      	movs	r3, #64	; 0x40
 800ebb6:	e7b1      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ebb8:	2380      	movs	r3, #128	; 0x80
 800ebba:	e7af      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ebbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ebc0:	e7ac      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ebc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ebc6:	e7a9      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ebc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebcc:	e7a6      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ebce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ebd2:	e7a3      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ebd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ebd8:	e7a0      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ebda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ebde:	e79d      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ebe0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ebe4:	e79a      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ebe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ebea:	e797      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800ebec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ebf0:	e794      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ebf2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ebf6:	e791      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800ebf8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ebfc:	e78e      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ebfe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ec02:	e78b      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ec04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ec08:	e788      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ec0a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ec0e:	e785      	b.n	800eb1c <SDMMC_CmdWriteSingleBlock+0x40>
 800ec10:	20000094 	.word	0x20000094
 800ec14:	10624dd3 	.word	0x10624dd3
 800ec18:	fffee0c0 	.word	0xfffee0c0
 800ec1c:	00200045 	.word	0x00200045
 800ec20:	002000c5 	.word	0x002000c5
 800ec24:	fdffe008 	.word	0xfdffe008

0800ec28 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ec28:	4a4c      	ldr	r2, [pc, #304]	; (800ed5c <SDMMC_CmdWriteMultiBlock+0x134>)
 800ec2a:	4b4d      	ldr	r3, [pc, #308]	; (800ed60 <SDMMC_CmdWriteMultiBlock+0x138>)
{
 800ec2c:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ec2e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ec30:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ec32:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ec36:	68c1      	ldr	r1, [r0, #12]
 800ec38:	4c4a      	ldr	r4, [pc, #296]	; (800ed64 <SDMMC_CmdWriteMultiBlock+0x13c>)
 800ec3a:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ec3e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ec40:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ec42:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ec46:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ec48:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ec4c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800ec4e:	b14a      	cbz	r2, 800ec64 <SDMMC_CmdWriteMultiBlock+0x3c>
 800ec50:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ec52:	4945      	ldr	r1, [pc, #276]	; (800ed68 <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 800ec54:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800ec56:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800ec58:	420a      	tst	r2, r1
 800ec5a:	d001      	beq.n	800ec60 <SDMMC_CmdWriteMultiBlock+0x38>
 800ec5c:	0492      	lsls	r2, r2, #18
 800ec5e:	d507      	bpl.n	800ec70 <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
 800ec60:	1c5c      	adds	r4, r3, #1
 800ec62:	d1f7      	bne.n	800ec54 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800ec64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec6e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ec70:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ec72:	075c      	lsls	r4, r3, #29
 800ec74:	d43d      	bmi.n	800ecf2 <SDMMC_CmdWriteMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ec76:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ec78:	f013 0301 	ands.w	r3, r3, #1
 800ec7c:	d134      	bne.n	800ece8 <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ec7e:	4b3b      	ldr	r3, [pc, #236]	; (800ed6c <SDMMC_CmdWriteMultiBlock+0x144>)
 800ec80:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ec82:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ec84:	b2db      	uxtb	r3, r3
 800ec86:	2b19      	cmp	r3, #25
 800ec88:	d131      	bne.n	800ecee <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800ec8a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ec8c:	4b38      	ldr	r3, [pc, #224]	; (800ed70 <SDMMC_CmdWriteMultiBlock+0x148>)
 800ec8e:	4013      	ands	r3, r2
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d0e9      	beq.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ec94:	2a00      	cmp	r2, #0
 800ec96:	db30      	blt.n	800ecfa <SDMMC_CmdWriteMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ec98:	0051      	lsls	r1, r2, #1
 800ec9a:	d431      	bmi.n	800ed00 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ec9c:	0094      	lsls	r4, r2, #2
 800ec9e:	d431      	bmi.n	800ed04 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800eca0:	00d0      	lsls	r0, r2, #3
 800eca2:	d431      	bmi.n	800ed08 <SDMMC_CmdWriteMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800eca4:	0111      	lsls	r1, r2, #4
 800eca6:	d432      	bmi.n	800ed0e <SDMMC_CmdWriteMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800eca8:	0154      	lsls	r4, r2, #5
 800ecaa:	d433      	bmi.n	800ed14 <SDMMC_CmdWriteMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ecac:	01d0      	lsls	r0, r2, #7
 800ecae:	d434      	bmi.n	800ed1a <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ecb0:	0211      	lsls	r1, r2, #8
 800ecb2:	d435      	bmi.n	800ed20 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ecb4:	0254      	lsls	r4, r2, #9
 800ecb6:	d436      	bmi.n	800ed26 <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ecb8:	0290      	lsls	r0, r2, #10
 800ecba:	d440      	bmi.n	800ed3e <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ecbc:	02d1      	lsls	r1, r2, #11
 800ecbe:	d43b      	bmi.n	800ed38 <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ecc0:	0354      	lsls	r4, r2, #13
 800ecc2:	d436      	bmi.n	800ed32 <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ecc4:	0390      	lsls	r0, r2, #14
 800ecc6:	d431      	bmi.n	800ed2c <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ecc8:	03d1      	lsls	r1, r2, #15
 800ecca:	d444      	bmi.n	800ed56 <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800eccc:	0414      	lsls	r4, r2, #16
 800ecce:	d43f      	bmi.n	800ed50 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ecd0:	0450      	lsls	r0, r2, #17
 800ecd2:	d43a      	bmi.n	800ed4a <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ecd4:	0491      	lsls	r1, r2, #18
 800ecd6:	d435      	bmi.n	800ed44 <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ecd8:	f012 0f08 	tst.w	r2, #8
 800ecdc:	bf14      	ite	ne
 800ecde:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800ece2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800ece6:	e7bf      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ece8:	2201      	movs	r2, #1
 800ecea:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ecec:	e7bc      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	e7ba      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ecf2:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ecf4:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ecf6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ecf8:	e7b6      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ecfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ecfe:	e7b3      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ed00:	2340      	movs	r3, #64	; 0x40
 800ed02:	e7b1      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ed04:	2380      	movs	r3, #128	; 0x80
 800ed06:	e7af      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ed08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed0c:	e7ac      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ed0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed12:	e7a9      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ed14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed18:	e7a6      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ed1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed1e:	e7a3      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ed20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed24:	e7a0      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ed26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed2a:	e79d      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ed2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ed30:	e79a      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ed32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ed36:	e797      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 800ed38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed3c:	e794      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ed3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ed42:	e791      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800ed44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ed48:	e78e      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ed4a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ed4e:	e78b      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ed50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ed54:	e788      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ed56:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ed5a:	e785      	b.n	800ec68 <SDMMC_CmdWriteMultiBlock+0x40>
 800ed5c:	20000094 	.word	0x20000094
 800ed60:	10624dd3 	.word	0x10624dd3
 800ed64:	fffee0c0 	.word	0xfffee0c0
 800ed68:	00200045 	.word	0x00200045
 800ed6c:	002000c5 	.word	0x002000c5
 800ed70:	fdffe008 	.word	0xfdffe008

0800ed74 <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ed74:	4b7d      	ldr	r3, [pc, #500]	; (800ef6c <SDMMC_CmdStopTransfer+0x1f8>)
 800ed76:	497e      	ldr	r1, [pc, #504]	; (800ef70 <SDMMC_CmdStopTransfer+0x1fc>)
{
 800ed78:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ed7a:	681a      	ldr	r2, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 800ed7c:	2400      	movs	r4, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ed7e:	4b7d      	ldr	r3, [pc, #500]	; (800ef74 <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ed80:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ed84:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ed86:	4d7c      	ldr	r5, [pc, #496]	; (800ef78 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ed88:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ed8c:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ed8e:	60c1      	str	r1, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ed90:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ed92:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ed96:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800ed9a:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ed9c:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 800eda0:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800eda2:	68c4      	ldr	r4, [r0, #12]
 800eda4:	4023      	ands	r3, r4
 800eda6:	4319      	orrs	r1, r3
 800eda8:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 800edaa:	b14a      	cbz	r2, 800edc0 <SDMMC_CmdStopTransfer+0x4c>
 800edac:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800edae:	4973      	ldr	r1, [pc, #460]	; (800ef7c <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
 800edb0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800edb2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800edb4:	420a      	tst	r2, r1
 800edb6:	d001      	beq.n	800edbc <SDMMC_CmdStopTransfer+0x48>
 800edb8:	0492      	lsls	r2, r2, #18
 800edba:	d50a      	bpl.n	800edd2 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 800edbc:	1c5c      	adds	r4, r3, #1
 800edbe:	d1f7      	bne.n	800edb0 <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800edc0:	68c2      	ldr	r2, [r0, #12]
 800edc2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800edc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800edca:	60c2      	str	r2, [r0, #12]
}
 800edcc:	4618      	mov	r0, r3
 800edce:	bc30      	pop	{r4, r5}
 800edd0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800edd2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800edd4:	075b      	lsls	r3, r3, #29
 800edd6:	d454      	bmi.n	800ee82 <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800edd8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800edda:	f013 0301 	ands.w	r3, r3, #1
 800edde:	d13c      	bne.n	800ee5a <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ede0:	4a67      	ldr	r2, [pc, #412]	; (800ef80 <SDMMC_CmdStopTransfer+0x20c>)
 800ede2:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800ede4:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ede6:	b2d2      	uxtb	r2, r2
 800ede8:	2a0c      	cmp	r2, #12
 800edea:	d144      	bne.n	800ee76 <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
 800edec:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800edee:	4965      	ldr	r1, [pc, #404]	; (800ef84 <SDMMC_CmdStopTransfer+0x210>)
 800edf0:	4011      	ands	r1, r2
 800edf2:	2900      	cmp	r1, #0
 800edf4:	d038      	beq.n	800ee68 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800edf6:	2a00      	cmp	r2, #0
 800edf8:	db36      	blt.n	800ee68 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800edfa:	0055      	lsls	r5, r2, #1
 800edfc:	d448      	bmi.n	800ee90 <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800edfe:	0094      	lsls	r4, r2, #2
 800ee00:	d44c      	bmi.n	800ee9c <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ee02:	00d1      	lsls	r1, r2, #3
 800ee04:	d450      	bmi.n	800eea8 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ee06:	0113      	lsls	r3, r2, #4
 800ee08:	d455      	bmi.n	800eeb6 <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ee0a:	0155      	lsls	r5, r2, #5
 800ee0c:	d45a      	bmi.n	800eec4 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ee0e:	01d4      	lsls	r4, r2, #7
 800ee10:	d466      	bmi.n	800eee0 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ee12:	0211      	lsls	r1, r2, #8
 800ee14:	d45d      	bmi.n	800eed2 <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ee16:	0253      	lsls	r3, r2, #9
 800ee18:	d470      	bmi.n	800eefc <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ee1a:	0295      	lsls	r5, r2, #10
 800ee1c:	d467      	bmi.n	800eeee <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ee1e:	02d4      	lsls	r4, r2, #11
 800ee20:	f100 8081 	bmi.w	800ef26 <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ee24:	0351      	lsls	r1, r2, #13
 800ee26:	d477      	bmi.n	800ef18 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ee28:	0393      	lsls	r3, r2, #14
 800ee2a:	d46e      	bmi.n	800ef0a <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ee2c:	03d5      	lsls	r5, r2, #15
 800ee2e:	f100 8096 	bmi.w	800ef5e <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ee32:	0414      	lsls	r4, r2, #16
 800ee34:	f100 8085 	bmi.w	800ef42 <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ee38:	0451      	lsls	r1, r2, #17
 800ee3a:	d47b      	bmi.n	800ef34 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ee3c:	0493      	lsls	r3, r2, #18
 800ee3e:	f100 8087 	bmi.w	800ef50 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ee42:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ee46:	68c2      	ldr	r2, [r0, #12]
 800ee48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ee4c:	bf14      	ite	ne
 800ee4e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ee52:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ee56:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ee58:	e7b8      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ee5e:	68c2      	ldr	r2, [r0, #12]
 800ee60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee64:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ee66:	e7b1      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ee68:	68c2      	ldr	r2, [r0, #12]
 800ee6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee6e:	60c2      	str	r2, [r0, #12]
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	bc30      	pop	{r4, r5}
 800ee74:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ee76:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee78:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ee7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee7e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ee80:	e7a4      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ee82:	2304      	movs	r3, #4
 800ee84:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ee86:	68c2      	ldr	r2, [r0, #12]
 800ee88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee8c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ee8e:	e79d      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ee90:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ee92:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ee94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee98:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ee9a:	e797      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ee9c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ee9e:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eea4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800eea6:	e791      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eea8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800eeaa:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eeae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eeb2:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800eeb4:	e78a      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eeb6:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800eeb8:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eebc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eec0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800eec2:	e783      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eec4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800eec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eeca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eece:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800eed0:	e77c      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eed2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 800eed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eedc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800eede:	e775      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eee0:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800eee2:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eee6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eeea:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800eeec:	e76e      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eeee:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800eef0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eef4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eef8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800eefa:	e767      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800eefc:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 800eefe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ef06:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ef08:	e760      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef0a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ef0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ef14:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ef16:	e759      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef18:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ef1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ef22:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ef24:	e752      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef26:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
 800ef28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ef30:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ef32:	e74b      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef34:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ef36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ef3e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ef40:	e744      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef42:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ef44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ef4c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ef4e:	e73d      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef50:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
 800ef52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ef5a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ef5c:	e736      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef5e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ef60:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ef64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ef68:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ef6a:	e72f      	b.n	800edcc <SDMMC_CmdStopTransfer+0x58>
 800ef6c:	20000094 	.word	0x20000094
 800ef70:	10624dd3 	.word	0x10624dd3
 800ef74:	fffee0c0 	.word	0xfffee0c0
 800ef78:	05f5e100 	.word	0x05f5e100
 800ef7c:	00200045 	.word	0x00200045
 800ef80:	002000c5 	.word	0x002000c5
 800ef84:	fdffe008 	.word	0xfdffe008

0800ef88 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ef88:	4a4c      	ldr	r2, [pc, #304]	; (800f0bc <SDMMC_CmdSelDesel+0x134>)
 800ef8a:	4b4d      	ldr	r3, [pc, #308]	; (800f0c0 <SDMMC_CmdSelDesel+0x138>)
{
 800ef8c:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ef8e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ef90:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ef92:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ef96:	68c1      	ldr	r1, [r0, #12]
 800ef98:	4c4a      	ldr	r4, [pc, #296]	; (800f0c4 <SDMMC_CmdSelDesel+0x13c>)
 800ef9a:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ef9e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800efa0:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800efa2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800efa6:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800efa8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800efac:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800efae:	b14a      	cbz	r2, 800efc4 <SDMMC_CmdSelDesel+0x3c>
 800efb0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800efb2:	4945      	ldr	r1, [pc, #276]	; (800f0c8 <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
 800efb4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800efb6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800efb8:	420a      	tst	r2, r1
 800efba:	d001      	beq.n	800efc0 <SDMMC_CmdSelDesel+0x38>
 800efbc:	0492      	lsls	r2, r2, #18
 800efbe:	d507      	bpl.n	800efd0 <SDMMC_CmdSelDesel+0x48>
    if (count-- == 0U)
 800efc0:	1c5c      	adds	r4, r3, #1
 800efc2:	d1f7      	bne.n	800efb4 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800efc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800efc8:	4618      	mov	r0, r3
 800efca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efce:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800efd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800efd2:	075c      	lsls	r4, r3, #29
 800efd4:	d43d      	bmi.n	800f052 <SDMMC_CmdSelDesel+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800efd6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800efd8:	f013 0301 	ands.w	r3, r3, #1
 800efdc:	d134      	bne.n	800f048 <SDMMC_CmdSelDesel+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800efde:	4b3b      	ldr	r3, [pc, #236]	; (800f0cc <SDMMC_CmdSelDesel+0x144>)
 800efe0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800efe2:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800efe4:	b2db      	uxtb	r3, r3
 800efe6:	2b07      	cmp	r3, #7
 800efe8:	d131      	bne.n	800f04e <SDMMC_CmdSelDesel+0xc6>
  return (*(__IO uint32_t *) tmp);
 800efea:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800efec:	4b38      	ldr	r3, [pc, #224]	; (800f0d0 <SDMMC_CmdSelDesel+0x148>)
 800efee:	4013      	ands	r3, r2
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d0e9      	beq.n	800efc8 <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800eff4:	2a00      	cmp	r2, #0
 800eff6:	db30      	blt.n	800f05a <SDMMC_CmdSelDesel+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800eff8:	0051      	lsls	r1, r2, #1
 800effa:	d431      	bmi.n	800f060 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800effc:	0094      	lsls	r4, r2, #2
 800effe:	d431      	bmi.n	800f064 <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f000:	00d0      	lsls	r0, r2, #3
 800f002:	d431      	bmi.n	800f068 <SDMMC_CmdSelDesel+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f004:	0111      	lsls	r1, r2, #4
 800f006:	d432      	bmi.n	800f06e <SDMMC_CmdSelDesel+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f008:	0154      	lsls	r4, r2, #5
 800f00a:	d433      	bmi.n	800f074 <SDMMC_CmdSelDesel+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f00c:	01d0      	lsls	r0, r2, #7
 800f00e:	d434      	bmi.n	800f07a <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f010:	0211      	lsls	r1, r2, #8
 800f012:	d435      	bmi.n	800f080 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f014:	0254      	lsls	r4, r2, #9
 800f016:	d436      	bmi.n	800f086 <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f018:	0290      	lsls	r0, r2, #10
 800f01a:	d440      	bmi.n	800f09e <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f01c:	02d1      	lsls	r1, r2, #11
 800f01e:	d43b      	bmi.n	800f098 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f020:	0354      	lsls	r4, r2, #13
 800f022:	d436      	bmi.n	800f092 <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f024:	0390      	lsls	r0, r2, #14
 800f026:	d431      	bmi.n	800f08c <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f028:	03d1      	lsls	r1, r2, #15
 800f02a:	d444      	bmi.n	800f0b6 <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f02c:	0414      	lsls	r4, r2, #16
 800f02e:	d43f      	bmi.n	800f0b0 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f030:	0450      	lsls	r0, r2, #17
 800f032:	d43a      	bmi.n	800f0aa <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f034:	0491      	lsls	r1, r2, #18
 800f036:	d435      	bmi.n	800f0a4 <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f038:	f012 0f08 	tst.w	r2, #8
 800f03c:	bf14      	ite	ne
 800f03e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800f042:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800f046:	e7bf      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f048:	2201      	movs	r2, #1
 800f04a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f04c:	e7bc      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f04e:	2301      	movs	r3, #1
 800f050:	e7ba      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f052:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f054:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f056:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f058:	e7b6      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f05a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f05e:	e7b3      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f060:	2340      	movs	r3, #64	; 0x40
 800f062:	e7b1      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f064:	2380      	movs	r3, #128	; 0x80
 800f066:	e7af      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f068:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f06c:	e7ac      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f06e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f072:	e7a9      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f078:	e7a6      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f07a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f07e:	e7a3      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f084:	e7a0      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f08a:	e79d      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f08c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f090:	e79a      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f096:	e797      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 800f098:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f09c:	e794      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f09e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f0a2:	e791      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800f0a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f0a8:	e78e      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f0aa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f0ae:	e78b      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f0b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f0b4:	e788      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f0b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f0ba:	e785      	b.n	800efc8 <SDMMC_CmdSelDesel+0x40>
 800f0bc:	20000094 	.word	0x20000094
 800f0c0:	10624dd3 	.word	0x10624dd3
 800f0c4:	fffee0c0 	.word	0xfffee0c0
 800f0c8:	00200045 	.word	0x00200045
 800f0cc:	002000c5 	.word	0x002000c5
 800f0d0:	fdffe008 	.word	0xfdffe008

0800f0d4 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f0d4:	4b11      	ldr	r3, [pc, #68]	; (800f11c <SDMMC_CmdGoIdleState+0x48>)
{
 800f0d6:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f0d8:	4a11      	ldr	r2, [pc, #68]	; (800f120 <SDMMC_CmdGoIdleState+0x4c>)
{
 800f0da:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f0dc:	4c11      	ldr	r4, [pc, #68]	; (800f124 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800f0de:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f0e0:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 800f0e2:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f0e4:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f0e8:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f0ea:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f0ee:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f0f0:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f0f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f0f6:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f0fa:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f0fc:	e002      	b.n	800f104 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f0fe:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800f100:	0612      	lsls	r2, r2, #24
 800f102:	d405      	bmi.n	800f110 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800f104:	3b01      	subs	r3, #1
 800f106:	d2fa      	bcs.n	800f0fe <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800f108:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800f10c:	bc30      	pop	{r4, r5}
 800f10e:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f110:	4b05      	ldr	r3, [pc, #20]	; (800f128 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800f112:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f114:	638b      	str	r3, [r1, #56]	; 0x38
}
 800f116:	bc30      	pop	{r4, r5}
 800f118:	4770      	bx	lr
 800f11a:	bf00      	nop
 800f11c:	20000094 	.word	0x20000094
 800f120:	fffee0c0 	.word	0xfffee0c0
 800f124:	10624dd3 	.word	0x10624dd3
 800f128:	002000c5 	.word	0x002000c5

0800f12c <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f12c:	4a1c      	ldr	r2, [pc, #112]	; (800f1a0 <SDMMC_CmdOperCond+0x74>)
{
 800f12e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800f130:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f134:	481b      	ldr	r0, [pc, #108]	; (800f1a4 <SDMMC_CmdOperCond+0x78>)
{
 800f136:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f138:	4c1b      	ldr	r4, [pc, #108]	; (800f1a8 <SDMMC_CmdOperCond+0x7c>)
 800f13a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800f13c:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f13e:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f142:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f146:	68cc      	ldr	r4, [r1, #12]
 800f148:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f14a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f14c:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f14e:	f241 3088 	movw	r0, #5000	; 0x1388
 800f152:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f156:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800f158:	b14a      	cbz	r2, 800f16e <SDMMC_CmdOperCond+0x42>
 800f15a:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800f15c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800f15e:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f160:	f012 0f45 	tst.w	r2, #69	; 0x45
 800f164:	d001      	beq.n	800f16a <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f166:	0490      	lsls	r0, r2, #18
 800f168:	d506      	bpl.n	800f178 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 800f16a:	1c5c      	adds	r4, r3, #1
 800f16c:	d1f6      	bne.n	800f15c <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800f16e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800f172:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f176:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f178:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800f17a:	075a      	lsls	r2, r3, #29
 800f17c:	d40c      	bmi.n	800f198 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f17e:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800f180:	f010 0001 	ands.w	r0, r0, #1
 800f184:	d105      	bne.n	800f192 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f186:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800f188:	065b      	lsls	r3, r3, #25
 800f18a:	d5f2      	bpl.n	800f172 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f18c:	2340      	movs	r3, #64	; 0x40
 800f18e:	638b      	str	r3, [r1, #56]	; 0x38
 800f190:	e7ef      	b.n	800f172 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f192:	2301      	movs	r3, #1
 800f194:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f196:	e7ec      	b.n	800f172 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f198:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f19a:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f19c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f19e:	e7e8      	b.n	800f172 <SDMMC_CmdOperCond+0x46>
 800f1a0:	20000094 	.word	0x20000094
 800f1a4:	fffee0c0 	.word	0xfffee0c0
 800f1a8:	10624dd3 	.word	0x10624dd3

0800f1ac <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f1ac:	4a4c      	ldr	r2, [pc, #304]	; (800f2e0 <SDMMC_CmdAppCommand+0x134>)
 800f1ae:	4b4d      	ldr	r3, [pc, #308]	; (800f2e4 <SDMMC_CmdAppCommand+0x138>)
{
 800f1b0:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f1b2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800f1b4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f1b6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f1ba:	68c1      	ldr	r1, [r0, #12]
 800f1bc:	4c4a      	ldr	r4, [pc, #296]	; (800f2e8 <SDMMC_CmdAppCommand+0x13c>)
 800f1be:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f1c2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f1c4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f1c6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f1ca:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f1cc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f1d0:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800f1d2:	b14a      	cbz	r2, 800f1e8 <SDMMC_CmdAppCommand+0x3c>
 800f1d4:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f1d6:	4945      	ldr	r1, [pc, #276]	; (800f2ec <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
 800f1d8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800f1da:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f1dc:	420a      	tst	r2, r1
 800f1de:	d001      	beq.n	800f1e4 <SDMMC_CmdAppCommand+0x38>
 800f1e0:	0492      	lsls	r2, r2, #18
 800f1e2:	d507      	bpl.n	800f1f4 <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
 800f1e4:	1c5c      	adds	r4, r3, #1
 800f1e6:	d1f7      	bne.n	800f1d8 <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800f1e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1f2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f1f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f1f6:	075c      	lsls	r4, r3, #29
 800f1f8:	d43d      	bmi.n	800f276 <SDMMC_CmdAppCommand+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f1fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f1fc:	f013 0301 	ands.w	r3, r3, #1
 800f200:	d134      	bne.n	800f26c <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f202:	4b3b      	ldr	r3, [pc, #236]	; (800f2f0 <SDMMC_CmdAppCommand+0x144>)
 800f204:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800f206:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	2b37      	cmp	r3, #55	; 0x37
 800f20c:	d131      	bne.n	800f272 <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
 800f20e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f210:	4b38      	ldr	r3, [pc, #224]	; (800f2f4 <SDMMC_CmdAppCommand+0x148>)
 800f212:	4013      	ands	r3, r2
 800f214:	2b00      	cmp	r3, #0
 800f216:	d0e9      	beq.n	800f1ec <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f218:	2a00      	cmp	r2, #0
 800f21a:	db30      	blt.n	800f27e <SDMMC_CmdAppCommand+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f21c:	0051      	lsls	r1, r2, #1
 800f21e:	d431      	bmi.n	800f284 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f220:	0094      	lsls	r4, r2, #2
 800f222:	d431      	bmi.n	800f288 <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f224:	00d0      	lsls	r0, r2, #3
 800f226:	d431      	bmi.n	800f28c <SDMMC_CmdAppCommand+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f228:	0111      	lsls	r1, r2, #4
 800f22a:	d432      	bmi.n	800f292 <SDMMC_CmdAppCommand+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f22c:	0154      	lsls	r4, r2, #5
 800f22e:	d433      	bmi.n	800f298 <SDMMC_CmdAppCommand+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f230:	01d0      	lsls	r0, r2, #7
 800f232:	d434      	bmi.n	800f29e <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f234:	0211      	lsls	r1, r2, #8
 800f236:	d435      	bmi.n	800f2a4 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f238:	0254      	lsls	r4, r2, #9
 800f23a:	d436      	bmi.n	800f2aa <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f23c:	0290      	lsls	r0, r2, #10
 800f23e:	d440      	bmi.n	800f2c2 <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f240:	02d1      	lsls	r1, r2, #11
 800f242:	d43b      	bmi.n	800f2bc <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f244:	0354      	lsls	r4, r2, #13
 800f246:	d436      	bmi.n	800f2b6 <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f248:	0390      	lsls	r0, r2, #14
 800f24a:	d431      	bmi.n	800f2b0 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f24c:	03d1      	lsls	r1, r2, #15
 800f24e:	d444      	bmi.n	800f2da <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f250:	0414      	lsls	r4, r2, #16
 800f252:	d43f      	bmi.n	800f2d4 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f254:	0450      	lsls	r0, r2, #17
 800f256:	d43a      	bmi.n	800f2ce <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f258:	0491      	lsls	r1, r2, #18
 800f25a:	d435      	bmi.n	800f2c8 <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f25c:	f012 0f08 	tst.w	r2, #8
 800f260:	bf14      	ite	ne
 800f262:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800f266:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800f26a:	e7bf      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f26c:	2201      	movs	r2, #1
 800f26e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f270:	e7bc      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f272:	2301      	movs	r3, #1
 800f274:	e7ba      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f276:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f278:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f27a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f27c:	e7b6      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f27e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f282:	e7b3      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f284:	2340      	movs	r3, #64	; 0x40
 800f286:	e7b1      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f288:	2380      	movs	r3, #128	; 0x80
 800f28a:	e7af      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f28c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f290:	e7ac      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f292:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f296:	e7a9      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f29c:	e7a6      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f29e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f2a2:	e7a3      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f2a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f2a8:	e7a0      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f2aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f2ae:	e79d      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f2b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f2b4:	e79a      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f2b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f2ba:	e797      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 800f2bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2c0:	e794      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f2c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f2c6:	e791      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800f2c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f2cc:	e78e      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f2ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f2d2:	e78b      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f2d4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f2d8:	e788      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f2da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f2de:	e785      	b.n	800f1ec <SDMMC_CmdAppCommand+0x40>
 800f2e0:	20000094 	.word	0x20000094
 800f2e4:	10624dd3 	.word	0x10624dd3
 800f2e8:	fffee0c0 	.word	0xfffee0c0
 800f2ec:	00200045 	.word	0x00200045
 800f2f0:	002000c5 	.word	0x002000c5
 800f2f4:	fdffe008 	.word	0xfdffe008

0800f2f8 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f2f8:	4a18      	ldr	r2, [pc, #96]	; (800f35c <SDMMC_CmdAppOperCommand+0x64>)
 800f2fa:	4b19      	ldr	r3, [pc, #100]	; (800f360 <SDMMC_CmdAppOperCommand+0x68>)
{
 800f2fc:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f2fe:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800f300:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f302:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f306:	68c1      	ldr	r1, [r0, #12]
 800f308:	4c16      	ldr	r4, [pc, #88]	; (800f364 <SDMMC_CmdAppOperCommand+0x6c>)
 800f30a:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f30e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f310:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f312:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f316:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f318:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f31c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800f31e:	b14a      	cbz	r2, 800f334 <SDMMC_CmdAppOperCommand+0x3c>
 800f320:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800f322:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800f324:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f326:	f012 0f45 	tst.w	r2, #69	; 0x45
 800f32a:	d001      	beq.n	800f330 <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f32c:	0492      	lsls	r2, r2, #18
 800f32e:	d507      	bpl.n	800f340 <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
 800f330:	1c59      	adds	r1, r3, #1
 800f332:	d1f6      	bne.n	800f322 <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800f334:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800f338:	4618      	mov	r0, r3
 800f33a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f33e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f340:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f342:	f013 0304 	ands.w	r3, r3, #4
 800f346:	d105      	bne.n	800f354 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f348:	4a07      	ldr	r2, [pc, #28]	; (800f368 <SDMMC_CmdAppOperCommand+0x70>)
 800f34a:	6382      	str	r2, [r0, #56]	; 0x38
}
 800f34c:	4618      	mov	r0, r3
 800f34e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f352:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f354:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f356:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f358:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f35a:	e7ed      	b.n	800f338 <SDMMC_CmdAppOperCommand+0x40>
 800f35c:	20000094 	.word	0x20000094
 800f360:	10624dd3 	.word	0x10624dd3
 800f364:	fffee0c0 	.word	0xfffee0c0
 800f368:	002000c5 	.word	0x002000c5

0800f36c <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f36c:	4a4c      	ldr	r2, [pc, #304]	; (800f4a0 <SDMMC_CmdBusWidth+0x134>)
 800f36e:	4b4d      	ldr	r3, [pc, #308]	; (800f4a4 <SDMMC_CmdBusWidth+0x138>)
{
 800f370:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f372:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800f374:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f376:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f37a:	68c1      	ldr	r1, [r0, #12]
 800f37c:	4c4a      	ldr	r4, [pc, #296]	; (800f4a8 <SDMMC_CmdBusWidth+0x13c>)
 800f37e:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f382:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f384:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f386:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f38a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f38c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f390:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800f392:	b14a      	cbz	r2, 800f3a8 <SDMMC_CmdBusWidth+0x3c>
 800f394:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f396:	4945      	ldr	r1, [pc, #276]	; (800f4ac <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
 800f398:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800f39a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f39c:	420a      	tst	r2, r1
 800f39e:	d001      	beq.n	800f3a4 <SDMMC_CmdBusWidth+0x38>
 800f3a0:	0492      	lsls	r2, r2, #18
 800f3a2:	d507      	bpl.n	800f3b4 <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
 800f3a4:	1c5c      	adds	r4, r3, #1
 800f3a6:	d1f7      	bne.n	800f398 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800f3a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3b2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f3b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f3b6:	075c      	lsls	r4, r3, #29
 800f3b8:	d43d      	bmi.n	800f436 <SDMMC_CmdBusWidth+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f3ba:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f3bc:	f013 0301 	ands.w	r3, r3, #1
 800f3c0:	d134      	bne.n	800f42c <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f3c2:	4b3b      	ldr	r3, [pc, #236]	; (800f4b0 <SDMMC_CmdBusWidth+0x144>)
 800f3c4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800f3c6:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	2b06      	cmp	r3, #6
 800f3cc:	d131      	bne.n	800f432 <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
 800f3ce:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f3d0:	4b38      	ldr	r3, [pc, #224]	; (800f4b4 <SDMMC_CmdBusWidth+0x148>)
 800f3d2:	4013      	ands	r3, r2
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d0e9      	beq.n	800f3ac <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f3d8:	2a00      	cmp	r2, #0
 800f3da:	db30      	blt.n	800f43e <SDMMC_CmdBusWidth+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f3dc:	0051      	lsls	r1, r2, #1
 800f3de:	d431      	bmi.n	800f444 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f3e0:	0094      	lsls	r4, r2, #2
 800f3e2:	d431      	bmi.n	800f448 <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f3e4:	00d0      	lsls	r0, r2, #3
 800f3e6:	d431      	bmi.n	800f44c <SDMMC_CmdBusWidth+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f3e8:	0111      	lsls	r1, r2, #4
 800f3ea:	d432      	bmi.n	800f452 <SDMMC_CmdBusWidth+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f3ec:	0154      	lsls	r4, r2, #5
 800f3ee:	d433      	bmi.n	800f458 <SDMMC_CmdBusWidth+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f3f0:	01d0      	lsls	r0, r2, #7
 800f3f2:	d434      	bmi.n	800f45e <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f3f4:	0211      	lsls	r1, r2, #8
 800f3f6:	d435      	bmi.n	800f464 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f3f8:	0254      	lsls	r4, r2, #9
 800f3fa:	d436      	bmi.n	800f46a <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f3fc:	0290      	lsls	r0, r2, #10
 800f3fe:	d440      	bmi.n	800f482 <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f400:	02d1      	lsls	r1, r2, #11
 800f402:	d43b      	bmi.n	800f47c <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f404:	0354      	lsls	r4, r2, #13
 800f406:	d436      	bmi.n	800f476 <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f408:	0390      	lsls	r0, r2, #14
 800f40a:	d431      	bmi.n	800f470 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f40c:	03d1      	lsls	r1, r2, #15
 800f40e:	d444      	bmi.n	800f49a <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f410:	0414      	lsls	r4, r2, #16
 800f412:	d43f      	bmi.n	800f494 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f414:	0450      	lsls	r0, r2, #17
 800f416:	d43a      	bmi.n	800f48e <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f418:	0491      	lsls	r1, r2, #18
 800f41a:	d435      	bmi.n	800f488 <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f41c:	f012 0f08 	tst.w	r2, #8
 800f420:	bf14      	ite	ne
 800f422:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800f426:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800f42a:	e7bf      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f42c:	2201      	movs	r2, #1
 800f42e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f430:	e7bc      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f432:	2301      	movs	r3, #1
 800f434:	e7ba      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f436:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f438:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f43a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f43c:	e7b6      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f43e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f442:	e7b3      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f444:	2340      	movs	r3, #64	; 0x40
 800f446:	e7b1      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f448:	2380      	movs	r3, #128	; 0x80
 800f44a:	e7af      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f44c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f450:	e7ac      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f452:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f456:	e7a9      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f458:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f45c:	e7a6      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f45e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f462:	e7a3      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f468:	e7a0      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f46a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f46e:	e79d      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f470:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f474:	e79a      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f476:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f47a:	e797      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 800f47c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f480:	e794      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f482:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f486:	e791      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800f488:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f48c:	e78e      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f48e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f492:	e78b      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f494:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f498:	e788      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f49a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f49e:	e785      	b.n	800f3ac <SDMMC_CmdBusWidth+0x40>
 800f4a0:	20000094 	.word	0x20000094
 800f4a4:	10624dd3 	.word	0x10624dd3
 800f4a8:	fffee0c0 	.word	0xfffee0c0
 800f4ac:	00200045 	.word	0x00200045
 800f4b0:	002000c5 	.word	0x002000c5
 800f4b4:	fdffe008 	.word	0xfdffe008

0800f4b8 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f4b8:	4a4d      	ldr	r2, [pc, #308]	; (800f5f0 <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
 800f4ba:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f4bc:	494d      	ldr	r1, [pc, #308]	; (800f5f4 <SDMMC_CmdSendSCR+0x13c>)
{
 800f4be:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f4c0:	4c4d      	ldr	r4, [pc, #308]	; (800f5f8 <SDMMC_CmdSendSCR+0x140>)
 800f4c2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800f4c4:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f4c6:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f4ca:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f4ce:	68c4      	ldr	r4, [r0, #12]
 800f4d0:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f4d2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f4d4:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f4d6:	f241 3188 	movw	r1, #5000	; 0x1388
 800f4da:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f4de:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800f4e0:	b14a      	cbz	r2, 800f4f6 <SDMMC_CmdSendSCR+0x3e>
 800f4e2:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f4e4:	4945      	ldr	r1, [pc, #276]	; (800f5fc <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 800f4e6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800f4e8:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f4ea:	420a      	tst	r2, r1
 800f4ec:	d001      	beq.n	800f4f2 <SDMMC_CmdSendSCR+0x3a>
 800f4ee:	0492      	lsls	r2, r2, #18
 800f4f0:	d507      	bpl.n	800f502 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800f4f2:	1c5c      	adds	r4, r3, #1
 800f4f4:	d1f7      	bne.n	800f4e6 <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800f4f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f500:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f502:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f504:	075c      	lsls	r4, r3, #29
 800f506:	d43d      	bmi.n	800f584 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f508:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f50a:	f013 0301 	ands.w	r3, r3, #1
 800f50e:	d134      	bne.n	800f57a <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f510:	4b3b      	ldr	r3, [pc, #236]	; (800f600 <SDMMC_CmdSendSCR+0x148>)
 800f512:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800f514:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f516:	b2db      	uxtb	r3, r3
 800f518:	2b33      	cmp	r3, #51	; 0x33
 800f51a:	d131      	bne.n	800f580 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 800f51c:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f51e:	4b39      	ldr	r3, [pc, #228]	; (800f604 <SDMMC_CmdSendSCR+0x14c>)
 800f520:	4013      	ands	r3, r2
 800f522:	2b00      	cmp	r3, #0
 800f524:	d0e9      	beq.n	800f4fa <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f526:	2a00      	cmp	r2, #0
 800f528:	db30      	blt.n	800f58c <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f52a:	0051      	lsls	r1, r2, #1
 800f52c:	d431      	bmi.n	800f592 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f52e:	0094      	lsls	r4, r2, #2
 800f530:	d431      	bmi.n	800f596 <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f532:	00d0      	lsls	r0, r2, #3
 800f534:	d431      	bmi.n	800f59a <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f536:	0111      	lsls	r1, r2, #4
 800f538:	d432      	bmi.n	800f5a0 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f53a:	0154      	lsls	r4, r2, #5
 800f53c:	d433      	bmi.n	800f5a6 <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f53e:	01d0      	lsls	r0, r2, #7
 800f540:	d434      	bmi.n	800f5ac <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f542:	0211      	lsls	r1, r2, #8
 800f544:	d435      	bmi.n	800f5b2 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f546:	0254      	lsls	r4, r2, #9
 800f548:	d436      	bmi.n	800f5b8 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f54a:	0290      	lsls	r0, r2, #10
 800f54c:	d440      	bmi.n	800f5d0 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f54e:	02d1      	lsls	r1, r2, #11
 800f550:	d43b      	bmi.n	800f5ca <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f552:	0354      	lsls	r4, r2, #13
 800f554:	d436      	bmi.n	800f5c4 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f556:	0390      	lsls	r0, r2, #14
 800f558:	d431      	bmi.n	800f5be <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f55a:	03d1      	lsls	r1, r2, #15
 800f55c:	d444      	bmi.n	800f5e8 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f55e:	0414      	lsls	r4, r2, #16
 800f560:	d43f      	bmi.n	800f5e2 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f562:	0450      	lsls	r0, r2, #17
 800f564:	d43a      	bmi.n	800f5dc <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f566:	0491      	lsls	r1, r2, #18
 800f568:	d435      	bmi.n	800f5d6 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f56a:	f012 0f08 	tst.w	r2, #8
 800f56e:	bf14      	ite	ne
 800f570:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800f574:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800f578:	e7bf      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f57a:	2201      	movs	r2, #1
 800f57c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f57e:	e7bc      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f580:	2301      	movs	r3, #1
 800f582:	e7ba      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f584:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f586:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f588:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f58a:	e7b6      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f58c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f590:	e7b3      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f592:	2340      	movs	r3, #64	; 0x40
 800f594:	e7b1      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f596:	2380      	movs	r3, #128	; 0x80
 800f598:	e7af      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f59a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f59e:	e7ac      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f5a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5a4:	e7a9      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f5a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5aa:	e7a6      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f5ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f5b0:	e7a3      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f5b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f5b6:	e7a0      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f5b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f5bc:	e79d      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f5be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f5c2:	e79a      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f5c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f5c8:	e797      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 800f5ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5ce:	e794      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f5d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f5d4:	e791      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 800f5d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f5da:	e78e      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f5dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f5e0:	e78b      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f5e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f5e6:	e788      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f5e8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f5ec:	e785      	b.n	800f4fa <SDMMC_CmdSendSCR+0x42>
 800f5ee:	bf00      	nop
 800f5f0:	20000094 	.word	0x20000094
 800f5f4:	fffee0c0 	.word	0xfffee0c0
 800f5f8:	10624dd3 	.word	0x10624dd3
 800f5fc:	00200045 	.word	0x00200045
 800f600:	002000c5 	.word	0x002000c5
 800f604:	fdffe008 	.word	0xfdffe008

0800f608 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f608:	4a1a      	ldr	r2, [pc, #104]	; (800f674 <SDMMC_CmdSendCID+0x6c>)
{
 800f60a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800f60c:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f60e:	481a      	ldr	r0, [pc, #104]	; (800f678 <SDMMC_CmdSendCID+0x70>)
{
 800f610:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f612:	4c1a      	ldr	r4, [pc, #104]	; (800f67c <SDMMC_CmdSendCID+0x74>)
 800f614:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800f616:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f618:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f61c:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f620:	68cc      	ldr	r4, [r1, #12]
 800f622:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f624:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f626:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f628:	f241 3088 	movw	r0, #5000	; 0x1388
 800f62c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f630:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800f632:	b14a      	cbz	r2, 800f648 <SDMMC_CmdSendCID+0x40>
 800f634:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800f636:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800f638:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f63a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800f63e:	d001      	beq.n	800f644 <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f640:	0492      	lsls	r2, r2, #18
 800f642:	d506      	bpl.n	800f652 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800f644:	1c58      	adds	r0, r3, #1
 800f646:	d1f6      	bne.n	800f636 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800f648:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800f64c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f650:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f652:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800f654:	075b      	lsls	r3, r3, #29
 800f656:	d409      	bmi.n	800f66c <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f658:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800f65a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f65e:	bf14      	ite	ne
 800f660:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f662:	4b07      	ldreq	r3, [pc, #28]	; (800f680 <SDMMC_CmdSendCID+0x78>)
 800f664:	638b      	str	r3, [r1, #56]	; 0x38
}
 800f666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f66a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f66c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f66e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f670:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f672:	e7eb      	b.n	800f64c <SDMMC_CmdSendCID+0x44>
 800f674:	20000094 	.word	0x20000094
 800f678:	fffee0c0 	.word	0xfffee0c0
 800f67c:	10624dd3 	.word	0x10624dd3
 800f680:	002000c5 	.word	0x002000c5

0800f684 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f684:	4a1b      	ldr	r2, [pc, #108]	; (800f6f4 <SDMMC_CmdSendCSD+0x70>)
{
 800f686:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f688:	4b1b      	ldr	r3, [pc, #108]	; (800f6f8 <SDMMC_CmdSendCSD+0x74>)
 800f68a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800f68c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f690:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f694:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800f698:	4818      	ldr	r0, [pc, #96]	; (800f6fc <SDMMC_CmdSendCSD+0x78>)
 800f69a:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f69e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f6a0:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f6a2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f6a6:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f6a8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f6ac:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800f6b0:	1e53      	subs	r3, r2, #1
 800f6b2:	b14a      	cbz	r2, 800f6c8 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800f6b4:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800f6b8:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f6ba:	f012 0f45 	tst.w	r2, #69	; 0x45
 800f6be:	d001      	beq.n	800f6c4 <SDMMC_CmdSendCSD+0x40>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f6c0:	0492      	lsls	r2, r2, #18
 800f6c2:	d504      	bpl.n	800f6ce <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800f6c4:	1c59      	adds	r1, r3, #1
 800f6c6:	d1f5      	bne.n	800f6b4 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800f6c8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800f6cc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f6ce:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800f6d2:	075b      	lsls	r3, r3, #29
 800f6d4:	d409      	bmi.n	800f6ea <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f6d6:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800f6da:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f6de:	bf14      	ite	ne
 800f6e0:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f6e2:	4b07      	ldreq	r3, [pc, #28]	; (800f700 <SDMMC_CmdSendCSD+0x7c>)
 800f6e4:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800f6e8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f6ea:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f6ec:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f6ee:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f6f2:	4770      	bx	lr
 800f6f4:	20000094 	.word	0x20000094
 800f6f8:	10624dd3 	.word	0x10624dd3
 800f6fc:	fffee0c0 	.word	0xfffee0c0
 800f700:	002000c5 	.word	0x002000c5

0800f704 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800f704:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f706:	4a27      	ldr	r2, [pc, #156]	; (800f7a4 <SDMMC_CmdSetRelAdd+0xa0>)
{
 800f708:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800f70a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f70c:	4c26      	ldr	r4, [pc, #152]	; (800f7a8 <SDMMC_CmdSetRelAdd+0xa4>)
 800f70e:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f710:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f712:	401c      	ands	r4, r3
 800f714:	f241 1303 	movw	r3, #4355	; 0x1103
 800f718:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f71a:	4c24      	ldr	r4, [pc, #144]	; (800f7ac <SDMMC_CmdSetRelAdd+0xa8>)
 800f71c:	fba4 4202 	umull	r4, r2, r4, r2
 800f720:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f724:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f726:	0a52      	lsrs	r2, r2, #9
 800f728:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
 800f72c:	b14a      	cbz	r2, 800f742 <SDMMC_CmdSetRelAdd+0x3e>
 800f72e:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800f730:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800f732:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f734:	f012 0f45 	tst.w	r2, #69	; 0x45
 800f738:	d001      	beq.n	800f73e <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f73a:	0492      	lsls	r2, r2, #18
 800f73c:	d507      	bpl.n	800f74e <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
 800f73e:	1c5c      	adds	r4, r3, #1
 800f740:	d1f6      	bne.n	800f730 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800f742:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800f746:	4618      	mov	r0, r3
 800f748:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f74c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f74e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f750:	075c      	lsls	r4, r3, #29
 800f752:	d41c      	bmi.n	800f78e <SDMMC_CmdSetRelAdd+0x8a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f754:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f756:	f013 0301 	ands.w	r3, r3, #1
 800f75a:	d113      	bne.n	800f784 <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
 800f75c:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f75e:	b2db      	uxtb	r3, r3
 800f760:	2b03      	cmp	r3, #3
 800f762:	d112      	bne.n	800f78a <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f764:	4b12      	ldr	r3, [pc, #72]	; (800f7b0 <SDMMC_CmdSetRelAdd+0xac>)
 800f766:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800f768:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800f76a:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 800f76e:	d015      	beq.n	800f79c <SDMMC_CmdSetRelAdd+0x98>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f770:	0451      	lsls	r1, r2, #17
 800f772:	d410      	bmi.n	800f796 <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f774:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800f778:	bf14      	ite	ne
 800f77a:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800f77e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800f782:	e7e0      	b.n	800f746 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f784:	2201      	movs	r2, #1
 800f786:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f788:	e7dd      	b.n	800f746 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f78a:	2301      	movs	r3, #1
 800f78c:	e7db      	b.n	800f746 <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f78e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f790:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f792:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f794:	e7d7      	b.n	800f746 <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f79a:	e7d4      	b.n	800f746 <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800f79c:	0c12      	lsrs	r2, r2, #16
 800f79e:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 800f7a0:	e7d1      	b.n	800f746 <SDMMC_CmdSetRelAdd+0x42>
 800f7a2:	bf00      	nop
 800f7a4:	20000094 	.word	0x20000094
 800f7a8:	fffee0c0 	.word	0xfffee0c0
 800f7ac:	10624dd3 	.word	0x10624dd3
 800f7b0:	002000c5 	.word	0x002000c5

0800f7b4 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f7b4:	4a4c      	ldr	r2, [pc, #304]	; (800f8e8 <SDMMC_CmdSendStatus+0x134>)
 800f7b6:	4b4d      	ldr	r3, [pc, #308]	; (800f8ec <SDMMC_CmdSendStatus+0x138>)
{
 800f7b8:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f7ba:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800f7bc:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f7be:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f7c2:	68c1      	ldr	r1, [r0, #12]
 800f7c4:	4c4a      	ldr	r4, [pc, #296]	; (800f8f0 <SDMMC_CmdSendStatus+0x13c>)
 800f7c6:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f7ca:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f7cc:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f7ce:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f7d2:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f7d4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f7d8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800f7da:	b14a      	cbz	r2, 800f7f0 <SDMMC_CmdSendStatus+0x3c>
 800f7dc:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f7de:	4945      	ldr	r1, [pc, #276]	; (800f8f4 <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
 800f7e0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800f7e2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f7e4:	420a      	tst	r2, r1
 800f7e6:	d001      	beq.n	800f7ec <SDMMC_CmdSendStatus+0x38>
 800f7e8:	0492      	lsls	r2, r2, #18
 800f7ea:	d507      	bpl.n	800f7fc <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
 800f7ec:	1c5c      	adds	r4, r3, #1
 800f7ee:	d1f7      	bne.n	800f7e0 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800f7f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7fa:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f7fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f7fe:	075c      	lsls	r4, r3, #29
 800f800:	d43d      	bmi.n	800f87e <SDMMC_CmdSendStatus+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f802:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f804:	f013 0301 	ands.w	r3, r3, #1
 800f808:	d134      	bne.n	800f874 <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f80a:	4b3b      	ldr	r3, [pc, #236]	; (800f8f8 <SDMMC_CmdSendStatus+0x144>)
 800f80c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800f80e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f810:	b2db      	uxtb	r3, r3
 800f812:	2b0d      	cmp	r3, #13
 800f814:	d131      	bne.n	800f87a <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
 800f816:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f818:	4b38      	ldr	r3, [pc, #224]	; (800f8fc <SDMMC_CmdSendStatus+0x148>)
 800f81a:	4013      	ands	r3, r2
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d0e9      	beq.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f820:	2a00      	cmp	r2, #0
 800f822:	db30      	blt.n	800f886 <SDMMC_CmdSendStatus+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f824:	0051      	lsls	r1, r2, #1
 800f826:	d431      	bmi.n	800f88c <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f828:	0094      	lsls	r4, r2, #2
 800f82a:	d431      	bmi.n	800f890 <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f82c:	00d0      	lsls	r0, r2, #3
 800f82e:	d431      	bmi.n	800f894 <SDMMC_CmdSendStatus+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f830:	0111      	lsls	r1, r2, #4
 800f832:	d432      	bmi.n	800f89a <SDMMC_CmdSendStatus+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f834:	0154      	lsls	r4, r2, #5
 800f836:	d433      	bmi.n	800f8a0 <SDMMC_CmdSendStatus+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f838:	01d0      	lsls	r0, r2, #7
 800f83a:	d434      	bmi.n	800f8a6 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f83c:	0211      	lsls	r1, r2, #8
 800f83e:	d435      	bmi.n	800f8ac <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f840:	0254      	lsls	r4, r2, #9
 800f842:	d436      	bmi.n	800f8b2 <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f844:	0290      	lsls	r0, r2, #10
 800f846:	d440      	bmi.n	800f8ca <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f848:	02d1      	lsls	r1, r2, #11
 800f84a:	d43b      	bmi.n	800f8c4 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f84c:	0354      	lsls	r4, r2, #13
 800f84e:	d436      	bmi.n	800f8be <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f850:	0390      	lsls	r0, r2, #14
 800f852:	d431      	bmi.n	800f8b8 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f854:	03d1      	lsls	r1, r2, #15
 800f856:	d444      	bmi.n	800f8e2 <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f858:	0414      	lsls	r4, r2, #16
 800f85a:	d43f      	bmi.n	800f8dc <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f85c:	0450      	lsls	r0, r2, #17
 800f85e:	d43a      	bmi.n	800f8d6 <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f860:	0491      	lsls	r1, r2, #18
 800f862:	d435      	bmi.n	800f8d0 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f864:	f012 0f08 	tst.w	r2, #8
 800f868:	bf14      	ite	ne
 800f86a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800f86e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800f872:	e7bf      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f874:	2201      	movs	r2, #1
 800f876:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f878:	e7bc      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f87a:	2301      	movs	r3, #1
 800f87c:	e7ba      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f87e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f880:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f882:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f884:	e7b6      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f88a:	e7b3      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f88c:	2340      	movs	r3, #64	; 0x40
 800f88e:	e7b1      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f890:	2380      	movs	r3, #128	; 0x80
 800f892:	e7af      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f894:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f898:	e7ac      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f89a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f89e:	e7a9      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f8a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8a4:	e7a6      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f8a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f8aa:	e7a3      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f8ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f8b0:	e7a0      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f8b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f8b6:	e79d      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f8b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f8bc:	e79a      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f8be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f8c2:	e797      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 800f8c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f8c8:	e794      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f8ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f8ce:	e791      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800f8d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f8d4:	e78e      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f8d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f8da:	e78b      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f8dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f8e0:	e788      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f8e2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f8e6:	e785      	b.n	800f7f4 <SDMMC_CmdSendStatus+0x40>
 800f8e8:	20000094 	.word	0x20000094
 800f8ec:	10624dd3 	.word	0x10624dd3
 800f8f0:	fffee0c0 	.word	0xfffee0c0
 800f8f4:	00200045 	.word	0x00200045
 800f8f8:	002000c5 	.word	0x002000c5
 800f8fc:	fdffe008 	.word	0xfdffe008

0800f900 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f900:	4a4d      	ldr	r2, [pc, #308]	; (800fa38 <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
 800f902:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f904:	494d      	ldr	r1, [pc, #308]	; (800fa3c <SDMMC_CmdStatusRegister+0x13c>)
{
 800f906:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f908:	4c4d      	ldr	r4, [pc, #308]	; (800fa40 <SDMMC_CmdStatusRegister+0x140>)
 800f90a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800f90c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f90e:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f912:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f916:	68c4      	ldr	r4, [r0, #12]
 800f918:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f91a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f91c:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f91e:	f241 3188 	movw	r1, #5000	; 0x1388
 800f922:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f926:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800f928:	b14a      	cbz	r2, 800f93e <SDMMC_CmdStatusRegister+0x3e>
 800f92a:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f92c:	4945      	ldr	r1, [pc, #276]	; (800fa44 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 800f92e:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800f930:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f932:	420a      	tst	r2, r1
 800f934:	d001      	beq.n	800f93a <SDMMC_CmdStatusRegister+0x3a>
 800f936:	0492      	lsls	r2, r2, #18
 800f938:	d507      	bpl.n	800f94a <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800f93a:	1c5c      	adds	r4, r3, #1
 800f93c:	d1f7      	bne.n	800f92e <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800f93e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800f942:	4618      	mov	r0, r3
 800f944:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f948:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f94a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f94c:	075c      	lsls	r4, r3, #29
 800f94e:	d43d      	bmi.n	800f9cc <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f950:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f952:	f013 0301 	ands.w	r3, r3, #1
 800f956:	d134      	bne.n	800f9c2 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f958:	4b3b      	ldr	r3, [pc, #236]	; (800fa48 <SDMMC_CmdStatusRegister+0x148>)
 800f95a:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800f95c:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	2b0d      	cmp	r3, #13
 800f962:	d131      	bne.n	800f9c8 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 800f964:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f966:	4b39      	ldr	r3, [pc, #228]	; (800fa4c <SDMMC_CmdStatusRegister+0x14c>)
 800f968:	4013      	ands	r3, r2
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d0e9      	beq.n	800f942 <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f96e:	2a00      	cmp	r2, #0
 800f970:	db30      	blt.n	800f9d4 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f972:	0051      	lsls	r1, r2, #1
 800f974:	d431      	bmi.n	800f9da <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f976:	0094      	lsls	r4, r2, #2
 800f978:	d431      	bmi.n	800f9de <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f97a:	00d0      	lsls	r0, r2, #3
 800f97c:	d431      	bmi.n	800f9e2 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f97e:	0111      	lsls	r1, r2, #4
 800f980:	d432      	bmi.n	800f9e8 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f982:	0154      	lsls	r4, r2, #5
 800f984:	d433      	bmi.n	800f9ee <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f986:	01d0      	lsls	r0, r2, #7
 800f988:	d434      	bmi.n	800f9f4 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f98a:	0211      	lsls	r1, r2, #8
 800f98c:	d435      	bmi.n	800f9fa <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f98e:	0254      	lsls	r4, r2, #9
 800f990:	d436      	bmi.n	800fa00 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f992:	0290      	lsls	r0, r2, #10
 800f994:	d440      	bmi.n	800fa18 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f996:	02d1      	lsls	r1, r2, #11
 800f998:	d43b      	bmi.n	800fa12 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f99a:	0354      	lsls	r4, r2, #13
 800f99c:	d436      	bmi.n	800fa0c <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f99e:	0390      	lsls	r0, r2, #14
 800f9a0:	d431      	bmi.n	800fa06 <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f9a2:	03d1      	lsls	r1, r2, #15
 800f9a4:	d444      	bmi.n	800fa30 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f9a6:	0414      	lsls	r4, r2, #16
 800f9a8:	d43f      	bmi.n	800fa2a <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f9aa:	0450      	lsls	r0, r2, #17
 800f9ac:	d43a      	bmi.n	800fa24 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f9ae:	0491      	lsls	r1, r2, #18
 800f9b0:	d435      	bmi.n	800fa1e <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f9b2:	f012 0f08 	tst.w	r2, #8
 800f9b6:	bf14      	ite	ne
 800f9b8:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 800f9bc:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800f9c0:	e7bf      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f9c2:	2201      	movs	r2, #1
 800f9c4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f9c6:	e7bc      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f9c8:	2301      	movs	r3, #1
 800f9ca:	e7ba      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f9cc:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f9ce:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f9d0:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f9d2:	e7b6      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f9d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f9d8:	e7b3      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f9da:	2340      	movs	r3, #64	; 0x40
 800f9dc:	e7b1      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f9de:	2380      	movs	r3, #128	; 0x80
 800f9e0:	e7af      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f9e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f9e6:	e7ac      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f9e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f9ec:	e7a9      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f9ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9f2:	e7a6      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f9f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f9f8:	e7a3      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f9fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f9fe:	e7a0      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fa00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fa04:	e79d      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fa06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fa0a:	e79a      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fa0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fa10:	e797      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
 800fa12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa16:	e794      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fa18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fa1c:	e791      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 800fa1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fa22:	e78e      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fa24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fa28:	e78b      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fa2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fa2e:	e788      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fa30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fa34:	e785      	b.n	800f942 <SDMMC_CmdStatusRegister+0x42>
 800fa36:	bf00      	nop
 800fa38:	20000094 	.word	0x20000094
 800fa3c:	fffee0c0 	.word	0xfffee0c0
 800fa40:	10624dd3 	.word	0x10624dd3
 800fa44:	00200045 	.word	0x00200045
 800fa48:	002000c5 	.word	0x002000c5
 800fa4c:	fdffe008 	.word	0xfdffe008

0800fa50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800fa50:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800fa52:	4903      	ldr	r1, [pc, #12]	; (800fa60 <MX_FATFS_Init+0x10>)
 800fa54:	4803      	ldr	r0, [pc, #12]	; (800fa64 <MX_FATFS_Init+0x14>)
 800fa56:	f003 f94f 	bl	8012cf8 <FATFS_LinkDriver>
 800fa5a:	4b03      	ldr	r3, [pc, #12]	; (800fa68 <MX_FATFS_Init+0x18>)
 800fa5c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800fa5e:	bd08      	pop	{r3, pc}
 800fa60:	20019b30 	.word	0x20019b30
 800fa64:	0801c42c 	.word	0x0801c42c
 800fa68:	20019b34 	.word	0x20019b34

0800fa6c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800fa6c:	2000      	movs	r0, #0
 800fa6e:	4770      	bx	lr

0800fa70 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800fa70:	b510      	push	{r4, lr}
 800fa72:	4694      	mov	ip, r2
 800fa74:	b082      	sub	sp, #8
 800fa76:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800fa78:	460a      	mov	r2, r1
 800fa7a:	4663      	mov	r3, ip
 800fa7c:	4601      	mov	r1, r0
 800fa7e:	9400      	str	r4, [sp, #0]
 800fa80:	4803      	ldr	r0, [pc, #12]	; (800fa90 <BSP_SD_ReadBlocks+0x20>)
 800fa82:	f7fd f8fb 	bl	800cc7c <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800fa86:	3800      	subs	r0, #0
 800fa88:	bf18      	it	ne
 800fa8a:	2001      	movne	r0, #1
 800fa8c:	b002      	add	sp, #8
 800fa8e:	bd10      	pop	{r4, pc}
 800fa90:	200192d0 	.word	0x200192d0

0800fa94 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800fa94:	b510      	push	{r4, lr}
 800fa96:	4694      	mov	ip, r2
 800fa98:	b082      	sub	sp, #8
 800fa9a:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800fa9c:	460a      	mov	r2, r1
 800fa9e:	4663      	mov	r3, ip
 800faa0:	4601      	mov	r1, r0
 800faa2:	9400      	str	r4, [sp, #0]
 800faa4:	4803      	ldr	r0, [pc, #12]	; (800fab4 <BSP_SD_WriteBlocks+0x20>)
 800faa6:	f7fd f9f1 	bl	800ce8c <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800faaa:	3800      	subs	r0, #0
 800faac:	bf18      	it	ne
 800faae:	2001      	movne	r0, #1
 800fab0:	b002      	add	sp, #8
 800fab2:	bd10      	pop	{r4, pc}
 800fab4:	200192d0 	.word	0x200192d0

0800fab8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800fab8:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800faba:	4803      	ldr	r0, [pc, #12]	; (800fac8 <BSP_SD_GetCardState+0x10>)
 800fabc:	f7fd fe54 	bl	800d768 <HAL_SD_GetCardState>
}
 800fac0:	3804      	subs	r0, #4
 800fac2:	bf18      	it	ne
 800fac4:	2001      	movne	r0, #1
 800fac6:	bd08      	pop	{r3, pc}
 800fac8:	200192d0 	.word	0x200192d0

0800facc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800facc:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800face:	4801      	ldr	r0, [pc, #4]	; (800fad4 <BSP_SD_GetCardInfo+0x8>)
 800fad0:	f7fd bcfa 	b.w	800d4c8 <HAL_SD_GetCardInfo>
 800fad4:	200192d0 	.word	0x200192d0

0800fad8 <BSP_SD_WriteCpltCallback>:
 800fad8:	4770      	bx	lr
 800fada:	bf00      	nop

0800fadc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fadc:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800fade:	f7ff fffb 	bl	800fad8 <BSP_SD_WriteCpltCallback>
}
 800fae2:	bd08      	pop	{r3, pc}

0800fae4 <BSP_SD_ReadCpltCallback>:
 800fae4:	4770      	bx	lr
 800fae6:	bf00      	nop

0800fae8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800fae8:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800faea:	f7ff fffb 	bl	800fae4 <BSP_SD_ReadCpltCallback>
}
 800faee:	bd08      	pop	{r3, pc}

0800faf0 <BSP_SD_Init>:
{
 800faf0:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800faf2:	f7f4 fd67 	bl	80045c4 <BSP_SD_IsDetected>
 800faf6:	2801      	cmp	r0, #1
 800faf8:	d001      	beq.n	800fafe <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800fafa:	2002      	movs	r0, #2
}
 800fafc:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800fafe:	4807      	ldr	r0, [pc, #28]	; (800fb1c <BSP_SD_Init+0x2c>)
 800fb00:	f7fd fdca 	bl	800d698 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800fb04:	2800      	cmp	r0, #0
 800fb06:	d1f9      	bne.n	800fafc <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800fb08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fb0c:	4803      	ldr	r0, [pc, #12]	; (800fb1c <BSP_SD_Init+0x2c>)
 800fb0e:	f7fd fcef 	bl	800d4f0 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800fb12:	3800      	subs	r0, #0
 800fb14:	bf18      	it	ne
 800fb16:	2001      	movne	r0, #1
}
 800fb18:	bd08      	pop	{r3, pc}
 800fb1a:	bf00      	nop
 800fb1c:	200192d0 	.word	0x200192d0

0800fb20 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fb20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800fb24:	4803      	ldr	r0, [pc, #12]	; (800fb34 <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 800fb26:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800fb28:	f7f9 fbc0 	bl	80092ac <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 800fb2c:	fab0 f080 	clz	r0, r0
 800fb30:	0940      	lsrs	r0, r0, #5
 800fb32:	bd08      	pop	{r3, pc}
 800fb34:	58020800 	.word	0x58020800

0800fb38 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800fb38:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800fb3a:	4c0a      	ldr	r4, [pc, #40]	; (800fb64 <SD_initialize+0x2c>)
 800fb3c:	2501      	movs	r5, #1
 800fb3e:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800fb40:	f7ff ffd6 	bl	800faf0 <BSP_SD_Init>
 800fb44:	b108      	cbz	r0, 800fb4a <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800fb46:	7820      	ldrb	r0, [r4, #0]
}
 800fb48:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800fb4a:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800fb4c:	f7ff ffb4 	bl	800fab8 <BSP_SD_GetCardState>
 800fb50:	b918      	cbnz	r0, 800fb5a <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800fb52:	7823      	ldrb	r3, [r4, #0]
 800fb54:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fb58:	7023      	strb	r3, [r4, #0]
  return Stat;
 800fb5a:	7823      	ldrb	r3, [r4, #0]
 800fb5c:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800fb5e:	7023      	strb	r3, [r4, #0]
  return Stat;
 800fb60:	7820      	ldrb	r0, [r4, #0]
}
 800fb62:	bd38      	pop	{r3, r4, r5, pc}
 800fb64:	200000a4 	.word	0x200000a4

0800fb68 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800fb68:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	4c05      	ldr	r4, [pc, #20]	; (800fb84 <SD_status+0x1c>)
 800fb6e:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800fb70:	f7ff ffa2 	bl	800fab8 <BSP_SD_GetCardState>
 800fb74:	b918      	cbnz	r0, 800fb7e <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800fb76:	7823      	ldrb	r3, [r4, #0]
 800fb78:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800fb7c:	7023      	strb	r3, [r4, #0]
  return Stat;
 800fb7e:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800fb80:	bd10      	pop	{r4, pc}
 800fb82:	bf00      	nop
 800fb84:	200000a4 	.word	0x200000a4

0800fb88 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800fb88:	b508      	push	{r3, lr}
 800fb8a:	4608      	mov	r0, r1
 800fb8c:	4611      	mov	r1, r2
 800fb8e:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800fb90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb94:	f7ff ff6c 	bl	800fa70 <BSP_SD_ReadBlocks>
 800fb98:	b108      	cbz	r0, 800fb9e <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800fb9a:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 800fb9c:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800fb9e:	f7ff ff8b 	bl	800fab8 <BSP_SD_GetCardState>
 800fba2:	2800      	cmp	r0, #0
 800fba4:	d0fa      	beq.n	800fb9c <SD_read+0x14>
 800fba6:	f7ff ff87 	bl	800fab8 <BSP_SD_GetCardState>
 800fbaa:	2800      	cmp	r0, #0
 800fbac:	d1f7      	bne.n	800fb9e <SD_read+0x16>
 800fbae:	e7f5      	b.n	800fb9c <SD_read+0x14>

0800fbb0 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fbb0:	4b18      	ldr	r3, [pc, #96]	; (800fc14 <SD_ioctl+0x64>)
{
 800fbb2:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fbb4:	7818      	ldrb	r0, [r3, #0]
{
 800fbb6:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fbb8:	f010 0401 	ands.w	r4, r0, #1
 800fbbc:	d106      	bne.n	800fbcc <SD_ioctl+0x1c>
 800fbbe:	4615      	mov	r5, r2

  switch (cmd)
 800fbc0:	2903      	cmp	r1, #3
 800fbc2:	d824      	bhi.n	800fc0e <SD_ioctl+0x5e>
 800fbc4:	e8df f001 	tbb	[pc, r1]
 800fbc8:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800fbcc:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800fbce:	4620      	mov	r0, r4
 800fbd0:	b00b      	add	sp, #44	; 0x2c
 800fbd2:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 800fbd4:	460c      	mov	r4, r1
}
 800fbd6:	4620      	mov	r0, r4
 800fbd8:	b00b      	add	sp, #44	; 0x2c
 800fbda:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800fbdc:	a801      	add	r0, sp, #4
 800fbde:	f7ff ff75 	bl	800facc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fbe2:	9b07      	ldr	r3, [sp, #28]
}
 800fbe4:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fbe6:	602b      	str	r3, [r5, #0]
}
 800fbe8:	b00b      	add	sp, #44	; 0x2c
 800fbea:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800fbec:	a801      	add	r0, sp, #4
 800fbee:	f7ff ff6d 	bl	800facc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fbf2:	9b08      	ldr	r3, [sp, #32]
}
 800fbf4:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fbf6:	802b      	strh	r3, [r5, #0]
}
 800fbf8:	b00b      	add	sp, #44	; 0x2c
 800fbfa:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800fbfc:	a801      	add	r0, sp, #4
 800fbfe:	f7ff ff65 	bl	800facc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fc02:	9b08      	ldr	r3, [sp, #32]
}
 800fc04:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fc06:	0a5b      	lsrs	r3, r3, #9
 800fc08:	602b      	str	r3, [r5, #0]
}
 800fc0a:	b00b      	add	sp, #44	; 0x2c
 800fc0c:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 800fc0e:	2404      	movs	r4, #4
 800fc10:	e7dd      	b.n	800fbce <SD_ioctl+0x1e>
 800fc12:	bf00      	nop
 800fc14:	200000a4 	.word	0x200000a4

0800fc18 <SD_write>:
{
 800fc18:	b508      	push	{r3, lr}
 800fc1a:	4608      	mov	r0, r1
 800fc1c:	4611      	mov	r1, r2
 800fc1e:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800fc20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc24:	f7ff ff36 	bl	800fa94 <BSP_SD_WriteBlocks>
 800fc28:	b108      	cbz	r0, 800fc2e <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800fc2a:	2001      	movs	r0, #1
}
 800fc2c:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800fc2e:	f7ff ff43 	bl	800fab8 <BSP_SD_GetCardState>
 800fc32:	2800      	cmp	r0, #0
 800fc34:	d0fa      	beq.n	800fc2c <SD_write+0x14>
 800fc36:	f7ff ff3f 	bl	800fab8 <BSP_SD_GetCardState>
 800fc3a:	2800      	cmp	r0, #0
 800fc3c:	d1f7      	bne.n	800fc2e <SD_write+0x16>
 800fc3e:	e7f5      	b.n	800fc2c <SD_write+0x14>

0800fc40 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fc40:	4b03      	ldr	r3, [pc, #12]	; (800fc50 <disk_status+0x10>)
 800fc42:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800fc46:	4403      	add	r3, r0
 800fc48:	6852      	ldr	r2, [r2, #4]
 800fc4a:	7a18      	ldrb	r0, [r3, #8]
 800fc4c:	6853      	ldr	r3, [r2, #4]
 800fc4e:	4718      	bx	r3
 800fc50:	20019d60 	.word	0x20019d60

0800fc54 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800fc54:	4b07      	ldr	r3, [pc, #28]	; (800fc74 <disk_initialize+0x20>)
 800fc56:	5c1a      	ldrb	r2, [r3, r0]
 800fc58:	b952      	cbnz	r2, 800fc70 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fc5a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800fc5e:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 800fc60:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fc64:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 800fc66:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fc6a:	7a08      	ldrb	r0, [r1, #8]
 800fc6c:	6813      	ldr	r3, [r2, #0]
 800fc6e:	4718      	bx	r3
  }
  return stat;
}
 800fc70:	2000      	movs	r0, #0
 800fc72:	4770      	bx	lr
 800fc74:	20019d60 	.word	0x20019d60

0800fc78 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fc78:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fc7a:	4c05      	ldr	r4, [pc, #20]	; (800fc90 <disk_read+0x18>)
 800fc7c:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800fc80:	4404      	add	r4, r0
 800fc82:	686d      	ldr	r5, [r5, #4]
 800fc84:	7a20      	ldrb	r0, [r4, #8]
 800fc86:	68ac      	ldr	r4, [r5, #8]
 800fc88:	46a4      	mov	ip, r4
  return res;
}
 800fc8a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fc8c:	4760      	bx	ip
 800fc8e:	bf00      	nop
 800fc90:	20019d60 	.word	0x20019d60

0800fc94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fc94:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fc96:	4c05      	ldr	r4, [pc, #20]	; (800fcac <disk_write+0x18>)
 800fc98:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800fc9c:	4404      	add	r4, r0
 800fc9e:	686d      	ldr	r5, [r5, #4]
 800fca0:	7a20      	ldrb	r0, [r4, #8]
 800fca2:	68ec      	ldr	r4, [r5, #12]
 800fca4:	46a4      	mov	ip, r4
  return res;
}
 800fca6:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fca8:	4760      	bx	ip
 800fcaa:	bf00      	nop
 800fcac:	20019d60 	.word	0x20019d60

0800fcb0 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fcb0:	4b04      	ldr	r3, [pc, #16]	; (800fcc4 <disk_ioctl+0x14>)
 800fcb2:	eb03 0c00 	add.w	ip, r3, r0
 800fcb6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800fcc0:	691b      	ldr	r3, [r3, #16]
 800fcc2:	4718      	bx	r3
 800fcc4:	20019d60 	.word	0x20019d60

0800fcc8 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800fcc8:	4b26      	ldr	r3, [pc, #152]	; (800fd64 <inc_lock+0x9c>)
{
 800fcca:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	6805      	ldr	r5, [r0, #0]
 800fcd0:	4295      	cmp	r5, r2
 800fcd2:	d01b      	beq.n	800fd0c <inc_lock+0x44>
 800fcd4:	691c      	ldr	r4, [r3, #16]
 800fcd6:	42ac      	cmp	r4, r5
 800fcd8:	d006      	beq.n	800fce8 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fcda:	b30a      	cbz	r2, 800fd20 <inc_lock+0x58>
 800fcdc:	2c00      	cmp	r4, #0
 800fcde:	d036      	beq.n	800fd4e <inc_lock+0x86>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fce0:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800fce2:	4620      	mov	r0, r4
 800fce4:	bcf0      	pop	{r4, r5, r6, r7}
 800fce6:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800fce8:	695e      	ldr	r6, [r3, #20]
 800fcea:	6887      	ldr	r7, [r0, #8]
 800fcec:	42be      	cmp	r6, r7
 800fcee:	d1f4      	bne.n	800fcda <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 800fcf0:	699e      	ldr	r6, [r3, #24]
 800fcf2:	6947      	ldr	r7, [r0, #20]
 800fcf4:	42be      	cmp	r6, r7
 800fcf6:	d1f0      	bne.n	800fcda <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fcf8:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fcfa:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800fcfe:	bb49      	cbnz	r1, 800fd54 <inc_lock+0x8c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fd00:	0111      	lsls	r1, r2, #4
	return i + 1;
 800fd02:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fd04:	8982      	ldrh	r2, [r0, #12]
 800fd06:	3201      	adds	r2, #1
 800fd08:	b292      	uxth	r2, r2
 800fd0a:	e01b      	b.n	800fd44 <inc_lock+0x7c>
		if (Files[i].fs == dp->obj.fs &&
 800fd0c:	6884      	ldr	r4, [r0, #8]
 800fd0e:	685e      	ldr	r6, [r3, #4]
 800fd10:	42a6      	cmp	r6, r4
 800fd12:	d1df      	bne.n	800fcd4 <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
 800fd14:	689c      	ldr	r4, [r3, #8]
 800fd16:	6946      	ldr	r6, [r0, #20]
 800fd18:	42a6      	cmp	r6, r4
 800fd1a:	d1db      	bne.n	800fcd4 <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	e7ec      	b.n	800fcfa <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fd20:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fd22:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800fd24:	ea4f 1102 	mov.w	r1, r2, lsl #4
 800fd28:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800fd2c:	505d      	str	r5, [r3, r1]
		Files[i].clu = dp->obj.sclust;
 800fd2e:	6945      	ldr	r5, [r0, #20]
 800fd30:	6880      	ldr	r0, [r0, #8]
 800fd32:	e9c2 0501 	strd	r0, r5, [r2, #4]
		Files[i].ctr = 0;
 800fd36:	f04f 0000 	mov.w	r0, #0
 800fd3a:	8190      	strh	r0, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fd3c:	bf14      	ite	ne
 800fd3e:	f44f 7280 	movne.w	r2, #256	; 0x100
 800fd42:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fd44:	440b      	add	r3, r1
}
 800fd46:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fd48:	819a      	strh	r2, [r3, #12]
}
 800fd4a:	bcf0      	pop	{r4, r5, r6, r7}
 800fd4c:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fd4e:	2402      	movs	r4, #2
 800fd50:	2201      	movs	r2, #1
 800fd52:	e7e6      	b.n	800fd22 <inc_lock+0x5a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fd54:	8980      	ldrh	r0, [r0, #12]
 800fd56:	0111      	lsls	r1, r2, #4
 800fd58:	2800      	cmp	r0, #0
 800fd5a:	d1c1      	bne.n	800fce0 <inc_lock+0x18>
	return i + 1;
 800fd5c:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fd5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fd62:	e7ef      	b.n	800fd44 <inc_lock+0x7c>
 800fd64:	20019b3c 	.word	0x20019b3c

0800fd68 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800fd68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd6c:	440a      	add	r2, r1
 800fd6e:	460d      	mov	r5, r1
 800fd70:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800fd72:	4f37      	ldr	r7, [pc, #220]	; (800fe50 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800fd74:	42aa      	cmp	r2, r5
 800fd76:	d012      	beq.n	800fd9e <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800fd78:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fd7c:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800fd80:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800fd84:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fd88:	2919      	cmp	r1, #25
 800fd8a:	d9f3      	bls.n	800fd74 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800fd8c:	2c7f      	cmp	r4, #127	; 0x7f
 800fd8e:	bf88      	it	hi
 800fd90:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800fd94:	2c00      	cmp	r4, #0
 800fd96:	d1ed      	bne.n	800fd74 <pattern_matching+0xc>
 800fd98:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800fd9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800fd9e:	1e1f      	subs	r7, r3, #0
 800fda0:	f896 8000 	ldrb.w	r8, [r6]
 800fda4:	bf18      	it	ne
 800fda6:	2701      	movne	r7, #1
 800fda8:	f1b8 0f00 	cmp.w	r8, #0
 800fdac:	d100      	bne.n	800fdb0 <pattern_matching+0x48>
 800fdae:	bb8f      	cbnz	r7, 800fe14 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800fdb0:	4c27      	ldr	r4, [pc, #156]	; (800fe50 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800fdb2:	4630      	mov	r0, r6
{
 800fdb4:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800fdb6:	46a9      	mov	r9, r5
 800fdb8:	e010      	b.n	800fddc <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fdba:	3a20      	subs	r2, #32
 800fdbc:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800fdbe:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fdc2:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800fdc6:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fdc8:	f1bc 0f19 	cmp.w	ip, #25
 800fdcc:	d815      	bhi.n	800fdfa <pattern_matching+0x92>
 800fdce:	3b20      	subs	r3, #32
 800fdd0:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 800fdd2:	4293      	cmp	r3, r2
 800fdd4:	d118      	bne.n	800fe08 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800fdd6:	b1eb      	cbz	r3, 800fe14 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800fdd8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800fddc:	2b3f      	cmp	r3, #63	; 0x3f
 800fdde:	d01c      	beq.n	800fe1a <pattern_matching+0xb2>
 800fde0:	2b2a      	cmp	r3, #42	; 0x2a
 800fde2:	d01a      	beq.n	800fe1a <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fde4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800fde8:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fdea:	2919      	cmp	r1, #25
 800fdec:	d9e5      	bls.n	800fdba <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800fdee:	2a7f      	cmp	r2, #127	; 0x7f
 800fdf0:	d9e5      	bls.n	800fdbe <pattern_matching+0x56>
 800fdf2:	4423      	add	r3, r4
 800fdf4:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 800fdf8:	e7e1      	b.n	800fdbe <pattern_matching+0x56>
 800fdfa:	2b7f      	cmp	r3, #127	; 0x7f
 800fdfc:	d9e9      	bls.n	800fdd2 <pattern_matching+0x6a>
 800fdfe:	4421      	add	r1, r4
 800fe00:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 800fe04:	4293      	cmp	r3, r2
 800fe06:	d0e6      	beq.n	800fdd6 <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800fe08:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d0c4      	beq.n	800fd98 <pattern_matching+0x30>
 800fe0e:	2f00      	cmp	r7, #0
 800fe10:	d1cf      	bne.n	800fdb2 <pattern_matching+0x4a>
 800fe12:	e7c1      	b.n	800fd98 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
 800fe14:	2001      	movs	r0, #1
}
 800fe16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe1a:	4601      	mov	r1, r0
				nm = nx = 0;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	f811 cb01 	ldrb.w	ip, [r1], #1
 800fe22:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800fe24:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800fe28:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
 800fe2a:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800fe2e:	bf0c      	ite	eq
 800fe30:	3201      	addeq	r2, #1
 800fe32:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800fe34:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 800fe38:	d0f4      	beq.n	800fe24 <pattern_matching+0xbc>
 800fe3a:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800fe3e:	d0f1      	beq.n	800fe24 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800fe40:	4649      	mov	r1, r9
 800fe42:	f7ff ff91 	bl	800fd68 <pattern_matching>
 800fe46:	2800      	cmp	r0, #0
 800fe48:	d1e4      	bne.n	800fe14 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
 800fe4a:	f899 3000 	ldrb.w	r3, [r9]
 800fe4e:	e7db      	b.n	800fe08 <pattern_matching+0xa0>
 800fe50:	0801c454 	.word	0x0801c454

0800fe54 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
 800fe54:	2300      	movs	r3, #0
{
 800fe56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800fe5a:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800fe5e:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fe60:	69c2      	ldr	r2, [r0, #28]
 800fe62:	2a00      	cmp	r2, #0
 800fe64:	d063      	beq.n	800ff2e <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800fe66:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800fe68:	4604      	mov	r4, r0
 800fe6a:	460d      	mov	r5, r1
 800fe6c:	3201      	adds	r2, #1
 800fe6e:	d01f      	beq.n	800feb0 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fe70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fe74:	8818      	ldrh	r0, [r3, #0]
 800fe76:	2800      	cmp	r0, #0
 800fe78:	d063      	beq.n	800ff42 <get_fileinfo+0xee>
 800fe7a:	f101 0715 	add.w	r7, r1, #21
 800fe7e:	2601      	movs	r6, #1
 800fe80:	e000      	b.n	800fe84 <get_fileinfo+0x30>
 800fe82:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800fe84:	2100      	movs	r1, #0
 800fe86:	f002 ff5b 	bl	8012d40 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fe8a:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800fe8c:	2800      	cmp	r0, #0
 800fe8e:	d058      	beq.n	800ff42 <get_fileinfo+0xee>
 800fe90:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800fe94:	d055      	beq.n	800ff42 <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
 800fe96:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fe9a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800fe9e:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
 800fea2:	2800      	cmp	r0, #0
 800fea4:	d1ed      	bne.n	800fe82 <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
 800fea6:	442e      	add	r6, r5
 800fea8:	2300      	movs	r3, #0
 800feaa:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800feac:	7da8      	ldrb	r0, [r5, #22]
 800feae:	e000      	b.n	800feb2 <get_fileinfo+0x5e>
 800feb0:	4618      	mov	r0, r3
	i = j = 0;
 800feb2:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
 800feb6:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
 800feb8:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
 800feba:	6a21      	ldr	r1, [r4, #32]
 800febc:	5c8b      	ldrb	r3, [r1, r2]
 800febe:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800fec0:	2b20      	cmp	r3, #32
 800fec2:	d01b      	beq.n	800fefc <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fec4:	2b05      	cmp	r3, #5
 800fec6:	bf08      	it	eq
 800fec8:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800feca:	2a09      	cmp	r2, #9
 800fecc:	d031      	beq.n	800ff32 <get_fileinfo+0xde>
		fno->altname[j] = c;
 800fece:	eb05 010c 	add.w	r1, r5, ip
 800fed2:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 800fed4:	b980      	cbnz	r0, 800fef8 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800fed6:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
 800feda:	2e19      	cmp	r6, #25
 800fedc:	d80b      	bhi.n	800fef6 <get_fileinfo+0xa2>
 800fede:	6a26      	ldr	r6, [r4, #32]
 800fee0:	2a08      	cmp	r2, #8
 800fee2:	f896 e00c 	ldrb.w	lr, [r6, #12]
 800fee6:	bf8c      	ite	hi
 800fee8:	2610      	movhi	r6, #16
 800feea:	2608      	movls	r6, #8
 800feec:	ea1e 0f06 	tst.w	lr, r6
 800fef0:	d001      	beq.n	800fef6 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 800fef2:	3320      	adds	r3, #32
 800fef4:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
 800fef6:	758b      	strb	r3, [r1, #22]
		j++;
 800fef8:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 800fefc:	2a0b      	cmp	r2, #11
 800fefe:	d1dc      	bne.n	800feba <get_fileinfo+0x66>
		fno->fname[j] = 0;
 800ff00:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
 800ff04:	b928      	cbnz	r0, 800ff12 <get_fileinfo+0xbe>
		fno->fname[j] = 0;
 800ff06:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800ff08:	6a23      	ldr	r3, [r4, #32]
 800ff0a:	7b1b      	ldrb	r3, [r3, #12]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	bf08      	it	eq
 800ff10:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
 800ff12:	2300      	movs	r3, #0
 800ff14:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ff16:	6a23      	ldr	r3, [r4, #32]
 800ff18:	7adb      	ldrb	r3, [r3, #11]
 800ff1a:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 800ff1c:	6a23      	ldr	r3, [r4, #32]
 800ff1e:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ff20:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 800ff22:	6a23      	ldr	r3, [r4, #32]
 800ff24:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ff28:	0c1a      	lsrs	r2, r3, #16
 800ff2a:	80eb      	strh	r3, [r5, #6]
 800ff2c:	80aa      	strh	r2, [r5, #4]
}
 800ff2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 800ff32:	eb05 010c 	add.w	r1, r5, ip
 800ff36:	b900      	cbnz	r0, 800ff3a <get_fileinfo+0xe6>
 800ff38:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 800ff3a:	f10c 0c01 	add.w	ip, ip, #1
 800ff3e:	724f      	strb	r7, [r1, #9]
 800ff40:	e7c5      	b.n	800fece <get_fileinfo+0x7a>
			i = j = 0;
 800ff42:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800ff44:	2300      	movs	r3, #0
 800ff46:	442e      	add	r6, r5
 800ff48:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800ff4a:	7da8      	ldrb	r0, [r5, #22]
 800ff4c:	e7b1      	b.n	800feb2 <get_fileinfo+0x5e>
 800ff4e:	bf00      	nop

0800ff50 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ff50:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ff52:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800ff56:	2300      	movs	r3, #0
{
 800ff58:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff5a:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ff5c:	70c3      	strb	r3, [r0, #3]
 800ff5e:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800ff60:	d00c      	beq.n	800ff7c <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ff62:	460d      	mov	r5, r1
 800ff64:	460a      	mov	r2, r1
 800ff66:	2301      	movs	r3, #1
 800ff68:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800ff6c:	7840      	ldrb	r0, [r0, #1]
 800ff6e:	f7ff fe83 	bl	800fc78 <disk_read>
 800ff72:	b110      	cbz	r0, 800ff7a <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ff74:	2004      	movs	r0, #4
			fs->winsect = sector;
 800ff76:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800ff78:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800ff7a:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ff7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ff80:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d11a      	bne.n	800ffbe <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ff88:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800ff8c:	2be9      	cmp	r3, #233	; 0xe9
 800ff8e:	d007      	beq.n	800ffa0 <check_fs+0x50>
 800ff90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ff92:	4a0d      	ldr	r2, [pc, #52]	; (800ffc8 <check_fs+0x78>)
 800ff94:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d001      	beq.n	800ffa0 <check_fs+0x50>
	return 2;
 800ff9c:	2002      	movs	r0, #2
}
 800ff9e:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800ffa0:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ffa4:	4a09      	ldr	r2, [pc, #36]	; (800ffcc <check_fs+0x7c>)
 800ffa6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ffaa:	4293      	cmp	r3, r2
 800ffac:	d009      	beq.n	800ffc2 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 800ffae:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ffb2:	4b07      	ldr	r3, [pc, #28]	; (800ffd0 <check_fs+0x80>)
 800ffb4:	4298      	cmp	r0, r3
 800ffb6:	bf14      	ite	ne
 800ffb8:	2002      	movne	r0, #2
 800ffba:	2000      	moveq	r0, #0
}
 800ffbc:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ffbe:	2003      	movs	r0, #3
}
 800ffc0:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ffc2:	2000      	movs	r0, #0
}
 800ffc4:	bd70      	pop	{r4, r5, r6, pc}
 800ffc6:	bf00      	nop
 800ffc8:	009000eb 	.word	0x009000eb
 800ffcc:	00544146 	.word	0x00544146
 800ffd0:	33544146 	.word	0x33544146

0800ffd4 <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800ffd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ffd6:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800ffd8:	b083      	sub	sp, #12
 800ffda:	4604      	mov	r4, r0
 800ffdc:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ffde:	b973      	cbnz	r3, 800fffe <move_window.part.0+0x2a>
 800ffe0:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	462a      	mov	r2, r5
 800ffe8:	7860      	ldrb	r0, [r4, #1]
 800ffea:	f7ff fe45 	bl	800fc78 <disk_read>
 800ffee:	b910      	cbnz	r0, 800fff6 <move_window.part.0+0x22>
			fs->winsect = sector;
 800fff0:	6325      	str	r5, [r4, #48]	; 0x30
}
 800fff2:	b003      	add	sp, #12
 800fff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 800fff6:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fff8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800fffc:	e7f8      	b.n	800fff0 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
 800fffe:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010000:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8010004:	2301      	movs	r3, #1
 8010006:	7840      	ldrb	r0, [r0, #1]
 8010008:	4632      	mov	r2, r6
 801000a:	9101      	str	r1, [sp, #4]
 801000c:	f7ff fe42 	bl	800fc94 <disk_write>
 8010010:	b9b8      	cbnz	r0, 8010042 <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010012:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010014:	69e3      	ldr	r3, [r4, #28]
 8010016:	1ab2      	subs	r2, r6, r2
 8010018:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 801001a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801001c:	429a      	cmp	r2, r3
 801001e:	d2e1      	bcs.n	800ffe4 <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010020:	78a7      	ldrb	r7, [r4, #2]
 8010022:	2f01      	cmp	r7, #1
 8010024:	d801      	bhi.n	801002a <move_window.part.0+0x56>
 8010026:	e7dd      	b.n	800ffe4 <move_window.part.0+0x10>
					wsect += fs->fsize;
 8010028:	69e3      	ldr	r3, [r4, #28]
 801002a:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801002c:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801002e:	2301      	movs	r3, #1
 8010030:	7860      	ldrb	r0, [r4, #1]
 8010032:	4632      	mov	r2, r6
 8010034:	9101      	str	r1, [sp, #4]
 8010036:	f7ff fe2d 	bl	800fc94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801003a:	2f01      	cmp	r7, #1
 801003c:	9901      	ldr	r1, [sp, #4]
 801003e:	d1f3      	bne.n	8010028 <move_window.part.0+0x54>
 8010040:	e7d0      	b.n	800ffe4 <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 8010042:	2001      	movs	r0, #1
}
 8010044:	b003      	add	sp, #12
 8010046:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010048 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010048:	2300      	movs	r3, #0
{
 801004a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 801004e:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8010050:	6804      	ldr	r4, [r0, #0]
 8010052:	b18c      	cbz	r4, 8010078 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010054:	7825      	ldrb	r5, [r4, #0]
 8010056:	2d1f      	cmp	r5, #31
 8010058:	d912      	bls.n	8010080 <find_volume+0x38>
 801005a:	2d3a      	cmp	r5, #58	; 0x3a
 801005c:	d010      	beq.n	8010080 <find_volume+0x38>
 801005e:	46a4      	mov	ip, r4
 8010060:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8010064:	2b1f      	cmp	r3, #31
 8010066:	d90d      	bls.n	8010084 <find_volume+0x3c>
 8010068:	2b3a      	cmp	r3, #58	; 0x3a
 801006a:	d1f9      	bne.n	8010060 <find_volume+0x18>
			i = *tp++ - '0';
 801006c:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801006e:	45a4      	cmp	ip, r4
 8010070:	d102      	bne.n	8010078 <find_volume+0x30>
 8010072:	2d30      	cmp	r5, #48	; 0x30
 8010074:	f000 80da 	beq.w	801022c <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8010078:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 801007a:	4620      	mov	r0, r4
 801007c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010080:	462b      	mov	r3, r5
 8010082:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010084:	2b3a      	cmp	r3, #58	; 0x3a
 8010086:	d0f1      	beq.n	801006c <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010088:	4ba6      	ldr	r3, [pc, #664]	; (8010324 <find_volume+0x2dc>)
 801008a:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801008c:	2d00      	cmp	r5, #0
 801008e:	f000 80c9 	beq.w	8010224 <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 8010092:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010094:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010098:	782b      	ldrb	r3, [r5, #0]
 801009a:	b17b      	cbz	r3, 80100bc <find_volume+0x74>
		stat = disk_status(fs->drv);
 801009c:	7868      	ldrb	r0, [r5, #1]
 801009e:	f7ff fdcf 	bl	800fc40 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80100a2:	07c1      	lsls	r1, r0, #31
 80100a4:	d40a      	bmi.n	80100bc <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80100a6:	2c00      	cmp	r4, #0
 80100a8:	f000 80ab 	beq.w	8010202 <find_volume+0x1ba>
 80100ac:	f010 0404 	ands.w	r4, r0, #4
 80100b0:	f000 80a7 	beq.w	8010202 <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
 80100b4:	240a      	movs	r4, #10
}
 80100b6:	4620      	mov	r0, r4
 80100b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 80100bc:	2000      	movs	r0, #0
 80100be:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80100c0:	f7ff fdc8 	bl	800fc54 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80100c4:	07c2      	lsls	r2, r0, #31
 80100c6:	f100 809f 	bmi.w	8010208 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80100ca:	b10c      	cbz	r4, 80100d0 <find_volume+0x88>
 80100cc:	0743      	lsls	r3, r0, #29
 80100ce:	d4f1      	bmi.n	80100b4 <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80100d0:	2100      	movs	r1, #0
 80100d2:	4628      	mov	r0, r5
 80100d4:	f7ff ff3c 	bl	800ff50 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80100d8:	2802      	cmp	r0, #2
 80100da:	d077      	beq.n	80101cc <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80100dc:	2804      	cmp	r0, #4
 80100de:	f000 809f 	beq.w	8010220 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80100e2:	2801      	cmp	r0, #1
 80100e4:	f200 808c 	bhi.w	8010200 <find_volume+0x1b8>
	bsect = 0;
 80100e8:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80100ea:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 80100ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80100f2:	f040 8085 	bne.w	8010200 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80100f6:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80100fa:	b902      	cbnz	r2, 80100fe <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
 80100fc:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80100fe:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 8010102:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010104:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010106:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010108:	2901      	cmp	r1, #1
 801010a:	d879      	bhi.n	8010200 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801010c:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 8010110:	b288      	uxth	r0, r1
 8010112:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010114:	2800      	cmp	r0, #0
 8010116:	d073      	beq.n	8010200 <find_volume+0x1b8>
 8010118:	1e48      	subs	r0, r1, #1
 801011a:	4208      	tst	r0, r1
 801011c:	d170      	bne.n	8010200 <find_volume+0x1b8>
	rv = ptr[1];
 801011e:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010122:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010126:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801012a:	d169      	bne.n	8010200 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801012c:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010130:	b900      	cbnz	r0, 8010134 <find_volume+0xec>
	rv = rv << 8 | ptr[0];
 8010132:	6d68      	ldr	r0, [r5, #84]	; 0x54
	rv = ptr[1];
 8010134:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010138:	2f00      	cmp	r7, #0
 801013a:	d061      	beq.n	8010200 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801013c:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010140:	eb07 161c 	add.w	r6, r7, ip, lsr #4
 8010144:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010146:	42b0      	cmp	r0, r6
 8010148:	d35a      	bcc.n	8010200 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801014a:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801014e:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010150:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010154:	d354      	bcc.n	8010200 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010156:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 801015a:	4288      	cmp	r0, r1
 801015c:	f200 8084 	bhi.w	8010268 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010160:	f640 71f5 	movw	r1, #4085	; 0xff5
 8010164:	4288      	cmp	r0, r1
 8010166:	f200 80a3 	bhi.w	80102b0 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801016a:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801016c:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 801016e:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 8010170:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010172:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8010174:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010176:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010178:	f1bc 0f00 	cmp.w	ip, #0
 801017c:	d040      	beq.n	8010200 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801017e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8010182:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010186:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010188:	eb00 0151 	add.w	r1, r0, r1, lsr #1
 801018c:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801018e:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010190:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8010194:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
 8010198:	d332      	bcc.n	8010200 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801019a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 801019e:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80101a0:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 80101a4:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 80101a6:	4960      	ldr	r1, [pc, #384]	; (8010328 <find_volume+0x2e0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 80101a8:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80101aa:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80101ac:	485f      	ldr	r0, [pc, #380]	; (801032c <find_volume+0x2e4>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 80101ae:	4a60      	ldr	r2, [pc, #384]	; (8010330 <find_volume+0x2e8>)
	fs->id = ++Fsid;		/* File system mount ID */
 80101b0:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80101b2:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80101b4:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80101b6:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 80101b8:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
 80101ba:	800b      	strh	r3, [r1, #0]
 80101bc:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 80101be:	f000 8086 	beq.w	80102ce <find_volume+0x286>
 80101c2:	6913      	ldr	r3, [r2, #16]
 80101c4:	429d      	cmp	r5, r3
 80101c6:	d06f      	beq.n	80102a8 <find_volume+0x260>
	return FR_OK;
 80101c8:	2400      	movs	r4, #0
 80101ca:	e01a      	b.n	8010202 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80101cc:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
 80101d0:	b10e      	cbz	r6, 80101d6 <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
 80101d2:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80101d6:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
 80101da:	b10c      	cbz	r4, 80101e0 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 80101dc:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80101e0:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
 80101e4:	b303      	cbz	r3, 8010228 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
 80101e6:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80101ea:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
 80101ee:	b10f      	cbz	r7, 80101f4 <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
 80101f0:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80101f4:	b9f6      	cbnz	r6, 8010234 <find_volume+0x1ec>
 80101f6:	bb2c      	cbnz	r4, 8010244 <find_volume+0x1fc>
 80101f8:	f1b8 0f00 	cmp.w	r8, #0
 80101fc:	d12c      	bne.n	8010258 <find_volume+0x210>
 80101fe:	b93f      	cbnz	r7, 8010210 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010200:	240d      	movs	r4, #13
}
 8010202:	4620      	mov	r0, r4
 8010204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010208:	2403      	movs	r4, #3
}
 801020a:	4620      	mov	r0, r4
 801020c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010210:	4639      	mov	r1, r7
 8010212:	4628      	mov	r0, r5
 8010214:	f7ff fe9c 	bl	800ff50 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010218:	2801      	cmp	r0, #1
 801021a:	d95b      	bls.n	80102d4 <find_volume+0x28c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801021c:	2804      	cmp	r0, #4
 801021e:	d1ef      	bne.n	8010200 <find_volume+0x1b8>
 8010220:	2401      	movs	r4, #1
 8010222:	e7ee      	b.n	8010202 <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010224:	240c      	movs	r4, #12
 8010226:	e7ec      	b.n	8010202 <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010228:	4698      	mov	r8, r3
 801022a:	e7de      	b.n	80101ea <find_volume+0x1a2>
					*path = ++tt;
 801022c:	f10c 0301 	add.w	r3, ip, #1
 8010230:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010232:	e729      	b.n	8010088 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010234:	4631      	mov	r1, r6
 8010236:	4628      	mov	r0, r5
 8010238:	f7ff fe8a 	bl	800ff50 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801023c:	2801      	cmp	r0, #1
 801023e:	d8da      	bhi.n	80101f6 <find_volume+0x1ae>
 8010240:	4634      	mov	r4, r6
 8010242:	e752      	b.n	80100ea <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010244:	4621      	mov	r1, r4
 8010246:	4628      	mov	r0, r5
 8010248:	f7ff fe82 	bl	800ff50 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801024c:	2801      	cmp	r0, #1
 801024e:	f67f af4c 	bls.w	80100ea <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010252:	f1b8 0f00 	cmp.w	r8, #0
 8010256:	d0d2      	beq.n	80101fe <find_volume+0x1b6>
 8010258:	4641      	mov	r1, r8
 801025a:	4628      	mov	r0, r5
 801025c:	f7ff fe78 	bl	800ff50 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010260:	2801      	cmp	r0, #1
 8010262:	d8cc      	bhi.n	80101fe <find_volume+0x1b6>
 8010264:	4644      	mov	r4, r8
 8010266:	e740      	b.n	80100ea <find_volume+0xa2>
	rv = rv << 8 | ptr[0];
 8010268:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801026c:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801026e:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 8010270:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010272:	ea53 030c 	orrs.w	r3, r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010276:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010278:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801027a:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 801027c:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801027e:	d1bf      	bne.n	8010200 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010280:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
 8010282:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010284:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010288:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801028a:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 801028e:	d3b7      	bcc.n	8010200 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010290:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010294:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 8010298:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801029a:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 801029c:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801029e:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80102a2:	d019      	beq.n	80102d8 <find_volume+0x290>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80102a4:	2003      	movs	r0, #3
 80102a6:	e77e      	b.n	80101a6 <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80102a8:	2300      	movs	r3, #0
	return FR_OK;
 80102aa:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 80102ac:	6113      	str	r3, [r2, #16]
 80102ae:	e7a8      	b.n	8010202 <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80102b0:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80102b2:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 80102b4:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 80102b6:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80102b8:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 80102ba:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80102bc:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80102be:	f1bc 0f00 	cmp.w	ip, #0
 80102c2:	d09d      	beq.n	8010200 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80102c4:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80102c6:	0049      	lsls	r1, r1, #1
 80102c8:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80102ca:	62ab      	str	r3, [r5, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80102cc:	e760      	b.n	8010190 <find_volume+0x148>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80102ce:	2300      	movs	r3, #0
 80102d0:	6013      	str	r3, [r2, #0]
 80102d2:	e776      	b.n	80101c2 <find_volume+0x17a>
 80102d4:	463c      	mov	r4, r7
 80102d6:	e708      	b.n	80100ea <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
 80102d8:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80102da:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80102dc:	4299      	cmp	r1, r3
 80102de:	d004      	beq.n	80102ea <find_volume+0x2a2>
 80102e0:	4628      	mov	r0, r5
 80102e2:	f7ff fe77 	bl	800ffd4 <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 80102e6:	2800      	cmp	r0, #0
 80102e8:	d1dc      	bne.n	80102a4 <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80102ea:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80102ee:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
 80102f2:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80102f4:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
 80102f6:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80102f8:	d1d4      	bne.n	80102a4 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 80102fa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80102fc:	4b0d      	ldr	r3, [pc, #52]	; (8010334 <find_volume+0x2ec>)
 80102fe:	429a      	cmp	r2, r3
 8010300:	d1d0      	bne.n	80102a4 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010302:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 8010306:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801030a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 801030e:	3320      	adds	r3, #32
 8010310:	429a      	cmp	r2, r3
 8010312:	d1c7      	bne.n	80102a4 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8010314:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010318:	2003      	movs	r0, #3
 801031a:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
 801031e:	e9c5 2304 	strd	r2, r3, [r5, #16]
 8010322:	e740      	b.n	80101a6 <find_volume+0x15e>
 8010324:	20019b38 	.word	0x20019b38
 8010328:	20019b5c 	.word	0x20019b5c
 801032c:	20019b60 	.word	0x20019b60
 8010330:	20019b3c 	.word	0x20019b3c
 8010334:	41615252 	.word	0x41615252

08010338 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8010338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 801033c:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 801033e:	4604      	mov	r4, r0
 8010340:	460d      	mov	r5, r1
 8010342:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8010344:	2b02      	cmp	r3, #2
 8010346:	d006      	beq.n	8010356 <put_fat.part.0+0x1e>
 8010348:	2b03      	cmp	r3, #3
 801034a:	d052      	beq.n	80103f2 <put_fat.part.0+0xba>
 801034c:	2b01      	cmp	r3, #1
 801034e:	d01b      	beq.n	8010388 <put_fat.part.0+0x50>
 8010350:	2002      	movs	r0, #2
}
 8010352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010356:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010358:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801035a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 801035e:	4299      	cmp	r1, r3
 8010360:	d003      	beq.n	801036a <put_fat.part.0+0x32>
 8010362:	f7ff fe37 	bl	800ffd4 <move_window.part.0>
			if (res != FR_OK) break;
 8010366:	2800      	cmp	r0, #0
 8010368:	d1f3      	bne.n	8010352 <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801036a:	006d      	lsls	r5, r5, #1
 801036c:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8010370:	f3c6 2207 	ubfx	r2, r6, #8, #8
			break;
 8010374:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010376:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 801037a:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801037c:	1959      	adds	r1, r3, r5
			fs->wflag = 1;
 801037e:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8010380:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 8010382:	70e3      	strb	r3, [r4, #3]
}
 8010384:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
 8010388:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801038c:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801038e:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010390:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010394:	4299      	cmp	r1, r3
 8010396:	d003      	beq.n	80103a0 <put_fat.part.0+0x68>
 8010398:	f7ff fe1c 	bl	800ffd4 <move_window.part.0>
			if (res != FR_OK) break;
 801039c:	2800      	cmp	r0, #0
 801039e:	d1d8      	bne.n	8010352 <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80103a0:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 80103a2:	f107 0801 	add.w	r8, r7, #1
 80103a6:	f104 0934 	add.w	r9, r4, #52	; 0x34
 80103aa:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80103ae:	d542      	bpl.n	8010436 <put_fat.part.0+0xfe>
 80103b0:	f819 3007 	ldrb.w	r3, [r9, r7]
 80103b4:	f003 030f 	and.w	r3, r3, #15
 80103b8:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 80103bc:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
 80103c0:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80103c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 80103c4:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80103c6:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80103ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80103cc:	4299      	cmp	r1, r3
 80103ce:	d004      	beq.n	80103da <put_fat.part.0+0xa2>
 80103d0:	4620      	mov	r0, r4
 80103d2:	f7ff fdff 	bl	800ffd4 <move_window.part.0>
			if (res != FR_OK) break;
 80103d6:	2800      	cmp	r0, #0
 80103d8:	d1bb      	bne.n	8010352 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 80103da:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80103de:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
 80103e2:	44c8      	add	r8, r9
			fs->wflag = 1;
 80103e4:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80103e6:	f888 2000 	strb.w	r2, [r8]
			break;
 80103ea:	2000      	movs	r0, #0
			fs->wflag = 1;
 80103ec:	70e3      	strb	r3, [r4, #3]
}
 80103ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80103f2:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80103f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80103f6:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80103fa:	4299      	cmp	r1, r3
 80103fc:	d003      	beq.n	8010406 <put_fat.part.0+0xce>
 80103fe:	f7ff fde9 	bl	800ffd4 <move_window.part.0>
			if (res != FR_OK) break;
 8010402:	2800      	cmp	r0, #0
 8010404:	d1a5      	bne.n	8010352 <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010406:	00ad      	lsls	r5, r5, #2
 8010408:	f104 0034 	add.w	r0, r4, #52	; 0x34
 801040c:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
 8010410:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8010414:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010416:	1941      	adds	r1, r0, r5
 8010418:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801041c:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
 801041e:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8010420:	5542      	strb	r2, [r0, r5]
 8010422:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8010424:	708b      	strb	r3, [r1, #2]
 8010426:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
 8010428:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 801042a:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
 801042c:	70ca      	strb	r2, [r1, #3]
			break;
 801042e:	2000      	movs	r0, #0
			fs->wflag = 1;
 8010430:	70e3      	strb	r3, [r4, #3]
}
 8010432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010436:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
 801043a:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801043c:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 801043e:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010440:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010444:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010446:	4299      	cmp	r1, r3
 8010448:	d005      	beq.n	8010456 <put_fat.part.0+0x11e>
 801044a:	4620      	mov	r0, r4
 801044c:	f7ff fdc2 	bl	800ffd4 <move_window.part.0>
			if (res != FR_OK) break;
 8010450:	2800      	cmp	r0, #0
 8010452:	f47f af7e 	bne.w	8010352 <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8010456:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801045a:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
 801045e:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010460:	f898 3000 	ldrb.w	r3, [r8]
 8010464:	f023 060f 	bic.w	r6, r3, #15
 8010468:	4332      	orrs	r2, r6
 801046a:	e7bb      	b.n	80103e4 <put_fat.part.0+0xac>

0801046c <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801046c:	2901      	cmp	r1, #1
 801046e:	d90e      	bls.n	801048e <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8010470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010472:	6983      	ldr	r3, [r0, #24]
 8010474:	460c      	mov	r4, r1
 8010476:	4605      	mov	r5, r0
 8010478:	4299      	cmp	r1, r3
 801047a:	d206      	bcs.n	801048a <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 801047c:	7803      	ldrb	r3, [r0, #0]
 801047e:	2b02      	cmp	r3, #2
 8010480:	d03e      	beq.n	8010500 <get_fat.isra.0+0x94>
 8010482:	2b03      	cmp	r3, #3
 8010484:	d02b      	beq.n	80104de <get_fat.isra.0+0x72>
 8010486:	2b01      	cmp	r3, #1
 8010488:	d003      	beq.n	8010492 <get_fat.isra.0+0x26>
 801048a:	2001      	movs	r0, #1
}
 801048c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 801048e:	2001      	movs	r0, #1
}
 8010490:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
 8010492:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010496:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010498:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801049a:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 801049e:	4291      	cmp	r1, r2
 80104a0:	d004      	beq.n	80104ac <get_fat.isra.0+0x40>
 80104a2:	f7ff fd97 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80104a6:	bba0      	cbnz	r0, 8010512 <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80104a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80104aa:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80104ac:	1c77      	adds	r7, r6, #1
 80104ae:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80104b2:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80104b6:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 80104b8:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 80104ba:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80104be:	d003      	beq.n	80104c8 <get_fat.isra.0+0x5c>
 80104c0:	4628      	mov	r0, r5
 80104c2:	f7ff fd87 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80104c6:	bb20      	cbnz	r0, 8010512 <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
 80104c8:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80104cc:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80104ce:	443d      	add	r5, r7
 80104d0:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 80104d4:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80104d8:	d524      	bpl.n	8010524 <get_fat.isra.0+0xb8>
 80104da:	0900      	lsrs	r0, r0, #4
}
 80104dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80104de:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80104e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80104e2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80104e6:	4299      	cmp	r1, r3
 80104e8:	d002      	beq.n	80104f0 <get_fat.isra.0+0x84>
 80104ea:	f7ff fd73 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80104ee:	b980      	cbnz	r0, 8010512 <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80104f0:	00a4      	lsls	r4, r4, #2
 80104f2:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 80104f6:	4425      	add	r5, r4
 80104f8:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80104fa:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 80104fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010500:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010502:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010504:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010508:	4299      	cmp	r1, r3
 801050a:	d005      	beq.n	8010518 <get_fat.isra.0+0xac>
 801050c:	f7ff fd62 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010510:	b110      	cbz	r0, 8010518 <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8010516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010518:	0064      	lsls	r4, r4, #1
 801051a:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 801051e:	4425      	add	r5, r4
 8010520:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
 8010522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010524:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 8010528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801052a:	bf00      	nop

0801052c <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 801052c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010530:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010532:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010534:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010536:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 801053a:	d22d      	bcs.n	8010598 <dir_next.constprop.0+0x6c>
 801053c:	b363      	cbz	r3, 8010598 <dir_next.constprop.0+0x6c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801053e:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8010542:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8010544:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010546:	b137      	cbz	r7, 8010556 <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010548:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
 801054a:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 801054c:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801054e:	443e      	add	r6, r7
 8010550:	6226      	str	r6, [r4, #32]
}
 8010552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
 8010556:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8010558:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 801055a:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 801055c:	b1f9      	cbz	r1, 801059e <dir_next.constprop.0+0x72>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801055e:	8973      	ldrh	r3, [r6, #10]
 8010560:	3b01      	subs	r3, #1
 8010562:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 8010566:	d1ef      	bne.n	8010548 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010568:	4630      	mov	r0, r6
 801056a:	f7ff ff7f 	bl	801046c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801056e:	2801      	cmp	r0, #1
 8010570:	d91d      	bls.n	80105ae <dir_next.constprop.0+0x82>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010572:	1c43      	adds	r3, r0, #1
 8010574:	d01d      	beq.n	80105b2 <dir_next.constprop.0+0x86>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010576:	69b3      	ldr	r3, [r6, #24]
 8010578:	4298      	cmp	r0, r3
 801057a:	d214      	bcs.n	80105a6 <dir_next.constprop.0+0x7a>
				dp->clust = clst;		/* Initialize data for new cluster */
 801057c:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 801057e:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010580:	69b3      	ldr	r3, [r6, #24]
 8010582:	3b02      	subs	r3, #2
 8010584:	4298      	cmp	r0, r3
 8010586:	d204      	bcs.n	8010592 <dir_next.constprop.0+0x66>
	return clst * fs->csize + fs->database;
 8010588:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 801058c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 801058e:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
 8010592:	f8c4 801c 	str.w	r8, [r4, #28]
 8010596:	e7d7      	b.n	8010548 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010598:	2004      	movs	r0, #4
}
 801059a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801059e:	8933      	ldrh	r3, [r6, #8]
 80105a0:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 80105a4:	d8d0      	bhi.n	8010548 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
 80105a6:	2300      	movs	r3, #0
 80105a8:	2004      	movs	r0, #4
 80105aa:	61e3      	str	r3, [r4, #28]
 80105ac:	e7d1      	b.n	8010552 <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80105ae:	2002      	movs	r0, #2
 80105b0:	e7cf      	b.n	8010552 <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80105b2:	2001      	movs	r0, #1
 80105b4:	e7cd      	b.n	8010552 <dir_next.constprop.0+0x26>
 80105b6:	bf00      	nop

080105b8 <dir_read>:
{
 80105b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 80105bc:	69c6      	ldr	r6, [r0, #28]
{
 80105be:	b083      	sub	sp, #12
 80105c0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80105c2:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 80105c4:	2e00      	cmp	r6, #0
 80105c6:	d064      	beq.n	8010692 <dir_read+0xda>
	BYTE ord = 0xFF, sum = 0xFF;
 80105c8:	23ff      	movs	r3, #255	; 0xff
 80105ca:	468a      	mov	sl, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80105cc:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
 80105d0:	4698      	mov	r8, r3
 80105d2:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80105d4:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80105d6:	42b5      	cmp	r5, r6
 80105d8:	d014      	beq.n	8010604 <dir_read+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80105da:	78fb      	ldrb	r3, [r7, #3]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	f040 80d2 	bne.w	8010786 <dir_read+0x1ce>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80105e2:	2301      	movs	r3, #1
 80105e4:	4632      	mov	r2, r6
 80105e6:	4649      	mov	r1, r9
 80105e8:	7878      	ldrb	r0, [r7, #1]
 80105ea:	f7ff fb45 	bl	800fc78 <disk_read>
 80105ee:	b140      	cbz	r0, 8010602 <dir_read+0x4a>
			fs->winsect = sector;
 80105f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 80105f4:	2001      	movs	r0, #1
			fs->winsect = sector;
 80105f6:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80105f8:	2300      	movs	r3, #0
 80105fa:	61e3      	str	r3, [r4, #28]
}
 80105fc:	b003      	add	sp, #12
 80105fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8010602:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010604:	6a21      	ldr	r1, [r4, #32]
 8010606:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 8010608:	2a00      	cmp	r2, #0
 801060a:	d042      	beq.n	8010692 <dir_read+0xda>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 801060c:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 801060e:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8010610:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010614:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8010616:	d00a      	beq.n	801062e <dir_read+0x76>
 8010618:	2a2e      	cmp	r2, #46	; 0x2e
 801061a:	d008      	beq.n	801062e <dir_read+0x76>
 801061c:	f023 0020 	bic.w	r0, r3, #32
 8010620:	f1a0 0008 	sub.w	r0, r0, #8
 8010624:	fab0 f080 	clz	r0, r0
 8010628:	0940      	lsrs	r0, r0, #5
 801062a:	4550      	cmp	r0, sl
 801062c:	d038      	beq.n	80106a0 <dir_read+0xe8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801062e:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010632:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010634:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010636:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010638:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 801063c:	d229      	bcs.n	8010692 <dir_read+0xda>
 801063e:	b346      	cbz	r6, 8010692 <dir_read+0xda>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010640:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8010644:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010646:	bb32      	cbnz	r2, 8010696 <dir_read+0xde>
		dp->sect++;				/* Next sector */
 8010648:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 801064a:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 801064c:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 801064e:	b961      	cbnz	r1, 801066a <dir_read+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010650:	891a      	ldrh	r2, [r3, #8]
 8010652:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8010656:	d91c      	bls.n	8010692 <dir_read+0xda>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010658:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 801065a:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801065c:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 801065e:	2e00      	cmp	r6, #0
 8010660:	d1b8      	bne.n	80105d4 <dir_read+0x1c>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8010662:	2000      	movs	r0, #0
}
 8010664:	b003      	add	sp, #12
 8010666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801066a:	895a      	ldrh	r2, [r3, #10]
 801066c:	3a01      	subs	r2, #1
 801066e:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 8010672:	d1f1      	bne.n	8010658 <dir_read+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010674:	4618      	mov	r0, r3
 8010676:	9301      	str	r3, [sp, #4]
 8010678:	f7ff fef8 	bl	801046c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801067c:	2801      	cmp	r0, #1
 801067e:	f240 80b6 	bls.w	80107ee <dir_read+0x236>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010682:	1c43      	adds	r3, r0, #1
 8010684:	f000 8086 	beq.w	8010794 <dir_read+0x1dc>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010688:	9b01      	ldr	r3, [sp, #4]
 801068a:	699a      	ldr	r2, [r3, #24]
 801068c:	4290      	cmp	r0, r2
 801068e:	f0c0 80a2 	bcc.w	80107d6 <dir_read+0x21e>
	FRESULT res = FR_NO_FILE;
 8010692:	2004      	movs	r0, #4
 8010694:	e7b0      	b.n	80105f8 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010696:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8010698:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801069a:	441a      	add	r2, r3
 801069c:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
 801069e:	e799      	b.n	80105d4 <dir_read+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
 80106a0:	2b0f      	cmp	r3, #15
 80106a2:	f040 80ac 	bne.w	80107fe <dir_read+0x246>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80106a6:	0650      	lsls	r0, r2, #25
 80106a8:	d576      	bpl.n	8010798 <dir_read+0x1e0>
						sum = dp->dir[LDIR_Chksum];
 80106aa:	7b4b      	ldrb	r3, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 80106ac:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 80106b0:	9300      	str	r3, [sp, #0]
						dp->blk_ofs = dp->dptr;
 80106b2:	6963      	ldr	r3, [r4, #20]
 80106b4:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80106b6:	7b4b      	ldrb	r3, [r1, #13]
 80106b8:	9800      	ldr	r0, [sp, #0]
 80106ba:	4283      	cmp	r3, r0
 80106bc:	d1b7      	bne.n	801062e <dir_read+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80106be:	8b4b      	ldrh	r3, [r1, #26]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d1b4      	bne.n	801062e <dir_read+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80106c4:	780b      	ldrb	r3, [r1, #0]
 80106c6:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 80106ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80106ce:	3b01      	subs	r3, #1
 80106d0:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 80106d4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80106d8:	2bfe      	cmp	r3, #254	; 0xfe
 80106da:	d8a8      	bhi.n	801062e <dir_read+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80106dc:	68fd      	ldr	r5, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 80106de:	f103 0801 	add.w	r8, r3, #1
 80106e2:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
 80106e6:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
 80106ea:	2800      	cmp	r0, #0
 80106ec:	f040 8090 	bne.w	8010810 <dir_read+0x258>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80106f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80106f4:	429e      	cmp	r6, r3
 80106f6:	d19a      	bne.n	801062e <dir_read+0x76>
	rv = ptr[1];
 80106f8:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80106fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010700:	459e      	cmp	lr, r3
 8010702:	d194      	bne.n	801062e <dir_read+0x76>
	rv = ptr[1];
 8010704:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801070c:	459c      	cmp	ip, r3
 801070e:	d18e      	bne.n	801062e <dir_read+0x76>
	rv = ptr[1];
 8010710:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010718:	429e      	cmp	r6, r3
 801071a:	d188      	bne.n	801062e <dir_read+0x76>
	rv = ptr[1];
 801071c:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010720:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010724:	459c      	cmp	ip, r3
 8010726:	d182      	bne.n	801062e <dir_read+0x76>
	rv = ptr[1];
 8010728:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801072c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010730:	459e      	cmp	lr, r3
 8010732:	f47f af7c 	bne.w	801062e <dir_read+0x76>
	rv = ptr[1];
 8010736:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801073c:	429e      	cmp	r6, r3
 801073e:	f47f af76 	bne.w	801062e <dir_read+0x76>
	rv = ptr[1];
 8010742:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801074a:	459c      	cmp	ip, r3
 801074c:	f47f af6f 	bne.w	801062e <dir_read+0x76>
	rv = ptr[1];
 8010750:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010752:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010756:	429e      	cmp	r6, r3
 8010758:	f47f af69 	bne.w	801062e <dir_read+0x76>
	rv = ptr[1];
 801075c:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010764:	459c      	cmp	ip, r3
 8010766:	f47f af62 	bne.w	801062e <dir_read+0x76>
	rv = ptr[1];
 801076a:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801076c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010770:	429e      	cmp	r6, r3
 8010772:	f47f af5c 	bne.w	801062e <dir_read+0x76>
	rv = ptr[1];
 8010776:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801077a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801077e:	459c      	cmp	ip, r3
 8010780:	f000 80df 	beq.w	8010942 <dir_read+0x38a>
 8010784:	e753      	b.n	801062e <dir_read+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010786:	2301      	movs	r3, #1
 8010788:	462a      	mov	r2, r5
 801078a:	4649      	mov	r1, r9
 801078c:	7878      	ldrb	r0, [r7, #1]
 801078e:	f7ff fa81 	bl	800fc94 <disk_write>
 8010792:	b128      	cbz	r0, 80107a0 <dir_read+0x1e8>
	FRESULT res = FR_NO_FILE;
 8010794:	2001      	movs	r0, #1
 8010796:	e72f      	b.n	80105f8 <dir_read+0x40>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010798:	4590      	cmp	r8, r2
 801079a:	f47f af48 	bne.w	801062e <dir_read+0x76>
 801079e:	e78a      	b.n	80106b6 <dir_read+0xfe>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80107a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 80107a2:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80107a4:	1aea      	subs	r2, r5, r3
 80107a6:	69fb      	ldr	r3, [r7, #28]
 80107a8:	429a      	cmp	r2, r3
 80107aa:	f4bf af1a 	bcs.w	80105e2 <dir_read+0x2a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80107ae:	f897 b002 	ldrb.w	fp, [r7, #2]
 80107b2:	f1bb 0f01 	cmp.w	fp, #1
 80107b6:	d801      	bhi.n	80107bc <dir_read+0x204>
 80107b8:	e713      	b.n	80105e2 <dir_read+0x2a>
					wsect += fs->fsize;
 80107ba:	69fb      	ldr	r3, [r7, #28]
 80107bc:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80107be:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 80107c2:	2301      	movs	r3, #1
 80107c4:	4649      	mov	r1, r9
 80107c6:	462a      	mov	r2, r5
 80107c8:	7878      	ldrb	r0, [r7, #1]
 80107ca:	f7ff fa63 	bl	800fc94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80107ce:	f1bb 0f01 	cmp.w	fp, #1
 80107d2:	d1f2      	bne.n	80107ba <dir_read+0x202>
 80107d4:	e705      	b.n	80105e2 <dir_read+0x2a>
				dp->clust = clst;		/* Initialize data for new cluster */
 80107d6:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 80107d8:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80107da:	699a      	ldr	r2, [r3, #24]
 80107dc:	3a02      	subs	r2, #2
 80107de:	4290      	cmp	r0, r2
 80107e0:	d207      	bcs.n	80107f2 <dir_read+0x23a>
	return clst * fs->csize + fs->database;
 80107e2:	895a      	ldrh	r2, [r3, #10]
 80107e4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80107e6:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 80107ea:	61e6      	str	r6, [r4, #28]
 80107ec:	e734      	b.n	8010658 <dir_read+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80107ee:	2002      	movs	r0, #2
 80107f0:	e702      	b.n	80105f8 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80107f2:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 80107f4:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 80107f8:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80107fa:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 80107fc:	e731      	b.n	8010662 <dir_read+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80107fe:	f1b8 0f00 	cmp.w	r8, #0
 8010802:	f000 80ac 	beq.w	801095e <dir_read+0x3a6>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8010806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801080a:	2000      	movs	r0, #0
 801080c:	6323      	str	r3, [r4, #48]	; 0x30
 801080e:	e6f5      	b.n	80105fc <dir_read+0x44>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8010810:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8010814:	f43f af0d 	beq.w	8010632 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8010818:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801081c:	ea4f 0048 	mov.w	r0, r8, lsl #1
 8010820:	f8b1 e005 	ldrh.w	lr, [r1, #5]
 8010824:	f103 0802 	add.w	r8, r3, #2
		if (wc) {
 8010828:	2e00      	cmp	r6, #0
 801082a:	f43f af67 	beq.w	80106fc <dir_read+0x144>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801082e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8010832:	f43f aefe 	beq.w	8010632 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8010836:	4428      	add	r0, r5
 8010838:	f103 0803 	add.w	r8, r3, #3
 801083c:	f8a0 e002 	strh.w	lr, [r0, #2]
 8010840:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
 8010844:	f1be 0f00 	cmp.w	lr, #0
 8010848:	f43f af5e 	beq.w	8010708 <dir_read+0x150>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801084c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8010850:	f43f aeef 	beq.w	8010632 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8010854:	f8a0 c004 	strh.w	ip, [r0, #4]
 8010858:	f103 0804 	add.w	r8, r3, #4
	rv = ptr[1];
 801085c:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
 8010860:	f1bc 0f00 	cmp.w	ip, #0
 8010864:	f43f af56 	beq.w	8010714 <dir_read+0x15c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8010868:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801086c:	f43f aee1 	beq.w	8010632 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8010870:	80c6      	strh	r6, [r0, #6]
 8010872:	f103 0805 	add.w	r8, r3, #5
	rv = ptr[1];
 8010876:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
 801087a:	2e00      	cmp	r6, #0
 801087c:	f43f af50 	beq.w	8010720 <dir_read+0x168>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8010880:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8010884:	f43f aed5 	beq.w	8010632 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8010888:	f8a0 c008 	strh.w	ip, [r0, #8]
 801088c:	f103 0806 	add.w	r8, r3, #6
	rv = ptr[1];
 8010890:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
 8010894:	f1bc 0f00 	cmp.w	ip, #0
 8010898:	f43f af48 	beq.w	801072c <dir_read+0x174>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801089c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80108a0:	f43f aec7 	beq.w	8010632 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80108a4:	f8a0 e00a 	strh.w	lr, [r0, #10]
 80108a8:	f103 0807 	add.w	r8, r3, #7
	rv = ptr[1];
 80108ac:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
 80108ae:	f1be 0f00 	cmp.w	lr, #0
 80108b2:	f43f af41 	beq.w	8010738 <dir_read+0x180>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80108b6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80108ba:	f43f aeba 	beq.w	8010632 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80108be:	8186      	strh	r6, [r0, #12]
 80108c0:	f103 0808 	add.w	r8, r3, #8
	rv = ptr[1];
 80108c4:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
 80108c8:	2e00      	cmp	r6, #0
 80108ca:	f43f af3c 	beq.w	8010746 <dir_read+0x18e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80108ce:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80108d2:	f43f aeae 	beq.w	8010632 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80108d6:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80108da:	f103 0809 	add.w	r8, r3, #9
	rv = ptr[1];
 80108de:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
 80108e0:	f1bc 0f00 	cmp.w	ip, #0
 80108e4:	f43f af35 	beq.w	8010752 <dir_read+0x19a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80108e8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80108ec:	f43f aea1 	beq.w	8010632 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80108f0:	8206      	strh	r6, [r0, #16]
 80108f2:	f103 080a 	add.w	r8, r3, #10
	rv = ptr[1];
 80108f6:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
 80108fa:	2e00      	cmp	r6, #0
 80108fc:	f43f af30 	beq.w	8010760 <dir_read+0x1a8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8010900:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8010904:	f43f ae95 	beq.w	8010632 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8010908:	f8a0 c012 	strh.w	ip, [r0, #18]
 801090c:	f103 080b 	add.w	r8, r3, #11
	rv = ptr[1];
 8010910:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
 8010912:	f1bc 0f00 	cmp.w	ip, #0
 8010916:	f43f af29 	beq.w	801076c <dir_read+0x1b4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801091a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801091e:	f43f ae88 	beq.w	8010632 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8010922:	8286      	strh	r6, [r0, #20]
 8010924:	f103 080c 	add.w	r8, r3, #12
	rv = ptr[1];
 8010928:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
 801092c:	2e00      	cmp	r6, #0
 801092e:	f43f af24 	beq.w	801077a <dir_read+0x1c2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8010932:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8010936:	f43f ae7c 	beq.w	8010632 <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801093a:	f103 080d 	add.w	r8, r3, #13
 801093e:	f8a0 c016 	strh.w	ip, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8010942:	780b      	ldrb	r3, [r1, #0]
 8010944:	0659      	lsls	r1, r3, #25
 8010946:	d506      	bpl.n	8010956 <dir_read+0x39e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8010948:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801094c:	f43f ae71 	beq.w	8010632 <dir_read+0x7a>
		lfnbuf[i] = 0;
 8010950:	2300      	movs	r3, #0
 8010952:	f825 3018 	strh.w	r3, [r5, r8, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010956:	3a01      	subs	r2, #1
 8010958:	fa5f f882 	uxtb.w	r8, r2
 801095c:	e669      	b.n	8010632 <dir_read+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801095e:	780a      	ldrb	r2, [r1, #0]
 8010960:	01d3      	lsls	r3, r2, #7
 8010962:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 8010966:	784a      	ldrb	r2, [r1, #1]
 8010968:	441a      	add	r2, r3
 801096a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801096e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010972:	788a      	ldrb	r2, [r1, #2]
 8010974:	fa52 f283 	uxtab	r2, r2, r3
 8010978:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801097c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8010980:	78ca      	ldrb	r2, [r1, #3]
 8010982:	fa52 f283 	uxtab	r2, r2, r3
 8010986:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801098a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801098e:	790a      	ldrb	r2, [r1, #4]
 8010990:	fa52 f283 	uxtab	r2, r2, r3
 8010994:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8010998:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801099c:	794a      	ldrb	r2, [r1, #5]
 801099e:	fa52 f283 	uxtab	r2, r2, r3
 80109a2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80109a6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80109aa:	798a      	ldrb	r2, [r1, #6]
 80109ac:	fa52 f283 	uxtab	r2, r2, r3
 80109b0:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80109b4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80109b8:	79ca      	ldrb	r2, [r1, #7]
 80109ba:	fa52 f283 	uxtab	r2, r2, r3
 80109be:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80109c2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80109c6:	7a0a      	ldrb	r2, [r1, #8]
 80109c8:	fa52 f283 	uxtab	r2, r2, r3
 80109cc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80109d0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80109d4:	7a4a      	ldrb	r2, [r1, #9]
 80109d6:	7a89      	ldrb	r1, [r1, #10]
 80109d8:	fa52 f283 	uxtab	r2, r2, r3
 80109dc:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80109e0:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80109e4:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80109e6:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80109ea:	b2db      	uxtb	r3, r3
 80109ec:	429a      	cmp	r2, r3
 80109ee:	f47f af0a 	bne.w	8010806 <dir_read+0x24e>
 80109f2:	e636      	b.n	8010662 <dir_read+0xaa>

080109f4 <sync_fs>:
{
 80109f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80109f6:	78c3      	ldrb	r3, [r0, #3]
{
 80109f8:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80109fa:	b95b      	cbnz	r3, 8010a14 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80109fc:	7823      	ldrb	r3, [r4, #0]
 80109fe:	2b03      	cmp	r3, #3
 8010a00:	d029      	beq.n	8010a56 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010a02:	2200      	movs	r2, #0
 8010a04:	7860      	ldrb	r0, [r4, #1]
 8010a06:	4611      	mov	r1, r2
 8010a08:	f7ff f952 	bl	800fcb0 <disk_ioctl>
			res = FR_DISK_ERR;
 8010a0c:	3800      	subs	r0, #0
 8010a0e:	bf18      	it	ne
 8010a10:	2001      	movne	r0, #1
}
 8010a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 8010a14:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010a16:	f100 0734 	add.w	r7, r0, #52	; 0x34
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	7840      	ldrb	r0, [r0, #1]
 8010a1e:	462a      	mov	r2, r5
 8010a20:	4639      	mov	r1, r7
 8010a22:	f7ff f937 	bl	800fc94 <disk_write>
 8010a26:	2800      	cmp	r0, #0
 8010a28:	d150      	bne.n	8010acc <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010a2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8010a2c:	69e3      	ldr	r3, [r4, #28]
 8010a2e:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 8010a30:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d2e2      	bcs.n	80109fc <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a36:	78a6      	ldrb	r6, [r4, #2]
 8010a38:	2e01      	cmp	r6, #1
 8010a3a:	d801      	bhi.n	8010a40 <sync_fs+0x4c>
 8010a3c:	e7de      	b.n	80109fc <sync_fs+0x8>
					wsect += fs->fsize;
 8010a3e:	69e3      	ldr	r3, [r4, #28]
 8010a40:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a42:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8010a44:	2301      	movs	r3, #1
 8010a46:	4639      	mov	r1, r7
 8010a48:	462a      	mov	r2, r5
 8010a4a:	7860      	ldrb	r0, [r4, #1]
 8010a4c:	f7ff f922 	bl	800fc94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a50:	2e01      	cmp	r6, #1
 8010a52:	d1f4      	bne.n	8010a3e <sync_fs+0x4a>
 8010a54:	e7d2      	b.n	80109fc <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010a56:	7925      	ldrb	r5, [r4, #4]
 8010a58:	2d01      	cmp	r5, #1
 8010a5a:	d1d2      	bne.n	8010a02 <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8010a5c:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 8010a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a64:	2100      	movs	r1, #0
 8010a66:	4630      	mov	r0, r6
 8010a68:	f009 fbf2 	bl	801a250 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8010a6c:	f64a 2055 	movw	r0, #43605	; 0xaa55
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010a70:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010a72:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8010a74:	f8a4 0232 	strh.w	r0, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010a78:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
 8010a7a:	4815      	ldr	r0, [pc, #84]	; (8010ad0 <sync_fs+0xdc>)
 8010a7c:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
 8010a80:	6360      	str	r0, [r4, #52]	; 0x34
 8010a82:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
 8010a86:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 8010a8a:	3020      	adds	r0, #32
 8010a8c:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 8010a90:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8010a92:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
 8010a96:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8010a98:	0e12      	lsrs	r2, r2, #24
 8010a9a:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010a9e:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val;
 8010aa0:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 8010aa4:	0a05      	lsrs	r5, r0, #8
			fs->winsect = fs->volbase + 1;
 8010aa6:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8010aa8:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
 8010aac:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8010aae:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
 8010ab2:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8010ab4:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
 8010ab6:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8010ab8:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 8010abc:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010ac0:	7860      	ldrb	r0, [r4, #1]
 8010ac2:	f7ff f8e7 	bl	800fc94 <disk_write>
			fs->fsi_flag = 0;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	7123      	strb	r3, [r4, #4]
 8010aca:	e79a      	b.n	8010a02 <sync_fs+0xe>
			res = FR_DISK_ERR;
 8010acc:	2001      	movs	r0, #1
}
 8010ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ad0:	41615252 	.word	0x41615252

08010ad4 <create_chain>:
{
 8010ad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad8:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
 8010ada:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
 8010adc:	f8d0 9000 	ldr.w	r9, [r0]
	if (clst == 0) {	/* Create a new chain */
 8010ae0:	2900      	cmp	r1, #0
 8010ae2:	f040 80b4 	bne.w	8010c4e <create_chain+0x17a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010ae6:	f8d9 6010 	ldr.w	r6, [r9, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010aea:	f8d9 3018 	ldr.w	r3, [r9, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010aee:	b9ce      	cbnz	r6, 8010b24 <create_chain+0x50>
 8010af0:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 8010af2:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 8010af4:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010af6:	429c      	cmp	r4, r3
 8010af8:	d318      	bcc.n	8010b2c <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
 8010afa:	2e01      	cmp	r6, #1
 8010afc:	f000 80a3 	beq.w	8010c46 <create_chain+0x172>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010b00:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
 8010b04:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010b06:	69ab      	ldr	r3, [r5, #24]
 8010b08:	42a3      	cmp	r3, r4
 8010b0a:	d907      	bls.n	8010b1c <create_chain+0x48>
		switch (fs->fs_type) {
 8010b0c:	782b      	ldrb	r3, [r5, #0]
 8010b0e:	2b02      	cmp	r3, #2
 8010b10:	f000 8088 	beq.w	8010c24 <create_chain+0x150>
 8010b14:	2b03      	cmp	r3, #3
 8010b16:	d044      	beq.n	8010ba2 <create_chain+0xce>
 8010b18:	2b01      	cmp	r3, #1
 8010b1a:	d00c      	beq.n	8010b36 <create_chain+0x62>
 8010b1c:	2401      	movs	r4, #1
}
 8010b1e:	4620      	mov	r0, r4
 8010b20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010b24:	42b3      	cmp	r3, r6
 8010b26:	bf98      	it	ls
 8010b28:	2601      	movls	r6, #1
 8010b2a:	e7e2      	b.n	8010af2 <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010b2c:	2c01      	cmp	r4, #1
 8010b2e:	f8da 5000 	ldr.w	r5, [sl]
 8010b32:	d9f3      	bls.n	8010b1c <create_chain+0x48>
 8010b34:	e7e7      	b.n	8010b06 <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
 8010b36:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010b3c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b3e:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010b42:	4291      	cmp	r1, r2
 8010b44:	d005      	beq.n	8010b52 <create_chain+0x7e>
 8010b46:	4628      	mov	r0, r5
 8010b48:	f7ff fa44 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b4c:	bb20      	cbnz	r0, 8010b98 <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010b50:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8010b52:	f107 0b01 	add.w	fp, r7, #1
 8010b56:	f3c7 0708 	ubfx	r7, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b5a:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8010b5e:	442f      	add	r7, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010b60:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8010b62:	f897 7034 	ldrb.w	r7, [r7, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010b66:	d003      	beq.n	8010b70 <create_chain+0x9c>
 8010b68:	4628      	mov	r0, r5
 8010b6a:	f7ff fa33 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010b6e:	b998      	cbnz	r0, 8010b98 <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010b70:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010b74:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8010b76:	445d      	add	r5, fp
 8010b78:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8010b7c:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010b80:	d575      	bpl.n	8010c6e <create_chain+0x19a>
 8010b82:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
 8010b84:	b30b      	cbz	r3, 8010bca <create_chain+0xf6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d0c8      	beq.n	8010b1c <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
 8010b8a:	42a6      	cmp	r6, r4
 8010b8c:	d05b      	beq.n	8010c46 <create_chain+0x172>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010b8e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8010b92:	e7af      	b.n	8010af4 <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8010b94:	2801      	cmp	r0, #1
 8010b96:	d1c1      	bne.n	8010b1c <create_chain+0x48>
 8010b98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8010b9c:	4620      	mov	r0, r4
 8010b9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010ba2:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010ba4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010ba6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010baa:	4299      	cmp	r1, r3
 8010bac:	d004      	beq.n	8010bb8 <create_chain+0xe4>
 8010bae:	4628      	mov	r0, r5
 8010bb0:	f7ff fa10 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010bb4:	2800      	cmp	r0, #0
 8010bb6:	d1ef      	bne.n	8010b98 <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010bb8:	00a3      	lsls	r3, r4, #2
 8010bba:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8010bbe:	441d      	add	r5, r3
 8010bc0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010bc2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d1dd      	bne.n	8010b86 <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010bca:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8010bce:	42a3      	cmp	r3, r4
 8010bd0:	d9a4      	bls.n	8010b1c <create_chain+0x48>
 8010bd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010bd6:	4621      	mov	r1, r4
 8010bd8:	4648      	mov	r0, r9
 8010bda:	f7ff fbad 	bl	8010338 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 8010bde:	b970      	cbnz	r0, 8010bfe <create_chain+0x12a>
 8010be0:	f1b8 0f00 	cmp.w	r8, #0
 8010be4:	d00b      	beq.n	8010bfe <create_chain+0x12a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010be6:	f1b8 0f01 	cmp.w	r8, #1
 8010bea:	d097      	beq.n	8010b1c <create_chain+0x48>
 8010bec:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8010bf0:	4598      	cmp	r8, r3
 8010bf2:	d293      	bcs.n	8010b1c <create_chain+0x48>
 8010bf4:	4622      	mov	r2, r4
 8010bf6:	4641      	mov	r1, r8
 8010bf8:	4648      	mov	r0, r9
 8010bfa:	f7ff fb9d 	bl	8010338 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010bfe:	2800      	cmp	r0, #0
 8010c00:	d1c8      	bne.n	8010b94 <create_chain+0xc0>
		fs->last_clst = ncl;
 8010c02:	f8c9 4010 	str.w	r4, [r9, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010c06:	e9d9 2305 	ldrd	r2, r3, [r9, #20]
 8010c0a:	3b02      	subs	r3, #2
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d802      	bhi.n	8010c16 <create_chain+0x142>
 8010c10:	3a01      	subs	r2, #1
 8010c12:	f8c9 2014 	str.w	r2, [r9, #20]
		fs->fsi_flag |= 1;
 8010c16:	f899 3004 	ldrb.w	r3, [r9, #4]
 8010c1a:	f043 0301 	orr.w	r3, r3, #1
 8010c1e:	f889 3004 	strb.w	r3, [r9, #4]
 8010c22:	e77c      	b.n	8010b1e <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010c24:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010c26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010c28:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010c2c:	4299      	cmp	r1, r3
 8010c2e:	d004      	beq.n	8010c3a <create_chain+0x166>
 8010c30:	4628      	mov	r0, r5
 8010c32:	f7ff f9cf 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010c36:	2800      	cmp	r0, #0
 8010c38:	d1ae      	bne.n	8010b98 <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010c3a:	0063      	lsls	r3, r4, #1
 8010c3c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010c40:	441d      	add	r5, r3
 8010c42:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
 8010c44:	e79e      	b.n	8010b84 <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
 8010c46:	2400      	movs	r4, #0
}
 8010c48:	4620      	mov	r0, r4
 8010c4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010c4e:	4648      	mov	r0, r9
 8010c50:	f7ff fc0c 	bl	801046c <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010c54:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010c56:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010c58:	f67f af60 	bls.w	8010b1c <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010c5c:	1c41      	adds	r1, r0, #1
 8010c5e:	d09b      	beq.n	8010b98 <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010c60:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8010c64:	4283      	cmp	r3, r0
 8010c66:	f63f af5a 	bhi.w	8010b1e <create_chain+0x4a>
 8010c6a:	4646      	mov	r6, r8
 8010c6c:	e741      	b.n	8010af2 <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010c72:	e787      	b.n	8010b84 <create_chain+0xb0>

08010c74 <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010c74:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8010c78:	d274      	bcs.n	8010d64 <dir_sdi+0xf0>
 8010c7a:	06ca      	lsls	r2, r1, #27
{
 8010c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c80:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010c82:	d151      	bne.n	8010d28 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010c84:	6885      	ldr	r5, [r0, #8]
 8010c86:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 8010c88:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 8010c8c:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010c8e:	2d00      	cmp	r5, #0
 8010c90:	d04d      	beq.n	8010d2e <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010c92:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010c96:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010c9a:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8010c9e:	f0c0 808e 	bcc.w	8010dbe <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010ca2:	2d01      	cmp	r5, #1
 8010ca4:	d040      	beq.n	8010d28 <dir_sdi+0xb4>
 8010ca6:	4647      	mov	r7, r8
 8010ca8:	e03b      	b.n	8010d22 <dir_sdi+0xae>
		switch (fs->fs_type) {
 8010caa:	783b      	ldrb	r3, [r7, #0]
 8010cac:	2b02      	cmp	r3, #2
 8010cae:	d073      	beq.n	8010d98 <dir_sdi+0x124>
 8010cb0:	2b03      	cmp	r3, #3
 8010cb2:	d05f      	beq.n	8010d74 <dir_sdi+0x100>
 8010cb4:	2b01      	cmp	r3, #1
 8010cb6:	d137      	bne.n	8010d28 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
 8010cb8:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cc0:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010cc4:	4291      	cmp	r1, r2
 8010cc6:	d006      	beq.n	8010cd6 <dir_sdi+0x62>
 8010cc8:	4638      	mov	r0, r7
 8010cca:	f7ff f983 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cce:	2800      	cmp	r0, #0
 8010cd0:	d172      	bne.n	8010db8 <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8010cd6:	f10a 0b01 	add.w	fp, sl, #1
 8010cda:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cde:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8010ce2:	44ba      	add	sl, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010ce4:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8010ce6:	f89a a034 	ldrb.w	sl, [sl, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010cea:	d004      	beq.n	8010cf6 <dir_sdi+0x82>
 8010cec:	4638      	mov	r0, r7
 8010cee:	f7ff f971 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	d160      	bne.n	8010db8 <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010cf6:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 8010cfa:	445f      	add	r7, fp
 8010cfc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8010d00:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010d04:	07eb      	lsls	r3, r5, #31
 8010d06:	d568      	bpl.n	8010dda <dir_sdi+0x166>
 8010d08:	ea4f 151a 	mov.w	r5, sl, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010d0c:	2d01      	cmp	r5, #1
 8010d0e:	d90b      	bls.n	8010d28 <dir_sdi+0xb4>
 8010d10:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8010d14:	42ab      	cmp	r3, r5
 8010d16:	d907      	bls.n	8010d28 <dir_sdi+0xb4>
			ofs -= csz;
 8010d18:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 8010d1c:	45a1      	cmp	r9, r4
 8010d1e:	d850      	bhi.n	8010dc2 <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8010d20:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010d22:	69bb      	ldr	r3, [r7, #24]
 8010d24:	42ab      	cmp	r3, r5
 8010d26:	d8c0      	bhi.n	8010caa <dir_sdi+0x36>
		switch (fs->fs_type) {
 8010d28:	2002      	movs	r0, #2
}
 8010d2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010d2e:	f898 3000 	ldrb.w	r3, [r8]
 8010d32:	2b02      	cmp	r3, #2
 8010d34:	d818      	bhi.n	8010d68 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010d36:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8010d3a:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8010d3e:	d9f3      	bls.n	8010d28 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
 8010d40:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 8010d44:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 8010d46:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010d48:	2a00      	cmp	r2, #0
 8010d4a:	d0ed      	beq.n	8010d28 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010d4c:	f108 0834 	add.w	r8, r8, #52	; 0x34
 8010d50:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010d54:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
 8010d58:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010d5a:	4443      	add	r3, r8
 8010d5c:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8010d60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 8010d64:	2002      	movs	r0, #2
}
 8010d66:	4770      	bx	lr
		clst = fs->dirbase;
 8010d68:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d0e2      	beq.n	8010d36 <dir_sdi+0xc2>
 8010d70:	461d      	mov	r5, r3
 8010d72:	e78e      	b.n	8010c92 <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010d74:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010d78:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010d7c:	4299      	cmp	r1, r3
 8010d7e:	d003      	beq.n	8010d88 <dir_sdi+0x114>
 8010d80:	4638      	mov	r0, r7
 8010d82:	f7ff f927 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010d86:	b9b8      	cbnz	r0, 8010db8 <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010d88:	00ad      	lsls	r5, r5, #2
 8010d8a:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8010d8e:	442f      	add	r7, r5
 8010d90:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010d92:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 8010d96:	e7b9      	b.n	8010d0c <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010d98:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010d9c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010da0:	4299      	cmp	r1, r3
 8010da2:	d003      	beq.n	8010dac <dir_sdi+0x138>
 8010da4:	4638      	mov	r0, r7
 8010da6:	f7ff f915 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010daa:	b928      	cbnz	r0, 8010db8 <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010dac:	006d      	lsls	r5, r5, #1
 8010dae:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 8010db2:	442f      	add	r7, r5
 8010db4:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
 8010db6:	e7a9      	b.n	8010d0c <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010db8:	2001      	movs	r0, #1
}
 8010dba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010dbe:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8010dc2:	3b02      	subs	r3, #2
	clst -= 2;
 8010dc4:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010dc6:	4299      	cmp	r1, r3
 8010dc8:	d20a      	bcs.n	8010de0 <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
 8010dca:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8010dce:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 8010dd2:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
 8010dd6:	61f2      	str	r2, [r6, #28]
 8010dd8:	e7b5      	b.n	8010d46 <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010dda:	f3ca 050b 	ubfx	r5, sl, #0, #12
 8010dde:	e795      	b.n	8010d0c <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
 8010de0:	2300      	movs	r3, #0
 8010de2:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010de6:	e79f      	b.n	8010d28 <dir_sdi+0xb4>

08010de8 <dir_find>:
{
 8010de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010dec:	2100      	movs	r1, #0
{
 8010dee:	b085      	sub	sp, #20
 8010df0:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8010df2:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010df6:	f7ff ff3d 	bl	8010c74 <dir_sdi>
	if (res != FR_OK) return res;
 8010dfa:	4607      	mov	r7, r0
 8010dfc:	b9e8      	cbnz	r0, 8010e3a <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010dfe:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8010e02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 8010e06:	69e6      	ldr	r6, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010e08:	46ca      	mov	sl, r9
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010e0a:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8010e0c:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 8010e10:	42b5      	cmp	r5, r6
 8010e12:	d018      	beq.n	8010e46 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010e14:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010e18:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f040 8088 	bne.w	8010f32 <dir_find+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010e22:	2301      	movs	r3, #1
 8010e24:	4632      	mov	r2, r6
 8010e26:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010e2a:	f7fe ff25 	bl	800fc78 <disk_read>
 8010e2e:	b140      	cbz	r0, 8010e42 <dir_find+0x5a>
			fs->winsect = sector;
 8010e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 8010e34:	2701      	movs	r7, #1
			fs->winsect = sector;
 8010e36:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 8010e3a:	4638      	mov	r0, r7
 8010e3c:	b005      	add	sp, #20
 8010e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8010e42:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
 8010e46:	6a26      	ldr	r6, [r4, #32]
 8010e48:	7835      	ldrb	r5, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010e4a:	b34d      	cbz	r5, 8010ea0 <dir_find+0xb8>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010e4c:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010e4e:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010e50:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 8010e54:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010e56:	d004      	beq.n	8010e62 <dir_find+0x7a>
 8010e58:	0717      	lsls	r7, r2, #28
 8010e5a:	d526      	bpl.n	8010eaa <dir_find+0xc2>
 8010e5c:	2b0f      	cmp	r3, #15
 8010e5e:	f000 8094 	beq.w	8010f8a <dir_find+0x1a2>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e66:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8010e6a:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010e6c:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010e6e:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010e70:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010e72:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8010e76:	d213      	bcs.n	8010ea0 <dir_find+0xb8>
 8010e78:	b196      	cbz	r6, 8010ea0 <dir_find+0xb8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010e7a:	f3c5 0308 	ubfx	r3, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8010e7e:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010e80:	b94b      	cbnz	r3, 8010e96 <dir_find+0xae>
		dp->sect++;				/* Next sector */
 8010e82:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 8010e84:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8010e86:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8010e88:	2900      	cmp	r1, #0
 8010e8a:	d15e      	bne.n	8010f4a <dir_find+0x162>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010e8c:	893a      	ldrh	r2, [r7, #8]
 8010e8e:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8010e92:	f240 8134 	bls.w	80110fe <dir_find+0x316>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010e96:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8010e98:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010e9a:	443b      	add	r3, r7
 8010e9c:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8010e9e:	e7b5      	b.n	8010e0c <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010ea0:	2704      	movs	r7, #4
}
 8010ea2:	4638      	mov	r0, r7
 8010ea4:	b005      	add	sp, #20
 8010ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010eaa:	2b0f      	cmp	r3, #15
 8010eac:	d06d      	beq.n	8010f8a <dir_find+0x1a2>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010eae:	f1ba 0f00 	cmp.w	sl, #0
 8010eb2:	f000 80d6 	beq.w	8011062 <dir_find+0x27a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010eb6:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
 8010eba:	f01a 0a01 	ands.w	sl, sl, #1
 8010ebe:	d1d0      	bne.n	8010e62 <dir_find+0x7a>
	} while (--cnt && r == 0);
 8010ec0:	7832      	ldrb	r2, [r6, #0]
 8010ec2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d1cb      	bne.n	8010e62 <dir_find+0x7a>
 8010eca:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8010ece:	7873      	ldrb	r3, [r6, #1]
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	d1c6      	bne.n	8010e62 <dir_find+0x7a>
 8010ed4:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8010ed8:	78b3      	ldrb	r3, [r6, #2]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d1c1      	bne.n	8010e62 <dir_find+0x7a>
 8010ede:	78f2      	ldrb	r2, [r6, #3]
 8010ee0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8010ee4:	429a      	cmp	r2, r3
 8010ee6:	d1bc      	bne.n	8010e62 <dir_find+0x7a>
 8010ee8:	7932      	ldrb	r2, [r6, #4]
 8010eea:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d1b7      	bne.n	8010e62 <dir_find+0x7a>
 8010ef2:	7972      	ldrb	r2, [r6, #5]
 8010ef4:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d1b2      	bne.n	8010e62 <dir_find+0x7a>
 8010efc:	79b2      	ldrb	r2, [r6, #6]
 8010efe:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8010f02:	429a      	cmp	r2, r3
 8010f04:	d1ad      	bne.n	8010e62 <dir_find+0x7a>
 8010f06:	79f2      	ldrb	r2, [r6, #7]
 8010f08:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	d1a8      	bne.n	8010e62 <dir_find+0x7a>
 8010f10:	7a32      	ldrb	r2, [r6, #8]
 8010f12:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d1a3      	bne.n	8010e62 <dir_find+0x7a>
 8010f1a:	7a72      	ldrb	r2, [r6, #9]
 8010f1c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d19e      	bne.n	8010e62 <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010f24:	7ab2      	ldrb	r2, [r6, #10]
 8010f26:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d199      	bne.n	8010e62 <dir_find+0x7a>
 8010f2e:	4657      	mov	r7, sl
 8010f30:	e783      	b.n	8010e3a <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010f32:	2301      	movs	r3, #1
 8010f34:	462a      	mov	r2, r5
 8010f36:	f898 0001 	ldrb.w	r0, [r8, #1]
 8010f3a:	9100      	str	r1, [sp, #0]
 8010f3c:	f7fe feaa 	bl	800fc94 <disk_write>
 8010f40:	9900      	ldr	r1, [sp, #0]
 8010f42:	2800      	cmp	r0, #0
 8010f44:	d06d      	beq.n	8011022 <dir_find+0x23a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010f46:	2701      	movs	r7, #1
 8010f48:	e777      	b.n	8010e3a <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010f4a:	897a      	ldrh	r2, [r7, #10]
 8010f4c:	3a01      	subs	r2, #1
 8010f4e:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 8010f52:	d1a0      	bne.n	8010e96 <dir_find+0xae>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010f54:	4638      	mov	r0, r7
 8010f56:	9300      	str	r3, [sp, #0]
 8010f58:	f7ff fa88 	bl	801046c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010f5c:	2801      	cmp	r0, #1
 8010f5e:	f240 80d2 	bls.w	8011106 <dir_find+0x31e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010f62:	1c43      	adds	r3, r0, #1
 8010f64:	d0ef      	beq.n	8010f46 <dir_find+0x15e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010f66:	69ba      	ldr	r2, [r7, #24]
 8010f68:	4290      	cmp	r0, r2
 8010f6a:	f080 80c8 	bcs.w	80110fe <dir_find+0x316>
				dp->clust = clst;		/* Initialize data for new cluster */
 8010f6e:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8010f70:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010f72:	69ba      	ldr	r2, [r7, #24]
 8010f74:	9b00      	ldr	r3, [sp, #0]
 8010f76:	3a02      	subs	r2, #2
 8010f78:	4290      	cmp	r0, r2
 8010f7a:	f080 80c6 	bcs.w	801110a <dir_find+0x322>
	return clst * fs->csize + fs->database;
 8010f7e:	897a      	ldrh	r2, [r7, #10]
 8010f80:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 8010f82:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 8010f86:	61e6      	str	r6, [r4, #28]
 8010f88:	e785      	b.n	8010e96 <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010f8a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8010f8e:	0658      	lsls	r0, r3, #25
 8010f90:	f53f af6c 	bmi.w	8010e6c <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010f94:	0669      	lsls	r1, r5, #25
 8010f96:	d53f      	bpl.n	8011018 <dir_find+0x230>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010f98:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010f9a:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8010f9e:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010fa2:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010fa4:	7b73      	ldrb	r3, [r6, #13]
 8010fa6:	454b      	cmp	r3, r9
 8010fa8:	d138      	bne.n	801101c <dir_find+0x234>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010faa:	8b73      	ldrh	r3, [r6, #26]
 8010fac:	bbb3      	cbnz	r3, 801101c <dir_find+0x234>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010fae:	7837      	ldrb	r7, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010fb0:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010fb2:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010fb6:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 8010fba:	f8df a178 	ldr.w	sl, [pc, #376]	; 8011134 <dir_find+0x34c>
 8010fbe:	9502      	str	r5, [sp, #8]
 8010fc0:	4615      	mov	r5, r2
 8010fc2:	3f01      	subs	r7, #1
 8010fc4:	f10a 0b0d 	add.w	fp, sl, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010fc8:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010fca:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8010fce:	f8cd 8000 	str.w	r8, [sp]
 8010fd2:	9401      	str	r4, [sp, #4]
 8010fd4:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010fd8:	e010      	b.n	8010ffc <dir_find+0x214>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8010fda:	2ffe      	cmp	r7, #254	; 0xfe
 8010fdc:	4620      	mov	r0, r4
 8010fde:	d816      	bhi.n	801100e <dir_find+0x226>
 8010fe0:	f001 fecc 	bl	8012d7c <ff_wtoupper>
 8010fe4:	4680      	mov	r8, r0
 8010fe6:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 8010fea:	3701      	adds	r7, #1
 8010fec:	f001 fec6 	bl	8012d7c <ff_wtoupper>
 8010ff0:	4580      	cmp	r8, r0
 8010ff2:	4621      	mov	r1, r4
 8010ff4:	d10b      	bne.n	801100e <dir_find+0x226>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010ff6:	45d3      	cmp	fp, sl
 8010ff8:	f000 8089 	beq.w	801110e <dir_find+0x326>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8010ffc:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
 8011000:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
 8011002:	2900      	cmp	r1, #0
 8011004:	d1e9      	bne.n	8010fda <dir_find+0x1f2>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011006:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801100a:	429c      	cmp	r4, r3
 801100c:	d0f3      	beq.n	8010ff6 <dir_find+0x20e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801100e:	e9dd 8400 	ldrd	r8, r4, [sp]
 8011012:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8011016:	e729      	b.n	8010e6c <dir_find+0x84>
 8011018:	45aa      	cmp	sl, r5
 801101a:	d0c3      	beq.n	8010fa4 <dir_find+0x1bc>
 801101c:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8011020:	e724      	b.n	8010e6c <dir_find+0x84>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011022:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8011026:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801102a:	1aea      	subs	r2, r5, r3
 801102c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8011030:	429a      	cmp	r2, r3
 8011032:	f4bf aef6 	bcs.w	8010e22 <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011036:	f898 7002 	ldrb.w	r7, [r8, #2]
 801103a:	2f01      	cmp	r7, #1
 801103c:	f67f aef1 	bls.w	8010e22 <dir_find+0x3a>
 8011040:	468b      	mov	fp, r1
 8011042:	e001      	b.n	8011048 <dir_find+0x260>
					wsect += fs->fsize;
 8011044:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8011048:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801104a:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801104c:	2301      	movs	r3, #1
 801104e:	4659      	mov	r1, fp
 8011050:	462a      	mov	r2, r5
 8011052:	f898 0001 	ldrb.w	r0, [r8, #1]
 8011056:	f7fe fe1d 	bl	800fc94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801105a:	2f01      	cmp	r7, #1
 801105c:	d1f2      	bne.n	8011044 <dir_find+0x25c>
 801105e:	4659      	mov	r1, fp
 8011060:	e6df      	b.n	8010e22 <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011062:	7830      	ldrb	r0, [r6, #0]
 8011064:	7872      	ldrb	r2, [r6, #1]
 8011066:	01c1      	lsls	r1, r0, #7
 8011068:	78b3      	ldrb	r3, [r6, #2]
 801106a:	f896 b003 	ldrb.w	fp, [r6, #3]
 801106e:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 8011072:	7937      	ldrb	r7, [r6, #4]
 8011074:	f896 e005 	ldrb.w	lr, [r6, #5]
 8011078:	4411      	add	r1, r2
 801107a:	f896 c006 	ldrb.w	ip, [r6, #6]
 801107e:	7a32      	ldrb	r2, [r6, #8]
 8011080:	f3c1 0046 	ubfx	r0, r1, #1, #7
 8011084:	7a75      	ldrb	r5, [r6, #9]
 8011086:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 801108a:	fa53 f180 	uxtab	r1, r3, r0
 801108e:	79f3      	ldrb	r3, [r6, #7]
 8011090:	f3c1 0046 	ubfx	r0, r1, #1, #7
 8011094:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 8011098:	7ab1      	ldrb	r1, [r6, #10]
 801109a:	fa5b fb80 	uxtab	fp, fp, r0
 801109e:	f3cb 0046 	ubfx	r0, fp, #1, #7
 80110a2:	ea40 10cb 	orr.w	r0, r0, fp, lsl #7
 80110a6:	fa57 f780 	uxtab	r7, r7, r0
 80110aa:	f3c7 0046 	ubfx	r0, r7, #1, #7
 80110ae:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 80110b2:	fa5e f080 	uxtab	r0, lr, r0
 80110b6:	f3c0 0746 	ubfx	r7, r0, #1, #7
 80110ba:	ea47 10c0 	orr.w	r0, r7, r0, lsl #7
 80110be:	fa5c f780 	uxtab	r7, ip, r0
 80110c2:	f3c7 0046 	ubfx	r0, r7, #1, #7
 80110c6:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 80110ca:	fa53 f080 	uxtab	r0, r3, r0
 80110ce:	f3c0 0346 	ubfx	r3, r0, #1, #7
 80110d2:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 80110d6:	fa52 f383 	uxtab	r3, r2, r3
 80110da:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80110de:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 80110e2:	fa55 f283 	uxtab	r2, r5, r3
 80110e6:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80110ea:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80110ee:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80110f2:	b2db      	uxtb	r3, r3
 80110f4:	4599      	cmp	r9, r3
 80110f6:	f47f aede 	bne.w	8010eb6 <dir_find+0xce>
 80110fa:	4657      	mov	r7, sl
 80110fc:	e69d      	b.n	8010e3a <dir_find+0x52>
				dp->sect = 0; return FR_NO_FILE;
 80110fe:	2300      	movs	r3, #0
 8011100:	2704      	movs	r7, #4
 8011102:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 8011104:	e699      	b.n	8010e3a <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011106:	2702      	movs	r7, #2
 8011108:	e697      	b.n	8010e3a <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801110a:	461e      	mov	r6, r3
 801110c:	e73b      	b.n	8010f86 <dir_find+0x19e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801110e:	7833      	ldrb	r3, [r6, #0]
 8011110:	f8dd 8000 	ldr.w	r8, [sp]
 8011114:	065a      	lsls	r2, r3, #25
 8011116:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 801111a:	d500      	bpl.n	801111e <dir_find+0x336>
 801111c:	b919      	cbnz	r1, 8011126 <dir_find+0x33e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801111e:	3d01      	subs	r5, #1
 8011120:	fa5f fa85 	uxtb.w	sl, r5
 8011124:	e6a2      	b.n	8010e6c <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011126:	9b03      	ldr	r3, [sp, #12]
 8011128:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d0f6      	beq.n	801111e <dir_find+0x336>
 8011130:	e774      	b.n	801101c <dir_find+0x234>
 8011132:	bf00      	nop
 8011134:	0801c4d4 	.word	0x0801c4d4

08011138 <follow_path>:
{
 8011138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801113c:	780b      	ldrb	r3, [r1, #0]
{
 801113e:	b083      	sub	sp, #12
 8011140:	4688      	mov	r8, r1
 8011142:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011144:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 8011146:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801114a:	d103      	bne.n	8011154 <follow_path+0x1c>
 801114c:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 8011150:	2b2f      	cmp	r3, #47	; 0x2f
 8011152:	d0fb      	beq.n	801114c <follow_path+0x14>
 8011154:	2b5c      	cmp	r3, #92	; 0x5c
 8011156:	d0f9      	beq.n	801114c <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 8011158:	2100      	movs	r1, #0
 801115a:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801115c:	f898 3000 	ldrb.w	r3, [r8]
 8011160:	2b1f      	cmp	r3, #31
 8011162:	f240 8148 	bls.w	80113f6 <follow_path+0x2be>
 8011166:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 8011168:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801116a:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 801116c:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 801116e:	d929      	bls.n	80111c4 <follow_path+0x8c>
 8011170:	f1a5 0902 	sub.w	r9, r5, #2
 8011174:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 8011176:	2401      	movs	r4, #1
 8011178:	e008      	b.n	801118c <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
 801117a:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 801117e:	1c63      	adds	r3, r4, #1
 8011180:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8011184:	281f      	cmp	r0, #31
 8011186:	f240 80f7 	bls.w	8011378 <follow_path+0x240>
		w = p[si++];					/* Get a character */
 801118a:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801118c:	282f      	cmp	r0, #47	; 0x2f
 801118e:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8011192:	d01d      	beq.n	80111d0 <follow_path+0x98>
 8011194:	285c      	cmp	r0, #92	; 0x5c
 8011196:	d01b      	beq.n	80111d0 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8011198:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 801119c:	d00e      	beq.n	80111bc <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801119e:	2101      	movs	r1, #1
 80111a0:	f001 fdce 	bl	8012d40 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80111a4:	b150      	cbz	r0, 80111bc <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80111a6:	287f      	cmp	r0, #127	; 0x7f
 80111a8:	d8e7      	bhi.n	801117a <follow_path+0x42>
	while (*str && *str != chr) str++;
 80111aa:	2322      	movs	r3, #34	; 0x22
 80111ac:	4aa5      	ldr	r2, [pc, #660]	; (8011444 <follow_path+0x30c>)
 80111ae:	e003      	b.n	80111b8 <follow_path+0x80>
 80111b0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d0e0      	beq.n	801117a <follow_path+0x42>
 80111b8:	4298      	cmp	r0, r3
 80111ba:	d1f9      	bne.n	80111b0 <follow_path+0x78>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80111bc:	2006      	movs	r0, #6
}
 80111be:	b003      	add	sp, #12
 80111c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 80111c4:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80111c6:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 80111c8:	802b      	strh	r3, [r5, #0]
}
 80111ca:	b003      	add	sp, #12
 80111cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80111d0:	f818 3004 	ldrb.w	r3, [r8, r4]
 80111d4:	eb08 0204 	add.w	r2, r8, r4
 80111d8:	2b5c      	cmp	r3, #92	; 0x5c
 80111da:	d002      	beq.n	80111e2 <follow_path+0xaa>
 80111dc:	2b2f      	cmp	r3, #47	; 0x2f
 80111de:	f040 811f 	bne.w	8011420 <follow_path+0x2e8>
 80111e2:	1c63      	adds	r3, r4, #1
 80111e4:	4443      	add	r3, r8
 80111e6:	4698      	mov	r8, r3
 80111e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80111ec:	2a2f      	cmp	r2, #47	; 0x2f
 80111ee:	d0fa      	beq.n	80111e6 <follow_path+0xae>
 80111f0:	2a5c      	cmp	r2, #92	; 0x5c
 80111f2:	d0f8      	beq.n	80111e6 <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80111f4:	f1ba 0f00 	cmp.w	sl, #0
 80111f8:	d0e4      	beq.n	80111c4 <follow_path+0x8c>
 80111fa:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80111fc:	2400      	movs	r4, #0
 80111fe:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 8011202:	e002      	b.n	801120a <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011204:	f1ba 0a01 	subs.w	sl, sl, #1
 8011208:	d0dc      	beq.n	80111c4 <follow_path+0x8c>
		w = lfn[di - 1];
 801120a:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 801120e:	2b20      	cmp	r3, #32
 8011210:	d0f8      	beq.n	8011204 <follow_path+0xcc>
 8011212:	2b2e      	cmp	r3, #46	; 0x2e
 8011214:	d0f6      	beq.n	8011204 <follow_path+0xcc>
		*d++ = (BYTE)val;
 8011216:	2320      	movs	r3, #32
 8011218:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 801121c:	2100      	movs	r1, #0
 801121e:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 8011222:	627a      	str	r2, [r7, #36]	; 0x24
 8011224:	62ba      	str	r2, [r7, #40]	; 0x28
 8011226:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 801122a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 801122e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8011232:	8828      	ldrh	r0, [r5, #0]
 8011234:	282e      	cmp	r0, #46	; 0x2e
 8011236:	d002      	beq.n	801123e <follow_path+0x106>
 8011238:	4298      	cmp	r0, r3
 801123a:	f040 80e5 	bne.w	8011408 <follow_path+0x2d0>
 801123e:	462a      	mov	r2, r5
 8011240:	2300      	movs	r3, #0
 8011242:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8011246:	461c      	mov	r4, r3
 8011248:	3301      	adds	r3, #1
 801124a:	2820      	cmp	r0, #32
 801124c:	d0f9      	beq.n	8011242 <follow_path+0x10a>
 801124e:	282e      	cmp	r0, #46	; 0x2e
 8011250:	d0f7      	beq.n	8011242 <follow_path+0x10a>
		w = lfn[si++];					/* Get an LFN character */
 8011252:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8011254:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 8011258:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 801125c:	2a2e      	cmp	r2, #46	; 0x2e
 801125e:	d002      	beq.n	8011266 <follow_path+0x12e>
 8011260:	f1ba 0a01 	subs.w	sl, sl, #1
 8011264:	d1f8      	bne.n	8011258 <follow_path+0x120>
		if (!w) break;					/* Break on end of the LFN */
 8011266:	b3b0      	cbz	r0, 80112d6 <follow_path+0x19e>
 8011268:	2208      	movs	r2, #8
 801126a:	4641      	mov	r1, r8
 801126c:	2300      	movs	r3, #0
 801126e:	46b8      	mov	r8, r7
 8011270:	462f      	mov	r7, r5
 8011272:	4615      	mov	r5, r2
 8011274:	4699      	mov	r9, r3
 8011276:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8011278:	2820      	cmp	r0, #32
 801127a:	d003      	beq.n	8011284 <follow_path+0x14c>
 801127c:	282e      	cmp	r0, #46	; 0x2e
 801127e:	d14d      	bne.n	801131c <follow_path+0x1e4>
 8011280:	45a2      	cmp	sl, r4
 8011282:	d04b      	beq.n	801131c <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
 8011284:	f046 0603 	orr.w	r6, r6, #3
 8011288:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 801128a:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 801128e:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 8011290:	2800      	cmp	r0, #0
 8011292:	d1f1      	bne.n	8011278 <follow_path+0x140>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011294:	4647      	mov	r7, r8
 8011296:	4690      	mov	r8, r2
 8011298:	462a      	mov	r2, r5
 801129a:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 801129e:	29e5      	cmp	r1, #229	; 0xe5
 80112a0:	d102      	bne.n	80112a8 <follow_path+0x170>
 80112a2:	2105      	movs	r1, #5
 80112a4:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 80112a8:	2a08      	cmp	r2, #8
 80112aa:	f000 8093 	beq.w	80113d4 <follow_path+0x29c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80112ae:	f003 020c 	and.w	r2, r3, #12
 80112b2:	2a0c      	cmp	r2, #12
 80112b4:	d065      	beq.n	8011382 <follow_path+0x24a>
 80112b6:	f003 0303 	and.w	r3, r3, #3
 80112ba:	2b03      	cmp	r3, #3
 80112bc:	d061      	beq.n	8011382 <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80112be:	07b1      	lsls	r1, r6, #30
 80112c0:	d409      	bmi.n	80112d6 <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80112c2:	2b01      	cmp	r3, #1
 80112c4:	d102      	bne.n	80112cc <follow_path+0x194>
 80112c6:	f046 0610 	orr.w	r6, r6, #16
 80112ca:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80112cc:	2a04      	cmp	r2, #4
 80112ce:	d102      	bne.n	80112d6 <follow_path+0x19e>
 80112d0:	f046 0608 	orr.w	r6, r6, #8
 80112d4:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 80112d6:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80112d8:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 80112dc:	f7ff fd84 	bl	8010de8 <dir_find>
			ns = dp->fn[NSFLAG];
 80112e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80112e4:	2800      	cmp	r0, #0
 80112e6:	d158      	bne.n	801139a <follow_path+0x262>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80112e8:	075a      	lsls	r2, r3, #29
 80112ea:	f53f af68 	bmi.w	80111be <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80112ee:	79bb      	ldrb	r3, [r7, #6]
 80112f0:	06db      	lsls	r3, r3, #27
 80112f2:	f140 8097 	bpl.w	8011424 <follow_path+0x2ec>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80112f6:	697a      	ldr	r2, [r7, #20]
 80112f8:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 80112fc:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011300:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 8011304:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011306:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 8011308:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 801130a:	d102      	bne.n	8011312 <follow_path+0x1da>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801130c:	8a9b      	ldrh	r3, [r3, #20]
 801130e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011312:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8011314:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
 8011316:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801131a:	e725      	b.n	8011168 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801131c:	454d      	cmp	r5, r9
 801131e:	d91c      	bls.n	801135a <follow_path+0x222>
 8011320:	ebaa 0104 	sub.w	r1, sl, r4
 8011324:	fab1 f181 	clz	r1, r1
 8011328:	0949      	lsrs	r1, r1, #5
 801132a:	b9b1      	cbnz	r1, 801135a <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
 801132c:	287f      	cmp	r0, #127	; 0x7f
 801132e:	d83c      	bhi.n	80113aa <follow_path+0x272>
	while (*str && *str != chr) str++;
 8011330:	212b      	movs	r1, #43	; 0x2b
 8011332:	f8df c118 	ldr.w	ip, [pc, #280]	; 801144c <follow_path+0x314>
 8011336:	e003      	b.n	8011340 <follow_path+0x208>
 8011338:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 801133c:	2900      	cmp	r1, #0
 801133e:	d052      	beq.n	80113e6 <follow_path+0x2ae>
 8011340:	4281      	cmp	r1, r0
 8011342:	d1f9      	bne.n	8011338 <follow_path+0x200>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8011344:	f046 0603 	orr.w	r6, r6, #3
 8011348:	205f      	movs	r0, #95	; 0x5f
 801134a:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 801134c:	eb08 0109 	add.w	r1, r8, r9
 8011350:	f109 0901 	add.w	r9, r9, #1
 8011354:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8011358:	e797      	b.n	801128a <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
 801135a:	2d0b      	cmp	r5, #11
 801135c:	d064      	beq.n	8011428 <follow_path+0x2f0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801135e:	45a2      	cmp	sl, r4
 8011360:	d003      	beq.n	801136a <follow_path+0x232>
 8011362:	f046 0603 	orr.w	r6, r6, #3
 8011366:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 8011368:	d394      	bcc.n	8011294 <follow_path+0x15c>
			b <<= 2; continue;
 801136a:	009b      	lsls	r3, r3, #2
 801136c:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801136e:	250b      	movs	r5, #11
 8011370:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 8011374:	b2db      	uxtb	r3, r3
 8011376:	e788      	b.n	801128a <follow_path+0x152>
	*path = &p[si];						/* Return pointer to the next segment */
 8011378:	46a2      	mov	sl, r4
 801137a:	4498      	add	r8, r3
 801137c:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801137e:	2404      	movs	r4, #4
 8011380:	e73d      	b.n	80111fe <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8011382:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 8011386:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8011388:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801138a:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 801138e:	f7ff fd2b 	bl	8010de8 <dir_find>
			ns = dp->fn[NSFLAG];
 8011392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8011396:	2800      	cmp	r0, #0
 8011398:	d0a6      	beq.n	80112e8 <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801139a:	2804      	cmp	r0, #4
 801139c:	f47f af0f 	bne.w	80111be <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80113a0:	f013 0f04 	tst.w	r3, #4
 80113a4:	bf08      	it	eq
 80113a6:	2005      	moveq	r0, #5
 80113a8:	e709      	b.n	80111be <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80113aa:	e9cd 3200 	strd	r3, r2, [sp]
 80113ae:	f001 fcc7 	bl	8012d40 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80113b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80113b6:	b918      	cbnz	r0, 80113c0 <follow_path+0x288>
			cf |= NS_LFN;				/* Force create LFN entry */
 80113b8:	f046 0602 	orr.w	r6, r6, #2
 80113bc:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80113be:	e7c1      	b.n	8011344 <follow_path+0x20c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80113c0:	4921      	ldr	r1, [pc, #132]	; (8011448 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
 80113c2:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80113c6:	4401      	add	r1, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 80113c8:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80113ca:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80113ce:	2800      	cmp	r0, #0
 80113d0:	d0b8      	beq.n	8011344 <follow_path+0x20c>
 80113d2:	e7ad      	b.n	8011330 <follow_path+0x1f8>
	if (ni == 8) b <<= 2;
 80113d4:	009b      	lsls	r3, r3, #2
 80113d6:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80113da:	2a0c      	cmp	r2, #12
 80113dc:	d0d1      	beq.n	8011382 <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80113de:	07b0      	lsls	r0, r6, #30
 80113e0:	f57f af74 	bpl.w	80112cc <follow_path+0x194>
 80113e4:	e777      	b.n	80112d6 <follow_path+0x19e>
				if (IsUpper(w)) {		/* ASCII large capital */
 80113e6:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 80113ea:	2919      	cmp	r1, #25
 80113ec:	d80f      	bhi.n	801140e <follow_path+0x2d6>
					b |= 2;
 80113ee:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 80113f2:	b2c0      	uxtb	r0, r0
 80113f4:	e7aa      	b.n	801134c <follow_path+0x214>
		dp->fn[NSFLAG] = NS_NONAME;
 80113f6:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 80113f8:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 80113fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 80113fe:	b003      	add	sp, #12
 8011400:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8011404:	f7ff bc36 	b.w	8010c74 <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8011408:	4626      	mov	r6, r4
 801140a:	2401      	movs	r4, #1
 801140c:	e722      	b.n	8011254 <follow_path+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
 801140e:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8011412:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8011414:	bf9c      	itt	ls
 8011416:	3820      	subls	r0, #32
 8011418:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 801141c:	b2c0      	uxtb	r0, r0
 801141e:	e795      	b.n	801134c <follow_path+0x214>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011420:	4690      	mov	r8, r2
 8011422:	e6e7      	b.n	80111f4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011424:	2005      	movs	r0, #5
 8011426:	e6ca      	b.n	80111be <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
 8011428:	4647      	mov	r7, r8
 801142a:	4690      	mov	r8, r2
 801142c:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011430:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 8011434:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011436:	2ae5      	cmp	r2, #229	; 0xe5
 8011438:	f47f af39 	bne.w	80112ae <follow_path+0x176>
 801143c:	2205      	movs	r2, #5
 801143e:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8011442:	e734      	b.n	80112ae <follow_path+0x176>
 8011444:	0801c440 	.word	0x0801c440
 8011448:	0801c454 	.word	0x0801c454
 801144c:	0801c44c 	.word	0x0801c44c

08011450 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011450:	2901      	cmp	r1, #1
{
 8011452:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011456:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8011458:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801145a:	d90f      	bls.n	801147c <remove_chain+0x2c>
 801145c:	69ab      	ldr	r3, [r5, #24]
 801145e:	428b      	cmp	r3, r1
 8011460:	d90c      	bls.n	801147c <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011462:	4606      	mov	r6, r0
 8011464:	4611      	mov	r1, r2
 8011466:	b962      	cbnz	r2, 8011482 <remove_chain+0x32>
 8011468:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801146a:	429c      	cmp	r4, r3
 801146c:	d206      	bcs.n	801147c <remove_chain+0x2c>
		switch (fs->fs_type) {
 801146e:	783b      	ldrb	r3, [r7, #0]
 8011470:	2b02      	cmp	r3, #2
 8011472:	d072      	beq.n	801155a <remove_chain+0x10a>
 8011474:	2b03      	cmp	r3, #3
 8011476:	d05d      	beq.n	8011534 <remove_chain+0xe4>
 8011478:	2b01      	cmp	r3, #1
 801147a:	d010      	beq.n	801149e <remove_chain+0x4e>
 801147c:	2002      	movs	r0, #2
}
 801147e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011482:	4293      	cmp	r3, r2
 8011484:	d9fa      	bls.n	801147c <remove_chain+0x2c>
 8011486:	2a01      	cmp	r2, #1
 8011488:	d0f8      	beq.n	801147c <remove_chain+0x2c>
 801148a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801148e:	4628      	mov	r0, r5
 8011490:	f7fe ff52 	bl	8010338 <put_fat.part.0>
		if (res != FR_OK) return res;
 8011494:	2800      	cmp	r0, #0
 8011496:	d1f2      	bne.n	801147e <remove_chain+0x2e>
 8011498:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	e7e5      	b.n	801146a <remove_chain+0x1a>
			bc = (UINT)clst; bc += bc / 2;
 801149e:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80114a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80114a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80114a6:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 80114aa:	4291      	cmp	r1, r2
 80114ac:	d006      	beq.n	80114bc <remove_chain+0x6c>
 80114ae:	4638      	mov	r0, r7
 80114b0:	f7fe fd90 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80114b4:	2800      	cmp	r0, #0
 80114b6:	d161      	bne.n	801157c <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80114b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80114ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 80114bc:	f108 0901 	add.w	r9, r8, #1
 80114c0:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80114c4:	eb03 2159 	add.w	r1, r3, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80114c8:	44b8      	add	r8, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80114ca:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 80114cc:	f898 8034 	ldrb.w	r8, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80114d0:	d004      	beq.n	80114dc <remove_chain+0x8c>
 80114d2:	4638      	mov	r0, r7
 80114d4:	f7fe fd7e 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80114d8:	2800      	cmp	r0, #0
 80114da:	d14f      	bne.n	801157c <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80114dc:	f3c9 0908 	ubfx	r9, r9, #0, #9
 80114e0:	444f      	add	r7, r9
 80114e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80114e6:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80114ea:	07e3      	lsls	r3, r4, #31
 80114ec:	d548      	bpl.n	8011580 <remove_chain+0x130>
 80114ee:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
 80114f2:	f1b8 0f00 	cmp.w	r8, #0
 80114f6:	d046      	beq.n	8011586 <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80114f8:	f1b8 0f01 	cmp.w	r8, #1
 80114fc:	d0be      	beq.n	801147c <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80114fe:	69ab      	ldr	r3, [r5, #24]
 8011500:	42a3      	cmp	r3, r4
 8011502:	d9bb      	bls.n	801147c <remove_chain+0x2c>
 8011504:	2200      	movs	r2, #0
 8011506:	4621      	mov	r1, r4
 8011508:	4628      	mov	r0, r5
 801150a:	f7fe ff15 	bl	8010338 <put_fat.part.0>
			if (res != FR_OK) return res;
 801150e:	2800      	cmp	r0, #0
 8011510:	d1b5      	bne.n	801147e <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011512:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8011516:	1e91      	subs	r1, r2, #2
 8011518:	428b      	cmp	r3, r1
 801151a:	d205      	bcs.n	8011528 <remove_chain+0xd8>
			fs->free_clst++;
 801151c:	3301      	adds	r3, #1
 801151e:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8011520:	792b      	ldrb	r3, [r5, #4]
 8011522:	f043 0301 	orr.w	r3, r3, #1
 8011526:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011528:	4542      	cmp	r2, r8
 801152a:	d92c      	bls.n	8011586 <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801152c:	6837      	ldr	r7, [r6, #0]
 801152e:	4644      	mov	r4, r8
 8011530:	69bb      	ldr	r3, [r7, #24]
 8011532:	e79a      	b.n	801146a <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011534:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011538:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 801153c:	4299      	cmp	r1, r3
 801153e:	d003      	beq.n	8011548 <remove_chain+0xf8>
 8011540:	4638      	mov	r0, r7
 8011542:	f7fe fd47 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011546:	b9c8      	cbnz	r0, 801157c <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011548:	00a3      	lsls	r3, r4, #2
 801154a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 801154e:	441f      	add	r7, r3
 8011550:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011554:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 8011558:	e7cb      	b.n	80114f2 <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801155a:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801155e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011562:	4299      	cmp	r1, r3
 8011564:	d003      	beq.n	801156e <remove_chain+0x11e>
 8011566:	4638      	mov	r0, r7
 8011568:	f7fe fd34 	bl	800ffd4 <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801156c:	b930      	cbnz	r0, 801157c <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801156e:	0063      	lsls	r3, r4, #1
 8011570:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011574:	441f      	add	r7, r3
 8011576:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
 801157a:	e7ba      	b.n	80114f2 <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801157c:	2001      	movs	r0, #1
 801157e:	e77e      	b.n	801147e <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011580:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8011584:	e7b5      	b.n	80114f2 <remove_chain+0xa2>
	return FR_OK;
 8011586:	2000      	movs	r0, #0
 8011588:	e779      	b.n	801147e <remove_chain+0x2e>
 801158a:	bf00      	nop

0801158c <dir_alloc>:
{
 801158c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011590:	460b      	mov	r3, r1
	res = dir_sdi(dp, 0);
 8011592:	2100      	movs	r1, #0
{
 8011594:	4681      	mov	r9, r0
 8011596:	ed2d 8b02 	vpush	{d8}
 801159a:	b089      	sub	sp, #36	; 0x24
	FATFS *fs = dp->obj.fs;
 801159c:	f8d0 8000 	ldr.w	r8, [r0]
{
 80115a0:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 80115a2:	f7ff fb67 	bl	8010c74 <dir_sdi>
	if (res == FR_OK) {
 80115a6:	9002      	str	r0, [sp, #8]
 80115a8:	b150      	cbz	r0, 80115c0 <dir_alloc+0x34>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80115aa:	9b02      	ldr	r3, [sp, #8]
 80115ac:	2b04      	cmp	r3, #4
 80115ae:	d101      	bne.n	80115b4 <dir_alloc+0x28>
 80115b0:	2307      	movs	r3, #7
 80115b2:	9302      	str	r3, [sp, #8]
}
 80115b4:	9802      	ldr	r0, [sp, #8]
 80115b6:	b009      	add	sp, #36	; 0x24
 80115b8:	ecbd 8b02 	vpop	{d8}
 80115bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, dp->sect);
 80115c0:	f8d9 b01c 	ldr.w	fp, [r9, #28]
 80115c4:	4607      	mov	r7, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80115c6:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 80115ca:	465d      	mov	r5, fp
	if (sector != fs->winsect) {	/* Window offset changed? */
 80115cc:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
 80115d0:	42ac      	cmp	r4, r5
 80115d2:	d019      	beq.n	8011608 <dir_alloc+0x7c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80115d4:	f898 3003 	ldrb.w	r3, [r8, #3]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d148      	bne.n	801166e <dir_alloc+0xe2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80115dc:	2301      	movs	r3, #1
 80115de:	462a      	mov	r2, r5
 80115e0:	4651      	mov	r1, sl
 80115e2:	f898 0001 	ldrb.w	r0, [r8, #1]
 80115e6:	f7fe fb47 	bl	800fc78 <disk_read>
 80115ea:	b158      	cbz	r0, 8011604 <dir_alloc+0x78>
				res = FR_DISK_ERR;
 80115ec:	2201      	movs	r2, #1
			fs->winsect = sector;
 80115ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 80115f2:	9202      	str	r2, [sp, #8]
}
 80115f4:	9802      	ldr	r0, [sp, #8]
			fs->winsect = sector;
 80115f6:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 80115fa:	b009      	add	sp, #36	; 0x24
 80115fc:	ecbd 8b02 	vpop	{d8}
 8011600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8011604:	f8c8 5030 	str.w	r5, [r8, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011608:	f8d9 3020 	ldr.w	r3, [r9, #32]
 801160c:	781b      	ldrb	r3, [r3, #0]
 801160e:	2be5      	cmp	r3, #229	; 0xe5
 8011610:	d028      	beq.n	8011664 <dir_alloc+0xd8>
 8011612:	fab3 f283 	clz	r2, r3
 8011616:	0952      	lsrs	r2, r2, #5
 8011618:	b323      	cbz	r3, 8011664 <dir_alloc+0xd8>
				n = 0;					/* Not a blank entry. Restart to search */
 801161a:	4617      	mov	r7, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801161c:	f8d9 4014 	ldr.w	r4, [r9, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011620:	f8d9 501c 	ldr.w	r5, [r9, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011624:	3420      	adds	r4, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011626:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 801162a:	d2c1      	bcs.n	80115b0 <dir_alloc+0x24>
 801162c:	2d00      	cmp	r5, #0
 801162e:	d0bf      	beq.n	80115b0 <dir_alloc+0x24>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011630:	f3c4 0b08 	ubfx	fp, r4, #0, #9
	FATFS *fs = dp->obj.fs;
 8011634:	f8d9 6000 	ldr.w	r6, [r9]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011638:	f1bb 0f00 	cmp.w	fp, #0
 801163c:	d109      	bne.n	8011652 <dir_alloc+0xc6>
		dp->sect++;				/* Next sector */
 801163e:	3501      	adds	r5, #1
		if (!dp->clust) {		/* Static table */
 8011640:	f8d9 1018 	ldr.w	r1, [r9, #24]
		dp->sect++;				/* Next sector */
 8011644:	f8c9 501c 	str.w	r5, [r9, #28]
		if (!dp->clust) {		/* Static table */
 8011648:	bba9      	cbnz	r1, 80116b6 <dir_alloc+0x12a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801164a:	8933      	ldrh	r3, [r6, #8]
 801164c:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8011650:	d95b      	bls.n	801170a <dir_alloc+0x17e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011652:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8011656:	9301      	str	r3, [sp, #4]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011658:	445b      	add	r3, fp
	dp->dptr = ofs;						/* Current entry */
 801165a:	f8c9 4014 	str.w	r4, [r9, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801165e:	f8c9 3020 	str.w	r3, [r9, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011662:	e7b3      	b.n	80115cc <dir_alloc+0x40>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011664:	3701      	adds	r7, #1
 8011666:	9b03      	ldr	r3, [sp, #12]
 8011668:	429f      	cmp	r7, r3
 801166a:	d1d7      	bne.n	801161c <dir_alloc+0x90>
 801166c:	e7a2      	b.n	80115b4 <dir_alloc+0x28>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801166e:	2301      	movs	r3, #1
 8011670:	4622      	mov	r2, r4
 8011672:	4651      	mov	r1, sl
 8011674:	f898 0001 	ldrb.w	r0, [r8, #1]
 8011678:	f7fe fb0c 	bl	800fc94 <disk_write>
 801167c:	bb48      	cbnz	r0, 80116d2 <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801167e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8011682:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011686:	1ae2      	subs	r2, r4, r3
 8011688:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801168c:	429a      	cmp	r2, r3
 801168e:	d2a5      	bcs.n	80115dc <dir_alloc+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011690:	f898 6002 	ldrb.w	r6, [r8, #2]
 8011694:	2e01      	cmp	r6, #1
 8011696:	d802      	bhi.n	801169e <dir_alloc+0x112>
 8011698:	e7a0      	b.n	80115dc <dir_alloc+0x50>
					wsect += fs->fsize;
 801169a:	f8d8 301c 	ldr.w	r3, [r8, #28]
 801169e:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80116a0:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80116a2:	2301      	movs	r3, #1
 80116a4:	4651      	mov	r1, sl
 80116a6:	4622      	mov	r2, r4
 80116a8:	f898 0001 	ldrb.w	r0, [r8, #1]
 80116ac:	f7fe faf2 	bl	800fc94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80116b0:	2e01      	cmp	r6, #1
 80116b2:	d1f2      	bne.n	801169a <dir_alloc+0x10e>
 80116b4:	e792      	b.n	80115dc <dir_alloc+0x50>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80116b6:	8973      	ldrh	r3, [r6, #10]
 80116b8:	3b01      	subs	r3, #1
 80116ba:	ea13 2354 	ands.w	r3, r3, r4, lsr #9
 80116be:	d1c8      	bne.n	8011652 <dir_alloc+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80116c0:	4630      	mov	r0, r6
 80116c2:	f7fe fed3 	bl	801046c <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80116c6:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80116c8:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80116ca:	f240 8082 	bls.w	80117d2 <dir_alloc+0x246>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80116ce:	1c43      	adds	r3, r0, #1
 80116d0:	d102      	bne.n	80116d8 <dir_alloc+0x14c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80116d2:	2301      	movs	r3, #1
 80116d4:	9302      	str	r3, [sp, #8]
 80116d6:	e76d      	b.n	80115b4 <dir_alloc+0x28>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80116d8:	69b3      	ldr	r3, [r6, #24]
 80116da:	4298      	cmp	r0, r3
 80116dc:	d21a      	bcs.n	8011714 <dir_alloc+0x188>
	clst -= 2;
 80116de:	1e83      	subs	r3, r0, #2
 80116e0:	9305      	str	r3, [sp, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80116e2:	f106 0334 	add.w	r3, r6, #52	; 0x34
 80116e6:	9301      	str	r3, [sp, #4]
 80116e8:	4603      	mov	r3, r0
				dp->clust = clst;		/* Initialize data for new cluster */
 80116ea:	f8c9 3018 	str.w	r3, [r9, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80116ee:	69b3      	ldr	r3, [r6, #24]
 80116f0:	9a05      	ldr	r2, [sp, #20]
 80116f2:	3b02      	subs	r3, #2
 80116f4:	4293      	cmp	r3, r2
 80116f6:	f240 809e 	bls.w	8011836 <dir_alloc+0x2aa>
	return clst * fs->csize + fs->database;
 80116fa:	8973      	ldrh	r3, [r6, #10]
 80116fc:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 80116fe:	fb02 5503 	mla	r5, r2, r3, r5
 8011702:	9b01      	ldr	r3, [sp, #4]
				dp->sect = clust2sect(fs, clst);
 8011704:	f8c9 501c 	str.w	r5, [r9, #28]
 8011708:	e7a6      	b.n	8011658 <dir_alloc+0xcc>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801170a:	2307      	movs	r3, #7
				dp->sect = 0; return FR_NO_FILE;
 801170c:	f8c9 101c 	str.w	r1, [r9, #28]
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011710:	9302      	str	r3, [sp, #8]
 8011712:	e74f      	b.n	80115b4 <dir_alloc+0x28>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011714:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8011718:	4648      	mov	r0, r9
 801171a:	f7ff f9db 	bl	8010ad4 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801171e:	4603      	mov	r3, r0
 8011720:	9004      	str	r0, [sp, #16]
 8011722:	2800      	cmp	r0, #0
 8011724:	f43f af44 	beq.w	80115b0 <dir_alloc+0x24>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011728:	2801      	cmp	r0, #1
 801172a:	d052      	beq.n	80117d2 <dir_alloc+0x246>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801172c:	3301      	adds	r3, #1
 801172e:	d0d0      	beq.n	80116d2 <dir_alloc+0x146>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011730:	78f3      	ldrb	r3, [r6, #3]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d150      	bne.n	80117d8 <dir_alloc+0x24c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011736:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801173a:	9301      	str	r3, [sp, #4]
		*d++ = (BYTE)val;
 801173c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011740:	2100      	movs	r1, #0
 8011742:	9801      	ldr	r0, [sp, #4]
 8011744:	f008 fd84 	bl	801a250 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011748:	69b3      	ldr	r3, [r6, #24]
	clst -= 2;
 801174a:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801174c:	3b02      	subs	r3, #2
	clst -= 2;
 801174e:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011750:	429a      	cmp	r2, r3
	clst -= 2;
 8011752:	9205      	str	r2, [sp, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011754:	d27c      	bcs.n	8011850 <dir_alloc+0x2c4>
	return clst * fs->csize + fs->database;
 8011756:	4611      	mov	r1, r2
 8011758:	8973      	ldrh	r3, [r6, #10]
 801175a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 801175c:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011760:	6332      	str	r2, [r6, #48]	; 0x30
 8011762:	2b00      	cmp	r3, #0
 8011764:	d071      	beq.n	801184a <dir_alloc+0x2be>
 8011766:	2300      	movs	r3, #0
 8011768:	ee08 aa10 	vmov	s16, sl
 801176c:	9706      	str	r7, [sp, #24]
 801176e:	4692      	mov	sl, r2
 8011770:	f8cd 901c 	str.w	r9, [sp, #28]
 8011774:	46a1      	mov	r9, r4
 8011776:	9f01      	ldr	r7, [sp, #4]
 8011778:	461c      	mov	r4, r3
						fs->wflag = 1;
 801177a:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801177e:	4652      	mov	r2, sl
 8011780:	4639      	mov	r1, r7
 8011782:	7870      	ldrb	r0, [r6, #1]
						fs->wflag = 1;
 8011784:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011786:	2301      	movs	r3, #1
 8011788:	f7fe fa84 	bl	800fc94 <disk_write>
 801178c:	2800      	cmp	r0, #0
 801178e:	d1a0      	bne.n	80116d2 <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011790:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
 8011792:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011794:	ebaa 0203 	sub.w	r2, sl, r3
 8011798:	69f3      	ldr	r3, [r6, #28]
 801179a:	429a      	cmp	r2, r3
 801179c:	d20e      	bcs.n	80117bc <dir_alloc+0x230>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801179e:	78b5      	ldrb	r5, [r6, #2]
 80117a0:	2d01      	cmp	r5, #1
 80117a2:	d801      	bhi.n	80117a8 <dir_alloc+0x21c>
 80117a4:	e00a      	b.n	80117bc <dir_alloc+0x230>
					wsect += fs->fsize;
 80117a6:	69f3      	ldr	r3, [r6, #28]
 80117a8:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80117aa:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80117ac:	2301      	movs	r3, #1
 80117ae:	4639      	mov	r1, r7
 80117b0:	4652      	mov	r2, sl
 80117b2:	7870      	ldrb	r0, [r6, #1]
 80117b4:	f7fe fa6e 	bl	800fc94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80117b8:	2d01      	cmp	r5, #1
 80117ba:	d1f4      	bne.n	80117a6 <dir_alloc+0x21a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80117bc:	6b31      	ldr	r1, [r6, #48]	; 0x30
 80117be:	1c63      	adds	r3, r4, #1
 80117c0:	8972      	ldrh	r2, [r6, #10]
 80117c2:	f101 0a01 	add.w	sl, r1, #1
 80117c6:	4293      	cmp	r3, r2
 80117c8:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
 80117cc:	d235      	bcs.n	801183a <dir_alloc+0x2ae>
 80117ce:	461c      	mov	r4, r3
 80117d0:	e7d3      	b.n	801177a <dir_alloc+0x1ee>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80117d2:	2302      	movs	r3, #2
 80117d4:	9302      	str	r3, [sp, #8]
 80117d6:	e6ed      	b.n	80115b4 <dir_alloc+0x28>
		wsect = fs->winsect;	/* Current sector number */
 80117d8:	6b32      	ldr	r2, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80117da:	f106 0134 	add.w	r1, r6, #52	; 0x34
 80117de:	2301      	movs	r3, #1
 80117e0:	7870      	ldrb	r0, [r6, #1]
 80117e2:	9205      	str	r2, [sp, #20]
 80117e4:	9101      	str	r1, [sp, #4]
 80117e6:	f7fe fa55 	bl	800fc94 <disk_write>
 80117ea:	2800      	cmp	r0, #0
 80117ec:	f47f af71 	bne.w	80116d2 <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80117f0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80117f2:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
 80117f4:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80117f6:	1ad1      	subs	r1, r2, r3
 80117f8:	69f3      	ldr	r3, [r6, #28]
 80117fa:	4299      	cmp	r1, r3
 80117fc:	d29e      	bcs.n	801173c <dir_alloc+0x1b0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80117fe:	78b5      	ldrb	r5, [r6, #2]
 8011800:	2d01      	cmp	r5, #1
 8011802:	d99b      	bls.n	801173c <dir_alloc+0x1b0>
 8011804:	ee08 aa10 	vmov	s16, sl
 8011808:	f8cd 9014 	str.w	r9, [sp, #20]
 801180c:	4692      	mov	sl, r2
 801180e:	46a1      	mov	r9, r4
 8011810:	9c01      	ldr	r4, [sp, #4]
 8011812:	e000      	b.n	8011816 <dir_alloc+0x28a>
					wsect += fs->fsize;
 8011814:	69f3      	ldr	r3, [r6, #28]
 8011816:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011818:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801181a:	2301      	movs	r3, #1
 801181c:	4621      	mov	r1, r4
 801181e:	4652      	mov	r2, sl
 8011820:	7870      	ldrb	r0, [r6, #1]
 8011822:	f7fe fa37 	bl	800fc94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011826:	2d01      	cmp	r5, #1
 8011828:	d1f4      	bne.n	8011814 <dir_alloc+0x288>
 801182a:	464c      	mov	r4, r9
 801182c:	ee18 aa10 	vmov	sl, s16
 8011830:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011834:	e782      	b.n	801173c <dir_alloc+0x1b0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011836:	2500      	movs	r5, #0
 8011838:	e763      	b.n	8011702 <dir_alloc+0x176>
					fs->winsect -= n;							/* Restore window offset */
 801183a:	4623      	mov	r3, r4
 801183c:	9f06      	ldr	r7, [sp, #24]
 801183e:	464c      	mov	r4, r9
 8011840:	ee18 aa10 	vmov	sl, s16
 8011844:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8011848:	1aca      	subs	r2, r1, r3
 801184a:	9b04      	ldr	r3, [sp, #16]
 801184c:	6332      	str	r2, [r6, #48]	; 0x30
 801184e:	e74c      	b.n	80116ea <dir_alloc+0x15e>
	return clst * fs->csize + fs->database;
 8011850:	8973      	ldrh	r3, [r6, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011852:	2200      	movs	r2, #0
 8011854:	e784      	b.n	8011760 <dir_alloc+0x1d4>
 8011856:	bf00      	nop

08011858 <dir_register>:
{
 8011858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801185c:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 8011860:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8011862:	f013 0ba0 	ands.w	fp, r3, #160	; 0xa0
 8011866:	930a      	str	r3, [sp, #40]	; 0x28
 8011868:	f040 8450 	bne.w	801210c <dir_register+0x8b4>
	FATFS *fs = dp->obj.fs;
 801186c:	f8d0 9000 	ldr.w	r9, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8011870:	4604      	mov	r4, r0
 8011872:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8011876:	881a      	ldrh	r2, [r3, #0]
 8011878:	2a00      	cmp	r2, #0
 801187a:	f000 844b 	beq.w	8012114 <dir_register+0x8bc>
 801187e:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 8011882:	f10b 0b01 	add.w	fp, fp, #1
 8011886:	2a00      	cmp	r2, #0
 8011888:	d1f9      	bne.n	801187e <dir_register+0x26>
	mem_cpy(sn, dp->fn, 12);
 801188a:	f104 0624 	add.w	r6, r4, #36	; 0x24
			*d++ = *s++;
 801188e:	ab12      	add	r3, sp, #72	; 0x48
 8011890:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8011894:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8011898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801189a:	07d8      	lsls	r0, r3, #31
 801189c:	f140 818b 	bpl.w	8011bb6 <dir_register+0x35e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80118a0:	2340      	movs	r3, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80118a2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
			*d++ = *s++;
 80118a6:	f89d a046 	ldrb.w	sl, [sp, #70]	; 0x46
		for (n = 1; n < 100; n++) {
 80118aa:	2701      	movs	r7, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80118ac:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80118b0:	f04f 0820 	mov.w	r8, #32
			*d++ = *s++;
 80118b4:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
				if (sr & 0x10000) sr ^= 0x11021;
 80118b8:	4dba      	ldr	r5, [pc, #744]	; (8011ba4 <dir_register+0x34c>)
			*d++ = *s++;
 80118ba:	9301      	str	r3, [sp, #4]
 80118bc:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 80118c0:	9302      	str	r3, [sp, #8]
 80118c2:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 80118c6:	9305      	str	r3, [sp, #20]
 80118c8:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 80118cc:	9304      	str	r3, [sp, #16]
 80118ce:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80118d2:	9303      	str	r3, [sp, #12]
 80118d4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80118d8:	9308      	str	r3, [sp, #32]
 80118da:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80118de:	9307      	str	r3, [sp, #28]
 80118e0:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80118e4:	9306      	str	r3, [sp, #24]
 80118e6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80118ea:	9309      	str	r3, [sp, #36]	; 0x24
 80118ec:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80118f0:	469b      	mov	fp, r3
			*d++ = *s++;
 80118f2:	9b01      	ldr	r3, [sp, #4]
 80118f4:	2100      	movs	r1, #0
 80118f6:	2200      	movs	r2, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80118f8:	2f05      	cmp	r7, #5
			*d++ = *s++;
 80118fa:	f363 0107 	bfi	r1, r3, #0, #8
 80118fe:	9b02      	ldr	r3, [sp, #8]
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8011900:	f8d9 000c 	ldr.w	r0, [r9, #12]
			*d++ = *s++;
 8011904:	f363 210f 	bfi	r1, r3, #8, #8
 8011908:	9b05      	ldr	r3, [sp, #20]
 801190a:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
 801190e:	f363 4117 	bfi	r1, r3, #16, #8
 8011912:	9b04      	ldr	r3, [sp, #16]
 8011914:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
 8011918:	f363 611f 	bfi	r1, r3, #24, #8
 801191c:	9b03      	ldr	r3, [sp, #12]
 801191e:	f363 0207 	bfi	r2, r3, #0, #8
 8011922:	9b08      	ldr	r3, [sp, #32]
 8011924:	f363 220f 	bfi	r2, r3, #8, #8
 8011928:	9b07      	ldr	r3, [sp, #28]
 801192a:	f363 4217 	bfi	r2, r3, #16, #8
 801192e:	9b06      	ldr	r3, [sp, #24]
 8011930:	f363 621f 	bfi	r2, r3, #24, #8
 8011934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011936:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
 801193a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801193e:	f240 8304 	bls.w	8011f4a <dir_register+0x6f2>
		while (*lfn) {	/* Create a CRC */
 8011942:	8802      	ldrh	r2, [r0, #0]
 8011944:	2a00      	cmp	r2, #0
 8011946:	f000 8300 	beq.w	8011f4a <dir_register+0x6f2>
				sr = (sr << 1) + (wc & 1);
 801194a:	f002 0101 	and.w	r1, r2, #1
 801194e:	4684      	mov	ip, r0
				wc >>= 1;
 8011950:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 8011952:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8011956:	e009      	b.n	801196c <dir_register+0x114>
				sr = (sr << 1) + (wc & 1);
 8011958:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 801195c:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
 8011960:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
 8011964:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8011968:	bf18      	it	ne
 801196a:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 801196c:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
 8011970:	0893      	lsrs	r3, r2, #2
 8011972:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
 8011974:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8011978:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 801197a:	f003 0301 	and.w	r3, r3, #1
 801197e:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8011982:	bf48      	it	mi
 8011984:	ea8e 0e05 	eormi.w	lr, lr, r5
				wc >>= 1;
 8011988:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
 801198a:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801198e:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
 8011992:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8011996:	bf18      	it	ne
 8011998:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
 801199a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801199e:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 80119a0:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 80119a4:	bf48      	it	mi
 80119a6:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 80119a8:	f003 0301 	and.w	r3, r3, #1
 80119ac:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80119b0:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 80119b2:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 80119b6:	bf48      	it	mi
 80119b8:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 80119ba:	f000 0001 	and.w	r0, r0, #1
 80119be:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80119c2:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80119c4:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 80119c8:	bf48      	it	mi
 80119ca:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 80119cc:	f001 0101 	and.w	r1, r1, #1
 80119d0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80119d4:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 80119d6:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 80119da:	bf48      	it	mi
 80119dc:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 80119de:	f003 0301 	and.w	r3, r3, #1
 80119e2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80119e6:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 80119e8:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 80119ec:	bf48      	it	mi
 80119ee:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 80119f0:	f000 0001 	and.w	r0, r0, #1
 80119f4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80119f8:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80119fa:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 80119fe:	bf48      	it	mi
 8011a00:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8011a02:	f001 0101 	and.w	r1, r1, #1
 8011a06:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8011a0a:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8011a0c:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 8011a10:	bf48      	it	mi
 8011a12:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8011a14:	f003 0301 	and.w	r3, r3, #1
 8011a18:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8011a1c:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 8011a1e:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 8011a22:	bf48      	it	mi
 8011a24:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8011a26:	f000 0001 	and.w	r0, r0, #1
 8011a2a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8011a2e:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 8011a30:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 8011a34:	bf48      	it	mi
 8011a36:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8011a38:	f001 0101 	and.w	r1, r1, #1
 8011a3c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8011a40:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8011a42:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 8011a46:	bf48      	it	mi
 8011a48:	4068      	eormi	r0, r5
				wc >>= 1;
 8011a4a:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
 8011a4c:	f003 0301 	and.w	r3, r3, #1
 8011a50:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8011a54:	0400      	lsls	r0, r0, #16
 8011a56:	bf48      	it	mi
 8011a58:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8011a5a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8011a5e:	0409      	lsls	r1, r1, #16
 8011a60:	bf48      	it	mi
 8011a62:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8011a64:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8011a68:	041a      	lsls	r2, r3, #16
		while (*lfn) {	/* Create a CRC */
 8011a6a:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 8011a6e:	bf48      	it	mi
 8011a70:	ea8e 0e05 	eormi.w	lr, lr, r5
		while (*lfn) {	/* Create a CRC */
 8011a74:	2a00      	cmp	r2, #0
 8011a76:	f47f af6f 	bne.w	8011958 <dir_register+0x100>
		c = (BYTE)((seq % 16) + '0');
 8011a7a:	f00e 010f 	and.w	r1, lr, #15
 8011a7e:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8011a82:	2a39      	cmp	r2, #57	; 0x39
 8011a84:	bf88      	it	hi
 8011a86:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8011a8a:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
 8011a8e:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
 8011a92:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
 8011a96:	f240 830c 	bls.w	80120b2 <dir_register+0x85a>
		c = (BYTE)((seq % 16) + '0');
 8011a9a:	f001 000f 	and.w	r0, r1, #15
 8011a9e:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8011aa2:	2a39      	cmp	r2, #57	; 0x39
 8011aa4:	bf88      	it	hi
 8011aa6:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8011aaa:	290f      	cmp	r1, #15
		seq /= 16;
 8011aac:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
 8011ab0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	} while (seq);
 8011ab4:	f240 8303 	bls.w	80120be <dir_register+0x866>
		c = (BYTE)((seq % 16) + '0');
 8011ab8:	f000 010f 	and.w	r1, r0, #15
 8011abc:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8011ac0:	2a39      	cmp	r2, #57	; 0x39
 8011ac2:	bf88      	it	hi
 8011ac4:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8011ac8:	280f      	cmp	r0, #15
		seq /= 16;
 8011aca:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
 8011ace:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	} while (seq);
 8011ad2:	f240 82fa 	bls.w	80120ca <dir_register+0x872>
		c = (BYTE)((seq % 16) + '0');
 8011ad6:	f001 000f 	and.w	r0, r1, #15
 8011ada:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8011ade:	2a39      	cmp	r2, #57	; 0x39
 8011ae0:	bf88      	it	hi
 8011ae2:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8011ae6:	290f      	cmp	r1, #15
		seq /= 16;
 8011ae8:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
 8011aec:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	} while (seq);
 8011af0:	f240 82fa 	bls.w	80120e8 <dir_register+0x890>
		c = (BYTE)((seq % 16) + '0');
 8011af4:	f000 010f 	and.w	r1, r0, #15
 8011af8:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8011afc:	2a39      	cmp	r2, #57	; 0x39
 8011afe:	bf88      	it	hi
 8011b00:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8011b04:	280f      	cmp	r0, #15
		seq /= 16;
 8011b06:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
 8011b0a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	} while (seq);
 8011b0e:	f240 82f1 	bls.w	80120f4 <dir_register+0x89c>
		c = (BYTE)((seq % 16) + '0');
 8011b12:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
 8011b16:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
 8011b1a:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 8011b1e:	2a39      	cmp	r2, #57	; 0x39
 8011b20:	bf88      	it	hi
 8011b22:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8011b26:	290f      	cmp	r1, #15
		ns[i--] = c;
 8011b28:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	} while (seq);
 8011b2c:	f240 82e8 	bls.w	8012100 <dir_register+0x8a8>
		c = (BYTE)((seq % 16) + '0');
 8011b30:	f00e 010f 	and.w	r1, lr, #15
 8011b34:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8011b38:	2a39      	cmp	r2, #57	; 0x39
 8011b3a:	bf88      	it	hi
 8011b3c:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8011b40:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
 8011b44:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
 8011b48:	f240 82c5 	bls.w	80120d6 <dir_register+0x87e>
		ns[i--] = c;
 8011b4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8011b50:	f104 0123 	add.w	r1, r4, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011b54:	2200      	movs	r2, #0
 8011b56:	e002      	b.n	8011b5e <dir_register+0x306>
 8011b58:	3201      	adds	r2, #1
 8011b5a:	4562      	cmp	r2, ip
 8011b5c:	d003      	beq.n	8011b66 <dir_register+0x30e>
 8011b5e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011b62:	2b20      	cmp	r3, #32
 8011b64:	d1f8      	bne.n	8011b58 <dir_register+0x300>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011b66:	f1bc 0f07 	cmp.w	ip, #7
 8011b6a:	f240 81f3 	bls.w	8011f54 <dir_register+0x6fc>
 8011b6e:	1c50      	adds	r0, r2, #1
 8011b70:	f806 8002 	strb.w	r8, [r6, r2]
	} while (j < 8);
 8011b74:	2807      	cmp	r0, #7
 8011b76:	d809      	bhi.n	8011b8c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011b78:	1c42      	adds	r2, r0, #1
 8011b7a:	2120      	movs	r1, #32
 8011b7c:	2a08      	cmp	r2, #8
 8011b7e:	f1c0 0208 	rsb	r2, r0, #8
 8011b82:	4430      	add	r0, r6
 8011b84:	bf88      	it	hi
 8011b86:	2201      	movhi	r2, #1
 8011b88:	f008 fb62 	bl	801a250 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8011b8c:	4620      	mov	r0, r4
 8011b8e:	f7ff f92b 	bl	8010de8 <dir_find>
			if (res != FR_OK) break;
 8011b92:	b948      	cbnz	r0, 8011ba8 <dir_register+0x350>
		for (n = 1; n < 100; n++) {
 8011b94:	3701      	adds	r7, #1
 8011b96:	2f64      	cmp	r7, #100	; 0x64
 8011b98:	f47f aeab 	bne.w	80118f2 <dir_register+0x9a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8011b9c:	2007      	movs	r0, #7
}
 8011b9e:	b013      	add	sp, #76	; 0x4c
 8011ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba4:	00011021 	.word	0x00011021
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011ba8:	2804      	cmp	r0, #4
 8011baa:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8011bae:	d1f6      	bne.n	8011b9e <dir_register+0x346>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8011bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bb2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bb8:	079b      	lsls	r3, r3, #30
 8011bba:	f140 818e 	bpl.w	8011eda <dir_register+0x682>
 8011bbe:	f10b 0b0c 	add.w	fp, fp, #12
 8011bc2:	4de3      	ldr	r5, [pc, #908]	; (8011f50 <dir_register+0x6f8>)
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011bc4:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8011bc6:	fba5 350b 	umull	r3, r5, r5, fp
 8011bca:	08ad      	lsrs	r5, r5, #2
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011bcc:	1c69      	adds	r1, r5, #1
 8011bce:	f7ff fcdd 	bl	801158c <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011bd2:	2800      	cmp	r0, #0
 8011bd4:	d1e3      	bne.n	8011b9e <dir_register+0x346>
 8011bd6:	f1bb 0f0c 	cmp.w	fp, #12
 8011bda:	f000 8185 	beq.w	8011ee8 <dir_register+0x690>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8011bde:	6961      	ldr	r1, [r4, #20]
 8011be0:	4620      	mov	r0, r4
 8011be2:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 8011be6:	f7ff f845 	bl	8010c74 <dir_sdi>
		if (res == FR_OK) {
 8011bea:	2800      	cmp	r0, #0
 8011bec:	d1d7      	bne.n	8011b9e <dir_register+0x346>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011bee:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
	dir[LDIR_Type] = 0;
 8011bf2:	4680      	mov	r8, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011bf4:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8011bf8:	01fb      	lsls	r3, r7, #7
 8011bfa:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8011bfe:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 8011c02:	ea43 0357 	orr.w	r3, r3, r7, lsr #1
 8011c06:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
 8011c0a:	f894 e02a 	ldrb.w	lr, [r4, #42]	; 0x2a
 8011c0e:	189f      	adds	r7, r3, r2
 8011c10:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8011c14:	f894 c02b 	ldrb.w	ip, [r4, #43]	; 0x2b
 8011c18:	f3c7 0346 	ubfx	r3, r7, #1, #7
 8011c1c:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
 8011c20:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 8011c24:	fa50 f783 	uxtab	r7, r0, r3
 8011c28:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8011c2c:	f3c7 0346 	ubfx	r3, r7, #1, #7
 8011c30:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 8011c34:	fa51 f783 	uxtab	r7, r1, r3
 8011c38:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 8011c3c:	f3c7 0346 	ubfx	r3, r7, #1, #7
 8011c40:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011c44:	f64f 77fd 	movw	r7, #65533	; 0xfffd
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011c48:	fa5a fa83 	uxtab	sl, sl, r3
 8011c4c:	f3ca 0346 	ubfx	r3, sl, #1, #7
 8011c50:	ea43 13ca 	orr.w	r3, r3, sl, lsl #7
 8011c54:	fa52 f283 	uxtab	r2, r2, r3
 8011c58:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011c5c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011c60:	fa5e f283 	uxtab	r2, lr, r3
 8011c64:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011c68:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011c6c:	fa5c f283 	uxtab	r2, ip, r3
 8011c70:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011c74:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011c78:	fa56 f283 	uxtab	r2, r6, r3
 8011c7c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8011c80:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8011c84:	fa50 f383 	uxtab	r3, r0, r3
 8011c88:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8011c8c:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8011c90:	fa51 f183 	uxtab	r1, r1, r3
 8011c94:	b2ce      	uxtb	r6, r1
	} while (--n);
 8011c96:	e036      	b.n	8011d06 <dir_register+0x4ae>
	*ptr++ = (BYTE)val; val >>= 8;
 8011c98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c9c:	f8a3 2003 	strh.w	r2, [r3, #3]
 8011ca0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ca4:	f8a3 2005 	strh.w	r2, [r3, #5]
 8011ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cac:	f8a3 2007 	strh.w	r2, [r3, #7]
 8011cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cb4:	f8a3 2009 	strh.w	r2, [r3, #9]
 8011cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cbc:	81da      	strh	r2, [r3, #14]
 8011cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cc2:	821a      	strh	r2, [r3, #16]
 8011cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cc8:	825a      	strh	r2, [r3, #18]
 8011cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cce:	829a      	strh	r2, [r3, #20]
 8011cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cd4:	82da      	strh	r2, [r3, #22]
 8011cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011cda:	831a      	strh	r2, [r3, #24]
 8011cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ce0:	839a      	strh	r2, [r3, #28]
 8011ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ce6:	83da      	strh	r2, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011ce8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011cec:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
 8011cee:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 8011cf0:	4620      	mov	r0, r4
				fs->wflag = 1;
 8011cf2:	f889 3003 	strb.w	r3, [r9, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8011cf6:	f7fe fc19 	bl	801052c <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 8011cfa:	2800      	cmp	r0, #0
 8011cfc:	f47f af4f 	bne.w	8011b9e <dir_register+0x346>
 8011d00:	3d01      	subs	r5, #1
 8011d02:	f000 80f1 	beq.w	8011ee8 <dir_register+0x690>
				res = move_window(fs, dp->sect);
 8011d06:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011d08:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8011d0c:	4299      	cmp	r1, r3
 8011d0e:	d005      	beq.n	8011d1c <dir_register+0x4c4>
 8011d10:	4648      	mov	r0, r9
 8011d12:	f7fe f95f 	bl	800ffd4 <move_window.part.0>
				if (res != FR_OK) break;
 8011d16:	2800      	cmp	r0, #0
 8011d18:	f47f af41 	bne.w	8011b9e <dir_register+0x346>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8011d1c:	6a23      	ldr	r3, [r4, #32]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011d1e:	f04f 020f 	mov.w	r2, #15
 8011d22:	b2e8      	uxtb	r0, r5
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8011d24:	f8d9 100c 	ldr.w	r1, [r9, #12]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011d28:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011d2a:	1e42      	subs	r2, r0, #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011d2c:	735e      	strb	r6, [r3, #13]
	dir[LDIR_Type] = 0;
 8011d2e:	f883 800c 	strb.w	r8, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011d32:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
	*ptr++ = (BYTE)val; val >>= 8;
 8011d36:	f883 801a 	strb.w	r8, [r3, #26]
	*ptr++ = (BYTE)val;
 8011d3a:	f883 801b 	strb.w	r8, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011d3e:	eb02 028c 	add.w	r2, r2, ip, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011d42:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 8011d46:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 8011d4a:	f883 c001 	strb.w	ip, [r3, #1]
 8011d4e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011d52:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 8011d56:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011d5a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8011d5e:	45be      	cmp	lr, r7
 8011d60:	d89a      	bhi.n	8011c98 <dir_register+0x440>
 8011d62:	3201      	adds	r2, #1
 8011d64:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 8011d68:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8011d6a:	ea4f 2e1a 	mov.w	lr, sl, lsr #8
 8011d6e:	f883 a003 	strb.w	sl, [r3, #3]
	*ptr++ = (BYTE)val;
 8011d72:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011d76:	f1ba 0f00 	cmp.w	sl, #0
 8011d7a:	d091      	beq.n	8011ca0 <dir_register+0x448>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011d7c:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8011d80:	45f2      	cmp	sl, lr
 8011d82:	d08d      	beq.n	8011ca0 <dir_register+0x448>
 8011d84:	440a      	add	r2, r1
 8011d86:	f8b2 a002 	ldrh.w	sl, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011d8a:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8011d8e:	f883 a005 	strb.w	sl, [r3, #5]
	*ptr++ = (BYTE)val;
 8011d92:	f883 b006 	strb.w	fp, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011d96:	f1ba 0f00 	cmp.w	sl, #0
 8011d9a:	f000 81be 	beq.w	801211a <dir_register+0x8c2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011d9e:	45f2      	cmp	sl, lr
 8011da0:	d082      	beq.n	8011ca8 <dir_register+0x450>
 8011da2:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8011da6:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8011daa:	f883 a007 	strb.w	sl, [r3, #7]
	*ptr++ = (BYTE)val;
 8011dae:	f883 b008 	strb.w	fp, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011db2:	f1ba 0f00 	cmp.w	sl, #0
 8011db6:	f000 81c5 	beq.w	8012144 <dir_register+0x8ec>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011dba:	45f2      	cmp	sl, lr
 8011dbc:	f43f af78 	beq.w	8011cb0 <dir_register+0x458>
 8011dc0:	f8b2 a006 	ldrh.w	sl, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 8011dc4:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8011dc8:	f883 a009 	strb.w	sl, [r3, #9]
	*ptr++ = (BYTE)val;
 8011dcc:	f883 b00a 	strb.w	fp, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011dd0:	f1ba 0f00 	cmp.w	sl, #0
 8011dd4:	f000 81b3 	beq.w	801213e <dir_register+0x8e6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011dd8:	45f2      	cmp	sl, lr
 8011dda:	f43f af6d 	beq.w	8011cb8 <dir_register+0x460>
 8011dde:	f8b2 a008 	ldrh.w	sl, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 8011de2:	ea4f 2e1a 	mov.w	lr, sl, lsr #8
 8011de6:	f883 a00e 	strb.w	sl, [r3, #14]
	*ptr++ = (BYTE)val;
 8011dea:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011dee:	f1ba 0f00 	cmp.w	sl, #0
 8011df2:	f43f af64 	beq.w	8011cbe <dir_register+0x466>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011df6:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8011dfa:	45f2      	cmp	sl, lr
 8011dfc:	f43f af5f 	beq.w	8011cbe <dir_register+0x466>
 8011e00:	f8b2 a00a 	ldrh.w	sl, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e04:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8011e08:	f883 a010 	strb.w	sl, [r3, #16]
	*ptr++ = (BYTE)val;
 8011e0c:	f883 b011 	strb.w	fp, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011e10:	f1ba 0f00 	cmp.w	sl, #0
 8011e14:	f000 8190 	beq.w	8012138 <dir_register+0x8e0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011e18:	45f2      	cmp	sl, lr
 8011e1a:	f43f af53 	beq.w	8011cc4 <dir_register+0x46c>
 8011e1e:	f8b2 a00c 	ldrh.w	sl, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e22:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8011e26:	f883 a012 	strb.w	sl, [r3, #18]
	*ptr++ = (BYTE)val;
 8011e2a:	f883 b013 	strb.w	fp, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011e2e:	f1ba 0f00 	cmp.w	sl, #0
 8011e32:	f000 817e 	beq.w	8012132 <dir_register+0x8da>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011e36:	45f2      	cmp	sl, lr
 8011e38:	f43f af47 	beq.w	8011cca <dir_register+0x472>
 8011e3c:	f8b2 a00e 	ldrh.w	sl, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e40:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8011e44:	f883 a014 	strb.w	sl, [r3, #20]
	*ptr++ = (BYTE)val;
 8011e48:	f883 b015 	strb.w	fp, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011e4c:	f1ba 0f00 	cmp.w	sl, #0
 8011e50:	f000 816c 	beq.w	801212c <dir_register+0x8d4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011e54:	45f2      	cmp	sl, lr
 8011e56:	f43f af3b 	beq.w	8011cd0 <dir_register+0x478>
 8011e5a:	f8b2 a010 	ldrh.w	sl, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e5e:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8011e62:	f883 a016 	strb.w	sl, [r3, #22]
	*ptr++ = (BYTE)val;
 8011e66:	f883 b017 	strb.w	fp, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011e6a:	f1ba 0f00 	cmp.w	sl, #0
 8011e6e:	f000 815a 	beq.w	8012126 <dir_register+0x8ce>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011e72:	45f2      	cmp	sl, lr
 8011e74:	f43f af2f 	beq.w	8011cd6 <dir_register+0x47e>
 8011e78:	f8b2 e012 	ldrh.w	lr, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e7c:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 8011e80:	f883 e018 	strb.w	lr, [r3, #24]
	*ptr++ = (BYTE)val;
 8011e84:	f883 a019 	strb.w	sl, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011e88:	f1be 0f00 	cmp.w	lr, #0
 8011e8c:	f43f af26 	beq.w	8011cdc <dir_register+0x484>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011e90:	f64f 7aff 	movw	sl, #65535	; 0xffff
 8011e94:	45d6      	cmp	lr, sl
 8011e96:	f43f af21 	beq.w	8011cdc <dir_register+0x484>
 8011e9a:	f8b2 e014 	ldrh.w	lr, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8011e9e:	ea4f 2b1e 	mov.w	fp, lr, lsr #8
 8011ea2:	f883 e01c 	strb.w	lr, [r3, #28]
	*ptr++ = (BYTE)val;
 8011ea6:	f883 b01d 	strb.w	fp, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011eaa:	f1be 0f00 	cmp.w	lr, #0
 8011eae:	f000 8137 	beq.w	8012120 <dir_register+0x8c8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011eb2:	45d6      	cmp	lr, sl
 8011eb4:	f43f af15 	beq.w	8011ce2 <dir_register+0x48a>
 8011eb8:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011eba:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 8011ebe:	779a      	strb	r2, [r3, #30]
 8011ec0:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 8011ec2:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011ec4:	fa1f f28e 	uxth.w	r2, lr
 8011ec8:	42ba      	cmp	r2, r7
 8011eca:	f63f af0d 	bhi.w	8011ce8 <dir_register+0x490>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011ece:	4461      	add	r1, ip
 8011ed0:	8b4a      	ldrh	r2, [r1, #26]
 8011ed2:	2a00      	cmp	r2, #0
 8011ed4:	f47f af0a 	bne.w	8011cec <dir_register+0x494>
 8011ed8:	e706      	b.n	8011ce8 <dir_register+0x490>
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011eda:	2101      	movs	r1, #1
 8011edc:	4620      	mov	r0, r4
 8011ede:	f7ff fb55 	bl	801158c <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8011ee2:	2800      	cmp	r0, #0
 8011ee4:	f47f ae5b 	bne.w	8011b9e <dir_register+0x346>
		res = move_window(fs, dp->sect);
 8011ee8:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011eea:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 8011eee:	4299      	cmp	r1, r3
 8011ef0:	d005      	beq.n	8011efe <dir_register+0x6a6>
 8011ef2:	4648      	mov	r0, r9
 8011ef4:	f7fe f86e 	bl	800ffd4 <move_window.part.0>
		if (res == FR_OK) {
 8011ef8:	2800      	cmp	r0, #0
 8011efa:	f47f ae50 	bne.w	8011b9e <dir_register+0x346>
		*d++ = (BYTE)val;
 8011efe:	2220      	movs	r2, #32
 8011f00:	2100      	movs	r1, #0
 8011f02:	6a20      	ldr	r0, [r4, #32]
 8011f04:	f008 f9a4 	bl	801a250 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011f08:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011f0a:	f104 0225 	add.w	r2, r4, #37	; 0x25
 8011f0e:	1a9a      	subs	r2, r3, r2
 8011f10:	2a02      	cmp	r2, #2
 8011f12:	f240 811a 	bls.w	801214a <dir_register+0x8f2>
			*d++ = *s++;
 8011f16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8011f18:	601a      	str	r2, [r3, #0]
 8011f1a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8011f1c:	605a      	str	r2, [r3, #4]
 8011f1e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
			fs->wflag = 1;
 8011f22:	2000      	movs	r0, #0
			*d++ = *s++;
 8011f24:	721a      	strb	r2, [r3, #8]
 8011f26:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8011f2a:	725a      	strb	r2, [r3, #9]
 8011f2c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8011f30:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 8011f32:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8011f34:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8011f38:	6a21      	ldr	r1, [r4, #32]
 8011f3a:	f003 0318 	and.w	r3, r3, #24
 8011f3e:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 8011f40:	f889 2003 	strb.w	r2, [r9, #3]
}
 8011f44:	b013      	add	sp, #76	; 0x4c
 8011f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f4a:	46be      	mov	lr, r7
 8011f4c:	e595      	b.n	8011a7a <dir_register+0x222>
 8011f4e:	bf00      	nop
 8011f50:	4ec4ec4f 	.word	0x4ec4ec4f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011f54:	f10c 0348 	add.w	r3, ip, #72	; 0x48
 8011f58:	f10c 0c01 	add.w	ip, ip, #1
 8011f5c:	eb0d 0103 	add.w	r1, sp, r3
 8011f60:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8011f64:	54b1      	strb	r1, [r6, r2]
 8011f66:	3201      	adds	r2, #1
	} while (j < 8);
 8011f68:	2a07      	cmp	r2, #7
 8011f6a:	f63f ae0f 	bhi.w	8011b8c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011f6e:	f1bc 0f08 	cmp.w	ip, #8
 8011f72:	d067      	beq.n	8012044 <dir_register+0x7ec>
 8011f74:	f10c 0348 	add.w	r3, ip, #72	; 0x48
	} while (j < 8);
 8011f78:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011f7a:	f102 0001 	add.w	r0, r2, #1
 8011f7e:	eb0d 0103 	add.w	r1, sp, r3
 8011f82:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8011f86:	54b1      	strb	r1, [r6, r2]
 8011f88:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 8011f8c:	f43f adfe 	beq.w	8011b8c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011f90:	2908      	cmp	r1, #8
 8011f92:	d05f      	beq.n	8012054 <dir_register+0x7fc>
 8011f94:	f10c 0349 	add.w	r3, ip, #73	; 0x49
	} while (j < 8);
 8011f98:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011f9a:	eb0d 0103 	add.w	r1, sp, r3
 8011f9e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8011fa2:	5431      	strb	r1, [r6, r0]
 8011fa4:	f10c 0102 	add.w	r1, ip, #2
 8011fa8:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8011fac:	f43f adee 	beq.w	8011b8c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011fb0:	2908      	cmp	r1, #8
 8011fb2:	d057      	beq.n	8012064 <dir_register+0x80c>
 8011fb4:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
	} while (j < 8);
 8011fb8:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011fba:	eb0d 0103 	add.w	r1, sp, r3
 8011fbe:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8011fc2:	5431      	strb	r1, [r6, r0]
 8011fc4:	f10c 0103 	add.w	r1, ip, #3
 8011fc8:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8011fcc:	f43f adde 	beq.w	8011b8c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011fd0:	2908      	cmp	r1, #8
 8011fd2:	d04f      	beq.n	8012074 <dir_register+0x81c>
 8011fd4:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
	} while (j < 8);
 8011fd8:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011fda:	eb0d 0103 	add.w	r1, sp, r3
 8011fde:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8011fe2:	5431      	strb	r1, [r6, r0]
 8011fe4:	f10c 0104 	add.w	r1, ip, #4
 8011fe8:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8011fec:	f43f adce 	beq.w	8011b8c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011ff0:	2908      	cmp	r1, #8
 8011ff2:	d047      	beq.n	8012084 <dir_register+0x82c>
 8011ff4:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
	} while (j < 8);
 8011ff8:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011ffa:	eb0d 0103 	add.w	r1, sp, r3
 8011ffe:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8012002:	5431      	strb	r1, [r6, r0]
 8012004:	f10c 0105 	add.w	r1, ip, #5
 8012008:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 801200c:	f43f adbe 	beq.w	8011b8c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012010:	2908      	cmp	r1, #8
 8012012:	d03f      	beq.n	8012094 <dir_register+0x83c>
 8012014:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
	} while (j < 8);
 8012018:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801201a:	eb0d 0103 	add.w	r1, sp, r3
 801201e:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 8012022:	5431      	strb	r1, [r6, r0]
 8012024:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 8012028:	f43f adb0 	beq.w	8011b8c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801202c:	f1bc 0f01 	cmp.w	ip, #1
 8012030:	d138      	bne.n	80120a4 <dir_register+0x84c>
 8012032:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	} while (j < 8);
 8012036:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012038:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
 801203a:	f47f ada7 	bne.w	8011b8c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801203e:	f884 802b 	strb.w	r8, [r4, #43]	; 0x2b
	} while (j < 8);
 8012042:	e5a3      	b.n	8011b8c <dir_register+0x334>
 8012044:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012046:	f102 0001 	add.w	r0, r2, #1
 801204a:	f806 8002 	strb.w	r8, [r6, r2]
	} while (j < 8);
 801204e:	f47f ad93 	bne.w	8011b78 <dir_register+0x320>
 8012052:	e59b      	b.n	8011b8c <dir_register+0x334>
 8012054:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012056:	f806 8000 	strb.w	r8, [r6, r0]
 801205a:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 801205e:	f47f ad8b 	bne.w	8011b78 <dir_register+0x320>
 8012062:	e593      	b.n	8011b8c <dir_register+0x334>
 8012064:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012066:	f806 8000 	strb.w	r8, [r6, r0]
 801206a:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 801206e:	f47f ad83 	bne.w	8011b78 <dir_register+0x320>
 8012072:	e58b      	b.n	8011b8c <dir_register+0x334>
 8012074:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012076:	f806 8000 	strb.w	r8, [r6, r0]
 801207a:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 801207e:	f47f ad7b 	bne.w	8011b78 <dir_register+0x320>
 8012082:	e583      	b.n	8011b8c <dir_register+0x334>
 8012084:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012086:	f806 8000 	strb.w	r8, [r6, r0]
 801208a:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 801208e:	f47f ad73 	bne.w	8011b78 <dir_register+0x320>
 8012092:	e57b      	b.n	8011b8c <dir_register+0x334>
 8012094:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012096:	f806 8000 	strb.w	r8, [r6, r0]
 801209a:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 801209e:	f47f ad6b 	bne.w	8011b78 <dir_register+0x320>
 80120a2:	e573      	b.n	8011b8c <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80120a4:	f806 8001 	strb.w	r8, [r6, r1]
	} while (j < 8);
 80120a8:	2a00      	cmp	r2, #0
 80120aa:	f47f ad6f 	bne.w	8011b8c <dir_register+0x334>
 80120ae:	2007      	movs	r0, #7
 80120b0:	e562      	b.n	8011b78 <dir_register+0x320>
	ns[i] = '~';
 80120b2:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 80120b4:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 80120b8:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80120bc:	e548      	b.n	8011b50 <dir_register+0x2f8>
	ns[i] = '~';
 80120be:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 80120c0:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 80120c4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80120c8:	e542      	b.n	8011b50 <dir_register+0x2f8>
	ns[i] = '~';
 80120ca:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 80120cc:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 80120d0:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80120d4:	e53c      	b.n	8011b50 <dir_register+0x2f8>
	ns[i] = '~';
 80120d6:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80120d8:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 80120dc:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80120e0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80120e4:	4662      	mov	r2, ip
 80120e6:	e745      	b.n	8011f74 <dir_register+0x71c>
	ns[i] = '~';
 80120e8:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 80120ea:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 80120ee:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80120f2:	e52d      	b.n	8011b50 <dir_register+0x2f8>
	ns[i] = '~';
 80120f4:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 80120f6:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 80120fa:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80120fe:	e527      	b.n	8011b50 <dir_register+0x2f8>
	ns[i] = '~';
 8012100:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8012102:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 8012106:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801210a:	e521      	b.n	8011b50 <dir_register+0x2f8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801210c:	2006      	movs	r0, #6
}
 801210e:	b013      	add	sp, #76	; 0x4c
 8012110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012114:	4693      	mov	fp, r2
 8012116:	f7ff bbb8 	b.w	801188a <dir_register+0x32>
	*ptr++ = (BYTE)val; val >>= 8;
 801211a:	f8a3 e007 	strh.w	lr, [r3, #7]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801211e:	e5c7      	b.n	8011cb0 <dir_register+0x458>
	*ptr++ = (BYTE)val; val >>= 8;
 8012120:	f8a3 a01e 	strh.w	sl, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012124:	e5e0      	b.n	8011ce8 <dir_register+0x490>
	*ptr++ = (BYTE)val; val >>= 8;
 8012126:	f8a3 e018 	strh.w	lr, [r3, #24]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801212a:	e5d7      	b.n	8011cdc <dir_register+0x484>
	*ptr++ = (BYTE)val; val >>= 8;
 801212c:	f8a3 e016 	strh.w	lr, [r3, #22]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012130:	e5d1      	b.n	8011cd6 <dir_register+0x47e>
	*ptr++ = (BYTE)val; val >>= 8;
 8012132:	f8a3 e014 	strh.w	lr, [r3, #20]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012136:	e5cb      	b.n	8011cd0 <dir_register+0x478>
	*ptr++ = (BYTE)val; val >>= 8;
 8012138:	f8a3 e012 	strh.w	lr, [r3, #18]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801213c:	e5c5      	b.n	8011cca <dir_register+0x472>
	*ptr++ = (BYTE)val; val >>= 8;
 801213e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012142:	e5bc      	b.n	8011cbe <dir_register+0x466>
	*ptr++ = (BYTE)val; val >>= 8;
 8012144:	f8a3 e009 	strh.w	lr, [r3, #9]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012148:	e5b6      	b.n	8011cb8 <dir_register+0x460>
			*d++ = *s++;
 801214a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 801214e:	701a      	strb	r2, [r3, #0]
 8012150:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8012154:	705a      	strb	r2, [r3, #1]
 8012156:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 801215a:	709a      	strb	r2, [r3, #2]
 801215c:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8012160:	70da      	strb	r2, [r3, #3]
 8012162:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8012166:	711a      	strb	r2, [r3, #4]
 8012168:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 801216c:	715a      	strb	r2, [r3, #5]
 801216e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8012172:	719a      	strb	r2, [r3, #6]
 8012174:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8012178:	71da      	strb	r2, [r3, #7]
 801217a:	e6d0      	b.n	8011f1e <dir_register+0x6c6>

0801217c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801217c:	b510      	push	{r4, lr}
 801217e:	b082      	sub	sp, #8
 8012180:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8012184:	b1a1      	cbz	r1, 80121b0 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012186:	f891 c000 	ldrb.w	ip, [r1]
 801218a:	f1bc 0f1f 	cmp.w	ip, #31
 801218e:	d912      	bls.n	80121b6 <f_mount+0x3a>
 8012190:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 8012194:	d00f      	beq.n	80121b6 <f_mount+0x3a>
 8012196:	4608      	mov	r0, r1
 8012198:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801219c:	2b1f      	cmp	r3, #31
 801219e:	d90c      	bls.n	80121ba <f_mount+0x3e>
 80121a0:	2b3a      	cmp	r3, #58	; 0x3a
 80121a2:	d1f9      	bne.n	8012198 <f_mount+0x1c>
			i = *tp++ - '0';
 80121a4:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80121a6:	4288      	cmp	r0, r1
 80121a8:	d102      	bne.n	80121b0 <f_mount+0x34>
 80121aa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80121ae:	d006      	beq.n	80121be <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 80121b0:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80121b2:	b002      	add	sp, #8
 80121b4:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80121b6:	4663      	mov	r3, ip
 80121b8:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80121ba:	2b3a      	cmp	r3, #58	; 0x3a
 80121bc:	d0f2      	beq.n	80121a4 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80121be:	4916      	ldr	r1, [pc, #88]	; (8012218 <f_mount+0x9c>)
 80121c0:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 80121c2:	b143      	cbz	r3, 80121d6 <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80121c4:	4815      	ldr	r0, [pc, #84]	; (801221c <f_mount+0xa0>)
 80121c6:	6804      	ldr	r4, [r0, #0]
 80121c8:	42a3      	cmp	r3, r4
 80121ca:	d01c      	beq.n	8012206 <f_mount+0x8a>
 80121cc:	6904      	ldr	r4, [r0, #16]
 80121ce:	429c      	cmp	r4, r3
 80121d0:	d016      	beq.n	8012200 <f_mount+0x84>
		cfs->fs_type = 0;				/* Clear old fs object */
 80121d2:	2000      	movs	r0, #0
 80121d4:	7018      	strb	r0, [r3, #0]
	if (fs) {
 80121d6:	9b01      	ldr	r3, [sp, #4]
 80121d8:	b173      	cbz	r3, 80121f8 <f_mount+0x7c>
		fs->fs_type = 0;				/* Clear new fs object */
 80121da:	2000      	movs	r0, #0
 80121dc:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 80121de:	9b01      	ldr	r3, [sp, #4]
 80121e0:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80121e2:	b1b3      	cbz	r3, 8012212 <f_mount+0x96>
 80121e4:	3a01      	subs	r2, #1
 80121e6:	bf18      	it	ne
 80121e8:	2201      	movne	r2, #1
 80121ea:	b992      	cbnz	r2, 8012212 <f_mount+0x96>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80121ec:	a901      	add	r1, sp, #4
 80121ee:	4668      	mov	r0, sp
 80121f0:	f7fd ff2a 	bl	8010048 <find_volume>
}
 80121f4:	b002      	add	sp, #8
 80121f6:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80121f8:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 80121fa:	600b      	str	r3, [r1, #0]
}
 80121fc:	b002      	add	sp, #8
 80121fe:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8012200:	2400      	movs	r4, #0
 8012202:	6104      	str	r4, [r0, #16]
 8012204:	e7e5      	b.n	80121d2 <f_mount+0x56>
 8012206:	2400      	movs	r4, #0
 8012208:	6004      	str	r4, [r0, #0]
 801220a:	6904      	ldr	r4, [r0, #16]
 801220c:	429c      	cmp	r4, r3
 801220e:	d1e0      	bne.n	80121d2 <f_mount+0x56>
 8012210:	e7f6      	b.n	8012200 <f_mount+0x84>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012212:	2000      	movs	r0, #0
}
 8012214:	b002      	add	sp, #8
 8012216:	bd10      	pop	{r4, pc}
 8012218:	20019b38 	.word	0x20019b38
 801221c:	20019b3c 	.word	0x20019b3c

08012220 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012224:	b092      	sub	sp, #72	; 0x48
 8012226:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012228:	2800      	cmp	r0, #0
 801222a:	f000 80a1 	beq.w	8012370 <f_open+0x150>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801222e:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8012232:	4616      	mov	r6, r2
 8012234:	4604      	mov	r4, r0
 8012236:	a903      	add	r1, sp, #12
 8012238:	a801      	add	r0, sp, #4
 801223a:	463a      	mov	r2, r7
 801223c:	f7fd ff04 	bl	8010048 <find_volume>
	if (res == FR_OK) {
 8012240:	4605      	mov	r5, r0
 8012242:	b128      	cbz	r0, 8012250 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012244:	2300      	movs	r3, #0
 8012246:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8012248:	4628      	mov	r0, r5
 801224a:	b012      	add	sp, #72	; 0x48
 801224c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 8012250:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8012252:	a804      	add	r0, sp, #16
 8012254:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8012256:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8012258:	f7fe ff6e 	bl	8011138 <follow_path>
		if (res == FR_OK) {
 801225c:	bb00      	cbnz	r0, 80122a0 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801225e:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8012262:	2b00      	cmp	r3, #0
 8012264:	f2c0 808b 	blt.w	801237e <f_open+0x15e>
		if (Files[i].fs) {	/* Existing entry */
 8012268:	4ba7      	ldr	r3, [pc, #668]	; (8012508 <f_open+0x2e8>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801226a:	f027 0201 	bic.w	r2, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801226e:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 8012270:	f8d3 8000 	ldr.w	r8, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012274:	4611      	mov	r1, r2
				Files[i].clu == dp->obj.sclust &&
 8012276:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 801227a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 801227e:	f1b8 0f00 	cmp.w	r8, #0
 8012282:	f000 80fe 	beq.w	8012482 <f_open+0x262>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012286:	4580      	cmp	r8, r0
 8012288:	d07b      	beq.n	8012382 <f_open+0x162>
		if (Files[i].fs) {	/* Existing entry */
 801228a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 801228e:	f1b8 0f00 	cmp.w	r8, #0
 8012292:	f000 808e 	beq.w	80123b2 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012296:	4580      	cmp	r8, r0
 8012298:	f000 8103 	beq.w	80124a2 <f_open+0x282>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801229c:	2512      	movs	r5, #18
 801229e:	e7d1      	b.n	8012244 <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80122a0:	f016 0f1c 	tst.w	r6, #28
 80122a4:	d069      	beq.n	801237a <f_open+0x15a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80122a6:	2804      	cmp	r0, #4
 80122a8:	d167      	bne.n	801237a <f_open+0x15a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80122aa:	4b97      	ldr	r3, [pc, #604]	; (8012508 <f_open+0x2e8>)
 80122ac:	681a      	ldr	r2, [r3, #0]
 80122ae:	b112      	cbz	r2, 80122b6 <f_open+0x96>
 80122b0:	691b      	ldr	r3, [r3, #16]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d1f2      	bne.n	801229c <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80122b6:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80122b8:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80122bc:	f7ff facc 	bl	8011858 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80122c0:	2800      	cmp	r0, #0
 80122c2:	d15a      	bne.n	801237a <f_open+0x15a>
				dw = GET_FATTIME();
 80122c4:	f7fd fbd2 	bl	800fa6c <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80122c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80122ca:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80122ce:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 80122d2:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80122d6:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
 80122da:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 80122dc:	73de      	strb	r6, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 80122de:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 80122e2:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 80122e4:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80122e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80122e8:	9903      	ldr	r1, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80122ea:	75de      	strb	r6, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 80122ec:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 80122f0:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 80122f2:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80122f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80122f6:	f883 e00b 	strb.w	lr, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
 80122fa:	780a      	ldrb	r2, [r1, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80122fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 80122fe:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8012300:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8012302:	d102      	bne.n	801230a <f_open+0xea>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012304:	8a9a      	ldrh	r2, [r3, #20]
 8012306:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 801230a:	2200      	movs	r2, #0
 801230c:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 801230e:	7808      	ldrb	r0, [r1, #0]
 8012310:	2803      	cmp	r0, #3
 8012312:	d100      	bne.n	8012316 <f_open+0xf6>
	*ptr++ = (BYTE)val; val >>= 8;
 8012314:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 8012316:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8012318:	2200      	movs	r2, #0
 801231a:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 801231c:	2301      	movs	r3, #1
 801231e:	70cb      	strb	r3, [r1, #3]
						dw = fs->winsect;
 8012320:	9b03      	ldr	r3, [sp, #12]
					if (cl) {							/* Remove the cluster chain if exist */
 8012322:	b19e      	cbz	r6, 801234c <f_open+0x12c>
						res = remove_chain(&dj.obj, cl, 0);
 8012324:	4631      	mov	r1, r6
 8012326:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 8012328:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 801232c:	f7ff f890 	bl	8011450 <remove_chain>
						if (res == FR_OK) {
 8012330:	bb18      	cbnz	r0, 801237a <f_open+0x15a>
							res = move_window(fs, dw);
 8012332:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012336:	4590      	cmp	r8, r2
 8012338:	f000 80e3 	beq.w	8012502 <f_open+0x2e2>
 801233c:	4618      	mov	r0, r3
 801233e:	4641      	mov	r1, r8
 8012340:	f7fd fe48 	bl	800ffd4 <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012344:	3e01      	subs	r6, #1
 8012346:	9b03      	ldr	r3, [sp, #12]
 8012348:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 801234a:	b9b0      	cbnz	r0, 801237a <f_open+0x15a>
				mode |= FA_MODIFIED;
 801234c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012350:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012356:	3900      	subs	r1, #0
 8012358:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801235a:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801235c:	bf18      	it	ne
 801235e:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
 8012360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012362:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012364:	f7fd fcb0 	bl	800fcc8 <inc_lock>
 8012368:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801236a:	bb70      	cbnz	r0, 80123ca <f_open+0x1aa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801236c:	2502      	movs	r5, #2
 801236e:	e769      	b.n	8012244 <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8012370:	2509      	movs	r5, #9
}
 8012372:	4628      	mov	r0, r5
 8012374:	b012      	add	sp, #72	; 0x48
 8012376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801237a:	4605      	mov	r5, r0
 801237c:	e762      	b.n	8012244 <f_open+0x24>
				res = FR_INVALID_NAME;
 801237e:	2506      	movs	r5, #6
 8012380:	e760      	b.n	8012244 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012382:	6858      	ldr	r0, [r3, #4]
 8012384:	4560      	cmp	r0, ip
 8012386:	f000 8095 	beq.w	80124b4 <f_open+0x294>
		if (Files[i].fs) {	/* Existing entry */
 801238a:	6918      	ldr	r0, [r3, #16]
 801238c:	b188      	cbz	r0, 80123b2 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801238e:	4540      	cmp	r0, r8
 8012390:	d184      	bne.n	801229c <f_open+0x7c>
 8012392:	6958      	ldr	r0, [r3, #20]
 8012394:	4560      	cmp	r0, ip
 8012396:	d181      	bne.n	801229c <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8012398:	6998      	ldr	r0, [r3, #24]
 801239a:	4570      	cmp	r0, lr
 801239c:	f47f af7e 	bne.w	801229c <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80123a0:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80123a2:	2a00      	cmp	r2, #0
 80123a4:	d164      	bne.n	8012470 <f_open+0x250>
 80123a6:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80123aa:	899b      	ldrh	r3, [r3, #12]
 80123ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80123b0:	d05e      	beq.n	8012470 <f_open+0x250>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80123b2:	f016 0f1c 	tst.w	r6, #28
 80123b6:	d04b      	beq.n	8012450 <f_open+0x230>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80123b8:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80123bc:	f013 0f11 	tst.w	r3, #17
 80123c0:	d15d      	bne.n	801247e <f_open+0x25e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80123c2:	0773      	lsls	r3, r6, #29
 80123c4:	d556      	bpl.n	8012474 <f_open+0x254>
 80123c6:	2508      	movs	r5, #8
 80123c8:	e73c      	b.n	8012244 <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80123ca:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80123ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 80123d0:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
 80123d4:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 80123d6:	2a03      	cmp	r2, #3
 80123d8:	d102      	bne.n	80123e0 <f_open+0x1c0>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80123da:	8a9a      	ldrh	r2, [r3, #20]
 80123dc:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 80123e0:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80123e2:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 80123e4:	f8d3 801c 	ldr.w	r8, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80123e8:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->cltbl = 0;			/* Disable fast seek mode */
 80123ec:	62e1      	str	r1, [r4, #44]	; 0x2c
		*d++ = (BYTE)val;
 80123ee:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->obj.fs = fs;	 	/* Validate the file object */
 80123f2:	f8c4 9000 	str.w	r9, [r4]
		*d++ = (BYTE)val;
 80123f6:	4650      	mov	r0, sl
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80123f8:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->obj.id = fs->id;
 80123fc:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			fp->err = 0;			/* Clear error flag */
 8012400:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012402:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012404:	61a1      	str	r1, [r4, #24]
			fp->obj.id = fs->id;
 8012406:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 8012408:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 801240a:	f007 ff21 	bl	801a250 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801240e:	06b9      	lsls	r1, r7, #26
 8012410:	f57f af1a 	bpl.w	8012248 <f_open+0x28>
 8012414:	f1b8 0f00 	cmp.w	r8, #0
 8012418:	f43f af16 	beq.w	8012248 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801241c:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012420:	f8b9 300a 	ldrh.w	r3, [r9, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012424:	ebb8 2f43 	cmp.w	r8, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012428:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801242c:	d804      	bhi.n	8012438 <f_open+0x218>
 801242e:	e047      	b.n	80124c0 <f_open+0x2a0>
 8012430:	1c42      	adds	r2, r0, #1
 8012432:	d06b      	beq.n	801250c <f_open+0x2ec>
 8012434:	4547      	cmp	r7, r8
 8012436:	d269      	bcs.n	801250c <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8012438:	4631      	mov	r1, r6
 801243a:	6820      	ldr	r0, [r4, #0]
 801243c:	f7fe f816 	bl	801046c <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8012440:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012442:	eba8 0807 	sub.w	r8, r8, r7
					clst = get_fat(&fp->obj, clst);
 8012446:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 8012448:	d8f2      	bhi.n	8012430 <f_open+0x210>
 801244a:	2502      	movs	r5, #2
				fp->clust = clst;
 801244c:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801244e:	e6f9      	b.n	8012244 <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012450:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8012454:	06d9      	lsls	r1, r3, #27
 8012456:	d422      	bmi.n	801249e <f_open+0x27e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012458:	07b1      	lsls	r1, r6, #30
 801245a:	d501      	bpl.n	8012460 <f_open+0x240>
 801245c:	07d8      	lsls	r0, r3, #31
 801245e:	d40e      	bmi.n	801247e <f_open+0x25e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012460:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012464:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012466:	2e00      	cmp	r6, #0
 8012468:	f47f af70 	bne.w	801234c <f_open+0x12c>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801246c:	4611      	mov	r1, r2
 801246e:	e771      	b.n	8012354 <f_open+0x134>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012470:	2510      	movs	r5, #16
 8012472:	e6e7      	b.n	8012244 <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012474:	0730      	lsls	r0, r6, #28
 8012476:	f53f af25 	bmi.w	80122c4 <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801247a:	9b03      	ldr	r3, [sp, #12]
 801247c:	e76a      	b.n	8012354 <f_open+0x134>
						res = FR_DENIED;
 801247e:	2507      	movs	r5, #7
 8012480:	e6e0      	b.n	8012244 <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 8012482:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8012486:	f1b8 0f00 	cmp.w	r8, #0
 801248a:	d092      	beq.n	80123b2 <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801248c:	4540      	cmp	r0, r8
 801248e:	d190      	bne.n	80123b2 <f_open+0x192>
 8012490:	6958      	ldr	r0, [r3, #20]
 8012492:	4560      	cmp	r0, ip
 8012494:	d18d      	bne.n	80123b2 <f_open+0x192>
				Files[i].clu == dp->obj.sclust &&
 8012496:	6998      	ldr	r0, [r3, #24]
 8012498:	4586      	cmp	lr, r0
 801249a:	d18a      	bne.n	80123b2 <f_open+0x192>
 801249c:	e780      	b.n	80123a0 <f_open+0x180>
					res = FR_NO_FILE;
 801249e:	2504      	movs	r5, #4
 80124a0:	e6d0      	b.n	8012244 <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80124a2:	6958      	ldr	r0, [r3, #20]
 80124a4:	4560      	cmp	r0, ip
 80124a6:	f47f aef9 	bne.w	801229c <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 80124aa:	6998      	ldr	r0, [r3, #24]
 80124ac:	4586      	cmp	lr, r0
 80124ae:	f47f aef5 	bne.w	801229c <f_open+0x7c>
 80124b2:	e775      	b.n	80123a0 <f_open+0x180>
 80124b4:	6898      	ldr	r0, [r3, #8]
 80124b6:	4570      	cmp	r0, lr
 80124b8:	f47f af67 	bne.w	801238a <f_open+0x16a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80124bc:	4628      	mov	r0, r5
 80124be:	e770      	b.n	80123a2 <f_open+0x182>
				fp->clust = clst;
 80124c0:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80124c2:	f3c8 0308 	ubfx	r3, r8, #0, #9
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	f43f aebe 	beq.w	8012248 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80124cc:	9803      	ldr	r0, [sp, #12]
	clst -= 2;
 80124ce:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80124d0:	6983      	ldr	r3, [r0, #24]
 80124d2:	3b02      	subs	r3, #2
 80124d4:	429e      	cmp	r6, r3
 80124d6:	f4bf af49 	bcs.w	801236c <f_open+0x14c>
	return clst * fs->csize + fs->database;
 80124da:	8942      	ldrh	r2, [r0, #10]
 80124dc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80124de:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 80124e2:	2a00      	cmp	r2, #0
 80124e4:	f43f af42 	beq.w	801236c <f_open+0x14c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80124e8:	eb02 2258 	add.w	r2, r2, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80124ec:	4651      	mov	r1, sl
 80124ee:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80124f0:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80124f2:	7840      	ldrb	r0, [r0, #1]
 80124f4:	f7fd fbc0 	bl	800fc78 <disk_read>
 80124f8:	2800      	cmp	r0, #0
 80124fa:	f43f aea5 	beq.w	8012248 <f_open+0x28>
 80124fe:	2501      	movs	r5, #1
 8012500:	e6a0      	b.n	8012244 <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012502:	3e01      	subs	r6, #1
 8012504:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 8012506:	e721      	b.n	801234c <f_open+0x12c>
 8012508:	20019b3c 	.word	0x20019b3c
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801250c:	1c70      	adds	r0, r6, #1
				fp->clust = clst;
 801250e:	61e6      	str	r6, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012510:	bf0c      	ite	eq
 8012512:	2301      	moveq	r3, #1
 8012514:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012516:	d1d4      	bne.n	80124c2 <f_open+0x2a2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012518:	461d      	mov	r5, r3
 801251a:	e693      	b.n	8012244 <f_open+0x24>

0801251c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801251c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012520:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8012522:	2300      	movs	r3, #0
{
 8012524:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 8012526:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012528:	b150      	cbz	r0, 8012540 <f_read+0x24>
 801252a:	6803      	ldr	r3, [r0, #0]
 801252c:	4604      	mov	r4, r0
 801252e:	b13b      	cbz	r3, 8012540 <f_read+0x24>
 8012530:	4617      	mov	r7, r2
 8012532:	781a      	ldrb	r2, [r3, #0]
 8012534:	b122      	cbz	r2, 8012540 <f_read+0x24>
 8012536:	460d      	mov	r5, r1
 8012538:	88da      	ldrh	r2, [r3, #6]
 801253a:	8881      	ldrh	r1, [r0, #4]
 801253c:	4291      	cmp	r1, r2
 801253e:	d005      	beq.n	801254c <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8012540:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8012544:	4640      	mov	r0, r8
 8012546:	b005      	add	sp, #20
 8012548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801254c:	7858      	ldrb	r0, [r3, #1]
 801254e:	f7fd fb77 	bl	800fc40 <disk_status>
 8012552:	07c2      	lsls	r2, r0, #31
 8012554:	d4f4      	bmi.n	8012540 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012556:	f894 8015 	ldrb.w	r8, [r4, #21]
 801255a:	f1b8 0f00 	cmp.w	r8, #0
 801255e:	d1f1      	bne.n	8012544 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012560:	7d23      	ldrb	r3, [r4, #20]
 8012562:	f013 0301 	ands.w	r3, r3, #1
 8012566:	9300      	str	r3, [sp, #0]
 8012568:	f000 80d8 	beq.w	801271c <f_read+0x200>
	remain = fp->obj.objsize - fp->fptr;
 801256c:	69a1      	ldr	r1, [r4, #24]
 801256e:	68e3      	ldr	r3, [r4, #12]
 8012570:	1a5b      	subs	r3, r3, r1
 8012572:	429f      	cmp	r7, r3
 8012574:	bf28      	it	cs
 8012576:	461f      	movcs	r7, r3
	for ( ;  btr;								/* Repeat until all data read */
 8012578:	2f00      	cmp	r7, #0
 801257a:	d0e3      	beq.n	8012544 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801257c:	f104 0331 	add.w	r3, r4, #49	; 0x31
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012580:	46a2      	mov	sl, r4
 8012582:	f8cd 8008 	str.w	r8, [sp, #8]
 8012586:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012588:	f3c1 0308 	ubfx	r3, r1, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801258c:	f85a 9b30 	ldr.w	r9, [sl], #48
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012590:	2b00      	cmp	r3, #0
 8012592:	d142      	bne.n	801261a <f_read+0xfe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012594:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8012598:	0a4b      	lsrs	r3, r1, #9
 801259a:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 801259c:	ea12 2251 	ands.w	r2, r2, r1, lsr #9
 80125a0:	d06d      	beq.n	801267e <f_read+0x162>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80125a2:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80125a4:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 80125a8:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80125aa:	3b02      	subs	r3, #2
 80125ac:	4298      	cmp	r0, r3
 80125ae:	d273      	bcs.n	8012698 <f_read+0x17c>
	return clst * fs->csize + fs->database;
 80125b0:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 80125b4:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 80125b8:	fb01 3000 	mla	r0, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 80125bc:	2800      	cmp	r0, #0
 80125be:	d06b      	beq.n	8012698 <f_read+0x17c>
			if (cc) {							/* Read maximum contiguous sectors directly */
 80125c0:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 80125c4:	eb02 0b00 	add.w	fp, r2, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 80125c8:	d36d      	bcc.n	80126a6 <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80125ca:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80125ce:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80125d2:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80125d4:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 80125d8:	bf88      	it	hi
 80125da:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80125de:	465a      	mov	r2, fp
 80125e0:	4629      	mov	r1, r5
 80125e2:	4643      	mov	r3, r8
 80125e4:	f7fd fb48 	bl	800fc78 <disk_read>
 80125e8:	2800      	cmp	r0, #0
 80125ea:	f040 8085 	bne.w	80126f8 <f_read+0x1dc>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80125ee:	f994 2014 	ldrsb.w	r2, [r4, #20]
 80125f2:	2a00      	cmp	r2, #0
 80125f4:	f2c0 80a9 	blt.w	801274a <f_read+0x22e>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80125f8:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80125fc:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 80125fe:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8012600:	440d      	add	r5, r1
 8012602:	440b      	add	r3, r1
 8012604:	61a3      	str	r3, [r4, #24]
 8012606:	6833      	ldr	r3, [r6, #0]
 8012608:	440b      	add	r3, r1
 801260a:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 801260c:	f000 80b3 	beq.w	8012776 <f_read+0x25a>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012610:	69a1      	ldr	r1, [r4, #24]
 8012612:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8012616:	2b00      	cmp	r3, #0
 8012618:	d0bc      	beq.n	8012594 <f_read+0x78>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801261a:	1c58      	adds	r0, r3, #1
 801261c:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012620:	4453      	add	r3, sl
 8012622:	4450      	add	r0, sl
 8012624:	42b9      	cmp	r1, r7
 8012626:	eba5 0000 	sub.w	r0, r5, r0
 801262a:	bf28      	it	cs
 801262c:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801262e:	2802      	cmp	r0, #2
 8012630:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8012634:	d968      	bls.n	8012708 <f_read+0x1ec>
 8012636:	f1bb 0f07 	cmp.w	fp, #7
 801263a:	d965      	bls.n	8012708 <f_read+0x1ec>
 801263c:	f021 0e03 	bic.w	lr, r1, #3
 8012640:	461a      	mov	r2, r3
 8012642:	4628      	mov	r0, r5
 8012644:	449e      	add	lr, r3
			*d++ = *s++;
 8012646:	f852 cb04 	ldr.w	ip, [r2], #4
 801264a:	4596      	cmp	lr, r2
 801264c:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
 8012650:	d1f9      	bne.n	8012646 <f_read+0x12a>
 8012652:	f021 0203 	bic.w	r2, r1, #3
 8012656:	4291      	cmp	r1, r2
 8012658:	eb05 0002 	add.w	r0, r5, r2
 801265c:	eb03 0c02 	add.w	ip, r3, r2
 8012660:	d0cc      	beq.n	80125fc <f_read+0xe0>
			*d++ = *s++;
 8012662:	5c9b      	ldrb	r3, [r3, r2]
 8012664:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
 8012666:	ebbb 0202 	subs.w	r2, fp, r2
 801266a:	d0c7      	beq.n	80125fc <f_read+0xe0>
			*d++ = *s++;
 801266c:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
 8012670:	2a01      	cmp	r2, #1
			*d++ = *s++;
 8012672:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
 8012674:	d0c2      	beq.n	80125fc <f_read+0xe0>
			*d++ = *s++;
 8012676:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801267a:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
 801267c:	e7be      	b.n	80125fc <f_read+0xe0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801267e:	bb39      	cbnz	r1, 80126d0 <f_read+0x1b4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012680:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012682:	2801      	cmp	r0, #1
 8012684:	d908      	bls.n	8012698 <f_read+0x17c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012686:	1c43      	adds	r3, r0, #1
 8012688:	d036      	beq.n	80126f8 <f_read+0x1dc>
				fp->clust = clst;				/* Update current cluster */
 801268a:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 801268c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801268e:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8012692:	3b02      	subs	r3, #2
 8012694:	4298      	cmp	r0, r3
 8012696:	d38b      	bcc.n	80125b0 <f_read+0x94>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012698:	2302      	movs	r3, #2
 801269a:	4698      	mov	r8, r3
 801269c:	7563      	strb	r3, [r4, #21]
}
 801269e:	4640      	mov	r0, r8
 80126a0:	b005      	add	sp, #20
 80126a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80126a6:	6a22      	ldr	r2, [r4, #32]
 80126a8:	455a      	cmp	r2, fp
 80126aa:	d00b      	beq.n	80126c4 <f_read+0x1a8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80126ac:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	db3d      	blt.n	8012730 <f_read+0x214>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80126b4:	2301      	movs	r3, #1
 80126b6:	465a      	mov	r2, fp
 80126b8:	4651      	mov	r1, sl
 80126ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 80126be:	f7fd fadb 	bl	800fc78 <disk_read>
 80126c2:	b9c8      	cbnz	r0, 80126f8 <f_read+0x1dc>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80126c4:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 80126c6:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80126ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126ce:	e7a4      	b.n	801261a <f_read+0xfe>
					if (fp->cltbl) {
 80126d0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80126d2:	b330      	cbz	r0, 8012722 <f_read+0x206>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80126d4:	6821      	ldr	r1, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80126d6:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80126d8:	8949      	ldrh	r1, [r1, #10]
 80126da:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80126de:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80126e0:	b929      	cbnz	r1, 80126ee <f_read+0x1d2>
 80126e2:	e7d9      	b.n	8012698 <f_read+0x17c>
		cl -= ncl; tbl++;		/* Next fragment */
 80126e4:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80126e6:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 80126ea:	2900      	cmp	r1, #0
 80126ec:	d0d4      	beq.n	8012698 <f_read+0x17c>
		if (cl < ncl) break;	/* In this fragment? */
 80126ee:	4299      	cmp	r1, r3
 80126f0:	d9f8      	bls.n	80126e4 <f_read+0x1c8>
	return cl + *tbl;	/* Return the cluster number */
 80126f2:	6840      	ldr	r0, [r0, #4]
 80126f4:	4418      	add	r0, r3
 80126f6:	e7c4      	b.n	8012682 <f_read+0x166>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80126f8:	f8dd 8000 	ldr.w	r8, [sp]
 80126fc:	2301      	movs	r3, #1
}
 80126fe:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012700:	7563      	strb	r3, [r4, #21]
}
 8012702:	b005      	add	sp, #20
 8012704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012708:	1e6a      	subs	r2, r5, #1
 801270a:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
 801270e:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 8012712:	4563      	cmp	r3, ip
			*d++ = *s++;
 8012714:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8012718:	d1f9      	bne.n	801270e <f_read+0x1f2>
 801271a:	e76f      	b.n	80125fc <f_read+0xe0>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801271c:	f04f 0807 	mov.w	r8, #7
 8012720:	e710      	b.n	8012544 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012722:	69e1      	ldr	r1, [r4, #28]
 8012724:	6820      	ldr	r0, [r4, #0]
 8012726:	9203      	str	r2, [sp, #12]
 8012728:	f7fd fea0 	bl	801046c <get_fat.isra.0>
 801272c:	9a03      	ldr	r2, [sp, #12]
 801272e:	e7a8      	b.n	8012682 <f_read+0x166>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012730:	2301      	movs	r3, #1
 8012732:	4651      	mov	r1, sl
 8012734:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012738:	f7fd faac 	bl	800fc94 <disk_write>
 801273c:	2800      	cmp	r0, #0
 801273e:	d1db      	bne.n	80126f8 <f_read+0x1dc>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012740:	7d23      	ldrb	r3, [r4, #20]
 8012742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012746:	7523      	strb	r3, [r4, #20]
 8012748:	e7b4      	b.n	80126b4 <f_read+0x198>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801274a:	6a22      	ldr	r2, [r4, #32]
 801274c:	eba2 0b0b 	sub.w	fp, r2, fp
 8012750:	45c3      	cmp	fp, r8
 8012752:	f4bf af51 	bcs.w	80125f8 <f_read+0xdc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012756:	eb05 224b 	add.w	r2, r5, fp, lsl #9
 801275a:	9b01      	ldr	r3, [sp, #4]
 801275c:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801275e:	1ad0      	subs	r0, r2, r3
 8012760:	2802      	cmp	r0, #2
 8012762:	d90b      	bls.n	801277c <f_read+0x260>
 8012764:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 8012768:	f851 3b04 	ldr.w	r3, [r1], #4
 801276c:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 8012770:	4562      	cmp	r2, ip
 8012772:	d1f9      	bne.n	8012768 <f_read+0x24c>
 8012774:	e740      	b.n	80125f8 <f_read+0xdc>
 8012776:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801277a:	e6e3      	b.n	8012544 <f_read+0x28>
 801277c:	3a01      	subs	r2, #1
 801277e:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
			*d++ = *s++;
 8012782:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 8012786:	458c      	cmp	ip, r1
			*d++ = *s++;
 8012788:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 801278c:	d1f9      	bne.n	8012782 <f_read+0x266>
 801278e:	e733      	b.n	80125f8 <f_read+0xdc>

08012790 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012794:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8012796:	2300      	movs	r3, #0
{
 8012798:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 801279a:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801279c:	b150      	cbz	r0, 80127b4 <f_write+0x24>
 801279e:	6803      	ldr	r3, [r0, #0]
 80127a0:	4604      	mov	r4, r0
 80127a2:	b13b      	cbz	r3, 80127b4 <f_write+0x24>
 80127a4:	4616      	mov	r6, r2
 80127a6:	781a      	ldrb	r2, [r3, #0]
 80127a8:	b122      	cbz	r2, 80127b4 <f_write+0x24>
 80127aa:	460d      	mov	r5, r1
 80127ac:	88da      	ldrh	r2, [r3, #6]
 80127ae:	8881      	ldrh	r1, [r0, #4]
 80127b0:	4291      	cmp	r1, r2
 80127b2:	d005      	beq.n	80127c0 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 80127b4:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 80127b8:	4640      	mov	r0, r8
 80127ba:	b005      	add	sp, #20
 80127bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80127c0:	7858      	ldrb	r0, [r3, #1]
 80127c2:	f7fd fa3d 	bl	800fc40 <disk_status>
 80127c6:	07c1      	lsls	r1, r0, #31
 80127c8:	d4f4      	bmi.n	80127b4 <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80127ca:	f894 8015 	ldrb.w	r8, [r4, #21]
 80127ce:	f1b8 0f00 	cmp.w	r8, #0
 80127d2:	d1f1      	bne.n	80127b8 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80127d4:	7d23      	ldrb	r3, [r4, #20]
 80127d6:	079a      	lsls	r2, r3, #30
 80127d8:	f140 80f4 	bpl.w	80129c4 <f_write+0x234>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80127dc:	69a2      	ldr	r2, [r4, #24]
 80127de:	42f2      	cmn	r2, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80127e0:	bf28      	it	cs
 80127e2:	43d6      	mvncs	r6, r2
	for ( ;  btw;							/* Repeat until all data written */
 80127e4:	2e00      	cmp	r6, #0
 80127e6:	f000 80cb 	beq.w	8012980 <f_write+0x1f0>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80127ea:	f504 730c 	add.w	r3, r4, #560	; 0x230
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80127ee:	46a2      	mov	sl, r4
 80127f0:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80127f2:	f3c2 0308 	ubfx	r3, r2, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80127f6:	f85a 9b30 	ldr.w	r9, [sl], #48
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d160      	bne.n	80128c0 <f_write+0x130>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80127fe:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 8012802:	0a53      	lsrs	r3, r2, #9
 8012804:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 8012808:	ea1b 2b52 	ands.w	fp, fp, r2, lsr #9
 801280c:	d110      	bne.n	8012830 <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801280e:	2a00      	cmp	r2, #0
 8012810:	f040 809f 	bne.w	8012952 <f_write+0x1c2>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012814:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 8012816:	2800      	cmp	r0, #0
 8012818:	f000 80df 	beq.w	80129da <f_write+0x24a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801281c:	2801      	cmp	r0, #1
 801281e:	f000 8086 	beq.w	801292e <f_write+0x19e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012822:	1c43      	adds	r3, r0, #1
 8012824:	f000 80bd 	beq.w	80129a2 <f_write+0x212>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012828:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 801282a:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801282c:	b903      	cbnz	r3, 8012830 <f_write+0xa0>
 801282e:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012830:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8012834:	2b00      	cmp	r3, #0
 8012836:	f2c0 80a7 	blt.w	8012988 <f_write+0x1f8>
	clst -= 2;
 801283a:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801283c:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8012840:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012842:	3b02      	subs	r3, #2
 8012844:	429a      	cmp	r2, r3
 8012846:	d272      	bcs.n	801292e <f_write+0x19e>
	return clst * fs->csize + fs->database;
 8012848:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 801284c:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8012850:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012854:	2a00      	cmp	r2, #0
 8012856:	d06a      	beq.n	801292e <f_write+0x19e>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012858:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 801285c:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 801285e:	d36d      	bcc.n	801293c <f_write+0x1ac>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012860:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012864:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012866:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012868:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 801286c:	bf88      	it	hi
 801286e:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012872:	4629      	mov	r1, r5
 8012874:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012878:	f7fd fa0c 	bl	800fc94 <disk_write>
 801287c:	2800      	cmp	r0, #0
 801287e:	f040 8090 	bne.w	80129a2 <f_write+0x212>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012882:	6a21      	ldr	r1, [r4, #32]
 8012884:	9a02      	ldr	r2, [sp, #8]
 8012886:	9b03      	ldr	r3, [sp, #12]
 8012888:	1a8a      	subs	r2, r1, r2
 801288a:	429a      	cmp	r2, r3
 801288c:	f0c0 80b9 	bcc.w	8012a02 <f_write+0x272>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012890:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 8012894:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012898:	69a3      	ldr	r3, [r4, #24]
 801289a:	4615      	mov	r5, r2
 801289c:	68e2      	ldr	r2, [r4, #12]
 801289e:	4463      	add	r3, ip
 80128a0:	4293      	cmp	r3, r2
 80128a2:	61a3      	str	r3, [r4, #24]
 80128a4:	bf38      	it	cc
 80128a6:	4613      	movcc	r3, r2
	for ( ;  btw;							/* Repeat until all data written */
 80128a8:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80128ac:	60e3      	str	r3, [r4, #12]
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	4463      	add	r3, ip
 80128b2:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 80128b4:	d063      	beq.n	801297e <f_write+0x1ee>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80128b6:	69a2      	ldr	r2, [r4, #24]
 80128b8:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d09e      	beq.n	80127fe <f_write+0x6e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80128c0:	f5c3 7c00 	rsb	ip, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80128c4:	1c6a      	adds	r2, r5, #1
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80128c6:	4453      	add	r3, sl
 80128c8:	45b4      	cmp	ip, r6
 80128ca:	eba3 0202 	sub.w	r2, r3, r2
 80128ce:	bf28      	it	cs
 80128d0:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80128d2:	2a02      	cmp	r2, #2
 80128d4:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 80128d8:	d96a      	bls.n	80129b0 <f_write+0x220>
 80128da:	f1bb 0f07 	cmp.w	fp, #7
 80128de:	d967      	bls.n	80129b0 <f_write+0x220>
 80128e0:	f02c 0e03 	bic.w	lr, ip, #3
 80128e4:	461a      	mov	r2, r3
 80128e6:	4629      	mov	r1, r5
 80128e8:	449e      	add	lr, r3
			*d++ = *s++;
 80128ea:	f851 0b04 	ldr.w	r0, [r1], #4
 80128ee:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 80128f2:	4596      	cmp	lr, r2
 80128f4:	d1f9      	bne.n	80128ea <f_write+0x15a>
 80128f6:	f02c 0103 	bic.w	r1, ip, #3
 80128fa:	458c      	cmp	ip, r1
 80128fc:	eb03 0001 	add.w	r0, r3, r1
 8012900:	eb05 0201 	add.w	r2, r5, r1
 8012904:	d00e      	beq.n	8012924 <f_write+0x194>
			*d++ = *s++;
 8012906:	f815 e001 	ldrb.w	lr, [r5, r1]
 801290a:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 801290e:	ebbb 0101 	subs.w	r1, fp, r1
 8012912:	d005      	beq.n	8012920 <f_write+0x190>
			*d++ = *s++;
 8012914:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
 8012916:	2901      	cmp	r1, #1
			*d++ = *s++;
 8012918:	7043      	strb	r3, [r0, #1]
 801291a:	bf1c      	itt	ne
 801291c:	7893      	ldrbne	r3, [r2, #2]
 801291e:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 8012920:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 8012924:	7d23      	ldrb	r3, [r4, #20]
 8012926:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801292a:	7523      	strb	r3, [r4, #20]
 801292c:	e7b4      	b.n	8012898 <f_write+0x108>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801292e:	2302      	movs	r3, #2
 8012930:	4698      	mov	r8, r3
 8012932:	7563      	strb	r3, [r4, #21]
}
 8012934:	4640      	mov	r0, r8
 8012936:	b005      	add	sp, #20
 8012938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801293c:	6a23      	ldr	r3, [r4, #32]
 801293e:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 8012940:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012942:	d002      	beq.n	801294a <f_write+0x1ba>
 8012944:	68e1      	ldr	r1, [r4, #12]
 8012946:	428b      	cmp	r3, r1
 8012948:	d34f      	bcc.n	80129ea <f_write+0x25a>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->sect = sect;
 801294e:	6222      	str	r2, [r4, #32]
 8012950:	e7b6      	b.n	80128c0 <f_write+0x130>
					if (fp->cltbl) {
 8012952:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012954:	2900      	cmp	r1, #0
 8012956:	d038      	beq.n	80129ca <f_write+0x23a>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012958:	6822      	ldr	r2, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801295a:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801295c:	8952      	ldrh	r2, [r2, #10]
 801295e:	fbb3 f3f2 	udiv	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012962:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012964:	b922      	cbnz	r2, 8012970 <f_write+0x1e0>
 8012966:	e00a      	b.n	801297e <f_write+0x1ee>
		cl -= ncl; tbl++;		/* Next fragment */
 8012968:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801296a:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 801296e:	b132      	cbz	r2, 801297e <f_write+0x1ee>
		if (cl < ncl) break;	/* In this fragment? */
 8012970:	4293      	cmp	r3, r2
 8012972:	d2f9      	bcs.n	8012968 <f_write+0x1d8>
	return cl + *tbl;	/* Return the cluster number */
 8012974:	6848      	ldr	r0, [r1, #4]
 8012976:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012978:	2800      	cmp	r0, #0
 801297a:	f47f af4f 	bne.w	801281c <f_write+0x8c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801297e:	7d23      	ldrb	r3, [r4, #20]
 8012980:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012984:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 8012986:	e717      	b.n	80127b8 <f_write+0x28>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012988:	2301      	movs	r3, #1
 801298a:	6a22      	ldr	r2, [r4, #32]
 801298c:	4651      	mov	r1, sl
 801298e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8012992:	f7fd f97f 	bl	800fc94 <disk_write>
 8012996:	b920      	cbnz	r0, 80129a2 <f_write+0x212>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012998:	7d23      	ldrb	r3, [r4, #20]
 801299a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801299e:	7523      	strb	r3, [r4, #20]
 80129a0:	e74b      	b.n	801283a <f_write+0xaa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80129a2:	2301      	movs	r3, #1
 80129a4:	4698      	mov	r8, r3
 80129a6:	7563      	strb	r3, [r4, #21]
}
 80129a8:	4640      	mov	r0, r8
 80129aa:	b005      	add	sp, #20
 80129ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129b0:	3b01      	subs	r3, #1
 80129b2:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 80129b6:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
 80129ba:	4295      	cmp	r5, r2
			*d++ = *s++;
 80129bc:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 80129c0:	d1f9      	bne.n	80129b6 <f_write+0x226>
 80129c2:	e7af      	b.n	8012924 <f_write+0x194>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80129c4:	f04f 0807 	mov.w	r8, #7
 80129c8:	e6f6      	b.n	80127b8 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80129ca:	69e1      	ldr	r1, [r4, #28]
 80129cc:	4620      	mov	r0, r4
 80129ce:	f7fe f881 	bl	8010ad4 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80129d2:	2800      	cmp	r0, #0
 80129d4:	f47f af22 	bne.w	801281c <f_write+0x8c>
 80129d8:	e7d1      	b.n	801297e <f_write+0x1ee>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80129da:	4659      	mov	r1, fp
 80129dc:	4620      	mov	r0, r4
 80129de:	f7fe f879 	bl	8010ad4 <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80129e2:	2800      	cmp	r0, #0
 80129e4:	f47f af1a 	bne.w	801281c <f_write+0x8c>
 80129e8:	e7c9      	b.n	801297e <f_write+0x1ee>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80129ea:	2301      	movs	r3, #1
 80129ec:	4651      	mov	r1, sl
 80129ee:	f899 0001 	ldrb.w	r0, [r9, #1]
 80129f2:	9202      	str	r2, [sp, #8]
 80129f4:	f7fd f940 	bl	800fc78 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80129f8:	2800      	cmp	r0, #0
 80129fa:	d1d2      	bne.n	80129a2 <f_write+0x212>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80129fc:	69a3      	ldr	r3, [r4, #24]
 80129fe:	9a02      	ldr	r2, [sp, #8]
 8012a00:	e7a3      	b.n	801294a <f_write+0x1ba>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012a02:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 8012a06:	1c42      	adds	r2, r0, #1
 8012a08:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012a0a:	ebaa 0202 	sub.w	r2, sl, r2
 8012a0e:	2a02      	cmp	r2, #2
 8012a10:	d90d      	bls.n	8012a2e <f_write+0x29e>
 8012a12:	4652      	mov	r2, sl
 8012a14:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 8012a18:	f851 0b04 	ldr.w	r0, [r1], #4
 8012a1c:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 8012a20:	4562      	cmp	r2, ip
 8012a22:	d1f9      	bne.n	8012a18 <f_write+0x288>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012a24:	7d22      	ldrb	r2, [r4, #20]
 8012a26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012a2a:	7522      	strb	r2, [r4, #20]
 8012a2c:	e730      	b.n	8012890 <f_write+0x100>
 8012a2e:	f104 022f 	add.w	r2, r4, #47	; 0x2f
 8012a32:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
 8012a36:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 8012a3a:	458c      	cmp	ip, r1
			*d++ = *s++;
 8012a3c:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8012a40:	d1f9      	bne.n	8012a36 <f_write+0x2a6>
 8012a42:	e7ef      	b.n	8012a24 <f_write+0x294>

08012a44 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012a44:	b158      	cbz	r0, 8012a5e <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012a46:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012a48:	6803      	ldr	r3, [r0, #0]
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	b12b      	cbz	r3, 8012a5a <f_close+0x16>
 8012a4e:	781a      	ldrb	r2, [r3, #0]
 8012a50:	b11a      	cbz	r2, 8012a5a <f_close+0x16>
 8012a52:	8881      	ldrh	r1, [r0, #4]
 8012a54:	88da      	ldrh	r2, [r3, #6]
 8012a56:	4291      	cmp	r1, r2
 8012a58:	d003      	beq.n	8012a62 <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8012a5a:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8012a5c:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8012a5e:	2009      	movs	r0, #9
}
 8012a60:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012a62:	7858      	ldrb	r0, [r3, #1]
 8012a64:	f7fd f8ec 	bl	800fc40 <disk_status>
 8012a68:	07c1      	lsls	r1, r0, #31
 8012a6a:	d4f6      	bmi.n	8012a5a <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012a6c:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012a6e:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012a70:	065a      	lsls	r2, r3, #25
 8012a72:	d53c      	bpl.n	8012aee <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012a74:	061b      	lsls	r3, r3, #24
 8012a76:	d45d      	bmi.n	8012b34 <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
 8012a78:	f7fc fff8 	bl	800fa6c <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8012a7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012a7e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
 8012a80:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012a82:	4299      	cmp	r1, r3
 8012a84:	d004      	beq.n	8012a90 <f_close+0x4c>
 8012a86:	4628      	mov	r0, r5
 8012a88:	f7fd faa4 	bl	800ffd4 <move_window.part.0>
				if (res == FR_OK) {
 8012a8c:	2800      	cmp	r0, #0
 8012a8e:	d1e5      	bne.n	8012a5c <f_close+0x18>
					dir = fp->dir_ptr;
 8012a90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012a92:	7ad3      	ldrb	r3, [r2, #11]
 8012a94:	f043 0320 	orr.w	r3, r3, #32
 8012a98:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012a9a:	68a3      	ldr	r3, [r4, #8]
 8012a9c:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012a9e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8012aa2:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
 8012aa4:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 8012aa6:	7809      	ldrb	r1, [r1, #0]
 8012aa8:	2903      	cmp	r1, #3
 8012aaa:	d103      	bne.n	8012ab4 <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012aac:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8012aae:	7513      	strb	r3, [r2, #20]
 8012ab0:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 8012ab2:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012ab4:	68e3      	ldr	r3, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012ab6:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8012ab8:	7596      	strb	r6, [r2, #22]
 8012aba:	0a19      	lsrs	r1, r3, #8
 8012abc:	7713      	strb	r3, [r2, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8012abe:	7751      	strb	r1, [r2, #29]
 8012ac0:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8012ac2:	0e1b      	lsrs	r3, r3, #24
 8012ac4:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
 8012ac6:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 8012ac8:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8012aca:	75d3      	strb	r3, [r2, #23]
 8012acc:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8012ace:	0e36      	lsrs	r6, r6, #24
 8012ad0:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 8012ad2:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 8012ad4:	7656      	strb	r6, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 8012ad6:	8253      	strh	r3, [r2, #18]
					fs->wflag = 1;
 8012ad8:	2301      	movs	r3, #1
 8012ada:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012adc:	f7fd ff8a 	bl	80109f4 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012ae0:	7d23      	ldrb	r3, [r4, #20]
 8012ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012ae6:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 8012ae8:	2800      	cmp	r0, #0
 8012aea:	d1b7      	bne.n	8012a5c <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012aec:	6825      	ldr	r5, [r4, #0]
 8012aee:	2d00      	cmp	r5, #0
 8012af0:	d0b3      	beq.n	8012a5a <f_close+0x16>
 8012af2:	782b      	ldrb	r3, [r5, #0]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d0b0      	beq.n	8012a5a <f_close+0x16>
 8012af8:	88a2      	ldrh	r2, [r4, #4]
 8012afa:	88eb      	ldrh	r3, [r5, #6]
 8012afc:	429a      	cmp	r2, r3
 8012afe:	d1ac      	bne.n	8012a5a <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012b00:	7868      	ldrb	r0, [r5, #1]
 8012b02:	f7fd f89d 	bl	800fc40 <disk_status>
 8012b06:	f010 0001 	ands.w	r0, r0, #1
 8012b0a:	d1a6      	bne.n	8012a5a <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012b0c:	6923      	ldr	r3, [r4, #16]
 8012b0e:	3b01      	subs	r3, #1
 8012b10:	2b01      	cmp	r3, #1
 8012b12:	d81c      	bhi.n	8012b4e <f_close+0x10a>
		n = Files[i].ctr;
 8012b14:	4912      	ldr	r1, [pc, #72]	; (8012b60 <f_close+0x11c>)
 8012b16:	011d      	lsls	r5, r3, #4
 8012b18:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 8012b1c:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8012b1e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8012b22:	d016      	beq.n	8012b52 <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
 8012b24:	b1b2      	cbz	r2, 8012b54 <f_close+0x110>
 8012b26:	3a01      	subs	r2, #1
 8012b28:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 8012b2a:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012b2c:	b192      	cbz	r2, 8012b54 <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
 8012b2e:	2300      	movs	r3, #0
 8012b30:	6023      	str	r3, [r4, #0]
}
 8012b32:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012b34:	2301      	movs	r3, #1
 8012b36:	6a22      	ldr	r2, [r4, #32]
 8012b38:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012b3c:	7868      	ldrb	r0, [r5, #1]
 8012b3e:	f7fd f8a9 	bl	800fc94 <disk_write>
 8012b42:	b950      	cbnz	r0, 8012b5a <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012b44:	7d23      	ldrb	r3, [r4, #20]
 8012b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b4a:	7523      	strb	r3, [r4, #20]
 8012b4c:	e794      	b.n	8012a78 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8012b4e:	2002      	movs	r0, #2
}
 8012b50:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 8012b52:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012b54:	2300      	movs	r3, #0
 8012b56:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 8012b58:	e7e9      	b.n	8012b2e <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012b5a:	2001      	movs	r0, #1
}
 8012b5c:	bd70      	pop	{r4, r5, r6, pc}
 8012b5e:	bf00      	nop
 8012b60:	20019b3c 	.word	0x20019b3c

08012b64 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8012b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012b66:	b150      	cbz	r0, 8012b7e <f_findnext+0x1a>
 8012b68:	4605      	mov	r5, r0
 8012b6a:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8012b6c:	4c3a      	ldr	r4, [pc, #232]	; (8012c58 <f_findnext+0xf4>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012b6e:	682b      	ldr	r3, [r5, #0]
 8012b70:	b12b      	cbz	r3, 8012b7e <f_findnext+0x1a>
 8012b72:	781a      	ldrb	r2, [r3, #0]
 8012b74:	b11a      	cbz	r2, 8012b7e <f_findnext+0x1a>
 8012b76:	88a9      	ldrh	r1, [r5, #4]
 8012b78:	88da      	ldrh	r2, [r3, #6]
 8012b7a:	4291      	cmp	r1, r2
 8012b7c:	d002      	beq.n	8012b84 <f_findnext+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8012b7e:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 8012b80:	4638      	mov	r0, r7
 8012b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012b84:	7858      	ldrb	r0, [r3, #1]
 8012b86:	f7fd f85b 	bl	800fc40 <disk_status>
 8012b8a:	f010 0101 	ands.w	r1, r0, #1
 8012b8e:	d1f6      	bne.n	8012b7e <f_findnext+0x1a>
		if (!fno) {
 8012b90:	2e00      	cmp	r6, #0
 8012b92:	d058      	beq.n	8012c46 <f_findnext+0xe2>
			res = dir_read(dp, 0);			/* Read an item */
 8012b94:	4628      	mov	r0, r5
 8012b96:	f7fd fd0f 	bl	80105b8 <dir_read>
			if (res == FR_OK) {				/* A valid entry is found */
 8012b9a:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 8012b9e:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
 8012ba0:	d1ee      	bne.n	8012b80 <f_findnext+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
 8012ba2:	4631      	mov	r1, r6
 8012ba4:	4628      	mov	r0, r5
 8012ba6:	f7fd f955 	bl	800fe54 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8012baa:	4628      	mov	r0, r5
 8012bac:	f7fd fcbe 	bl	801052c <dir_next.constprop.0>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8012bb0:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
 8012bb4:	d14d      	bne.n	8012c52 <f_findnext+0xee>
 8012bb6:	7db3      	ldrb	r3, [r6, #22]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d0e1      	beq.n	8012b80 <f_findnext+0x1c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8012bbc:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
 8012bc0:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
 8012bc4:	e00f      	b.n	8012be6 <f_findnext+0x82>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8012bc6:	3a20      	subs	r2, #32
 8012bc8:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8012bca:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8012bce:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8012bd2:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8012bd4:	f1be 0f19 	cmp.w	lr, #25
 8012bd8:	d817      	bhi.n	8012c0a <f_findnext+0xa6>
 8012bda:	3b20      	subs	r3, #32
 8012bdc:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 8012bde:	4293      	cmp	r3, r2
 8012be0:	d1c5      	bne.n	8012b6e <f_findnext+0xa>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d0cc      	beq.n	8012b80 <f_findnext+0x1c>
 8012be6:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8012be8:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8012bec:	2b3f      	cmp	r3, #63	; 0x3f
 8012bee:	d012      	beq.n	8012c16 <f_findnext+0xb2>
 8012bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8012bf2:	d010      	beq.n	8012c16 <f_findnext+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8012bf4:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8012bf8:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8012bfa:	2819      	cmp	r0, #25
 8012bfc:	d9e3      	bls.n	8012bc6 <f_findnext+0x62>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8012bfe:	2a7f      	cmp	r2, #127	; 0x7f
 8012c00:	d9e3      	bls.n	8012bca <f_findnext+0x66>
 8012c02:	4423      	add	r3, r4
 8012c04:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 8012c08:	e7df      	b.n	8012bca <f_findnext+0x66>
 8012c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8012c0c:	d9e7      	bls.n	8012bde <f_findnext+0x7a>
 8012c0e:	4420      	add	r0, r4
 8012c10:	f810 3c80 	ldrb.w	r3, [r0, #-128]
 8012c14:	e7e3      	b.n	8012bde <f_findnext+0x7a>
 8012c16:	4694      	mov	ip, r2
				nm = nx = 0;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	f81c eb01 	ldrb.w	lr, [ip], #1
 8012c1e:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 8012c20:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 8012c24:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
 8012c26:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
 8012c2a:	bf0c      	ite	eq
 8012c2c:	3201      	addeq	r2, #1
 8012c2e:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 8012c30:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 8012c34:	d0f4      	beq.n	8012c20 <f_findnext+0xbc>
 8012c36:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
 8012c3a:	d0f1      	beq.n	8012c20 <f_findnext+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8012c3c:	f7fd f894 	bl	800fd68 <pattern_matching>
 8012c40:	2800      	cmp	r0, #0
 8012c42:	d094      	beq.n	8012b6e <f_findnext+0xa>
 8012c44:	e79c      	b.n	8012b80 <f_findnext+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8012c46:	4631      	mov	r1, r6
 8012c48:	4628      	mov	r0, r5
}
 8012c4a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8012c4e:	f7fe b811 	b.w	8010c74 <dir_sdi>
 8012c52:	4607      	mov	r7, r0
 8012c54:	e794      	b.n	8012b80 <f_findnext+0x1c>
 8012c56:	bf00      	nop
 8012c58:	0801c454 	.word	0x0801c454

08012c5c <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8012c5c:	b570      	push	{r4, r5, r6, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	4615      	mov	r5, r2
 8012c62:	4604      	mov	r4, r0
 8012c64:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 8012c66:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
 8012c68:	2200      	movs	r2, #0
 8012c6a:	a901      	add	r1, sp, #4
 8012c6c:	4668      	mov	r0, sp
 8012c6e:	9500      	str	r5, [sp, #0]
 8012c70:	f7fd f9ea 	bl	8010048 <find_volume>
	if (res == FR_OK) {
 8012c74:	b118      	cbz	r0, 8012c7e <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012c76:	2300      	movs	r3, #0
 8012c78:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 8012c7a:	b002      	add	sp, #8
 8012c7c:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8012c7e:	e9dd 1300 	ldrd	r1, r3, [sp]
 8012c82:	4620      	mov	r0, r4
		obj->fs = fs;
 8012c84:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8012c86:	f7fe fa57 	bl	8011138 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8012c8a:	bb08      	cbnz	r0, 8012cd0 <f_findfirst+0x74>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8012c8c:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	db25      	blt.n	8012ce0 <f_findfirst+0x84>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8012c94:	79a3      	ldrb	r3, [r4, #6]
 8012c96:	06db      	lsls	r3, r3, #27
 8012c98:	d520      	bpl.n	8012cdc <f_findfirst+0x80>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8012c9a:	9b01      	ldr	r3, [sp, #4]
 8012c9c:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 8012c9e:	7818      	ldrb	r0, [r3, #0]
	cl = ld_word(dir + DIR_FstClusLO);
 8012ca0:	8b4a      	ldrh	r2, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8012ca2:	2803      	cmp	r0, #3
 8012ca4:	d102      	bne.n	8012cac <f_findfirst+0x50>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012ca6:	8a89      	ldrh	r1, [r1, #20]
 8012ca8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8012cac:	60a2      	str	r2, [r4, #8]
				obj->id = fs->id;
 8012cae:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012cb0:	2100      	movs	r1, #0
 8012cb2:	4620      	mov	r0, r4
				obj->id = fs->id;
 8012cb4:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8012cb6:	f7fd ffdd 	bl	8010c74 <dir_sdi>
				if (res == FR_OK) {
 8012cba:	b948      	cbnz	r0, 8012cd0 <f_findfirst+0x74>
					if (obj->sclust) {
 8012cbc:	68a3      	ldr	r3, [r4, #8]
 8012cbe:	b98b      	cbnz	r3, 8012ce4 <f_findfirst+0x88>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8012cc0:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
 8012cc2:	4631      	mov	r1, r6
 8012cc4:	4620      	mov	r0, r4
}
 8012cc6:	b002      	add	sp, #8
 8012cc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 8012ccc:	f7ff bf4a 	b.w	8012b64 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012cd0:	2804      	cmp	r0, #4
 8012cd2:	d1d0      	bne.n	8012c76 <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012cd4:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8012cd6:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8012cd8:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
 8012cda:	e7ce      	b.n	8012c7a <f_findfirst+0x1e>
					res = FR_NO_PATH;
 8012cdc:	2005      	movs	r0, #5
 8012cde:	e7ca      	b.n	8012c76 <f_findfirst+0x1a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8012ce0:	9b01      	ldr	r3, [sp, #4]
 8012ce2:	e7e4      	b.n	8012cae <f_findfirst+0x52>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8012ce4:	4601      	mov	r1, r0
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	f7fc ffee 	bl	800fcc8 <inc_lock>
 8012cec:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8012cee:	2800      	cmp	r0, #0
 8012cf0:	d1e7      	bne.n	8012cc2 <f_findfirst+0x66>
 8012cf2:	2012      	movs	r0, #18
 8012cf4:	e7bf      	b.n	8012c76 <f_findfirst+0x1a>
 8012cf6:	bf00      	nop

08012cf8 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8012cf8:	4b10      	ldr	r3, [pc, #64]	; (8012d3c <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012cfa:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8012cfc:	7a5c      	ldrb	r4, [r3, #9]
 8012cfe:	b9cc      	cbnz	r4, 8012d34 <FATFS_LinkDriver+0x3c>
 8012d00:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8012d02:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8012d06:	7a5c      	ldrb	r4, [r3, #9]
 8012d08:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8012d0a:	7a5c      	ldrb	r4, [r3, #9]
 8012d0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012d10:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8012d12:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8012d14:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8012d16:	441c      	add	r4, r3
 8012d18:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 8012d1a:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8012d1c:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8012d1e:	b2e4      	uxtb	r4, r4
 8012d20:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8012d22:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8012d24:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8012d26:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8012d28:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 8012d2a:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8012d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8012d30:	708b      	strb	r3, [r1, #2]
}
 8012d32:	4770      	bx	lr
  uint8_t ret = 1;
 8012d34:	2001      	movs	r0, #1
}
 8012d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d3a:	4770      	bx	lr
 8012d3c:	20019d60 	.word	0x20019d60

08012d40 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012d40:	287f      	cmp	r0, #127	; 0x7f
 8012d42:	d912      	bls.n	8012d6a <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012d44:	b971      	cbnz	r1, 8012d64 <ff_convert+0x24>
 8012d46:	4b0c      	ldr	r3, [pc, #48]	; (8012d78 <ff_convert+0x38>)
 8012d48:	e001      	b.n	8012d4e <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012d4a:	2980      	cmp	r1, #128	; 0x80
 8012d4c:	d00c      	beq.n	8012d68 <ff_convert+0x28>
				if (chr == Tbl[c]) break;
 8012d4e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8012d52:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 8012d56:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
 8012d58:	4282      	cmp	r2, r0
 8012d5a:	d1f6      	bne.n	8012d4a <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 8012d5c:	f10c 0080 	add.w	r0, ip, #128	; 0x80
 8012d60:	b280      	uxth	r0, r0
 8012d62:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012d64:	28ff      	cmp	r0, #255	; 0xff
 8012d66:	d901      	bls.n	8012d6c <ff_convert+0x2c>
 8012d68:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8012d6a:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012d6c:	4b02      	ldr	r3, [pc, #8]	; (8012d78 <ff_convert+0x38>)
 8012d6e:	3880      	subs	r0, #128	; 0x80
 8012d70:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8012d74:	4770      	bx	lr
 8012d76:	bf00      	nop
 8012d78:	0801c4e4 	.word	0x0801c4e4

08012d7c <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012d7c:	4b22      	ldr	r3, [pc, #136]	; (8012e08 <ff_wtoupper+0x8c>)
 8012d7e:	4a23      	ldr	r2, [pc, #140]	; (8012e0c <ff_wtoupper+0x90>)
 8012d80:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8012d84:	bf28      	it	cs
 8012d86:	4613      	movcs	r3, r2
{
 8012d88:	b510      	push	{r4, lr}
 8012d8a:	3304      	adds	r3, #4
 8012d8c:	e001      	b.n	8012d92 <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8012d8e:	3304      	adds	r3, #4
 8012d90:	b1da      	cbz	r2, 8012dca <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
 8012d92:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 8012d96:	461c      	mov	r4, r3
 8012d98:	b1b1      	cbz	r1, 8012dc8 <ff_wtoupper+0x4c>
 8012d9a:	4288      	cmp	r0, r1
 8012d9c:	d314      	bcc.n	8012dc8 <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012d9e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 8012da2:	fa5f fc82 	uxtb.w	ip, r2
 8012da6:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 8012da8:	eb0c 0e01 	add.w	lr, ip, r1
 8012dac:	4570      	cmp	r0, lr
 8012dae:	daee      	bge.n	8012d8e <ff_wtoupper+0x12>
			switch (cmd) {
 8012db0:	2a08      	cmp	r2, #8
 8012db2:	d809      	bhi.n	8012dc8 <ff_wtoupper+0x4c>
 8012db4:	e8df f002 	tbb	[pc, r2]
 8012db8:	19161005 	.word	0x19161005
 8012dbc:	25221f1c 	.word	0x25221f1c
 8012dc0:	0c          	.byte	0x0c
 8012dc1:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012dc2:	1a41      	subs	r1, r0, r1
 8012dc4:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
 8012dc8:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
 8012dca:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 8012dce:	e7dc      	b.n	8012d8a <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012dd0:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 8012dd4:	b280      	uxth	r0, r0
}
 8012dd6:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012dd8:	1a43      	subs	r3, r0, r1
 8012dda:	f003 0301 	and.w	r3, r3, #1
 8012dde:	1ac0      	subs	r0, r0, r3
 8012de0:	b280      	uxth	r0, r0
}
 8012de2:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 8012de4:	3810      	subs	r0, #16
 8012de6:	b280      	uxth	r0, r0
}
 8012de8:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012dea:	3820      	subs	r0, #32
 8012dec:	b280      	uxth	r0, r0
}
 8012dee:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012df0:	3830      	subs	r0, #48	; 0x30
 8012df2:	b280      	uxth	r0, r0
}
 8012df4:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012df6:	381a      	subs	r0, #26
 8012df8:	b280      	uxth	r0, r0
}
 8012dfa:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 8012dfc:	3008      	adds	r0, #8
 8012dfe:	b280      	uxth	r0, r0
}
 8012e00:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 8012e02:	3850      	subs	r0, #80	; 0x50
 8012e04:	b280      	uxth	r0, r0
}
 8012e06:	bd10      	pop	{r4, pc}
 8012e08:	0801c5e4 	.word	0x0801c5e4
 8012e0c:	0801c7d8 	.word	0x0801c7d8

08012e10 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
 8012e10:	b570      	push	{r4, r5, r6, lr}
 8012e12:	460d      	mov	r5, r1
 8012e14:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 8012e16:	202c      	movs	r0, #44	; 0x2c
{
 8012e18:	ed2d 8b02 	vpush	{d8}
 8012e1c:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 8012e1e:	6811      	ldr	r1, [r2, #0]
{
 8012e20:	eeb0 8a40 	vmov.f32	s16, s0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 8012e24:	9101      	str	r1, [sp, #4]
 8012e26:	f002 facf 	bl	80153c8 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 8012e2a:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
 8012e2e:	9901      	ldr	r1, [sp, #4]
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 8012e30:	6030      	str	r0, [r6, #0]
 8012e32:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 8012e34:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
 8012e38:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 8012e3a:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 8012e3c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8012e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e44:	d550      	bpl.n	8012ee8 <tLinearDelay_initToPool+0xd8>
 8012e46:	edc0 7a08 	vstr	s15, [r0, #32]
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 8012e4a:	00a8      	lsls	r0, r5, #2
 8012e4c:	f002 fabc 	bl	80153c8 <mpool_alloc>

    d->gain = 1.0f;
 8012e50:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
 8012e54:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8012efc <tLinearDelay_initToPool+0xec>
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
 8012e58:	2300      	movs	r3, #0
    d->gain = 1.0f;
 8012e5a:	6062      	str	r2, [r4, #4]
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 8012e5c:	60a0      	str	r0, [r4, #8]
    d->lastIn = 0.0f;
 8012e5e:	ed84 0a04 	vstr	s0, [r4, #16]
    d->lastOut = 0.0f;
 8012e62:	ed84 0a03 	vstr	s0, [r4, #12]

void     tLinearDelay_setDelay (tLinearDelay* const dl, float delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8012e66:	edd4 0a08 	vldr	s1, [r4, #32]
    d->outPoint = 0;
 8012e6a:	e9c4 3305 	strd	r3, r3, [r4, #20]
    _tLinearDelay* d = *dl;
 8012e6e:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8012e70:	edd5 7a07 	vldr	s15, [r5, #28]
 8012e74:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 8012e78:	f002 f922 	bl	80150c0 <LEAF_clip>

    float outPointer = d->inPoint - d->delay;
 8012e7c:	edd5 7a05 	vldr	s15, [r5, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8012e80:	ed85 0a08 	vstr	s0, [r5, #32]
    float outPointer = d->inPoint - d->delay;
 8012e84:	eef8 7a67 	vcvt.f32.u32	s15, s15

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
 8012e88:	69ea      	ldr	r2, [r5, #28]
    float outPointer = d->inPoint - d->delay;
 8012e8a:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 8012e8e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e96:	d50a      	bpl.n	8012eae <tLinearDelay_initToPool+0x9e>
        outPointer += d->maxDelay; // modulo maximum length
 8012e98:	ee07 2a90 	vmov	s15, r2
 8012e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ea0:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 8012ea4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eac:	d4f8      	bmi.n	8012ea0 <tLinearDelay_initToPool+0x90>

    d->outPoint = (uint32_t) outPointer;   // integer part
 8012eae:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012eb2:	ee17 3a90 	vmov	r3, s15

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
 8012eb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 8012eba:	ee07 3a10 	vmov	s14, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8012ebe:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
 8012ec0:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
 8012ec4:	61ab      	str	r3, [r5, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 8012ec6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012eca:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 8012ece:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
 8012ed2:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 8012ed6:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8012eda:	d101      	bne.n	8012ee0 <tLinearDelay_initToPool+0xd0>
 8012edc:	2300      	movs	r3, #0
 8012ede:	61ab      	str	r3, [r5, #24]
}
 8012ee0:	b002      	add	sp, #8
 8012ee2:	ecbd 8b02 	vpop	{d8}
 8012ee6:	bd70      	pop	{r4, r5, r6, pc}
    else if (delay < 0.0f)  d->delay = 0.0f;
 8012ee8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012eec:	2300      	movs	r3, #0
 8012eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef2:	bf4c      	ite	mi
 8012ef4:	6203      	strmi	r3, [r0, #32]
    else                    d->delay = delay;
 8012ef6:	ed80 8a08 	vstrpl	s16, [r0, #32]
 8012efa:	e7a6      	b.n	8012e4a <tLinearDelay_initToPool+0x3a>
 8012efc:	00000000 	.word	0x00000000

08012f00 <tLinearDelay_tick>:
    _tLinearDelay* d = *dl;
 8012f00:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 8012f02:	edd3 7a01 	vldr	s15, [r3, #4]
 8012f06:	6959      	ldr	r1, [r3, #20]
 8012f08:	689a      	ldr	r2, [r3, #8]
 8012f0a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012f0e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8012f12:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 8012f16:	695a      	ldr	r2, [r3, #20]
 8012f18:	69d9      	ldr	r1, [r3, #28]
 8012f1a:	3201      	adds	r2, #1
 8012f1c:	428a      	cmp	r2, r1
 8012f1e:	615a      	str	r2, [r3, #20]
 8012f20:	d101      	bne.n	8012f26 <tLinearDelay_tick+0x26>
 8012f22:	2200      	movs	r2, #0
 8012f24:	615a      	str	r2, [r3, #20]
    uint32_t idx = (uint32_t) d->outPoint;
 8012f26:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
 8012f28:	6898      	ldr	r0, [r3, #8]
 8012f2a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8012f2e:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
 8012f32:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
 8012f34:	ed9c 0a00 	vldr	s0, [ip]
    if ((idx + 1) < d->maxDelay)
 8012f38:	4291      	cmp	r1, r2
    d->lastOut = d->buff[idx] * d->omAlpha;
 8012f3a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012f3e:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 8012f42:	d909      	bls.n	8012f58 <tLinearDelay_tick+0x58>
        d->lastOut += d->buff[idx+1] * d->alpha;
 8012f44:	ed9c 7a01 	vldr	s14, [ip, #4]
 8012f48:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 8012f4c:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 8012f4e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8012f52:	ed83 0a03 	vstr	s0, [r3, #12]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 8012f56:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 8012f58:	ed90 7a00 	vldr	s14, [r0]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 8012f5c:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
 8012f5e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 8012f62:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 8012f64:	eea7 0a27 	vfma.f32	s0, s14, s15
 8012f68:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop

08012f70 <tLinearDelay_setDelay>:
{
 8012f70:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 8012f72:	6804      	ldr	r4, [r0, #0]
{
 8012f74:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8012f78:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012ff0 <tLinearDelay_setDelay+0x80>
 8012f7c:	edd4 7a07 	vldr	s15, [r4, #28]
 8012f80:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 8012f84:	f002 f89c 	bl	80150c0 <LEAF_clip>
    float outPointer = d->inPoint - d->delay;
 8012f88:	edd4 7a05 	vldr	s15, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 8012f8c:	ed84 0a08 	vstr	s0, [r4, #32]
    float outPointer = d->inPoint - d->delay;
 8012f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
        outPointer += d->maxDelay; // modulo maximum length
 8012f94:	69e2      	ldr	r2, [r4, #28]
    float outPointer = d->inPoint - d->delay;
 8012f96:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 8012f9a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa2:	d50a      	bpl.n	8012fba <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
 8012fa4:	ee07 2a90 	vmov	s15, r2
 8012fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012fac:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 8012fb0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fb8:	d4f8      	bmi.n	8012fac <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
 8012fba:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8012fbe:	ee17 3a90 	vmov	r3, s15
    d->omAlpha = 1.0f - d->alpha;
 8012fc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 8012fc6:	ee07 3a10 	vmov	s14, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8012fca:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
 8012fcc:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
 8012fd0:	61a3      	str	r3, [r4, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 8012fd2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8012fd6:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 8012fda:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
 8012fde:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 8012fe2:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8012fe6:	d000      	beq.n	8012fea <tLinearDelay_setDelay+0x7a>
}
 8012fe8:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8012fea:	2300      	movs	r3, #0
 8012fec:	61a3      	str	r3, [r4, #24]
}
 8012fee:	bd10      	pop	{r4, pc}
 8012ff0:	00000000 	.word	0x00000000

08012ff4 <tOversampler_init>:
//============================================================================================================
// Oversampler
//============================================================================================================
// Latency is equal to the phase length (numTaps / ratio)
void tOversampler_init (tOversampler* const osr, int ratio, int extraQuality, LEAF* const leaf)
{
 8012ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ff8:	460d      	mov	r5, r1

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
    int offset = 0;
    if (extraQuality) offset = 6;
 8012ffa:	1e16      	subs	r6, r2, #0
    _tMempool* m = *mp;
 8012ffc:	6999      	ldr	r1, [r3, #24]
{
 8012ffe:	b082      	sub	sp, #8
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 8013000:	f1a5 0302 	sub.w	r3, r5, #2
    if (extraQuality) offset = 6;
 8013004:	bf0c      	ite	eq
 8013006:	2700      	moveq	r7, #0
 8013008:	2706      	movne	r7, #6
{
 801300a:	4680      	mov	r8, r0
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 801300c:	2b1e      	cmp	r3, #30
 801300e:	d93a      	bls.n	8013086 <tOversampler_init+0x92>
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
 8013010:	2d40      	cmp	r5, #64	; 0x40
 8013012:	d135      	bne.n	8013080 <tOversampler_init+0x8c>
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 8013014:	2028      	movs	r0, #40	; 0x28
 8013016:	9101      	str	r1, [sp, #4]
 8013018:	f002 f9d6 	bl	80153c8 <mpool_alloc>
        
        os->offset = offset;
        os->maxRatio = maxRatio;
        os->allowHighQuality = extraQuality;
        os->ratio = os->maxRatio;
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 801301c:	ee07 5a90 	vmov	s15, r5
        os->mempool = m;
 8013020:	9901      	ldr	r1, [sp, #4]
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 8013022:	4604      	mov	r4, r0
 8013024:	f8c8 0000 	str.w	r0, [r8]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 8013028:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        os->mempool = m;
 801302c:	6001      	str	r1, [r0, #0]
        os->ratio = os->maxRatio;
 801302e:	60c5      	str	r5, [r0, #12]
        os->offset = offset;
 8013030:	6107      	str	r7, [r0, #16]
        os->allowHighQuality = extraQuality;
 8013032:	e9c0 5601 	strd	r5, r6, [r0, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 8013036:	f007 fad9 	bl	801a5ec <log2f>
 801303a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 801303e:	4a16      	ldr	r2, [pc, #88]	; (8013098 <tOversampler_init+0xa4>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8013040:	9901      	ldr	r1, [sp, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 8013042:	ee17 3a90 	vmov	r3, s15
 8013046:	3b01      	subs	r3, #1
 8013048:	443b      	add	r3, r7
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 801304a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801304e:	edd2 7a00 	vldr	s15, [r2]
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 8013052:	4a12      	ldr	r2, [pc, #72]	; (801309c <tOversampler_init+0xa8>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 8013054:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013058:	ee17 0a90 	vmov	r0, s15
 801305c:	edc4 7a08 	vstr	s15, [r4, #32]
        os->phaseLength = os->numTaps / os->ratio;
 8013060:	fb90 f5f5 	sdiv	r5, r0, r5
 8013064:	6265      	str	r5, [r4, #36]	; 0x24
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8013066:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 8013068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801306c:	6163      	str	r3, [r4, #20]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 801306e:	f002 f9ab 	bl	80153c8 <mpool_alloc>
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8013072:	6a23      	ldr	r3, [r4, #32]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8013074:	61a0      	str	r0, [r4, #24]
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8013076:	9901      	ldr	r1, [sp, #4]
 8013078:	00d8      	lsls	r0, r3, #3
 801307a:	f002 f9a5 	bl	80153c8 <mpool_alloc>
 801307e:	61e0      	str	r0, [r4, #28]
}
 8013080:	b002      	add	sp, #8
 8013082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 8013086:	4a06      	ldr	r2, [pc, #24]	; (80130a0 <tOversampler_init+0xac>)
 8013088:	fa22 f303 	lsr.w	r3, r2, r3
 801308c:	07db      	lsls	r3, r3, #31
 801308e:	d4c1      	bmi.n	8013014 <tOversampler_init+0x20>
}
 8013090:	b002      	add	sp, #8
 8013092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013096:	bf00      	nop
 8013098:	08025f14 	.word	0x08025f14
 801309c:	200000a8 	.word	0x200000a8
 80130a0:	40004045 	.word	0x40004045

080130a4 <tOversampler_upsample>:
#ifdef ITCMRAM
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_upsample(tOversampler* const osr, float input, float* output)
#else
void tOversampler_upsample(tOversampler* const osr, float input, float* output)
#endif
{
 80130a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tOversampler* os = *osr;
 80130a8:	6807      	ldr	r7, [r0, #0]
    
    if (os->ratio == 1)
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	2b01      	cmp	r3, #1
 80130ae:	d05b      	beq.n	8013168 <tOversampler_upsample+0xc4>
    {
        output[0] = input;
        return;
    }
    
    float *pState = os->upState;                 /* State pointer */
 80130b0:	69be      	ldr	r6, [r7, #24]
    float *pStateCur;
    float *ptr1;                               /* Temporary pointer for state buffer */
    float *ptr2;                               /* Temporary pointer for coefficient buffer */
    float sum0;                                /* Accumulators */
    uint32_t i, tapCnt;                    /* Loop counters */
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 80130b2:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 80130b4:	f8d7 8014 	ldr.w	r8, [r7, #20]
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
 80130b8:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 80130bc:	ed03 0a01 	vstr	s0, [r3, #-4]
    
    /* Address modifier index of coefficient buffer */
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
 80130c0:	68fc      	ldr	r4, [r7, #12]
 80130c2:	46a1      	mov	r9, r4
    
    while (i > 0U)
 80130c4:	b3ac      	cbz	r4, 8013132 <tOversampler_upsample+0x8e>
    j = 1U;
 80130c6:	f04f 0e01 	mov.w	lr, #1
         Repeat until we've computed numTaps-(4*os->L) coefficients. */
        
        /* Initialize tapCnt with number of samples */
        tapCnt = phaseLen;
        
        while (tapCnt > 0U)
 80130ca:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8013170 <tOversampler_upsample+0xcc>
        ptr2 = pCoeffs + (os->ratio - j);
 80130ce:	eba4 030e 	sub.w	r3, r4, lr
 80130d2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
 80130d6:	b325      	cbz	r5, 8013122 <tOversampler_upsample+0x7e>
 80130d8:	2c01      	cmp	r4, #1
            sum0 += *ptr1++ * *ptr2;
            
            /* Upsampling is done by stuffing L-1 zeros between each sample.
             * So instead of multiplying zeros with coefficients,
             * Increment the coefficient pointer by interpolation factor times. */
            ptr2 += os->ratio;
 80130da:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80130de:	d135      	bne.n	801314c <tOversampler_upsample+0xa8>
 80130e0:	462a      	mov	r2, r5
        ptr1 = pState;
 80130e2:	4630      	mov	r0, r6
        sum0 = 0.0f;
 80130e4:	eddf 7a22 	vldr	s15, [pc, #136]	; 8013170 <tOversampler_upsample+0xcc>
            sum0 += *ptr1++ * *ptr2;
 80130e8:	edd3 6a00 	vldr	s13, [r3]
        while (tapCnt > 0U)
 80130ec:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 80130ee:	ecb0 7a01 	vldmia	r0!, {s14}
            ptr2 += os->ratio;
 80130f2:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
 80130f4:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 80130f8:	d1f6      	bne.n	80130e8 <tOversampler_upsample+0x44>
            /* Decrement loop counter */
            tapCnt--;
        }
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
 80130fa:	ee07 4a10 	vmov	s14, r4
    while (i > 0U)
 80130fe:	45f1      	cmp	r9, lr
        
        /* Increment the address modifier index of coefficient buffer */
        j++;
 8013100:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
 8013104:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013108:	ee67 7a27 	vmul.f32	s15, s14, s15
 801310c:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 8013110:	d00f      	beq.n	8013132 <tOversampler_upsample+0x8e>
        ptr2 = pCoeffs + (os->ratio - j);
 8013112:	68fc      	ldr	r4, [r7, #12]
 8013114:	469e      	mov	lr, r3
 8013116:	eba4 030e 	sub.w	r3, r4, lr
 801311a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
 801311e:	2d00      	cmp	r5, #0
 8013120:	d1da      	bne.n	80130d8 <tOversampler_upsample+0x34>
 8013122:	eef0 7a46 	vmov.f32	s15, s12
    while (i > 0U)
 8013126:	45f1      	cmp	r9, lr
        j++;
 8013128:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
 801312c:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 8013130:	d1ef      	bne.n	8013112 <tOversampler_upsample+0x6e>
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 8013132:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
 8013134:	f106 0604 	add.w	r6, r6, #4
    pStateCur = os->upState;
 8013138:	69ba      	ldr	r2, [r7, #24]
    while (tapCnt > 0U)
 801313a:	d005      	beq.n	8013148 <tOversampler_upsample+0xa4>
    {
        *pStateCur++ = *pState++;
 801313c:	f856 1b04 	ldr.w	r1, [r6], #4
    while (tapCnt > 0U)
 8013140:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 8013142:	f842 1b04 	str.w	r1, [r2], #4
    while (tapCnt > 0U)
 8013146:	d1f9      	bne.n	801313c <tOversampler_upsample+0x98>
        
        /* Decrement loop counter */
        tapCnt--;
    }
}
 8013148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sum0 = 0.0f;
 801314c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013170 <tOversampler_upsample+0xcc>
            ptr2 += os->ratio;
 8013150:	462a      	mov	r2, r5
        ptr1 = pState;
 8013152:	4630      	mov	r0, r6
            sum0 += *ptr1++ * *ptr2;
 8013154:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
 8013158:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 801315a:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
 801315e:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
 8013160:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 8013164:	d1f6      	bne.n	8013154 <tOversampler_upsample+0xb0>
 8013166:	e7c8      	b.n	80130fa <tOversampler_upsample+0x56>
        output[0] = input;
 8013168:	ed81 0a00 	vstr	s0, [r1]
}
 801316c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013170:	00000000 	.word	0x00000000

08013174 <tOversampler_downsample>:
#ifdef ITCMRAM
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_downsample(tOversampler *const osr, float* input)
#else
float tOversampler_downsample(tOversampler *const osr, float* input)
#endif
{
 8013174:	b470      	push	{r4, r5, r6}
    _tOversampler* os = *osr;
 8013176:	6806      	ldr	r6, [r0, #0]
    
    if (os->ratio == 1) return input[0];
 8013178:	68f3      	ldr	r3, [r6, #12]
 801317a:	2b01      	cmp	r3, #1
 801317c:	d029      	beq.n	80131d2 <tOversampler_downsample+0x5e>
    float *pStateCur;                          /* Points to the current sample of the state */
    float *px0;                                /* Temporary pointer for state buffer */
    float *pb;                                 /* Temporary pointer for coefficient buffer */
    float x0, c0;                              /* Temporary variables to hold state and coefficient values */
    float acc0;                                /* Accumulator */
    uint32_t numTaps = os->numTaps;                 /* Number of filter coefficients in the filter */
 801317e:	6a32      	ldr	r2, [r6, #32]
    uint32_t i, tapCnt;
    float output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
 8013180:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    float *pState = os->downState;                 /* State pointer */
 8013184:	69f4      	ldr	r4, [r6, #28]
    pStateCur = os->downState + (numTaps - 1U);
 8013186:	4410      	add	r0, r2
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 8013188:	6975      	ldr	r5, [r6, #20]
    pStateCur = os->downState + (numTaps - 1U);
 801318a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
    
    do
    {
        *pStateCur++ = *input++;
 801318e:	f851 cb04 	ldr.w	ip, [r1], #4
        
    } while (--i);
 8013192:	3b01      	subs	r3, #1
        *pStateCur++ = *input++;
 8013194:	f840 cb04 	str.w	ip, [r0], #4
    } while (--i);
 8013198:	d1f9      	bne.n	801318e <tOversampler_downsample+0x1a>
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
    
    while (tapCnt > 0U)
 801319a:	b1f2      	cbz	r2, 80131da <tOversampler_downsample+0x66>
 801319c:	4613      	mov	r3, r2
    acc0 = 0.0f;
 801319e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80131ec <tOversampler_downsample+0x78>
    px0 = pState;
 80131a2:	4621      	mov	r1, r4
        
        /* Fetch 1 state variable */
        x0 = *px0++;
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
 80131a4:	ecb5 7a01 	vldmia	r5!, {s14}
    while (tapCnt > 0U)
 80131a8:	3b01      	subs	r3, #1
        acc0 += x0 * c0;
 80131aa:	ecf1 7a01 	vldmia	r1!, {s15}
 80131ae:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
 80131b2:	d1f7      	bne.n	80131a4 <tOversampler_downsample+0x30>
        tapCnt--;
    }
    
    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + os->ratio;
 80131b4:	68f1      	ldr	r1, [r6, #12]
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 80131b6:	1e53      	subs	r3, r2, #1
    pStateCur = os->downState;
 80131b8:	69f0      	ldr	r0, [r6, #28]
    pState = pState + os->ratio;
 80131ba:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
 80131be:	d006      	beq.n	80131ce <tOversampler_downsample+0x5a>
 80131c0:	4602      	mov	r2, r0
    {
        *pStateCur++ = *pState++;
 80131c2:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
 80131c6:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 80131c8:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
 80131cc:	d1f9      	bne.n	80131c2 <tOversampler_downsample+0x4e>
        /* Decrement loop counter */
        tapCnt--;
    }
    
    return output;
}
 80131ce:	bc70      	pop	{r4, r5, r6}
 80131d0:	4770      	bx	lr
    if (os->ratio == 1) return input[0];
 80131d2:	ed91 0a00 	vldr	s0, [r1]
}
 80131d6:	bc70      	pop	{r4, r5, r6}
 80131d8:	4770      	bx	lr
    pState = pState + os->ratio;
 80131da:	68f1      	ldr	r1, [r6, #12]
    tapCnt = (numTaps - 1U);
 80131dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    pStateCur = os->downState;
 80131e0:	69f0      	ldr	r0, [r6, #28]
    acc0 = 0.0f;
 80131e2:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80131ec <tOversampler_downsample+0x78>
    pState = pState + os->ratio;
 80131e6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
 80131ea:	e7e9      	b.n	80131c0 <tOversampler_downsample+0x4c>
 80131ec:	00000000 	.word	0x00000000

080131f0 <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
 80131f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
 80131f2:	698f      	ldr	r7, [r1, #24]
{
 80131f4:	4606      	mov	r6, r0
 80131f6:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 80131f8:	2020      	movs	r0, #32
 80131fa:	4639      	mov	r1, r7
 80131fc:	f002 f8e4 	bl	80153c8 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
 8013200:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
 8013204:	4a10      	ldr	r2, [pc, #64]	; (8013248 <tCrusher_init+0x58>)
    c->op = 4;
 8013206:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8013208:	6030      	str	r0, [r6, #0]
 801320a:	4604      	mov	r4, r0
    c->op = 4;
 801320c:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
 801320e:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
 8013210:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
 8013212:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
 8013214:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8013216:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 8013218:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 801321a:	4629      	mov	r1, r5
 801321c:	f002 f8d4 	bl	80153c8 <mpool_alloc>
    s->invRatio = 1.0f;
 8013220:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
 8013224:	2200      	movs	r2, #0
    s->count = 0;
 8013226:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8013228:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 801322a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801324c <tCrusher_init+0x5c>
    s->mempool = m;
 801322e:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
 8013230:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
 8013232:	6082      	str	r2, [r0, #8]
    s->count = 0;
 8013234:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 8013236:	eddf 7a06 	vldr	s15, [pc, #24]	; 8013250 <tCrusher_init+0x60>
 801323a:	edd4 6a03 	vldr	s13, [r4, #12]
 801323e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013242:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8013246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013248:	3951b717 	.word	0x3951b717
 801324c:	3912ccf6 	.word	0x3912ccf6
 8013250:	3e99999a 	.word	0x3e99999a

08013254 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    float sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 8013254:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80132d0 <tCrusher_tick+0x7c>
 8013258:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 801325c:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
 801325e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
 8013262:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
 8013264:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
 8013268:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 801326c:	6960      	ldr	r0, [r4, #20]
 801326e:	05c0      	lsls	r0, r0, #23
 8013270:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013274:	f001 ff1e 	bl	80150b4 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 8013278:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 801327c:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
 8013280:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013284:	f001 ff1c 	bl	80150c0 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 8013288:	edd4 0a04 	vldr	s1, [r4, #16]
 801328c:	f001 ff00 	bl	8015090 <LEAF_round>
    _tSampleReducer* s = *sr;
 8013290:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
 8013292:	68da      	ldr	r2, [r3, #12]
 8013294:	edd3 7a01 	vldr	s15, [r3, #4]
 8013298:	ee07 2a10 	vmov	s14, r2
 801329c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80132a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80132a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132a8:	dc08      	bgt.n	80132bc <tCrusher_tick+0x68>
    s->count++;
 80132aa:	3201      	adds	r2, #1
    return s->hold;
 80132ac:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
 80132b0:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
 80132b2:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 80132b6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80132ba:	bd10      	pop	{r4, pc}
        s->hold = input;
 80132bc:	2201      	movs	r2, #1
 80132be:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
 80132c2:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
 80132c4:	edd4 7a06 	vldr	s15, [r4, #24]
}
 80132c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80132cc:	bd10      	pop	{r4, pc}
 80132ce:	bf00      	nop
 80132d0:	459c4000 	.word	0x459c4000

080132d4 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 80132d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->rnd = rnd;
}

void    tCrusher_setSamplingRatio (tCrusher* const cr, float ratio)
{
    _tCrusher* c = *cr;
 80132d8:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
 80132da:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 80132de:	eeb4 0a67 	vcmp.f32	s0, s15
 80132e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132e6:	d809      	bhi.n	80132fc <tCrusher_setSamplingRatio+0x28>
 80132e8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80132ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132f0:	db04      	blt.n	80132fc <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
 80132f2:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
 80132f6:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
 80132f8:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
 80132fc:	4770      	bx	lr
 80132fe:	bf00      	nop

08013300 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
 8013300:	b570      	push	{r4, r5, r6, lr}
 8013302:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
 8013306:	698d      	ldr	r5, [r1, #24]
{
 8013308:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 801330a:	206c      	movs	r0, #108	; 0x6c
 801330c:	4629      	mov	r1, r5
 801330e:	f002 f85b 	bl	80153c8 <mpool_alloc>
 8013312:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8013314:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 8013316:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
 801331a:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 801331c:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
 801331e:	ed93 8a00 	vldr	s16, [r3]
 8013322:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 8013326:	ee80 0a08 	vdiv.f32	s0, s0, s16
 801332a:	f007 f87d 	bl	801a428 <expf>
 801332e:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 8013332:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 8013336:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801333a:	f007 f875 	bl	801a428 <expf>
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
 801333e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
 8013342:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
 8013344:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
 8013348:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
 801334a:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
 801334c:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
 801334e:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
 8013350:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[0] = 0.0f, c->x_G[1] = 0.0f,
 8013354:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f, c->y_G[1] = 0.0f,
 8013356:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013358:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f, c->x_T[1] = 0.0f,
 801335a:	6363      	str	r3, [r4, #52]	; 0x34
 801335c:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f, c->y_T[1] = 0.0f;
 801335e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8013360:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
 8013362:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
 8013364:	4905      	ldr	r1, [pc, #20]	; (801337c <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
 8013366:	4b06      	ldr	r3, [pc, #24]	; (8013380 <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 8013368:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
 801336c:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
 801336e:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
 8013370:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
 8013372:	6223      	str	r3, [r4, #32]
}
 8013374:	ecbd 8b02 	vpop	{d8}
 8013378:	bd70      	pop	{r4, r5, r6, pc}
 801337a:	bf00      	nop
 801337c:	40400000 	.word	0x40400000
 8013380:	3e2aaaab 	.word	0x3e2aaaab

08013384 <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

float tCompressor_tick(tCompressor* const comp, float in)
{
 8013384:	b510      	push	{r4, lr}
 8013386:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
 801338a:	6804      	ldr	r4, [r0, #0]
{
 801338c:	eeb0 8a40 	vmov.f32	s16, s0
    
    float slope, overshoot;
    
    float in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
 8013390:	f001 fdfa 	bl	8014f88 <fastabsf>
 8013394:	f001 ffac 	bl	80152f0 <fasteratodb>
 8013398:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 801344c <tCompressor_tick+0xc8>
 801339c:	eef0 0a40 	vmov.f32	s1, s0
 80133a0:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8013450 <tCompressor_tick+0xcc>
 80133a4:	f001 fe8c 	bl	80150c0 <LEAF_clip>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
 80133a8:	ed94 7a03 	vldr	s14, [r4, #12]
    

    if (overshoot <= -(c->W))
 80133ac:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
 80133b0:	ee30 7a47 	vsub.f32	s14, s0, s14
    c->y_T[1] = c->y_T[0];
 80133b4:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
 80133b8:	eef1 7a46 	vneg.f32	s15, s12
    c->y_T[1] = c->y_T[0];
 80133bc:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
 80133c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80133c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133c8:	db23      	blt.n	8013412 <tCompressor_tick+0x8e>
    {
        out_db = in_db;
        c->isActive = 0;
 80133ca:	2300      	movs	r3, #0
 80133cc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801344c <tCompressor_tick+0xc8>
 80133d0:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
 80133d2:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
 80133d6:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 80133da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->x_T[0] = out_db - in_db;
 80133de:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
 80133e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 80133e6:	bf4c      	ite	mi
 80133e8:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 80133ec:	ed94 6a02 	vldrpl	s12, [r4, #8]
 80133f0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80133f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80133f8:	eee6 7a86 	vfma.f32	s15, s13, s12
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
 80133fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013400:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8013404:	f001 ffa8 	bl	8015358 <fasterdbtoa>
    return attenuation * in;
}
 8013408:	ee28 0a00 	vmul.f32	s0, s16, s0
 801340c:	ecbd 8b02 	vpop	{d8}
 8013410:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 8013412:	eeb4 6ac7 	vcmpe.f32	s12, s14
    slope = 1.0f - c->invR; // feed-forward topology;
 8013416:	edd4 5a07 	vldr	s11, [r4, #28]
 801341a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 801341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
 8013422:	ee77 7ae5 	vsub.f32	s15, s15, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 8013426:	dd0c      	ble.n	8013442 <tCompressor_tick+0xbe>
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 8013428:	edd4 5a08 	vldr	s11, [r4, #32]
        float squareit = (overshoot + c->W);
 801342c:	ee36 7a07 	vadd.f32	s14, s12, s14
        c->isActive = 1;
 8013430:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 8013432:	ee67 7aa5 	vmul.f32	s15, s15, s11
        c->isActive = 1;
 8013436:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 8013438:	ee67 7a87 	vmul.f32	s15, s15, s14
 801343c:	ee27 7a87 	vmul.f32	s14, s15, s14
    {
 8013440:	e7c7      	b.n	80133d2 <tCompressor_tick+0x4e>
        c->isActive = 1;
 8013442:	2301      	movs	r3, #1
        out_db = in_db + slope * overshoot;
 8013444:	ee27 7a87 	vmul.f32	s14, s15, s14
        c->isActive = 1;
 8013448:	6463      	str	r3, [r4, #68]	; 0x44
 801344a:	e7c2      	b.n	80133d2 <tCompressor_tick+0x4e>
 801344c:	00000000 	.word	0x00000000
 8013450:	c2b40000 	.word	0xc2b40000

08013454 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, LEAF* const leaf)
{
 8013454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013456:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
 801345a:	699e      	ldr	r6, [r3, #24]
{
 801345c:	4614      	mov	r4, r2
 801345e:	4607      	mov	r7, r0
 8013460:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8013462:	2068      	movs	r0, #104	; 0x68
 8013464:	4631      	mov	r1, r6
{
 8013466:	eef0 9a40 	vmov.f32	s19, s0
 801346a:	eeb0 9a60 	vmov.f32	s18, s1
 801346e:	eeb0 8a41 	vmov.f32	s16, s2
 8013472:	eef0 8a61 	vmov.f32	s17, s3
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8013476:	f001 ffa7 	bl	80153c8 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 801347a:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 801347e:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8013480:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
 8013482:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8013484:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8013488:	eddf 7a22 	vldr	s15, [pc, #136]	; 8013514 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
 801348c:	6873      	ldr	r3, [r6, #4]
    adsr->exp_buff = expBuffer;
 801348e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8013492:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8013494:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8013498:	ee26 6a27 	vmul.f32	s12, s12, s15
    adsr->exp_buff = expBuffer;
 801349c:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 801349e:	6084      	str	r4, [r0, #8]
    adsr->sampleRate = leaf->sampleRate;
 80134a0:	fe88 8a66 	vminnm.f32	s16, s16, s13
 80134a4:	edd3 5a00 	vldr	s11, [r3]
    adsr->whichStage = env_idle;
 80134a8:	2200      	movs	r2, #0
 80134aa:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8013518 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80134ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
    adsr->sampleRate = leaf->sampleRate;
 80134b2:	edc0 5a04 	vstr	s11, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80134b6:	fe89 0a81 	vmaxnm.f32	s0, s19, s2
 80134ba:	fec9 0a01 	vmaxnm.f32	s1, s18, s2
 80134be:	fec8 1a81 	vmaxnm.f32	s3, s17, s2

    adsr->baseLeakFactor = 1.0f;
 80134c2:	edc0 6a17 	vstr	s13, [r0, #92]	; 0x5c
    adsr->leakFactor = 1.0f;
 80134c6:	edc0 6a18 	vstr	s13, [r0, #96]	; 0x60
    adsr->sustain = sustain;
 80134ca:	fe88 8a01 	vmaxnm.f32	s16, s16, s2
    adsr->next = 0.0f;
 80134ce:	ed80 1a06 	vstr	s2, [r0, #24]
    adsr->whichStage = env_idle;
 80134d2:	6382      	str	r2, [r0, #56]	; 0x38
    adsr->attack = attack;
 80134d4:	ed80 0a07 	vstr	s0, [r0, #28]
    adsr->sustain = sustain;
 80134d8:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    adsr->decay = decay;
 80134dc:	edc0 0a08 	vstr	s1, [r0, #32]
    adsr->release = release;
 80134e0:	edc0 1a09 	vstr	s3, [r0, #36]	; 0x24
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80134e4:	eec7 5a80 	vdiv.f32	s11, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80134e8:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 80134ec:	ee87 6aa0 	vdiv.f32	s12, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80134f0:	eec7 6aa1 	vdiv.f32	s13, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 80134f4:	ee27 7a87 	vmul.f32	s14, s15, s14
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80134f8:	edc0 5a0a 	vstr	s11, [r0, #40]	; 0x28
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 80134fc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8013500:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8013504:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
    adsr->invSampleRate = leaf->invSampleRate;
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	6643      	str	r3, [r0, #100]	; 0x64
}
 801350c:	ecbd 8b04 	vpop	{d8-d9}
 8013510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013512:	bf00      	nop
 8013514:	4479ffff 	.word	0x4479ffff
 8013518:	00000000 	.word	0x00000000

0801351c <tADSRT_setAttack>:

void     tADSRT_setAttack(tADSRT* const adsrenv, float attack)
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
 801351c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8013520:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8013522:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
 8013526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
 801352a:	bf48      	it	mi
 801352c:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8013540 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8013530:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
 8013534:	ed83 0a07 	vstr	s0, [r3, #28]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8013538:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 801353c:	4770      	bx	lr
 801353e:	bf00      	nop
 8013540:	3c23d70a 	.word	0x3c23d70a

08013544 <tADSRT_setDecay>:

void     tADSRT_setDecay(tADSRT* const adsrenv, float decay)
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
 8013544:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8013548:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 801354a:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
 801354e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
 8013552:	bf48      	it	mi
 8013554:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8013568 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8013558:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
 801355c:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8013560:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8013564:	4770      	bx	lr
 8013566:	bf00      	nop
 8013568:	3c23d70a 	.word	0x3c23d70a

0801356c <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, float sustain)
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 801356c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
 8013570:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8013572:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801357a:	dd02      	ble.n	8013582 <tADSRT_setSustain+0x16>
 801357c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8013580:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 8013582:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013586:	2200      	movs	r2, #0
 8013588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801358c:	bf4c      	ite	mi
 801358e:	63da      	strmi	r2, [r3, #60]	; 0x3c
    else                     adsr->sustain = sustain;
 8013590:	ed83 0a0f 	vstrpl	s0, [r3, #60]	; 0x3c
}
 8013594:	4770      	bx	lr
 8013596:	bf00      	nop

08013598 <tADSRT_setRelease>:

void     tADSRT_setRelease(tADSRT* const adsrenv, float release)
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
 8013598:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 801359c:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 801359e:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
 80135a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
 80135a6:	bf48      	it	mi
 80135a8:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 80135bc <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80135ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
 80135b0:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80135b4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 80135b8:	4770      	bx	lr
 80135ba:	bf00      	nop
 80135bc:	3c23d70a 	.word	0x3c23d70a

080135c0 <tADSRT_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, float leakFactor)
{
 80135c0:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 80135c2:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 80135c4:	eddf 7a06 	vldr	s15, [pc, #24]	; 80135e0 <tADSRT_setLeakFactor+0x20>
 80135c8:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
    adsr->baseLeakFactor = leakFactor;
 80135cc:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 80135d0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80135d4:	f007 f8c8 	bl	801a768 <powf>
 80135d8:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 80135dc:	bd10      	pop	{r4, pc}
 80135de:	bf00      	nop
 80135e0:	472c4400 	.word	0x472c4400

080135e4 <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, float velocity)
{
    _tADSRT* adsr = *adsrenv;
 80135e4:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 80135e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80135e8:	b162      	cbz	r2, 8013604 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 80135ea:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
 80135ec:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
 80135ee:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 80135f0:	6598      	str	r0, [r3, #88]	; 0x58
        adsr->rampPeak = adsr->next;
 80135f2:	645a      	str	r2, [r3, #68]	; 0x44
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 80135f4:	2200      	movs	r2, #0
 80135f6:	6399      	str	r1, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 80135f8:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    adsr->attackPhase = 0;
 80135fc:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
 80135fe:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
 8013600:	655a      	str	r2, [r3, #84]	; 0x54
}
 8013602:	4770      	bx	lr
        adsr->whichStage = env_attack;
 8013604:	2101      	movs	r1, #1
 8013606:	e7f5      	b.n	80135f4 <tADSRT_on+0x10>

08013608 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 8013608:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 801360a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801360c:	b11a      	cbz	r2, 8013616 <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 801360e:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 8013610:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 8013612:	6399      	str	r1, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
 8013614:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
 8013616:	4770      	bx	lr

08013618 <tADSRT_tickNoInterp>:
    return adsr->next;
}

float   tADSRT_tickNoInterp(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 8013618:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 801361a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801361c:	3a01      	subs	r2, #1
 801361e:	2a04      	cmp	r2, #4
 8013620:	f200 80ba 	bhi.w	8013798 <tADSRT_tickNoInterp+0x180>
 8013624:	e8df f002 	tbb	[pc, r2]
 8013628:	58333c1b 	.word	0x58333c1b
 801362c:	03          	.byte	0x03
 801362d:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 801362e:	edd3 7a03 	vldr	s15, [r3, #12]
 8013632:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 8013636:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801363a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801363e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013642:	dd61      	ble.n	8013708 <tADSRT_tickNoInterp+0xf0>
            {
                adsr->whichStage = env_attack;
 8013644:	2201      	movs	r2, #1
                adsr->next = 0.0f;
 8013646:	ed9f 0a56 	vldr	s0, [pc, #344]	; 80137a0 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_attack;
 801364a:	639a      	str	r2, [r3, #56]	; 0x38
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 801364c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8013650:	ed83 0a06 	vstr	s0, [r3, #24]
 8013654:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013658:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
 801365c:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 801365e:	edd3 7a03 	vldr	s15, [r3, #12]
 8013662:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8013666:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801366a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801366e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013672:	dd57      	ble.n	8013724 <tADSRT_tickNoInterp+0x10c>
            {
                adsr->whichStage = env_decay;
 8013674:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
 8013676:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_decay;
 801367a:	639a      	str	r2, [r3, #56]	; 0x38
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 801367c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013680:	ed83 0a06 	vstr	s0, [r3, #24]
 8013684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013688:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            break;
 801368c:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->next = adsr->next * adsr->leakFactor;
 801368e:	ed93 0a06 	vldr	s0, [r3, #24]
 8013692:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8013696:	ee20 0a27 	vmul.f32	s0, s0, s15
 801369a:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
 801369e:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 80136a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80136a4:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80136a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80136ac:	eef4 6ac7 	vcmpe.f32	s13, s14
 80136b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136b4:	dd48      	ble.n	8013748 <tADSRT_tickNoInterp+0x130>
                adsr->next = adsr->gain * adsr->sustain;
 80136b6:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
 80136ba:	2203      	movs	r2, #3
                adsr->next = adsr->gain * adsr->sustain;
 80136bc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 80136c0:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 80136c2:	ee20 0a27 	vmul.f32	s0, s0, s15
            adsr->decayPhase += adsr->decayInc;
 80136c6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80136ca:	ed83 0a06 	vstr	s0, [r3, #24]
 80136ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80136d2:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 80136d6:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 80136d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80136dc:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80136e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80136e4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80136e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136ec:	dd46      	ble.n	801377c <tADSRT_tickNoInterp+0x164>
            {
                adsr->whichStage = env_idle;
 80136ee:	2200      	movs	r2, #0
                adsr->next = 0.0f;
 80136f0:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80137a0 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_idle;
 80136f4:	639a      	str	r2, [r3, #56]	; 0x38
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 80136f6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80136fa:	ed83 0a06 	vstr	s0, [r3, #24]
 80136fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013702:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
    }
    return adsr->next;
}
 8013706:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 8013708:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 801370c:	685a      	ldr	r2, [r3, #4]
 801370e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8013712:	ee17 1a10 	vmov	r1, s14
 8013716:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801371a:	ed92 0a00 	vldr	s0, [r2]
 801371e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013722:	e793      	b.n	801364c <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 8013724:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8013728:	685a      	ldr	r2, [r3, #4]
 801372a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801372e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8013732:	ee17 1a10 	vmov	r1, s14
 8013736:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801373a:	ed92 7a00 	vldr	s14, [r2]
 801373e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013742:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013746:	e799      	b.n	801367c <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 8013748:	eefc 5ae6 	vcvt.u32.f32	s11, s13
 801374c:	685a      	ldr	r2, [r3, #4]
 801374e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013752:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8013756:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 801375a:	ee15 1a90 	vmov	r1, s11
 801375e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8013762:	ee37 7a40 	vsub.f32	s14, s14, s0
 8013766:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801376a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801376e:	ed92 6a00 	vldr	s12, [r2]
 8013772:	eea6 0a07 	vfma.f32	s0, s12, s14
 8013776:	ee27 0a80 	vmul.f32	s0, s15, s0
 801377a:	e7a4      	b.n	80136c6 <tADSRT_tickNoInterp+0xae>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 801377c:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8013780:	685a      	ldr	r2, [r3, #4]
 8013782:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8013786:	ee17 1a10 	vmov	r1, s14
 801378a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801378e:	ed92 0a00 	vldr	s0, [r2]
 8013792:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013796:	e7ae      	b.n	80136f6 <tADSRT_tickNoInterp+0xde>
    return adsr->next;
 8013798:	ed93 0a06 	vldr	s0, [r3, #24]
 801379c:	4770      	bx	lr
 801379e:	bf00      	nop
 80137a0:	00000000 	.word	0x00000000

080137a4 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 80137a4:	b538      	push	{r3, r4, r5, lr}
 80137a6:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 80137aa:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 80137ac:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80137ae:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 80137b0:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80137b4:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 80137b6:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80137ba:	f001 fe05 	bl	80153c8 <mpool_alloc>
 80137be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80137c2:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80137f8 <tExpSmooth_init+0x54>
 80137c6:	6028      	str	r0, [r5, #0]
 80137c8:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
 80137cc:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
 80137d0:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 80137d4:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 80137d6:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 80137da:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 80137de:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 80137e2:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 80137e6:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 80137ea:	6863      	ldr	r3, [r4, #4]
 80137ec:	685b      	ldr	r3, [r3, #4]
 80137ee:	6183      	str	r3, [r0, #24]
}
 80137f0:	ecbd 8b02 	vpop	{d8}
 80137f4:	bd38      	pop	{r3, r4, r5, pc}
 80137f6:	bf00      	nop
 80137f8:	00000000 	.word	0x00000000

080137fc <tExpSmooth_setDest>:
    smooth->oneminusfactor = 1.0f - factor;
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
 80137fc:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 80137fe:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8013802:	4770      	bx	lr

08013804 <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 8013804:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 8013806:	edd3 6a04 	vldr	s13, [r3, #16]
 801380a:	ed93 0a03 	vldr	s0, [r3, #12]
 801380e:	ed93 7a02 	vldr	s14, [r3, #8]
 8013812:	ee20 0a26 	vmul.f32	s0, s0, s13
 8013816:	edd3 7a05 	vldr	s15, [r3, #20]
 801381a:	eea7 0a27 	vfma.f32	s0, s14, s15
 801381e:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
 8013822:	4770      	bx	lr

08013824 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 8013824:	b538      	push	{r3, r4, r5, lr}
 8013826:	ed2d 8b02 	vpush	{d8}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 801382a:	698d      	ldr	r5, [r1, #24]
{
 801382c:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 801382e:	201c      	movs	r0, #28
{
 8013830:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8013834:	4629      	mov	r1, r5
{
 8013836:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 801383a:	f001 fdc5 	bl	80153c8 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 801383e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8013842:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8013844:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 8013846:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8013848:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 801384c:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 8013850:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8013854:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8013856:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8013858:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 801385a:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 801385c:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 8013860:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8013864:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8013868:	ecbd 8b02 	vpop	{d8}
 801386c:	bd38      	pop	{r3, r4, r5, pc}
 801386e:	bf00      	nop

08013870 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 8013870:	6803      	ldr	r3, [r0, #0]
{
 8013872:	eeb0 7a40 	vmov.f32	s14, s0


    if (in >= s->prevOut)
 8013876:	edd3 7a01 	vldr	s15, [r3, #4]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 801387a:	ed83 7a03 	vstr	s14, [r3, #12]
    if (in >= s->prevOut)
 801387e:	eef4 7ac0 	vcmpe.f32	s15, s0
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8013882:	ee30 6a67 	vsub.f32	s12, s0, s15
    if (in >= s->prevOut)
 8013886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 801388a:	bf94      	ite	ls
 801388c:	edd3 6a04 	vldrls	s13, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8013890:	edd3 6a05 	vldrhi	s13, [r3, #20]
 8013894:	eee6 7a26 	vfma.f32	s15, s12, s13
 8013898:	eeb0 0a67 	vmov.f32	s0, s15
 801389c:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 80138a0:	edc3 7a01 	vstr	s15, [r3, #4]
    return s->currentOut;
}
 80138a4:	4770      	bx	lr
 80138a6:	bf00      	nop

080138a8 <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as floating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, float freq, float Q, LEAF* const leaf)
{
 80138a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138aa:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 80138ae:	6996      	ldr	r6, [r2, #24]
{
 80138b0:	4607      	mov	r7, r0
 80138b2:	460d      	mov	r5, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 80138b4:	2044      	movs	r0, #68	; 0x44
 80138b6:	4631      	mov	r1, r6
{
 80138b8:	eef0 8a40 	vmov.f32	s17, s0
 80138bc:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 80138c0:	f001 fd82 	bl	80153c8 <mpool_alloc>
 80138c4:	6038      	str	r0, [r7, #0]
 80138c6:	4604      	mov	r4, r0
    svf->mempool = m;
 80138c8:	6006      	str	r6, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 80138ca:	6873      	ldr	r3, [r6, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
 80138cc:	2600      	movs	r6, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80138ce:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8013980 <tSVF_init+0xd8>
    svf->sampleRate = leaf->sampleRate;
 80138d2:	681a      	ldr	r2, [r3, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80138d4:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 80138d8:	63c2      	str	r2, [r0, #60]	; 0x3c
    svf->invSampleRate = leaf->invSampleRate;
 80138da:	edd3 7a01 	vldr	s15, [r3, #4]
    svf->type = type;
 80138de:	7105      	strb	r5, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80138e0:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 80138e4:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    svf->ic1eq = 0;
 80138e8:	6106      	str	r6, [r0, #16]
    svf->ic2eq = 0;
 80138ea:	6146      	str	r6, [r0, #20]
    svf->Q = Q;
 80138ec:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 80138f0:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80138f4:	f007 f898 	bl	801aa28 <tanf>
    svf->k = 1.0f/Q;
 80138f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80138fc:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
 8013900:	2d01      	cmp	r5, #1
    svf->cH = 0.0f;
 8013902:	62e6      	str	r6, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
 8013904:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cB = 0.0f;
 8013908:	6326      	str	r6, [r4, #48]	; 0x30
    svf->cBK = 0.0f;
 801390a:	63a6      	str	r6, [r4, #56]	; 0x38
    svf->cL = 1.0f;
 801390c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8013910:	ee70 6a07 	vadd.f32	s13, s0, s14
    svf->k = 1.0f/Q;
 8013914:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8013918:	eeb0 7a67 	vmov.f32	s14, s15
 801391c:	eea0 7a26 	vfma.f32	s14, s0, s13
 8013920:	eec7 6a87 	vdiv.f32	s13, s15, s14
    svf->a2 = svf->g*svf->a1;
 8013924:	ee20 7a26 	vmul.f32	s14, s0, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8013928:	edc4 6a08 	vstr	s13, [r4, #32]
    svf->a3 = svf->g*svf->a2;
 801392c:	ee20 0a07 	vmul.f32	s0, s0, s14
    svf->a2 = svf->g*svf->a1;
 8013930:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8013934:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
 8013938:	d007      	beq.n	801394a <tSVF_init+0xa2>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 801393a:	2d02      	cmp	r5, #2
 801393c:	d008      	beq.n	8013950 <tSVF_init+0xa8>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypeHighpass)
 801393e:	b96d      	cbnz	r5, 801395c <tSVF_init+0xb4>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8013940:	4b10      	ldr	r3, [pc, #64]	; (8013984 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
 8013942:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 8013946:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
 8013948:	6363      	str	r3, [r4, #52]	; 0x34
}
 801394a:	ecbd 8b02 	vpop	{d8}
 801394e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cB = 1.0f;
 8013950:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        svf->cL = 0.0f;
 8013954:	6366      	str	r6, [r4, #52]	; 0x34
}
 8013956:	ecbd 8b02 	vpop	{d8}
 801395a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    else if (type == SVFTypeNotch)
 801395c:	2d03      	cmp	r5, #3
 801395e:	d009      	beq.n	8013974 <tSVF_init+0xcc>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypePeak)
 8013960:	2d04      	cmp	r5, #4
 8013962:	d1f2      	bne.n	801394a <tSVF_init+0xa2>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8013964:	4a07      	ldr	r2, [pc, #28]	; (8013984 <tSVF_init+0xdc>)
        svf->cL = -2.0f;
 8013966:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 801396a:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 801396e:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
 8013970:	6363      	str	r3, [r4, #52]	; 0x34
}
 8013972:	e7ea      	b.n	801394a <tSVF_init+0xa2>
        svf->cBK = -1.0f;
 8013974:	4b03      	ldr	r3, [pc, #12]	; (8013984 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
 8013976:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cL = 0.0f;
 801397a:	6366      	str	r6, [r4, #52]	; 0x34
        svf->cBK = -1.0f;
 801397c:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 801397e:	e7e4      	b.n	801394a <tSVF_init+0xa2>
 8013980:	40490fdb 	.word	0x40490fdb
 8013984:	bf800000 	.word	0xbf800000

08013988 <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
 8013988:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 801398a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 801398e:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8013992:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8013996:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 801399a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
 801399e:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 80139a2:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
 80139a6:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
 80139aa:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80139ae:	edd3 2a08 	vldr	s5, [r3, #32]
 80139b2:	ee67 7a84 	vmul.f32	s15, s15, s8
 80139b6:	ed93 2a07 	vldr	s4, [r3, #28]
 80139ba:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 80139be:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80139c2:	eea2 5a23 	vfma.f32	s10, s4, s7
 80139c6:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80139ca:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 80139ce:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 80139d2:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 80139d6:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 80139da:	eed5 6aa4 	vfnms.f32	s13, s11, s9
 80139de:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 80139e2:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 80139e6:	edc3 6a05 	vstr	s13, [r3, #20]
}
 80139ea:	eea3 7a80 	vfma.f32	s14, s7, s0
 80139ee:	eeb0 0a47 	vmov.f32	s0, s14
 80139f2:	4770      	bx	lr

080139f4 <tSVF_setFreqFast>:
}

void    tSVF_setFreqFast     (tSVF* const vf, float cutoff)
{
	_tSVF* svf = *vf;
    int intVer = (int)cutoff;
 80139f4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80139f8:	4a18      	ldr	r2, [pc, #96]	; (8013a5c <tSVF_setFreqFast+0x68>)
 80139fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSVF* svf = *vf;
 80139fe:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
 8013a00:	ee17 1a10 	vmov	r1, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8013a04:	ed93 7a07 	vldr	s14, [r3, #28]
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013a08:	ee77 6ac0 	vsub.f32	s13, s15, s0
    float floatVer = cutoff - (float)intVer;
 8013a0c:	ee06 1a10 	vmov	s12, r1
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013a10:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    float floatVer = cutoff - (float)intVer;
 8013a14:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013a18:	edd0 5a01 	vldr	s11, [r0, #4]
    float floatVer = cutoff - (float)intVer;
 8013a1c:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013a20:	ee76 6a86 	vadd.f32	s13, s13, s12
 8013a24:	ed90 6a00 	vldr	s12, [r0]
 8013a28:	ee20 0a25 	vmul.f32	s0, s0, s11
 8013a2c:	eea6 0a26 	vfma.f32	s0, s12, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8013a30:	eef0 6a67 	vmov.f32	s13, s15
 8013a34:	ee30 7a07 	vadd.f32	s14, s0, s14
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013a38:	ed83 0a06 	vstr	s0, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8013a3c:	eee0 6a07 	vfma.f32	s13, s0, s14
 8013a40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g * svf->a1;
 8013a44:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8013a48:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 8013a4c:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
 8013a50:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8013a54:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
 8013a58:	4770      	bx	lr
 8013a5a:	bf00      	nop
 8013a5c:	0801c894 	.word	0x0801c894

08013a60 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, float Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
 8013a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 8013a64:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8013a66:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
 8013a6a:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
 8013a6e:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8013a72:	eeb0 6a47 	vmov.f32	s12, s14
 8013a76:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
 8013a7a:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8013a7e:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8013a82:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 8013a86:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8013a8a:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 8013a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 8013a92:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8013a96:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8013a9a:	4770      	bx	lr

08013a9c <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 8013a9c:	b538      	push	{r3, r4, r5, lr}
 8013a9e:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 8013aa2:	698c      	ldr	r4, [r1, #24]
{
 8013aa4:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8013aa6:	2018      	movs	r0, #24
{
 8013aa8:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8013aac:	4621      	mov	r1, r4
 8013aae:	f001 fcef 	bl	8015490 <mpool_calloc>
 8013ab2:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8013ab4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8013ab6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8013aba:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8013abc:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8013abe:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8013ac2:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8013ac4:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 8013ac8:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 8013aca:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8013ace:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8013ad2:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8013ad6:	ecbd 8b02 	vpop	{d8}
 8013ada:	bd38      	pop	{r3, r4, r5, pc}

08013adc <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8013adc:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8013ade:	edd3 7a01 	vldr	s15, [r3, #4]
 8013ae2:	ed93 7a02 	vldr	s14, [r3, #8]
 8013ae6:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8013aea:	ed83 0a01 	vstr	s0, [r3, #4]
 8013aee:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 8013af2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013af6:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8013afa:	4770      	bx	lr

08013afc <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

float   tVZFilter_tickEfficient             (tVZFilter* const vf, float in)
{
    _tVZFilter* f = *vf;
 8013afc:	6803      	ldr	r3, [r0, #0]
    
    float yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8013afe:	edd3 6a03 	vldr	s13, [r3, #12]
 8013b02:	ed93 7a02 	vldr	s14, [r3, #8]
 8013b06:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013b0a:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 8013b0e:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8013b12:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8013b16:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8013b1a:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 8013b1e:	edd3 4a08 	vldr	s9, [r3, #32]
 8013b22:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8013b26:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 8013b2a:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8013b2e:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
 8013b32:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8013b36:	eeb0 5a47 	vmov.f32	s10, s14
 8013b3a:	eea4 0a87 	vfma.f32	s0, s9, s14
 8013b3e:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8013b42:	eef0 7a66 	vmov.f32	s15, s13
}
 8013b46:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 8013b4a:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8013b4e:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
 8013b52:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8013b56:	4770      	bx	lr

08013b58 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8013b58:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 8013b5a:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8013b5c:	eddf 7a98 	vldr	s15, [pc, #608]	; 8013dc0 <tVZFilter_calcCoeffs+0x268>
{
 8013b60:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8013b64:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8013b68:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8013b6c:	ee68 8a87 	vmul.f32	s17, s17, s14
 8013b70:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8013b74:	eeb0 0a68 	vmov.f32	s0, s17
 8013b78:	f006 ff56 	bl	801aa28 <tanf>
    
    switch( f->type )
 8013b7c:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8013b7e:	eeb0 8a40 	vmov.f32	s16, s0
 8013b82:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8013b86:	2b0a      	cmp	r3, #10
 8013b88:	f200 8117 	bhi.w	8013dba <tVZFilter_calcCoeffs+0x262>
 8013b8c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013b90:	002f0026 	.word	0x002f0026
 8013b94:	00410038 	.word	0x00410038
 8013b98:	0056004d 	.word	0x0056004d
 8013b9c:	00a1008b 	.word	0x00a1008b
 8013ba0:	010a00b7 	.word	0x010a00b7
 8013ba4:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8013ba6:	edd4 7a05 	vldr	s15, [r4, #20]
 8013baa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013bae:	eeb1 7a67 	vneg.f32	s14, s15
 8013bb2:	61e3      	str	r3, [r4, #28]
 8013bb4:	6263      	str	r3, [r4, #36]	; 0x24
 8013bb6:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8013bba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8013bbe:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8013bc2:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8013bc6:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8013bca:	eee7 6a88 	vfma.f32	s13, s15, s16
 8013bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013bd2:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8013bd6:	ecbd 8b02 	vpop	{d8}
 8013bda:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8013be2:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013be6:	61e3      	str	r3, [r4, #28]
 8013be8:	6223      	str	r3, [r4, #32]
 8013bea:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8013bec:	e7e5      	b.n	8013bba <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8013bee:	2300      	movs	r3, #0
 8013bf0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8013bf4:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8013bf8:	6223      	str	r3, [r4, #32]
 8013bfa:	6263      	str	r3, [r4, #36]	; 0x24
 8013bfc:	61e2      	str	r2, [r4, #28]
            break;
 8013bfe:	e7dc      	b.n	8013bba <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8013c00:	2300      	movs	r3, #0
 8013c02:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8013c06:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8013c0a:	61e3      	str	r3, [r4, #28]
 8013c0c:	6263      	str	r3, [r4, #36]	; 0x24
 8013c0e:	6222      	str	r2, [r4, #32]
            break;
 8013c10:	e7d3      	b.n	8013bba <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8013c12:	edd4 7a05 	vldr	s15, [r4, #20]
 8013c16:	2300      	movs	r3, #0
 8013c18:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8013c1c:	61e3      	str	r3, [r4, #28]
 8013c1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013c22:	6263      	str	r3, [r4, #36]	; 0x24
 8013c24:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8013c28:	e7c7      	b.n	8013bba <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013c2a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013c2e:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 8013c30:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013c34:	6222      	str	r2, [r4, #32]
 8013c36:	61e3      	str	r3, [r4, #28]
 8013c38:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8013c3a:	e7be      	b.n	8013bba <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8013c3c:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8013c40:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8013c44:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8013c48:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8013c4c:	f006 fd8c 	bl	801a768 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8013c50:	ee28 0a80 	vmul.f32	s0, s17, s0
 8013c54:	f006 fee8 	bl	801aa28 <tanf>
            float r  = f->g/wl;
 8013c58:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8013c5c:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8013c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013c64:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8013c68:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8013c6c:	ed84 7a07 	vstr	s14, [r4, #28]
 8013c70:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8013c74:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8013c78:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8013c7c:	eef0 6a47 	vmov.f32	s13, s14
 8013c80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013c84:	ee77 7a45 	vsub.f32	s15, s14, s10
 8013c88:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8013c8c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8013c90:	eef1 7ac7 	vsqrt.f32	s15, s14
 8013c94:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8013c98:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8013c9c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8013ca0:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8013ca4:	e789      	b.n	8013bba <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8013ca6:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013caa:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8013cae:	edd4 7a05 	vldr	s15, [r4, #20]
 8013cb2:	eef1 6ac7 	vsqrt.f32	s13, s14
 8013cb6:	ed84 7a07 	vstr	s14, [r4, #28]
 8013cba:	6263      	str	r3, [r4, #36]	; 0x24
 8013cbc:	ee27 6a27 	vmul.f32	s12, s14, s15
 8013cc0:	ed84 6a08 	vstr	s12, [r4, #32]
 8013cc4:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013cc8:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8013ccc:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8013cd0:	e773      	b.n	8013bba <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8013cd2:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8013cd6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013cda:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013cde:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8013ce2:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8013ce6:	61e3      	str	r3, [r4, #28]
 8013ce8:	ee27 6a27 	vmul.f32	s12, s14, s15
 8013cec:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8013cf0:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8013cf4:	ee20 8a07 	vmul.f32	s16, s0, s14
 8013cf8:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8013cfc:	e75d      	b.n	8013bba <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
 8013cfe:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8013d02:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8013d06:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8013d0a:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8013dc4 <tVZFilter_calcCoeffs+0x26c>
 8013d0e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8013d12:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8013d16:	eeb0 0a48 	vmov.f32	s0, s16
 8013d1a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013d1e:	f001 fb35 	bl	801538c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8013d22:	eddf 0a28 	vldr	s1, [pc, #160]	; 8013dc4 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8013d26:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8013d2a:	eeb0 0a68 	vmov.f32	s0, s17
 8013d2e:	f001 fb31 	bl	8015394 <minimum>
            f->cB = 1.0f-x*x;
 8013d32:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8013d36:	edd4 7a05 	vldr	s15, [r4, #20]
 8013d3a:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8013d3e:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8013d42:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8013d46:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8013d4a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8013d4e:	ee76 5a06 	vadd.f32	s11, s12, s12
 8013d52:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8013d56:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8013d5a:	eee6 7a06 	vfma.f32	s15, s12, s12
 8013d5e:	eee0 7a00 	vfma.f32	s15, s0, s0
 8013d62:	eee0 7a65 	vfms.f32	s15, s0, s11
 8013d66:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8013d6a:	f001 f8eb 	bl	8014f44 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8013d6e:	edd4 5a07 	vldr	s11, [r4, #28]
 8013d72:	ed94 6a08 	vldr	s12, [r4, #32]
 8013d76:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8013d7a:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8013d7e:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8013d82:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8013d86:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 8013d8a:	ee65 5a80 	vmul.f32	s11, s11, s0
 8013d8e:	ee26 6a00 	vmul.f32	s12, s12, s0
 8013d92:	ee26 0a80 	vmul.f32	s0, s13, s0
 8013d96:	edc4 5a07 	vstr	s11, [r4, #28]
 8013d9a:	ed84 6a08 	vstr	s12, [r4, #32]
 8013d9e:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8013da2:	e70a      	b.n	8013bba <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 8013da4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8013da8:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8013dac:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8013dae:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8013db2:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 8013db6:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8013db8:	e6ff      	b.n	8013bba <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
 8013dba:	edd4 7a05 	vldr	s15, [r4, #20]
 8013dbe:	e6fc      	b.n	8013bba <tVZFilter_calcCoeffs+0x62>
 8013dc0:	40490fdb 	.word	0x40490fdb
 8013dc4:	00000000 	.word	0x00000000

08013dc8 <tVZFilter_initToPool>:
{
 8013dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 8013dca:	6817      	ldr	r7, [r2, #0]
{
 8013dcc:	4605      	mov	r5, r0
 8013dce:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8013dd0:	204c      	movs	r0, #76	; 0x4c
 8013dd2:	4639      	mov	r1, r7
{
 8013dd4:	ed2d 8b04 	vpush	{d8-d9}
 8013dd8:	b083      	sub	sp, #12
 8013dda:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8013dde:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8013de2:	ed9f 8a42 	vldr	s16, [pc, #264]	; 8013eec <tVZFilter_initToPool+0x124>
{
 8013de6:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8013dea:	f001 faed 	bl	80153c8 <mpool_alloc>
 8013dee:	6028      	str	r0, [r5, #0]
 8013df0:	4604      	mov	r4, r0
    f->mempool = m;
 8013df2:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8013df4:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 8013df8:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8013dfa:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
 8013dfe:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8013e02:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 8013ef0 <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
 8013e06:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8013e0a:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
 8013e0e:	685b      	ldr	r3, [r3, #4]
 8013e10:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8013e12:	f001 f955 	bl	80150c0 <LEAF_clip>
    f->invG = 1.0f/ONE_OVER_SQRT2;
 8013e16:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8013ef4 <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
 8013e1a:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8013e1e:	ee20 6a09 	vmul.f32	s12, s0, s18
 8013e22:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 8013e26:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
 8013e2a:	4b33      	ldr	r3, [pc, #204]	; (8013ef8 <tVZFilter_initToPool+0x130>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
 8013e2c:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
 8013e30:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
 8013e32:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 8013e36:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8013e3a:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8013e3e:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
 8013e42:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
 8013e44:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 8013e48:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 8013e4c:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 8013e50:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 8013e54:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8013e58:	f006 fde6 	bl	801aa28 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8013e5c:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8013efc <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8013e60:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8013e64:	eef0 0a68 	vmov.f32	s1, s17
 8013e68:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 8013e6c:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8013e6e:	f001 f927 	bl	80150c0 <LEAF_clip>
 8013e72:	eef0 0a40 	vmov.f32	s1, s0
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8013e76:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8013e7a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8013e7e:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
 8013e82:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8013e84:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8013e88:	f006 fc6e 	bl	801a768 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8013e8c:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8013e90:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8013e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e98:	ee67 7a89 	vmul.f32	s15, s15, s18
 8013e9c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013ea0:	f006 fdc2 	bl	801aa28 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8013ea4:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8013ea8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8013eac:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8013eae:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8013eb2:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8013eb6:	ee27 7a07 	vmul.f32	s14, s14, s14
 8013eba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ebe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013ec2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013ec6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8013eca:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8013ece:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013ed2:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
 8013ed6:	f7ff fe3f 	bl	8013b58 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 8013eda:	4628      	mov	r0, r5
}
 8013edc:	b003      	add	sp, #12
 8013ede:	ecbd 8b04 	vpop	{d8-d9}
 8013ee2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 8013ee6:	f7ff be37 	b.w	8013b58 <tVZFilter_calcCoeffs>
 8013eea:	bf00      	nop
 8013eec:	00000000 	.word	0x00000000
 8013ef0:	40490fdb 	.word	0x40490fdb
 8013ef4:	3fb504f3 	.word	0x3fb504f3
 8013ef8:	3f3504f3 	.word	0x3f3504f3
 8013efc:	42c80000 	.word	0x42c80000

08013f00 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 8013f00:	3218      	adds	r2, #24
 8013f02:	f7ff bf61 	b.w	8013dc8 <tVZFilter_initToPool>
 8013f06:	bf00      	nop

08013f08 <tVZFilter_setFreqFast>:
    int intVer = (int)cutoff;
 8013f08:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013f0c:	4baa      	ldr	r3, [pc, #680]	; (80141b8 <tVZFilter_setFreqFast+0x2b0>)
 8013f0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intVer = (int)cutoff;
 8013f12:	ee17 2a10 	vmov	r2, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013f16:	ee37 7ac0 	vsub.f32	s14, s15, s0
    float floatVer = cutoff - (float)intVer;
 8013f1a:	ee07 2a90 	vmov	s15, r2
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013f1e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 8013f22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013f26:	ed91 6a01 	vldr	s12, [r1, #4]
{
 8013f2a:	b510      	push	{r4, lr}
    float floatVer = cutoff - (float)intVer;
 8013f2c:	ee70 7a66 	vsub.f32	s15, s0, s13
	 _tVZFilter* f = *vf;
 8013f30:	6804      	ldr	r4, [r0, #0]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013f32:	ee37 7a26 	vadd.f32	s14, s14, s13
 8013f36:	edd1 6a00 	vldr	s13, [r1]
 8013f3a:	ee67 7a86 	vmul.f32	s15, s15, s12
{
 8013f3e:	ed2d 8b02 	vpush	{d8}
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013f42:	eee6 7a87 	vfma.f32	s15, s13, s14
    switch( f->type )
 8013f46:	7922      	ldrb	r2, [r4, #4]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8013f48:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
 8013f4c:	2a0a      	cmp	r2, #10
 8013f4e:	f200 812f 	bhi.w	80141b0 <tVZFilter_setFreqFast+0x2a8>
 8013f52:	e8df f012 	tbh	[pc, r2, lsl #1]
 8013f56:	0026      	.short	0x0026
 8013f58:	0038002f 	.word	0x0038002f
 8013f5c:	004d0041 	.word	0x004d0041
 8013f60:	009b0056 	.word	0x009b0056
 8013f64:	00cf00b5 	.word	0x00cf00b5
 8013f68:	000b0122 	.word	0x000b0122
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8013f6c:	ed94 7a05 	vldr	s14, [r4, #20]
 8013f70:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013f74:	eef1 6a47 	vneg.f32	s13, s14
 8013f78:	61e3      	str	r3, [r4, #28]
 8013f7a:	6263      	str	r3, [r4, #36]	; 0x24
 8013f7c:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
 8013f80:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8013f84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8013f88:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8013f8c:	eef0 6a47 	vmov.f32	s13, s14
 8013f90:	eee0 6a27 	vfma.f32	s13, s0, s15
 8013f94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013f98:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8013f9c:	ecbd 8b02 	vpop	{d8}
 8013fa0:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8013fa8:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013fac:	61e3      	str	r3, [r4, #28]
 8013fae:	6223      	str	r3, [r4, #32]
 8013fb0:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8013fb2:	e7e5      	b.n	8013f80 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8013fba:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8013fbe:	6223      	str	r3, [r4, #32]
 8013fc0:	6263      	str	r3, [r4, #36]	; 0x24
 8013fc2:	61e2      	str	r2, [r4, #28]
            break;
 8013fc4:	e7dc      	b.n	8013f80 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8013fcc:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8013fd0:	61e3      	str	r3, [r4, #28]
 8013fd2:	6263      	str	r3, [r4, #36]	; 0x24
 8013fd4:	6222      	str	r2, [r4, #32]
            break;
 8013fd6:	e7d3      	b.n	8013f80 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8013fd8:	ed94 7a05 	vldr	s14, [r4, #20]
 8013fdc:	2300      	movs	r3, #0
 8013fde:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8013fe2:	61e3      	str	r3, [r4, #28]
 8013fe4:	ee66 6a87 	vmul.f32	s13, s13, s14
 8013fe8:	6263      	str	r3, [r4, #36]	; 0x24
 8013fea:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8013fee:	e7c7      	b.n	8013f80 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013ff0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8013ff4:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 8013ff6:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8013ffa:	6222      	str	r2, [r4, #32]
 8013ffc:	61e3      	str	r3, [r4, #28]
 8013ffe:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8014000:	e7be      	b.n	8013f80 <tVZFilter_setFreqFast+0x78>
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8014002:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8014006:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 801400a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801400e:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8014012:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8014016:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801401a:	f000 ffd7 	bl	8014fcc <fastPowf>
            float wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 801401e:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8014022:	eddf 7a66 	vldr	s15, [pc, #408]	; 80141bc <tVZFilter_setFreqFast+0x2b4>
 8014026:	ee28 8a07 	vmul.f32	s16, s16, s14
 801402a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801402e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014032:	f000 ff73 	bl	8014f1c <fastertanf>
            float r  = f->g/wl;
 8014036:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801403a:	eeb0 5a68 	vmov.f32	s10, s17
 801403e:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            float r  = f->g/wl;
 8014042:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8014046:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801404a:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 801404e:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8014052:	eea7 5aa7 	vfma.f32	s10, s15, s15
 8014056:	ee85 7a27 	vdiv.f32	s14, s10, s15
 801405a:	ee77 7a65 	vsub.f32	s15, s14, s11
 801405e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014062:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8014066:	f000 ff6d 	bl	8014f44 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801406a:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
 801406e:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8014072:	edc4 8a07 	vstr	s17, [r4, #28]
 8014076:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801407a:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801407e:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8014082:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8014086:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 801408a:	e779      	b.n	8013f80 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
 801408c:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8014090:	f000 ff58 	bl	8014f44 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8014094:	f000 ff56 	bl	8014f44 <fastsqrtf>
 8014098:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 801409c:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80140a0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80140a4:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 80140a8:	ed94 7a05 	vldr	s14, [r4, #20]
 80140ac:	edc4 6a07 	vstr	s13, [r4, #28]
 80140b0:	6263      	str	r3, [r4, #36]	; 0x24
 80140b2:	ee66 6a87 	vmul.f32	s13, s13, s14
 80140b6:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80140ba:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
 80140be:	e75f      	b.n	8013f80 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
 80140c0:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 80140c4:	f000 ff3e 	bl	8014f44 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80140c8:	f000 ff3c 	bl	8014f44 <fastsqrtf>
 80140cc:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80140d0:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80140d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80140d8:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80140dc:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80140e0:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 80140e4:	ee67 6a26 	vmul.f32	s13, s14, s13
 80140e8:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80140ea:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80140ee:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 80140f2:	e745      	b.n	8013f80 <tVZFilter_setFreqFast+0x78>
            float x  = (2.0f*f->m-1.0f);
 80140f4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80140f8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80140fc:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8014100:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80141c0 <tVZFilter_setFreqFast+0x2b8>
 8014104:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8014108:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 801410c:	eeb0 0a48 	vmov.f32	s0, s16
 8014110:	eea7 0a67 	vfms.f32	s0, s14, s15
 8014114:	f001 f93a 	bl	801538c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8014118:	eddf 0a29 	vldr	s1, [pc, #164]	; 80141c0 <tVZFilter_setFreqFast+0x2b8>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 801411c:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8014120:	eeb0 0a68 	vmov.f32	s0, s17
 8014124:	f001 f936 	bl	8015394 <minimum>
            f->cB = 1.0f-x*x;
 8014128:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801412c:	edd4 7a05 	vldr	s15, [r4, #20]
 8014130:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8014134:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8014138:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 801413c:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8014140:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8014144:	ee76 5a06 	vadd.f32	s11, s12, s12
 8014148:	ee38 8a08 	vadd.f32	s16, s16, s16
 801414c:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8014150:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8014154:	eee6 7a06 	vfma.f32	s15, s12, s12
 8014158:	eee0 7a00 	vfma.f32	s15, s0, s0
 801415c:	eee0 7a65 	vfms.f32	s15, s0, s11
 8014160:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8014164:	f000 feee 	bl	8014f44 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8014168:	edd4 5a07 	vldr	s11, [r4, #28]
 801416c:	ed94 6a08 	vldr	s12, [r4, #32]
 8014170:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8014174:	ed94 7a05 	vldr	s14, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8014178:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
 801417c:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
 8014180:	ee65 5a80 	vmul.f32	s11, s11, s0
 8014184:	ee26 6a00 	vmul.f32	s12, s12, s0
 8014188:	ee26 0a80 	vmul.f32	s0, s13, s0
 801418c:	edc4 5a07 	vstr	s11, [r4, #28]
 8014190:	ed84 6a08 	vstr	s12, [r4, #32]
 8014194:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8014198:	e6f2      	b.n	8013f80 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f;
 801419a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 801419e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
 80141a2:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 80141a4:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
 80141a8:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
 80141ac:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80141ae:	e6e7      	b.n	8013f80 <tVZFilter_setFreqFast+0x78>
    f->R2Plusg = f->R2+f->g;
 80141b0:	ed94 7a05 	vldr	s14, [r4, #20]
 80141b4:	e6e4      	b.n	8013f80 <tVZFilter_setFreqFast+0x78>
 80141b6:	bf00      	nop
 80141b8:	0801c894 	.word	0x0801c894
 80141bc:	40490fdb 	.word	0x40490fdb
 80141c0:	00000000 	.word	0x00000000

080141c4 <tVZFilter_setGain>:
{
 80141c4:	b538      	push	{r3, r4, r5, lr}
 80141c6:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80141ca:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80141f4 <tVZFilter_setGain+0x30>
 80141ce:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80141f8 <tVZFilter_setGain+0x34>
{
 80141d2:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 80141d4:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80141d6:	f000 ff73 	bl	80150c0 <LEAF_clip>
    f->invG = 1.0f/f->G;
 80141da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 80141de:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80141e0:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
 80141e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80141e8:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
 80141ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 80141f0:	f7ff bcb2 	b.w	8013b58 <tVZFilter_calcCoeffs>
 80141f4:	457a0000 	.word	0x457a0000
 80141f8:	358637bd 	.word	0x358637bd

080141fc <tVZFilter_setResonance>:
{
 80141fc:	b538      	push	{r3, r4, r5, lr}
 80141fe:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8014202:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 801422c <tVZFilter_setResonance+0x30>
 8014206:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8014230 <tVZFilter_setResonance+0x34>
{
 801420a:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 801420c:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 801420e:	f000 ff57 	bl	80150c0 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 8014212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8014216:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8014218:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 801421c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014220:	edc5 7a05 	vstr	s15, [r5, #20]
}
 8014224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8014228:	f7ff bc96 	b.w	8013b58 <tVZFilter_calcCoeffs>
 801422c:	42c80000 	.word	0x42c80000
 8014230:	3c23d70a 	.word	0x3c23d70a

08014234 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, float sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
 8014234:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tVZFilter* f = *vf;
 8014238:	6803      	ldr	r3, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 801423a:	eddf 7a9d 	vldr	s15, [pc, #628]	; 80144b0 <tVZFilter_setSampleRate+0x27c>
    f->invSampleRate = 1.0f/f->sampleRate;
 801423e:	ee86 7a80 	vdiv.f32	s14, s13, s0
{
 8014242:	b510      	push	{r4, lr}
 8014244:	ed2d 8b02 	vpush	{d8}
    f->sampleRate = sr;
 8014248:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->invSampleRate = 1.0f/f->sampleRate;
 801424c:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    _tVZFilter* f = *vf;
 8014250:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8014252:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8014256:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 801425a:	ee68 8a87 	vmul.f32	s17, s17, s14
 801425e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8014262:	eeb0 0a68 	vmov.f32	s0, s17
 8014266:	f006 fbdf 	bl	801aa28 <tanf>
    switch( f->type )
 801426a:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 801426c:	eeb0 8a40 	vmov.f32	s16, s0
 8014270:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8014274:	2b0a      	cmp	r3, #10
 8014276:	f200 8117 	bhi.w	80144a8 <tVZFilter_setSampleRate+0x274>
 801427a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801427e:	0026      	.short	0x0026
 8014280:	0038002f 	.word	0x0038002f
 8014284:	004d0041 	.word	0x004d0041
 8014288:	008b0056 	.word	0x008b0056
 801428c:	00b700a1 	.word	0x00b700a1
 8014290:	000b010a 	.word	0x000b010a
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8014294:	edd4 7a05 	vldr	s15, [r4, #20]
 8014298:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801429c:	eeb1 7a67 	vneg.f32	s14, s15
 80142a0:	61e3      	str	r3, [r4, #28]
 80142a2:	6263      	str	r3, [r4, #36]	; 0x24
 80142a4:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 80142a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 80142ac:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 80142b0:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 80142b4:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 80142b8:	eee7 6a88 	vfma.f32	s13, s15, s16
 80142bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80142c0:	edc4 7a06 	vstr	s15, [r4, #24]
    tVZFilter_calcCoeffs(vf);
}
 80142c4:	ecbd 8b02 	vpop	{d8}
 80142c8:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80142ca:	2300      	movs	r3, #0
 80142cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 80142d0:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 80142d4:	61e3      	str	r3, [r4, #28]
 80142d6:	6223      	str	r3, [r4, #32]
 80142d8:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 80142da:	e7e5      	b.n	80142a8 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80142dc:	2300      	movs	r3, #0
 80142de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 80142e2:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80142e6:	6223      	str	r3, [r4, #32]
 80142e8:	6263      	str	r3, [r4, #36]	; 0x24
 80142ea:	61e2      	str	r2, [r4, #28]
            break;
 80142ec:	e7dc      	b.n	80142a8 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80142ee:	2300      	movs	r3, #0
 80142f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 80142f4:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80142f8:	61e3      	str	r3, [r4, #28]
 80142fa:	6263      	str	r3, [r4, #36]	; 0x24
 80142fc:	6222      	str	r2, [r4, #32]
            break;
 80142fe:	e7d3      	b.n	80142a8 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8014300:	edd4 7a05 	vldr	s15, [r4, #20]
 8014304:	2300      	movs	r3, #0
 8014306:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 801430a:	61e3      	str	r3, [r4, #28]
 801430c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8014310:	6263      	str	r3, [r4, #36]	; 0x24
 8014312:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8014316:	e7c7      	b.n	80142a8 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8014318:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801431c:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 801431e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8014322:	6222      	str	r2, [r4, #32]
 8014324:	61e3      	str	r3, [r4, #28]
 8014326:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8014328:	e7be      	b.n	80142a8 <tVZFilter_setSampleRate+0x74>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 801432a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 801432e:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8014332:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8014336:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801433a:	f006 fa15 	bl	801a768 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 801433e:	ee28 0a80 	vmul.f32	s0, s17, s0
 8014342:	f006 fb71 	bl	801aa28 <tanf>
            float r  = f->g/wl;
 8014346:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801434a:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 801434e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014352:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8014356:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801435a:	ed84 7a07 	vstr	s14, [r4, #28]
 801435e:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8014362:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8014366:	eea7 7aa7 	vfma.f32	s14, s15, s15
 801436a:	eef0 6a47 	vmov.f32	s13, s14
 801436e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014372:	ee77 7a45 	vsub.f32	s15, s14, s10
 8014376:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801437a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 801437e:	eef1 7ac7 	vsqrt.f32	s15, s14
 8014382:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8014386:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801438a:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801438e:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8014392:	e789      	b.n	80142a8 <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
 8014394:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8014398:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 801439c:	edd4 7a05 	vldr	s15, [r4, #20]
 80143a0:	eef1 6ac7 	vsqrt.f32	s13, s14
 80143a4:	ed84 7a07 	vstr	s14, [r4, #28]
 80143a8:	6263      	str	r3, [r4, #36]	; 0x24
 80143aa:	ee27 6a27 	vmul.f32	s12, s14, s15
 80143ae:	ed84 6a08 	vstr	s12, [r4, #32]
 80143b2:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80143b6:	ee80 8a07 	vdiv.f32	s16, s0, s14
 80143ba:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 80143be:	e773      	b.n	80142a8 <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
 80143c0:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80143c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80143c8:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80143cc:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80143d0:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 80143d4:	61e3      	str	r3, [r4, #28]
 80143d6:	ee27 6a27 	vmul.f32	s12, s14, s15
 80143da:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80143de:	eeb1 7ae6 	vsqrt.f32	s14, s13
 80143e2:	ee20 8a07 	vmul.f32	s16, s0, s14
 80143e6:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 80143ea:	e75d      	b.n	80142a8 <tVZFilter_setSampleRate+0x74>
            float x  = (2.0f*f->m-1.0f);
 80143ec:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80143f0:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80143f4:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80143f8:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80144b4 <tVZFilter_setSampleRate+0x280>
 80143fc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8014400:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8014404:	eeb0 0a48 	vmov.f32	s0, s16
 8014408:	eea7 0a67 	vfms.f32	s0, s14, s15
 801440c:	f000 ffbe 	bl	801538c <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8014410:	eddf 0a28 	vldr	s1, [pc, #160]	; 80144b4 <tVZFilter_setSampleRate+0x280>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8014414:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8014418:	eeb0 0a68 	vmov.f32	s0, s17
 801441c:	f000 ffba 	bl	8015394 <minimum>
            f->cB = 1.0f-x*x;
 8014420:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8014424:	edd4 7a05 	vldr	s15, [r4, #20]
 8014428:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 801442c:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8014430:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8014434:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8014438:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801443c:	ee76 5a06 	vadd.f32	s11, s12, s12
 8014440:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8014444:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8014448:	eee6 7a06 	vfma.f32	s15, s12, s12
 801444c:	eee0 7a00 	vfma.f32	s15, s0, s0
 8014450:	eee0 7a65 	vfms.f32	s15, s0, s11
 8014454:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8014458:	f000 fd74 	bl	8014f44 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 801445c:	edd4 5a07 	vldr	s11, [r4, #28]
 8014460:	ed94 6a08 	vldr	s12, [r4, #32]
 8014464:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8014468:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801446c:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8014470:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8014474:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 8014478:	ee65 5a80 	vmul.f32	s11, s11, s0
 801447c:	ee26 6a00 	vmul.f32	s12, s12, s0
 8014480:	ee26 0a80 	vmul.f32	s0, s13, s0
 8014484:	edc4 5a07 	vstr	s11, [r4, #28]
 8014488:	ed84 6a08 	vstr	s12, [r4, #32]
 801448c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8014490:	e70a      	b.n	80142a8 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f;
 8014492:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8014496:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 801449a:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 801449c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 80144a0:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 80144a4:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80144a6:	e6ff      	b.n	80142a8 <tVZFilter_setSampleRate+0x74>
    f->R2Plusg = f->R2+f->g;
 80144a8:	edd4 7a05 	vldr	s15, [r4, #20]
 80144ac:	e6fc      	b.n	80142a8 <tVZFilter_setSampleRate+0x74>
 80144ae:	bf00      	nop
 80144b0:	40490fdb 	.word	0x40490fdb
 80144b4:	00000000 	.word	0x00000000

080144b8 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
 80144b8:	b570      	push	{r4, r5, r6, lr}
 80144ba:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 80144be:	698d      	ldr	r5, [r1, #24]
{
 80144c0:	eeb0 8a40 	vmov.f32	s16, s0
 80144c4:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 80144c6:	2040      	movs	r0, #64	; 0x40
 80144c8:	4629      	mov	r1, r5
{
 80144ca:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 80144ce:	f000 ff7b 	bl	80153c8 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 80144d2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801454c <tDiodeFilter_init+0x94>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 80144d6:	6030      	str	r0, [r6, #0]
 80144d8:	4604      	mov	r4, r0
    f->mempool = m;
 80144da:	6005      	str	r5, [r0, #0]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 80144dc:	ee68 7a27 	vmul.f32	s15, s16, s15
    f->invSampleRate = leaf->invSampleRate;
 80144e0:	686b      	ldr	r3, [r5, #4]
 80144e2:	ed93 7a01 	vldr	s14, [r3, #4]
    f->cutoff = cutoff;
 80144e6:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 80144ea:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->invSampleRate = leaf->invSampleRate;
 80144ee:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 80144f2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80144f6:	f005 ff63 	bl	801a3c0 <tan>
    f->r = (7.f * resonance + 0.5f);
 80144fa:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80144fe:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
 8014502:	4913      	ldr	r1, [pc, #76]	; (8014550 <tDiodeFilter_init+0x98>)
    f->zi = 0.0f; //previous input value
    f->gamma = f->Vt*f->n;
 8014504:	4b13      	ldr	r3, [pc, #76]	; (8014554 <tDiodeFilter_init+0x9c>)
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
 8014506:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->r = (7.f * resonance + 0.5f);
 801450a:	eeb0 7a67 	vmov.f32	s14, s15
    f->zi = 0.0f; //previous input value
 801450e:	2000      	movs	r0, #0
    f->n = 1.836f;
 8014510:	6161      	str	r1, [r4, #20]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8014512:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->s0 = 0.01f;
 8014516:	4910      	ldr	r1, [pc, #64]	; (8014558 <tDiodeFilter_init+0xa0>)
    f->r = (7.f * resonance + 0.5f);
 8014518:	eea8 7aa6 	vfma.f32	s14, s17, s13
    f->gamma = f->Vt*f->n;
 801451c:	61a3      	str	r3, [r4, #24]
    f->s1 = 0.02f;
 801451e:	4b0f      	ldr	r3, [pc, #60]	; (801455c <tDiodeFilter_init+0xa4>)
    f->zi = 0.0f; //previous input value
 8014520:	61e0      	str	r0, [r4, #28]
    f->s0 = 0.01f;
 8014522:	62e1      	str	r1, [r4, #44]	; 0x2c
    f->g0inv = 1.f/(2.f*f->Vt);
 8014524:	6222      	str	r2, [r4, #32]
    f->s1 = 0.02f;
 8014526:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
 8014528:	480d      	ldr	r0, [pc, #52]	; (8014560 <tDiodeFilter_init+0xa8>)
    f->g1inv = 1.f/(2.f*f->gamma);
 801452a:	490e      	ldr	r1, [pc, #56]	; (8014564 <tDiodeFilter_init+0xac>)
    f->g2inv = 1.f/(6.f*f->gamma);
 801452c:	4a0e      	ldr	r2, [pc, #56]	; (8014568 <tDiodeFilter_init+0xb0>)
    f->s3 = 0.04f;
 801452e:	4b0f      	ldr	r3, [pc, #60]	; (801456c <tDiodeFilter_init+0xb4>)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8014530:	ed84 0a02 	vstr	s0, [r4, #8]
    f->Vt = 0.5f;
 8014534:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
 8014538:	ed84 7a03 	vstr	s14, [r4, #12]
    f->s2 = 0.03f;
 801453c:	6360      	str	r0, [r4, #52]	; 0x34
    f->g1inv = 1.f/(2.f*f->gamma);
 801453e:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 8014540:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s3 = 0.04f;
 8014542:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8014544:	ecbd 8b02 	vpop	{d8}
 8014548:	bd70      	pop	{r4, r5, r6, pc}
 801454a:	bf00      	nop
 801454c:	40490fdb 	.word	0x40490fdb
 8014550:	3feb020c 	.word	0x3feb020c
 8014554:	3f6b020c 	.word	0x3f6b020c
 8014558:	3c23d70a 	.word	0x3c23d70a
 801455c:	3ca3d70a 	.word	0x3ca3d70a
 8014560:	3cf5c28f 	.word	0x3cf5c28f
 8014564:	3f0b6efd 	.word	0x3f0b6efd
 8014568:	3e39e952 	.word	0x3e39e952
 801456c:	3d23d70a 	.word	0x3d23d70a

08014570 <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
float   tDiodeFilter_tick               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
 8014570:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8014572:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8014576:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8014860 <tDiodeFilter_tick+0x2f0>
 801457a:	eddf 7aba 	vldr	s15, [pc, #744]	; 8014864 <tDiodeFilter_tick+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801457e:	eddf 0aba 	vldr	s1, [pc, #744]	; 8014868 <tDiodeFilter_tick+0x2f8>
 8014582:	eeb0 1a67 	vmov.f32	s2, s15
{
 8014586:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801458a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801458e:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8014592:	edd3 1a03 	vldr	s3, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8014596:	eeb0 9a42 	vmov.f32	s18, s4
    float ih = 0.5f * (in + f->zi);
 801459a:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801459e:	eef0 9a42 	vmov.f32	s19, s4
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80145a2:	ee26 7ae1 	vnmul.f32	s14, s13, s3
 80145a6:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
 80145aa:	ee70 4a24 	vadd.f32	s9, s0, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80145ae:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
 80145b2:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80145b6:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80145ba:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80145be:	eea4 7a84 	vfma.f32	s14, s9, s8
 80145c2:	ed93 5a02 	vldr	s10, [r3, #8]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80145c6:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80145ca:	ee73 5ac3 	vsub.f32	s11, s7, s6
 80145ce:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80145d2:	ee27 7a22 	vmul.f32	s14, s14, s5
 80145d6:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
 80145da:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80145de:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80145e2:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80145e6:	ee77 4a20 	vadd.f32	s9, s14, s1
 80145ea:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80145ee:	eef0 4a67 	vmov.f32	s9, s15
 80145f2:	eee7 4a04 	vfma.f32	s9, s14, s8
 80145f6:	eeb0 7a42 	vmov.f32	s14, s4
 80145fa:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80145fe:	ee81 4a24 	vdiv.f32	s8, s2, s9
 8014602:	ee75 4aa0 	vadd.f32	s9, s11, s1
 8014606:	eeb0 1a67 	vmov.f32	s2, s15
 801460a:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801460e:	eef0 4a67 	vmov.f32	s9, s15
 8014612:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8014616:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801461a:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801461e:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8014622:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
 8014626:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 801462a:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 801462e:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8014632:	ee24 4a06 	vmul.f32	s8, s8, s12
 8014636:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
 801463a:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801463e:	ee25 5a25 	vmul.f32	s10, s10, s11
 8014642:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
 8014646:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801464a:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
 801464e:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8014652:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8014656:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801465a:	eee5 9a88 	vfma.f32	s19, s11, s16
 801465e:	eeb0 8a67 	vmov.f32	s16, s15
 8014662:	eee1 8a09 	vfma.f32	s17, s2, s18
 8014666:	eeb0 9a67 	vmov.f32	s18, s15
 801466a:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801466e:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8014672:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8014676:	ee75 9aa0 	vadd.f32	s19, s11, s1
 801467a:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801467e:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8014682:	eec2 5a09 	vdiv.f32	s11, s4, s18
 8014686:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801468a:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801468e:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8014692:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8014696:	eea1 9a25 	vfma.f32	s18, s2, s11
 801469a:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801469e:	eee1 aaa2 	vfma.f32	s21, s3, s5
 80146a2:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80146a6:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80146aa:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80146ae:	ee89 2a28 	vdiv.f32	s4, s18, s17
 80146b2:	eec7 5a88 	vdiv.f32	s11, s15, s16
 80146b6:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80146ba:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80146be:	ee31 1a20 	vadd.f32	s2, s2, s1
 80146c2:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80146c6:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80146ca:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80146ce:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80146d2:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80146d6:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80146da:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80146de:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80146e2:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80146e6:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80146ea:	eeaa aa87 	vfma.f32	s20, s21, s14
 80146ee:	ee68 aa07 	vmul.f32	s21, s16, s14
 80146f2:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80146f6:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80146fa:	eeea 5a82 	vfma.f32	s11, s21, s4
 80146fe:	eeb0 1a65 	vmov.f32	s2, s11
 8014702:	eef0 5a45 	vmov.f32	s11, s10
 8014706:	eeea 5a89 	vfma.f32	s11, s21, s18
 801470a:	eee1 5a27 	vfma.f32	s11, s2, s15
 801470e:	ee35 1a09 	vadd.f32	s2, s10, s18
 8014712:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8014716:	ee66 9a87 	vmul.f32	s19, s13, s14
 801471a:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801471e:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8014722:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8014726:	eee1 5a06 	vfma.f32	s11, s2, s12
 801472a:	eeb0 1a66 	vmov.f32	s2, s13
 801472e:	eea9 1a89 	vfma.f32	s2, s19, s18
 8014732:	eea2 1a27 	vfma.f32	s2, s4, s15
 8014736:	ee34 2a04 	vadd.f32	s4, s8, s8
 801473a:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801473e:	eeb0 2a41 	vmov.f32	s4, s2
 8014742:	eea0 4aa7 	vfma.f32	s8, s1, s15
 8014746:	eea4 2a06 	vfma.f32	s4, s8, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
 801474a:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 801474e:	eef4 5a44 	vcmp.f32	s11, s8
 8014752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8014756:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801475a:	bf14      	ite	ne
 801475c:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
 8014760:	eddf 5a42 	vldreq	s11, [pc, #264]	; 801486c <tDiodeFilter_tick+0x2fc>
    if (t1 == 0.0f)
 8014764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8014768:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
 801476c:	d069      	beq.n	8014842 <tDiodeFilter_tick+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 801476e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014772:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8014776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801477a:	ee37 2a02 	vadd.f32	s4, s14, s4
 801477e:	d069      	beq.n	8014854 <tDiodeFilter_tick+0x2e4>
 8014780:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014784:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8014788:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
 801478c:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8014790:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
 8014794:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
 8014798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 801479c:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
 80147a0:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
 80147a4:	bf08      	it	eq
 80147a6:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 801486c <tDiodeFilter_tick+0x2fc>
    return tanhf(y3*f->r);
 80147aa:	eeb0 0a61 	vmov.f32	s0, s3
 80147ae:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80147b2:	ee38 4a06 	vadd.f32	s8, s16, s12
 80147b6:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 80147ba:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80147be:	eed4 8a20 	vfnms.f32	s17, s8, s1
 80147c2:	eea6 8a20 	vfma.f32	s16, s12, s1
 80147c6:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 80147ca:	ee95 8a84 	vfnms.f32	s16, s11, s8
 80147ce:	eee7 1a84 	vfma.f32	s3, s15, s8
 80147d2:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80147d6:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80147da:	ee35 2ac4 	vsub.f32	s4, s11, s8
 80147de:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80147e2:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 80147e6:	ee74 1a60 	vsub.f32	s3, s8, s1
 80147ea:	ee61 1a86 	vmul.f32	s3, s3, s12
 80147ee:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80147f2:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80147f6:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80147fa:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80147fe:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8014802:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8014806:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 801480a:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 801480e:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8014812:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8014816:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 801481a:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 801481e:	eee2 4a05 	vfma.f32	s9, s4, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8014822:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8014826:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 801482a:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 801482e:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8014832:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8014836:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
 801483a:	ecbd 8b06 	vpop	{d8-d10}
    return tanhf(y3*f->r);
 801483e:	f006 b91f 	b.w	801aa80 <tanhf>
    if (t2 == 0.0f)
 8014842:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014846:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8014870 <tDiodeFilter_tick+0x300>
        t1 = 0.000001f;
 801484a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801486c <tDiodeFilter_tick+0x2fc>
    if (t2 == 0.0f)
 801484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014852:	d195      	bne.n	8014780 <tDiodeFilter_tick+0x210>
 8014854:	eddf 5a06 	vldr	s11, [pc, #24]	; 8014870 <tDiodeFilter_tick+0x300>
        t2 = 0.000001f;
 8014858:	eddf 7a04 	vldr	s15, [pc, #16]	; 801486c <tDiodeFilter_tick+0x2fc>
 801485c:	e794      	b.n	8014788 <tDiodeFilter_tick+0x218>
 801485e:	bf00      	nop
 8014860:	43d20000 	.word	0x43d20000
 8014864:	446c4000 	.word	0x446c4000
 8014868:	42d20000 	.word	0x42d20000
 801486c:	358637bd 	.word	0x358637bd
 8014870:	3f800008 	.word	0x3f800008

08014874 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
float   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
 8014874:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8014876:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801487a:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8014b64 <tDiodeFilter_tickEfficient+0x2f0>
 801487e:	eddf 7aba 	vldr	s15, [pc, #744]	; 8014b68 <tDiodeFilter_tickEfficient+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8014882:	eddf 0aba 	vldr	s1, [pc, #744]	; 8014b6c <tDiodeFilter_tickEfficient+0x2f8>
 8014886:	eeb0 1a67 	vmov.f32	s2, s15
{
 801488a:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801488e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8014892:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8014896:	edd3 1a03 	vldr	s3, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801489a:	eeb0 9a42 	vmov.f32	s18, s4
    float ih = 0.5f * (in + f->zi);
 801489e:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80148a2:	eef0 9a42 	vmov.f32	s19, s4
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80148a6:	ee26 7ae1 	vnmul.f32	s14, s13, s3
 80148aa:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
 80148ae:	ee70 4a24 	vadd.f32	s9, s0, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80148b2:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
 80148b6:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80148ba:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80148be:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80148c2:	eea4 7a84 	vfma.f32	s14, s9, s8
 80148c6:	ed93 5a02 	vldr	s10, [r3, #8]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80148ca:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80148ce:	ee73 5ac3 	vsub.f32	s11, s7, s6
 80148d2:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80148d6:	ee27 7a22 	vmul.f32	s14, s14, s5
 80148da:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
 80148de:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80148e2:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80148e6:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80148ea:	ee77 4a20 	vadd.f32	s9, s14, s1
 80148ee:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80148f2:	eef0 4a67 	vmov.f32	s9, s15
 80148f6:	eee7 4a04 	vfma.f32	s9, s14, s8
 80148fa:	eeb0 7a42 	vmov.f32	s14, s4
 80148fe:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8014902:	ee81 4a24 	vdiv.f32	s8, s2, s9
 8014906:	ee75 4aa0 	vadd.f32	s9, s11, s1
 801490a:	eeb0 1a67 	vmov.f32	s2, s15
 801490e:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8014912:	eef0 4a67 	vmov.f32	s9, s15
 8014916:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801491a:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801491e:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8014922:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8014926:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
 801492a:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 801492e:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8014932:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8014936:	ee24 4a06 	vmul.f32	s8, s8, s12
 801493a:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
 801493e:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8014942:	ee25 5a25 	vmul.f32	s10, s10, s11
 8014946:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
 801494a:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801494e:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
 8014952:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8014956:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 801495a:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801495e:	eee5 9a88 	vfma.f32	s19, s11, s16
 8014962:	eeb0 8a67 	vmov.f32	s16, s15
 8014966:	eee1 8a09 	vfma.f32	s17, s2, s18
 801496a:	eeb0 9a67 	vmov.f32	s18, s15
 801496e:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8014972:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8014976:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801497a:	ee75 9aa0 	vadd.f32	s19, s11, s1
 801497e:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8014982:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8014986:	eec2 5a09 	vdiv.f32	s11, s4, s18
 801498a:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801498e:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8014992:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8014996:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801499a:	eea1 9a25 	vfma.f32	s18, s2, s11
 801499e:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80149a2:	eee1 aaa2 	vfma.f32	s21, s3, s5
 80149a6:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80149aa:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80149ae:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80149b2:	ee89 2a28 	vdiv.f32	s4, s18, s17
 80149b6:	eec7 5a88 	vdiv.f32	s11, s15, s16
 80149ba:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80149be:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80149c2:	ee31 1a20 	vadd.f32	s2, s2, s1
 80149c6:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80149ca:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80149ce:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80149d2:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80149d6:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80149da:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80149de:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80149e2:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80149e6:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80149ea:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80149ee:	eeaa aa87 	vfma.f32	s20, s21, s14
 80149f2:	ee68 aa07 	vmul.f32	s21, s16, s14
 80149f6:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80149fa:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80149fe:	eeea 5a82 	vfma.f32	s11, s21, s4
 8014a02:	eeb0 1a65 	vmov.f32	s2, s11
 8014a06:	eef0 5a45 	vmov.f32	s11, s10
 8014a0a:	eeea 5a89 	vfma.f32	s11, s21, s18
 8014a0e:	eee1 5a27 	vfma.f32	s11, s2, s15
 8014a12:	ee35 1a09 	vadd.f32	s2, s10, s18
 8014a16:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8014a1a:	ee66 9a87 	vmul.f32	s19, s13, s14
 8014a1e:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8014a22:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8014a26:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8014a2a:	eee1 5a06 	vfma.f32	s11, s2, s12
 8014a2e:	eeb0 1a66 	vmov.f32	s2, s13
 8014a32:	eea9 1a89 	vfma.f32	s2, s19, s18
 8014a36:	eea2 1a27 	vfma.f32	s2, s4, s15
 8014a3a:	ee34 2a04 	vadd.f32	s4, s8, s8
 8014a3e:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8014a42:	eeb0 2a41 	vmov.f32	s4, s2
 8014a46:	eea0 4aa7 	vfma.f32	s8, s1, s15
 8014a4a:	eea4 2a06 	vfma.f32	s4, s8, s12
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
 8014a4e:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 8014a52:	eef4 5a44 	vcmp.f32	s11, s8
 8014a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8014a5a:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8014a5e:	bf14      	ite	ne
 8014a60:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
 8014a64:	eddf 5a42 	vldreq	s11, [pc, #264]	; 8014b70 <tDiodeFilter_tickEfficient+0x2fc>
    if (t1 == 0.0f)
 8014a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8014a6c:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
 8014a70:	d069      	beq.n	8014b46 <tDiodeFilter_tickEfficient+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 8014a72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014a76:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8014a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a7e:	ee37 2a02 	vadd.f32	s4, s14, s4
 8014a82:	d069      	beq.n	8014b58 <tDiodeFilter_tickEfficient+0x2e4>
 8014a84:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8014a88:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8014a8c:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));

    f->zi = in;
 8014a90:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8014a94:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
 8014a98:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
 8014a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8014aa0:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
 8014aa4:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
 8014aa8:	bf08      	it	eq
 8014aaa:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 8014b70 <tDiodeFilter_tickEfficient+0x2fc>
    return LEAF_tanh(y3*f->r);
 8014aae:	eeb0 0a61 	vmov.f32	s0, s3
 8014ab2:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8014ab6:	ee38 4a06 	vadd.f32	s8, s16, s12
 8014aba:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8014abe:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8014ac2:	eed4 8a20 	vfnms.f32	s17, s8, s1
 8014ac6:	eea6 8a20 	vfma.f32	s16, s12, s1
 8014aca:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8014ace:	ee95 8a84 	vfnms.f32	s16, s11, s8
 8014ad2:	eee7 1a84 	vfma.f32	s3, s15, s8
 8014ad6:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8014ada:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8014ade:	ee35 2ac4 	vsub.f32	s4, s11, s8
 8014ae2:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8014ae6:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8014aea:	ee74 1a60 	vsub.f32	s3, s8, s1
 8014aee:	ee61 1a86 	vmul.f32	s3, s3, s12
 8014af2:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8014af6:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8014afa:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8014afe:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8014b02:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8014b06:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8014b0a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8014b0e:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8014b12:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8014b16:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8014b1a:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8014b1e:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8014b22:	eee2 4a05 	vfma.f32	s9, s4, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8014b26:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8014b2a:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8014b2e:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8014b32:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8014b36:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8014b3a:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
 8014b3e:	ecbd 8b06 	vpop	{d8-d10}
    return LEAF_tanh(y3*f->r);
 8014b42:	f000 bad1 	b.w	80150e8 <LEAF_tanh>
    if (t2 == 0.0f)
 8014b46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014b4a:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8014b74 <tDiodeFilter_tickEfficient+0x300>
        t1 = 0.000001f;
 8014b4e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8014b70 <tDiodeFilter_tickEfficient+0x2fc>
    if (t2 == 0.0f)
 8014b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b56:	d195      	bne.n	8014a84 <tDiodeFilter_tickEfficient+0x210>
 8014b58:	eddf 5a06 	vldr	s11, [pc, #24]	; 8014b74 <tDiodeFilter_tickEfficient+0x300>
        t2 = 0.000001f;
 8014b5c:	eddf 7a04 	vldr	s15, [pc, #16]	; 8014b70 <tDiodeFilter_tickEfficient+0x2fc>
 8014b60:	e794      	b.n	8014a8c <tDiodeFilter_tickEfficient+0x218>
 8014b62:	bf00      	nop
 8014b64:	43d20000 	.word	0x43d20000
 8014b68:	446c4000 	.word	0x446c4000
 8014b6c:	42d20000 	.word	0x42d20000
 8014b70:	358637bd 	.word	0x358637bd
 8014b74:	3f800008 	.word	0x3f800008

08014b78 <tDiodeFilter_setFreqFast>:
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, float cutoff)
{
	_tDiodeFilter* f = *vf;
    int intVer = (int)cutoff;
 8014b78:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014b7c:	4b0d      	ldr	r3, [pc, #52]	; (8014bb4 <tDiodeFilter_setFreqFast+0x3c>)
 8014b7e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tDiodeFilter* f = *vf;
 8014b82:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
 8014b84:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
 8014b88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014b8c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014b90:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 8014b94:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014b98:	edd0 6a01 	vldr	s13, [r0, #4]
 8014b9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014ba0:	ed90 7a00 	vldr	s14, [r0]
 8014ba4:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014ba8:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014bac:	ed81 0a02 	vstr	s0, [r1, #8]
}
 8014bb0:	4770      	bx	lr
 8014bb2:	bf00      	nop
 8014bb4:	0801c894 	.word	0x0801c894

08014bb8 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, float resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 8014bb8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014bbc:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8014bc0:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8014bc4:	eef0 0a67 	vmov.f32	s1, s15
{
 8014bc8:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 8014bca:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 8014bcc:	eee0 0a07 	vfma.f32	s1, s0, s14
 8014bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8014bd4:	f000 fa74 	bl	80150c0 <LEAF_clip>
 8014bd8:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8014bdc:	bd10      	pop	{r4, pc}
 8014bde:	bf00      	nop

08014be0 <tLadderFilter_init>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}


void    tLadderFilter_init           (tLadderFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
 8014be0:	b570      	push	{r4, r5, r6, lr}
 8014be2:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014be6:	698d      	ldr	r5, [r1, #24]
{
 8014be8:	eef0 8a40 	vmov.f32	s17, s0
 8014bec:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8014bee:	2038      	movs	r0, #56	; 0x38
 8014bf0:	4629      	mov	r1, r5
{
 8014bf2:	eeb0 8a60 	vmov.f32	s16, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8014bf6:	f000 fbe7 	bl	80153c8 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->oversampling = 1;
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8014bfa:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014c5c <tLadderFilter_init+0x7c>
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8014bfe:	6030      	str	r0, [r6, #0]
    f->oversampling = 1;
 8014c00:	2301      	movs	r3, #1
    f->mempool = m;
 8014c02:	6005      	str	r5, [r0, #0]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8014c04:	ee68 7aa7 	vmul.f32	s15, s17, s15
    f->invSampleRate = leaf->invSampleRate;
 8014c08:	686a      	ldr	r2, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8014c0a:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
 8014c0c:	ed92 7a01 	vldr	s14, [r2, #4]
    f->cutoff = cutoff;
 8014c10:	edc0 8a01 	vstr	s17, [r0, #4]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8014c14:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->oversampling = 1;
 8014c18:	60c3      	str	r3, [r0, #12]
    f->invSampleRate = leaf->invSampleRate;
 8014c1a:	ed80 7a02 	vstr	s14, [r0, #8]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8014c1e:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8014c22:	f005 fbcd 	bl	801a3c0 <tan>
 8014c26:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 8014c2a:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 8014c2e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
 8014c32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
 8014c36:	490a      	ldr	r1, [pc, #40]	; (8014c60 <tLadderFilter_init+0x80>)
    f->c2 = 2.0f * f->c;
 8014c38:	ee70 7a00 	vadd.f32	s15, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
 8014c3c:	4b09      	ldr	r3, [pc, #36]	; (8014c64 <tLadderFilter_init+0x84>)
    f->fb = (resonance * 8.0f);
 8014c3e:	ee28 8a20 	vmul.f32	s16, s16, s1
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8014c42:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a = 2.0f;
 8014c46:	61e0      	str	r0, [r4, #28]
    f->s = 0.1f;
 8014c48:	6221      	str	r1, [r4, #32]
    f->d = 1.0f;
 8014c4a:	6262      	str	r2, [r4, #36]	; 0x24
    f->c2 = 2.0f * f->c;
 8014c4c:	edc4 7a06 	vstr	s15, [r4, #24]
    f->fb = (resonance * 8.0f);
 8014c50:	ed84 8a05 	vstr	s16, [r4, #20]
    f->b[0] = 0.04f;
 8014c54:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8014c56:	ecbd 8b02 	vpop	{d8}
 8014c5a:	bd70      	pop	{r4, r5, r6, pc}
 8014c5c:	40490fdb 	.word	0x40490fdb
 8014c60:	3dcccccd 	.word	0x3dcccccd
 8014c64:	3d23d70a 	.word	0x3d23d70a

08014c68 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

float   tLadderFilter_tick               (tLadderFilter* const vf, float in)
{
    _tLadderFilter* f = *vf;
 8014c68:	6802      	ldr	r2, [r0, #0]
    
    float y3 = 0.0f;
    in += 0.015f;
 8014c6a:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8014ea8 <tLadderFilter_tick+0x240>
{
 8014c6e:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 8014c72:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
 8014c74:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
 8014c78:	2900      	cmp	r1, #0
 8014c7a:	f340 8110 	ble.w	8014e9e <tLadderFilter_tick+0x236>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8014c7e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        float g0 = 1.0f / (1.0f + f->c*t0);
 8014c82:	ed92 5a04 	vldr	s10, [r2, #16]
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8014c86:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    float  x2 = smoothABS (x-b, 0.01f);
 8014c8a:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        float z1 = f->c*t1 / (1.0f + f->c*t1);
        float z2 = f->c*t2 / (1.0f + f->c*t2);
        float z3 = f->c*t3 / (1.0f + f->c*t3);
        
        float f3 = f->c       * t2*g3;
        float f2 = f->c*f->c     * t1*g2 * t2*g3;
 8014c8e:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8014c92:	ed92 7a08 	vldr	s14, [r2, #32]
 8014c96:	ee72 2a27 	vadd.f32	s5, s4, s15
 8014c9a:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        float estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
 8014c9e:	ee65 aa00 	vmul.f32	s21, s10, s0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8014ca2:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8014ca6:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8014caa:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        float f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 8014cae:	ee25 9a28 	vmul.f32	s18, s10, s17
 8014cb2:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8014cb6:	ee62 2a87 	vmul.f32	s5, s5, s14
 8014cba:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8014cbe:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
 8014cc2:	2300      	movs	r3, #0
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
 8014cc4:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8014cc8:	ed9f 8a78 	vldr	s16, [pc, #480]	; 8014eac <tLadderFilter_tick+0x244>
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8014ccc:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
 8014cd0:	3301      	adds	r3, #1
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 8014cd2:	ee31 6a23 	vadd.f32	s12, s2, s7
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 8014cd6:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
 8014cda:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8014cdc:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8014ce0:	ee26 6a06 	vmul.f32	s12, s12, s12
 8014ce4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8014ce8:	ee22 baa5 	vmul.f32	s22, s5, s11
 8014cec:	ee26 ca22 	vmul.f32	s24, s12, s5
 8014cf0:	ee72 5a25 	vadd.f32	s11, s4, s11
 8014cf4:	ee32 6a06 	vadd.f32	s12, s4, s12
 8014cf8:	ee66 baa2 	vmul.f32	s23, s13, s5
 8014cfc:	eecb ea25 	vdiv.f32	s29, s22, s11
 8014d00:	ee8c ba06 	vdiv.f32	s22, s24, s12
 8014d04:	ee72 6a26 	vadd.f32	s13, s4, s13
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 8014d08:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8014d0c:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
 8014d10:	ee27 7a07 	vmul.f32	s14, s14, s14
 8014d14:	ee77 eaee 	vsub.f32	s29, s15, s29
 8014d18:	ee77 6acb 	vsub.f32	s13, s15, s22
 8014d1c:	ee62 5a87 	vmul.f32	s11, s5, s14
 8014d20:	ee32 7a07 	vadd.f32	s14, s4, s14
        float g1 = 1.0f / (1.0f + f->c*t1);
 8014d24:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8014d28:	ee85 ca87 	vdiv.f32	s24, s11, s14
        float g0 = 1.0f / (1.0f + f->c*t0);
 8014d2c:	ee65 5a2e 	vmul.f32	s11, s10, s29
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8014d30:	ee37 7ac6 	vsub.f32	s14, s15, s12
        float g1 = 1.0f / (1.0f + f->c*t1);
 8014d34:	ee3e da27 	vadd.f32	s26, s28, s15
        float g0 = 1.0f / (1.0f + f->c*t0);
 8014d38:	ee35 6aa7 	vadd.f32	s12, s11, s15
        float g2 = 1.0f / (1.0f + f->c*t2);
 8014d3c:	ee65 ca07 	vmul.f32	s25, s10, s14
        float z0 = f->c*t0 / (1.0f + f->c*t0);
 8014d40:	eec5 ba86 	vdiv.f32	s23, s11, s12
        float z1 = f->c*t1 / (1.0f + f->c*t1);
 8014d44:	eece 5a0d 	vdiv.f32	s11, s28, s26
        float g2 = 1.0f / (1.0f + f->c*t2);
 8014d48:	ee7c daa7 	vadd.f32	s27, s25, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8014d4c:	ee37 cacc 	vsub.f32	s24, s15, s24
        float g0 = 1.0f / (1.0f + f->c*t0);
 8014d50:	ee87 fa86 	vdiv.f32	s30, s15, s12
        float z2 = f->c*t2 / (1.0f + f->c*t2);
 8014d54:	ee8c eaad 	vdiv.f32	s28, s25, s27
        float g3 = 1.0f / (1.0f + f->c*t3);
 8014d58:	ee25 ba0c 	vmul.f32	s22, s10, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8014d5c:	ee6b baa5 	vmul.f32	s23, s23, s11
        float g1 = 1.0f / (1.0f + f->c*t1);
 8014d60:	ee87 6a8d 	vdiv.f32	s12, s15, s26
        float g3 = 1.0f / (1.0f + f->c*t3);
 8014d64:	ee7b 5a27 	vadd.f32	s11, s22, s15
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8014d68:	ee6b baa0 	vmul.f32	s23, s23, s1
        float g2 = 1.0f / (1.0f + f->c*t2);
 8014d6c:	ee87 daad 	vdiv.f32	s26, s15, s27
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8014d70:	ee6b ba8e 	vmul.f32	s23, s23, s28
        float z3 = f->c*t3 / (1.0f + f->c*t3);
 8014d74:	eecb da25 	vdiv.f32	s27, s22, s11
        float g3 = 1.0f / (1.0f + f->c*t3);
 8014d78:	ee87 eaa5 	vdiv.f32	s28, s15, s11
        float estimate =
 8014d7c:	ee73 5a2a 	vadd.f32	s11, s6, s21
 8014d80:	ee27 ba26 	vmul.f32	s22, s14, s13
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8014d84:	ee66 6a26 	vmul.f32	s13, s12, s13
 8014d88:	ee65 5a89 	vmul.f32	s11, s11, s18
 8014d8c:	ee2b ba06 	vmul.f32	s22, s22, s12
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8014d90:	ee2f 6a2e 	vmul.f32	s12, s30, s29
 8014d94:	ee65 5aae 	vmul.f32	s11, s11, s29
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8014d98:	ee2d 7a07 	vmul.f32	s14, s26, s14
 8014d9c:	ee65 5a8f 	vmul.f32	s11, s11, s30
 8014da0:	ee60 ea8e 	vmul.f32	s29, s1, s28
 8014da4:	eee3 5aa8 	vfma.f32	s11, s7, s17
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8014da8:	ee2e ca0c 	vmul.f32	s24, s28, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8014dac:	eeb0 ea67 	vmov.f32	s28, s15
 8014db0:	eeab eaad 	vfma.f32	s28, s23, s27
 8014db4:	ee6b 5a25 	vmul.f32	s11, s22, s11
    float  x1 = smoothABS (x-a, 0.01f);
 8014db8:	eeb0 ba67 	vmov.f32	s22, s15
 8014dbc:	eeec 5a84 	vfma.f32	s11, s25, s8
 8014dc0:	eef0 ca64 	vmov.f32	s25, s9
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8014dc4:	eec9 ba8e 	vdiv.f32	s23, s19, s28
 8014dc8:	eeed ca25 	vfma.f32	s25, s26, s11
    float  x2 = smoothABS (x-b, 0.01f);
 8014dcc:	eef0 5a4a 	vmov.f32	s11, s20
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8014dd0:	eeb0 da48 	vmov.f32	s26, s16
    float  x1 = smoothABS (x-a, 0.01f);
 8014dd4:	eeac baae 	vfma.f32	s22, s25, s29
    float  x2 = smoothABS (x-b, 0.01f);
 8014dd8:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8014ddc:	eef0 ca48 	vmov.f32	s25, s16
 8014de0:	eeab da0b 	vfma.f32	s26, s22, s22
 8014de4:	eee5 caa5 	vfma.f32	s25, s11, s11
 8014de8:	eef1 5acd 	vsqrt.f32	s11, s26
 8014dec:	eeb1 baec 	vsqrt.f32	s22, s25
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8014df0:	ee3b ba65 	vsub.f32	s22, s22, s11
 8014df4:	eef0 5a40 	vmov.f32	s11, s0
 8014df8:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8014dfc:	eeb0 ba43 	vmov.f32	s22, s6
 8014e00:	eea5 ba25 	vfma.f32	s22, s10, s11
 8014e04:	ee26 6a0b 	vmul.f32	s12, s12, s22
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8014e08:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
 8014e0c:	ee75 5ac6 	vsub.f32	s11, s11, s12
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8014e10:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
 8014e14:	eea1 3aa5 	vfma.f32	s6, s3, s11
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8014e18:	eef0 5a44 	vmov.f32	s11, s8
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8014e1c:	ee66 6a8b 	vmul.f32	s13, s13, s22
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8014e20:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
 8014e24:	ee36 6a66 	vsub.f32	s12, s12, s13
 8014e28:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8014e2c:	eeb0 6a64 	vmov.f32	s12, s9
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8014e30:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8014e34:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
 8014e38:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8014e3c:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8014e40:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
 8014e44:	ee37 7a4c 	vsub.f32	s14, s14, s24
 8014e48:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
 8014e4c:	f47f af3e 	bne.w	8014ccc <tLadderFilter_tick+0x64>
 8014e50:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
 8014e54:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
 8014e58:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
 8014e5c:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8014e60:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8014eac <tLadderFilter_tick+0x244>
    float  x2 = smoothABS (x-b, 0.01f);
 8014e64:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8014e68:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8014e6c:	eef0 5a47 	vmov.f32	s11, s14
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8014e70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8014e74:	eee0 5aa0 	vfma.f32	s11, s1, s1
    float  x2 = smoothABS (x-b, 0.01f);
 8014e78:	ee70 0ae6 	vsub.f32	s1, s1, s13
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8014e7c:	eea0 7aa0 	vfma.f32	s14, s1, s1
 8014e80:	eef1 7ae5 	vsqrt.f32	s15, s11
 8014e84:	eef1 5ac7 	vsqrt.f32	s11, s14
    x = x - x2;
 8014e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014e8c:	ee77 7ae5 	vsub.f32	s15, s15, s11
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8014e90:	eea7 0a86 	vfma.f32	s0, s15, s12
    return y3 * compensation;
}
 8014e94:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8014e98:	ecbd 8b10 	vpop	{d8-d15}
 8014e9c:	4770      	bx	lr
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8014e9e:	edd2 0a05 	vldr	s1, [r2, #20]
    float y3 = 0.0f;
 8014ea2:	ed9f ca03 	vldr	s24, [pc, #12]	; 8014eb0 <tLadderFilter_tick+0x248>
 8014ea6:	e7db      	b.n	8014e60 <tLadderFilter_tick+0x1f8>
 8014ea8:	3c75c28f 	.word	0x3c75c28f
 8014eac:	3c23d70a 	.word	0x3c23d70a
 8014eb0:	00000000 	.word	0x00000000

08014eb4 <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, float cutoff)
{
    _tLadderFilter* f = *vf;
    int intVer = (int)cutoff;
 8014eb4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014eb8:	4b0f      	ldr	r3, [pc, #60]	; (8014ef8 <tLadderFilter_setFreqFast+0x44>)
 8014eba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tLadderFilter* f = *vf;
 8014ebe:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
 8014ec0:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
 8014ec4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014ec8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014ecc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 8014ed0:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014ed4:	edd0 6a01 	vldr	s13, [r0, #4]
 8014ed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014edc:	ed90 7a00 	vldr	s14, [r0]
 8014ee0:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014ee4:	eea7 0a27 	vfma.f32	s0, s14, s15
    f->c2 = 2.0f * f->c;
 8014ee8:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8014eec:	ed81 0a04 	vstr	s0, [r1, #16]
    f->c2 = 2.0f * f->c;
 8014ef0:	edc1 7a06 	vstr	s15, [r1, #24]
}
 8014ef4:	4770      	bx	lr
 8014ef6:	bf00      	nop
 8014ef8:	0801c894 	.word	0x0801c894

08014efc <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, float resonance)
{
 8014efc:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
 8014efe:	6804      	ldr	r4, [r0, #0]
{
 8014f00:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 8014f04:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8014f08:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014f18 <tLadderFilter_setQ+0x1c>
 8014f0c:	f000 f8d8 	bl	80150c0 <LEAF_clip>
 8014f10:	ed84 0a05 	vstr	s0, [r4, #20]
}
 8014f14:	bd10      	pop	{r4, pc}
 8014f16:	bf00      	nop
 8014f18:	3e4ccccd 	.word	0x3e4ccccd

08014f1c <fastertanf>:
    return fResult;
}

float fastertanf(float fAngle)
{
    float fASqr = fAngle*fAngle;
 8014f1c:	ee60 6a00 	vmul.f32	s13, s0, s0
    float fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
 8014f20:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8014f3c <fastertanf+0x20>
 8014f24:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014f40 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
 8014f28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
 8014f2c:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
 8014f30:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
 8014f34:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop
 8014f3c:	3e502de0 	.word	0x3e502de0
 8014f40:	3ea295ea 	.word	0x3ea295ea

08014f44 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8014f44:	ee10 2a10 	vmov	r2, s0
 8014f48:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 8014f4c:	4b0d      	ldr	r3, [pc, #52]	; (8014f84 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8014f4e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8014f52:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8014f56:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014f5a:	ee00 3a10 	vmov	s0, r3
 8014f5e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014f62:	eea0 7a67 	vfms.f32	s14, s0, s15
 8014f66:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 8014f6a:	ee10 3a10 	vmov	r3, s0
 8014f6e:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 8014f72:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 8014f76:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 8014f7a:	336e      	adds	r3, #110	; 0x6e
}
 8014f7c:	ee00 3a10 	vmov	s0, r3
 8014f80:	4770      	bx	lr
 8014f82:	bf00      	nop
 8014f84:	5f3759df 	.word	0x5f3759df

08014f88 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 8014f88:	ee10 3a10 	vmov	r3, s0
 8014f8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014f90:	ee00 3a10 	vmov	s0, r3
}
 8014f94:	4770      	bx	lr
 8014f96:	bf00      	nop

08014f98 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline float fasterexpf(float x) {
    x = 1.0f + (x * 0.00390625f);
 8014f98:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014f9c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8014fc8 <fasterexpf+0x30>
 8014fa0:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 8014fa4:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8014fa8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014fac:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014fb0:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8014fb4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014fb8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014fbc:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
 8014fc0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014fc4:	4770      	bx	lr
 8014fc6:	bf00      	nop
 8014fc8:	3b800000 	.word	0x3b800000

08014fcc <fastPowf>:
    { 
        float d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 8014fcc:	ee10 3a10 	vmov	r3, s0
 8014fd0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8014ff4 <fastPowf+0x28>
 8014fd4:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8014fd8:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
 8014fdc:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8014fe0:	330b      	adds	r3, #11
 8014fe2:	ee07 3a90 	vmov	s15, r3
 8014fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014fea:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
 8014fee:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
 8014ff2:	4770      	bx	lr
 8014ff4:	4e7de250 	.word	0x4e7de250

08014ff8 <LEAF_shaper>:
    if (min > max)
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
 8014ff8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8015078 <LEAF_shaper+0x80>
 8014ffc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015004:	d406      	bmi.n	8015014 <LEAF_shaper+0x1c>
    {
        return tempmin;
    }
    else if (val > tempmax)
 8015006:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801507c <LEAF_shaper+0x84>
 801500a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801500e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015012:	dd02      	ble.n	801501a <LEAF_shaper+0x22>
 8015014:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8015080 <LEAF_shaper+0x88>
}
 8015018:	4770      	bx	lr
    float fx = input * 2.0f;    // prescale
 801501a:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 801501e:	ed9f 5a19 	vldr	s10, [pc, #100]	; 8015084 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
 8015022:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    shaperOut *= 0.5f;    // post_scale
 8015026:	ed9f 4a18 	vldr	s8, [pc, #96]	; 8015088 <LEAF_shaper+0x90>
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 801502a:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
    xc2 = xc*xc;
 801502e:	ee60 6a00 	vmul.f32	s13, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8015032:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    c = 0.5f*fx*(3.0f - (xc2));
 8015036:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801503a:	ee20 0a25 	vmul.f32	s0, s0, s11
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 801503e:	eddf 5a13 	vldr	s11, [pc, #76]	; 801508c <LEAF_shaper+0x94>
 8015042:	ee70 0aa4 	vadd.f32	s1, s1, s9
    c = 0.5f*fx*(3.0f - (xc2));
 8015046:	ee77 7ae6 	vsub.f32	s15, s15, s13
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 801504a:	ee66 4aa6 	vmul.f32	s9, s13, s13
 801504e:	ee27 7a66 	vnmul.f32	s14, s14, s13
    c = 0.5f*fx*(3.0f - (xc2));
 8015052:	ee27 0a80 	vmul.f32	s0, s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8015056:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801505a:	eea4 7a85 	vfma.f32	s14, s9, s10
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 801505e:	eef0 7a40 	vmov.f32	s15, s0
    shaperOut *= 0.5f;    // post_scale
 8015062:	ee60 0a84 	vmul.f32	s1, s1, s8
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8015066:	eee6 7aa5 	vfma.f32	s15, s13, s11
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 801506a:	ee37 0a06 	vadd.f32	s0, s14, s12
    shaperOut *= 0.5f;    // post_scale
 801506e:	ee20 0a80 	vmul.f32	s0, s1, s0
 8015072:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return tempmax;
    }
    else
    {
        return val;
 8015076:	4770      	bx	lr
 8015078:	bfb504f3 	.word	0xbfb504f3
 801507c:	3fb504f3 	.word	0x3fb504f3
 8015080:	00000000 	.word	0x00000000
 8015084:	3c800000 	.word	0x3c800000
 8015088:	3f272f05 	.word	0x3f272f05
 801508c:	3d4ccccd 	.word	0x3d4ccccd

08015090 <LEAF_round>:
    rnd = fabsf(rnd);
 8015090:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
 8015094:	eddf 7a06 	vldr	s15, [pc, #24]	; 80150b0 <LEAF_round+0x20>
 8015098:	eef4 0ae7 	vcmpe.f32	s1, s15
 801509c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150a0:	d905      	bls.n	80150ae <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
 80150a2:	eec0 7a20 	vdiv.f32	s15, s0, s1
 80150a6:	feb8 0a67 	vrinta.f32	s0, s15
 80150aa:	ee20 0a20 	vmul.f32	s0, s0, s1
}
 80150ae:	4770      	bx	lr
 80150b0:	33d6bf95 	.word	0x33d6bf95

080150b4 <LEAF_bitwise_xor>:
    return unholy.f;
 80150b4:	ee10 3a10 	vmov	r3, s0
 80150b8:	4043      	eors	r3, r0
 80150ba:	ee00 3a10 	vmov	s0, r3
}
 80150be:	4770      	bx	lr

080150c0 <LEAF_clip>:
    if (min > max)
 80150c0:	eeb4 0ac1 	vcmpe.f32	s0, s2
 80150c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150c8:	dd05      	ble.n	80150d6 <LEAF_clip+0x16>
 80150ca:	eef0 7a40 	vmov.f32	s15, s0
        tempmin = max;
 80150ce:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 80150d2:	eeb0 1a67 	vmov.f32	s2, s15
    if (val < tempmin)
 80150d6:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80150da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150de:	dc01      	bgt.n	80150e4 <LEAF_clip+0x24>
    else if (val > tempmax)
 80150e0:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
}
 80150e4:	4770      	bx	lr
 80150e6:	bf00      	nop

080150e8 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
float LEAF_tanh(float x)
{
    
    if( x < -3.0f )
 80150e8:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 80150ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80150f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150f4:	d418      	bmi.n	8015128 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
 80150f6:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80150fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80150fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015102:	dd02      	ble.n	801510a <LEAF_tanh+0x22>
        return 1.0f;
 8015104:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
 8015108:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 801510a:	ee60 6a00 	vmul.f32	s13, s0, s0
 801510e:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 8015112:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 8015116:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801511a:	eee6 7a86 	vfma.f32	s15, s13, s12
 801511e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8015122:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8015126:	4770      	bx	lr
        return -1.0f;
 8015128:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801512c:	4770      	bx	lr
 801512e:	bf00      	nop

08015130 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
 8015130:	b538      	push	{r3, r4, r5, lr}
    float increment = (end - start) / (float)(size-1);
 8015132:	1e4b      	subs	r3, r1, #1
 8015134:	ee31 1a60 	vsub.f32	s2, s2, s1
    float x = start;
    for (int i = 0; i < size; i++)
 8015138:	2900      	cmp	r1, #0
    float increment = (end - start) / (float)(size-1);
 801513a:	ee07 3a90 	vmov	s15, r3
 801513e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8015142:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (end - start) / (float)(size-1);
 8015146:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
 801514a:	dd16      	ble.n	801517a <LEAF_generate_exp+0x4a>
 801514c:	4604      	mov	r4, r0
 801514e:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8015152:	eeb0 8a60 	vmov.f32	s16, s1
 8015156:	eef0 8a40 	vmov.f32	s17, s0
 801515a:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
 801515e:	eef0 0a48 	vmov.f32	s1, s16
 8015162:	eeb0 0a68 	vmov.f32	s0, s17
 8015166:	f005 faff 	bl	801a768 <powf>
 801516a:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
 801516e:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
 8015172:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8015176:	42a5      	cmp	r5, r4
 8015178:	d1f1      	bne.n	801515e <LEAF_generate_exp+0x2e>
    }
}
 801517a:	ecbd 8b04 	vpop	{d8-d9}
 801517e:	bd38      	pop	{r3, r4, r5, pc}

08015180 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(float* buffer, float start, float end, float center, int size)
{
 8015180:	b538      	push	{r3, r4, r5, lr}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 8015182:	ee31 1a40 	vsub.f32	s2, s2, s0
{
 8015186:	460d      	mov	r5, r1
 8015188:	4604      	mov	r4, r0
 801518a:	ed2d 8b06 	vpush	{d8-d10}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 801518e:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
 8015192:	eef0 8a40 	vmov.f32	s17, s0
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 8015196:	ee81 0a29 	vdiv.f32	s0, s2, s19
 801519a:	f005 f9c1 	bl	801a520 <logf>
    float increment = 1.0 / (float)(size-1);
 801519e:	1e6b      	subs	r3, r5, #1
    float x = 0.0;
    float proportion = 0.0;
    for (int i = 0; i < size; i++)
 80151a0:	2d00      	cmp	r5, #0
    float increment = 1.0 / (float)(size-1);
 80151a2:	ee07 3a90 	vmov	s15, r3
 80151a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80151aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80151ae:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
 80151b2:	dd19      	ble.n	80151e8 <LEAF_generate_table_skew_non_sym+0x68>
 80151b4:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 80151f0 <LEAF_generate_table_skew_non_sym+0x70>
 80151b8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    float x = 0.0;
 80151bc:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 80151f4 <LEAF_generate_table_skew_non_sym+0x74>
 80151c0:	ee20 9a09 	vmul.f32	s18, s0, s18
    {
        proportion = expf (logf(x) / skew);
 80151c4:	eeb0 0a48 	vmov.f32	s0, s16
 80151c8:	f005 f9aa 	bl	801a520 <logf>
 80151cc:	ee20 0a09 	vmul.f32	s0, s0, s18
 80151d0:	f005 f92a 	bl	801a428 <expf>
        buffer[i] = (float)(start + (end - start) * proportion);
 80151d4:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
 80151d8:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (float)(start + (end - start) * proportion);
 80151dc:	eee9 7a80 	vfma.f32	s15, s19, s0
 80151e0:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 80151e4:	42a5      	cmp	r5, r4
 80151e6:	d1ed      	bne.n	80151c4 <LEAF_generate_table_skew_non_sym+0x44>
    }
}
 80151e8:	ecbd 8b06 	vpop	{d8-d10}
 80151ec:	bd38      	pop	{r3, r4, r5, pc}
 80151ee:	bf00      	nop
 80151f0:	bfb8aa3b 	.word	0xbfb8aa3b
 80151f4:	00000000 	.word	0x00000000

080151f8 <LEAF_generate_mtof>:
    }
}


void LEAF_generate_mtof(float* buffer, float startMIDI, float endMIDI, int size)
{
 80151f8:	b538      	push	{r3, r4, r5, lr}
    float increment = 1.0f / (float)(size-1);
 80151fa:	1e4b      	subs	r3, r1, #1
 80151fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    float scalar = (endMIDI-startMIDI);
    for (int i = 0; i < size; i++)
 8015200:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)(size-1);
 8015202:	ee07 3a90 	vmov	s15, r3
 8015206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 801520a:	ed2d 8b0a 	vpush	{d8-d12}
    float increment = 1.0f / (float)(size-1);
 801520e:	eec7 aa27 	vdiv.f32	s21, s14, s15
    float scalar = (endMIDI-startMIDI);
 8015212:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
 8015216:	dd29      	ble.n	801526c <LEAF_generate_mtof+0x74>
    float x = 0.0f;
 8015218:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8015280 <LEAF_generate_mtof+0x88>
 801521c:	eef0 9a40 	vmov.f32	s19, s0
 8015220:	4604      	mov	r4, r0

#define LOGTEN 2.302585092994

float mtof(float f)
{
    if (f <= -1500.0f) return(0);
 8015222:	eddf 8a18 	vldr	s17, [pc, #96]	; 8015284 <LEAF_generate_mtof+0x8c>
 8015226:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
 801522a:	ed9f 8a17 	vldr	s16, [pc, #92]	; 8015288 <LEAF_generate_mtof+0x90>
 801522e:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
 8015232:	ed9f ca16 	vldr	s24, [pc, #88]	; 801528c <LEAF_generate_mtof+0x94>
 8015236:	eddf ba16 	vldr	s23, [pc, #88]	; 8015290 <LEAF_generate_mtof+0x98>
        float midiVal = (x * scalar) + startMIDI;
 801523a:	eeb0 0a69 	vmov.f32	s0, s19
 801523e:	eeaa 0a09 	vfma.f32	s0, s20, s18
float mtof(float f)
 8015242:	e006      	b.n	8015252 <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8015244:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8015248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801524c:	dd11      	ble.n	8015272 <LEAF_generate_mtof+0x7a>
 801524e:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
 8015252:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8015256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801525a:	d8f3      	bhi.n	8015244 <LEAF_generate_mtof+0x4c>
 801525c:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
 8015260:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8015264:	42a5      	cmp	r5, r4
        x += increment;
 8015266:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
 801526a:	d1e6      	bne.n	801523a <LEAF_generate_mtof+0x42>
}
 801526c:	ecbd 8b0a 	vpop	{d8-d12}
 8015270:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8015272:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8015276:	f005 f8d7 	bl	801a428 <expf>
 801527a:	ee60 7a2b 	vmul.f32	s15, s0, s23
 801527e:	e7ef      	b.n	8015260 <LEAF_generate_mtof+0x68>
 8015280:	00000000 	.word	0x00000000
 8015284:	c4bb8000 	.word	0xc4bb8000
 8015288:	44bb6000 	.word	0x44bb6000
 801528c:	3d6c9820 	.word	0x3d6c9820
 8015290:	4102d013 	.word	0x4102d013

08015294 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
 8015294:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (val < tempmin)
 8015298:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80152b8 <LEAF_interpolation_linear+0x24>
 801529c:	fe81 1a67 	vminnm.f32	s2, s2, s15
 80152a0:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    float omAlpha = 1.0f - alpha;
 80152a4:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
 80152a8:	ee61 0a20 	vmul.f32	s1, s2, s1
}
 80152ac:	eee7 0a80 	vfma.f32	s1, s15, s0
 80152b0:	eeb0 0a60 	vmov.f32	s0, s1
 80152b4:	4770      	bx	lr
 80152b6:	bf00      	nop
 80152b8:	00000000 	.word	0x00000000

080152bc <ftom>:
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
}

float ftom(float f)
{
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 80152bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80152c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152c4:	dd0b      	ble.n	80152de <ftom+0x22>
 80152c6:	eddf 7a07 	vldr	s15, [pc, #28]	; 80152e4 <ftom+0x28>
{
 80152ca:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 80152cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80152d0:	f005 f926 	bl	801a520 <logf>
 80152d4:	eddf 7a04 	vldr	s15, [pc, #16]	; 80152e8 <ftom+0x2c>
 80152d8:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 80152dc:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 80152de:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80152ec <ftom+0x30>
}
 80152e2:	4770      	bx	lr
 80152e4:	3dfa7ed2 	.word	0x3dfa7ed2
 80152e8:	418a7fac 	.word	0x418a7fac
 80152ec:	c4bb8000 	.word	0xc4bb8000

080152f0 <fasteratodb>:
float atodb(float a)
{
    return 20.0f*log10f(a);
}
float fasteratodb(float a)
{
 80152f0:	b500      	push	{lr}
 80152f2:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
 80152f4:	eeb0 0ac0 	vabs.f32	s0, s0
 80152f8:	a801      	add	r0, sp, #4
 80152fa:	f004 ffb1 	bl	801a260 <frexpf>
    Y += -4.11852516267426f;
 80152fe:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8015334 <fasteratodb+0x44>
 8015302:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8015338 <fasteratodb+0x48>
    Y += 6.02197014179219f;
 8015306:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801533c <fasteratodb+0x4c>
    Y += -4.11852516267426f;
 801530a:	eee0 6a27 	vfma.f32	s13, s0, s15
    Y += E;
 801530e:	eddd 7a01 	vldr	s15, [sp, #4]
 8015312:	eddf 5a0b 	vldr	s11, [pc, #44]	; 8015340 <fasteratodb+0x50>
 8015316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return 20.0f*log10f_fast(a);
 801531a:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8015344 <fasteratodb+0x54>
    Y += E;
 801531e:	ee77 7ae5 	vsub.f32	s15, s15, s11
    Y += 6.02197014179219f;
 8015322:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
 8015326:	eee0 7a07 	vfma.f32	s15, s0, s14
}
 801532a:	ee27 0a86 	vmul.f32	s0, s15, s12
 801532e:	b003      	add	sp, #12
 8015330:	f85d fb04 	ldr.w	pc, [sp], #4
 8015334:	3f9da1a8 	.word	0x3f9da1a8
 8015338:	c083caf5 	.word	0xc083caf5
 801533c:	40c0b3fb 	.word	0x40c0b3fb
 8015340:	404892e0 	.word	0x404892e0
 8015344:	40c0a8c2 	.word	0x40c0a8c2

08015348 <fastdbtoa>:


float fastdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 8015348:	eddf 7a02 	vldr	s15, [pc, #8]	; 8015354 <fastdbtoa+0xc>
 801534c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015350:	f005 b86a 	b.w	801a428 <expf>
 8015354:	3debc8e3 	.word	0x3debc8e3

08015358 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
 8015358:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801535c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8015388 <fasterdbtoa+0x30>
 8015360:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 8015364:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8015368:	ee20 0a00 	vmul.f32	s0, s0, s0
 801536c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015370:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8015374:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015378:	ee20 0a00 	vmul.f32	s0, s0, s0
 801537c:	ee20 0a00 	vmul.f32	s0, s0, s0

float fasterdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
 8015380:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015384:	4770      	bx	lr
 8015386:	bf00      	nop
 8015388:	39ebc8e3 	.word	0x39ebc8e3

0801538c <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 801538c:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 8015390:	4770      	bx	lr
 8015392:	bf00      	nop

08015394 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 8015394:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8015398:	4770      	bx	lr
 801539a:	bf00      	nop

0801539c <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801539c:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 801539e:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 80153a0:	2510      	movs	r5, #16
    pool->usize  = 0;
 80153a2:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 80153a4:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 80153a6:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
 80153a8:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
 80153aa:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 80153ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80153b0:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 80153b2:	440b      	add	r3, r1
 80153b4:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 80153b6:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 80153ba:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 80153bc:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 80153c0:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 80153c2:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 80153c4:	6183      	str	r3, [r0, #24]
}
 80153c6:	4770      	bx	lr

080153c8 <mpool_alloc>:
{
 80153c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 80153ca:	684a      	ldr	r2, [r1, #4]
{
 80153cc:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 80153ce:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80153d0:	3301      	adds	r3, #1
 80153d2:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 80153d4:	694b      	ldr	r3, [r1, #20]
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d04a      	beq.n	8015470 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80153da:	1dc4      	adds	r4, r0, #7
 80153dc:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 80153e0:	e002      	b.n	80153e8 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 80153e2:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d043      	beq.n	8015470 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 80153e8:	68da      	ldr	r2, [r3, #12]
 80153ea:	42a2      	cmp	r2, r4
 80153ec:	d3f9      	bcc.n	80153e2 <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 80153ee:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80153f0:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 80153f2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80153f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80153f8:	4281      	cmp	r1, r0
 80153fa:	d246      	bcs.n	801548a <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80153fc:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8015400:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8015402:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8015404:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8015406:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8015408:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 801540a:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 801540e:	4429      	add	r1, r5
 8015410:	5111      	str	r1, [r2, r4]
    node->size = size;
 8015412:	60e8      	str	r0, [r5, #12]
    node->next = next;
 8015414:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8015418:	f8dc 2014 	ldr.w	r2, [ip, #20]
 801541c:	429a      	cmp	r2, r3
        pool->head = new_node;
 801541e:	bf08      	it	eq
 8015420:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8015424:	685a      	ldr	r2, [r3, #4]
 8015426:	b10a      	cbz	r2, 801542c <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 8015428:	6899      	ldr	r1, [r3, #8]
 801542a:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 801542c:	689a      	ldr	r2, [r3, #8]
 801542e:	b10a      	cbz	r2, 8015434 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 8015430:	6859      	ldr	r1, [r3, #4]
 8015432:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 8015434:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8015436:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 8015438:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 801543c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015440:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015444:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 8015446:	4422      	add	r2, r4
 8015448:	4402      	add	r2, r0
 801544a:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 801544e:	694a      	ldr	r2, [r1, #20]
 8015450:	42aa      	cmp	r2, r5
 8015452:	dd0b      	ble.n	801546c <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8015454:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 8015456:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8015458:	b14a      	cbz	r2, 801546e <mpool_alloc+0xa6>
 801545a:	1e41      	subs	r1, r0, #1
 801545c:	460a      	mov	r2, r1
 801545e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8015462:	68dc      	ldr	r4, [r3, #12]
 8015464:	3202      	adds	r2, #2
 8015466:	1a12      	subs	r2, r2, r0
 8015468:	4294      	cmp	r4, r2
 801546a:	d8f7      	bhi.n	801545c <mpool_alloc+0x94>
    return node_to_alloc->pool;
 801546c:	6818      	ldr	r0, [r3, #0]
}
 801546e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8015470:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 8015474:	1a9b      	subs	r3, r3, r2
 8015476:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8015478:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 801547c:	bf8c      	ite	hi
 801547e:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8015480:	2100      	movls	r1, #0
 8015482:	f004 fe49 	bl	801a118 <LEAF_internalErrorCallback>
        return NULL;
 8015486:	2000      	movs	r0, #0
}
 8015488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 801548a:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 801548c:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 801548e:	e7c3      	b.n	8015418 <mpool_alloc+0x50>

08015490 <mpool_calloc>:
{
 8015490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8015492:	684a      	ldr	r2, [r1, #4]
{
 8015494:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8015496:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8015498:	3301      	adds	r3, #1
 801549a:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 801549c:	694b      	ldr	r3, [r1, #20]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d044      	beq.n	801552c <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80154a2:	1dc4      	adds	r4, r0, #7
 80154a4:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 80154a8:	e002      	b.n	80154b0 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 80154aa:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d03d      	beq.n	801552c <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 80154b0:	68da      	ldr	r2, [r3, #12]
 80154b2:	42a2      	cmp	r2, r4
 80154b4:	d3f9      	bcc.n	80154aa <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 80154b6:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80154b8:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 80154ba:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80154be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80154c0:	4281      	cmp	r1, r0
 80154c2:	d240      	bcs.n	8015546 <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80154c4:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 80154c8:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 80154ca:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80154cc:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 80154ce:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 80154d0:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 80154d2:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 80154d6:	4429      	add	r1, r5
 80154d8:	5111      	str	r1, [r2, r4]
    node->size = size;
 80154da:	60e8      	str	r0, [r5, #12]
    node->next = next;
 80154dc:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 80154e0:	f8dc 2014 	ldr.w	r2, [ip, #20]
 80154e4:	429a      	cmp	r2, r3
        pool->head = new_node;
 80154e6:	bf08      	it	eq
 80154e8:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 80154ec:	685a      	ldr	r2, [r3, #4]
 80154ee:	b10a      	cbz	r2, 80154f4 <mpool_calloc+0x64>
        node->next->prev = node->prev;
 80154f0:	6899      	ldr	r1, [r3, #8]
 80154f2:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 80154f4:	689a      	ldr	r2, [r3, #8]
 80154f6:	b10a      	cbz	r2, 80154fc <mpool_calloc+0x6c>
        node->prev->next = node->next;
 80154f8:	6859      	ldr	r1, [r3, #4]
 80154fa:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 80154fc:	2200      	movs	r2, #0
    node->prev = NULL;
 80154fe:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8015502:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8015506:	f8dc 000c 	ldr.w	r0, [ip, #12]
 801550a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801550c:	4401      	add	r1, r0
 801550e:	68d8      	ldr	r0, [r3, #12]
 8015510:	4401      	add	r1, r0
 8015512:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 8015516:	68d9      	ldr	r1, [r3, #12]
 8015518:	b131      	cbz	r1, 8015528 <mpool_calloc+0x98>
 801551a:	4610      	mov	r0, r2
 801551c:	6819      	ldr	r1, [r3, #0]
 801551e:	5488      	strb	r0, [r1, r2]
 8015520:	3201      	adds	r2, #1
 8015522:	68d9      	ldr	r1, [r3, #12]
 8015524:	4291      	cmp	r1, r2
 8015526:	d8f9      	bhi.n	801551c <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 8015528:	6818      	ldr	r0, [r3, #0]
}
 801552a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 801552c:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 8015530:	1a9b      	subs	r3, r3, r2
 8015532:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8015534:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8015538:	bf8c      	ite	hi
 801553a:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 801553c:	2100      	movls	r1, #0
 801553e:	f004 fdeb 	bl	801a118 <LEAF_internalErrorCallback>
        return NULL;
 8015542:	2000      	movs	r0, #0
}
 8015544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 8015546:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 8015548:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 801554a:	e7c9      	b.n	80154e0 <mpool_calloc+0x50>

0801554c <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 801554c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 8015550:	699d      	ldr	r5, [r3, #24]
{
 8015552:	4682      	mov	sl, r0
    pool->leaf->allocCount++;
 8015554:	6868      	ldr	r0, [r5, #4]
 8015556:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8015558:	3301      	adds	r3, #1
 801555a:	6483      	str	r3, [r0, #72]	; 0x48
    if (pool->head == NULL)
 801555c:	696b      	ldr	r3, [r5, #20]
 801555e:	b91b      	cbnz	r3, 8015568 <tMempool_init+0x1c>
 8015560:	e063      	b.n	801562a <tMempool_init+0xde>
        node_to_alloc = node_to_alloc->next;
 8015562:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8015564:	2b00      	cmp	r3, #0
 8015566:	d060      	beq.n	801562a <tMempool_init+0xde>
    while (node_to_alloc->size < size_to_alloc)
 8015568:	68dc      	ldr	r4, [r3, #12]
 801556a:	2c17      	cmp	r4, #23
 801556c:	d9f9      	bls.n	8015562 <tMempool_init+0x16>
    node_to_alloc->size = size_to_alloc;
 801556e:	2018      	movs	r0, #24
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8015570:	f1a4 0718 	sub.w	r7, r4, #24
    node_to_alloc->size = size_to_alloc;
 8015574:	60d8      	str	r0, [r3, #12]
    if (leftover > pool->leaf->header_size)
 8015576:	6868      	ldr	r0, [r5, #4]
 8015578:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801557a:	4287      	cmp	r7, r0
 801557c:	d952      	bls.n	8015624 <tMempool_init+0xd8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 801557e:	f8d5 e008 	ldr.w	lr, [r5, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8015582:	f100 0c18 	add.w	ip, r0, #24
 8015586:	f8d3 9004 	ldr.w	r9, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 801558a:	1a3f      	subs	r7, r7, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 801558c:	eba3 040e 	sub.w	r4, r3, lr
                               node_to_alloc->next,
 8015590:	f8d3 8008 	ldr.w	r8, [r3, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8015594:	44a4      	add	ip, r4
        new_node = create_node(&pool->mpool[offset],
 8015596:	eb0e 040c 	add.w	r4, lr, ip
    node->pool = block_location + header_size;
 801559a:	4420      	add	r0, r4
 801559c:	f84e 000c 	str.w	r0, [lr, ip]
    node->size = size;
 80155a0:	60e7      	str	r7, [r4, #12]
    node->next = next;
 80155a2:	e9c4 9801 	strd	r9, r8, [r4, #4]
    if (pool->head == node_to_alloc)
 80155a6:	6968      	ldr	r0, [r5, #20]
 80155a8:	4283      	cmp	r3, r0
        pool->head = new_node;
 80155aa:	bf08      	it	eq
 80155ac:	616c      	streq	r4, [r5, #20]
    if (node->next != NULL)
 80155ae:	6858      	ldr	r0, [r3, #4]
 80155b0:	b108      	cbz	r0, 80155b6 <tMempool_init+0x6a>
        node->next->prev = node->prev;
 80155b2:	689c      	ldr	r4, [r3, #8]
 80155b4:	6084      	str	r4, [r0, #8]
    if (node->prev != NULL)
 80155b6:	6898      	ldr	r0, [r3, #8]
 80155b8:	b108      	cbz	r0, 80155be <tMempool_init+0x72>
        node->prev->next = node->next;
 80155ba:	685c      	ldr	r4, [r3, #4]
 80155bc:	6044      	str	r4, [r0, #4]
    node->next = NULL;
 80155be:	2700      	movs	r7, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80155c0:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 80155c2:	e9c3 7701 	strd	r7, r7, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80155c6:	f8d5 c004 	ldr.w	ip, [r5, #4]
 80155ca:	68e8      	ldr	r0, [r5, #12]
 80155cc:	f8dc 6034 	ldr.w	r6, [ip, #52]	; 0x34
 80155d0:	4430      	add	r0, r6
 80155d2:	4404      	add	r4, r0
 80155d4:	60ec      	str	r4, [r5, #12]
    if (pool->leaf->clearOnAllocation > 0)
 80155d6:	f8dc 0014 	ldr.w	r0, [ip, #20]
 80155da:	42b8      	cmp	r0, r7
 80155dc:	dd0c      	ble.n	80155f8 <tMempool_init+0xac>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80155de:	68dc      	ldr	r4, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 80155e0:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80155e2:	b154      	cbz	r4, 80155fa <tMempool_init+0xae>
 80155e4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80155e8:	4664      	mov	r4, ip
 80155ea:	f80c 7f01 	strb.w	r7, [ip, #1]!
 80155ee:	68de      	ldr	r6, [r3, #12]
 80155f0:	3402      	adds	r4, #2
 80155f2:	1a24      	subs	r4, r4, r0
 80155f4:	42a6      	cmp	r6, r4
 80155f6:	d8f7      	bhi.n	80155e8 <tMempool_init+0x9c>
    return node_to_alloc->pool;
 80155f8:	6818      	ldr	r0, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80155fa:	f8ca 0000 	str.w	r0, [sl]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 80155fe:	2410      	movs	r4, #16
    m->leaf = mm->leaf;
 8015600:	686b      	ldr	r3, [r5, #4]
 8015602:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8015604:	635c      	str	r4, [r3, #52]	; 0x34
    pool->usize  = 0;
 8015606:	2400      	movs	r4, #0
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8015608:	6843      	ldr	r3, [r0, #4]
    pool->mpool = (char*)memory;
 801560a:	6081      	str	r1, [r0, #8]
    pool->usize  = 0;
 801560c:	e9c0 4203 	strd	r4, r2, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8015610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015612:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 8015614:	440b      	add	r3, r1
    node->prev = prev;
 8015616:	e9c1 4401 	strd	r4, r4, [r1, #4]
    node->pool = block_location + header_size;
 801561a:	600b      	str	r3, [r1, #0]
    node->size = size;
 801561c:	60ca      	str	r2, [r1, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 801561e:	6141      	str	r1, [r0, #20]
}
 8015620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        node_to_alloc->size += leftover;
 8015624:	60dc      	str	r4, [r3, #12]
        new_node = node_to_alloc->next;
 8015626:	685c      	ldr	r4, [r3, #4]
 8015628:	e7bd      	b.n	80155a6 <tMempool_init+0x5a>
            if ((pool->msize - pool->usize) > asize)
 801562a:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 801562e:	6868      	ldr	r0, [r5, #4]
            if ((pool->msize - pool->usize) > asize)
 8015630:	1a52      	subs	r2, r2, r1
 8015632:	2a18      	cmp	r2, #24
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8015634:	bf94      	ite	ls
 8015636:	4619      	movls	r1, r3
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 8015638:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 801563a:	f004 fd6d 	bl	801a118 <LEAF_internalErrorCallback>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 801563e:	2300      	movs	r3, #0
 8015640:	f8ca 3000 	str.w	r3, [sl]
    m->leaf = mm->leaf;
 8015644:	686a      	ldr	r2, [r5, #4]
 8015646:	605a      	str	r2, [r3, #4]
 8015648:	deff      	udf	#255	; 0xff
 801564a:	bf00      	nop

0801564c <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 801564c:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801564e:	698c      	ldr	r4, [r1, #24]
{
 8015650:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8015652:	2018      	movs	r0, #24
 8015654:	4621      	mov	r1, r4
 8015656:	f7ff feb7 	bl	80153c8 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 801565a:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801565c:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
 801565e:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 8015662:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8015664:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8015666:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8015680 <tCycle_init+0x34>
    c->phase    =  0;
 801566a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801566e:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 8015672:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8015674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015678:	edc0 7a04 	vstr	s15, [r0, #16]
}
 801567c:	bd38      	pop	{r3, r4, r5, pc}
 801567e:	bf00      	nop
 8015680:	4f800000 	.word	0x4f800000

08015684 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 8015684:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
 8015686:	4910      	ldr	r1, [pc, #64]	; (80156c8 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8015688:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80156cc <tCycle_tick+0x48>
    c->phase += c->inc;
 801568c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8015690:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
 8015692:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
 8015694:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8015696:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 801569a:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 801569c:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
 80156a0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
 80156a4:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 80156a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 80156aa:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
 80156ae:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
 80156b0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 80156b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80156b8:	ed92 7a00 	vldr	s14, [r2]
 80156bc:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 80156c0:	eea7 0a27 	vfma.f32	s0, s14, s15
 80156c4:	4770      	bx	lr
 80156c6:	bf00      	nop
 80156c8:	08023f14 	.word	0x08023f14
 80156cc:	35000004 	.word	0x35000004

080156d0 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
 80156d0:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80156d2:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 80156d6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80156da:	ee20 0a27 	vmul.f32	s0, s0, s15
 80156de:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80156e2:	ed83 0a02 	vstr	s0, [r3, #8]
}
 80156e6:	4770      	bx	lr

080156e8 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, float phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
 80156e8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 80156ec:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8015708 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
 80156f0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 80156f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80156f6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 80156fa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80156fe:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8015702:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8015706:	4770      	bx	lr
 8015708:	4f800000 	.word	0x4f800000

0801570c <tMBPulse_init>:
}

//----------------------------------------------------------------------------------------------------------

void tMBPulse_init(tMBPulse* const osc, LEAF* const leaf)
{
 801570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBPulse_initToPool(osc, &leaf->mempool);
}
                          
void tMBPulse_initToPool(tMBPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801570e:	698e      	ldr	r6, [r1, #24]
{
 8015710:	4607      	mov	r7, r0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 8015712:	f44f 703b 	mov.w	r0, #748	; 0x2ec

    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8015716:	2500      	movs	r5, #0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 8015718:	4631      	mov	r1, r6
 801571a:	f7ff fe55 	bl	80153c8 <mpool_alloc>
 801571e:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8015720:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 8015722:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8015724:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
 8015726:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 801572a:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8015790 <tMBPulse_init+0x84>
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 801572e:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 8015730:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8015734:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->freq = 440.f;
 8015738:	eddf 7a16 	vldr	s15, [pc, #88]	; 8015794 <tMBPulse_init+0x88>
    c->_inv_w = 1.0f / c->_w;
 801573c:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8015740:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 8015742:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 8015746:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 8015748:	6181      	str	r1, [r0, #24]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801574a:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 801574c:	ed80 7aba 	vstr	s14, [r0, #744]	; 0x2e8
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8015750:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8015754:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8015758:	62a2      	str	r2, [r4, #40]	; 0x28
    c->_x = 0.5f;  /* temporary output variable */
 801575a:	62e2      	str	r2, [r4, #44]	; 0x2c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801575c:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801575e:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8015762:	f104 0066 	add.w	r0, r4, #102	; 0x66
    c->softsync = 0;
 8015766:	61e5      	str	r5, [r4, #28]
    c->waveform = 0.0f;
 8015768:	60e3      	str	r3, [r4, #12]
    c->_z = 0.0f;
 801576a:	6323      	str	r3, [r4, #48]	; 0x30
    c->_j = 0;
 801576c:	63a5      	str	r5, [r4, #56]	; 0x38
    c->_p = 0.0f;  /* phase [0, 1) */
 801576e:	6223      	str	r3, [r4, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8015770:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8015774:	63e5      	str	r5, [r4, #60]	; 0x3c
    c->numBLEPs = 0;
 8015776:	6625      	str	r5, [r4, #96]	; 0x60
    c->_inv_w = 1.0f / c->_w;
 8015778:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801577c:	f004 fd68 	bl	801a250 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8015780:	4629      	mov	r1, r5
 8015782:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8015786:	2220      	movs	r2, #32
}
 8015788:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 801578c:	f004 bd60 	b.w	801a250 <memset>
 8015790:	3b14f209 	.word	0x3b14f209
 8015794:	43dc0000 	.word	0x43dc0000

08015798 <tMBPulse_tick>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}


float tMBPulse_tick(tMBPulse* const osc)
{
 8015798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801579c:	ed2d 8b0c 	vpush	{d8-d13}
    _tMBPulse* c = *osc;
 80157a0:	6804      	ldr	r4, [r0, #0]
{
 80157a2:	b083      	sub	sp, #12
 80157a4:	4605      	mov	r5, r0
    
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    
    sync = c->sync;
 80157a6:	ed94 8a05 	vldr	s16, [r4, #20]


    p = c->_p;  /* phase [0, 1) */
 80157aa:	ed94 7a08 	vldr	s14, [r4, #32]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80157ae:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    w = c->_w;  /* phase increment */
 80157b2:	ed94 aa09 	vldr	s20, [r4, #36]	; 0x24
    b = c->_b;  /* duty cycle (0, 1) */
 80157b6:	edd4 aa0a 	vldr	s21, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
 80157ba:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80157be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    z = c->_z;  /* low pass filter state */
 80157c2:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 80157c6:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80157ca:	f340 80f9 	ble.w	80159c0 <tMBPulse_tick+0x228>
 80157ce:	f8d4 901c 	ldr.w	r9, [r4, #28]
 80157d2:	f1b9 0f00 	cmp.w	r9, #0
 80157d6:	f340 80bd 	ble.w	8015954 <tMBPulse_tick+0x1bc>
 80157da:	edd4 6a06 	vldr	s13, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 80157de:	ed94 9a0d 	vldr	s18, [r4, #52]	; 0x34
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80157e2:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
 80157e6:	ee66 7a8a 	vmul.f32	s15, s13, s20
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80157ea:	edc4 6a06 	vstr	s13, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80157ee:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
 80157f2:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 80157f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80157fa:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80157fe:	ee37 8a48 	vsub.f32	s16, s14, s16
                x = 0.5f;
            }
        }
    } else if (!k) {  /* normal operation, signal currently high */
        
        if (sw > 0)
 8015802:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    } else if (!k) {  /* normal operation, signal currently high */
 8015806:	2f00      	cmp	r7, #0
 8015808:	f040 80ef 	bne.w	80159ea <tMBPulse_tick+0x252>
        if (sw > 0)
 801580c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015810:	f340 81a4 	ble.w	8015b5c <tMBPulse_tick+0x3c4>
        {
            if (p >= b) {
 8015814:	eef4 aac8 	vcmpe.f32	s21, s16
 8015818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801581c:	f240 8162 	bls.w	8015ae4 <tMBPulse_tick+0x34c>
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8015820:	463b      	mov	r3, r7
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
                k = 1;
                x = -0.5f;
            }
            if (p >= 1.0f) {
 8015822:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8015826:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801582a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801582e:	f280 8276 	bge.w	8015d1e <tMBPulse_tick+0x586>
 8015832:	461f      	mov	r7, r3
                x = -0.5f;
            }
        }
    }

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8015834:	1d33      	adds	r3, r6, #4
 8015836:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
 801583a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801583e:	edc3 5a10 	vstr	s11, [r3, #64]	; 0x40

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8015842:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8015846:	f88d 3005 	strb.w	r3, [sp, #5]
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801584a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801584e:	2b00      	cmp	r3, #0
 8015850:	f000 8229 	beq.w	8015ca6 <tMBPulse_tick+0x50e>
 8015854:	eb04 0986 	add.w	r9, r4, r6, lsl #2
	{
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8015858:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

		//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801585c:	f8b4 e064 	ldrh.w	lr, [r4, #100]	; 0x64
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8015860:	f04f 0c00 	mov.w	ip, #0
 8015864:	ed99 7a10 	vldr	s14, [r9, #64]	; 0x40
 8015868:	4db9      	ldr	r5, [pc, #740]	; (8015b50 <tMBPulse_tick+0x3b8>)
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801586a:	eba8 030c 	sub.w	r3, r8, ip
 801586e:	b29b      	uxth	r3, r3
 8015870:	f8ad 3006 	strh.w	r3, [sp, #6]
		whichBLEP &= 63;
 8015874:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8015878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801587c:	f8ad 3006 	strh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8015880:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8015884:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8015888:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801588c:	b289      	uxth	r1, r1
 801588e:	f8bd a006 	ldrh.w	sl, [sp, #6]
 8015892:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8015894:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8015898:	b280      	uxth	r0, r0
 801589a:	fa1f fa8a 	uxth.w	sl, sl
 801589e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80158a2:	eb04 0a4a 	add.w	sl, r4, sl, lsl #1
 80158a6:	f8b2 b066 	ldrh.w	fp, [r2, #102]	; 0x66
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80158aa:	b29b      	uxth	r3, r3
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80158ac:	f8ba a066 	ldrh.w	sl, [sl, #102]	; 0x66
 80158b0:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 80158b4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80158b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80158bc:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
 80158c0:	ed90 6a3a 	vldr	s12, [r0, #232]	; 0xe8
 80158c4:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80158c8:	f8b3 0066 	ldrh.w	r0, [r3, #102]	; 0x66
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80158cc:	eddb 7a00 	vldr	s15, [fp]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80158d0:	b292      	uxth	r2, r2
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80158d2:	edda 6a01 	vldr	s13, [sl, #4]
 80158d6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80158da:	3040      	adds	r0, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80158dc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80158e0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80158e4:	edd1 6a3b 	vldr	s13, [r1, #236]	; 0xec
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80158e8:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80158ec:	f8b2 3066 	ldrh.w	r3, [r2, #102]	; 0x66
 80158f0:	4573      	cmp	r3, lr
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80158f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80158f6:	f0c0 80e8 	bcc.w	8015aca <tMBPulse_tick+0x332>
		{
			c->numBLEPs--;
 80158fa:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80158fe:	f10c 0c01 	add.w	ip, ip, #1
 8015902:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 8015906:	3b01      	subs	r3, #1
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8015908:	4594      	cmp	ip, r2
			c->numBLEPs--;
 801590a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801590e:	dbac      	blt.n	801586a <tMBPulse_tick+0xd2>
 8015910:	ed89 7a10 	vstr	s14, [r9, #64]	; 0x40
		}

	}

    z += 0.5f * (c->_f[j] - z);
 8015914:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;

    j = (j+1) & 7;
 8015918:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z);
 801591a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
 801591e:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8015922:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7;
 8015926:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
 801592a:	ed84 aa09 	vstr	s20, [r4, #36]	; 0x24
    c->_b = b;
 801592e:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
 8015932:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
 8015936:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
    c->_z = z;
    c->_j = j;
 801593a:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    c->_k = k;
    
    return -c->out;
 801593e:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 8015942:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8015946:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 801594a:	b003      	add	sp, #12
 801594c:	ecbd 8b0c 	vpop	{d8-d13}
 8015950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sw = w * c->syncdir;
 8015954:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8015958:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
 801595c:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
 8015960:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 8015964:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 8015968:	ee37 7a27 	vadd.f32	s14, s14, s15
 801596c:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8015970:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8015974:	f040 8457 	bne.w	8016226 <tMBPulse_tick+0xa8e>
        if (sw > 0) p = eof_offset;
 8015978:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801597c:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 801597e:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (sw > 0) p = eof_offset;
 8015982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8015986:	ee38 bac8 	vsub.f32	s22, s17, s16
        if (sw > 0) p = eof_offset;
 801598a:	f340 80a6 	ble.w	8015ada <tMBPulse_tick+0x342>
        if (!k) {
 801598e:	2f00      	cmp	r7, #0
 8015990:	f040 818e 	bne.w	8015cb0 <tMBPulse_tick+0x518>
                if (p_at_reset >= b) {
 8015994:	eef4 aacb 	vcmpe.f32	s21, s22
 8015998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801599c:	f240 8310 	bls.w	8015fc0 <tMBPulse_tick+0x828>
                if (p_at_reset >= 1.0f) {
 80159a0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80159a4:	eeb4 bae7 	vcmpe.f32	s22, s15
 80159a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ac:	f280 81f1 	bge.w	8015d92 <tMBPulse_tick+0x5fa>
            if (p >= b) {
 80159b0:	eef4 aac8 	vcmpe.f32	s21, s16
 80159b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159b8:	f240 81e1 	bls.w	8015d7e <tMBPulse_tick+0x5e6>
 80159bc:	464f      	mov	r7, r9
 80159be:	e739      	b.n	8015834 <tMBPulse_tick+0x9c>
    sw = w * c->syncdir;
 80159c0:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80159c4:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
 80159c8:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
 80159cc:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 80159d0:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 80159d4:	ee37 7a87 	vadd.f32	s14, s15, s14
        if (sw > 0)
 80159d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
 80159dc:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80159e0:	ee37 8a48 	vsub.f32	s16, s14, s16
    } else if (!k) {  /* normal operation, signal currently high */
 80159e4:	2f00      	cmp	r7, #0
 80159e6:	f43f af11 	beq.w	801580c <tMBPulse_tick+0x74>
        if (sw > 0)
 80159ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159ee:	f340 8129 	ble.w	8015c44 <tMBPulse_tick+0x4ac>
            if (p >= 1.0f) {
 80159f2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80159f6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80159fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159fe:	f6ff af19 	blt.w	8015834 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8015a02:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 8015a06:	eddf 7a54 	vldr	s15, [pc, #336]	; 8015b58 <tMBPulse_tick+0x3c0>
                p -= 1.0f;
 8015a0a:	ee38 8a68 	vsub.f32	s16, s16, s17
	_tMBPulse* c = *osc;
 8015a0e:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8015a10:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 8015a14:	eeb0 0a4b 	vmov.f32	s0, s22
 8015a18:	eea8 0a09 	vfma.f32	s0, s16, s18
 8015a1c:	f004 fe4c 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8015a20:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015a24:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015a28:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015a30:	3301      	adds	r3, #1
            if (!k && p >= b) {
 8015a32:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015a36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015a3a:	eed8 7a09 	vfnms.f32	s15, s16, s18
            if (!k && p >= b) {
 8015a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015a42:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015a46:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015a4a:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015a4e:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8015a52:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015a56:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015a5a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8015a5e:	f103 0301 	add.w	r3, r3, #1
 8015a62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015a66:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if (!k && p >= b) {
 8015a6a:	f200 8306 	bhi.w	801607a <tMBPulse_tick+0x8e2>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8015a6e:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
 8015a72:	682d      	ldr	r5, [r5, #0]
	i = lrintf(r - 0.5f);
 8015a74:	eeb0 0a4b 	vmov.f32	s0, s22
 8015a78:	eea8 0a89 	vfma.f32	s0, s17, s18
 8015a7c:	f004 fe1c 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8015a80:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015a84:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
                x = -0.5f;
 8015a88:	eef0 5a4b 	vmov.f32	s11, s22
	r -= (float)i;
 8015a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015a90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015a94:	3301      	adds	r3, #1
	r -= (float)i;
 8015a96:	eed8 7a89 	vfnms.f32	s15, s17, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015a9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015a9e:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015aa2:	eb05 0143 	add.w	r1, r5, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015aa6:	4a2b      	ldr	r2, [pc, #172]	; (8015b54 <tMBPulse_tick+0x3bc>)
                k = 1;
 8015aa8:	2701      	movs	r7, #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015aaa:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015aae:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8015ab2:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015ab6:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015aba:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8015abe:	443b      	add	r3, r7
 8015ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015ac4:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8015ac8:	e6b4      	b.n	8015834 <tMBPulse_tick+0x9c>
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8015aca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8015ace:	f10c 0c01 	add.w	ip, ip, #1
 8015ad2:	4563      	cmp	r3, ip
 8015ad4:	f73f aec9 	bgt.w	801586a <tMBPulse_tick+0xd2>
 8015ad8:	e71a      	b.n	8015910 <tMBPulse_tick+0x178>
        else if (sw < 0) p = 1.0f - eof_offset;
 8015ada:	f100 81be 	bmi.w	8015e5a <tMBPulse_tick+0x6c2>
    p += sw - (int)sw;
 8015ade:	eeb0 8a68 	vmov.f32	s16, s17
 8015ae2:	e6a7      	b.n	8015834 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8015ae4:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 8015ae8:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8015b58 <tMBPulse_tick+0x3c0>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8015aec:	ee38 ba6a 	vsub.f32	s22, s16, s21
	_tMBPulse* c = *osc;
 8015af0:	f8d5 8000 	ldr.w	r8, [r5]
	r = MINBLEP_PHASES * phase * inv_w;
 8015af4:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8015af8:	eeb0 0a6b 	vmov.f32	s0, s23
 8015afc:	eeab 0a28 	vfma.f32	s0, s22, s17
 8015b00:	f004 fdda 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8015b04:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015b08:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015b0c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015b14:	4a0f      	ldr	r2, [pc, #60]	; (8015b54 <tMBPulse_tick+0x3bc>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015b16:	3301      	adds	r3, #1
                x = -0.5f;
 8015b18:	eef0 5a6b 	vmov.f32	s11, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015b1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015b20:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015b24:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015b28:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015b2c:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015b30:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8015b34:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015b38:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015b3c:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8015b40:	3301      	adds	r3, #1
 8015b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015b46:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                k = 1;
 8015b4a:	2301      	movs	r3, #1
}
 8015b4c:	e669      	b.n	8015822 <tMBPulse_tick+0x8a>
 8015b4e:	bf00      	nop
 8015b50:	0802a698 	.word	0x0802a698
 8015b54:	bf800000 	.word	0xbf800000
 8015b58:	42800000 	.word	0x42800000
            if (p < 0.0f) {
 8015b5c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8015b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b64:	f57f ae66 	bpl.w	8015834 <tMBPulse_tick+0x9c>
 8015b68:	eef5 7a40 	vcmp.f32	s15, #0.0
 8015b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b70:	f57f ae60 	bpl.w	8015834 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8015b74:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 8015b78:	ed5f 8a09 	vldr	s17, [pc, #-36]	; 8015b58 <tMBPulse_tick+0x3c0>
	r = MINBLEP_PHASES * phase * inv_w;
 8015b7c:	ee28 ca09 	vmul.f32	s24, s16, s18
	_tMBPulse* c = *osc;
 8015b80:	f8d5 8000 	ldr.w	r8, [r5]
                p += 1.0f;
 8015b84:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8015b88:	eeb0 0a6b 	vmov.f32	s0, s23
                p += 1.0f;
 8015b8c:	ee38 8a0b 	vadd.f32	s16, s16, s22
	i = lrintf(r - 0.5f);
 8015b90:	eeac 0a28 	vfma.f32	s0, s24, s17
 8015b94:	f004 fd90 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8015b98:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015b9c:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015ba0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015ba8:	4ad0      	ldr	r2, [pc, #832]	; (8015eec <tMBPulse_tick+0x754>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015baa:	3301      	adds	r3, #1
            if (k && p < b) {
 8015bac:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015bb4:	eedc 7a28 	vfnms.f32	s15, s24, s17
            if (k && p < b) {
 8015bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015bbc:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015bc0:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015bc4:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015bc8:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8015bcc:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015bd0:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015bd4:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8015bd8:	f103 0301 	add.w	r3, r3, #1
 8015bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015be0:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (k && p < b) {
 8015be4:	f340 8323 	ble.w	801622e <tMBPulse_tick+0xa96>
	_tMBPulse* c = *osc;
 8015be8:	ee38 ca6a 	vsub.f32	s24, s16, s21
 8015bec:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8015bee:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8015bf2:	eeb0 0a6b 	vmov.f32	s0, s23
 8015bf6:	eea8 0a8c 	vfma.f32	s0, s17, s24
 8015bfa:	f004 fd5d 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8015bfe:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c02:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015c06:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c0e:	3301      	adds	r3, #1
                x = 0.5f;
 8015c10:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015c18:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015c1c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c20:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015c24:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015c28:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8015c2c:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015c30:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015c34:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8015c38:	3301      	adds	r3, #1
 8015c3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015c3e:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8015c42:	e5f7      	b.n	8015834 <tMBPulse_tick+0x9c>
        else if (sw < 0)
 8015c44:	f57f adf6 	bpl.w	8015834 <tMBPulse_tick+0x9c>
            if (p < b) {
 8015c48:	eef4 aac8 	vcmpe.f32	s21, s16
 8015c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c50:	f300 80d0 	bgt.w	8015df4 <tMBPulse_tick+0x65c>
            if (p < 0.0f) {
 8015c54:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c5c:	f57f adea 	bpl.w	8015834 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8015c60:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 8015c64:	eddf 8aa2 	vldr	s17, [pc, #648]	; 8015ef0 <tMBPulse_tick+0x758>
	r = MINBLEP_PHASES * phase * inv_w;
 8015c68:	ee28 9a09 	vmul.f32	s18, s16, s18
	_tMBPulse* c = *osc;
 8015c6c:	682d      	ldr	r5, [r5, #0]
                p += 1.0f;
 8015c6e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8015c72:	eeb0 0a4b 	vmov.f32	s0, s22
                p += 1.0f;
 8015c76:	ee38 8a27 	vadd.f32	s16, s16, s15
	i = lrintf(r - 0.5f);
 8015c7a:	eea9 0a28 	vfma.f32	s0, s18, s17
 8015c7e:	f004 fd1b 	bl	801a6b8 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c82:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	r -= (float)i;
 8015c86:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
 8015c8a:	eef0 5a4b 	vmov.f32	s11, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c8e:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015c90:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015c9c:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015ca0:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
 8015ca4:	e6fd      	b.n	8015aa2 <tMBPulse_tick+0x30a>
    z += 0.5f * (c->_f[j] - z);
 8015ca6:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015caa:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8015cae:	e631      	b.n	8015914 <tMBPulse_tick+0x17c>
                if (p_at_reset >= 1.0f) {
 8015cb0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8015cb4:	eeb4 bae8 	vcmpe.f32	s22, s17
 8015cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cbc:	f280 811a 	bge.w	8015ef4 <tMBPulse_tick+0x75c>
 8015cc0:	eddf ba8b 	vldr	s23, [pc, #556]	; 8015ef0 <tMBPulse_tick+0x758>
 8015cc4:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 8015cc8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8015ccc:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8015cd0:	f004 fcf2 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8015cd4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015cd8:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015cdc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015ce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015ce4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015ce8:	3301      	adds	r3, #1
                x = 0.5f;
 8015cea:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015cf2:	eed8 7a2b 	vfnms.f32	s15, s16, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015cf6:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015cfa:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015cfe:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015d02:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8015d06:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015d0a:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015d0e:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8015d12:	3301      	adds	r3, #1
 8015d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015d18:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
}
 8015d1c:	e648      	b.n	80159b0 <tMBPulse_tick+0x218>
                p -= 1.0f;
 8015d1e:	eddf 7a74 	vldr	s15, [pc, #464]	; 8015ef0 <tMBPulse_tick+0x758>
 8015d22:	ee38 8a68 	vsub.f32	s16, s16, s17
	i = lrintf(r - 0.5f);
 8015d26:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8015d2a:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8015d2c:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 8015d30:	eea9 0a08 	vfma.f32	s0, s18, s16
 8015d34:	f004 fcc0 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8015d38:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015d3c:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015d40:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015d48:	3301      	adds	r3, #1
                x = 0.5f;
 8015d4a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015d52:	eed9 7a08 	vfnms.f32	s15, s18, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015d56:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015d5a:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015d5e:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015d62:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8015d66:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015d6a:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015d6e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8015d72:	3301      	adds	r3, #1
 8015d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015d78:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8015d7c:	e55a      	b.n	8015834 <tMBPulse_tick+0x9c>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8015d7e:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8015ef0 <tMBPulse_tick+0x758>
 8015d82:	ee78 8a6a 	vsub.f32	s17, s16, s21
	i = lrintf(r - 0.5f);
 8015d86:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8015d8a:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8015d8c:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 8015d90:	e670      	b.n	8015a74 <tMBPulse_tick+0x2dc>
 8015d92:	eddf ba57 	vldr	s23, [pc, #348]	; 8015ef0 <tMBPulse_tick+0x758>
 8015d96:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8015d9a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8015d9e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8015da2:	ee78 8acb 	vsub.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
 8015da6:	eea8 0aab 	vfma.f32	s0, s17, s23
 8015daa:	f004 fc85 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8015dae:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015db2:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015db6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015dba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015dbe:	3301      	adds	r3, #1
                    x = 0.5f;
 8015dc0:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015dc8:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015dcc:	eb08 0243 	add.w	r2, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015dd0:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015dd4:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015dd8:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8015ddc:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015de0:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015de4:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8015de8:	3301      	adds	r3, #1
 8015dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015dee:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
        if (sw > 0)
 8015df2:	e5dd      	b.n	80159b0 <tMBPulse_tick+0x218>
	_tMBPulse* c = *osc;
 8015df4:	eddf 8a3e 	vldr	s17, [pc, #248]	; 8015ef0 <tMBPulse_tick+0x758>
 8015df8:	ee38 ba6a 	vsub.f32	s22, s16, s21
	i = lrintf(r - 0.5f);
 8015dfc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8015e00:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8015e02:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8015e06:	eeab 0a28 	vfma.f32	s0, s22, s17
 8015e0a:	f004 fc55 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8015e0e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e12:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015e16:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015e1e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e22:	3301      	adds	r3, #1
                x = 0.5f;
 8015e24:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015e2c:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015e30:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015e34:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015e38:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015e3c:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8015e40:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015e44:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015e48:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8015e4c:	3301      	adds	r3, #1
 8015e4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015e52:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                k = 0;
 8015e56:	2700      	movs	r7, #0
}
 8015e58:	e6fc      	b.n	8015c54 <tMBPulse_tick+0x4bc>
        else if (sw < 0) p = 1.0f - eof_offset;
 8015e5a:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8015e5e:	ee3c da48 	vsub.f32	s26, s24, s16
        if (!k) {
 8015e62:	2f00      	cmp	r7, #0
 8015e64:	f040 80e5 	bne.w	8016032 <tMBPulse_tick+0x89a>
                if (p_at_reset < 0.0f) {
 8015e68:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8015e6c:	eddf ba20 	vldr	s23, [pc, #128]	; 8015ef0 <tMBPulse_tick+0x758>
 8015e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e74:	f100 813c 	bmi.w	80160f0 <tMBPulse_tick+0x958>
 8015e78:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 8015e7c:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                k = 1;
 8015e80:	2701      	movs	r7, #1
 8015e82:	eeb1 ba48 	vneg.f32	s22, s16
	i = lrintf(r - 0.5f);
 8015e86:	eeb0 0a68 	vmov.f32	s0, s17
 8015e8a:	eea8 0a6b 	vfms.f32	s0, s16, s23
 8015e8e:	f004 fc13 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8015e92:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
 8015e96:	eef0 5a68 	vmov.f32	s11, s17
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015e9a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ea2:	eedb 7a2b 	vfnms.f32	s15, s22, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015ea6:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015eaa:	4a10      	ldr	r2, [pc, #64]	; (8015eec <tMBPulse_tick+0x754>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015eac:	443b      	add	r3, r7
 8015eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015eb2:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015eb6:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015eba:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015ebe:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8015ec2:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015ec6:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015eca:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8015ece:	443b      	add	r3, r7
 8015ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015ed4:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (p < b) {
 8015ed8:	eef4 aacd 	vcmpe.f32	s21, s26
 8015edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ee0:	f300 80d0 	bgt.w	8016084 <tMBPulse_tick+0x8ec>
 8015ee4:	eeb0 8a4d 	vmov.f32	s16, s26
 8015ee8:	e4a4      	b.n	8015834 <tMBPulse_tick+0x9c>
 8015eea:	bf00      	nop
 8015eec:	bf800000 	.word	0xbf800000
 8015ef0:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
 8015ef4:	ee3b ba68 	vsub.f32	s22, s22, s17
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8015ef8:	ed5f ba03 	vldr	s23, [pc, #-12]	; 8015ef0 <tMBPulse_tick+0x758>
	i = lrintf(r - 0.5f);
 8015efc:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8015f00:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8015f04:	ee38 ca0b 	vadd.f32	s24, s16, s22
	i = lrintf(r - 0.5f);
 8015f08:	eeb0 0a6c 	vmov.f32	s0, s25
 8015f0c:	eeac 0a2b 	vfma.f32	s0, s24, s23
 8015f10:	f004 fbd2 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8015f14:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f18:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015f1c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f24:	3301      	adds	r3, #1
                if (!k && p_at_reset >= b) {
 8015f26:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015f2e:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (!k && p_at_reset >= b) {
 8015f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015f36:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f3a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015f3e:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015f42:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8015f46:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015f4a:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015f4e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8015f52:	f103 0301 	add.w	r3, r3, #1
 8015f56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015f5a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (!k && p_at_reset >= b) {
 8015f5e:	f200 815e 	bhi.w	801621e <tMBPulse_tick+0xa86>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 8015f62:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
 8015f66:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
 8015f68:	eeb0 0a6c 	vmov.f32	s0, s25
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 8015f6c:	ee78 8a8b 	vadd.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
 8015f70:	eea8 0aab 	vfma.f32	s0, s17, s23
 8015f74:	f004 fba0 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8015f78:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f7c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015f80:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015f84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015f88:	4aad      	ldr	r2, [pc, #692]	; (8016240 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f8a:	3301      	adds	r3, #1
	r -= (float)i;
 8015f8c:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015f94:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015f98:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015f9c:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8015fa0:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8015fa4:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015fa8:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8015fac:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8015fb0:	3301      	adds	r3, #1
 8015fb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015fb6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        if (sw > 0)
 8015fba:	f8d5 8000 	ldr.w	r8, [r5]
 8015fbe:	e683      	b.n	8015cc8 <tMBPulse_tick+0x530>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 8015fc0:	eddf baa0 	vldr	s23, [pc, #640]	; 8016244 <tMBPulse_tick+0xaac>
 8015fc4:	ee38 caea 	vsub.f32	s24, s17, s21
	i = lrintf(r - 0.5f);
 8015fc8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8015fcc:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8015fd0:	eeac 0a2b 	vfma.f32	s0, s24, s23
 8015fd4:	f004 fb70 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8015fd8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015fdc:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8015fe0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8015fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8015fe8:	4a95      	ldr	r2, [pc, #596]	; (8016240 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015fea:	3301      	adds	r3, #1
                if (p_at_reset >= 1.0f) {
 8015fec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8015ff0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8015ff4:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (p_at_reset >= 1.0f) {
 8015ff8:	eeb4 bac7 	vcmpe.f32	s22, s14
	c->BLEPindices[c->mostRecentBLEP] = i;
 8015ffc:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016000:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016004:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016008:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
                if (p_at_reset >= 1.0f) {
 801600c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016010:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016014:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016018:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 801601c:	f103 0301 	add.w	r3, r3, #1
 8016020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016024:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                if (p_at_reset >= 1.0f) {
 8016028:	f8d5 8000 	ldr.w	r8, [r5]
 801602c:	f6ff ae4c 	blt.w	8015cc8 <tMBPulse_tick+0x530>
 8016030:	e6b3      	b.n	8015d9a <tMBPulse_tick+0x602>
                if (p_at_reset < b) {
 8016032:	eef4 aacb 	vcmpe.f32	s21, s22
 8016036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801603a:	f300 80ba 	bgt.w	80161b2 <tMBPulse_tick+0xa1a>
                if (p_at_reset < 0.0f) {
 801603e:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8016042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016046:	f57f af47 	bpl.w	8015ed8 <tMBPulse_tick+0x740>
 801604a:	eddf ba7e 	vldr	s23, [pc, #504]	; 8016244 <tMBPulse_tick+0xaac>
 801604e:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 8016052:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
                    k = 1;
 8016056:	2701      	movs	r7, #1
	i = lrintf(r - 0.5f);
 8016058:	eeb0 0a48 	vmov.f32	s0, s16
 801605c:	eea8 0aab 	vfma.f32	s0, s17, s23
 8016060:	f004 fb2a 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8016064:	ee07 0a90 	vmov	s15, r0
                    x = -0.5f;
 8016068:	eef0 5a48 	vmov.f32	s11, s16
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801606c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8016070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016074:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016078:	e715      	b.n	8015ea6 <tMBPulse_tick+0x70e>
                x = 0.5f;
 801607a:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
                k = 0;
 801607e:	2700      	movs	r7, #0
 8016080:	f7ff bbd8 	b.w	8015834 <tMBPulse_tick+0x9c>
	_tMBPulse* c = *osc;
 8016084:	eddf 7a6f 	vldr	s15, [pc, #444]	; 8016244 <tMBPulse_tick+0xaac>
 8016088:	ee7d 8a6a 	vsub.f32	s17, s26, s21
	i = lrintf(r - 0.5f);
 801608c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8016090:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8016092:	ee29 9a27 	vmul.f32	s18, s18, s15
                k = 0;
 8016096:	464f      	mov	r7, r9
}
 8016098:	eeb0 8a4d 	vmov.f32	s16, s26
	i = lrintf(r - 0.5f);
 801609c:	eea9 0a28 	vfma.f32	s0, s18, s17
 80160a0:	f004 fb0a 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80160a4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80160a8:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80160ac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80160b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80160b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80160b8:	3301      	adds	r3, #1
                x = 0.5f;
 80160ba:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80160be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80160c2:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 80160c6:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80160ca:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80160ce:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80160d2:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 80160d6:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80160da:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80160de:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 80160e2:	3301      	adds	r3, #1
 80160e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80160e8:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 80160ec:	f7ff bba2 	b.w	8015834 <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 80160f0:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 80160f4:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    p_at_reset += 1.0f;
 80160f8:	ee3b ba0c 	vadd.f32	s22, s22, s24
	i = lrintf(r - 0.5f);
 80160fc:	eeb0 0a6c 	vmov.f32	s0, s25
 8016100:	eea8 0aab 	vfma.f32	s0, s17, s23
 8016104:	f004 fad8 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8016108:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801610c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016110:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8016114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016118:	4a49      	ldr	r2, [pc, #292]	; (8016240 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801611a:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
 801611c:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016124:	eed8 7aab 	vfnms.f32	s15, s17, s23
                if (k && p_at_reset < b) {
 8016128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801612c:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016130:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016134:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016138:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 801613c:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016140:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016144:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8016148:	f103 0301 	add.w	r3, r3, #1
 801614c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016150:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (k && p_at_reset < b) {
 8016154:	dd70      	ble.n	8016238 <tMBPulse_tick+0xaa0>
	_tMBPulse* c = *osc;
 8016156:	ee78 8a6a 	vsub.f32	s17, s16, s21
 801615a:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
 801615c:	eeb0 0a6c 	vmov.f32	s0, s25
 8016160:	ee78 8a8b 	vadd.f32	s17, s17, s22
 8016164:	eea8 0aab 	vfma.f32	s0, s17, s23
 8016168:	f004 faa6 	bl	801a6b8 <lrintf>
	r -= (float)i;
 801616c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016170:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016174:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8016178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801617c:	3301      	adds	r3, #1
	r -= (float)i;
 801617e:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016182:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016186:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801618a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801618e:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016192:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8016196:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801619a:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801619e:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80161a2:	3301      	adds	r3, #1
 80161a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80161a8:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        else if (sw < 0)
 80161ac:	f8d5 8000 	ldr.w	r8, [r5]
 80161b0:	e664      	b.n	8015e7c <tMBPulse_tick+0x6e4>
	r = MINBLEP_PHASES * phase * inv_w;
 80161b2:	eddf ba24 	vldr	s23, [pc, #144]	; 8016244 <tMBPulse_tick+0xaac>
 80161b6:	ee78 caea 	vsub.f32	s25, s17, s21
	i = lrintf(r - 0.5f);
 80161ba:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80161be:	ee69 ba2b 	vmul.f32	s23, s18, s23
 80161c2:	eeac 0aab 	vfma.f32	s0, s25, s23
 80161c6:	f004 fa77 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80161ca:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80161ce:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80161d2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80161d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80161da:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
 80161dc:	eeb5 bac0 	vcmpe.f32	s22, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80161e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80161e4:	eedc 7aab 	vfnms.f32	s15, s25, s23
                if (p_at_reset < 0.0f) {
 80161e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80161ec:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80161f0:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80161f4:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80161f8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80161fc:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016200:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016204:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8016208:	f103 0301 	add.w	r3, r3, #1
 801620c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016210:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (p_at_reset < 0.0f) {
 8016214:	f8d5 8000 	ldr.w	r8, [r5]
 8016218:	f57f ae30 	bpl.w	8015e7c <tMBPulse_tick+0x6e4>
 801621c:	e719      	b.n	8016052 <tMBPulse_tick+0x8ba>
                    x = 0.5f;
 801621e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8016222:	f7ff bbc5 	b.w	80159b0 <tMBPulse_tick+0x218>
    p += sw - (int)sw;
 8016226:	eeb0 8a68 	vmov.f32	s16, s17
 801622a:	f7ff baea 	b.w	8015802 <tMBPulse_tick+0x6a>
                x = -0.5f;
 801622e:	eef0 5a6b 	vmov.f32	s11, s23
                k = 1;
 8016232:	2701      	movs	r7, #1
 8016234:	f7ff bafe 	b.w	8015834 <tMBPulse_tick+0x9c>
                    x = -0.5f;
 8016238:	eef0 5a6c 	vmov.f32	s11, s25
                    k = 1;
 801623c:	2701      	movs	r7, #1
 801623e:	e64b      	b.n	8015ed8 <tMBPulse_tick+0x740>
 8016240:	bf800000 	.word	0xbf800000
 8016244:	42800000 	.word	0x42800000

08016248 <tMBPulse_setFreq>:

void tMBPulse_setFreq(tMBPulse* const osc, float f)
{
    _tMBPulse* c = *osc;
 8016248:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 801624a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801624e:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
    c->freq = f;
 8016252:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8016256:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 801625a:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801625e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 8016262:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8016266:	4770      	bx	lr

08016268 <tMBPulse_setWidth>:

void tMBPulse_setWidth(tMBPulse* const osc, float w)
{
    _tMBPulse* c = *osc;
    c->waveform = w;
    c->_b = 0.5f * (1.0f + c->waveform);
 8016268:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tMBPulse* c = *osc;
 801626c:	6803      	ldr	r3, [r0, #0]
    c->_b = 0.5f * (1.0f + c->waveform);
 801626e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->waveform = w;
 8016272:	ed83 0a03 	vstr	s0, [r3, #12]
    c->_b = 0.5f * (1.0f + c->waveform);
 8016276:	ee70 7a27 	vadd.f32	s15, s0, s15
 801627a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801627e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8016282:	4770      	bx	lr

08016284 <tMBPulse_sync>:

float tMBPulse_sync(tMBPulse* const osc, float value)
{
    _tMBPulse* c = *osc;
 8016284:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8016286:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 801628a:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 801628e:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 8016292:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 8016296:	eef1 7a67 	vneg.f32	s15, s15
 801629a:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801629e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80162a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162a6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80162aa:	bfcc      	ite	gt
 80162ac:	2201      	movgt	r2, #1
 80162ae:	2200      	movle	r2, #0
 80162b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162b4:	f002 0201 	and.w	r2, r2, #1
 80162b8:	bf88      	it	hi
 80162ba:	2200      	movhi	r2, #0
 80162bc:	b122      	cbz	r2, 80162c8 <tMBPulse_sync+0x44>
 80162be:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80162c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162c6:	da04      	bge.n	80162d2 <tMBPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 80162c8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80162e0 <tMBPulse_sync+0x5c>
 80162cc:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
 80162d0:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 80162d2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80162d6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80162da:	ed83 7a05 	vstr	s14, [r3, #20]
}
 80162de:	4770      	bx	lr
 80162e0:	00000000 	.word	0x00000000

080162e4 <tMBTriangle_init>:

//==========================================================================================================
//==========================================================================================================

void tMBTriangle_init(tMBTriangle* const osc, LEAF* const leaf)
{
 80162e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBTriangle_initToPool(osc, &leaf->mempool);
}

void tMBTriangle_initToPool(tMBTriangle* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 80162e6:	698e      	ldr	r6, [r1, #24]
{
 80162e8:	4607      	mov	r7, r0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 80162ea:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 80162ee:	2500      	movs	r5, #0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 80162f0:	4631      	mov	r1, r6
 80162f2:	f7ff f869 	bl	80153c8 <mpool_alloc>
 80162f6:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 80162f8:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 80162fa:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 80162fc:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
 80162fe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_j = 0;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 8016302:	ed9f 6a18 	vldr	s12, [pc, #96]	; 8016364 <tMBTriangle_init+0x80>
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8016306:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 8016308:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
 801630c:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->freq = 440.f;
 8016310:	eddf 7a15 	vldr	s15, [pc, #84]	; 8016368 <tMBTriangle_init+0x84>
    c->_inv_w = 1.0f / c->_w;
 8016314:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8016318:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 801631a:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 801631e:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 8016320:	6181      	str	r1, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8016322:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
 8016326:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8016328:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
 801632c:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801632e:	4b0f      	ldr	r3, [pc, #60]	; (801636c <tMBTriangle_init+0x88>)
    c->softsync = 0;
 8016330:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
 8016332:	6345      	str	r5, [r0, #52]	; 0x34
    c->_p = 0.25f;  /* phase [0, 1) */
 8016334:	6202      	str	r2, [r0, #32]
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8016336:	2280      	movs	r2, #128	; 0x80
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8016338:	6281      	str	r1, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801633a:	4629      	mov	r1, r5
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801633c:	6385      	str	r5, [r0, #56]	; 0x38
    c->invSampleRate = leaf->invSampleRate;
 801633e:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8016342:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8016346:	e9c0 5319 	strd	r5, r3, [r0, #100]	; 0x64
    c->_inv_w = 1.0f / c->_w;
 801634a:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801634e:	306c      	adds	r0, #108	; 0x6c
 8016350:	f003 ff7e 	bl	801a250 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8016354:	4629      	mov	r1, r5
 8016356:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801635a:	2220      	movs	r2, #32
}
 801635c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8016360:	f003 bf76 	b.w	801a250 <memset>
 8016364:	3b14f209 	.word	0x3b14f209
 8016368:	43dc0000 	.word	0x43dc0000
 801636c:	11c01200 	.word	0x11c01200

08016370 <tMBTriangle_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBTriangle_tick(tMBTriangle* const osc)
{
 8016370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016374:	ed2d 8b10 	vpush	{d8-d15}
    _tMBTriangle* c = *osc;
 8016378:	6804      	ldr	r4, [r0, #0]
    sync = c->sync;

    p = c->_p;  /* phase [0, 1) */
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
 801637a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
    
    

    b = 0.5f * (1.0f + c->waveform);
 801637e:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
{
 8016382:	b085      	sub	sp, #20
    b = 0.5f * (1.0f + c->waveform);
 8016384:	ed94 7a03 	vldr	s14, [r4, #12]
{
 8016388:	4607      	mov	r7, r0
    sync = c->sync;
 801638a:	ed94 8a05 	vldr	s16, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
 801638e:	ee37 7a28 	vadd.f32	s14, s14, s17
    invB = 1.0f / b;
 8016392:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8016396:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    p = c->_p;  /* phase [0, 1) */
 801639a:	edd4 6a08 	vldr	s13, [r4, #32]
    invB = 1.0f / b;
 801639e:	ee88 daa7 	vdiv.f32	s26, s17, s15
    w = c->_w;  /* phase increment */
 80163a2:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
 80163a6:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
    j = c->_j;  /* index into buffer _f */
 80163aa:	6b65      	ldr	r5, [r4, #52]	; 0x34
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 80163ac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    b = 0.5f * (1.0f + c->waveform);
 80163ae:	ee67 9a0b 	vmul.f32	s19, s14, s22
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80163b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
 80163b6:	ee78 7ae9 	vsub.f32	s15, s17, s19
    invB1 = 1.0f / b1;
 80163ba:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80163be:	f340 8181 	ble.w	80166c4 <tMBTriangle_tick+0x354>
 80163c2:	f8d4 901c 	ldr.w	r9, [r4, #28]
 80163c6:	f1b9 0f00 	cmp.w	r9, #0
 80163ca:	f340 8138 	ble.w	801663e <tMBTriangle_tick+0x2ce>
 80163ce:	edd4 7a06 	vldr	s15, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 80163d2:	ed94 ca0f 	vldr	s24, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80163d6:	eef1 7a67 	vneg.f32	s15, s15
    sw = w * c->syncdir;
 80163da:	ee67 baaa 	vmul.f32	s23, s15, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80163de:	edc4 7a06 	vstr	s15, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80163e2:	ee27 ca8c 	vmul.f32	s24, s15, s24
    p += sw - (int)sw;
 80163e6:	eebd 8aeb 	vcvt.s32.f32	s16, s23
 80163ea:	ee76 6aab 	vadd.f32	s13, s13, s23
 80163ee:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80163f2:	ee36 8ac8 	vsub.f32	s16, s13, s16
                x = -0.5f + p * invB;
                tMBTriangle_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
 80163f6:	2e00      	cmp	r6, #0
 80163f8:	f040 8177 	bne.w	80166ea <tMBTriangle_tick+0x37a>
        
        x = -0.5f + p * invB;
 80163fc:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
        if (sw > 0)
 8016400:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = -0.5f + p * invB;
 8016404:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
 8016408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
 801640c:	eee8 8a0d 	vfma.f32	s17, s16, s26
        if (sw > 0)
 8016410:	f340 8252 	ble.w	80168b8 <tMBTriangle_tick+0x548>
        {
            if (p >= b) {
 8016414:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8016418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801641c:	f280 820c 	bge.w	8016838 <tMBTriangle_tick+0x4c8>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8016420:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
 8016422:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8016426:	eeb4 8ac9 	vcmpe.f32	s16, s18
 801642a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801642e:	f280 837b 	bge.w	8016b28 <tMBTriangle_tick+0x7b8>
 8016432:	461e      	mov	r6, r3
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
                k = 1;
            }
        }
    }
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8016434:	1d2b      	adds	r3, r5, #4
 8016436:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
 801643a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801643e:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8016442:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8016446:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801644a:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801644e:	2b00      	cmp	r3, #0
 8016450:	f000 80d3 	beq.w	80165fa <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    	whichBLEP &= 63;

    	//use the scale and r values from the BLEPproperties array to compute the current state of each active BLEP and add it to the output value

    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 8016454:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8016458:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801645c:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 801645e:	48ea      	ldr	r0, [pc, #936]	; (8016808 <tMBTriangle_tick+0x498>)
 8016460:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8016464:	4fe9      	ldr	r7, [pc, #932]	; (801680c <tMBTriangle_tick+0x49c>)
 8016466:	e053      	b.n	8016510 <tMBTriangle_tick+0x1a0>
 8016468:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 801646c:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8016470:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016474:	fa1f fe8e 	uxth.w	lr, lr
 8016478:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 801647c:	fa1f f989 	uxth.w	r9, r9
 8016480:	b29b      	uxth	r3, r3
 8016482:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 8016486:	fa1f f888 	uxth.w	r8, r8
 801648a:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 801648e:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 8016492:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016496:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 801649a:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
 801649e:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80164a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80164a6:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
 80164aa:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
 80164ae:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
 80164b2:	ed99 7a00 	vldr	s14, [r9]
 80164b6:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80164ba:	edd3 5a01 	vldr	s11, [r3, #4]
 80164be:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
 80164c2:	eea5 7a25 	vfma.f32	s14, s10, s11
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80164c6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80164ca:	f8bd e00e 	ldrh.w	lr, [sp, #14]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80164ce:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80164d0:	fa1f fe8e 	uxth.w	lr, lr
 80164d4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80164d8:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80164dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 80164e0:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80164e4:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 80164e8:	f108 0840 	add.w	r8, r8, #64	; 0x40
 80164ec:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80164f0:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 80164f4:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80164f8:	459e      	cmp	lr, r3
 80164fa:	d304      	bcc.n	8016506 <tMBTriangle_tick+0x196>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
 80164fc:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8016500:	3b01      	subs	r3, #1
 8016502:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8016506:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801650a:	3201      	adds	r2, #1
 801650c:	4293      	cmp	r3, r2
 801650e:	dd74      	ble.n	80165fa <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8016510:	ebac 0302 	sub.w	r3, ip, r2
 8016514:	b29b      	uxth	r3, r3
 8016516:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
 801651a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801651e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016522:	f8ad 300e 	strh.w	r3, [sp, #14]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 8016526:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801652a:	b29b      	uxth	r3, r3
 801652c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016530:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016534:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8016538:	eef4 7ac6 	vcmpe.f32	s15, s12
 801653c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016540:	d492      	bmi.n	8016468 <tMBTriangle_tick+0xf8>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8016542:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016546:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 801654a:	b29b      	uxth	r3, r3
 801654c:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 8016550:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8016554:	fa1f fe8e 	uxth.w	lr, lr
 8016558:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801655c:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 8016560:	fa1f f989 	uxth.w	r9, r9
 8016564:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016568:	fa1f f888 	uxth.w	r8, r8
 801656c:	edd3 5a3c 	vldr	s11, [r3, #240]	; 0xf0
 8016570:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8016574:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8016578:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801657c:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 8016580:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 8016584:	b29b      	uxth	r3, r3
 8016586:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 801658a:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 801658e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016592:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
 8016596:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 801659a:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801659e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80165a2:	edd8 6a01 	vldr	s13, [r8, #4]
 80165a6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80165aa:	ed9e 7a00 	vldr	s14, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80165ae:	f8bd e00e 	ldrh.w	lr, [sp, #14]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80165b2:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80165b6:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 80165ba:	f8bd 800e 	ldrh.w	r8, [sp, #14]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80165be:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80165c2:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 80165c6:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80165ca:	eea5 7a26 	vfma.f32	s14, s10, s13
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 80165ce:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80165d2:	eee5 7a87 	vfma.f32	s15, s11, s14
 80165d6:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80165da:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
 80165de:	3340      	adds	r3, #64	; 0x40
 80165e0:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 80165e4:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
 80165e8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80165ec:	459e      	cmp	lr, r3
 80165ee:	d285      	bcs.n	80164fc <tMBTriangle_tick+0x18c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80165f0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80165f4:	3201      	adds	r2, #1
 80165f6:	4293      	cmp	r3, r2
 80165f8:	dc8a      	bgt.n	8016510 <tMBTriangle_tick+0x1a0>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
 80165fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80165fe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8016602:	eef0 7a4a 	vmov.f32	s15, s20
    c->out = z;
    j = (j+1) & 7;
 8016606:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
 8016608:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
    j = (j+1) & 7;
 801660c:	f005 0507 	and.w	r5, r5, #7
    c->_p = p;
 8016610:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8016614:	ee37 7a4a 	vsub.f32	s14, s14, s20
    c->_w = w;
 8016618:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
 801661c:	edc4 9a0a 	vstr	s19, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
 8016620:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_z = z;
    c->_j = j;
    c->_k = k;
 8016624:	e9c4 560d 	strd	r5, r6, [r4, #52]	; 0x34
    
    return -c->out;
 8016628:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 801662c:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8016630:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
}
 8016634:	b005      	add	sp, #20
 8016636:	ecbd 8b10 	vpop	{d8-d15}
 801663a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sw = w * c->syncdir;
 801663e:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8016642:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 8016646:	ee6a ba8c 	vmul.f32	s23, s21, s24
    float inv_sw = c->_inv_w * c->syncdir;
 801664a:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
 801664e:	eefd caeb 	vcvt.s32.f32	s25, s23
 8016652:	ee36 9aab 	vadd.f32	s18, s13, s23
 8016656:	eef8 caec 	vcvt.f32.s32	s25, s25
 801665a:	ee39 ea6c 	vsub.f32	s28, s18, s25
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 801665e:	f040 863f 	bne.w	80172e0 <tMBTriangle_tick+0xf70>
        if (sw > 0) p = eof_offset;
 8016662:	eef5 bac0 	vcmpe.f32	s23, #0.0
 8016666:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 8016668:	ee28 8a2b 	vmul.f32	s16, s16, s23
        if (sw > 0) p = eof_offset;
 801666c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8016670:	ee7e ea48 	vsub.f32	s29, s28, s16
        if (sw > 0) p = eof_offset;
 8016674:	f340 80ce 	ble.w	8016814 <tMBTriangle_tick+0x4a4>
        if (!k) {
 8016678:	2e00      	cmp	r6, #0
 801667a:	f040 81e1 	bne.w	8016a40 <tMBTriangle_tick+0x6d0>
                if (p_at_reset >= b) {
 801667e:	eef4 9aee 	vcmpe.f32	s19, s29
 8016682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016686:	f240 8449 	bls.w	8016f1c <tMBTriangle_tick+0xbac>
                if (p_at_reset >= 1.0f) {
 801668a:	eef4 eae8 	vcmpe.f32	s29, s17
 801668e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016692:	f280 82bf 	bge.w	8016c14 <tMBTriangle_tick+0x8a4>
 8016696:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8016810 <tMBTriangle_tick+0x4a0>
            x = -0.5f + p_at_reset * invB;
 801669a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801669e:	ee2c ca27 	vmul.f32	s24, s24, s15
 80166a2:	eef0 ca40 	vmov.f32	s25, s0
	i = lrintf(r - 0.5f);
 80166a6:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80166aa:	f004 f805 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80166ae:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
 80166b2:	eeed ca2e 	vfma.f32	s25, s26, s29
	c->BLEPindices[c->mostRecentBLEP] = i;
 80166b6:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 80166ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80166be:	eed8 7a0c 	vfnms.f32	s15, s16, s24
 80166c2:	e203      	b.n	8016acc <tMBTriangle_tick+0x75c>
    sw = w * c->syncdir;
 80166c4:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80166c8:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 80166cc:	ee6c ba2a 	vmul.f32	s23, s24, s21
    float inv_sw = c->_inv_w * c->syncdir;
 80166d0:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
 80166d4:	eebd 8aeb 	vcvt.s32.f32	s16, s23
 80166d8:	ee7b 6aa6 	vadd.f32	s13, s23, s13
 80166dc:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80166e0:	ee36 8ac8 	vsub.f32	s16, s13, s16
    } else if (!k) {  /* normal operation, slope currently up */
 80166e4:	2e00      	cmp	r6, #0
 80166e6:	f43f ae89 	beq.w	80163fc <tMBTriangle_tick+0x8c>
        x = 0.5f - (p - b) * invB1;
 80166ea:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
        if (sw > 0)
 80166ee:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = 0.5f - (p - b) * invB1;
 80166f2:	ee79 7ac8 	vsub.f32	s15, s19, s16
 80166f6:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
 80166fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
 80166fe:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
 8016702:	f340 815a 	ble.w	80169ba <tMBTriangle_tick+0x64a>
            if (p >= 1.0f) {
 8016706:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 801670a:	eeb4 8acb 	vcmpe.f32	s16, s22
 801670e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016712:	f6ff ae8f 	blt.w	8016434 <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
 8016716:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
 801671a:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8016810 <tMBTriangle_tick+0x4a0>
                p -= 1.0f;
 801671e:	ee78 ca4b 	vsub.f32	s25, s16, s22
	_tMBTriangle* c = *osc;
 8016722:	683e      	ldr	r6, [r7, #0]
 8016724:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
 8016728:	eeb0 0a68 	vmov.f32	s0, s17
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 801672c:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
 8016730:	eeac 0a8c 	vfma.f32	s0, s25, s24
	scale *= w;
 8016734:	ee6b baa7 	vmul.f32	s23, s23, s15
	i = lrintf(r - 0.5f);
 8016738:	f003 ffbe 	bl	801a6b8 <lrintf>
	r -= (float)i;
 801673c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016740:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016744:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
 8016748:	eef4 9aec 	vcmpe.f32	s19, s25
	r -= (float)i;
 801674c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016750:	3301      	adds	r3, #1
 8016752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
 8016756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 801675a:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801675e:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016762:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016766:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 801676a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801676e:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8016772:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016776:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801677a:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801677e:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8016782:	f103 0301 	add.w	r3, r3, #1
 8016786:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801678a:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
 801678e:	f200 843e 	bhi.w	801700e <tMBTriangle_tick+0xc9e>
                x = 0.5f - (p - b) * invB1;
 8016792:	ee79 7a8b 	vadd.f32	s15, s19, s22
	_tMBTriangle* c = *osc;
 8016796:	683f      	ldr	r7, [r7, #0]
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8016798:	ee3c dae9 	vsub.f32	s26, s25, s19
	i = lrintf(r - 0.5f);
 801679c:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 80167a0:	ee77 7ac8 	vsub.f32	s15, s15, s16
 80167a4:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
 80167a8:	eead 0a0c 	vfma.f32	s0, s26, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80167ac:	eef1 ba6b 	vneg.f32	s23, s23
                x = 0.5f - (p - b) * invB1;
 80167b0:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 80167b4:	f003 ff80 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80167b8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80167bc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80167c0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p -= 1.0f;
 80167c4:	eeb0 8a6c 	vmov.f32	s16, s25
	r -= (float)i;
 80167c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80167cc:	3301      	adds	r3, #1
 80167ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80167d2:	eedd 7a0c 	vfnms.f32	s15, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80167d6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80167da:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80167de:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80167e2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80167e6:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80167ea:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80167ee:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80167f2:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80167f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
 80167fa:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80167fc:	4433      	add	r3, r6
 80167fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016802:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8016806:	e615      	b.n	8016434 <tMBTriangle_tick+0xc4>
 8016808:	08025f94 	.word	0x08025f94
 801680c:	0802a698 	.word	0x0802a698
 8016810:	42800000 	.word	0x42800000
        else if (sw < 0) p = 1.0f - eof_offset;
 8016814:	f100 828a 	bmi.w	8016d2c <tMBTriangle_tick+0x9bc>
        if (!k) {
 8016818:	2e00      	cmp	r6, #0
 801681a:	f000 81f4 	beq.w	8016c06 <tMBTriangle_tick+0x896>
            x = 0.5f - (p_at_reset - b) * invB1;
 801681e:	ee79 7a88 	vadd.f32	s15, s19, s16
 8016822:	ee7c 6ac9 	vsub.f32	s13, s25, s18
 8016826:	eef0 8a4b 	vmov.f32	s17, s22
    p += sw - (int)sw;
 801682a:	eeb0 8a4e 	vmov.f32	s16, s28
            x = 0.5f - (p_at_reset - b) * invB1;
 801682e:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8016832:	eeed 8aa6 	vfma.f32	s17, s27, s13
        else if (sw < 0)
 8016836:	e5fd      	b.n	8016434 <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;;
 8016838:	ed5f ca0b 	vldr	s25, [pc, #-44]	; 8016810 <tMBTriangle_tick+0x4a0>
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 801683c:	ee38 ea69 	vsub.f32	s28, s16, s19
	i = lrintf(r - 0.5f);
 8016840:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
 8016844:	f8d7 8000 	ldr.w	r8, [r7]
 8016848:	ee6c ca2c 	vmul.f32	s25, s24, s25
                x = 0.5f - (p - b) * invB1;;
 801684c:	ee79 7ac8 	vsub.f32	s15, s19, s16
 8016850:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8016854:	eeae 0a2c 	vfma.f32	s0, s28, s25
 8016858:	ee3d ba2d 	vadd.f32	s22, s26, s27
                x = 0.5f - (p - b) * invB1;;
 801685c:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8016860:	f003 ff2a 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8016864:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016868:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801686c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016870:	ee6b 7acb 	vnmul.f32	s15, s23, s22
	r -= (float)i;
 8016874:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016878:	3301      	adds	r3, #1
 801687a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801687e:	ee9e 7a2c 	vfnms.f32	s14, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016882:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016886:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801688a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801688e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016892:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016896:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801689a:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801689e:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80168a2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80168a6:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80168aa:	3301      	adds	r3, #1
 80168ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80168b0:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
 80168b4:	2301      	movs	r3, #1
}
 80168b6:	e5b4      	b.n	8016422 <tMBTriangle_tick+0xb2>
            if (p < 0.0f) {
 80168b8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80168bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168c0:	f57f adb8 	bpl.w	8016434 <tMBTriangle_tick+0xc4>
 80168c4:	eef5 ba40 	vcmp.f32	s23, #0.0
 80168c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80168cc:	f57f adb2 	bpl.w	8016434 <tMBTriangle_tick+0xc4>
	r = MINBLEP_PHASES * phase * inv_w;
 80168d0:	ee6c ca08 	vmul.f32	s25, s24, s16
	i = lrintf(r - 0.5f);
 80168d4:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 8016810 <tMBTriangle_tick+0x4a0>
 80168d8:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
 80168dc:	f8d7 8000 	ldr.w	r8, [r7]
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 80168e0:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
 80168e4:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 80168e8:	eeac 0aa8 	vfma.f32	s0, s25, s17
 80168ec:	ee67 baab 	vmul.f32	s23, s15, s23
 80168f0:	f003 fee2 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80168f4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80168f8:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80168fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
 8016900:	ee38 8a0b 	vadd.f32	s16, s16, s22
	r -= (float)i;
 8016904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016908:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801690a:	eeb1 7a6b 	vneg.f32	s14, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801690e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
 8016912:	eef4 9ac8 	vcmpe.f32	s19, s16
	r -= (float)i;
 8016916:	eedc 7aa8 	vfnms.f32	s15, s25, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801691a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801691e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016922:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
 8016926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801692a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801692e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8016932:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016936:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801693a:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801693e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016942:	f103 0301 	add.w	r3, r3, #1
 8016946:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801694a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
 801694e:	f340 84cb 	ble.w	80172e8 <tMBTriangle_tick+0xf78>
                x = -0.5f + p * invB;
 8016952:	ee2c ca28 	vmul.f32	s24, s24, s17
	_tMBTriangle* c = *osc;
 8016956:	683f      	ldr	r7, [r7, #0]
 8016958:	ee78 ca69 	vsub.f32	s25, s16, s19
	i = lrintf(r - 0.5f);
 801695c:	eeb0 0a49 	vmov.f32	s0, s18
                x = -0.5f + p * invB;
 8016960:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
 8016964:	eeac 0a8c 	vfma.f32	s0, s25, s24
 8016968:	f003 fea6 	bl	801a6b8 <lrintf>
	r -= (float)i;
 801696c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016970:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016974:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8016978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801697c:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 801697e:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016982:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016986:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801698a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801698e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016992:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016996:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801699a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 801699e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80169a2:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80169a6:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80169aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80169ae:	3301      	adds	r3, #1
 80169b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80169b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 80169b8:	e53c      	b.n	8016434 <tMBTriangle_tick+0xc4>
        else if (sw < 0)
 80169ba:	f57f ad3b 	bpl.w	8016434 <tMBTriangle_tick+0xc4>
            if (p < b) {
 80169be:	eeb4 8ae9 	vcmpe.f32	s16, s19
 80169c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169c6:	f100 8174 	bmi.w	8016cb2 <tMBTriangle_tick+0x942>
            if (p < 0.0f) {
 80169ca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80169ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169d2:	f57f ad2f 	bpl.w	8016434 <tMBTriangle_tick+0xc4>
                p += 1.0f;
 80169d6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 80169da:	ed1f ba73 	vldr	s22, [pc, #-460]	; 8016810 <tMBTriangle_tick+0x4a0>
	r = MINBLEP_PHASES * phase * inv_w;
 80169de:	ee2c ca08 	vmul.f32	s24, s24, s16
	_tMBTriangle* c = *osc;
 80169e2:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 80169e4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
 80169e8:	ee38 8a09 	vadd.f32	s16, s16, s18
                x = 0.5f - (p - b) * invB1;
 80169ec:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 80169f0:	eeac 0a0b 	vfma.f32	s0, s24, s22
                x = 0.5f - (p - b) * invB1;
 80169f4:	ee79 7ac8 	vsub.f32	s15, s19, s16
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 80169f8:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 80169fc:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8016a00:	f003 fe5a 	bl	801a6b8 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016a04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	r -= (float)i;
 8016a08:	ee07 0a90 	vmov	s15, r0
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016a0c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016a10:	ee2d da6b 	vnmul.f32	s26, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016a14:	3301      	adds	r3, #1
	r -= (float)i;
 8016a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016a1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016a1e:	eedc 7a0b 	vfnms.f32	s15, s24, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016a22:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016a26:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016a2a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016a2e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016a32:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016a36:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016a3a:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
 8016a3e:	e6d8      	b.n	80167f2 <tMBTriangle_tick+0x482>
            x = 0.5f - (p_at_reset - b) * invB1;
 8016a40:	ee3c 9ac9 	vsub.f32	s18, s25, s18
 8016a44:	ee79 7a88 	vadd.f32	s15, s19, s16
                if (p_at_reset >= 1.0f) {
 8016a48:	eef4 eae8 	vcmpe.f32	s29, s17
            x = 0.5f - (p_at_reset - b) * invB1;
 8016a4c:	eef0 ca4b 	vmov.f32	s25, s22
 8016a50:	ee77 7a89 	vadd.f32	s15, s15, s18
                if (p_at_reset >= 1.0f) {
 8016a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8016a58:	eeed caa7 	vfma.f32	s25, s27, s15
                if (p_at_reset >= 1.0f) {
 8016a5c:	f280 81e1 	bge.w	8016e22 <tMBTriangle_tick+0xab2>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8016a60:	ee3d ea2d 	vadd.f32	s28, s26, s27
 8016a64:	ed5f 7a96 	vldr	s15, [pc, #-600]	; 8016810 <tMBTriangle_tick+0x4a0>
 8016a68:	ee2c ca27 	vmul.f32	s24, s24, s15
 8016a6c:	ee2e ea2b 	vmul.f32	s28, s28, s23
	i = lrintf(r - 0.5f);
 8016a70:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016a74:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8016a78:	f003 fe1e 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8016a7c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016a80:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016a84:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8016a88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016a8c:	3301      	adds	r3, #1
	r -= (float)i;
 8016a8e:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016a92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016a96:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016a9a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016a9e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8016aa2:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016aa6:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016aaa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016aae:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016ab2:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016ab6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016aba:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016abe:	3301      	adds	r3, #1
 8016ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016ac4:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8016ac8:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016acc:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
 8016ad0:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            if (p >= b) {
 8016ad4:	eef4 9ac8 	vcmpe.f32	s19, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ad8:	3301      	adds	r3, #1
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
 8016ada:	ee78 caec 	vsub.f32	s25, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
 8016ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ae6:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016aea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016aee:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	scale *= w;
 8016af2:	ee6c caab 	vmul.f32	s25, s25, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016af6:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016afa:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016afe:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016b02:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016b06:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016b0a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016b0e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016b12:	f103 0301 	add.w	r3, r3, #1
 8016b16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016b1a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
 8016b1e:	d93d      	bls.n	8016b9c <tMBTriangle_tick+0x82c>
            x = -0.5f + p * invB;
 8016b20:	eeed 8a08 	vfma.f32	s17, s26, s16
            k = 0;
 8016b24:	464e      	mov	r6, r9
 8016b26:	e485      	b.n	8016434 <tMBTriangle_tick+0xc4>
                p -= 1.0f;
 8016b28:	ed5f 7ac7 	vldr	s15, [pc, #-796]	; 8016810 <tMBTriangle_tick+0x4a0>
 8016b2c:	ee38 8a49 	vsub.f32	s16, s16, s18
                x = -0.5f + p * invB;
 8016b30:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
 8016b34:	683f      	ldr	r7, [r7, #0]
 8016b36:	ee2c ca27 	vmul.f32	s24, s24, s15
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8016b3a:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
 8016b3e:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8016b42:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8016b46:	f003 fdb7 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8016b4a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016b4e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016b52:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8016b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016b5a:	3301      	adds	r3, #1
	scale *= w;
 8016b5c:	ee6d daab 	vmul.f32	s27, s27, s23
                x = -0.5f + p * invB;
 8016b60:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016b68:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016b6c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016b70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016b74:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016b78:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016b7c:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8016b80:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016b84:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016b88:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016b8c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8016b90:	3301      	adds	r3, #1
 8016b92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016b96:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8016b9a:	e44b      	b.n	8016434 <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;
 8016b9c:	ee39 7ac8 	vsub.f32	s14, s19, s16
	_tMBTriangle* c = *osc;
 8016ba0:	683f      	ldr	r7, [r7, #0]
                x = 0.5f - (p - b) * invB1;
 8016ba2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8016ba6:	ee38 9a69 	vsub.f32	s18, s16, s19
	i = lrintf(r - 0.5f);
 8016baa:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 8016bae:	eee7 7a2d 	vfma.f32	s15, s14, s27
 8016bb2:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 8016bb6:	eea9 0a0c 	vfma.f32	s0, s18, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016bba:	ee2b dacd 	vnmul.f32	s26, s23, s26
                x = 0.5f - (p - b) * invB1;
 8016bbe:	eef0 8a67 	vmov.f32	s17, s15
	i = lrintf(r - 0.5f);
 8016bc2:	f003 fd79 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8016bc6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016bca:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016bce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016bd2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	r -= (float)i;
 8016bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016bda:	3301      	adds	r3, #1
 8016bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016be0:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016be4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016be8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016bec:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016bf0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016bf4:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8016bf8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016bfc:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016c00:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016c04:	e5f7      	b.n	80167f6 <tMBTriangle_tick+0x486>
            x = -0.5f + p_at_reset * invB;
 8016c06:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    p += sw - (int)sw;
 8016c0a:	eeb0 8a4e 	vmov.f32	s16, s28
            x = -0.5f + p_at_reset * invB;
 8016c0e:	eeed 8a2e 	vfma.f32	s17, s26, s29
            else if (sw < 0)
 8016c12:	e40f      	b.n	8016434 <tMBTriangle_tick+0xc4>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8016c14:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 8016c18:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 8016fb4 <tMBTriangle_tick+0xc44>
 8016c1c:	ee2c ca07 	vmul.f32	s24, s24, s14
 8016c20:	ee27 faab 	vmul.f32	s30, s15, s23
                    p_at_reset -= 1.0f;
 8016c24:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
 8016c28:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
 8016c2c:	ee7e eac9 	vsub.f32	s29, s29, s18
	i = lrintf(r - 0.5f);
 8016c30:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
 8016c34:	eef0 ca68 	vmov.f32	s25, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8016c38:	ee38 ba2e 	vadd.f32	s22, s16, s29
                    x = -0.5f + p_at_reset * invB;
 8016c3c:	eeed ca2e 	vfma.f32	s25, s26, s29
	i = lrintf(r - 0.5f);
 8016c40:	eeab 0a0c 	vfma.f32	s0, s22, s24
 8016c44:	f003 fd38 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8016c48:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016c4c:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016c50:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8016c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016c58:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
 8016c5a:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
 8016c5e:	eedb 7a0c 	vfnms.f32	s15, s22, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8016c66:	eea8 0a0c 	vfma.f32	s0, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016c6a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016c6e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016c72:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8016c76:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016c7a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8016c7e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016c82:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016c86:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016c8a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016c8e:	3301      	adds	r3, #1
 8016c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016c94:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 8016c98:	f003 fd0e 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8016c9c:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016ca0:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8016ca4:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8016ca8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016cac:	eed8 7a0c 	vfnms.f32	s15, s16, s24
 8016cb0:	e70c      	b.n	8016acc <tMBTriangle_tick+0x75c>
                x = -0.5f + p * invB;
 8016cb2:	ed9f 9ac0 	vldr	s18, [pc, #768]	; 8016fb4 <tMBTriangle_tick+0xc44>
 8016cb6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016cba:	ee38 ba69 	vsub.f32	s22, s16, s19
	_tMBTriangle* c = *osc;
 8016cbe:	683e      	ldr	r6, [r7, #0]
 8016cc0:	ee2c 9a09 	vmul.f32	s18, s24, s18
                x = -0.5f + p * invB;
 8016cc4:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8016cc8:	eeab 0a09 	vfma.f32	s0, s22, s18
 8016ccc:	f003 fcf4 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8016cd0:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016cd4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
 8016cd8:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
 8016cdc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016ce0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ce4:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8016ce6:	eee8 8a0d 	vfma.f32	s17, s16, s26
	scale *= w;
 8016cea:	ee67 7aab 	vmul.f32	s15, s15, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016cf2:	ee9b 7a09 	vfnms.f32	s14, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016cf6:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016cfa:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016cfe:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8016d02:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016d06:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016d0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016d0e:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016d12:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016d16:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016d1a:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8016d1e:	3301      	adds	r3, #1
 8016d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016d24:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
 8016d28:	2600      	movs	r6, #0
}
 8016d2a:	e64e      	b.n	80169ca <tMBTriangle_tick+0x65a>
        else if (sw < 0) p = 1.0f - eof_offset;
 8016d2c:	ee38 fac8 	vsub.f32	s30, s17, s16
        if (!k) {
 8016d30:	2e00      	cmp	r6, #0
 8016d32:	f040 8141 	bne.w	8016fb8 <tMBTriangle_tick+0xc48>
                if (p_at_reset < 0.0f) {
 8016d36:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8016d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d3e:	f100 81ac 	bmi.w	801709a <tMBTriangle_tick+0xd2a>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8016d42:	ee3d 9a2d 	vadd.f32	s18, s26, s27
 8016d46:	eddf 7a9b 	vldr	s15, [pc, #620]	; 8016fb4 <tMBTriangle_tick+0xc44>
            x = -0.5f + p_at_reset * invB;
 8016d4a:	ee6d ea2e 	vmul.f32	s29, s26, s29
 8016d4e:	ee2c ca27 	vmul.f32	s24, s24, s15
 8016d52:	ee2b 9ac9 	vnmul.f32	s18, s23, s18
	i = lrintf(r - 0.5f);
 8016d56:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016d5a:	eef1 8a48 	vneg.f32	s17, s16
 8016d5e:	eea8 0a4c 	vfms.f32	s0, s16, s24
 8016d62:	f003 fca9 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8016d66:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016d6a:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016d6e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 8016d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016d76:	3301      	adds	r3, #1
	r -= (float)i;
 8016d78:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016d80:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016d84:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016d88:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8016d8c:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016d90:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016d94:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016d98:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016d9c:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016da0:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016da4:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016da8:	3301      	adds	r3, #1
 8016daa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016dae:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8016db2:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016db6:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
 8016dba:	ee6b eaae 	vmul.f32	s29, s23, s29
            if (p < b) {
 8016dbe:	eef4 9acf 	vcmpe.f32	s19, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016dc2:	3301      	adds	r3, #1
 8016dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
 8016dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016dcc:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016dd0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016dd4:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8016dd8:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016ddc:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016de0:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016de4:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016de8:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016dec:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016df0:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016df4:	f103 0301 	add.w	r3, r3, #1
 8016df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016dfc:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
 8016e00:	f300 810c 	bgt.w	801701c <tMBTriangle_tick+0xcac>
            x = 0.5f - (p - b) * invB1;
 8016e04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            k = 1;
 8016e08:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
 8016e0a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8016e0e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8016e12:	eeb0 8a4f 	vmov.f32	s16, s30
 8016e16:	ee77 7aa9 	vadd.f32	s15, s15, s19
 8016e1a:	eee7 8aad 	vfma.f32	s17, s15, s27
 8016e1e:	f7ff bb09 	b.w	8016434 <tMBTriangle_tick+0xc4>
                    p_at_reset -= 1.0f;
 8016e22:	ee7e eae8 	vsub.f32	s29, s29, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8016e26:	eddf 7a63 	vldr	s15, [pc, #396]	; 8016fb4 <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
 8016e2a:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8016e2e:	ee2c ca27 	vmul.f32	s24, s24, s15
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8016e32:	ee38 fa2e 	vadd.f32	s30, s16, s29
	i = lrintf(r - 0.5f);
 8016e36:	eeb0 0a6c 	vmov.f32	s0, s25
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8016e3a:	ee3d ea2d 	vadd.f32	s28, s26, s27
	i = lrintf(r - 0.5f);
 8016e3e:	eeac 0a0f 	vfma.f32	s0, s24, s30
 8016e42:	f003 fc39 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8016e46:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e4a:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016e4e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8016e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e56:	3301      	adds	r3, #1
	scale *= w;
 8016e58:	ee2e ea2b 	vmul.f32	s28, s28, s23
                if (!k && p_at_reset >= b) {
 8016e5c:	eef4 9aee 	vcmpe.f32	s19, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016e64:	eedc 7a0f 	vfnms.f32	s15, s24, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016e68:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016e6c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016e70:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
 8016e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016e78:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016e7c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8016e80:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016e84:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016e88:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016e8c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016e90:	f103 0301 	add.w	r3, r3, #1
 8016e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016e98:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
 8016e9c:	f200 81b5 	bhi.w	801720a <tMBTriangle_tick+0xe9a>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8016ea0:	ee78 7a69 	vsub.f32	s15, s16, s19
	_tMBTriangle* c = *osc;
 8016ea4:	683e      	ldr	r6, [r7, #0]
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016ea6:	ee39 7aa8 	vadd.f32	s14, s19, s17
	i = lrintf(r - 0.5f);
 8016eaa:	eeb0 0a6c 	vmov.f32	s0, s25
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8016eae:	ee77 eaae 	vadd.f32	s29, s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016eb2:	ee37 7a08 	vadd.f32	s14, s14, s16
	i = lrintf(r - 0.5f);
 8016eb6:	eeac 0a2e 	vfma.f32	s0, s24, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016eba:	ee37 9a09 	vadd.f32	s18, s14, s18
	i = lrintf(r - 0.5f);
 8016ebe:	f003 fbfb 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8016ec2:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ec6:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016eca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016ece:	eef1 7a4e 	vneg.f32	s15, s28
	r -= (float)i;
 8016ed2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ed6:	3301      	adds	r3, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016ed8:	eea9 ba2d 	vfma.f32	s22, s18, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8016ee0:	ee9c 7a2e 	vfnms.f32	s14, s24, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016ee4:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016ee8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016eec:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8016ef0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016ef4:	eb06 0382 	add.w	r3, r6, r2, lsl #2
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016ef8:	eef0 ca4b 	vmov.f32	s25, s22
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016efc:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016f00:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016f04:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016f08:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8016f0c:	3301      	adds	r3, #1
 8016f0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016f12:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
 8016f16:	f8d7 8000 	ldr.w	r8, [r7]
 8016f1a:	e5a9      	b.n	8016a70 <tMBTriangle_tick+0x700>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8016f1c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8016fb4 <tMBTriangle_tick+0xc44>
 8016f20:	ee3e fa69 	vsub.f32	s30, s28, s19
	i = lrintf(r - 0.5f);
 8016f24:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016f28:	ee2c ca07 	vmul.f32	s24, s24, s14
 8016f2c:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 8016f30:	eeaf 0a0c 	vfma.f32	s0, s30, s24
 8016f34:	ee27 eaab 	vmul.f32	s28, s15, s23
 8016f38:	f003 fbbe 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8016f3c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016f40:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8016f44:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 8016f48:	eef4 eae8 	vcmpe.f32	s29, s17
	r -= (float)i;
 8016f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016f50:	3301      	adds	r3, #1
 8016f52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 8016f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8016f5a:	eedf 7a0c 	vfnms.f32	s15, s30, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8016f5e:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016f62:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8016f66:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8016f6a:	eeb0 fa4e 	vmov.f32	s30, s28
 8016f6e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8016f72:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8016f76:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016f7a:	eef1 7a4e 	vneg.f32	s15, s28
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8016f7e:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8016f82:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8016f86:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8016f8a:	f103 0301 	add.w	r3, r3, #1
 8016f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016f92:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 8016f96:	da7d      	bge.n	8017094 <tMBTriangle_tick+0xd24>
                    x = 0.5f - (p_at_reset - b) * invB1;
 8016f98:	ee79 6a88 	vadd.f32	s13, s19, s16
 8016f9c:	f8d7 8000 	ldr.w	r8, [r7]
 8016fa0:	ee76 6aac 	vadd.f32	s13, s13, s25
 8016fa4:	ee76 6ac9 	vsub.f32	s13, s13, s18
 8016fa8:	eea6 baad 	vfma.f32	s22, s13, s27
 8016fac:	eef0 ca4b 	vmov.f32	s25, s22
 8016fb0:	e55e      	b.n	8016a70 <tMBTriangle_tick+0x700>
 8016fb2:	bf00      	nop
 8016fb4:	42800000 	.word	0x42800000
            x = 0.5f - (p_at_reset - b) * invB1;
 8016fb8:	ee39 7a88 	vadd.f32	s14, s19, s16
 8016fbc:	ee3c 9ac9 	vsub.f32	s18, s25, s18
                if (p_at_reset < b) {
 8016fc0:	eef4 9aee 	vcmpe.f32	s19, s29
            x = 0.5f - (p_at_reset - b) * invB1;
 8016fc4:	ee37 7a09 	vadd.f32	s14, s14, s18
                if (p_at_reset < b) {
 8016fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8016fcc:	ee6d 7a87 	vmul.f32	s15, s27, s14
                if (p_at_reset < b) {
 8016fd0:	f300 80da 	bgt.w	8017188 <tMBTriangle_tick+0xe18>
                if (p_at_reset < 0.0f) {
 8016fd4:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8016fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fdc:	f100 8128 	bmi.w	8017230 <tMBTriangle_tick+0xec0>
        else if (sw < 0)
 8016fe0:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 8016fb4 <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
 8016fe4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8016fe8:	ee77 eaa8 	vadd.f32	s29, s15, s17
 8016fec:	ee2c ca07 	vmul.f32	s24, s24, s14
 8016ff0:	eef1 8a48 	vneg.f32	s17, s16
 8016ff4:	eea8 0a4c 	vfms.f32	s0, s16, s24
 8016ff8:	f003 fb5e 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8016ffc:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017000:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 8017004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017008:	eedc 7a28 	vfnms.f32	s15, s24, s17
 801700c:	e6d3      	b.n	8016db6 <tMBTriangle_tick+0xa46>
                x = -0.5f + p * invB;
 801700e:	eeed 8a2c 	vfma.f32	s17, s26, s25
                k = 0;
 8017012:	2600      	movs	r6, #0
                p -= 1.0f;
 8017014:	eeb0 8a6c 	vmov.f32	s16, s25
 8017018:	f7ff ba0c 	b.w	8016434 <tMBTriangle_tick+0xc4>
                x = -0.5f + p * invB;
 801701c:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
 8017020:	683f      	ldr	r7, [r7, #0]
 8017022:	ee3f 9a69 	vsub.f32	s18, s30, s19
                k = 0;
 8017026:	464e      	mov	r6, r9
}
 8017028:	eeb0 8a4f 	vmov.f32	s16, s30
	i = lrintf(r - 0.5f);
 801702c:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
 8017030:	eeed 8a0f 	vfma.f32	s17, s26, s30
	scale *= w;
 8017034:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 8017038:	eea9 0a0c 	vfma.f32	s0, s18, s24
 801703c:	f003 fb3c 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017040:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017044:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017048:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801704c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017050:	3301      	adds	r3, #1
	scale *= w;
 8017052:	ee6d ba2b 	vmul.f32	s23, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017056:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801705a:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801705e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017062:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017066:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801706a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801706e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017072:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017076:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801707a:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801707e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017082:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8017086:	3301      	adds	r3, #1
 8017088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801708c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8017090:	f7ff b9d0 	b.w	8016434 <tMBTriangle_tick+0xc4>
 8017094:	f8d7 8000 	ldr.w	r8, [r7]
 8017098:	e5c4      	b.n	8016c24 <tMBTriangle_tick+0x8b4>
	i = lrintf(r - 0.5f);
 801709a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 801709e:	ed1f 7a3b 	vldr	s14, [pc, #-236]	; 8016fb4 <tMBTriangle_tick+0xc44>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80170a2:	ee3d ba2d 	vadd.f32	s22, s26, s27
 80170a6:	ee2c ca07 	vmul.f32	s24, s24, s14
	i = lrintf(r - 0.5f);
 80170aa:	eeb0 0a67 	vmov.f32	s0, s15
 80170ae:	edcd 7a01 	vstr	s15, [sp, #4]
 80170b2:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    p_at_reset += 1.0f;
 80170b6:	ee7e faa8 	vadd.f32	s31, s29, s17
	i = lrintf(r - 0.5f);
 80170ba:	eeac 0a0e 	vfma.f32	s0, s24, s28
 80170be:	f003 fafb 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80170c2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80170c6:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80170ca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80170ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                if (k && p_at_reset < b) {
 80170d2:	eddd 7a01 	vldr	s15, [sp, #4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80170d6:	3301      	adds	r3, #1
 80170d8:	eeb1 9a4b 	vneg.f32	s18, s22
                if (k && p_at_reset < b) {
 80170dc:	eef4 9aef 	vcmpe.f32	s19, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80170e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80170e4:	ee9c 7a0e 	vfnms.f32	s14, s24, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80170e8:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80170ec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80170f0:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
 80170f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80170f8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80170fc:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8017100:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017104:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017108:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801710c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8017110:	f103 0301 	add.w	r3, r3, #1
 8017114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017118:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
 801711c:	f340 80ed 	ble.w	80172fa <tMBTriangle_tick+0xf8a>
                    x = -0.5f + p_at_reset * invB;
 8017120:	ee78 ca69 	vsub.f32	s25, s16, s19
	_tMBTriangle* c = *osc;
 8017124:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
 8017126:	ee6d ea2f 	vmul.f32	s29, s26, s31
	r = MINBLEP_PHASES * phase * inv_w;
 801712a:	ee7c caaf 	vadd.f32	s25, s25, s31
	i = lrintf(r - 0.5f);
 801712e:	eeec 7a2c 	vfma.f32	s15, s24, s25
 8017132:	eeb0 0a67 	vmov.f32	s0, s15
 8017136:	f003 fabf 	bl	801a6b8 <lrintf>
	r -= (float)i;
 801713a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801713e:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017142:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801714a:	3301      	adds	r3, #1
	r -= (float)i;
 801714c:	eedc 7a2c 	vfnms.f32	s15, s24, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017154:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017158:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801715c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8017160:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017164:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8017168:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801716c:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017170:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017174:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8017178:	3301      	adds	r3, #1
 801717a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801717e:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
 8017182:	f8d7 8000 	ldr.w	r8, [r7]
 8017186:	e5e6      	b.n	8016d56 <tMBTriangle_tick+0x9e6>
	r = MINBLEP_PHASES * phase * inv_w;
 8017188:	ed5f 7a76 	vldr	s15, [pc, #-472]	; 8016fb4 <tMBTriangle_tick+0xc44>
 801718c:	ee78 ca47 	vsub.f32	s25, s16, s14
	i = lrintf(r - 0.5f);
 8017190:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017194:	ee2c ca27 	vmul.f32	s24, s24, s15
	scale *= w;
 8017198:	ee3d ba2d 	vadd.f32	s22, s26, s27
	i = lrintf(r - 0.5f);
 801719c:	eeac 0a2c 	vfma.f32	s0, s24, s25
 80171a0:	f003 fa8a 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80171a4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80171a8:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80171ac:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80171b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80171b4:	3301      	adds	r3, #1
	scale *= w;
 80171b6:	ee2b ba2b 	vmul.f32	s22, s22, s23
                if (p_at_reset < 0.0f) {
 80171ba:	eef5 eac0 	vcmpe.f32	s29, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80171be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80171c2:	eedc 7a2c 	vfnms.f32	s15, s24, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80171c6:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80171ca:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80171ce:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
 80171d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80171d6:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80171da:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80171de:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80171e2:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80171e6:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80171ea:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80171ee:	f103 0301 	add.w	r3, r3, #1
 80171f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80171f6:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
 80171fa:	d46e      	bmi.n	80172da <tMBTriangle_tick+0xf6a>
                    x = -0.5f + p_at_reset * invB;
 80171fc:	ee6d ea2e 	vmul.f32	s29, s26, s29
        else if (sw < 0)
 8017200:	f8d7 8000 	ldr.w	r8, [r7]
 8017204:	eeb1 9a4b 	vneg.f32	s18, s22
 8017208:	e5a5      	b.n	8016d56 <tMBTriangle_tick+0x9e6>
	i = lrintf(r - 0.5f);
 801720a:	eeb0 0a6c 	vmov.f32	s0, s25
                    x = -0.5f + p_at_reset * invB;
 801720e:	eeed ca2e 	vfma.f32	s25, s26, s29
	i = lrintf(r - 0.5f);
 8017212:	eeac 0a08 	vfma.f32	s0, s24, s16
 8017216:	f003 fa4f 	bl	801a6b8 <lrintf>
	r -= (float)i;
 801721a:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 801721e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8017222:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8017226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801722a:	eedc 7a08 	vfnms.f32	s15, s24, s16
 801722e:	e44d      	b.n	8016acc <tMBTriangle_tick+0x75c>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8017230:	ee3d ba2d 	vadd.f32	s22, s26, s27
 8017234:	ed5f 7aa1 	vldr	s15, [pc, #-644]	; 8016fb4 <tMBTriangle_tick+0xc44>
 8017238:	ee2c ca27 	vmul.f32	s24, s24, s15
 801723c:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    x = 0.5f - (p_at_reset - b) * invB1;
 8017240:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8017244:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
 8017248:	ee39 9a08 	vadd.f32	s18, s18, s16
 801724c:	ee79 7aef 	vsub.f32	s15, s19, s31
	i = lrintf(r - 0.5f);
 8017250:	eeb0 0a6c 	vmov.f32	s0, s25
 8017254:	eef0 ea6f 	vmov.f32	s29, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
 8017258:	ee79 7a27 	vadd.f32	s15, s18, s15
	i = lrintf(r - 0.5f);
 801725c:	eeae 0a0c 	vfma.f32	s0, s28, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017260:	eeb1 9a4b 	vneg.f32	s18, s22
 8017264:	eee7 eaad 	vfma.f32	s29, s15, s27
	i = lrintf(r - 0.5f);
 8017268:	f003 fa26 	bl	801a6b8 <lrintf>
	r -= (float)i;
 801726c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017270:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017274:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8017278:	eeb0 0a6c 	vmov.f32	s0, s25
	r -= (float)i;
 801727c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017280:	3301      	adds	r3, #1
 8017282:	eef1 8a48 	vneg.f32	s17, s16
 8017286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 801728a:	eea8 0a4c 	vfms.f32	s0, s16, s24
	r -= (float)i;
 801728e:	eede 7a0c 	vfnms.f32	s15, s28, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017292:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017296:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801729a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801729e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80172a2:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80172a6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80172aa:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80172ae:	edc3 fa3d 	vstr	s31, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80172b2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80172b6:	3301      	adds	r3, #1
 80172b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80172bc:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 80172c0:	f003 f9fa 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80172c4:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 80172c8:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80172cc:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 80172d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80172d4:	eedc 7a28 	vfnms.f32	s15, s24, s17
 80172d8:	e56d      	b.n	8016db6 <tMBTriangle_tick+0xa46>
 80172da:	f8d7 8000 	ldr.w	r8, [r7]
 80172de:	e7af      	b.n	8017240 <tMBTriangle_tick+0xed0>
    p += sw - (int)sw;
 80172e0:	eeb0 8a4e 	vmov.f32	s16, s28
 80172e4:	f7ff b887 	b.w	80163f6 <tMBTriangle_tick+0x86>
                x = 0.5f - (p - b) * invB1;
 80172e8:	ee79 7ac8 	vsub.f32	s15, s19, s16
                k = 1;
 80172ec:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
 80172ee:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80172f2:	eee7 8aad 	vfma.f32	s17, s15, s27
 80172f6:	f7ff b89d 	b.w	8016434 <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
 80172fa:	eee8 7a4c 	vfms.f32	s15, s16, s24
                    x = 0.5f - (p_at_reset - b)  * invB1;
 80172fe:	ee79 caef 	vsub.f32	s25, s19, s31
 8017302:	eeb1 9a48 	vneg.f32	s18, s16
 8017306:	eeec 8aad 	vfma.f32	s17, s25, s27
	i = lrintf(r - 0.5f);
 801730a:	eeb0 0a67 	vmov.f32	s0, s15
 801730e:	f003 f9d3 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017312:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017316:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 801731a:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 801731e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017322:	eef0 ea68 	vmov.f32	s29, s17
 8017326:	eedc 7a09 	vfnms.f32	s15, s24, s18
 801732a:	e544      	b.n	8016db6 <tMBTriangle_tick+0xa46>

0801732c <tMBTriangle_setFreq>:

void tMBTriangle_setFreq(tMBTriangle* const osc, float f)
{
    _tMBTriangle* c = *osc;
 801732c:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 801732e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017332:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
 8017336:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801733a:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 801733e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017342:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 8017346:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    //c->quarterwaveoffset = c->_w * 0.25f;
}
 801734a:	4770      	bx	lr

0801734c <tMBTriangle_setWidth>:

void tMBTriangle_setWidth(tMBTriangle* const osc, float w)
{
 801734c:	b510      	push	{r4, lr}
    _tMBTriangle* c = *osc;
 801734e:	6804      	ldr	r4, [r0, #0]
{
 8017350:	eef0 0a40 	vmov.f32	s1, s0
    w = LEAF_clip(0.0f, w, 0.99f);
 8017354:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8017368 <tMBTriangle_setWidth+0x1c>
 8017358:	ed9f 0a04 	vldr	s0, [pc, #16]	; 801736c <tMBTriangle_setWidth+0x20>
 801735c:	f7fd feb0 	bl	80150c0 <LEAF_clip>
    c->waveform = w;
 8017360:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8017364:	bd10      	pop	{r4, pc}
 8017366:	bf00      	nop
 8017368:	3f7d70a4 	.word	0x3f7d70a4
 801736c:	00000000 	.word	0x00000000

08017370 <tMBTriangle_sync>:

float tMBTriangle_sync(tMBTriangle* const osc, float value)
{
    _tMBTriangle* c = *osc;
 8017370:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8017372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 8017376:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 801737a:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 801737e:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 8017382:	eef1 7a67 	vneg.f32	s15, s15
 8017386:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801738a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801738e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017392:	eef4 6ac7 	vcmpe.f32	s13, s14
 8017396:	bfcc      	ite	gt
 8017398:	2201      	movgt	r2, #1
 801739a:	2200      	movle	r2, #0
 801739c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173a0:	f002 0201 	and.w	r2, r2, #1
 80173a4:	bf88      	it	hi
 80173a6:	2200      	movhi	r2, #0
 80173a8:	b122      	cbz	r2, 80173b4 <tMBTriangle_sync+0x44>
 80173aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80173ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173b2:	da04      	bge.n	80173be <tMBTriangle_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 80173b4:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80173cc <tMBTriangle_sync+0x5c>
 80173b8:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
 80173bc:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 80173be:	ee37 7a66 	vsub.f32	s14, s14, s13
 80173c2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80173c6:	ed83 7a05 	vstr	s14, [r3, #20]
}
 80173ca:	4770      	bx	lr
 80173cc:	00000000 	.word	0x00000000

080173d0 <tMBSineTri_init>:


//==========================================================================================================

void tMBSineTri_init(tMBSineTri* const osc, LEAF* const leaf)
{
 80173d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSineTri_initToPool(osc, &leaf->mempool);
}

void tMBSineTri_initToPool(tMBSineTri* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 80173d2:	698e      	ldr	r6, [r1, #24]
{
 80173d4:	4607      	mov	r7, r0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 80173d6:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 80173da:	2500      	movs	r5, #0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 80173dc:	4631      	mov	r1, r6
 80173de:	f7fd fff3 	bl	80153c8 <mpool_alloc>
 80173e2:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 80173e4:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 80173e6:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 80173e8:	6871      	ldr	r1, [r6, #4]
    c->syncdir = 1.0f;
 80173ea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->_sinPhase = 0.0f;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 80173ee:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 801745c <tMBSineTri_init+0x8c>
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 80173f2:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 80173f4:	ed91 7a01 	vldr	s14, [r1, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
 80173f8:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    c->freq = 440.f;
 80173fc:	eddf 7a18 	vldr	s15, [pc, #96]	; 8017460 <tMBSineTri_init+0x90>
    c->_inv_w = 1.0f / c->_w;
 8017400:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8017404:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 8017406:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 801740a:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 801740c:	6182      	str	r2, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801740e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
 8017412:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017414:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->shape = 0.0f;
 8017418:	6343      	str	r3, [r0, #52]	; 0x34
    c->_z = 0.0f;
 801741a:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->_sinPhase = 0.0f;
 801741c:	6303      	str	r3, [r0, #48]	; 0x30
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    c->sineMask = 2047;
 801741e:	f240 73ff 	movw	r3, #2047	; 0x7ff
    c->_p = 0.25f;  /* phase [0, 1) */
 8017422:	6201      	str	r1, [r0, #32]
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8017424:	490f      	ldr	r1, [pc, #60]	; (8017464 <tMBSineTri_init+0x94>)
    c->softsync = 0;
 8017426:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
 8017428:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801742a:	6282      	str	r2, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801742c:	2280      	movs	r2, #128	; 0x80
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801742e:	63c5      	str	r5, [r0, #60]	; 0x3c
    c->sineMask = 2047;
 8017430:	f8c0 33f0 	str.w	r3, [r0, #1008]	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
 8017434:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017438:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 801743c:	edc0 6a10 	vstr	s13, [r0, #64]	; 0x40
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8017440:	e9c0 5119 	strd	r5, r1, [r0, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017444:	4629      	mov	r1, r5
 8017446:	306c      	adds	r0, #108	; 0x6c
 8017448:	f002 ff02 	bl	801a250 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 801744c:	4629      	mov	r1, r5
 801744e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8017452:	2220      	movs	r2, #32
}
 8017454:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8017458:	f002 befa 	b.w	801a250 <memset>
 801745c:	3b14f209 	.word	0x3b14f209
 8017460:	43dc0000 	.word	0x43dc0000
 8017464:	11c01200 	.word	0x11c01200

08017468 <tMBSineTri_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBSineTri_tick(tMBSineTri* const osc)
{
 8017468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801746c:	ed2d 8b10 	vpush	{d8-d15}
    _tMBSineTri* c = *osc;
 8017470:	6804      	ldr	r4, [r0, #0]

    p = c->_p;  /* phase [0, 1) */
    sinPhase = c->_sinPhase;
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
 8017472:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */



    b = 0.5f * (1.0f + c->waveform);
 8017476:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
{
 801747a:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
 801747c:	ed94 9a03 	vldr	s18, [r4, #12]
{
 8017480:	4607      	mov	r7, r0
    sync = c->sync;
 8017482:	ed94 7a05 	vldr	s14, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
 8017486:	ee39 9a28 	vadd.f32	s18, s18, s17
    invB = 1.0f / b;
 801748a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801748e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    p = c->_p;  /* phase [0, 1) */
 8017492:	ed94 aa08 	vldr	s20, [r4, #32]
    invB = 1.0f / b;
 8017496:	ee88 daa7 	vdiv.f32	s26, s17, s15
    sinPhase = c->_sinPhase;
 801749a:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
    w = c->_w;  /* phase increment */
 801749e:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
 80174a2:	edd4 9a0b 	vldr	s19, [r4, #44]	; 0x2c
    b = 0.5f * (1.0f + c->waveform);
 80174a6:	ee29 9a2b 	vmul.f32	s18, s18, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80174aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
 80174ae:	ee78 7ac9 	vsub.f32	s15, s17, s18
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 80174b2:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
    invB1 = 1.0f / b1;
 80174b6:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80174ba:	f340 81d8 	ble.w	801786e <tMBSineTri_tick+0x406>
 80174be:	f8d4 901c 	ldr.w	r9, [r4, #28]
 80174c2:	f1b9 0f00 	cmp.w	r9, #0
 80174c6:	f340 8189 	ble.w	80177dc <tMBSineTri_tick+0x374>
 80174ca:	ed94 7a06 	vldr	s14, [r4, #24]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 80174ce:	edd4 ca10 	vldr	s25, [r4, #64]	; 0x40
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80174d2:	eeb1 7a47 	vneg.f32	s14, s14
    sw = w * c->syncdir;
 80174d6:	ee27 ca2a 	vmul.f32	s24, s14, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80174da:	ed84 7a06 	vstr	s14, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80174de:	ee67 ca2c 	vmul.f32	s25, s14, s25
    float inc_amount = sw - (int)sw;
 80174e2:	eefd 7acc 	vcvt.s32.f32	s15, s24
 80174e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80174ea:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
 80174ee:	ee37 aa8a 	vadd.f32	s20, s15, s20
    sinPhase += inc_amount;
 80174f2:	ee37 8a88 	vadd.f32	s16, s15, s16
                x = -0.5f + p * invB;
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
 80174f6:	2e00      	cmp	r6, #0
 80174f8:	f040 81cc 	bne.w	8017894 <tMBSineTri_tick+0x42c>

        x = -0.5f + p * invB;
 80174fc:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
        if (sw > 0)
 8017500:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = -0.5f + p * invB;
 8017504:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
 8017508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
 801750c:	eeea 8a0d 	vfma.f32	s17, s20, s26
        if (sw > 0)
 8017510:	f340 82a1 	ble.w	8017a56 <tMBSineTri_tick+0x5ee>
        {
            if (p >= b) {
 8017514:	eeb4 aac9 	vcmpe.f32	s20, s18
 8017518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801751c:	f280 825b 	bge.w	80179d6 <tMBSineTri_tick+0x56e>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8017520:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
 8017522:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8017526:	eeb4 aacb 	vcmpe.f32	s20, s22
 801752a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801752e:	f280 83c8 	bge.w	8017cc2 <tMBSineTri_tick+0x85a>
 8017532:	461e      	mov	r6, r3
    uint32_t idx;
    float samp0;
    float samp1;

    // Wavetable synthesis
    while (sinPhase >= 1.0f)
 8017534:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8017538:	1d2b      	adds	r3, r5, #4
    c->_f[currentSamp] = x * c->shape; //add the triangle
 801753a:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801753e:	f003 0307 	and.w	r3, r3, #7
    while (sinPhase >= 1.0f)
 8017542:	eeb4 8ac7 	vcmpe.f32	s16, s14
    c->_f[currentSamp] = x * c->shape; //add the triangle
 8017546:	ee64 8a28 	vmul.f32	s17, s8, s17
    while (sinPhase >= 1.0f)
 801754a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801754e:	db0a      	blt.n	8017566 <tMBSineTri_tick+0xfe>
 8017550:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    {
    	sinPhase -= 1.0f;
 8017554:	eef0 7a48 	vmov.f32	s15, s16
 8017558:	ee38 8a47 	vsub.f32	s16, s16, s14
    while (sinPhase >= 1.0f)
 801755c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8017560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017564:	daf6      	bge.n	8017554 <tMBSineTri_tick+0xec>
    }

    while (sinPhase < 0.0f)
 8017566:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801756a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801756e:	d50c      	bpl.n	801758a <tMBSineTri_tick+0x122>
    {
    	sinPhase += 1.0f;
 8017570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    while (sinPhase < 0.0f)
 8017574:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    	sinPhase += 1.0f;
 8017578:	eef0 7a48 	vmov.f32	s15, s16
 801757c:	ee38 8a26 	vadd.f32	s16, s16, s13
    while (sinPhase < 0.0f)
 8017580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8017584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017588:	d4f6      	bmi.n	8017578 <tMBSineTri_tick+0x110>
    }
    float tempPhase = (sinPhase * 2048.0f);
 801758a:	eddf 7abd 	vldr	s15, [pc, #756]	; 8017880 <tMBSineTri_tick+0x418>
    idx = (idx + 1) & c->sineMask;
    samp1 = __leaf_table_sinewave[idx];

    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151

    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 801758e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    idx = (idx + 1) & c->sineMask;
 8017592:	f8d4 03f0 	ldr.w	r0, [r4, #1008]	; 0x3f0
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8017596:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    float tempPhase = (sinPhase * 2048.0f);
 801759a:	ee68 7a27 	vmul.f32	s15, s16, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 801759e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80175a2:	ee37 7a44 	vsub.f32	s14, s14, s8
    idx = (uint32_t)tempPhase; //11 bit table
 80175a6:	eefc 6ae7 	vcvt.u32.f32	s13, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 80175aa:	ee27 7a25 	vmul.f32	s14, s14, s11
    idx = (uint32_t)tempPhase; //11 bit table
 80175ae:	ee16 2a90 	vmov	r2, s13
    tempFrac = tempPhase - idx;
 80175b2:	eef8 6a66 	vcvt.f32.u32	s13, s13
    idx = (idx + 1) & c->sineMask;
 80175b6:	1c51      	adds	r1, r2, #1
    tempFrac = tempPhase - idx;
 80175b8:	ee77 7ae6 	vsub.f32	s15, s15, s13
    idx = (idx + 1) & c->sineMask;
 80175bc:	4008      	ands	r0, r1
    samp0 = __leaf_table_sinewave[idx];
 80175be:	49b1      	ldr	r1, [pc, #708]	; (8017884 <tMBSineTri_tick+0x41c>)
 80175c0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    samp1 = __leaf_table_sinewave[idx];
 80175c4:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    samp0 = __leaf_table_sinewave[idx];
 80175c8:	edd2 6a00 	vldr	s13, [r2]
    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
 80175cc:	ed91 6a00 	vldr	s12, [r1]
 80175d0:	ee36 6a66 	vsub.f32	s12, s12, s13
 80175d4:	eee6 6a27 	vfma.f32	s13, s12, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 80175d8:	eee7 8a26 	vfma.f32	s17, s14, s13
 80175dc:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44


    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 80175e0:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 80175e4:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80175e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	f000 80d3 	beq.w	8017798 <tMBSineTri_tick+0x330>
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80175f2:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80175f6:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 80175f8:	48a3      	ldr	r0, [pc, #652]	; (8017888 <tMBSineTri_tick+0x420>)
 80175fa:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80175fe:	4fa3      	ldr	r7, [pc, #652]	; (801788c <tMBSineTri_tick+0x424>)
 8017600:	e053      	b.n	80176aa <tMBSineTri_tick+0x242>
 8017602:	f8bd e006 	ldrh.w	lr, [sp, #6]
 8017606:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 801760a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801760e:	fa1f fe8e 	uxth.w	lr, lr
 8017612:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 8017616:	fa1f f989 	uxth.w	r9, r9
 801761a:	b29b      	uxth	r3, r3
 801761c:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 8017620:	fa1f f888 	uxth.w	r8, r8
 8017624:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8017628:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 801762c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017630:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 8017634:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
 8017638:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801763c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017640:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
 8017644:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
 8017648:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
 801764c:	ed99 7a00 	vldr	s14, [r9]
 8017650:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8017654:	ed93 6a01 	vldr	s12, [r3, #4]
 8017658:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
 801765c:	eea5 7a06 	vfma.f32	s14, s10, s12
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017660:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017664:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017668:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801766a:	fa1f fe8e 	uxth.w	lr, lr
 801766e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017672:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017676:	eee6 7a87 	vfma.f32	s15, s13, s14
 801767a:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801767e:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 8017682:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8017686:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801768a:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 801768e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8017692:	459e      	cmp	lr, r3
 8017694:	d304      	bcc.n	80176a0 <tMBSineTri_tick+0x238>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
 8017696:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801769a:	3b01      	subs	r3, #1
 801769c:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80176a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80176a4:	3201      	adds	r2, #1
 80176a6:	4293      	cmp	r3, r2
 80176a8:	dd76      	ble.n	8017798 <tMBSineTri_tick+0x330>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80176aa:	ebac 0302 	sub.w	r3, ip, r2
 80176ae:	b29b      	uxth	r3, r3
 80176b0:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 80176b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80176b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80176bc:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 80176c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80176c4:	b29b      	uxth	r3, r3
 80176c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80176ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80176ce:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80176d2:	eef4 7ae5 	vcmpe.f32	s15, s11
 80176d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176da:	d492      	bmi.n	8017602 <tMBSineTri_tick+0x19a>
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 80176dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80176e0:	f8bd e006 	ldrh.w	lr, [sp, #6]
 80176e4:	b29b      	uxth	r3, r3
 80176e6:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 80176ea:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 80176ee:	fa1f fe8e 	uxth.w	lr, lr
 80176f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80176f6:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 80176fa:	fa1f f989 	uxth.w	r9, r9
 80176fe:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017702:	fa1f f888 	uxth.w	r8, r8
 8017706:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 801770a:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 801770e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017712:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017716:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 801771a:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 801771e:	b29b      	uxth	r3, r3
 8017720:	ee24 7a07 	vmul.f32	s14, s8, s14
 8017724:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8017728:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 801772c:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8017730:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
 8017734:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 8017738:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 801773c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8017740:	ed98 6a01 	vldr	s12, [r8, #4]
 8017744:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8017748:	edde 6a00 	vldr	s13, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801774c:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8017750:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017754:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8017758:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 801775c:	ee36 6a64 	vsub.f32	s12, s12, s9
 8017760:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8017764:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8017768:	eee5 6a06 	vfma.f32	s13, s10, s12
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 801776c:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8017770:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017774:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017778:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
 801777c:	3340      	adds	r3, #64	; 0x40
 801777e:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8017782:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
 8017786:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 801778a:	459e      	cmp	lr, r3
 801778c:	d283      	bcs.n	8017696 <tMBSineTri_tick+0x22e>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801778e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017792:	3201      	adds	r2, #1
 8017794:	4293      	cmp	r3, r2
 8017796:	dc88      	bgt.n	80176aa <tMBSineTri_tick+0x242>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
 8017798:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801779c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
 80177a0:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
 80177a2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    j = (j+1) & 7;
 80177a6:	f005 0507 	and.w	r5, r5, #7
    c->out = z;
    c->_p = p;
 80177aa:	ed84 aa08 	vstr	s20, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 80177ae:	ee77 7ae9 	vsub.f32	s15, s15, s19
    c->_w = w;
 80177b2:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
 80177b6:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    c->_z = z;
    c->_j = j;
    c->_k = k;
    c->_sinPhase = sinPhase;
 80177ba:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    z += 0.5f * (c->_f[j] - z);
 80177be:	eee7 9a87 	vfma.f32	s19, s15, s14
    c->_k = k;
 80177c2:	e9c4 560e 	strd	r5, r6, [r4, #56]	; 0x38

    return -c->out;
 80177c6:	eeb1 0a69 	vneg.f32	s0, s19
    c->out = z;
 80177ca:	edc4 9a01 	vstr	s19, [r4, #4]
    c->_z = z;
 80177ce:	edc4 9a0b 	vstr	s19, [r4, #44]	; 0x2c
}
 80177d2:	b003      	add	sp, #12
 80177d4:	ecbd 8b10 	vpop	{d8-d15}
 80177d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sw = w * c->syncdir;
 80177dc:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80177e0:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
 80177e4:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
 80177e8:	ee6c caa7 	vmul.f32	s25, s25, s15
    float inc_amount = sw - (int)sw;
 80177ec:	eefd 7acc 	vcvt.s32.f32	s15, s24
 80177f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80177f4:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
 80177f8:	ee37 ba8a 	vadd.f32	s22, s15, s20
    sinPhase += inc_amount;
 80177fc:	ee77 7a88 	vadd.f32	s15, s15, s16
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8017800:	f040 8644 	bne.w	801848c <tMBSineTri_tick+0x1024>
        if (sw > 0)
 8017804:	eeb5 cac0 	vcmpe.f32	s24, #0.0
 8017808:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 801780a:	ee2c 8a07 	vmul.f32	s16, s24, s14
        if (sw > 0)
 801780e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8017812:	ee3b ea48 	vsub.f32	s28, s22, s16
        if (sw > 0)
 8017816:	f340 80cc 	ble.w	80179b2 <tMBSineTri_tick+0x54a>
        	p = eof_offset + 0.25f;
 801781a:	eeb5 aa00 	vmov.f32	s20, #80	; 0x3e800000  0.250
 801781e:	ee38 aa0a 	vadd.f32	s20, s16, s20
        if (!k) {
 8017822:	2e00      	cmp	r6, #0
 8017824:	f040 81dd 	bne.w	8017be2 <tMBSineTri_tick+0x77a>
                if (p_at_reset >= b) {
 8017828:	eeb4 9ace 	vcmpe.f32	s18, s28
 801782c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017830:	f240 844d 	bls.w	80180ce <tMBSineTri_tick+0xc66>
                if (p_at_reset >= 1.0f) {
 8017834:	eeb4 eae8 	vcmpe.f32	s28, s17
 8017838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801783c:	f280 82b9 	bge.w	8017db2 <tMBSineTri_tick+0x94a>
 8017840:	eddf 7a13 	vldr	s15, [pc, #76]	; 8017890 <tMBSineTri_tick+0x428>
            x = -0.5f + p_at_reset * invB;
 8017844:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017848:	ee6c caa7 	vmul.f32	s25, s25, s15
 801784c:	eef0 fa40 	vmov.f32	s31, s0
	i = lrintf(r - 0.5f);
 8017850:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 8017854:	f002 ff30 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017858:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
 801785c:	eeed fa0e 	vfma.f32	s31, s26, s28
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017860:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8017864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017868:	eeda 7a2c 	vfnms.f32	s15, s20, s25
 801786c:	e1fd      	b.n	8017c6a <tMBSineTri_tick+0x802>
    sw = w * c->syncdir;
 801786e:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8017872:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
 8017876:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
 801787a:	ee6c caa7 	vmul.f32	s25, s25, s15
 801787e:	e630      	b.n	80174e2 <tMBSineTri_tick+0x7a>
 8017880:	45000000 	.word	0x45000000
 8017884:	08023f14 	.word	0x08023f14
 8017888:	08025f94 	.word	0x08025f94
 801788c:	0802a698 	.word	0x0802a698
 8017890:	42800000 	.word	0x42800000
        x = 0.5f - (p - b) * invB1;
 8017894:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
        if (sw > 0)
 8017898:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = 0.5f - (p - b) * invB1;
 801789c:	ee79 7a4a 	vsub.f32	s15, s18, s20
 80178a0:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
 80178a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
 80178a8:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
 80178ac:	f340 8154 	ble.w	8017b58 <tMBSineTri_tick+0x6f0>
            if (p >= 1.0f) {
 80178b0:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 80178b4:	eeb4 aaeb 	vcmpe.f32	s20, s23
 80178b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178bc:	f6ff ae3a 	blt.w	8017534 <tMBSineTri_tick+0xcc>
	i = lrintf(r - 0.5f);
 80178c0:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
 80178c4:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 8017890 <tMBSineTri_tick+0x428>
                p -= 1.0f;
 80178c8:	ee3a ea6b 	vsub.f32	s28, s20, s23
	_tMBSineTri* c = *osc;
 80178cc:	683e      	ldr	r6, [r7, #0]
 80178ce:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
 80178d2:	eeb0 0a68 	vmov.f32	s0, s17
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 80178d6:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
 80178da:	eeae 0a2c 	vfma.f32	s0, s28, s25
	scale *= w;
 80178de:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
 80178e2:	f002 fee9 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80178e6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80178ea:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80178ee:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
 80178f2:	eeb4 9ace 	vcmpe.f32	s18, s28
	r -= (float)i;
 80178f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80178fa:	3301      	adds	r3, #1
 80178fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
 8017900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8017904:	eede 7a2c 	vfnms.f32	s15, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017908:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801790c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017910:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8017914:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017918:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 801791c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017920:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017924:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017928:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 801792c:	f103 0301 	add.w	r3, r3, #1
 8017930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017934:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
 8017938:	f200 843b 	bhi.w	80181b2 <tMBSineTri_tick+0xd4a>
                x = 0.5f - (p - b) * invB1;
 801793c:	ee79 7a2b 	vadd.f32	s15, s18, s23
	_tMBSineTri* c = *osc;
 8017940:	683f      	ldr	r7, [r7, #0]
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8017942:	ee3e da49 	vsub.f32	s26, s28, s18
	i = lrintf(r - 0.5f);
 8017946:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 801794a:	ee77 7aca 	vsub.f32	s15, s15, s20
 801794e:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
 8017952:	eead 0a2c 	vfma.f32	s0, s26, s25
                p -= 1.0f;
 8017956:	eeb0 aa4e 	vmov.f32	s20, s28
                x = 0.5f - (p - b) * invB1;
 801795a:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 801795e:	f002 feab 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017962:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017966:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801796a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801796e:	eef1 7a4c 	vneg.f32	s15, s24
	r -= (float)i;
 8017972:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017976:	3301      	adds	r3, #1
 8017978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801797c:	ee9d 7a2c 	vfnms.f32	s14, s26, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017980:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017984:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017988:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801798c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017990:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017994:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017998:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801799c:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80179a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
 80179a4:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80179a6:	4433      	add	r3, r6
 80179a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80179ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 80179b0:	e5c0      	b.n	8017534 <tMBSineTri_tick+0xcc>
        else if (sw < 0)
 80179b2:	f100 828a 	bmi.w	8017eca <tMBSineTri_tick+0xa62>
        if (!k) {
 80179b6:	2e00      	cmp	r6, #0
 80179b8:	f000 81f1 	beq.w	8017d9e <tMBSineTri_tick+0x936>
            x = 0.5f - (p_at_reset - b) * invB1;
 80179bc:	ee39 7a08 	vadd.f32	s14, s18, s16
    p += inc_amount;
 80179c0:	eeb0 aa4b 	vmov.f32	s20, s22
            x = 0.5f - (p_at_reset - b) * invB1;
 80179c4:	eef0 8a6b 	vmov.f32	s17, s23
 80179c8:	ee37 ba4b 	vsub.f32	s22, s14, s22
    sinPhase += inc_amount;
 80179cc:	eeb0 8a67 	vmov.f32	s16, s15
            x = 0.5f - (p_at_reset - b) * invB1;
 80179d0:	eeed 8a8b 	vfma.f32	s17, s27, s22
            if (sw > 0)
 80179d4:	e5ae      	b.n	8017534 <tMBSineTri_tick+0xcc>
                x = 0.5f - (p - b) * invB1;;
 80179d6:	ed1f ea52 	vldr	s28, [pc, #-328]	; 8017890 <tMBSineTri_tick+0x428>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 80179da:	ee7a ea49 	vsub.f32	s29, s20, s18
	i = lrintf(r - 0.5f);
 80179de:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
 80179e2:	f8d7 8000 	ldr.w	r8, [r7]
 80179e6:	ee2c ea8e 	vmul.f32	s28, s25, s28
                x = 0.5f - (p - b) * invB1;;
 80179ea:	ee79 7a4a 	vsub.f32	s15, s18, s20
 80179ee:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 80179f2:	eeae 0a8e 	vfma.f32	s0, s29, s28
 80179f6:	ee7d ba2d 	vadd.f32	s23, s26, s27
                x = 0.5f - (p - b) * invB1;;
 80179fa:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 80179fe:	f002 fe5b 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017a02:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a06:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017a0a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017a0e:	ee6b 7acc 	vnmul.f32	s15, s23, s24
	r -= (float)i;
 8017a12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a16:	3301      	adds	r3, #1
 8017a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017a1c:	ee9e 7a8e 	vfnms.f32	s14, s29, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a20:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017a24:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017a28:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8017a2c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017a30:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017a34:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017a38:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017a3c:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017a40:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017a44:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8017a48:	3301      	adds	r3, #1
 8017a4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017a4e:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
 8017a52:	2301      	movs	r3, #1
}
 8017a54:	e565      	b.n	8017522 <tMBSineTri_tick+0xba>
            if (p < 0.0f) {
 8017a56:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8017a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a5e:	f57f ad69 	bpl.w	8017534 <tMBSineTri_tick+0xcc>
 8017a62:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8017a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a6a:	f57f ad63 	bpl.w	8017534 <tMBSineTri_tick+0xcc>
	r = MINBLEP_PHASES * phase * inv_w;
 8017a6e:	ee2c ea8a 	vmul.f32	s28, s25, s20
	i = lrintf(r - 0.5f);
 8017a72:	ed5f 8a79 	vldr	s17, [pc, #-484]	; 8017890 <tMBSineTri_tick+0x428>
 8017a76:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
 8017a7a:	f8d7 8000 	ldr.w	r8, [r7]
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8017a7e:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
 8017a82:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8017a86:	eeae 0a28 	vfma.f32	s0, s28, s17
 8017a8a:	ee2c ca27 	vmul.f32	s24, s24, s15
 8017a8e:	f002 fe13 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017a92:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017a96:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017a9a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
 8017a9e:	ee3a aa2b 	vadd.f32	s20, s20, s23
	r -= (float)i;
 8017aa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017aa6:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017aa8:	eeb1 7a4c 	vneg.f32	s14, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
 8017ab0:	eeb4 9aca 	vcmpe.f32	s18, s20
	r -= (float)i;
 8017ab4:	eede 7a28 	vfnms.f32	s15, s28, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ab8:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017abc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017ac0:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
 8017ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017ac8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017acc:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8017ad0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017ad4:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017ad8:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017adc:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8017ae0:	f103 0301 	add.w	r3, r3, #1
 8017ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017ae8:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
 8017aec:	f340 84d4 	ble.w	8018498 <tMBSineTri_tick+0x1030>
                x = -0.5f + p * invB;
 8017af0:	ee6c caa8 	vmul.f32	s25, s25, s17
	_tMBSineTri* c = *osc;
 8017af4:	683f      	ldr	r7, [r7, #0]
 8017af6:	ee7a da49 	vsub.f32	s27, s20, s18
	i = lrintf(r - 0.5f);
 8017afa:	eeb0 0a4b 	vmov.f32	s0, s22
                x = -0.5f + p * invB;
 8017afe:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
 8017b02:	eeac 0aad 	vfma.f32	s0, s25, s27
 8017b06:	f002 fdd7 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017b0a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b0e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017b12:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b1a:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8017b1c:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017b24:	eedc 7aad 	vfnms.f32	s15, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017b28:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017b2c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017b30:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8017b34:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017b38:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8017b3c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017b40:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017b44:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017b48:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8017b4c:	3301      	adds	r3, #1
 8017b4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017b52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8017b56:	e4ed      	b.n	8017534 <tMBSineTri_tick+0xcc>
        else if (sw < 0)
 8017b58:	f57f acec 	bpl.w	8017534 <tMBSineTri_tick+0xcc>
            if (p < b) {
 8017b5c:	eeb4 aac9 	vcmpe.f32	s20, s18
 8017b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b64:	f100 8174 	bmi.w	8017e50 <tMBSineTri_tick+0x9e8>
            if (p < 0.0f) {
 8017b68:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8017b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b70:	f57f ace0 	bpl.w	8017534 <tMBSineTri_tick+0xcc>
                p += 1.0f;
 8017b74:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8017b78:	ed5f babb 	vldr	s23, [pc, #-748]	; 8017890 <tMBSineTri_tick+0x428>
	r = MINBLEP_PHASES * phase * inv_w;
 8017b7c:	ee6c ca8a 	vmul.f32	s25, s25, s20
	_tMBSineTri* c = *osc;
 8017b80:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 8017b82:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
 8017b86:	ee3a aa0b 	vadd.f32	s20, s20, s22
                x = 0.5f - (p - b) * invB1;
 8017b8a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8017b8e:	eeac 0aab 	vfma.f32	s0, s25, s23
                x = 0.5f - (p - b) * invB1;
 8017b92:	ee79 7a4a 	vsub.f32	s15, s18, s20
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8017b96:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 8017b9a:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8017b9e:	f002 fd8b 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017ba2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ba6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017baa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017bae:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
 8017bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017bb6:	3301      	adds	r3, #1
 8017bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017bbc:	eedc 7aab 	vfnms.f32	s15, s25, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017bc0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017bc4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017bc8:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8017bcc:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017bd0:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017bd4:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017bd8:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017bdc:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 8017be0:	e6de      	b.n	80179a0 <tMBSineTri_tick+0x538>
            x = 0.5f - (p_at_reset - b) * invB1;
 8017be2:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset >= 1.0f) {
 8017be6:	eeb4 eae8 	vcmpe.f32	s28, s17
            x = 0.5f - (p_at_reset - b) * invB1;
 8017bea:	eef0 fa6b 	vmov.f32	s31, s23
 8017bee:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset >= 1.0f) {
 8017bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8017bf6:	eeed faa7 	vfma.f32	s31, s27, s15
                if (p_at_reset >= 1.0f) {
 8017bfa:	f280 81eb 	bge.w	8017fd4 <tMBSineTri_tick+0xb6c>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8017bfe:	ee7d ea2d 	vadd.f32	s29, s26, s27
 8017c02:	ed5f 7add 	vldr	s15, [pc, #-884]	; 8017890 <tMBSineTri_tick+0x428>
 8017c06:	ee6c caa7 	vmul.f32	s25, s25, s15
 8017c0a:	ee6e ea8c 	vmul.f32	s29, s29, s24
	i = lrintf(r - 0.5f);
 8017c0e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017c12:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 8017c16:	f002 fd4f 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017c1a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017c1e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017c22:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8017c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017c2a:	3301      	adds	r3, #1
	r -= (float)i;
 8017c2c:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017c34:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017c38:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017c3c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8017c40:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017c44:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017c48:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017c4c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017c50:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017c54:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017c58:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8017c5c:	3301      	adds	r3, #1
 8017c5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017c62:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8017c66:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017c6a:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017c6e:	ee2f 7acc 	vnmul.f32	s14, s31, s24
            if (p >= b) {
 8017c72:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017c76:	3301      	adds	r3, #1
 8017c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
 8017c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017c80:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017c84:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017c88:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8017c8c:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017c90:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017c94:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017c98:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017c9c:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017ca0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017ca4:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8017ca8:	f103 0301 	add.w	r3, r3, #1
 8017cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017cb0:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
 8017cb4:	d940      	bls.n	8017d38 <tMBSineTri_tick+0x8d0>
            x = -0.5f + p * invB;
 8017cb6:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            k = 0;
 8017cba:	464e      	mov	r6, r9
            x = -0.5f + p * invB;
 8017cbc:	eeed 8a0a 	vfma.f32	s17, s26, s20
 8017cc0:	e438      	b.n	8017534 <tMBSineTri_tick+0xcc>
                p -= 1.0f;
 8017cc2:	eddf 7ac3 	vldr	s15, [pc, #780]	; 8017fd0 <tMBSineTri_tick+0xb68>
 8017cc6:	ee3a aa4b 	vsub.f32	s20, s20, s22
                x = -0.5f + p * invB;
 8017cca:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
 8017cce:	683f      	ldr	r7, [r7, #0]
 8017cd0:	ee6c caa7 	vmul.f32	s25, s25, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8017cd4:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
 8017cd8:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8017cdc:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 8017ce0:	f002 fcea 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017ce4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ce8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017cec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017cf4:	3301      	adds	r3, #1
	scale *= w;
 8017cf6:	ee6c da2d 	vmul.f32	s27, s24, s27
                x = -0.5f + p * invB;
 8017cfa:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017cfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017d02:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d06:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017d0a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017d0e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8017d12:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017d16:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8017d1a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017d1e:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017d22:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017d26:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8017d2a:	3301      	adds	r3, #1
 8017d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017d30:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8017d34:	f7ff bbfe 	b.w	8017534 <tMBSineTri_tick+0xcc>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8017d38:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
 8017d3c:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 8017d3e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                x = 0.5f - (p - b) * invB1;
 8017d42:	ee79 7a4a 	vsub.f32	s15, s18, s20
 8017d46:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8017d4a:	eeab 0a2c 	vfma.f32	s0, s22, s25
 8017d4e:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 8017d52:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8017d56:	f002 fcaf 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017d5a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d5e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017d62:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017d66:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
 8017d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d6e:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017d70:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017d78:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d7c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017d80:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017d84:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8017d88:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017d8c:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8017d90:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017d94:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017d98:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017d9c:	e600      	b.n	80179a0 <tMBSineTri_tick+0x538>
            x = -0.5f + p_at_reset * invB;
 8017d9e:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    sinPhase += inc_amount;
 8017da2:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
 8017da6:	eeb0 aa4b 	vmov.f32	s20, s22
            x = -0.5f + p_at_reset * invB;
 8017daa:	eeed 8a0e 	vfma.f32	s17, s26, s28
            else if (sw < 0)
 8017dae:	f7ff bbc1 	b.w	8017534 <tMBSineTri_tick+0xcc>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8017db2:	ee7d ea2d 	vadd.f32	s29, s26, s27
 8017db6:	eddf 7a86 	vldr	s15, [pc, #536]	; 8017fd0 <tMBSineTri_tick+0xb68>
 8017dba:	ee6c caa7 	vmul.f32	s25, s25, s15
 8017dbe:	ee2c fa2e 	vmul.f32	s30, s24, s29
                    p_at_reset -= 1.0f;
 8017dc2:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
 8017dc6:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
 8017dca:	ee3e ea4b 	vsub.f32	s28, s28, s22
	i = lrintf(r - 0.5f);
 8017dce:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
 8017dd2:	eef0 fa68 	vmov.f32	s31, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8017dd6:	ee78 ba0e 	vadd.f32	s23, s16, s28
                    x = -0.5f + p_at_reset * invB;
 8017dda:	eeed fa0e 	vfma.f32	s31, s26, s28
	i = lrintf(r - 0.5f);
 8017dde:	eeab 0aac 	vfma.f32	s0, s23, s25
 8017de2:	f002 fc69 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017de6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017dea:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017dee:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017df6:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
 8017df8:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
 8017dfc:	eedb 7aac 	vfnms.f32	s15, s23, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8017e04:	eeaa 0a2c 	vfma.f32	s0, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e08:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017e0c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017e10:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8017e14:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017e18:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8017e1c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017e20:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017e24:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017e28:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8017e2c:	3301      	adds	r3, #1
 8017e2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017e32:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 8017e36:	f002 fc3f 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017e3a:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017e3e:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8017e42:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8017e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e4a:	eeda 7a2c 	vfnms.f32	s15, s20, s25
 8017e4e:	e70c      	b.n	8017c6a <tMBSineTri_tick+0x802>
                x = -0.5f + p * invB;
 8017e50:	eddf ba5f 	vldr	s23, [pc, #380]	; 8017fd0 <tMBSineTri_tick+0xb68>
 8017e54:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017e58:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
 8017e5c:	683e      	ldr	r6, [r7, #0]
 8017e5e:	ee6c baab 	vmul.f32	s23, s25, s23
                x = -0.5f + p * invB;
 8017e62:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8017e66:	eeab 0a8b 	vfma.f32	s0, s23, s22
 8017e6a:	f002 fc25 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017e6e:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e72:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
 8017e76:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
 8017e7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017e7e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e82:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8017e84:	eeea 8a0d 	vfma.f32	s17, s20, s26
	scale *= w;
 8017e88:	ee67 7a8c 	vmul.f32	s15, s15, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017e90:	ee9b 7a8b 	vfnms.f32	s14, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e94:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017e98:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017e9c:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8017ea0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017ea4:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017ea8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017eac:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017eb0:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017eb4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017eb8:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8017ebc:	3301      	adds	r3, #1
 8017ebe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017ec2:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
 8017ec6:	2600      	movs	r6, #0
}
 8017ec8:	e64e      	b.n	8017b68 <tMBSineTri_tick+0x700>
        	p = (1.0f - eof_offset) + 0.25f;
 8017eca:	eeb7 aa04 	vmov.f32	s20, #116	; 0x3fa00000  1.250
        	sinPhase = (1.0f - eof_offset);
 8017ece:	ee78 eac8 	vsub.f32	s29, s17, s16
        	p = (1.0f - eof_offset) + 0.25f;
 8017ed2:	ee3a aa48 	vsub.f32	s20, s20, s16
        if (!k) {
 8017ed6:	2e00      	cmp	r6, #0
 8017ed8:	f040 8142 	bne.w	8018160 <tMBSineTri_tick+0xcf8>
                if (p_at_reset < 0.0f) {
 8017edc:	eeb5 eac0 	vcmpe.f32	s28, #0.0
 8017ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ee4:	f100 81ab 	bmi.w	801823e <tMBSineTri_tick+0xdd6>
            x = -0.5f + p_at_reset * invB;
 8017ee8:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 8017eec:	eddf 7a38 	vldr	s15, [pc, #224]	; 8017fd0 <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8017ef0:	ee3d ba2d 	vadd.f32	s22, s26, s27
 8017ef4:	ee6c caa7 	vmul.f32	s25, s25, s15
            x = -0.5f + p_at_reset * invB;
 8017ef8:	eeed ba0e 	vfma.f32	s23, s26, s28
 8017efc:	ee2c ba4b 	vnmul.f32	s22, s24, s22
	r = MINBLEP_PHASES * phase * inv_w;
 8017f00:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
	i = lrintf(r - 0.5f);
 8017f04:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017f08:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8017f0c:	eea8 0aac 	vfma.f32	s0, s17, s25
 8017f10:	f002 fbd2 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017f14:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f18:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017f1c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 8017f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f24:	3301      	adds	r3, #1
	r -= (float)i;
 8017f26:	eed8 7aac 	vfnms.f32	s15, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f2e:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017f32:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017f36:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8017f3a:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017f3e:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017f42:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017f46:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017f4a:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017f4e:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017f52:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8017f56:	3301      	adds	r3, #1
 8017f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f5c:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8017f60:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f64:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
 8017f68:	ee6c ba2b 	vmul.f32	s23, s24, s23
            if (p < b) {
 8017f6c:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f70:	3301      	adds	r3, #1
 8017f72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
 8017f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f7a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017f7e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017f82:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8017f86:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017f8a:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017f8e:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017f92:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017f96:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8017f9a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017f9e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8017fa2:	f103 0301 	add.w	r3, r3, #1
 8017fa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017faa:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
 8017fae:	f300 8107 	bgt.w	80181c0 <tMBSineTri_tick+0xd58>
            x = 0.5f - (p - b) * invB1;
 8017fb2:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
            k = 1;
 8017fb6:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
 8017fb8:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8017fbc:	ee78 7a67 	vsub.f32	s15, s16, s15
 8017fc0:	eeb0 8a6e 	vmov.f32	s16, s29
 8017fc4:	ee77 7a89 	vadd.f32	s15, s15, s18
 8017fc8:	eee7 8aad 	vfma.f32	s17, s15, s27
 8017fcc:	f7ff bab2 	b.w	8017534 <tMBSineTri_tick+0xcc>
 8017fd0:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
 8017fd4:	ee3e ea68 	vsub.f32	s28, s28, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8017fd8:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 8017fd0 <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
 8017fdc:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
 8017fe0:	ee6c caa7 	vmul.f32	s25, s25, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8017fe4:	ee78 fa0e 	vadd.f32	s31, s16, s28
	i = lrintf(r - 0.5f);
 8017fe8:	eeb0 0a4f 	vmov.f32	s0, s30
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8017fec:	ee7d ea2d 	vadd.f32	s29, s26, s27
	i = lrintf(r - 0.5f);
 8017ff0:	eeac 0aaf 	vfma.f32	s0, s25, s31
 8017ff4:	f002 fb60 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8017ff8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ffc:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018000:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018004:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018008:	3301      	adds	r3, #1
	scale *= w;
 801800a:	ee6e ea8c 	vmul.f32	s29, s29, s24
                if (!k && p_at_reset >= b) {
 801800e:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018012:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018016:	eedc 7aaf 	vfnms.f32	s15, s25, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801801a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801801e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018022:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
 8018026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801802a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801802e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018032:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018036:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801803a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801803e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018042:	f103 0301 	add.w	r3, r3, #1
 8018046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801804a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
 801804e:	f200 81ae 	bhi.w	80183ae <tMBSineTri_tick+0xf46>
                    x = 0.5f - (p_at_reset - b) * invB1;
 8018052:	ee79 7a28 	vadd.f32	s15, s18, s17
	_tMBSineTri* c = *osc;
 8018056:	683e      	ldr	r6, [r7, #0]
	i = lrintf(r - 0.5f);
 8018058:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = 0.5f - (p_at_reset - b) * invB1;
 801805c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8018060:	ee37 bacb 	vsub.f32	s22, s15, s22
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8018064:	ee78 7a49 	vsub.f32	s15, s16, s18
                    x = 0.5f - (p_at_reset - b) * invB1;
 8018068:	eeeb ba2d 	vfma.f32	s23, s22, s27
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 801806c:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
 8018070:	eeac 0a8e 	vfma.f32	s0, s25, s28
 8018074:	f002 fb20 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8018078:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801807c:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018080:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018084:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018088:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801808a:	eef1 7a6e 	vneg.f32	s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 801808e:	eef0 fa6b 	vmov.f32	s31, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018092:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018096:	ee9c 7a8e 	vfnms.f32	s14, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801809a:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801809e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80180a2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80180a6:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80180aa:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 80180ae:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80180b2:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80180b6:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80180ba:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 80180be:	3301      	adds	r3, #1
 80180c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80180c4:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
 80180c8:	f8d7 8000 	ldr.w	r8, [r7]
 80180cc:	e59f      	b.n	8017c0e <tMBSineTri_tick+0x7a6>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 80180ce:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 8017fd0 <tMBSineTri_tick+0xb68>
 80180d2:	ee3b fa49 	vsub.f32	s30, s22, s18
	i = lrintf(r - 0.5f);
 80180d6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80180da:	ee6c caa7 	vmul.f32	s25, s25, s15
 80180de:	ee7d ea2d 	vadd.f32	s29, s26, s27
 80180e2:	eeaf 0a2c 	vfma.f32	s0, s30, s25
 80180e6:	f002 fae7 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80180ea:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80180ee:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80180f2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80180f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80180fa:	3301      	adds	r3, #1
 80180fc:	ee6c ea2e 	vmul.f32	s29, s24, s29
                if (p_at_reset >= 1.0f) {
 8018100:	eeb4 eae8 	vcmpe.f32	s28, s17
	r -= (float)i;
 8018104:	eedf 7a2c 	vfnms.f32	s15, s30, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801810c:	eeb0 fa6e 	vmov.f32	s30, s29
 8018110:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018114:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018118:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset >= 1.0f) {
 801811c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018120:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018124:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018128:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801812c:	eef1 7a6e 	vneg.f32	s15, s29
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018130:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018134:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018138:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801813c:	f103 0301 	add.w	r3, r3, #1
 8018140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018144:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 8018148:	da76      	bge.n	8018238 <tMBSineTri_tick+0xdd0>
                    x = 0.5f - (p_at_reset - b) * invB1;
 801814a:	ee79 7a08 	vadd.f32	s15, s18, s16
 801814e:	f8d7 8000 	ldr.w	r8, [r7]
 8018152:	ee37 bacb 	vsub.f32	s22, s15, s22
 8018156:	eeeb ba2d 	vfma.f32	s23, s22, s27
 801815a:	eef0 fa6b 	vmov.f32	s31, s23
 801815e:	e556      	b.n	8017c0e <tMBSineTri_tick+0x7a6>
            x = 0.5f - (p_at_reset - b) * invB1;
 8018160:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset < b) {
 8018164:	eeb4 9ace 	vcmpe.f32	s18, s28
            x = 0.5f - (p_at_reset - b) * invB1;
 8018168:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset < b) {
 801816c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8018170:	eeed baa7 	vfma.f32	s23, s27, s15
                if (p_at_reset < b) {
 8018174:	f300 80d8 	bgt.w	8018328 <tMBSineTri_tick+0xec0>
                if (p_at_reset < 0.0f) {
 8018178:	eeb5 eac0 	vcmpe.f32	s28, #0.0
 801817c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018180:	f100 812a 	bmi.w	80183d8 <tMBSineTri_tick+0xf70>
        else if (sw < 0)
 8018184:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
 8018188:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8017fd0 <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
 801818c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018190:	ee6c caa7 	vmul.f32	s25, s25, s15
 8018194:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8018198:	eeac 0aa8 	vfma.f32	s0, s25, s17
 801819c:	f002 fa8c 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80181a0:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 80181a4:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 80181a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80181ac:	eedc 7aa8 	vfnms.f32	s15, s25, s17
 80181b0:	e6d8      	b.n	8017f64 <tMBSineTri_tick+0xafc>
                x = -0.5f + p * invB;
 80181b2:	eeed 8a0e 	vfma.f32	s17, s26, s28
                k = 0;
 80181b6:	2600      	movs	r6, #0
                p -= 1.0f;
 80181b8:	eeb0 aa4e 	vmov.f32	s20, s28
 80181bc:	f7ff b9ba 	b.w	8017534 <tMBSineTri_tick+0xcc>
                x = -0.5f + p * invB;
 80181c0:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
 80181c4:	683f      	ldr	r7, [r7, #0]
 80181c6:	ee3a ba49 	vsub.f32	s22, s20, s18
                k = 0;
 80181ca:	464e      	mov	r6, r9
}
 80181cc:	eeb0 8a6e 	vmov.f32	s16, s29
	i = lrintf(r - 0.5f);
 80181d0:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
 80181d4:	eeed 8a0a 	vfma.f32	s17, s26, s20
	scale *= w;
 80181d8:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 80181dc:	eeab 0a2c 	vfma.f32	s0, s22, s25
 80181e0:	f002 fa6a 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80181e4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80181e8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80181ec:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80181f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80181f4:	3301      	adds	r3, #1
	scale *= w;
 80181f6:	ee2d ca0c 	vmul.f32	s24, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80181fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80181fe:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018202:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018206:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801820a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801820e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018212:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018216:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801821a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801821e:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018222:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018226:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801822a:	3301      	adds	r3, #1
 801822c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018230:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8018234:	f7ff b97e 	b.w	8017534 <tMBSineTri_tick+0xcc>
 8018238:	f8d7 8000 	ldr.w	r8, [r7]
 801823c:	e5c1      	b.n	8017dc2 <tMBSineTri_tick+0x95a>
	i = lrintf(r - 0.5f);
 801823e:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
 8018242:	ed5f 7a9d 	vldr	s15, [pc, #-628]	; 8017fd0 <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8018246:	ee3d fa2d 	vadd.f32	s30, s26, s27
 801824a:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
 801824e:	eeb0 0a6f 	vmov.f32	s0, s31
 8018252:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    p_at_reset += 1.0f;
 8018256:	ee3e ea28 	vadd.f32	s28, s28, s17
	i = lrintf(r - 0.5f);
 801825a:	eeac 0a8b 	vfma.f32	s0, s25, s22
 801825e:	f002 fa2b 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8018262:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018266:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801826a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801826e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018272:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
 8018274:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801827c:	eedc 7a8b 	vfnms.f32	s15, s25, s22
	scale *= w;
 8018280:	eeb1 ba4f 	vneg.f32	s22, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018284:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018288:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801828c:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
 8018290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018294:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018298:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801829c:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80182a0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80182a4:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80182a8:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80182ac:	f103 0301 	add.w	r3, r3, #1
 80182b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80182b4:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
 80182b8:	f340 80f7 	ble.w	80184aa <tMBSineTri_tick+0x1042>
                    x = -0.5f + p_at_reset * invB;
 80182bc:	ee78 7a49 	vsub.f32	s15, s16, s18
	_tMBSineTri* c = *osc;
 80182c0:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
 80182c2:	eef0 ba6f 	vmov.f32	s23, s31
	i = lrintf(r - 0.5f);
 80182c6:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = -0.5f + p_at_reset * invB;
 80182ca:	eeed ba0e 	vfma.f32	s23, s26, s28
	r = MINBLEP_PHASES * phase * inv_w;
 80182ce:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
 80182d2:	eeac 0a8e 	vfma.f32	s0, s25, s28
 80182d6:	f002 f9ef 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80182da:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182de:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80182e2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80182e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182ea:	3301      	adds	r3, #1
	r -= (float)i;
 80182ec:	eedc 7a8e 	vfnms.f32	s15, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80182f4:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80182f8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80182fc:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8018300:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018304:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8018308:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801830c:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018310:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018314:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8018318:	3301      	adds	r3, #1
 801831a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801831e:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
 8018322:	f8d7 8000 	ldr.w	r8, [r7]
 8018326:	e5eb      	b.n	8017f00 <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
 8018328:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 801832c:	ed5f 7ad8 	vldr	s15, [pc, #-864]	; 8017fd0 <tMBSineTri_tick+0xb68>
 8018330:	ee3b fa49 	vsub.f32	s30, s22, s18
 8018334:	ee6c caa7 	vmul.f32	s25, s25, s15
 8018338:	eeb0 0a6b 	vmov.f32	s0, s23
 801833c:	eeac 0a8f 	vfma.f32	s0, s25, s30
 8018340:	f002 f9ba 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8018344:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018348:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801834c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018354:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
 8018356:	eeb5 eac0 	vcmpe.f32	s28, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801835a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801835e:	eedc 7a8f 	vfnms.f32	s15, s25, s30
	scale *= w;
 8018362:	ee3d fa2d 	vadd.f32	s30, s26, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018366:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801836a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801836e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
 8018372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	scale *= w;
 8018376:	ee2f fa0c 	vmul.f32	s30, s30, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 801837a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801837e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018382:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018386:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801838a:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801838e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018392:	f103 0301 	add.w	r3, r3, #1
 8018396:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801839a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
 801839e:	d472      	bmi.n	8018486 <tMBSineTri_tick+0x101e>
                    x = -0.5f + p_at_reset * invB;
 80183a0:	eeed ba0e 	vfma.f32	s23, s26, s28
        else if (sw < 0)
 80183a4:	f8d7 8000 	ldr.w	r8, [r7]
 80183a8:	eeb1 ba4f 	vneg.f32	s22, s30
 80183ac:	e5a8      	b.n	8017f00 <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
 80183ae:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = -0.5f + p_at_reset * invB;
 80183b2:	eead fa0e 	vfma.f32	s30, s26, s28
	i = lrintf(r - 0.5f);
 80183b6:	eeac 0a8a 	vfma.f32	s0, s25, s20
 80183ba:	f002 f97d 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80183be:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 80183c2:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 80183c6:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 80183ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    x = -0.5f + p_at_reset * invB;
 80183ce:	eef0 fa4f 	vmov.f32	s31, s30
	r -= (float)i;
 80183d2:	eedc 7a8a 	vfnms.f32	s15, s25, s20
 80183d6:	e448      	b.n	8017c6a <tMBSineTri_tick+0x802>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80183d8:	ee3d fa2d 	vadd.f32	s30, s26, s27
 80183dc:	eddf 7a39 	vldr	s15, [pc, #228]	; 80184c4 <tMBSineTri_tick+0x105c>
 80183e0:	ee6c caa7 	vmul.f32	s25, s25, s15
 80183e4:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    x = 0.5f - (p_at_reset - b) * invB1;
 80183e8:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 80183ec:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
 80183f0:	ee78 7a4b 	vsub.f32	s15, s16, s22
 80183f4:	ee39 7a4e 	vsub.f32	s14, s18, s28
	i = lrintf(r - 0.5f);
 80183f8:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
 80183fc:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 8018400:	ee77 7a87 	vadd.f32	s15, s15, s14
	i = lrintf(r - 0.5f);
 8018404:	eeab 0a2c 	vfma.f32	s0, s22, s25
 8018408:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b) * invB1;
 801840c:	eee7 baad 	vfma.f32	s23, s15, s27
	i = lrintf(r - 0.5f);
 8018410:	f002 f952 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8018414:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018418:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801841c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018420:	eeb1 fa4f 	vneg.f32	s30, s30
	r -= (float)i;
 8018424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018428:	3301      	adds	r3, #1
 801842a:	ee78 8ac8 	vsub.f32	s17, s17, s16
 801842e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8018432:	eeb0 0a6f 	vmov.f32	s0, s31
	r -= (float)i;
 8018436:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801843a:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801843e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018442:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	i = lrintf(r - 0.5f);
 8018446:	eeac 0aa8 	vfma.f32	s0, s25, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 801844a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801844e:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018452:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018456:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801845a:	ed83 ea3d 	vstr	s28, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801845e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018462:	3301      	adds	r3, #1
 8018464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018468:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 801846c:	f002 f924 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8018470:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018474:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8018478:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 801847c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018480:	eedc 7aa8 	vfnms.f32	s15, s25, s17
 8018484:	e56e      	b.n	8017f64 <tMBSineTri_tick+0xafc>
 8018486:	f8d7 8000 	ldr.w	r8, [r7]
 801848a:	e7ad      	b.n	80183e8 <tMBSineTri_tick+0xf80>
    sinPhase += inc_amount;
 801848c:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
 8018490:	eeb0 aa4b 	vmov.f32	s20, s22
 8018494:	f7ff b82f 	b.w	80174f6 <tMBSineTri_tick+0x8e>
                x = 0.5f - (p - b) * invB1;
 8018498:	ee79 7a4a 	vsub.f32	s15, s18, s20
                k = 1;
 801849c:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
 801849e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80184a2:	eee7 8aad 	vfma.f32	s17, s15, s27
 80184a6:	f7ff b845 	b.w	8017534 <tMBSineTri_tick+0xcc>
 80184aa:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b)  * invB1;
 80184ae:	ee39 ea4e 	vsub.f32	s28, s18, s28
	i = lrintf(r - 0.5f);
 80184b2:	eeb0 0a6f 	vmov.f32	s0, s31
 80184b6:	ee78 8ac8 	vsub.f32	s17, s17, s16
                    x = 0.5f - (p_at_reset - b)  * invB1;
 80184ba:	eeee ba2d 	vfma.f32	s23, s28, s27
	i = lrintf(r - 0.5f);
 80184be:	eeac 0aa8 	vfma.f32	s0, s25, s17
 80184c2:	e7d3      	b.n	801846c <tMBSineTri_tick+0x1004>
 80184c4:	42800000 	.word	0x42800000

080184c8 <tMBSineTri_setFreq>:

void tMBSineTri_setFreq(tMBSineTri* const osc, float f)
{
    _tMBSineTri* c = *osc;
 80184c8:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 80184ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80184ce:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
 80184d2:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80184d6:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 80184da:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80184de:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 80184e2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    //c->quarterwaveoffset = c->_w * 0.25f;
}
 80184e6:	4770      	bx	lr

080184e8 <tMBSineTri_sync>:
    c->waveform = w;
}

float tMBSineTri_sync(tMBSineTri* const osc, float value)
{
    _tMBSineTri* c = *osc;
 80184e8:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 80184ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 80184ee:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 80184f2:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 80184f6:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 80184fa:	eef1 7a67 	vneg.f32	s15, s15
 80184fe:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8018502:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8018506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801850a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801850e:	bfcc      	ite	gt
 8018510:	2201      	movgt	r2, #1
 8018512:	2200      	movle	r2, #0
 8018514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018518:	f002 0201 	and.w	r2, r2, #1
 801851c:	bf88      	it	hi
 801851e:	2200      	movhi	r2, #0
 8018520:	b122      	cbz	r2, 801852c <tMBSineTri_sync+0x44>
 8018522:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801852a:	da04      	bge.n	8018536 <tMBSineTri_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 801852c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8018544 <tMBSineTri_sync+0x5c>
 8018530:	ed83 7a05 	vstr	s14, [r3, #20]

    return value;
}
 8018534:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8018536:	ee37 7a66 	vsub.f32	s14, s14, s13
 801853a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801853e:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8018542:	4770      	bx	lr
 8018544:	00000000 	.word	0x00000000

08018548 <tMBSineTri_setShape>:
    c->_p = phase;
}

void tMBSineTri_setShape(tMBSineTri* const osc, float shape)
{
    _tMBSineTri* c = *osc;
 8018548:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 801854a:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
 801854e:	4770      	bx	lr

08018550 <tMBSaw_init>:
}
//==================================================================================================
//==================================================================================================

void tMBSaw_init(tMBSaw* const osc, LEAF* const leaf)
{
 8018550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSaw_initToPool(osc, &leaf->mempool);
}

void tMBSaw_initToPool(tMBSaw* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 8018552:	698e      	ldr	r6, [r1, #24]
{
 8018554:	4607      	mov	r7, r0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 8018556:	f44f 7037 	mov.w	r0, #732	; 0x2dc
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 801855a:	2500      	movs	r5, #0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 801855c:	4631      	mov	r1, r6
 801855e:	f7fc ff33 	bl	80153c8 <mpool_alloc>
 8018562:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8018564:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 8018566:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8018568:	6871      	ldr	r1, [r6, #4]
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 801856a:	4604      	mov	r4, r0
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 801856c:	ed9f 6a16 	vldr	s12, [pc, #88]	; 80185c8 <tMBSaw_init+0x78>
    c->syncdir = 1.0f;
 8018570:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->invSampleRate = leaf->invSampleRate;
 8018574:	ed91 7a01 	vldr	s14, [r1, #4]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8018578:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->freq = 440.f;
 801857c:	eddf 7a13 	vldr	s15, [pc, #76]	; 80185cc <tMBSaw_init+0x7c>
    c->_inv_w = 1.0f / c->_w;
 8018580:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8018584:	60c3      	str	r3, [r0, #12]
    c->freq = 440.f;
 8018586:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 801858a:	6103      	str	r3, [r0, #16]
    c->syncdir = 1.0f;
 801858c:	6142      	str	r2, [r0, #20]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801858e:	2280      	movs	r2, #128	; 0x80
    c->softsync = 0;
 8018590:	6185      	str	r5, [r0, #24]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018592:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
 8018596:	6243      	str	r3, [r0, #36]	; 0x24
    c->_j = 0;
 8018598:	62c5      	str	r5, [r0, #44]	; 0x2c
    c->_p = 0.0f;  /* phase [0, 1) */
 801859a:	61c3      	str	r3, [r0, #28]
    c->numBLEPs = 0;
 801859c:	6505      	str	r5, [r0, #80]	; 0x50
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801859e:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80185a2:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 80185a4:	ed80 7ab6 	vstr	s14, [r0, #728]	; 0x2d8
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 80185a8:	edc0 7a08 	vstr	s15, [r0, #32]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80185ac:	3056      	adds	r0, #86	; 0x56
    c->_inv_w = 1.0f / c->_w;
 80185ae:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 80185b2:	f001 fe4d 	bl	801a250 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 80185b6:	4629      	mov	r1, r5
 80185b8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80185bc:	2220      	movs	r2, #32
}
 80185be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 80185c2:	f001 be45 	b.w	801a250 <memset>
 80185c6:	bf00      	nop
 80185c8:	3b14f209 	.word	0x3b14f209
 80185cc:	43dc0000 	.word	0x43dc0000

080185d0 <tMBSaw_tick>:
}



float tMBSaw_tick(tMBSaw* const osc)
{
 80185d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185d4:	ed2d 8b08 	vpush	{d8-d11}
    _tMBSaw* c = *osc;
 80185d8:	6804      	ldr	r4, [r0, #0]
{
 80185da:	b082      	sub	sp, #8
 80185dc:	4605      	mov	r5, r0

    int    j;
    float  sync;
    float  p, sw, z;

    sync = c->sync;
 80185de:	ed94 7a04 	vldr	s14, [r4, #16]


    p = c->_p;  /* phase [0, 1) */
 80185e2:	edd4 7a07 	vldr	s15, [r4, #28]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80185e6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    z = c->_z;  /* low pass filter state */
 80185ea:	edd4 9a09 	vldr	s19, [r4, #36]	; 0x24
    j = c->_j;  /* index into buffer _f */
 80185ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80185f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185f4:	f340 813d 	ble.w	8018872 <tMBSaw_tick+0x2a2>
 80185f8:	69a3      	ldr	r3, [r4, #24]
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	f340 80b1 	ble.w	8018762 <tMBSaw_tick+0x192>
 8018600:	edd4 6a05 	vldr	s13, [r4, #20]
    sw = c->_w * c->syncdir;
 8018604:	ed94 7a08 	vldr	s14, [r4, #32]
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018608:	eef1 6a66 	vneg.f32	s13, s13
    float inv_sw = c->_inv_w * c->syncdir;
 801860c:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 8018610:	ee26 7a87 	vmul.f32	s14, s13, s14
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018614:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 8018618:	ee66 8aa8 	vmul.f32	s17, s13, s17
    p += sw - (int)sw;
 801861c:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 8018620:	ee37 8a27 	vadd.f32	s16, s14, s15
 8018624:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 8018628:	ee38 8a67 	vsub.f32	s16, s16, s15
        if (sw > 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset);
        else if (sw < 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);

    } else if (p >= 1.0f) {  /* normal phase reset */
 801862c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8018630:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8018634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018638:	f280 8135 	bge.w	80188a6 <tMBSaw_tick+0x2d6>
        p -= 1.0f;
        tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);

    } else if (p < 0.0f) {
 801863c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018644:	f100 8193 	bmi.w	801896e <tMBSaw_tick+0x39e>

    //construct the current output sample based on the state of the active BLEPs

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;

    c->_f[currentSamp] = 0.5f - p;
 8018648:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801864c:	1d33      	adds	r3, r6, #4
 801864e:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = 0.5f - p;
 8018652:	ee37 7a48 	vsub.f32	s14, s14, s16
 8018656:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801865a:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 801865e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8018662:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018666:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801866a:	2b00      	cmp	r3, #0
 801866c:	f000 817a 	beq.w	8018964 <tMBSaw_tick+0x394>
 8018670:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8018674:	f8b4 e052 	ldrh.w	lr, [r4, #82]	; 0x52
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

    	//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8018678:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801867c:	2000      	movs	r0, #0
 801867e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8018682:	4deb      	ldr	r5, [pc, #940]	; (8018a30 <tMBSaw_tick+0x460>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8018684:	ebae 0300 	sub.w	r3, lr, r0
 8018688:	b29b      	uxth	r3, r3
 801868a:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 801868e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8018692:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018696:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801869a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801869e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80186a2:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 80186a6:	b289      	uxth	r1, r1
 80186a8:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 80186ac:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80186ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80186b2:	fa1f f888 	uxth.w	r8, r8
 80186b6:	fa1f f989 	uxth.w	r9, r9
 80186ba:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80186be:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 80186c2:	f8b2 a056 	ldrh.w	sl, [r2, #86]	; 0x56
 80186c6:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 80186ca:	f8b9 9056 	ldrh.w	r9, [r9, #86]	; 0x56
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80186ce:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80186d0:	ed98 6a36 	vldr	s12, [r8, #216]	; 0xd8
 80186d4:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
 80186d8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80186dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80186e0:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 80186e4:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80186e8:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80186ea:	f8b3 8056 	ldrh.w	r8, [r3, #86]	; 0x56
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80186ee:	edd9 6a01 	vldr	s13, [r9, #4]
 80186f2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80186f6:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80186fa:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 80186fe:	eee6 7a26 	vfma.f32	s15, s12, s13
 8018702:	edd1 6a37 	vldr	s13, [r1, #220]	; 0xdc
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018706:	f8a3 8056 	strh.w	r8, [r3, #86]	; 0x56
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801870a:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
 801870e:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8018710:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8018714:	f0c0 80a6 	bcc.w	8018864 <tMBSaw_tick+0x294>
		{
			c->numBLEPs--;
 8018718:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801871c:	3001      	adds	r0, #1
 801871e:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 8018722:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018724:	4290      	cmp	r0, r2
			c->numBLEPs--;
 8018726:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801872a:	dbab      	blt.n	8018684 <tMBSaw_tick+0xb4>
 801872c:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
		}

    }

    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018730:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
 8018734:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018736:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
 801873a:	ed84 8a07 	vstr	s16, [r4, #28]
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801873e:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
 8018742:	f006 0607 	and.w	r6, r6, #7
    c->_z = z;
    c->_j = j;
 8018746:	62e6      	str	r6, [r4, #44]	; 0x2c
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018748:	eee7 7a26 	vfma.f32	s15, s14, s13


    return -c->out;
 801874c:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 8018750:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8018754:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 8018758:	b002      	add	sp, #8
 801875a:	ecbd 8b08 	vpop	{d8-d11}
 801875e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sw = c->_w * c->syncdir;
 8018762:	edd4 8a05 	vldr	s17, [r4, #20]
 8018766:	ed94 aa08 	vldr	s20, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
 801876a:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 801876e:	ee28 aa8a 	vmul.f32	s20, s17, s20
    float inv_sw = c->_inv_w * c->syncdir;
 8018772:	ee68 8aa6 	vmul.f32	s17, s17, s13
    p += sw - (int)sw;
 8018776:	eebd 9aca 	vcvt.s32.f32	s18, s20
 801877a:	ee77 7a8a 	vadd.f32	s15, s15, s20
 801877e:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8018782:	ee37 9ac9 	vsub.f32	s18, s15, s18
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8018786:	f040 815e 	bne.w	8018a46 <tMBSaw_tick+0x476>
        if (sw > 0) p = eof_offset;
 801878a:	eeb5 aac0 	vcmpe.f32	s20, #0.0
        float eof_offset = sync * sw;
 801878e:	ee27 7a0a 	vmul.f32	s14, s14, s20
        if (sw > 0) p = eof_offset;
 8018792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8018796:	ee79 aa47 	vsub.f32	s21, s18, s14
        if (sw > 0) p = eof_offset;
 801879a:	f340 80b2 	ble.w	8018902 <tMBSaw_tick+0x332>
 801879e:	eeb0 8a47 	vmov.f32	s16, s14
        if (p_at_reset >= 1.0f) {
 80187a2:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 80187a6:	eef4 aacb 	vcmpe.f32	s21, s22
 80187aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187ae:	db2d      	blt.n	801880c <tMBSaw_tick+0x23c>
            p_at_reset -= 1.0f;
 80187b0:	ee7a aacb 	vsub.f32	s21, s21, s22
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 80187b4:	eddf ba9f 	vldr	s23, [pc, #636]	; 8018a34 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 80187b8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80187bc:	ee68 baab 	vmul.f32	s23, s17, s23
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 80187c0:	ee37 9a2a 	vadd.f32	s18, s14, s21
	i = lrintf(r - 0.5f);
 80187c4:	eea9 0a2b 	vfma.f32	s0, s18, s23
 80187c8:	f001 ff76 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80187cc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187d0:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80187d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80187d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187dc:	3301      	adds	r3, #1
	r -= (float)i;
 80187de:	eed9 7a2b 	vfnms.f32	s15, s18, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 80187e6:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80187ea:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 80187ee:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80187f2:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80187f6:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80187fa:	ed82 ba37 	vstr	s22, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80187fe:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 8018802:	3301      	adds	r3, #1
 8018804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018808:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        if (p_at_reset < 0.0f) {
 801880c:	eef5 aac0 	vcmpe.f32	s21, #0.0
 8018810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018814:	f100 80da 	bmi.w	80189cc <tMBSaw_tick+0x3fc>
        if (sw > 0)
 8018818:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 801881c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018820:	dc74      	bgt.n	801890c <tMBSaw_tick+0x33c>
        else if (sw < 0)
 8018822:	f57f af11 	bpl.w	8018648 <tMBSaw_tick+0x78>
	_tMBSaw* c = *osc;
 8018826:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801882a:	ed9f 9a82 	vldr	s18, [pc, #520]	; 8018a34 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 801882e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 8018832:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8018834:	ee28 9a89 	vmul.f32	s18, s17, s18
 8018838:	ee78 8a67 	vsub.f32	s17, s16, s15
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);
 801883c:	eef1 aa6a 	vneg.f32	s21, s21
	i = lrintf(r - 0.5f);
 8018840:	eea9 0a28 	vfma.f32	s0, s18, s17
 8018844:	f001 ff38 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8018848:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801884c:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018850:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018858:	3301      	adds	r3, #1
	r -= (float)i;
 801885a:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801885e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018862:	e06b      	b.n	801893c <tMBSaw_tick+0x36c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018864:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8018868:	3001      	adds	r0, #1
 801886a:	4283      	cmp	r3, r0
 801886c:	f73f af0a 	bgt.w	8018684 <tMBSaw_tick+0xb4>
 8018870:	e75c      	b.n	801872c <tMBSaw_tick+0x15c>
    sw = c->_w * c->syncdir;
 8018872:	edd4 8a05 	vldr	s17, [r4, #20]
    } else if (p >= 1.0f) {  /* normal phase reset */
 8018876:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    sw = c->_w * c->syncdir;
 801887a:	ed94 8a08 	vldr	s16, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
 801887e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 8018882:	ee28 8a88 	vmul.f32	s16, s17, s16
    float inv_sw = c->_inv_w * c->syncdir;
 8018886:	ee68 8a87 	vmul.f32	s17, s17, s14
    p += sw - (int)sw;
 801888a:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 801888e:	ee77 7a88 	vadd.f32	s15, s15, s16
 8018892:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 8018896:	ee37 8ac8 	vsub.f32	s16, s15, s16
    } else if (p >= 1.0f) {  /* normal phase reset */
 801889a:	eeb4 8ac9 	vcmpe.f32	s16, s18
 801889e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188a2:	f6ff aecb 	blt.w	801863c <tMBSaw_tick+0x6c>
        p -= 1.0f;
 80188a6:	eddf 7a63 	vldr	s15, [pc, #396]	; 8018a34 <tMBSaw_tick+0x464>
 80188aa:	ee38 8a49 	vsub.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
 80188ae:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 80188b2:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 80188b4:	ee68 8aa7 	vmul.f32	s17, s17, s15
	i = lrintf(r - 0.5f);
 80188b8:	eea8 0a88 	vfma.f32	s0, s17, s16
 80188bc:	f001 fefc 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80188c0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80188c4:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80188c8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80188cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80188d0:	3301      	adds	r3, #1
	r -= (float)i;
 80188d2:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80188d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 80188da:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80188de:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 80188e2:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80188e6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80188ea:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80188ee:	ed82 9a37 	vstr	s18, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80188f2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80188f6:	3301      	adds	r3, #1
 80188f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80188fc:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 8018900:	e6a2      	b.n	8018648 <tMBSaw_tick+0x78>
        else if (sw < 0) p = 1.0f - eof_offset;
 8018902:	f100 809b 	bmi.w	8018a3c <tMBSaw_tick+0x46c>
    p += sw - (int)sw;
 8018906:	eeb0 8a49 	vmov.f32	s16, s18
 801890a:	e74a      	b.n	80187a2 <tMBSaw_tick+0x1d2>
	_tMBSaw* c = *osc;
 801890c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8018a34 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 8018910:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 8018914:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8018916:	ee68 8aa7 	vmul.f32	s17, s17, s15
	i = lrintf(r - 0.5f);
 801891a:	eea8 0a88 	vfma.f32	s0, s17, s16
 801891e:	f001 fecb 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8018922:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018926:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801892a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801892e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018932:	3301      	adds	r3, #1
	r -= (float)i;
 8018934:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801893c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018940:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018944:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018948:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801894c:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018950:	edc2 aa37 	vstr	s21, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018954:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8018958:	3301      	adds	r3, #1
 801895a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801895e:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 8018962:	e671      	b.n	8018648 <tMBSaw_tick+0x78>
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018964:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018968:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801896c:	e6e0      	b.n	8018730 <tMBSaw_tick+0x160>
	r = MINBLEP_PHASES * phase * inv_w;
 801896e:	ee68 8a88 	vmul.f32	s17, s17, s16
	i = lrintf(r - 0.5f);
 8018972:	ed9f aa30 	vldr	s20, [pc, #192]	; 8018a34 <tMBSaw_tick+0x464>
 8018976:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 801897a:	682d      	ldr	r5, [r5, #0]
        p += 1.0f;
 801897c:	ee38 8a09 	vadd.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
 8018980:	eea8 0a8a 	vfma.f32	s0, s17, s20
 8018984:	f001 fe98 	bl	801a6b8 <lrintf>
	r -= (float)i;
 8018988:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801898c:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018990:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018998:	4a27      	ldr	r2, [pc, #156]	; (8018a38 <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801899a:	3301      	adds	r3, #1
	r -= (float)i;
 801899c:	eed8 7a8a 	vfnms.f32	s15, s17, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80189a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 80189a4:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80189a8:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 80189ac:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80189b0:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 80189b4:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80189b8:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80189bc:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 80189c0:	3301      	adds	r3, #1
 80189c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80189c6:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 80189ca:	e63d      	b.n	8018648 <tMBSaw_tick+0x78>
            p_at_reset += 1.0f;
 80189cc:	ed9f ba19 	vldr	s22, [pc, #100]	; 8018a34 <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 80189d0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
            p_at_reset += 1.0f;
 80189d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tMBSaw* c = *osc;
 80189d8:	682f      	ldr	r7, [r5, #0]
 80189da:	ee28 ba8b 	vmul.f32	s22, s17, s22
            p_at_reset += 1.0f;
 80189de:	ee7a aaa7 	vadd.f32	s21, s21, s15
	i = lrintf(r - 0.5f);
 80189e2:	eeab 0a09 	vfma.f32	s0, s22, s18
 80189e6:	f001 fe67 	bl	801a6b8 <lrintf>
	r -= (float)i;
 80189ea:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80189ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80189f2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80189f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80189fa:	4a0f      	ldr	r2, [pc, #60]	; (8018a38 <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80189fc:	3301      	adds	r3, #1
	r -= (float)i;
 80189fe:	eedb 7a09 	vfnms.f32	s15, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018a06:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a0a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018a0e:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018a12:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8018a16:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018a1a:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018a1e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8018a22:	3301      	adds	r3, #1
 8018a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018a28:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
}
 8018a2c:	e6f4      	b.n	8018818 <tMBSaw_tick+0x248>
 8018a2e:	bf00      	nop
 8018a30:	0802a698 	.word	0x0802a698
 8018a34:	42800000 	.word	0x42800000
 8018a38:	bf800000 	.word	0xbf800000
        else if (sw < 0) p = 1.0f - eof_offset;
 8018a3c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8018a40:	ee38 8a47 	vsub.f32	s16, s16, s14
 8018a44:	e6ad      	b.n	80187a2 <tMBSaw_tick+0x1d2>
    p += sw - (int)sw;
 8018a46:	eeb0 8a49 	vmov.f32	s16, s18
 8018a4a:	e5ef      	b.n	801862c <tMBSaw_tick+0x5c>

08018a4c <tMBSaw_setFreq>:

void tMBSaw_setFreq(tMBSaw* const osc, float f)
{
    _tMBSaw* c = *osc;
 8018a4c:	6803      	ldr	r3, [r0, #0]
    c->freq = f;

    c->_w = c->freq * c->invSampleRate;
    c->_inv_w = 1.0f / c->_w;
 8018a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;
 8018a52:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
    c->freq = f;
 8018a56:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;
 8018a5a:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 8018a5e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;
 8018a62:	ed83 0a08 	vstr	s0, [r3, #32]
    c->_inv_w = 1.0f / c->_w;
 8018a66:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8018a6a:	4770      	bx	lr

08018a6c <tMBSaw_sync>:

float tMBSaw_sync(tMBSaw* const osc, float value)
{
    _tMBSaw* c = *osc;
 8018a6c:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8018a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 8018a72:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
 8018a76:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
 8018a7a:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 8018a7e:	eef1 7a67 	vneg.f32	s15, s15
 8018a82:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 8018a86:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8018a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a8e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8018a92:	bfcc      	ite	gt
 8018a94:	2201      	movgt	r2, #1
 8018a96:	2200      	movle	r2, #0
 8018a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a9c:	f002 0201 	and.w	r2, r2, #1
 8018aa0:	bf88      	it	hi
 8018aa2:	2200      	movhi	r2, #0
 8018aa4:	b122      	cbz	r2, 8018ab0 <tMBSaw_sync+0x44>
 8018aa6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8018aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018aae:	da04      	bge.n	8018aba <tMBSaw_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 8018ab0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8018ac8 <tMBSaw_sync+0x5c>
 8018ab4:	ed83 7a04 	vstr	s14, [r3, #16]
    
    return value;
}
 8018ab8:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 8018aba:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018abe:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018ac2:	ed83 7a04 	vstr	s14, [r3, #16]
}
 8018ac6:	4770      	bx	lr
 8018ac8:	00000000 	.word	0x00000000

08018acc <tMBSawPulse_init>:


//==================================================================================================

void tMBSawPulse_init(tMBSawPulse* const osc, LEAF* const leaf)
{
 8018acc:	b570      	push	{r4, r5, r6, lr}
    tMBSawPulse_initToPool(osc, &leaf->mempool);
}

void tMBSawPulse_initToPool(tMBSawPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 8018ace:	698d      	ldr	r5, [r1, #24]
{
 8018ad0:	4606      	mov	r6, r0
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 8018ad2:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 8018ad6:	4629      	mov	r1, r5
 8018ad8:	f7fc fc76 	bl	80153c8 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    c->gain = 1.0f;
 8018adc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 8018ae0:	6030      	str	r0, [r6, #0]
    c->active = 1;
 8018ae2:	2201      	movs	r2, #1
    c->mempool = m;
 8018ae4:	6005      	str	r5, [r0, #0]
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 8018ae6:	4604      	mov	r4, r0
    LEAF* leaf = c->mempool->leaf;
 8018ae8:	686b      	ldr	r3, [r5, #4]
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8018aea:	2500      	movs	r5, #0
    c->gain = 1.0f;
 8018aec:	f8c0 12f0 	str.w	r1, [r0, #752]	; 0x2f0
    c->active = 1;
 8018af0:	f8c0 22f4 	str.w	r2, [r0, #756]	; 0x2f4
    c->waveform = 0.0f;
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8018af4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
 8018af8:	ed93 7a01 	vldr	s14, [r3, #4]
    c->lastsyncin = 0.0f;
 8018afc:	2300      	movs	r3, #0
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 8018afe:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8018b58 <tMBSawPulse_init+0x8c>
    c->freq = 440.f;
 8018b02:	eddf 7a16 	vldr	s15, [pc, #88]	; 8018b5c <tMBSawPulse_init+0x90>
    c->_inv_w = 1.0f / c->_w;
 8018b06:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->syncdir = 1.0f;
 8018b0a:	6141      	str	r1, [r0, #20]
    c->freq = 440.f;
 8018b0c:	edc0 7a02 	vstr	s15, [r0, #8]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8018b10:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->softsync = 0;
 8018b14:	6185      	str	r5, [r0, #24]
    c->_j = 0;
 8018b16:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8018b18:	6282      	str	r2, [r0, #40]	; 0x28
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_x = 0.5f;  /* temporary output variable */
 8018b1e:	62c2      	str	r2, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
 8018b20:	6685      	str	r5, [r0, #104]	; 0x68
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8018b22:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8018b24:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8018b28:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 8018b2a:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
    c->lastsyncin = 0.0f;
 8018b2e:	60c3      	str	r3, [r0, #12]
    c->sync = 0.0f;
 8018b30:	6103      	str	r3, [r0, #16]
    c->waveform = 0.0f;
 8018b32:	61c3      	str	r3, [r0, #28]
    c->_z = 0.0f;
 8018b34:	6303      	str	r3, [r0, #48]	; 0x30
    c->_p = 0.0f;  /* phase [0, 1) */
 8018b36:	6203      	str	r3, [r0, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018b38:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8018b3c:	6343      	str	r3, [r0, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8018b3e:	306e      	adds	r0, #110	; 0x6e
    c->_inv_w = 1.0f / c->_w;
 8018b40:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8018b44:	f001 fb84 	bl	801a250 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8018b48:	4629      	mov	r1, r5
 8018b4a:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8018b4e:	2220      	movs	r2, #32
}
 8018b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8018b54:	f001 bb7c 	b.w	801a250 <memset>
 8018b58:	3b14f209 	.word	0x3b14f209
 8018b5c:	43dc0000 	.word	0x43dc0000

08018b60 <tMBSawPulse_tick>:
#ifdef ITCMRAM
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tMBSawPulse_tick(tMBSawPulse* const osc)
#else
float tMBSawPulse_tick(tMBSawPulse* const osc)
#endif
{
 8018b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b64:	ed2d 8b0e 	vpush	{d8-d14}
    _tMBSawPulse* c = *osc;
 8018b68:	6804      	ldr	r4, [r0, #0]
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    float shape = c->shape;
    float sawShape = 1.0f - c->shape;
 8018b6a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
{
 8018b6e:	b084      	sub	sp, #16
 8018b70:	4607      	mov	r7, r0
    sync = c->sync;
 8018b72:	ed94 8a04 	vldr	s16, [r4, #16]
    float shape = c->shape;
 8018b76:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
    x = c->_x;  /* temporary output variable */
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */

    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018b7a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8018b7e:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    float sawShape = 1.0f - c->shape;
 8018b82:	ee39 dacc 	vsub.f32	s26, s19, s24
    p = c->_p;  /* phase [0, 1) */
 8018b86:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8018b8a:	eefd cae5 	vcvt.s32.f32	s25, s11
    w = c->_w;  /* phase increment */
 8018b8e:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
 8018b96:	ed94 ba0a 	vldr	s22, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
 8018b9a:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
 8018b9e:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
 8018ba2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018ba4:	f340 80d8 	ble.w	8018d58 <tMBSawPulse_tick+0x1f8>
 8018ba8:	69a3      	ldr	r3, [r4, #24]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	dd65      	ble.n	8018c7a <tMBSawPulse_tick+0x11a>
 8018bae:	edd4 6a05 	vldr	s13, [r4, #20]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 8018bb2:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018bb6:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
 8018bba:	ee66 7aab 	vmul.f32	s15, s13, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018bbe:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 8018bc2:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
 8018bc6:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8018bca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018bce:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8018bd2:	ee37 8a48 	vsub.f32	s16, s14, s16


    }


    else if (!k)
 8018bd6:	ee1c 3a90 	vmov	r3, s25
    {  /* normal operation for pulse, signal currently high */

		if (sw > 0)
 8018bda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	f040 80d1 	bne.w	8018d86 <tMBSawPulse_tick+0x226>
		if (sw > 0)
 8018be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018be8:	f340 8210 	ble.w	801900c <tMBSawPulse_tick+0x4ac>
		{
			if (p >= b) {
 8018bec:	eeb4 8acb 	vcmpe.f32	s16, s22
 8018bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bf4:	f280 81cc 	bge.w	8018f90 <tMBSawPulse_tick+0x430>
 8018bf8:	eddf 5ae3 	vldr	s11, [pc, #908]	; 8018f88 <tMBSawPulse_tick+0x428>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
				k = 1;
				x = -0.5f;
			}
			if (p >= 1.0f) {
 8018bfc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018c00:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c08:	f2c0 80cb 	blt.w	8018da2 <tMBSawPulse_tick+0x242>
    _tMBSawPulse* c = *osc;
 8018c0c:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
 8018c0e:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
 8018c12:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	f000 81f3 	beq.w	8019002 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
 8018c1c:	eddf 7adb 	vldr	s15, [pc, #876]	; 8018f8c <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
 8018c20:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);
				k = 0;
				x = 0.5f;
 8018c24:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8018c28:	ee29 9a27 	vmul.f32	s18, s18, s15
		i = lrintf(r - 0.5f);
 8018c2c:	eea9 0a08 	vfma.f32	s0, s18, s16
 8018c30:	f001 fd42 	bl	801a6b8 <lrintf>
		r -= (float)i;
 8018c34:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c38:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018c3c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018c44:	eddf 5ad0 	vldr	s11, [pc, #832]	; 8018f88 <tMBSawPulse_tick+0x428>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c48:	3301      	adds	r3, #1
		r -= (float)i;
 8018c4a:	eed9 7a08 	vfnms.f32	s15, s18, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018c52:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c56:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018c5a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018c5e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8018c62:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018c66:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018c6a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018c6e:	3301      	adds	r3, #1
 8018c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018c74:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8018c78:	e093      	b.n	8018da2 <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
 8018c7a:	ed94 9a05 	vldr	s18, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 8018c7e:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 8018c82:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
 8018c86:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 8018c8a:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 8018c8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8018c92:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8018c96:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0)
 8018c9a:	f040 8639 	bne.w	8019910 <tMBSawPulse_tick+0xdb0>
        if (sw > 0) p = eof_offset;
 8018c9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8018ca2:	4625      	mov	r5, r4
        float eof_offset = sync * sw;
 8018ca4:	ee27 8a88 	vmul.f32	s16, s15, s16
        if (sw > 0) p = eof_offset;
 8018ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8018cac:	ee78 dac8 	vsub.f32	s27, s17, s16
        if (sw > 0) p = eof_offset;
 8018cb0:	f340 8117 	ble.w	8018ee2 <tMBSawPulse_tick+0x382>
		 if (!k)
 8018cb4:	ee1c 2a90 	vmov	r2, s25
 8018cb8:	2a00      	cmp	r2, #0
 8018cba:	f040 8274 	bne.w	80191a6 <tMBSawPulse_tick+0x646>
				 if (p_at_reset >= b)
 8018cbe:	eeb4 baed 	vcmpe.f32	s22, s27
 8018cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cc6:	f240 83c0 	bls.w	801944a <tMBSawPulse_tick+0x8ea>
    _tMBSawPulse* c = *osc;
 8018cca:	46a0      	mov	r8, r4
    if (c->active)
 8018ccc:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8018cd0:	ee1c 9a90 	vmov	r9, s25
				 if (p_at_reset >= 1.0f)
 8018cd4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018cd8:	eef4 dae8 	vcmpe.f32	s27, s17
 8018cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ce0:	f280 82ad 	bge.w	801923e <tMBSawPulse_tick+0x6de>
    if (c->active)
 8018ce4:	b35a      	cbz	r2, 8018d3e <tMBSawPulse_tick+0x1de>
		r = MINBLEP_PHASES * phase * inv_w;
 8018ce6:	eddf 8aa9 	vldr	s17, [pc, #676]	; 8018f8c <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
 8018cea:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
 8018cee:	ee6d da8d 	vmul.f32	s27, s27, s26
 8018cf2:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 8018cf6:	eea8 0a28 	vfma.f32	s0, s16, s17
 8018cfa:	f001 fcdd 	bl	801a6b8 <lrintf>
		r -= (float)i;
 8018cfe:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018d02:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018d06:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018d0e:	3301      	adds	r3, #1
		r -= (float)i;
 8018d10:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018d18:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018d1c:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018d20:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018d24:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8018d28:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018d2c:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018d30:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 8018d34:	3301      	adds	r3, #1
 8018d36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018d3a:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
            if (k) {
 8018d3e:	f1b9 0f00 	cmp.w	r9, #0
 8018d42:	f040 8419 	bne.w	8019578 <tMBSawPulse_tick+0xa18>
			if (p >= b) {
 8018d46:	eeb4 bac8 	vcmpe.f32	s22, s16
 8018d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d4e:	f240 80df 	bls.w	8018f10 <tMBSawPulse_tick+0x3b0>
		 if (!k)
 8018d52:	eddf 5a8d 	vldr	s11, [pc, #564]	; 8018f88 <tMBSawPulse_tick+0x428>
 8018d56:	e024      	b.n	8018da2 <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
 8018d58:	ed94 9a05 	vldr	s18, [r4, #20]
    else if (!k)
 8018d5c:	ee1c 3a90 	vmov	r3, s25
    float inv_sw = c->_inv_w * c->syncdir;
 8018d60:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 8018d64:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
 8018d68:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 8018d6c:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8018d70:	ee37 7a27 	vadd.f32	s14, s14, s15
		if (sw > 0)
 8018d74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
 8018d78:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8018d7c:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	f43f af2f 	beq.w	8018be4 <tMBSawPulse_tick+0x84>
			}
		}

	} else {  /* normal operation, signal currently low */

		if (sw > 0)
 8018d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d8a:	f340 81bd 	ble.w	8019108 <tMBSawPulse_tick+0x5a8>
		{
			if (p >= 1.0f) {
 8018d8e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8018d92:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d9a:	f280 80ac 	bge.w	8018ef6 <tMBSawPulse_tick+0x396>
    c->_w = w;
    c->_b = b;
    c->_x = x;
    c->_z = z;
    c->_j = j;
    c->_k = k;
 8018d9e:	eef8 5aec 	vcvt.f32.s32	s11, s25
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
 8018da2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8018da6:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
 8018da8:	ee2a 7a8c 	vmul.f32	s14, s21, s24
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8018dac:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
 8018db0:	ee76 6ac8 	vsub.f32	s13, s13, s16
    c->_f[currentSamp] += (x * shape);//pulse
 8018db4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018db8:	eea6 7a8d 	vfma.f32	s14, s13, s26
 8018dbc:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8018dc0:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8018dc4:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018dc8:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	f000 81e5 	beq.w	801919c <tMBSawPulse_tick+0x63c>
 8018dd2:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8018dd6:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8018dda:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018dde:	2000      	movs	r0, #0
 8018de0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8018de4:	4d67      	ldr	r5, [pc, #412]	; (8018f84 <tMBSawPulse_tick+0x424>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8018de6:	ebae 0300 	sub.w	r3, lr, r0
 8018dea:	b29b      	uxth	r3, r3
 8018dec:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
 8018df0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018df4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018df8:	f8ad 300e 	strh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8018dfc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 8018e00:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8018e04:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 8018e08:	b289      	uxth	r1, r1
 8018e0a:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8018e0e:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018e10:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8018e14:	fa1f f888 	uxth.w	r8, r8
 8018e18:	fa1f f989 	uxth.w	r9, r9
 8018e1c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8018e20:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8018e24:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
 8018e28:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 8018e2c:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018e30:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8018e32:	ed98 6a3c 	vldr	s12, [r8, #240]	; 0xf0
 8018e36:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
 8018e3a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8018e3e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8018e42:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 8018e46:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8018e4a:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018e4c:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8018e50:	edd9 6a01 	vldr	s13, [r9, #4]
 8018e54:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018e58:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8018e5c:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8018e60:	eee6 7a26 	vfma.f32	s15, s12, s13
 8018e64:	edd1 6a3d 	vldr	s13, [r1, #244]	; 0xf4
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018e68:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8018e6c:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
 8018e70:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8018e72:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8018e76:	d32e      	bcc.n	8018ed6 <tMBSawPulse_tick+0x376>
			c->numBLEPs--;
 8018e78:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018e7c:	3001      	adds	r0, #1
 8018e7e:	f89d 200d 	ldrb.w	r2, [sp, #13]
			c->numBLEPs--;
 8018e82:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018e84:	4282      	cmp	r2, r0
			c->numBLEPs--;
 8018e86:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018e8a:	dcac      	bgt.n	8018de6 <tMBSawPulse_tick+0x286>
 8018e8c:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018e90:	ee37 7a4a 	vsub.f32	s14, s14, s20

    return -c->out * c->gain;
 8018e94:	ed94 0abc 	vldr	s0, [r4, #752]	; 0x2f0
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018e98:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
 8018e9c:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018e9e:	eef0 7a4a 	vmov.f32	s15, s20
    c->_p = p;
 8018ea2:	ed84 8a08 	vstr	s16, [r4, #32]
    j = (j+1) & 7;
 8018ea6:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
 8018eaa:	edc4 ba09 	vstr	s23, [r4, #36]	; 0x24
    c->_b = b;
 8018eae:	ed84 ba0a 	vstr	s22, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z); // LP filtering
 8018eb2:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
 8018eb6:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    c->_j = j;
 8018eba:	63a6      	str	r6, [r4, #56]	; 0x38
    c->_k = k;
 8018ebc:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    return -c->out * c->gain;
 8018ec0:	ee20 0a67 	vnmul.f32	s0, s0, s15
    c->out = z;
 8018ec4:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8018ec8:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 8018ecc:	b004      	add	sp, #16
 8018ece:	ecbd 8b0e 	vpop	{d8-d14}
 8018ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018ed6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8018eda:	3001      	adds	r0, #1
 8018edc:	4283      	cmp	r3, r0
 8018ede:	dc82      	bgt.n	8018de6 <tMBSawPulse_tick+0x286>
 8018ee0:	e7d4      	b.n	8018e8c <tMBSawPulse_tick+0x32c>
        else if (sw < 0) p = 1.0f - eof_offset;
 8018ee2:	f100 8229 	bmi.w	8019338 <tMBSawPulse_tick+0x7d8>
		 if (!k)
 8018ee6:	ee1c 2a90 	vmov	r2, s25
 8018eea:	2a00      	cmp	r2, #0
 8018eec:	f040 8197 	bne.w	801921e <tMBSawPulse_tick+0x6be>
    p += sw - (int)sw;
 8018ef0:	eeb0 8a68 	vmov.f32	s16, s17
 8018ef4:	e72d      	b.n	8018d52 <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
 8018ef6:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
 8018ef8:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
 8018efc:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	f040 8161 	bne.w	80191c8 <tMBSawPulse_tick+0x668>
			if (!k && p >= b) {
 8018f06:	eeb4 bac8 	vcmpe.f32	s22, s16
 8018f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f0e:	d878      	bhi.n	8019002 <tMBSawPulse_tick+0x4a2>
    _tMBSawPulse* c = *osc;
 8018f10:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 8018f12:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	f000 8151 	beq.w	80191be <tMBSawPulse_tick+0x65e>
		r = MINBLEP_PHASES * phase * inv_w;
 8018f1c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8018f8c <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 8018f20:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 8018f24:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018f28:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = -0.5f;
 8018f2c:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 8018f30:	eea8 0a89 	vfma.f32	s0, s17, s18
 8018f34:	f001 fbc0 	bl	801a6b8 <lrintf>
		r -= (float)i;
 8018f38:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018f3c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018f40:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018f44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018f48:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 8018f4a:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018f4e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018f52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 8018f56:	ee98 7a89 	vfnms.f32	s14, s17, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018f5a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018f5e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018f62:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018f66:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8018f6a:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018f6e:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018f72:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018f76:	3301      	adds	r3, #1
 8018f78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018f7c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8018f80:	e70f      	b.n	8018da2 <tMBSawPulse_tick+0x242>
 8018f82:	bf00      	nop
 8018f84:	0802a698 	.word	0x0802a698
 8018f88:	00000000 	.word	0x00000000
 8018f8c:	42800000 	.word	0x42800000
    _tMBSawPulse* c = *osc;
 8018f90:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 8018f92:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	f000 814c 	beq.w	8019234 <tMBSawPulse_tick+0x6d4>
		r = MINBLEP_PHASES * phase * inv_w;
 8018f9c:	ed5f 9a05 	vldr	s19, [pc, #-20]	; 8018f8c <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 8018fa0:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 8018fa4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018fa8:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = -0.5f;
 8018fac:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 8018fb0:	eea9 0aa8 	vfma.f32	s0, s19, s17
 8018fb4:	f001 fb80 	bl	801a6b8 <lrintf>
		r -= (float)i;
 8018fb8:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018fbc:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018fc0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8018fc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018fc8:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 8018fca:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018fce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 8018fd6:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018fda:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018fde:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8018fe2:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018fe6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8018fea:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018fee:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018ff2:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8018ff6:	3301      	adds	r3, #1
 8018ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018ffc:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8019000:	e5fc      	b.n	8018bfc <tMBSawPulse_tick+0x9c>
				x = 0.5f;
 8019002:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			if (p < b) {
 8019006:	ed5f 5a20 	vldr	s11, [pc, #-128]	; 8018f88 <tMBSawPulse_tick+0x428>
 801900a:	e6ca      	b.n	8018da2 <tMBSawPulse_tick+0x242>
			if (p < 0.0f) {
 801900c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019014:	f57f ae9d 	bpl.w	8018d52 <tMBSawPulse_tick+0x1f2>
 8019018:	eef5 7a40 	vcmp.f32	s15, #0.0
 801901c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019020:	f57f ae97 	bpl.w	8018d52 <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
 8019024:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
 8019026:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
 801902a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
 801902e:	ee78 8a28 	vadd.f32	s17, s16, s17
    if (c->active)
 8019032:	b353      	cbz	r3, 801908a <tMBSawPulse_tick+0x52a>
		r = MINBLEP_PHASES * phase * inv_w;
 8019034:	ee29 8a08 	vmul.f32	s16, s18, s16
		i = lrintf(r - 0.5f);
 8019038:	ed5f 9a2c 	vldr	s19, [pc, #-176]	; 8018f8c <tMBSawPulse_tick+0x42c>
 801903c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019040:	eea8 0a29 	vfma.f32	s0, s16, s19
 8019044:	f001 fb38 	bl	801a6b8 <lrintf>
		r -= (float)i;
 8019048:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801904c:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019050:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8019054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019058:	4ab2      	ldr	r2, [pc, #712]	; (8019324 <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801905a:	3301      	adds	r3, #1
		r -= (float)i;
 801905c:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8019064:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019068:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801906c:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019070:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8019074:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019078:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801907c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8019080:	3301      	adds	r3, #1
 8019082:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019086:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (k && p < b) {
 801908a:	eeb4 bae8 	vcmpe.f32	s22, s17
 801908e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019092:	f340 8446 	ble.w	8019922 <tMBSawPulse_tick+0xdc2>
    _tMBSawPulse* c = *osc;
 8019096:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 8019098:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801909c:	2b00      	cmp	r3, #0
 801909e:	f000 8327 	beq.w	80196f0 <tMBSawPulse_tick+0xb90>
		r = MINBLEP_PHASES * phase * inv_w;
 80190a2:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8019334 <tMBSawPulse_tick+0x7d4>
 80190a6:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
 80190aa:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80190ae:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
 80190b2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80190b6:	eeb0 8a68 	vmov.f32	s16, s17
		i = lrintf(r - 0.5f);
 80190ba:	eea9 0a29 	vfma.f32	s0, s18, s19
 80190be:	f001 fafb 	bl	801a6b8 <lrintf>
		r -= (float)i;
 80190c2:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80190c6:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80190ca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80190ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80190d2:	eddf 5a97 	vldr	s11, [pc, #604]	; 8019330 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80190d6:	3301      	adds	r3, #1
		r -= (float)i;
 80190d8:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80190dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 80190e0:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80190e4:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80190e8:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80190ec:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80190f0:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80190f4:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80190f8:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 80190fc:	3301      	adds	r3, #1
 80190fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019102:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8019106:	e64c      	b.n	8018da2 <tMBSawPulse_tick+0x242>
		else if (sw < 0)
 8019108:	f57f ae49 	bpl.w	8018d9e <tMBSawPulse_tick+0x23e>
			if (p < b) {
 801910c:	eeb4 8acb 	vcmpe.f32	s16, s22
 8019110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019114:	f100 80cd 	bmi.w	80192b2 <tMBSawPulse_tick+0x752>
			if (p < 0.0f) {
 8019118:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801911c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019120:	f57f ae3d 	bpl.w	8018d9e <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
 8019124:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
 8019126:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
 801912a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
 801912e:	ee78 7a28 	vadd.f32	s15, s16, s17
    if (c->active)
 8019132:	2b00      	cmp	r3, #0
 8019134:	f000 8302 	beq.w	801973c <tMBSawPulse_tick+0xbdc>
		i = lrintf(r - 0.5f);
 8019138:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801913c:	eddf 9a7d 	vldr	s19, [pc, #500]	; 8019334 <tMBSawPulse_tick+0x7d4>
		r = MINBLEP_PHASES * phase * inv_w;
 8019140:	ee29 9a08 	vmul.f32	s18, s18, s16
				p += 1.0f;
 8019144:	eeb0 8a67 	vmov.f32	s16, s15
		i = lrintf(r - 0.5f);
 8019148:	eeb0 0a6a 	vmov.f32	s0, s21
 801914c:	eea9 0a29 	vfma.f32	s0, s18, s19
 8019150:	f001 fab2 	bl	801a6b8 <lrintf>
		r -= (float)i;
 8019154:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019158:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801915c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8019160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019164:	4a6f      	ldr	r2, [pc, #444]	; (8019324 <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019166:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019168:	eef0 5a68 	vmov.f32	s11, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801916c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 8019170:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
 8019174:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019178:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801917c:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019180:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8019184:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019188:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801918c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8019190:	3301      	adds	r3, #1
 8019192:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019196:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801919a:	e602      	b.n	8018da2 <tMBSawPulse_tick+0x242>
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801919c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80191a0:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80191a4:	e674      	b.n	8018e90 <tMBSawPulse_tick+0x330>
				 if (p_at_reset >= 1.0f)
 80191a6:	eef4 dae9 	vcmpe.f32	s27, s19
 80191aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80191ae:	f280 8159 	bge.w	8019464 <tMBSawPulse_tick+0x904>
    _tMBSawPulse* c = *osc;
 80191b2:	46a0      	mov	r8, r4
    if (c->active)
 80191b4:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
 80191b8:	ee1c 9a90 	vmov	r9, s25
 80191bc:	e592      	b.n	8018ce4 <tMBSawPulse_tick+0x184>
 80191be:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 80191c2:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 80191c6:	e5ec      	b.n	8018da2 <tMBSawPulse_tick+0x242>
		r = MINBLEP_PHASES * phase * inv_w;
 80191c8:	eddf 9a5a 	vldr	s19, [pc, #360]	; 8019334 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 80191cc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80191d0:	ee69 9a29 	vmul.f32	s19, s18, s19
 80191d4:	eea9 0a88 	vfma.f32	s0, s19, s16
 80191d8:	f001 fa6e 	bl	801a6b8 <lrintf>
		r -= (float)i;
 80191dc:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80191e0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80191e4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80191e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80191ec:	3301      	adds	r3, #1
		r -= (float)i;
 80191ee:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80191f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 80191f6:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80191fa:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80191fe:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019202:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8019206:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801920a:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801920e:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8019212:	3301      	adds	r3, #1
 8019214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019218:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801921c:	e673      	b.n	8018f06 <tMBSawPulse_tick+0x3a6>
			 else if (sw < 0)
 801921e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019226:	f100 815b 	bmi.w	80194e0 <tMBSawPulse_tick+0x980>
    c->_k = k;
 801922a:	eef8 5aec 	vcvt.f32.s32	s11, s25
    p += sw - (int)sw;
 801922e:	eeb0 8a68 	vmov.f32	s16, s17
 8019232:	e5b6      	b.n	8018da2 <tMBSawPulse_tick+0x242>
 8019234:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 8019238:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801923c:	e4de      	b.n	8018bfc <tMBSawPulse_tick+0x9c>
					 p_at_reset -= 1.0f;
 801923e:	ee7d dae8 	vsub.f32	s27, s27, s17
    if (c->active)
 8019242:	2a00      	cmp	r2, #0
 8019244:	f000 810b 	beq.w	801945e <tMBSawPulse_tick+0x8fe>
		r = MINBLEP_PHASES * phase * inv_w;
 8019248:	eddf 9a3a 	vldr	s19, [pc, #232]	; 8019334 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801924c:	ee78 ca2d 	vadd.f32	s25, s16, s27
		i = lrintf(r - 0.5f);
 8019250:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
 8019254:	f04f 0900 	mov.w	r9, #0
 8019258:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = 0.5f;
 801925c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 8019260:	eeac 0aa9 	vfma.f32	s0, s25, s19
 8019264:	f001 fa28 	bl	801a6b8 <lrintf>
		r -= (float)i;
 8019268:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801926c:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019270:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8019274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019278:	3301      	adds	r3, #1
		r -= (float)i;
 801927a:	eedc 7aa9 	vfnms.f32	s15, s25, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801927e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8019282:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019286:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801928a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801928e:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8019292:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019296:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801929a:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 801929e:	3301      	adds	r3, #1
 80192a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80192a4:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 80192a8:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 80192ac:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 80192b0:	e518      	b.n	8018ce4 <tMBSawPulse_tick+0x184>
    _tMBSawPulse* c = *osc;
 80192b2:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 80192b4:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
 80192b8:	ee1c 3a90 	vmov	r3, s25
 80192bc:	2b00      	cmp	r3, #0
 80192be:	f000 820d 	beq.w	80196dc <tMBSawPulse_tick+0xb7c>
		r = MINBLEP_PHASES * phase * inv_w;
 80192c2:	eddf 9a1c 	vldr	s19, [pc, #112]	; 8019334 <tMBSawPulse_tick+0x7d4>
 80192c6:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 80192ca:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 0;
 80192ce:	eddf ca16 	vldr	s25, [pc, #88]	; 8019328 <tMBSawPulse_tick+0x7c8>
 80192d2:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = 0.5f;
 80192d6:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 80192da:	eea9 0aa8 	vfma.f32	s0, s19, s17
 80192de:	f001 f9eb 	bl	801a6b8 <lrintf>
		r -= (float)i;
 80192e2:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80192e6:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80192ea:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80192ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80192f2:	3301      	adds	r3, #1
		r -= (float)i;
 80192f4:	eed9 7aa8 	vfnms.f32	s15, s19, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80192f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 80192fc:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019300:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8019304:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019308:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801930c:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019310:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019314:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8019318:	3301      	adds	r3, #1
 801931a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801931e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 8019322:	e6f9      	b.n	8019118 <tMBSawPulse_tick+0x5b8>
 8019324:	bf800000 	.word	0xbf800000
 8019328:	00000000 	.word	0x00000000
 801932c:	00000001 	.word	0x00000001
 8019330:	00000000 	.word	0x00000000
 8019334:	42800000 	.word	0x42800000
		 if (!k)
 8019338:	ee1c 2a90 	vmov	r2, s25
        else if (sw < 0) p = 1.0f - eof_offset;
 801933c:	ee39 eac8 	vsub.f32	s28, s19, s16
		 if (!k)
 8019340:	2a00      	cmp	r2, #0
 8019342:	f040 80cf 	bne.w	80194e4 <tMBSawPulse_tick+0x984>
				 if (p_at_reset < 0.0f)
 8019346:	eef5 da40 	vcmp.f32	s27, #0.0
 801934a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801934e:	d571      	bpl.n	8019434 <tMBSawPulse_tick+0x8d4>
    if (c->active)
 8019350:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset += 1.0f;
 8019354:	ee7d daa9 	vadd.f32	s27, s27, s19
    if (c->active)
 8019358:	2b00      	cmp	r3, #0
 801935a:	f040 8231 	bne.w	80197c0 <tMBSawPulse_tick+0xc60>
				 if (k && p_at_reset < b)
 801935e:	eeb4 baed 	vcmpe.f32	s22, s27
 8019362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019366:	f340 82d7 	ble.w	8019918 <tMBSawPulse_tick+0xdb8>
        else if (sw < 0) p = 1.0f - eof_offset;
 801936a:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
 801936e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8019372:	2b00      	cmp	r3, #0
 8019374:	f000 81d6 	beq.w	8019724 <tMBSawPulse_tick+0xbc4>
		r = MINBLEP_PHASES * phase * inv_w;
 8019378:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801937c:	ed5f 9a13 	vldr	s19, [pc, #-76]	; 8019334 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 8019380:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 1;
 8019384:	ed5f ca17 	vldr	s25, [pc, #-92]	; 801932c <tMBSawPulse_tick+0x7cc>
 8019388:	ee69 9a29 	vmul.f32	s19, s18, s19
 801938c:	ee7e 8a68 	vsub.f32	s17, s28, s17
				x = -0.5f;
 8019390:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 8019394:	eea9 0aa8 	vfma.f32	s0, s19, s17
 8019398:	f001 f98e 	bl	801a6b8 <lrintf>
		r -= (float)i;
 801939c:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80193a0:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80193a4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80193a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80193ac:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
 80193ae:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80193b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 80193b6:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 80193ba:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80193be:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80193c2:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80193c6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80193ca:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80193ce:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80193d2:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 80193d6:	3301      	adds	r3, #1
 80193d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80193dc:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (p < b) {
 80193e0:	eeb4 bace 	vcmpe.f32	s22, s28
 80193e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193e8:	f77f acd9 	ble.w	8018d9e <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
 80193ec:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 80193ee:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 80193f2:	2b00      	cmp	r3, #0
 80193f4:	f43f ae05 	beq.w	8019002 <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
 80193f8:	ed5f 7a32 	vldr	s15, [pc, #-200]	; 8019334 <tMBSawPulse_tick+0x7d4>
 80193fc:	ee3e ea4b 	vsub.f32	s28, s28, s22
		i = lrintf(r - 0.5f);
 8019400:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019404:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
 8019408:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 801940c:	eea9 0a0e 	vfma.f32	s0, s18, s28
 8019410:	f001 f952 	bl	801a6b8 <lrintf>
		r -= (float)i;
 8019414:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019418:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801941c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8019420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019424:	ed5f 5a3e 	vldr	s11, [pc, #-248]	; 8019330 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019428:	3301      	adds	r3, #1
		r -= (float)i;
 801942a:	eed9 7a0e 	vfnms.f32	s15, s18, s28
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801942e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019432:	e655      	b.n	80190e0 <tMBSawPulse_tick+0x580>
		else if (sw < 0)
 8019434:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801943c:	f100 814b 	bmi.w	80196d6 <tMBSawPulse_tick+0xb76>
        else if (sw < 0) p = 1.0f - eof_offset;
 8019440:	eeb0 8a4e 	vmov.f32	s16, s28
 8019444:	ed5f 5a46 	vldr	s11, [pc, #-280]	; 8019330 <tMBSawPulse_tick+0x7d0>
 8019448:	e4ab      	b.n	8018da2 <tMBSawPulse_tick+0x242>
    if (c->active)
 801944a:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
 801944e:	2b00      	cmp	r3, #0
 8019450:	f040 8109 	bne.w	8019666 <tMBSawPulse_tick+0xb06>
				 if (p_at_reset >= 1.0f)
 8019454:	eef4 dae9 	vcmpe.f32	s27, s19
 8019458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801945c:	db0f      	blt.n	801947e <tMBSawPulse_tick+0x91e>
				x = 0.5f;
 801945e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8019462:	e470      	b.n	8018d46 <tMBSawPulse_tick+0x1e6>
    if (c->active)
 8019464:	f8d4 92f4 	ldr.w	r9, [r4, #756]	; 0x2f4
					 p_at_reset -= 1.0f;
 8019468:	ee7d dae9 	vsub.f32	s27, s27, s19
    if (c->active)
 801946c:	f1b9 0f00 	cmp.w	r9, #0
 8019470:	f040 8084 	bne.w	801957c <tMBSawPulse_tick+0xa1c>
				 if (!k && p_at_reset >= b)
 8019474:	eeb4 baed 	vcmpe.f32	s22, s27
 8019478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801947c:	d8ef      	bhi.n	801945e <tMBSawPulse_tick+0x8fe>
    if (c->active)
 801947e:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 8019482:	2b00      	cmp	r3, #0
 8019484:	d0eb      	beq.n	801945e <tMBSawPulse_tick+0x8fe>
		r = MINBLEP_PHASES * phase * inv_w;
 8019486:	ed5f 8a55 	vldr	s17, [pc, #-340]	; 8019334 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 801948a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
 801948e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8019492:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 8019496:	eea8 0a28 	vfma.f32	s0, s16, s17
 801949a:	f001 f90d 	bl	801a6b8 <lrintf>
		r -= (float)i;
 801949e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80194a2:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80194a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80194aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80194ae:	3301      	adds	r3, #1
		r -= (float)i;
 80194b0:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80194b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 80194b8:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80194bc:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80194c0:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80194c4:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80194c8:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80194cc:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80194d0:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 80194d4:	3301      	adds	r3, #1
 80194d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80194da:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 80194de:	e432      	b.n	8018d46 <tMBSawPulse_tick+0x1e6>
    p += sw - (int)sw;
 80194e0:	eeb0 ea68 	vmov.f32	s28, s17
				 if (p_at_reset < b)
 80194e4:	eeb4 baed 	vcmpe.f32	s22, s27
 80194e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194ec:	f300 8108 	bgt.w	8019700 <tMBSawPulse_tick+0xba0>
				 if (p_at_reset < 0.0f)
 80194f0:	eef5 dac0 	vcmpe.f32	s27, #0.0
    if (c->active)
 80194f4:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (p_at_reset < 0.0f)
 80194f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194fc:	f100 8126 	bmi.w	801974c <tMBSawPulse_tick+0xbec>
        else if (sw < 0) p = 1.0f - eof_offset;
 8019500:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
 8019504:	b38b      	cbz	r3, 801956a <tMBSawPulse_tick+0xa0a>
		r = MINBLEP_PHASES * phase * inv_w;
 8019506:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801950a:	ed5f 9a76 	vldr	s19, [pc, #-472]	; 8019334 <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 801950e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019512:	ee69 9a29 	vmul.f32	s19, s18, s19
 8019516:	ee7e ea68 	vsub.f32	s29, s28, s17
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
 801951a:	ee7c 8a68 	vsub.f32	s17, s24, s17
		i = lrintf(r - 0.5f);
 801951e:	eea9 0aae 	vfma.f32	s0, s19, s29
 8019522:	f001 f8c9 	bl	801a6b8 <lrintf>
		r -= (float)i;
 8019526:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801952a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801952e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8019532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019536:	3301      	adds	r3, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
 8019538:	ee68 daad 	vmul.f32	s27, s17, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801953c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 8019540:	eed9 7aae 	vfnms.f32	s15, s19, s29
		c->BLEPindices[c->mostRecentBLEP] = i;
 8019544:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019548:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801954c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019550:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8019554:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019558:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801955c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 8019560:	3301      	adds	r3, #1
 8019562:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019566:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (!k) {
 801956a:	ee1c 3a90 	vmov	r3, s25
 801956e:	2b00      	cmp	r3, #0
 8019570:	f47f af36 	bne.w	80193e0 <tMBSawPulse_tick+0x880>
 8019574:	683d      	ldr	r5, [r7, #0]
 8019576:	e6fa      	b.n	801936e <tMBSawPulse_tick+0x80e>
 8019578:	683d      	ldr	r5, [r7, #0]
 801957a:	e780      	b.n	801947e <tMBSawPulse_tick+0x91e>
		i = lrintf(r - 0.5f);
 801957c:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8019580:	ed5f 8a94 	vldr	s17, [pc, #-592]	; 8019334 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8019584:	ee78 aa2d 	vadd.f32	s21, s16, s27
 8019588:	9301      	str	r3, [sp, #4]
 801958a:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 801958e:	eeb0 0a6c 	vmov.f32	s0, s25
 8019592:	eeaa 0aa8 	vfma.f32	s0, s21, s17
 8019596:	f001 f88f 	bl	801a6b8 <lrintf>
		r -= (float)i;
 801959a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801959e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80195a2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80195a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				 if (!k && p_at_reset >= b)
 80195aa:	9b01      	ldr	r3, [sp, #4]
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80195ac:	3201      	adds	r2, #1
				 if (!k && p_at_reset >= b)
 80195ae:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80195b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		r -= (float)i;
 80195b6:	eeda 7aa8 	vfnms.f32	s15, s21, s17
				 if (!k && p_at_reset >= b)
 80195ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
 80195be:	eb04 0142 	add.w	r1, r4, r2, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80195c2:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80195c6:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80195ca:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 80195ce:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80195d2:	edc1 9a3d 	vstr	s19, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80195d6:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80195da:	f102 0201 	add.w	r2, r2, #1
 80195de:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80195e2:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 80195e6:	f8d7 8000 	ldr.w	r8, [r7]
 80195ea:	4645      	mov	r5, r8
    if (c->active)
 80195ec:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
				 if (!k && p_at_reset >= b)
 80195f0:	f200 8175 	bhi.w	80198de <tMBSawPulse_tick+0xd7e>
    if (c->active)
 80195f4:	2a00      	cmp	r2, #0
 80195f6:	f43f af42 	beq.w	801947e <tMBSawPulse_tick+0x91e>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 80195fa:	ee78 9a4b 	vsub.f32	s19, s16, s22
					 k = 1;
 80195fe:	f04f 0901 	mov.w	r9, #1
		i = lrintf(r - 0.5f);
 8019602:	eeb0 0a6c 	vmov.f32	s0, s25
					 x = -0.5f;
 8019606:	eef0 aa6c 	vmov.f32	s21, s25
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801960a:	ee79 9aad 	vadd.f32	s19, s19, s27
		i = lrintf(r - 0.5f);
 801960e:	eea9 0aa8 	vfma.f32	s0, s19, s17
 8019612:	f001 f851 	bl	801a6b8 <lrintf>
		r -= (float)i;
 8019616:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801961a:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801961e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8019622:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019626:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 8019628:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801962c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 8019630:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 8019634:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019638:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801963c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019640:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8019644:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019648:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801964c:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 8019650:	444b      	add	r3, r9
 8019652:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019656:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801965a:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 801965e:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 8019662:	f7ff bb3f 	b.w	8018ce4 <tMBSawPulse_tick+0x184>
		r = MINBLEP_PHASES * phase * inv_w;
 8019666:	ed5f 9acd 	vldr	s19, [pc, #-820]	; 8019334 <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801966a:	ee78 8acb 	vsub.f32	s17, s17, s22
		i = lrintf(r - 0.5f);
 801966e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
 8019672:	f04f 0901 	mov.w	r9, #1
 8019676:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = -0.5f;
 801967a:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801967e:	eea8 0aa9 	vfma.f32	s0, s17, s19
 8019682:	f001 f819 	bl	801a6b8 <lrintf>
		r -= (float)i;
 8019686:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801968a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801968e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8019692:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019696:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 8019698:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801969c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 80196a0:	ee98 7aa9 	vfnms.f32	s14, s17, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
 80196a4:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80196a8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80196ac:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80196b0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 80196b4:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80196b8:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80196bc:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80196c0:	444b      	add	r3, r9
 80196c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80196c6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 80196ca:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 80196ce:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 80196d2:	f7ff baff 	b.w	8018cd4 <tMBSawPulse_tick+0x174>
 80196d6:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 80196da:	e711      	b.n	8019500 <tMBSawPulse_tick+0x9a0>
			if (p < 0.0f) {
 80196dc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80196e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196e4:	f100 8100 	bmi.w	80198e8 <tMBSawPulse_tick+0xd88>
				x = 0.5f;
 80196e8:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 80196ec:	f7ff bb57 	b.w	8018d9e <tMBSawPulse_tick+0x23e>
				x = 0.5f;
 80196f0:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 80196f4:	eddf 5a8f 	vldr	s11, [pc, #572]	; 8019934 <tMBSawPulse_tick+0xdd4>
 80196f8:	eeb0 8a68 	vmov.f32	s16, s17
 80196fc:	f7ff bb51 	b.w	8018da2 <tMBSawPulse_tick+0x242>
    if (c->active)
 8019700:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
 8019704:	ee1c 2a90 	vmov	r2, s25
 8019708:	2a00      	cmp	r2, #0
 801970a:	f040 80b6 	bne.w	801987a <tMBSawPulse_tick+0xd1a>
				 if (p_at_reset < 0.0f)
 801970e:	eef5 dac0 	vcmpe.f32	s27, #0.0
 8019712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019716:	f100 80ef 	bmi.w	80198f8 <tMBSawPulse_tick+0xd98>
					 x = 0.5f;
 801971a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        else if (sw < 0) p = 1.0f - eof_offset;
 801971e:	eeb0 8a4e 	vmov.f32	s16, s28
 8019722:	e722      	b.n	801956a <tMBSawPulse_tick+0xa0a>
			if (p < b) {
 8019724:	eeb4 bace 	vcmpe.f32	s22, s28
 8019728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801972c:	f73f ac69 	bgt.w	8019002 <tMBSawPulse_tick+0x4a2>
				x = -0.5f;
 8019730:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				k = 1;
 8019734:	eddf ca80 	vldr	s25, [pc, #512]	; 8019938 <tMBSawPulse_tick+0xdd8>
 8019738:	f7ff bb31 	b.w	8018d9e <tMBSawPulse_tick+0x23e>
				x = -0.5f;
 801973c:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
 8019740:	eeb0 8a67 	vmov.f32	s16, s15
 8019744:	eef0 5a68 	vmov.f32	s11, s17
 8019748:	f7ff bb2b 	b.w	8018da2 <tMBSawPulse_tick+0x242>
					 p_at_reset += 1.0f;
 801974c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8019750:	ee7d daa7 	vadd.f32	s27, s27, s15
    if (c->active)
 8019754:	2b00      	cmp	r3, #0
 8019756:	f000 80cf 	beq.w	80198f8 <tMBSawPulse_tick+0xd98>
		r = MINBLEP_PHASES * phase * inv_w;
 801975a:	ed9f 8a78 	vldr	s16, [pc, #480]	; 801993c <tMBSawPulse_tick+0xddc>
		i = lrintf(r - 0.5f);
 801975e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
 8019762:	eddf ca75 	vldr	s25, [pc, #468]	; 8019938 <tMBSawPulse_tick+0xdd8>
 8019766:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = -0.5f;
 801976a:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801976e:	eea8 0a28 	vfma.f32	s0, s16, s17
 8019772:	f000 ffa1 	bl	801a6b8 <lrintf>
		r -= (float)i;
 8019776:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801977a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801977e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8019782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019786:	4a6e      	ldr	r2, [pc, #440]	; (8019940 <tMBSawPulse_tick+0xde0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019788:	3301      	adds	r3, #1
		r -= (float)i;
 801978a:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801978e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8019792:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019796:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801979a:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801979e:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 80197a2:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80197a6:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80197aa:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 80197ae:	3301      	adds	r3, #1
 80197b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80197b4:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 80197b8:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 80197ba:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 80197be:	e69f      	b.n	8019500 <tMBSawPulse_tick+0x9a0>
		r = MINBLEP_PHASES * phase * inv_w;
 80197c0:	eddf 9a5e 	vldr	s19, [pc, #376]	; 801993c <tMBSawPulse_tick+0xddc>
		i = lrintf(r - 0.5f);
 80197c4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80197c8:	ee69 9a29 	vmul.f32	s19, s18, s19
 80197cc:	eea9 0aa8 	vfma.f32	s0, s19, s17
 80197d0:	f000 ff72 	bl	801a6b8 <lrintf>
		r -= (float)i;
 80197d4:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80197d8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80197dc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80197e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80197e4:	4a56      	ldr	r2, [pc, #344]	; (8019940 <tMBSawPulse_tick+0xde0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80197e6:	3301      	adds	r3, #1
				 if (k && p_at_reset < b)
 80197e8:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80197ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 80197f0:	eed9 7aa8 	vfnms.f32	s15, s19, s17
				 if (k && p_at_reset < b)
 80197f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
 80197f8:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80197fc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8019800:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019804:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8019808:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801980c:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019810:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8019814:	f103 0301 	add.w	r3, r3, #1
 8019818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801981c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 8019820:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 8019822:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (k && p_at_reset < b)
 8019826:	dd6e      	ble.n	8019906 <tMBSawPulse_tick+0xda6>
    if (c->active)
 8019828:	2b00      	cmp	r3, #0
 801982a:	f43f ad9e 	beq.w	801936a <tMBSawPulse_tick+0x80a>
		r = MINBLEP_PHASES * phase * inv_w;
 801982e:	ee38 8a4b 	vsub.f32	s16, s16, s22
		i = lrintf(r - 0.5f);
 8019832:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
 8019836:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801983a:	ee38 8a2d 	vadd.f32	s16, s16, s27
		i = lrintf(r - 0.5f);
 801983e:	eea8 0a29 	vfma.f32	s0, s16, s19
 8019842:	f000 ff39 	bl	801a6b8 <lrintf>
		r -= (float)i;
 8019846:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801984a:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801984e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 8019852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019856:	3301      	adds	r3, #1
		r -= (float)i;
 8019858:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801985c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 8019860:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019864:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 8019868:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801986c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8019870:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019874:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019878:	e797      	b.n	80197aa <tMBSawPulse_tick+0xc4a>
		r = MINBLEP_PHASES * phase * inv_w;
 801987a:	ed9f 8a30 	vldr	s16, [pc, #192]	; 801993c <tMBSawPulse_tick+0xddc>
 801987e:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
 8019882:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
 8019886:	ee0c 3a90 	vmov	s25, r3
 801988a:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = 0.5f;
 801988e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 8019892:	eea9 0a88 	vfma.f32	s0, s19, s16
 8019896:	f000 ff0f 	bl	801a6b8 <lrintf>
		r -= (float)i;
 801989a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801989e:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80198a2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 80198a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80198aa:	3301      	adds	r3, #1
		r -= (float)i;
 80198ac:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80198b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 80198b4:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80198b8:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 80198bc:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80198c0:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 80198c4:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80198c8:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 80198cc:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 80198d0:	3301      	adds	r3, #1
 80198d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80198d6:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 80198da:	683d      	ldr	r5, [r7, #0]
 80198dc:	e608      	b.n	80194f0 <tMBSawPulse_tick+0x990>
 80198de:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 80198e2:	4699      	mov	r9, r3
 80198e4:	f7ff b9fe 	b.w	8018ce4 <tMBSawPulse_tick+0x184>
				p += 1.0f;
 80198e8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 80198ec:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
 80198f0:	ee38 8a25 	vadd.f32	s16, s16, s11
    if (c->active)
 80198f4:	f7ff ba55 	b.w	8018da2 <tMBSawPulse_tick+0x242>
        else if (sw < 0) p = 1.0f - eof_offset;
 80198f8:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 80198fc:	eddf ca0e 	vldr	s25, [pc, #56]	; 8019938 <tMBSawPulse_tick+0xdd8>
 8019900:	eeb0 8a4e 	vmov.f32	s16, s28
 8019904:	e56c      	b.n	80193e0 <tMBSawPulse_tick+0x880>
 8019906:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801990a:	eddf ca0b 	vldr	s25, [pc, #44]	; 8019938 <tMBSawPulse_tick+0xdd8>
		else if (sw < 0)
 801990e:	e5f7      	b.n	8019500 <tMBSawPulse_tick+0x9a0>
    p += sw - (int)sw;
 8019910:	eeb0 8a68 	vmov.f32	s16, s17
 8019914:	f7ff b95f 	b.w	8018bd6 <tMBSawPulse_tick+0x76>
				 if (k && p_at_reset < b)
 8019918:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801991c:	eddf ca06 	vldr	s25, [pc, #24]	; 8019938 <tMBSawPulse_tick+0xdd8>
 8019920:	e6fd      	b.n	801971e <tMBSawPulse_tick+0xbbe>
 8019922:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8019926:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801992a:	eeb0 8a68 	vmov.f32	s16, s17
 801992e:	f7ff ba38 	b.w	8018da2 <tMBSawPulse_tick+0x242>
 8019932:	bf00      	nop
 8019934:	00000000 	.word	0x00000000
 8019938:	00000001 	.word	0x00000001
 801993c:	42800000 	.word	0x42800000
 8019940:	bf800000 	.word	0xbf800000

08019944 <tMBSawPulse_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tMBSawPulse_setFreq(tMBSawPulse* const osc, float f)
#else
void tMBSawPulse_setFreq(tMBSawPulse* const osc, float f)
#endif
{
    _tMBSawPulse* c = *osc;
 8019944:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 8019946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if ((f > 6000.0f) || (f < -6000.0f))
 801994a:	eddf 6a14 	vldr	s13, [pc, #80]	; 801999c <tMBSawPulse_setFreq+0x58>
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801994e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    if ((f > 6000.0f) || (f < -6000.0f))
 8019952:	eeb4 0ae6 	vcmpe.f32	s0, s13
    c->freq = f;
 8019956:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801995a:	ee60 7a27 	vmul.f32	s15, s0, s15
    if ((f > 6000.0f) || (f < -6000.0f))
 801995e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->_inv_w = 1.0f / c->_w;
 8019962:	ee87 6a27 	vdiv.f32	s12, s14, s15
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8019966:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 801996a:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
 801996e:	dc0c      	bgt.n	801998a <tMBSawPulse_setFreq+0x46>
 8019970:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80199a0 <tMBSawPulse_setFreq+0x5c>
 8019974:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801997c:	d405      	bmi.n	801998a <tMBSawPulse_setFreq+0x46>
    	c->active = 0;
    	c->gain = 0.0f;
    }
    else
    {
    	c->active = 1;
 801997e:	2201      	movs	r2, #1
 8019980:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
 8019984:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    	c->gain = 1.0f;
    }
}
 8019988:	4770      	bx	lr
    	c->gain = 0.0f;
 801998a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80199a4 <tMBSawPulse_setFreq+0x60>
    	c->active = 0;
 801998e:	2200      	movs	r2, #0
 8019990:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
 8019994:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 8019998:	4770      	bx	lr
 801999a:	bf00      	nop
 801999c:	45bb8000 	.word	0x45bb8000
 80199a0:	c5bb8000 	.word	0xc5bb8000
 80199a4:	00000000 	.word	0x00000000

080199a8 <tMBSawPulse_sync>:
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tMBSawPulse_sync(tMBSawPulse* const osc, float value)
#else
float tMBSawPulse_sync(tMBSawPulse* const osc, float value)
#endif
{
    _tMBSawPulse* c = *osc;
 80199a8:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 80199aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 80199ae:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
 80199b2:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
 80199b6:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 80199ba:	eef1 7a67 	vneg.f32	s15, s15
 80199be:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 80199c2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80199c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199ca:	eef4 6ac7 	vcmpe.f32	s13, s14
 80199ce:	bfcc      	ite	gt
 80199d0:	2201      	movgt	r2, #1
 80199d2:	2200      	movle	r2, #0
 80199d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199d8:	f002 0201 	and.w	r2, r2, #1
 80199dc:	bf88      	it	hi
 80199de:	2200      	movhi	r2, #0
 80199e0:	b122      	cbz	r2, 80199ec <tMBSawPulse_sync+0x44>
 80199e2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80199e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199ea:	da04      	bge.n	80199f6 <tMBSawPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 80199ec:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8019a04 <tMBSawPulse_sync+0x5c>
 80199f0:	ed83 7a04 	vstr	s14, [r3, #16]

    return value;
}
 80199f4:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 80199f6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80199fa:	ee27 7a06 	vmul.f32	s14, s14, s12
 80199fe:	ed83 7a04 	vstr	s14, [r3, #16]
}
 8019a02:	4770      	bx	lr
 8019a04:	00000000 	.word	0x00000000

08019a08 <tMBSawPulse_setShape>:
    c->_p = phase;
}

void tMBSawPulse_setShape(tMBSawPulse* const osc, float shape)
{
    _tMBSawPulse* c = *osc;
 8019a08:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 8019a0a:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 8019a0e:	4770      	bx	lr

08019a10 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
 8019a10:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8019a12:	698c      	ldr	r4, [r1, #24]
{
 8019a14:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8019a16:	201c      	movs	r0, #28
 8019a18:	4621      	mov	r1, r4
 8019a1a:	f7fb fcd5 	bl	80153c8 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
 8019a1e:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8019a20:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8019a22:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8019a24:	6863      	ldr	r3, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019a26:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8019a3c <tIntPhasor_init+0x2c>
    c->phase    =  0;
 8019a2a:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019a2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8019a30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019a34:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8019a38:	bd38      	pop	{r3, r4, r5, pc}
 8019a3a:	bf00      	nop
 8019a3c:	4f800000 	.word	0x4f800000

08019a40 <tIntPhasor_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 8019a40:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
 8019a42:	eddf 7a06 	vldr	s15, [pc, #24]	; 8019a5c <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
 8019a46:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 8019a4a:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
 8019a4c:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
 8019a50:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8019a52:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
 8019a56:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019a5a:	4770      	bx	lr
 8019a5c:	2f80000d 	.word	0x2f80000d

08019a60 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, float freq)
{
    _tIntPhasor* c = *cy;
 8019a60:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019a62:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8019a66:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019a6a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019a6e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8019a72:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8019a76:	4770      	bx	lr

08019a78 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, float phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
 8019a78:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8019a7c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8019a98 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
 8019a80:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8019a82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a86:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8019a8a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019a8e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8019a92:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8019a96:	4770      	bx	lr
 8019a98:	4f800000 	.word	0x4f800000

08019a9c <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
 8019a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a9e:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8019aa2:	698f      	ldr	r7, [r1, #24]
{
 8019aa4:	4606      	mov	r6, r0
 8019aa6:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8019aa8:	2010      	movs	r0, #16
 8019aaa:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019aac:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8019b34 <tSquareLFO_init+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8019ab0:	f7fb fc8a 	bl	80153c8 <mpool_alloc>
 8019ab4:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8019ab6:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8019ab8:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8019aba:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8019abc:	201c      	movs	r0, #28
 8019abe:	4639      	mov	r1, r7
 8019ac0:	f7fb fc82 	bl	80153c8 <mpool_alloc>
 8019ac4:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8019ac6:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8019ac8:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
 8019aca:	2700      	movs	r7, #0
 8019acc:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019ace:	edd3 7a01 	vldr	s15, [r3, #4]
 8019ad2:	ee67 7a88 	vmul.f32	s15, s15, s16
 8019ad6:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8019ada:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 8019adc:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8019ade:	4629      	mov	r1, r5
 8019ae0:	f7fb fc72 	bl	80153c8 <mpool_alloc>
 8019ae4:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8019ae6:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, float pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
 8019ae8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 8019aec:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 8019aee:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019af0:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019af4:	eddf 6a10 	vldr	s13, [pc, #64]	; 8019b38 <tSquareLFO_init+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019af8:	ee27 7a08 	vmul.f32	s14, s14, s16
 8019afc:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 8019b00:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019b02:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8019b04:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019b08:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8019b0c:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019b0e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8019b12:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 8019b16:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8019b1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019b1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8019b22:	ee67 7a88 	vmul.f32	s15, s15, s16
 8019b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019b2a:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8019b2e:	ecbd 8b02 	vpop	{d8}
 8019b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b34:	4f800000 	.word	0x4f800000
 8019b38:	2f80000d 	.word	0x2f80000d

08019b3c <tSquareLFO_initToPool>:
{
 8019b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b3e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8019b42:	680f      	ldr	r7, [r1, #0]
{
 8019b44:	4606      	mov	r6, r0
 8019b46:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8019b48:	2010      	movs	r0, #16
 8019b4a:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019b4c:	ed9f 8a21 	vldr	s16, [pc, #132]	; 8019bd4 <tSquareLFO_initToPool+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8019b50:	f7fb fc3a 	bl	80153c8 <mpool_alloc>
 8019b54:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 8019b56:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8019b58:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8019b5a:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8019b5c:	201c      	movs	r0, #28
 8019b5e:	4639      	mov	r1, r7
 8019b60:	f7fb fc32 	bl	80153c8 <mpool_alloc>
 8019b64:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8019b66:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8019b68:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
 8019b6a:	2700      	movs	r7, #0
 8019b6c:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019b6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8019b72:	ee67 7a88 	vmul.f32	s15, s15, s16
 8019b76:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8019b7a:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 8019b7c:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8019b7e:	4629      	mov	r1, r5
 8019b80:	f7fb fc22 	bl	80153c8 <mpool_alloc>
 8019b84:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8019b86:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
 8019b88:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 8019b8c:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 8019b8e:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019b90:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019b94:	eddf 6a10 	vldr	s13, [pc, #64]	; 8019bd8 <tSquareLFO_initToPool+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019b98:	ee27 7a08 	vmul.f32	s14, s14, s16
 8019b9c:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 8019ba0:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019ba2:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8019ba4:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019ba8:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8019bac:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019bae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8019bb2:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 8019bb6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8019bba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019bbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8019bc2:	ee67 7a88 	vmul.f32	s15, s15, s16
 8019bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019bca:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8019bce:	ecbd 8b02 	vpop	{d8}
 8019bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bd4:	4f800000 	.word	0x4f800000
 8019bd8:	2f80000d 	.word	0x2f80000d

08019bdc <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
 8019bdc:	6802      	ldr	r2, [r0, #0]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8019bde:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8019be2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8019c20 <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
 8019be6:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
 8019be8:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8019bec:	4403      	add	r3, r0
 8019bee:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8019bf0:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 8019bf4:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 8019bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 8019bfa:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8019bfe:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
 8019c00:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
 8019c04:	604b      	str	r3, [r1, #4]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8019c06:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8019c0a:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8019c0e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8019c12:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019c16:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 8019c1a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019c1e:	4770      	bx	lr
 8019c20:	2f80000d 	.word	0x2f80000d

08019c24 <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
 8019c24:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
 8019c26:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019c28:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8019c2c:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019c30:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019c38:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8019c3c:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019c3e:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8019c42:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019c46:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019c4a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8019c4e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8019c52:	4770      	bx	lr

08019c54 <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
 8019c54:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019c56:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8019c8c <tSquareLFO_setPulseWidth+0x38>
 8019c5a:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8019c5c:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019c60:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
 8019c64:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8019c90 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 8019c6c:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019c6e:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
 8019c72:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 8019c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c7a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8019c7e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019c82:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8019c86:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8019c8a:	4770      	bx	lr
 8019c8c:	2f80000d 	.word	0x2f80000d
 8019c90:	4f800000 	.word	0x4f800000

08019c94 <tSquareLFO_setPhase>:
    int i = phase;
 8019c94:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
 8019c98:	eddf 6a13 	vldr	s13, [pc, #76]	; 8019ce8 <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, float phase)
{
    _tSquareLFO *c = *cy;
 8019c9c:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019c9e:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8019cec <tSquareLFO_setPhase+0x58>
    phase -= i;
 8019ca2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tIntPhasor* c = *cy;
 8019ca6:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 8019ca8:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
 8019cac:	ee20 0a26 	vmul.f32	s0, s0, s13
 8019cb0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8019cb4:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019cb8:	689a      	ldr	r2, [r3, #8]
 8019cba:	edd3 7a01 	vldr	s15, [r3, #4]
 8019cbe:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8019cc2:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019cc4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8019cc8:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8019ccc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8019cd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019cd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8019cd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019cdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019ce0:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8019ce4:	4770      	bx	lr
 8019ce6:	bf00      	nop
 8019ce8:	4f800000 	.word	0x4f800000
 8019cec:	2f80000d 	.word	0x2f80000d

08019cf0 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
 8019cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8019cf2:	460c      	mov	r4, r1
{
 8019cf4:	4606      	mov	r6, r0
 8019cf6:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8019cf8:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 8019cfa:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8019cfe:	4639      	mov	r1, r7
 8019d00:	f7fb fb62 	bl	80153c8 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
 8019d04:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8019d06:	6030      	str	r0, [r6, #0]
 8019d08:	4604      	mov	r4, r0
    c->mempool = m;
 8019d0a:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 8019d0e:	f7ff ff15 	bl	8019b3c <tSquareLFO_initToPool>
    _tMempool* m = *mp;
 8019d12:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8019d14:	201c      	movs	r0, #28
 8019d16:	4629      	mov	r1, r5
 8019d18:	f7fb fb56 	bl	80153c8 <mpool_alloc>
    c->phase    =  0;
 8019d1c:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8019d1e:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8019d20:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8019d22:	686b      	ldr	r3, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019d24:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8019d38 <tSawSquareLFO_init+0x48>
    c->phase    =  0;
 8019d28:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019d2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8019d2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019d32:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8019d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019d38:	4f800000 	.word	0x4f800000

08019d3c <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
float   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
 8019d3c:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
 8019d3e:	6802      	ldr	r2, [r0, #0]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8019d40:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8019d44:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8019dbc <tSawSquareLFO_tick+0x80>
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8019d48:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
 8019d4c:	6891      	ldr	r1, [r2, #8]
    float b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
 8019d4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
 8019d52:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8019d56:	4403      	add	r3, r0
 8019d58:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8019d5a:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
 8019d5e:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 8019d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 8019d64:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
 8019d66:	6843      	ldr	r3, [r0, #4]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8019d68:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
 8019d6c:	6884      	ldr	r4, [r0, #8]
 8019d6e:	4423      	add	r3, r4
 8019d70:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
 8019d72:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 8019d76:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
 8019d78:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 8019d7c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8019d80:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
 8019d82:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
 8019d86:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 8019d88:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8019d8c:	eef8 4a66 	vcvt.f32.u32	s9, s13
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8019d90:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 8019d94:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 8019d98:	f85d 4b04 	ldr.w	r4, [sp], #4
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8019d9c:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8019da0:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
 8019da4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019da8:	ee37 7a07 	vadd.f32	s14, s14, s14
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8019dac:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
 8019db0:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 8019db4:	eea6 0a07 	vfma.f32	s0, s12, s14
 8019db8:	4770      	bx	lr
 8019dba:	bf00      	nop
 8019dbc:	2f80000d 	.word	0x2f80000d

08019dc0 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, float freq)
{
    _tSawSquareLFO* c = *cy;
 8019dc0:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
 8019dc2:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
 8019dc4:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019dc6:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8019dca:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019dce:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019dd6:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8019dda:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019ddc:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8019de0:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019de4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019de8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019dec:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8019df0:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019df2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8019df6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019dfa:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019dfe:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8019e02:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
 8019e06:	4770      	bx	lr

08019e08 <tSawSquareLFO_setPhase>:
    int i = phase;
 8019e08:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
 8019e0c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8019e64 <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, float phase)
{
    _tSawSquareLFO* c = *cy;
 8019e10:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019e12:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8019e68 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
 8019e16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tSquareLFO *c = *cy;
 8019e1a:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
 8019e1c:	6890      	ldr	r0, [r2, #8]
    phase -= i;
 8019e1e:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
 8019e22:	ee20 0a26 	vmul.f32	s0, s0, s13
 8019e26:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8019e2a:	edc0 7a01 	vstr	s15, [r0, #4]
 8019e2e:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019e32:	6890      	ldr	r0, [r2, #8]
 8019e34:	edd2 7a01 	vldr	s15, [r2, #4]
 8019e38:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
 8019e3c:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8019e3e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8019e42:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8019e46:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8019e4a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8019e52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8019e5a:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
 8019e5e:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
 8019e60:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
 8019e62:	4770      	bx	lr
 8019e64:	4f800000 	.word	0x4f800000
 8019e68:	2f80000d 	.word	0x2f80000d

08019e6c <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, float shape)
{
    _tSawSquareLFO* c = *cy;
 8019e6c:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
 8019e6e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8019e72:	4770      	bx	lr

08019e74 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
 8019e74:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8019e76:	698d      	ldr	r5, [r1, #24]
{
 8019e78:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8019e7a:	2018      	movs	r0, #24
 8019e7c:	4629      	mov	r1, r5
 8019e7e:	f7fb faa3 	bl	80153c8 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 8019e82:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8019e84:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 8019e86:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8019e88:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8019e8a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8019ec0 <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, float freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
 8019e8e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8019ec4 <tTriLFO_init+0x50>
    c->phase    =  0;
 8019e92:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 8019e96:	edd2 7a01 	vldr	s15, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8019e9a:	ee27 7a87 	vmul.f32	s14, s15, s14
    c->invSampleRate = leaf->invSampleRate;
 8019e9e:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8019ea2:	ed80 7a05 	vstr	s14, [r0, #20]
    _tTriLFO* c = *cy;
 8019ea6:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019ea8:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8019eac:	edc3 6a03 	vstr	s13, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019eb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019eb8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8019ebc:	bd38      	pop	{r3, r4, r5, pc}
 8019ebe:	bf00      	nop
 8019ec0:	4f800000 	.word	0x4f800000
 8019ec4:	435c0000 	.word	0x435c0000

08019ec8 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
 8019ec8:	6803      	ldr	r3, [r0, #0]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 8019eca:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019ece:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8019ef8 <tTriLFO_tick+0x30>
    c->phase += c->inc;
 8019ed2:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 8019ed6:	440a      	add	r2, r1
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8019ed8:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
    c->phase += c->inc;
 8019edc:	605a      	str	r2, [r3, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 8019ede:	eb01 73e1 	add.w	r3, r1, r1, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 8019ee2:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 8019ee6:	ee07 3a90 	vmov	s15, r3
 8019eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019eee:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 8019ef2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019ef6:	4770      	bx	lr
 8019ef8:	2ffffff6 	.word	0x2ffffff6

08019efc <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
 8019efc:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019efe:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8019f02:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019f06:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019f0a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019f0e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8019f12:	4770      	bx	lr

08019f14 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, float phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
 8019f14:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
 8019f18:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8019f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019f1e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 8019f22:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 8019f26:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8019f2a:	4770      	bx	lr

08019f2c <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
 8019f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f2e:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8019f32:	698f      	ldr	r7, [r1, #24]
{
 8019f34:	4606      	mov	r6, r0
 8019f36:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8019f38:	2010      	movs	r0, #16
 8019f3a:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8019f3c:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 8019fb8 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8019f40:	f7fb fa42 	bl	80153c8 <mpool_alloc>
 8019f44:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8019f46:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8019f48:	6034      	str	r4, [r6, #0]
    c->mempool = m;
 8019f4a:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
 8019f4c:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8019f4e:	4631      	mov	r1, r6
 8019f50:	f7fb fa3a 	bl	80153c8 <mpool_alloc>
 8019f54:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8019f56:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8019f58:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
 8019f5a:	2600      	movs	r6, #0
    c->freq  = freq;
 8019f5c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8019fbc <tSineTriLFO_init+0x90>
    c->phase    =  0;
 8019f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 8019f64:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8019f68:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
 8019f6c:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8019f70:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8019f74:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
 8019f76:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019f78:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8019f7c:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8019f80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019f84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019f88:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
 8019f8c:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8019f8e:	4629      	mov	r1, r5
 8019f90:	f7fb fa1a 	bl	80153c8 <mpool_alloc>
 8019f94:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8019f96:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 8019f98:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
 8019f9c:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 8019f9e:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019fa2:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 8019fa6:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8019fa8:	ee67 7a88 	vmul.f32	s15, s15, s16
 8019fac:	edc0 7a04 	vstr	s15, [r0, #16]
}
 8019fb0:	ecbd 8b02 	vpop	{d8}
 8019fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019fb6:	bf00      	nop
 8019fb8:	4f800000 	.word	0x4f800000
 8019fbc:	435c0000 	.word	0x435c0000

08019fc0 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
float   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
 8019fc0:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
 8019fc2:	6804      	ldr	r4, [r0, #0]
    float a = tCycle_tick(&c->sine);
    float b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
 8019fc4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
 8019fc8:	4a20      	ldr	r2, [pc, #128]	; (801a04c <tSineTriLFO_tick+0x8c>)
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 8019fca:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
 8019fce:	68e1      	ldr	r1, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8019fd0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801a050 <tSineTriLFO_tick+0x90>
    idx = (idx + 1) & c->mask;
 8019fd4:	694e      	ldr	r6, [r1, #20]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 8019fd6:	eddf 4a1f 	vldr	s9, [pc, #124]	; 801a054 <tSineTriLFO_tick+0x94>
    c->phase += c->inc;
 8019fda:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8019fde:	4403      	add	r3, r0
 8019fe0:	604b      	str	r3, [r1, #4]
    idx = c->phase >> 21; //11 bit table 
 8019fe2:	0d58      	lsrs	r0, r3, #21
    _tTriLFO* c = *cy;
 8019fe4:	68a5      	ldr	r5, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8019fe6:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8019fea:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
 8019fee:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 8019ff2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
 8019ff6:	440b      	add	r3, r1
    idx = (idx + 1) & c->mask;
 8019ff8:	1c41      	adds	r1, r0, #1
    samp0 = __leaf_table_sinewave[idx];
 8019ffa:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    c->phase += c->inc;
 8019ffe:	606b      	str	r3, [r5, #4]
    idx = (idx + 1) & c->mask;
 801a000:	4031      	ands	r1, r6
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 801a002:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801a006:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp1 = __leaf_table_sinewave[idx];
 801a00a:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
 801a00e:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 801a012:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    samp0 = __leaf_table_sinewave[idx];
 801a016:	edd0 6a00 	vldr	s13, [r0]
    return  (1.0f - c->shape) * a + c->shape * b;
 801a01a:	ee37 6a07 	vadd.f32	s12, s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801a01e:	ed91 5a00 	vldr	s10, [r1]
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 801a022:	ea82 73e3 	eor.w	r3, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
 801a026:	ee75 5ac7 	vsub.f32	s11, s11, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801a02a:	ee35 5a66 	vsub.f32	s10, s10, s13
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801a02e:	ee07 3a10 	vmov	s14, r3
 801a032:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801a036:	eee7 6a85 	vfma.f32	s13, s15, s10
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801a03a:	eea7 0a24 	vfma.f32	s0, s14, s9
}
 801a03e:	bc70      	pop	{r4, r5, r6}
    return  (1.0f - c->shape) * a + c->shape * b;
 801a040:	ee26 0a00 	vmul.f32	s0, s12, s0
}
 801a044:	eea5 0aa6 	vfma.f32	s0, s11, s13
 801a048:	4770      	bx	lr
 801a04a:	bf00      	nop
 801a04c:	08023f14 	.word	0x08023f14
 801a050:	35000004 	.word	0x35000004
 801a054:	2ffffff6 	.word	0x2ffffff6

0801a058 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, float freq)
{
    _tSineTriLFO* c = *cy;
 801a058:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
 801a05a:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801a05c:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801a060:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801a064:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a06c:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
 801a070:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801a072:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 801a076:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801a07a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a07e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a082:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
 801a086:	4770      	bx	lr

0801a088 <tSineTriLFO_setPhase>:
    int i = phase;
 801a088:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
 801a08c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801a0b4 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, float phase)
{
    _tSineTriLFO* c = *cy;
 801a090:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801a092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
 801a096:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 801a098:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 801a09c:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a0a0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 801a0a4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
 801a0a8:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
 801a0ac:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
 801a0ae:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
 801a0b2:	4770      	bx	lr
 801a0b4:	4f800000 	.word	0x4f800000

0801a0b8 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, float shape)
 {
    _tSineTriLFO* c = *cy;
 801a0b8:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 801a0ba:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 801a0be:	4770      	bx	lr

0801a0c0 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 801a0c0:	4770      	bx	lr
 801a0c2:	bf00      	nop

0801a0c4 <LEAF_init>:
{
 801a0c4:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 801a0c6:	6200      	str	r0, [r0, #32]
{
 801a0c8:	4604      	mov	r4, r0
 801a0ca:	461d      	mov	r5, r3
 801a0cc:	ed2d 8b02 	vpush	{d8}
 801a0d0:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 801a0d4:	f7fb f962 	bl	801539c <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 801a0d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801a0dc:	eddf 7a0c 	vldr	s15, [pc, #48]	; 801a110 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 801a0e0:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 801a0e2:	4b0c      	ldr	r3, [pc, #48]	; (801a114 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 801a0e4:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 801a0e8:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 801a0ec:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 801a0ee:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 801a0f0:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 801a0f4:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 801a0f8:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801a0fc:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 801a100:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801a104:	edc4 7a03 	vstr	s15, [r4, #12]
}
 801a108:	ecbd 8b02 	vpop	{d8}
 801a10c:	bd38      	pop	{r3, r4, r5, pc}
 801a10e:	bf00      	nop
 801a110:	40c90fdb 	.word	0x40c90fdb
 801a114:	0801a0c1 	.word	0x0801a0c1

0801a118 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 801a118:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 801a11a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 801a11e:	2401      	movs	r4, #1
 801a120:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 801a122:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 801a126:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a128:	4718      	bx	r3
 801a12a:	bf00      	nop

0801a12c <arm_sin_f32>:
 801a12c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a1ac <arm_sin_f32+0x80>
 801a130:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a134:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a138:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a13c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a140:	d504      	bpl.n	801a14c <arm_sin_f32+0x20>
 801a142:	ee17 3a90 	vmov	r3, s15
 801a146:	3b01      	subs	r3, #1
 801a148:	ee07 3a90 	vmov	s15, r3
 801a14c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a150:	eddf 6a17 	vldr	s13, [pc, #92]	; 801a1b0 <arm_sin_f32+0x84>
 801a154:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a158:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a15c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801a160:	ee17 3a10 	vmov	r3, s14
 801a164:	b29b      	uxth	r3, r3
 801a166:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a16a:	d21a      	bcs.n	801a1a2 <arm_sin_f32+0x76>
 801a16c:	ee07 3a10 	vmov	s14, r3
 801a170:	1c59      	adds	r1, r3, #1
 801a172:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 801a176:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a17a:	4a0e      	ldr	r2, [pc, #56]	; (801a1b4 <arm_sin_f32+0x88>)
 801a17c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a180:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801a184:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801a188:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a18c:	edd3 6a00 	vldr	s13, [r3]
 801a190:	ed92 7a00 	vldr	s14, [r2]
 801a194:	ee20 0a26 	vmul.f32	s0, s0, s13
 801a198:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a19c:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a1a0:	4770      	bx	lr
 801a1a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a1a6:	2101      	movs	r1, #1
 801a1a8:	2300      	movs	r3, #0
 801a1aa:	e7e6      	b.n	801a17a <arm_sin_f32+0x4e>
 801a1ac:	3e22f983 	.word	0x3e22f983
 801a1b0:	44000000 	.word	0x44000000
 801a1b4:	080336a0 	.word	0x080336a0

0801a1b8 <__libc_init_array>:
 801a1b8:	b570      	push	{r4, r5, r6, lr}
 801a1ba:	4d0d      	ldr	r5, [pc, #52]	; (801a1f0 <__libc_init_array+0x38>)
 801a1bc:	4c0d      	ldr	r4, [pc, #52]	; (801a1f4 <__libc_init_array+0x3c>)
 801a1be:	1b64      	subs	r4, r4, r5
 801a1c0:	10a4      	asrs	r4, r4, #2
 801a1c2:	2600      	movs	r6, #0
 801a1c4:	42a6      	cmp	r6, r4
 801a1c6:	d109      	bne.n	801a1dc <__libc_init_array+0x24>
 801a1c8:	4d0b      	ldr	r5, [pc, #44]	; (801a1f8 <__libc_init_array+0x40>)
 801a1ca:	4c0c      	ldr	r4, [pc, #48]	; (801a1fc <__libc_init_array+0x44>)
 801a1cc:	f002 f90c 	bl	801c3e8 <_init>
 801a1d0:	1b64      	subs	r4, r4, r5
 801a1d2:	10a4      	asrs	r4, r4, #2
 801a1d4:	2600      	movs	r6, #0
 801a1d6:	42a6      	cmp	r6, r4
 801a1d8:	d105      	bne.n	801a1e6 <__libc_init_array+0x2e>
 801a1da:	bd70      	pop	{r4, r5, r6, pc}
 801a1dc:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1e0:	4798      	blx	r3
 801a1e2:	3601      	adds	r6, #1
 801a1e4:	e7ee      	b.n	801a1c4 <__libc_init_array+0xc>
 801a1e6:	f855 3b04 	ldr.w	r3, [r5], #4
 801a1ea:	4798      	blx	r3
 801a1ec:	3601      	adds	r6, #1
 801a1ee:	e7f2      	b.n	801a1d6 <__libc_init_array+0x1e>
 801a1f0:	08034930 	.word	0x08034930
 801a1f4:	08034930 	.word	0x08034930
 801a1f8:	08034930 	.word	0x08034930
 801a1fc:	08034934 	.word	0x08034934

0801a200 <__itoa>:
 801a200:	1e93      	subs	r3, r2, #2
 801a202:	2b22      	cmp	r3, #34	; 0x22
 801a204:	b510      	push	{r4, lr}
 801a206:	460c      	mov	r4, r1
 801a208:	d904      	bls.n	801a214 <__itoa+0x14>
 801a20a:	2300      	movs	r3, #0
 801a20c:	700b      	strb	r3, [r1, #0]
 801a20e:	461c      	mov	r4, r3
 801a210:	4620      	mov	r0, r4
 801a212:	bd10      	pop	{r4, pc}
 801a214:	2a0a      	cmp	r2, #10
 801a216:	d109      	bne.n	801a22c <__itoa+0x2c>
 801a218:	2800      	cmp	r0, #0
 801a21a:	da07      	bge.n	801a22c <__itoa+0x2c>
 801a21c:	232d      	movs	r3, #45	; 0x2d
 801a21e:	700b      	strb	r3, [r1, #0]
 801a220:	4240      	negs	r0, r0
 801a222:	2101      	movs	r1, #1
 801a224:	4421      	add	r1, r4
 801a226:	f000 f841 	bl	801a2ac <__utoa>
 801a22a:	e7f1      	b.n	801a210 <__itoa+0x10>
 801a22c:	2100      	movs	r1, #0
 801a22e:	e7f9      	b.n	801a224 <__itoa+0x24>

0801a230 <itoa>:
 801a230:	f7ff bfe6 	b.w	801a200 <__itoa>

0801a234 <memcpy>:
 801a234:	440a      	add	r2, r1
 801a236:	4291      	cmp	r1, r2
 801a238:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a23c:	d100      	bne.n	801a240 <memcpy+0xc>
 801a23e:	4770      	bx	lr
 801a240:	b510      	push	{r4, lr}
 801a242:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a246:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a24a:	4291      	cmp	r1, r2
 801a24c:	d1f9      	bne.n	801a242 <memcpy+0xe>
 801a24e:	bd10      	pop	{r4, pc}

0801a250 <memset>:
 801a250:	4402      	add	r2, r0
 801a252:	4603      	mov	r3, r0
 801a254:	4293      	cmp	r3, r2
 801a256:	d100      	bne.n	801a25a <memset+0xa>
 801a258:	4770      	bx	lr
 801a25a:	f803 1b01 	strb.w	r1, [r3], #1
 801a25e:	e7f9      	b.n	801a254 <memset+0x4>

0801a260 <frexpf>:
 801a260:	ee10 3a10 	vmov	r3, s0
 801a264:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a268:	2100      	movs	r1, #0
 801a26a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a26e:	6001      	str	r1, [r0, #0]
 801a270:	da19      	bge.n	801a2a6 <frexpf+0x46>
 801a272:	b1c2      	cbz	r2, 801a2a6 <frexpf+0x46>
 801a274:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801a278:	d10a      	bne.n	801a290 <frexpf+0x30>
 801a27a:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801a2a8 <frexpf+0x48>
 801a27e:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a282:	f06f 0118 	mvn.w	r1, #24
 801a286:	ee17 3a90 	vmov	r3, s15
 801a28a:	6001      	str	r1, [r0, #0]
 801a28c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a290:	6801      	ldr	r1, [r0, #0]
 801a292:	15d2      	asrs	r2, r2, #23
 801a294:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a298:	3a7e      	subs	r2, #126	; 0x7e
 801a29a:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 801a29e:	440a      	add	r2, r1
 801a2a0:	ee00 3a10 	vmov	s0, r3
 801a2a4:	6002      	str	r2, [r0, #0]
 801a2a6:	4770      	bx	lr
 801a2a8:	4c000000 	.word	0x4c000000

0801a2ac <__utoa>:
 801a2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2ae:	4c1f      	ldr	r4, [pc, #124]	; (801a32c <__utoa+0x80>)
 801a2b0:	b08b      	sub	sp, #44	; 0x2c
 801a2b2:	4605      	mov	r5, r0
 801a2b4:	460b      	mov	r3, r1
 801a2b6:	466e      	mov	r6, sp
 801a2b8:	f104 0c20 	add.w	ip, r4, #32
 801a2bc:	6820      	ldr	r0, [r4, #0]
 801a2be:	6861      	ldr	r1, [r4, #4]
 801a2c0:	4637      	mov	r7, r6
 801a2c2:	c703      	stmia	r7!, {r0, r1}
 801a2c4:	3408      	adds	r4, #8
 801a2c6:	4564      	cmp	r4, ip
 801a2c8:	463e      	mov	r6, r7
 801a2ca:	d1f7      	bne.n	801a2bc <__utoa+0x10>
 801a2cc:	7921      	ldrb	r1, [r4, #4]
 801a2ce:	7139      	strb	r1, [r7, #4]
 801a2d0:	1e91      	subs	r1, r2, #2
 801a2d2:	6820      	ldr	r0, [r4, #0]
 801a2d4:	6038      	str	r0, [r7, #0]
 801a2d6:	2922      	cmp	r1, #34	; 0x22
 801a2d8:	f04f 0100 	mov.w	r1, #0
 801a2dc:	d904      	bls.n	801a2e8 <__utoa+0x3c>
 801a2de:	7019      	strb	r1, [r3, #0]
 801a2e0:	460b      	mov	r3, r1
 801a2e2:	4618      	mov	r0, r3
 801a2e4:	b00b      	add	sp, #44	; 0x2c
 801a2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2e8:	1e58      	subs	r0, r3, #1
 801a2ea:	4684      	mov	ip, r0
 801a2ec:	fbb5 f7f2 	udiv	r7, r5, r2
 801a2f0:	fb02 5617 	mls	r6, r2, r7, r5
 801a2f4:	3628      	adds	r6, #40	; 0x28
 801a2f6:	446e      	add	r6, sp
 801a2f8:	460c      	mov	r4, r1
 801a2fa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801a2fe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801a302:	462e      	mov	r6, r5
 801a304:	42b2      	cmp	r2, r6
 801a306:	f101 0101 	add.w	r1, r1, #1
 801a30a:	463d      	mov	r5, r7
 801a30c:	d9ee      	bls.n	801a2ec <__utoa+0x40>
 801a30e:	2200      	movs	r2, #0
 801a310:	545a      	strb	r2, [r3, r1]
 801a312:	1919      	adds	r1, r3, r4
 801a314:	1aa5      	subs	r5, r4, r2
 801a316:	42aa      	cmp	r2, r5
 801a318:	dae3      	bge.n	801a2e2 <__utoa+0x36>
 801a31a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801a31e:	780e      	ldrb	r6, [r1, #0]
 801a320:	7006      	strb	r6, [r0, #0]
 801a322:	3201      	adds	r2, #1
 801a324:	f801 5901 	strb.w	r5, [r1], #-1
 801a328:	e7f4      	b.n	801a314 <__utoa+0x68>
 801a32a:	bf00      	nop
 801a32c:	08033ea4 	.word	0x08033ea4

0801a330 <with_errnof>:
 801a330:	b513      	push	{r0, r1, r4, lr}
 801a332:	4604      	mov	r4, r0
 801a334:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a338:	f002 f850 	bl	801c3dc <__errno>
 801a33c:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a340:	6004      	str	r4, [r0, #0]
 801a342:	b002      	add	sp, #8
 801a344:	bd10      	pop	{r4, pc}

0801a346 <xflowf>:
 801a346:	b130      	cbz	r0, 801a356 <xflowf+0x10>
 801a348:	eef1 7a40 	vneg.f32	s15, s0
 801a34c:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a350:	2022      	movs	r0, #34	; 0x22
 801a352:	f7ff bfed 	b.w	801a330 <with_errnof>
 801a356:	eef0 7a40 	vmov.f32	s15, s0
 801a35a:	e7f7      	b.n	801a34c <xflowf+0x6>

0801a35c <__math_uflowf>:
 801a35c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a364 <__math_uflowf+0x8>
 801a360:	f7ff bff1 	b.w	801a346 <xflowf>
 801a364:	10000000 	.word	0x10000000

0801a368 <__math_may_uflowf>:
 801a368:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a370 <__math_may_uflowf+0x8>
 801a36c:	f7ff bfeb 	b.w	801a346 <xflowf>
 801a370:	1a200000 	.word	0x1a200000

0801a374 <__math_oflowf>:
 801a374:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a37c <__math_oflowf+0x8>
 801a378:	f7ff bfe5 	b.w	801a346 <xflowf>
 801a37c:	70000000 	.word	0x70000000

0801a380 <__math_divzerof>:
 801a380:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a384:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801a388:	2800      	cmp	r0, #0
 801a38a:	fe40 7a27 	vseleq.f32	s15, s0, s15
 801a38e:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801a39c <__math_divzerof+0x1c>
 801a392:	2022      	movs	r0, #34	; 0x22
 801a394:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801a398:	f7ff bfca 	b.w	801a330 <with_errnof>
 801a39c:	00000000 	.word	0x00000000

0801a3a0 <__math_invalidf>:
 801a3a0:	eef0 7a40 	vmov.f32	s15, s0
 801a3a4:	ee30 7a40 	vsub.f32	s14, s0, s0
 801a3a8:	eef4 7a67 	vcmp.f32	s15, s15
 801a3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3b0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801a3b4:	d602      	bvs.n	801a3bc <__math_invalidf+0x1c>
 801a3b6:	2021      	movs	r0, #33	; 0x21
 801a3b8:	f7ff bfba 	b.w	801a330 <with_errnof>
 801a3bc:	4770      	bx	lr
	...

0801a3c0 <tan>:
 801a3c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a3c2:	eeb0 7b40 	vmov.f64	d7, d0
 801a3c6:	ee17 3a90 	vmov	r3, s15
 801a3ca:	4a15      	ldr	r2, [pc, #84]	; (801a420 <tan+0x60>)
 801a3cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a3d0:	4293      	cmp	r3, r2
 801a3d2:	dc07      	bgt.n	801a3e4 <tan+0x24>
 801a3d4:	ed9f 1b10 	vldr	d1, [pc, #64]	; 801a418 <tan+0x58>
 801a3d8:	2001      	movs	r0, #1
 801a3da:	b005      	add	sp, #20
 801a3dc:	f85d eb04 	ldr.w	lr, [sp], #4
 801a3e0:	f001 b8ba 	b.w	801b558 <__kernel_tan>
 801a3e4:	4a0f      	ldr	r2, [pc, #60]	; (801a424 <tan+0x64>)
 801a3e6:	4293      	cmp	r3, r2
 801a3e8:	dd04      	ble.n	801a3f4 <tan+0x34>
 801a3ea:	ee30 0b40 	vsub.f64	d0, d0, d0
 801a3ee:	b005      	add	sp, #20
 801a3f0:	f85d fb04 	ldr.w	pc, [sp], #4
 801a3f4:	4668      	mov	r0, sp
 801a3f6:	f000 fb97 	bl	801ab28 <__ieee754_rem_pio2>
 801a3fa:	0040      	lsls	r0, r0, #1
 801a3fc:	f000 0002 	and.w	r0, r0, #2
 801a400:	ed9d 1b02 	vldr	d1, [sp, #8]
 801a404:	ed9d 0b00 	vldr	d0, [sp]
 801a408:	f1c0 0001 	rsb	r0, r0, #1
 801a40c:	f001 f8a4 	bl	801b558 <__kernel_tan>
 801a410:	e7ed      	b.n	801a3ee <tan+0x2e>
 801a412:	bf00      	nop
 801a414:	f3af 8000 	nop.w
	...
 801a420:	3fe921fb 	.word	0x3fe921fb
 801a424:	7fefffff 	.word	0x7fefffff

0801a428 <expf>:
 801a428:	ee10 2a10 	vmov	r2, s0
 801a42c:	f240 412a 	movw	r1, #1066	; 0x42a
 801a430:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801a434:	428b      	cmp	r3, r1
 801a436:	b430      	push	{r4, r5}
 801a438:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801a43c:	d92a      	bls.n	801a494 <expf+0x6c>
 801a43e:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801a442:	d058      	beq.n	801a4f6 <expf+0xce>
 801a444:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801a448:	d303      	bcc.n	801a452 <expf+0x2a>
 801a44a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a44e:	bc30      	pop	{r4, r5}
 801a450:	4770      	bx	lr
 801a452:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801a4fc <expf+0xd4>
 801a456:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a45e:	dd03      	ble.n	801a468 <expf+0x40>
 801a460:	bc30      	pop	{r4, r5}
 801a462:	2000      	movs	r0, #0
 801a464:	f7ff bf86 	b.w	801a374 <__math_oflowf>
 801a468:	eddf 7a25 	vldr	s15, [pc, #148]	; 801a500 <expf+0xd8>
 801a46c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a474:	d503      	bpl.n	801a47e <expf+0x56>
 801a476:	bc30      	pop	{r4, r5}
 801a478:	2000      	movs	r0, #0
 801a47a:	f7ff bf6f 	b.w	801a35c <__math_uflowf>
 801a47e:	eddf 7a21 	vldr	s15, [pc, #132]	; 801a504 <expf+0xdc>
 801a482:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801a486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a48a:	d503      	bpl.n	801a494 <expf+0x6c>
 801a48c:	bc30      	pop	{r4, r5}
 801a48e:	2000      	movs	r0, #0
 801a490:	f7ff bf6a 	b.w	801a368 <__math_may_uflowf>
 801a494:	4b1c      	ldr	r3, [pc, #112]	; (801a508 <expf+0xe0>)
 801a496:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a49a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801a49e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801a4a2:	eeb0 7b44 	vmov.f64	d7, d4
 801a4a6:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a4aa:	ee17 0a10 	vmov	r0, s14
 801a4ae:	ee37 7b44 	vsub.f64	d7, d7, d4
 801a4b2:	f000 021f 	and.w	r2, r0, #31
 801a4b6:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801a4ba:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801a4be:	ee27 4b07 	vmul.f64	d4, d7, d7
 801a4c2:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801a4c6:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801a4ca:	eea5 6b07 	vfma.f64	d6, d5, d7
 801a4ce:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801a4d2:	684d      	ldr	r5, [r1, #4]
 801a4d4:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801a4d8:	2100      	movs	r1, #0
 801a4da:	190a      	adds	r2, r1, r4
 801a4dc:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801a4e0:	eea5 0b07 	vfma.f64	d0, d5, d7
 801a4e4:	ec43 2b17 	vmov	d7, r2, r3
 801a4e8:	eea6 0b04 	vfma.f64	d0, d6, d4
 801a4ec:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a4f0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801a4f4:	e7ab      	b.n	801a44e <expf+0x26>
 801a4f6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801a50c <expf+0xe4>
 801a4fa:	e7a8      	b.n	801a44e <expf+0x26>
 801a4fc:	42b17217 	.word	0x42b17217
 801a500:	c2cff1b4 	.word	0xc2cff1b4
 801a504:	c2ce8ecf 	.word	0xc2ce8ecf
 801a508:	08033ed0 	.word	0x08033ed0
 801a50c:	00000000 	.word	0x00000000

0801a510 <fabsf>:
 801a510:	ee10 3a10 	vmov	r3, s0
 801a514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a518:	ee00 3a10 	vmov	s0, r3
 801a51c:	4770      	bx	lr
	...

0801a520 <logf>:
 801a520:	ee10 3a10 	vmov	r3, s0
 801a524:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801a528:	b410      	push	{r4}
 801a52a:	d055      	beq.n	801a5d8 <logf+0xb8>
 801a52c:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 801a530:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 801a534:	d31a      	bcc.n	801a56c <logf+0x4c>
 801a536:	005a      	lsls	r2, r3, #1
 801a538:	d104      	bne.n	801a544 <logf+0x24>
 801a53a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a53e:	2001      	movs	r0, #1
 801a540:	f7ff bf1e 	b.w	801a380 <__math_divzerof>
 801a544:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a548:	d043      	beq.n	801a5d2 <logf+0xb2>
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	db02      	blt.n	801a554 <logf+0x34>
 801a54e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801a552:	d303      	bcc.n	801a55c <logf+0x3c>
 801a554:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a558:	f7ff bf22 	b.w	801a3a0 <__math_invalidf>
 801a55c:	eddf 7a20 	vldr	s15, [pc, #128]	; 801a5e0 <logf+0xc0>
 801a560:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a564:	ee10 3a10 	vmov	r3, s0
 801a568:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 801a56c:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 801a570:	491c      	ldr	r1, [pc, #112]	; (801a5e4 <logf+0xc4>)
 801a572:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 801a576:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801a57a:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 801a57e:	0dd4      	lsrs	r4, r2, #23
 801a580:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801a584:	05e4      	lsls	r4, r4, #23
 801a586:	ed90 6b00 	vldr	d6, [r0]
 801a58a:	1b1b      	subs	r3, r3, r4
 801a58c:	ee07 3a90 	vmov	s15, r3
 801a590:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 801a594:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801a598:	15d2      	asrs	r2, r2, #23
 801a59a:	eea6 0b07 	vfma.f64	d0, d6, d7
 801a59e:	ed90 6b02 	vldr	d6, [r0, #8]
 801a5a2:	ee20 4b00 	vmul.f64	d4, d0, d0
 801a5a6:	ee07 2a90 	vmov	s15, r2
 801a5aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a5ae:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a5b2:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 801a5b6:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 801a5ba:	eea5 7b00 	vfma.f64	d7, d5, d0
 801a5be:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801a5c2:	ee30 0b06 	vadd.f64	d0, d0, d6
 801a5c6:	eea5 7b04 	vfma.f64	d7, d5, d4
 801a5ca:	eea4 0b07 	vfma.f64	d0, d4, d7
 801a5ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801a5d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5d6:	4770      	bx	lr
 801a5d8:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801a5e8 <logf+0xc8>
 801a5dc:	e7f9      	b.n	801a5d2 <logf+0xb2>
 801a5de:	bf00      	nop
 801a5e0:	4b000000 	.word	0x4b000000
 801a5e4:	08034138 	.word	0x08034138
 801a5e8:	00000000 	.word	0x00000000

0801a5ec <log2f>:
 801a5ec:	ee10 2a10 	vmov	r2, s0
 801a5f0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801a5f4:	b410      	push	{r4}
 801a5f6:	d055      	beq.n	801a6a4 <log2f+0xb8>
 801a5f8:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 801a5fc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801a600:	d31a      	bcc.n	801a638 <log2f+0x4c>
 801a602:	0053      	lsls	r3, r2, #1
 801a604:	d104      	bne.n	801a610 <log2f+0x24>
 801a606:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a60a:	2001      	movs	r0, #1
 801a60c:	f7ff beb8 	b.w	801a380 <__math_divzerof>
 801a610:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801a614:	d043      	beq.n	801a69e <log2f+0xb2>
 801a616:	2a00      	cmp	r2, #0
 801a618:	db02      	blt.n	801a620 <log2f+0x34>
 801a61a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801a61e:	d303      	bcc.n	801a628 <log2f+0x3c>
 801a620:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a624:	f7ff bebc 	b.w	801a3a0 <__math_invalidf>
 801a628:	eddf 7a20 	vldr	s15, [pc, #128]	; 801a6ac <log2f+0xc0>
 801a62c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a630:	ee10 3a10 	vmov	r3, s0
 801a634:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 801a638:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 801a63c:	491c      	ldr	r1, [pc, #112]	; (801a6b0 <log2f+0xc4>)
 801a63e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801a642:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 801a646:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 801a64a:	0ddc      	lsrs	r4, r3, #23
 801a64c:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801a650:	05e4      	lsls	r4, r4, #23
 801a652:	ed90 5b00 	vldr	d5, [r0]
 801a656:	1b12      	subs	r2, r2, r4
 801a658:	ee07 2a90 	vmov	s15, r2
 801a65c:	15db      	asrs	r3, r3, #23
 801a65e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801a662:	eea5 6b07 	vfma.f64	d6, d5, d7
 801a666:	ed90 7b02 	vldr	d7, [r0, #8]
 801a66a:	ee26 4b06 	vmul.f64	d4, d6, d6
 801a66e:	ee00 3a10 	vmov	s0, r3
 801a672:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801a676:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 801a67a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801a67e:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 801a682:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a686:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 801a68a:	eea5 7b04 	vfma.f64	d7, d5, d4
 801a68e:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 801a692:	eea5 0b06 	vfma.f64	d0, d5, d6
 801a696:	eea4 0b07 	vfma.f64	d0, d4, d7
 801a69a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801a69e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a6a2:	4770      	bx	lr
 801a6a4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801a6b4 <log2f+0xc8>
 801a6a8:	e7f9      	b.n	801a69e <log2f+0xb2>
 801a6aa:	bf00      	nop
 801a6ac:	4b000000 	.word	0x4b000000
 801a6b0:	08034018 	.word	0x08034018
 801a6b4:	00000000 	.word	0x00000000

0801a6b8 <lrintf>:
 801a6b8:	ee10 3a10 	vmov	r3, s0
 801a6bc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a6c0:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 801a6c4:	281e      	cmp	r0, #30
 801a6c6:	b082      	sub	sp, #8
 801a6c8:	dc2e      	bgt.n	801a728 <lrintf+0x70>
 801a6ca:	1c41      	adds	r1, r0, #1
 801a6cc:	da02      	bge.n	801a6d4 <lrintf+0x1c>
 801a6ce:	2000      	movs	r0, #0
 801a6d0:	b002      	add	sp, #8
 801a6d2:	4770      	bx	lr
 801a6d4:	2816      	cmp	r0, #22
 801a6d6:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 801a6da:	dd09      	ble.n	801a6f0 <lrintf+0x38>
 801a6dc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801a6e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801a6e4:	3a96      	subs	r2, #150	; 0x96
 801a6e6:	4090      	lsls	r0, r2
 801a6e8:	2900      	cmp	r1, #0
 801a6ea:	d0f1      	beq.n	801a6d0 <lrintf+0x18>
 801a6ec:	4240      	negs	r0, r0
 801a6ee:	e7ef      	b.n	801a6d0 <lrintf+0x18>
 801a6f0:	4b10      	ldr	r3, [pc, #64]	; (801a734 <lrintf+0x7c>)
 801a6f2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a6f6:	ed93 7a00 	vldr	s14, [r3]
 801a6fa:	ee37 0a00 	vadd.f32	s0, s14, s0
 801a6fe:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a702:	eddd 7a01 	vldr	s15, [sp, #4]
 801a706:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a70a:	ee17 3a90 	vmov	r3, s15
 801a70e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801a712:	d0dc      	beq.n	801a6ce <lrintf+0x16>
 801a714:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801a718:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 801a71c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801a720:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801a724:	40d8      	lsrs	r0, r3
 801a726:	e7df      	b.n	801a6e8 <lrintf+0x30>
 801a728:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a72c:	ee17 0a90 	vmov	r0, s15
 801a730:	e7ce      	b.n	801a6d0 <lrintf+0x18>
 801a732:	bf00      	nop
 801a734:	08034258 	.word	0x08034258

0801a738 <checkint>:
 801a738:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801a73c:	2b7e      	cmp	r3, #126	; 0x7e
 801a73e:	dd10      	ble.n	801a762 <checkint+0x2a>
 801a740:	2b96      	cmp	r3, #150	; 0x96
 801a742:	dc0c      	bgt.n	801a75e <checkint+0x26>
 801a744:	2201      	movs	r2, #1
 801a746:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801a74a:	fa02 f303 	lsl.w	r3, r2, r3
 801a74e:	1e5a      	subs	r2, r3, #1
 801a750:	4202      	tst	r2, r0
 801a752:	d106      	bne.n	801a762 <checkint+0x2a>
 801a754:	4203      	tst	r3, r0
 801a756:	bf0c      	ite	eq
 801a758:	2002      	moveq	r0, #2
 801a75a:	2001      	movne	r0, #1
 801a75c:	4770      	bx	lr
 801a75e:	2002      	movs	r0, #2
 801a760:	4770      	bx	lr
 801a762:	2000      	movs	r0, #0
 801a764:	4770      	bx	lr
	...

0801a768 <powf>:
 801a768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a76a:	ee10 1a10 	vmov	r1, s0
 801a76e:	ee10 4a90 	vmov	r4, s1
 801a772:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801a776:	0062      	lsls	r2, r4, #1
 801a778:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801a77c:	eef0 7a40 	vmov.f32	s15, s0
 801a780:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 801a784:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 801a788:	d252      	bcs.n	801a830 <powf+0xc8>
 801a78a:	4298      	cmp	r0, r3
 801a78c:	d252      	bcs.n	801a834 <powf+0xcc>
 801a78e:	2000      	movs	r0, #0
 801a790:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 801a794:	4ca0      	ldr	r4, [pc, #640]	; (801aa18 <powf+0x2b0>)
 801a796:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 801a79a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801a79e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 801a7a2:	0dd2      	lsrs	r2, r2, #23
 801a7a4:	05d2      	lsls	r2, r2, #23
 801a7a6:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 801a7aa:	1a8b      	subs	r3, r1, r2
 801a7ac:	ed95 6b00 	vldr	d6, [r5]
 801a7b0:	ee07 3a90 	vmov	s15, r3
 801a7b4:	15d2      	asrs	r2, r2, #23
 801a7b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801a7ba:	eea6 5b07 	vfma.f64	d5, d6, d7
 801a7be:	ed95 6b02 	vldr	d6, [r5, #8]
 801a7c2:	ee25 2b05 	vmul.f64	d2, d5, d5
 801a7c6:	ee22 1b02 	vmul.f64	d1, d2, d2
 801a7ca:	ee07 2a90 	vmov	s15, r2
 801a7ce:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 801a7d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a7d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a7da:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 801a7de:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 801a7e2:	eea5 3b06 	vfma.f64	d3, d5, d6
 801a7e6:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 801a7ea:	eea5 6b04 	vfma.f64	d6, d5, d4
 801a7ee:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 801a7f2:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 801a7f6:	eea5 7b04 	vfma.f64	d7, d5, d4
 801a7fa:	eea2 7b06 	vfma.f64	d7, d2, d6
 801a7fe:	eea3 7b01 	vfma.f64	d7, d3, d1
 801a802:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a806:	ee10 3a90 	vmov	r3, s1
 801a80a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 801a80e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801a812:	429a      	cmp	r2, r3
 801a814:	f0c0 80b1 	bcc.w	801a97a <powf+0x212>
 801a818:	ed9f 7b77 	vldr	d7, [pc, #476]	; 801a9f8 <powf+0x290>
 801a81c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a824:	dd79      	ble.n	801a91a <powf+0x1b2>
 801a826:	b003      	add	sp, #12
 801a828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a82c:	f7ff bda2 	b.w	801a374 <__math_oflowf>
 801a830:	4298      	cmp	r0, r3
 801a832:	d32d      	bcc.n	801a890 <powf+0x128>
 801a834:	b952      	cbnz	r2, 801a84c <powf+0xe4>
 801a836:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 801a83a:	005b      	lsls	r3, r3, #1
 801a83c:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 801a840:	f240 80c9 	bls.w	801a9d6 <powf+0x26e>
 801a844:	ee37 0aa0 	vadd.f32	s0, s15, s1
 801a848:	b003      	add	sp, #12
 801a84a:	bd30      	pop	{r4, r5, pc}
 801a84c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 801a850:	d105      	bne.n	801a85e <powf+0xf6>
 801a852:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801a856:	0064      	lsls	r4, r4, #1
 801a858:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801a85c:	e7f0      	b.n	801a840 <powf+0xd8>
 801a85e:	004b      	lsls	r3, r1, #1
 801a860:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801a864:	d8ee      	bhi.n	801a844 <powf+0xdc>
 801a866:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801a86a:	d1eb      	bne.n	801a844 <powf+0xdc>
 801a86c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801a870:	f000 80b1 	beq.w	801a9d6 <powf+0x26e>
 801a874:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801a878:	ea6f 0404 	mvn.w	r4, r4
 801a87c:	bf34      	ite	cc
 801a87e:	2300      	movcc	r3, #0
 801a880:	2301      	movcs	r3, #1
 801a882:	0fe4      	lsrs	r4, r4, #31
 801a884:	42a3      	cmp	r3, r4
 801a886:	f040 80a9 	bne.w	801a9dc <powf+0x274>
 801a88a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 801a88e:	e7db      	b.n	801a848 <powf+0xe0>
 801a890:	004d      	lsls	r5, r1, #1
 801a892:	1e6a      	subs	r2, r5, #1
 801a894:	429a      	cmp	r2, r3
 801a896:	d31c      	bcc.n	801a8d2 <powf+0x16a>
 801a898:	2900      	cmp	r1, #0
 801a89a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801a89e:	da0f      	bge.n	801a8c0 <powf+0x158>
 801a8a0:	ee10 0a90 	vmov	r0, s1
 801a8a4:	f7ff ff48 	bl	801a738 <checkint>
 801a8a8:	2801      	cmp	r0, #1
 801a8aa:	d109      	bne.n	801a8c0 <powf+0x158>
 801a8ac:	eeb1 0a40 	vneg.f32	s0, s0
 801a8b0:	b945      	cbnz	r5, 801a8c4 <powf+0x15c>
 801a8b2:	2c00      	cmp	r4, #0
 801a8b4:	dac8      	bge.n	801a848 <powf+0xe0>
 801a8b6:	b003      	add	sp, #12
 801a8b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a8bc:	f7ff bd60 	b.w	801a380 <__math_divzerof>
 801a8c0:	2000      	movs	r0, #0
 801a8c2:	e7f5      	b.n	801a8b0 <powf+0x148>
 801a8c4:	2c00      	cmp	r4, #0
 801a8c6:	dabf      	bge.n	801a848 <powf+0xe0>
 801a8c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801a8cc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801a8d0:	e7ba      	b.n	801a848 <powf+0xe0>
 801a8d2:	2900      	cmp	r1, #0
 801a8d4:	da1f      	bge.n	801a916 <powf+0x1ae>
 801a8d6:	ee10 0a90 	vmov	r0, s1
 801a8da:	f7ff ff2d 	bl	801a738 <checkint>
 801a8de:	b920      	cbnz	r0, 801a8ea <powf+0x182>
 801a8e0:	b003      	add	sp, #12
 801a8e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a8e6:	f7ff bd5b 	b.w	801a3a0 <__math_invalidf>
 801a8ea:	2801      	cmp	r0, #1
 801a8ec:	bf14      	ite	ne
 801a8ee:	2000      	movne	r0, #0
 801a8f0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801a8f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a8f8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801a8fc:	f4bf af48 	bcs.w	801a790 <powf+0x28>
 801a900:	ed9f 0a46 	vldr	s0, [pc, #280]	; 801aa1c <powf+0x2b4>
 801a904:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a908:	ee10 3a10 	vmov	r3, s0
 801a90c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a910:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801a914:	e73c      	b.n	801a790 <powf+0x28>
 801a916:	2000      	movs	r0, #0
 801a918:	e7ee      	b.n	801a8f8 <powf+0x190>
 801a91a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801aa00 <powf+0x298>
 801a91e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a926:	dd10      	ble.n	801a94a <powf+0x1e2>
 801a928:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 801a92c:	2800      	cmp	r0, #0
 801a92e:	d158      	bne.n	801a9e2 <powf+0x27a>
 801a930:	9300      	str	r3, [sp, #0]
 801a932:	eddd 7a00 	vldr	s15, [sp]
 801a936:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801a93a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a93e:	eef4 7a47 	vcmp.f32	s15, s14
 801a942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a946:	f47f af6e 	bne.w	801a826 <powf+0xbe>
 801a94a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801aa08 <powf+0x2a0>
 801a94e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a956:	d804      	bhi.n	801a962 <powf+0x1fa>
 801a958:	b003      	add	sp, #12
 801a95a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a95e:	f7ff bcfd 	b.w	801a35c <__math_uflowf>
 801a962:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801aa10 <powf+0x2a8>
 801a966:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a96e:	d504      	bpl.n	801a97a <powf+0x212>
 801a970:	b003      	add	sp, #12
 801a972:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a976:	f7ff bcf7 	b.w	801a368 <__math_may_uflowf>
 801a97a:	4b29      	ldr	r3, [pc, #164]	; (801aa20 <powf+0x2b8>)
 801a97c:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 801a980:	ee30 6b07 	vadd.f64	d6, d0, d7
 801a984:	ee16 2a10 	vmov	r2, s12
 801a988:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a98c:	f002 011f 	and.w	r1, r2, #31
 801a990:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 801a994:	ee30 7b47 	vsub.f64	d7, d0, d7
 801a998:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801a99c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 801a9a0:	ee27 4b07 	vmul.f64	d4, d7, d7
 801a9a4:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801a9a8:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 801a9ac:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a9b0:	686d      	ldr	r5, [r5, #4]
 801a9b2:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801a9b6:	1882      	adds	r2, r0, r2
 801a9b8:	2300      	movs	r3, #0
 801a9ba:	1918      	adds	r0, r3, r4
 801a9bc:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 801a9c0:	eea7 0b05 	vfma.f64	d0, d7, d5
 801a9c4:	ec41 0b17 	vmov	d7, r0, r1
 801a9c8:	eea6 0b04 	vfma.f64	d0, d6, d4
 801a9cc:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a9d0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801a9d4:	e738      	b.n	801a848 <powf+0xe0>
 801a9d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a9da:	e735      	b.n	801a848 <powf+0xe0>
 801a9dc:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801aa24 <powf+0x2bc>
 801a9e0:	e732      	b.n	801a848 <powf+0xe0>
 801a9e2:	9301      	str	r3, [sp, #4]
 801a9e4:	eddd 7a01 	vldr	s15, [sp, #4]
 801a9e8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801a9ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a9f0:	e7a5      	b.n	801a93e <powf+0x1d6>
 801a9f2:	bf00      	nop
 801a9f4:	f3af 8000 	nop.w
 801a9f8:	ffd1d571 	.word	0xffd1d571
 801a9fc:	405fffff 	.word	0x405fffff
 801aa00:	ffa3aae2 	.word	0xffa3aae2
 801aa04:	405fffff 	.word	0x405fffff
 801aa08:	00000000 	.word	0x00000000
 801aa0c:	c062c000 	.word	0xc062c000
 801aa10:	00000000 	.word	0x00000000
 801aa14:	c062a000 	.word	0xc062a000
 801aa18:	08034260 	.word	0x08034260
 801aa1c:	4b000000 	.word	0x4b000000
 801aa20:	08033ed0 	.word	0x08033ed0
 801aa24:	00000000 	.word	0x00000000

0801aa28 <tanf>:
 801aa28:	ee10 3a10 	vmov	r3, s0
 801aa2c:	b507      	push	{r0, r1, r2, lr}
 801aa2e:	4a12      	ldr	r2, [pc, #72]	; (801aa78 <tanf+0x50>)
 801aa30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801aa34:	4293      	cmp	r3, r2
 801aa36:	dc07      	bgt.n	801aa48 <tanf+0x20>
 801aa38:	eddf 0a10 	vldr	s1, [pc, #64]	; 801aa7c <tanf+0x54>
 801aa3c:	2001      	movs	r0, #1
 801aa3e:	b003      	add	sp, #12
 801aa40:	f85d eb04 	ldr.w	lr, [sp], #4
 801aa44:	f001 b916 	b.w	801bc74 <__kernel_tanf>
 801aa48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801aa4c:	db04      	blt.n	801aa58 <tanf+0x30>
 801aa4e:	ee30 0a40 	vsub.f32	s0, s0, s0
 801aa52:	b003      	add	sp, #12
 801aa54:	f85d fb04 	ldr.w	pc, [sp], #4
 801aa58:	4668      	mov	r0, sp
 801aa5a:	f000 f9a9 	bl	801adb0 <__ieee754_rem_pio2f>
 801aa5e:	0040      	lsls	r0, r0, #1
 801aa60:	f000 0002 	and.w	r0, r0, #2
 801aa64:	eddd 0a01 	vldr	s1, [sp, #4]
 801aa68:	ed9d 0a00 	vldr	s0, [sp]
 801aa6c:	f1c0 0001 	rsb	r0, r0, #1
 801aa70:	f001 f900 	bl	801bc74 <__kernel_tanf>
 801aa74:	e7ed      	b.n	801aa52 <tanf+0x2a>
 801aa76:	bf00      	nop
 801aa78:	3f490fda 	.word	0x3f490fda
 801aa7c:	00000000 	.word	0x00000000

0801aa80 <tanhf>:
 801aa80:	b510      	push	{r4, lr}
 801aa82:	ee10 4a10 	vmov	r4, s0
 801aa86:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801aa8a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801aa8e:	ed2d 8b02 	vpush	{d8}
 801aa92:	eeb0 7a40 	vmov.f32	s14, s0
 801aa96:	db0c      	blt.n	801aab2 <tanhf+0x32>
 801aa98:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801aa9c:	eec0 7a07 	vdiv.f32	s15, s0, s14
 801aaa0:	2c00      	cmp	r4, #0
 801aaa2:	bfac      	ite	ge
 801aaa4:	ee37 0a80 	vaddge.f32	s0, s15, s0
 801aaa8:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 801aaac:	ecbd 8b02 	vpop	{d8}
 801aab0:	bd10      	pop	{r4, pc}
 801aab2:	4a1b      	ldr	r2, [pc, #108]	; (801ab20 <tanhf+0xa0>)
 801aab4:	4293      	cmp	r3, r2
 801aab6:	dc30      	bgt.n	801ab1a <tanhf+0x9a>
 801aab8:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 801aabc:	da06      	bge.n	801aacc <tanhf+0x4c>
 801aabe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801aac2:	ee70 7a27 	vadd.f32	s15, s0, s15
 801aac6:	ee27 0a80 	vmul.f32	s0, s15, s0
 801aaca:	e7ef      	b.n	801aaac <tanhf+0x2c>
 801aacc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801aad0:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 801aad4:	db12      	blt.n	801aafc <tanhf+0x7c>
 801aad6:	f7ff fd1b 	bl	801a510 <fabsf>
 801aada:	ee30 0a00 	vadd.f32	s0, s0, s0
 801aade:	f001 fab1 	bl	801c044 <expm1f>
 801aae2:	ee30 0a08 	vadd.f32	s0, s0, s16
 801aae6:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801aaea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801aaee:	ee30 0a67 	vsub.f32	s0, s0, s15
 801aaf2:	2c00      	cmp	r4, #0
 801aaf4:	bfb8      	it	lt
 801aaf6:	eeb1 0a40 	vneglt.f32	s0, s0
 801aafa:	e7d7      	b.n	801aaac <tanhf+0x2c>
 801aafc:	f7ff fd08 	bl	801a510 <fabsf>
 801ab00:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 801ab04:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ab08:	f001 fa9c 	bl	801c044 <expm1f>
 801ab0c:	ee70 7a08 	vadd.f32	s15, s0, s16
 801ab10:	eeb1 7a40 	vneg.f32	s14, s0
 801ab14:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801ab18:	e7eb      	b.n	801aaf2 <tanhf+0x72>
 801ab1a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ab1e:	e7e8      	b.n	801aaf2 <tanhf+0x72>
 801ab20:	41afffff 	.word	0x41afffff
 801ab24:	00000000 	.word	0x00000000

0801ab28 <__ieee754_rem_pio2>:
 801ab28:	b570      	push	{r4, r5, r6, lr}
 801ab2a:	eeb0 7b40 	vmov.f64	d7, d0
 801ab2e:	ee17 5a90 	vmov	r5, s15
 801ab32:	4b99      	ldr	r3, [pc, #612]	; (801ad98 <__ieee754_rem_pio2+0x270>)
 801ab34:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ab38:	429e      	cmp	r6, r3
 801ab3a:	b088      	sub	sp, #32
 801ab3c:	4604      	mov	r4, r0
 801ab3e:	dc07      	bgt.n	801ab50 <__ieee754_rem_pio2+0x28>
 801ab40:	2200      	movs	r2, #0
 801ab42:	2300      	movs	r3, #0
 801ab44:	ed84 0b00 	vstr	d0, [r4]
 801ab48:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ab4c:	2000      	movs	r0, #0
 801ab4e:	e01b      	b.n	801ab88 <__ieee754_rem_pio2+0x60>
 801ab50:	4b92      	ldr	r3, [pc, #584]	; (801ad9c <__ieee754_rem_pio2+0x274>)
 801ab52:	429e      	cmp	r6, r3
 801ab54:	dc3b      	bgt.n	801abce <__ieee754_rem_pio2+0xa6>
 801ab56:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801ab5a:	2d00      	cmp	r5, #0
 801ab5c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 801ad58 <__ieee754_rem_pio2+0x230>
 801ab60:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801ab64:	dd19      	ble.n	801ab9a <__ieee754_rem_pio2+0x72>
 801ab66:	ee30 7b46 	vsub.f64	d7, d0, d6
 801ab6a:	429e      	cmp	r6, r3
 801ab6c:	d00e      	beq.n	801ab8c <__ieee754_rem_pio2+0x64>
 801ab6e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 801ad60 <__ieee754_rem_pio2+0x238>
 801ab72:	ee37 5b46 	vsub.f64	d5, d7, d6
 801ab76:	ee37 7b45 	vsub.f64	d7, d7, d5
 801ab7a:	ed84 5b00 	vstr	d5, [r4]
 801ab7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ab82:	ed84 7b02 	vstr	d7, [r4, #8]
 801ab86:	2001      	movs	r0, #1
 801ab88:	b008      	add	sp, #32
 801ab8a:	bd70      	pop	{r4, r5, r6, pc}
 801ab8c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801ad68 <__ieee754_rem_pio2+0x240>
 801ab90:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ab94:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801ad70 <__ieee754_rem_pio2+0x248>
 801ab98:	e7eb      	b.n	801ab72 <__ieee754_rem_pio2+0x4a>
 801ab9a:	429e      	cmp	r6, r3
 801ab9c:	ee30 7b06 	vadd.f64	d7, d0, d6
 801aba0:	d00e      	beq.n	801abc0 <__ieee754_rem_pio2+0x98>
 801aba2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 801ad60 <__ieee754_rem_pio2+0x238>
 801aba6:	ee37 5b06 	vadd.f64	d5, d7, d6
 801abaa:	ee37 7b45 	vsub.f64	d7, d7, d5
 801abae:	ed84 5b00 	vstr	d5, [r4]
 801abb2:	ee37 7b06 	vadd.f64	d7, d7, d6
 801abb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801abba:	ed84 7b02 	vstr	d7, [r4, #8]
 801abbe:	e7e3      	b.n	801ab88 <__ieee754_rem_pio2+0x60>
 801abc0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801ad68 <__ieee754_rem_pio2+0x240>
 801abc4:	ee37 7b06 	vadd.f64	d7, d7, d6
 801abc8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801ad70 <__ieee754_rem_pio2+0x248>
 801abcc:	e7eb      	b.n	801aba6 <__ieee754_rem_pio2+0x7e>
 801abce:	4b74      	ldr	r3, [pc, #464]	; (801ada0 <__ieee754_rem_pio2+0x278>)
 801abd0:	429e      	cmp	r6, r3
 801abd2:	dc70      	bgt.n	801acb6 <__ieee754_rem_pio2+0x18e>
 801abd4:	f001 f92e 	bl	801be34 <fabs>
 801abd8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801abdc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801ad78 <__ieee754_rem_pio2+0x250>
 801abe0:	eea0 7b06 	vfma.f64	d7, d0, d6
 801abe4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801abe8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801abec:	ee17 0a90 	vmov	r0, s15
 801abf0:	eeb1 4b45 	vneg.f64	d4, d5
 801abf4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801ad58 <__ieee754_rem_pio2+0x230>
 801abf8:	eea5 0b47 	vfms.f64	d0, d5, d7
 801abfc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801ad60 <__ieee754_rem_pio2+0x238>
 801ac00:	281f      	cmp	r0, #31
 801ac02:	ee25 7b07 	vmul.f64	d7, d5, d7
 801ac06:	ee30 6b47 	vsub.f64	d6, d0, d7
 801ac0a:	dc08      	bgt.n	801ac1e <__ieee754_rem_pio2+0xf6>
 801ac0c:	4b65      	ldr	r3, [pc, #404]	; (801ada4 <__ieee754_rem_pio2+0x27c>)
 801ac0e:	1e42      	subs	r2, r0, #1
 801ac10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ac14:	42b3      	cmp	r3, r6
 801ac16:	d002      	beq.n	801ac1e <__ieee754_rem_pio2+0xf6>
 801ac18:	ed84 6b00 	vstr	d6, [r4]
 801ac1c:	e026      	b.n	801ac6c <__ieee754_rem_pio2+0x144>
 801ac1e:	ee16 3a90 	vmov	r3, s13
 801ac22:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801ac26:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801ac2a:	2b10      	cmp	r3, #16
 801ac2c:	ea4f 5226 	mov.w	r2, r6, asr #20
 801ac30:	ddf2      	ble.n	801ac18 <__ieee754_rem_pio2+0xf0>
 801ac32:	eeb0 6b40 	vmov.f64	d6, d0
 801ac36:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801ad68 <__ieee754_rem_pio2+0x240>
 801ac3a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801ad70 <__ieee754_rem_pio2+0x248>
 801ac3e:	eea4 6b07 	vfma.f64	d6, d4, d7
 801ac42:	ee30 0b46 	vsub.f64	d0, d0, d6
 801ac46:	eea4 0b07 	vfma.f64	d0, d4, d7
 801ac4a:	eeb0 7b40 	vmov.f64	d7, d0
 801ac4e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801ac52:	ee36 3b47 	vsub.f64	d3, d6, d7
 801ac56:	ee13 3a90 	vmov	r3, s7
 801ac5a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801ac5e:	1ad3      	subs	r3, r2, r3
 801ac60:	2b31      	cmp	r3, #49	; 0x31
 801ac62:	dc17      	bgt.n	801ac94 <__ieee754_rem_pio2+0x16c>
 801ac64:	eeb0 0b46 	vmov.f64	d0, d6
 801ac68:	ed84 3b00 	vstr	d3, [r4]
 801ac6c:	ed94 6b00 	vldr	d6, [r4]
 801ac70:	2d00      	cmp	r5, #0
 801ac72:	ee30 0b46 	vsub.f64	d0, d0, d6
 801ac76:	ee30 0b47 	vsub.f64	d0, d0, d7
 801ac7a:	ed84 0b02 	vstr	d0, [r4, #8]
 801ac7e:	da83      	bge.n	801ab88 <__ieee754_rem_pio2+0x60>
 801ac80:	eeb1 6b46 	vneg.f64	d6, d6
 801ac84:	eeb1 0b40 	vneg.f64	d0, d0
 801ac88:	ed84 6b00 	vstr	d6, [r4]
 801ac8c:	ed84 0b02 	vstr	d0, [r4, #8]
 801ac90:	4240      	negs	r0, r0
 801ac92:	e779      	b.n	801ab88 <__ieee754_rem_pio2+0x60>
 801ac94:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 801ad80 <__ieee754_rem_pio2+0x258>
 801ac98:	eeb0 0b46 	vmov.f64	d0, d6
 801ac9c:	eea4 0b03 	vfma.f64	d0, d4, d3
 801aca0:	ee36 7b40 	vsub.f64	d7, d6, d0
 801aca4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 801ad88 <__ieee754_rem_pio2+0x260>
 801aca8:	eea4 7b03 	vfma.f64	d7, d4, d3
 801acac:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801acb0:	ee30 6b47 	vsub.f64	d6, d0, d7
 801acb4:	e7b0      	b.n	801ac18 <__ieee754_rem_pio2+0xf0>
 801acb6:	4b3c      	ldr	r3, [pc, #240]	; (801ada8 <__ieee754_rem_pio2+0x280>)
 801acb8:	429e      	cmp	r6, r3
 801acba:	dd06      	ble.n	801acca <__ieee754_rem_pio2+0x1a2>
 801acbc:	ee30 7b40 	vsub.f64	d7, d0, d0
 801acc0:	ed80 7b02 	vstr	d7, [r0, #8]
 801acc4:	ed80 7b00 	vstr	d7, [r0]
 801acc8:	e740      	b.n	801ab4c <__ieee754_rem_pio2+0x24>
 801acca:	1532      	asrs	r2, r6, #20
 801accc:	ee10 0a10 	vmov	r0, s0
 801acd0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801acd4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801acd8:	ec41 0b17 	vmov	d7, r0, r1
 801acdc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801ace0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 801ad90 <__ieee754_rem_pio2+0x268>
 801ace4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801ace8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801acec:	ed8d 6b02 	vstr	d6, [sp, #8]
 801acf0:	ee27 7b05 	vmul.f64	d7, d7, d5
 801acf4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801acf8:	a902      	add	r1, sp, #8
 801acfa:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801acfe:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ad02:	ed8d 6b04 	vstr	d6, [sp, #16]
 801ad06:	ee27 7b05 	vmul.f64	d7, d7, d5
 801ad0a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ad0e:	2603      	movs	r6, #3
 801ad10:	4608      	mov	r0, r1
 801ad12:	ed91 7b04 	vldr	d7, [r1, #16]
 801ad16:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ad1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad1e:	4633      	mov	r3, r6
 801ad20:	f1a1 0108 	sub.w	r1, r1, #8
 801ad24:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 801ad28:	d0f3      	beq.n	801ad12 <__ieee754_rem_pio2+0x1ea>
 801ad2a:	4920      	ldr	r1, [pc, #128]	; (801adac <__ieee754_rem_pio2+0x284>)
 801ad2c:	9101      	str	r1, [sp, #4]
 801ad2e:	2102      	movs	r1, #2
 801ad30:	9100      	str	r1, [sp, #0]
 801ad32:	4621      	mov	r1, r4
 801ad34:	f000 f978 	bl	801b028 <__kernel_rem_pio2>
 801ad38:	2d00      	cmp	r5, #0
 801ad3a:	f6bf af25 	bge.w	801ab88 <__ieee754_rem_pio2+0x60>
 801ad3e:	ed94 7b00 	vldr	d7, [r4]
 801ad42:	eeb1 7b47 	vneg.f64	d7, d7
 801ad46:	ed84 7b00 	vstr	d7, [r4]
 801ad4a:	ed94 7b02 	vldr	d7, [r4, #8]
 801ad4e:	eeb1 7b47 	vneg.f64	d7, d7
 801ad52:	ed84 7b02 	vstr	d7, [r4, #8]
 801ad56:	e79b      	b.n	801ac90 <__ieee754_rem_pio2+0x168>
 801ad58:	54400000 	.word	0x54400000
 801ad5c:	3ff921fb 	.word	0x3ff921fb
 801ad60:	1a626331 	.word	0x1a626331
 801ad64:	3dd0b461 	.word	0x3dd0b461
 801ad68:	1a600000 	.word	0x1a600000
 801ad6c:	3dd0b461 	.word	0x3dd0b461
 801ad70:	2e037073 	.word	0x2e037073
 801ad74:	3ba3198a 	.word	0x3ba3198a
 801ad78:	6dc9c883 	.word	0x6dc9c883
 801ad7c:	3fe45f30 	.word	0x3fe45f30
 801ad80:	2e000000 	.word	0x2e000000
 801ad84:	3ba3198a 	.word	0x3ba3198a
 801ad88:	252049c1 	.word	0x252049c1
 801ad8c:	397b839a 	.word	0x397b839a
 801ad90:	00000000 	.word	0x00000000
 801ad94:	41700000 	.word	0x41700000
 801ad98:	3fe921fb 	.word	0x3fe921fb
 801ad9c:	4002d97b 	.word	0x4002d97b
 801ada0:	413921fb 	.word	0x413921fb
 801ada4:	08034388 	.word	0x08034388
 801ada8:	7fefffff 	.word	0x7fefffff
 801adac:	08034408 	.word	0x08034408

0801adb0 <__ieee754_rem_pio2f>:
 801adb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801adb2:	ee10 6a10 	vmov	r6, s0
 801adb6:	4b8e      	ldr	r3, [pc, #568]	; (801aff0 <__ieee754_rem_pio2f+0x240>)
 801adb8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801adbc:	429d      	cmp	r5, r3
 801adbe:	b087      	sub	sp, #28
 801adc0:	eef0 7a40 	vmov.f32	s15, s0
 801adc4:	4604      	mov	r4, r0
 801adc6:	dc05      	bgt.n	801add4 <__ieee754_rem_pio2f+0x24>
 801adc8:	2300      	movs	r3, #0
 801adca:	ed80 0a00 	vstr	s0, [r0]
 801adce:	6043      	str	r3, [r0, #4]
 801add0:	2000      	movs	r0, #0
 801add2:	e01a      	b.n	801ae0a <__ieee754_rem_pio2f+0x5a>
 801add4:	4b87      	ldr	r3, [pc, #540]	; (801aff4 <__ieee754_rem_pio2f+0x244>)
 801add6:	429d      	cmp	r5, r3
 801add8:	dc46      	bgt.n	801ae68 <__ieee754_rem_pio2f+0xb8>
 801adda:	2e00      	cmp	r6, #0
 801addc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801aff8 <__ieee754_rem_pio2f+0x248>
 801ade0:	4b86      	ldr	r3, [pc, #536]	; (801affc <__ieee754_rem_pio2f+0x24c>)
 801ade2:	f025 050f 	bic.w	r5, r5, #15
 801ade6:	dd1f      	ble.n	801ae28 <__ieee754_rem_pio2f+0x78>
 801ade8:	429d      	cmp	r5, r3
 801adea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801adee:	d00e      	beq.n	801ae0e <__ieee754_rem_pio2f+0x5e>
 801adf0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801b000 <__ieee754_rem_pio2f+0x250>
 801adf4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801adf8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801adfc:	ed80 0a00 	vstr	s0, [r0]
 801ae00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ae04:	2001      	movs	r0, #1
 801ae06:	edc4 7a01 	vstr	s15, [r4, #4]
 801ae0a:	b007      	add	sp, #28
 801ae0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae0e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801b004 <__ieee754_rem_pio2f+0x254>
 801ae12:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801b008 <__ieee754_rem_pio2f+0x258>
 801ae16:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801ae1a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801ae1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ae22:	edc0 6a00 	vstr	s13, [r0]
 801ae26:	e7eb      	b.n	801ae00 <__ieee754_rem_pio2f+0x50>
 801ae28:	429d      	cmp	r5, r3
 801ae2a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801ae2e:	d00e      	beq.n	801ae4e <__ieee754_rem_pio2f+0x9e>
 801ae30:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801b000 <__ieee754_rem_pio2f+0x250>
 801ae34:	ee37 0a87 	vadd.f32	s0, s15, s14
 801ae38:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801ae3c:	ed80 0a00 	vstr	s0, [r0]
 801ae40:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ae44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ae48:	edc4 7a01 	vstr	s15, [r4, #4]
 801ae4c:	e7dd      	b.n	801ae0a <__ieee754_rem_pio2f+0x5a>
 801ae4e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801b004 <__ieee754_rem_pio2f+0x254>
 801ae52:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801b008 <__ieee754_rem_pio2f+0x258>
 801ae56:	ee77 7a80 	vadd.f32	s15, s15, s0
 801ae5a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801ae5e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ae62:	edc0 6a00 	vstr	s13, [r0]
 801ae66:	e7eb      	b.n	801ae40 <__ieee754_rem_pio2f+0x90>
 801ae68:	4b68      	ldr	r3, [pc, #416]	; (801b00c <__ieee754_rem_pio2f+0x25c>)
 801ae6a:	429d      	cmp	r5, r3
 801ae6c:	dc72      	bgt.n	801af54 <__ieee754_rem_pio2f+0x1a4>
 801ae6e:	f7ff fb4f 	bl	801a510 <fabsf>
 801ae72:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801b010 <__ieee754_rem_pio2f+0x260>
 801ae76:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801ae7a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ae7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ae82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801ae86:	ee17 0a90 	vmov	r0, s15
 801ae8a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801aff8 <__ieee754_rem_pio2f+0x248>
 801ae8e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801ae92:	281f      	cmp	r0, #31
 801ae94:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801b000 <__ieee754_rem_pio2f+0x250>
 801ae98:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ae9c:	eeb1 6a47 	vneg.f32	s12, s14
 801aea0:	ee70 6a67 	vsub.f32	s13, s0, s15
 801aea4:	ee16 2a90 	vmov	r2, s13
 801aea8:	dc1c      	bgt.n	801aee4 <__ieee754_rem_pio2f+0x134>
 801aeaa:	495a      	ldr	r1, [pc, #360]	; (801b014 <__ieee754_rem_pio2f+0x264>)
 801aeac:	1e47      	subs	r7, r0, #1
 801aeae:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801aeb2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801aeb6:	428b      	cmp	r3, r1
 801aeb8:	d014      	beq.n	801aee4 <__ieee754_rem_pio2f+0x134>
 801aeba:	6022      	str	r2, [r4, #0]
 801aebc:	ed94 7a00 	vldr	s14, [r4]
 801aec0:	ee30 0a47 	vsub.f32	s0, s0, s14
 801aec4:	2e00      	cmp	r6, #0
 801aec6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801aeca:	ed84 0a01 	vstr	s0, [r4, #4]
 801aece:	da9c      	bge.n	801ae0a <__ieee754_rem_pio2f+0x5a>
 801aed0:	eeb1 7a47 	vneg.f32	s14, s14
 801aed4:	eeb1 0a40 	vneg.f32	s0, s0
 801aed8:	ed84 7a00 	vstr	s14, [r4]
 801aedc:	ed84 0a01 	vstr	s0, [r4, #4]
 801aee0:	4240      	negs	r0, r0
 801aee2:	e792      	b.n	801ae0a <__ieee754_rem_pio2f+0x5a>
 801aee4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801aee8:	15eb      	asrs	r3, r5, #23
 801aeea:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801aeee:	2d08      	cmp	r5, #8
 801aef0:	dde3      	ble.n	801aeba <__ieee754_rem_pio2f+0x10a>
 801aef2:	eddf 7a44 	vldr	s15, [pc, #272]	; 801b004 <__ieee754_rem_pio2f+0x254>
 801aef6:	eddf 5a44 	vldr	s11, [pc, #272]	; 801b008 <__ieee754_rem_pio2f+0x258>
 801aefa:	eef0 6a40 	vmov.f32	s13, s0
 801aefe:	eee6 6a27 	vfma.f32	s13, s12, s15
 801af02:	ee30 0a66 	vsub.f32	s0, s0, s13
 801af06:	eea6 0a27 	vfma.f32	s0, s12, s15
 801af0a:	eef0 7a40 	vmov.f32	s15, s0
 801af0e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801af12:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801af16:	ee15 2a90 	vmov	r2, s11
 801af1a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801af1e:	1a5b      	subs	r3, r3, r1
 801af20:	2b19      	cmp	r3, #25
 801af22:	dc04      	bgt.n	801af2e <__ieee754_rem_pio2f+0x17e>
 801af24:	edc4 5a00 	vstr	s11, [r4]
 801af28:	eeb0 0a66 	vmov.f32	s0, s13
 801af2c:	e7c6      	b.n	801aebc <__ieee754_rem_pio2f+0x10c>
 801af2e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801b018 <__ieee754_rem_pio2f+0x268>
 801af32:	eeb0 0a66 	vmov.f32	s0, s13
 801af36:	eea6 0a25 	vfma.f32	s0, s12, s11
 801af3a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801af3e:	eddf 6a37 	vldr	s13, [pc, #220]	; 801b01c <__ieee754_rem_pio2f+0x26c>
 801af42:	eee6 7a25 	vfma.f32	s15, s12, s11
 801af46:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801af4a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801af4e:	ed84 7a00 	vstr	s14, [r4]
 801af52:	e7b3      	b.n	801aebc <__ieee754_rem_pio2f+0x10c>
 801af54:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801af58:	db06      	blt.n	801af68 <__ieee754_rem_pio2f+0x1b8>
 801af5a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801af5e:	edc0 7a01 	vstr	s15, [r0, #4]
 801af62:	edc0 7a00 	vstr	s15, [r0]
 801af66:	e733      	b.n	801add0 <__ieee754_rem_pio2f+0x20>
 801af68:	15ea      	asrs	r2, r5, #23
 801af6a:	3a86      	subs	r2, #134	; 0x86
 801af6c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801af70:	ee07 3a90 	vmov	s15, r3
 801af74:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801af78:	eddf 6a29 	vldr	s13, [pc, #164]	; 801b020 <__ieee754_rem_pio2f+0x270>
 801af7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801af84:	ed8d 7a03 	vstr	s14, [sp, #12]
 801af88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801af8c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801af90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801af94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801af98:	ed8d 7a04 	vstr	s14, [sp, #16]
 801af9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801afa0:	eef5 7a40 	vcmp.f32	s15, #0.0
 801afa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afa8:	edcd 7a05 	vstr	s15, [sp, #20]
 801afac:	d11e      	bne.n	801afec <__ieee754_rem_pio2f+0x23c>
 801afae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801afb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afb6:	bf14      	ite	ne
 801afb8:	2302      	movne	r3, #2
 801afba:	2301      	moveq	r3, #1
 801afbc:	4919      	ldr	r1, [pc, #100]	; (801b024 <__ieee754_rem_pio2f+0x274>)
 801afbe:	9101      	str	r1, [sp, #4]
 801afc0:	2102      	movs	r1, #2
 801afc2:	9100      	str	r1, [sp, #0]
 801afc4:	a803      	add	r0, sp, #12
 801afc6:	4621      	mov	r1, r4
 801afc8:	f000 fbde 	bl	801b788 <__kernel_rem_pio2f>
 801afcc:	2e00      	cmp	r6, #0
 801afce:	f6bf af1c 	bge.w	801ae0a <__ieee754_rem_pio2f+0x5a>
 801afd2:	edd4 7a00 	vldr	s15, [r4]
 801afd6:	eef1 7a67 	vneg.f32	s15, s15
 801afda:	edc4 7a00 	vstr	s15, [r4]
 801afde:	edd4 7a01 	vldr	s15, [r4, #4]
 801afe2:	eef1 7a67 	vneg.f32	s15, s15
 801afe6:	edc4 7a01 	vstr	s15, [r4, #4]
 801afea:	e779      	b.n	801aee0 <__ieee754_rem_pio2f+0x130>
 801afec:	2303      	movs	r3, #3
 801afee:	e7e5      	b.n	801afbc <__ieee754_rem_pio2f+0x20c>
 801aff0:	3f490fd8 	.word	0x3f490fd8
 801aff4:	4016cbe3 	.word	0x4016cbe3
 801aff8:	3fc90f80 	.word	0x3fc90f80
 801affc:	3fc90fd0 	.word	0x3fc90fd0
 801b000:	37354443 	.word	0x37354443
 801b004:	37354400 	.word	0x37354400
 801b008:	2e85a308 	.word	0x2e85a308
 801b00c:	43490f80 	.word	0x43490f80
 801b010:	3f22f984 	.word	0x3f22f984
 801b014:	08034510 	.word	0x08034510
 801b018:	2e85a300 	.word	0x2e85a300
 801b01c:	248d3132 	.word	0x248d3132
 801b020:	43800000 	.word	0x43800000
 801b024:	08034590 	.word	0x08034590

0801b028 <__kernel_rem_pio2>:
 801b028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b02c:	ed2d 8b06 	vpush	{d8-d10}
 801b030:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801b034:	460f      	mov	r7, r1
 801b036:	9002      	str	r0, [sp, #8]
 801b038:	49c5      	ldr	r1, [pc, #788]	; (801b350 <__kernel_rem_pio2+0x328>)
 801b03a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801b03c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 801b040:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801b044:	9301      	str	r3, [sp, #4]
 801b046:	f112 0f14 	cmn.w	r2, #20
 801b04a:	bfa8      	it	ge
 801b04c:	2018      	movge	r0, #24
 801b04e:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 801b052:	bfb8      	it	lt
 801b054:	2000      	movlt	r0, #0
 801b056:	f06f 0417 	mvn.w	r4, #23
 801b05a:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 801b338 <__kernel_rem_pio2+0x310>
 801b05e:	bfa4      	itt	ge
 801b060:	f1a2 0a03 	subge.w	sl, r2, #3
 801b064:	fb9a f0f0 	sdivge	r0, sl, r0
 801b068:	fb00 4404 	mla	r4, r0, r4, r4
 801b06c:	1a46      	subs	r6, r0, r1
 801b06e:	4414      	add	r4, r2
 801b070:	eb09 0c01 	add.w	ip, r9, r1
 801b074:	ad1a      	add	r5, sp, #104	; 0x68
 801b076:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 801b07a:	2200      	movs	r2, #0
 801b07c:	4562      	cmp	r2, ip
 801b07e:	dd10      	ble.n	801b0a2 <__kernel_rem_pio2+0x7a>
 801b080:	9a01      	ldr	r2, [sp, #4]
 801b082:	ab1a      	add	r3, sp, #104	; 0x68
 801b084:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801b088:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801b08c:	f04f 0c00 	mov.w	ip, #0
 801b090:	45cc      	cmp	ip, r9
 801b092:	dc26      	bgt.n	801b0e2 <__kernel_rem_pio2+0xba>
 801b094:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 801b338 <__kernel_rem_pio2+0x310>
 801b098:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801b09c:	4616      	mov	r6, r2
 801b09e:	2500      	movs	r5, #0
 801b0a0:	e015      	b.n	801b0ce <__kernel_rem_pio2+0xa6>
 801b0a2:	42d6      	cmn	r6, r2
 801b0a4:	d409      	bmi.n	801b0ba <__kernel_rem_pio2+0x92>
 801b0a6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801b0aa:	ee07 3a90 	vmov	s15, r3
 801b0ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b0b2:	eca5 7b02 	vstmia	r5!, {d7}
 801b0b6:	3201      	adds	r2, #1
 801b0b8:	e7e0      	b.n	801b07c <__kernel_rem_pio2+0x54>
 801b0ba:	eeb0 7b46 	vmov.f64	d7, d6
 801b0be:	e7f8      	b.n	801b0b2 <__kernel_rem_pio2+0x8a>
 801b0c0:	ecb8 5b02 	vldmia	r8!, {d5}
 801b0c4:	ed96 6b00 	vldr	d6, [r6]
 801b0c8:	3501      	adds	r5, #1
 801b0ca:	eea5 7b06 	vfma.f64	d7, d5, d6
 801b0ce:	428d      	cmp	r5, r1
 801b0d0:	f1a6 0608 	sub.w	r6, r6, #8
 801b0d4:	ddf4      	ble.n	801b0c0 <__kernel_rem_pio2+0x98>
 801b0d6:	ecaa 7b02 	vstmia	sl!, {d7}
 801b0da:	f10c 0c01 	add.w	ip, ip, #1
 801b0de:	3208      	adds	r2, #8
 801b0e0:	e7d6      	b.n	801b090 <__kernel_rem_pio2+0x68>
 801b0e2:	ab06      	add	r3, sp, #24
 801b0e4:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801b340 <__kernel_rem_pio2+0x318>
 801b0e8:	ed9f ab97 	vldr	d10, [pc, #604]	; 801b348 <__kernel_rem_pio2+0x320>
 801b0ec:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801b0f0:	9303      	str	r3, [sp, #12]
 801b0f2:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 801b0f6:	464d      	mov	r5, r9
 801b0f8:	00eb      	lsls	r3, r5, #3
 801b0fa:	9304      	str	r3, [sp, #16]
 801b0fc:	ab92      	add	r3, sp, #584	; 0x248
 801b0fe:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801b102:	f10d 0b18 	add.w	fp, sp, #24
 801b106:	ab6a      	add	r3, sp, #424	; 0x1a8
 801b108:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801b10c:	465e      	mov	r6, fp
 801b10e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801b112:	4628      	mov	r0, r5
 801b114:	2800      	cmp	r0, #0
 801b116:	f1a2 0208 	sub.w	r2, r2, #8
 801b11a:	dc4c      	bgt.n	801b1b6 <__kernel_rem_pio2+0x18e>
 801b11c:	4620      	mov	r0, r4
 801b11e:	9105      	str	r1, [sp, #20]
 801b120:	f000 ff06 	bl	801bf30 <scalbn>
 801b124:	eeb0 8b40 	vmov.f64	d8, d0
 801b128:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801b12c:	ee28 0b00 	vmul.f64	d0, d8, d0
 801b130:	f000 fe8a 	bl	801be48 <floor>
 801b134:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801b138:	eea0 8b47 	vfms.f64	d8, d0, d7
 801b13c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801b140:	2c00      	cmp	r4, #0
 801b142:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801b146:	ee17 8a90 	vmov	r8, s15
 801b14a:	ee38 8b40 	vsub.f64	d8, d8, d0
 801b14e:	9905      	ldr	r1, [sp, #20]
 801b150:	dd43      	ble.n	801b1da <__kernel_rem_pio2+0x1b2>
 801b152:	1e68      	subs	r0, r5, #1
 801b154:	ab06      	add	r3, sp, #24
 801b156:	f1c4 0c18 	rsb	ip, r4, #24
 801b15a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801b15e:	fa46 f20c 	asr.w	r2, r6, ip
 801b162:	4490      	add	r8, r2
 801b164:	fa02 f20c 	lsl.w	r2, r2, ip
 801b168:	1ab6      	subs	r6, r6, r2
 801b16a:	f1c4 0217 	rsb	r2, r4, #23
 801b16e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801b172:	4116      	asrs	r6, r2
 801b174:	2e00      	cmp	r6, #0
 801b176:	dd3f      	ble.n	801b1f8 <__kernel_rem_pio2+0x1d0>
 801b178:	f04f 0c00 	mov.w	ip, #0
 801b17c:	f108 0801 	add.w	r8, r8, #1
 801b180:	4660      	mov	r0, ip
 801b182:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801b186:	4565      	cmp	r5, ip
 801b188:	dc6e      	bgt.n	801b268 <__kernel_rem_pio2+0x240>
 801b18a:	2c00      	cmp	r4, #0
 801b18c:	dd04      	ble.n	801b198 <__kernel_rem_pio2+0x170>
 801b18e:	2c01      	cmp	r4, #1
 801b190:	d07f      	beq.n	801b292 <__kernel_rem_pio2+0x26a>
 801b192:	2c02      	cmp	r4, #2
 801b194:	f000 8087 	beq.w	801b2a6 <__kernel_rem_pio2+0x27e>
 801b198:	2e02      	cmp	r6, #2
 801b19a:	d12d      	bne.n	801b1f8 <__kernel_rem_pio2+0x1d0>
 801b19c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801b1a0:	ee30 8b48 	vsub.f64	d8, d0, d8
 801b1a4:	b340      	cbz	r0, 801b1f8 <__kernel_rem_pio2+0x1d0>
 801b1a6:	4620      	mov	r0, r4
 801b1a8:	9105      	str	r1, [sp, #20]
 801b1aa:	f000 fec1 	bl	801bf30 <scalbn>
 801b1ae:	9905      	ldr	r1, [sp, #20]
 801b1b0:	ee38 8b40 	vsub.f64	d8, d8, d0
 801b1b4:	e020      	b.n	801b1f8 <__kernel_rem_pio2+0x1d0>
 801b1b6:	ee20 7b09 	vmul.f64	d7, d0, d9
 801b1ba:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801b1be:	3801      	subs	r0, #1
 801b1c0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801b1c4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801b1c8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801b1cc:	eca6 0a01 	vstmia	r6!, {s0}
 801b1d0:	ed92 0b00 	vldr	d0, [r2]
 801b1d4:	ee37 0b00 	vadd.f64	d0, d7, d0
 801b1d8:	e79c      	b.n	801b114 <__kernel_rem_pio2+0xec>
 801b1da:	d105      	bne.n	801b1e8 <__kernel_rem_pio2+0x1c0>
 801b1dc:	1e6a      	subs	r2, r5, #1
 801b1de:	ab06      	add	r3, sp, #24
 801b1e0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b1e4:	15f6      	asrs	r6, r6, #23
 801b1e6:	e7c5      	b.n	801b174 <__kernel_rem_pio2+0x14c>
 801b1e8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801b1ec:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801b1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1f4:	da36      	bge.n	801b264 <__kernel_rem_pio2+0x23c>
 801b1f6:	2600      	movs	r6, #0
 801b1f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b200:	f040 80aa 	bne.w	801b358 <__kernel_rem_pio2+0x330>
 801b204:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 801b208:	4658      	mov	r0, fp
 801b20a:	2200      	movs	r2, #0
 801b20c:	4548      	cmp	r0, r9
 801b20e:	da52      	bge.n	801b2b6 <__kernel_rem_pio2+0x28e>
 801b210:	2a00      	cmp	r2, #0
 801b212:	f000 8081 	beq.w	801b318 <__kernel_rem_pio2+0x2f0>
 801b216:	ab06      	add	r3, sp, #24
 801b218:	3c18      	subs	r4, #24
 801b21a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801b21e:	2b00      	cmp	r3, #0
 801b220:	f000 8087 	beq.w	801b332 <__kernel_rem_pio2+0x30a>
 801b224:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801b228:	4620      	mov	r0, r4
 801b22a:	f000 fe81 	bl	801bf30 <scalbn>
 801b22e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801b232:	ed9f 6b43 	vldr	d6, [pc, #268]	; 801b340 <__kernel_rem_pio2+0x318>
 801b236:	a96a      	add	r1, sp, #424	; 0x1a8
 801b238:	f103 0208 	add.w	r2, r3, #8
 801b23c:	1888      	adds	r0, r1, r2
 801b23e:	4659      	mov	r1, fp
 801b240:	2900      	cmp	r1, #0
 801b242:	f280 80b7 	bge.w	801b3b4 <__kernel_rem_pio2+0x38c>
 801b246:	4659      	mov	r1, fp
 801b248:	2900      	cmp	r1, #0
 801b24a:	f2c0 80d5 	blt.w	801b3f8 <__kernel_rem_pio2+0x3d0>
 801b24e:	a86a      	add	r0, sp, #424	; 0x1a8
 801b250:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801b254:	ed9f 7b38 	vldr	d7, [pc, #224]	; 801b338 <__kernel_rem_pio2+0x310>
 801b258:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801b354 <__kernel_rem_pio2+0x32c>
 801b25c:	2400      	movs	r4, #0
 801b25e:	ebab 0001 	sub.w	r0, fp, r1
 801b262:	e0be      	b.n	801b3e2 <__kernel_rem_pio2+0x3ba>
 801b264:	2602      	movs	r6, #2
 801b266:	e787      	b.n	801b178 <__kernel_rem_pio2+0x150>
 801b268:	f8db 2000 	ldr.w	r2, [fp]
 801b26c:	b958      	cbnz	r0, 801b286 <__kernel_rem_pio2+0x25e>
 801b26e:	b122      	cbz	r2, 801b27a <__kernel_rem_pio2+0x252>
 801b270:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801b274:	f8cb 2000 	str.w	r2, [fp]
 801b278:	2201      	movs	r2, #1
 801b27a:	f10c 0c01 	add.w	ip, ip, #1
 801b27e:	f10b 0b04 	add.w	fp, fp, #4
 801b282:	4610      	mov	r0, r2
 801b284:	e77f      	b.n	801b186 <__kernel_rem_pio2+0x15e>
 801b286:	ebae 0202 	sub.w	r2, lr, r2
 801b28a:	f8cb 2000 	str.w	r2, [fp]
 801b28e:	4602      	mov	r2, r0
 801b290:	e7f3      	b.n	801b27a <__kernel_rem_pio2+0x252>
 801b292:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801b296:	ab06      	add	r3, sp, #24
 801b298:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801b29c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801b2a0:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801b2a4:	e778      	b.n	801b198 <__kernel_rem_pio2+0x170>
 801b2a6:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801b2aa:	ab06      	add	r3, sp, #24
 801b2ac:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801b2b0:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801b2b4:	e7f4      	b.n	801b2a0 <__kernel_rem_pio2+0x278>
 801b2b6:	ab06      	add	r3, sp, #24
 801b2b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801b2bc:	3801      	subs	r0, #1
 801b2be:	431a      	orrs	r2, r3
 801b2c0:	e7a4      	b.n	801b20c <__kernel_rem_pio2+0x1e4>
 801b2c2:	f10c 0c01 	add.w	ip, ip, #1
 801b2c6:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801b2ca:	2800      	cmp	r0, #0
 801b2cc:	d0f9      	beq.n	801b2c2 <__kernel_rem_pio2+0x29a>
 801b2ce:	9b04      	ldr	r3, [sp, #16]
 801b2d0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801b2d4:	eb0d 0203 	add.w	r2, sp, r3
 801b2d8:	9b01      	ldr	r3, [sp, #4]
 801b2da:	18e8      	adds	r0, r5, r3
 801b2dc:	ab1a      	add	r3, sp, #104	; 0x68
 801b2de:	1c6e      	adds	r6, r5, #1
 801b2e0:	3a98      	subs	r2, #152	; 0x98
 801b2e2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801b2e6:	4465      	add	r5, ip
 801b2e8:	42b5      	cmp	r5, r6
 801b2ea:	f6ff af05 	blt.w	801b0f8 <__kernel_rem_pio2+0xd0>
 801b2ee:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 801b2f2:	f8dd e008 	ldr.w	lr, [sp, #8]
 801b2f6:	ee07 3a90 	vmov	s15, r3
 801b2fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b2fe:	f04f 0c00 	mov.w	ip, #0
 801b302:	eca0 7b02 	vstmia	r0!, {d7}
 801b306:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801b338 <__kernel_rem_pio2+0x310>
 801b30a:	4680      	mov	r8, r0
 801b30c:	458c      	cmp	ip, r1
 801b30e:	dd07      	ble.n	801b320 <__kernel_rem_pio2+0x2f8>
 801b310:	eca2 7b02 	vstmia	r2!, {d7}
 801b314:	3601      	adds	r6, #1
 801b316:	e7e7      	b.n	801b2e8 <__kernel_rem_pio2+0x2c0>
 801b318:	9a03      	ldr	r2, [sp, #12]
 801b31a:	f04f 0c01 	mov.w	ip, #1
 801b31e:	e7d2      	b.n	801b2c6 <__kernel_rem_pio2+0x29e>
 801b320:	ecbe 5b02 	vldmia	lr!, {d5}
 801b324:	ed38 6b02 	vldmdb	r8!, {d6}
 801b328:	f10c 0c01 	add.w	ip, ip, #1
 801b32c:	eea5 7b06 	vfma.f64	d7, d5, d6
 801b330:	e7ec      	b.n	801b30c <__kernel_rem_pio2+0x2e4>
 801b332:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801b336:	e76e      	b.n	801b216 <__kernel_rem_pio2+0x1ee>
	...
 801b344:	3e700000 	.word	0x3e700000
 801b348:	00000000 	.word	0x00000000
 801b34c:	41700000 	.word	0x41700000
 801b350:	080348e8 	.word	0x080348e8
 801b354:	080348a8 	.word	0x080348a8
 801b358:	4260      	negs	r0, r4
 801b35a:	eeb0 0b48 	vmov.f64	d0, d8
 801b35e:	f000 fde7 	bl	801bf30 <scalbn>
 801b362:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801b540 <__kernel_rem_pio2+0x518>
 801b366:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801b36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b36e:	db18      	blt.n	801b3a2 <__kernel_rem_pio2+0x37a>
 801b370:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801b548 <__kernel_rem_pio2+0x520>
 801b374:	ee20 7b07 	vmul.f64	d7, d0, d7
 801b378:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801b37c:	aa06      	add	r2, sp, #24
 801b37e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801b382:	eea5 0b46 	vfms.f64	d0, d5, d6
 801b386:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801b38a:	f105 0b01 	add.w	fp, r5, #1
 801b38e:	ee10 3a10 	vmov	r3, s0
 801b392:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801b396:	ee17 3a10 	vmov	r3, s14
 801b39a:	3418      	adds	r4, #24
 801b39c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801b3a0:	e740      	b.n	801b224 <__kernel_rem_pio2+0x1fc>
 801b3a2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801b3a6:	aa06      	add	r2, sp, #24
 801b3a8:	ee10 3a10 	vmov	r3, s0
 801b3ac:	46ab      	mov	fp, r5
 801b3ae:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801b3b2:	e737      	b.n	801b224 <__kernel_rem_pio2+0x1fc>
 801b3b4:	ac06      	add	r4, sp, #24
 801b3b6:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801b3ba:	9401      	str	r4, [sp, #4]
 801b3bc:	ee07 4a90 	vmov	s15, r4
 801b3c0:	3901      	subs	r1, #1
 801b3c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b3c6:	ee27 7b00 	vmul.f64	d7, d7, d0
 801b3ca:	ee20 0b06 	vmul.f64	d0, d0, d6
 801b3ce:	ed20 7b02 	vstmdb	r0!, {d7}
 801b3d2:	e735      	b.n	801b240 <__kernel_rem_pio2+0x218>
 801b3d4:	ecbc 5b02 	vldmia	ip!, {d5}
 801b3d8:	ecb5 6b02 	vldmia	r5!, {d6}
 801b3dc:	3401      	adds	r4, #1
 801b3de:	eea5 7b06 	vfma.f64	d7, d5, d6
 801b3e2:	454c      	cmp	r4, r9
 801b3e4:	dc01      	bgt.n	801b3ea <__kernel_rem_pio2+0x3c2>
 801b3e6:	4284      	cmp	r4, r0
 801b3e8:	ddf4      	ble.n	801b3d4 <__kernel_rem_pio2+0x3ac>
 801b3ea:	ac42      	add	r4, sp, #264	; 0x108
 801b3ec:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 801b3f0:	ed80 7b00 	vstr	d7, [r0]
 801b3f4:	3901      	subs	r1, #1
 801b3f6:	e727      	b.n	801b248 <__kernel_rem_pio2+0x220>
 801b3f8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801b3fa:	2902      	cmp	r1, #2
 801b3fc:	dc0a      	bgt.n	801b414 <__kernel_rem_pio2+0x3ec>
 801b3fe:	2900      	cmp	r1, #0
 801b400:	dc2c      	bgt.n	801b45c <__kernel_rem_pio2+0x434>
 801b402:	d045      	beq.n	801b490 <__kernel_rem_pio2+0x468>
 801b404:	f008 0007 	and.w	r0, r8, #7
 801b408:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801b40c:	ecbd 8b06 	vpop	{d8-d10}
 801b410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b414:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801b416:	2a03      	cmp	r2, #3
 801b418:	d1f4      	bne.n	801b404 <__kernel_rem_pio2+0x3dc>
 801b41a:	aa42      	add	r2, sp, #264	; 0x108
 801b41c:	4413      	add	r3, r2
 801b41e:	461a      	mov	r2, r3
 801b420:	4619      	mov	r1, r3
 801b422:	4658      	mov	r0, fp
 801b424:	2800      	cmp	r0, #0
 801b426:	f1a1 0108 	sub.w	r1, r1, #8
 801b42a:	dc54      	bgt.n	801b4d6 <__kernel_rem_pio2+0x4ae>
 801b42c:	4659      	mov	r1, fp
 801b42e:	2901      	cmp	r1, #1
 801b430:	f1a2 0208 	sub.w	r2, r2, #8
 801b434:	dc5f      	bgt.n	801b4f6 <__kernel_rem_pio2+0x4ce>
 801b436:	ed9f 7b46 	vldr	d7, [pc, #280]	; 801b550 <__kernel_rem_pio2+0x528>
 801b43a:	3308      	adds	r3, #8
 801b43c:	f1bb 0f01 	cmp.w	fp, #1
 801b440:	dc69      	bgt.n	801b516 <__kernel_rem_pio2+0x4ee>
 801b442:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801b446:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801b44a:	2e00      	cmp	r6, #0
 801b44c:	d16a      	bne.n	801b524 <__kernel_rem_pio2+0x4fc>
 801b44e:	ed87 5b00 	vstr	d5, [r7]
 801b452:	ed87 6b02 	vstr	d6, [r7, #8]
 801b456:	ed87 7b04 	vstr	d7, [r7, #16]
 801b45a:	e7d3      	b.n	801b404 <__kernel_rem_pio2+0x3dc>
 801b45c:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 801b550 <__kernel_rem_pio2+0x528>
 801b460:	ab42      	add	r3, sp, #264	; 0x108
 801b462:	441a      	add	r2, r3
 801b464:	465b      	mov	r3, fp
 801b466:	2b00      	cmp	r3, #0
 801b468:	da26      	bge.n	801b4b8 <__kernel_rem_pio2+0x490>
 801b46a:	b35e      	cbz	r6, 801b4c4 <__kernel_rem_pio2+0x49c>
 801b46c:	eeb1 7b46 	vneg.f64	d7, d6
 801b470:	ed87 7b00 	vstr	d7, [r7]
 801b474:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801b478:	aa44      	add	r2, sp, #272	; 0x110
 801b47a:	2301      	movs	r3, #1
 801b47c:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b480:	459b      	cmp	fp, r3
 801b482:	da22      	bge.n	801b4ca <__kernel_rem_pio2+0x4a2>
 801b484:	b10e      	cbz	r6, 801b48a <__kernel_rem_pio2+0x462>
 801b486:	eeb1 7b47 	vneg.f64	d7, d7
 801b48a:	ed87 7b02 	vstr	d7, [r7, #8]
 801b48e:	e7b9      	b.n	801b404 <__kernel_rem_pio2+0x3dc>
 801b490:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801b550 <__kernel_rem_pio2+0x528>
 801b494:	ab42      	add	r3, sp, #264	; 0x108
 801b496:	441a      	add	r2, r3
 801b498:	f1bb 0f00 	cmp.w	fp, #0
 801b49c:	da05      	bge.n	801b4aa <__kernel_rem_pio2+0x482>
 801b49e:	b10e      	cbz	r6, 801b4a4 <__kernel_rem_pio2+0x47c>
 801b4a0:	eeb1 7b47 	vneg.f64	d7, d7
 801b4a4:	ed87 7b00 	vstr	d7, [r7]
 801b4a8:	e7ac      	b.n	801b404 <__kernel_rem_pio2+0x3dc>
 801b4aa:	ed32 6b02 	vldmdb	r2!, {d6}
 801b4ae:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801b4b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 801b4b6:	e7ef      	b.n	801b498 <__kernel_rem_pio2+0x470>
 801b4b8:	ed32 7b02 	vldmdb	r2!, {d7}
 801b4bc:	3b01      	subs	r3, #1
 801b4be:	ee36 6b07 	vadd.f64	d6, d6, d7
 801b4c2:	e7d0      	b.n	801b466 <__kernel_rem_pio2+0x43e>
 801b4c4:	eeb0 7b46 	vmov.f64	d7, d6
 801b4c8:	e7d2      	b.n	801b470 <__kernel_rem_pio2+0x448>
 801b4ca:	ecb2 6b02 	vldmia	r2!, {d6}
 801b4ce:	3301      	adds	r3, #1
 801b4d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 801b4d4:	e7d4      	b.n	801b480 <__kernel_rem_pio2+0x458>
 801b4d6:	ed91 7b00 	vldr	d7, [r1]
 801b4da:	ed91 5b02 	vldr	d5, [r1, #8]
 801b4de:	3801      	subs	r0, #1
 801b4e0:	ee37 6b05 	vadd.f64	d6, d7, d5
 801b4e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b4e8:	ed81 6b00 	vstr	d6, [r1]
 801b4ec:	ee37 7b05 	vadd.f64	d7, d7, d5
 801b4f0:	ed81 7b02 	vstr	d7, [r1, #8]
 801b4f4:	e796      	b.n	801b424 <__kernel_rem_pio2+0x3fc>
 801b4f6:	ed92 7b00 	vldr	d7, [r2]
 801b4fa:	ed92 5b02 	vldr	d5, [r2, #8]
 801b4fe:	3901      	subs	r1, #1
 801b500:	ee37 6b05 	vadd.f64	d6, d7, d5
 801b504:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b508:	ed82 6b00 	vstr	d6, [r2]
 801b50c:	ee37 7b05 	vadd.f64	d7, d7, d5
 801b510:	ed82 7b02 	vstr	d7, [r2, #8]
 801b514:	e78b      	b.n	801b42e <__kernel_rem_pio2+0x406>
 801b516:	ed33 6b02 	vldmdb	r3!, {d6}
 801b51a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801b51e:	ee37 7b06 	vadd.f64	d7, d7, d6
 801b522:	e78b      	b.n	801b43c <__kernel_rem_pio2+0x414>
 801b524:	eeb1 5b45 	vneg.f64	d5, d5
 801b528:	eeb1 6b46 	vneg.f64	d6, d6
 801b52c:	ed87 5b00 	vstr	d5, [r7]
 801b530:	eeb1 7b47 	vneg.f64	d7, d7
 801b534:	ed87 6b02 	vstr	d6, [r7, #8]
 801b538:	e78d      	b.n	801b456 <__kernel_rem_pio2+0x42e>
 801b53a:	bf00      	nop
 801b53c:	f3af 8000 	nop.w
 801b540:	00000000 	.word	0x00000000
 801b544:	41700000 	.word	0x41700000
 801b548:	00000000 	.word	0x00000000
 801b54c:	3e700000 	.word	0x3e700000
	...

0801b558 <__kernel_tan>:
 801b558:	eeb0 7b40 	vmov.f64	d7, d0
 801b55c:	ee17 3a90 	vmov	r3, s15
 801b560:	4987      	ldr	r1, [pc, #540]	; (801b780 <__kernel_tan+0x228>)
 801b562:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801b566:	428a      	cmp	r2, r1
 801b568:	b510      	push	{r4, lr}
 801b56a:	dc33      	bgt.n	801b5d4 <__kernel_tan+0x7c>
 801b56c:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801b570:	ee16 1a90 	vmov	r1, s13
 801b574:	2900      	cmp	r1, #0
 801b576:	d143      	bne.n	801b600 <__kernel_tan+0xa8>
 801b578:	ee10 4a10 	vmov	r4, s0
 801b57c:	1c43      	adds	r3, r0, #1
 801b57e:	4323      	orrs	r3, r4
 801b580:	4313      	orrs	r3, r2
 801b582:	d108      	bne.n	801b596 <__kernel_tan+0x3e>
 801b584:	f000 fc56 	bl	801be34 <fabs>
 801b588:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801b58c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801b590:	eeb0 0b47 	vmov.f64	d0, d7
 801b594:	bd10      	pop	{r4, pc}
 801b596:	2801      	cmp	r0, #1
 801b598:	d0fa      	beq.n	801b590 <__kernel_tan+0x38>
 801b59a:	ee30 6b01 	vadd.f64	d6, d0, d1
 801b59e:	ec53 2b16 	vmov	r2, r3, d6
 801b5a2:	460a      	mov	r2, r1
 801b5a4:	ec43 2b15 	vmov	d5, r2, r3
 801b5a8:	ee35 7b40 	vsub.f64	d7, d5, d0
 801b5ac:	ee31 1b47 	vsub.f64	d1, d1, d7
 801b5b0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801b5b4:	ee87 4b06 	vdiv.f64	d4, d7, d6
 801b5b8:	ec53 2b14 	vmov	r2, r3, d4
 801b5bc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801b5c0:	460a      	mov	r2, r1
 801b5c2:	ec43 2b17 	vmov	d7, r2, r3
 801b5c6:	eea5 6b07 	vfma.f64	d6, d5, d7
 801b5ca:	eea1 6b07 	vfma.f64	d6, d1, d7
 801b5ce:	eea6 7b04 	vfma.f64	d7, d6, d4
 801b5d2:	e7dd      	b.n	801b590 <__kernel_tan+0x38>
 801b5d4:	496b      	ldr	r1, [pc, #428]	; (801b784 <__kernel_tan+0x22c>)
 801b5d6:	428a      	cmp	r2, r1
 801b5d8:	dd12      	ble.n	801b600 <__kernel_tan+0xa8>
 801b5da:	ed9f 6b49 	vldr	d6, [pc, #292]	; 801b700 <__kernel_tan+0x1a8>
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	bfb8      	it	lt
 801b5e2:	eeb1 7b40 	vneglt.f64	d7, d0
 801b5e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 801b5ea:	ed9f 6b47 	vldr	d6, [pc, #284]	; 801b708 <__kernel_tan+0x1b0>
 801b5ee:	bfb8      	it	lt
 801b5f0:	eeb1 1b41 	vneglt.f64	d1, d1
 801b5f4:	ee36 1b41 	vsub.f64	d1, d6, d1
 801b5f8:	ee31 7b07 	vadd.f64	d7, d1, d7
 801b5fc:	ed9f 1b44 	vldr	d1, [pc, #272]	; 801b710 <__kernel_tan+0x1b8>
 801b600:	ee27 5b07 	vmul.f64	d5, d7, d7
 801b604:	ee25 6b05 	vmul.f64	d6, d5, d5
 801b608:	ed9f 3b43 	vldr	d3, [pc, #268]	; 801b718 <__kernel_tan+0x1c0>
 801b60c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801b720 <__kernel_tan+0x1c8>
 801b610:	eea6 4b03 	vfma.f64	d4, d6, d3
 801b614:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801b728 <__kernel_tan+0x1d0>
 801b618:	eea4 3b06 	vfma.f64	d3, d4, d6
 801b61c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801b730 <__kernel_tan+0x1d8>
 801b620:	eea3 4b06 	vfma.f64	d4, d3, d6
 801b624:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801b738 <__kernel_tan+0x1e0>
 801b628:	eea4 3b06 	vfma.f64	d3, d4, d6
 801b62c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801b740 <__kernel_tan+0x1e8>
 801b630:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801b748 <__kernel_tan+0x1f0>
 801b634:	eea3 4b06 	vfma.f64	d4, d3, d6
 801b638:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801b750 <__kernel_tan+0x1f8>
 801b63c:	eea6 3b02 	vfma.f64	d3, d6, d2
 801b640:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801b758 <__kernel_tan+0x200>
 801b644:	eea3 2b06 	vfma.f64	d2, d3, d6
 801b648:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801b760 <__kernel_tan+0x208>
 801b64c:	eea2 3b06 	vfma.f64	d3, d2, d6
 801b650:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801b768 <__kernel_tan+0x210>
 801b654:	eea3 2b06 	vfma.f64	d2, d3, d6
 801b658:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801b770 <__kernel_tan+0x218>
 801b65c:	4949      	ldr	r1, [pc, #292]	; (801b784 <__kernel_tan+0x22c>)
 801b65e:	eea2 3b06 	vfma.f64	d3, d2, d6
 801b662:	ee27 2b05 	vmul.f64	d2, d7, d5
 801b666:	eeb0 6b44 	vmov.f64	d6, d4
 801b66a:	eeb0 4b41 	vmov.f64	d4, d1
 801b66e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801b672:	eea6 4b02 	vfma.f64	d4, d6, d2
 801b676:	ed9f 6b40 	vldr	d6, [pc, #256]	; 801b778 <__kernel_tan+0x220>
 801b67a:	eea4 1b05 	vfma.f64	d1, d4, d5
 801b67e:	428a      	cmp	r2, r1
 801b680:	eea2 1b06 	vfma.f64	d1, d2, d6
 801b684:	ee37 5b01 	vadd.f64	d5, d7, d1
 801b688:	dd1d      	ble.n	801b6c6 <__kernel_tan+0x16e>
 801b68a:	ee25 3b05 	vmul.f64	d3, d5, d5
 801b68e:	179b      	asrs	r3, r3, #30
 801b690:	ee06 0a90 	vmov	s13, r0
 801b694:	f003 0302 	and.w	r3, r3, #2
 801b698:	f1c3 0301 	rsb	r3, r3, #1
 801b69c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b6a0:	ee35 5b06 	vadd.f64	d5, d5, d6
 801b6a4:	ee83 4b05 	vdiv.f64	d4, d3, d5
 801b6a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801b6ac:	ee34 1b41 	vsub.f64	d1, d4, d1
 801b6b0:	ee37 7b41 	vsub.f64	d7, d7, d1
 801b6b4:	eea7 6b45 	vfms.f64	d6, d7, d5
 801b6b8:	ee07 3a10 	vmov	s14, r3
 801b6bc:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801b6c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b6c4:	e764      	b.n	801b590 <__kernel_tan+0x38>
 801b6c6:	2801      	cmp	r0, #1
 801b6c8:	d016      	beq.n	801b6f8 <__kernel_tan+0x1a0>
 801b6ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801b6ce:	ec51 0b15 	vmov	r0, r1, d5
 801b6d2:	2000      	movs	r0, #0
 801b6d4:	ec41 0b13 	vmov	d3, r0, r1
 801b6d8:	ee33 7b47 	vsub.f64	d7, d3, d7
 801b6dc:	ee31 1b47 	vsub.f64	d1, d1, d7
 801b6e0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801b6e4:	ee87 4b05 	vdiv.f64	d4, d7, d5
 801b6e8:	ec53 2b14 	vmov	r2, r3, d4
 801b6ec:	4602      	mov	r2, r0
 801b6ee:	ec43 2b17 	vmov	d7, r2, r3
 801b6f2:	eea3 6b07 	vfma.f64	d6, d3, d7
 801b6f6:	e768      	b.n	801b5ca <__kernel_tan+0x72>
 801b6f8:	eeb0 7b45 	vmov.f64	d7, d5
 801b6fc:	e748      	b.n	801b590 <__kernel_tan+0x38>
 801b6fe:	bf00      	nop
 801b700:	54442d18 	.word	0x54442d18
 801b704:	3fe921fb 	.word	0x3fe921fb
 801b708:	33145c07 	.word	0x33145c07
 801b70c:	3c81a626 	.word	0x3c81a626
	...
 801b718:	db605373 	.word	0xdb605373
 801b71c:	bef375cb 	.word	0xbef375cb
 801b720:	a03792a6 	.word	0xa03792a6
 801b724:	3f147e88 	.word	0x3f147e88
 801b728:	f2f26501 	.word	0xf2f26501
 801b72c:	3f4344d8 	.word	0x3f4344d8
 801b730:	c9560328 	.word	0xc9560328
 801b734:	3f6d6d22 	.word	0x3f6d6d22
 801b738:	8406d637 	.word	0x8406d637
 801b73c:	3f9664f4 	.word	0x3f9664f4
 801b740:	1110fe7a 	.word	0x1110fe7a
 801b744:	3fc11111 	.word	0x3fc11111
 801b748:	74bf7ad4 	.word	0x74bf7ad4
 801b74c:	3efb2a70 	.word	0x3efb2a70
 801b750:	32f0a7e9 	.word	0x32f0a7e9
 801b754:	3f12b80f 	.word	0x3f12b80f
 801b758:	1a8d1068 	.word	0x1a8d1068
 801b75c:	3f3026f7 	.word	0x3f3026f7
 801b760:	fee08315 	.word	0xfee08315
 801b764:	3f57dbc8 	.word	0x3f57dbc8
 801b768:	e96e8493 	.word	0xe96e8493
 801b76c:	3f8226e3 	.word	0x3f8226e3
 801b770:	1bb341fe 	.word	0x1bb341fe
 801b774:	3faba1ba 	.word	0x3faba1ba
 801b778:	55555563 	.word	0x55555563
 801b77c:	3fd55555 	.word	0x3fd55555
 801b780:	3e2fffff 	.word	0x3e2fffff
 801b784:	3fe59427 	.word	0x3fe59427

0801b788 <__kernel_rem_pio2f>:
 801b788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b78c:	ed2d 8b04 	vpush	{d8-d9}
 801b790:	b0d9      	sub	sp, #356	; 0x164
 801b792:	4688      	mov	r8, r1
 801b794:	9002      	str	r0, [sp, #8]
 801b796:	49bb      	ldr	r1, [pc, #748]	; (801ba84 <__kernel_rem_pio2f+0x2fc>)
 801b798:	9866      	ldr	r0, [sp, #408]	; 0x198
 801b79a:	9301      	str	r3, [sp, #4]
 801b79c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801b7a0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801b7a4:	1e59      	subs	r1, r3, #1
 801b7a6:	1d13      	adds	r3, r2, #4
 801b7a8:	db27      	blt.n	801b7fa <__kernel_rem_pio2f+0x72>
 801b7aa:	f1b2 0b03 	subs.w	fp, r2, #3
 801b7ae:	bf48      	it	mi
 801b7b0:	f102 0b04 	addmi.w	fp, r2, #4
 801b7b4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801b7b8:	1c45      	adds	r5, r0, #1
 801b7ba:	00ec      	lsls	r4, r5, #3
 801b7bc:	1a47      	subs	r7, r0, r1
 801b7be:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 801ba94 <__kernel_rem_pio2f+0x30c>
 801b7c2:	9403      	str	r4, [sp, #12]
 801b7c4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801b7c8:	eb0a 0c01 	add.w	ip, sl, r1
 801b7cc:	ae1c      	add	r6, sp, #112	; 0x70
 801b7ce:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801b7d2:	2400      	movs	r4, #0
 801b7d4:	4564      	cmp	r4, ip
 801b7d6:	dd12      	ble.n	801b7fe <__kernel_rem_pio2f+0x76>
 801b7d8:	9b01      	ldr	r3, [sp, #4]
 801b7da:	ac1c      	add	r4, sp, #112	; 0x70
 801b7dc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801b7e0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801b7e4:	f04f 0c00 	mov.w	ip, #0
 801b7e8:	45d4      	cmp	ip, sl
 801b7ea:	dc27      	bgt.n	801b83c <__kernel_rem_pio2f+0xb4>
 801b7ec:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801b7f0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801ba94 <__kernel_rem_pio2f+0x30c>
 801b7f4:	4627      	mov	r7, r4
 801b7f6:	2600      	movs	r6, #0
 801b7f8:	e016      	b.n	801b828 <__kernel_rem_pio2f+0xa0>
 801b7fa:	2000      	movs	r0, #0
 801b7fc:	e7dc      	b.n	801b7b8 <__kernel_rem_pio2f+0x30>
 801b7fe:	42e7      	cmn	r7, r4
 801b800:	bf5d      	ittte	pl
 801b802:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801b806:	ee07 3a90 	vmovpl	s15, r3
 801b80a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801b80e:	eef0 7a47 	vmovmi.f32	s15, s14
 801b812:	ece6 7a01 	vstmia	r6!, {s15}
 801b816:	3401      	adds	r4, #1
 801b818:	e7dc      	b.n	801b7d4 <__kernel_rem_pio2f+0x4c>
 801b81a:	ecf9 6a01 	vldmia	r9!, {s13}
 801b81e:	ed97 7a00 	vldr	s14, [r7]
 801b822:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b826:	3601      	adds	r6, #1
 801b828:	428e      	cmp	r6, r1
 801b82a:	f1a7 0704 	sub.w	r7, r7, #4
 801b82e:	ddf4      	ble.n	801b81a <__kernel_rem_pio2f+0x92>
 801b830:	eceb 7a01 	vstmia	fp!, {s15}
 801b834:	f10c 0c01 	add.w	ip, ip, #1
 801b838:	3404      	adds	r4, #4
 801b83a:	e7d5      	b.n	801b7e8 <__kernel_rem_pio2f+0x60>
 801b83c:	ab08      	add	r3, sp, #32
 801b83e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801b842:	eddf 8a93 	vldr	s17, [pc, #588]	; 801ba90 <__kernel_rem_pio2f+0x308>
 801b846:	ed9f 9a91 	vldr	s18, [pc, #580]	; 801ba8c <__kernel_rem_pio2f+0x304>
 801b84a:	9304      	str	r3, [sp, #16]
 801b84c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 801b850:	4656      	mov	r6, sl
 801b852:	00b3      	lsls	r3, r6, #2
 801b854:	9305      	str	r3, [sp, #20]
 801b856:	ab58      	add	r3, sp, #352	; 0x160
 801b858:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801b85c:	ac08      	add	r4, sp, #32
 801b85e:	ab44      	add	r3, sp, #272	; 0x110
 801b860:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801b864:	46a4      	mov	ip, r4
 801b866:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801b86a:	4637      	mov	r7, r6
 801b86c:	2f00      	cmp	r7, #0
 801b86e:	f1a0 0004 	sub.w	r0, r0, #4
 801b872:	dc4f      	bgt.n	801b914 <__kernel_rem_pio2f+0x18c>
 801b874:	4628      	mov	r0, r5
 801b876:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801b87a:	f000 fd3f 	bl	801c2fc <scalbnf>
 801b87e:	eeb0 8a40 	vmov.f32	s16, s0
 801b882:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801b886:	ee28 0a00 	vmul.f32	s0, s16, s0
 801b88a:	f000 fcf5 	bl	801c278 <floorf>
 801b88e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801b892:	eea0 8a67 	vfms.f32	s16, s0, s15
 801b896:	2d00      	cmp	r5, #0
 801b898:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801b89c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801b8a0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801b8a4:	ee17 9a90 	vmov	r9, s15
 801b8a8:	ee38 8a40 	vsub.f32	s16, s16, s0
 801b8ac:	dd44      	ble.n	801b938 <__kernel_rem_pio2f+0x1b0>
 801b8ae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801b8b2:	ab08      	add	r3, sp, #32
 801b8b4:	f1c5 0e08 	rsb	lr, r5, #8
 801b8b8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801b8bc:	fa47 f00e 	asr.w	r0, r7, lr
 801b8c0:	4481      	add	r9, r0
 801b8c2:	fa00 f00e 	lsl.w	r0, r0, lr
 801b8c6:	1a3f      	subs	r7, r7, r0
 801b8c8:	f1c5 0007 	rsb	r0, r5, #7
 801b8cc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801b8d0:	4107      	asrs	r7, r0
 801b8d2:	2f00      	cmp	r7, #0
 801b8d4:	dd3f      	ble.n	801b956 <__kernel_rem_pio2f+0x1ce>
 801b8d6:	f04f 0e00 	mov.w	lr, #0
 801b8da:	f109 0901 	add.w	r9, r9, #1
 801b8de:	4673      	mov	r3, lr
 801b8e0:	4576      	cmp	r6, lr
 801b8e2:	dc6b      	bgt.n	801b9bc <__kernel_rem_pio2f+0x234>
 801b8e4:	2d00      	cmp	r5, #0
 801b8e6:	dd04      	ble.n	801b8f2 <__kernel_rem_pio2f+0x16a>
 801b8e8:	2d01      	cmp	r5, #1
 801b8ea:	d078      	beq.n	801b9de <__kernel_rem_pio2f+0x256>
 801b8ec:	2d02      	cmp	r5, #2
 801b8ee:	f000 8081 	beq.w	801b9f4 <__kernel_rem_pio2f+0x26c>
 801b8f2:	2f02      	cmp	r7, #2
 801b8f4:	d12f      	bne.n	801b956 <__kernel_rem_pio2f+0x1ce>
 801b8f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b8fa:	ee30 8a48 	vsub.f32	s16, s0, s16
 801b8fe:	b353      	cbz	r3, 801b956 <__kernel_rem_pio2f+0x1ce>
 801b900:	4628      	mov	r0, r5
 801b902:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801b906:	f000 fcf9 	bl	801c2fc <scalbnf>
 801b90a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801b90e:	ee38 8a40 	vsub.f32	s16, s16, s0
 801b912:	e020      	b.n	801b956 <__kernel_rem_pio2f+0x1ce>
 801b914:	ee60 7a28 	vmul.f32	s15, s0, s17
 801b918:	3f01      	subs	r7, #1
 801b91a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b91e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b922:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801b926:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b92a:	ecac 0a01 	vstmia	ip!, {s0}
 801b92e:	ed90 0a00 	vldr	s0, [r0]
 801b932:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b936:	e799      	b.n	801b86c <__kernel_rem_pio2f+0xe4>
 801b938:	d105      	bne.n	801b946 <__kernel_rem_pio2f+0x1be>
 801b93a:	1e70      	subs	r0, r6, #1
 801b93c:	ab08      	add	r3, sp, #32
 801b93e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801b942:	11ff      	asrs	r7, r7, #7
 801b944:	e7c5      	b.n	801b8d2 <__kernel_rem_pio2f+0x14a>
 801b946:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b94a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801b94e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b952:	da31      	bge.n	801b9b8 <__kernel_rem_pio2f+0x230>
 801b954:	2700      	movs	r7, #0
 801b956:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b95e:	f040 809b 	bne.w	801ba98 <__kernel_rem_pio2f+0x310>
 801b962:	1e74      	subs	r4, r6, #1
 801b964:	46a4      	mov	ip, r4
 801b966:	2000      	movs	r0, #0
 801b968:	45d4      	cmp	ip, sl
 801b96a:	da4a      	bge.n	801ba02 <__kernel_rem_pio2f+0x27a>
 801b96c:	2800      	cmp	r0, #0
 801b96e:	d07a      	beq.n	801ba66 <__kernel_rem_pio2f+0x2de>
 801b970:	ab08      	add	r3, sp, #32
 801b972:	3d08      	subs	r5, #8
 801b974:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801b978:	2b00      	cmp	r3, #0
 801b97a:	f000 8081 	beq.w	801ba80 <__kernel_rem_pio2f+0x2f8>
 801b97e:	4628      	mov	r0, r5
 801b980:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801b984:	00a5      	lsls	r5, r4, #2
 801b986:	f000 fcb9 	bl	801c2fc <scalbnf>
 801b98a:	aa44      	add	r2, sp, #272	; 0x110
 801b98c:	1d2b      	adds	r3, r5, #4
 801b98e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801ba90 <__kernel_rem_pio2f+0x308>
 801b992:	18d1      	adds	r1, r2, r3
 801b994:	4622      	mov	r2, r4
 801b996:	2a00      	cmp	r2, #0
 801b998:	f280 80ae 	bge.w	801baf8 <__kernel_rem_pio2f+0x370>
 801b99c:	4622      	mov	r2, r4
 801b99e:	2a00      	cmp	r2, #0
 801b9a0:	f2c0 80cc 	blt.w	801bb3c <__kernel_rem_pio2f+0x3b4>
 801b9a4:	a944      	add	r1, sp, #272	; 0x110
 801b9a6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801b9aa:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 801ba88 <__kernel_rem_pio2f+0x300>
 801b9ae:	eddf 7a39 	vldr	s15, [pc, #228]	; 801ba94 <__kernel_rem_pio2f+0x30c>
 801b9b2:	2000      	movs	r0, #0
 801b9b4:	1aa1      	subs	r1, r4, r2
 801b9b6:	e0b6      	b.n	801bb26 <__kernel_rem_pio2f+0x39e>
 801b9b8:	2702      	movs	r7, #2
 801b9ba:	e78c      	b.n	801b8d6 <__kernel_rem_pio2f+0x14e>
 801b9bc:	6820      	ldr	r0, [r4, #0]
 801b9be:	b94b      	cbnz	r3, 801b9d4 <__kernel_rem_pio2f+0x24c>
 801b9c0:	b118      	cbz	r0, 801b9ca <__kernel_rem_pio2f+0x242>
 801b9c2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801b9c6:	6020      	str	r0, [r4, #0]
 801b9c8:	2001      	movs	r0, #1
 801b9ca:	f10e 0e01 	add.w	lr, lr, #1
 801b9ce:	3404      	adds	r4, #4
 801b9d0:	4603      	mov	r3, r0
 801b9d2:	e785      	b.n	801b8e0 <__kernel_rem_pio2f+0x158>
 801b9d4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801b9d8:	6020      	str	r0, [r4, #0]
 801b9da:	4618      	mov	r0, r3
 801b9dc:	e7f5      	b.n	801b9ca <__kernel_rem_pio2f+0x242>
 801b9de:	1e74      	subs	r4, r6, #1
 801b9e0:	a808      	add	r0, sp, #32
 801b9e2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801b9e6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801b9ea:	f10d 0c20 	add.w	ip, sp, #32
 801b9ee:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801b9f2:	e77e      	b.n	801b8f2 <__kernel_rem_pio2f+0x16a>
 801b9f4:	1e74      	subs	r4, r6, #1
 801b9f6:	a808      	add	r0, sp, #32
 801b9f8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801b9fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801ba00:	e7f3      	b.n	801b9ea <__kernel_rem_pio2f+0x262>
 801ba02:	ab08      	add	r3, sp, #32
 801ba04:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ba08:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801ba0c:	4318      	orrs	r0, r3
 801ba0e:	e7ab      	b.n	801b968 <__kernel_rem_pio2f+0x1e0>
 801ba10:	f10c 0c01 	add.w	ip, ip, #1
 801ba14:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 801ba18:	2c00      	cmp	r4, #0
 801ba1a:	d0f9      	beq.n	801ba10 <__kernel_rem_pio2f+0x288>
 801ba1c:	9b05      	ldr	r3, [sp, #20]
 801ba1e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801ba22:	eb0d 0003 	add.w	r0, sp, r3
 801ba26:	9b01      	ldr	r3, [sp, #4]
 801ba28:	18f4      	adds	r4, r6, r3
 801ba2a:	ab1c      	add	r3, sp, #112	; 0x70
 801ba2c:	1c77      	adds	r7, r6, #1
 801ba2e:	384c      	subs	r0, #76	; 0x4c
 801ba30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ba34:	4466      	add	r6, ip
 801ba36:	42be      	cmp	r6, r7
 801ba38:	f6ff af0b 	blt.w	801b852 <__kernel_rem_pio2f+0xca>
 801ba3c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 801ba40:	f8dd e008 	ldr.w	lr, [sp, #8]
 801ba44:	ee07 3a90 	vmov	s15, r3
 801ba48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ba4c:	f04f 0c00 	mov.w	ip, #0
 801ba50:	ece4 7a01 	vstmia	r4!, {s15}
 801ba54:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801ba94 <__kernel_rem_pio2f+0x30c>
 801ba58:	46a1      	mov	r9, r4
 801ba5a:	458c      	cmp	ip, r1
 801ba5c:	dd07      	ble.n	801ba6e <__kernel_rem_pio2f+0x2e6>
 801ba5e:	ece0 7a01 	vstmia	r0!, {s15}
 801ba62:	3701      	adds	r7, #1
 801ba64:	e7e7      	b.n	801ba36 <__kernel_rem_pio2f+0x2ae>
 801ba66:	9804      	ldr	r0, [sp, #16]
 801ba68:	f04f 0c01 	mov.w	ip, #1
 801ba6c:	e7d2      	b.n	801ba14 <__kernel_rem_pio2f+0x28c>
 801ba6e:	ecfe 6a01 	vldmia	lr!, {s13}
 801ba72:	ed39 7a01 	vldmdb	r9!, {s14}
 801ba76:	f10c 0c01 	add.w	ip, ip, #1
 801ba7a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ba7e:	e7ec      	b.n	801ba5a <__kernel_rem_pio2f+0x2d2>
 801ba80:	3c01      	subs	r4, #1
 801ba82:	e775      	b.n	801b970 <__kernel_rem_pio2f+0x1e8>
 801ba84:	08034924 	.word	0x08034924
 801ba88:	080348f8 	.word	0x080348f8
 801ba8c:	43800000 	.word	0x43800000
 801ba90:	3b800000 	.word	0x3b800000
 801ba94:	00000000 	.word	0x00000000
 801ba98:	9b03      	ldr	r3, [sp, #12]
 801ba9a:	eeb0 0a48 	vmov.f32	s0, s16
 801ba9e:	1a98      	subs	r0, r3, r2
 801baa0:	f000 fc2c 	bl	801c2fc <scalbnf>
 801baa4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801ba8c <__kernel_rem_pio2f+0x304>
 801baa8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801baac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bab0:	db19      	blt.n	801bae6 <__kernel_rem_pio2f+0x35e>
 801bab2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801ba90 <__kernel_rem_pio2f+0x308>
 801bab6:	ee60 7a27 	vmul.f32	s15, s0, s15
 801baba:	aa08      	add	r2, sp, #32
 801babc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bac0:	1c74      	adds	r4, r6, #1
 801bac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bac6:	3508      	adds	r5, #8
 801bac8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801bacc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801bad0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801bad4:	ee10 3a10 	vmov	r3, s0
 801bad8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801badc:	ee17 3a90 	vmov	r3, s15
 801bae0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801bae4:	e74b      	b.n	801b97e <__kernel_rem_pio2f+0x1f6>
 801bae6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801baea:	aa08      	add	r2, sp, #32
 801baec:	ee10 3a10 	vmov	r3, s0
 801baf0:	4634      	mov	r4, r6
 801baf2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801baf6:	e742      	b.n	801b97e <__kernel_rem_pio2f+0x1f6>
 801baf8:	a808      	add	r0, sp, #32
 801bafa:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801bafe:	9001      	str	r0, [sp, #4]
 801bb00:	ee07 0a90 	vmov	s15, r0
 801bb04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bb08:	3a01      	subs	r2, #1
 801bb0a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801bb0e:	ee20 0a07 	vmul.f32	s0, s0, s14
 801bb12:	ed61 7a01 	vstmdb	r1!, {s15}
 801bb16:	e73e      	b.n	801b996 <__kernel_rem_pio2f+0x20e>
 801bb18:	ecfc 6a01 	vldmia	ip!, {s13}
 801bb1c:	ecb6 7a01 	vldmia	r6!, {s14}
 801bb20:	eee6 7a87 	vfma.f32	s15, s13, s14
 801bb24:	3001      	adds	r0, #1
 801bb26:	4550      	cmp	r0, sl
 801bb28:	dc01      	bgt.n	801bb2e <__kernel_rem_pio2f+0x3a6>
 801bb2a:	4288      	cmp	r0, r1
 801bb2c:	ddf4      	ble.n	801bb18 <__kernel_rem_pio2f+0x390>
 801bb2e:	a858      	add	r0, sp, #352	; 0x160
 801bb30:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bb34:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801bb38:	3a01      	subs	r2, #1
 801bb3a:	e730      	b.n	801b99e <__kernel_rem_pio2f+0x216>
 801bb3c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801bb3e:	2a02      	cmp	r2, #2
 801bb40:	dc09      	bgt.n	801bb56 <__kernel_rem_pio2f+0x3ce>
 801bb42:	2a00      	cmp	r2, #0
 801bb44:	dc2a      	bgt.n	801bb9c <__kernel_rem_pio2f+0x414>
 801bb46:	d043      	beq.n	801bbd0 <__kernel_rem_pio2f+0x448>
 801bb48:	f009 0007 	and.w	r0, r9, #7
 801bb4c:	b059      	add	sp, #356	; 0x164
 801bb4e:	ecbd 8b04 	vpop	{d8-d9}
 801bb52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb56:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801bb58:	2b03      	cmp	r3, #3
 801bb5a:	d1f5      	bne.n	801bb48 <__kernel_rem_pio2f+0x3c0>
 801bb5c:	ab30      	add	r3, sp, #192	; 0xc0
 801bb5e:	442b      	add	r3, r5
 801bb60:	461a      	mov	r2, r3
 801bb62:	4619      	mov	r1, r3
 801bb64:	4620      	mov	r0, r4
 801bb66:	2800      	cmp	r0, #0
 801bb68:	f1a1 0104 	sub.w	r1, r1, #4
 801bb6c:	dc51      	bgt.n	801bc12 <__kernel_rem_pio2f+0x48a>
 801bb6e:	4621      	mov	r1, r4
 801bb70:	2901      	cmp	r1, #1
 801bb72:	f1a2 0204 	sub.w	r2, r2, #4
 801bb76:	dc5c      	bgt.n	801bc32 <__kernel_rem_pio2f+0x4aa>
 801bb78:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801ba94 <__kernel_rem_pio2f+0x30c>
 801bb7c:	3304      	adds	r3, #4
 801bb7e:	2c01      	cmp	r4, #1
 801bb80:	dc67      	bgt.n	801bc52 <__kernel_rem_pio2f+0x4ca>
 801bb82:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801bb86:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801bb8a:	2f00      	cmp	r7, #0
 801bb8c:	d167      	bne.n	801bc5e <__kernel_rem_pio2f+0x4d6>
 801bb8e:	edc8 6a00 	vstr	s13, [r8]
 801bb92:	ed88 7a01 	vstr	s14, [r8, #4]
 801bb96:	edc8 7a02 	vstr	s15, [r8, #8]
 801bb9a:	e7d5      	b.n	801bb48 <__kernel_rem_pio2f+0x3c0>
 801bb9c:	aa30      	add	r2, sp, #192	; 0xc0
 801bb9e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 801ba94 <__kernel_rem_pio2f+0x30c>
 801bba2:	4413      	add	r3, r2
 801bba4:	4622      	mov	r2, r4
 801bba6:	2a00      	cmp	r2, #0
 801bba8:	da24      	bge.n	801bbf4 <__kernel_rem_pio2f+0x46c>
 801bbaa:	b34f      	cbz	r7, 801bc00 <__kernel_rem_pio2f+0x478>
 801bbac:	eef1 7a47 	vneg.f32	s15, s14
 801bbb0:	edc8 7a00 	vstr	s15, [r8]
 801bbb4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801bbb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bbbc:	aa31      	add	r2, sp, #196	; 0xc4
 801bbbe:	2301      	movs	r3, #1
 801bbc0:	429c      	cmp	r4, r3
 801bbc2:	da20      	bge.n	801bc06 <__kernel_rem_pio2f+0x47e>
 801bbc4:	b10f      	cbz	r7, 801bbca <__kernel_rem_pio2f+0x442>
 801bbc6:	eef1 7a67 	vneg.f32	s15, s15
 801bbca:	edc8 7a01 	vstr	s15, [r8, #4]
 801bbce:	e7bb      	b.n	801bb48 <__kernel_rem_pio2f+0x3c0>
 801bbd0:	aa30      	add	r2, sp, #192	; 0xc0
 801bbd2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 801ba94 <__kernel_rem_pio2f+0x30c>
 801bbd6:	4413      	add	r3, r2
 801bbd8:	2c00      	cmp	r4, #0
 801bbda:	da05      	bge.n	801bbe8 <__kernel_rem_pio2f+0x460>
 801bbdc:	b10f      	cbz	r7, 801bbe2 <__kernel_rem_pio2f+0x45a>
 801bbde:	eef1 7a67 	vneg.f32	s15, s15
 801bbe2:	edc8 7a00 	vstr	s15, [r8]
 801bbe6:	e7af      	b.n	801bb48 <__kernel_rem_pio2f+0x3c0>
 801bbe8:	ed33 7a01 	vldmdb	r3!, {s14}
 801bbec:	3c01      	subs	r4, #1
 801bbee:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bbf2:	e7f1      	b.n	801bbd8 <__kernel_rem_pio2f+0x450>
 801bbf4:	ed73 7a01 	vldmdb	r3!, {s15}
 801bbf8:	3a01      	subs	r2, #1
 801bbfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 801bbfe:	e7d2      	b.n	801bba6 <__kernel_rem_pio2f+0x41e>
 801bc00:	eef0 7a47 	vmov.f32	s15, s14
 801bc04:	e7d4      	b.n	801bbb0 <__kernel_rem_pio2f+0x428>
 801bc06:	ecb2 7a01 	vldmia	r2!, {s14}
 801bc0a:	3301      	adds	r3, #1
 801bc0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bc10:	e7d6      	b.n	801bbc0 <__kernel_rem_pio2f+0x438>
 801bc12:	edd1 7a00 	vldr	s15, [r1]
 801bc16:	edd1 6a01 	vldr	s13, [r1, #4]
 801bc1a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801bc1e:	3801      	subs	r0, #1
 801bc20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bc24:	ed81 7a00 	vstr	s14, [r1]
 801bc28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bc2c:	edc1 7a01 	vstr	s15, [r1, #4]
 801bc30:	e799      	b.n	801bb66 <__kernel_rem_pio2f+0x3de>
 801bc32:	edd2 7a00 	vldr	s15, [r2]
 801bc36:	edd2 6a01 	vldr	s13, [r2, #4]
 801bc3a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801bc3e:	3901      	subs	r1, #1
 801bc40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801bc44:	ed82 7a00 	vstr	s14, [r2]
 801bc48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bc4c:	edc2 7a01 	vstr	s15, [r2, #4]
 801bc50:	e78e      	b.n	801bb70 <__kernel_rem_pio2f+0x3e8>
 801bc52:	ed33 7a01 	vldmdb	r3!, {s14}
 801bc56:	3c01      	subs	r4, #1
 801bc58:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bc5c:	e78f      	b.n	801bb7e <__kernel_rem_pio2f+0x3f6>
 801bc5e:	eef1 6a66 	vneg.f32	s13, s13
 801bc62:	eeb1 7a47 	vneg.f32	s14, s14
 801bc66:	edc8 6a00 	vstr	s13, [r8]
 801bc6a:	ed88 7a01 	vstr	s14, [r8, #4]
 801bc6e:	eef1 7a67 	vneg.f32	s15, s15
 801bc72:	e790      	b.n	801bb96 <__kernel_rem_pio2f+0x40e>

0801bc74 <__kernel_tanf>:
 801bc74:	b508      	push	{r3, lr}
 801bc76:	ee10 3a10 	vmov	r3, s0
 801bc7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801bc7e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801bc82:	eef0 7a40 	vmov.f32	s15, s0
 801bc86:	da17      	bge.n	801bcb8 <__kernel_tanf+0x44>
 801bc88:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801bc8c:	ee17 1a10 	vmov	r1, s14
 801bc90:	bb41      	cbnz	r1, 801bce4 <__kernel_tanf+0x70>
 801bc92:	1c43      	adds	r3, r0, #1
 801bc94:	4313      	orrs	r3, r2
 801bc96:	d108      	bne.n	801bcaa <__kernel_tanf+0x36>
 801bc98:	f7fe fc3a 	bl	801a510 <fabsf>
 801bc9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bca0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bca4:	eeb0 0a67 	vmov.f32	s0, s15
 801bca8:	bd08      	pop	{r3, pc}
 801bcaa:	2801      	cmp	r0, #1
 801bcac:	d0fa      	beq.n	801bca4 <__kernel_tanf+0x30>
 801bcae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801bcb2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bcb6:	e7f5      	b.n	801bca4 <__kernel_tanf+0x30>
 801bcb8:	494c      	ldr	r1, [pc, #304]	; (801bdec <__kernel_tanf+0x178>)
 801bcba:	428a      	cmp	r2, r1
 801bcbc:	db12      	blt.n	801bce4 <__kernel_tanf+0x70>
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	bfb8      	it	lt
 801bcc2:	eef1 7a40 	vneglt.f32	s15, s0
 801bcc6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801bdf0 <__kernel_tanf+0x17c>
 801bcca:	ee70 7a67 	vsub.f32	s15, s0, s15
 801bcce:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801bdf4 <__kernel_tanf+0x180>
 801bcd2:	bfb8      	it	lt
 801bcd4:	eef1 0a60 	vneglt.f32	s1, s1
 801bcd8:	ee70 0a60 	vsub.f32	s1, s0, s1
 801bcdc:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801bce0:	eddf 0a45 	vldr	s1, [pc, #276]	; 801bdf8 <__kernel_tanf+0x184>
 801bce4:	eddf 5a45 	vldr	s11, [pc, #276]	; 801bdfc <__kernel_tanf+0x188>
 801bce8:	ed9f 6a45 	vldr	s12, [pc, #276]	; 801be00 <__kernel_tanf+0x18c>
 801bcec:	ed9f 5a45 	vldr	s10, [pc, #276]	; 801be04 <__kernel_tanf+0x190>
 801bcf0:	493e      	ldr	r1, [pc, #248]	; (801bdec <__kernel_tanf+0x178>)
 801bcf2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801bcf6:	428a      	cmp	r2, r1
 801bcf8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801bcfc:	eea7 6a25 	vfma.f32	s12, s14, s11
 801bd00:	eddf 5a41 	vldr	s11, [pc, #260]	; 801be08 <__kernel_tanf+0x194>
 801bd04:	eee6 5a07 	vfma.f32	s11, s12, s14
 801bd08:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801be0c <__kernel_tanf+0x198>
 801bd0c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801bd10:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801be10 <__kernel_tanf+0x19c>
 801bd14:	eee6 5a07 	vfma.f32	s11, s12, s14
 801bd18:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801be14 <__kernel_tanf+0x1a0>
 801bd1c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801bd20:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801be18 <__kernel_tanf+0x1a4>
 801bd24:	eee7 5a05 	vfma.f32	s11, s14, s10
 801bd28:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801be1c <__kernel_tanf+0x1a8>
 801bd2c:	eea5 5a87 	vfma.f32	s10, s11, s14
 801bd30:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801be20 <__kernel_tanf+0x1ac>
 801bd34:	eee5 5a07 	vfma.f32	s11, s10, s14
 801bd38:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801be24 <__kernel_tanf+0x1b0>
 801bd3c:	eea5 5a87 	vfma.f32	s10, s11, s14
 801bd40:	eddf 5a39 	vldr	s11, [pc, #228]	; 801be28 <__kernel_tanf+0x1b4>
 801bd44:	eee5 5a07 	vfma.f32	s11, s10, s14
 801bd48:	eeb0 7a46 	vmov.f32	s14, s12
 801bd4c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801bd50:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801bd54:	eeb0 6a60 	vmov.f32	s12, s1
 801bd58:	eea7 6a05 	vfma.f32	s12, s14, s10
 801bd5c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801be2c <__kernel_tanf+0x1b8>
 801bd60:	eee6 0a26 	vfma.f32	s1, s12, s13
 801bd64:	eee5 0a07 	vfma.f32	s1, s10, s14
 801bd68:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801bd6c:	db1d      	blt.n	801bdaa <__kernel_tanf+0x136>
 801bd6e:	ee06 0a90 	vmov	s13, r0
 801bd72:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801bd76:	ee27 6a07 	vmul.f32	s12, s14, s14
 801bd7a:	ee37 7a00 	vadd.f32	s14, s14, s0
 801bd7e:	179b      	asrs	r3, r3, #30
 801bd80:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801bd84:	f003 0302 	and.w	r3, r3, #2
 801bd88:	f1c3 0301 	rsb	r3, r3, #1
 801bd8c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801bd90:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801bd94:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801bd98:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801bd9c:	ee07 3a90 	vmov	s15, r3
 801bda0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bda4:	ee67 7a80 	vmul.f32	s15, s15, s0
 801bda8:	e77c      	b.n	801bca4 <__kernel_tanf+0x30>
 801bdaa:	2801      	cmp	r0, #1
 801bdac:	d01b      	beq.n	801bde6 <__kernel_tanf+0x172>
 801bdae:	4b20      	ldr	r3, [pc, #128]	; (801be30 <__kernel_tanf+0x1bc>)
 801bdb0:	ee17 2a10 	vmov	r2, s14
 801bdb4:	401a      	ands	r2, r3
 801bdb6:	ee06 2a10 	vmov	s12, r2
 801bdba:	ee76 7a67 	vsub.f32	s15, s12, s15
 801bdbe:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801bdc2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801bdc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801bdca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bdce:	ee16 2a90 	vmov	r2, s13
 801bdd2:	4013      	ands	r3, r2
 801bdd4:	ee07 3a90 	vmov	s15, r3
 801bdd8:	eea6 7a27 	vfma.f32	s14, s12, s15
 801bddc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801bde0:	eee7 7a26 	vfma.f32	s15, s14, s13
 801bde4:	e75e      	b.n	801bca4 <__kernel_tanf+0x30>
 801bde6:	eef0 7a47 	vmov.f32	s15, s14
 801bdea:	e75b      	b.n	801bca4 <__kernel_tanf+0x30>
 801bdec:	3f2ca140 	.word	0x3f2ca140
 801bdf0:	3f490fda 	.word	0x3f490fda
 801bdf4:	33222168 	.word	0x33222168
 801bdf8:	00000000 	.word	0x00000000
 801bdfc:	b79bae5f 	.word	0xb79bae5f
 801be00:	38a3f445 	.word	0x38a3f445
 801be04:	37d95384 	.word	0x37d95384
 801be08:	3a1a26c8 	.word	0x3a1a26c8
 801be0c:	3b6b6916 	.word	0x3b6b6916
 801be10:	3cb327a4 	.word	0x3cb327a4
 801be14:	3e088889 	.word	0x3e088889
 801be18:	3895c07a 	.word	0x3895c07a
 801be1c:	398137b9 	.word	0x398137b9
 801be20:	3abede48 	.word	0x3abede48
 801be24:	3c11371f 	.word	0x3c11371f
 801be28:	3d5d0dd1 	.word	0x3d5d0dd1
 801be2c:	3eaaaaab 	.word	0x3eaaaaab
 801be30:	fffff000 	.word	0xfffff000

0801be34 <fabs>:
 801be34:	ec51 0b10 	vmov	r0, r1, d0
 801be38:	ee10 2a10 	vmov	r2, s0
 801be3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801be40:	ec43 2b10 	vmov	d0, r2, r3
 801be44:	4770      	bx	lr
	...

0801be48 <floor>:
 801be48:	ee10 1a90 	vmov	r1, s1
 801be4c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801be50:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801be54:	2b13      	cmp	r3, #19
 801be56:	b530      	push	{r4, r5, lr}
 801be58:	ee10 0a10 	vmov	r0, s0
 801be5c:	ee10 5a10 	vmov	r5, s0
 801be60:	dc31      	bgt.n	801bec6 <floor+0x7e>
 801be62:	2b00      	cmp	r3, #0
 801be64:	da15      	bge.n	801be92 <floor+0x4a>
 801be66:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801bf20 <floor+0xd8>
 801be6a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801be6e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801be72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be76:	dd07      	ble.n	801be88 <floor+0x40>
 801be78:	2900      	cmp	r1, #0
 801be7a:	da4e      	bge.n	801bf1a <floor+0xd2>
 801be7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801be80:	4318      	orrs	r0, r3
 801be82:	d001      	beq.n	801be88 <floor+0x40>
 801be84:	4928      	ldr	r1, [pc, #160]	; (801bf28 <floor+0xe0>)
 801be86:	2000      	movs	r0, #0
 801be88:	460b      	mov	r3, r1
 801be8a:	4602      	mov	r2, r0
 801be8c:	ec43 2b10 	vmov	d0, r2, r3
 801be90:	e020      	b.n	801bed4 <floor+0x8c>
 801be92:	4a26      	ldr	r2, [pc, #152]	; (801bf2c <floor+0xe4>)
 801be94:	411a      	asrs	r2, r3
 801be96:	ea01 0402 	and.w	r4, r1, r2
 801be9a:	4304      	orrs	r4, r0
 801be9c:	d01a      	beq.n	801bed4 <floor+0x8c>
 801be9e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801bf20 <floor+0xd8>
 801bea2:	ee30 0b07 	vadd.f64	d0, d0, d7
 801bea6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801beaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801beae:	ddeb      	ble.n	801be88 <floor+0x40>
 801beb0:	2900      	cmp	r1, #0
 801beb2:	bfbe      	ittt	lt
 801beb4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801beb8:	fa40 f303 	asrlt.w	r3, r0, r3
 801bebc:	18c9      	addlt	r1, r1, r3
 801bebe:	ea21 0102 	bic.w	r1, r1, r2
 801bec2:	2000      	movs	r0, #0
 801bec4:	e7e0      	b.n	801be88 <floor+0x40>
 801bec6:	2b33      	cmp	r3, #51	; 0x33
 801bec8:	dd05      	ble.n	801bed6 <floor+0x8e>
 801beca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bece:	d101      	bne.n	801bed4 <floor+0x8c>
 801bed0:	ee30 0b00 	vadd.f64	d0, d0, d0
 801bed4:	bd30      	pop	{r4, r5, pc}
 801bed6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801beda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bede:	40e2      	lsrs	r2, r4
 801bee0:	4202      	tst	r2, r0
 801bee2:	d0f7      	beq.n	801bed4 <floor+0x8c>
 801bee4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801bf20 <floor+0xd8>
 801bee8:	ee30 0b07 	vadd.f64	d0, d0, d7
 801beec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801bef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bef4:	ddc8      	ble.n	801be88 <floor+0x40>
 801bef6:	2900      	cmp	r1, #0
 801bef8:	da02      	bge.n	801bf00 <floor+0xb8>
 801befa:	2b14      	cmp	r3, #20
 801befc:	d103      	bne.n	801bf06 <floor+0xbe>
 801befe:	3101      	adds	r1, #1
 801bf00:	ea20 0002 	bic.w	r0, r0, r2
 801bf04:	e7c0      	b.n	801be88 <floor+0x40>
 801bf06:	2401      	movs	r4, #1
 801bf08:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801bf0c:	fa04 f303 	lsl.w	r3, r4, r3
 801bf10:	4418      	add	r0, r3
 801bf12:	42a8      	cmp	r0, r5
 801bf14:	bf38      	it	cc
 801bf16:	1909      	addcc	r1, r1, r4
 801bf18:	e7f2      	b.n	801bf00 <floor+0xb8>
 801bf1a:	2000      	movs	r0, #0
 801bf1c:	4601      	mov	r1, r0
 801bf1e:	e7b3      	b.n	801be88 <floor+0x40>
 801bf20:	8800759c 	.word	0x8800759c
 801bf24:	7e37e43c 	.word	0x7e37e43c
 801bf28:	bff00000 	.word	0xbff00000
 801bf2c:	000fffff 	.word	0x000fffff

0801bf30 <scalbn>:
 801bf30:	ee10 1a90 	vmov	r1, s1
 801bf34:	b510      	push	{r4, lr}
 801bf36:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801bf3a:	b98c      	cbnz	r4, 801bf60 <scalbn+0x30>
 801bf3c:	ee10 3a10 	vmov	r3, s0
 801bf40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801bf44:	430b      	orrs	r3, r1
 801bf46:	d011      	beq.n	801bf6c <scalbn+0x3c>
 801bf48:	ed9f 7b31 	vldr	d7, [pc, #196]	; 801c010 <scalbn+0xe0>
 801bf4c:	4b3c      	ldr	r3, [pc, #240]	; (801c040 <scalbn+0x110>)
 801bf4e:	ee20 0b07 	vmul.f64	d0, d0, d7
 801bf52:	4298      	cmp	r0, r3
 801bf54:	da0b      	bge.n	801bf6e <scalbn+0x3e>
 801bf56:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801c018 <scalbn+0xe8>
 801bf5a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801bf5e:	e005      	b.n	801bf6c <scalbn+0x3c>
 801bf60:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801bf64:	429c      	cmp	r4, r3
 801bf66:	d107      	bne.n	801bf78 <scalbn+0x48>
 801bf68:	ee30 0b00 	vadd.f64	d0, d0, d0
 801bf6c:	bd10      	pop	{r4, pc}
 801bf6e:	ee10 1a90 	vmov	r1, s1
 801bf72:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801bf76:	3c36      	subs	r4, #54	; 0x36
 801bf78:	4404      	add	r4, r0
 801bf7a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801bf7e:	429c      	cmp	r4, r3
 801bf80:	dd0d      	ble.n	801bf9e <scalbn+0x6e>
 801bf82:	ed9f 7b27 	vldr	d7, [pc, #156]	; 801c020 <scalbn+0xf0>
 801bf86:	ed9f 5b28 	vldr	d5, [pc, #160]	; 801c028 <scalbn+0xf8>
 801bf8a:	eeb0 6b47 	vmov.f64	d6, d7
 801bf8e:	ee10 3a90 	vmov	r3, s1
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	fe27 7b05 	vselge.f64	d7, d7, d5
 801bf98:	ee27 0b06 	vmul.f64	d0, d7, d6
 801bf9c:	e7e6      	b.n	801bf6c <scalbn+0x3c>
 801bf9e:	2c00      	cmp	r4, #0
 801bfa0:	dd0a      	ble.n	801bfb8 <scalbn+0x88>
 801bfa2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801bfa6:	ec53 2b10 	vmov	r2, r3, d0
 801bfaa:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801bfae:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801bfb2:	ec43 2b10 	vmov	d0, r2, r3
 801bfb6:	e7d9      	b.n	801bf6c <scalbn+0x3c>
 801bfb8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 801bfbc:	da19      	bge.n	801bff2 <scalbn+0xc2>
 801bfbe:	f24c 3350 	movw	r3, #50000	; 0xc350
 801bfc2:	4298      	cmp	r0, r3
 801bfc4:	ee10 3a90 	vmov	r3, s1
 801bfc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801bfcc:	dd09      	ble.n	801bfe2 <scalbn+0xb2>
 801bfce:	ed9f 0b14 	vldr	d0, [pc, #80]	; 801c020 <scalbn+0xf0>
 801bfd2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 801c028 <scalbn+0xf8>
 801bfd6:	eeb0 7b40 	vmov.f64	d7, d0
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	fe00 0b06 	vseleq.f64	d0, d0, d6
 801bfe0:	e7bb      	b.n	801bf5a <scalbn+0x2a>
 801bfe2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 801c018 <scalbn+0xe8>
 801bfe6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 801c030 <scalbn+0x100>
 801bfea:	eeb0 7b40 	vmov.f64	d7, d0
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	e7f4      	b.n	801bfdc <scalbn+0xac>
 801bff2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801bff6:	ec53 2b10 	vmov	r2, r3, d0
 801bffa:	3436      	adds	r4, #54	; 0x36
 801bffc:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801c000:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801c004:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801c038 <scalbn+0x108>
 801c008:	ec43 2b10 	vmov	d0, r2, r3
 801c00c:	e7a5      	b.n	801bf5a <scalbn+0x2a>
 801c00e:	bf00      	nop
 801c010:	00000000 	.word	0x00000000
 801c014:	43500000 	.word	0x43500000
 801c018:	c2f8f359 	.word	0xc2f8f359
 801c01c:	01a56e1f 	.word	0x01a56e1f
 801c020:	8800759c 	.word	0x8800759c
 801c024:	7e37e43c 	.word	0x7e37e43c
 801c028:	8800759c 	.word	0x8800759c
 801c02c:	fe37e43c 	.word	0xfe37e43c
 801c030:	c2f8f359 	.word	0xc2f8f359
 801c034:	81a56e1f 	.word	0x81a56e1f
 801c038:	00000000 	.word	0x00000000
 801c03c:	3c900000 	.word	0x3c900000
 801c040:	ffff3cb0 	.word	0xffff3cb0

0801c044 <expm1f>:
 801c044:	ee10 2a10 	vmov	r2, s0
 801c048:	497c      	ldr	r1, [pc, #496]	; (801c23c <expm1f+0x1f8>)
 801c04a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801c04e:	428b      	cmp	r3, r1
 801c050:	d920      	bls.n	801c094 <expm1f+0x50>
 801c052:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c056:	d902      	bls.n	801c05e <expm1f+0x1a>
 801c058:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c05c:	4770      	bx	lr
 801c05e:	d105      	bne.n	801c06c <expm1f+0x28>
 801c060:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801c064:	2a00      	cmp	r2, #0
 801c066:	fe20 0a27 	vselge.f32	s0, s0, s15
 801c06a:	4770      	bx	lr
 801c06c:	2a00      	cmp	r2, #0
 801c06e:	db05      	blt.n	801c07c <expm1f+0x38>
 801c070:	4973      	ldr	r1, [pc, #460]	; (801c240 <expm1f+0x1fc>)
 801c072:	428b      	cmp	r3, r1
 801c074:	d95c      	bls.n	801c130 <expm1f+0xec>
 801c076:	2000      	movs	r0, #0
 801c078:	f7fe b97c 	b.w	801a374 <__math_oflowf>
 801c07c:	eddf 7a71 	vldr	s15, [pc, #452]	; 801c244 <expm1f+0x200>
 801c080:	ee70 7a27 	vadd.f32	s15, s0, s15
 801c084:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c08c:	d550      	bpl.n	801c130 <expm1f+0xec>
 801c08e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c092:	4770      	bx	lr
 801c094:	496c      	ldr	r1, [pc, #432]	; (801c248 <expm1f+0x204>)
 801c096:	428b      	cmp	r3, r1
 801c098:	d966      	bls.n	801c168 <expm1f+0x124>
 801c09a:	496c      	ldr	r1, [pc, #432]	; (801c24c <expm1f+0x208>)
 801c09c:	428b      	cmp	r3, r1
 801c09e:	d847      	bhi.n	801c130 <expm1f+0xec>
 801c0a0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 801c250 <expm1f+0x20c>
 801c0a4:	2a00      	cmp	r2, #0
 801c0a6:	bfa7      	ittee	ge
 801c0a8:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801c0ac:	eddf 7a69 	vldrge	s15, [pc, #420]	; 801c254 <expm1f+0x210>
 801c0b0:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 801c258 <expm1f+0x214>
 801c0b4:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801c0b8:	bfac      	ite	ge
 801c0ba:	2301      	movge	r3, #1
 801c0bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c0c0:	ee37 0a67 	vsub.f32	s0, s14, s15
 801c0c4:	ee37 7a40 	vsub.f32	s14, s14, s0
 801c0c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c0cc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801c0d0:	ee20 4a25 	vmul.f32	s8, s0, s11
 801c0d4:	ed9f 6a61 	vldr	s12, [pc, #388]	; 801c25c <expm1f+0x218>
 801c0d8:	eddf 6a61 	vldr	s13, [pc, #388]	; 801c260 <expm1f+0x21c>
 801c0dc:	ed9f 5a61 	vldr	s10, [pc, #388]	; 801c264 <expm1f+0x220>
 801c0e0:	ee20 7a04 	vmul.f32	s14, s0, s8
 801c0e4:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801c0e8:	eee7 6a06 	vfma.f32	s13, s14, s12
 801c0ec:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 801c268 <expm1f+0x224>
 801c0f0:	eea6 6a87 	vfma.f32	s12, s13, s14
 801c0f4:	eddf 6a5d 	vldr	s13, [pc, #372]	; 801c26c <expm1f+0x228>
 801c0f8:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c0fc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801c100:	eea6 5a87 	vfma.f32	s10, s13, s14
 801c104:	eef0 6a46 	vmov.f32	s13, s12
 801c108:	eee5 6a07 	vfma.f32	s13, s10, s14
 801c10c:	eee4 4a66 	vfms.f32	s9, s8, s13
 801c110:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 801c114:	eea0 4a64 	vfms.f32	s8, s0, s9
 801c118:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801c11c:	eec5 6a04 	vdiv.f32	s13, s10, s8
 801c120:	ee66 6a87 	vmul.f32	s13, s13, s14
 801c124:	bb73      	cbnz	r3, 801c184 <expm1f+0x140>
 801c126:	eef0 7a47 	vmov.f32	s15, s14
 801c12a:	eed0 7a26 	vfnms.f32	s15, s0, s13
 801c12e:	e024      	b.n	801c17a <expm1f+0x136>
 801c130:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801c134:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c138:	2a00      	cmp	r2, #0
 801c13a:	fe67 7a87 	vselge.f32	s15, s15, s14
 801c13e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801c270 <expm1f+0x22c>
 801c142:	eddf 6a43 	vldr	s13, [pc, #268]	; 801c250 <expm1f+0x20c>
 801c146:	ee40 7a07 	vmla.f32	s15, s0, s14
 801c14a:	eeb0 7a40 	vmov.f32	s14, s0
 801c14e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c152:	ee17 3a90 	vmov	r3, s15
 801c156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c15a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801c15e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801c254 <expm1f+0x210>
 801c162:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c166:	e7ab      	b.n	801c0c0 <expm1f+0x7c>
 801c168:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801c16c:	d208      	bcs.n	801c180 <expm1f+0x13c>
 801c16e:	eddf 7a41 	vldr	s15, [pc, #260]	; 801c274 <expm1f+0x230>
 801c172:	ee70 7a27 	vadd.f32	s15, s0, s15
 801c176:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801c17a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c17e:	4770      	bx	lr
 801c180:	2300      	movs	r3, #0
 801c182:	e7a3      	b.n	801c0cc <expm1f+0x88>
 801c184:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801c188:	1c5a      	adds	r2, r3, #1
 801c18a:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801c18e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c192:	d106      	bne.n	801c1a2 <expm1f+0x15e>
 801c194:	ee70 7a67 	vsub.f32	s15, s0, s15
 801c198:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801c19c:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801c1a0:	4770      	bx	lr
 801c1a2:	2b01      	cmp	r3, #1
 801c1a4:	d118      	bne.n	801c1d8 <expm1f+0x194>
 801c1a6:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801c1aa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801c1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1b2:	bf5b      	ittet	pl
 801c1b4:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 801c1b8:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 801c1bc:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 801c1c0:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 801c1c4:	bf43      	ittte	mi
 801c1c6:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 801c1ca:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801c1ce:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 801c1d2:	eeb0 0a46 	vmovpl.f32	s0, s12
 801c1d6:	4770      	bx	lr
 801c1d8:	1c5a      	adds	r2, r3, #1
 801c1da:	2a39      	cmp	r2, #57	; 0x39
 801c1dc:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801c1e0:	d90b      	bls.n	801c1fa <expm1f+0x1b6>
 801c1e2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c1e6:	ee36 0a40 	vsub.f32	s0, s12, s0
 801c1ea:	ee10 3a10 	vmov	r3, s0
 801c1ee:	440b      	add	r3, r1
 801c1f0:	ee00 3a10 	vmov	s0, r3
 801c1f4:	ee30 0a46 	vsub.f32	s0, s0, s12
 801c1f8:	4770      	bx	lr
 801c1fa:	2b16      	cmp	r3, #22
 801c1fc:	dc11      	bgt.n	801c222 <expm1f+0x1de>
 801c1fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801c202:	fa42 f303 	asr.w	r3, r2, r3
 801c206:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801c20a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c20e:	ee07 3a90 	vmov	s15, r3
 801c212:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c216:	ee10 3a10 	vmov	r3, s0
 801c21a:	440b      	add	r3, r1
 801c21c:	ee00 3a10 	vmov	s0, r3
 801c220:	4770      	bx	lr
 801c222:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801c226:	05db      	lsls	r3, r3, #23
 801c228:	ee07 3a10 	vmov	s14, r3
 801c22c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c230:	ee70 7a67 	vsub.f32	s15, s0, s15
 801c234:	ee37 0a86 	vadd.f32	s0, s15, s12
 801c238:	e7ed      	b.n	801c216 <expm1f+0x1d2>
 801c23a:	bf00      	nop
 801c23c:	4195b843 	.word	0x4195b843
 801c240:	42b17217 	.word	0x42b17217
 801c244:	0da24260 	.word	0x0da24260
 801c248:	3eb17218 	.word	0x3eb17218
 801c24c:	3f851591 	.word	0x3f851591
 801c250:	3f317180 	.word	0x3f317180
 801c254:	3717f7d1 	.word	0x3717f7d1
 801c258:	b717f7d1 	.word	0xb717f7d1
 801c25c:	b457edbb 	.word	0xb457edbb
 801c260:	36867e54 	.word	0x36867e54
 801c264:	bd088889 	.word	0xbd088889
 801c268:	b8a670cd 	.word	0xb8a670cd
 801c26c:	3ad00d01 	.word	0x3ad00d01
 801c270:	3fb8aa3b 	.word	0x3fb8aa3b
 801c274:	7149f2ca 	.word	0x7149f2ca

0801c278 <floorf>:
 801c278:	ee10 3a10 	vmov	r3, s0
 801c27c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c280:	3a7f      	subs	r2, #127	; 0x7f
 801c282:	2a16      	cmp	r2, #22
 801c284:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801c288:	dc2a      	bgt.n	801c2e0 <floorf+0x68>
 801c28a:	2a00      	cmp	r2, #0
 801c28c:	da11      	bge.n	801c2b2 <floorf+0x3a>
 801c28e:	eddf 7a18 	vldr	s15, [pc, #96]	; 801c2f0 <floorf+0x78>
 801c292:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c296:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c29e:	dd05      	ble.n	801c2ac <floorf+0x34>
 801c2a0:	2b00      	cmp	r3, #0
 801c2a2:	da23      	bge.n	801c2ec <floorf+0x74>
 801c2a4:	4a13      	ldr	r2, [pc, #76]	; (801c2f4 <floorf+0x7c>)
 801c2a6:	2900      	cmp	r1, #0
 801c2a8:	bf18      	it	ne
 801c2aa:	4613      	movne	r3, r2
 801c2ac:	ee00 3a10 	vmov	s0, r3
 801c2b0:	4770      	bx	lr
 801c2b2:	4911      	ldr	r1, [pc, #68]	; (801c2f8 <floorf+0x80>)
 801c2b4:	4111      	asrs	r1, r2
 801c2b6:	420b      	tst	r3, r1
 801c2b8:	d0fa      	beq.n	801c2b0 <floorf+0x38>
 801c2ba:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801c2f0 <floorf+0x78>
 801c2be:	ee30 0a27 	vadd.f32	s0, s0, s15
 801c2c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801c2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c2ca:	ddef      	ble.n	801c2ac <floorf+0x34>
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	bfbe      	ittt	lt
 801c2d0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801c2d4:	fa40 f202 	asrlt.w	r2, r0, r2
 801c2d8:	189b      	addlt	r3, r3, r2
 801c2da:	ea23 0301 	bic.w	r3, r3, r1
 801c2de:	e7e5      	b.n	801c2ac <floorf+0x34>
 801c2e0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801c2e4:	d3e4      	bcc.n	801c2b0 <floorf+0x38>
 801c2e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c2ea:	4770      	bx	lr
 801c2ec:	2300      	movs	r3, #0
 801c2ee:	e7dd      	b.n	801c2ac <floorf+0x34>
 801c2f0:	7149f2ca 	.word	0x7149f2ca
 801c2f4:	bf800000 	.word	0xbf800000
 801c2f8:	007fffff 	.word	0x007fffff

0801c2fc <scalbnf>:
 801c2fc:	ee10 3a10 	vmov	r3, s0
 801c300:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801c304:	d024      	beq.n	801c350 <scalbnf+0x54>
 801c306:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801c30a:	d302      	bcc.n	801c312 <scalbnf+0x16>
 801c30c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c310:	4770      	bx	lr
 801c312:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801c316:	d121      	bne.n	801c35c <scalbnf+0x60>
 801c318:	4b29      	ldr	r3, [pc, #164]	; (801c3c0 <scalbnf+0xc4>)
 801c31a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801c3c4 <scalbnf+0xc8>
 801c31e:	4298      	cmp	r0, r3
 801c320:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c324:	db15      	blt.n	801c352 <scalbnf+0x56>
 801c326:	ee10 3a10 	vmov	r3, s0
 801c32a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c32e:	3a19      	subs	r2, #25
 801c330:	4402      	add	r2, r0
 801c332:	2afe      	cmp	r2, #254	; 0xfe
 801c334:	dd14      	ble.n	801c360 <scalbnf+0x64>
 801c336:	eddf 7a24 	vldr	s15, [pc, #144]	; 801c3c8 <scalbnf+0xcc>
 801c33a:	eddf 6a24 	vldr	s13, [pc, #144]	; 801c3cc <scalbnf+0xd0>
 801c33e:	ee10 3a10 	vmov	r3, s0
 801c342:	eeb0 7a67 	vmov.f32	s14, s15
 801c346:	2b00      	cmp	r3, #0
 801c348:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801c34c:	ee27 0a27 	vmul.f32	s0, s14, s15
 801c350:	4770      	bx	lr
 801c352:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801c3d0 <scalbnf+0xd4>
 801c356:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c35a:	4770      	bx	lr
 801c35c:	0dd2      	lsrs	r2, r2, #23
 801c35e:	e7e7      	b.n	801c330 <scalbnf+0x34>
 801c360:	2a00      	cmp	r2, #0
 801c362:	dd06      	ble.n	801c372 <scalbnf+0x76>
 801c364:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c368:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801c36c:	ee00 3a10 	vmov	s0, r3
 801c370:	4770      	bx	lr
 801c372:	f112 0f16 	cmn.w	r2, #22
 801c376:	da19      	bge.n	801c3ac <scalbnf+0xb0>
 801c378:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c37c:	4298      	cmp	r0, r3
 801c37e:	ee10 3a10 	vmov	r3, s0
 801c382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c386:	dd09      	ble.n	801c39c <scalbnf+0xa0>
 801c388:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 801c3c8 <scalbnf+0xcc>
 801c38c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 801c3cc <scalbnf+0xd0>
 801c390:	eef0 7a40 	vmov.f32	s15, s0
 801c394:	2b00      	cmp	r3, #0
 801c396:	fe00 0a07 	vseleq.f32	s0, s0, s14
 801c39a:	e7dc      	b.n	801c356 <scalbnf+0x5a>
 801c39c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801c3d0 <scalbnf+0xd4>
 801c3a0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801c3d4 <scalbnf+0xd8>
 801c3a4:	eef0 7a40 	vmov.f32	s15, s0
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	e7f4      	b.n	801c396 <scalbnf+0x9a>
 801c3ac:	3219      	adds	r2, #25
 801c3ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c3b2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801c3b6:	eddf 7a08 	vldr	s15, [pc, #32]	; 801c3d8 <scalbnf+0xdc>
 801c3ba:	ee07 3a10 	vmov	s14, r3
 801c3be:	e7c5      	b.n	801c34c <scalbnf+0x50>
 801c3c0:	ffff3cb0 	.word	0xffff3cb0
 801c3c4:	4c000000 	.word	0x4c000000
 801c3c8:	7149f2ca 	.word	0x7149f2ca
 801c3cc:	f149f2ca 	.word	0xf149f2ca
 801c3d0:	0da24260 	.word	0x0da24260
 801c3d4:	8da24260 	.word	0x8da24260
 801c3d8:	33000000 	.word	0x33000000

0801c3dc <__errno>:
 801c3dc:	4b01      	ldr	r3, [pc, #4]	; (801c3e4 <__errno+0x8>)
 801c3de:	6818      	ldr	r0, [r3, #0]
 801c3e0:	4770      	bx	lr
 801c3e2:	bf00      	nop
 801c3e4:	20000128 	.word	0x20000128

0801c3e8 <_init>:
 801c3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3ea:	bf00      	nop
 801c3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c3ee:	bc08      	pop	{r3}
 801c3f0:	469e      	mov	lr, r3
 801c3f2:	4770      	bx	lr

0801c3f4 <_fini>:
 801c3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3f6:	bf00      	nop
 801c3f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c3fa:	bc08      	pop	{r3}
 801c3fc:	469e      	mov	lr, r3
 801c3fe:	4770      	bx	lr
